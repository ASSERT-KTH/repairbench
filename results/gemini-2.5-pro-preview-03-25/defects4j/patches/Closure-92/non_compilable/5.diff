diff --git a/tmp/a99b0bb1-c2be-494e-974c-801dceaa3a70_buggy.java b/tmp/71a0a9a4-7fef-48d5-aafb-6b8062b6a47f_fixed.java
index 851ffc2..617dfe2 100644
--- a/tmp/a99b0bb1-c2be-494e-974c-801dceaa3a70_buggy.java
+++ b/tmp/71a0a9a4-7fef-48d5-aafb-6b8062b6a47f_fixed.java
@@ -1,70 +1,114 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
+        // If the candidate definition is the same as the explicit node,
+        // then they are the same node, and we don't need to do anything.
+        // This happens often in Closure code. See testDuplicateProvideIssue774.
+        if (candidateDefinition == explicitNode) {
+           replacementNode = candidateDefinition;
+           return;
+        }
+
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
+        // If candidate definition is an EXPR_RESULT, then it is an assignment.
+        // If the name on the left of the assign has not been declared,
+        // convert the assign to a var declaration.
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
-          if (nameNode.getType() == Token.NAME) {
+          if (nameNode.isQualifiedName()) {
             // Need to convert this assign to a var declaration.
+            Var var = compiler.getScopeCreator().createScope(candidateDefinition, null).getVar(
+                nameNode.getQualifiedName());
+            // Check if the name is already declared OR is not a global name.
+            // If it's not a global name, we can't declare it in the global scope.
+            // If it's already declared, we don't need to redeclare it.
+            // It may be defined in multiple modules, but it will be declared
+            // in the first module that requires it.
+            if (var == null || (!var.isExtern() && var.getScope().isGlobal() && var.getNode() == null
+                && var.getInitialValue() == null)) {
+              // Convert 'a.b = ...' to 'var a = {}; a.b = ...'.
+              // We make sure to do this even if the namespace is provided
+              // elsewhere.
               Node valueNode = nameNode.getNext();
               assignNode.removeChild(nameNode);
               assignNode.removeChild(valueNode);
               nameNode.addChildToFront(valueNode);
               Node varNode = new Node(Token.VAR, nameNode);
-            varNode.copyInformationFrom(candidateDefinition);
+              varNode.copyInformationFromForTree(candidateDefinition);
               candidateDefinition.getParent().replaceChild(
                   candidateDefinition, varNode);
               nameNode.setJSDocInfo(assignNode.getJSDocInfo());
               compiler.reportCodeChange();
               replacementNode = varNode;
             }
           }
+        }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
+          // Insert the declaration before the first node (goog.provide call).
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
-            // Any old place is fine.
+            // Top-level namespace, add it to the beginning or end of the module.
+            // Adding to the back is simpler as it avoids ordering issues with
+            // potential existing declarations.
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
-            // Add it after the parent namespace.
+            // Add it after the parent namespace if possible.
             ProvidedName parentName =
                 providedNames.get(namespace.substring(0, indexOfDot));
             Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
+
+            // Ensure the parent replacement node is available and in the AST.
+            // It might not be if the parent is also being moved to this module
+            // and hasn't been processed yet.
+            if (parentName.replacementNode != null &&
+                parentName.replacementNode.getParent() != null) {
+              // Parent node exists and is in the tree, insert after it.
               parentName.replacementNode.getParent().addChildAfter(
                   replacementNode, parentName.replacementNode);
+            } else {
+              // Parent isn't ready yet (likely also being moved).
+              // Fall back to adding the node to the end of the module.
+              // This ensures the node is added, although the relative order
+              // might not be strictly sequential if processing order varies.
+              compiler.getNodeForCodeInsertion(minimumModule)
+                  .addChildToBack(replacementNode);
             }
           }
-        if (explicitNode != null) {
+        }
+
+        // Remove the original goog.provide call if it exists and wasn't
+        // already handled (e.g., wasn't the candidate definition).
+        if (explicitNode != null && explicitNode != candidateDefinition) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
