diff --git a/tmp/82bd1a41-cff1-4384-b491-fe2fe8d988ad_buggy.java b/tmp/e0296d42-9e36-4db5-823f-194bb47d25bb_fixed.java
index 851ffc2..5cd5a10 100644
--- a/tmp/82bd1a41-cff1-4384-b491-fe2fe8d988ad_buggy.java
+++ b/tmp/e0296d42-9e36-4db5-823f-194bb47d25bb_fixed.java
@@ -1,70 +1,121 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
+        // replacementNode is already null and the processor will ignore it.
+        if (candidateDefinition != null && !NodeUtil.isNamespaceDecl(candidateDefinition)) {
+          // If there is a candidate definition, convert it to a namespace placeholder.
           replacementNode = candidateDefinition;
+          // TODO(b/16156439): Make this preserve the full original candidate definition,
+          // including the RHS and any JSdoc. This doesn't matter for 'goog' which is special,
+          // but could matter for other top-level namespaces.
+          replacementNode.putBooleanProp(Node.IS_NAMESPACE, true);
+        }
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
-          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
-          if (nameNode.getType() == Token.NAME) {
+          if (nameNode.isQualifiedName()) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
+
+            Node varNode;
+            // If the name is simple ('a = {};') create 'var a = {};'
+            if (nameNode.isName()) {
               nameNode.addChildToFront(valueNode);
-            Node varNode = new Node(Token.VAR, nameNode);
+              varNode = new Node(Token.VAR, nameNode);
+            } else {
+              // If the name is qualified ('a.b = {};') create 'var a = {}; a.b = {};'
+              // The parent namespace ('a') should have been created already. Find its VAR node.
+              ProvidedName parentName =
+                  providedNames.get(namespace.substring(0, namespace.lastIndexOf('.')));
+              Preconditions.checkState(parentName != null, "Parent namespace %s not provided.", parentName);
+              Preconditions.checkState(parentName.replacementNode != null,
+                  "Parent namespace %s should have been replaced.", parentName.namespace);
+              // Create 'a.b = value;'
+              Node assign = new Node(Token.ASSIGN, nameNode, valueNode);
+              // Wrap in EXPR_RESULT statement
+              varNode = new Node(Token.EXPR_RESULT, assign);
+              // Add it after the parent VAR node.
+              parentName.replacementNode.getParent().addChildAfter(varNode, parentName.replacementNode);
+              // The 'replacementNode' for 'a.b' will be this new EXPR_RESULT node.
+            }
+
             varNode.copyInformationFrom(candidateDefinition);
-            candidateDefinition.getParent().replaceChild(
-                candidateDefinition, varNode);
-            nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+            // Replace the original expression statement.
+            candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);
+            // Transfer the JSDoc to the new node. For VAR, attach to the NAME node;
+            // for EXPR_RESULT, attach to the EXPR_RESULT itself.
+            Node nodeForJsDoc = varNode.isVar() ? varNode.getFirstChild() : varNode;
+            nodeForJsDoc.setJSDocInfo(assignNode.getJSDocInfo());
+            varNode.putBooleanProp(Node.IS_NAMESPACE, true);
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
+        } else {
+           // Definition is already acceptable (like a VAR or function)
+           replacementNode.putBooleanProp(Node.IS_NAMESPACE, true);
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
+
+        // If the node is null, maybe there was an error. Return.
+        if (replacementNode == null) {
+          return;
+        }
+
         if (firstModule == minimumModule) {
+          // Declare the variable in the first module that provided it.
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
-            // Any old place is fine.
+            // Any old place is fine. Add it to the beginning of the module.
+            // We add to the beginning because the name might be used directly
+            // by code lower down.
             compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
+                .addChildToFront(replacementNode);
           } else {
             // Add it after the parent namespace.
             ProvidedName parentName =
                 providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
+            Preconditions.checkNotNull(parentName, "Parent namespace %s not provided.", namespace);
+
+            // Make sure the parent namespace has been processed.
+            Preconditions.checkState(parentName.replacementNode != null,
+                "Parent namespace %s should have been replaced.", parentName.namespace);
+
+            Node parentNode = parentName.replacementNode;
+            Node parentScript = parentNode.getParent();
+
+            Preconditions.checkNotNull(parentScript, "Parent node %s should have parent", parentNode);
+            parentScript.addChildAfter(replacementNode, parentNode);
           }
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
