diff --git a/tmp/c89864eb-3cc7-4d06-ac3f-eef673e7a218_buggy.java b/tmp/e3cecf39-8d94-4c30-b18d-25edcf69d6de_fixed.java
index 851ffc2..89f6250 100644
--- a/tmp/c89864eb-3cc7-4d06-ac3f-eef673e7a218_buggy.java
+++ b/tmp/e3cecf39-8d94-4c30-b18d-25edcf69d6de_fixed.java
@@ -1,70 +1,109 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
-        replacementNode = candidateDefinition;
+        // ProvidedNames that aren't constructs should become empty objects.
+        replacementNode = candidateDefinition != null ? candidateDefinition : createDeclarationNode();
+        if (replacementNode == null) {
+           explicitNode.detachFromParent(); // Ensure the goog.provide is removed
+           compiler.reportCodeChange();
+        }
+        // Note: replacementNode may be null if candidateDefinition was null
+        // and createDeclarationNode decided not to create a node (e.g. for goog itself).
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
-        if (NodeUtil.isExpressionNode(candidateDefinition)) {
+        // Don't try to change a FUNCTION node to a VAR. It's fine the way
+        // it is.
+        if (NodeUtil.isExpressionNode(candidateDefinition) &&
+            candidateDefinition.getFirstChild().getType() == Token.ASSIGN) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
-            varNode.copyInformationFrom(candidateDefinition);
+            varNode.copyInformationFromForTree(candidateDefinition);
+
+            // Move JSDoc info to the new node. It is harmless to move it
+            // if it is null.
+            nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+            assignNode.setJSDocInfo(null);
+            if (candidateDefinition.getJSDocInfo() != null) {
+              varNode.setJSDocInfo(candidateDefinition.getJSDocInfo());
+              candidateDefinition.setJSDocInfo(null);
+            }
+
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
-            nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
+        if (replacementNode == null) {
+          // createDeclarationNode decided not to create a node.
+          if (explicitNode != null) {
+             explicitNode.detachFromParent();
+             compiler.reportCodeChange();
+          }
+          return;
+        }
+
+
         if (firstModule == minimumModule) {
+           // Inject the declaration into the first module.
+           Preconditions.checkNotNull(firstNode); // Should not be null if we got here.
            firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
             // Any old place is fine.
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
             // Add it after the parent namespace.
             ProvidedName parentName =
                 providedNames.get(namespace.substring(0, indexOfDot));
             Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
+            Preconditions.checkNotNull(parentName.replacementNode, "Parent namespace %s did not have a replacement node", parentName.namespace);
+
+            // Make sure the parent namespace has been injected into the AST.
+            Preconditions.checkNotNull(parentName.replacementNode.getParent(), "Parent namespace %s replacement node %s was not injected into the AST", parentName.namespace, parentName.replacementNode);
+            // Insert the new node after the parent node's replacement node.
+            if (parentName.replacementNode.getNext() == null) {
+              parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);
+            } else {
+              parentName.replacementNode.getParent().addChildBefore(replacementNode, parentName.replacementNode.getNext());
             }
           }
+        }
+
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
