diff --git a/tmp/56533967-220b-407b-a3e3-252e5f09b856_buggy.java b/tmp/d5dcf73d-58ae-4159-a94d-78d452fb2eed_fixed.java
index 50f3e2e..b9747ed 100644
--- a/tmp/56533967-220b-407b-a3e3-252e5f09b856_buggy.java
+++ b/tmp/d5dcf73d-58ae-4159-a94d-78d452fb2eed_fixed.java
@@ -1,7 +1,36 @@
     /** Get a line with reversed direction.
      * @return a new instance, with reversed direction
      */
     public Line revert() {
-        final Line reverted = new Line(zero, zero.subtract(direction));
+        // The original implementation using new Line(zero, zero.subtract(direction))
+        // suffered from numerical inaccuracies. The Line(p1, p2) constructor
+        // calculates the direction as (p2-p1).normalize(). If p2-p1 is -direction
+        // (where direction is supposed to be a unit vector), (-direction).normalize()
+        // might not be numerically identical to -direction due to floating-point
+        // computation of the norm potentially not being exactly 1.0, leading to
+        // small errors after division.
+
+        // To avoid this, we choose two points p1 and p2 on the line such that
+        // the vector p2-p1 is simple to normalize accurately.
+        // Let p1 = zero + direction
+        // Let p2 = zero - direction
+        // Then p2-p1 = (zero - direction) - (zero + direction) = -2 * direction.
+        // The norm of this vector is ||-2 * direction|| = 2 * ||direction|| = 2.0 (since direction is normalized).
+        // The constructor will calculate the new direction as (-2 * direction).normalize()
+        // which involves dividing by the norm 2.0. This division (-2 * direction) / 2.0
+        // should yield exactly -direction numerically.
+
+        // This also ensures the 'zero' point of the line remains the same:
+        // The constructor calculates zero as p1 - p1.dotProduct(newDirection) * newDirection
+        // newDirection = -direction
+        // coeff = p1.dotProduct(newDirection) = (zero + direction).dotProduct(-direction)
+        //       = zero.dotProduct(-direction) + direction.dotProduct(-direction) = 0 - 1 = -1
+        // newZero = p1 - coeff * newDirection = (zero + direction) - (-1) * (-direction)
+        //         = zero + direction - direction = zero
+        // So the resulting line has the correct zero point (this.zero) and direction (-this.direction).
+
+        final Vector3D p1 = zero.add(direction);
+        final Vector3D p2 = zero.subtract(direction);
+        final Line reverted = new Line(p1, p2);
         return reverted;
     }
\ No newline at end of file
