diff --git a/tmp/d8089b9b-42d1-4cc8-9388-96117a34f117_buggy.java b/tmp/c5365829-5118-48c7-b465-ece579cde62c_fixed.java
index 50f3e2e..9c82d9f 100644
--- a/tmp/d8089b9b-42d1-4cc8-9388-96117a34f117_buggy.java
+++ b/tmp/c5365829-5118-48c7-b465-ece579cde62c_fixed.java
@@ -1,7 +1,30 @@
     /** Get a line with reversed direction.
      * @return a new instance, with reversed direction
      */
     public Line revert() {
-        final Line reverted = new Line(zero, zero.subtract(direction));
+        // The reverted line should have the same origin point (closest to the coordinate system origin)
+        // but the opposite direction vector.
+        // The original implementation used new Line(zero, zero.subtract(direction)).
+        // The Line(p1, p2) constructor calculates the direction as (p2 - p1).normalize().
+        // In the original code, this was ((zero - direction) - zero).normalize().
+        // Subtracting zero (which can have large coordinates) after subtracting direction
+        // from it can lead to loss of precision, especially if 'zero' is far from the origin.
+        // This caused the resulting normalized direction to deviate slightly from '-direction'.
+
+        // A more numerically stable way to construct the reversed line using the Line(p1, p2)
+        // constructor is to choose two points, pA and pB, on the line such that pB - pA is
+        // parallel to -direction and the calculation is less prone to precision loss.
+        // We can choose points symmetric around the line's origin 'zero':
+        // pA = zero + direction
+        // pB = zero - direction
+        // Then the vector pB - pA = (zero - direction) - (zero + direction) = -2 * direction.
+        // The constructor Line(pA, pB) will compute the direction as (pB - pA).normalize(),
+        // which simplifies to (-2 * direction).normalize(). Since 'direction' is already
+        // normalized, this accurately yields '-direction'.
+        // The constructor also re-calculates the line's origin ('zero' field), and using
+        // pA and -direction, it will correctly compute the original 'zero' point.
+        final Vector3D p1 = zero.add(direction);
+        final Vector3D p2 = zero.subtract(direction);
+        final Line reverted = new Line(p1, p2);
         return reverted;
     }
\ No newline at end of file
