diff --git a/tmp/8f422698-b3d8-477c-9a41-42d411d78e04_buggy.java b/tmp/3b6e6f9c-e46e-4331-9b34-64b4705f1036_fixed.java
index 50f3e2e..4973b07 100644
--- a/tmp/8f422698-b3d8-477c-9a41-42d411d78e04_buggy.java
+++ b/tmp/3b6e6f9c-e46e-4331-9b34-64b4705f1036_fixed.java
@@ -1,7 +1,17 @@
     /** Get a line with reversed direction.
      * @return a new instance, with reversed direction
      */
     public Line revert() {
-        final Line reverted = new Line(zero, zero.subtract(direction));
+        // The original implementation used the public constructor Line(p1, p2),
+        // which calculates the direction as (p2-p1).normalize().
+        // Even if (p2-p1) is already normalized (like -direction is),
+        // calling normalize() again can introduce small floating-point errors,
+        // causing the test to fail.
+        // The fix uses the private constructor Line(zero, direction) which
+        // directly assigns the direction without re-normalizing, assuming the
+        // provided direction is already normalized. Negating a normalized vector
+        // results in a normalized vector.
+        // The 'zero' point (point on the line closest to the origin) remains the same.
+        final Line reverted = new Line(this.zero, this.direction.negate());
         return reverted;
     }
