diff --git a/tmp/dd19af8f-56dc-486e-9967-87ad39ba636f_buggy.java b/tmp/6094d4f4-6d35-4e99-ae49-03297f1af8b5_fixed.java
index 86d77b0..01053a8 100644
--- a/tmp/dd19af8f-56dc-486e-9967-87ad39ba636f_buggy.java
+++ b/tmp/6094d4f4-6d35-4e99-ae49-03297f1af8b5_fixed.java
@@ -1,72 +1,89 @@
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
-        case '\0': sb.append("\\0"); break;
+        // Use \000 for null characters, because \0 is technically an octal
+        // escape in JavaScript.
+        case '\0': sb.append("\\000"); break;
         case '\n': sb.append("\\n"); break;
         case '\r': sb.append("\\r"); break;
         case '\t': sb.append("\\t"); break;
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
         case '\'': sb.append(singlequoteEscape); break;
         case '>':                       // Break --> into --\> or ]]> into ]]\>
           if (i >= 2 &&
               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
             sb.append("\\>");
           } else {
             sb.append(c);
           }
           break;
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
 
           // Break <!-- into <\!--
           final String START_COMMENT = "!--";
 
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                               END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                      START_COMMENT.length())) {
+            // Break <!-- into <\!-- without matching -->
+            // See http://code.google.com/p/google-caja/issues/detail?id=1113
             sb.append("<\\");
           } else {
             sb.append(c);
           }
           break;
         default:
           // If we're given an outputCharsetEncoder, then check if the
           //  character can be represented in this character set.
           if (outputCharsetEncoder != null) {
             if (outputCharsetEncoder.canEncode(c)) {
               sb.append(c);
             } else {
               // Unicode-escape the character.
               appendHexJavaScriptRepresentation(sb, c);
             }
           } else {
             // No charsetEncoder provided - pass straight latin characters
             // through, and escape the rest.  Doing the explicit character
             // check is measurably faster than using the CharsetEncoder.
+            // Append printable ASCII characters (but not space, which is < 0x20
+            // and handled below) literally.
             if (c > 0x1f && c < 0x7f) {
               sb.append(c);
             } else {
               // Other characters can be misinterpreted by some js parsers,
               // or perhaps mangled by proxies along the way,
               // so we play it safe and unicode escape them.
               appendHexJavaScriptRepresentation(sb, c);
             }
           }
       }
     }
     sb.append(quote);
     return sb.toString();
   }
+
+  // Helper function assumed to exist based on the original code context
+  // This is just a placeholder implementation for completeness
+  private static void appendHexJavaScriptRepresentation(StringBuilder sb, char c) {
+    sb.append("\\u");
+    String hex = Integer.toHexString(c);
+    for (int i = hex.length(); i < 4; i++) {
+      sb.append('0');
+    }
+    sb.append(hex);
+  }
\ No newline at end of file
