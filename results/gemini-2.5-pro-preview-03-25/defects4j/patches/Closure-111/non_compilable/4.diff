diff --git a/tmp/40426b21-ef9d-43eb-b74a-8d0e4d699e0c_buggy.java b/tmp/bd96bbde-8c2b-40d7-9675-48ab21663812_fixed.java
index f1d02c1..9cbb08e 100644
--- a/tmp/40426b21-ef9d-43eb-b74a-8d0e4d699e0c_buggy.java
+++ b/tmp/bd96bbde-8c2b-40d7-9675-48ab21663812_fixed.java
@@ -1,4 +1,22 @@
         @Override
         protected JSType caseTopType(JSType topType) {
+          // When a check like goog.isObject(x) or goog.isArray(x) is true,
+          // and x originally had type ALL_TYPE (*), we need to refine it.
+          // Returning the original topType provides no information.
+          // Many Closure checks (isObject, isArray, isFunction) refine ALL_TYPE
+          // to a non-null object subtype. Returning !Object provides a
+          // reasonable starting point for further refinement based on the specific
+          // check (e.g., intersecting !Object with Array for goog.isArray).
+          // This aligns with tests like testGoogIsObject which expect !Object
+          // as the refinement for ALL_TYPE.
+          JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);
+          // Ensure we handle cases where objectType might not be available or restrictToNotNull fails
+          if (objectType != null) {
+              JSType restrictedType = objectType.restrictToNotNull();
+              if (restrictedType != null) {
+                  return restrictedType;
+              }
+          }
+          // Fallback to original behavior if restriction fails, though unlikely
           return topType; 
         }
\ No newline at end of file
