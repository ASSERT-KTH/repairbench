diff --git a/tmp/ff90924f-b4d2-424c-86d5-784b32fd76c8_buggy.java b/tmp/c0b3c2a7-990b-4e3d-8b4a-a3c92e75ebe8_fixed.java
index 466a88c..98dd0ad 100644
--- a/tmp/ff90924f-b4d2-424c-86d5-784b32fd76c8_buggy.java
+++ b/tmp/c0b3c2a7-990b-4e3d-8b4a-a3c92e75ebe8_fixed.java
@@ -1,169 +1,171 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
+        // The following variables are used in Brent's method algorithm.
+        // See explanation, e.g., in Numerical Recipes, Chapter 10.2
+        double x = mid; // Current point, stores the best point found so far
+        double v = x;   // Previous best point
+        double w = x;   // Point before previous best point / Point with second best value
+        double d = 0;   // Step size in the last iteration
+        double e = 0;   // Step size in the iteration before last
+        double fx = computeObjectiveValue(x); // Objective function value at x
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // Negate if maximizing, as Brent's finds minimum
         }
-        double fv = fx;
-        double fw = fx;
+        double fv = fx; // Objective function value at v
+        double fw = fx; // Objective function value at w
 
         UnivariatePointValuePair previous = null;
+        // current keeps track of the point evaluated in the current iteration for the convergence checker
         UnivariatePointValuePair current
             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+        // Note: (x, fx) always tracks the best point found *internally* by the algorithm.
 
         int iter = 0;
         while (true) {
-            final double m = 0.5 * (a + b);
-            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
-            final double tol2 = 2 * tol1;
+            final double m = 0.5 * (a + b); // Midpoint of the current interval [a, b]
+            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; // Tolerance based on x
+            final double tol2 = 2 * tol1; // Double tolerance
 
-            // Default stopping criterion.
+            // Default stopping criterion: check if the interval width relative to x is small enough
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (stop) {
+                 // Default termination criterion is met.
+                 // Return the best point found, which is stored in (x, fx).
+                 return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+            }
+
+            // If not converged, calculate the next point u to evaluate.
+            double p = 0; // Numerator for parabolic interpolation step
+            double q = 0; // Denominator for parabolic interpolation step
+            double r = 0; // Used temporarily
+            double u = 0; // Point to be evaluated next
+
+            // Try parabolic interpolation if there's enough history (e > tol1)
+            if (FastMath.abs(e) > tol1) {
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
                 if (q > 0) {
-                        p = -p;
+                    p = -p; // Ensure q is positive
                 } else {
                     q = -q;
                 }
 
-                    r = e;
-                    e = d;
+                r = e; // Store previous step (from second last iteration)
+                e = d; // Store step from last iteration
 
-                    if (p > q * (a - x) &&
+                // Check if the parabolic interpolation step is acceptable
+                if (p > q * (a - x) &&      // Is the interpolated point within (a, b)?
                     p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
+                    FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { // Is the step size reasonable compared to previous steps?
+
+                    // Parabolic interpolation step is accepted
                     d = p / q;
                     u = x + d;
 
-                        // f must not be evaluated too close to a or b.
+                    // Check if the function must be evaluated too close to the boundaries a or b
                     if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
+                        // If too close, compute step towards midpoint m, with size tol1
+                        // This prevents u from being extremely close to a boundary,
+                        // which might happen with floating point inaccuracies.
+                        d = (x <= m) ? tol1 : -tol1;
+                        // Note: u is not recalculated here. The adjusted d will be used below.
                     }
                 } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
-                        }
+                    // Parabolic interpolation failed or is rejected, use Golden Section step
+                    e = (x < m) ? (b - x) : (a - x); // Set interval width for golden section
                     d = GOLDEN_SECTION * e;
                 }
             } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
+                // Not enough history or previous step was too small, use Golden Section step
+                e = (x < m) ? (b - x) : (a - x); // Set interval width for golden section
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
+            // Ensure the step size d is at least tol1 in magnitude.
+            // This prevents the algorithm from stalling if d becomes too small.
             if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
+                u = x + (d >= 0 ? tol1 : -tol1); // Force a step of size tol1
             } else {
-                        u = x - tol1;
-                    }
-                } else {
-                    u = x + d;
+                u = x + d; // Use the calculated step d
             }
 
+            // Evaluate the objective function at the new point u
             double fu = computeObjectiveValue(u);
             if (!isMinim) {
-                    fu = -fu;
+                fu = -fu; // Negate if maximizing
             }
 
-                // User-defined convergence checker.
+            // Update 'previous' and 'current' state for the convergence checker
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
+            // Check user-defined convergence checker, if provided
             if (checker != null) {
+                // If the checker indicates convergence after evaluating u, stop.
                 if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
+                    // Return the best point found overall, stored in (x, fx).
+                    return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
                 }
             }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
-                    } else {
-                        a = x;
+            // Update the algorithm state (a, b, v, w, x, fx, fv, fw) based on the new point (u, fu)
+            // This maintains the bracketing interval [a, b] and the points x, v, w
+            // such that fx <= fv and fx <= fw.
+            if (fu <= fx) { // Case 1: New point u is better than or equal to the current best x
+                // Update the interval boundaries
+                if (u < x) { // New point u is to the left of x
+                    b = x;   // New interval is [a, x]
+                } else {     // New point u is to the right of x
+                    a = x;   // New interval is [x, b]
+                }
+                // Shift the points: v <- w, w <- x, x <- u
+                v = w; fv = fw;
+                w = x; fw = fx;
+                x = u; fx = fu; // Update the best point x and its value fx
+            } else { // Case 2: New point u is worse than the current best x
+                // Update the interval boundaries
+                if (u < x) { // New point u is to the left of x
+                    a = u;   // New interval is [u, b]
+                } else {     // New point u is to the right of x
+                    b = u;   // New interval is [a, u]
+                }
+                // Update v and w if u is better than them, maintaining fx <= fv, fx <= fw
+                if (fu <= fw || Precision.equals(w, x)) {
+                    // If u is better than w, or w is the same as x (degenerate case)
+                    // Shift v and w: v <- w, w <- u
+                    v = w; fv = fw;
+                    w = u; fw = fu;
+                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
+                    // If u is not better than w, but is better than v (or v is degenerate)
+                    // Update only v: v <- u
+                    v = u; fv = fu;
                 }
-                    v = w;
-                    fv = fw;
-                    w = x;
-                    fw = fx;
-                    x = u;
-                    fx = fu;
-                } else {
-                    if (u < x) {
-                        a = u;
-                    } else {
-                        b = u;
-                    }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
-                        v = w;
-                        fv = fw;
-                        w = u;
-                        fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
-                        v = u;
-                        fv = fu;
-                    }
-                }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
-            }
-            ++iter;
             }
+
+            ++iter; // Increment iteration counter
+        } // End of while loop
     }
\ No newline at end of file
