diff --git a/tmp/1da262a5-3b18-42a3-bfe9-390371ebc942_buggy.java b/tmp/b4a23607-1eef-4201-bba6-9d30218d745b_fixed.java
index 466a88c..b9b7143 100644
--- a/tmp/1da262a5-3b18-42a3-bfe9-390371ebc942_buggy.java
+++ b/tmp/b4a23607-1eef-4201-bba6-9d30218d745b_fixed.java
@@ -1,169 +1,183 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
-        double a;
-        double b;
+        // Initialization.
+        double a; // Lower bound of the bracket.
+        double b; // Upper bound of the bracket.
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
+        double x = mid; // Current best point estimate.
+        double v = x; // Previous best point.
+        double w = x; // Second previous best point.
+        double d = 0; // Step size.
+        double e = 0; // Distance moved in the step before last.
+        double fx = computeObjectiveValue(x); // Objective function value at x.
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // Negate if maximizing.
         }
-        double fv = fx;
-        double fw = fx;
+        double fv = fx; // Objective function value at v.
+        double fw = fx; // Objective function value at w.
 
         UnivariatePointValuePair previous = null;
         UnivariatePointValuePair current
             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
         // Best point encountered so far (which is the initial guess).
 
         int iter = 0;
         while (true) {
-            final double m = 0.5 * (a + b);
+            final double m = 0.5 * (a + b); // Midpoint of the current bracket [a, b].
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
+            // Default stopping criterion. Check if the interval length or the distance |x - m| is below tolerance.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
+            if (stop) {
+                // Default termination (Brent's criterion).
+                // Return the best point found so far (x, fx).
+                return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+            }
+
+            // Tentative point for the next evaluation.
             double p = 0;
             double q = 0;
             double r = 0;
-                double u = 0;
+            double u = 0; // Point to be evaluated next.
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (FastMath.abs(e) > tol1) { // Try parabolic interpolation. If e is large enough.
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
                 if (q > 0) {
                     p = -p;
                 } else {
                     q = -q;
                 }
 
-                    r = e;
-                    e = d;
+                r = e; // Store the previous value of e.
+                e = d; // Store the step size d from the previous iteration.
 
-                    if (p > q * (a - x) &&
+                // Check if the parabolic interpolation step is acceptable.
+                if (p > q * (a - x) && // Check if interpolation is within bounds [a,b]
                     p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
+                    FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { // Check if step is not too large compared to previous steps
                     // Parabolic interpolation step.
                     d = p / q;
                     u = x + d;
 
                     // f must not be evaluated too close to a or b.
                     if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
+                        // If the proposed point u is too close to boundary, adjust step d for minimum step check later.
+                        if (x <= m) { // If x is closer to a.
+                            d = tol1; // Intend to step towards b
+                        } else { // If x is closer to b.
+                            d = -tol1; // Intend to step towards a
                         }
                     }
                 } else {
                     // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
+                    if (x < m) { // Point x is in the first half of [a, b].
+                        e = b - x; // Golden section search in [x, b].
+                    } else { // Point x is in the second half of [a, b].
+                        e = a - x; // Golden section search in [a, x].
                     }
                     d = GOLDEN_SECTION * e;
                 }
-                } else {
+            } else { // e is too small, must use golden section.
                 // Golden section step.
                 if (x < m) {
                     e = b - x;
                 } else {
                     e = a - x;
                 }
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
+            // Update point u by at least "tol1". Ensures progress.
+            // Check calculated step d (parabolic or golden) against minimum tolerance.
             if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
+                // If the step d is too small, enforce a minimum step of size tol1.
+                if (d >= 0) { // Use the sign of the original small d to determine direction.
                     u = x + tol1;
                 } else {
                     u = x - tol1;
                 }
             } else {
+                // Use the calculated step d. Note: d might have been adjusted to +/- tol1 if parabolic u was near boundary.
+                // If d was adjusted to +/- tol1, |d| is not < tol1, so this branch is taken. u = x + d = x +/- tol1.
                 u = x + d;
             }
 
+            // Evaluate the objective function at the new point u.
             double fu = computeObjectiveValue(u);
             if (!isMinim) {
-                    fu = -fu;
+                fu = -fu; // Negate if maximizing.
             }
 
-                // User-defined convergence checker.
+            // Update the points for the convergence checker.
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
+            // User-defined convergence checker.
             if (checker != null) {
                 if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
+                    // Convergence detected by the checker.
+                    // Return the best point found so far (x, fx).
+                    return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
                 }
             }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
+            // Update a, b, v, w and x based on the function value at u.
+            if (fu <= fx) { // Found a better point u.
+                if (u < x) { // Update the upper bound b.
                     b = x;
-                    } else {
+                } else { // Update the lower bound a.
                     a = x;
                 }
+                // Update the history of best points.
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
+                // Update the current best point.
                 x = u;
                 fx = fu;
-                } else {
-                    if (u < x) {
+            } else { // The new point u is not better than x.
+                if (u < x) { // Update the lower bound a.
                     a = u;
-                    } else {
+                } else { // Update the upper bound b.
                     b = u;
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                // Update the history points v and w if u is better than them.
+                if (fu <= fw || Precision.equals(w, x)) {
                     v = w;
                     fv = fw;
                     w = u;
                     fw = fu;
                 } else if (fu <= fv ||
                            Precision.equals(v, x) ||
                            Precision.equals(v, w)) {
                     v = u;
                     fv = fu;
                 }
             }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
-            }
+            // Increment iteration counter.
             ++iter;
         }
     }
\ No newline at end of file
