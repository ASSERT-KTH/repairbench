diff --git a/tmp/39715513-3c7a-48cf-a4ac-979b853aa0f1_buggy.java b/tmp/19f3c596-fc8b-4534-a428-56fa0e172967_fixed.java
index 466a88c..2a13c9d 100644
--- a/tmp/39715513-3c7a-48cf-a4ac-979b853aa0f1_buggy.java
+++ b/tmp/19f3c596-fc8b-4534-a428-56fa0e172967_fixed.java
@@ -1,169 +1,178 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
+        double x = mid; // Current best point estimate
+        double v = x;   // Second best point estimate
+        double w = x;   // Previous value of w
+        double d = 0;   // Step size in the last iteration
+        double e = 0;   // Step size before the last iteration (used for Brent's method)
+
+        double fx = computeObjectiveValue(x); // Objective function value at x
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // Work with minimization internally
         }
-        double fv = fx;
-        double fw = fx;
+        double fv = fx; // Objective function value at v
+        double fw = fx; // Objective function value at w
 
+        // Best point encountered so far (initialized to the initial guess).
+        UnivariatePointValuePair bestPoint = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+        UnivariatePointValuePair current = bestPoint; // Current point evaluated
 
         int iter = 0;
         while (true) {
-            final double m = 0.5 * (a + b);
+            final double m = 0.5 * (a + b); // Midpoint of the current interval [a, b]
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
+            // Default stopping criterion (Brent's condition).
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
+            if (stop) {
+                // Return the best point found overall
+                return bestPoint;
+            }
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            double p = 0; // Numerator of parabolic interpolation step
+            double q = 0; // Denominator of parabolic interpolation step
+            double r = 0; // Temporary variable
+            double u = 0; // Point at which function will be evaluated next
+
+            if (FastMath.abs(e) > tol1) { // Check if a parabolic interpolation step is possible
+                // Fit parabola through (x, fx), (w, fw), (v, fv)
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
-                    if (q > 0) {
-                        p = -p;
+                if (q > 0) { // Ensure q is positive (parabola opens upwards)
+                    p = -p; // Adjust sign of p accordingly
                 } else {
                     q = -q;
                 }
 
-                    r = e;
-                    e = d;
+                r = e; // Store previous value of e
+                e = d; // Store previous value of d
 
-                    if (p > q * (a - x) &&
+                // Check acceptability of parabolic interpolation step
+                if (p > q * (a - x) &&    // Is the interpolated point within the interval (a, b)?
                     p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
+                    FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { // Is the step size reasonable?
                     // Parabolic interpolation step.
                     d = p / q;
                     u = x + d;
 
                     // f must not be evaluated too close to a or b.
                     if (u - a < tol2 || b - u < tol2) {
                         if (x <= m) {
-                                d = tol1;
+                            d = tol1; // Step slightly away from boundary if too close
                         } else {
                             d = -tol1;
                         }
                     }
                 } else {
-                        // Golden section step.
+                    // Golden section step (if parabolic step is not acceptable).
                     if (x < m) {
-                            e = b - x;
+                        e = b - x; // Step towards the larger subinterval
                     } else {
                         e = a - x;
                     }
                     d = GOLDEN_SECTION * e;
                 }
             } else {
-                    // Golden section step.
+                // Golden section step (if e is too small for parabolic fit).
                 if (x < m) {
                     e = b - x;
                 } else {
                     e = a - x;
                 }
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
+            // Update by at least "tol1". Ensures progress.
             if (FastMath.abs(d) < tol1) {
                 if (d >= 0) {
                     u = x + tol1;
                 } else {
                     u = x - tol1;
                 }
             } else {
                 u = x + d;
             }
 
-                double fu = computeObjectiveValue(u);
+            double fu = computeObjectiveValue(u); // Evaluate function at the new point u
             if (!isMinim) {
-                    fu = -fu;
+                fu = -fu; // Negate if maximizing
             }
 
-                // User-defined convergence checker.
+            // Update previous and current points for convergence checker.
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
+            // Update the overall best point found so far.
+            // The 'best' method compares two points based on their objective value and goal type.
+            bestPoint = best(bestPoint, current, isMinim);
+
+            // User-defined convergence checker.
             if (checker != null) {
                 if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
+                    // If checker converges, return the overall best point found.
+                    return bestPoint;
                 }
             }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
+            // Update a, b, v, w and x based on the function value at u.
+            if (fu <= fx) { // If the new point u is better than or equal to x
+                if (u < x) { // Update interval bounds
                     b = x;
                 } else {
                     a = x;
                 }
+                // Update the points for next iteration (shift x, w, v)
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
                 x = u;
                 fx = fu;
-                } else {
-                    if (u < x) {
+            } else { // If the new point u is worse than x
+                if (u < x) { // Update interval bounds
                     a = u;
                 } else {
                     b = u;
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                // Update w or v if u is better than them
+                if (fu <= fw || Precision.equals(w, x)) {
                     v = w;
                     fv = fw;
                     w = u;
                     fw = fu;
                 } else if (fu <= fv ||
                            Precision.equals(v, x) ||
                            Precision.equals(v, w)) {
                     v = u;
                     fv = fu;
                 }
+                // Note: x and fx remain the same, as u was not better.
             }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
-            }
-            ++iter;
-        }
+            ++iter; // Increment iteration counter
+        } // End while loop
     }
\ No newline at end of file
