diff --git a/tmp/6576eb22-89d7-4a6c-b8ee-8c6b88bcd468_buggy.java b/tmp/aa941766-2440-4330-bf92-b01253e43cc9_fixed.java
index 466a88c..ddb0fdd 100644
--- a/tmp/6576eb22-89d7-4a6c-b8ee-8c6b88bcd468_buggy.java
+++ b/tmp/aa941766-2440-4330-bf92-b01253e43cc9_fixed.java
@@ -1,169 +1,190 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
+        final double relativeThreshold = getRelativeAccuracy();
+        final double absoluteThreshold = getAbsoluteAccuracy();
+        final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));
+
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
         double x = mid;
         double v = x;
         double w = x;
         double d = 0;
         double e = 0;
         double fx = computeObjectiveValue(x);
         if (!isMinim) {
             fx = -fx;
         }
         double fv = fx;
         double fw = fx;
 
+        // Keep track of the best point encountered so far.
+        // Note: x, fx should always track the best point found so far,
+        // due to the update logic within the loop.
+        UnivariatePointValuePair bestPoint = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+        UnivariatePointValuePair current = bestPoint;
+
 
         int iter = 0;
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
             if (!stop) {
                 double p = 0;
                 double q = 0;
                 double r = 0;
                 double u = 0;
 
                 if (FastMath.abs(e) > tol1) { // Fit parabola.
                     r = (x - w) * (fx - fv);
                     q = (x - v) * (fx - fw);
                     p = (x - v) * q - (x - w) * r;
                     q = 2 * (q - r);
 
                     if (q > 0) {
                         p = -p;
                     } else {
                         q = -q;
                     }
 
                     r = e;
                     e = d;
 
                     if (p > q * (a - x) &&
                         p < q * (b - x) &&
                         FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                         // Parabolic interpolation step.
                         d = p / q;
                         u = x + d;
 
                         // f must not be evaluated too close to a or b.
                         if (u - a < tol2 || b - u < tol2) {
                             if (x <= m) {
                                 d = tol1;
                             } else {
                                 d = -tol1;
                             }
                         }
                     } else {
                         // Golden section step.
                         if (x < m) {
                             e = b - x;
                         } else {
                             e = a - x;
                         }
                         d = GOLDEN_SECTION * e;
                     }
                 } else {
                     // Golden section step.
                     if (x < m) {
                         e = b - x;
                     } else {
                         e = a - x;
                     }
                     d = GOLDEN_SECTION * e;
                 }
 
                 // Update by at least "tol1".
                 if (FastMath.abs(d) < tol1) {
                     if (d >= 0) {
                         u = x + tol1;
                     } else {
                         u = x - tol1;
                     }
                 } else {
                     u = x + d;
                 }
 
                 double fu = computeObjectiveValue(u);
                 if (!isMinim) {
                     fu = -fu;
                 }
 
                 // User-defined convergence checker.
                 previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
-                    }
-                }
+                // The bestPoint is updated immediately following the evaluation and check.
+                // This check might rely on the previous two points,
+                // but the returned value should be the actual best found.
 
                 // Update a, b, v, w and x.
                 if (fu <= fx) {
                     if (u < x) {
                         b = x;
                     } else {
                         a = x;
                     }
                     v = w;
                     fv = fw;
                     w = x;
                     fw = fx;
                     x = u;
                     fx = fu;
+                    // Update best point encountered so far
+                    bestPoint = new UnivariatePointValuePair(x, isMinim ? fx: -fx);
+
                 } else {
                     if (u < x) {
                         a = u;
                     } else {
                         b = u;
                     }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                    if (fu <= fw || w == x) { // Use == for floating point comparison is generally discouraged, but Brent's algorithm code often uses it. Consider Precision.equals(w, x) if issues arise.
                         v = w;
                         fv = fw;
                         w = u;
                         fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                    } else if (fu <= fv || v == x || v == w) { // Consider Precision.equals if issues arise.
                         v = u;
                         fv = fu;
                     }
                 }
+
+                // Check convergence after the state (including x, fx) has been updated
+                 if (checker != null) {
+                    // Use the pair corresponding to the best point found so far (x, fx)
+                    // and the previous best point for the checker.
+                    // Note: Brent's original algorithm doesn't explicitly consider a ConvergenceChecker
+                    // in this way. Standard checkers often compare the last two evaluated points.
+                    // Passing (bestPoint, previous) might be more consistent if the checker
+                    // needs the sequence of improving points. However, the API expects (previous, current).
+                    // We stick to the API, but ensure the final return value is the true best.
+                    if (checker.converged(iter, previous, current)) {
+                        // Return the best point tracked by (x, fx), not necessarily previous or current.
+                        return bestPoint;
+                    }
+                }
+
+
             } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
+                 // Return the best point tracked by (x, fx)
+                return bestPoint;
             }
-            ++iter;
+            incrementIterationCount(); // Use method from base class
+            iter = getIterations(); // Use method from base class to get current count
         }
     }
\ No newline at end of file
