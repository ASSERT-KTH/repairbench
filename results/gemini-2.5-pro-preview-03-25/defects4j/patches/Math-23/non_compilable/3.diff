diff --git a/tmp/9170af71-efde-4917-9ae0-e29687100ffb_buggy.java b/tmp/0e86483c-ac3a-4da2-a56b-cadb7c812f87_fixed.java
index 466a88c..d7cb7d0 100644
--- a/tmp/9170af71-efde-4917-9ae0-e29687100ffb_buggy.java
+++ b/tmp/0e86483c-ac3a-4da2-a56b-cadb7c812f87_fixed.java
@@ -1,169 +1,218 @@
+import org.apache.commons.math3.exception.NotStrictlyPositiveException; // Keep relevant imports if needed by class context
+import org.apache.commons.math3.exception.NumberIsTooSmallException;
+import org.apache.commons.math3.optimization.ConvergenceChecker;
+import org.apache.commons.math3.optimization.GoalType;
+import org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;
+import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
+import org.apache.commons.math3.util.FastMath;
+import org.apache.commons.math3.util.Precision;
+
+// Assuming class structure and necessary methods like getRelativeAccuracy(), getAbsoluteAccuracy(), etc. are present.
+
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
+        final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
-        double a;
-        double b;
+        // Convergence parameters
+        // Assuming methods getRelativeAccuracy() and getAbsoluteAccuracy() exist and are correctly implemented.
+        final double relativeThreshold = getRelativeAccuracy();
+        final double absoluteThreshold = getAbsoluteAccuracy();
+        // Brent's method constant for golden section
+        final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));
+
+        // Set up the search interval [a, b], ensuring a <= b
+        double a; // Lower bound of the bracket
+        double b; // Upper bound of the bracket
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
-        if (!isMinim) {
-            fx = -fx;
-        }
-        double fv = fx;
-        double fw = fx;
+        // Initialize Brent's state variables
+        double x = mid; // Current point with the best function value found so far (among x, w, v)
+        double v = x;   // Point with the second best function value
+        double w = x;   // Point with the third best function value (or previous value of v)
+        double d = 0;   // Step taken in the last iteration ('d' in Brent's notation)
+        double e = 0;   // Step taken in the iteration before last ('e' in Brent's notation, used for parabolic fit check)
 
+        // Evaluate the objective function at the initial point 'x' (start value 'mid')
+        final double fxEvaluated = computeObjectiveValue(x);
+
+        // Track the best point found overall throughout the optimization process.
+        // Initialize with the starting point. Uses original function values.
+        UnivariatePointValuePair bestPointSoFar = new UnivariatePointValuePair(x, fxEvaluated);
+
+        // Internal working function values for Brent's core minimization logic.
+        // Negate function values if the goal is maximization, so the algorithm always minimizes internally.
+        double fx = isMinim ? fxEvaluated : -fxEvaluated; // Value at x
+        double fv = fx; // Value at v
+        double fw = fx; // Value at w
+
+        // Variables to hold the points for the convergence checker. Uses original function values.
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+        UnivariatePointValuePair current = bestPointSoFar; // The initial point is the first 'current' point
 
-        int iter = 0;
+        int iter = 0; // Iteration counter
         while (true) {
-            final double m = 0.5 * (a + b);
+            final double m = 0.5 * (a + b); // Midpoint of the current interval [a, b]
+            // Calculate tolerance based on current point x
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
+            // Default stopping criterion (Brent's criterion):
+            // Check if the distance between x and the interval midpoint m is small enough
+            // relative to the interval width (b - a).
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (stop) {
+                // Termination condition met, return the best point found overall.
+                return bestPointSoFar;
+            }
+
+            // --- Begin computing the next trial point 'u' ---
+            // Logic follows Brent's method: try parabolic interpolation, fall back to golden section search.
+            double p = 0; // Numerator for parabolic interpolation step
+            double q = 0; // Denominator for parabolic interpolation step
+            double r = 0; // Temporary variable used in parabola calculation
+
+            // Try parabolic interpolation only if the step before last ('e') was significant enough.
+            if (FastMath.abs(e) > tol1) {
+                // Fit parabola through the three points (x, fx), (w, fw), (v, fv)
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
-                    if (q > 0) {
+                if (q > 0) { // Ensure q is positive (parabola opens upward for minimum)
                     p = -p;
-                    } else {
+                } else { // q should be negative if parabola opens downward
                     q = -q;
                 }
 
-                    r = e;
-                    e = d;
-
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
+                r = e; // Store step from iter-2 (used to check step size reduction)
+                e = d; // Store step from iter-1 (will become step before last in next iteration)
 
-                        // f must not be evaluated too close to a or b.
-                        if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
+                // Check acceptability of the parabolic interpolation step
+                // 1. Is the interpolation point within the interval (a, b)? (p > q*(a-x) and p < q*(b-x))
+                // 2. Is the step size reasonable compared to previous steps? (abs(p) < abs(0.5*q*r))
+                if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
+                    // Parabolic interpolation step is accepted.
+                    d = p / q; // Calculate step distance
+                    // Note: u will be calculated later using this 'd'
+
+                    // Check if the proposed point u=x+d would be too close to boundaries
+                    // This check influences whether the step 'd' is potentially overridden by +/- tol1 below.
+                     final double u_proposed = x + d;
+                     if (u_proposed - a < tol2 || b - u_proposed < tol2) {
+                         // If u is too close to a boundary, invalidate the parabolic step 'd' calculated above
+                         // by setting d to +/- tol1. This effectively forces a minimal step or golden section later.
+                         // The direction ensures the step is taken towards the middle of the interval.
+                         d = (x < m) ? tol1 : -tol1;
                      }
+                     // If the parabolic step was rejected (e.g., point outside interval), fall through to golden section.
                 } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
-                        }
+                    // Parabolic step is not acceptable, perform a golden section step instead.
+                    // 'e' will store the width of the larger interval section.
+                    e = (x < m) ? (b - x) : (a - x);
                     d = GOLDEN_SECTION * e;
                 }
-                } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
+            } else { // Previous step 'e' was too small, use golden section search.
+                // 'e' will store the width of the larger interval section.
+                e = (x < m) ? (b - x) : (a - x);
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
-                if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
-                } else {
+            // Determine the final point 'u' for evaluation.
+            // Ensure the step size |d| is at least 'tol1'.
+            final double u; // The point where the function will be evaluated next.
+            if (FastMath.abs(d) >= tol1) { // If proposed step 'd' (from parabola or golden section) is large enough
                  u = x + d;
+            } else { // Proposed step 'd' is too small, force a minimum step of size 'tol1'.
+                 // Use the sign of 'd' to determine the direction of the minimum step.
+                 u = x + (d >= 0 ? tol1 : -tol1);
             }
+            // --- End computing the next trial point 'u' ---
+
+
+            // Evaluate the objective function at the new point 'u'.
+            final double fuEvaluated = computeObjectiveValue(u);
 
-                double fu = computeObjectiveValue(u);
-                if (!isMinim) {
-                    fu = -fu;
+            // Create the pair representing the new point with its original function value.
+            final UnivariatePointValuePair newPoint = new UnivariatePointValuePair(u, fuEvaluated);
+
+            // Update the overall best point found so far if the new point is better.
+            // Comparison uses original function values based on the optimization goal.
+             if (isMinim) {
+                 // Use '<' for comparison. If multiple points have the exact same minimal value,
+                 // this might favor later points, which is generally acceptable.
+                 if (newPoint.getValue() < bestPointSoFar.getValue()) {
+                     bestPointSoFar = newPoint;
+                 }
+             } else { // MAXIMIZE goal
+                 if (newPoint.getValue() > bestPointSoFar.getValue()) {
+                     bestPointSoFar = newPoint;
                  }
+             }
+
+            // Potentially negate the evaluated function value for internal minimization logic.
+            double fu = isMinim ? fuEvaluated : -fuEvaluated;
 
-                // User-defined convergence checker.
+            // Update 'previous' and 'current' points for the external convergence checker.
+            // These hold pairs with original function values.
             previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+            current = newPoint;
 
+            // Check for convergence using the optional user-defined checker.
             if (checker != null) {
+                // If the checker indicates convergence, return the overall best point found.
                 if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
+                    return bestPointSoFar;
                 }
             }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
-                    } else {
-                        a = x;
-                    }
-                    v = w;
-                    fv = fw;
-                    w = x;
-                    fw = fx;
-                    x = u;
-                    fx = fu;
-                } else {
-                    if (u < x) {
-                        a = u;
-                    } else {
-                        b = u;
-                    }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
-                        v = w;
-                        fv = fw;
-                        w = u;
-                        fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
-                        v = u;
-                        fv = fu;
-                    }
-                }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
-            }
-            ++iter;
+            // Update Brent's internal state variables (a, b, v, w, x, fv, fw, fx).
+            // This logic determines the next search interval and updates the points used for interpolation.
+            // It uses the potentially negated function values (fu, fx, etc.) for internal comparison (minimization).
+            if (fu <= fx) { // New point 'u' is better than or equal to current best 'x' (in terms of minimization objective)
+                // Update the interval boundaries: the minimum must be between a and x, or x and b.
+                if (u < x) { // If u is to the left of x
+                    b = x;   // The new interval is [a, x]
+                } else {     // If u is to the right of x (or u == x)
+                    a = x;   // The new interval is [x, b]
+                }
+                // Shift the points: v <- w, w <- x, x <- u (update the three points defining the potential parabola)
+                v = w; fv = fw;
+                w = x; fw = fx;
+                x = u; fx = fu; // 'u' becomes the new best point 'x'
+            } else { // New point 'u' is worse than current best 'x' (fu > fx)
+                // Update the interval boundaries: the minimum must be between a and u, or u and b.
+                if (u < x) { // If u is to the left of x
+                    a = u;   // The new interval is [u, b]
+                } else {     // If u is to the right of x
+                    b = u;   // The new interval is [a, u]
+                }
+                // Update the secondary points 'v' and 'w' only if 'u' is better than them.
+                // This maintains the property that fx <= fw <= fv (usually).
+                if (fu <= fw || Precision.equals(w, x)) { // If u is better than w, or w is the same point as x
+                    v = w; fv = fw; // Shift w to v
+                    w = u; fw = fu; // Update w to u
+                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { // If u is better than v, or v is the same as x or w
+                    v = u; fv = fu; // Update v to u
+                }
+                // If fu > fx, fu > fw, and fu > fv, then 'u' is worse than all three tracked points x, w, v.
+                // In this case, x, fx, w, fw, v, fv remain unchanged, only the interval [a, b] is updated.
             }
+
+            ++iter; // Increment iteration counter
+        } // End of while loop
     }
\ No newline at end of file
