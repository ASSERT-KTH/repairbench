diff --git a/tmp/070d8d0f-c9ef-48b8-b586-27f5a615b806_buggy.java b/tmp/5857fc67-3ddb-4c04-9164-6d406e763e6b_fixed.java
index 466a88c..e895ec3 100644
--- a/tmp/070d8d0f-c9ef-48b8-b586-27f5a615b806_buggy.java
+++ b/tmp/5857fc67-3ddb-4c04-9164-6d406e763e6b_fixed.java
@@ -1,169 +1,197 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
+        final double relativeThreshold = getRelativeAccuracy();
+        final double absoluteThreshold = getAbsoluteAccuracy();
+        // The value GOLDEN_SECTION should be defined elsewhere in the class, typically as (3 - sqrt(5))/2
+        final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));
+
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
+        double x = mid; // Current best point estimate
+        double v = x;   // Previous best point estimate
+        double w = x;   // Point with second lowest value
+        double d = 0;   // Step size in the current iteration (delta x)
+        double e = 0;   // Step size from the previous iteration (used to decide between parabolic and golden section)
+        double fx = computeObjectiveValue(x); // Objective function value at x
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // Internally, always minimize by negating the function if maximizing
         }
-        double fv = fx;
-        double fw = fx;
+        double fv = fx; // Objective function value at v
+        double fw = fx; // Objective function value at w
 
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+        // current tracks the last evaluated point for the checker interface
+        UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
 
         int iter = 0;
         while (true) {
-            final double m = 0.5 * (a + b);
+            final double m = 0.5 * (a + b); // Middle of the current interval [a, b]
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
+            // Default stopping criterion (Brent's criterion).
+            // Check if the optimization has converged based on interval size relative to x.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
+            if (stop) {
+                 // Termination condition met. Return the best point found.
+                 // The internal state (x, fx) represents the best point according to Brent's logic.
+                 return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+            }
+
+            // If not stopping, calculate the next point u to evaluate.
             double p = 0;
             double q = 0;
             double r = 0;
-                double u = 0;
+            double u; // Point to be evaluated in this iteration
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (FastMath.abs(e) > tol1) { // Try parabolic interpolation if previous step 'e' was large enough
+                // Fit parabola through (x,fx), (w,fw), (v,fv)
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
-                    if (q > 0) {
-                        p = -p;
+                if (q > 0) { // q contains denominator difference, ensure it's positive
+                    p = -p; // Adjust numerator sign accordingly
                 } else {
                     q = -q;
                 }
 
-                    r = e;
-                    e = d;
+                r = e; // Store previous step size (d from previous iteration)
+                e = d; // Store step size from before previous iteration
 
+                // Check conditions for accepting parabolic interpolation step
+                // Check bounds: is the parabola minimum between a and b? (p/q is the step)
+                // Check step size reduction: is the step smaller than half the previous step?
                 if (p > q * (a - x) &&
                     p < q * (b - x) &&
                     FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
+                    // Parabolic interpolation step is accepted.
+                    d = p / q; // Calculated step size
+                    u = x + d; // New point u
 
-                        // f must not be evaluated too close to a or b.
+                    // Check if u is too close to interval boundaries a or b
                     if (u - a < tol2 || b - u < tol2) {
+                        // If too close, adjust step 'd' to be minimal step towards center 'm'
+                        // This modification prevents evaluating too near the boundaries.
+                        // The step 'd' is adjusted, and the minimum step check later will use it.
                         if (x <= m) {
                             d = tol1;
                         } else {
                             d = -tol1;
                         }
                     }
+                    // Note: u is not immediately recalculated with the adjusted d here.
+                    // The logic flows to the minimum step check below.
+                } else { // Parabolic interpolation failed or rejected
+                    // Perform a Golden section step.
+                    if (x < m) { // Check if x is in the lower or upper half of [a, b]
+                        e = b - x; // If lower half, the larger segment is (x, b]
                     } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
+                        e = a - x; // If upper half, the larger segment is [a, x)
                     }
-                        d = GOLDEN_SECTION * e;
+                    d = GOLDEN_SECTION * e; // Calculate step using golden ratio
                 }
-                } else {
-                    // Golden section step.
+            } else { // Previous step 'e' was too small, force Golden section step
                 if (x < m) {
                     e = b - x;
                 } else {
                     e = a - x;
                 }
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
-                if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
-                } else {
+            // Ensure progress by taking a minimum step of size tol1 if the calculated step 'd' is too small.
+            if (FastMath.abs(d) >= tol1) {
+                 // Use the calculated step d (from parabola or golden section, possibly adjusted)
                  u = x + d;
+            } else {
+                 // If calculated step d is too small, force a minimum step size tol1
+                 // Use the sign of d to determine direction.
+                 u = x + (d >= 0 ? tol1 : -tol1);
             }
 
+            // Evaluate the objective function at the new point u.
             double fu = computeObjectiveValue(u);
             if (!isMinim) {
-                    fu = -fu;
+                fu = -fu; // Internal value is always minimized
             }
 
-                // User-defined convergence checker.
+            // Prepare for convergence checker using the newly evaluated point (u, fu)
+            // 'previous' holds the 'current' from the last iteration
+            // 'current' holds the result of the current function evaluation
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
-                    }
-                }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
+            // Update the Brent state (a, b, x, v, w, fx, fv, fw) based on the new point (u, fu)
+            // This maintains x as the point with the best function value found so far.
+            if (fu <= fx) { // Found a point as good or better than the current best x
+                if (u < x) { // If u is to the left of x, shrink interval from the right
                     b = x;
-                    } else {
+                } else { // If u is to the right of x, shrink interval from the left
                     a = x;
                 }
+                // Shift the points: v<-w, w<-x, x<-u
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
-                    x = u;
-                    fx = fu;
-                } else {
-                    if (u < x) {
+                x = u; // Update best point x
+                fx = fu; // Update best value fx
+            } else { // New point u is worse than current best x
+                if (u < x) { // If u is to the left of x, shrink interval from the left
                     a = u;
-                    } else {
+                } else { // If u is to the right of x, shrink interval from the right
                     b = u;
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                // Check if u is better than the second best w or third best v
+                if (fu <= fw || Precision.equals(w, x)) {
+                    // u becomes the new second best w
                     v = w;
                     fv = fw;
                     w = u;
                     fw = fu;
                 } else if (fu <= fv ||
                            Precision.equals(v, x) ||
                            Precision.equals(v, w)) {
+                    // u becomes the new third best v
                     v = u;
                     fv = fu;
                 }
             }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
+
+            // After state update, (x, fx) represents the best point found so far according to Brent logic.
+            final UnivariatePointValuePair currentBest = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+
+            // Check convergence with user-defined checker AFTER updating the algorithm state.
+            // The checker interface uses the sequence of evaluated points (previous, current).
+            if (checker != null) {
+                if (checker.converged(iter, previous, current)) {
+                    // If checker converges, return the overall best point found (x, fx).
+                    return currentBest;
                 }
+            }
+
+            // Increment iteration count and loop back to check default stop condition.
             ++iter;
         }
     }
\ No newline at end of file
