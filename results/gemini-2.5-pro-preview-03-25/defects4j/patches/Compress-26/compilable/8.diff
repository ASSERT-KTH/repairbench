diff --git a/tmp/28ca640d-c659-48fe-b874-7b6b42086354_buggy.java b/tmp/145ac5c3-39b1-450c-ab14-f76b54939690_fixed.java
index 4b163f6..c89766c 100644
--- a/tmp/28ca640d-c659-48fe-b874-7b6b42086354_buggy.java
+++ b/tmp/145ac5c3-39b1-450c-ab14-f76b54939690_fixed.java
@@ -1,28 +1,45 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
-     * @throws IOException
+     * @throws IOException if an I/O error occurs
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        // Store the original number to skip, as numToSkip will be decremented.
+        final long available = numToSkip;
+        // Loop while there are still bytes to skip.
         while (numToSkip > 0) {
+            // Attempt to skip the remaining number of bytes.
             long skipped = input.skip(numToSkip);
+            // If skip returns 0, it might mean EOF or that skip cannot skip more bytes
+            // without blocking (in specific stream implementations). Fallback to read().
             if (skipped == 0) {
+                // Try reading a single byte.
+                int b = input.read();
+                // If read() returns -1, we have reached the end of the stream.
+                if (b == -1) {
+                    // Cannot skip anymore, break the loop.
                     break;
                 }
+                // Successfully read (and thus skipped) one byte.
+                skipped = 1;
+            }
+            // Decrement the number of bytes remaining to be skipped.
             numToSkip -= skipped;
         }
 
+        // Return the total number of bytes actually skipped.
+        // This is calculated as the original number requested minus
+        // the number of bytes that could not be skipped.
         return available - numToSkip;
     }
\ No newline at end of file
