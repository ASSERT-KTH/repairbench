diff --git a/tmp/0f850388-3f82-46fc-848a-49be8fecfe75_buggy.java b/tmp/4abd173b-0dac-4586-a0a4-6294ec5df1f8_fixed.java
index 4b163f6..9a550ea 100644
--- a/tmp/0f850388-3f82-46fc-848a-49be8fecfe75_buggy.java
+++ b/tmp/4abd173b-0dac-4586-a0a4-6294ec5df1f8_fixed.java
@@ -1,28 +1,45 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
+     * @param numToSkip the number of bytes to skip; must be non-negative
      * @return the number of bytes actually skipped
-     * @throws IOException
+     * @throws IOException if an I/O error occurs
+     * @throws IllegalArgumentException if numToSkip is negative
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        if (numToSkip < 0) {
+            throw new IllegalArgumentException("skip count must be non-negative, but was " + numToSkip);
+        }
+        long remaining = numToSkip;
+        while (remaining > 0) {
+            long skipped = input.skip(remaining);
+            if (skipped > 0) {
+                // Progress was made by skip()
+                remaining -= skipped;
+            } else if (skipped == 0) {
+                // skip() returned 0, possibly indicating temporary unavailability
+                // or end of stream for skip(). Fall back to read().
+                int b = input.read();
+                if (b == -1) {
+                    // Reached EOF, couldn't skip the remaining bytes
                     break;
                 }
-            numToSkip -= skipped;
+                // Read a single byte, so we've skipped 1 more byte
+                remaining--;
             }
-            
-        return available - numToSkip;
+            // A return value of < 0 is not defined by the InputStream#skip contract.
+            // If it occurs, behavior is undefined (may loop infinitely).
+            // Standard streams are expected to return >= 0 or throw IOException.
+        }
+        // Return the total number of bytes successfully skipped
+        return numToSkip - remaining;
     }
\ No newline at end of file
