diff --git a/tmp/9af80583-39e8-4b80-bded-0dc4f2a3c2bf_buggy.java b/tmp/4c2dc8b4-ec52-4290-b4bd-d1d625ce683b_fixed.java
index 4b163f6..96b5127 100644
--- a/tmp/9af80583-39e8-4b80-bded-0dc4f2a3c2bf_buggy.java
+++ b/tmp/4c2dc8b4-ec52-4290-b4bd-d1d625ce683b_fixed.java
@@ -1,28 +1,44 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
+     * @param numToSkip the number of bytes to skip. Must be non-negative.
      * @return the number of bytes actually skipped
-     * @throws IOException
+     * @throws IOException if the stream is closed or another IOException occurs.
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
+        // Based on the contract of InputStream.skip, it might skip 0 bytes.
+        // See https://bugs.openjdk.java.net/browse/JDK-6222822
+        // Fall back to read() if skip() returns 0.
+        long remaining = numToSkip;
+        while (remaining > 0) {
+            long skipped = input.skip(remaining);
+            if (skipped > 0) {
+                // Successfully skipped some bytes
+                remaining -= skipped;
+            } else if (skipped == 0) {
+                // skip() returned 0. This may mean temporary unavailability
+                // or end of stream. Fall back to reading a single byte.
+                int b = input.read();
+                if (b == -1) { // End of stream reached
+                    break; // Cannot skip anymore
                 }
-            numToSkip -= skipped;
+                // Successfully read and discarded one byte
+                remaining--;
             }
-            
-        return available - numToSkip;
+            // InputStream.skip() should not return negative values, but if it does,
+            // this loop might misbehave. However, standard implementations follow
+            // the contract of returning non-negative values. We proceed assuming
+            // skip returns >= 0.
+        }
+        // Return the total number of bytes actually skipped
+        return numToSkip - remaining;
     }
\ No newline at end of file
