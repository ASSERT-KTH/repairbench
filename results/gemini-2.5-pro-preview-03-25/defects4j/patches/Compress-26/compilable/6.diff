diff --git a/tmp/1946b07e-2e78-44f7-b47f-2a54169d1490_buggy.java b/tmp/e370a128-b6ba-4fe7-9d99-fd9027954950_fixed.java
index 4b163f6..f6395f3 100644
--- a/tmp/1946b07e-2e78-44f7-b47f-2a54169d1490_buggy.java
+++ b/tmp/e370a128-b6ba-4fe7-9d99-fd9027954950_fixed.java
@@ -1,28 +1,46 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
-     * @throws IOException
+     * @throws IOException if an I/O error occurs
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        // Keep track of the original number to skip
+        final long originalNumToSkip = numToSkip;
+
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+            if (skipped > 0) {
+                // Some bytes were skipped, reduce the count
                 numToSkip -= skipped;
+            } else if (skipped == 0) {
+                // skip() returned 0, possibly because it insists on only skipping
+                // available bytes or it's at EOF. Fall back to read().
+                int b = input.read();
+                if (b == -1) {
+                    // Reached EOF prematurely
+                    break;
+                }
+                // Read one byte, so decrement the count
+                numToSkip--;
+            }
+            // A return value of < 0 is not specified by InputStream#skip,
+            // but if it happens, we interpret it as EOF.
+             else { // skipped < 0
+                 break;
+             }
         }
             
-        return available - numToSkip;
+        // Return the number of bytes actually skipped
+        return originalNumToSkip - numToSkip;
     }
\ No newline at end of file
