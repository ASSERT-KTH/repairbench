diff --git a/tmp/9c7fb260-138b-406a-8ee7-254ed86441f2_buggy.java b/tmp/fc582fb0-4d93-45f9-9df4-d5581d06ab8e_fixed.java
index 4b163f6..9bd9541 100644
--- a/tmp/9c7fb260-138b-406a-8ee7-254ed86441f2_buggy.java
+++ b/tmp/fc582fb0-4d93-45f9-9df4-d5581d06ab8e_fixed.java
@@ -1,28 +1,44 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
-     * @throws IOException
+     * @throws IOException if an I/O error occurs
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        // Store the original number to skip, to calculate the total skipped at the end.
+        final long available = numToSkip;
+        
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+            if (skipped > 0) {
+                // Some bytes were successfully skipped.
                 numToSkip -= skipped;
+            } else if (skipped == 0) {
+                // skip() returned 0. This may mean end-of-stream, or the stream
+                // is temporarily unable to skip (e.g., non-blocking stream).
+                // Attempt to read a single byte to progress.
+                int b = input.read();
+                if (b == -1) {
+                    // End of stream reached before skipping the full amount.
+                    break; 
+                }
+                // Successfully read and thus skipped one byte.
+                numToSkip--; 
+            }
+            // A negative return value from skip() is not expected by the InputStream contract,
+            // but if it happens, we loop again. Note that numToSkip is not reduced in this case.
         }
             
+        // Return the total number of bytes actually skipped.
         return available - numToSkip;
     }
\ No newline at end of file
