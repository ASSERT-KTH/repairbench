diff --git a/tmp/6fd2d20f-d7da-484e-a2c7-69b2b68c3ef8_buggy.java b/tmp/9dfa49dc-7e94-4665-8456-8a716aea3782_fixed.java
index 4b163f6..d80d28a 100644
--- a/tmp/6fd2d20f-d7da-484e-a2c7-69b2b68c3ef8_buggy.java
+++ b/tmp/9dfa49dc-7e94-4665-8456-8a716aea3782_fixed.java
@@ -1,28 +1,47 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
-     * @throws IOException
+     * @throws IOException if an I/O error occurs or if numToSkip is negative
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        // Protect against requests to skip negative amounts,
+        // consistent with InputStream.skip documentation
+        if (numToSkip < 0) {
+            throw new IllegalArgumentException("Bytes to skip must not be negative: " + numToSkip);
+        }
+
+        long bytesSkipped = 0;
+        while (bytesSkipped < numToSkip) {
+            long remaining = numToSkip - bytesSkipped;
+            long skipped = input.skip(remaining);
+
+            if (skipped > 0) {
+                bytesSkipped += skipped;
+            } else if (skipped == 0) {
+                // InputStream.skip() returned 0; fall back to reading a single byte
+                int value = input.read();
+                if (value == -1) {
+                    // Reached EOF before skipping the requested amount
                     break;
                 }
-            numToSkip -= skipped;
+                // Successfully read/skipped one byte
+                bytesSkipped++;
+            } else {
+                // InputStream.skip() should not return negative values according to the spec.
+                // If it does, behavior is undefined. Treat as EOF or error condition.
+                break;
             }
-            
-        return available - numToSkip;
+        }
+        return bytesSkipped;
     }
\ No newline at end of file
