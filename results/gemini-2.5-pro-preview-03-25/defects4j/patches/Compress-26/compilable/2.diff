diff --git a/tmp/9c70a2e1-ec00-4f48-9fd1-008cc597c805_buggy.java b/tmp/193738b7-caa5-426a-94cf-3824f6b02819_fixed.java
index 4b163f6..0e4b554 100644
--- a/tmp/9c70a2e1-ec00-4f48-9fd1-008cc597c805_buggy.java
+++ b/tmp/193738b7-caa5-426a-94cf-3824f6b02819_fixed.java
@@ -1,28 +1,54 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
-     * @throws IOException
+     * @throws IOException if an I/O error occurs or the stream does not support seek
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        // We need to keep track of the original number requested, as numToSkip is modified
+        final long available = numToSkip;
+
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+            if (skipped > 0) {
+                // Some bytes were successfully skipped
                 numToSkip -= skipped;
+            } else if (skipped == 0) {
+                // InputStream.skip() returned 0; this may mean
+                // that it's temporarily blocked, or that the
+                // underlying stream is buggy (like FilterInputStream),
+                // or that we are near EOF.
+                // Fall back to reading a single byte.
+                int b = input.read();
+                if (b == -1) {
+                    // Reached EOF, cannot skip anymore.
+                    break;
+                }
+                // Successfully read/skipped one byte.
+                numToSkip--;
+            }
+            // A negative return value from skip() is very unusual,
+            // but possible (see InputStream.skip Javadoc).
+            // It implies an error. If it happens, we break the loop.
+            // This implementation assumes skip() returns >= 0 as per common practice.
+            // If skip < 0 is encountered, the loop terminates and less than the requested
+            // amount might be skipped.
+             else { // skipped < 0
+                 break;
+             }
         }
 
+        // Return the total number of bytes skipped, calculated by
+        // subtracting the remaining bytes from the initial request.
         return available - numToSkip;
     }
\ No newline at end of file
