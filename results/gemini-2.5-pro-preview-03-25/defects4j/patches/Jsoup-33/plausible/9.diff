diff --git a/tmp/99be406b-394b-41f9-8ae9-6485b159dc75_buggy.java b/tmp/7f47a3c6-445a-4912-89a7-ede1264c031b_fixed.java
index dc93be3..53b6ce0 100644
--- a/tmp/99be406b-394b-41f9-8ae9-6485b159dc75_buggy.java
+++ b/tmp/7f47a3c6-445a-4912-89a7-ede1264c031b_fixed.java
@@ -1,14 +1,25 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        Tag tag = Tag.valueOf(startTag.name()); // look up tag geochemical information
+
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
+            // if known tag allows self closing ACK, or if unknown tag, ACK self closing. Insert as self closing.
+            // Otherwise (known tag that doesn't allow self closing), insert normal tag, emit end tag. See #1006
+            if (tag.isKnownTag() && !tag.isEmpty()) { // ok to ACK self closing tags if they are implicitly empty or intermediate
+                // not implicitly empty, OK to create an end tag
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el); // normal insert, adds to stack
+                tokeniser.transition(TokeniserState.Data); // ensure we're in Data state, to process the end tag
                 tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
                 return el;
+             } else { // unknown tag, or known tag that allows self closing. Acknowledge it.
+                 Element el = insertEmpty(startTag); // creates element, adds to parent. Does not push to stack.
+                 // We ensure the tag is popped correctly by evaluating the token package. If implicitly closed, will be handled fine.
+                 // If it's unknown, will be implicitly closed by the parser. That's fine.
+                 return el;
              }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+        } else { // standard start tag. insert and push onto stack.
+            Element el = new Element(tag, baseUri, startTag.attributes);
             insert(el);
             return el;
         }
+    }
\ No newline at end of file
