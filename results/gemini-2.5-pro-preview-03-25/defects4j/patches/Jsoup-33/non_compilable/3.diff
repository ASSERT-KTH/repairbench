diff --git a/tmp/b0af27ea-dd6e-421e-876f-940b5b863c35_buggy.java b/tmp/fc0dd91a-c600-4853-9a6f-a4e082336ffc_fixed.java
index dc93be3..eddc11c 100644
--- a/tmp/b0af27ea-dd6e-421e-876f-940b5b863c35_buggy.java
+++ b/tmp/fc0dd91a-c600-4853-9a6f-a4e082336ffc_fixed.java
@@ -1,14 +1,25 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        Tag tag = Tag.valueOf(startTag.name(), settings); // Get Tag object, taking into account preservation settings
+
         if (startTag.isSelfClosing()) {
+            // Known tags that are required to be empty (e.g. <hr>, <br>) or unknown tags (<foo />), are treated as empty elements:
+            if (tag.isEmpty() || tag.isSelfClosing() || !tag.isKnownTag()) { // second check handles tags like <meta>, <base> which are self-closing in spec
                 Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+                // We specifically do not add to stack here, and do not emit an end tag token.
+                return el;
+            } else {
+                // Known tags that are not definitionally empty treated as <tag></tag> when specified as self-closing.
+                // E.g. <div />, <script />. Insert the tag, push to stack, and then immediately process an end tag.
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el); // Insert element, add to parent, push onto stack.
+                tokeniser.transition(TokeniserState.Data); // comments on original emit suggest potential state issues
+                tokeniser.emit(new Token.EndTag(el.tagName()));  // Now emit the close tag, which will be processed immediately
                 return el;
             }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        } else {
+            // Standard opening tag.
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el); // Insert element, add to parent, push onto stack.
             return el;
         }
+    }
\ No newline at end of file
