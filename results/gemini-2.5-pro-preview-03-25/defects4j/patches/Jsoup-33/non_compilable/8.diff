diff --git a/tmp/3dc91501-d593-45c4-aaf1-964c092d2ebb_buggy.java b/tmp/cc4f249d-5323-40bd-8ddc-b2c41e265709_fixed.java
index dc93be3..04ab399 100644
--- a/tmp/3dc91501-d593-45c4-aaf1-964c092d2ebb_buggy.java
+++ b/tmp/cc4f249d-5323-40bd-8ddc-b2c41e265709_fixed.java
@@ -1,14 +1,46 @@
+import org.jsoup.nodes.Attributes; // Assuming these imports exist based on context
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.ParseSettings;
+import org.jsoup.parser.Tag;
+import org.jsoup.parser.Token;
+import org.jsoup.parser.Tokeniser;
+
+// Other context assumed:
+// - This method is part of a class like HtmlTreeBuilder
+// - 'settings' (ParseSettings), 'baseUri' (String), 'stack' (ArrayList<Element>), 'tokeniser' (Tokeniser) are accessible members/fields
+// - 'insert(Element el)' method exists: adds node to current parent, pushes element onto stack
+// - 'insertNode(Node node)' method exists: adds node to current parent
+// - 'currentElement()' method exists: returns element at top of stack or root
+
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // Get the Tag object, applying parser settings (like case sensitivity)
+        // Assuming 'settings' is an accessible ParseSettings instance
+        Tag tag = Tag.valueOf(startTag.name(), settings);
+        Element el = new Element(tag, baseUri, startTag.attributes);
+
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
+            if (tag.isKnownTag() && !tag.isEmpty()) {
+                // If the tag is known and not defined as empty (e.g., <div>, <p>, <a>),
+                // treat the self-closing <tag /> as <tag></tag>.
+                // Insert the element normally (pushes onto stack).
+                insert(el);
+                // Acknowledge the self-closing flag. The HTML tree builder state machine
+                // should recognize this flag on a non-empty tag and immediately pop the
+                // element off the stack (effectively closing it).
+                tokeniser.acknowledgeSelfClosingFlag();
+            } else {
+                // If the tag is unknown (e.g., <foo />) or known-empty (e.g., <img />, <hr />),
+                // treat <tag /> as a self-closing element.
+                // Insert the node directly into the parent. Do not push onto the stack.
+                insertNode(el);
+                // Acknowledge the self-closing flag.
+                tokeniser.acknowledgeSelfClosingFlag();
             }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+            // el is implicitly returned by the last statement in the outer block
+        } else {
+            // Normal start tag <tag> (not self-closing)
+            // Insert the element normally (adds to parent, pushes onto stack).
             insert(el);
+        }
         return el;
     }
\ No newline at end of file
