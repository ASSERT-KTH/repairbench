diff --git a/tmp/edbebebf-c7d2-4233-893f-9a9b82ccf5a9_buggy.java b/tmp/b26c5941-d618-4838-a6bc-c57c0d2719d2_fixed.java
index dc93be3..cd9c342 100644
--- a/tmp/edbebebf-c7d2-4233-893f-9a9b82ccf5a9_buggy.java
+++ b/tmp/b26c5941-d618-4838-a6bc-c57c0d2719d2_fixed.java
@@ -1,14 +1,28 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // Use ProcessSettings to know tag types
+        Tag tag = Tag.valueOf(startTag.name(), settings);
+
+        // Handle known empty tags (void elements) properly.
+        if (tag.isEmpty()) {
+            Element el = insertEmpty(startTag); // Creates element, adds to parent, acknowledges flag if self-closing.
+            // Void elements are not pushed onto the stack.
+            return el;
+        }
+
+        // Handle non-empty tags (known non-empty, or unknown).
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            // Treat self-closing non-empty tags (e.g., <div/>, <foo/>) as start + immediate end.
+            // This replicates the original code's behavior for these cases, which aligns with the test expectation
+            // that <div/> becomes <div></div> and <a/> becomes <a></a>.
+            // It also handles <foo/> becoming <foo></foo> (which serializes to <foo/> if empty).
+            Element el = insertEmpty(startTag); // Creates element, adds to parent via insertNode, acknowledges flag.
+            stack.add(el);                     // Push onto stack (unlike usual insertEmpty behavior).
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // Immediately emit end tag to pop from stack.
             return el;
-        }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        } else {
+            // Regular start tag that is not self-closing and not a void element.
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el); // Normal insert - adds to parent and pushes onto stack.
             return el;
         }
+    }
\ No newline at end of file
