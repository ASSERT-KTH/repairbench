diff --git a/tmp/89662efd-6e3b-4c49-a135-e87bdac1683d_buggy.java b/tmp/77bbedd3-77ea-4a33-a703-9a95102e6adb_fixed.java
index dc93be3..ec19bae 100644
--- a/tmp/89662efd-6e3b-4c49-a135-e87bdac1683d_buggy.java
+++ b/tmp/77bbedd3-77ea-4a33-a703-9a95102e6adb_fixed.java
@@ -1,14 +1,30 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        Tag tag = Tag.valueOf(startTag.name()); // Get tag info
+
+        // handle self closing tags
         if (startTag.isSelfClosing()) {
+            // if known, non-empty tag like <div> or <a>, spec says treat element as start tag only (treat as <tag>)
+            // whereas Jsoup aims to be flexible and parse this as <tag></tag>
+            if (!tag.isUnknown() && !tag.isEmpty()) {
+                // So we create the element **normally**, insert it (which pushes to stack),
+                // and then immediately act as if we saw the end tag (emit & pop).
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el); // Insert normally (adds to parent, pushes to stack)
+                // Now immediately close it by emitting an end tag token.
+                // This lets the parser know the tag is closed, to avoid issues like </ CData> breaking out of script tags.
+                tokeniser.emit(new Token.EndTag(el.tagName()));
+                return el;
+            } else {
+                // else (known empty like <hr>, or unknown like <foo>) treat as self-closing
+                // Use insertEmpty, assuming it correctly creates/adds the element without pushing and marks appropriately.
                 Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+                // We don't push onto the stack or emit an end tag, as implicitly closed.
                 return el;
             }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        } else {
+            // normal open tag '<tag>'
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el); // Standard insertion adds to parent and pushes to stack
             return el;
         }
+    }
\ No newline at end of file
