diff --git a/tmp/1c46f0e1-7d94-4ef0-b38c-98edbd059cc2_buggy.java b/tmp/2c362976-61f2-4e6e-bb92-987f4def57bf_fixed.java
index dc93be3..f5abe30 100644
--- a/tmp/1c46f0e1-7d94-4ef0-b38c-98edbd059cc2_buggy.java
+++ b/tmp/2c362976-61f2-4e6e-bb92-987f4def57bf_fixed.java
@@ -1,14 +1,21 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        Tag tag = Tag.valueOf(startTag.name());
+
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
+            Element el = insertEmpty(startTag); // Create element, add node.
+            // If the tag is void, we are done. If non-void, add to stack and then immediately pop (emit end tag).
+            if (!tag.isVoid()) {
                 stack.add(el);
                 tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            } else {
+                // Store a self-closing flag for void tags, consistent with behavior for non-void tags like <div />,
+                // to align with XML/foreign content handling. Acknowledge the flag ensures this is done.
+                tokeniser.acknowledgeSelfClosingFlag();
+            }
             return el;
         }
         
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el); // Standard insertion: Add element to parent, push onto stack if not void.
         return el;
     }
\ No newline at end of file
