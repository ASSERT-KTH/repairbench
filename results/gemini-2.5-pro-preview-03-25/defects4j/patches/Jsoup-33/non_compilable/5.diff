diff --git a/tmp/9e7d1c38-58e5-4e41-bc60-268d8d6391e6_buggy.java b/tmp/b7e2feeb-8332-4d3a-b54d-7d61e0d2d409_fixed.java
index dc93be3..03272f9 100644
--- a/tmp/9e7d1c38-58e5-4e41-bc60-268d8d6391e6_buggy.java
+++ b/tmp/b7e2feeb-8332-4d3a-b54d-7d61e0d2d409_fixed.java
@@ -1,14 +1,25 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        Tag tag = treeBuilder.settings.normalizeTag(startTag.normalName()); // ensure tag name is normalized
+        Element el = new Element(tag, treeBuilder.getBaseUri(), treeBuilder.settings.normalizeAttributes(startTag.attributes));
+
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
+            if (tag.isKnownTag() && !tag.isEmpty()) {
+                // An explicit self-closing tag for a known non-empty tag (e.g. <div />). Treat as start/end tag.
+                insertNode(el);
+                treeBuilder.tokeniser.acknowledgeSelfClosingFlag(); // Acknowledge now, because we aren't sending the element up the stack.
+                // E.g. <p /> causes transition to InBody, which needs the flag acknowledged.
+
+                // process the end tag -- the call to insertNode checked that we could add the element appropriately.
+                // This directly pops the element from the stack / foster parents it etc.
+                process(new Token.EndTag(tag.normalName())); // Process the end tag inline.
+            } else {
+                // Unknown tag or known empty tag used with self-closing syntax. Insert as empty element.
+                insertEmpty(startTag); // This acknowledges the flag
             }
 
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        } else {
+            insertNode(el);
+            stack.add(el); // Push onto stack. Handled by process(Token.EndTag) when closes.
+        }
         return el;
     }
\ No newline at end of file
