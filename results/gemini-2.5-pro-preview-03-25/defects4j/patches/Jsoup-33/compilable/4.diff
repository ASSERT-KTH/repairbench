diff --git a/tmp/37235a66-f55d-4db5-8c00-de29d27bc117_buggy.java b/tmp/7e7057b2-26b2-4547-8dc7-a6767bd9e9bb_fixed.java
index dc93be3..b6c9b5e 100644
--- a/tmp/37235a66-f55d-4db5-8c00-de29d27bc117_buggy.java
+++ b/tmp/7e7057b2-26b2-4547-8dc7-a6767bd9e9bb_fixed.java
@@ -1,14 +1,30 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        Tag tag = Tag.valueOf(startTag.name());
+        // todo: wonder if for xml parsing, should treat all tags as unknown? because Elements are not restricted.
+
+        if (tag.isEmpty()) {
+            // Case 1: Void tag (e.g., <img>, <hr>). Always insert as empty, regardless of self-closing flag.
+            Element el = insertEmpty(startTag);
+            // The flag acknowledgement (if startTag was self-closing) is typically handled by the caller (process loop in TreeBuilder).
+            return el;
+        }
+
         if (startTag.isSelfClosing()) {
+             // Case 2: Non-void tag explicitly self-closed (e.g., <div />, <foo />)
+            if (!tag.isKnownTag()) {
+                // Case 2a: Unknown tag self-closed (e.g., <foo />). Treat as empty.
                 Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+                // Flag acknowledgement handled by caller.
                 return el;
+            } else {
+                // Case 2b: Known non-void tag self-closed (e.g., <div />, <a />). HTML5 treats as start tag, ignore '/'.
+                // Fall through to normal insertion below. The flag is acknowledged by the caller as a parse error.
+            }
         }
 
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        // Case 3: Normal start tag (e.g., <div>, <p>), or unknown non-self-closed tag (<foo>),
+        // or known non-void tag parsed as self-closing (<div />, <a />).
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el); // Normal insertion (adds to parent, pushes to stack).
         return el;
     }
\ No newline at end of file
