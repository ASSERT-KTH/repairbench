diff --git a/tmp/1c7e80f7-6e0c-4336-90d8-8858c331ea0b_buggy.java b/tmp/e038fa61-42b1-4e55-8b95-c9f71318d205_fixed.java
index dc93be3..5e93cfe 100644
--- a/tmp/1c7e80f7-6e0c-4336-90d8-8858c331ea0b_buggy.java
+++ b/tmp/e038fa61-42b1-4e55-8b95-c9f71318d205_fixed.java
@@ -1,14 +1,32 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        Tag tag = Tag.valueOf(startTag.name()); // Get tag settings (knows if block, void, etc.)
+
+        // Handle void tags (e.g., <img />, <br />, <hr />) according to spec. Includes <hr> - treat as implicit <hr />.
+        if (tag.isEmpty()) {
+            Element el = insertEmpty(startTag); // Creates element, adds to parent, acknowledges token. Does not push to stack.
+            return el;
+        }
+
+        // Handle non-void tags
         if (startTag.isSelfClosing()) {
+            // Self-closing tags for non-void elements are treated differently based on whether the tag is known or unknown.
+            if (tag.isKnownTag()) {
+                // Known non-void tag like <div /> or <a />. Allow it but force an end tag.
+                // Create the element, push it onto the stack, and immediately emit the end tag token.
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el); // Inserts the node, and pushes onto the stack (as tag is not empty).
+                tokeniser.emit(new Token.EndTag(el.tagName())); // Emit the end tag token to immediately close the element.
+                return el;
+            } else {
+                // Unknown tag like <foo />. Treat it as fully self-closing.
+                // Use insertEmpty, which creates the element, inserts it, acknowledges the flag, but does not push to stack.
                 Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
                 return el;
             }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
-        insert(el);
+        } else {
+            // Normal start tag like <a>, <div>, <foo>. Create element, insert node, push onto stack.
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el); // Inserts the node, and pushes onto the stack.
             return el;
         }
+    }
\ No newline at end of file
