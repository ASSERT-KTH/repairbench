diff --git a/tmp/97f6c3f6-760e-400a-b8ce-b020cf24ce0e_buggy.java b/tmp/d78f94f3-407a-4d3c-a77a-8a1eef0be95c_fixed.java
index 784bbab..90c0291 100644
--- a/tmp/97f6c3f6-760e-400a-b8ce-b020cf24ce0e_buggy.java
+++ b/tmp/d78f94f3-407a-4d3c-a77a-8a1eef0be95c_fixed.java
@@ -1,42 +1,73 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
+        final String[] formatHeader = this.format.getHeader(); // Explicit header array from format
+
+        // Check if a header is defined, either explicitly or implicitly (by requesting skipHeaderRecord).
+        // format.getSkipHeaderRecord() is the primary flag indicating a header row is expected/skipped.
+        if (this.format.getSkipHeaderRecord()) {
+            String[] headerRecord = null; // The actual header strings to use
+
+            // Determine the source of the header record.
             if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
-
-            String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
-                final CSVRecord nextRecord = this.nextRecord();
-                if (nextRecord != null) {
-                    headerRecord = nextRecord.values();
+                // An explicit header array was provided in the format.
+                // We must consume the corresponding header line from the input stream
+                // if skipHeaderRecord is true (which it should be if header is specified).
+                if (this.format.getSkipHeaderRecord()) {
+                    this.nextRecord(); // Skip the actual header line in the input
                 }
+                headerRecord = formatHeader; // Use the header from the format object
             } else {
-                if (this.format.getSkipHeaderRecord()) {
-                    this.nextRecord();
+                // No explicit header array - read header from the first record of the input.
+                // This happens when format.withHeader() is called without specific header strings.
+                final CSVRecord firstRecord = this.nextRecord(); // Read the first record to use as header
+                if (firstRecord != null) {
+                    headerRecord = firstRecord.values();
                 }
-                headerRecord = formatHeader;
+                // Note: If firstRecord is null (empty file), headerRecord remains null.
             }
 
-            // build the name to index mappings
+            // Build the header map if we have determined a header record.
+            // headerRecord can be null if the input stream was empty and header wasn't specified otherwise.
             if (headerRecord != null) {
+                // Use LinkedHashMap to preserve order and support null keys (if needed and allowed by format).
+                hdrMap = new LinkedHashMap<>();
+                final boolean ignoringEmpty = this.format.getIgnoreEmptyHeaders();
+
                 for (int i = 0; i < headerRecord.length; i++) {
-                    final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
-                        throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
-                                "\" in " + Arrays.toString(headerRecord));
+                    final String header = headerRecord[i]; // May be null if format specifies a null string conversion
+
+                    // Check if header is effectively empty and should be ignored based on format settings.
+                    // Null strings are generally handled by the parser based on format settings (e.g., withNullString),
+                    // resulting in null elements in headerRecord. Treat null as empty for ignoring purposes.
+                    final boolean effectivelyEmpty = (header == null || header.trim().isEmpty());
+
+                    if (ignoringEmpty && effectivelyEmpty) {
+                        continue; // Skip this header as requested by format settings.
                     }
+
+                    // Check for duplicates among non-ignored headers.
+                    // Behavior for duplicates might depend on format settings (e.g., allowDuplicateHeaderNames).
+                    // Assuming default behavior based on original code: duplicates are not allowed (unless empty & ignored).
+                    // Since ignored headers are skipped above, any duplicate found here constitutes an error.
+                    if (hdrMap.containsKey(header)) {
+                         // TODO: Consider adding a format option to allow duplicate headers
+                         throw new IllegalArgumentException(
+                                 "The header contains a duplicate name: \"" + header + "\" in " +
+                                 Arrays.toString(headerRecord));
+                    }
+
+                    // Add the valid header mapping.
                     hdrMap.put(header, Integer.valueOf(i));
                 }
             }
         }
+        // If format.getSkipHeaderRecord() was false, or if reading the header failed (e.g., empty file),
+        // hdrMap remains null, correctly indicating no header map is available.
         return hdrMap;
     }
\ No newline at end of file
