diff --git a/tmp/3176a2e0-64e5-433a-925d-1aba54b2357d_buggy.java b/tmp/d611e06a-3238-44cb-a933-b77e487f8e27_fixed.java
index 784bbab..e0453c1 100644
--- a/tmp/3176a2e0-64e5-433a-925d-1aba54b2357d_buggy.java
+++ b/tmp/d611e06a-3238-44cb-a933-b77e487f8e27_fixed.java
@@ -1,42 +1,64 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
-        Map<String, Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
+        // Check if header handling is specified by the format
+        if (!this.format.getSkipHeaderRecord()) {
+            // No header defined or expected, return null
+            return null;
+        }
 
+        // Header is expected, initialize the map
+        final Map<String, Integer> hdrMap = new LinkedHashMap<>();
         String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
-                final CSVRecord nextRecord = this.nextRecord();
-                if (nextRecord != null) {
-                    headerRecord = nextRecord.values();
+        final String[] formatHeader = this.format.getHeader(); // Get explicitly defined header, if any
+
+        if (formatHeader == null) {
+            // Header is defined by the first record, read it
+            // Note: Subsequent records might define different headers, iterator() may return them.
+            final CSVRecord firstRecord = this.nextRecord();
+            if (firstRecord != null) {
+                headerRecord = firstRecord.values();
             }
+            // Note: If firstRecord is null (empty input), headerRecord remains null.
         } else {
-                if (this.format.getSkipHeaderRecord()) {
-                    this.nextRecord();
-                }
-                headerRecord = formatHeader;
+            // Header is explicitly defined by formatHeader.
+            // We still need to consume the first record from the input if skipHeaderRecord is true.
+            // Since we are in this block, getSkipHeaderRecord() is true.
+            // Consume the actual header line from the input file/stream
+            final CSVRecord nextRecord = this.nextRecord();
+            // TODO: Should we check that the actual header matches the expected header (formatHeader)? currently ignored.
+            //       This check could be expensive for large files.
+            // Note: If the input stream is empty or does not contain the header record,
+            //       nextRecord() might return null. This seems acceptable as we use the formatHeader anyway.
+            headerRecord = formatHeader; // Use the explicitly defined header
         }
 
         // build the name to index mappings
         if (headerRecord != null) {
             for (int i = 0; i < headerRecord.length; i++) {
                 final String header = headerRecord[i];
+                // Check for null or empty headers, respecting the ignoreEmptyHeaders setting.
+                final boolean emptyHeader = header == null || header.trim().isEmpty();
+
+                // Check for duplicates, ignoring empty headers if requested
                 final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
+                if (containsHeader && (!emptyHeader || !this.format.getIgnoreEmptyHeaders())) {
+                    // Throw if duplicate AND (it's not empty OR we don't ignore empty)
+                    // Equivalent to: Throw if duplicate AND NOT (it is empty AND we ignore empty)
                      throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                              "\" in " + Arrays.toString(headerRecord));
                  }
+
+                // Add the mapping. If it's a duplicate empty header and ignoreEmptyHeaders=true,
+                // this will overwrite the previous entry for the empty header.
+                // If it's empty/null and ignoreEmptyHeaders=true, it's added (unless it was a non-ignorable duplicate).
                  hdrMap.put(header, Integer.valueOf(i));
             }
         }
-        }
+        // If headerRecord was null (e.g., empty file when reading header), return the empty hdrMap.
         return hdrMap;
     }
\ No newline at end of file
