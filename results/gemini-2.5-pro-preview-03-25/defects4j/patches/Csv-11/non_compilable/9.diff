diff --git a/tmp/0aa330d1-b886-4052-99f0-5a5cc48781be_buggy.java b/tmp/e606f37c-87d8-4b3f-922d-a9239fc9ca5f_fixed.java
index 784bbab..07656cc 100644
--- a/tmp/0aa330d1-b886-4052-99f0-5a5cc48781be_buggy.java
+++ b/tmp/e606f37c-87d8-4b3f-922d-a9239fc9ca5f_fixed.java
@@ -1,42 +1,74 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
         final String[] formatHeader = this.format.getHeader();
         if (formatHeader != null) {
             hdrMap = new LinkedHashMap<String, Integer>();
 
             String[] headerRecord = null;
             if (formatHeader.length == 0) {
                 // read the header from the first line of the file
                 final CSVRecord nextRecord = this.nextRecord();
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
             } else {
                 if (this.format.getSkipHeaderRecord()) {
                     this.nextRecord();
                 }
                 headerRecord = formatHeader;
             }
 
             // build the name to index mappings
             if (headerRecord != null) {
+                // Use a separate map to track occurrences of headers for duplicate detection.
+                // Keys are canonicalized (lowercase if ignoring case). Values are the index.
+                final Map<String, Integer> canonicalHeaderMap = new HashMap<>(headerRecord.length);
+                final boolean ignoreCase = this.format.getIgnoreHeaderCase();
+                final boolean ignoreEmpty = this.format.getIgnoreEmptyHeaders();
+
                 for (int i = 0; i < headerRecord.length; i++) {
-                    final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
-                        throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
-                                "\" in " + Arrays.toString(headerRecord));
+                    final String header = headerRecord[i]; // Could be null if reading from record
+
+                    // Check 1: Handle null or empty header based on ignoreEmpty flag
+                    final boolean emptyHeader = header == null || header.trim().isEmpty();
+                    if (emptyHeader && ignoreEmpty) {
+                        continue; // Skip if null/empty and ignoring empty headers
                     }
+
+                    // Check 2: Determine canonical name for duplicate checking
+                    final String canonicalHeader;
+                    if (header == null) {
+                        // Use null as the canonical name for a null header.
+                        // If ignoreEmpty is false, null is a valid header name.
+                        canonicalHeader = null;
+                    } else {
+                        // For non-null headers, canonical name is lowercase if ignoring case.
+                        canonicalHeader = ignoreCase ? header.toLowerCase() : header;
+                    }
+
+                    // Check 3: Check for duplicates using the canonical name
+                    if (canonicalHeaderMap.containsKey(canonicalHeader)) {
+                        // A duplicate canonical name exists.
+                        // This is an error unless it's a duplicate empty/null header AND ignoreEmpty is true,
+                        // but we already skipped those cases earlier.
+                        // So, any duplicate found here is an error according to the format settings.
+                        throw new IllegalArgumentException(
+                                "The header contains a duplicate name: \"" + header + "\" in " +
+                                        Arrays.toString(headerRecord));
+                    } else {
+                        // No duplicate canonical name found yet. Record it.
+                        canonicalHeaderMap.put(canonicalHeader, Integer.valueOf(i));
+                        // Add the original header (with original case, could be null/empty if not ignoring) to the main map.
                         hdrMap.put(header, Integer.valueOf(i));
                     }
                 }
             }
+        }
         return hdrMap;
     }
\ No newline at end of file
