diff --git a/tmp/a5d26ac5-6d9a-4f80-83cd-60b2baf3adfc_buggy.java b/tmp/673665e7-f726-407b-8314-0b29b887be37_fixed.java
index 784bbab..457b2ec 100644
--- a/tmp/a5d26ac5-6d9a-4f80-83cd-60b2baf3adfc_buggy.java
+++ b/tmp/673665e7-f726-407b-8314-0b29b887be37_fixed.java
@@ -1,42 +1,71 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
+        final String[] configuredHeader = this.format.getHeader(); // Explicitly configured header
 
-            String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
-                final CSVRecord nextRecord = this.nextRecord();
-                if (nextRecord != null) {
-                    headerRecord = nextRecord.values();
-                }
-            } else {
-                if (this.format.getSkipHeaderRecord()) {
-                    this.nextRecord();
+        if (configuredHeader != null) {
+            // Header defined explicitly in the format
+            hdrMap = new LinkedHashMap<>();
+            String[] headerRecord = configuredHeader;
+
+            // Build map from configured header
+            for (int i = 0; i < headerRecord.length; i++) {
+                final String header = headerRecord[i];
+                // Check for null/empty header, respecting ignoreEmptyHeaders setting
+                final boolean emptyHeader = header == null || header.trim().isEmpty();
+                if (emptyHeader && this.format.getIgnoreEmptyHeaders()) {
+                    continue; // Skip ignored header
                 }
-                headerRecord = formatHeader;
+
+                // Check for duplicates, respecting allowDuplicateHeaders setting
+                final boolean containsHeader = hdrMap.containsKey(header);
+                if (containsHeader && !this.format.getAllowDuplicateHeaders()) {
+                    throw new IllegalArgumentException(
+                            "The header contains a duplicate name: \"" + header + "\" in " + Arrays.toString(headerRecord));
                 }
 
-            // build the name to index mappings
-            if (headerRecord != null) {
+                // Add mapping if it's the first time encountering this header name or duplicates are allowed.
+                // If duplicates allowed, the first occurrence takes precedence.
+                if (!containsHeader) {
+                    hdrMap.put(header, Integer.valueOf(i));
+                }
+            }
+        } else if (this.format.getSkipHeaderRecord()) {
+            // Header is not configured, but we need to read it from the stream
+            // because skipHeaderRecord is true (e.g., set by withHeader())
+            final CSVRecord firstRecord = this.nextRecord(); // Read the first record
+            if (firstRecord != null) {
+                hdrMap = new LinkedHashMap<>();
+                String[] headerRecord = firstRecord.values(); // Get the values from the first record
                 for (int i = 0; i < headerRecord.length; i++) {
                     final String header = headerRecord[i];
+                    // Check for null/empty header, respecting ignoreEmptyHeaders setting
+                    final boolean emptyHeader = header == null || header.trim().isEmpty();
+                    if (emptyHeader && this.format.getIgnoreEmptyHeaders()) {
+                        continue; // Skip ignored header
+                    }
+
+                    // Check for duplicates, respecting allowDuplicateHeaders setting
                     final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
-                        throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
-                                "\" in " + Arrays.toString(headerRecord));
+                    if (containsHeader && !this.format.getAllowDuplicateHeaders()) {
+                         throw new IllegalArgumentException(
+                                "The header contains a duplicate name: \"" + header + "\" in " + Arrays.toString(headerRecord));
                     }
+
+                    // Add mapping if it's the first time encountering this header name or duplicates are allowed.
+                    // If duplicates allowed, the first occurrence takes precedence.
+                    if (!containsHeader) {
                         hdrMap.put(header, Integer.valueOf(i));
                     }
                 }
             }
+        }
+
+        // If no header is configured and skipHeaderRecord is false, hdrMap remains null.
         return hdrMap;
     }
\ No newline at end of file
