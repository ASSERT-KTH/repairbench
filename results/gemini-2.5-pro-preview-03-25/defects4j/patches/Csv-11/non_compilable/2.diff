diff --git a/tmp/9a5ac204-b198-420d-947e-a864a50b2bdd_buggy.java b/tmp/a79edb92-aba4-4b92-afe5-c3b44f95ec07_fixed.java
index 784bbab..c188f44 100644
--- a/tmp/9a5ac204-b198-420d-947e-a864a50b2bdd_buggy.java
+++ b/tmp/a79edb92-aba4-4b92-afe5-c3b44f95ec07_fixed.java
@@ -1,42 +1,79 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
-        Map<String, Integer> hdrMap = null;
+        // Use the getter methods for format settings to ensure consistency
         final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
+        final boolean isFormatHeaderDefined = formatHeader != null;
+        final boolean isFirstRecordHeader = this.format.isFirstRecordAsHeader();
 
+        // If no header is explicitly defined AND the first record is not configured as the header,
+        // then no header processing is needed. Return null.
+        if (!isFormatHeaderDefined && !isFirstRecordHeader) {
+            return null;
+        }
+
+        // Header processing is required. Initialize the map.
+        // Use LinkedHashMap to preserve the order of headers.
+        final Map<String, Integer> hdrMap = new LinkedHashMap<>();
         String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
+
+        if (isFormatHeaderDefined) {
+            // Header is explicitly defined in the format settings.
+            headerRecord = formatHeader;
+            // Check if the format specifies skipping the header record (the first line in the data).
+            // This is relevant only when the header is EXPLICITLY provided, allowing us
+            // to skip a header line that might also be present in the input data source.
+            if (this.format.getSkipHeaderRecord()) {
+                // Consume the first record from the input stream and discard it.
+                this.nextRecord();
+            }
+        } else {
+            // Header should be read from the first record of the input stream.
+            // Read the first record. This record IS the header.
             final CSVRecord nextRecord = this.nextRecord();
             if (nextRecord != null) {
                 headerRecord = nextRecord.values();
             }
-            } else {
-                if (this.format.getSkipHeaderRecord()) {
-                    this.nextRecord();
-                }
-                headerRecord = formatHeader;
+            // Note: format.getSkipHeaderRecord() is effectively ignored in this case,
+            // as the first record *must* be read to serve as the header.
+            // The CSVFormat Javadoc confirms this behavior.
         }
 
-            // build the name to index mappings
+        // Build the name-to-index mappings from the determined header record array.
         if (headerRecord != null) {
             for (int i = 0; i < headerRecord.length; i++) {
                 final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
+                // Check if the header string is null or effectively empty.
+                // Null can occur if format.withNullString() is used on an empty field.
+                final boolean emptyHeader = header == null || header.trim().isEmpty();
+
+                // Check for duplicate headers based on the format settings.
+                // The original logic's condition translates to:
+                // Throw if (it's a duplicate) AND (it's NOT (an empty header AND we are ignoring empty headers)).
+                final boolean containsHeader = header == null ? hdrMap.containsKey(null) : hdrMap.containsKey(header);
+                if (containsHeader && !(emptyHeader && this.format.getIgnoreEmptyHeaders())) {
                     throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                             "\" in " + Arrays.toString(headerRecord));
                 }
+
+                // Add the header to the map unless it's an empty header that should be ignored.
+                // This logic ensures that we add:
+                // 1. All non-empty headers.
+                // 2. Empty/null headers IF the format is NOT set to ignore empty headers.
+                if (!emptyHeader || !this.format.getIgnoreEmptyHeaders()) {
                     hdrMap.put(header, Integer.valueOf(i));
                 }
+                // Implicitly, if it IS an empty header AND we ARE ignoring empty headers,
+                // we simply skip adding it to the map. This also handles the case where
+                // a duplicate empty header was encountered but the exception was suppressed
+                // because ignoreEmptyHeaders was true; it's still not added to the map.
             }
         }
+
+        // Return the initialized map (which might be empty if the header record was null or empty).
         return hdrMap;
     }
\ No newline at end of file
