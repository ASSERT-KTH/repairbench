diff --git a/tmp/e5c1a59b-73fb-4db1-aa30-565120a566c3_buggy.java b/tmp/b9c635b7-dee0-4080-8a21-8085fac2a9cb_fixed.java
index 784bbab..eaad797 100644
--- a/tmp/e5c1a59b-73fb-4db1-aa30-565120a566c3_buggy.java
+++ b/tmp/b9c635b7-dee0-4080-8a21-8085fac2a9cb_fixed.java
@@ -1,42 +1,63 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
-     * @return null if the format has no header.
+     * @return null if the format has no header or the header record could not be read.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
-        Map<String, Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
+        Map<String, Integer> hdrMap = null; // Initialize map in the branches where a header is expected
+        final String[] formatHeader = this.format.getHeader(); // Header specified in format
 
         String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
-                final CSVRecord nextRecord = this.nextRecord();
-                if (nextRecord != null) {
-                    headerRecord = nextRecord.values();
-                }
-            } else {
+        if (formatHeader != null) {
+            // Header defined explicitly in the format.
+            hdrMap = new LinkedHashMap<String, Integer>();
             if (this.format.getSkipHeaderRecord()) {
+                // Skip the first record from the input stream if specified by the format.
+                // This is useful when the header is defined externally but still present in the data.
                 this.nextRecord();
             }
             headerRecord = formatHeader;
+        } else {
+            // Header is not defined in format, check if we should read it from the first record.
+            if (this.format.getSkipHeaderRecord()) {
+                // skipHeaderRecord is true, so read the header from the first line of the file.
+                final CSVRecord firstRecord = this.nextRecord();
+                if (firstRecord != null) {
+                    headerRecord = firstRecord.values();
+                    // Initialize map only if we successfully read a header record
+                    hdrMap = new LinkedHashMap<String, Integer>();
+                }
+                // If firstRecord is null (e.g., empty file), headerRecord remains null,
+                // and hdrMap remains null, indicating no header was found.
+            }
+            // else: !format.getSkipHeaderRecord() means no header expected from the file,
+            //       so hdrMap remains null.
         }
 
-            // build the name to index mappings
-            if (headerRecord != null) {
+        // build the name to index mappings if a header record was obtained and map initialized
+        if (hdrMap != null && headerRecord != null) {
             for (int i = 0; i < headerRecord.length; i++) {
                 final String header = headerRecord[i];
+                // Handle null headers potentially returned by CSVRecord.values()
+                if (header == null) {
+                   // Original code would throw NPE here. Silently skipping null header names.
+                   // Consider adding a format option to handle null headers differently if needed.
+                   continue;
+                }
+
                 final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
+                // Use trim() only if needed to avoid creating unnecessary strings for non-empty headers.
+                final boolean emptyHeader = header.isEmpty() || header.trim().isEmpty();
+
+                // Throw exception if it's a duplicate header,
+                // unless it's an empty header and ignoreEmptyHeaders is true.
                 if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
                     throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                             "\" in " + Arrays.toString(headerRecord));
                 }
                 hdrMap.put(header, Integer.valueOf(i));
             }
         }
-        }
-        return hdrMap;
+        return hdrMap; // Return null if no header was processed/found
     }
\ No newline at end of file
