diff --git a/tmp/ac87f7d4-931d-44f7-baf7-5f4c4e7f9ac6_buggy.java b/tmp/d3e547f9-bff2-46f6-8931-33c9b2872fe2_fixed.java
index 784bbab..a6d4869 100644
--- a/tmp/ac87f7d4-931d-44f7-baf7-5f4c4e7f9ac6_buggy.java
+++ b/tmp/d3e547f9-bff2-46f6-8931-33c9b2872fe2_fixed.java
@@ -1,42 +1,78 @@
     /**
-     * Initializes the name to index mapping if the format defines a header.
+     * Initializes the name to index mapping.
+     * <p>
+     * This method is called only if the format specifies a header, either explicitly via
+     * {@link CSVFormat#withHeader(String...)} or implicitly via {@link CSVFormat#withHeader()}.
+     * </p>
      *
-     * @return null if the format has no header.
-     * @throws IOException if there is a problem reading the header or skipping the first record
+     * @return The initialized mapping from header name to column index. Returns an empty map if
+     *         the header is read from the file and the file is empty. Will never return {@code null}.
+     * @throws IOException if there is a problem reading the header or skipping the first record.
+     * @throws IllegalArgumentException if the header contains duplicates (and duplicates are not ignored based on format settings).
      */
     private Map<String, Integer> initializeHeader() throws IOException {
-        Map<String, Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
-
+        // Use LinkedHashMap to maintain header order
+        final Map<String, Integer> hdrMap = new LinkedHashMap<String, Integer>();
+        final String[] formatHeader = this.format.getHeader(); // Header specified explicitly in format
         String[] headerRecord = null;
+
+        if (formatHeader != null) {
+            // Header names are provided by the format object.
+            // Note: According to original logic, an empty array formatHeader means read from file.
             if (formatHeader.length == 0) {
-                // read the header from the first line of the file
+                // Read header from the first record if format header is empty.
                 final CSVRecord nextRecord = this.nextRecord();
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
             } else {
+                // Header names were explicitly given. Use them.
+                // Optionally skip the first record if requested.
                 if (this.format.getSkipHeaderRecord()) {
                     this.nextRecord();
                 }
                 headerRecord = formatHeader;
             }
+        } else {
+            // Header names are read from the first record of the input stream.
+            // This case is invoked by format.withHeader() without arguments.
+            final CSVRecord nextRecord = this.nextRecord();
+            if (nextRecord != null) {
+                headerRecord = nextRecord.values();
+            }
+            // If nextRecord is null (e.g., empty file), headerRecord remains null.
+        }
 
         // build the name to index mappings
         if (headerRecord != null) {
             for (int i = 0; i < headerRecord.length; i++) {
                 final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
+                // Check for null header BEFORE calling trim()
+                final boolean emptyHeader = header == null || header.trim().isEmpty();
+
+                // Skip empty headers if the format specifies they should be ignored.
+                if (emptyHeader && this.format.getIgnoreEmptyHeaders()) {
+                    continue; // Skip this header - do not add to map or check for duplicates
+                }
+
+                // Check for duplicates after potentially ignoring empty headers.
+                // If the header is already present in the map, it's a duplicate among the headers
+                // that are actually being recorded (non-empty or empty-but-not-ignored).
+                if (hdrMap.containsKey(header)) {
+                    // Build detailed error message if duplicates are not allowed or if this specific duplicate isn't allowed
+                    // The original duplicate check logic was:
+                    // containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))
+                    // This simplifies to: containsHeader && (!emptyHeader || !this.format.getIgnoreEmptyHeaders())
+                    // This check is implicitly handled now because we `continue` above for ignored empty headers.
+                    // Any header reaching this point that is already in the map is a violation.
                     throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                             "\" in " + Arrays.toString(headerRecord));
                 }
+
+                // Add the header mapping.
                 hdrMap.put(header, Integer.valueOf(i));
             }
         }
-        }
+        // Return the map (never null). If the header couldn't be read (e.g., empty file), the map will be empty.
         return hdrMap;
     }
\ No newline at end of file
