diff --git a/tmp/a90cdafb-577f-438f-acaf-13c8aedc2a47_buggy.java b/tmp/049bcc9d-8d26-4407-b4e9-ab3fbbc0620e_fixed.java
index 784bbab..4f98ee3 100644
--- a/tmp/a90cdafb-577f-438f-acaf-13c8aedc2a47_buggy.java
+++ b/tmp/049bcc9d-8d26-4407-b4e9-ab3fbbc0620e_fixed.java
@@ -1,42 +1,61 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
         final String[] formatHeader = this.format.getHeader();
         if (formatHeader != null) {
+            // Use LinkedHashMap to preserve order
             hdrMap = new LinkedHashMap<String, Integer>();
 
             String[] headerRecord = null;
             if (formatHeader.length == 0) {
                 // read the header from the first line of the file
                 final CSVRecord nextRecord = this.nextRecord();
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
             } else {
+                // Header specified explicitly, may need to skip record
                 if (this.format.getSkipHeaderRecord()) {
                     this.nextRecord();
                 }
                 headerRecord = formatHeader;
             }
 
             // build the name to index mappings
+            // Note: headerRecord can be null if the file is empty and the header is read from the file
             if (headerRecord != null) {
                 for (int i = 0; i < headerRecord.length; i++) {
                     final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
+                    // Check if header is null or empty (due to null string or empty field).
+                    // Note: A header can be null if withNullString("") is used and a field is empty.
+                    final boolean emptyOrNullHeader = header == null || header.trim().isEmpty();
+                    
+                    // Determine whether to ignore this header
+                    final boolean ignoreHeader = emptyOrNullHeader && this.format.getIgnoreEmptyHeaders();
+
+                    // Add header to map if it is not ignored
+                    if (!ignoreHeader) {
+                        // Check for duplicates only among headers that are not ignored.
+                        if (hdrMap.containsKey(header)) {
+                            // Duplicate header name found. However, allow duplicates if specified.
+                            // Note: The original duplicate check logic implicitly assumed allowDuplicateHeaders was false.
+                            // Let's refine this check based on the format setting (assuming it exists or defaults to false).
+                            // Assuming !this.format.getAllowDuplicateHeaders() is the default/intended behavior here.
+                            // If duplicates are allowed, the last occurrence wins. The check might need adjustment
+                            // if getAllowDuplicateHeaders is true, but for fixing the NPE and ignoreEmptyHeaders,
+                            // throwing on non-ignored duplicates seems correct based on the original code's exception message.
                             throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                                     "\" in " + Arrays.toString(headerRecord));
                         }
                         hdrMap.put(header, Integer.valueOf(i));
                     }
                 }
             }
+        }
         return hdrMap;
     }
\ No newline at end of file
