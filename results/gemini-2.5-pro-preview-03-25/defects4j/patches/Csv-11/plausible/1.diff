diff --git a/tmp/2d16b304-2e29-46e0-b2ca-434878fa54b2_buggy.java b/tmp/03610b30-5c06-44a8-97c4-78c8a6b473ec_fixed.java
index 784bbab..79c7cf0 100644
--- a/tmp/2d16b304-2e29-46e0-b2ca-434878fa54b2_buggy.java
+++ b/tmp/03610b30-5c06-44a8-97c4-78c8a6b473ec_fixed.java
@@ -1,42 +1,64 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
         final String[] formatHeader = this.format.getHeader();
         if (formatHeader != null) {
             hdrMap = new LinkedHashMap<String, Integer>();
 
             String[] headerRecord = null;
             if (formatHeader.length == 0) {
                 // read the header from the first line of the file
                 final CSVRecord nextRecord = this.nextRecord();
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
             } else {
                 if (this.format.getSkipHeaderRecord()) {
                     this.nextRecord();
                 }
                 headerRecord = formatHeader;
             }
 
             // build the name to index mappings
             if (headerRecord != null) {
                 for (int i = 0; i < headerRecord.length; i++) {
                     final String header = headerRecord[i];
+                    // Check for null header before calling trim() or checking map contains
+                    final boolean headerIsNull = header == null;
+                    final boolean emptyHeader = headerIsNull || header.trim().isEmpty();
+                    final boolean ignoreHeader = emptyHeader && this.format.getIgnoreEmptyHeaders();
+
+                    // Check for duplicates, potentially ignoring empty headers
+                    // Note: containsKey(null) is valid for LinkedHashMap
                     final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
+
+                    // A duplicate is an error if:
+                    // 1. We already have this header: containsHeader is true
+                    // 2. AND EITHER
+                    //    a) It's not an empty header: !emptyHeader
+                    //    b) OR it IS an empty header, but we are NOT ignoring empty headers: (emptyHeader && !this.format.getIgnoreEmptyHeaders())
+                    // Simplified logic check from original code: containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))
+                    // Let's refine the condition slightly for clarity and ensure it handles the null case properly treated as empty.
+                    // Error if duplicate exists AND it's not an empty header that we are supposed to ignore.
+                    if (containsHeader && !ignoreHeader) {
+                         // If it's a non-ignored empty header, check if duplicates of empty are allowed
+                         if (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders())) {
                              throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                                      "\" in " + Arrays.toString(headerRecord));
                          }
+                    }
+
+                    // Add mapping if the header should not be ignored
+                    if (!ignoreHeader) {
                          hdrMap.put(header, Integer.valueOf(i));
                     }
                 }
             }
+        }
         return hdrMap;
     }
\ No newline at end of file
