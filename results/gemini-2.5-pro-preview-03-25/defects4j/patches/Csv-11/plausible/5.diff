diff --git a/tmp/6031db2f-ad6c-4d74-8276-3b533bf8c1d9_buggy.java b/tmp/8e95aaf4-732f-4e91-947e-d0331d861284_fixed.java
index 784bbab..7af51fc 100644
--- a/tmp/6031db2f-ad6c-4d74-8276-3b533bf8c1d9_buggy.java
+++ b/tmp/8e95aaf4-732f-4e91-947e-d0331d861284_fixed.java
@@ -1,42 +1,55 @@
     /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String, Integer> initializeHeader() throws IOException {
         Map<String, Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
+        // Use a copy of the header array from the format as the format is immutable.
+        final String[] formatHeader = this.format.getHeader() == null ? null : this.format.getHeader().clone();
         if (formatHeader != null) {
             hdrMap = new LinkedHashMap<String, Integer>();
 
             String[] headerRecord = null;
             if (formatHeader.length == 0) {
                 // read the header from the first line of the file
                 final CSVRecord nextRecord = this.nextRecord();
                 if (nextRecord != null) {
                     headerRecord = nextRecord.values();
                 }
             } else {
                 if (this.format.getSkipHeaderRecord()) {
                     this.nextRecord();
                 }
-                headerRecord = formatHeader;
+                headerRecord = formatHeader; // Use the cloned formatHeader
             }
 
             // build the name to index mappings
             if (headerRecord != null) {
                 for (int i = 0; i < headerRecord.length; i++) {
                     final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
-                        throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
-                                "\" in " + Arrays.toString(headerRecord));
+                    // Check for null first to avoid NPE on trim()
+                    final boolean emptyHeader = header == null || header.trim().isEmpty();
+
+                    // Determine if this header should be ignored
+                    final boolean ignoreHeader = emptyHeader && this.format.getIgnoreEmptyHeaders();
+
+                    if (!ignoreHeader) {
+                        // If not ignoring this header, check for duplicates and add
+                        if (hdrMap.containsKey(header)) { // containsKey handles null keys correctly in LinkedHashMap
+                             // Format the error message based on whether the duplicate is null
+                             final String Hdr = header == null ? "null": header;
+                             // Added index information to the error message for clarity
+                             throw new IllegalArgumentException(
+                                     "The header contains a duplicate name: \"" + Hdr + "\" at index " + i +
+                                     " in " + Arrays.toString(headerRecord));
                         }
                         hdrMap.put(header, Integer.valueOf(i));
                     }
+                    // If ignoreHeader is true, do nothing (skip adding, skip duplicate check for ignored header)
+                }
             }
         }
         return hdrMap;
     }
\ No newline at end of file
