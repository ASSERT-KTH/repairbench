diff --git a/tmp/1d6a04cc-a68c-44d1-a1c7-78e4d7d477e5_buggy.java b/tmp/c8b1c95b-9052-42c2-8c08-12d9af839e7a_fixed.java
index 98f719c..9fc754a 100644
--- a/tmp/1d6a04cc-a68c-44d1-a1c7-78e4d7d477e5_buggy.java
+++ b/tmp/c8b1c95b-9052-42c2-8c08-12d9af839e7a_fixed.java
@@ -1,72 +1,90 @@
+import java.nio.charset.CharsetEncoder;
+
 /** Helper to escape javascript string as well as regular expression */
 static String strEscape(String s, char quote,
                         String doublequoteEscape,
                         String singlequoteEscape,
                         String backslashEscape,
                         CharsetEncoder outputCharsetEncoder) {
   StringBuilder sb = new StringBuilder(s.length() + 2);
   sb.append(quote);
   for (int i = 0; i < s.length(); i++) {
     char c = s.charAt(i);
     switch (c) {
       case '\0': sb.append("\\0"); break;
       case '\n': sb.append("\\n"); break;
       case '\r': sb.append("\\r"); break;
       case '\t': sb.append("\\t"); break;
       case '\\': sb.append(backslashEscape); break;
       case '\"': sb.append(doublequoteEscape); break;
       case '\'': sb.append(singlequoteEscape); break;
       case '>':                       // Break --> into --\> or ]]> into ]]\>
         if (i >= 2 &&
             ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
              (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
           sb.append("\\>");
         } else {
           sb.append(c);
         }
         break;
       case '<':
         // Break </script into <\/script
         final String END_SCRIPT = "/script";
 
         // Break <!-- into <\!--
         final String START_COMMENT = "!--";
 
         if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                             END_SCRIPT.length())) {
           sb.append("<\\");
         } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                    START_COMMENT.length())) {
           sb.append("<\\");
         } else {
           sb.append(c);
         }
         break;
       default:
         // If we're given an outputCharsetEncoder, then check if the
         //  character can be represented in this character set.
         if (outputCharsetEncoder != null) {
           if (outputCharsetEncoder.canEncode(c)) {
             sb.append(c);
           } else {
             // Unicode-escape the character.
             appendHexJavaScriptRepresentation(sb, c);
           }
         } else {
           // No charsetEncoder provided - pass straight latin characters
           // through, and escape the rest.  Doing the explicit character
           // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
+          // Note that cyborg interpretation of control characters
+          // (codes < 0x20) requires escaping those specific characters,
+          // and we also escape the DEL character (0x7f) because it's technically
+          // a control character and can cause problems. Previously, this
+          // condition was c <= 0x7f, which incorrectly included DEL.
+          if (c > 0x1f && c < 0x7f) { // Fixed: Changed <= to < to escape 0x7f (DEL)
             sb.append(c);
           } else {
             // Other characters can be misinterpreted by some js parsers,
             // or perhaps mangled by proxies along the way,
             // so we play it safe and unicode escape them.
             appendHexJavaScriptRepresentation(sb, c);
           }
         }
     }
   }
   sb.append(quote);
   return sb.toString();
 }
+
+// Helper function assumed to exist based on the original code context
+private static void appendHexJavaScriptRepresentation(StringBuilder sb, char c) {
+  // This is a placeholder implementation based on common JS escaping
+  sb.append("\\u");
+  String hex = Integer.toHexString(c);
+  for (int i = hex.length(); i < 4; i++) {
+    sb.append('0');
+  }
+  sb.append(hex);
+}
