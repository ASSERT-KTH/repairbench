diff --git a/tmp/d80a73eb-4ef8-45b6-9003-7529e47afae1_buggy.java b/tmp/cb40eb6b-c7de-49f6-8994-61c92908d4d6_fixed.java
index 3d8e775..e57d099 100644
--- a/tmp/d80a73eb-4ef8-45b6-9003-7529e47afae1_buggy.java
+++ b/tmp/cb40eb6b-c7de-49f6-8994-61c92908d4d6_fixed.java
@@ -1,44 +1,78 @@
     /* (non-Javadoc)
      * @see java.lang.Object#equals(java.lang.Object)
      */
     @Override
     public boolean equals(Object obj) {
         if (this == obj) {
             return true;
         }
         if (obj == null || getClass() != obj.getClass()) {
             return false;
         }
         ZipArchiveEntry other = (ZipArchiveEntry) obj;
         String myName = getName();
         String otherName = other.getName();
         if (myName == null) {
             if (otherName != null) {
                 return false;
             }
         } else if (!myName.equals(otherName)) {
             return false;
         }
+
+        // Fix: Treat null comments and empty string comments as equal
+        // See https://issues.apache.org/jira/browse/COMPRESS-187
         String myComment = getComment();
         String otherComment = other.getComment();
         if (myComment == null) {
-            if (otherComment != null) {
+            // If my comment is null, the other comment must be null or empty for equality
+            if (otherComment != null && !otherComment.isEmpty()) {
                 return false;
             }
-        } else if (!myComment.equals(otherComment)) {
+        } else {
+            // If my comment is not null, use standard equals comparison
+            // This handles the case where otherComment might be null correctly
+            // It also correctly returns false if myComment is "" and otherComment is non-empty
+            if (!myComment.equals(otherComment)) {
+                 // However, we need to consider the case where myComment is non-empty and otherComment is null
+                 // The standard equals handles this, but we need to ensure myComment="" equals otherComment=null
+                 // Let's simplify by treating null as empty string for comparison
+                 if (otherComment == null && !myComment.isEmpty()) {
                      return false;
                  }
+                 // Re-check equality after potential null check
+                 if (otherComment != null && !myComment.equals(otherComment)) {
+                    return false;
+                 }
+            }
+        }
+        
+        // Alternative simplified fix: Treat null as empty for comparison directly
+        String c1 = getComment();
+        String c2 = other.getComment();
+        if (c1 == null) {
+            c1 = "";
+        }
+        if (c2 == null) {
+            c2 = "";
+        }
+        if (!c1.equals(c2)){
+            return false;
+        }
+
+
+        // Continue with the rest of the comparisons
         return getTime() == other.getTime()
             && getInternalAttributes() == other.getInternalAttributes()
             && getPlatform() == other.getPlatform()
             && getExternalAttributes() == other.getExternalAttributes()
             && getMethod() == other.getMethod()
             && getSize() == other.getSize()
             && getCrc() == other.getCrc()
             && getCompressedSize() == other.getCompressedSize()
             && Arrays.equals(getCentralDirectoryExtra(),
                              other.getCentralDirectoryExtra())
             && Arrays.equals(getLocalFileDataExtra(),
                              other.getLocalFileDataExtra())
             && gpb.equals(other.gpb);
     }
\ No newline at end of file
