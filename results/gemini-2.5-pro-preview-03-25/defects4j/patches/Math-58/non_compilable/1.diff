diff --git a/tmp/2efb2c49-e47f-43a2-a4bb-420503d7ce35_buggy.java b/tmp/998b8537-eb30-4a2e-b0e5-7351d9cda927_fixed.java
index 3002587..799bf70 100644
--- a/tmp/2efb2c49-e47f-43a2-a4bb-420503d7ce35_buggy.java
+++ b/tmp/998b8537-eb30-4a2e-b0e5-7351d9cda927_fixed.java
@@ -1,10 +1,33 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
+     * observed points (in the same order as above), or {@code NaN} values
+     * if the algorithm failed to converge or the computation resulted in
+     * illegal parameters.
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
+        try {
             return fit(new Gaussian.Parametric(), guess);
+        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+            // As observed in MATH-519, the optimizer might probe
+            // parameter values that are illegal for the model function
+            // (e.g. negative standard deviation). Issue is more general
+            // than MATH-519 indicates.
+            final int numParams = guess.length;
+            final double[] result = new double[numParams];
+            java.util.Arrays.fill(result, Double.NaN);
+            return result;
+        } catch (org.apache.commons.math.optimization.OptimizationException e) {
+            // Initial guess may be too far from optimum. Or, computation
+            // resulted in parameters that are illegal for the function.
+            // Those exceptions are not separated, so assume the latter
+            // and return NaN.
+            // This is consistent with the requirement in MATH-519.
+            final int numParams = guess.length;
+            final double[] result = new double[numParams];
+            java.util.Arrays.fill(result, Double.NaN);
+            return result;
+       }
     }
\ No newline at end of file
