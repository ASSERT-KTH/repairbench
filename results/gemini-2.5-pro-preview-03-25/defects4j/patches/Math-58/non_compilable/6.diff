diff --git a/tmp/fe484cb4-4c6e-4fd0-9512-08a7c62e4523_buggy.java b/tmp/e482b2be-0dd6-40e5-8bf7-43e76f3aa493_fixed.java
index 3002587..23e1f22 100644
--- a/tmp/fe484cb4-4c6e-4fd0-9512-08a7c62e4523_buggy.java
+++ b/tmp/e482b2be-0dd6-40e5-8bf7-43e76f3aa493_fixed.java
@@ -1,10 +1,72 @@
+import org.apache.commons.math.FunctionEvaluationException;
+import org.apache.commons.math.exception.NotStrictlyPositiveException;
+import org.apache.commons.math.optimization.ConvergenceException;
+import org.apache.commons.math.optimization.fitting.Gaussian;
+import org.apache.commons.math.optimization.fitting.ParameterGuesser;
+// Assuming the base class fit method declares throws ConvergenceException, FunctionEvaluationException
+// which are checked exceptions in Apache Commons Math 2.x.
+
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
+     * observed points (in the same order as above: norm, mean, sigma).
+     * If the optimization fails due to constraints violation on parameters
+     * (e.g. negative standard deviation) during function evaluation,
+     * returns an array filled with {@code Double.NaN}.
+     * @throws ConvergenceException if the optimization algorithm fails to converge
+     * for reasons other than parameter constraint violations during evaluation.
+     * @throws FunctionEvaluationException if the objective function throws it directly
+     * and it's not related to parameter constraints.
      */
-    public double[] fit() {
+    public double[] fit() throws ConvergenceException, FunctionEvaluationException {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
+        try {
+            // Delegate to the base class fit method which performs the optimization.
+            // This method can throw ConvergenceException or FunctionEvaluationException.
+            // The underlying objective function (Gaussian.Parametric) might throw
+            // NotStrictlyPositiveException (a RuntimeException) if sigma is negative,
+            // which the optimizer (e.g., Levenberg-Marquardt) typically catches and
+            // wraps in a ConvergenceException.
             return fit(new Gaussian.Parametric(), guess);
+        } catch (Exception e) {
+            // Catch all exceptions during fitting to check for the specific cause.
+            Throwable cause = e;
+            boolean isConstraintViolation = false;
+            while (cause != null) {
+                // Check if the cause chain contains NotStrictlyPositiveException,
+                // which indicates that the optimizer tried a negative sigma.
+                if (cause instanceof NotStrictlyPositiveException) {
+                    isConstraintViolation = true;
+                    break;
+                }
+                cause = cause.getCause();
+            }
+
+            if (isConstraintViolation) {
+                // If a NotStrictlyPositiveException was found in the cause chain,
+                // it means the optimization failed because the optimizer attempted
+                // to evaluate the Gaussian function with non-positive sigma.
+                // As required by the test contract/comment, return an array of NaNs.
+                return new double[] { Double.NaN, Double.NaN, Double.NaN };
+            } else {
+                // If the exception was not caused by NotStrictlyPositiveException,
+                // it indicates a different failure mode (e.g., true non-convergence,
+                // other function evaluation errors, etc.).
+                // Re-throw the original exception to let the caller handle it.
+                // We need to handle checked exceptions declared by the base 'fit' method.
+                if (e instanceof ConvergenceException) {
+                    throw (ConvergenceException) e;
+                } else if (e instanceof FunctionEvaluationException) {
+                    throw (FunctionEvaluationException) e;
+                } else if (e instanceof RuntimeException) {
+                    throw (RuntimeException) e;
+                } else {
+                    // If it's a checked exception not declared, wrap it.
+                    // This case should be unlikely if the base 'fit' method
+                    // correctly declares its exceptions.
+                    throw new RuntimeException(e);
+                }
+            }
+        }
     }
\ No newline at end of file
