diff --git a/tmp/93afda4c-9e10-4eb3-b0fb-2742ee440551_buggy.java b/tmp/4ce05a6f-2186-4360-a8f3-12b89b314b67_fixed.java
index 3002587..89c9bf2 100644
--- a/tmp/93afda4c-9e10-4eb3-b0fb-2742ee440551_buggy.java
+++ b/tmp/4ce05a6f-2186-4360-a8f3-12b89b314b67_fixed.java
@@ -1,10 +1,62 @@
+import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;
+import org.apache.commons.math.exception.NotStrictlyPositiveException;
+import org.apache.commons.math.optimization.fitting.Gaussian; // Assuming Gaussian.Parametric is here
+import org.apache.commons.math.optimization.fitting.WeightedObservedPoint; // Needed for ParameterGuesser
+import java.util.List; // Needed for ParameterGuesser constructor type
+
+// The following import might be needed depending on the exact package structure
+// and how ParameterGuesser and Gaussian.Parametric are accessed.
+// Adjust imports as necessary based on the project structure.
+// import org.apache.commons.math.optimization.fitting.Gaussian.*;
+
+
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+
+        // Wrap the Gaussian function to handle cases where the optimizer might
+        // attempt to evaluate it with a non-positive standard deviation (sigma).
+        // This wrapper returns POSITIVE_INFINITY for the value and NaN for the
+        // gradient in such cases, signaling to the optimizer that the parameters
+        // are infeasible without throwing an exception that would halt optimization.
+        ParametricUnivariateRealFunction gaussianWrapper = new ParametricUnivariateRealFunction() {
+            private final Gaussian.Parametric internalGaussian = new Gaussian.Parametric();
+
+            @Override
+            public double value(double x, double[] parameters) {
+                try {
+                    // Delegate to the original function.
+                    // It throws NotStrictlyPositiveException if sigma (parameters[2]) <= 0.
+                    return internalGaussian.value(x, parameters);
+                } catch (NotStrictlyPositiveException e) {
+                    // If sigma is not positive, return a large value to penalize this parameter set.
+                    return Double.POSITIVE_INFINITY;
+                }
+            }
+
+            @Override
+            public double[] gradient(double x, double[] parameters) {
+                 try {
+                    // Delegate to the original function's gradient calculation.
+                    // It throws NotStrictlyPositiveException if sigma (parameters[2]) <= 0.
+                    return internalGaussian.gradient(x, parameters);
+                } catch (NotStrictlyPositiveException e) {
+                    // If sigma is not positive, the gradient calculation fails.
+                    // Return an array of NaNs to signal the issue to the optimizer.
+                    // Levenberg-Marquardt optimizer should hopefully handle this by rejecting the step.
+                    double[] grad = new double[parameters.length];
+                    java.util.Arrays.fill(grad, Double.NaN);
+                    return grad;
+                }
+            }
+        };
+
+        // Call the fit method (likely from the superclass CurveFitter)
+        // with the wrapped "safe" Gaussian function and the initial guess.
+        return fit(gaussianWrapper, guess);
     }
\ No newline at end of file
