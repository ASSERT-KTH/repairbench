diff --git a/tmp/e9cf07be-71a9-4045-8bc5-197c1a2f003d_buggy.java b/tmp/0d02b12b-453e-40cb-8878-62764532a7e2_fixed.java
index 3002587..933cfeb 100644
--- a/tmp/e9cf07be-71a9-4045-8bc5-197c1a2f003d_buggy.java
+++ b/tmp/0d02b12b-453e-40cb-8878-62764532a7e2_fixed.java
@@ -1,10 +1,52 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        
+        final org.apache.commons.math.analysis.function.Gaussian.Parametric originalGaussian = new org.apache.commons.math.analysis.function.Gaussian.Parametric();
+
+        // Wrap the function to handle exceptions during optimization evaluation.
+        // This allows the optimizer to potentially recover if it explores invalid parameter regions (e.g., negative sigma).
+        // This approach mirrors the logic applied in CurveFitter for MATH-519, but implemented here
+        // by modifying the function passed to the fitter.
+        org.apache.commons.math.analysis.ParametricUnivariateRealFunction safeGaussian = 
+            new org.apache.commons.math.analysis.ParametricUnivariateRealFunction() {
+                public double value(double x, double[] parameters) {
+                    try {
+                        // Delegate to the original Gaussian function's value method.
+                        // It throws NotStrictlyPositiveException if sigma (parameters[2]) is <= 0.
+                        return originalGaussian.value(x, parameters);
+                    } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+                        // As per the fix for MATH-519 (applied in CurveFitter), return NaN
+                        // to allow robust optimizers to handle the failed evaluation.
+                        return Double.NaN;
+                    } catch (RuntimeException e) {
+                        // Catch other potential runtime exceptions during evaluation for robustness.
+                        return Double.NaN;
+                    }
+                }
+
+                public double[] gradient(double x, double[] parameters) {
+                    try {
+                        // Delegate to the original Gaussian function's gradient method.
+                        // It also throws NotStrictlyPositiveException if sigma is invalid.
+                        return originalGaussian.gradient(x, parameters);
+                    } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+                        // Return NaN gradient if evaluation failed due to non-positive sigma.
+                        // The gradient array must have the same dimension as the parameters (norm, mean, sigma).
+                        return new double[] { Double.NaN, Double.NaN, Double.NaN };
+                    } catch (RuntimeException e) {
+                         // Return NaN gradient for other runtime exceptions as well.
+                         return new double[] { Double.NaN, Double.NaN, Double.NaN };
+                    }
+                }
+            };
+
+        // Call the general-purpose fitting method (likely inherited or defined elsewhere in GaussianFitter/CurveFitter)
+        // with the wrapped "safe" function and the initial guess.
+        return fit(safeGaussian, guess);
     }
\ No newline at end of file
