diff --git a/tmp/340b049f-5abb-4bd3-be53-b236709d0a1a_buggy.java b/tmp/26e3b2dc-bebe-4c85-83ad-1712ce3c8050_fixed.java
index 3c69e10..111852b 100644
--- a/tmp/340b049f-5abb-4bd3-be53-b236709d0a1a_buggy.java
+++ b/tmp/26e3b2dc-bebe-4c85-83ad-1712ce3c8050_fixed.java
@@ -1,27 +1,47 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        // Calculate n1 * n2 using long to prevent overflow for large n1, n2
+        final long n1n2prod = (long)n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+
+        // Calculate variance: VarU = n1 * n2 * (n1 + n2 + 1) / 12.0
+        // Use long for intermediate calculations to prevent overflow
+        // The sum (n1 + n2 + 1) can overflow int, cast needed.
+        // The product n1n2prod * nSum can overflow long, so use double arithmetic carefully.
+        final long nSum = (long)n1 + n2 + 1;
+        final double VarU = n1n2prod / 12.0 * nSum; // Calculate N1*N2 / 12.0 first to prevent long overflow
+
+        // Ensure VarU is positive to avoid issues with sqrt.
+        // Variance should theoretically be positive unless n1 or n2 is 0,
+        // or in degenerate cases, but floating point issues could arise.
+        // If VarU is non-positive, the normal approximation is likely invalid.
+        // However, proceeding might lead to NaN or errors. The original code
+        // didn't explicitly handle this, so we follow suit but are aware.
+        // A VarU of 0 would imply Umin = EU, z = 0/0 (NaN) or (non-zero)/0 (Inf).
+        // If Umin=EU, p should be 1. If Umin!=EU and VarU=0, p should be 0? Needs clarification.
+        // For now, assume VarU > 0 for valid inputs.
 
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
+        // Use standard normal distribution to calculate tail probability
+        // TODO: Reuse standardNormal instance if performance critical
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
+        // Two-sided p-value is 2 * P(Z <= z), since Umin is used, z <= 0.
         return 2 * standardNormal.cumulativeProbability(z);
     }
\ No newline at end of file
