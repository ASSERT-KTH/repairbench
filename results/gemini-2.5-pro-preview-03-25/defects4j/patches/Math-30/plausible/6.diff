diff --git a/tmp/1123ca9f-ce03-4021-90b0-ee72248ae276_buggy.java b/tmp/1dca9862-07fb-482c-8b3e-0ee438f9cf43_fixed.java
index 3c69e10..d63066e 100644
--- a/tmp/1123ca9f-ce03-4021-90b0-ee72248ae276_buggy.java
+++ b/tmp/1dca9862-07fb-482c-8b3e-0ee438f9cf43_fixed.java
@@ -1,27 +1,35 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        // Use long to avoid intermediate overflow during variance calculation
+        final long n1l = n1;
+        final long n2l = n2;
+        final long n1n2prod = n1l * n2l;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+        // Compute VarU using long intermediate results to prevent overflow
+        final double VarU = n1n2prod * (n1l + n2l + 1L) / 12.0;
 
+        // Compute z-score without continuity correction
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
+        // Calculate the two-sided p-value.
+        // Since Umin is used (Umin <= EU), z will be <= 0.
+        // The p-value is 2 * P(Z <= z).
         return 2 * standardNormal.cumulativeProbability(z);
     }
\ No newline at end of file
