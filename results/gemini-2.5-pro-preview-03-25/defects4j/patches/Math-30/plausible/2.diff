diff --git a/tmp/045af777-4cb0-491d-aa19-e81cec96a0e7_buggy.java b/tmp/20365d17-ee3b-4fd4-b6fe-f60611454fc4_fixed.java
index 3c69e10..b31089c 100644
--- a/tmp/045af777-4cb0-491d-aa19-e81cec96a0e7_buggy.java
+++ b/tmp/20365d17-ee3b-4fd4-b6fe-f60611454fc4_fixed.java
@@ -1,27 +1,43 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        // Use long to prevent overflow in intermediate calculation n1 * n2
+        final long n1n2prod = (long) n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+        // Compute variance: Var(U) = n1 * n2 * (n1 + n2 + 1) / 12
+        // Use double arithmetic from the start for the sum part to avoid potential long overflow
+        // if n1 + n2 + 1 is very large, although n1 and n2 are int, their sum fits long.
+        // The product n1n2prod * (n1+n2+1) could exceed Long.MAX_VALUE. Use double arithmetic.
+        final double n1PlusN2Plus1 = (double) n1 + n2 + 1.0;
+        final double VarU = n1n2prod * n1PlusN2Plus1 / 12.0;
+
+        // Handle degenerate case VarU = 0 (e.g., n1=0 or n2=0)
+        // Return p-value 1.0 (no evidence against H0)
+        if (VarU <= 0.0) {
+            return 1.0;
+        }
+
+        final double sqrtVarU = FastMath.sqrt(VarU);
+        final double z = (Umin - EU) / sqrtVarU;
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // P-value is P(|Z| >= |z|) = 2 * P(Z >= |z|) = 2 * P(Z <= -|z|)
+        // Use -abs(z) for the cumulative probability calculation
+        return 2 * standardNormal.cumulativeProbability(-FastMath.abs(z));
     }
\ No newline at end of file
