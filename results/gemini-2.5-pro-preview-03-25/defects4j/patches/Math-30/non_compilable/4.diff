diff --git a/tmp/b63e3772-bbb8-4d72-896d-195864310765_buggy.java b/tmp/a29bde80-ec3a-4622-8bd1-365695d2fcb7_fixed.java
index 3c69e10..eeef9b3 100644
--- a/tmp/b63e3772-bbb8-4d72-896d-195864310765_buggy.java
+++ b/tmp/a29bde80-ec3a-4622-8bd1-365695d2fcb7_fixed.java
@@ -1,27 +1,57 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        final long n1n2prod = (long) n1 * n2; // Use long to avoid intermediate overflow
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+        // Cast to double before multiplying by (n1 + n2 + 1) to avoid overflow
+        final double VarU = n1n2prod / 12.0 * (n1 + n2 + 1);
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+        // Compute z using VarU. If VarU is 0, handle appropriately.
+        // (VarU can be 0 if n1=0 or n2=0 or n1+n2+1=0, though checks upstream might prevent this)
+        // However, the direct formula for z is robust towards VarU = 0 if handled correctly later.
+        // If VarU is 0, Umin must equal EU (both 0), z should be 0?
+        // Let's consider edge cases: If n1=0 or n2=0, n1n2prod=0, EU=0, VarU=0. Umin would also be 0.
+        // z = (0 - 0) / sqrt(0) -> 0/0 -> NaN.
+        // A p-value for n=0 is typically undefined or 1. The calling method likely handles n=0 cases.
+        // Assuming n1, n2 > 0.
 
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
+        // Check for VarU == 0 to avoid division by zero or sqrt of negative (though VarU formula >= 0)
+        if (VarU == 0) {
+             // If variance is 0, data is likely identical or samples are empty.
+             // Umin should equal EU in this case. z = 0, p-value = 1.
+             // Or handle as per statistical convention for zero variance.
+             // Let's assume standard normal CDF of 0 gives 0.5, so 2 * 0.5 = 1.
+             // This case implies no variance/difference.
+             final double z = 0; // Effectively (Umin - EU) is 0 if VarU is 0
+        }
+
+        // Calculate z-score
+        final double sqrtVarU = FastMath.sqrt(VarU);
+        // Avoid division by zero if VarU is extremely small but not exactly 0.
+        if (sqrtVarU == 0) {
+            // Consider Umin == EU, z=0. P-value=1.
+             final double z = 0;
+        }
+
+        final double z = (Umin - EU) / sqrtVarU;
+
+
+        final NormalDistribution standardNormal = new NormalDistribution(null, 0, 1, // Use default RNG, mean 0, sd 1
+                                           NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
 
         return 2 * standardNormal.cumulativeProbability(z);
     }
\ No newline at end of file
