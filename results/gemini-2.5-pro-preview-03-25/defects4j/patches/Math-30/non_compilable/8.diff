diff --git a/tmp/3bd5d213-f923-44f0-b40a-28715b6dd670_buggy.java b/tmp/c94561e1-0191-40ed-bf3a-7eef1be89fd3_fixed.java
index 3c69e10..4b25be8 100644
--- a/tmp/3bd5d213-f923-44f0-b40a-28715b6dd670_buggy.java
+++ b/tmp/c94561e1-0191-40ed-bf3a-7eef1be89fd3_fixed.java
@@ -1,27 +1,46 @@
+import org.apache.commons.math3.distribution.NormalDistribution;
+import org.apache.commons.math3.exception.ConvergenceException;
+import org.apache.commons.math3.exception.MaxCountExceededException;
+import org.apache.commons.math3.util.FastMath;
+
+// Assume the containing class exists
+
     /**
+     * Calculates the asymptotic p-value for the Mann-Whitney U test using the normal approximation.
+     * Includes continuity correction and uses long arithmetic to avoid overflow for large sample sizes.
+     *
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
+     * due to a convergence error (thrown by NormalDistribution)
      * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
+     * iterations is exceeded (thrown by NormalDistribution)
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        // Use long to avoid potential intermediate overflow Handles n1*n2 > Integer.MAX_VALUE
+        final long n1n2prod = (long) n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+        // Calculate variance using long arithmetic to prevent overflow
+        // Var(U) = n1 * n2 * (n1 + n2 + 1) / 12
+        final double VarU = n1n2prod * (long)(n1 + n2 + 1) / 12.0;
+
+        // Add continuity correction: Umin is corrected by +0.5 towards the mean EU
+        // The z-score is calculated for Umin corrected by +0.5
+        // This is equivalent to using |Umin - EU| - 0.5 in the numerator for the absolute z-score.
+        final double z = (Umin + 0.5 - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // The two-sided p-value is 2 * P(Z <= -|z|) where Z is standard normal.
+        // This handles both left and right tails symmetrically.
+        return 2 * standardNormal.cumulativeProbability(-FastMath.abs(z));
     }
\ No newline at end of file
