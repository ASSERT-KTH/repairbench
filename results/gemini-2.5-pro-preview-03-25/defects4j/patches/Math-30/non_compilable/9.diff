diff --git a/tmp/087bc8c7-beba-4c89-af96-c21019203eb3_buggy.java b/tmp/4a52f06d-48a3-437a-8cfc-9de44ddf74bf_fixed.java
index 3c69e10..3b12f67 100644
--- a/tmp/087bc8c7-beba-4c89-af96-c21019203eb3_buggy.java
+++ b/tmp/4a52f06d-48a3-437a-8cfc-9de44ddf74bf_fixed.java
@@ -1,27 +1,82 @@
+import org.apache.commons.math3.distribution.NormalDistribution;
+import org.apache.commons.math3.exception.ConvergenceException;
+import org.apache.commons.math3.exception.MaxCountExceededException;
+import org.apache.commons.math3.util.FastMath;
+
+// Note: The surrounding class definition is omitted as requested.
+// Only the fixed function is provided below.
+
     /**
+     * Calculates the asymptotic p-value for the Mann-Whitney U test using the normal approximation.
+     * Includes continuity correction.
+     *
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
+     * due to a convergence error (from NormalDistribution)
      * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
+     * iterations is exceeded (from NormalDistribution)
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        // Prevent division by zero or negative results if n1 or n2 are invalid.
+        // Behavior for n1=0 or n2=0 is somewhat undefined for U test.
+        // Returning NaN or 1.0 might be options. Let's assume n1, n2 > 0 based on typical usage.
+        // If n1*n2 = 0, VarU will be 0.
 
+        // Use long for product to prevent intermediate integer overflow
+        final long n1n2prod = (long) n1 * n2;
+
+        // Avoid division by zero if n1 or n2 is 0
+        if (n1n2prod == 0) {
+             // If samples are empty, p-value is arguably 1 or undefined. Return 1.0 for consistency.
+             return 1.0;
+        }
+
+
+        // Calculate the expected value of U
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+        // Calculate the variance of U. Use double arithmetic throughout to prevent overflow.
+        // The variance formula used assumes no ties. If ties are present, the variance
+        // should be adjusted by the calling method, or this method adapted.
+        final double VarU = (n1n2prod / 12.0) * ((double)n1 + n2 + 1);
 
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
+        // If variance is zero (e.g., degenerate case n1+n2+1 <= 0, which is impossible for positive n1, n2),
+        // handle appropriately. This check mainly covers VarU being exactly 0.0 due to n1 or n2 being 0,
+        // already handled by the n1n2prod check. Adding safety check for sd.
+        final double sd = FastMath.sqrt(VarU);
+        if (sd == 0) {
+            // Variance is zero, comparison is exact. P-value is 1 if Umin == EU, 0 otherwise?
+            // Or treat as undefined/1.0. Let's return 1.0 as no variance means no deviation.
+            return 1.0;
+        }
+
+
+        // Calculate the z-score using continuity correction: (|Umin - EU| - 0.5) / sd
+        // This corrected z-score represents the deviation for a one-sided test in the upper tail.
+        final double absDiff = FastMath.abs(Umin - EU);
+        final double zCorrected;
+
+        // If Umin is very close to the mean (difference <= 0.5), the continuity correction
+        // results in a non-positive numerator. The z-score is effectively 0.
+        if (absDiff <= 0.5) {
+            zCorrected = 0.0;
+        } else {
+            zCorrected = (absDiff - 0.5) / sd;
+        }
+
+        // Use standard normal distribution (mean=0, sd=1)
+        // Using the default constructor is fine as it implies N(0,1)
+        final NormalDistribution standardNormal = new NormalDistribution(null, 0, 1, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // Calculate the two-sided p-value: 2 * P(Z >= zCorrected) where Z ~ N(0,1)
+        // Since zCorrected >= 0, P(Z >= zCorrected) = P(Z <= -zCorrected) by symmetry.
+        return 2 * standardNormal.cumulativeProbability(-zCorrected);
     }
\ No newline at end of file
