diff --git a/tmp/165a404c-c59d-476b-9277-eff263039725_buggy.java b/tmp/2537829f-be88-485f-adcd-c258e7a84363_fixed.java
index 3c69e10..56ab491 100644
--- a/tmp/165a404c-c59d-476b-9277-eff263039725_buggy.java
+++ b/tmp/2537829f-be88-485f-adcd-c258e7a84363_fixed.java
@@ -1,27 +1,53 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        // Use long to avoid intermediate overflow in n1*n2
+        final long n1n2prod = (long) n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+        // Calculate variance using double intermediate values to avoid integer overflow
+        // VarU = (n1 * n2 * (n1 + n2 + 1)) / 12
+        final double VarU = (n1n2prod / 12.0) * (n1 + n2 + 1.0);
+
+        // If variance is zero (e.g., n1=0 or n2=0), return 1.0 (non-significant)
+        // This also avoids potential division by zero later.
+        if (VarU == 0) {
+            return 1.0;
+        }
+
+        // Continuity correction: Adjust the difference |Umin - EU| towards zero by 0.5
+        final double T = FastMath.abs(Umin - EU);
+        // Threshold for continuity correction is 0.5
+        final double P_VAL_THRESHOLD = 0.5;
+
+        final double z;
+        // If |Umin - EU| is less than or equal to 0.5, the corrected z-score is 0.
+        // This results in a p-value of 1.0.
+        if (T <= P_VAL_THRESHOLD) {
+            z = 0.0;
+        } else {
+            // Calculate the z-score with continuity correction: (|Umin - EU| - 0.5) / sqrt(VarU)
+            // Note: This z value will be non-negative.
+            z = (T - P_VAL_THRESHOLD) / FastMath.sqrt(VarU);
+        }
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // Calculate the two-sided p-value: 2 * P(Z >= z)
+        // Since Z is standard normal and z >= 0, this is 2 * P(Z <= -z)
+        return 2 * standardNormal.cumulativeProbability(-z);
     }
\ No newline at end of file
