diff --git a/tmp/d0509dce-10c5-4204-af5e-56860a736190_buggy.java b/tmp/f2365540-cd4c-4cbb-b390-f3f946673736_fixed.java
index 170b3a0..4118b4d 100644
--- a/tmp/d0509dce-10c5-4204-af5e-56860a736190_buggy.java
+++ b/tmp/f2365540-cd4c-4cbb-b390-f3f946673736_fixed.java
@@ -1,32 +1,44 @@
     /**
      * Returns the <a href="http://www.xycoon.com/SumOfSquares.htm">
      * sum of squared errors</a> (SSE) associated with the regression 
      * model.
      * <p>
      * The sum is computed using the computational formula
      * <p>
      * <code>SSE = SYY - (SXY * SXY / SXX)</code>
      * <p>
      * where <code>SYY</code> is the sum of the squared deviations of the y
      * values about their mean, <code>SXX</code> is similarly defined and
      * <code>SXY</code> is the sum of the products of x and y mean deviations.
      * <p>
      * The sums are accumulated using the updating algorithm referenced in 
      * {@link #addData}.  
      * <p>
      * The return value is constrained to be non-negative - i.e., if due to 
      * rounding errors the computational formula returns a negative result, 
      * 0 is returned.
      * <p>
      * <strong>Preconditions</strong>: <ul>
      * <li>At least two observations (with at least two different x values)
      * must have been added before invoking this method. If this method is 
      * invoked before a model can be estimated, <code>Double,NaN</code> is
      * returned.
      * </li></ul>
      *
      * @return sum of squared errors associated with the regression model
      */
     public double getSumSquaredErrors() {
-        return sumYY - sumXY * sumXY / sumXX;
+        // Calculate SSE using the computational formula
+        double sse = sumYY - sumXY * sumXY / sumXX;
+        
+        // The documentation requires the result to be non-negative.
+        // Due to rounding errors, the formula can sometimes yield a small negative value
+        // for data very close to a perfect line. In such cases, 0.0 should be returned.
+        // Note: If sumXX is 0 (all x values the same), the division results in NaN or Infinity.
+        // sumYY - NaN = NaN. Math.max(0.0, NaN) is NaN.
+        // sumYY - Infinity = -Infinity. Math.max(0.0, -Infinity) is 0.0.
+        // The precondition check for estimability (n >= 2 and sumXX > 0)
+        // should ideally handle the NaN case explicitly, but Math.max covers the
+        // primary issue of small negative values due to precision loss.
+        return Math.max(0.0, sse);
     }
\ No newline at end of file
