diff --git a/tmp/8923b989-20ac-457a-9b12-7bcd563e5a34_buggy.java b/tmp/d2c44416-56a4-40cc-908c-7338d63b7ad9_fixed.java
index 4e21866..b681d2c 100644
--- a/tmp/8923b989-20ac-457a-9b12-7bcd563e5a34_buggy.java
+++ b/tmp/d2c44416-56a4-40cc-908c-7338d63b7ad9_fixed.java
@@ -1,10 +1,25 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
+        // Handle diagonal matrices efficiently to avoid memory issues for large datasets.
+        if (m instanceof org.apache.commons.math3.linear.DiagonalMatrix) {
+            final int dim = m.getRowDimension();
+            final double[] sqrtDiag = new double[dim];
+            for (int i = 0; i < dim; i++) {
+                // Javadoc promises positive-definite, so diagonal entries are positive.
+                sqrtDiag[i] = org.apache.commons.math3.util.FastMath.sqrt(m.getEntry(i, i));
+            }
+            // Return a new DiagonalMatrix containing the square roots.
+            // Use the constructor that avoids copying the newly created array.
+            return new org.apache.commons.math3.linear.DiagonalMatrix(sqrtDiag, false);
+        } else {
+            // Fallback to EigenDecomposition for general symmetric positive-definite matrices.
+            // This might still be memory-intensive for large non-diagonal matrices.
+            final org.apache.commons.math3.linear.EigenDecomposition dec = new org.apache.commons.math3.linear.EigenDecomposition(m);
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
