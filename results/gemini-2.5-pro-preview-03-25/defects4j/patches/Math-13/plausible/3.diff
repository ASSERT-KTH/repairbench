diff --git a/tmp/65bb3ccf-bf2b-4fb2-bbf8-75e50aeb825b_buggy.java b/tmp/bef01378-f4e6-4786-b3c4-c75cc459966a_fixed.java
index 4e21866..6ec40b3 100644
--- a/tmp/65bb3ccf-bf2b-4fb2-bbf8-75e50aeb825b_buggy.java
+++ b/tmp/bef01378-f4e6-4786-b3c4-c75cc459966a_fixed.java
@@ -1,10 +1,26 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        // Optimization: If the matrix is diagonal, compute the square root directly.
+        // Eigen decomposition is memory-intensive for large matrices and unnecessary
+        // for diagonal matrices, which are common for weights in least squares.
+        if (m instanceof DiagonalMatrix) {
+            final int dim = m.getRowDimension();
+            final double[] sqrtDiag = new double[dim];
+            for (int i = 0; i < dim; i++) {
+                // Ensure non-negativity before sqrt, although weights should be positive.
+                // Use max to handle potential small negative values due to precision issues.
+                sqrtDiag[i] = FastMath.sqrt(FastMath.max(0.0, m.getEntry(i, i)));
+            }
+            // Return a new DiagonalMatrix (do not reuse input diagonal array if any)
+            return new DiagonalMatrix(sqrtDiag, false);
+        } else {
+            // Original computation for non-diagonal matrices
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
