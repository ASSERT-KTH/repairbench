diff --git a/tmp/b107b66f-9bc4-4e49-9b2a-7a5d91ae934b_buggy.java b/tmp/80dd440f-1d88-406b-bc08-849ec72fb376_fixed.java
index 4e21866..94cc03c 100644
--- a/tmp/b107b66f-9bc4-4e49-9b2a-7a5d91ae934b_buggy.java
+++ b/tmp/80dd440f-1d88-406b-bc08-849ec72fb376_fixed.java
@@ -1,10 +1,45 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
+     * @throws org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException
+     * if {@code m} is not positive definite.
+     * @throws org.apache.commons.math3.exception.DimensionMismatchException if {@code m}
+     * is not square.
      */
     private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
+        if (!m.isSquare()) {
+            // Throw exception consistent with EigenDecomposition behavior for non-square matrices.
+            throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), m.getColumnDimension());
+        }
+
+        // Optimize computation for diagonal matrices, which are common for weights.
+        if (m instanceof org.apache.commons.math3.linear.DiagonalMatrix) {
+            final int dim = m.getRowDimension();
+            final double[] sqrtDiag = new double[dim];
+            for (int i = 0; i < dim; i++) {
+                final double diagEntry = m.getEntry(i, i);
+                // Check for non-positive entries. EigenDecomposition constructor also performs
+                // a check for positive definiteness (based on eigenvalues and a threshold).
+                // We mimic this by checking diagonal elements directly.
+                // Use a threshold of 0, consistent with the NonPositiveDefiniteMatrixException constructor.
+                if (diagEntry <= 0) {
+                     // Throw NonPositiveDefiniteMatrixException as specified in the javadoc
+                     // and consistent with EigenDecomposition constructor behavior for SPD matrices.
+                     throw new org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException(diagEntry, i, 0);
+                }
+                sqrtDiag[i] = org.apache.commons.math3.util.FastMath.sqrt(diagEntry);
+            }
+            // Create a new DiagonalMatrix with the square roots.
+            // Use 'false' for the copy parameter to avoid unnecessary array cloning.
+            return new org.apache.commons.math3.linear.DiagonalMatrix(sqrtDiag, false);
+        } else {
+            // Fallback to EigenDecomposition for general symmetric positive-definite matrices.
+            // The EigenDecomposition constructor performs checks for symmetry and positive definiteness.
+            final org.apache.commons.math3.linear.EigenDecomposition dec = new org.apache.commons.math3.linear.EigenDecomposition(m);
+            // The getSquareRoot method assumes the matrix is symmetric positive definite
+            // (checks are typically done in the constructor).
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
