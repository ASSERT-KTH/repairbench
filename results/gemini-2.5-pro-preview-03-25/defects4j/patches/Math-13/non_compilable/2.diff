diff --git a/tmp/9c98ed9d-009c-4cfe-991e-3ddf43d3c1f5_buggy.java b/tmp/5b19d6f2-83cc-432e-aac5-b8181f7af56a_fixed.java
index 4e21866..182e90a 100644
--- a/tmp/9c98ed9d-009c-4cfe-991e-3ddf43d3c1f5_buggy.java
+++ b/tmp/5b19d6f2-83cc-432e-aac5-b8181f7af56a_fixed.java
@@ -1,10 +1,36 @@
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.linear.EigenDecomposition;
+import org.apache.commons.math3.linear.DiagonalMatrix;
+import org.apache.commons.math3.util.FastMath;
+
     /**
      * Computes the square-root of the weight matrix.
+     * <p>
+     * This method is optimized for diagonal matrices, which are common in weighted least squares problems
+     * where each observation has an independent weight. For non-diagonal matrices, it falls back to using
+     * EigenDecomposition, which is computationally more expensive and requires more memory.
+     * </p>
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        // Check if the matrix is diagonal. This is a common case for weight matrices in WLS.
+        // Calculating the square root of a diagonal matrix is much more efficient than EigenDecomposition.
+        if (m instanceof DiagonalMatrix) {
+            final int dim = m.getRowDimension();
+            final double[] sqrtDiag = new double[dim];
+            for (int i = 0; i < dim; ++i) {
+                // The input matrix m is positive-definite, so diagonal elements are positive.
+                sqrtDiag[i] = FastMath.sqrt(m.getEntry(i, i));
+            }
+            // Create a new diagonal matrix with the square roots of the diagonal elements.
+            // Pass 'false' to avoid unnecessary copying of the internal array.
+            return new DiagonalMatrix(sqrtDiag, false);
+        } else {
+            // Fallback for general symmetric positive-definite matrices.
+            // This might be memory-intensive for very large matrices.
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
