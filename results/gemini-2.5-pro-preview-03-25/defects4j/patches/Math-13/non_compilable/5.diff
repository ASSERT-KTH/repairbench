diff --git a/tmp/6454260a-5931-4603-860c-b2e5527a7841_buggy.java b/tmp/bb1d6612-2d69-4b4b-a74a-18ee539198eb_fixed.java
index 4e21866..28bd90a 100644
--- a/tmp/6454260a-5931-4603-860c-b2e5527a7841_buggy.java
+++ b/tmp/bb1d6612-2d69-4b4b-a74a-18ee539198eb_fixed.java
@@ -1,10 +1,32 @@
+import org.apache.commons.math3.linear.DiagonalMatrix;
+import org.apache.commons.math3.linear.EigenDecomposition;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.FastMath;
+
     /**
      * Computes the square-root of the weight matrix.
+     * Optimized for diagonal matrices to avoid memory issues with large dimensions.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        if (m instanceof DiagonalMatrix) {
+            // Optimize for the common case of diagonal weight matrices.
+            final int dim = m.getRowDimension();
+            // Create a new DiagonalMatrix to store the square root.
+            // DiagonalMatrix constructor with dimension initializes with zeros.
+            final DiagonalMatrix sqrtM = new DiagonalMatrix(dim);
+            for (int i = 0; i < dim; ++i) {
+                // Compute the square root of each diagonal element.
+                // Assumes diagonal elements are non-negative (m is positive-definite).
+                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
+            }
+            return sqrtM;
+        } else {
+            // For non-diagonal matrices, use the general EigenDecomposition method.
+            // This might be memory-intensive for large matrices but is correct.
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
