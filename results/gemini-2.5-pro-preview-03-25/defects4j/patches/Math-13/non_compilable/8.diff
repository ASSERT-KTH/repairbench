diff --git a/tmp/6e93e1fd-189b-40d3-96a5-2f2a32e0b2cb_buggy.java b/tmp/c0fac5dc-2f35-4410-b5ad-cd44d22d774a_fixed.java
index 4e21866..ef33fb4 100644
--- a/tmp/6e93e1fd-189b-40d3-96a5-2f2a32e0b2cb_buggy.java
+++ b/tmp/c0fac5dc-2f35-4410-b5ad-cd44d22d774a_fixed.java
@@ -1,10 +1,32 @@
+import org.apache.commons.math3.linear.DiagonalMatrix;
+import org.apache.commons.math3.linear.EigenDecomposition;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.FastMath;
+
     /**
      * Computes the square-root of the weight matrix.
+     * <p>
+     * If the matrix is a {@link DiagonalMatrix}, computes the square root
+     * element by element. Otherwise, falls back to eigen decomposition.
+     * </p>
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        if (m instanceof DiagonalMatrix) {
+            final int dim = m.getRowDimension();
+            final double[] data = ((DiagonalMatrix) m).getData(); // Gets a copy of the diagonal elements
+            final double[] sqrtData = new double[dim];
+            for (int i = 0; i < dim; i++) {
+                sqrtData[i] = FastMath.sqrt(data[i]);
+            }
+            // Create new DiagonalMatrix using the computed sqrtData.
+            // The constructor DiagonalMatrix(sqrtData) copies the array by default.
+            return new DiagonalMatrix(sqrtData);
+        } else {
+            // Fallback for non-diagonal matrices (or potentially dense matrices)
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
