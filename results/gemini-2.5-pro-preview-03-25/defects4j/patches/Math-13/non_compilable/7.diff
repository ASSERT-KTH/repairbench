diff --git a/tmp/97fc2eca-5732-4c71-9547-6fc7bc77623d_buggy.java b/tmp/f894062d-211e-4519-af28-a0699d884e79_fixed.java
index 4e21866..45ac0c7 100644
--- a/tmp/97fc2eca-5732-4c71-9547-6fc7bc77623d_buggy.java
+++ b/tmp/f894062d-211e-4519-af28-a0699d884e79_fixed.java
@@ -1,10 +1,42 @@
     /**
      * Computes the square-root of the weight matrix.
+     * <p>
+     * If the matrix {@code m} is an instance of {@link DiagonalMatrix},
+     * its square root is computed efficiently by taking the square root
+     * of each diagonal element. Otherwise, the computation relies on
+     * {@link EigenDecomposition}.
+     * </p>
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
+     * @throws org.apache.commons.math3.exception.NonPositiveDefiniteMatrixException
+     * if {@code m} is diagonal and has non-positive diagonal elements,
+     * or if {@code m} is not positive definite.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        if (m instanceof DiagonalMatrix) {
+            // Efficient computation for diagonal matrices
+            final int dim = m.getRowDimension();
+            final double[] sqrtDiag = new double[dim];
+            for (int i = 0; i < dim; ++i) {
+                final double diagElement = m.getEntry(i, i);
+                // Check for non-positive elements, as the matrix must be positive-definite.
+                // EigenDecomposition throws NonPositiveDefiniteMatrixException for negative eigenvalues.
+                // For a diagonal matrix, eigenvalues are the diagonal elements.
+                // Use a small tolerance consistent with EigenDecomposition might be better,
+                // but strict positivity is generally assumed for weight matrices.
+                if (diagElement < 0) {
+                     // Throw exception similar to EigenDecomposition's behavior
+                     throw new org.apache.commons.math3.exception.NonPositiveDefiniteMatrixException(diagElement, i, 0);
+                }
+                 sqrtDiag[i] = FastMath.sqrt(diagElement);
+            }
+            // Create a new DiagonalMatrix instance. 'false' avoids copying the array if possible.
+            return new DiagonalMatrix(sqrtDiag, false);
+        } else {
+            // Fallback for general symmetric positive-definite matrices
+            // EigenDecomposition handles symmetry checks and positive definiteness (via eigenvalues).
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
         }
+    }
\ No newline at end of file
