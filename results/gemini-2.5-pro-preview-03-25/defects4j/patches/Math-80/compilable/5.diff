diff --git a/tmp/4249581f-af88-4a64-9b7c-51e2b35b6dc2_buggy.java b/tmp/f7ca92f4-69e1-413b-aa63-344898098eba_fixed.java
index fbd0884..c979d12 100644
--- a/tmp/4249581f-af88-4a64-9b7c-51e2b35b6dc2_buggy.java
+++ b/tmp/f7ca92f4-69e1-413b-aa63-344898098eba_fixed.java
@@ -1,23 +1,38 @@
     /**
      * Flip qd array if warranted.
      * @param n number of rows in the block
      * @param step within the array (1 for flipping all elements, 2 for flipping
      * only every other element)
      * @return true if qd array was flipped
      */
     private boolean flipIfWarranted(final int n, final int step) {
+        // The pingPong variable likely relates to the dqds algorithm's workspace switching
+        // The condition compares elements possibly related to smallest eigenvalues computed from opposite ends.
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
-            int j = 4 * n - 1;
+            // Flip the relevant portion of the work array, which stores intermediate results (like d and e values).
+            int j = 4 * n - 1; // End index of the segment [0, 4n-1] to flip.
+            // Iterate from the start 'i' with steps of 4, moving the end 'j' inwards.
             for (int i = 0; i < j; i += 4) { 
+                // Iterate within the block of 4 elements starting at 'i'.
                 for (int k = 0; k < 4; k += step) {
+                    // Check if the indices 'i + k' (from the start) and 'j - k' (from the end) are valid for swapping.
+                    // We must ensure the start index is strictly less than the end index to avoid swapping an element with itself
+                    // or swapping elements back if the indices cross the middle point.
+                    if (i + k < j - k) {
+                        // Perform the swap.
                         final double tmp = work[i + k];
                         work[i + k] = work[j - k];
                         work[j - k] = tmp;
+                    } else {
+                        // If 'i + k >= j - k', the indices have met or crossed the middle point.
+                        // No more swaps are needed within this block pair defined by 'i' and 'j'.
+                        // Exit the inner loop for the current 'i' and 'j'.
+                        break; 
                     }
-                j -= 4;
                 }
-            return true;
+                j -= 4; // Move the end pointer 'j' inwards by the block size (4).
             }
-        return false;
+            return true; // Indicate that the array was flipped.
+        }
+        return false; // Indicate that the array was not flipped.
     }
\ No newline at end of file
