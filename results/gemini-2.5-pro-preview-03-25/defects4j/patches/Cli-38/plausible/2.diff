diff --git a/tmp/22bec9d4-379d-4910-b514-ccd7167481e7_buggy.java b/tmp/e5c2d409-18a8-4c4a-b6ac-ef3282756018_fixed.java
index 81a6e8b..33a8eb3 100644
--- a/tmp/22bec9d4-379d-4910-b514-ccd7167481e7_buggy.java
+++ b/tmp/e5c2d409-18a8-4c4a-b6ac-ef3282756018_fixed.java
@@ -1,19 +1,51 @@
     /**
      * Tells if the token looks like a short option.
      *
-     * @param token
+     * @param token The token to inspect.
+     * @return true if the token looks like a short option.
      */
     private boolean isShortOption(String token)
     {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
+        // A short option must start with '-' and be longer than one character.
         if (!token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        // Identify the potential option key, which is the character(s) after '-'
+        // and before any '=' sign if present.
+        String key = token.substring(1); // Get substring after '-'
+        int pos = key.indexOf("=");
+        if (pos != -1)
+        {
+            // Key is the part before '='
+            key = key.substring(0, pos);
+        }
+
+        // An empty key (e.g., token was "-=") is not a valid option key.
+        if (key.isEmpty()) {
+            return false;
+        }
+
+        // Case 1: The key itself is registered as a short option.
+        // This handles "-s", "-longOption" (if "longOption" is registered as short),
+        // and "-s=value", "-longOption=value".
+        if (options.hasShortOption(key))
+        {
+            return true;
+        }
+
+        // Case 2: The key is longer than one character, and the key itself isn't
+        // a registered short option (checked in Case 1), but the *first character*
+        // of the key is a registered short option. This indicates potential
+        // concatenated short options (e.g., "-ab" where 'a' is an option) or
+        // an option with an attached value (e.g., "-Tvalue" where 'T' is an option).
+        if (key.length() > 1 && options.hasShortOption(String.valueOf(key.charAt(0))))
+        {
+            return true;
+        }
+
+        // If neither the full key nor its first character (for multi-character keys)
+        // corresponds to a registered short option, it's not recognized as a short option token.
+        return false;
     }
\ No newline at end of file
