diff --git a/tmp/4a219d40-dd19-4647-bfe9-15c76ed29716_buggy.java b/tmp/788e00a5-2f35-4a7d-a377-7b20295d1f62_fixed.java
index 81a6e8b..2ae373b 100644
--- a/tmp/4a219d40-dd19-4647-bfe9-15c76ed29716_buggy.java
+++ b/tmp/788e00a5-2f35-4a7d-a377-7b20295d1f62_fixed.java
@@ -1,19 +1,47 @@
     /**
      * Tells if the token looks like a short option.
+     * <p>
+     * A token is identified as a short option if it starts with "-", is longer than 1 character,
+     * does not start with "--", and the character following the "-" is a registered short option.
+     * This allows concatenated short options (e.g., "-ab") to be recognized if the first character ('a')
+     * is a registered option.
      *
-     * @param token
+     * @param token The token to check.
+     * @return {@code true} if the token looks like a short option.
      */
     private boolean isShortOption(String token)
     {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
+        // Short options are tokens starting with "-", followed by at least one character,
+        // and not starting with "--".
+        // Examples: -S, -SV, -S=V, -SV1=V2, -S1S2
+        if (token == null || !token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
+        // It must not be a long option (--option) or the special "--" token.
+        if (token.startsWith("--"))
+        {
+            return false;
+        }
+
+        // Consider the characters between "-" and the potential "=".
+        // e.g. for "-ab=c", optChars is "ab"
+        // e.g. for "-a", optChars is "a"
         int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        String optChars = pos == -1 ? token.substring(1) : token.substring(1, pos);
+
+        // Ensure there is at least one character representing an option.
+        // Handles cases like "-=" where optChars would be empty.
+        if (optChars.isEmpty())
+        {
+            return false;
+        }
+
+        // Check if the first character represents a known short option.
+        // This allows tokens like "-abc" or "-ab=c" to be processed
+        // as short options if 'a' is a registered short option.
+        // The subsequent parsing logic (e.g., processShortOption) will
+        // handle the full validation and splitting of concatenated options.
+        return options.hasShortOption(optChars.substring(0, 1));
     }
\ No newline at end of file
