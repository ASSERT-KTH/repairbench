diff --git a/tmp/0157ffbe-dbeb-44b2-9c96-24b6b11bb28b_buggy.java b/tmp/1331a089-d80d-48ac-a651-bbc6bb0e1e3c_fixed.java
index 81a6e8b..98d783e 100644
--- a/tmp/0157ffbe-dbeb-44b2-9c96-24b6b11bb28b_buggy.java
+++ b/tmp/1331a089-d80d-48ac-a651-bbc6bb0e1e3c_fixed.java
@@ -1,19 +1,33 @@
     /**
      * Tells if the token looks like a short option.
+     * <p>
+     * A token is a short option if it starts with a hyphen, is longer
+     * than one character, and the character following the hyphen is a
+     * registered short option character. This allows for concatenated
+     * short options (-ab) and short options with values (-Dflag=true).
+     * It does not prevent tokens like "- LongOption" from being incorrectly
+     * identified as short options if ' ' is registered as a short option character,
+     * but this is not a typical use case.
      *
-     * @param token
+     * @param token The token to check.
+     * @return {@code true} if the token looks like a short option.
      */
     private boolean isShortOption(String token)
     {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
+        // Short options must start with "-", be longer than 1 character.
         if (!token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        // Retrieve the character immediately following the hyphen.
+        // This handles concatenated options like -ab and options with
+        // attached values like -Tfoo or -T=foo. We only need to check
+        // if the first character is a valid option trigger. The parser
+        // logic will handle the rest (splitting concatenated options,
+        // extracting values).
+        String optionChar = token.substring(1, 2);
+
+        // Check if this character is registered as a short option.
+        return options.hasShortOption(optionChar);
     }
\ No newline at end of file
