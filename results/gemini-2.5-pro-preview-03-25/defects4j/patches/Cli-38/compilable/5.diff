diff --git a/tmp/8252c360-c4cb-436a-9ffb-59363e84fe52_buggy.java b/tmp/25a61671-7bf3-4415-b228-d50675571d9b_fixed.java
index 81a6e8b..238b4e9 100644
--- a/tmp/8252c360-c4cb-436a-9ffb-59363e84fe52_buggy.java
+++ b/tmp/25a61671-7bf3-4415-b228-d50675571d9b_fixed.java
@@ -1,19 +1,37 @@
     /**
      * Tells if the token looks like a short option.
+     * Short options are single-character options starting with a hyphen.
+     * They can be concatenated (e.g., -abc) or have an optional value
+     * attached (e.g., -fvalue, -f=value).
      *
-     * @param token
+     * @param token The token to inspect.
+     * @return true if the token looks like a short option.
      */
     private boolean isShortOption(String token)
     {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
+        // Short options must start with '-' and have at least one character after it.
         if (!token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        // If the token is longer than 2 characters and the second character is not '=',
+        // it might be a concatenated short option (e.g., -abc) or a short option
+        // with an attached value (e.g., -fvalue). In these cases, we only need
+        // to check if the first character after the '-' is a registered short option.
+        // If the token is "-f=value", the first char 'f' must be a short option.
+        // If the token is "-f", the first char 'f' must be a short option.
+
+        // Check if the first character after the '-' is a valid short option.
+        // This handles cases like -s, -sv, -s=v, -sV1=V2, -s1s2
+        String optChar = token.substring(1, 2); // Get the first char after '-'
+        return options.hasShortOption(optChar);
+
+        // Note: The original code checked the entire string before '=':
+        // int pos = token.indexOf("=");
+        // String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
+        // return options.hasShortOption(optName);
+        // This was incorrect because it failed for concatenated options like "-ab"
+        // if "ab" itself wasn't registered as a short option, preventing the parser
+        // from potentially breaking it down into "-a" and "-b".
     }
\ No newline at end of file
