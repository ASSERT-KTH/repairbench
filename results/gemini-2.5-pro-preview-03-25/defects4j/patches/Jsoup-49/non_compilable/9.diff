diff --git a/tmp/86d43471-e77e-4603-b6d6-600290d31dcc_buggy.java b/tmp/a63a9e24-921a-4884-912c-99dfefd77842_fixed.java
index a37dc7a..80ffe0a 100644
--- a/tmp/86d43471-e77e-4603-b6d6-600290d31dcc_buggy.java
+++ b/tmp/a63a9e24-921a-4884-912c-99dfefd77842_fixed.java
@@ -1,10 +1,43 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
-        for (int i = children.length - 1; i >= 0; i--) {
-            Node in = children[i];
-            reparentChild(in);
-            childNodes.add(index, in);
+        // Convert the varargs children to a List for easier handling.
+        List<Node> childrenList = Arrays.asList(children);
+
+        // Step 1: Remove nodes that are already direct children of this node.
+        // This is crucial for move operations within the same parent.
+        // We remove them first to avoid index corruption issues if removeChild relies on siblingIndex,
+        // and to prevent ConcurrentModificationException if iterating and modifying the same list.
+        // Using remove(Object) is safer than relying on potentially stale indices.
+        for (Node child : childrenList) {
+            if (child.parentNode == this) {
+                // Remove the child using object equality.
+                // Assumes childNodes is a List implementation where remove(Object) works correctly.
+                childNodes.remove(child);
+                // We don't reindex here; a single reindex happens at the end.
             }
+        }
+
+        // Step 2: Ensure nodes are removed from any *other* parent and update their parent pointer to this node.
+        for (Node child : childrenList) {
+            // Get the current parent of the child.
+            Node previousParent = child.parentNode;
+            // If the child had a parent, and it wasn't this node (already handled in Step 1),
+            // then remove it from its original parent.
+            if (previousParent != null && previousParent != this) {
+                // Let the original parent manage its child list and reindexing.
+                previousParent.removeChild(child);
+            }
+            // Set the parent of the child node to this node. This is done for all children being added.
+            child.setParentNode(this);
+        }
+
+        // Step 3: Insert the children into this node's childNodes list at the specified index.
+        // childNodes might be shorter now if nodes were removed in Step 1.
+        // addAll inserts the elements from childrenList in their original order.
+        childNodes.addAll(index, childrenList);
+
+        // Step 4: Reindex the children starting from the insertion point.
+        // This updates the siblingIndex for all nodes from 'index' onwards, ensuring correctness.
         reindexChildren(index);
     }
\ No newline at end of file
