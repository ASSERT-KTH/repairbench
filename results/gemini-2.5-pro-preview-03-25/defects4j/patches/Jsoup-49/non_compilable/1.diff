diff --git a/tmp/a704e863-f27c-4e1b-9e1f-8a1f2e9f1ba5_buggy.java b/tmp/486882c2-1be3-4419-a84f-8ff6013d87fc_fixed.java
index a37dc7a..3250f9d 100644
--- a/tmp/a704e863-f27c-4e1b-9e1f-8a1f2e9f1ba5_buggy.java
+++ b/tmp/486882c2-1be3-4419-a84f-8ff6013d87fc_fixed.java
@@ -1,10 +1,37 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
-        ensureChildNodes();
+        List<Node> currentChildren = ensureChildNodes(); // Get the modifiable list, ensure initialized
+
+        // First, detach all children from their existing parents.
+        for (Node child : children) {
+            // If child is already present in this node's children, remove it first.
+            // This handles the move-within-same-parent case correctly by finding the current index.
+            if (child.parentNode == this) {
+                // Find its *current* index using indexOf on the actual list, not the potentially stale siblingIndex.
+                int currentIdx = currentChildren.indexOf(child);
+                if (currentIdx != -1)
+                    currentChildren.remove(currentIdx); // Remove using current index, NO reindex/parentNode=null yet.
+            }
+            else if (child.parentNode != null) {
+                // If in another parent, use standard remove() which calls parent.removeChild() correctly.
+                child.remove(); // Detaches node from its old parent.
+            }
+            // else: child has no parent, nothing to do for detachment.
+        }
+
+        // Add all children at the specified index. Iterate backwards through the input
+        // array to insert them in the original order at the specified index.
         for (int i = children.length - 1; i >= 0; i--) {
-            Node in = children[i];
-            reparentChild(in);
-            childNodes.add(index, in);
+            Node child = children[i];
+            // We removed the child previously if it was already in currentChildren. Now add it back.
+            // Set parent field directly to avoid setParentNode's removeChild call, which could cause issues.
+            // Direct field access parentNode is assumed valid within Node/subclasses.
+            child.parentNode = this;
+            currentChildren.add(index, child); // Add to the list at the correct spot
         }
-        reindexChildren(index);
+
+        // Finally, reindex all children starting from the insertion point.
+        // Reindexing from 0 is safest because removals might have happened anywhere
+        // in the list before the insertion, affecting subsequent indices.
+        reindexChildren(0);
     }
\ No newline at end of file
