diff --git a/tmp/cbe370e3-10e8-4f3a-99da-69c43dc8d1e2_buggy.java b/tmp/b964fa3f-0bd9-4006-942b-c43805c2d47b_fixed.java
index a37dc7a..c759977 100644
--- a/tmp/cbe370e3-10e8-4f3a-99da-69c43dc8d1e2_buggy.java
+++ b/tmp/b964fa3f-0bd9-4006-942b-c43805c2d47b_fixed.java
@@ -1,10 +1,45 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
+
+        // First pass: If any children are already children of this node, remove them first.
+        // This is necessary because we might be moving them to a different position,
+        // and removing them first avoids index issues and concurrent modification problems
+        // during the addition phase. We must remove them by object identity for correctness
+        // in case Nodes are effectively equal but different instances.
+        for (Node child : children) {
+            if (child.parentNode == this) {
+                // Use remove(Object) which relies on equals(). Node uses identity equals by default.
+                // This finds the specific instance and removes it.
+                childNodes.remove(child);
+                // Note: We do not call this.removeChild(child) as that has side effects
+                // like reindexing which we want to defer until the end of the operation.
+                // The child's parentNode link is temporarily incorrect (still points to this)
+                // but will be corrected in the second pass.
+            }
+        }
+
+        // Second pass: Add the children at the specified index. Iterate backwards through the
+        // input `children` array to maintain the intended order when inserting at `index`.
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
+
+            // Reparent the child. Remove from previous parent if it exists and is *not this*.
+            // This check prevents attempting to remove self from self if the node was already a child.
+            if (in.parentNode != null && in.parentNode != this) {
+                // If the node had a different parent, remove it from there cleanly.
+                in.parentNode.removeChild(in);
+            }
+
+            // Set the parent node for the child to this node.
+            in.setParentNode(this);
+
+            // Add the child to this node's children list at the specified index.
             childNodes.add(index, in);
         }
+
+        // Final step: Reindex all children starting from the insertion point.
+        // This sets the correct siblingIndex for all children affected by the additions/moves.
+        // We only need to reindex from the insertion point onwards.
         reindexChildren(index);
     }
\ No newline at end of file
