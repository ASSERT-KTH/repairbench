diff --git a/tmp/a15f0c29-bd1e-4e06-aecf-77218b56407c_buggy.java b/tmp/b2439a6b-aeb3-4aba-9c97-109fa722b26b_fixed.java
index a37dc7a..3e41de9 100644
--- a/tmp/a15f0c29-bd1e-4e06-aecf-77218b56407c_buggy.java
+++ b/tmp/b2439a6b-aeb3-4aba-9c97-109fa722b26b_fixed.java
@@ -1,10 +1,35 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
-        ensureChildNodes();
+        ensureChildNodes(); // Ensures childNodes is not null
+
+        // Iterate backwards through the children to add, to maintain order at insertion point 'index'
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
+
+            // 1. Remove the node 'in' from its current parent (if any)
+            if (in.parentNode != null) {
+                // Optimization: if the node is already a child of this node,
+                // we can remove it directly by physical index rather than relying on
+                // removeChild(node) which uses sibling index (which might be stale or incorrect
+                // due to prior additions or removals in this loop).
+                if (in.parentNode == this) {
+                    int currentPhysicalIndex = childNodes.indexOf(in); // Find by identity
+                    if (currentPhysicalIndex != -1) { // If found (should be, if parentNode == this), remove it
+                        childNodes.remove(currentPhysicalIndex);
+                    }
+                    // Note: No need to reindex children after removal here, will be done once at the end.
+                } else {
+                    // If node has a different parent, use standard removeChild
+                    in.parentNode.removeChild(in);
+                }
+            }
+
+            // 2. Add the node 'in' to this node's children at the specified index
+            // Ensure the parent node is correctly set (or updated)
+            in.setParentNode(this); // This also nulls the sibling index
             childNodes.add(index, in);
         }
+
+        // 3. Reindex children starting from the insertion index, only once after all nodes are added/moved.
         reindexChildren(index);
     }
\ No newline at end of file
