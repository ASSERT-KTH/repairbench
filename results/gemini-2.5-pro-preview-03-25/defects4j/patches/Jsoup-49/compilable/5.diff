diff --git a/tmp/3726dc43-67cf-4508-b368-c2cf41a93c1f_buggy.java b/tmp/49eb6f46-dc38-450c-8b22-a06c0dc8c5f2_fixed.java
index a37dc7a..aa099e2 100644
--- a/tmp/3726dc43-67cf-4508-b368-c2cf41a93c1f_buggy.java
+++ b/tmp/49eb6f46-dc38-450c-8b22-a06c0dc8c5f2_fixed.java
@@ -1,10 +1,27 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
+
+        // First, remove all nodes that are going to be added.
+        // This detaches them from their previous parent (if any), including this node.
+        // This is important when moving nodes around within the same parent,
+        // to avoid index corruption or removing the wrong element during the process.
+        for (Node child : children) {
+            // Note: Node.remove() causes the Node's parent to remove it from its child list.
+            child.remove();
+        }
+
+        // Now, add the children at the specified index.
+        // Iterate backwards through the input array to insert them in the correct relative order.
         for (int i = children.length - 1; i >= 0; i--) {
-            Node in = children[i];
-            reparentChild(in);
-            childNodes.add(index, in);
+            Node child = children[i];
+            // We need to set the parent node accurately *before* adding to childNodes.
+            // child.remove() above has set parentNode to null. setParentNode() will just update the field.
+            child.setParentNode(this);
+            // Add the child to this node's childNodes list at the specified index.
+            childNodes.add(index, child);
         }
+
+        // Reindex children starting from the insertion point, to update their sibling indices.
         reindexChildren(index);
     }
\ No newline at end of file
