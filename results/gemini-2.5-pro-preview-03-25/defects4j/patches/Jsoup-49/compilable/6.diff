diff --git a/tmp/5c64d023-4823-4730-a7e1-f694d52f5e21_buggy.java b/tmp/d7cf4792-a491-4c4f-b4f0-e68aba2ab643_fixed.java
index a37dc7a..1b23ee0 100644
--- a/tmp/5c64d023-4823-4730-a7e1-f694d52f5e21_buggy.java
+++ b/tmp/d7cf4792-a491-4c4f-b4f0-e68aba2ab643_fixed.java
@@ -1,10 +1,29 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
+
+        // First remove nodes from current parents, if any.
+        // This ensures nodes are detached cleanly before being added,
+        // preventing index issues when moving nodes within the same parent.
+        // It also ensures if a node in `children` is already a child of `this`,
+        // it is removed first before being added back at the specified index.
+        for (Node child : children) {
+            // If the node is already in the tree, remove it from its parent.
+            // Node.remove() handles the null parent case and updates sibling indices.
+            child.remove();
+        }
+
+        // Now add to this node's child list at the specified index.
+        // Iterate backwards through the input children array to maintain order relative to index.
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
+            // Node should be parentless now. Assign this node as the parent.
+            in.setParentNode(this);
+            // Add the child to the list at the insertion point.
             childNodes.add(index, in);
         }
+
+        // Update sibling indices for children from the insertion point onwards.
+        // This ensures that siblingIndex accurately reflects the final position.
         reindexChildren(index);
     }
\ No newline at end of file
