diff --git a/tmp/9155a9c0-1b63-4565-aab9-80b8b4caa412_buggy.java b/tmp/3cbc4d21-a53c-45dc-83e8-2f5cabe0cefe_fixed.java
index a37dc7a..67d0645 100644
--- a/tmp/9155a9c0-1b63-4565-aab9-80b8b4caa412_buggy.java
+++ b/tmp/3cbc4d21-a53c-45dc-83e8-2f5cabe0cefe_fixed.java
@@ -1,10 +1,28 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
+
+        // 1. Detach all nodes from their existing parent first.
+        // This ensures that removals happen cleanly before additions, avoiding index issues
+        // when children are moved within the same parent node.
+        for (Node child : children) {
+            // Note: Node.remove() is a public method that calls parentNode.removeChild(this)
+            // If child has no parent, this is a no-op.
+            // If child is already a child of 'this', this removes it first.
+            child.remove();
+        }
+
+        // 2. Add the children at the specified index. Iterate backwards to maintain order.
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
-            childNodes.add(index, in);
+            // At this point, 'in' is detached (its parentNode is null).
+            // Set the parent node link and add to the childNodes list.
+            in.setParentNode(this); // Assign current node as parent
+            childNodes.add(index, in); // Add to list at specified index
         }
+
+        // 3. Reindex the children starting from the insertion point to update sibling indices.
+        // The prior remove() calls handled reindexing in the original parent list(s).
+        // This call handles reindexing in *this* node's list after the additions.
         reindexChildren(index);
     }
\ No newline at end of file
