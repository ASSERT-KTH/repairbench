diff --git a/tmp/95dfd3f6-1627-4131-ab94-f096c1e55b90_buggy.java b/tmp/856f2ab6-0d23-4eb0-91c8-b9c034cc235b_fixed.java
index a37dc7a..e03c8a2 100644
--- a/tmp/95dfd3f6-1627-4131-ab94-f096c1e55b90_buggy.java
+++ b/tmp/856f2ab6-0d23-4eb0-91c8-b9c034cc235b_fixed.java
@@ -1,10 +1,35 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
-        for (int i = children.length - 1; i >= 0; i--) {
+        List<Node> nodes = childNodes; // Get the live list
+
+        for (int i = children.length - 1; i >= 0; i--) { // Iterate backwards to maintain correct order when inserting at same index
             Node in = children[i];
-            reparentChild(in);
-            childNodes.add(index, in);
+
+            // If 'in' is already a child of 'this', remove it from its current position first.
+            // Using Node.removeChild(child) is problematic as it uses siblingIndex, which can be stale
+            // if the list was modified due to other adds/removes in this loop, especially when moving nodes.
+            // Instead, find the current index reliably and remove directly from the list.
+            if (in.parentNode == this) {
+                int currentIdx = nodes.indexOf(in); // Use indexOf(Object) to find current location reliably (uses ==)
+                if (currentIdx != -1)
+                    nodes.remove(currentIdx);
+                // No need to call parent.removeChild() or change parent node yet, as we are moving it within the same parent
+            } else {
+                // If 'in' has a different parent, remove it from there using the standard mechanism.
+                // This is safe as it operates on the old parent's list and indices.
+                if (in.parentNode != null)
+                    in.parentNode.removeChild(in);
             }
+
+            // Add the node at the target index. List.add(index, E) shifts subsequent elements.
+            nodes.add(index, in);
+
+            // Update the parent node pointer for 'in'. setParentNode just updates the field.
+            in.setParentNode(this);
+        }
+
+        // After all children are added/moved, reindex children starting from the insertion point
+        // to update their siblingIndex fields correctly.
         reindexChildren(index);
     }
\ No newline at end of file
