diff --git a/tmp/215791aa-45d5-4a03-9288-2163fa738748_buggy.java b/tmp/8288e841-426a-4a04-8273-4bb7ebd84754_fixed.java
index a37dc7a..c161f4a 100644
--- a/tmp/215791aa-45d5-4a03-9288-2163fa738748_buggy.java
+++ b/tmp/8288e841-426a-4a04-8273-4bb7ebd84754_fixed.java
@@ -1,10 +1,25 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
-        ensureChildNodes();
+        ensureChildNodes(); // Ensure childNodes list is initialised
+
+        // First, reparent each child. This removes it from its current parent (including this node if applicable)
+        // and sets its parent to this node. Doing this upfront avoids index issues that can occur
+        // when modifying the childNodes list while iterating for insertions, particularly if a child
+        // is already present in this node's children and is being moved.
+        for (Node child : children) {
+            reparentChild(child);
+        }
+
+        // Now, add the children to the list at the specified index.
+        // Iterate backwards through the input `children` array to insert them
+        // in the correct order relative to each other at the specified `index`.
+        // E.g. addChildren(0, a, b) --> loop adds b at 0, then a at 0. Result is [a, b, ...]
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
             childNodes.add(index, in);
         }
+
+        // Finally, reindex the children starting from the insertion point to update their sibling indices,
+        // as the previous insertions have shifted subsequent nodes.
         reindexChildren(index);
     }
\ No newline at end of file
