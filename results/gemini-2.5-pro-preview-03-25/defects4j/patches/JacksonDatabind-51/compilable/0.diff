diff --git a/tmp/757bf2a0-08d4-4259-bc9d-4f79fef41847_buggy.java b/tmp/ba191a07-4705-4b9e-8f5b-790f4cc0cb74_fixed.java
index a5e7b85..cd1687e 100644
--- a/tmp/757bf2a0-08d4-4259-bc9d-4f79fef41847_buggy.java
+++ b/tmp/ba191a07-4705-4b9e-8f5b-790f4cc0cb74_fixed.java
@@ -1,52 +1,78 @@
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [Databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
                 // As per [JACKSON-614], use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
+                    // TODO: may need to figure out a better way to indicate permanently failed lookups
+                    if (actual == null) {
+                        // 29-Jun-2017, tatu: As per [databind#1698], need to ensure we don't cache null
+                        //    for transient problems, only for those within our control. Need to report problem...
+                        // 10-Mar-2017, tatu: Important! We must NOT cache `null` here, implies actual failure,
+                        //   needs to be converted to exception (but not here?). Indicates an issue either with
+                        //   configuration, or input processing. Let's simply return `null` for now.
                          return null;
                     }
                     // ... would this actually work?
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
                  *   One complication, though; can not change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
-                if ((_baseType != null)
-                        && _baseType.getClass() == type.getClass()) {
-                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
-                     *   but it appears to check that JavaType impl class is the same which is
-                     *   important for some reason?
-                     *   Disabling the check will break 2 Enum-related tests.
-                     */
                  // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                  //   generic type with custom type resolvers. If so, should try to retain them.
                  //  Whether this is sufficient to avoid problems remains to be seen, but for
                  //  now it should improve things.
+                 // 02-Aug-2017, tatu: Seems like [databind#1270] fix was actually wrong, and broke
+                 //   more general case described in comment above: nominal type does not have generic
+                 //   type parameters. So, must possibly specialize. Let's also remove JavaType class
+                 //   check, it seems dubious. But may be problematic...
+//                if ((_baseType != null) // && _baseType.getClass() == type.getClass()) {
+                // 10-Oct-2017, tatu: Turns out that `constructSpecializedType` is not exactly what
+                //   we want/need here: instead, we need `constructType`. Related to [databind#1780].
+                if (_baseType != null && _baseType.getClass() == type.getClass()) {
+                    // 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
+                    //   but it appears to check that JavaType impl class is the same which is
+                    //   important for some reason?
+                    //   Disabling the check will break 2 Enum-related tests. Fixed by
+                    //   explicitly adding check for enums back. See [databind#1868]
+                    // 28-Oct-2017, tatu: Reverted the reversion... :-) Need this apparently.
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                  }
+                 // NOTE: BEFORE 2.8.0, code was just:
+//                 deser = ctxt.findContextualValueDeserializer(type, _property);
+                 //   Let's revert to that: specialization seems problematic. May need to revisit
+                 // 29-Jun-2018, tatu: As per [databind#2077], let's revert to code pre-2.8
+                 //   (... maybe? Need to reconsider what is the problem)
+                 // 15-Aug-2018, tatu: Ok. Back to 2.8.3 code which seemed to work ok.
+                 //   Need test case for #2077.
+//                if (_baseType != null && _baseType.getClass() == type.getClass()) {
+//                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+//                }
+
+                // 28-Sep-2018, tatu: As per [databind#2132], need to revert the revert.
+                //   Problem is that `constructSpecializedType` does not work for type refinements
+                //   correctly. Need to reconsider approach here... but for now, revert.
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }
             _deserializers.put(typeId, deser);
         }
         return deser;
     }
\ No newline at end of file
