diff --git a/tmp/c2c276c5-1f48-4e46-84f1-b11e82e6ea2f_buggy.java b/tmp/5ce516a3-e6d1-4ada-9de8-160127c00a00_fixed.java
index 711e87d..5b7e4ac 100644
--- a/tmp/c2c276c5-1f48-4e46-84f1-b11e82e6ea2f_buggy.java
+++ b/tmp/5ce516a3-e6d1-4ada-9de8-160127c00a00_fixed.java
@@ -1,38 +1,49 @@
     private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
         /*
          * The following headers are defined for Pax.
          * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields
          * mtime
          * comment
          * gid, gname
          * linkpath
          * size
          * uid,uname
          * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those
+         * Note: PAX headers override corresponding TAR header values.
          */
         for (Entry<String, String> ent : headers.entrySet()){
             String key = ent.getKey();
             String val = ent.getValue();
             if ("path".equals(key)){
                 currEntry.setName(val);
             } else if ("linkpath".equals(key)){
                 currEntry.setLinkName(val);
             } else if ("gid".equals(key)){
-                currEntry.setGroupId(Integer.parseInt(val));
+                // Use Long.parseLong for potentially large group IDs (pax header can hold larger values than octal field)
+                currEntry.setGroupId(Long.parseLong(val));
             } else if ("gname".equals(key)){
                 currEntry.setGroupName(val);
             } else if ("uid".equals(key)){
-                currEntry.setUserId(Integer.parseInt(val));
+                // Use Long.parseLong for potentially large user IDs (pax header can hold larger values than octal field)
+                currEntry.setUserId(Long.parseLong(val));
             } else if ("uname".equals(key)){
                 currEntry.setUserName(val);
             } else if ("size".equals(key)){
+                // Use Long.parseLong for potentially large file sizes (pax header can hold larger values than octal field)
                 currEntry.setSize(Long.parseLong(val));
             } else if ("mtime".equals(key)){
+                // PAX mtime is specified as a decimal number of seconds since the epoch.
+                // Multiply by 1000 to convert to milliseconds.
                 currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
             } else if ("SCHILY.devminor".equals(key)){
+                // Although the comment says no setters/getters, they seem to exist.
+                // Device numbers are typically ints.
                 currEntry.setDevMinor(Integer.parseInt(val));
             } else if ("SCHILY.devmajor".equals(key)){
+                // Although the comment says no setters/getters, they seem to exist.
+                // Device numbers are typically ints.
                 currEntry.setDevMajor(Integer.parseInt(val));
             }
+            // Ignoring other less common or unsupported headers like atime, ctime, charset, comment for now.
         }
     }
\ No newline at end of file
