diff --git a/tmp/f0bf6b7b-64d4-4f41-8acf-6ce7e8f93ed8_buggy.java b/tmp/8b188dc1-4fd7-4fc9-918d-aaa245978711_fixed.java
index 5f1dcf2..5b3af55 100644
--- a/tmp/f0bf6b7b-64d4-4f41-8acf-6ce7e8f93ed8_buggy.java
+++ b/tmp/8b188dc1-4fd7-4fc9-918d-aaa245978711_fixed.java
@@ -1,41 +1,64 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+        // Save the state of the original simplex before any modifications
+        // The simplex is assumed to be ordered from best [0] to worst [n] by the caller
+        final RealPointValuePair[] original = new RealPointValuePair[simplex.length];
+        System.arraycopy(simplex, 0, original, 0, simplex.length);
+        final RealPointValuePair originalBest = original[0]; // Best point of the original simplex
+
+        // --- Reflection Step ---
+        // Evaluate the simplex reflected with respect to the best point.
+        // evaluateNewSimplex updates the 'simplex' field to the reflected simplex state
+        // and returns the best point of this new simplex.
+        final RealPointValuePair reflectedBest = evaluateNewSimplex(original, 1.0, comparator);
+
+        if (comparator.compare(reflectedBest, originalBest) < 0) {
+            // Reflection gave an improvement over the original best.
+
+            // --- Expansion Step ---
+            // Keep the reflected simplex state in case expansion is worse.
+            final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[simplex.length];
+            System.arraycopy(simplex, 0, reflectedSimplex, 0, simplex.length);
+
+            // Evaluate the simplex expanded with respect to the original best.
+            // evaluateNewSimplex updates the 'simplex' field to the expanded simplex state.
+            final RealPointValuePair expandedBest = evaluateNewSimplex(original, khi, comparator);
+
+            // Accept the better of the expanded and reflected simplex.
+            // If expanded is not strictly better than reflected, revert to the reflected state.
+            if (comparator.compare(expandedBest, reflectedBest) >= 0) {
+                // Revert: Accept the reflected simplex
                 simplex = reflectedSimplex;
             }
+            // Else: Accept expanded simplex (which is already the current state of 'simplex')
 
-                return;
+        } else {
+            // Reflection did not produce a better simplex than the original best.
 
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+            // --- Contraction Step ---
+            // Evaluate the simplex contracted with respect to the original best.
+            // evaluateNewSimplex updates the 'simplex' field to the contracted simplex state.
+            final RealPointValuePair contractedBest = evaluateNewSimplex(original, gamma, comparator);
 
-            // check convergence
-                return;
+            if (comparator.compare(contractedBest, originalBest) < 0) {
+                // Contraction gave an improvement over the original best.
+                // Accept the contracted simplex (already in 'simplex' field)
+                // No action needed.
+            } else {
+                // Neither reflection nor contraction improved upon the original best point.
+                // --- Shrink Step ---
+                // Perform a shrink step: evaluate the simplex shrunk towards the original best.
+                // evaluateNewSimplex with a coefficient of 0.5 performs the shrink operation.
+                // This updates the 'simplex' field to the shrunk simplex state.
+                 evaluateNewSimplex(original, 0.5, comparator);
+                 // Accept the shrunk simplex (now in 'simplex' field)
             }
-
         }
-
+        // The simplex field now holds the simplex resulting from this iteration.
+        // Control returns to the calling optimizer loop which checks for convergence.
     }
\ No newline at end of file
