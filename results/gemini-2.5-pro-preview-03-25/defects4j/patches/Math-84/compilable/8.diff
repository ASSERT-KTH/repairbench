diff --git a/tmp/023824a6-ee9e-4b23-88da-1fd3b6926711_buggy.java b/tmp/62c8d245-44f2-4ac1-8ec3-7988055b41bc_fixed.java
index 5f1dcf2..c640a00 100644
--- a/tmp/023824a6-ee9e-4b23-88da-1fd3b6926711_buggy.java
+++ b/tmp/62c8d245-44f2-4ac1-8ec3-7988055b41bc_fixed.java
@@ -1,41 +1,52 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        // The simplex iteration should be controlled by the main optimize loop
+        // This method performs just ONE iteration step.
+        // incrementIterationsCounter() should be called in the optimize loop.
 
-            incrementIterationsCounter();
-
-            // save the original vertex
+        // Save the original simplex and the best point (vertex 0)
         final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        final RealPointValuePair originalBest = original[0];
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+        // Perform a reflection step. Note: evaluateNewSimplex modifies 'this.simplex' internally in MultiDirectional.
+        // It computes a new simplex by reflecting all points except the best through the best point,
+        // evaluates the new points, stores the new simplex internally in 'simplex',
+        // sorts it, and returns the best point of the new simplex.
+        final RealPointValuePair reflectedBest = evaluateNewSimplex(original, 1.0, comparator);
 
-                // compute the expanded simplex
+        // Check if reflection improved the best point compared to the original best
+        if (comparator.compare(reflectedBest, originalBest) < 0) {
+            // Reflection gave an improvement. Try expansion.
+            // Save the simplex state resulting from the (successful) reflection step,
+            // as evaluateNewSimplex will overwrite it again during expansion.
             final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+
+            // Perform an expansion step, computed based on the original simplex.
+            // This call will overwrite 'this.simplex' with the expanded simplex.
+            final RealPointValuePair expandedBest = evaluateNewSimplex(original, khi, comparator);
+
+            // Check if the expansion step resulted in a simplex with a best point
+            // that is worse than or equal to the best point from reflection.
+            if (comparator.compare(expandedBest, reflectedBest) >= 0) {
+                // Expansion was not strictly better than reflection.
+                // Restore the simplex to the state after the reflection step.
                 simplex = reflectedSimplex;
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
-            }
-
-        }
-
+            // Otherwise (expansion was better), 'this.simplex' already holds the expanded state, so we keep it.
+
+        } else {
+            // Reflection did not improve the best point. Try contraction.
+            // Perform a contraction step, computed based on the original simplex.
+            // This call will overwrite 'this.simplex' with the contracted simplex.
+            // The returned value (best point of contracted simplex) isn't explicitly checked against
+            // originalBest here, mirroring the structure implied by the original buggy code's
+            // handling of evaluateNewSimplex's side effects and lack of a shrink step.
+            // The state is simply updated to the contracted simplex.
+            evaluateNewSimplex(original, gamma, comparator);
+        }
+        // End of one iteration. The 'simplex' field has been updated.
+        // The calling optimize loop will handle convergence checks, iteration limits, etc.
     }
\ No newline at end of file
