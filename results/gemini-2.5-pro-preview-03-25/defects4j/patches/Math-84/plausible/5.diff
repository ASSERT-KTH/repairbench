diff --git a/tmp/6fc5faf8-568e-4de5-8d58-65d85eeda1e0_buggy.java b/tmp/a1e444d1-33de-47c4-a2e0-0f6e9ca35c72_fixed.java
index 5f1dcf2..558c1fb 100644
--- a/tmp/6fc5faf8-568e-4de5-8d58-65d85eeda1e0_buggy.java
+++ b/tmp/a1e444d1-33de-47c4-a2e0-0f6e9ca35c72_fixed.java
@@ -1,41 +1,56 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        // The original code had a while(true) loop and return statements
+        // that could lead to infinite loops if no improvement was found
+        // relative to the best point, or premature termination after the
+        // first improvement. Removing the loop and returns makes this method
+        // perform just one iteration step, allowing the main optimization
+        // loop to handle termination and convergence checks.
 
         incrementIterationsCounter();
 
-            // save the original vertex
+        // save the original vertex (simplex is assumed already sorted)
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
+            // reflected is better than the original best
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            final RealPointValuePair[] reflectedSimplex = simplex; // State after reflection attempt
+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); // Attempt expansion
+
+            // In the original code, if reflected <= expanded, the reflected simplex was kept.
+            // This means if expansion didn't yield a strictly better point than reflection,
+            // the simplex state after reflection was preferred.
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                // accept the reflected simplex (which might be the state after the first evaluateNewSimplex call)
                 simplex = reflectedSimplex;
             }
+            // else accept the expanded simplex (which evaluateNewSimplex should have set)
 
-                return;
+            // No return here; proceed to end of iteration step
 
-            }
+        } else {
+            // reflected is not better than the original best
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                // contracted is better than the original best
+                // accept the contracted simplex (implicitly done by evaluateNewSimplex)
+                // No return here; proceed to end of iteration step
             }
-
+            // else: neither reflected nor contracted are better than the original best.
+            // The simplex might have been updated by evaluateNewSimplex if the
+            // trial point (reflected or contracted) was better than the worst point,
+            // but no further action (like shrink) is taken in this case in the original logic.
+            // We preserve this behavior.
         }
-
+        // End of iteration step. The simplex state (potentially updated) is carried to the next iteration or convergence check.
     }
\ No newline at end of file
