diff --git a/tmp/6ab185bd-d8f1-4eca-8cfc-01bd4cc3dc9b_buggy.java b/tmp/77d4cedd-e65e-4448-99d0-79244c0fb637_fixed.java
index 5f1dcf2..0e1bbac 100644
--- a/tmp/6ab185bd-d8f1-4eca-8cfc-01bd4cc3dc9b_buggy.java
+++ b/tmp/77d4cedd-e65e-4448-99d0-79244c0fb637_fixed.java
@@ -1,41 +1,58 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
+        // save the original vertex (only the best point is needed for comparisons here)
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
+        // evaluateNewSimplex updates the simplex internally
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
         if (comparator.compare(reflected, best) < 0) {
+            // reflected is better than the best point
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            final RealPointValuePair[] reflectedSimplex = simplex; // Capture simplex state after reflection
+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); // Compute expansion, updates simplex
+
+            // accept the reflected simplex if it is better than or equal to the expanded one
+            // (i.e., if expansion did not produce a strictly better point)
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                // revert to the reflected simplex state, because expansion was not better
                 simplex = reflectedSimplex;
             }
+            // otherwise, the expanded simplex is kept (it's already in simplex)
 
-                return;
+            // No return here, iteration finishes.
 
-            }
+        } else {
+            // reflected is not better than the best point
 
             // compute the contracted simplex
+            // evaluateNewSimplex updates the simplex internally
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+
+            // check if contracted is better than the best point
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                // (simplex is already updated by evaluateNewSimplex, so no explicit action needed)
 
-            // check convergence
-                return;
-            }
+            // No return here, iteration finishes.
+            } else {
+                // Neither reflected nor contracted yielded a better point than 'best'.
+                // The MultiDirectional algorithm (unlike Nelder-Mead) does not necessarily
+                // perform a shrink step here. The simplex state after the contraction
+                // attempt (which is already stored in 'simplex' by evaluateNewSimplex) is kept.
+                // The main optimization loop will decide whether to continue based on convergence criteria.
 
+            // No return here, iteration finishes.
             }
-
+        }
+        // The simplex array has been updated by one of the evaluateNewSimplex calls.
+        // The iteration is complete. The base class optimization loop handles termination.
     }
\ No newline at end of file
