diff --git a/tmp/eef6dba8-0d16-40f0-9fe4-5a0a406495a6_buggy.java b/tmp/b914e33f-a696-4b5e-a610-b0a18d4f3d3d_fixed.java
index 5f1dcf2..a6f4f29 100644
--- a/tmp/eef6dba8-0d16-40f0-9fe4-5a0a406495a6_buggy.java
+++ b/tmp/b914e33f-a696-4b5e-a610-b0a18d4f3d3d_fixed.java
@@ -1,41 +1,63 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        // Save the simplex state BEFORE iteration
+        final RealPointValuePair[] original = new RealPointValuePair[simplex.length];
+        System.arraycopy(simplex, 0, original, 0, simplex.length);
+        final RealPointValuePair originalBest = original[0];
 
-            // perform a reflection step
+        // Perform reflection step. evaluateNewSimplex potentially modifies 'simplex'.
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+        // Save the simplex state AFTER reflection.
+        final RealPointValuePair[] reflectedSimplexState = new RealPointValuePair[simplex.length];
+        System.arraycopy(simplex, 0, reflectedSimplexState, 0, simplex.length);
+        // Get the best point *after* the reflection evaluation potentially modified the simplex
+        final RealPointValuePair reflectedBest = simplex[0];
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        // Check if reflection improved compared to the original best.
+        if (comparator.compare(reflectedBest, originalBest) < 0) {
+            // Reflection improved. Try expansion.
+            // Compute expansion based on the original simplex state.
+            // evaluateNewSimplex potentially modifies 'simplex' again.
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+            // Get the best point *after* the expansion evaluation potentially modified the simplex
+            final RealPointValuePair expandedBest = simplex[0];
+
+            // Check if expansion provided a better result than reflection.
+            // Compare the best point after expansion ('expandedBest') vs best point after reflection ('reflectedBest').
+            if (comparator.compare(expandedBest, reflectedBest) >= 0) {
+                // Expansion was not better, restore the reflected state.
+                System.arraycopy(reflectedSimplexState, 0, simplex, 0, simplex.length);
             }
+            // else: Expansion is better, accept it. 'simplex' is already in the expanded state.
 
+            // Return after reflection/expansion phase
             return;
-
         }
 
-            // compute the contracted simplex
+        // Reflection did not improve (or stayed the same). Try contraction.
+        // Compute contraction based on the original simplex state.
+        // evaluateNewSimplex potentially modifies 'simplex'.
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+        // Get the best point *after* the contraction evaluation potentially modified the simplex
+        final RealPointValuePair contractedBest = simplex[0];
 
-            // check convergence
+        // Check if contraction improved compared to the original best.
+        if (comparator.compare(contractedBest, originalBest) < 0) {
+            // Contraction improved, accept it. 'simplex' is already in the contracted state.
+            // Return after contraction phase
             return;
         }
 
-        }
-
+        // Neither reflection (improving on original best) nor contraction (improving on original best) occurred.
+        // The simplex state is currently the one resulting from the contraction attempt,
+        // which might or might not be different from the state after the reflection attempt,
+        // depending on whether evaluateNewSimplex replaced the worst point during contraction.
+        // In standard Nelder-Mead, a shrink step would happen here if contraction failed to improve.
+        // This implementation lacks an explicit shrink step here. We just return.
+        // The calling optimize loop handles convergence checks.
     }
\ No newline at end of file
