diff --git a/tmp/7202a9c4-d2f4-48b9-b106-fa06c1b8c4d8_buggy.java b/tmp/75b77ef2-5971-4900-b313-5ccac62ff679_fixed.java
index 5f1dcf2..1ad3994 100644
--- a/tmp/7202a9c4-d2f4-48b9-b106-fa06c1b8c4d8_buggy.java
+++ b/tmp/75b77ef2-5971-4900-b313-5ccac62ff679_fixed.java
@@ -1,41 +1,53 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        // evaluateNewSimplex is assumed to update the simplex field with the new configuration
+        // and return the best point in the new simplex.
+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); // Factor 1.0 for reflection
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+            // Reflection is better than best. Store the reflected simplex state temporarily.
             final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+            // Try expansion.
+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); // Factor khi for expansion
+            // Accept expansion if it's strictly better than reflection.
+            // Otherwise, revert to the reflected simplex state.
+            // Assumption: evaluateNewSimplex updates the 'simplex' field.
+            if (comparator.compare(expanded, reflected) >= 0) {
+                 // Expansion was not better, revert to reflected state.
                  simplex = reflectedSimplex;
             }
+            // else: simplex is already the expanded state.
 
+            // Iteration finished (found improvement via reflection/expansion)
             return;
-
         }
 
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+        // Reflection was not better than best. Try contraction.
+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); // Factor gamma for contraction
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+            // Contraction is better than best. Accept the contracted simplex.
+            // Assumption: simplex field is already updated by evaluateNewSimplex.
 
-            // check convergence
+            // Iteration finished (found improvement via contraction)
             return;
         }
 
-        }
+        // Neither reflection nor contraction improved.
+        // The original Nelder-Mead performs a shrink step here.
+        // However, MultiDirectional doesn't define sigma.
+        // We just return, ending the iteration. The simplex state
+        // might be the result of the failed contraction attempt or unchanged,
+        // depending on evaluateNewSimplex implementation details.
+        // This fixes the infinite loop.
+        return;
 
     }
\ No newline at end of file
