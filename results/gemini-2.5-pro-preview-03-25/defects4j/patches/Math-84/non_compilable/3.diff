diff --git a/tmp/9fc4dead-4a7d-4515-8e6c-2183e026ee47_buggy.java b/tmp/e308b22e-f4d8-4900-8bd7-93018116d974_fixed.java
index 5f1dcf2..ce856b1 100644
--- a/tmp/9fc4dead-4a7d-4515-8e6c-2183e026ee47_buggy.java
+++ b/tmp/e308b22e-f4d8-4900-8bd7-93018116d974_fixed.java
@@ -1,41 +1,58 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        // The original code had a while(true) loop here which could lead to
+        // infinite looping if neither reflection nor contraction improved
+        // the situation. The fix removes the loop and adds a shrink step
+        // as is standard in Nelder-Mead algorithms when other steps fail,
+        // ensuring the simplex changes and the algorithm progresses.
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
+        // evaluateNewSimplex is responsible for updating the simplex internally
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
+            // reflected point is better than the best point
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex; // save the reflected simplex state
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            // simplex is now in the expanded state
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                // expansion didn't yield a better point than reflection
+                // revert to the reflected simplex state
                 simplex = reflectedSimplex;
             }
+            // else accept the expanded simplex (which is the current state of simplex)
 
+            // improvement found, exit iteration
             return;
 
         }
 
+        // reflect point is not better than the best point
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+            // contracted point is better than the best point
+            // accept the contracted simplex (already updated by evaluateNewSimplex)
 
-            // check convergence
+            // improvement found, exit iteration
             return;
         }
 
-        }
+        // Neither reflection nor contraction produced a point better than the best point.
+        // Perform a shrink step (replaces all points except the best).
+        // This step was missing in the original code.
+        evaluateNewSimplex(original, sigma, comparator);
+
+        // The simplex has been updated (shrunk), end of iteration.
 
     }
\ No newline at end of file
