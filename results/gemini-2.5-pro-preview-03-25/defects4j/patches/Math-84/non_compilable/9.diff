diff --git a/tmp/c53abb03-bb8f-495b-83dd-1493bc6bf7fc_buggy.java b/tmp/19ee2195-4613-4e14-acdf-fce06fbf26cf_fixed.java
index 5f1dcf2..88007f3 100644
--- a/tmp/c53abb03-bb8f-495b-83dd-1493bc6bf7fc_buggy.java
+++ b/tmp/19ee2195-4613-4e14-acdf-fce06fbf26cf_fixed.java
@@ -1,41 +1,63 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
+        // The simplex state is updated by evaluateNewSimplex. Need to save the original
+        // state to potentially revert/restart steps like expansion or contraction from it.
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        // Perform a reflection step. The evaluateNewSimplex method presumably updates
+        // the simplex field internally and returns the best point of the new simplex.
+        // Standard coefficient for reflection is rho (typically 1.0).
+        final RealPointValuePair reflected = evaluateNewSimplex(original, rho, comparator);
+
         if (comparator.compare(reflected, best) < 0) {
+            // Reflection gave an improvement. Now try expansion.
 
-                // compute the expanded simplex
+            // Keep track of the simplex state after successful reflection.
             final RealPointValuePair[] reflectedSimplex = simplex;
+            // Perform expansion step starting from the original simplex.
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+
+            // Accept the expanded simplex if it's better than the reflected one.
+            // Otherwise, revert to the reflected simplex.
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                // Expansion was not better than reflection, accept the reflected simplex.
                 simplex = reflectedSimplex;
             }
+            // else: Expansion was better, simplex is already updated by evaluateNewSimplex.
 
+            // Iteration successful (reflection or expansion).
+            incrementIterationsCounter();
             return;
 
-            }
-
-            // compute the contracted simplex
+        } else {
+            // Reflection did not produce a better point. Try contraction.
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+                // Contraction gave an improvement. Accept the contracted simplex.
+                // (simplex is already updated by evaluateNewSimplex).
 
-            // check convergence
+                // Iteration successful (contraction).
+                incrementIterationsCounter();
                 return;
-            }
+            } else {
+                // Neither reflection nor contraction improved the situation.
+                // Perform a shrink step (reducing the size of the simplex around the best point).
+                // The shrink step is performed starting from the original simplex state.
+                // evaluateNewSimplex with sigma coefficient performs the shrink.
+                evaluateNewSimplex(original, sigma, comparator);
 
+                // Iteration concluded (shrink).
+                incrementIterationsCounter();
+                return;
             }
-
+        }
+        // Note: The original while(true) loop was removed because each logical path
+        // now leads to a return, completing one iteration step (reflection/expansion,
+        // contraction, or shrink). The outer optimization loop handles convergence checks
+        // and iteration limits. Incrementing the counter should happen once per completed step.
     }
\ No newline at end of file
