diff --git a/tmp/1252076e-ddce-4ee2-878b-041990ac7e0c_buggy.java b/tmp/c6e3ea80-7f53-411c-b3bc-c1b1b44f7010_fixed.java
index 5f1dcf2..12e161c 100644
--- a/tmp/1252076e-ddce-4ee2-878b-041990ac7e0c_buggy.java
+++ b/tmp/c6e3ea80-7f53-411c-b3bc-c1b1b44f7010_fixed.java
@@ -1,41 +1,101 @@
+import org.apache.commons.math.FunctionEvaluationException;
+import org.apache.commons.math.optimization.OptimizationException;
+import org.apache.commons.math.optimization.RealPointValuePair;
+import java.util.Comparator;
+import java.lang.IllegalArgumentException;
+
+// Assumes base class AbstractSimplexOptimizer provides:
+// - Member variables: double rho, khi, gamma, sigma; (coefficients)
+// - Member variable: RealPointValuePair[] simplex;
+// - Method: double evaluate(double[] p) throws FunctionEvaluationException, IllegalArgumentException;
+// - Method: RealPointValuePair evaluateNewSimplex(RealPointValuePair[] originalSimplex, double coeff, Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException;
+//   (This helper likely calculates a new point based on originalSimplex using coeff, evaluates it, replaces the worst point in *this.simplex* if the new point is better, sorts *this.simplex*, and returns the new point.)
+// - Method: void sortSimplex(Comparator<RealPointValuePair> comparator);
+
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        // The iteration counter increment and convergence checks are handled by the caller (AbstractSimplexOptimizer.optimize)
 
-            incrementIterationsCounter();
+        // Save the original simplex state at the start of the iteration.
+        // Create a copy to prevent modification issues and clearly define the iteration's starting state.
+        final RealPointValuePair[] original = new RealPointValuePair[simplex.length];
+        System.arraycopy(simplex, 0, original, 0, simplex.length);
+        final RealPointValuePair originalBest = original[0]; // Assumes simplex is sorted before this call
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        // --- Reflection Step ---
+        // Compute the reflected point, evaluate it, and update the simplex if it's better than the worst.
+        final RealPointValuePair reflected = evaluateNewSimplex(original, rho, comparator);
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+        // Check if reflection improved compared to the *original* best point of this iteration.
+        if (comparator.compare(reflected, originalBest) < 0) {
+            // Reflection was successful relative to the original best.
+            // Save the state after the successful reflection.
+            final RealPointValuePair[] reflectedSimplexState = new RealPointValuePair[simplex.length];
+            System.arraycopy(simplex, 0, reflectedSimplexState, 0, simplex.length);
+            final RealPointValuePair reflectedBest = simplex[0]; // Best point in the simplex *after* reflection
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            // --- Expansion Step ---
+            // Try expanding from the original state.
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
 
+            // Did expansion improve further compared to just reflection?
+            // Compare the best point after the expansion attempt (simplex[0]) vs. the best after reflection (reflectedBest).
+            if (comparator.compare(simplex[0], reflectedBest) < 0) {
+                // Yes, expansion improved further. The simplex is already in the expanded state.
+            } else {
+                // No, expansion was not better than reflection. Revert to the reflected state.
+                simplex = reflectedSimplexState;
+            }
+            // End the iteration after successful reflection/expansion.
             return;
-
         }
 
-            // compute the contracted simplex
+        // --- Contraction Step ---
+        // Reflection did not improve relative to the original best. Try contraction.
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
 
-            // check convergence
+        // Check if contraction improved compared to the *original* best point.
+        // Note: Standard Nelder-Mead often compares contracted vs. reflected or worst.
+        // This follows the original code's apparent logic of comparing vs. original best.
+        if (comparator.compare(contracted, originalBest) < 0) {
+            // Contraction was successful relative to the original best. Simplex has been updated.
+            // End the iteration after successful contraction.
             return;
         }
 
+        // --- Shrink Step ---
+        // Neither reflection nor contraction improved relative to the original best.
+        // Shrink the simplex towards the current best point.
+        // This step was missing, causing the infinite loop.
+        final int n = simplex[0].getPointRef().length; // Dimension
+        final int N = simplex.length;     // Number of points in simplex
+
+        // Create a new array for the shrunk simplex.
+        RealPointValuePair[] shrunkSimplex = new RealPointValuePair[N];
+        // The reference point for shrinking is the current best point in the simplex.
+        final RealPointValuePair currentBest = simplex[0];
+        shrunkSimplex[0] = currentBest;
+
+        // Calculate and evaluate the shrunk points.
+        for (int i = 1; i < N; ++i) {
+            final double[] bestPt = currentBest.getPointRef();
+            final double[] currentPt = simplex[i].getPointRef(); // Use points from the current simplex
+            final double[] shrunkPt = new double[n];
+            for (int j = 0; j < n; ++j) {
+                // Shrink formula: best + sigma * (current - best)
+                shrunkPt[j] = bestPt[j] + sigma * (currentPt[j] - bestPt[j]);
             }
+            // Evaluate the new shrunk point.
+            shrunkSimplex[i] = new RealPointValuePair(shrunkPt, evaluate(shrunkPt));
+        }
+
+        // Replace the old simplex with the new shrunk simplex.
+        simplex = shrunkSimplex;
+        // Ensure the new simplex is sorted.
+        sortSimplex(comparator);
 
+        // End the iteration after performing the shrink step.
     }
\ No newline at end of file
