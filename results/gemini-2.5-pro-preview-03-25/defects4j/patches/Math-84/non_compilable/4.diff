diff --git a/tmp/49dab991-1ee5-406f-b809-d9555ae19529_buggy.java b/tmp/ad7de3b1-0368-4d26-8cbb-ec2ae77584e4_fixed.java
index 5f1dcf2..617c006 100644
--- a/tmp/49dab991-1ee5-406f-b809-d9555ae19529_buggy.java
+++ b/tmp/ad7de3b1-0368-4d26-8cbb-ec2ae77584e4_fixed.java
@@ -1,41 +1,97 @@
+import org.apache.commons.math.FunctionEvaluationException;
+import org.apache.commons.math.optimization.OptimizationException;
+import org.apache.commons.math.optimization.RealPointValuePair;
+import java.util.Comparator;
+
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        // Simplex is assumed sorted by the caller (DirectSearchOptimizer.optimize)
+        final int n = simplex.length - 1;
+        final RealPointValuePair best = simplex[0];
 
-            // perform a reflection step
+        // Keep the original simplex state as evaluateNewSimplex seems to need it as input
+        // AND it modifies the instance variable 'simplex' as a side effect.
+        final RealPointValuePair[] original = simplex.clone();
+
+        // --- Reflection ---
+        // evaluateNewSimplex updates the instance 'simplex' by replacing the worst point
+        // The reflection coefficient used here is 1.0, as in the original buggy code.
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
         if (comparator.compare(reflected, best) < 0) {
+            // Reflected point is better than the current best.
+            // Keep track of the simplex state after reflection.
+            final RealPointValuePair[] reflectedSimplexState = simplex.clone();
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            // --- Expansion ---
+            // Try expansion (updates instance 'simplex' based on 'original')
+            // Uses khi coefficient (defined in AbstractSimplexOptimizer).
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
 
+            // Accept expansion if it is better than reflection.
+            if (comparator.compare(expanded, reflected) < 0) {
+                // Accept expanded: the instance 'simplex' was already updated by evaluateNewSimplex.
+                // No assignment needed here, simplex already holds the expanded state.
+            } else {
+                // Expansion was not better, revert the instance 'simplex' to the reflected state.
+                simplex = reflectedSimplexState;
             }
+            // Iteration finished (found reflection or expansion).
 
-            // compute the contracted simplex
+        } else {
+            // Reflected point is not better than the current best.
+            // --- Contraction ---
+            // Try contraction (updates instance 'simplex' based on 'original').
+            // Uses gamma coefficient (defined in AbstractSimplexOptimizer).
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+                // Contracted point is better than the original best.
+                // Accept contracted: instance 'simplex' is already updated.
+                // No assignment needed here, simplex already holds the contracted state.
+                // Iteration finished (found contraction).
 
-            // check convergence
-                return;
-            }
+            } else {
+                // Neither reflected nor contracted are better than the original best.
+                // --- Shrink ---
+                // Perform shrink step around the current best point (simplex[0]).
+                // Shrinking requires re-evaluating n points.
+                // Uses sigma coefficient (defined in AbstractSimplexOptimizer).
 
-        }
+                // The best point is simplex[0] from the current state (which might have
+                // been updated by the failed reflection or contraction attempt, but evaluateNewSimplex
+                // operates based on 'original', so the current 'simplex[0]' should still be valid).
+                final RealPointValuePair shrinkBest = simplex[0];
 
+                // Create a new array for the shrunk simplex
+                RealPointValuePair[] shrunkSimplex = new RealPointValuePair[n + 1];
+                shrunkSimplex[0] = shrinkBest; // Keep the best point
+
+                for (int i = 1; i <= n; i++) {
+                    // Calculate the new shrunk point coordinates
+                    // Shrink happens from the current simplex state towards the best point of that state.
+                    double[] currentPoint = simplex[i].getPointRef();
+                    double[] bestPoint = shrinkBest.getPointRef();
+                    double[] newPoint = new double[bestPoint.length];
+                    for (int j = 0; j < bestPoint.length; j++) {
+                        newPoint[j] = bestPoint[j] + sigma * (currentPoint[j] - bestPoint[j]);
+                    }
+                    // Evaluate the objective function for the new shrunk point
+                    // Use computeObjectiveValue (available from DirectSearchOptimizer)
+                    // Need to handle potential exceptions from computeObjectiveValue if necessary,
+                    // but the method signature already declares them.
+                    shrunkSimplex[i] = new RealPointValuePair(newPoint, computeObjectiveValue(newPoint));
+                }
+                // Update the instance simplex with the shrunk points and values
+                simplex = shrunkSimplex;
+                // Iteration finished (performed shrink).
+            }
+        }
+        // End of iteration step. Control returns to the optimize() method in the base class,
+        // which will sort the simplex and check convergence criteria. No return statement needed here.
     }
\ No newline at end of file
