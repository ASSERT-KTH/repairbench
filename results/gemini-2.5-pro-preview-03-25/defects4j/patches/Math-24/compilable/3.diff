diff --git a/tmp/640a220d-fd75-4df6-a2ca-0e58119c5ba5_buggy.java b/tmp/c9688725-97ca-4d90-bbb3-236bbc8d6144_fixed.java
index f95e529..ec21909 100644
--- a/tmp/640a220d-fd75-4df6-a2ca-0e58119c5ba5_buggy.java
+++ b/tmp/c9688725-97ca-4d90-bbb3-236bbc8d6144_fixed.java
@@ -1,165 +1,201 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
         double x = mid;
         double v = x;
         double w = x;
         double d = 0;
         double e = 0;
         double fx = computeObjectiveValue(x);
         if (!isMinim) {
             fx = -fx;
         }
         double fv = fx;
         double fw = fx;
 
+        // Best point found so far (initialized to start value).
+        UnivariatePointValuePair best = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        // Keep track of the best point found, in case the loop terminates
+        // returning the last evaluated point which might not be the best.
+        if (checker != null && checker.converged(0, best, best)) {
+             return best; // Initial point satisfies convergence criteria.
+        }
+
+
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        UnivariatePointValuePair current = best;
+
 
         int iter = 0;
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
+            if (stop) {
+                 // Return the best point found so far, which is stored in (x, fx).
+                 // Note: 'current' might hold the last evaluated point, which is not necessarily the best.
+                 return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+            }
+
+            // The following code block was inside the "if (!stop)" in the original code.
+            // It's moved out because the "stop" check should happen first.
+            // If we are not stopping, then we proceed to calculate the next point.
+
             double p = 0;
             double q = 0;
             double r = 0;
             double u = 0;
 
             if (FastMath.abs(e) > tol1) { // Fit parabola.
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
                 if (q > 0) {
                     p = -p;
                 } else {
                     q = -q;
                 }
 
                 r = e;
                 e = d;
 
-                    if (p > q * (a - x) &&
+                // Check conditions for accepting parabolic interpolation step.
+                if (p > q * (a - x) &&    // Interpolated point is within bounds (a, b)
                     p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
+                    FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { // Interpolation step is not too large
                     // Parabolic interpolation step.
                     d = p / q;
                     u = x + d;
 
                     // f must not be evaluated too close to a or b.
                     if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
+                        // If the potential evaluation point u is very close to bounds a or b,
+                        // step away from the bound towards the middle m.
+                        if (x <= m) { // x is on the left part of the interval?
+                            d = tol1; // Step towards right.
+                        } else { // x is on the right part of the interval?
+                            d = -tol1; // Step towards left.
                         }
+                    } // else: d = p / q already calculated.
                 } else {
                     // Golden section step.
                     if (x < m) {
-                            e = b - x;
+                        e = b - x; // Golden section on the right interval (x, b)
                     } else {
-                            e = a - x;
+                        e = a - x; // Golden section on the left interval (a, x)
                     }
                     d = GOLDEN_SECTION * e;
                 }
             } else {
                 // Golden section step.
                 if (x < m) {
                     e = b - x;
                 } else {
                     e = a - x;
                 }
                 d = GOLDEN_SECTION * e;
             }
 
             // Update by at least "tol1".
+            // Compute the next evaluation point u.
             if (FastMath.abs(d) < tol1) {
+                 // If the computed step d is too small, take a minimum step of size tol1.
                 if (d >= 0) {
                     u = x + tol1;
                 } else {
                     u = x - tol1;
                 }
             } else {
                 u = x + d;
             }
 
             double fu = computeObjectiveValue(u);
             if (!isMinim) {
                 fu = -fu;
             }
 
             // User-defined convergence checker.
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
+             // Update the overall best point found so far.
+            if (fu <= fx) { // Use '<=' to prefer the new point if values are equal.
+                 best = current;
+            } else if (current.getValue() < best.getValue()) {
+                 // Although fu > fx (Brent's algorithm prefers x),
+                 // the raw value of current might be better than the current best
+                 // due to potential negation. Check this explicitly.
+                 best = current;
+            }
+
+
             if (checker != null) {
+                // Check convergence after updating current point and before updating Brent's state variables
                 if (checker.converged(iter, previous, current)) {
+                    // If the user-defined checker converges, return the current point,
+                    // as this is the point that satisfied the checker.
                     return current;
                 }
             }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
+            // Update a, b, v, w, x, fx, fv, fw based on the comparison between fu and fx
+            // This is the core logic of Brent's algorithm for maintaining the search interval and points.
+            if (fu <= fx) { // Point u is better than or equal to x
+                if (u < x) { // Shrink interval to (a, x)
                     b = x;
-                    } else {
+                } else { // Shrink interval to (x, b)
                     a = x;
                 }
+                // Update points: v <- w, w <- x, x <- u
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
                 x = u;
                 fx = fu;
-                } else {
-                    if (u < x) {
+            } else { // Point u is worse than x
+                if (u < x) { // Shrink interval to (u, b)
                     a = u;
-                    } else {
+                } else { // Shrink interval to (a, u)
                     b = u;
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                // Update v and w, keeping x as the best point
+                if (fu <= fw || Precision.equals(w, x)) {
                     v = w;
                     fv = fw;
                     w = u;
                     fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                     v = u;
                     fv = fu;
                 }
             }
-            } else { // Default termination (Brent's criterion).
-                return current;
-            }
+
             ++iter;
+            // The convergence check (stop condition) is now at the beginning of the loop.
         }
     }
\ No newline at end of file
