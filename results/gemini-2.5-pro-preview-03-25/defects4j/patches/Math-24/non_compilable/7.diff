diff --git a/tmp/647b6a1d-af5a-40f8-96c5-2a0f4b646d2a_buggy.java b/tmp/53fb7edd-caa6-4c2c-9935-88f0642e3358_fixed.java
index f95e529..9955879 100644
--- a/tmp/647b6a1d-af5a-40f8-96c5-2a0f4b646d2a_buggy.java
+++ b/tmp/53fb7edd-caa6-4c2c-9935-88f0642e3358_fixed.java
@@ -1,165 +1,200 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
-        double a;
-        double b;
+        // Use getters for finalizing the values used in the loop.
+        final double relativeThreshold = getRelativeAccuracy();
+        final double absoluteThreshold = getAbsoluteAccuracy();
+
+        double a; // Lower bound of the bracket
+        double b; // Upper bound of the bracket
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
+        double x = mid; // Current best estimate of the optimum
+        double v = x;   // Point with second best function value
+        double w = x;   // Point with third best function value
+        double d = 0;   // Step size in the last step taken (from x to u)
+        double e = 0;   // Step size taken in the step before last
+        double fx = computeObjectiveValue(x); // Function value at x
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // Work with -(objective function) if maximizing
         }
-        double fv = fx;
-        double fw = fx;
+        double fv = fx; // Function value at v
+        double fw = fx; // Function value at w
 
-        UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        UnivariatePointValuePair previous = null; // Point from previous iteration (for checker)
+        // Point evaluated in the current iteration (u, fu), used for checker. Initialize with start value.
+        UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
 
+        // Main optimization loop
         int iter = 0;
         while (true) {
-            final double m = 0.5 * (a + b);
+            final double m = 0.5 * (a + b); // Midpoint of the current bracket [a, b]
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
+            // Check default stopping criterion (Brent's criterion)
+            // Stop if the bracket width (b - a) is small enough relative to the best point x.
+            // The check is |x - m| <= tol2 - 0.5 * (b - a).
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (stop) {
+                // Default termination: return the best point found so far (x, fx).
+                // x holds the point with the best value found, fx holds the corresponding
+                // function value (negated if maximizing).
+                // Ensure the returned value is the original objective value, not negated.
+                return new UnivariatePointValuePair(x, isMinim ? fx : -fx); // FIX: Return best point x
+            }
+
+            // If not stopping, calculate the next point 'u' to evaluate
+            double p = 0; // Numerator for parabolic interpolation step
+            double q = 0; // Denominator for parabolic interpolation step
+            double r = 0; // Temporary variable
+            double u = 0; // Next point to evaluate
+
+            // Try parabolic interpolation using x, v, w
+            if (FastMath.abs(e) > tol1) { // Only if the step before last (e) was significant enough
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
-                    if (q > 0) {
+                if (q > 0) { // Ensure q is positive for comparison below
                     p = -p;
                 } else {
                     q = -q;
                 }
 
-                    r = e;
-                    e = d;
+                r = e; // Store step before last
+                e = d; // Store last step (d becomes the step before last for the next iteration)
 
+                // Check if the parabolic step is acceptable
+                // 1. Is the parabola's minimum within the bracket (a, b)? (p / q is the step from x)
+                // 2. Is the step size smaller than half the step size before last? (prevents large jumps)
                 if (p > q * (a - x) &&
                     p < q * (b - x) &&
                     FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
+                    // Parabolic interpolation step is accepted
+                    d = p / q; // Calculated step size
+                    u = x + d; // New point
 
-                        // f must not be evaluated too close to a or b.
+                    // Ensure u is not too close to the boundaries a or b
                     if (u - a < tol2 || b - u < tol2) {
+                        // If too close, adjust d to be a minimal step towards the midpoint m
+                        // This adjustment will influence the final u calculation below.
                         if (x <= m) {
-                                d = tol1;
+                            d = tol1; // Minimal step to the right
                         } else {
-                                d = -tol1;
+                            d = -tol1; // Minimal step to the left
                         }
                     }
                 } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
+                    // Golden section step (parabola failed or rejected)
+                    // Calculate step 'e' based on which side of the midpoint 'x' is
+                    if (x < m) { // x is in the lower half of [a, b]
+                        e = b - x; // Search in the upper interval [x, b]
+                    } else {      // x is in the upper half of [a, b]
+                        e = a - x; // Search in the lower interval [a, x]
                     }
-                        d = GOLDEN_SECTION * e;
+                    d = GOLDEN_SECTION * e; // Golden ratio step size
                 }
             } else {
-                    // Golden section step.
+                // Golden section step (step before last 'e' was too small for parabolic fit)
                  if (x < m) {
                     e = b - x;
                 } else {
                     e = a - x;
                 }
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
-                if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
+            // Ensure the step size d is at least tol1 in magnitude for progress
+            // Note: 'd' here might be from parabola, golden section, or the boundary adjustment (+/- tol1).
+            if (FastMath.abs(d) >= tol1) {
+                u = x + d; // Use the calculated step d
             } else {
-                    u = x + d;
-                }
+                 // Force a minimal step of size tol1 if |d| was too small
+                if (d >= 0) { // If d was positive or zero
+                    u = x + tol1; // Step right
+                } else {        // If d was negative
+                    u = x - tol1; // Step left
+                }
+            }
+            // Update 'd' to reflect the actual step taken from x to u, for the next iteration's 'e'.
+            // Note: The original code implicitly uses the d calculated before this minimum step enforcement
+            // as the 'e' for the next iteration (via e = d assignment earlier).
+            // This seems slightly off, but maintaining original logic for minimal change.
+            // A potential refinement could be: d = u - x; after u is determined.
+            // However, the original logic assigned e=d before this final check/adjustment of u.
 
+            // Evaluate the objective function at the new point u
             double fu = computeObjectiveValue(u);
             if (!isMinim) {
-                    fu = -fu;
+                fu = -fu; // Negate if maximizing
             }
 
-                // User-defined convergence checker.
+            // Prepare for convergence checker: update current point
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
+            // Check user-defined convergence criterion using the latest point u
             if (checker != null) {
                 if (checker.converged(iter, previous, current)) {
+                    // If checker converges, return the current point 'u' as per checker's criteria
                     return current;
                 }
             }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
-                    } else {
-                        a = x;
+            // Update the bracket [a, b] and the points x, v, w based on the new value fu
+            if (fu <= fx) { // New point u is better than or equal to the current best x
+                // Update bracket: the interval containing the minimum must now include u
+                if (u < x) { // If u is to the left of x
+                    b = x;   // New bracket is [a, x]
+                } else {      // If u is to the right of x
+                    a = x;   // New bracket is [x, b]
                 }
+                // Shift the points: x becomes the new best, w becomes x, v becomes w
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
-                    x = u;
-                    fx = fu;
-                } else {
-                    if (u < x) {
-                        a = u;
-                    } else {
-                        b = u;
+                x = u; // u is the new best point
+                fx = fu; // fu is the new best function value
+            } else { // New point u is worse than the current best x (fu > fx)
+                // Update bracket: the interval containing the minimum must now exclude the region
+                // between x and u on the side where u lies.
+                if (u < x) { // If u is to the left of x
+                    a = u;   // New bracket is [u, b]
+                } else {      // If u is to the right of x
+                    b = u;   // New bracket is [a, u]
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                // Update v and w only if u is better than them (to maintain order fx <= fw <= fv potentially)
+                if (fu <= fw || Precision.equals(w, x)) { // If u is better than w, or w == x (degenerate case)
                     v = w;
                     fv = fw;
-                        w = u;
+                    w = u; // u becomes the new second best (w)
                     fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
-                        v = u;
+                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { // If u is better than v, or v == x or v == w (degenerate cases)
+                    v = u; // u becomes the new third best (v)
                     fv = fu;
                 }
+                // x and fx remain unchanged as they are still the best found so far
             }
-            } else { // Default termination (Brent's criterion).
-                return current;
-            }
-            ++iter;
-        }
+
+            ++iter; // Increment iteration counter
+        } // End while loop
     }
\ No newline at end of file
