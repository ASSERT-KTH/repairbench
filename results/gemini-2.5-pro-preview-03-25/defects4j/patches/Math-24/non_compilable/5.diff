diff --git a/tmp/c344006f-fbc1-45ef-b782-35bacdf14631_buggy.java b/tmp/c9c3b2be-22d9-4d84-9aa2-da75c36cd907_fixed.java
index f95e529..ad4e570 100644
--- a/tmp/c344006f-fbc1-45ef-b782-35bacdf14631_buggy.java
+++ b/tmp/c9c3b2be-22d9-4d84-9aa2-da75c36cd907_fixed.java
@@ -1,165 +1,190 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
+        final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
+        // Get threshold values from superclass
+        final double relativeThreshold = getRelativeAccuracy();
+        final double absoluteThreshold = getAbsoluteAccuracy();
+
+        // Correct ordering of interval boundaries [a, b]
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
+        double x = mid; // Current best point estimate
+        double v = x; // Point with second best value
+        double w = x; // Point with third best value
+        double d = 0; // Step length in the current iteration
+        double e = 0; // Step length from the previous iteration
+        double fx = computeObjectiveValue(x); // Objective value at x
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // Internal computations assume minimization
         }
-        double fv = fx;
-        double fw = fx;
+        double fv = fx; // Objective value at v
+        double fw = fx; // Objective value at w
 
+        // Points used for the convergence checker
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
 
         int iter = 0;
         while (true) {
-            final double m = 0.5 * (a + b);
+            final double m = 0.5 * (a + b); // Midpoint of the current interval [a, b]
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
+            // Default stopping criterion (Brent's criterion)
+            // Check if the interval width relative to x is within tolerance
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (stop) {
+                // Default termination: return the best point found (x, fx)
+                // Adjust fx back based on the goal type
+                return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+            }
+
+            // Tentative next evaluation point u, calculated by interpolation or golden section
+            double p = 0; // Numerator for parabolic interpolation step
+            double q = 0; // Denominator for parabolic interpolation step
+            double r = 0; // Temporary variable
+            double u = 0; // Next point to evaluate
+
+            // Try parabolic interpolation if the previous step was significant
+            if (FastMath.abs(e) > tol1) {
+                // Fit parabola through (x, fx), (w, fw), (v, fv)
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
+                // Ensure q is positive for the division p/q
                 if (q > 0) {
                     p = -p;
                 } else {
                     q = -q;
                 }
 
-                    r = e;
-                    e = d;
+                r = e; // Store the previous step length e
+                e = d; // Store the step length before previous d
 
-                    if (p > q * (a - x) &&
+                // Check if the parabolic interpolation step is acceptable
+                if (p > q * (a - x) &&        // Interpolated point is within (a, b)
                     p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
+                    FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { // Step size is reasonable compared to previous step
+                    // Parabolic interpolation step
                     d = p / q;
                     u = x + d;
 
-                        // f must not be evaluated too close to a or b.
+                    // Ensure u is not too close to the boundaries a or b
                     if (u - a < tol2 || b - u < tol2) {
+                         // If too close, adjust d to a small step towards the center m
+                         // This adjusted d might be used if parabolic step fails below, or for next iteration's e
                         if (x <= m) {
                             d = tol1;
                         } else {
                             d = -tol1;
                         }
+                        // Note: u is not immediately recalculated with this adjusted d here.
+                        // If the conditions below fail, the golden section step will use this adjusted d.
                     }
                 } else {
-                        // Golden section step.
+                    // Parabolic step is not acceptable, fall back to Golden Section step
+                    // Determine the larger segment to keep the minimum bracketed
                     if (x < m) {
-                            e = b - x;
+                        e = b - x; // x is in [a, m), step towards b
                     } else {
-                            e = a - x;
+                        e = a - x; // x is in [m, b], step towards a
                     }
                     d = GOLDEN_SECTION * e;
                 }
             } else {
-                    // Golden section step.
+                // Previous step e was too small, use Golden Section step
                 if (x < m) {
                     e = b - x;
                 } else {
                     e = a - x;
                 }
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
+            // Ensure the step d is at least tol1 in magnitude
             if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
+                if (d >= 0) { // Keep the direction of the small step
+                    d = tol1;
                 } else {
-                        u = x - tol1;
+                    d = -tol1;
                 }
-                } else {
+            }
+
+            // Calculate the final point u for this iteration
             u = x + d;
-                }
 
+
+            // Compute the objective function value at u
             double fu = computeObjectiveValue(u);
             if (!isMinim) {
-                    fu = -fu;
+                fu = -fu; // Negate if maximizing (internal calculations assume minimization)
             }
 
-                // User-defined convergence checker.
+            // Update points for convergence checker
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
-                if (checker != null) {
+            // User-defined convergence checker
+            if (checker != null && previous != null) { // Check only after the first iteration
                 if (checker.converged(iter, previous, current)) {
-                        return current;
+                    // Checker indicates convergence. Return the best point found so far (x, fx).
+                    return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
                 }
             }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
+            // Update the interval [a, b] and the points v, w, x based on the new value fu
+            if (fu <= fx) { // New point u is better than or equal to the current best x
+                // Update the interval boundary based on u relative to x
+                if (u < x) { // New interval is [a, x]
                     b = x;
-                    } else {
+                } else {     // New interval is [x, b]
                     a = x;
                 }
+                // Update the tracking points: v <- w, w <- x, x <- u
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
                 x = u;
                 fx = fu;
-                } else {
-                    if (u < x) {
+            } else { // New point u is worse than x (fu > fx)
+                // Update the interval boundary using u
+                if (u < x) { // New interval is [u, b]
                     a = u;
-                    } else {
+                } else {     // New interval is [a, u]
                     b = u;
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                // Update w and v if u is better than w or v, maintaining order fx <= fw <= fv
+                if (fu <= fw || Precision.equals(w, x)) {
                     v = w;
                     fv = fw;
                     w = u;
                     fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                     v = u;
                     fv = fu;
                 }
             }
-            } else { // Default termination (Brent's criterion).
-                return current;
-            }
-            ++iter;
-        }
+
+            ++iter; // Increment iteration counter
+        } // End of while loop
     }
\ No newline at end of file
