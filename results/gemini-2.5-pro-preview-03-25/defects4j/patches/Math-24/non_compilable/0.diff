diff --git a/tmp/28689ddd-fa9e-4652-86ce-8ce2e270170f_buggy.java b/tmp/100101da-ac5b-430e-9748-0e1bf959ab13_fixed.java
index f95e529..42dc0eb 100644
--- a/tmp/28689ddd-fa9e-4652-86ce-8ce2e270170f_buggy.java
+++ b/tmp/100101da-ac5b-430e-9748-0e1bf959ab13_fixed.java
@@ -1,165 +1,189 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
         double x = mid;
         double v = x;
         double w = x;
         double d = 0;
         double e = 0;
+        // The value of the objective function at x, w and v.
+        // Used to drive the update rule: if the objective function is
+        // to be maximized, we store -f(x) to obtain a minimization problem.
         double fx = computeObjectiveValue(x);
         if (!isMinim) {
             fx = -fx;
         }
         double fv = fx;
         double fw = fx;
 
+        // Best point found so far (which is the initial guess).
+        UnivariatePointValuePair best = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+
+        // Points used for convergence checking.
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        UnivariatePointValuePair current = best;
+
 
         int iter = 0;
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
             if (!stop) {
                 double p = 0;
                 double q = 0;
                 double r = 0;
                 double u = 0;
 
                 if (FastMath.abs(e) > tol1) { // Fit parabola.
                     r = (x - w) * (fx - fv);
                     q = (x - v) * (fx - fw);
                     p = (x - v) * q - (x - w) * r;
                     q = 2 * (q - r);
 
                     if (q > 0) {
+                        // Standard case: p is set to the numerator of the interpolating parabola.
+                        // The sign of p is adjusted so that the subtraction in the update rule
+                        // corresponds to moving towards the minimum.
                         p = -p;
                     } else {
+                        // Degenerate case: denominator is zero.
                         q = -q;
                     }
 
                     r = e;
                     e = d;
 
-                    if (p > q * (a - x) &&
+                    // Check acceptability of parabolic interpolation step.
+                    if (p > q * (a - x) && // Interpolated point is within bounds.
                         p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
+                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { // Interpolation step is significantly smaller than the previous step.
                         // Parabolic interpolation step.
                         d = p / q;
                         u = x + d;
 
                         // f must not be evaluated too close to a or b.
                         if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
+                            // If the proposed step would bring us too close to the boundaries,
+                            // adjust the step size.
+                            if (x <= m) { // If x is on the left side of the interval center m
+                                d = tol1; // Move towards the right boundary by tol1
+                            } else {      // If x is on the right side of m
+                                d = -tol1;// Move towards the left boundary by tol1
                             }
                         }
                     } else {
                         // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
+                        if (x < m) { // If x is on the left side of the interval center m
+                            e = b - x; // Distance from x to the right boundary
+                        } else {       // If x is on the right side of m
+                            e = a - x; // Distance from x to the left boundary
                         }
-                        d = GOLDEN_SECTION * e;
+                        d = GOLDEN_SECTION * e; // Step size based on golden section
                     }
                 } else {
                     // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
+                    if (x < m) { // If x is on the left side of the interval center m
+                        e = b - x; // Distance from x to the right boundary
+                    } else {       // If x is on the right side of m
+                        e = a - x; // Distance from x to the left boundary
                     }
-                    d = GOLDEN_SECTION * e;
+                    d = GOLDEN_SECTION * e; // Step size based on golden section
                 }
 
                 // Update by at least "tol1".
+                // Ensures that the step size is not too small, preventing premature convergence.
                 if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
+                    if (d >= 0) { // Keep the sign of d
                         u = x + tol1;
                     } else {
                         u = x - tol1;
                     }
                 } else {
                     u = x + d;
                 }
 
+                // Compute the objective function value at the new point u.
                 double fu = computeObjectiveValue(u);
                 if (!isMinim) {
-                    fu = -fu;
+                    fu = -fu; // Negate if maximizing
                 }
 
-                // User-defined convergence checker.
+                // Store the previous best point for the convergence checker.
                 previous = current;
+                // Store the current evaluation point for the convergence checker.
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                // Keep track of the overall best point found so far.
+                best = FastMath.max(best, current, isMinim);
 
+
+                // User-defined convergence checker.
                 if (checker != null) {
+                    // If the checker converges, return the current best point found.
                     if (checker.converged(iter, previous, current)) {
-                        return current;
+                        return best;
                     }
                 }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
-                    } else {
-                        a = x;
+                // Update a, b, v, w and x based on the function value at u.
+                if (fu <= fx) { // If the new point u is better than or equal to the current best x
+                    if (u < x) { // If u is to the left of x
+                        b = x;   // Update the right boundary to x
+                    } else {     // If u is to the right of x
+                        a = x;   // Update the left boundary to x
                     }
+                    // Shift the points: v becomes w, w becomes x, x becomes u
                     v = w;
                     fv = fw;
                     w = x;
                     fw = fx;
                     x = u;
                     fx = fu;
-                } else {
-                    if (u < x) {
-                        a = u;
-                    } else {
-                        b = u;
+                } else { // If the new point u is worse than the current best x
+                    if (u < x) { // If u is to the left of x
+                        a = u;   // Update the left boundary to u
+                    } else {     // If u is to the right of x
+                        b = u;   // Update the right boundary to u
                     }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                    // Update w or v if u is better than them, or if w or v are at x
+                    if (fu <= fw || Precision.equals(w, x)) {
                         v = w;
                         fv = fw;
                         w = u;
                         fw = fu;
                     } else if (fu <= fv ||
                                Precision.equals(v, x) ||
                                Precision.equals(v, w)) {
                         v = u;
                         fv = fu;
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return current;
+                // Return the best point found overall.
+                return best;
             }
-            ++iter;
+            ++iter; // Increment iteration counter.
         }
     }
\ No newline at end of file
