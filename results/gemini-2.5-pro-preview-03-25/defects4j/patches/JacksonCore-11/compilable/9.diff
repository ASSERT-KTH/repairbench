diff --git a/tmp/20e4c9aa-ce4a-4d92-9bd3-6257cf9e0a51_buggy.java b/tmp/666b035f-57f3-4911-9307-f38983f38c02_fixed.java
index 29d025a..7feafac 100644
--- a/tmp/20e4c9aa-ce4a-4d92-9bd3-6257cf9e0a51_buggy.java
+++ b/tmp/666b035f-57f3-4911-9307-f38983f38c02_fixed.java
@@ -1,13 +1,32 @@
     private void _verifySharing()
     {
         if (_hashShared) {
-            _hashArea = Arrays.copyOf(_hashArea, _hashArea.length);
-            _names = Arrays.copyOf(_names, _names.length);
+            // Store original references before creating copies.
+            final int[] oldHashArea = _hashArea;
+            final String[] oldNames = _names;
+
+            // Create copies of arrays
+            _hashArea = Arrays.copyOf(oldHashArea, oldHashArea.length);
+            _names = Arrays.copyOf(oldNames, oldNames.length);
+
+            // Jackson Core #216 fix requires checking the _names array size.
+            // The original implementation might have allocated _names based on primary size (_size >> 2)
+            // instead of the full hash area size (_hashArea.length >> 2).
+            // The rehash() method iterates based on _hashArea.length, so _names must match.
+            // We resize the copied _names array if its length is inconsistent.
+            final int expectedNamesLength = oldHashArea.length >> 2;
+            if (_names.length != expectedNamesLength) {
+                // Resize the copied _names array to the expected length.
+                // Arrays.copyOf handles both expansion (padding with nulls) and potential shrinking.
+                _names = Arrays.copyOf(_names, expectedNamesLength);
+            }
+
             _hashShared = false;
             // 09-Sep-2015, tatu: As per [jackson-core#216], also need to ensure
             //    we rehash as needed, as need-rehash flag is not copied from parent
         }
+        // Regardless of whether we copied, check if a rehash is needed.
         if (_needRehash) {
             rehash();
         }
     }
