diff --git a/tmp/8dab0f76-96ea-4b0f-adda-40bbcbf2af31_buggy.java b/tmp/c154a47b-e6f7-4645-bc0d-6340d98c67e3_fixed.java
index eed2194..e33ae97 100644
--- a/tmp/8dab0f76-96ea-4b0f-adda-40bbcbf2af31_buggy.java
+++ b/tmp/c154a47b-e6f7-4645-bc0d-6340d98c67e3_fixed.java
@@ -1,55 +1,85 @@
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      * 
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      * 
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      * 
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      * 
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
-        if (hoursOffset == 0 && minutesOffset == 0) {
-            return DateTimeZone.UTC;
-        }
+        // Input validation
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        // Corrected minutes range check to allow negative minutes
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
-        int offset = 0;
+        // Check for invalid combination: positive hours and negative minutes
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Positive hours must not have negative minutes: " + minutesOffset);
+        }
+
+        // Handle UTC case early for efficiency
+        if (hoursOffset == 0 && minutesOffset == 0) {
+            return DateTimeZone.UTC;
+        }
+
+        // Calculate total offset in minutes, applying sign logic from documentation
+        int totalMinutesOffset = 0;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+            // Use safe multiply for hours * 60
+            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
+            if (hoursOffset < 0) {
+                // For negative hours, minutes component adds to the magnitude of the negative offset
+                // regardless of the minutes sign. Example: (-2, 15) -> -135 min; (-2, -15) -> -135 min
+                // This is achieved by subtracting the absolute value of minutes from the negative hoursInMinutes.
+                totalMinutesOffset = FieldUtils.safeSubtract(hoursInMinutes, Math.abs(minutesOffset));
             } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
+                // For positive or zero hours, minutes component adds algebraically.
+                // Example: (2, 15) -> 135 min; (0, 15) -> 15 min; (0, -15) -> -15 min
+                // Note: The case (+ve hours, -ve minutes) is disallowed by the check above.
+                totalMinutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
             }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
+            // This catch is primarily for the safe arithmetic methods, although overflow
+            // is unlikely with the given input constraints for this intermediate calculation.
             throw new IllegalArgumentException("Offset is too large");
         }
-        return forOffsetMillis(offset);
+
+        // Convert total minutes offset to milliseconds
+        int offsetInMillis;
+        try {
+            // This multiplication is the main place where potential overflow could occur
+            // if constraints were different, hence the use of safeMultiply.
+            offsetInMillis = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+        } catch (ArithmeticException ex) {
+            throw new IllegalArgumentException("Offset is too large");
+        }
+
+        // Return the DateTimeZone for the calculated millisecond offset
+        return forOffsetMillis(offsetInMillis);
     }
\ No newline at end of file
