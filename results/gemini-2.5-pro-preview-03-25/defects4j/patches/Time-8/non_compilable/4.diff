diff --git a/tmp/7012e1b3-a33b-40bc-a61e-52a2d8f37760_buggy.java b/tmp/0d67217b-bb49-4dc3-8e23-f7e9643555a1_fixed.java
index eed2194..5cb48e9 100644
--- a/tmp/7012e1b3-a33b-40bc-a61e-52a2d8f37760_buggy.java
+++ b/tmp/0d67217b-bb49-4dc3-8e23-f7e9643555a1_fixed.java
@@ -1,55 +1,75 @@
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      *
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      *
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      *
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      *
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
+        // Check hours range
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        // Check minutes range (allows negative minutes)
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
+        // Check invalid combination: positive hours and negative minutes
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Minutes negative relative to hours: " + minutesOffset);
+        }
+
         int offset = 0;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+            // Calculate total offset in minutes using safe arithmetic
+            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
+            int totalMinutesOffset;
+            if (hoursOffset < 0) {
+                // For negative hours, the total offset must be negative or zero.
+                // The magnitude is abs(hours)*60 + abs(minutes).
+                // totalMinutes = hoursInMinutes - abs(minutes) ensures this.
+                // e.g., (-2, 15) -> -120 - 15 = -135 -> -02:15
+                // e.g., (-2, -15) -> -120 - 15 = -135 -> -02:15
+                totalMinutesOffset = FieldUtils.safeSubtract(hoursInMinutes, Math.abs(minutesOffset));
             } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
+                // For non-negative hours (zero or positive), simple addition works.
+                // The (+h, -m) case is already excluded.
+                // e.g., (2, 15) -> 120 + 15 = 135 -> +02:15
+                // e.g., (0, 15) -> 0 + 15 = 15 -> +00:15
+                // e.g., (0, -15) -> 0 + (-15) = -15 -> -00:15
+                totalMinutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
             }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            // Convert total minutes to milliseconds
+            offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
\ No newline at end of file
