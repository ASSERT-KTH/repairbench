diff --git a/tmp/5aa8bd7c-220a-47e6-be99-4b8218629816_buggy.java b/tmp/469c263c-7ca4-420e-9308-c47b2d4fe6b8_fixed.java
index 3b9a3c0..c4cf41c 100644
--- a/tmp/5aa8bd7c-220a-47e6-be99-4b8218629816_buggy.java
+++ b/tmp/469c263c-7ca4-420e-9308-c47b2d4fe6b8_fixed.java
@@ -1,71 +1,79 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+     * The buffer is scanned until the first NUL or SPACE is found.
+     * The characters before the terminator must be '0'-'7'.</p>
+     * <p>All characters after the number and before the end of the buffer
+     * must be NUL or SPACE.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the field contains invalid characters,
+     * or is too short.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
-        int     end = offset + length;
         int     start = offset;
+        final int end = offset + length; // Mark the logical end of the field
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle cases with leading NUL, specific TAR formats might use this
+        // Also handles all-NUL fields (common for missing fields)
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' ') {
             start++;
-            } else {
-                break;
         }
+
+        // Find the end of the actual octal digits. Stop at the first non-octal digit.
+        int digitEnd = start;
+        while (digitEnd < end && buffer[digitEnd] >= '0' && buffer[digitEnd] <= '7') {
+            digitEnd++;
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+        // Check that all characters from the first non-octal digit onwards
+        // until the end of the field are NUL ('\0') or space (' ').
+        // This enforces that the field is terminated correctly after the digits.
+        for (int i = digitEnd; i < end; i++) {
+             byte currentByte = buffer[i];
+             if (currentByte != 0 && currentByte != ' ') {
+                 // Assuming exceptionMessage helper method is available in the class context
                  throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                     exceptionMessage(buffer, offset, length, i, currentByte));
              }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+        // If start == digitEnd, it signifies that after skipping leading spaces,
+        // no octal digits were found. This includes fields like "   ", " \0", etc.
+        // Return 0 for such cases.
+        if (start == digitEnd) {
+             return 0L;
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+
+        // Convert the sequence of octal digits (from start to digitEnd-1) to a long value.
+        for (int i = start; i < digitEnd; i++) {
+            final byte currentByte = buffer[i];
+            // CheckStyle:MagicNumber OFF - Already validated bytes are '0'-'7'
+            result = (result << 3) + (currentByte - '0'); // Convert ASCII octal digit to value
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
