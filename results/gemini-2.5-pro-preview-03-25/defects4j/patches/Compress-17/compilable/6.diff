diff --git a/tmp/bf4a7669-7d4b-4e31-bcd3-04b90753b029_buggy.java b/tmp/f14f34f3-7e4e-4d5c-89cb-2c248a1841ab_fixed.java
index 3b9a3c0..a9b7e8a 100644
--- a/tmp/bf4a7669-7d4b-4e31-bcd3-04b90753b029_buggy.java
+++ b/tmp/f14f34f3-7e4e-4d5c-89cb-2c248a1841ab_fixed.java
@@ -1,71 +1,108 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
         int end = offset + length;
         int start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
+        // Handle leading NUL requested by COMPRESS-144 / COMPRESS-197
+        // Detectable by seeing leading NUL. Less precise than below, but avoids
+        // unnecessary exceptions. Effectively returns 0 for ALL NUL fields.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' ') {
             start++;
-            } else {
-                break;
         }
+
+        // If the field is empty or consists entirely of spaces, return 0.
+        // This check is necessary to avoid reading buffer[end-1] if start has reached end.
+        // It also handles the case where the field is only spaces, which technically meets
+        // the "trailing space" requirement if the last character was a space.
+        if (start == end) {
+            return 0L;
+        }
+
+        // Check that the required trailer (space or NUL) is present at the end of the field.
+        byte trailer = buffer[end - 1];
+        if (trailer != 0 && trailer != ' ') {
+            // Build a helpful exception message inline, assuming exceptionMessage helper might not be available.
+            String error = "Invalid byte " + trailer + " at offset " + (end - 1 - offset) + " in '" +
+                           new String(buffer, offset, length).replace("\0", "{NUL}") + "'. Expected space or null.";
+            throw new IllegalArgumentException(error);
+            // If exceptionMessage helper exists, use:
+            // throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, trailer));
+        }
+
+        // Find the end of the octal digits.
+        // Scan from the first non-space character up to the character before the trailer.
+        int parseEnd = start;
+        // buffer[end-1] is the trailer, so scan up to end - 1.
+        while (parseEnd < end - 1 && buffer[parseEnd] >= '0' && buffer[parseEnd] <= '7') {
+            parseEnd++;
         }
+        // parseEnd now points to the first non-octal digit, or end-1.
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+        // Verify that characters between the last digit (parseEnd-1) and the trailer (end-1)
+        // are only spaces or NULs. Check indices from parseEnd to end-2.
+        for (int i = parseEnd; i < end - 1; i++) {
+            final byte currentByte = buffer[i];
+            if (currentByte != ' ' && currentByte != 0) {
+                 // Build helpful message inline.
+                 String error = "Invalid byte " + currentByte + " at offset " + (i - offset) + " in '" +
+                                new String(buffer, offset, length).replace("\0", "{NUL}") + "'. Expected space or null.";
+                 throw new IllegalArgumentException(error);
+                 // If exceptionMessage helper exists, use:
+                 // throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
             }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
+        // Parse the identified octal digits (from start to parseEnd).
+        for (int i = start; i < parseEnd; i++) {
+            final byte currentByte = buffer[i];
             // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
+            // No need to re-validate the byte is '0'-'7' due to the earlier loop.
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    /*
+     * Helper method to generate exception message (if needed and available in the original class).
+     * Keep this comment or remove if submitting only the parseOctal function.
+     * private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+     *     String L = System.lineSeparator();
+     *     StringBuilder sb = new StringBuilder();
+     *     sb.append("Invalid byte ").append(currentByte).append(" at offset ").append(idx - offset);
+     *     sb.append(" in '").append(new String(buffer, offset, length).replace("\0", "{NUL}")).append("'");
+     *     sb.append(L);
+     *     return sb.toString();
+     * }
+     */
\ No newline at end of file
