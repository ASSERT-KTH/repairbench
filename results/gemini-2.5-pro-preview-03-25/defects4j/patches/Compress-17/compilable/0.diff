diff --git a/tmp/a7056211-e8fa-4032-b4ab-f28cd547602c_buggy.java b/tmp/95561832-6364-47d5-b638-885073c9e04b_fixed.java
index 3b9a3c0..e3bb5a1 100644
--- a/tmp/a7056211-e8fa-4032-b4ab-f28cd547602c_buggy.java
+++ b/tmp/95561832-6364-47d5-b638-885073c9e04b_fixed.java
@@ -1,71 +1,86 @@
     /**
      * Parse an octal string from a buffer.
      *
-     * <p>Leading spaces are ignored.
+     * <p>Leading spaces and NULs are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
+     * since Commons Compress 1.4.</p> This behavior is preserved by
+     * skipping leading NULs.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
+        // Skip leading spaces and NULs
         while (start < end){
-            if (buffer[start] == ' '){
+            final byte currentByte = buffer[start];
+            if (currentByte == ' ' || currentByte == 0) { // Skip spaces and NULs
                 start++;
             } else {
-                break;
+                break; // Found first non-space/NUL character
             }
         }
 
-        // Must have trailing NUL or space
+        // Must have trailing NUL or space for POSIX compliance.
+        // These checks ensure that the last characters are valid terminators.
         byte trailer;
+        // Check trailing byte. If it's not terminator, throw exception.
+        // No need to check if start >= end here, because if length < 2, we already threw.
+        // If length >= 2, end-1 is a valid index.
+        // If all were skipped (start == end), buffer[end-1] was a space or NUL.
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
-            end--;
+            end--; // Decrement end to point past the last digit/character to parse
         } else {
+            // If the very last character is not a space or NUL, it's invalid.
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
-        // May have additional NULs or spaces
+
+        // May have additional NUL or space. This allows for example "123 \0" or "123\0 "
+        // Check only if there are still characters left to potentially parse (end > start)
+        // and the new last character is also a terminator.
+        if (end > start) {
             trailer = buffer[end - 1];
             if (trailer == 0 || trailer == ' '){
-            end--;
+                end--; // Decrement end again
+            }
         }
 
+        // Now parse digits from the adjusted start up to the adjusted end
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
+            // Ensure characters are octal digits.
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
+            // Standard octal parsing: shift left by 3 (multiply by 8) and add new digit.
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist elsewhere in the class for creating exception messages.
+    // private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) { ... }
\ No newline at end of file
