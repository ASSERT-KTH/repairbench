diff --git a/tmp/d42b3d0c-9520-4d54-9a1b-e0a9b3c4815e_buggy.java b/tmp/48f67fc8-8e0e-4fab-af0f-235646fc69c8_fixed.java
index 3b9a3c0..aa7cb7b 100644
--- a/tmp/d42b3d0c-9520-4d54-9a1b-e0a9b3c4815e_buggy.java
+++ b/tmp/48f67fc8-8e0e-4fab-af0f-235646fc69c8_fixed.java
@@ -1,71 +1,85 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Detect leading NUL for work-around or all-NUL buffer
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' '){
             start++;
-            } else {
-                break;
-            }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+        // Check for mandatory trailing NUL or space at the end of the segment.
+        // If the buffer was all spaces, start == end and this check is skipped.
+        byte trailer = buffer[end - 1];
+        if (trailer != 0 && trailer != ' ') {
+             // If the very last character is not a space or NUL, it's invalid.
              throw new IllegalArgumentException(
                      exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+
+        // Find the end of the actual octal digits by scanning backwards
+        // from the character before the trailer. Stop at the first non-space/non-NUL.
+        int digitEnd = end - 2; // Index of last char _before_ mandatory trailer
+        while (digitEnd >= start && (buffer[digitEnd] == ' ' || buffer[digitEnd] == 0)) {
+            digitEnd--;
+        }
+
+        // If all characters after leading spaces and before the trailer were spaces/NULs,
+        // or if the initial buffer was all spaces (start >= end handled implicitly by digitEnd < start)
+        if (digitEnd < start) {
+            return 0L;
         }
 
-        for ( ;start < end; start++) {
+        // Parse octal digits from start up to digitEnd (inclusive)
+        for ( ;start <= digitEnd; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method needed for the exception message (assume it exists outside this scope)
+    // This is a placeholder signature. The actual implementation is part of the surrounding class.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int index, byte value) {
+         // In a real environment, this method would be defined elsewhere in the class/utility.
+         // Providing a placeholder signature to make the main function syntactically valid.
+         // Actual implementation would format a helpful error message.
+         return "Invalid octal digit '" + (char)value + "' at index " + index + " in buffer segment [" + offset + ", " + (offset+length) + ")";
+    }
\ No newline at end of file
