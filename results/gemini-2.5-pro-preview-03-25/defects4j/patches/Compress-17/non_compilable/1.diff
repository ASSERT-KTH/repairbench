diff --git a/tmp/6e7341ac-82b1-4f04-b482-f4b3123d3f3a_buggy.java b/tmp/5435dcd1-4732-46d9-875d-c84c1d4ab52f_fixed.java
index 3b9a3c0..fa11510 100644
--- a/tmp/6e7341ac-82b1-4f04-b482-f4b3123d3f3a_buggy.java
+++ b/tmp/5435dcd1-4732-46d9-875d-c84c1d4ab52f_fixed.java
@@ -1,71 +1,120 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+     * and may contain additional trailing spaces or NULs.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
-        int     end = offset + length;
         int     start = offset;
+        int     end = offset + length;
+        // Keep track of original offset/length for exception messages
+        final int original_offset = offset;
+        final int original_length = length;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Special handling for leading NUL required by Javadoc/previous behavior.
+        // Check buffer[start] before skipping leading spaces.
         if (buffer[start] == 0) {
             return 0L;
         }
 
+        // Use a temporary variable to track the start of digits after skipping spaces
+        int currentPos = start;
+
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
-                break;
-            }
+        while (currentPos < end && buffer[currentPos] == ' '){
+             currentPos++;
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+        // Find the end of the octal digits by trimming trailing NULs and spaces
+        int effectiveEnd = end; // Point immediately after the field initially
+
+        // Check for the mandatory trailing space or NUL. Start from the last byte.
+        // Use original_offset for lower bound check.
+        int idx = effectiveEnd - 1;
+
+        // Ensure idx is valid and points to a terminator.
+        // If the field is all spaces/NULs, idx might become < currentPos after trimming,
+        // but it must point to a space/NUL initially at end - 1.
+        if (idx < original_offset || (buffer[idx] != ' ' && buffer[idx] != 0)) {
+             // Since length >= 2, idx must be >= original_offset.
+             byte problematicByte = (idx < original_offset) ? -1 : buffer[idx]; // Should not happen with length >= 2
+             // Assume exceptionMessage helper exists and formats the error appropriately
+             // Provide a more context-specific message if possible
              throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                     exceptionMessage(buffer, original_offset, original_length, idx, problematicByte)
+                      + " Missing mandatory trailing NUL or space");
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+
+        // Trim all trailing spaces and NULs backward from the end.
+        // Stop trimming if idx goes before the first non-space character found earlier (currentPos).
+        while (idx >= currentPos && (buffer[idx] == ' ' || buffer[idx] == 0)) {
+            idx--;
+        }
+        // Now `idx` points to the last potential octal digit, or is < currentPos.
+        // effectiveEnd marks the position *after* the last digit.
+        effectiveEnd = idx + 1;
+
+        // If after skipping leading spaces and trimming trailing terminators,
+        // the start position is at or after the effective end, the field is effectively empty or all spaces/NULs.
+        // This handles cases like "   \0" or "       \0" which should be 0.
+        if (currentPos >= effectiveEnd) {
+            return 0L;
         }
 
-        for ( ;start < end; start++) {
+        // Update start to the first non-space character for the parsing loop
+        start = currentPos;
+
+        // Main parsing loop
+        for ( ; start < effectiveEnd; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                 // Encountered a non-octal digit before the trimmed end.
+                 // This indicates an invalid character within the expected octal number part (e.g., "123 45\0").
+                 // Assume exceptionMessage helper exists and formats the error appropriately
                  throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, original_offset, original_length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Assume this helper method exists elsewhere in the class or a utility class.
+    // It is required by the function signature but its implementation is not part of the fix.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {
+        // Placeholder for the actual implementation assumed to exist.
+        // A real implementation would format a detailed error message.
+        String fieldContent;
+        try {
+            // Attempt to decode assuming ISO-8859-1 or similar, replace NULs for display
+            fieldContent = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1).replace((char) 0, '{' + "NUL" + '}');
+        } catch (Exception e) {
+            fieldContent = "Cannot decode header field"; // Fallback
+        }
+         return "Invalid octal digit '" + (char)currentByte + "' (byte value " + currentByte + ")" +
+                " at index " + (current - offset) + " (byte offset " + current + ")" +
+                " in field '" + fieldContent + "' (length " + length + ")";
+     }
\ No newline at end of file
