diff --git a/tmp/00aade76-631f-43a4-b48b-dcf0dfaa3522_buggy.java b/tmp/a03f1f4e-87fd-457b-b5a6-28883ed96465_fixed.java
index 3b9a3c0..91a0087 100644
--- a/tmp/00aade76-631f-43a4-b48b-dcf0dfaa3522_buggy.java
+++ b/tmp/a03f1f4e-87fd-457b-b5a6-28883ed96465_fixed.java
@@ -1,71 +1,90 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+     * and may contain additional trailing spaces or NULs.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Must have trailing NUL or space
         byte trailer;
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
+
         // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+        // In particular, GNU tar is known to add additional NULs
+        // Be backward compatible - allow spaces as well, although it is doubtful
+        // that it is needed. Fixes TarArchiveInputStreamTest.testCompress197
+        // Reference: COMPRESS-197
+        while (end > start && ( (trailer = buffer[end - 1]) == 0 || trailer == ' ') ){
             end--;
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist based on its usage in the original code
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {
+        // Implementation is not provided, but needed for the code to compile.
+        // Using a placeholder implementation for demonstration.
+        String B = Integer.toHexString(currentByte); // CHECKSTYLE IGNORE MagicNumber
+        try {
+            return "Invalid byte " + B + " at offset " + (current - offset)
+                    + " in '" + new String(buffer, offset, length, "US-ASCII").replaceAll("\0", "{NUL}") // CHECKSTYLE IGNORE MagicNumber
+                    + "' len=" + length;
+        } catch (java.io.UnsupportedEncodingException e) {
+            // Should not happen with US-ASCII
+            throw new RuntimeException(e);
+        }
+    }
\ No newline at end of file
