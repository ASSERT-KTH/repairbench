diff --git a/tmp/a2b10049-2e3b-43a3-8f2e-67a784360eb3_buggy.java b/tmp/6db275fd-c89c-4863-bb0e-10e72418cd6d_fixed.java
index 3b9a3c0..f708cf0 100644
--- a/tmp/a2b10049-2e3b-43a3-8f2e-67a784360eb3_buggy.java
+++ b/tmp/6db275fd-c89c-4863-bb0e-10e72418cd6d_fixed.java
@@ -1,71 +1,112 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL or scenarios where the first char determines the value
+        // This check needs to happen BEFORE skipping spaces
         if (buffer[start] == 0) {
-            return 0L;
+            return 0L; // As per documentation, return 0 for leading NUL
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        // After skipping leading spaces, if we are at the end, the field was all spaces.
+        // The checks below for trailing terminators handle this.
+        // However, if the first non-space character is NUL, we should treat it as end-of-number.
+        // Example: "  \0" or "  \0123"
+        // The original code didn't explicitly handle NUL after leading spaces;
+        // it would be caught by the parsing loop or trailer checks.
+
+        // Determine the effective end of the octal digits by checking for NUL/space trailers
+        int digitEnd = end; // Potential end of digits
+
+        // Check 1: Must have at least one trailing NUL or space.
+        byte trailer = buffer[digitEnd - 1];
         if (trailer == 0 || trailer == ' ') {
-            end--;
+            digitEnd--;
         } else {
+            // If the very last byte isn't NUL or space, the format is invalid per TAR spec.
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
+
+        // Check 2: Optionally skip a second trailing NUL or space.
+        // Ensure digitEnd hasn't already moved past start
+        if (digitEnd > start) {
+             trailer = buffer[digitEnd - 1];
              if (trailer == 0 || trailer == ' ') {
-            end--;
+                 digitEnd--;
+             }
+        }
+
+        // After trimming terminators, if start is now >= digitEnd,
+        // it means the field contained only spaces and/or terminators.
+        // Example: " \0", "  ", "\0\0" etc. Result should be 0.
+        if (start >= digitEnd) {
+            return 0L;
         }
 
-        for ( ;start < end; start++) {
+        // Parse octal digits from 'start' up to 'digitEnd'
+        for ( ;start < digitEnd; start++) {
             final byte currentByte = buffer[start];
+
+            // If we encounter a space or NUL within the potential digits,
+            // it marks the end of the octal number. Stop parsing.
+            // Example: "123 \0\0" should parse as 123.
+            if (currentByte == ' ' || currentByte == 0) {
+                break;
+            }
+
             // CheckStyle:MagicNumber OFF
+            // Validate the byte is an octal digit
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            // Convert ASCII octal digit to numeric value and add to result
+            result = (result << 3) + (currentByte - '0');
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist, definition not provided but needed for compilation
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int badChrOffset, byte badChr) {
+        return "Invalid byte " + (badChr & 0xFF) + " at offset " + (badChrOffset - offset)
+             + " in '" + new String(buffer, offset, length).replaceAll("\0", "{NUL}") // Replace NUL for visibility
+             + "' len " + length;
+    }
\ No newline at end of file
