diff --git a/tmp/e2280caa-969d-4170-9313-84b20aa59d3a_buggy.java b/tmp/e30ca2db-aad3-4874-ae9d-1debb8b8d0cd_fixed.java
index 3b9a3c0..3801586 100644
--- a/tmp/e2280caa-969d-4170-9313-84b20aa59d3a_buggy.java
+++ b/tmp/e30ca2db-aad3-4874-ae9d-1debb8b8d0cd_fixed.java
@@ -1,71 +1,102 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        // Check for all spaces, or a leading NUL where the number would start.
+        // Per Javadoc: "To work-around some tar implementations that insert a
+        // leading NUL this method returns 0 if it detects a leading NUL".
+        // This needs to check the first non-space byte, not just buffer[offset].
+        // Also handles the "all spaces" case.
+        if (start == end || buffer[start] == 0) {
+            return 0L;
+        }
+
+        // Must have trailing NUL or space.
+        byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
-            end--;
+            end--; // Adjust end to point past the last char to be processed
         } else {
+            // If the field is not NUL-terminated or space-terminated, complain.
+            // This is required by the TAR specification.
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NULs or spaces
+
+        // May have additional NULs or spaces before the mandatory one.
+        // These are only allowed immediately preceding the mandatory terminator byte.
+        // Check the byte before the (potentially decremented) end.
+        // Ensure start < end to handle cases where length=2 and end was already decremented.
+        if (start < end) {
             trailer = buffer[end - 1];
             if (trailer == 0 || trailer == ' ') {
                 end--;
             }
+        }
 
+        // Process bytes from first non-space up to the adjusted end index
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
+            // If a non-octal digit (including space or NUL) is found before the end,
+            // the field is invalid.
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    /**
+     * Helper method to generate the exception message
+     * @param buffer the buffer
+     * @param offset the offset within the buffer
+     * @param length the length of the buffer
+     * @param idx the index of the anomaly
+     * @param currentByte the byte at the index
+     * @return the exception message
+     */
+    private static String exceptionMessage(final byte[] buffer, final int offset,
+                                           final int length, final int idx, final byte currentByte) {
+        String nl = System.getProperty("line.separator");
+        return "Invalid byte " + currentByte + " at offset " + (idx - offset) + " in '"
+            + TarUtils.toAsciiString(buffer, offset, length) + "' len=" + length + nl;
+    }
\ No newline at end of file
