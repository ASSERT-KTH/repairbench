diff --git a/tmp/11e6674b-b98f-429f-8510-60d5c972ae2f_buggy.java b/tmp/63cda8c1-bebf-4971-9196-0112891fd82d_fixed.java
index 3b9a3c0..ae3c749 100644
--- a/tmp/11e6674b-b98f-429f-8510-60d5c972ae2f_buggy.java
+++ b/tmp/63cda8c1-bebf-4971-9196-0112891fd82d_fixed.java
@@ -1,71 +1,119 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
+        // Use a different variable for the index marking the end of potential digits.
+        // Initialize it to the end of the field. It will be adjusted by trailer checks.
+        int     parseEnd = end;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL, as specified in the Javadoc.
+        // This also covers the case of a buffer containing only NULs,
+        // because the first byte would be 0.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        // Loop invariant: start < end (using original end for safety boundary)
+        // Loop terminates because start increases, or start == end.
+        while (start < end && buffer[start] == ' '){
              start++;
-            } else {
-                break;
-            }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        // Check for mandatory trailer (NUL or space) at the physical end of the field.
+        // Do this check *before* potentially adjusting parseEnd based on inner terminators.
+        byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' '){
-            end--;
+            // Adjust the logical boundary for parsing actual digits.
+            // Everything up to this mandatory terminator is potentially part of the number or padding.
+            parseEnd--;
         } else {
+            // If the very last byte isn't a NUL or space, the format is invalid per Javadoc/standard.
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
+
+        // Check for optional second trailer (NUL or space) just before the mandatory one.
+        // This allows for fields ending in " \0" or "  " or "\0\0".
+        // Ensure we don't read past the start or the newly adjusted parseEnd.
+        // We only need to check if parseEnd is still potentially pointing at a character
+        // that could be part of the number (i.e., parseEnd > start).
+        if (parseEnd > start) {
+            trailer = buffer[parseEnd - 1]; // Check the byte at the new 'parseEnd - 1'
             if (trailer == 0 || trailer == ' ') {
-            end--;
+                // Found another NUL/space trailer, reduce parseEnd again.
+                parseEnd--;
             }
+        }
+
+        // It's possible that after skipping leading spaces and processing trailer(s),
+        // start >= parseEnd. This happens for fields containing only spaces and/or NUL terminators.
+        // In this case, the loop below won't execute, and result will remain 0, which is correct.
 
-        for ( ;start < end; start++) {
+        for ( ;start < parseEnd; start++) {
             final byte currentByte = buffer[start];
+
             // CheckStyle:MagicNumber OFF
+            // If we encounter NUL ('\0') or space (' ') within the designated digit area,
+            // it signifies the end of the octal number according to TAR specs.
+            if (currentByte == 0 || currentByte == ' ') {
+                 // Stop parsing digits, any remaining characters up to parseEnd are ignored.
+                 break;
+            }
+
+            // Check if the byte is a valid octal digit ('0' through '7').
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+
+            // Accumulate the octal value. (result << 3) is equivalent to result * 8.
+            result = (result << 3) + (currentByte - '0');
             // CheckStyle:MagicNumber ON
         }
+        // The loop terminates either by hitting the adjusted 'parseEnd' or by encountering
+        // an early terminator (NUL/space).
 
         return result;
     }
+
+    // Helper method assumed to be in the same class context for the exception message.
+    // Provided for completeness, assuming a similar implementation exists.
+    private static String exceptionMessage(byte[] buffer, final int offset, final int length, int idx, final byte currentByte) {
+        String S_buffer;
+        try {
+            // Attempt to decode the relevant part of the buffer as ASCII for readability
+             S_buffer = new String(buffer, offset, length, "ASCII");
+        } catch (java.io.UnsupportedEncodingException e) {
+             // Fallback to default charset if ASCII is not supported (unlikely)
+             S_buffer = new String(buffer, offset, length);
+        }
+        // Replace NUL characters for better display in the error message
+        S_buffer = S_buffer.replace("\0", "{NUL}");
+        return "Invalid byte "+currentByte+" at offset "+(idx-offset)+" in '"+S_buffer+"' len "+length;
+    }
\ No newline at end of file
