diff --git a/tmp/ea97c17a-b132-4cc3-b160-3fd42893c3c4_buggy.java b/tmp/cf8a0274-6344-4979-b1d0-bc8bc49fbcba_fixed.java
index 3b9a3c0..460add6 100644
--- a/tmp/ea97c17a-b132-4cc3-b160-3fd42893c3c4_buggy.java
+++ b/tmp/cf8a0274-6344-4979-b1d0-bc8bc49fbcba_fixed.java
@@ -1,71 +1,118 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Workaround for leading NUL check at the start of the field segment
+        // based on the original code logic which checked buffer[start] (initially buffer[offset])
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        // Must have trailing NUL or space at the end of the defined length
+        byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' '){
-            end--;
+            end--; // Adjust end to point before the mandatory trailer
         } else {
+            // If the last byte isn't a valid trailer, reject per Javadoc requirements.
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NULs or spaces
+
+        // May have an additional trailing NUL or space before the mandatory one.
+        // Check if there's still data to check (end > start) before accessing buffer[end-1].
+        // This protects against invalid index if the buffer was all spaces/NULs trimmed away.
+        if (end > start) {
             trailer = buffer[end - 1];
             if (trailer == 0 || trailer == ' '){
-            end--;
+                end--; // Adjust end to point before the second trailer
             }
+        }
+        // 'end' now marks the boundary after the potential octal digits, considering mandatory trailers.
 
+        // Parse digits from the adjusted start up to the adjusted end.
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
+
             // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+            if (currentByte >= '0' && currentByte <= '7') {
+                // Accumulate octal value
+                result = (result << 3) + (currentByte - '0');
+            } else if (currentByte == ' ' || currentByte == 0) {
+                // If a space or NUL is found *within* the range [start, end)
+                // after trimming the required trailers, it indicates the end
+                // of the actual octal number. Stop processing cleanly.
+                // This handles cases like "123 \0" correctly.
+                break;
+            } else {
+                // Any other character within this range [start, end) is considered invalid.
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist for constructing the exception message.
+    // The exact implementation is not part of the fix but needed for compilation.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int index, byte value) {
+        // Create a reasonable representation of the buffer segment for the message.
+        String content = "invalid";
+        try {
+             // Attempt to decode as UTF-8, replacing errors. Use a limited length for brevity.
+             int displayLength = Math.min(length, 32); // Show up to 32 bytes
+             content = new String(buffer, offset, displayLength, java.nio.charset.StandardCharsets.UTF_8);
+             if (length > displayLength) {
+                 content += "...";
+             }
+        } catch (Exception e) { /* ignore decoding issues */ }
+
+        // Highlight the problematic byte
+        String annotatedContent = content;
+        int problematicIndexInSubstring = index - offset;
+        if (problematicIndexInSubstring >= 0 && problematicIndexInSubstring < content.length()) {
+             try {
+                 annotatedContent = content.substring(0, problematicIndexInSubstring)
+                                   + "{" + (char)value + "}" // Show char representation if possible
+                                   + content.substring(problematicIndexInSubstring + 1);
+             } catch(Exception e) { /* ignore annotation issues */ }
+        }
+
+        return "Invalid byte " + value + " (at index " + index + ") in octal value field: [offset=" + offset + ", length=" + length + ", content='" + annotatedContent + "']";
+    }
\ No newline at end of file
