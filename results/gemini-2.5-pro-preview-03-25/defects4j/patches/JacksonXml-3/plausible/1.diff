diff --git a/tmp/b8cdc438-7358-423b-aec9-7586cd8b63af_buggy.java b/tmp/9515415f-b70f-45d6-a340-fc8beee448f8_fixed.java
index 74fe4ec..4020c94 100644
--- a/tmp/b8cdc438-7358-423b-aec9-7586cd8b63af_buggy.java
+++ b/tmp/9515415f-b70f-45d6-a340-fc8beee448f8_fixed.java
@@ -1,98 +1,119 @@
     /**
      * Method overridden to support more reliable deserialization of
      * String collections.
      */
     @Override
     public String nextTextValue() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
 
             // expected case; yes, got a String
             if (t == JsonToken.VALUE_STRING) {
                 return _currText;
             }
             _updateState(t);
             return null;
         }
 
         int token = _xmlTokens.next();
 
         // mostly copied from 'nextToken()'
         while (token == XmlTokenStream.XML_START_ELEMENT) {
             if (_mayBeLeaf) {
+                // If we thought it might be a leaf, but is element,
+                // we must be seeing Object structure.
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
-                return null;
+                return null; // not FIELD_NAME, but START_OBJECT
             }
             if (_parsingContext.inArray()) {
+                // If parent is an array, this element is just the start of a value
+                // (possibly contained in an element)
                 token = _xmlTokens.next();
                 _mayBeLeaf = true;
                 continue;
             }
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
+            // note: this does NOT require adjustment of _namesToWrap
+            // (unlike in regular nextToken())
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
+                // Ok: needs implicit wrapping. But what's the wrapping state?
+                // Easiest way is to reset START_ELEMENT state...
                 _xmlTokens.repeatStartElement();
             }
             _mayBeLeaf = true;
             _currToken = JsonToken.FIELD_NAME;
-            return null;
+            return null; // FIELD_NAME means no text value
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
+            // Ok: end element. Need to figure out if this is important...
             if (_mayBeLeaf) {
+                // If we thought we might get leaf, we basically got "empty" element,
+                // which is interpreted as empty String here.
                 // NOTE: this is different from nextToken() -- produce "", NOT null
                 _mayBeLeaf = false;
                 _currToken = JsonToken.VALUE_STRING;
                 return (_currText = "");
             }
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
-            break;
+            break; // no textual value with END_OBJECT/END_ARRAY
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
-                _nextToken = JsonToken.FIELD_NAME;
-                _currText = _xmlTokens.getText();
+                // attributes only allowed within Objects, so:
+                _nextToken = JsonToken.FIELD_NAME; // which is the attribute name
+                _currText = _xmlTokens.getText(); // name of the property (attribute)
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
-                _currToken = JsonToken.START_OBJECT;
+                _currToken = JsonToken.START_OBJECT; // and this is the container Object
             } else {
+                // otherwise regular attribute name:
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 _currToken = JsonToken.FIELD_NAME;
             }
-            break;
+            break; // FIELD_NAME means no text value
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             _currToken = JsonToken.VALUE_STRING;
-            break;
+            // This is the textual value, return it
+            return _currText;
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
 
                 // NOTE: this is different from nextToken() -- NO work-around
                 // for otherwise empty List/array
                 _currToken = JsonToken.VALUE_STRING;
                 return _currText;
             }
             // If not a leaf, need to transform into property...
             _parsingContext.setCurrentName(_cfgNameForTextElement);
             _nextToken = JsonToken.VALUE_STRING;
             _currToken = JsonToken.FIELD_NAME;
+            // but FIELD_NAME means no text value at this point
             break;
-        case XmlTokenStream.XML_END:
+        case XmlTokenStream.XML_END: // document end
+            _currToken = null; // means end-of-input
+            close();
+            break;
+        default: // should never happen?
+            // TBI: Maybe indicate error? For now just return null
             _currToken = null;
         }
+        // Should not get here really... except for END, START_OBJECT, END_OBJECT/ARRAY?
         return null;
     }
\ No newline at end of file
