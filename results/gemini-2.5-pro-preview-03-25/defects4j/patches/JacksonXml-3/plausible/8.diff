diff --git a/tmp/f2382624-42ba-41e3-bc85-caffbb23c52b_buggy.java b/tmp/25116204-c445-4685-807d-528cbed0c8a0_fixed.java
index 74fe4ec..6490818 100644
--- a/tmp/f2382624-42ba-41e3-bc85-caffbb23c52b_buggy.java
+++ b/tmp/25116204-c445-4685-807d-528cbed0c8a0_fixed.java
@@ -1,98 +1,132 @@
     /**
      * Method overridden to support more reliable deserialization of
      * String collections.
      */
     @Override
     public String nextTextValue() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
 
             // expected case; yes, got a String
             if (t == JsonToken.VALUE_STRING) {
+                // 29-Jun-2020, tatu: Need to ensure `getText()` would also work
+                _currText = _xmlTokens.getText();
                 return _currText;
             }
             _updateState(t);
             return null;
         }
 
         int token = _xmlTokens.next();
 
         // mostly copied from 'nextToken()'
         while (token == XmlTokenStream.XML_START_ELEMENT) {
+            // If we thought it might be leaf, it wasn't
             if (_mayBeLeaf) {
+                 // If we thought it might be leaf, but wasn't, need to change type
+                 // to START_OBJECT first
+                 // For structured type, need to generate START_OBJECT first
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
+                 // Should not return anything, indicate start of structure:
                 return null;
             }
             if (_parsingContext.inArray()) {
+                // Ok: just need to skip the surrounding element, if any
                 token = _xmlTokens.next();
-                _mayBeLeaf = true;
+                _mayBeLeaf = true; // yup, could be leaf now
                 continue;
             }
+
+            // Otherwise, regular FIELD_NAME case
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
+
+            // Ok: is it potentially wrapped?
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
+                // Yup: need to repeat the START_ELEMENT
                 _xmlTokens.repeatStartElement();
             }
+
             _mayBeLeaf = true;
             _currToken = JsonToken.FIELD_NAME;
+            // Even if it's FIELD_NAME, still not returning text value
             return null;
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
+            // If we encounter END_ELEMENT, we may have missing ("empty") text value;
+            // Nastiest part here is that of possibly needing implicitly START_OBJECT,
+            // mostly to make Lists of structured types work. Specifically, need to
+            // generate implicit START_OBJECT for <Foos><Foos> type structuress
             if (_mayBeLeaf) {
                 // NOTE: this is different from nextToken() -- produce "", NOT null
                 _mayBeLeaf = false;
                 _currToken = JsonToken.VALUE_STRING;
-                return (_currText = "");
+                // 29-Jun-2020, tatu: Need to ensure `getText()` would also work
+                _currText = "";
+                return "";
             }
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
             break;
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 _nextToken = JsonToken.FIELD_NAME;
+                // We don't really have location for START_OBJECT, use current point
+                // 29-Jun-2020, tatu: Need to ensure `getText()` would also work
                 _currText = _xmlTokens.getText();
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
             } else {
+                // otherwise just a FIELD_NAME
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 _currToken = JsonToken.FIELD_NAME;
             }
             break;
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             _currToken = JsonToken.VALUE_STRING;
-            break;
+            // This is the case we are hoping for! Return the value
+            return _currText;
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
 
                 // NOTE: this is different from nextToken() -- NO work-around
                 // for otherwise empty List/array
                 _currToken = JsonToken.VALUE_STRING;
                 return _currText;
             }
             // If not a leaf, need to transform into property...
+            // unless we are skipping expected empty text:
+            if (_currText.trim().isEmpty()) {
+                 _nextToken = null; // to indicate we are NOT returning FIELD_NAME, just VALUE_STRING
+                 _currToken = JsonToken.VALUE_STRING;
+                 return _currText;
+            }
+
             _parsingContext.setCurrentName(_cfgNameForTextElement);
             _nextToken = JsonToken.VALUE_STRING;
             _currToken = JsonToken.FIELD_NAME;
             break;
-        case XmlTokenStream.XML_END:
+        case XmlTokenStream.XML_END: // virtual token
             _currToken = null;
+            close();
         }
+        // Should not get here really... ?
         return null;
     }
\ No newline at end of file
