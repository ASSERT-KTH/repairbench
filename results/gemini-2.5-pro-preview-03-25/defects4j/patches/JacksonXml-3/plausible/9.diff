diff --git a/tmp/b4b9ab8c-4576-4521-b4af-0a5ccd186e80_buggy.java b/tmp/4aedd4f6-bf77-4777-8adb-b78255e8993a_fixed.java
index 74fe4ec..cdb0c38 100644
--- a/tmp/b4b9ab8c-4576-4521-b4af-0a5ccd186e80_buggy.java
+++ b/tmp/4aedd4f6-bf77-4777-8adb-b78255e8993a_fixed.java
@@ -1,98 +1,127 @@
     /**
      * Method overridden to support more reliable deserialization of
      * String collections.
      */
     @Override
     public String nextTextValue() throws IOException
     {
         _binaryValue = null;
+        // Modified slightly from Jackson core base class: may already have token
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
 
             // expected case; yes, got a String
             if (t == JsonToken.VALUE_STRING) {
+                // Jackson-core returns "_textBuffer.contentsAsString()";
+                // we have slightly different storage so:
                 return _currText;
             }
+            // otherwise null; fall through
             _updateState(t);
             return null;
         }
 
+        // Ok: no queued token, need to fetch one...
         int token = _xmlTokens.next();
 
         // mostly copied from 'nextToken()'
         while (token == XmlTokenStream.XML_START_ELEMENT) {
+            // If we thought it might be leaf, we were wrong
             if (_mayBeLeaf) {
+                // Ok, need to change state but NOT current token...
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
+                // and START_OBJECT is the current token... except we won't return it now
                 _currToken = JsonToken.START_OBJECT;
-                return null;
+                return null; // not a text value for sure
             }
+            // Otherwise, if we are in array, need to skip
             if (_parsingContext.inArray()) {
+                // skip
                 token = _xmlTokens.next();
-                _mayBeLeaf = true;
+                _mayBeLeaf = true; // yup, could be leaf
                 continue;
             }
+            // In object, need to find FIELD_NAME first
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
+            // note: this will also clear "_mayBeLeaf"
+            // But: may need to recurse, if name is wrapper...
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
+                // If so, loop; this will skip current START_ELEMENT, return FIELD_NAME
                 _xmlTokens.repeatStartElement();
+                // and reset state
             }
             _mayBeLeaf = true;
             _currToken = JsonToken.FIELD_NAME;
-            return null;
+            return null; // Field name, not text value
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
+            // If we thought we might get leaf, we basically got <tag/>, which is empty String
             if (_mayBeLeaf) {
                 // NOTE: this is different from nextToken() -- produce "", NOT null
                 _mayBeLeaf = false;
                 _currToken = JsonToken.VALUE_STRING;
                 return (_currText = "");
             }
+            // Otherwise, just need to close open scope etc
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
+            // And what is the text value? null
             break;
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
+                // an attribute means we have virtual FIELD_NAME, START_OBJECT first...
                 _mayBeLeaf = false;
                 _nextToken = JsonToken.FIELD_NAME;
-                _currText = _xmlTokens.getText();
+                _currText = _xmlTokens.getText(); // should be same as getLocalName, but just in case
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
-                _currToken = JsonToken.START_OBJECT;
+                _currToken = JsonToken.START_OBJECT; // won't be returned tho
             } else {
+                // regular attribute name, matches FIELD_NAME
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 _currToken = JsonToken.FIELD_NAME;
             }
+            // either way, we point to FIELD_NAME, return null text value
             break;
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             _currToken = JsonToken.VALUE_STRING;
-            break;
+            // Gotcha! This is the textual value, return
+            return _currText; // FIX: Return the text value found
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
 
                 // NOTE: this is different from nextToken() -- NO work-around
                 // for otherwise empty List/array
                 _currToken = JsonToken.VALUE_STRING;
+                // and this is the value, return
                 return _currText;
             }
             // If not a leaf, need to transform into property...
             _parsingContext.setCurrentName(_cfgNameForTextElement);
+            // And the value becomes the NEXT token...
             _nextToken = JsonToken.VALUE_STRING;
-            _currToken = JsonToken.FIELD_NAME;
+            _currToken = JsonToken.FIELD_NAME; // current token is field name
+            // which means we return null for text value
             break;
-        case XmlTokenStream.XML_END:
-            _currToken = null;
+        case XmlTokenStream.XML_END: // Added [dataformat-xml#17]
+             // Actually, should be fine to just return null here
+             // _currToken = null;
+             _currToken = null; // just to be safe
+             _parsingContext = _parsingContext.getParent(); // and [dataformat-xml#19]
         }
+        // If we fall here, no VALUE_STRING found (or reached EOF), return null
         return null;
     }
\ No newline at end of file
