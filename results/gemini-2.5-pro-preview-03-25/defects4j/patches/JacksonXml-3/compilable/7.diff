diff --git a/tmp/30d95f5e-fd11-4b10-9d55-f8e372c4b4b1_buggy.java b/tmp/55a956b8-7d8b-4b0a-b058-8a78f7bc26a2_fixed.java
index 74fe4ec..bd20414 100644
--- a/tmp/30d95f5e-fd11-4b10-9d55-f8e372c4b4b1_buggy.java
+++ b/tmp/55a956b8-7d8b-4b0a-b058-8a78f7bc26a2_fixed.java
@@ -1,98 +1,123 @@
     /**
      * Method overridden to support more reliable deserialization of
      * String collections.
      */
     @Override
     public String nextTextValue() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
 
             // expected case; yes, got a String
             if (t == JsonToken.VALUE_STRING) {
+                // _currText should be properly set, by `nextToken()` that returned the token
                 return _currText;
             }
             _updateState(t);
             return null;
         }
 
         int token = _xmlTokens.next();
 
         // mostly copied from 'nextToken()'
         while (token == XmlTokenStream.XML_START_ELEMENT) {
+            // If we thought it might be leaf, it wasn't, must be OBJECT...
             if (_mayBeLeaf) {
+                // Must change state, don't return yet
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
-                return null;
+                // We need to advance to the next element/text/whatever, so that
+                // caller gets FIELD_NAME, then VALUE_STRING (or whatever)
+                 return null; // Indicate change of state
             }
             if (_parsingContext.inArray()) {
+                // Ok: just need to skip STE
                 token = _xmlTokens.next();
-                _mayBeLeaf = true;
+                _mayBeLeaf = true; // Don't yet know if it's leaf or wrapper
                 continue;
             }
+            // Otherwise, field name
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
+            
+            // Ok, need to check if this needs to be wrapped in an array: if so,
+            // need to repeat the start element
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
                 _xmlTokens.repeatStartElement();
             }
-            _mayBeLeaf = true;
-            _currToken = JsonToken.FIELD_NAME;
-            return null;
+            _mayBeLeaf = true; // Don't yet know if it's leaf or wrapper
+            _currToken = JsonToken.FIELD_NAME; // And return indication of FIELD_NAME
+            // Field name will always be set as `_currText`, so it'll be available
+            return null; // indicate change of state
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
+            // Simple empty element?
             if (_mayBeLeaf) {
                 // NOTE: this is different from nextToken() -- produce "", NOT null
                 _mayBeLeaf = false;
                 _currToken = JsonToken.VALUE_STRING;
                 return (_currText = "");
             }
+            // Otherwise, closing element
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
             break;
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
-                _nextToken = JsonToken.FIELD_NAME;
-                _currText = _xmlTokens.getText();
+                _nextToken = JsonToken.FIELD_NAME; // to match attribute name
+                _currText = _xmlTokens.getText(); // name is text
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
-                _currToken = JsonToken.START_OBJECT;
-            } else {
+                 _currToken = JsonToken.START_OBJECT; // And return START_OBJECT
+            } else { // just attribute name
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 _currToken = JsonToken.FIELD_NAME;
             }
             break;
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             _currToken = JsonToken.VALUE_STRING;
-            break;
+            // Added return for [dataformat-xml#204]
+            return _currText;
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
 
                 // NOTE: this is different from nextToken() -- NO work-around
                 // for otherwise empty List/array
                 _currToken = JsonToken.VALUE_STRING;
                 return _currText;
             }
             // If not a leaf, need to transform into property...
             _parsingContext.setCurrentName(_cfgNameForTextElement);
-            _nextToken = JsonToken.VALUE_STRING;
-            _currToken = JsonToken.FIELD_NAME;
+            _nextToken = JsonToken.VALUE_STRING; // which is coming next
+            _currToken = JsonToken.FIELD_NAME; // that we return now
             break;
-        case XmlTokenStream.XML_END:
-            _currToken = null;
+        // Any other token? Error really...
+        /*
+        case XmlTokenStream.XML_COMMENT:
+        case XmlTokenStream.XML_PROCESSING_INSTRUCTION:
+            // TODO: Filter out? Or expose?
+            // For now, let's just skip comments and PIs... (and NOT expose)
+             continue;
+             */
+        case XmlTokenStream.XML_END: // document end
+            _currToken = null; // means end-of-input
+            _handleEOF();
         }
+        // Should not get here usually
+        _updateState(_currToken);
         return null;
     }
\ No newline at end of file
