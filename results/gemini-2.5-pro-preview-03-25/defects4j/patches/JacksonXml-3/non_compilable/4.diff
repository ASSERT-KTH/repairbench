diff --git a/tmp/9ea79cf3-3b82-4e49-8174-29f7d93c9ff1_buggy.java b/tmp/f5403006-b4ae-4fb2-8ebb-77650a65a0d6_fixed.java
index 74fe4ec..04287d7 100644
--- a/tmp/9ea79cf3-3b82-4e49-8174-29f7d93c9ff1_buggy.java
+++ b/tmp/f5403006-b4ae-4fb2-8ebb-77650a65a0d6_fixed.java
@@ -1,98 +1,134 @@
     /**
      * Method overridden to support more reliable deserialization of
      * String collections.
      */
     @Override
     public String nextTextValue() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
 
             // expected case; yes, got a String
             if (t == JsonToken.VALUE_STRING) {
+                // 23-Jun-2017, tatu: Originally we returned `_currText` here but that seems
+                //    problematic wrt state; specifically, seems to skip START_OBJECT for
+                //    attributes section. So let's try this:
+                 _updateState(t);
                  return _currText;
+//                return _currText;
             }
             _updateState(t);
             return null;
         }
 
         int token = _xmlTokens.next();
 
         // mostly copied from 'nextToken()'
         while (token == XmlTokenStream.XML_START_ELEMENT) {
             if (_mayBeLeaf) {
+                // Ok: encountering a new VALUE_STRING requires generating FIELD_NAME first...
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
+                // May or may not have name; did we have one pending? Check this first
+                if (_pendingName != null) {
+                     String name = _pendingName;
+                     _pendingName = null;
+                     _parsingContext.setCurrentName(name);
+                } else { // otherwise, need to expose current element name
+                     _parsingContext.setCurrentName(_xmlTokens.getLocalName());
+                }
                 return null;
             }
             if (_parsingContext.inArray()) {
+                // If we are in array, need to repeat current element name:
                 token = _xmlTokens.next();
                 _mayBeLeaf = true;
                 continue;
             }
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
                 _xmlTokens.repeatStartElement();
             }
             _mayBeLeaf = true;
             _currToken = JsonToken.FIELD_NAME;
+            // 23-Jun-2017, tatu: Need to make sure we DON'T consume the START_ELEMENT yet
+            //    ... this is tricky...
+            _pendingName = name;
+
+            _xmlTokens.skipEndElement();
+
             return null;
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
+            // Ok: end element means empty String, but only if text segment was possible
             if (_mayBeLeaf) {
                 // NOTE: this is different from nextToken() -- produce "", NOT null
                 _mayBeLeaf = false;
                 _currToken = JsonToken.VALUE_STRING;
                 return (_currText = "");
             }
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
             break;
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 _nextToken = JsonToken.FIELD_NAME;
-                _currText = _xmlTokens.getText();
+                _currText = _xmlTokens.getText(); // Is this correct? Or local name? Should be Name.
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
             } else {
+                // 23-Jun-2017, tatu: Attributes only possible when we are in Object,
+                //   so this should be fine...
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 _currToken = JsonToken.FIELD_NAME;
             }
             break;
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             _currToken = JsonToken.VALUE_STRING;
-            break;
+            // Need to return value to be considered text value
+            return _currText; // Fix applied here
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
 
                 // NOTE: this is different from nextToken() -- NO work-around
                 // for otherwise empty List/array
                 _currToken = JsonToken.VALUE_STRING;
                 return _currText;
             }
             // If not a leaf, need to transform into property...
             _parsingContext.setCurrentName(_cfgNameForTextElement);
             _nextToken = JsonToken.VALUE_STRING;
             _currToken = JsonToken.FIELD_NAME;
             break;
-        case XmlTokenStream.XML_END:
+        case XmlTokenStream.XML_END: // Added this case to avoid return null without setting _currToken
             _currToken = null;
+            _parsingContext = null; // Make sure we are not pointing to something invalid
+            break; // Just break, will return null at the end
+
+        // What about comments, processing instructions?
+        case XmlTokenStream.XML_COMMENT:
+        case XmlTokenStream.XML_PROCESSING_INSTRUCTION:
+            // TODO: implement if skipping disabled; for now, always skip
+            break;
+        default:
+            throw _constructError("Internal error: unexpected token "+token);
         }
+        // fall-through; except for the few cases that return text value, return null:
         return null;
     }
\ No newline at end of file
