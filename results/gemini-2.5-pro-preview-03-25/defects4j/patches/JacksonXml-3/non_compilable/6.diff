diff --git a/tmp/8c71ed6a-ba50-4c65-a0d0-484944b4cb13_buggy.java b/tmp/38adc832-24dc-48d8-a216-08ea76c112ed_fixed.java
index 74fe4ec..3aa4ac3 100644
--- a/tmp/8c71ed6a-ba50-4c65-a0d0-484944b4cb13_buggy.java
+++ b/tmp/38adc832-24dc-48d8-a216-08ea76c112ed_fixed.java
@@ -1,98 +1,129 @@
     /**
      * Method overridden to support more reliable deserialization of
      * String collections.
      */
     @Override
     public String nextTextValue() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
 
             // expected case; yes, got a String
             if (t == JsonToken.VALUE_STRING) {
+                // Since _currText was null'd in nextToken(), need to get text:
+                // (note: this differs from nextIntValue() etc where value is fine)
+                if (_currText == null) { // sanity check
+                    throw new IllegalStateException("nextTextValue() called when current token is "+_currToken+"; but text is null");
+                }
                 return _currText;
             }
-            _updateState(t);
+            // Nope; non-text value
+            _updateState(t); // to ensure state updated (caller may miss call to nextToken())
             return null;
         }
 
+        // otherwise need to read the next token
         int token = _xmlTokens.next();
 
         // mostly copied from 'nextToken()'
         while (token == XmlTokenStream.XML_START_ELEMENT) {
             if (_mayBeLeaf) {
+                // Error: FIELD_NAME must be followed by a value; but what would
+                // this mean here? Punt, must be object/array
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
+                // note: no text value to return
                 return null;
             }
             if (_parsingContext.inArray()) {
+                // another element; unless we hit END_ELEMENT should be START_OBJECT?
+                // or, maybe we are in non-wrapped List, getting non-first element?
                 token = _xmlTokens.next();
                 _mayBeLeaf = true;
                 continue;
             }
+            // Nope, field name
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
+                 // If name is in names to wrap list, we need to repeat the START_ELEMENT
+                 // and handle things as if it was an array to ensure we get wrapping
+                 // (otherwise handling differs between single-element-arrays and others)
                 _xmlTokens.repeatStartElement();
+                // fall through to array case handled below
             }
             _mayBeLeaf = true;
             _currToken = JsonToken.FIELD_NAME;
+            // can not return String value, need value but have FIELD_NAME
             return null;
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
+            // If we thought we might get leaf, we are basically done with
+            // element; empty text element.
             if (_mayBeLeaf) {
                 // NOTE: this is different from nextToken() -- produce "", NOT null
                 _mayBeLeaf = false;
                 _currToken = JsonToken.VALUE_STRING;
                 return (_currText = "");
             }
+            // Otherwise, closing element means closing scope; either array or object
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
             break;
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
-            // If there was a chance of leaf node, no more...
+            // If there was a chance of leaf node, no more... attributes means object
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
+                // and we need to push back FIELD_NAME, return START_OBJECT
                 _nextToken = JsonToken.FIELD_NAME;
                 _currText = _xmlTokens.getText();
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
             } else {
+                // otherwise regular field name:
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 _currToken = JsonToken.FIELD_NAME;
             }
             break;
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             _currToken = JsonToken.VALUE_STRING;
-            break;
+            // Voil√†: got the text value!
+            return _currText;
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
 
                 // NOTE: this is different from nextToken() -- NO work-around
                 // for otherwise empty List/array
+
+                // Got text!
                 _currToken = JsonToken.VALUE_STRING;
                 return _currText;
             }
-            // If not a leaf, need to transform into property...
+            // If not a leaf, need to transform into property... standard handling?
+            // 10-Mar-2011, tatu: Looks like we must assume Structure value,
+            //   i.e. FIELD_NAME + VALUE_STRING (created from text)
             _parsingContext.setCurrentName(_cfgNameForTextElement);
             _nextToken = JsonToken.VALUE_STRING;
             _currToken = JsonToken.FIELD_NAME;
+            // fall through; no textual value to return (got FIELD_NAME)
             break;
-        case XmlTokenStream.XML_END:
+
+        case XmlTokenStream.XML_END: // end-of-input? Shouldn't really happen but...
             _currToken = null;
         }
+        // We get here if we did not get text value; have other artifacts
         return null;
     }
\ No newline at end of file
