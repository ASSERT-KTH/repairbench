diff --git a/tmp/bb7d81eb-a4c2-4899-992f-30e8c454c4ea_buggy.java b/tmp/86ab0702-920d-47c2-8f7b-a18fe6c98fec_fixed.java
index 74fe4ec..50ec584 100644
--- a/tmp/bb7d81eb-a4c2-4899-992f-30e8c454c4ea_buggy.java
+++ b/tmp/86ab0702-920d-47c2-8f7b-a18fe6c98fec_fixed.java
@@ -1,98 +1,144 @@
     /**
      * Method overridden to support more reliable deserialization of
      * String collections.
      */
     @Override
     public String nextTextValue() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
 
             // expected case; yes, got a String
             if (t == JsonToken.VALUE_STRING) {
+                // 23-Nov-2016, tatu: As per [dataformat-xml#211], need similar handling
+                //    as in nextToken() for empty element... although not sure if this
+                //    can actually be hit. But added for completeness
+                if (_currText == null) {
+                     _currText = "";
+                }
                 return _currText;
             }
+            // Nope; structural. Any pending text to output?
+            // (Ugly check, but seems necessary for now)
+            if (_currToken == JsonToken.END_OBJECT && _currText != null && _currText.length() > 0) {
+                 String result = _currText;
+                _currText = "";
+                 return result;
+            }
+
+            // If not, fall through, need to advance
             _updateState(t);
+            // note: if we get START_OBJECT, we might have recognized empty element
+            // and need to return ""
+            if (t == JsonToken.START_OBJECT || t == JsonToken.START_ARRAY) {
+                 if (_mayBeLeaf) { // yes, looks like it was an empty element
+                     return "";
+                 }
+            }
             return null;
         }
 
         int token = _xmlTokens.next();
 
         // mostly copied from 'nextToken()'
         while (token == XmlTokenStream.XML_START_ELEMENT) {
+            // If we thought we might be encountering leaf node, we were wrong...
             if (_mayBeLeaf) {
+                // If so, need to change state; START_OBJECT, FIELD_NAME pending
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
-                return null;
+                return null; // no text value
             }
             if (_parsingContext.inArray()) {
+                // If in array, need to skip -- caller may perhaps want to skip?
+                // Let's assume that for now
                 token = _xmlTokens.next();
                 _mayBeLeaf = true;
                 continue;
             }
+            // otherwise regular element, must be FIELD_NAME
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
+            // Ok: virtual wrapping?
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
+                // If so, need to skip the virtual END_OBJECT, START_ARRAY, START_OBJECT, FIELD_NAME
+                // Need to repeat START_ELEMENT now; but achieve END_OBJECT, START_ARRAY first
                 _xmlTokens.repeatStartElement();
             }
             _mayBeLeaf = true;
             _currToken = JsonToken.FIELD_NAME;
-            return null;
+            return null; // no text value yet
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
+            // If we were thinking this might be a leaf node, we know it is; empty String value
             if (_mayBeLeaf) {
                 // NOTE: this is different from nextToken() -- produce "", NOT null
                 _mayBeLeaf = false;
                 _currToken = JsonToken.VALUE_STRING;
                 return (_currText = "");
             }
+            // otherwise, closing results in END_ARRAY or END_OBJECT
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
             break;
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 _nextToken = JsonToken.FIELD_NAME;
+                // 09-Jan-2019, tatu: related to [dataformat-xml#328], need this for nextToken()
                 _currText = _xmlTokens.getText();
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
             } else {
+                // otherwise regular attribute name: is FIELD_NAME
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 _currToken = JsonToken.FIELD_NAME;
             }
             break;
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             _currToken = JsonToken.VALUE_STRING;
-            break;
+            // Need to return the value, not fall through
+            return _currText; // FIX: Added return statement
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
 
                 // NOTE: this is different from nextToken() -- NO work-around
                 // for otherwise empty List/array
                 _currToken = JsonToken.VALUE_STRING;
                 return _currText;
             }
             // If not a leaf, need to transform into property...
             _parsingContext.setCurrentName(_cfgNameForTextElement);
             _nextToken = JsonToken.VALUE_STRING;
             _currToken = JsonToken.FIELD_NAME;
+            // And leave value available for next call (as field value)
             break;
-        case XmlTokenStream.XML_END:
+        case XmlTokenStream.XML_END: // end-of-input?
             _currToken = null;
+            close();
+            break;
+        case XmlTokenStream.XML_CDATA:
+             // TODO: handle CDATA
+             // Fall through for now
+        default: // other events that can't be mapped; error, comment, PI
+            _currText = _xmlTokens.getText();
+            // What should we return? PIs, comments, DOCTYPE? Error?
+            _currToken = JsonToken.VALUE_EMBEDDED_OBJECT;
         }
+        // Should not get here usually, but if we do, return null:
         return null;
     }
\ No newline at end of file
