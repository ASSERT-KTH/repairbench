diff --git a/tmp/c9f2c17a-2f37-44c9-a276-fefdd82e9e0f_buggy.java b/tmp/beba1584-3546-4c13-98ef-1671d287942e_fixed.java
index 9976e43..ea18d6b 100644
--- a/tmp/c9f2c17a-2f37-44c9-a276-fefdd82e9e0f_buggy.java
+++ b/tmp/beba1584-3546-4c13-98ef-1671d287942e_fixed.java
@@ -1,76 +1,93 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
-    // this.returnType <: that.returnType (covariant)
+    // Covariant return types.
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+    // Contravariant parameter types.
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+
+      // Unknown types can be subtypes of anything, but not vice versa.
+      // NOTE(nicksantos): The real fix is to make sure that the type system
+      // is complete, so that we don't have so many unknown types.
+
+      // We have a special check for 'undefined' used as a parameter type
+      // annotation. It is considered a subtype of any type, which is the
+      // common use case for function signatures with optional parameters.
+      boolean isParameterSubtype = (thisParamType == null) ||
+          (thatParamType != null && thatParamType.isSubtype(thisParamType)) ||
+           registry.isUndefinedType(thisParamType);
+
+      if (!isParameterSubtype) {
         return false;
       }
-      }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
+      boolean thisIsOptional = thisParam.isOptionalArg();
+      boolean thatIsOptional = thatParam.isOptionalArg();
+
+      // If this requires a param and that does not provide it, then this is
+      // not a subtype of that. If that requires a param and this does not
+      // provide it, make a special check:
+      // If this has fewer parameters than that, it is OK iff this function's
+      // parameters are(...?) or (...NoType), meaning this function does not care
+      // about the parameters that it does not declare.
+      // NOTE(nicksantos): This check is partly duplicated in FunctionType.
+      // We should try to consolidate this logic.
+      if (!thisIsVarArgs && !thisIsOptional && thatIsOptional && !thatIsVarArgs) {
+        // Use case: function f(a) {}; function g(a, opt_b) {}; f<:g?=false
+        // Use case: function f(a) {} function g(opt_a) {}; f<:g?=true
+        // If that has an optional parameter, this must also have one (or be var args).
+        return false;
+      }
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
 
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
       // both var_args indicates the end
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // If "this" has required parameters left over that "that" doesn't have,
+    // then "this" is not a subtype of "that".
+    // Note: If "that" has parameters left over, that's OK.
+    // (function(number) is a subtype of function(number, number=))
+    while (thisParam != null) {
+        // If this parameter is required, it's a mismatch
+        if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
+            return false;
+        }
+        // If it's optional or varargs, it's okay to have extra ones.
+        if (thisParam.isVarArgs()) { // VarArgs consumes the rest
+             break;
+        }
+        thisParam = thisParam.getNext();
+    }
 
+    // If we haven't returned false yet, it's a subtype relationship.
     return true;
   }
\ No newline at end of file
