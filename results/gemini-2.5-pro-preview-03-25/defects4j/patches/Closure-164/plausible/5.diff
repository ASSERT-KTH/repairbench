diff --git a/tmp/27ab29f5-f92d-467a-845b-864898de5615_buggy.java b/tmp/9c37906e-7c26-4783-b956-913f7640d3ce_fixed.java
index 9976e43..9fe92f2 100644
--- a/tmp/27ab29f5-f92d-467a-845b-864898de5615_buggy.java
+++ b/tmp/9c37906e-7c26-4783-b956-913f7640d3ce_fixed.java
@@ -1,76 +1,86 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
-    // this.returnType <: that.returnType (covariant)
+    // Note: We're checking if 'this' is a subtype of 'that'.
+
+    // 1. Covariant Return Types: this.returnType <: that.returnType
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+    // 2. Contravariant Parameter Types: that.paramType[i] <: this.paramType[i]
+    // 3. Arity check (lenient): 'this' cannot have more *required* parameters
+    //    than 'that'. Optional/varargs parameters in 'this' beyond 'that's
+    //    arity are allowed, reflecting the JS behavior of ignoring extra args.
+
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+
+      // Check parameter type compatibility (contravariance)
+      // Treat null types (implicit 'any') as compatible.
+      if (thisParamType != null && thatParamType != null) {
+        if (!thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+      // Advance pointers, stopping at varargs
+      // (If one is varargs and the other is not, the non-varargs one stops
+      // advancing, while the varargs one conceptually matches remaining args)
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
-      // both var_args indicates the end
+      // Stop comparing if both reached varargs simultaneously
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
+        break;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // After comparing common parameters, check arity.
 
+    // If 'that' ran out of parameters (or hit varargs while 'this' didn't),
+    // 'this' must not have any remaining *required* parameters.
+    if (thatParam == null) {
+      while (thisParam != null) {
+        // If 'this' has a required parameter here, it demands more arguments
+        // than 'that' provides. This violates subtyping.
+        if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
+          return false;
+        }
+        // If 'this' ends in varargs, it's compatible with 'that' ending.
+        if (thisParam.isVarArgs()) {
+             thisParam = null; // Treat varargs as consuming the rest
+             break;
+        }
+        thisParam = thisParam.getNext();
+      }
+    }
+    // If 'this' ran out first (thisParam == null), it's compatible.
+    // 'that' can have more parameters (optional or required); 'this' just
+    // won't provide values for them, which fits the lenient subtyping goal
+    // (a function with fewer parameters can be used where one with more
+    // parameters is expected, ignoring the extra ones).
+
+    // All checks passed.
     return true;
   }
\ No newline at end of file
