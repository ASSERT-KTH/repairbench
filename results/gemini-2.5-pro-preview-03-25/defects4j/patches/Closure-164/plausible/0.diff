diff --git a/tmp/b521c8b9-a8c4-4cc6-8418-a846fb7399df_buggy.java b/tmp/ea8e46a3-3853-416c-b363-cb699f10263f_fixed.java
index 9976e43..1ea4343 100644
--- a/tmp/b521c8b9-a8c4-4cc6-8418-a846fb7399df_buggy.java
+++ b/tmp/ea8e46a3-3853-416c-b363-cb699f10263f_fixed.java
@@ -1,76 +1,106 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
     //
     // If this.paramType[i] is required,
     // then that.paramType[i] is required.
     //
     // In theory, the "required-ness" should work in the other direction as
     // well. In other words, if we have
     //
     // function f(number, number) {}
     // function g(number) {}
     //
     // Then f *should* not be a subtype of g, and g *should* not be
     // a subtype of f. But in practice, we do not implement it this way.
     // We want to support the use case where you can pass g where f is
     // expected, and pretend that g ignores the second argument.
     // That way, you can have a single "no-op" function, and you don't have
     // to create a new no-op function for every possible type signature.
     //
     // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
+
+      // Check contravariance
       if (thisParamType != null) {
         if (thatParamType == null ||
             !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
+      // Note: The case where thisParamType is null but thatParamType is not
+      // is implicitly allowed by the original code.
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
       // "that" can't be a supertype, because it's missing a required argument.
         // NOTE(nicksantos): In our type system, we use {function(...?)} and
         // {function(...NoType)} to to indicate that arity should not be
         // checked. Strictly speaking, this is not a correct formulation,
         // because now a sub-function can required arguments that are var_args
         // in the super-function. So we special-case this.
 
+      // Advance parameters based on original logic
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
       // both var_args indicates the end
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // Handle arity mismatches after iterating through common parameters.
 
+    // If 'this' has more parameters than 'that', it's a subtype iff the
+    // remaining parameters in 'this' are optional or varargs.
+    // This enforces the "f !< g" rule from the comments.
+    if (thisParam != null && thatParam == null) {
+        Node currentThisParam = thisParam;
+        while (currentThisParam != null) {
+            // If a remaining parameter in 'this' is required (not optional, not varargs),
+            // then 'this' is not a subtype of 'that'.
+            if (!currentThisParam.isOptionalArg() && !currentThisParam.isVarArgs()) {
+                return false;
+            }
+            // If we hit varargs, all subsequent parameters are covered by it,
+            // and varargs are not considered strictly required for this check.
+            if (currentThisParam.isVarArgs()) {
+                break;
+            }
+            currentThisParam = currentThisParam.getNext();
+        }
+    }
+
+    // If 'that' has more parameters than 'this' (thatParam != null && thisParam == null),
+    // the loop already checked the common parameters. This case is allowed
+    // ("g < f" rule from comments), so we don't need an extra check here.
+
+    // If we passed all checks, 'this' is a subtype of 'that'.
     return true;
   }
\ No newline at end of file
