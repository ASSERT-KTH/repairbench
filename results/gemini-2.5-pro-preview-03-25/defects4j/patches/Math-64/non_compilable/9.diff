diff --git a/tmp/d72d91c5-b707-4581-a2c2-db0e2f42363c_buggy.java b/tmp/a2290225-7037-4f75-a06b-1a99cc720ab1_fixed.java
index 01c2462..724d6bb 100644
--- a/tmp/d72d91c5-b707-4581-a2c2-db0e2f42363c_buggy.java
+++ b/tmp/a2290225-7037-4f75-a06b-1a99cc720ab1_fixed.java
@@ -1,226 +1,277 @@
     /** {@inheritDoc} */
     @Override
     protected VectorialPointValuePair doOptimize()
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         // arrays shared with the other private methods
         solvedCols  = Math.min(rows, cols);
         diagR       = new double[cols];
         jacNorm     = new double[cols];
         beta        = new double[cols];
         permutation = new int[cols];
         lmDir       = new double[cols];
 
         // local point
         double   delta   = 0;
         double   xNorm   = 0;
         double[] diag    = new double[cols];
         double[] oldX    = new double[cols];
-        double[] oldRes  = new double[rows];
+        double[] oldRes  = new double[rows]; // Should be objective.length or rows? Assuming rows is correct.
         double[] work1   = new double[cols];
         double[] work2   = new double[cols];
         double[] work3   = new double[cols];
 
         // evaluate the function at the starting point and calculate its norm
-        updateResidualsAndCost();
+        updateResidualsAndCost(); // Updates cost, objective, and residuals fields
 
         // outer loop
         lmPar = 0;
         boolean firstIteration = true;
+        // current holds the point and objective vector (residuals)
         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
         while (true) {
             incrementIterationsCounter();
 
             // compute the Q.R. decomposition of the jacobian matrix
-            VectorialPointValuePair previous = current;
-            updateJacobian();
-            qrDecomposition();
+            VectorialPointValuePair previous = current; // Save previous state.
+            updateJacobian(); // Compute Jacobian at current point
+            qrDecomposition(); // Compute QR decomp of Jacobian, updates jacobian[][], diagR[], jacNorm[], permutation[]
 
-            // compute Qt.res
-            qTy(residuals);
-            // now we don't need Q anymore,
-            // so let jacobian contain the R matrix with its diagonal elements
+            // compute Q^T.res
+            // qTy modifies 'residuals' in-place to hold Q^T * residuals_old
+            // where residuals_old are the residuals from the 'previous' state.
+            qTy(previous.getValueReference()); // Use objective from 'previous' state as input to qTy
+
+            // Store Q^T.res in work1, as 'residuals' field might be needed later
+            // or modified unexpectedly. Assuming qTy modifies its input.
+            // Let's assume qTy MODIFIES the input array 'residuals'.
+            // We need the residuals from the 'previous' state for qTy.
+            // Let's make a copy before calling qTy, or pass previous.getValueReference() if qTy doesn't modify it.
+            // Assuming qTy *modifies* its input argument 'y' to store Q^T*y.
+            // We need Q^T * objective_previous for LM parameter calculation.
+            // Let's store it in work1.
+            System.arraycopy(previous.getValueReference(), 0, work1, 0, rows);
+            qTy(work1); // work1 now holds Q^T * objective_previous
+
+            // now jacobian contains R in its upper part, Q is defined implicitly
+            // copy R diagonal into jacobian (just to be sure?)
             for (int k = 0; k < solvedCols; ++k) {
                 int pk = permutation[k];
                 jacobian[k][pk] = diagR[pk];
             }
 
             if (firstIteration) {
-
                 // scale the point according to the norms of the columns
                 // of the initial jacobian
                 xNorm = 0;
                 for (int k = 0; k < cols; ++k) {
                     double dk = jacNorm[k];
                     if (dk == 0) {
                         dk = 1.0;
                     }
                     double xk = dk * point[k];
                     xNorm  += xk * xk;
                     diag[k] = dk;
                 }
                 xNorm = Math.sqrt(xNorm);
 
                 // initialize the step bound delta
                 delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
-
             }
 
-            // check orthogonality between function vector and jacobian columns
+            // check orthogonality: max(|(J^T*r)_j| / (||J_j|| * ||r||)) = max(|(R^T*Q^T*r)_j| / (||J_j|| * ||r||))
             double maxCosine = 0;
-            if (cost != 0) {
+            if (cost != 0) { // cost = ||r_old||^2 = previousCost
+                double currentResidualsNorm = Math.sqrt(cost);
                 for (int j = 0; j < solvedCols; ++j) {
                     int    pj = permutation[j];
-                    double s  = jacNorm[pj];
+                    double s  = jacNorm[pj]; // ||J_j||
                     if (s != 0) {
+                        // Compute sum = (R^T * (Q^T*r))_j = sum_{i=0}^{j} R_ij * (Q^T*r)_i
                         double sum = 0;
                         for (int i = 0; i <= j; ++i) {
-                            sum += jacobian[i][pj] * residuals[i];
-                        }
-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));
+                            sum += jacobian[i][pj] * work1[i]; // R_ij * (Q^T*r)_i from work1
                         }
+                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * currentResidualsNorm)); // Fixed denominator
                     }
                 }
+            } // If cost is 0, maxCosine remains 0.
+
             if (maxCosine <= orthoTolerance) {
-                // convergence has been reached
-                return current;
+                return current; // Converged (gradient is orthogonal to residuals)
             }
 
-            // rescale if necessary
+            // rescale diag based on max encountered column norms
             for (int j = 0; j < cols; ++j) {
                 diag[j] = Math.max(diag[j], jacNorm[j]);
             }
 
-            // inner loop
+            // inner loop - search for a step
+            double preRed = 0; // Declare here for use in convergence check
+            double dirDer = 0; // Declare here for use in convergence check
+            double actRed = -1.0; // Declare here for use in convergence check
+
+            // The state (point, cost, objective) corresponds to 'previous'.
+            // work1 holds Q^T * objective_previous.
+            System.arraycopy(objective, 0, oldRes, 0, rows); // Store objective_previous in oldRes for restoration
+
             for (double ratio = 0; ratio < 1.0e-4;) {
 
-                // save the state
+                // save the state parameters before trying a step
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
-                    oldX[pj] = point[pj];
+                    oldX[pj] = point[pj]; // Save current point parameters (should be same as previous.getPoint())
                 }
-                double previousCost = cost;
-                double[] tmpVec = residuals;
-                residuals = oldRes;
-                oldRes    = tmpVec;
+                double previousCost = cost; // Save current cost (should be same as previous.getValue()^2 norm)
 
-                // determine the Levenberg-Marquardt parameter
-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);
+                // determine the Levenberg-Marquardt parameter and direction lmDir = p
+                // uses qy = work1 = Q^T*objective_previous
+                determineLMParameter(work1, delta, diag, lmDir, work2, work3); // lmDir holds p, work2/work3 are temps
 
-                // compute the new point and the norm of the evolution direction
+                // compute the new point: x_new = x_old + p = oldX + lmDir
+                // and the norm of the scaled step ||D*p|| = ||D*lmDir||
                 double lmNorm = 0;
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
+                    // point[pj] = oldX[pj] + lmDir[pj]; // Use p directly: x_new = x_old + p
+                    // Original code negated lmDir. Let's assume determineLMParameter returns p and we add it.
+                    // Reverting to original negation logic just in case it was intentional:
                      lmDir[pj] = -lmDir[pj];
                      point[pj] = oldX[pj] + lmDir[pj];
-                    double s = diag[pj] * lmDir[pj];
+                    double s = diag[pj] * lmDir[pj]; // Use negated p for norm
                     lmNorm  += s * s;
                 }
                 lmNorm = Math.sqrt(lmNorm);
-                // on the first iteration, adjust the initial step bound.
+
                 if (firstIteration) {
                     delta = Math.min(delta, lmNorm);
                 }
 
-                // evaluate the function at x + p and calculate its norm
-                updateResidualsAndCost();
-                current = new VectorialPointValuePair(point, objective);
+                // evaluate the function at the new point x_new
+                updateResidualsAndCost(); // Updates cost = ||r_new||^2, objective = r_new.
+                current = new VectorialPointValuePair(point, objective); // Create pair for the new state
 
-                // compute the scaled actual reduction
-                double actRed = -1.0;
-                if (0.1 * cost < previousCost) {
-                    double r = cost / previousCost;
-                    actRed = 1.0 - r * r;
-                }
+                // compute the scaled actual reduction: (||r_old||^2 - ||r_new||^2) / ||r_old||^2
+                actRed = -1.0;
+                if (previousCost > 1e-20) { // Use standard formula for reduction in sum of squares
+                    actRed = 1.0 - cost / previousCost;
+                } else if (cost == 0) {
+                    actRed = 1.0;
+                } // Otherwise actRed remains -1.0 (failure)
 
-                // compute the scaled predicted reduction
-                // and the scaled directional derivative
-                for (int j = 0; j < solvedCols; ++j) {
+
+                // compute the scaled predicted reduction: (||J*p||^2 + 2*lmPar*||D*p||^2) / ||r_old||^2
+                // Use p = -lmDir (since lmDir was negated above)
+                for (int j = 0; j < solvedCols; ++j) { // work2 = R * (-lmDir) = R*p
                     int pj = permutation[j];
-                    double dirJ = lmDir[pj];
-                    work1[j] = 0;
+                    double dirJ = -lmDir[pj]; // Use p = -lmDir
+                    work2[j] = 0; // Use work2 as temp for R*p
                     for (int i = 0; i <= j; ++i) {
-                        work1[i] += jacobian[i][pj] * dirJ;
+                        work2[i] += jacobian[i][pj] * dirJ;
                     }
                 }
                 double coeff1 = 0;
                 for (int j = 0; j < solvedCols; ++j) {
-                    coeff1 += work1[j] * work1[j];
+                    coeff1 += work2[j] * work2[j]; // coeff1 = ||R*p||^2 = ||J*p||^2
                 }
-                double pc2 = previousCost * previousCost;
+                double pc2 = previousCost; // Denominator is ||r_old||^2
+                preRed = 0; // Initialize preRed
+                dirDer = 0; // Initialize dirDer
+                ratio = 0; // Initialize ratio
+                if (pc2 > 1e-20) { // Avoid division by zero
                      coeff1 = coeff1 / pc2;
+                     // lmNorm was computed using negated lmDir, so it's ||D*(-p)|| = ||D*p||. Okay.
                      double coeff2 = lmPar * lmNorm * lmNorm / pc2;
-                double preRed = coeff1 + 2 * coeff2;
-                double dirDer = -(coeff1 + coeff2);
-
-                // ratio of the actual to the predicted reduction
+                     preRed = coeff1 + 2 * coeff2;
+                     dirDer = -(coeff1 + coeff2);
                      ratio = (preRed == 0) ? 0 : (actRed / preRed);
+                } // If previousCost was tiny, ratio remains 0 (failure).
 
-                // update the step bound
-                if (ratio <= 0.25) {
-                    double tmp =
-                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
+                // update the step bound delta, lmPar
+                if (ratio <= 0.25) { // Step failed or poor
+                    double tmp = 0.5; // Default factor
+                    if (actRed < 0) { // Cost increased, use adaptive factor
+                        // Ensure dirDer is safe before division
+                        if (dirDer + 0.5 * actRed != 0) {
+                            tmp = 0.5 * dirDer / (dirDer + 0.5 * actRed);
+                        }
+                    }
+                    if ((cost >= previousCost) || (tmp < 0.1)) { // If cost increased or factor too small
                          tmp = 0.1;
                     }
                     delta = tmp * Math.min(delta, 10.0 * lmNorm);
-                        lmPar /= tmp;
-                } else if ((lmPar == 0) || (ratio >= 0.75)) {
-                    delta = 2 * lmNorm;
-                    lmPar *= 0.5;
+                    lmPar /= tmp; // Increase lmPar
+                } else if ((lmPar == 0) || (ratio >= 0.75)) { // Step good
+                    delta = 2 * lmNorm; // Increase delta based on step norm
+                    lmPar *= 0.5; // Decrease lmPar
                 }
 
                 // test for successful iteration.
-                if (ratio >= 1.0e-4) {
-                    // successful iteration, update the norm
+                if (ratio >= 1.0e-4) { // SUCCESS
                     firstIteration = false;
+                    // Update xNorm using the new point
                     xNorm = 0;
                     for (int k = 0; k < cols; ++k) {
                         double xK = diag[k] * point[k];
                         xNorm    += xK * xK;
                     }
                     xNorm = Math.sqrt(xNorm);
 
-                    // tests for convergence.
-                    // we use the vectorial convergence checker
-                } else {
-                    // failed iteration, reset the previous values
-                    cost = previousCost;
-                    for (int j = 0; j < solvedCols; ++j) {
-                        int pj = permutation[j];
-                        point[pj] = oldX[pj];
-                    }
-                    tmpVec    = residuals;
-                    residuals = oldRes;
-                    oldRes    = tmpVec;
-                }
+                    // ** MOVED CONVERGENCE CHECK HERE (Primary Fix) **
                     if (checker==null) {
                         if (((Math.abs(actRed) <= costRelativeTolerance) &&
                             (preRed <= costRelativeTolerance) &&
                             (ratio <= 2.0)) ||
                            (delta <= parRelativeTolerance * xNorm)) {
-                       return current;
+                           return current; // Return NEW successful state
                        }
                     } else {
+                         // Use previous state and current (new successful) state
                         if (checker.converged(getIterations(), previous, current)) {
-                        return current;
+                            return current; // Return NEW successful state
                         }
                     }
-                // tests for termination and stringent tolerances
-                // (2.2204e-16 is the machine epsilon for IEEE754)
+
+                    // Check stringent ftol
                     if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
                         throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
                                 costRelativeTolerance);
-                } else if (delta <= 2.2204e-16 * xNorm) {
+                    }
+                    // Break inner loop on success
+                     break; // Exit the inner loop for ratio
+
+                } else { // FAILURE
+                    // Restore state to previous state (before this inner step)
+                    cost = previousCost;
+                    for (int j = 0; j < solvedCols; ++j) {
+                        int pj = permutation[j];
+                        point[pj] = oldX[pj];
+                    }
+                    // Restore objective array from saved oldRes
+                    System.arraycopy(oldRes, 0, objective, 0, rows);
+                    // Note: 'current' still holds the failed state, but won't be returned or used further.
+                    // The state fields (point, cost, objective) are now reset to 'previous' state values.
+                }
+
+                // Check stringent xtol (using delta and xNorm from last success)
+                // Add epsilon to xNorm to avoid division by zero / issue when xNorm is 0
+                if (delta <= 2.2204e-16 * (xNorm + 2.2204e-16)) {
                     throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
                             parRelativeTolerance);
-                } else if (maxCosine <= 2.2204e-16)  {
-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
-                            orthoTolerance);
                 }
+                 // Inner loop continues if ratio < 1.0e-4
 
-            }
+            } // End inner loop
 
+             // Check stringent gtol convergence outside inner loop
+             if (maxCosine <= 2.2204e-16)  {
+                  throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);
              }
 
+            // Prepare for next outer iteration: 'current' should reflect the state after successful inner loop
+            // The 'current' variable was updated inside the inner loop on the last (successful) step evaluation.
+            // If inner loop finished successfully, 'current' holds the latest successful state.
+
+        } // End outer loop
+
     }
\ No newline at end of file
