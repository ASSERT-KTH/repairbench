diff --git a/tmp/532d7c36-711e-49f1-b9ec-d5bcff8443ed_buggy.java b/tmp/afae6595-1950-48a7-91b7-fee3520df5a5_fixed.java
index 01c2462..dcfb73b 100644
--- a/tmp/532d7c36-711e-49f1-b9ec-d5bcff8443ed_buggy.java
+++ b/tmp/afae6595-1950-48a7-91b7-fee3520df5a5_fixed.java
@@ -1,226 +1,252 @@
     /** {@inheritDoc} */
     @Override
     protected VectorialPointValuePair doOptimize()
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         // arrays shared with the other private methods
         solvedCols  = Math.min(rows, cols);
         diagR       = new double[cols];
         jacNorm     = new double[cols];
         beta        = new double[cols];
         permutation = new int[cols];
         lmDir       = new double[cols];
 
         // local point
         double   delta   = 0;
         double   xNorm   = 0;
         double[] diag    = new double[cols];
         double[] oldX    = new double[cols];
         double[] oldRes  = new double[rows];
         double[] work1   = new double[cols];
         double[] work2   = new double[cols];
         double[] work3   = new double[cols];
 
         // evaluate the function at the starting point and calculate its norm
         updateResidualsAndCost();
 
         // outer loop
         lmPar = 0;
         boolean firstIteration = true;
         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
         while (true) {
             incrementIterationsCounter();
 
             // compute the Q.R. decomposition of the jacobian matrix
             VectorialPointValuePair previous = current;
             updateJacobian();
             qrDecomposition();
 
             // compute Qt.res
             qTy(residuals);
             // now we don't need Q anymore,
             // so let jacobian contain the R matrix with its diagonal elements
             for (int k = 0; k < solvedCols; ++k) {
                 int pk = permutation[k];
                 jacobian[k][pk] = diagR[pk];
             }
 
             if (firstIteration) {
 
                 // scale the point according to the norms of the columns
                 // of the initial jacobian
                 xNorm = 0;
                 for (int k = 0; k < cols; ++k) {
                     double dk = jacNorm[k];
                     if (dk == 0) {
                         dk = 1.0;
                     }
                     double xk = dk * point[k];
                     xNorm  += xk * xk;
                     diag[k] = dk;
                 }
                 xNorm = Math.sqrt(xNorm);
 
                 // initialize the step bound delta
                 delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
 
             }
 
             // check orthogonality between function vector and jacobian columns
             double maxCosine = 0;
             if (cost != 0) {
                 for (int j = 0; j < solvedCols; ++j) {
                     int    pj = permutation[j];
                     double s  = jacNorm[pj];
                     if (s != 0) {
                         double sum = 0;
                         for (int i = 0; i <= j; ++i) {
-                            sum += jacobian[i][pj] * residuals[i];
+                            sum += jacobian[i][pj] * residuals[i]; // Here residuals are Q^T * f
                         }
                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));
                     }
                 }
             }
             if (maxCosine <= orthoTolerance) {
                 // convergence has been reached
                 return current;
             }
 
             // rescale if necessary
             for (int j = 0; j < cols; ++j) {
                 diag[j] = Math.max(diag[j], jacNorm[j]);
             }
 
             // inner loop
             for (double ratio = 0; ratio < 1.0e-4;) {
 
                 // save the state
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
                     oldX[pj] = point[pj];
                 }
                 double previousCost = cost;
                 double[] tmpVec = residuals;
                 residuals = oldRes;
-                oldRes    = tmpVec;
+                oldRes    = tmpVec; // oldRes now contains Q^T * f(oldX)
 
                 // determine the Levenberg-Marquardt parameter
+                // It expects Q^T * f(oldX) as input (passed in oldRes)
                 determineLMParameter(oldRes, delta, diag, work1, work2, work3);
 
                 // compute the new point and the norm of the evolution direction
                 double lmNorm = 0;
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
-                    lmDir[pj] = -lmDir[pj];
+                    lmDir[pj] = -lmDir[pj]; // lmDir was -p, now is p
                     point[pj] = oldX[pj] + lmDir[pj];
-                    double s = diag[pj] * lmDir[pj];
+                    double s = diag[pj] * lmDir[pj]; // Component of D*p
                     lmNorm  += s * s;
                 }
                 lmNorm = Math.sqrt(lmNorm);
                 // on the first iteration, adjust the initial step bound.
                 if (firstIteration) {
                     delta = Math.min(delta, lmNorm);
                 }
 
                 // evaluate the function at x + p and calculate its norm
-                updateResidualsAndCost();
+                updateResidualsAndCost(); // cost is ||f(x+p)||
                 current = new VectorialPointValuePair(point, objective);
 
                 // compute the scaled actual reduction
-                double actRed = -1.0;
-                if (0.1 * cost < previousCost) {
+                double actRed;
+                if (previousCost < Double.MIN_VALUE) {
+                    // Handle previous cost being zero or very small
+                    if (cost < Double.MIN_VALUE) {
+                        // Both costs are zero. Relative reduction is undefined/irrelevant.
+                        // Set actRed = 0.0 to avoid issues. Convergence checks handle this.
+                        actRed = 0.0;
+                    } else {
+                        // Previous cost was zero, new cost is positive. Infinite increase.
+                        // Set actRed to a large negative number to force rejection.
+                        actRed = -Double.MAX_VALUE;
+                    }
+                } else {
                     double r = cost / previousCost;
-                    actRed = 1.0 - r * r;
+                    actRed = 1.0 - r * r; // Always calculate actual reduction
                 }
 
+
                 // compute the scaled predicted reduction
                 // and the scaled directional derivative
+                // Calculate work1 = R * P^T * p
+                java.util.Arrays.fill(work1, 0.0);
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
-                    double dirJ = lmDir[pj];
-                    work1[j] = 0;
+                    double dirJ = lmDir[pj]; // p_pj
+                    if (dirJ != 0) {
                        for (int i = 0; i <= j; ++i) {
-                        work1[i] += jacobian[i][pj] * dirJ;
+                            work1[i] += jacobian[i][pj] * dirJ; // R_i,pj * p_pj
                        }
                     }
-                double coeff1 = 0;
+                }
+                // work1 now contains R * P^T p
+
+                double coeff1 = 0; // || R * P^T p ||^2 = || J p ||^2
                 for (int j = 0; j < solvedCols; ++j) {
                     coeff1 += work1[j] * work1[j];
                 }
-                double pc2 = previousCost * previousCost;
-                coeff1 = coeff1 / pc2;
-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;
-                double preRed = coeff1 + 2 * coeff2;
-                double dirDer = -(coeff1 + coeff2);
+                double pc2 = previousCost * previousCost; // || f(oldX) ||^2
+                coeff1 = coeff1 / pc2; // Scaled || J p ||^2
+                double coeff2 = lmPar * lmNorm * lmNorm / pc2; // Scaled lambda * || D p ||^2
+                double preRed = coeff1 + 2 * coeff2; // Predicted reduction: (||Jp||^2 + 2*lambda*||Dp||^2) / ||f||^2
+                double dirDer = -(coeff1 + coeff2); // Directional derivative: -(||Jp||^2 + lambda*||Dp||^2) / ||f||^2
 
                 // ratio of the actual to the predicted reduction
-                ratio = (preRed == 0) ? 0 : (actRed / preRed);
+                ratio = (preRed == 0) ? ((actRed == 0) ? 1.0 : 0) : (actRed / preRed); // Handle preRed == 0 case
 
                 // update the step bound
                 if (ratio <= 0.25) {
                     double tmp =
                         (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
+                        if ((previousCost > Double.MIN_VALUE && cost >= previousCost) || (tmp < 0.1)) { // Check cost increase explicitly
                             tmp = 0.1;
                         }
                         delta = tmp * Math.min(delta, 10.0 * lmNorm);
                         lmPar /= tmp;
                 } else if ((lmPar == 0) || (ratio >= 0.75)) {
                     delta = 2 * lmNorm;
                     lmPar *= 0.5;
                 }
 
                 // test for successful iteration.
                 if (ratio >= 1.0e-4) {
                     // successful iteration, update the norm
                     firstIteration = false;
                     xNorm = 0;
                     for (int k = 0; k < cols; ++k) {
                         double xK = diag[k] * point[k];
                         xNorm    += xK * xK;
                     }
                     xNorm = Math.sqrt(xNorm);
 
                     // tests for convergence.
                     // we use the vectorial convergence checker
+                    if (checker != null) {
+                       if (checker.converged(getIterations(), previous, current)) {
+                           return current;
+                       }
+                    }
+
                 } else {
                     // failed iteration, reset the previous values
                     cost = previousCost;
                     for (int j = 0; j < solvedCols; ++j) {
                         int pj = permutation[j];
                         point[pj] = oldX[pj];
                     }
                     tmpVec    = residuals;
-                    residuals = oldRes;
-                    oldRes    = tmpVec;
+                    residuals = oldRes; // Restore Q^T*f(oldX) to residuals
+                    oldRes    = tmpVec; // Discard f(newX)
+                    // Reset current value object to previous point (needed for checker)
+                    current = previous;
                 }
+
+                // Default convergence criteria
                 if (checker == null) {
-                	if (((Math.abs(actRed) <= costRelativeTolerance) &&
-                        (preRed <= costRelativeTolerance) &&
-                        (ratio <= 2.0)) ||
-                       (delta <= parRelativeTolerance * xNorm)) {
-                       return current;
-                   }
-                } else {
-                    if (checker.converged(getIterations(), previous, current)) {
+                  if (((Math.abs(actRed) <= costRelativeTolerance && preRed <= costRelativeTolerance && ratio <= 2.0)) ||
+                      delta <= parRelativeTolerance * xNorm) {
                        return current;
                    }
                 }
+
                 // tests for termination and stringent tolerances
                 // (2.2204e-16 is the machine epsilon for IEEE754)
                 if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
                     throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
                             costRelativeTolerance);
                 } else if (delta <= 2.2204e-16 * xNorm) {
                     throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
                             parRelativeTolerance);
                 } else if (maxCosine <= 2.2204e-16)  {
                     throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
                             orthoTolerance);
                 }
-
+                // Check singularity (introduced in later versions, useful)
+                 if (getIterations() > 1 && cost == previousCost && Math.abs(actRed) <= Math.ulp(cost)) {
+                    // check if cost stalls for more than one iteration
+                    // This might indicate we are stuck, maybe return current solution?
+                    // Or throw an exception as below? Let's keep original logic for now.
+                 }
             }
-
         }
-
     }
\ No newline at end of file
