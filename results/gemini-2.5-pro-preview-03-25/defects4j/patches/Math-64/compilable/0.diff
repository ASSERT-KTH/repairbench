diff --git a/tmp/b6a2c497-6eb6-4be6-8057-e5a4f004a30b_buggy.java b/tmp/4e5d152f-4925-4415-9587-a3017edc1a37_fixed.java
index 01c2462..62cd04a 100644
--- a/tmp/b6a2c497-6eb6-4be6-8057-e5a4f004a30b_buggy.java
+++ b/tmp/4e5d152f-4925-4415-9587-a3017edc1a37_fixed.java
@@ -1,226 +1,251 @@
     /** {@inheritDoc} */
     @Override
     protected VectorialPointValuePair doOptimize()
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         // arrays shared with the other private methods
         solvedCols  = Math.min(rows, cols);
         diagR       = new double[cols];
         jacNorm     = new double[cols];
         beta        = new double[cols];
         permutation = new int[cols];
         lmDir       = new double[cols];
 
         // local point
         double   delta   = 0;
         double   xNorm   = 0;
         double[] diag    = new double[cols];
         double[] oldX    = new double[cols];
         double[] oldRes  = new double[rows];
         double[] work1   = new double[cols];
         double[] work2   = new double[cols];
         double[] work3   = new double[cols];
 
         // evaluate the function at the starting point and calculate its norm
-        updateResidualsAndCost();
+        updateResidualsAndCost(); // Sets objective, residuals, cost = 0.5*||residuals||^2
 
         // outer loop
         lmPar = 0;
         boolean firstIteration = true;
+        // current holds the current best state (point, objective function value)
         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
         while (true) {
             incrementIterationsCounter();
 
             // compute the Q.R. decomposition of the jacobian matrix
-            VectorialPointValuePair previous = current;
-            updateJacobian();
-            qrDecomposition();
+            VectorialPointValuePair previous = current; // State at the beginning of the iteration
+            updateJacobian(); // Compute jacobian at point
+            qrDecomposition(); // Decompose jacobian -> R, Q implicitly, permutation, diagR, jacNorm
 
-            // compute Qt.res
+            // compute Qt.res (Q^T * residuals)
+            // qTy modifies 'residuals' in-place to store Q^T * f(x_k).
+            // 'objective' still holds the original residual vector f(x_k).
             qTy(residuals);
+
             // now we don't need Q anymore,
             // so let jacobian contain the R matrix with its diagonal elements
             for (int k = 0; k < solvedCols; ++k) {
                 int pk = permutation[k];
                 jacobian[k][pk] = diagR[pk];
             }
 
             if (firstIteration) {
-
                 // scale the point according to the norms of the columns
                 // of the initial jacobian
                 xNorm = 0;
                 for (int k = 0; k < cols; ++k) {
                     double dk = jacNorm[k];
                     if (dk == 0) {
                         dk = 1.0;
                     }
                     double xk = dk * point[k];
                     xNorm  += xk * xk;
                     diag[k] = dk;
                 }
                 xNorm = Math.sqrt(xNorm);
-
                 // initialize the step bound delta
                 delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
-
             }
 
-            // check orthogonality between function vector and jacobian columns
+            // check orthogonality between function vector f(x_k) and jacobian columns J_k
+            // We want max_j | J_j^T * f | / (|| J_j || * || f || )
+            // J^T * f = (QR)^T * f = R^T * Q^T * f = R^T * residuals (where residuals = Q^T*f)
+            // The j-th component of J^T*f is dot(column_j(J^T), f) = dot(row_j(J), f).
+            // Alternatively, the dot product of the j-th column of J with f is (J_j)^T * f.
+            // Using R: J_j = Q*R_j. So (J_j)^T * f = (Q*R_j)^T * f = R_j^T * Q^T * f = R_j^T * residuals
             double maxCosine = 0;
-            if (cost != 0) {
+            // cost = 0.5 * ||f||^2 => ||f|| = sqrt(2*cost)
+            if (cost != 0) { // Check if ||f|| is non-zero
+                double fNorm = Math.sqrt(2 * cost);
                 for (int j = 0; j < solvedCols; ++j) {
                     int    pj = permutation[j];
-                    double s  = jacNorm[pj];
+                    double s  = jacNorm[pj]; // || J_pj ||
                     if (s != 0) {
                         double sum = 0;
+                        // R is upper triangular, stored in jacobian. R_j has non-zeros R_i,pj for i<=j.
+                        // We need dot product of R's pj-th column and residuals (Q^T*f)
                         for (int i = 0; i <= j; ++i) {
-                            sum += jacobian[i][pj] * residuals[i];
+                            sum += jacobian[i][pj] * residuals[i]; // R_{i,pj} * (Q^T*f)_i
                         }
-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));
+                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * fNorm)); // | R_pj^T * (Q^T*f) | / (|| J_pj || * || f ||)
                     }
                 }
             }
             if (maxCosine <= orthoTolerance) {
                 // convergence has been reached
                 return current;
             }
 
             // rescale if necessary
             for (int j = 0; j < cols; ++j) {
                 diag[j] = Math.max(diag[j], jacNorm[j]);
             }
 
-            // inner loop
-            for (double ratio = 0; ratio < 1.0e-4;) {
+            // inner loop to find acceptance ratio > 1e-4
+            double ratio = 0;
+            while (ratio < 1.0e-4) {
 
                 // save the state
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
                     oldX[pj] = point[pj];
                 }
-                double previousCost = cost;
-                double[] tmpVec = residuals;
-                residuals = oldRes;
-                oldRes    = tmpVec;
+                double previousCost = cost; // cost = 0.5 * ||f_k||^2
+
+                // Manage residual vectors for LM parameter determination
+                // 'residuals' currently holds Q^T*f_k. 'oldRes' is scratch space.
+                double[] qTyVec = residuals; // Reference to Q^T*f_k
+                residuals = oldRes;          // 'residuals' becomes scratch space
+                oldRes = qTyVec;             // 'oldRes' now holds Q^T*f_k for LM function
 
                 // determine the Levenberg-Marquardt parameter
-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);
+                determineLMParameter(oldRes, delta, diag, work1, work2, work3); // uses qTyVec (in oldRes)
 
-                // compute the new point and the norm of the evolution direction
+                // compute the new point (trial point) and the norm of the step
                 double lmNorm = 0;
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
-                    lmDir[pj] = -lmDir[pj];
-                    point[pj] = oldX[pj] + lmDir[pj];
+                    lmDir[pj] = -lmDir[pj]; // lmDir is the step p
+                    point[pj] = oldX[pj] + lmDir[pj]; // trial point = x_k + p
                     double s = diag[pj] * lmDir[pj];
-                    lmNorm  += s * s;
+                    lmNorm  += s * s; // || D*p ||^2
                 }
                 lmNorm = Math.sqrt(lmNorm);
                 // on the first iteration, adjust the initial step bound.
                 if (firstIteration) {
                     delta = Math.min(delta, lmNorm);
                 }
 
-                // evaluate the function at x + p and calculate its norm
+                // evaluate the function at the trial point x + p
+                // updateResidualsAndCost sets 'objective' = f(x+p), 'residuals' = f(x+p), 'cost' = 0.5*||f(x+p)||^2
                 updateResidualsAndCost();
-                current = new VectorialPointValuePair(point, objective);
+                VectorialPointValuePair trial = new VectorialPointValuePair(point, objective); // State at trial point
 
                 // compute the scaled actual reduction
-                double actRed = -1.0;
-                if (0.1 * cost < previousCost) {
-                    double r = cost / previousCost;
-                    actRed = 1.0 - r * r;
+                // actRed = (cost_k - cost_{k+p}) / cost_k = 1 - cost_{k+p} / cost_k
+                // Guard against division by zero for previousCost
+                double actRed = 0;
+                if (Math.abs(previousCost) > 1e-30) { // Check if previousCost is effectively zero
+                     actRed = 1.0 - cost / previousCost; // FIXED: Use simple ratio, not square of ratio
                 }
 
+
                 // compute the scaled predicted reduction
-                // and the scaled directional derivative
+                // preRed = (|| R*p ||^2 + 2 * lmPar * || D*p ||^2) / (previousCost * previousCost)
+                // This scaling seems unusual but we keep it for now.
+                // work1 = R * p (where p = lmDir)
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
                     double dirJ = lmDir[pj];
                     work1[j] = 0;
                     for (int i = 0; i <= j; ++i) {
                         work1[i] += jacobian[i][pj] * dirJ;
                     }
                 }
                 double coeff1 = 0;
                 for (int j = 0; j < solvedCols; ++j) {
-                    coeff1 += work1[j] * work1[j];
+                    coeff1 += work1[j] * work1[j]; // coeff1 = || R*p ||^2
                 }
                 double pc2 = previousCost * previousCost;
                 coeff1 = coeff1 / pc2;
-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;
+                double coeff2 = lmPar * lmNorm * lmNorm / pc2; // lmNorm = || D*p ||
                 double preRed = coeff1 + 2 * coeff2;
                 double dirDer = -(coeff1 + coeff2);
 
                 // ratio of the actual to the predicted reduction
                 ratio = (preRed == 0) ? 0 : (actRed / preRed);
 
-                // update the step bound
+                // update the step bound delta and lmPar based on the ratio
                 if (ratio <= 0.25) {
                     double tmp =
                         (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
+                    if ((cost / previousCost >= 10.0) || (tmp < 0.1)) { // Check if cost increased significantly or tmp is too small
                         tmp = 0.1;
                     }
                     delta = tmp * Math.min(delta, 10.0 * lmNorm);
                     lmPar /= tmp;
                 } else if ((lmPar == 0) || (ratio >= 0.75)) {
                     delta = 2 * lmNorm;
                     lmPar *= 0.5;
                 }
 
                 // test for successful iteration.
                 if (ratio >= 1.0e-4) {
-                    // successful iteration, update the norm
+                    // Successful step: Accept the trial point. Update current state.
+                    current = trial;
                     firstIteration = false;
+                    // update the norm diagnostic calculation based on accepted point
                     xNorm = 0;
                     for (int k = 0; k < cols; ++k) {
-                        double xK = diag[k] * point[k];
+                        double xK = diag[k] * point[k]; // Use the accepted point
                         xNorm    += xK * xK;
                     }
                     xNorm = Math.sqrt(xNorm);
 
-                    // tests for convergence.
-                    // we use the vectorial convergence checker
-                } else {
-                    // failed iteration, reset the previous values
-                    cost = previousCost;
-                    for (int j = 0; j < solvedCols; ++j) {
-                        int pj = permutation[j];
-                        point[pj] = oldX[pj];
-                    }
-                    tmpVec    = residuals;
-                    residuals = oldRes;
-                    oldRes    = tmpVec;
-                }
-                if (checker==null) {
+                    // tests for convergence (FIXED: Moved inside successful step block)
+                    if (checker == null) { // Use default checker
                         if (((Math.abs(actRed) <= costRelativeTolerance) &&
                              (preRed <= costRelativeTolerance) &&
                              (ratio <= 2.0)) ||
                             (delta <= parRelativeTolerance * xNorm)) {
-                       return current;
+                            return current; // Convergence met
                         }
-                } else {
+                    } else { // Use custom checker
                         if (checker.converged(getIterations(), previous, current)) {
-                        return current;
+                            return current; // Convergence met
                         }
                     }
-                // tests for termination and stringent tolerances
-                // (2.2204e-16 is the machine epsilon for IEEE754)
+
+                    // tests for termination conditions due to small tolerances (FIXED: Moved inside successful step block)
                     if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
                         throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
                                 costRelativeTolerance);
                     } else if (delta <= 2.2204e-16 * xNorm) {
                         throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
                                 parRelativeTolerance);
                     } else if (maxCosine <= 2.2204e-16) {
                         throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
                                 orthoTolerance);
                     }
+                    // If converged or terminated, we returned/threw. Otherwise, the successful step
+                    // breaks the inner loop (ratio >= 1.0e-4) and continues to the next outer iteration.
 
+                } else {
+                    // Failed iteration: Restore the state to before the trial step.
+                    cost = previousCost;
+                    for (int j = 0; j < solvedCols; ++j) {
+                        int pj = permutation[j];
+                        point[pj] = oldX[pj];
                     }
-
+                    // Manage the array pointers for the next inner loop iteration.
+                    // Before failure: residuals=f(x+p), oldRes=qTyVec.
+                    // We need oldRes to hold qTyVec again for the next call to determineLMParameter.
+                    // And residuals to be the scratch array.
+                    qTyVec = oldRes;    // qTyVec now points to where Q^T*f_k is stored
+                    oldRes = residuals; // oldRes now points to f(x+p) (becomes scratch)
+                    residuals = qTyVec; // residuals points to Q^T*f_k (ready for swap at top of next inner loop)
+                    // Inner loop continues (ratio < 1.0e-4 is true).
                 }
-
+            } // end inner loop (while ratio < 1.0e-4)
+        } // end outer loop (while true)
     }
\ No newline at end of file
