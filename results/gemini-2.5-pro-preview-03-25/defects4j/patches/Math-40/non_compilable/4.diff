diff --git a/tmp/7d9f30e7-a2f1-4819-94bc-49bfcd47b2f5_buggy.java b/tmp/112fce09-8ff6-4fb7-940c-5bc88505a68c_fixed.java
index 11c3522..d86ecf9 100644
--- a/tmp/7d9f30e7-a2f1-4819-94bc-49bfcd47b2f5_buggy.java
+++ b/tmp/112fce09-8ff6-4fb7-940c-5bc88505a68c_fixed.java
@@ -1,207 +1,201 @@
     /**
      * {@inheritDoc}
      */
     @Override
-    protected double doSolve() {
+    protected double doSolve() throws TooManyEvaluationsException, NoBracketingException {
 
         // prepare arrays with the first points
+        final int maximalOrder = getMaximalOrder(); // Use getter
         final double[] x = new double[maximalOrder + 1];
         final double[] y = new double[maximalOrder + 1];
         x[0] = getMin();
         x[1] = getStartValue();
         x[2] = getMax();
         verifySequence(x[0], x[1], x[2]);
 
         // evaluate initial guess
         y[1] = computeObjectiveValue(x[1]);
         if (Precision.equals(y[1], 0.0, 1)) {
             // return the initial guess if it is a perfect root.
             return x[1];
         }
 
         // evaluate first endpoint
         y[0] = computeObjectiveValue(x[0]);
         if (Precision.equals(y[0], 0.0, 1)) {
             // return the first endpoint if it is a perfect root.
             return x[0];
         }
 
         int nbPoints;
         int signChangeIndex;
         if (y[0] * y[1] < 0) {
 
             // reduce interval if it brackets the root
             nbPoints        = 2;
             signChangeIndex = 1;
 
         } else {
 
             // evaluate second endpoint
             y[2] = computeObjectiveValue(x[2]);
             if (Precision.equals(y[2], 0.0, 1)) {
                 // return the second endpoint if it is a perfect root.
                 return x[2];
             }
 
             if (y[1] * y[2] < 0) {
                 // use all computed point as a start sampling array for solving
                 nbPoints        = 3;
                 signChangeIndex = 2;
             } else {
                 throw new NoBracketingException(x[0], x[2], y[0], y[2]);
             }
 
         }
 
         // prepare a work array for inverse polynomial interpolation
         final double[] tmpX = new double[x.length];
 
         // current tightest bracketing of the root
         double xA    = x[signChangeIndex - 1];
         double yA    = y[signChangeIndex - 1];
         double absYA = FastMath.abs(yA);
         int agingA   = 0;
         double xB    = x[signChangeIndex];
         double yB    = y[signChangeIndex];
         double absYB = FastMath.abs(yB);
         int agingB   = 0;
 
+        // Get solver settings from abstract class
+        final AllowedSolution allowed = getAllowedSolutions();
+        final int MAXIMAL_AGING = 2;        // From class constant (assuming it's 2)
+        final double REDUCTION_FACTOR = 0.5; // From class constant (assuming it's 0.5)
+
+
         // search loop
         while (true) {
 
             // check convergence of bracketing interval
             final double xTol = getAbsoluteAccuracy() +
                                 getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));
             if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
                 switch (allowed) {
                 case ANY_SIDE :
                     return absYA < absYB ? xA : xB;
                 case LEFT_SIDE :
                     return xA;
                 case RIGHT_SIDE :
                     return xB;
                 case BELOW_SIDE :
                     return (yA <= 0) ? xA : xB;
                 case ABOVE_SIDE :
                     return (yA <  0) ? xB : xA;
                 default :
                     // this should never happen
                     throw new MathInternalError(null);
                 }
             }
 
             // target for the next evaluation point
             double targetY;
             if (agingA >= MAXIMAL_AGING) {
                 // we keep updating the high bracket, try to compensate this
                 targetY = -REDUCTION_FACTOR * yB;
             } else if (agingB >= MAXIMAL_AGING) {
                 // we keep updating the low bracket, try to compensate this
                 targetY = -REDUCTION_FACTOR * yA;
             } else {
                 // bracketing is balanced, try to find the root itself
                 targetY = 0;
             }
 
-            // make a few attempts to guess a root,
+            // guess a value for current target, using inverse polynomial interpolation
             double nextX;
-            int start = 0;
+            int start = 0; // Use all available points for interpolation attempt
             int end   = nbPoints;
-            do {
-
-                // guess a value for current target, using inverse polynomial interpolation
             System.arraycopy(x, start, tmpX, start, end - start);
-                nextX = guessX(targetY, tmpX, y, start, end);
+            nextX = guessX(targetY, tmpX, y, start, end); // Assume guessX exists and is correct
 
-                if (!((nextX > xA) && (nextX < xB))) {
-                    // the guessed root is not strictly inside of the tightest bracketing interval
-
-                    // the guessed root is either not strictly inside the interval or it
-                    // is a NaN (which occurs when some sampling points share the same y)
-                    // we try again with a lower interpolation order
-                    if (signChangeIndex - start >= end - signChangeIndex) {
-                        // we have more points before the sign change, drop the lowest point
-                        ++start;
-                    } else {
-                        // we have more points after sign change, drop the highest point
-                        --end;
-                    }
-
-                    // we need to do one more attempt
-                    nextX = Double.NaN;
-
-                }
-
-            } while (Double.isNaN(nextX) && (end - start > 1));
-
-            if (Double.isNaN(nextX)) {
-                // fall back to bisection
+            // Check if the guess is valid and strictly within the tightest current bracket.
+            if (Double.isNaN(nextX) || !(nextX > xA && nextX < xB)) {
+                // The guessed root is not strictly inside of the tightest bracketing interval,
+                // or the guess is NaN (e.g., due to duplicate y-values).
+                // Fall back to bisection.
                 nextX = xA + 0.5 * (xB - xA);
-                start = signChangeIndex - 1;
-                end   = signChangeIndex;
+                // Reset start/end to invalid state to indicate bisection was chosen
+                // This prevents the point-dropping logic triggered by start/end changes.
+                start = -1;
+                end = -1;
             }
 
+
             // evaluate the function at the guessed root
             final double nextY = computeObjectiveValue(nextX);
             if (Precision.equals(nextY, 0.0, 1)) {
                 // we have found an exact root, since it is not an approximation
                 // we don't need to bother about the allowed solutions setting
                 return nextX;
             }
 
-            if ((nbPoints > 2) && (end - start != nbPoints)) {
+            // If the interpolation attempt reduced the number of points used (start/end modified),
+            // drop the unused points from the main arrays.
+            // NOTE: With the fix above (falling back to bisection immediately), this block
+            // should ideally not be needed unless guessX itself modifies start/end internally
+            // upon success but using fewer points (which is unlikely). Kept for safety.
+            if (start != -1 && (nbPoints > 2) && (end - start != nbPoints)) {
 
                 // we have been forced to ignore some points to keep bracketing,
                 // they are probably too far from the root, drop them from now on
                 nbPoints = end - start;
                 System.arraycopy(x, start, x, 0, nbPoints);
                 System.arraycopy(y, start, y, 0, nbPoints);
                 signChangeIndex -= start;
 
             } else if (nbPoints == x.length) {
-
-                // we have to drop one point in order to insert the new one
+                 // The array is full, we have to drop one point to insert the new one.
                  nbPoints--;
 
-                // keep the tightest bracketing interval as centered as possible
+                // Keep the tightest bracketing interval as centered as possible
                 if (signChangeIndex >= (x.length + 1) / 2) {
                     // we drop the lowest point, we have to shift the arrays and the index
                     System.arraycopy(x, 1, x, 0, nbPoints);
                     System.arraycopy(y, 1, y, 0, nbPoints);
                     --signChangeIndex;
                 }
-
+                // else: drop the highest point (implicitly done by the insertion logic below)
             }
 
             // insert the last computed point
-            //(by construction, we know it lies inside the tightest bracketing interval)
+            // (by construction, we know it lies inside the tightest bracketing interval (xA, xB)
+            // or is the bisection point). Insert it at the correct sorted position.
+            // The original code inserts at signChangeIndex, which is correct as
+            // xA = x[signChangeIndex-1] and xB = x[signChangeIndex], and nextX is between xA and xB.
             System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
             x[signChangeIndex] = nextX;
             System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
             y[signChangeIndex] = nextY;
+            // Increment number of points *after* potential drop and insertion
             ++nbPoints;
 
             // update the bracketing interval
             if (nextY * yA <= 0) {
-                // the sign change occurs before the inserted point
+                // the sign change occurs between xA and nextX
                 xB = nextX;
                 yB = nextY;
                 absYB = FastMath.abs(yB);
                 ++agingA;
                 agingB = 0;
+                // signChangeIndex remains the index of the new xB
             } else {
-                // the sign change occurs after the inserted point
+                // the sign change occurs between nextX and xB (as yA and yB have opposite signs)
                 xA = nextX;
                 yA = nextY;
                 absYA = FastMath.abs(yA);
                 agingA = 0;
                 ++agingB;
-
-                // update the sign change index
+                // update the sign change index, as xA is now at the old signChangeIndex position
                 signChangeIndex++;
-
             }
-
-        }
-
+        } // end search loop
     }
\ No newline at end of file
