diff --git a/tmp/bccc6338-7835-4b68-aaf5-ca1946cca114_buggy.java b/tmp/2713ee5e-f54b-40fa-a279-7655a683c2df_fixed.java
index 11c3522..9f18646 100644
--- a/tmp/bccc6338-7835-4b68-aaf5-ca1946cca114_buggy.java
+++ b/tmp/2713ee5e-f54b-40fa-a279-7655a683c2df_fixed.java
@@ -1,207 +1,243 @@
+import org.apache.commons.math.exception.NoBracketingException;
+import org.apache.commons.math.exception.TooManyEvaluationsException;
+import org.apache.commons.math.exception.MathInternalError; // Keep this even if unused in the fix
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.util.Precision;
+import org.apache.commons.math.analysis.solvers.AllowedSolution;
+
+// Assume necessary fields like maximalOrder, allowed, MAXIMAL_AGING, REDUCTION_FACTOR
+// and methods like getMin, getMax, getStartValue, verifySequence, computeObjectiveValue,
+// getAbsoluteAccuracy, getRelativeAccuracy, getFunctionValueAccuracy, guessX,
+// getMaximalOrder, getAllowedSolutions, verifyBracketing are available in the parent/current class.
+
     /**
      * {@inheritDoc}
      */
     @Override
-    protected double doSolve() {
+    protected double doSolve() throws TooManyEvaluationsException, NoBracketingException {
 
+        final int maximalOrder = getMaximalOrder();
         // prepare arrays with the first points
         final double[] x = new double[maximalOrder + 1];
         final double[] y = new double[maximalOrder + 1];
         x[0] = getMin();
         x[1] = getStartValue();
         x[2] = getMax();
+        // verifySequence checks that the points are ordered
         verifySequence(x[0], x[1], x[2]);
 
         // evaluate initial guess
         y[1] = computeObjectiveValue(x[1]);
         if (Precision.equals(y[1], 0.0, 1)) {
             // return the initial guess if it is a perfect root.
             return x[1];
         }
 
         // evaluate first endpoint
         y[0] = computeObjectiveValue(x[0]);
         if (Precision.equals(y[0], 0.0, 1)) {
             // return the first endpoint if it is a perfect root.
             return x[0];
         }
 
         int nbPoints;
         int signChangeIndex;
         if (y[0] * y[1] < 0) {
 
             // reduce interval if it brackets the root
             nbPoints        = 2;
             signChangeIndex = 1;
 
         } else {
 
             // evaluate second endpoint
             y[2] = computeObjectiveValue(x[2]);
             if (Precision.equals(y[2], 0.0, 1)) {
                 // return the second endpoint if it is a perfect root.
                 return x[2];
             }
 
             if (y[1] * y[2] < 0) {
-                // use all computed point as a start sampling array for solving
+                // use all computed points as a start sampling array for solving
                 nbPoints        = 3;
                 signChangeIndex = 2;
+            } else if (y[0] * y[2] < 0) {
+                 // check if the endpoints bracket the root; if so, use them
+                 // Replace (x[1], y[1]) with (x[2], y[2]) to have a bracketing interval [x[0], x[2]]
+                 // for the initial setup of xA, xB below.
+                 x[1] = x[2];
+                 y[1] = y[2]; // y[1] now holds y(max)
+                 nbPoints = 2; // We have points x[0] and x[1] (which is max)
+                 signChangeIndex = 1; // The sign change is between x[0] and x[1] (new)
             } else {
+                // Neither [min, start] nor [start, max] nor [min, max] brackets root.
                 throw new NoBracketingException(x[0], x[2], y[0], y[2]);
             }
 
         }
 
         // prepare a work array for inverse polynomial interpolation
         final double[] tmpX = new double[x.length];
 
         // current tightest bracketing of the root
         double xA    = x[signChangeIndex - 1];
         double yA    = y[signChangeIndex - 1];
         double absYA = FastMath.abs(yA);
         int agingA   = 0;
         double xB    = x[signChangeIndex];
         double yB    = y[signChangeIndex];
         double absYB = FastMath.abs(yB);
         int agingB   = 0;
 
         // search loop
         while (true) {
 
             // check convergence of bracketing interval
             final double xTol = getAbsoluteAccuracy() +
                                 getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));
-            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
+            // FIX: Use min instead of max for function value tolerance check.
+            // This allows convergence if the better endpoint meets the tolerance,
+            // even if the other endpoint is stuck with a larger function value.
+            if (((xB - xA) <= xTol) || (FastMath.min(absYA, absYB) < getFunctionValueAccuracy())) {
+                AllowedSolution allowed = getAllowedSolutions();
                 switch (allowed) {
                 case ANY_SIDE :
                     return absYA < absYB ? xA : xB;
                 case LEFT_SIDE :
                     return xA;
                 case RIGHT_SIDE :
                     return xB;
                 case BELOW_SIDE :
                     return (yA <= 0) ? xA : xB;
                 case ABOVE_SIDE :
                     return (yA <  0) ? xB : xA;
                 default :
                     // this should never happen
                     throw new MathInternalError(null);
                 }
             }
 
             // target for the next evaluation point
             double targetY;
+            // Define MAXIMAL_AGING and REDUCTION_FACTOR if they are not fields
+            final int MAXIMAL_AGING = 2;
+            final double REDUCTION_FACTOR = 0.5;
             if (agingA >= MAXIMAL_AGING) {
                 // we keep updating the high bracket, try to compensate this
                 targetY = -REDUCTION_FACTOR * yB;
             } else if (agingB >= MAXIMAL_AGING) {
                 // we keep updating the low bracket, try to compensate this
                 targetY = -REDUCTION_FACTOR * yA;
             } else {
                 // bracketing is balanced, try to find the root itself
                 targetY = 0;
             }
 
             // make a few attempts to guess a root,
             double nextX;
             int start = 0;
             int end   = nbPoints;
             do {
 
                 // guess a value for current target, using inverse polynomial interpolation
                 System.arraycopy(x, start, tmpX, start, end - start);
+                // Assuming guessX is a private method in the same class or accessible
                 nextX = guessX(targetY, tmpX, y, start, end);
 
                 if (!((nextX > xA) && (nextX < xB))) {
                     // the guessed root is not strictly inside of the tightest bracketing interval
 
                     // the guessed root is either not strictly inside the interval or it
                     // is a NaN (which occurs when some sampling points share the same y)
                     // we try again with a lower interpolation order
                     if (signChangeIndex - start >= end - signChangeIndex) {
                         // we have more points before the sign change, drop the lowest point
                         ++start;
                     } else {
                         // we have more points after sign change, drop the highest point
                         --end;
                     }
 
                     // we need to do one more attempt
                     nextX = Double.NaN;
 
                 }
 
             } while (Double.isNaN(nextX) && (end - start > 1));
 
             if (Double.isNaN(nextX)) {
                 // fall back to bisection
                 nextX = xA + 0.5 * (xB - xA);
-                start = signChangeIndex - 1;
-                end   = signChangeIndex;
+                // No need to set start/end here, they are reset in the next loop iteration
+                // start = signChangeIndex - 1;
+                // end   = signChangeIndex;
             }
 
             // evaluate the function at the guessed root
             final double nextY = computeObjectiveValue(nextX);
             if (Precision.equals(nextY, 0.0, 1)) {
                 // we have found an exact root, since it is not an approximation
                 // we don't need to bother about the allowed solutions setting
                 return nextX;
             }
 
+            // check if points outside the current bracket were used for interpolation
+            // If so, compact the arrays to only retain points within the reduced range [start, end)
             if ((nbPoints > 2) && (end - start != nbPoints)) {
-
                 // we have been forced to ignore some points to keep bracketing,
                 // they are probably too far from the root, drop them from now on
                 nbPoints = end - start;
                 System.arraycopy(x, start, x, 0, nbPoints);
                 System.arraycopy(y, start, y, 0, nbPoints);
                 signChangeIndex -= start;
+            }
 
-            } else  if (nbPoints == x.length) {
 
+            // Check if we need to drop a point before inserting the new one
+            if (nbPoints == x.length) {
                 // we have to drop one point in order to insert the new one
                 nbPoints--;
 
                 // keep the tightest bracketing interval as centered as possible
                 if (signChangeIndex >= (x.length + 1) / 2) {
                     // we drop the lowest point, we have to shift the arrays and the index
                     System.arraycopy(x, 1, x, 0, nbPoints);
                     System.arraycopy(y, 1, y, 0, nbPoints);
                     --signChangeIndex;
-                }
+                } // else: the highest point x[nbPoints] (before insertion) is implicitly dropped
+                  // by the array copy during insertion below
 
             }
 
             // insert the last computed point
             //(by construction, we know it lies inside the tightest bracketing interval)
             System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
             x[signChangeIndex] = nextX;
             System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
             y[signChangeIndex] = nextY;
             ++nbPoints;
 
-            // update the bracketing interval
+            // update the bracketing interval and aging counters
             if (nextY * yA <= 0) {
-                // the sign change occurs before the inserted point
+                // the sign change occurs originally between xA and nextX
                 xB = nextX;
                 yB = nextY;
                 absYB = FastMath.abs(yB);
                 ++agingA;
                 agingB = 0;
+                // signChangeIndex remains pointing to the new xB
             } else {
-                // the sign change occurs after the inserted point
+                // the sign change occurs originally between nextX and xB
                 xA = nextX;
                 yA = nextY;
                 absYA = FastMath.abs(yA);
                 agingA = 0;
                 ++agingB;
 
-                // update the sign change index
+                // update the sign change index to point to new xB (the old one)
                 signChangeIndex++;
 
             }
-
+            // Loop continues
         }
-
     }
\ No newline at end of file
