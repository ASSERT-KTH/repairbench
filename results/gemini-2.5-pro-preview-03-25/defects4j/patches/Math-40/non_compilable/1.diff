diff --git a/tmp/f301c38c-65a7-40ea-b7ed-113fbc651c69_buggy.java b/tmp/5151736a-56e4-45e5-977f-bbdd32fd355a_fixed.java
index 11c3522..62baa7b 100644
--- a/tmp/f301c38c-65a7-40ea-b7ed-113fbc651c69_buggy.java
+++ b/tmp/5151736a-56e4-45e5-977f-bbdd32fd355a_fixed.java
@@ -1,207 +1,238 @@
     /**
      * {@inheritDoc}
      */
     @Override
     protected double doSolve() {
 
+        final int maximalOrder = getMaximalOrder(); // Local copy for clarity
+
         // prepare arrays with the first points
         final double[] x = new double[maximalOrder + 1];
         final double[] y = new double[maximalOrder + 1];
         x[0] = getMin();
         x[1] = getStartValue();
         x[2] = getMax();
         verifySequence(x[0], x[1], x[2]);
 
         // evaluate initial guess
         y[1] = computeObjectiveValue(x[1]);
         if (Precision.equals(y[1], 0.0, 1)) {
             // return the initial guess if it is a perfect root.
             return x[1];
         }
 
         // evaluate first endpoint
         y[0] = computeObjectiveValue(x[0]);
         if (Precision.equals(y[0], 0.0, 1)) {
             // return the first endpoint if it is a perfect root.
             return x[0];
         }
 
         int nbPoints;
-        int signChangeIndex;
+        int signChangeIndex; // Index k such that root is in [x_{k-1}, x_k]
+
+        // Detect bracketing
         if (y[0] * y[1] < 0) {
-
-            // reduce interval if it brackets the root
+            // Initial bracket [x0, x1]
             nbPoints        = 2;
-            signChangeIndex = 1;
-
+            signChangeIndex = 1; // Root in [x[0], x[1]]
         } else {
-
-            // evaluate second endpoint
+            // Check [x1, x2]
             y[2] = computeObjectiveValue(x[2]);
             if (Precision.equals(y[2], 0.0, 1)) {
                 // return the second endpoint if it is a perfect root.
                 return x[2];
             }
-
             if (y[1] * y[2] < 0) {
-                // use all computed point as a start sampling array for solving
+                // Use all three points, root in [x1, x2]
                 nbPoints        = 3;
-                signChangeIndex = 2;
+                signChangeIndex = 2; // Root in [x[1], x[2]]
+                // Initial points x[0], x[1], x[2] are min, start, max; already sorted.
             } else {
                 throw new NoBracketingException(x[0], x[2], y[0], y[2]);
             }
-
         }
 
-        // prepare a work array for inverse polynomial interpolation
-        final double[] tmpX = new double[x.length];
-
         // current tightest bracketing of the root
         double xA    = x[signChangeIndex - 1];
         double yA    = y[signChangeIndex - 1];
         double absYA = FastMath.abs(yA);
         int agingA   = 0;
         double xB    = x[signChangeIndex];
         double yB    = y[signChangeIndex];
         double absYB = FastMath.abs(yB);
         int agingB   = 0;
 
         // search loop
         while (true) {
 
             // check convergence of bracketing interval
             final double xTol = getAbsoluteAccuracy() +
                                 getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));
             if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
+                final AllowedSolution allowed = getAllowedSolutions(); // Local copy
                 switch (allowed) {
                 case ANY_SIDE :
                     return absYA < absYB ? xA : xB;
                 case LEFT_SIDE :
                     return xA;
                 case RIGHT_SIDE :
                     return xB;
                 case BELOW_SIDE :
                     return (yA <= 0) ? xA : xB;
                 case ABOVE_SIDE :
                     return (yA <  0) ? xB : xA;
                 default :
                     // this should never happen
                     throw new MathInternalError(null);
                 }
             }
 
             // target for the next evaluation point
             double targetY;
             if (agingA >= MAXIMAL_AGING) {
-                // we keep updating the high bracket, try to compensate this
+                // we keep updating the high bracket (xB), try to compensate this
                 targetY = -REDUCTION_FACTOR * yB;
             } else if (agingB >= MAXIMAL_AGING) {
-                // we keep updating the low bracket, try to compensate this
+                // we keep updating the low bracket (xA), try to compensate this
                 targetY = -REDUCTION_FACTOR * yA;
             } else {
                 // bracketing is balanced, try to find the root itself
                 targetY = 0;
             }
 
-            // make a few attempts to guess a root,
+            // make a few attempts to guess a root, using inverse polynomial interpolation
             double nextX;
-            int start = 0;
-            int end   = nbPoints;
+            int start = 0; // Start index of points to use for interpolation
+            int end   = nbPoints; // End index (exclusive)
+            boolean usedBisection = false; // Flag to track if bisection was used
+
             do {
+                // If the interpolation interval becomes too small, exit to bisection
+                if (end - start <= 1) {
+                    nextX = Double.NaN; // Signal to use bisection
+                    break;
+                }
 
                 // guess a value for current target, using inverse polynomial interpolation
-                System.arraycopy(x, start, tmpX, start, end - start);
-                nextX = guessX(targetY, tmpX, y, start, end);
+                // Pass the original x, y arrays along with the current range [start, end)
+                nextX = guessX(targetY, x, y, start, end);
 
                 if (!((nextX > xA) && (nextX < xB))) {
-                    // the guessed root is not strictly inside of the tightest bracketing interval
-
-                    // the guessed root is either not strictly inside the interval or it
-                    // is a NaN (which occurs when some sampling points share the same y)
-                    // we try again with a lower interpolation order
+                    // Guessed root is not strictly inside the tightest bracketing interval or is NaN.
+                    // Reduce the interpolation interval [start, end).
                     if (signChangeIndex - start >= end - signChangeIndex) {
-                        // we have more points before the sign change, drop the lowest point
+                        // More points before the root estimate, drop the lowest point.
                         ++start;
                     } else {
-                        // we have more points after sign change, drop the highest point
+                        // More points after the root estimate, drop the highest point.
                         --end;
                     }
-
-                    // we need to do one more attempt
+                    // Signal to retry interpolation with the reduced interval.
                     nextX = Double.NaN;
-
                 }
-
+                // Loop continues if nextX is NaN and the interval size is still > 1.
             } while (Double.isNaN(nextX) && (end - start > 1));
 
+
             if (Double.isNaN(nextX)) {
-                // fall back to bisection
+                // Interpolation failed (either didn't produce a value in (xA, xB) or interval became too small).
+                // Fall back to bisection.
                 nextX = xA + 0.5 * (xB - xA);
-                start = signChangeIndex - 1;
-                end   = signChangeIndex;
+                usedBisection = true;
+                // Reset 'start' and 'end' to the full range available before the failed attempt,
+                // as the bisection step doesn't rely on a reduced interpolation range.
+                // This prevents the point management logic below from incorrectly using potentially
+                // shrunk 'start'/'end' values from the failed interpolation attempts.
+                start = 0;
+                end = nbPoints;
             }
 
-            // evaluate the function at the guessed root
+            // evaluate the function at the guessed root (either from interpolation or bisection)
             final double nextY = computeObjectiveValue(nextX);
             if (Precision.equals(nextY, 0.0, 1)) {
                 // we have found an exact root, since it is not an approximation
                 // we don't need to bother about the allowed solutions setting
                 return nextX;
             }
 
-            if ((nbPoints > 2) && (end - start != nbPoints)) {
+            // Point management: Update the set of points (x, y) and nbPoints.
 
-                // we have been forced to ignore some points to keep bracketing,
-                // they are probably too far from the root, drop them from now on
-                nbPoints = end - start;
-                System.arraycopy(x, start, x, 0, nbPoints);
-                System.arraycopy(y, start, y, 0, nbPoints);
+            // 1. Shrink arrays if interpolation succeeded with a reduced interval [start, end)
+            //    This means points outside [start, end) were not used and potentially harmful.
+            //    Check usedBisection flag to ensure this only runs when interpolation was successful.
+            if (!usedBisection && (nbPoints > 2) && (end - start != nbPoints)) {
+                // Interpolation succeeded using points in x[start...end-1].
+                // Drop points outside this range permanently.
+                int newNbPoints = end - start;
+                System.arraycopy(x, start, x, 0, newNbPoints);
+                System.arraycopy(y, start, y, 0, newNbPoints);
+                // Adjust signChangeIndex relative to the new array start.
+                // The original signChangeIndex must be mapped to the new coordinate system.
                 signChangeIndex -= start;
-
-            } else  if (nbPoints == x.length) {
-
-                // we have to drop one point in order to insert the new one
-                nbPoints--;
-
-                // keep the tightest bracketing interval as centered as possible
+                nbPoints = newNbPoints;
+            }
+            // 2. Drop a point if the array is full before inserting the new point.
+            // Check using x.length which is maximalOrder + 1, the total capacity.
+            else if (nbPoints == x.length) {
+                 nbPoints--; // Decrement count, insertion will increment later.
+                 // Choose which point to drop to keep the sign change index centered.
                  if (signChangeIndex >= (x.length + 1) / 2) {
-                    // we drop the lowest point, we have to shift the arrays and the index
-                    System.arraycopy(x, 1, x, 0, nbPoints);
+                     // Sign change index is in the upper half, drop the lowest point (index 0).
+                     System.arraycopy(x, 1, x, 0, nbPoints); // nbPoints = x.length - 1 here
                      System.arraycopy(y, 1, y, 0, nbPoints);
-                    --signChangeIndex;
+                     // Adjust signChangeIndex as it's now relative to the shifted array.
+                     signChangeIndex--;
+                 } // else: Drop highest point (index nbPoints = x.length - 1). No copy needed.
             }
+            // Now nbPoints < x.length, so there is space for insertion.
 
+            // 3. Insert the new point (nextX, nextY) maintaining sorted order of x.
+            int insIndex = 0;
+            // Find insertion point: first index i such that x[i] >= nextX
+            // Check against nbPoints which is the current number of valid points.
+            while (insIndex < nbPoints && nextX > x[insIndex]) {
+                insIndex++;
             }
+            // Make space for the new point at insIndex.
+            System.arraycopy(x, insIndex, x, insIndex + 1, nbPoints - insIndex);
+            x[insIndex] = nextX;
+            System.arraycopy(y, insIndex, y, insIndex + 1, nbPoints - insIndex);
+            y[insIndex] = nextY;
+            nbPoints++; // Increment point count after insertion.
 
-            // insert the last computed point
-            //(by construction, we know it lies inside the tightest bracketing interval)
-            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
-            x[signChangeIndex] = nextX;
-            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
-            y[signChangeIndex] = nextY;
-            ++nbPoints;
-
-            // update the bracketing interval
+            // 4. Update the bracketing interval [xA, xB], aging counters, and signChangeIndex.
             if (nextY * yA <= 0) {
-                // the sign change occurs before the inserted point
-                xB = nextX;
+                // Sign change is between xA and nextX (or nextY == 0). New bracket [xA, nextX].
+                xB    = nextX; // Update xB to the new point
                 yB    = nextY;
                 absYB = FastMath.abs(yB);
-                ++agingA;
-                agingB = 0;
+                ++agingA;     // xA wasn't updated, increment its age
+                agingB = 0;   // xB was updated, reset its age
             } else {
-                // the sign change occurs after the inserted point
-                xA = nextX;
+                // Sign change must be between nextX and xB (since yA*yB < 0 initially, and yA*nextY > 0).
+                // New bracket [nextX, xB].
+                xA    = nextX; // Update xA to the new point
                 yA    = nextY;
                 absYA = FastMath.abs(yA);
-                agingA = 0;
-                ++agingB;
-
-                // update the sign change index
-                signChangeIndex++;
-
+                agingA = 0;   // xA was updated, reset its age
+                ++agingB;     // xB wasn't updated, increment its age
             }
 
+            // After updating xA, xB, find the index of the new xB in the updated array x.
+            // This index is the new signChangeIndex (index k where root is in [x_{k-1}, x_k]).
+            signChangeIndex = -1;
+            for (int i = 0; i < nbPoints; i++) {
+                // Use direct comparison; xB is guaranteed to be one of the points in x (either old xB or nextX)
+                if (x[i] == xB) {
+                    signChangeIndex = i;
+                    break;
+                }
+            }
+            if (signChangeIndex == -1){
+                 // This path should theoretically not be reached if xB is properly assigned.
+                 throw new MathInternalError("INTERNAL ERROR: Cannot locate bracketing interval endpoint");
             }
 
+        } // End of search loop (while true)
     }
\ No newline at end of file
