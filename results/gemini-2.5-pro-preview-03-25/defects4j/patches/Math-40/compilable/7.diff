diff --git a/tmp/8d1ef44f-1e22-47b1-9d11-8dfef71a5566_buggy.java b/tmp/065d5740-939c-44cf-8581-7c9b8bea2499_fixed.java
index 11c3522..d39f28a 100644
--- a/tmp/8d1ef44f-1e22-47b1-9d11-8dfef71a5566_buggy.java
+++ b/tmp/065d5740-939c-44cf-8581-7c9b8bea2499_fixed.java
@@ -1,207 +1,225 @@
     /**
      * {@inheritDoc}
      */
     @Override
     protected double doSolve() {
 
         // prepare arrays with the first points
         final double[] x = new double[maximalOrder + 1];
         final double[] y = new double[maximalOrder + 1];
         x[0] = getMin();
         x[1] = getStartValue();
         x[2] = getMax();
         verifySequence(x[0], x[1], x[2]);
 
         // evaluate initial guess
         y[1] = computeObjectiveValue(x[1]);
         if (Precision.equals(y[1], 0.0, 1)) {
             // return the initial guess if it is a perfect root.
             return x[1];
         }
 
         // evaluate first endpoint
         y[0] = computeObjectiveValue(x[0]);
         if (Precision.equals(y[0], 0.0, 1)) {
             // return the first endpoint if it is a perfect root.
             return x[0];
         }
 
         int nbPoints;
         int signChangeIndex;
         if (y[0] * y[1] < 0) {
 
             // reduce interval if it brackets the root
             nbPoints        = 2;
             signChangeIndex = 1;
 
         } else {
 
             // evaluate second endpoint
             y[2] = computeObjectiveValue(x[2]);
             if (Precision.equals(y[2], 0.0, 1)) {
                 // return the second endpoint if it is a perfect root.
                 return x[2];
             }
 
             if (y[1] * y[2] < 0) {
                 // use all computed point as a start sampling array for solving
                 nbPoints        = 3;
                 signChangeIndex = 2;
             } else {
                 throw new NoBracketingException(x[0], x[2], y[0], y[2]);
             }
 
         }
 
         // prepare a work array for inverse polynomial interpolation
         final double[] tmpX = new double[x.length];
 
         // current tightest bracketing of the root
         double xA    = x[signChangeIndex - 1];
         double yA    = y[signChangeIndex - 1];
         double absYA = FastMath.abs(yA);
         int agingA   = 0;
         double xB    = x[signChangeIndex];
         double yB    = y[signChangeIndex];
         double absYB = FastMath.abs(yB);
         int agingB   = 0;
 
         // search loop
         while (true) {
 
             // check convergence of bracketing interval
             final double xTol = getAbsoluteAccuracy() +
                                 getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));
             if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
                 switch (allowed) {
                 case ANY_SIDE :
                     return absYA < absYB ? xA : xB;
                 case LEFT_SIDE :
                     return xA;
                 case RIGHT_SIDE :
                     return xB;
                 case BELOW_SIDE :
                     return (yA <= 0) ? xA : xB;
                 case ABOVE_SIDE :
                     return (yA <  0) ? xB : xA;
                 default :
                     // this should never happen
                     throw new MathInternalError(null);
                 }
             }
 
             // target for the next evaluation point
             double targetY;
             if (agingA >= MAXIMAL_AGING) {
                 // we keep updating the high bracket, try to compensate this
                 targetY = -REDUCTION_FACTOR * yB;
             } else if (agingB >= MAXIMAL_AGING) {
                 // we keep updating the low bracket, try to compensate this
                 targetY = -REDUCTION_FACTOR * yA;
             } else {
                 // bracketing is balanced, try to find the root itself
                 targetY = 0;
             }
 
             // make a few attempts to guess a root,
             double nextX;
             int start = 0;
             int end   = nbPoints;
             do {
 
                 // guess a value for current target, using inverse polynomial interpolation
                 System.arraycopy(x, start, tmpX, start, end - start);
                 nextX = guessX(targetY, tmpX, y, start, end);
 
                 if (!((nextX > xA) && (nextX < xB))) {
                     // the guessed root is not strictly inside of the tightest bracketing interval
 
                     // the guessed root is either not strictly inside the interval or it
                     // is a NaN (which occurs when some sampling points share the same y)
                     // we try again with a lower interpolation order
                     if (signChangeIndex - start >= end - signChangeIndex) {
                         // we have more points before the sign change, drop the lowest point
                         ++start;
                     } else {
                         // we have more points after sign change, drop the highest point
                         --end;
                     }
 
                     // we need to do one more attempt
                     nextX = Double.NaN;
 
                 }
 
             } while (Double.isNaN(nextX) && (end - start > 1));
 
+            // Check if interpolation failed; if so, use bisection.
+            boolean useBisection = false;
             if (Double.isNaN(nextX)) {
                 // fall back to bisection
                 nextX = xA + 0.5 * (xB - xA);
-                start = signChangeIndex - 1;
-                end   = signChangeIndex;
+                useBisection = true;
+                // Reset start/end to full range to avoid incorrect point dropping below
+                // start = 0; // Not needed, logic below handles useBisection correctly
+                // end = nbPoints;
             }
 
             // evaluate the function at the guessed root
             final double nextY = computeObjectiveValue(nextX);
             if (Precision.equals(nextY, 0.0, 1)) {
                 // we have found an exact root, since it is not an approximation
                 // we don't need to bother about the allowed solutions setting
                 return nextX;
             }
 
-            if ((nbPoints > 2) && (end - start != nbPoints)) {
+            // Point management: Update the set of points for future interpolations.
 
-                // we have been forced to ignore some points to keep bracketing,
-                // they are probably too far from the root, drop them from now on
-                nbPoints = end - start;
-                System.arraycopy(x, start, x, 0, nbPoints);
+            // Check if interpolation succeeded but used a reduced range [start, end).
+            // This implies some points were ignored during interpolation attempts.
+            // We permanently drop those points from our working set.
+            // This should only happen if we didn't fall back to bisection.
+            boolean interpolationUsedReducedPoints = !useBisection && (end - start != nbPoints);
+
+            if ((nbPoints > 2) && interpolationUsedReducedPoints) {
+                // Interpolation succeeded using points from index start to end-1.
+                // Drop points outside this range permanently.
+                nbPoints = end - start; // Adjust point count
+                System.arraycopy(x, start, x, 0, nbPoints); // Shift the kept points to the beginning
                 System.arraycopy(y, start, y, 0, nbPoints);
-                signChangeIndex -= start;
-
+                signChangeIndex -= start; // Adjust signChangeIndex relative to the new start (which is 0)
             } else if (nbPoints == x.length) {
-
-                // we have to drop one point in order to insert the new one
-                nbPoints--;
-
-                // keep the tightest bracketing interval as centered as possible
+                // Maximum number of points reached. Need to drop one point
+                // before inserting the new one (nextX, nextY).
+                nbPoints--; // Temporarily decrement nbPoints count.
+                // Try to keep the sign change index roughly centered.
                 if (signChangeIndex >= (x.length + 1) / 2) {
-                    // we drop the lowest point, we have to shift the arrays and the index
-                    System.arraycopy(x, 1, x, 0, nbPoints);
-                    System.arraycopy(y, 1, y, 0, nbPoints);
-                    --signChangeIndex;
+                    // Drop the lowest point (at index 0).
+                    System.arraycopy(x, 1, x, 0, nbPoints); // Shift x[1..] left to x[0..]
+                    System.arraycopy(y, 1, y, 0, nbPoints); // Shift y[1..] left to y[0..]
+                    --signChangeIndex; // Adjust index since elements shifted left.
+                } // else {
+                  // Drop the highest point (at index nbPoints, which is x.length - 1).
+                  // This happens implicitly because the insertion logic below
+                  // will overwrite the last element when shifting points right.
+                // }
             }
+            // Note: If neither of the above conditions is met (i.e., bisection was used,
+            // or interpolation used all points, or we have fewer than max points),
+            // no points are dropped here.
 
-            }
-
-            // insert the last computed point
-            //(by construction, we know it lies inside the tightest bracketing interval)
+            // insert the last computed point (nextX, nextY)
+            // Insert at signChangeIndex, shifting existing points from signChangeIndex onwards to the right.
+            // This maintains the property that xA is at signChangeIndex - 1 and xB is at signChangeIndex
+            // (or will be after the bracket update).
             System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
             x[signChangeIndex] = nextX;
             System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
             y[signChangeIndex] = nextY;
-            ++nbPoints;
+            ++nbPoints; // Increment point count after successful insertion.
 
-            // update the bracketing interval
+            // update the bracketing interval and related state
             if (nextY * yA <= 0) {
-                // the sign change occurs before the inserted point
-                xB = nextX;
+                // the sign change occurs between xA and nextX
+                // the new interval is [xA, nextX]
+                xB = nextX; // Update xB
                 yB = nextY;
                 absYB = FastMath.abs(yB);
-                ++agingA;
-                agingB = 0;
+                ++agingA;   // xA is Estimate unchanged endpoint, increment its age
+                agingB = 0; // xB is Estimate changed endpoint, reset its age
+                // signChangeIndex still points to the updated xB
             } else {
-                // the sign change occurs after the inserted point
-                xA = nextX;
+                // the sign change occurs between nextX and xB
+                // the new interval is [nextX, xB]
+                xA = nextX; // Update xA
                 yA = nextY;
                 absYA = FastMath.abs(yA);
-                agingA = 0;
-                ++agingB;
-
-                // update the sign change index
+                agingA = 0; // xA is Estimate changed endpoint, reset its age
+                ++agingB;   // xB is Estimate unchanged endpoint, increment its age
+                // update the sign change index, as xB is now one position later in the array
                 signChangeIndex++;
-
             }
-
+            // Continue the search loop
         }
 
     }
\ No newline at end of file
