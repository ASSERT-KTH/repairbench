diff --git a/tmp/f1dfe9fe-7b07-4a34-b6ec-0796e1db5f55_buggy.java b/tmp/847f79b3-136e-4193-974b-7db8b850fa9c_fixed.java
index 11c3522..87bb8dd 100644
--- a/tmp/f1dfe9fe-7b07-4a34-b6ec-0796e1db5f55_buggy.java
+++ b/tmp/847f79b3-136e-4193-974b-7db8b850fa9c_fixed.java
@@ -1,207 +1,235 @@
     /**
      * {@inheritDoc}
      */
     @Override
     protected double doSolve() {
 
         // prepare arrays with the first points
-        final double[] x = new double[maximalOrder + 1];
-        final double[] y = new double[maximalOrder + 1];
+        final int maxEval = getMaximalOrder(); // Renamed for clarity inside the method scope
+        final double[] x = new double[maxEval + 1];
+        final double[] y = new double[maxEval + 1];
         x[0] = getMin();
         x[1] = getStartValue();
         x[2] = getMax();
         verifySequence(x[0], x[1], x[2]);
 
         // evaluate initial guess
         y[1] = computeObjectiveValue(x[1]);
         if (Precision.equals(y[1], 0.0, 1)) {
             // return the initial guess if it is a perfect root.
             return x[1];
         }
 
         // evaluate first endpoint
         y[0] = computeObjectiveValue(x[0]);
         if (Precision.equals(y[0], 0.0, 1)) {
             // return the first endpoint if it is a perfect root.
             return x[0];
         }
 
         int nbPoints;
         int signChangeIndex;
         if (y[0] * y[1] < 0) {
 
             // reduce interval if it brackets the root
             nbPoints        = 2;
             signChangeIndex = 1;
 
         } else {
 
             // evaluate second endpoint
             y[2] = computeObjectiveValue(x[2]);
             if (Precision.equals(y[2], 0.0, 1)) {
                 // return the second endpoint if it is a perfect root.
                 return x[2];
             }
 
             if (y[1] * y[2] < 0) {
                 // use all computed point as a start sampling array for solving
                 nbPoints        = 3;
                 signChangeIndex = 2;
+            } else if (y[0] * y[2] < 0) {
+                 // The sign change occurs between the endpoints, x[1] is not helpful initially
+                 // We keep all 3 points for interpolation, but the bracket is [x0, x2]
+                 // Since y[0] and y[1] have the same sign, and y[1] and y[2] have the same sign
+                 // but y[0] and y[2] have different signs.
+                 // Set the sign change index accordingly.
+                 // If y[0] has opposite sign to y[1]/y[2], signChangeIndex = 1? No, bracket is [x0, x2].
+                 // Need to define xA, xB carefully later based on this.
+                 // Let's start with [x[0], x[2]] as the tightest bracket.
+                 // But the points array needs to be consistent with signChangeIndex for later logic.
+                 // Reorder points? Let's stick to the original logic which seems implicitly tested.
+                 // The original code threw NoBracketingException here. Let's reconsider.
+                 // If y[0]*y[1] >= 0 and y[1]*y[2] >= 0, and we are here, it implies
+                 // y[0], y[1], y[2] all have the same sign (unless one is 0, handled above).
+                 // So y[0]*y[2] cannot be < 0. The original exception seems correct.
+                throw new NoBracketingException(x[0], x[2], y[0], y[2]);
             } else {
+                 // All y[0], y[1], y[2] have the same sign.
                  throw new NoBracketingException(x[0], x[2], y[0], y[2]);
             }
 
         }
 
         // prepare a work array for inverse polynomial interpolation
         final double[] tmpX = new double[x.length];
 
         // current tightest bracketing of the root
         double xA    = x[signChangeIndex - 1];
         double yA    = y[signChangeIndex - 1];
         double absYA = FastMath.abs(yA);
         int agingA   = 0;
         double xB    = x[signChangeIndex];
         double yB    = y[signChangeIndex];
         double absYB = FastMath.abs(yB);
         int agingB   = 0;
 
         // search loop
         while (true) {
 
             // check convergence of bracketing interval
             final double xTol = getAbsoluteAccuracy() +
                                 getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));
             if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
                 switch (allowed) {
                 case ANY_SIDE :
                     return absYA < absYB ? xA : xB;
                 case LEFT_SIDE :
                     return xA;
                 case RIGHT_SIDE :
                     return xB;
                 case BELOW_SIDE :
                     return (yA <= 0) ? xA : xB;
                 case ABOVE_SIDE :
                     return (yA <  0) ? xB : xA;
                 default :
                     // this should never happen
                     throw new MathInternalError(null);
                 }
             }
 
             // target for the next evaluation point
             double targetY;
             if (agingA >= MAXIMAL_AGING) {
                 // we keep updating the high bracket, try to compensate this
                 targetY = -REDUCTION_FACTOR * yB;
             } else if (agingB >= MAXIMAL_AGING) {
                 // we keep updating the low bracket, try to compensate this
                 targetY = -REDUCTION_FACTOR * yA;
             } else {
                 // bracketing is balanced, try to find the root itself
                 targetY = 0;
             }
 
             // make a few attempts to guess a root,
             double nextX;
             int start = 0;
             int end   = nbPoints;
+            boolean interpolationFailedTotally = false; // Flag for fallback to bisection
+
             do {
-
-                // guess a value for current target, using inverse polynomial interpolation
+                // select points for interpolation
                 System.arraycopy(x, start, tmpX, start, end - start);
+
+                // guess a value for current target, using inverse polynomial interpolation
                 nextX = guessX(targetY, tmpX, y, start, end);
 
                 if (!((nextX > xA) && (nextX < xB))) {
                     // the guessed root is not strictly inside of the tightest bracketing interval
 
                     // the guessed root is either not strictly inside the interval or it
                     // is a NaN (which occurs when some sampling points share the same y)
                     // we try again with a lower interpolation order
                     if (signChangeIndex - start >= end - signChangeIndex) {
                         // we have more points before the sign change, drop the lowest point
                         ++start;
                     } else {
                         // we have more points after sign change, drop the highest point
                         --end;
                     }
 
                     // we need to do one more attempt
                     nextX = Double.NaN;
 
                 }
-
+                // Loop if interpolation failed (nextX is NaN) and we have more than 1 point left
             } while (Double.isNaN(nextX) && (end - start > 1));
 
             if (Double.isNaN(nextX)) {
-                // fall back to bisection
+                // Fall back to bisection if interpolation failed completely
                 nextX = xA + 0.5 * (xB - xA);
-                start = signChangeIndex - 1;
-                end   = signChangeIndex;
+                interpolationFailedTotally = true;
+                // Keep start/end from the failed attempts, needed below? No, not needed if we use the flag.
             }
 
             // evaluate the function at the guessed root
             final double nextY = computeObjectiveValue(nextX);
             if (Precision.equals(nextY, 0.0, 1)) {
                 // we have found an exact root, since it is not an approximation
                 // we don't need to bother about the allowed solutions setting
                 return nextX;
             }
 
-            if ((nbPoints > 2) && (end - start != nbPoints)) {
-
-                // we have been forced to ignore some points to keep bracketing,
-                // they are probably too far from the root, drop them from now on
-                nbPoints = end - start;
-                System.arraycopy(x, start, x, 0, nbPoints);
-                System.arraycopy(y, start, y, 0, nbPoints);
-                signChangeIndex -= start;
+            // Point Management: Update the set of points (x, y) for next interpolation
 
+            // Condition 1: If interpolation succeeded but used a reduced point set [start, end),
+            // discard the points outside this range. Do not do this if we fell back to bisection.
+            if (!interpolationFailedTotally && (nbPoints > 2) && (end - start != nbPoints)) {
+                // We were forced to ignore some points to keep bracketing/ensure convergence.
+                // Drop the unused points from the main arrays.
+                nbPoints = end - start; // Adjust the number of points
+                System.arraycopy(x, start, x, 0, nbPoints); // Copy the used x points to the beginning
+                System.arraycopy(y, start, y, 0, nbPoints); // Copy the used y points to the beginning
+                signChangeIndex -= start; // Adjust the sign change index relative to the new start
             } else if (nbPoints == x.length) {
+                 // Condition 2: If the array is full (max number of points reached),
+                 // we must drop one point before inserting the new one.
+                 // This happens even if bisection was used.
+                nbPoints--; // Reduce the count conceptually
 
-                // we have to drop one point in order to insert the new one
-                nbPoints--;
-
-                // keep the tightest bracketing interval as centered as possible
+                // Decide which point to drop: keep the tightest bracketing interval as centered as possible.
                 if (signChangeIndex >= (x.length + 1) / 2) {
-                    // we drop the lowest point, we have to shift the arrays and the index
-                    System.arraycopy(x, 1, x, 0, nbPoints);
-                    System.arraycopy(y, 1, y, 0, nbPoints);
-                    --signChangeIndex;
+                    // signChangeIndex is closer to the end: drop the lowest point (at index 0)
+                    System.arraycopy(x, 1, x, 0, nbPoints); // Shift x[1..] down to x[0..nbPoints-1]
+                    System.arraycopy(y, 1, y, 0, nbPoints); // Shift y[1..] down to y[0..nbPoints-1]
+                    --signChangeIndex; // Adjust index because elements shifted down
+                } else {
+                    // signChangeIndex is closer to the start: drop the highest point (at index nbPoints, previously x.length-1)
+                    // No array copy needed here; the insertion below will overwrite the highest element implicitly
+                    // because the copy length `nbPoints - signChangeIndex` will stop before the last slot.
                 }
-
             }
 
-            // insert the last computed point
-            //(by construction, we know it lies inside the tightest bracketing interval)
+            // Insert the new point (nextX, nextY) into the arrays x and y.
+            // By construction, nextX lies within the current tightest bracket (xA, xB).
+            // Insert it at the current signChangeIndex, shifting existing points GTE signChangeIndex up.
             System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
             x[signChangeIndex] = nextX;
             System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
             y[signChangeIndex] = nextY;
+            // Increment the number of points
             ++nbPoints;
 
-            // update the bracketing interval
+            // Update the bracketing interval [xA, xB] and related variables
             if (nextY * yA <= 0) {
-                // the sign change occurs before the inserted point
-                xB = nextX;
+                // The sign change occurs between xA (index signChangeIndex-1) and nextX (index signChangeIndex).
+                // The new bracket is [xA, nextX].
+                xB = nextX; // Update right endpoint
                 yB = nextY;
                 absYB = FastMath.abs(yB);
-                ++agingA;
-                agingB = 0;
+                ++agingA; // xA was not updated, increment its aging counter
+                agingB = 0; // Reset aging counter for xB
+                // signChangeIndex remains correct (it's the index of the new xB)
             } else {
-                // the sign change occurs after the inserted point
-                xA = nextX;
+                // The sign change occurs between nextX (index signChangeIndex) and xB (now at index signChangeIndex+1).
+                // The new bracket is [nextX, xB].
+                xA = nextX; // Update left endpoint
                 yA = nextY;
                 absYA = FastMath.abs(yA);
-                agingA = 0;
-                ++agingB;
-
-                // update the sign change index
+                agingA = 0; // Reset aging counter for xA
+                ++agingB; // xB was not updated, increment its aging counter
+                // Update the sign change index, as it's now between index signChangeIndex and signChangeIndex+1
                 signChangeIndex++;
-
             }
-
-        }
-
+        } // end search loop
     }
\ No newline at end of file
