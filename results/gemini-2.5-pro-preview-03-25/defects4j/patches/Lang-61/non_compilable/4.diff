diff --git a/tmp/cffc3f0c-e04d-4ec7-b67e-29c0e38bee92_buggy.java b/tmp/1602b59f-a483-40ee-81ae-fecf07147df0_fixed.java
index addeb8d..a079f14 100644
--- a/tmp/cffc3f0c-e04d-4ec7-b67e-29c0e38bee92_buggy.java
+++ b/tmp/1602b59f-a483-40ee-81ae-fecf07147df0_fixed.java
@@ -1,38 +1,64 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
+        // Check for invalid inputs or impossible search conditions
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
+        // Handle empty string search
+        if (strLen == 0) {
+            // Per JDK String.indexOf behavior, empty string is found at startIndex if valid
+            return startIndex <= size ? startIndex : size; // Adjusted to match JDK behavior slightly more closely if needed, original was just return startIndex;
+                                                            // Sticking to original behavior for minimal change:
+            // return startIndex; // Original line - let's keep it if tests pass
+            // Let's re-evaluate based on String.indexOf("", idx): it returns idx if idx <= length, else length.
+            // Our StrBuilder size is analogous to length. So, if startIndex > size, we should return size.
+            // The check 'startIndex >= size' above handles cases where startIndex is too large initially.
+            // If startIndex == size, returning startIndex (which is size) is correct.
+            return startIndex; // Let's stick to this for minimal change, seems logically sound within the method's context.
+        }
+        // Handle single character search using optimized method
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
-        if (strLen == 0) {
-            return startIndex;
+        // Check if the search string is longer than the remaining content
+        if (strLen > size - startIndex) { // More precise check than just strLen > size
+             return -1;
         }
-        if (strLen > size) {
+        // Check if the search string is longer than the total content size (already somewhat covered, but explicit)
+        if (strLen > size) { // This check seems redundant given the one above, but harmless
              return -1;
         }
+
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        // Calculate the maximum possible starting index for the search string
+        // The last possible start index is size - strLen
+        int loopEnd = size - strLen; 
+        
         outer:
-        for (int i = startIndex; i < len; i++) {
+        // Iterate through possible start indices from startIndex up to loopEnd
+        for (int i = startIndex; i <= loopEnd; i++) {
+            // Compare the characters of str with the characters in buffer starting at index i
             for (int j = 0; j < strLen; j++) {
+                // If any character doesn't match, continue to the next potential start index
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
+            // If the inner loop completed without mismatch, we found the string
             return i;
         }
+        
+        // String not found
         return -1;
     }
\ No newline at end of file
