diff --git a/tmp/a3dd973f-8088-43c9-ba89-331e199670dc_buggy.java b/tmp/6154c844-ef65-40ff-86ad-15352824b32e_fixed.java
index addeb8d..ed872a4 100644
--- a/tmp/a3dd973f-8088-43c9-ba89-331e199670dc_buggy.java
+++ b/tmp/6154c844-ef65-40ff-86ad-15352824b32e_fixed.java
@@ -1,38 +1,69 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      *
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+        if (str == null) { // Check str == null separately
             return -1;
         }
+
         int strLen = str.length();
+
+        // Handle empty string search case: returns startIndex if startIndex <= size, else size.
+        // This mimics JDK String.indexOf behavior.
+        if (strLen == 0) {
+            return (startIndex <= size ? startIndex : size);
+        }
+
+        // If startIndex is beyond the possible range, return -1 immediately.
+        // This check is safe because we've handled strLen == 0 already.
+        if (startIndex >= size) {
+             return -1;
+        }
+
+        // If string length is 1, delegate to char indexOf
         if (strLen == 1) {
+            // No need for extra startIndex check here, as startIndex < size is guaranteed.
             return indexOf(str.charAt(0), startIndex);
         }
-        if (strLen == 0) {
-            return startIndex;
-        }
+
+        // Cannot find string longer than the current size
         if (strLen > size) {
             return -1;
         }
+
+        // Use current buffer and calculate the correct upper bound for the loop
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        // loopEnd is the last possible starting index for a match: size - strLen
+        // The loop should iterate from startIndex up to and including loopEnd.
+        int loopEnd = size - strLen;
+
+        // If the effective startIndex is already past the last possible match start, return -1
+        if (startIndex > loopEnd) {
+             return -1;
+        }
+
+        // Naive string search implementation using the correct bounds based on 'size'
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= loopEnd; i++) { // Iterate up to the last possible start index
             for (int j = 0; j < strLen; j++) {
+                // Access check: Max i = loopEnd = size - strLen. Max j = strLen - 1.
+                // Max i + j = (size - strLen) + (strLen - 1) = size - 1.
+                // This index is guaranteed to be within the valid range [0, size - 1]
+                // and also within the buffer capacity [0, buffer.length - 1] since size <= buffer.length.
                 if (str.charAt(j) != thisBuf[i + j]) {
-                    continue outer;
+                    continue outer; // Mismatch, advance outer loop to the next possible start index 'i'
                 }
             }
-            return i;
+            return i; // Found a match starting at index i
         }
-        return -1;
+
+        return -1; // No match found
     }
\ No newline at end of file
