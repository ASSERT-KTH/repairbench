diff --git a/tmp/8f04c4db-6d86-41f3-805b-4ad51b485dd3_buggy.java b/tmp/29d560c9-0500-4fae-8a1e-75fb2fe2e834_fixed.java
index addeb8d..c07dc06 100644
--- a/tmp/8f04c4db-6d86-41f3-805b-4ad51b485dd3_buggy.java
+++ b/tmp/29d560c9-0500-4fae-8a1e-75fb2fe2e834_fixed.java
@@ -1,38 +1,44 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
         if (strLen > size) {
             return -1;
         }
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        // The loop needs to search up to the point where the remaining buffer
+        // is large enough to hold the search string. The maximum starting index
+        // is size - strLen. Therefore, the loop limit is size - strLen + 1.
+        // Original code used buffer.length which could be larger than size,
+        // causing reads beyond the logical end of the string, potentially
+        // leading to ArrayIndexOutOfBoundsException if deletions occurred.
+        int loopLimit = size - strLen + 1;
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i < loopLimit; i++) {
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
\ No newline at end of file
