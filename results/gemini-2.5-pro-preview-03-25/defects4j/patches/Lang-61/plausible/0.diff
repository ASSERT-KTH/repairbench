diff --git a/tmp/4a038b5a-93cc-4f74-88b9-c7c24b6b0cd5_buggy.java b/tmp/2c7ab403-ebf7-416d-b94b-c20d896b1cb2_fixed.java
index addeb8d..fd728fe 100644
--- a/tmp/4a038b5a-93cc-4f74-88b9-c7c24b6b0cd5_buggy.java
+++ b/tmp/2c7ab403-ebf7-416d-b94b-c20d896b1cb2_fixed.java
@@ -1,38 +1,45 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
-        if (strLen > size) {
+        // Check if the search string is longer than the current content
+        // or if the startIndex already puts it past the possible start position
+        if (strLen > size || startIndex > size - strLen) {
             return -1;
         }
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        // The maximum index to start the comparison is size - strLen
+        int loopEnd = size - strLen; 
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= loopEnd; i++) {
             for (int j = 0; j < strLen; j++) {
+                // Check bounds isn't strictly necessary here due to loopEnd calculation,
+                // but defensively ensures we don't read past 'size' if logic changed elsewhere.
+                // However, the primary fix is the loopEnd calculation.
+                // The original code's i < (thisBuf.length - strLen) was the main issue.
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
\ No newline at end of file
