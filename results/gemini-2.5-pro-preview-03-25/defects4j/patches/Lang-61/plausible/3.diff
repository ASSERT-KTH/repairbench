diff --git a/tmp/351fd25a-35f8-4db7-85ce-227dbc8b3cbb_buggy.java b/tmp/931bc466-d15a-4d72-97c5-a822af4dd7a8_fixed.java
index addeb8d..8ada2f8 100644
--- a/tmp/351fd25a-35f8-4db7-85ce-227dbc8b3cbb_buggy.java
+++ b/tmp/931bc466-d15a-4d72-97c5-a822af4dd7a8_fixed.java
@@ -1,38 +1,49 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      *
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
         if (strLen > size) {
             return -1;
         }
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        // Calculate the maximum possible starting index based on 'size'
+        // The loop should not search beyond the actual content defined by 'size'.
+        // The last possible starting index 'i' is such that 'i + strLen <= size'.
+        int loopEnd = size - strLen;
         outer:
-        for (int i = startIndex; i < len; i++) {
+        // Loop from the given startIndex up to the maximum valid starting index.
+        for (int i = startIndex; i <= loopEnd; i++) {
             for (int j = 0; j < strLen; j++) {
+                // Compare characters. Access 'thisBuf[i + j]' is safe because:
+                // max i = size - strLen
+                // max j = strLen - 1
+                // max index = (size - strLen) + (strLen - 1) = size - 1
+                // Since size <= buffer.length, size - 1 < buffer.length.
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
+            // Inner loop completed without mismatch, found the string.
             return i;
         }
+        // String not found.
         return -1;
     }
\ No newline at end of file
