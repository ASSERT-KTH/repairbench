diff --git a/tmp/6af211bc-96e8-4740-aaa3-bea7e86a0a3d_buggy.java b/tmp/772a8582-28c8-482c-8426-570ed2bcba48_fixed.java
index addeb8d..12b98fd 100644
--- a/tmp/6af211bc-96e8-4740-aaa3-bea7e86a0a3d_buggy.java
+++ b/tmp/772a8582-28c8-482c-8426-570ed2bcba48_fixed.java
@@ -1,38 +1,61 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
+        // Clamp startIndex to the valid range [0, size]
+        // Note: The original code clamped to [0, infinity), but the check
+        // startIndex >= size handled the upper bound. Clamping to 0 is correct.
         startIndex = (startIndex < 0 ? 0 : startIndex);
+
+        // Early exit conditions
         if (str == null || startIndex >= size) {
             return -1;
         }
+
         int strLen = str.length();
         if (strLen == 1) {
+            // Optimization for single character search
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
+            // Empty string is always found at the starting index
             return startIndex;
         }
         if (strLen > size) {
+            // The string to find is longer than the content of the builder
             return -1;
         }
+
+        // The search should occur within the actual content (size), not the buffer capacity (buffer.length).
+        // Calculate the maximum possible starting index in the buffer for the string str to fit.
+        // The last possible starting position is size - strLen.
+        int loopEnd = size - strLen;
+
+        // Use the local buffer reference for performance and consistency during the search
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        
+        // Label for breaking out of the outer loop upon mismatch
         outer:
-        for (int i = startIndex; i < len; i++) {
+        // Iterate through possible starting indices from startIndex up to loopEnd (inclusive)
+        for (int i = startIndex; i <= loopEnd; i++) {
+            // Compare characters of str with the substring in the buffer starting at index i
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
+                    // Character mismatch, move to the next possible starting index in the buffer
                     continue outer;
                 }
             }
+            // All characters matched, return the starting index i
             return i;
         }
+
+        // String not found in the specified range
         return -1;
     }
\ No newline at end of file
