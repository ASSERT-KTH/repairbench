diff --git a/tmp/c6f5d8bc-b3c4-4838-8ae1-7aaee105ec1a_buggy.java b/tmp/ab5c008f-350a-46da-a821-2d718620d863_fixed.java
index addeb8d..82a3445 100644
--- a/tmp/c6f5d8bc-b3c4-4838-8ae1-7aaee105ec1a_buggy.java
+++ b/tmp/ab5c008f-350a-46da-a821-2d718620d863_fixed.java
@@ -1,38 +1,66 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
+        // Ensure startIndex is valid
         startIndex = (startIndex < 0 ? 0 : startIndex);
+
+        // Check for edge cases: null string, startIndex out of bounds
         if (str == null || startIndex >= size) {
             return -1;
         }
+        
         int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
-        }
+
+        // Empty string is found at the start index
         if (strLen == 0) {
+            // The condition startIndex >= size is already checked above.
+            // If size is 0, startIndex must also be 0 here.
             return startIndex;
         }
+
+        // Use faster search for single character
+        if (strLen == 1) {
+            return indexOf(str.charAt(0), startIndex);
+        }
+
+        // Cannot find a string longer than the current size
         if (strLen > size) {
             return -1;
         }
+
+        // Check for search string within the available characters
+        // The loop needs to go up to size - strLen to avoid accessing indices beyond 'size'
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        int loopEnd = size - strLen; // Calculate the correct upper bound for the loop
+
+        // If startIndex is already past the point where the string could possibly fit
+        if (startIndex > loopEnd) {
+             return -1;
+        }
+
         outer:
-        for (int i = startIndex; i < len; i++) {
+        // Iterate through possible start positions in the buffer
+        // The loop index 'i' should go up to and including 'loopEnd'
+        for (int i = startIndex; i <= loopEnd; i++) {
+            // Check if the substring starting at 'i' matches 'str'
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
+                    // Mismatch found, continue to the next possible start position
                     continue outer;
                 }
             }
+            // Full match found
             return i;
         }
+        
+        // String not found
         return -1;
     }
\ No newline at end of file
