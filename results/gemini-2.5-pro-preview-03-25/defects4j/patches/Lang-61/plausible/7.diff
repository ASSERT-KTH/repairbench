diff --git a/tmp/2cb0e890-87d1-4bb7-9e05-96e85129fd52_buggy.java b/tmp/0ccfadda-e331-4801-8776-e51e9bd77e73_fixed.java
index addeb8d..0a7ea1e 100644
--- a/tmp/2cb0e890-87d1-4bb7-9e05-96e85129fd52_buggy.java
+++ b/tmp/0ccfadda-e331-4801-8776-e51e9bd77e73_fixed.java
@@ -1,38 +1,53 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
+            // Rely on correct indexOf(char, int) implementation
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
+            // Empty string search: returns startIndex if startIndex < size (due to earlier check)
             return startIndex;
         }
-        if (strLen > size) {
+        // Check if the substring is longer than the remaining builder content
+        // This also implicitly handles strLen > size when startIndex is 0.
+        if (strLen > size - startIndex) {
+             // We check against size - startIndex because we only care about the part
+             // of the buffer from startIndex onwards.
+             // Note: if strLen > size, this condition will also be true for startIndex=0.
             return -1;
         }
+        // If we got here: str != null, strLen > 1, 0 <= startIndex < size, strLen <= size - startIndex
+
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        // The maximum index in the outer loop is 'size - strLen'
+        // This ensures that the inner loop access 'thisBuf[i + j]' does not go
+        // beyond 'thisBuf[size - 1]', as max(i) = size - strLen and max(j) = strLen - 1,
+        // so max(i + j) = (size - strLen) + (strLen - 1) = size - 1.
+        int loopLimit = size - strLen; 
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= loopLimit; i++) {
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
-                    continue outer;
+                    continue outer; // Mismatch, advance the starting position 'i'
                 }
             }
+            // If the inner loop completes, we found a match
             return i;
         }
+        // Substring not found
         return -1;
     }
\ No newline at end of file
