diff --git a/tmp/bbfdb29c-1282-47aa-ad6a-7f6d4c12935c_buggy.java b/tmp/483ce2b9-eb3f-435e-9907-89adfd1b897b_fixed.java
index addeb8d..441d5c4 100644
--- a/tmp/bbfdb29c-1282-47aa-ad6a-7f6d4c12935c_buggy.java
+++ b/tmp/483ce2b9-eb3f-435e-9907-89adfd1b897b_fixed.java
@@ -1,38 +1,71 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
+        // Validate startIndex
         startIndex = (startIndex < 0 ? 0 : startIndex);
+
+        // Check arguments
         if (str == null || startIndex >= size) {
             return -1;
         }
+
         int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
-        }
+
+        // Empty string is always found at startIndex
         if (strLen == 0) {
+            // Following JDK String.indexOf semantics
             return startIndex;
         }
+
+        // Cannot find string if it's longer than the remaining buffer
         if (strLen > size) {
              return -1;
         }
-        char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+
+        // Single character search can be delegated to indexOf(char, int)
+        // which might be optimized
+        if (strLen == 1) {
+            return indexOf(str.charAt(0), startIndex);
+        }
+
+        // Calculate the maximum possible starting index for the search string
+        // The loop should go up to (size - strLen) inclusive
+        int loopEnd = size - strLen;
+
+        // If startIndex is already past the maximum possible starting index,
+        // the string cannot be found.
+        if (startIndex > loopEnd) {
+            return -1;
+        }
+
+        char[] thisBuf = buffer; // Use local variable for potential performance improvement
+
+        // Naive string search (could be optimized with KMP or Boyer-Moore)
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= loopEnd; i++) {
             for (int j = 0; j < strLen; j++) {
+                // Check characters. Accessing thisBuf[i + j] is safe because:
+                // max(i) = loopEnd = size - strLen
+                // max(j) = strLen - 1
+                // max(i + j) = (size - strLen) + (strLen - 1) = size - 1
+                // which is the last valid index in the logical buffer content [0, size - 1]
                 if (str.charAt(j) != thisBuf[i + j]) {
+                    // Mismatch found, continue search from the next possible starting index i
                     continue outer;
                 }
             }
+            // Inner loop completed without mismatch, pattern found.
             return i;
         }
+
+        // String not found in the specified range
         return -1;
     }
\ No newline at end of file
