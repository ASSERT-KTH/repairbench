diff --git a/tmp/701119d2-f20c-4889-a3d1-0aacc5b2060d_buggy.java b/tmp/d5c95094-8257-4df5-967b-e934fa2c66f6_fixed.java
index e8705ac..2fe6719 100644
--- a/tmp/701119d2-f20c-4889-a3d1-0aacc5b2060d_buggy.java
+++ b/tmp/d5c95094-8257-4df5-967b-e934fa2c66f6_fixed.java
@@ -1,24 +1,46 @@
+import com.google.common.base.Preconditions;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.jscomp.NodeUtil;
+
+// The surrounding class structure is omitted for brevity,
+// only the fixed function is provided.
+
+class Fix {
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
       // ignore cast nodes.
+      Node effectiveCallee = first;
+      if (effectiveCallee.isCast()) {
+        effectiveCallee = effectiveCallee.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+
+      // A call node is a free call if its FIRST child is not a GETPROP or a GETELEM.
+      // Example:
+      //   foo() -> free call
+      //   a.b() -> not a free call
+      //   a[b]() -> not a free call
+      //   (function(){})() -> free call
+      //   (function(){}.bind(this))() -> not a free call
+      if (!NodeUtil.isGet(effectiveCallee)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      if (effectiveCallee.isName() &&
+          "eval".equals(effectiveCallee.getString())) {
+        // The DIRECT_EVAL property should be set on the NAME node itself.
+        effectiveCallee.putBooleanProp(Node.DIRECT_EVAL, true);
+      }
     }
 }
\ No newline at end of file
