diff --git a/tmp/5a7f5254-1e56-4819-a78e-d8a93ce53ce0_buggy.java b/tmp/70895df1-d832-4f73-8b35-1b751007ccf9_fixed.java
index e8705ac..71552a8 100644
--- a/tmp/5a7f5254-1e56-4819-a78e-d8a93ce53ce0_buggy.java
+++ b/tmp/70895df1-d832-4f73-8b35-1b751007ccf9_fixed.java
@@ -1,24 +1,37 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
-      Node first = n.getFirstChild();
+      Node callee = n.getFirstChild();
 
-      // ignore cast nodes.
+      // Ignore cast nodes. Cast nodes are artifacts of the type system
+      // that should not affect how we treat the code at runtime.
+      while (callee.isCast()) {
+        callee = callee.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // A call is free if the callee is not a GETPROP or GETELEM.
+      // Examples: foo(), (0, foo)(), (!foo)()
+      // These calls have a 'this' of window in non-strict mode
+      // and 'undefined' in strict mode.
+      if (!NodeUtil.isGet(callee)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // A direct call to eval is SELECTED_PROPERTY_CALL when the callee is
+      // a NAME node storing "eval".
+      if (callee.isName() &&
+          "eval".equals(callee.getString())) {
+        // Note: We annotate the NAME node, not the CALL node.
+        // This annotation is consumed by other passes like CheckGlobalThis
+        // and potentially optimizations.
+        callee.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
