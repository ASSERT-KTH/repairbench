diff --git a/tmp/8483cb89-e1f0-45c4-8398-6f55bd48cc11_buggy.java b/tmp/252bf2b8-dd31-4886-84cd-5b35d497063c_fixed.java
index e8705ac..f9c19eb 100644
--- a/tmp/8483cb89-e1f0-45c4-8398-6f55bd48cc11_buggy.java
+++ b/tmp/252bf2b8-dd31-4886-84cd-5b35d497063c_fixed.java
@@ -1,24 +1,32 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
+      Node function = first; // The node representing the function being called
 
-      // ignore cast nodes.
+      // Ignore cast nodes. Look at the expression being cast to determine call
+      // type, but leave the CAST node in place.
+      if (function.isCast()) {
+        function = function.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // A call is a free call if the function expression is not a GETPROP or GETELEM.
+      if (!NodeUtil.isGet(function)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // Check the function expression, potentially after looking through a cast.
+      if (function.isName() &&
+          "eval".equals(function.getString())) {
+        // Mark the NAME node as a direct eval call.
+        function.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
