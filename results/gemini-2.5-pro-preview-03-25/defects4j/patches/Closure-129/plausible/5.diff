diff --git a/tmp/1d209ea8-6a6c-4202-aaeb-7513a65246b7_buggy.java b/tmp/eb784242-c9dd-439e-9ae9-ff49a850e643_fixed.java
index e8705ac..3d13d74 100644
--- a/tmp/1d209ea8-6a6c-4202-aaeb-7513a65246b7_buggy.java
+++ b/tmp/eb784242-c9dd-439e-9ae9-ff49a850e643_fixed.java
@@ -1,24 +1,40 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // Find the real function node. Skip casts.
+      Node callee = first;
+      while (callee.isCast()) {
+        callee = callee.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // A call is a free call if the function expression is not a property
+      // access node.
+      // Examples:
+      //   foo()
+      //   (0, foo)()
+      //   (function () {})();
+      // Cases that are not free calls:
+      //   obj.foo()
+      //   obj['foo']()
+      //   (new Foo).bar()
+      if (!NodeUtil.isGet(callee)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
+      // A direct call to eval is needed to trigger the direct eval warning.
+      // Note: Calls like "foo.eval()" are not direct calls.
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
