diff --git a/tmp/cf885bdb-408a-4995-a307-7a7a8092feb3_buggy.java b/tmp/d97dde4c-871a-4d5e-b034-dc756b7bc9f5_fixed.java
index e8705ac..6476008 100644
--- a/tmp/cf885bdb-408a-4995-a307-7a7a8092feb3_buggy.java
+++ b/tmp/d97dde4c-871a-4d5e-b034-dc756b7bc9f5_fixed.java
@@ -1,24 +1,48 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
+      Node functionExpr = first;
 
-      // ignore cast nodes.
+      // Ignore cast nodes when determining the call type. A cast represents a type annotation,
+      // not a change in the function expression itself for determining 'this'.
+      // For example, /** @type {function()} */ (foo.bar)() should not be a free call.
+      if (functionExpr.isCast()) {
+          functionExpr = functionExpr.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // A call is a free call if the function expression is not a GETPROP or GETELEM.
+      // Examples of non-free calls:
+      // obj.method() -> first child is GETPROP
+      // obj['method']() -> first child is GETELEM
+      // (expr).method() -> first child is GETPROP
+      // (/** @type {function()} */ (obj.method))() -> functionExpr is GETPROP after skipping CAST
+      //
+      // Examples of free calls:
+      // foo() -> first child is NAME
+      // (function() {})() -> first child is FUNCTION
+      // (0, foo)() -> first child is COMMA
+      if (!NodeUtil.isGet(functionExpr)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
+      // A direct eval call is needed for determining the scope of variables declared
+      // within the eval'd code. Only direct calls to the global eval function modify
+      // the local scope. Calls like x.eval(), (0, eval)(), etc., are indirect and
+      // execute in the global scope.
+      // We only annotate the NAME node "eval" if it appears directly as the function
+      // to be called (the first child of CALL). Casts are not ignored here, as
+      // (/** @type {function()} */ eval)() is not considered a direct eval call by EcmaScript spec.
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
