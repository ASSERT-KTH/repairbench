diff --git a/tmp/8c26afd9-a197-4f27-b1b5-07fe621ee21c_buggy.java b/tmp/a7b07848-0fc6-476a-9b8c-662b0a89970c_fixed.java
index e8705ac..4682e1e 100644
--- a/tmp/8c26afd9-a197-4f27-b1b5-07fe621ee21c_buggy.java
+++ b/tmp/a7b07848-0fc6-476a-9b8c-662b0a89970c_fixed.java
@@ -1,24 +1,33 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // If the function expression is enclosed in a cast, look inside the cast
+      // to determine the nature of the function expression.
+      Node functionExpr = first;
+      if (functionExpr.isCast()) {
+        functionExpr = functionExpr.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // A call is a free call if the function expression is not a property access
+      // (i.e., not foo.bar() or foo['bar']()). Casts have already been unwrapped.
+      if (!NodeUtil.isGet(functionExpr)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // A direct eval call is the NAME 'eval' itself, potentially after unwrapping casts.
+      if (functionExpr.isName() &&
+          "eval".equals(functionExpr.getString())) {
+        // Mark the NAME node as a direct eval reference.
+        functionExpr.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
