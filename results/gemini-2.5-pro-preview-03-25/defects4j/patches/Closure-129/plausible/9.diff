diff --git a/tmp/08142611-de98-4553-bf7b-22b49778d7a2_buggy.java b/tmp/218f9f8a-2b1b-4b12-8e49-07b102624ab4_fixed.java
index e8705ac..b0e871b 100644
--- a/tmp/08142611-de98-4553-bf7b-22b49778d7a2_buggy.java
+++ b/tmp/218f9f8a-2b1b-4b12-8e49-07b102624ab4_fixed.java
@@ -1,24 +1,33 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
-      Node first = n.getFirstChild();
+      Node firstChild = n.getFirstChild();
+      Node functionExpr = firstChild;
 
-      // ignore cast nodes.
+      // ignore cast nodes. Find the real function expression.
+      while (functionExpr.isCast()) {
+        functionExpr = functionExpr.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // A call without an explicit "this" is a free call.
+      // A call on a GETPROP or GETELEM has an explicit this.
+      if (!NodeUtil.isGet(functionExpr)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // A direct call to eval is calligraphy of the form eval(...).
+      // Check the unwrapped function expression.
+      if (functionExpr.isName() &&
+          "eval".equals(functionExpr.getString())) {
+        // Mark the actual NAME node as a direct eval call.
+        functionExpr.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
