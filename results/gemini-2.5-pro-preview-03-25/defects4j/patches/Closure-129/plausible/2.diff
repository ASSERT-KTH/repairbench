diff --git a/tmp/18469b06-0cc5-4366-9426-ed52590db1c8_buggy.java b/tmp/446bfadb-4837-44cb-bf24-b4b309d14126_fixed.java
index e8705ac..7f31fb4 100644
--- a/tmp/18469b06-0cc5-4366-9426-ed52590db1c8_buggy.java
+++ b/tmp/446bfadb-4837-44cb-bf24-b4b309d14126_fixed.java
@@ -1,24 +1,31 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // ignore cast nodes by looking at the node inside the cast.
+      Node functionExpr = first;
+      if (functionExpr.isCast()) {
+        functionExpr = functionExpr.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // A call is a free call if the function expression is not a GETPROP or GETELEM.
+      if (!NodeUtil.isGet(functionExpr)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // A cast like /** @type {function()} */ (eval) is still a direct eval.
+      if (functionExpr.isName() &&
+          "eval".equals(functionExpr.getString())) {
+        // Mark the NAME node itself as a direct eval call.
+        functionExpr.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
