diff --git a/tmp/e483c272-5aa2-4b96-a706-acd9a77d27d2_buggy.java b/tmp/74dc1159-afeb-49d5-8887-81309f087101_fixed.java
index e8705ac..7ee5b92 100644
--- a/tmp/e483c272-5aa2-4b96-a706-acd9a77d27d2_buggy.java
+++ b/tmp/74dc1159-afeb-49d5-8887-81309f087101_fixed.java
@@ -1,24 +1,41 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // ignore cast nodes. (Note: In Closure Compiler, casts are typically JSType info
+      // attached to the node, not separate AST nodes. This comment might be historical
+      // or refer to a different representation.)
 
-      if (!NodeUtil.isGet(first)) {
+      // Resolve the callee, looking through comma operators, e.g. (0, foo)().
+      // The last part of the comma expression determines the function to call
+      // and how 'this' is bound. If it's a GETPROP/GETELEM, 'this' is preserved.
+      Node callee = first;
+      if (callee.isComma()) {
+        callee = callee.getLastChild();
+      }
+
+      // A free call is one where 'this' is not set explicitly by the call syntax.
+      // This happens when the called expression (after resolving comma)
+      // is not a property access (GETPROP or GETELEM).
+      if (!NodeUtil.isGet(callee)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
+      // A "direct eval" call specifically means the syntax eval(...).
+      // We check if the *original* first child node (before comma resolution)
+      // is the NAME 'eval'.
       if (first.isName() &&
           "eval".equals(first.getString())) {
+        // Mark the NAME node ('eval') itself as being used in a direct eval call.
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
