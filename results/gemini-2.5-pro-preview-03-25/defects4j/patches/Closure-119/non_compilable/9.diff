diff --git a/tmp/2b82d9a8-1340-4aab-a8ca-2c33a03fa398_buggy.java b/tmp/4edf58e2-bcf3-450d-a79b-46f0729eaaa0_fixed.java
index 6dd359b..454e913 100644
--- a/tmp/2b82d9a8-1340-4aab-a8ca-2c33a03fa398_buggy.java
+++ b/tmp/4edf58e2-bcf3-450d-a79b-46f0729eaaa0_fixed.java
@@ -1,125 +1,154 @@
+    @Override
     public void collect(JSModule module, Scope scope, Node n) {
       Node parent = n.getParent();
 
       String name;
       boolean isSet = false;
       Name.Type type = Name.Type.OTHER;
       boolean isPropAssign = false;
 
       switch (n.getType()) {
         case Token.GETTER_DEF:
         case Token.SETTER_DEF:
         case Token.STRING_KEY:
           // This may be a key in an object literal declaration.
           name = null;
           if (parent != null && parent.isObjectLit()) {
             name = getNameForObjLitKey(n);
           }
           if (name == null) {
             return;
           }
           isSet = true;
           switch (n.getType()) {
             case Token.STRING_KEY:
               type = getValueType(n.getFirstChild());
               break;
             case Token.GETTER_DEF:
               type = Name.Type.GET;
               break;
             case Token.SETTER_DEF:
               type = Name.Type.SET;
               break;
             default:
               throw new IllegalStateException("unexpected:" + n);
           }
           break;
         case Token.NAME:
           // This may be a variable get or set.
           if (parent != null) {
             switch (parent.getType()) {
               case Token.VAR:
                 isSet = true;
                 Node rvalue = n.getFirstChild();
                 type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
                 break;
               case Token.ASSIGN:
                 if (parent.getFirstChild() == n) {
                   isSet = true;
                   type = getValueType(n.getNext());
                 }
                 break;
               case Token.GETPROP:
+                // A NAME node that's the first child of a GETPROP is not a global name reference,
+                // it's the base of the qualified name. The GETPROP node itself will handle the
+                // actual reference check. Return early to avoid processing it independently.
                 return;
               case Token.FUNCTION:
                 Node gramps = parent.getParent();
                 if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
+                  // Function expression names are not global.
                   return;
                 }
+                // Function declaration name.
                 isSet = true;
                 type = Name.Type.FUNCTION;
                 break;
               case Token.INC:
               case Token.DEC:
                 isSet = true;
                 type = Name.Type.OTHER;
                 break;
               default:
                 if (NodeUtil.isAssignmentOp(parent) &&
                     parent.getFirstChild() == n) {
                   isSet = true;
                   type = Name.Type.OTHER;
                 }
             }
           }
           name = n.getString();
           break;
         case Token.GETPROP:
           // This may be a namespaced name get or set.
-          if (parent != null) {
-            switch (parent.getType()) {
-              case Token.ASSIGN:
-                if (parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = getValueType(n.getNext());
-                  isPropAssign = true;
-                }
-                break;
-              case Token.INC:
-              case Token.DEC:
-                isSet = true;
-                type = Name.Type.OTHER;
-                break;
-              case Token.GETPROP:
-                return;
-              default:
-                if (NodeUtil.isAssignmentOp(parent) &&
-                    parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = Name.Type.OTHER;
-                }
-            }
-          }
           name = n.getQualifiedName();
           if (name == null) {
             return;
           }
+
+          // Check if the base of the qualified name is local. If so, this GETPROP
+          // doesn't represent a global name reference, even if the full name isn't
+          // declared locally. e.g., `local_var.foo`.
+          Node base = NodeUtil.getRootOfQualifiedName(n);
+          if (base != null && base.isName()) {
+             String baseName = base.getString();
+             Var v = scope.getVar(baseName);
+             // If the base name corresponds to a Var that is NOT global and NOT extern,
+             // then this GETPROP is operating on a non-global variable, so we can ignore it.
+             if (v != null && !v.isGlobal() && !v.isExtern()) {
+                return; // Not a potential global name reference.
+             }
+             // If v is null, or it's global/extern, we fall through to the checks below.
+          } else {
+             // Base is not a simple name (e.g., `({}).foo` or `this.foo`). Not a global name reference
+             // of the type we are tracking here. `this` is handled separately if needed.
+             return;
+          }
+
+          if (parent != null) {
+            switch (parent.getType()) {
+              case Token.ASSIGN:
+                if (parent.getFirstChild() == n) {
+                  isSet = true;
+                  type = getValueType(n.getNext());
+                  isPropAssign = true;
+                }
+                break;
+              case Token.INC:
+              case Token.DEC:
+                isSet = true;
+                type = Name.Type.OTHER;
+                break;
+              // NOTE(nicksantos): We used to have a GETPROP case here, but
+              // it is unnecessary. We should only care about GETPROPs that
+              // are props of other GETPROPs if they are assigning to
+              // that property.
+              default:
+                if (NodeUtil.isAssignmentOp(parent) &&
+                    parent.getFirstChild() == n) {
+                  isSet = true;
+                  type = Name.Type.OTHER;
+                }
+            }
+          }
+          // name is already set above
           break;
         default:
           return;
       }
 
       // We are only interested in global names.
       if (!isGlobalNameReference(name, scope)) {
         return;
       }
 
       if (isSet) {
         if (isGlobalScope(scope)) {
           handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
         } else {
           handleSetFromLocal(module, scope, n, parent, name);
         }
       } else {
         handleGet(module, scope, n, parent, name);
       }
     }
\ No newline at end of file
