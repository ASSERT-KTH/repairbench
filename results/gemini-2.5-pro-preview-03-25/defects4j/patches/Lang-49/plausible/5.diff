diff --git a/tmp/b0609421-6c5c-4d36-9184-6119aee780ca_buggy.java b/tmp/26c77717-df14-45fb-aceb-d811ae6ec0ac_fixed.java
index 08e51e4..07dd3ae 100644
--- a/tmp/b0609421-6c5c-4d36-9184-6119aee780ca_buggy.java
+++ b/tmp/26c77717-df14-45fb-aceb-d811ae6ec0ac_fixed.java
@@ -1,16 +1,50 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+        // Handle zero numerator
+        if (numerator == 0) {
+            // Ensure we return the canonical ZERO instance unless this fraction is already ZERO.
+            return equals(ZERO) ? this : ZERO;
+        }
+
+        int n = numerator;
+        int d = denominator;
+        boolean signNormalized = false;
+
+        // Normalize sign so denominator is positive.
+        // The standard representation of a fraction has a positive denominator.
+        if (d < 0) {
+            // Check for potential overflow before negating.
+            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: can't negate");
+            }
+            n = -n;
+            d = -d;
+            // Keep track if normalization happened, as we'll need a new Fraction instance.
+            signNormalized = true; 
+        }
+
+        // Calculate gcd using positive values (d is guaranteed positive here).
+        // Use Math.abs(n) in case the numerator was Integer.MIN_VALUE and couldn't be negated before.
+        // (Although the check above handles the case where d was negative,
+        // n could still be MIN_VALUE if d was positive originally).
+        int gcd = greatestCommonDivisor(Math.abs(n), d);
+
+        // Check if already reduced (after potential sign normalization).
         if (gcd == 1) {
-            return this;
+            // If we normalized the sign, we must return a new instance
+            // with the normalized values. Otherwise, the fraction was already
+            // in reduced, normalized form, so return the original instance 'this'.
+            return signNormalized ? Fraction.getFraction(n, d) : this;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+
+        // Create reduced fraction using the (potentially sign-normalized) numerator and denominator.
+        return Fraction.getFraction(n / gcd, d / gcd);
     }
\ No newline at end of file
