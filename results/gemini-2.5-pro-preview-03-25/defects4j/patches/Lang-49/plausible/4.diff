diff --git a/tmp/85673bff-6658-49be-b836-d31c05f574e6_buggy.java b/tmp/df6e2a21-0c77-491d-b02b-566fe83d308f_fixed.java
index 08e51e4..cffe250 100644
--- a/tmp/85673bff-6658-49be-b836-d31c05f574e6_buggy.java
+++ b/tmp/df6e2a21-0c77-491d-b02b-566fe83d308f_fixed.java
@@ -1,16 +1,47 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      *
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
-            return this;
+        // Handle zero numerator
+        if (numerator == 0) {
+            // Check if it's already the canonical 0/1 fraction (Fraction.ZERO)
+            // We assume Fraction.getFraction(0, 1) returns Fraction.ZERO
+            // or that equals properly handles comparison to Fraction.ZERO.
+            // A direct check avoids potential issues with equals or ZERO instance state.
+            return equals(Fraction.ZERO) ? this : Fraction.ZERO;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+
+        // Normalize sign: ensure denominator is positive for calculations and final result
+        int n = numerator;
+        int d = denominator;
+        if (d < 0) {
+            // Check for potential overflow if numerator or denominator is Integer.MIN_VALUE
+            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: can't negate");
+            }
+            n = -n;
+            d = -d;
+        }
+
+        // Calculate GCD using absolute value of numerator and (now positive) denominator
+        int gcd = greatestCommonDivisor(Math.abs(n), d);
+
+        // Check if already reduced (gcd=1) and sign was already normalized (original denominator > 0)
+        if (gcd == 1 && denominator > 0) {
+             return this; // No change needed
+        }
+
+        // Perform reduction
+        int reducedNumerator = n / gcd;
+        int reducedDenominator = d / gcd; // Denominator is now guaranteed positive
+
+        // Return the reduced fraction using the factory method
+        // This ensures cached instances (like Fraction.ZERO, ONE etc.) are used if applicable.
+        return Fraction.getFraction(reducedNumerator, reducedDenominator);
     }
\ No newline at end of file
