diff --git a/tmp/224090b8-ffe6-488c-8a31-8d9b8f193267_buggy.java b/tmp/f80e2ef2-c273-41cb-8002-5a9c0a0798d9_fixed.java
index 08e51e4..14867b9 100644
--- a/tmp/224090b8-ffe6-488c-8a31-8d9b8f193267_buggy.java
+++ b/tmp/f80e2ef2-c273-41cb-8002-5a9c0a0798d9_fixed.java
@@ -1,16 +1,48 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+        // Special case: numerator is zero, return the canonical ZERO instance
+        // unless this fraction is already structurally equal to ZERO (0/1).
+        if (numerator == 0) {
+            return equals(Fraction.ZERO) ? this : Fraction.ZERO;
+        }
+
+        int n = numerator;
+        int d = denominator;
+        boolean signChangeNeeded = false; // Flag to track if normalization changed the sign representation
+
+        // Ensure denominator is positive for the canonical reduced form.
+        // If denominator is negative, flip signs of both numerator and denominator.
+        if (d < 0) {
+            // Check for potential overflow before negating.
+            // This matches the overflow check in Fraction.negate().
+            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: can't negate fraction");
+            }
+            n = -n;
+            d = -d;
+            signChangeNeeded = true; // Sign normalization occurred, may require a new instance
+        }
+
+        // Calculate the greatest common divisor of the absolute values.
+        // d is guaranteed to be positive here.
+        int gcd = greatestCommonDivisor(Math.abs(n), d);
+
+        // If the gcd is 1 and no sign change was needed for normalization,
+        // the fraction is already in its simplest, normalized form. Return this.
+        if (gcd == 1 && !signChangeNeeded) {
              return this;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+        
+        // Otherwise, create and return the new reduced fraction instance.
+        // Use the potentially sign-flipped numerator (n) and the positive denominator (d),
+        // both divided by the gcd.
+        return Fraction.getFraction(n / gcd, d / gcd);
     }
\ No newline at end of file
