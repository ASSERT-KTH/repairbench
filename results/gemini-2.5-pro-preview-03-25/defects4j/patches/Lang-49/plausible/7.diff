diff --git a/tmp/2a183437-5e58-42b5-b5fe-6b546464ab5f_buggy.java b/tmp/f6d09bb5-c273-4c12-b448-499d118fa0c8_fixed.java
index 08e51e4..78a9778 100644
--- a/tmp/2a183437-5e58-42b5-b5fe-6b546464ab5f_buggy.java
+++ b/tmp/f6d09bb5-c273-4c12-b448-499d118fa0c8_fixed.java
@@ -1,16 +1,53 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+        // Handle numerator = 0 case directly
+        if (numerator == 0) {
+            // Check if the denominator is already 1 (already the standard ZERO form)
+            // The equals method considers Fraction(0, k) == Fraction(0, 1)
+            return equals(Fraction.ZERO) ? this : Fraction.ZERO;
+        }
+
+        int n = numerator;
+        int d = denominator;
+        
+        // Normalize sign: ensure denominator is positive.
+        // Keep track if the sign representation was changed.
+        boolean signChanged = false;
+        if (d < 0) {
+            // Check for potential overflow on negation
+            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: can't negate");
+            }
+            n = -n;
+            d = -d;
+            signChanged = true; // Sign normalization occurred
+        }
+
+        // Calculate GCD of absolute values.
+        // d is guaranteed positive here. Use Math.abs(n) for the numerator.
+        int gcd = greatestCommonDivisor(Math.abs(n), d);
+
+        // If GCD is 1, no division is needed for reduction.
         if (gcd == 1) {
-            return this;
+            // If the sign was normalized (original denominator was negative),
+            // we must return a new fraction with the normalized sign.
+            // Otherwise (gcd is 1 and sign was already correct), return this instance.
+            return signChanged ? Fraction.getFraction(n, d) : this;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+
+        // GCD > 1, so reduction by division is required.
+        // Divide the sign-normalized numerator and denominator by the GCD.
+        n = n / gcd;
+        d = d / gcd;
+
+        // Return the new, reduced, and sign-normalized fraction instance.
+        return Fraction.getFraction(n, d);
     }
\ No newline at end of file
