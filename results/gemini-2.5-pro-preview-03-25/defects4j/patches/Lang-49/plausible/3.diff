diff --git a/tmp/7d122a62-662d-4f1c-83e8-868ae7042b4b_buggy.java b/tmp/41d37964-f95a-4e47-9576-b0c7822b80d1_fixed.java
index 08e51e4..9d145e4 100644
--- a/tmp/7d122a62-662d-4f1c-83e8-868ae7042b4b_buggy.java
+++ b/tmp/41d37964-f95a-4e47-9576-b0c7822b80d1_fixed.java
@@ -1,16 +1,40 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+        // Handle numerator is zero -> reduced form is 0/1
+        if (numerator == 0) {
+            // Optimization: return this if it's already 0/1. Otherwise return the ZERO singleton.
+            // Fraction.ZERO is assumed to be the singleton for 0/1.
+            // If 'this' fraction might be 0/N where N != 1, always returning Fraction.ZERO ensures 0/1.
+            return equals(Fraction.ZERO) ? this : Fraction.ZERO;
+        }
+
+        // Calculate the greatest common divisor of the absolute values
+        // Ensure denominator is non-zero (guaranteed by constructor/getFraction)
+        int common = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+
+        // If the gcd is 1 and the denominator is positive, the fraction is already
+        // in its simplest, normalized form.
+        if (common == 1 && denominator > 0) {
              return this;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+        
+        // Otherwise, perform the reduction and let getFraction handle
+        // potential sign normalization (ensuring denominator is positive)
+        // and potential reuse of singleton instances (like 1/1).
+        // getFraction also handles potential overflow issues during negation.
+        return Fraction.getFraction(numerator / common, denominator / common);
     }
+
+    // Note: The greatestCommonDivisor method is not provided, but is assumed
+    // to correctly calculate the GCD for non-negative integers.
+    // Standard GCD definition: gcd(a, b) = gcd(|a|, |b|), gcd(n, 0) = |n|.
+    // The code relies on a helper method like:
+    // private static int greatestCommonDivisor(int u, int v) { ... }
\ No newline at end of file
