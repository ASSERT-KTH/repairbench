diff --git a/tmp/1a8445c7-fb9e-4468-82b9-7b37fdf171c3_buggy.java b/tmp/0c2aca36-056b-4f43-bb4a-f74ef12887a4_fixed.java
index 08e51e4..a7eb423 100644
--- a/tmp/1a8445c7-fb9e-4468-82b9-7b37fdf171c3_buggy.java
+++ b/tmp/0c2aca36-056b-4f43-bb4a-f74ef12887a4_fixed.java
@@ -1,16 +1,48 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+        // handle potential zero numerator
+        if (numerator == 0) {
+            // Check if it's already the canonical ZERO fraction
+            return equals(Fraction.ZERO) ? this : Fraction.ZERO;
+        }
+        
+        int n = numerator;
+        int d = denominator;
+
+        // ensure denominator is positive for calculations and final result
+        // keep track if the sign needed normalization
+        boolean signNormalized = false;
+        if (d < 0) {
+            // check for overflow
+            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: can't negate");
+            }
+            n = -n;
+            d = -d;
+            signNormalized = true; // Sign had to be normalized
+        }
+
+        // calculate the greatest common divisor using absolute values (d is now positive)
+        int gcd = greatestCommonDivisor(Math.abs(n), d);
+
+        // if gcd is 1 and no sign normalization was needed, it's already reduced
+        if (gcd == 1 && !signNormalized) {
             return this;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+
+        // perform reduction
+        n = n / gcd;
+        d = d / gcd;
+        
+        // return the reduced fraction using the factory method
+        // (which might return cached instances for common fractions)
+        return Fraction.getFraction(n, d);
     }
\ No newline at end of file
