diff --git a/tmp/31de6fbb-fc96-4502-a3fd-6eb2b4d8664e_buggy.java b/tmp/b84b5cba-6c48-497b-ba36-bd0e2aa1fdd1_fixed.java
index 08e51e4..2763271 100644
--- a/tmp/31de6fbb-fc96-4502-a3fd-6eb2b4d8664e_buggy.java
+++ b/tmp/b84b5cba-6c48-497b-ba36-bd0e2aa1fdd1_fixed.java
@@ -1,16 +1,35 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
+        // Handle numerator equals zero specially, returning the canonical ZERO fraction.
+        // This avoids potential issues with gcd(0, denominator) and ensures the 0/100 case reduces correctly.
+        // We return ZERO unless the fraction is already 0/1, in which case we return this
+        // to satisfy assertSame checks in tests.
+        if (numerator == 0) {
+            return (denominator == 1) ? this : Fraction.ZERO;
+        }
+        
+        // Ensure denominator is positive (should be guaranteed by getFraction factory)
+        // Calculate GCD using the absolute value of the numerator.
+        // The greatestCommonDivisor method handles signs internally or expects non-negative inputs.
+        // Since getFraction ensures denominator is positive, we only need Math.abs for numerator.
         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+        
+        // If the greatest common divisor is 1, the fraction is already reduced.
+        // The denominator is also guaranteed positive at this point.
         if (gcd == 1) {
             return this;
         }
+        
+        // Divide numerator and denominator by the GCD to get the reduced fraction.
+        // Fraction.getFraction handles potential sign normalization if necessary,
+        // although denominator/gcd should remain positive.
         return Fraction.getFraction(numerator / gcd, denominator / gcd);
     }
\ No newline at end of file
