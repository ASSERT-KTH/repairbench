diff --git a/tmp/938437c9-1659-4567-a501-7a4a98b22cec_buggy.java b/tmp/e91857a0-3049-4ce6-b3ba-50231eca1f16_fixed.java
index 08e51e4..4aa828e 100644
--- a/tmp/938437c9-1659-4567-a501-7a4a98b22cec_buggy.java
+++ b/tmp/e91857a0-3049-4ce6-b3ba-50231eca1f16_fixed.java
@@ -1,16 +1,50 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+        // Handle zero numerator
+        if (numerator == 0) {
+            // Ensure the canonical Fraction.ZERO (0/1) is returned,
+            // unless this fraction is already Fraction.ZERO.
+            // However, Fraction.ZERO is likely defined as getFraction(0, 1),
+            // so returning it directly handles all zero numerator cases correctly.
+            return Fraction.ZERO;
+        }
+
+        int n = numerator;
+        int d = denominator;
+
+        // Ensure denominator is positive for normalization and GCD calculation
+        if (d < 0) {
+            // Check for potential overflow before negating.
+            // Negating MIN_VALUE causes overflow.
+            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: can't negate");
+            }
+            n = -n;
+            d = -d;
+        }
+
+        // Calculate GCD of absolute values. 
+        // Assumes greatestCommonDivisor handles potential MIN_VALUE in Math.abs(n) if n was MIN_VALUE.
+        // d is guaranteed positive here.
+        int gcd = greatestCommonDivisor(Math.abs(n), d);
+
+        // Check if already reduced and normalized.
+        // If gcd is 1 (already in lowest terms) and the denominator was originally positive
+        // (meaning no sign normalization was needed), then this fraction is already
+        // in the canonical reduced form.
+        if (gcd == 1 && denominator > 0) {
              return this;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+
+        // Return the newly created reduced fraction.
+        // The numerator n and denominator d have been adjusted for sign already.
+        return Fraction.getFraction(n / gcd, d / gcd);
     }
\ No newline at end of file
