diff --git a/tmp/4b6e8f56-70b9-457c-8770-202ceecddd9d_buggy.java b/tmp/ce608d6d-eedf-4c1a-89b7-503eaf1d932e_fixed.java
index 08e51e4..d3b8f89 100644
--- a/tmp/4b6e8f56-70b9-457c-8770-202ceecddd9d_buggy.java
+++ b/tmp/ce608d6d-eedf-4c1a-89b7-503eaf1d932e_fixed.java
@@ -1,16 +1,68 @@
+import static org.apache.commons.lang.math.NumberUtils.greatestCommonDivisor; // Required import
+
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
+     * <p>The resulting fraction will always have a positive denominator.</p>
+     *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+        // Handle zero numerator case specially: 0/d reduces to 0/1
+        if (numerator == 0) {
+            // Optimization: return existing ZERO instance if this fraction equals it (i.e. is 0/1), 
+            // otherwise return the canonical ZERO instance.
+            // Assumes equals() compares numerator and denominator fields directly.
+            // Assumes ZERO is the canonical Fraction(0, 1).
+            return equals(ZERO) ? this : ZERO;
+        }
+
+        int n = numerator;
+        int d = denominator;
+        
+        // Ensure denominator is positive for canonical representation.
+        // This also simplifies GCD calculation as we can use absolute values.
+        boolean signNeedsNormalization = (d < 0);
+        if (signNeedsNormalization) {
+            // Check for overflow before negating. MIN_VALUE cannot be safely negated.
+            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {
+                throw new ArithmeticException("overflow: reduce");
+            }
+            n = -n;
+            d = -d;
+        }
+
+        // Calculate the greatest common divisor of the absolute values.
+        // Note: d is guaranteed positive here. 
+        // The gcd function in commons-lang handles signs and potentially MIN_VALUE correctly.
+        // We use Math.abs(n) to be safe, assuming gcd expects non-negative inputs or handles negative n correctly.
+        int commonDivisor = greatestCommonDivisor(Math.abs(n), d);
+
+        // If the gcd is 1, the fraction is numerically irreducible.
+        if (commonDivisor == 1) {
+            // If the sign was normalized (original denominator was negative),
+            // the representation has changed, so we need a new Fraction instance
+            // with the normalized (positive) denominator.
+            if (signNeedsNormalization) {
+                // Use factory method to potentially reuse cached instances
+                return Fraction.getFraction(n, d); // Use normalized values n and d
+            } else {
+                // If no sign normalization occurred and gcd is 1, the fraction
+                // is already in its simplest, canonical form. Return this instance
+                // as required by the documentation ("or this if no simplification possible").
                 return this;
             }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+        }
+
+        // Reduce the fraction by dividing the numerator and denominator by the gcd.
+        // n retains the sign, d is positive.
+        n = n / commonDivisor;
+        d = d / commonDivisor;
+        
+        // Return the new, reduced fraction instance using the factory method.
+        return Fraction.getFraction(n, d);
     }
\ No newline at end of file
