diff --git a/tmp/15fb537a-bd3c-451e-9941-32004b33b652_buggy.java b/tmp/f713c6e4-63d9-49db-b1d1-ca800941d32c_fixed.java
index 00914da..61c6519 100644
--- a/tmp/15fb537a-bd3c-451e-9941-32004b33b652_buggy.java
+++ b/tmp/f713c6e4-63d9-49db-b1d1-ca800941d32c_fixed.java
@@ -1,17 +1,25 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
-        for (Node node: element.childNodes) {
+        for (Node node: element.childNodes()) { // Use childNodes() for a defensive copy
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
+                // Check if the text node is effectively empty (whitespace only)
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
+        // Insert the collected nodes at the beginning of the body, maintaining their relative order.
+        // Use an explicit index for insertion.
+        int insertIndex = 0;
         for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            element.removeChild(node); // Remove from original parent (e.g., <html>)
+            // Insert the node at the beginning of the body. Incrementing the index ensures
+            // nodes that appeared later in the original parent still appear later
+            // relative to other moved nodes, but all moved nodes are placed at the start
+            // of the body element.
+            body().insertChildren(insertIndex, node); 
+            insertIndex++; // Increment index for the next node to maintain order
         }
     }
\ No newline at end of file
