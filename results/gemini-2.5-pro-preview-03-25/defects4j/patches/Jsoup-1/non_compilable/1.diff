diff --git a/tmp/e35269a8-2b06-4933-be18-e37635c4b2c9_buggy.java b/tmp/950e653b-150e-47cb-a023-a3b79455c75a_fixed.java
index 00914da..589c486 100644
--- a/tmp/e35269a8-2b06-4933-be18-e37635c4b2c9_buggy.java
+++ b/tmp/950e653b-150e-47cb-a023-a3b79455c75a_fixed.java
@@ -1,17 +1,26 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
+        // Find non-blank text nodes directly under the element (e.g., <html>)
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
-        for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        // Move the collected nodes to the start of the body() element.
+        // Iterate in reverse order to prepend them, maintaining their original relative order at the start.
+        for (int i = toMove.size() - 1; i >= 0; i--) {
+            Node node = toMove.get(i);
+            element.removeChild(node); // Remove from original parent (e.g., html)
+
+            // If the body is not empty, prepend a space before inserting the node
+            // to ensure separation from existing body content.
+            if (body().childNodeSize() > 0) {
+                body().prependChild(new TextNode(" ", ""));
+            }
+            body().prependChild(node); // Prepend the actual node (e.g., "foo") to the start of the body
         }
     }
\ No newline at end of file
