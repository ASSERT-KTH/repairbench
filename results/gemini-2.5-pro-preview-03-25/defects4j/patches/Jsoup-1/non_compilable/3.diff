diff --git a/tmp/c2e837d8-4732-4b24-860c-dc0fc7199df8_buggy.java b/tmp/d87edb69-33e1-42ec-8ba1-fbac662b369f_fixed.java
index 00914da..f857c4d 100644
--- a/tmp/c2e837d8-4732-4b24-860c-dc0fc7199df8_buggy.java
+++ b/tmp/d87edb69-33e1-42ec-8ba1-fbac662b369f_fixed.java
@@ -1,17 +1,28 @@
-    // does not recurse.
+    // moves any text nodes that aren't blank into the start of the body, normalised.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
+                // Keep track of non-blank text nodes referenced from the html element list.
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
-        for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        // Iterate backwards through the list to maintain insertion order when prepending
+        ListIterator<Node> iter = toMove.listIterator(toMove.size());
+        while (iter.hasPrevious()) {
+            Node node = iter.previous();
+            element.removeChild(node); // remove from original parent (e.g. html)
+
+            // If the body element currently has any children, add a space before prepending the text node.
+            // This ensures separation between the moved text and existing body content, 
+            // and also between consecutively moved text nodes.
+            if (body().childNodeSize() > 0) {
+                 body().prependChild(new TextNode(" ", ""));
+            }
+            // Prepend the text node to the start of the body element.
+            body().prependChild(node);
         }
     }
\ No newline at end of file
