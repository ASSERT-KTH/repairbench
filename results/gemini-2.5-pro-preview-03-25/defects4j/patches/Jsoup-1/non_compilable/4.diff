diff --git a/tmp/f1833351-c4a9-4316-aac2-67b82c360a07_buggy.java b/tmp/54e039e3-9b3d-45d2-a390-da7b3113543f_fixed.java
index 00914da..4bd4d59 100644
--- a/tmp/f1833351-c4a9-4316-aac2-67b82c360a07_buggy.java
+++ b/tmp/54e039e3-9b3d-45d2-a390-da7b3113543f_fixed.java
@@ -1,17 +1,38 @@
-    // does not recurse.
+    // normalises the document after parsing. Moves any text nodes that are
+    // direct children of the html element into the start of the body element.
     private void normalise(Element element) {
-        List<Node> toMove = new ArrayList<Node>();
+        List<Node> toMove = new ArrayList<>(); // Use diamond operator for cleaner generics
         for (Node node: element.childNodes) {
+            // Node iterators can be sensitive to modification during iteration.
+            // However, we collect nodes first and modify the parent later.
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
-                    toMove.add(tn);
+                // Keep track of non-blank text nodes directly under the root element.
+                if (!tn.isBlank()) {
+                    toMove.add(node);
                 }
             }
+        }
+
+        // Now, move the collected text nodes to the beginning of the body.
+        if (!toMove.isEmpty()) { // Only proceed if there are nodes to move
+            Element body = body(); // Get the body element (assuming this method exists and returns the body)
+            if (body != null) { // Ensure body element exists
 
+                // Remove the nodes from their original parent (the root element) first.
+                // Iterating through the collected list `toMove` is safe.
                 for (Node node : toMove) {
                     element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+                }
+
+                // Insert the nodes at the beginning of the body element.
+                // Convert the List to an array for the addChildren method.
+                Node[] nodesToInsert = toMove.toArray(new Node[0]);
+                // The addChildren(index, nodes...) method inserts the nodes sequentially
+                // starting at the specified index, shifting existing children.
+                // Inserting at index 0 places them at the very beginning.
+                body.addChildren(0, nodesToInsert);
+            }
+            // If body is null (which is unlikely for standard HTML docs), the nodes are just removed from the root.
         }
     }
\ No newline at end of file
