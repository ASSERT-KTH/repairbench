diff --git a/tmp/076f34d2-a95f-44dd-8a9c-bda56ea50832_buggy.java b/tmp/754b73d3-ea0e-4993-a297-dd0ff956142d_fixed.java
index 00914da..397f879 100644
--- a/tmp/076f34d2-a95f-44dd-8a9c-bda56ea50832_buggy.java
+++ b/tmp/754b73d3-ea0e-4993-a297-dd0ff956142d_fixed.java
@@ -1,17 +1,36 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
+        Node insertBefore = null;
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
+                if (!tn.isBlank()) {
                     toMove.add(tn);
                 }
+            } else if (!(node instanceof LeafNode)) { // e.g. <head>, <body>. Stop once we hit a non-leaf node.
+                 insertBefore = node;
+                 break;
+            }
+            // Note: Originally, this collected all TextNodes under element.
+            // The corrected logic (implicit via finding insertBefore) focuses on text nodes
+            // that appear *before* the first structural element like <body> or <frameset>,
+            // which is the typical scenario this normalization handles (like text before <html>).
+            // If insertBefore remains null, it implies only text nodes or leaf nodes were found,
+            // and they will be moved into the body if it exists.
         }
 
-        for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        // Move the collected text nodes into the body, placed at the start.
+        Element body = body(); // Assumes body() finds or creates the body element
+        if (body != null) {
+             // Insert nodes at the beginning of the body, preserving order.
+             // Iterate backwards through toMove to prepend correctly.
+            for (int i = toMove.size() - 1; i >= 0; i--) {
+                Node node = toMove.get(i);
+                element.removeChild(node); // Remove from original parent (e.g., html)
+                body.prependChild(node);   // Prepend to the body
             }
         }
+        // If body is null (e.g., in frameset), the nodes are simply removed. This might be intended
+        // or might need further refinement depending on edge cases, but fixes the primary reported bug.
+    }
\ No newline at end of file
