diff --git a/tmp/bcc2d25c-af6d-4ee0-8648-b27d2fb8cbdc_buggy.java b/tmp/083cc29b-a299-47e2-ade4-82786d8d0cd4_fixed.java
index 00914da..00e7434 100644
--- a/tmp/bcc2d25c-af6d-4ee0-8648-b27d2fb8cbdc_buggy.java
+++ b/tmp/083cc29b-a299-47e2-ade4-82786d8d0cd4_fixed.java
@@ -1,17 +1,37 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
-        for (Node node: element.childNodes) {
+        // 1. Find non-blank text nodes to move.
+        // We iterate over a copy of the child nodes list, so removing nodes during iteration is safe.
+        for (Node node: element.childNodes()) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
+                // Check if the text node contains non-whitespace characters.
                 if (!tn.isBlank())
-                    toMove.add(tn);
+                    toMove.add(node); // Add the node to the list of nodes to be moved.
             }
+            // Note: This implementation only considers TextNodes for moving.
+            // Depending on the broader context, other node types (e.g., comments)
+            // found outside the body might also need normalization.
         }
 
-        for (Node node: toMove) {
+        // 2. Move the collected nodes to the start of the body element.
+        // Iterate backwards through the list of nodes to move. This ensures that
+        // when prepended one by one, they end up in their original relative order
+        // at the beginning of the body.
+        // E.g., if toMove is ["foo", "bar"], first "bar" is prepended, then "foo"
+        // is prepended, resulting in body children starting with ["foo", "bar"].
+        for (int i = toMove.size() - 1; i >= 0; i--) {
+            Node node = toMove.get(i);
+            // Remove the node from its original parent ('element').
             element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            // Prepend the node to the beginning of the document's body element.
+            // body() is assumed to return the correct body element.
+            body().prependChild(node);
+            // The original buggy code appended a space and then the node to the *end*
+            // of the body. This fix moves the node to the *beginning* and omits
+            // the questionable space addition, as the primary issue was the location.
+            // Spacing around the moved nodes should ideally be handled by the
+            // structure or later processing like text extraction.
         }
     }
\ No newline at end of file
