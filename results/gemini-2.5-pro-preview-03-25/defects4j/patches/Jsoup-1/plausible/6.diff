diff --git a/tmp/dbcc3567-7000-4173-8f42-67f80238a7b9_buggy.java b/tmp/bbde9490-8e48-40cd-a16d-318312453b9b_fixed.java
index 00914da..b3ebfae 100644
--- a/tmp/dbcc3567-7000-4173-8f42-67f80238a7b9_buggy.java
+++ b/tmp/bbde9490-8e48-40cd-a16d-318312453b9b_fixed.java
@@ -1,17 +1,22 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
-        for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        // Iterate in reverse order to prepend nodes at the beginning of the body,
+        // maintaining their original relative order.
+        for (int i = toMove.size() - 1; i >= 0; i--) {
+            Node node = toMove.get(i);
+            element.removeChild(node); // Remove from original parent (e.g., <html>)
+            // Ensure body() exists, Jsoup parser does this, but good practice if method used elsewhere
+            if (body() != null) { 
+                body().prependChild(node);  // Prepend to the start of <body>
+            }
         }
     }
