diff --git a/tmp/2ecdc95c-84a2-4493-a0cd-85d5a95b0fb7_buggy.java b/tmp/d7d90907-b0cc-4993-b9f7-9f8c6105cfba_fixed.java
index b05b859..c1e1031 100644
--- a/tmp/2ecdc95c-84a2-4493-a0cd-85d5a95b0fb7_buggy.java
+++ b/tmp/d7d90907-b0cc-4993-b9f7-9f8c6105cfba_fixed.java
@@ -1,61 +1,64 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
+          DiagnosticGroups.PARSER_ERRORS, // Updated to use the correct group
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
-    guards.add(options.getWarningsGuard());
-
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+    // checks the externs file for validity. If checkSymbols is turned off,
+    // we should disable the specific CHECK_VARIABLES warnings unless they
+    // are explicitly enabled by the user, as the user's settings should
+    // take precedence.
+    if (!options.checkSymbols && !options.enables(DiagnosticGroups.CHECK_VARIABLES)) {
+      // Add a guard to potentially disable CHECK_VARIABLES if checkSymbols is off.
+      // This comes *before* the options guard, so the options guard can override it.
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
+    // Add the user-defined warnings guard. This should be late in the list
+    // so that command-line flags like --jscomp_error=checkVariables have
+    // the final say.
+    guards.add(options.getWarningsGuard());
+
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
