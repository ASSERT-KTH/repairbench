diff --git a/tmp/9edba398-79ce-449c-bbc2-08b9dbb3bc4a_buggy.java b/tmp/d93b34a1-3903-45b4-883d-907bfb657523_fixed.java
index b05b859..1d5071d 100644
--- a/tmp/9edba398-79ce-449c-bbc2-08b9dbb3bc4a_buggy.java
+++ b/tmp/d93b34a1-3903-45b4-883d-907bfb657523_fixed.java
@@ -1,61 +1,79 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
+      // option, and checkTypes is disabled, then turn off the
+      // parser type warnings. Note that this is different from the
+      // logic above, because the default is STANDARD WARNINGS, not
+      // OFF.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
+    // Add the user-specified guards first.
     guards.add(options.getWarningsGuard());
 
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+    // checks the externs file for validity. If checkSymbols is disabled,
+    // we may need to disable the checkVariables warnings explicitly,
+    // but only if the user hasn't already explicitly enabled them.
+    boolean checkVariablesExplicitlyEnabled =
+        options.jscompError.containsKey(DiagnosticGroups.CHECK_VARIABLES) ||
+        options.jscompWarning.containsKey(DiagnosticGroups.CHECK_VARIABLES);
+
+    // If checkSymbols is off AND the user hasn't explicitly enabled
+    // CHECK_VARIABLES warnings/errors, add a guard to turn them off.
+    // This ensures VarCheck runs for synthesis but respects user's choice
+    // on whether to see the warnings/errors. This guard is added AFTER
+    // the user's guards, so it takes precedence in ComposeWarningsGuard
+    // if added.
+    if (!options.checkSymbols && !checkVariablesExplicitlyEnabled) {
+        // Check if the warning level implicitly enables check variables.
+        // If the effective level from user guards is OFF, then we don't need
+        // to add our suppressing guard. However, checking effective level is hard.
+        // Instead, we rely on the fact that if checkSymbols is false, the default
+        // behavior should be to suppress checkVariable warnings unless explicitly enabled.
+        // The logic above handles the explicit enablement case. So, if not explicitly
+        // enabled, and checkSymbols is false, suppress it.
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
