diff --git a/tmp/b9913ab8-c0b3-45e7-975a-ed39c69d3cdf_buggy.java b/tmp/436dae1a-3895-40d6-88ed-a342269dfab9_fixed.java
index b05b859..fe128c8 100644
--- a/tmp/b9913ab8-c0b3-45e7-975a-ed39c69d3cdf_buggy.java
+++ b/tmp/436dae1a-3895-40d6-88ed-a342269dfab9_fixed.java
@@ -1,61 +1,81 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
+      // option, and checkTypes is disabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
-    guards.add(options.getWarningsGuard());
+    // Add the guard specified by the options (e.g., from --jscomp_error flags)
+    WarningsGuard optionsGuard = options.getWarningsGuard();
+    guards.add(optionsGuard);
 
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+    // checks the externs file for validity. If checkSymbols is off
+    // (e.g. due to --warning_level=QUIET), we disable the checkVariables
+    // warnings, UNLESS the user explicitly overrides the error level for
+    // that group via flags.
+    DiagnosticGroup checkVariablesGroup = DiagnosticGroups.CHECK_VARIABLES;
+    boolean checkVarsExplicitlySet = false;
+    // Check if optionsGuard explicitly sets a level for the CHECK_VARIABLES group.
+    if (checkVariablesGroup != null && !checkVariablesGroup.getErrors().isEmpty()) {
+      // Create a dummy JSError; only its type (and thus group) matters for level checking.
+      DiagnosticType representativeError = checkVariablesGroup.getErrors().iterator().next();
+      JSError dummyError = JSError.make(representativeError);
+      if (optionsGuard.level(dummyError) != null) {
+        // A non-null level indicates the user explicitly set the level for this group.
+        checkVarsExplicitlySet = true;
+      }
+    }
+
+    // If checkSymbols is disabled (e.g., by QUIET level) AND the user hasn't
+    // explicitly set a level for CHECK_VARIABLES, then add a guard to disable it.
+    if (!options.checkSymbols && !checkVarsExplicitlySet) {
+      if (checkVariablesGroup != null) { // Ensure group is valid before using
           guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+              checkVariablesGroup, CheckLevel.OFF));
+      }
     }
 
+    // Compose the final warnings guard. The order ensures that explicit settings
+    // in optionsGuard are consulted, and the checkSymbols guard is added only if needed.
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
