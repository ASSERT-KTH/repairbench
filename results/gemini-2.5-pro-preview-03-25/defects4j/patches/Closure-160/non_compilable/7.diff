diff --git a/tmp/38d30168-e439-481b-81be-2fdb1b942ef5_buggy.java b/tmp/123789cb-9108-4f41-936c-9d27347329f5_fixed.java
index b05b859..f1b6784 100644
--- a/tmp/38d30168-e439-481b-81be-2fdb1b942ef5_buggy.java
+++ b/tmp/123789cb-9108-4f41-936c-9d27347329f5_fixed.java
@@ -1,61 +1,73 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
+      // option, and checkTypes is disabled, then turn off the
+      // parser type warnings. Note that checkTypes is implicitly
+      // enabled by enableAllChecks, but this doesn't override that.
+      // It only strengthens the warning guard *if* checkTypes is already off.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
+
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
-    guards.add(options.getWarningsGuard());
+    guards.add(options.getWarningsGuard()); // Add the guard reflecting command-line flags etc.
 
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+    // checks the externs file for validity. If checkSymbols is disabled,
+    // and the user hasn't explicitly set a level for `CHECK_VARIABLES`,
+    // we disable this check.
+    if (!options.checkSymbols) {
+      // Check if the user has explicitly set a warning level for CHECK_VARIABLES.
+      // This guards against warnings generated by turning checkSymbols off,
+      // unless the user has explicitly requested warnings/errors for this group.
+      boolean checkVariablesExplicitlySet =
+          options.getWarningLevel(DiagnosticGroups.CHECK_VARIABLES) != null;
+
+      if (!checkVariablesExplicitlySet) {
+        // If checkSymbols is disabled, and the user hasn't explicitly
+        // set a level for CHECK_VARIABLES, disable it by adding an OFF guard.
         guards.add(new DiagnosticGroupWarningsGuard(
             DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
       }
+    }
 
+    // Set the composed warnings guard
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
