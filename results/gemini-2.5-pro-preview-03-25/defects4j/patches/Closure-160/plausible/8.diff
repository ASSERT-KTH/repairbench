diff --git a/tmp/875ee98f-7eb2-4589-81c4-96e1d07f9d78_buggy.java b/tmp/7c148938-dd40-4205-8285-20e573cce81c_fixed.java
index b05b859..6873bf9 100644
--- a/tmp/875ee98f-7eb2-4589-81c4-96e1d07f9d78_buggy.java
+++ b/tmp/7c148938-dd40-4205-8285-20e573cce81c_fixed.java
@@ -1,61 +1,73 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
+
+    // 1. Suppress specific warnings like DocWarnings (lowest precedence).
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
-    guards.add(options.getWarningsGuard());
 
+    // 2. Guard based on options (--warning_level, --jscomp_error, etc.).
+    // This guard should reflect the configuration explicitly set by the user.
+    WarningsGuard optionsGuard = options.getWarningsGuard();
+    guards.add(optionsGuard);
 
+
+    // 3. Override based on checkSymbols (highest precedence).
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
+    // checks the externs file for validity. If checkSymbols is off,
+    // we disable CHECK_VARIABLES warnings, *unless* the user explicitly
+    // enabled them via options (e.g., --jscomp_error=checkVars).
     if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+        !optionsGuard.enables(DiagnosticGroups.CHECK_VARIABLES)) {
+      // If checkSymbols is off AND CHECK_VARIABLES is not already enabled by options,
+      // add a guard to turn CHECK_VARIABLES off. This guard will be checked first
+      // by ComposeWarningsGuard due to being added last to the list, effectively
+      // giving it the highest precedence among these standard guards.
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
+    // Compose the guards. Guards added later in the list have higher precedence
+    // when ComposeWarningsGuard evaluates levels.
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
