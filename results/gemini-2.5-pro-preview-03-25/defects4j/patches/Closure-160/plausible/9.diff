diff --git a/tmp/dc9f01a9-2ca4-4c1b-bb20-c5e259081626_buggy.java b/tmp/941702fc-40cc-455b-9ad0-e0dbc0ea7c65_fixed.java
index b05b859..3701419 100644
--- a/tmp/dc9f01a9-2ca4-4c1b-bb20-c5e259081626_buggy.java
+++ b/tmp/941702fc-40cc-455b-9ad0-e0dbc0ea7c65_fixed.java
@@ -1,61 +1,72 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
+      // option, and checkTypes is *false*, then turn off the
+      // parser type warnings. Note: this is the inverse of the original logic.
+      // If checkTypes is false (either explicitly or by default), then parser errors
+      // that report type information should be ignored.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
+
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
-    guards.add(options.getWarningsGuard());
+
+    // Make sure the options guard is created and added BEFORE the check below.
+    WarningsGuard optionsGuard = options.getWarningsGuard();
+    guards.add(optionsGuard);
 
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
+    // about missing variable declarations (checkSymbols is false), we shut
+    // that specific error off *unless* the options explicitly enable it.
+    // Use the optionsGuard we just created, not the potentially null/uninitialized this.warningsGuard.
     if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
+        (optionsGuard == null || !optionsGuard.enables( // Check if the options DON'T enable the group
             DiagnosticGroups.CHECK_VARIABLES))) {
+      // If checkSymbols is off AND the user hasn't explicitly turned
+      // on CHECK_VARIABLES (or parts of it) via flags, add a guard
+      // to turn it off.
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
+    // Compose the guards. The order determines precedence (first one wins).
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
