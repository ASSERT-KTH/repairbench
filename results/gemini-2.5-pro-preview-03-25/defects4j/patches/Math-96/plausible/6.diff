diff --git a/tmp/ffdf401e-aaf9-46ca-9539-61fb6eeda287_buggy.java b/tmp/b46cb22b-17bd-4b07-8fd5-4ce25d2a6295_fixed.java
index f674e52..c0c3508 100644
--- a/tmp/ffdf401e-aaf9-46ca-9539-61fb6eeda287_buggy.java
+++ b/tmp/b46cb22b-17bd-4b07-8fd5-4ce25d2a6295_fixed.java
@@ -1,41 +1,36 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to 
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      * 
      */
     public boolean equals(Object other) {
-        boolean ret;
-        
-        if (this == other) { 
-            ret = true;
-        } else if (other == null) {
-            ret = false;
-        } else  {
-            try {
+        if (this == other) { // Check for identity
+            return true;
+        }
+        if (other instanceof Complex) { // Check for null and type
             Complex rhs = (Complex) other;
-                if (rhs.isNaN()) {
-                    ret = this.isNaN();
-                } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+            // Check for NaN: they are equal iff both are NaN
+            if (this.isNaN() || rhs.isNaN()) {
+                return this.isNaN() && rhs.isNaN();
             }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
+            // If neither is NaN, compare components using standard double equality (==)
+            // This treats +0.0 and -0.0 as equal, matching the behavior required by tests like testMath221.
+            // The original code using Double.doubleToRawLongBits failed because it distinguishes +0.0 and -0.0.
+            return (real == rhs.real) && (imaginary == rhs.imaginary);
         }
-        }
-      
-        return ret;
+        // If other is null or not a Complex instance
+        return false;
     }
\ No newline at end of file
