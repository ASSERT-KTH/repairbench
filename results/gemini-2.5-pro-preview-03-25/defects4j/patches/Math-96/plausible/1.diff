diff --git a/tmp/40c37f70-1855-419d-ac29-d58d43acf949_buggy.java b/tmp/b53e27c7-6d0f-430c-b30b-1dfbdb20d215_fixed.java
index f674e52..93b8cf5 100644
--- a/tmp/40c37f70-1855-419d-ac29-d58d43acf949_buggy.java
+++ b/tmp/b53e27c7-6d0f-430c-b30b-1dfbdb20d215_fixed.java
@@ -1,41 +1,48 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to
      * <code>Complex.NaN</code>.</p>
+     * <p>
+     * Note that this implementation handles <code>+0.0</code> and
+     * <code>-0.0</code> appropriately. Specifically, <code>+0.0</code>
+     * and <code>-0.0</code> are considered equal in both the real and
+     * imaginary parts. For example, <code>Complex(0.0, 1.0)</code>
+     * is equal to <code>Complex(-0.0, 1.0)</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      *
      */
+    @Override
     public boolean equals(Object other) {
-        boolean ret;
-        
         if (this == other) {
-            ret = true;
-        } else if (other == null) {
-            ret = false;
-        } else  {
-            try {
+            return true; // Same object instance
+        }
+        if (other instanceof Complex) {
             Complex rhs = (Complex) other;
             if (rhs.isNaN()) {
-                    ret = this.isNaN();
+                // If other is NaN, this must also be NaN to be equal
+                return this.isNaN();
+            } else if (this.isNaN()) {
+                 // If this is NaN, but other is not, they are not equal.
+                 return false;
             } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                // Neither is NaN, compare real and imaginary parts.
+                // Use == comparison for doubles, which treats +0.0 and -0.0 as equal.
+                // This aligns with the behavior of Double.equals() but is simpler.
+                // The NaN case is handled above, so == works fine for finite values.
+                return (real == rhs.getReal()) && (imaginary == rhs.getImaginary());
             }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
         }
-        }
-      
-        return ret;
+        // other is null or not an instance of Complex
+        return false;
     }
\ No newline at end of file
