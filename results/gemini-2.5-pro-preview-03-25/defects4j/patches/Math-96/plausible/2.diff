diff --git a/tmp/126c6836-b310-4c61-9eda-28f608a292f7_buggy.java b/tmp/11c45126-c824-4b63-90c9-f8f5ef92c5da_fixed.java
index f674e52..26d064a 100644
--- a/tmp/126c6836-b310-4c61-9eda-28f608a292f7_buggy.java
+++ b/tmp/11c45126-c824-4b63-90c9-f8f5ef92c5da_fixed.java
@@ -1,41 +1,44 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      *
      */
     public boolean equals(Object other) {
-        boolean ret;
-        
-        if (this == other) { 
-            ret = true;
-        } else if (other == null) {
-            ret = false;
-        } else  {
-            try {
+        if (this == other) { // Check for identity.
+            return true;
+        }
+        if (other instanceof Complex) { // Check type and non-null.
             Complex rhs = (Complex) other;
             if (rhs.isNaN()) {
-                    ret = this.isNaN();
+                // If rhs is NaN, check if this is also NaN.
+                // All NaN values are considered equal.
+                return this.isNaN();
+            } else if (this.isNaN()) {
+                 // If this is NaN but rhs is not, they are not equal.
+                 return false;
             } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                // Neither is NaN. Compare components using standard ==
+                // This treats +0.0 and -0.0 as equal, which is required here.
+                // The original code used Double.doubleToRawLongBits, which
+                // distinguishes +0.0 and -0.0, causing the bug.
+                // Use getters for rhs for consistency with the original code snippet.
+                // Use direct field access for 'this'.
+                return (real == rhs.getReal()) && (imaginary == rhs.getImaginary());
             }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
         }
-        }
-      
-        return ret;
+        // other is null or not an instance of Complex.
+        return false;
     }
\ No newline at end of file
