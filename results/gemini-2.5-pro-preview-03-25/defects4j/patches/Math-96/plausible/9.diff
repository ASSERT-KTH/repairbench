diff --git a/tmp/0093a4e0-747f-40c5-b53b-affb990a79bc_buggy.java b/tmp/d80033af-12e8-4a07-9e48-866b242b6930_fixed.java
index f674e52..975a2b7 100644
--- a/tmp/0093a4e0-747f-40c5-b53b-affb990a79bc_buggy.java
+++ b/tmp/d80033af-12e8-4a07-9e48-866b242b6930_fixed.java
@@ -1,41 +1,41 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to 
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      * 
      */
     public boolean equals(Object other) {
-        boolean ret;
-        
         if (this == other) { 
-            ret = true;
-        } else if (other == null) {
-            ret = false;
-        } else  {
-            try {
+            return true; // Identity check
+        }
+        if (other instanceof Complex) { // Type check
             Complex rhs = (Complex) other;
-                if (rhs.isNaN()) {
-                    ret = this.isNaN();
+            // Check based on NaN status first, as Javadoc requires NaN==NaN
+            // (meaning Complex(NaN, y).equals(Complex(x, NaN)) is true)
+            if (this.isNaN() || rhs.isNaN()) {
+                // If either is NaN, they are equal iff both are NaN
+                return this.isNaN() && rhs.isNaN();
             } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                // Neither is NaN. Compare components numerically.
+                // Use standard double comparison '==' which treats +0.0 and -0.0 as equal.
+                // This is safe because NaN cases are already handled above (NaN == NaN is false).
+                // The original code used Double.doubleToRawLongBits which distinguishes +0.0 and -0.0,
+                // causing the test failure when Complex(0.0, -1.0) was compared to Complex(-0.0, -1.0).
+                return (real == rhs.getReal()) && (imaginary == rhs.getImaginary());
             }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
         }
-        }
-      
-        return ret;
+        // Not an instance of Complex or null (implicit from instanceof)
+        return false;
     }
\ No newline at end of file
