diff --git a/tmp/b13670d9-783d-40a5-99a2-9da91044c163_buggy.java b/tmp/51d5eb55-2e8d-4a0c-8003-264ba8e30976_fixed.java
index 192e83d..9380757 100644
--- a/tmp/b13670d9-783d-40a5-99a2-9da91044c163_buggy.java
+++ b/tmp/51d5eb55-2e8d-4a0c-8003-264ba8e30976_fixed.java
@@ -1,21 +1,40 @@
     /**
      * Return whether or not this entry represents a directory.
      *
      * @return True if this entry is a directory.
      */
     @Override
     public boolean isDirectory() {
         if (file != null) {
             return file.isDirectory();
         }
 
+        // Type flag '5' explicitly means directory
         if (linkFlag == LF_DIR) {
             return true;
         }
 
-        if (getName().endsWith("/")) {
+        // Check for known types that are definitely NOT directories.
+        // Trust the type flag over the name convention if the type flag is explicit.
+        // isFile() checks for LF_NORMAL, LF_OLDNORM, LF_CONTIG.
+        // Other checks cover links, symbolic links, devices, FIFOs, and special GNU/PAX headers.
+        if (isFile() || isLink() || isSymbolicLink() || isCharacterDevice()
+            || isBlockDevice() || isFIFO() || isGNULongLinkEntry()
+            || isGNULongNameEntry() || isGNUSparse() || isPaxHeader()
+            || isGlobalPaxHeader()) {
+            // If it's one of these types, it's not a directory, regardless of the name.
+            return false;
+        }
+
+        // Fallback: For unknown types or types where directory status is ambiguous (e.g., pre-POSIX tars),
+        // check the name convention. Need to handle potential null name.
+        final String name = getName();
+        if (name != null && name.endsWith("/")) {
+            // This covers cases like old tar versions without LF_DIR,
+            // or potentially corrupted archives where the type flag is missing or zero.
             return true;
         }
 
+        // Otherwise, it's not a directory.
         return false;
     }
\ No newline at end of file
