diff --git a/tmp/80946b53-cdb9-4778-9af6-8ab66b0dfa81_buggy.java b/tmp/571f40d2-3db2-4753-8748-b7c8c4c70930_fixed.java
index 192e83d..4aa2c07 100644
--- a/tmp/80946b53-cdb9-4778-9af6-8ab66b0dfa81_buggy.java
+++ b/tmp/571f40d2-3db2-4753-8748-b7c8c4c70930_fixed.java
@@ -1,21 +1,48 @@
     /**
      * Return whether or not this entry represents a directory.
      *
      * @return True if this entry is a directory.
      */
     @Override
     public boolean isDirectory() {
         if (file != null) {
             return file.isDirectory();
         }
 
         if (linkFlag == LF_DIR) {
             return true;
         }
 
+        // Tar files can designate directories using LF_DIR type flag,
+        // or by naming the entry with a trailing slash "/".
+        // Archive libraries should treat both cases as directories.
+        // However, some tar implementations (or bugs) might create entries
+        // for non-directory types (files, links) with names ending in "/".
+        // This check prioritizes the link flag for definitive non-directory types.
+
+        // If the flag is explicitly known not to be a directory, trust the flag, ignore the name.
+        // Note: LF_NORMAL (0) and LF_OLDNORM (\0) are ambiguous and can be used for directories
+        // by convention (name ending with "/"), so they are not included here.
+        boolean isExplicitNonDirectory =
+                linkFlag == LF_LINK        // Hard link
+             || linkFlag == LF_SYMLINK     // Symbolic link
+             || linkFlag == LF_CHR         // Character device
+             || linkFlag == LF_BLK         // Block device
+             || linkFlag == LF_FIFO        // FIFO queue
+             || linkFlag == LF_CONTIG      // Contiguous file
+             || linkFlag == LF_GNUTYPE_SPARSE; // GNU sparse file
+             // Includes are simplified, meta types like LongLink/PAX headers implicitly fall through
+             // as they won't have names ending in "/" representing user data directories.
+
+        if (isExplicitNonDirectory) {
+            return false;
+        }
+
+        // If the type flag is not definitively non-directory (i.e., it's LF_DIR already handled,
+        // LF_NORMAL, LF_OLDNORM, or unknown), then rely on the trailing slash convention.
         if (getName().endsWith("/")) {
             return true;
         }
 
         return false;
     }
\ No newline at end of file
