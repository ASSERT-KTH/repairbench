diff --git a/tmp/088f25f3-52a2-43da-b8a4-3d4be44731c4_buggy.java b/tmp/2da6e698-4eaf-44d5-8dc2-6b7ab7400ad1_fixed.java
index a7f0d46..268412b 100644
--- a/tmp/088f25f3-52a2-43da-b8a4-3d4be44731c4_buggy.java
+++ b/tmp/2da6e698-4eaf-44d5-8dc2-6b7ab7400ad1_fixed.java
@@ -1,22 +1,36 @@
   void add(String newcode) {
     maybeEndStatement();
 
     if (newcode.length() == 0) {
       return;
     }
 
     char c = newcode.charAt(0);
-    if ((isWordChar(c) || c == '\\') &&
-        isWordChar(getLastChar())) {
-      // need space to separate. This is not pretty printing.
+    // getLastChar() should return '\0' if the buffer is empty.
+    char last = getLastChar();
+
+    // Condition 1: Check if we need to separate two alphanumeric identifiers,
+    // or an identifier and a backslash (often used in unicode escape sequences).
+    if ((isWordChar(c) || c == '\\') && isWordChar(last)) {
+      // Need space to separate. This is not pretty printing.
       // For example: "return foo;"
       append(" ");
-      // Do not allow a forward slash to appear after a DIV.
-      // For example,
-      // REGEXP DIV REGEXP
-      // is valid and should print like
-      // / // / /
+
+    // Condition 2: Prevent consecutive operators that could be ambiguous
+    // or misinterpreted. Specifically, '/' followed by '/' can look like a comment
+    // start or be ambiguous in contexts like REGEXP / DIV / REGEXP.
+    // Add a space if the last character was '/' and the new code starts with '/'.
+    // This addresses the case like / / / becoming / / / / /.
+    // Similar logic applies to '+' and '-' to avoid ++ and -- ambiguity
+    // when two separate operators are intended.
+    } else if (c == last && (c == '/' || c == '+' || c == '-')) {
+      // Do not allow a forward slash to appear immediately after a DIV operator
+      // when followed by a REGEXP literal.
+      // For example, REGEXP / DIV / REGEXP should print like / / / / /
+      // rather than / / // /.
+      // Also handles x + + y and x - - y.
+      append(" ");
     }
 
     append(newcode);
   }
\ No newline at end of file
