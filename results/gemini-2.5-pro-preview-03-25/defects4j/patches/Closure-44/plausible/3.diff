diff --git a/tmp/387645aa-f69a-4659-83ff-e1822882a193_buggy.java b/tmp/b36d97df-3d40-411f-b088-51b8fa38a052_fixed.java
index a7f0d46..532c424 100644
--- a/tmp/387645aa-f69a-4659-83ff-e1822882a193_buggy.java
+++ b/tmp/b36d97df-3d40-411f-b088-51b8fa38a052_fixed.java
@@ -1,22 +1,41 @@
   void add(String newcode) {
     maybeEndStatement();
 
     if (newcode.length() == 0) {
       return;
     }
 
     char c = newcode.charAt(0);
-    if ((isWordChar(c) || c == '\\') &&
-        isWordChar(getLastChar())) {
-      // need space to separate. This is not pretty printing.
-      // For example: "return foo;"
+    // getLastChar() needs to return the last character written to the buffer,
+    // not the last significant character.
+    char last = getLastChar();
+
+    // Check if a space is needed before appending the new code.
+    boolean needsSpace = false;
+
+    // Original condition: Avoid merging two word characters (like "returnfoo").
+    // Added check for c == '\\' based on original code.
+    if ((isWordChar(c) || c == '\\') && isWordChar(last)) {
+      needsSpace = true;
+    }
+    // Fix for Issue 620: Prevent ambiguity when '/' follows '/'.
+    // This occurs when a division operator immediately follows a regex literal
+    // or when two division operators are adjacent (though less common).
+    // Example: /a/ / /b/ must be printed with a space in between the slashes
+    // to avoid being misinterpreted as /a///b/.
+    else if (c == '/' && last == '/') {
+      needsSpace = true;
+    }
+    // Future enhancement: Consider cases like "+ +" and "- -".
+    // else if ((c == '+' || c == '-') && c == last) {
+    //   needsSpace = true;
+    // }
+
+
+    if (needsSpace) {
+      // Insert a space to separate the previous code and the new code.
       append(" ");
-      // Do not allow a forward slash to appear after a DIV.
-      // For example,
-      // REGEXP DIV REGEXP
-      // is valid and should print like
-      // / // / /
     }
 
     append(newcode);
   }
\ No newline at end of file
