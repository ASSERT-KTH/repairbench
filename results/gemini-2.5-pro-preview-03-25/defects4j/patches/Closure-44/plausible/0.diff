diff --git a/tmp/5f26081d-8b44-4395-bbf2-473b128c22dd_buggy.java b/tmp/d313dabd-5b8f-4afe-b5a8-46d9223060d0_fixed.java
index a7f0d46..aa06be8 100644
--- a/tmp/5f26081d-8b44-4395-bbf2-473b128c22dd_buggy.java
+++ b/tmp/d313dabd-5b8f-4afe-b5a8-46d9223060d0_fixed.java
@@ -1,22 +1,33 @@
   void add(String newcode) {
     maybeEndStatement();
 
     if (newcode.length() == 0) {
       return;
     }
 
     char c = newcode.charAt(0);
+    // getLastChar() should return the last character appended.
+    // If the buffer is empty, it might return '\0'.
+    char last = getLastChar();
+
+    // Condition 1: Check if we need space between words/identifiers.
     if ((isWordChar(c) || c == '\\') &&
-        isWordChar(getLastChar())) {
-      // need space to separate. This is not pretty printing.
+        isWordChar(last)) {
+      // Need space to separate alphanumeric/identifier characters.
       // For example: "return foo;"
       append(" ");
-      // Do not allow a forward slash to appear after a DIV.
-      // For example,
-      // REGEXP DIV REGEXP
-      // is valid and should print like
-      // / // / /
+
+    // Condition 2: Check if we need space to prevent adjacent slashes.
+    // This is necessary to prevent ambiguity between division operators
+    // and regular expression literals, or potential comment interpretation.
+    // For example, turning '=/foo/' into '= /foo/' or '/ / /' into '/ / /'.
+    // It also handles the specific case REGEXP DIV REGEXP -> / // / /
+    // by ensuring a space exists before and after the DIV slash if it's
+    // adjacent to other slashes.
+    } else if (c == '/' && last == '/') {
+      // Need space to avoid "//" sequences.
+      append(" ");
     }
 
     append(newcode);
   }
\ No newline at end of file
