diff --git a/tmp/ae9d93d2-3957-43a2-bf30-9f21db6c1eb9_buggy.java b/tmp/41812984-a505-4b87-9444-a7f224931291_fixed.java
index aab19c0..2db0785 100644
--- a/tmp/ae9d93d2-3957-43a2-bf30-9f21db6c1eb9_buggy.java
+++ b/tmp/41812984-a505-4b87-9444-a7f224931291_fixed.java
@@ -1,76 +1,118 @@
     /**
      * Compute a linear combination accurately.
      * This method computes the sum of the products
      * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
      * It does so by using specific multiplication and addition algorithms to
      * preserve accuracy and reduce cancellation effects.
      * <br/>
      * It is based on the 2005 paper
      * <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547">
      * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,
      * and Shin'ichi Oishi published in SIAM J. Sci. Comput.
      *
      * @param a Factors.
      * @param b Factors.
      * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
-     * @throws DimensionMismatchException if arrays dimensions don't match
+     * @throws org.apache.commons.math3.exception.DimensionMismatchException if arrays dimensions don't match
      */
     public static double linearCombination(final double[] a, final double[] b)
-        throws DimensionMismatchException {
+        throws org.apache.commons.math3.exception.DimensionMismatchException {
         final int len = a.length;
         if (len != b.length) {
-            throw new DimensionMismatchException(len, b.length);
+            throw new org.apache.commons.math3.exception.DimensionMismatchException(len, b.length);
         }
 
-            // Revert to scalar multiplication.
+        // Handle empty arrays case
+        if (len == 0) {
+            return 0.0;
+        }
 
+        // Multiplication phase (Accurate Fused Multiply-Add)
+        // Calculate high part of each product and sum of low parts accurately.
         final double[] prodHigh = new double[len];
         double prodLowSum = 0;
 
         for (int i = 0; i < len; i++) {
             final double ai = a[i];
+            // Split ai into high and low parts
             final double ca = SPLIT_FACTOR * ai;
             final double aHigh = ca - (ca - ai);
             final double aLow = ai - aHigh;
 
             final double bi = b[i];
+            // Split bi into high and low parts
             final double cb = SPLIT_FACTOR * bi;
             final double bHigh = cb - (cb - bi);
             final double bLow = bi - bHigh;
+
+            // Accurate multiplication ai * bi using Dekker's algorithm
+            // prodHigh[i] gets the high part of the product ai * bi
             prodHigh[i] = ai * bi;
+            // prodLow accumulates the low part of the product ai * bi
             final double prodLow = aLow * bLow - (((prodHigh[i] -
                                                     aHigh * bHigh) -
                                                    aLow * bHigh) -
                                                   aHigh * bLow);
+            // Accumulate the low parts of the products
             prodLowSum += prodLow;
         }
 
+        // Summation phase (Accurate Summation of prodHigh)
+        double result;
+        if (len == 1) {
+            // If only one element, the result is the high part of the product
+            // plus the accumulated low parts (which is just the low part of the single product).
+            result = prodHigh[0] + prodLowSum;
+        } else {
+            // Use TwoSum algorithm (pairwise summation) to sum elements of prodHigh accurately.
+            // sHighPrev holds the current high part of the sum.
+            // sLowSum holds the accumulated low parts generated during the summation steps.
+            double sHighPrev = prodHigh[0];
+            double sLowSum = 0.0; // Accumulator for low parts of TwoSum
 
-        final double prodHighCur = prodHigh[0];
-        double prodHighNext = prodHigh[1];
-        double sHighPrev = prodHighCur + prodHighNext;
-        double sPrime = sHighPrev - prodHighNext;
-        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
+            // Start summation with the second element (index 1)
+            double prodHighCur = prodHigh[1];
+            // Calculate high part of sum(sHighPrev, prodHighCur)
+            double sHighCur = sHighPrev + prodHighCur;
+            // Calculate low part of sum(sHighPrev, prodHighCur) using TwoSum algorithm
+            double sPrime = sHighCur - prodHighCur;
+            sLowSum = (prodHighCur - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+            // Update the running high part sum
+            sHighPrev = sHighCur;
 
-        final int lenMinusOne = len - 1;
-        for (int i = 1; i < lenMinusOne; i++) {
-            prodHighNext = prodHigh[i + 1];
-            final double sHighCur = sHighPrev + prodHighNext;
-            sPrime = sHighCur - prodHighNext;
-            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+            // Process remaining elements from the third one (index 2) up to len-1
+            for (int i = 2; i < len; i++) {
+                prodHighCur = prodHigh[i];
+                // Calculate high part of sum(sHighPrev, prodHighCur)
+                sHighCur = sHighPrev + prodHighCur;
+                // Calculate low part of sum(sHighPrev, prodHighCur) using TwoSum algorithm
+                sPrime = sHighCur - prodHighCur;
+                // Accumulate the low part generated in this summation step
+                sLowSum += (prodHighCur - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+                // Update the running high part sum
                 sHighPrev = sHighCur;
             }
 
-        double result = sHighPrev + (prodLowSum + sLowSum);
+            // Final result combines:
+            // - sHighPrev: High part of the sum of all prodHigh[i]
+            // - prodLowSum: Sum of low parts from the initial multiplications (a[i]*b[i])
+            // - sLowSum: Sum of low parts generated during the summation of prodHigh[i]
+            result = sHighPrev + (prodLowSum + sLowSum);
+        }
 
+        // Fallback for NaN results (e.g., due to Infinity or NaN inputs)
         if (Double.isNaN(result)) {
             // either we have split infinite numbers or some coefficients were NaNs,
             // just rely on the naive implementation and let IEEE754 handle this
             result = 0;
             for (int i = 0; i < len; ++i) {
                 result += a[i] * b[i];
             }
         }
 
         return result;
     }
+
+    // NOTE: This code assumes SPLIT_FACTOR is defined elsewhere in the class, e.g.:
+    // private static final double SPLIT_FACTOR = 134217729.0d; // 2^27 + 1
+    // It also assumes DimensionMismatchException is available.
\ No newline at end of file
