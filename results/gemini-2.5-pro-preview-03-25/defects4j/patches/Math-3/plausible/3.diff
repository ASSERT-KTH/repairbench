diff --git a/tmp/a571a21d-534a-4634-8451-40f928e37377_buggy.java b/tmp/d07f3481-5877-461d-8832-981aac1b7ae2_fixed.java
index aab19c0..9060169 100644
--- a/tmp/a571a21d-534a-4634-8451-40f928e37377_buggy.java
+++ b/tmp/d07f3481-5877-461d-8832-981aac1b7ae2_fixed.java
@@ -1,76 +1,107 @@
     /**
      * Compute a linear combination accurately.
      * This method computes the sum of the products
      * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
      * It does so by using specific multiplication and addition algorithms to
      * preserve accuracy and reduce cancellation effects.
      * <br/>
      * It is based on the 2005 paper
      * <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547">
      * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,
      * and Shin'ichi Oishi published in SIAM J. Sci. Comput.
      *
      * @param a Factors.
      * @param b Factors.
      * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
      * @throws DimensionMismatchException if arrays dimensions don't match
      */
     public static double linearCombination(final double[] a, final double[] b)
         throws DimensionMismatchException {
         final int len = a.length;
         if (len != b.length) {
             throw new DimensionMismatchException(len, b.length);
         }
 
-            // Revert to scalar multiplication.
+        // Handle dimension 0 special case.
+        if (len == 0) {
+            return 0.0;
+        }
+
+        // Split each number into high and low parts using Dekker's algorithm.
+        // Split factors = (2^27 + 1) = 134217729 => SPLIT_FACTOR * DBL_EPSILON = 1.
+        final double SPLIT_FACTOR = (1 << 27) + 1.0;
 
         final double[] prodHigh = new double[len];
         double prodLowSum = 0;
 
+        // Perform multiplication step.
         for (int i = 0; i < len; i++) {
             final double ai = a[i];
             final double ca = SPLIT_FACTOR * ai;
             final double aHigh = ca - (ca - ai);
             final double aLow = ai - aHigh;
 
             final double bi = b[i];
             final double cb = SPLIT_FACTOR * bi;
             final double bHigh = cb - (cb - bi);
             final double bLow = bi - bHigh;
-            prodHigh[i] = ai * bi;
+            prodHigh[i] = ai * bi; // High part of ai * bi
+            // Low part of ai * bi = (aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow))
             final double prodLow = aLow * bLow - (((prodHigh[i] -
                                                     aHigh * bHigh) -
                                                    aLow * bHigh) -
                                                   aHigh * bLow);
-            prodLowSum += prodLow;
+            prodLowSum += prodLow; // Accumulate low parts
         }
 
+        // Handle dimension 1 special case (no summation needed).
+        if (len == 1) {
+             // Result is just the single high-precision product.
+             double result = prodHigh[0] + prodLowSum;
+             // Check for possible NaNs (e.g. from Inf * 0).
+             if (Double.isNaN(result)) {
+                 result = a[0] * b[0]; // Fallback to simple multiplication
+             }
+             return result;
+        }
+
+        // Sum the high parts of the products using Ogita's Sum2S algorithm.
+        // s = Sum(prodHigh) (accumulated error-free)
+        // sLowSum = error part of the sum
+        double sHighPrev = prodHigh[0];
+        double sLowSum = 0;
+        double sPrime; // Error-free transformation intermediate
 
-        final double prodHighCur = prodHigh[0];
+        // Calculate Sum2S(prodHigh[0], prodHigh[1])
         double prodHighNext = prodHigh[1];
-        double sHighPrev = prodHighCur + prodHighNext;
-        double sPrime = sHighPrev - prodHighNext;
-        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
+        double sHighCur = sHighPrev + prodHighNext; // s = prodHigh[0] + prodHigh[1]
+        sPrime = sHighCur - prodHighNext;
+        sLowSum = (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime); // Low part of sum
+        sHighPrev = sHighCur; // Update high part of sum
 
+        // Accumulate remaining products using Sum2S
+        // Loop runs from index i = 1 to len - 2, processing prodHigh[i+1] = prodHigh[2] ... prodHigh[len-1]
         final int lenMinusOne = len - 1;
         for (int i = 1; i < lenMinusOne; i++) {
-            prodHighNext = prodHigh[i + 1];
-            final double sHighCur = sHighPrev + prodHighNext;
-            sPrime = sHighCur - prodHighNext;
+            prodHighNext = prodHigh[i + 1]; // Next high part product
+            sHighCur = sHighPrev + prodHighNext; // Add to current high sum: s = sHighPrev + prodHighNext
+            sPrime = sHighCur - prodHighNext; // Error-free transform intermediate
+            // Accumulate low part of sum: sLowSum += LowPart(sHighPrev + prodHighNext)
             sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
-            sHighPrev = sHighCur;
+            sHighPrev = sHighCur; // Update high part sum
         }
 
+        // Final result is the high-part sum + accumulated low parts (from multiplication & summation)
         double result = sHighPrev + (prodLowSum + sLowSum);
 
         if (Double.isNaN(result)) {
             // either we have split infinite numbers or some coefficients were NaNs,
             // just rely on the naive implementation and let IEEE754 handle this
             result = 0;
             for (int i = 0; i < len; ++i) {
                 result += a[i] * b[i];
             }
         }
 
         return result;
     }
\ No newline at end of file
