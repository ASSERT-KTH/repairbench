diff --git a/tmp/26a93268-e84e-4697-9585-84e2009b8358_buggy.java b/tmp/b429445c-584a-4c5e-a35b-a5ff0d0f1d95_fixed.java
index 9d69396..72e0cc4 100644
--- a/tmp/26a93268-e84e-4697-9585-84e2009b8358_buggy.java
+++ b/tmp/b429445c-584a-4c5e-a35b-a5ff0d0f1d95_fixed.java
@@ -1,46 +1,85 @@
+import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUMLEN;
+import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUM_OFFSET;
+// It's assumed TarConstants.CHKSUM_OFFSET = 148 and TarConstants.CHKSUMLEN = 8 are available.
+
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
+     * <p>
+     * GNU tar implementations have historically calculated the checksum
+     * slightly differently; they treat the checksum field's bytes as part of
+     * the sum calculation, using signed bytes.
+     * </p>
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
+     * </p>
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
+     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-335">COMPRESS-335</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
+        // Parse stored checksum leniently from checksum field (offset 148, length 8)
         long storedSum = 0;
-        long unsignedSum = 0;
-        long signedSum = 0;
+        int start = CHKSUM_OFFSET; // 148
+        int end = CHKSUM_OFFSET + CHKSUMLEN; // 156
+
+        // Ensure header is large enough to contain checksum field
+        // Tar headers are usually 512 bytes long.
+        if (header == null || end > header.length) {
+             // Invalid header length, cannot verify checksum.
+            return false;
+        }
+
+        // Skip leading spaces in checksum field
+        while (start < end && header[start] == ' ') {
+            start++;
+        }
+
+        // Parse up to 6 octal digits from checksum field
+        int count = 0;
+        while (count < 6 && start < end && header[start] >= '0' && header[start] <= '7') {
+            storedSum = storedSum * 8 + (header[start] - '0');
+            start++;
+            count++;
+        }
+        // Note: We ignore any remaining characters in the checksum field (NUL, space, non-octal)
+        // after the first 6 digits or the first non-octal character encountered after skipping leading spaces.
+
+        // Calculate checksums based on different methods
+        long unsignedSum = 0; // Standard: sum of unsigned bytes, checksum field treated as spaces
+        long signedSum = 0;   // Historic: sum of signed bytes, checksum field treated as spaces
+        long gnuSum = 0;      // GNU: sum of signed bytes, checksum field treated as original bytes
 
-        int digits = 0;
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
-                b = ' ';
-            }
-            unsignedSum += 0xff & b;
-            signedSum += b;
-        }
-        return storedSum == unsignedSum || storedSum == signedSum;
+            if (i >= CHKSUM_OFFSET && i < end) { // If inside the checksum field
+                unsignedSum += 0xff & ' '; // Use space value for standard unsigned sum
+                signedSum += ' ';          // Use space value for standard signed sum
+                gnuSum += b;               // Use original byte value for GNU-style signed sum
+            } else { // If outside the checksum field
+                unsignedSum += 0xff & b; // Use unsigned byte value
+                signedSum += b;          // Use signed byte value
+                gnuSum += b;             // Use signed byte value
+            }
+        }
+
+        // Verify: the stored checksum must match one of the calculated checksums
+        return storedSum == unsignedSum || storedSum == signedSum || storedSum == gnuSum;
     }
\ No newline at end of file
