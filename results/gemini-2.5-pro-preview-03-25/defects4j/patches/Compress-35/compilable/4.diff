diff --git a/tmp/a90c131c-d144-4f9f-af23-6f61668175f6_buggy.java b/tmp/fcfbb686-4240-4b0a-997f-b602c1a2f722_fixed.java
index 9d69396..5457d9f 100644
--- a/tmp/a90c131c-d144-4f9f-af23-6f61668175f6_buggy.java
+++ b/tmp/fcfbb686-4240-4b0a-997f-b602c1a2f722_fixed.java
@@ -1,46 +1,72 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
-        long storedSum = 0;
+        // Calculate unsigned and signed sums, treating checksum field bytes as spaces
         long unsignedSum = 0;
         long signedSum = 0;
-
-        int digits = 0;
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+            // Checksum field bytes (offset 148, length 8) are treated as spaces for sum calculation
+            if (TarConstants.CHKSUM_OFFSET <= i && i < TarConstants.CHKSUM_OFFSET + TarConstants.CHKSUMLEN) {
                 b = ' ';
             }
             unsignedSum += 0xff & b;
             signedSum += b;
         }
+
+        // Parse the stored checksum value leniently from the header's checksum field
+        long storedSum = 0;
+        int start = TarConstants.CHKSUM_OFFSET;
+        int end = TarConstants.CHKSUM_OFFSET + TarConstants.CHKSUMLEN;
+
+        // Trim trailing NULs and spaces from the checksum field
+        // (It should be NUL terminated followed by space, but implementations vary)
+        while (end > start && (header[end - 1] == 0 || header[end - 1] == ' ')) {
+            end--;
+        }
+
+        // Skip leading spaces in the checksum field
+        while (start < end && header[start] == ' ') {
+            start++;
+        }
+
+        // Parse the first 6 octal digits found
+        int digitCount = 0;
+        for (int i = start; i < end && digitCount < 6; i++) {
+            byte b = header[i];
+            // Check if it's an octal digit
+            if (b >= '0' && b <= '7') {
+                storedSum = (storedSum << 3) + (b - '0');
+                digitCount++;
+            } else {
+                // If we encounter a non-octal digit after skipping leading spaces,
+                // stop parsing, consistent with "get the first six digits".
+                break;
+            }
+        }
+
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
