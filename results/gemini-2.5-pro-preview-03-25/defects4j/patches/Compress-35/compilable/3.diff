diff --git a/tmp/713f5145-d66d-441b-bb3e-d34252691d99_buggy.java b/tmp/cd5b140d-b357-4042-b4ef-379b597539de_fixed.java
index 9d69396..cca730f 100644
--- a/tmp/713f5145-d66d-441b-bb3e-d34252691d99_buggy.java
+++ b/tmp/cd5b140d-b357-4042-b4ef-379b597539de_fixed.java
@@ -1,46 +1,77 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
-        long storedSum = 0;
+        // Calculate unsigned and signed sums treating the checksum field (bytes 148-155) as spaces
         long unsignedSum = 0;
         long signedSum = 0;
-
-        int digits = 0;
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
             if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+                // Treat checksum field bytes as spaces for the sum calculation
                 b = ' ';
             }
-            unsignedSum += 0xff & b;
-            signedSum += b;
+            unsignedSum += 0xff & b; // Sum unsigned bytes (0-255)
+            signedSum += b;         // Sum signed bytes (-128 to 127)
         }
+
+        // Parse the stored checksum value leniently from the original header bytes
+        // According to the description: ignore leading/trailing whitespace, get first 6 octal digits.
+        // Stop parsing at the first NUL or non-octal digit after digits have begun.
+        long storedSum = 0;
+        int digits = 0;
+        boolean PADDING = true; // Flag for skipping leading spaces. Zeros are significant in octal.
+        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+            final byte b = header[i];
+
+            // Stop parsing if 6 digits were already found or NUL encountered.
+            // Standard TAR checksums are NUL-terminated.
+            if (digits >= 6 || b == 0) {
+                 break;
+            }
+
+            // Skip leading spaces
+            if (PADDING && b == ' ') {
+                continue;
+            }
+
+            // Once a non-space char is hit, we are no longer padding.
+            PADDING = false;
+
+            // Process octal digits or stop at the first non-octal character
+            if ('0' <= b && b <= '7') {
+                // Append the octal digit to the stored sum
+                storedSum = storedSum * 8 + (b - '0');
+                digits++;
+            } else {
+                // Encountered a non-octal character (could be space used as terminator, or other)
+                // after padding/digits potentially started. Stop parsing.
+                break;
+            }
+        }
+
+        // Verify if the parsed stored checksum matches either the unsigned or signed sum
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
