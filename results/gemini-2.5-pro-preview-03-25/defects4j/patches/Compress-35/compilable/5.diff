diff --git a/tmp/d216882f-297e-4855-9f99-1d5e9dcbabe8_buggy.java b/tmp/7376bd3e-6ea3-45ab-b291-78c015acfe39_fixed.java
index 9d69396..ce4ca60 100644
--- a/tmp/d216882f-297e-4855-9f99-1d5e9dcbabe8_buggy.java
+++ b/tmp/7376bd3e-6ea3-45ab-b291-78c015acfe39_fixed.java
@@ -1,46 +1,76 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
-     * @param header tar header
+     * @param header tar header (must be at least 512 bytes long)
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
+     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-335">COMPRESS-335</a>
      * @since 1.5
      */
-    public static boolean verifyCheckSum(byte[] header) {
+    public static boolean verifyCheckSum(final byte[] header) {
         long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
-        int digits = 0;
+        boolean checksumFound = false; // Have we started parsing octal digits?
+        boolean checksumStop = false;  // Should we stop parsing octal digits?
+        int digitsParsed = 0;          // Count of parsed octal digits
+
+        // CHKSUMLEN is 8
+        // CHKSUM_OFFSET is 148
+        final int checksumFieldEnd = CHKSUM_OFFSET + CHKSUMLEN;
+
         for (int i = 0; i < header.length; i++) {
-            byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
+            final byte currentByte = header[i];
+            byte byteForSumming = currentByte; // Byte value to use for sum calculation
+
+            if (CHKSUM_OFFSET <= i && i < checksumFieldEnd) {
+                // --- Handle checksum field bytes for parsing storedSum ---
+                if (!checksumStop && digitsParsed < 6) { // Only parse if not stopped and less than 6 digits found
+                    if (currentByte == ' ' && !checksumFound) {
+                        // Skip leading spaces
+                    } else if (currentByte == 0 || currentByte == ' ') {
+                        // Null or space terminates the checksum field parsing
+                        checksumStop = true;
+                    } else if (currentByte >= '0' && currentByte <= '7') {
+                        // Found an octal digit
+                        checksumFound = true;
+                        storedSum = storedSum * 8 + (currentByte - '0');
+                        digitsParsed++;
+                        if (digitsParsed == 6) { // Stop parsing once 6 digits are found
+                            checksumStop = true;
                         }
-                b = ' ';
+                    } else {
+                        // Found a non-octal, non-space, non-NUL character after starting. Stop parsing.
+                        checksumStop = true;
                     }
-            unsignedSum += 0xff & b;
-            signedSum += b;
                 }
+                // --- Summing: ALWAYS treat checksum field bytes as spaces (' ') ---
+                byteForSumming = ' ';
+            }
+
+            // Add the byte value (original or space replacement) to sums
+            unsignedSum += 0xff & byteForSumming;
+            signedSum += byteForSumming;
+        }
+
+        // Check if the calculated sum (unsigned or signed) matches the stored sum
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
