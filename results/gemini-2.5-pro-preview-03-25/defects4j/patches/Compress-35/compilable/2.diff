diff --git a/tmp/7aa8f497-8202-4de2-9309-7e37baa10db6_buggy.java b/tmp/92f3b928-b088-4c63-98e5-4044c3e56571_fixed.java
index 9d69396..32f1a55 100644
--- a/tmp/7aa8f497-8202-4de2-9309-7e37baa10db6_buggy.java
+++ b/tmp/92f3b928-b088-4c63-98e5-4044c3e56571_fixed.java
@@ -1,46 +1,75 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
+     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-335">COMPRESS-335</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
-        long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
-        int digits = 0;
+        // Calculate sum of header bytes, treating checksum field bytes (offset 148, length 8) as spaces
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
+            // Add contribution to sums, replacing checksum field bytes with spaces
             if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
+                unsignedSum += ' '; // Add space character (32) for unsigned sum
+                signedSum += ' ';   // Add space character (32) for signed sum
+            } else {
+                unsignedSum += 0xff & b; // Add unsigned byte value
+                signedSum += b;          // Add signed byte value
             }
-                b = ' ';
         }
-            unsignedSum += 0xff & b;
-            signedSum += b;
+
+        // Parse the stored checksum value from the header's checksum field.
+        // Requirement is "ignore leading and trailing whitespace, and get the first six digits."
+        // Interpretation: Scan the 8 bytes of the checksum field. Find the first 6 octal digits ('0'-'7').
+        // Ignore any characters other than octal digits. Stop parsing if a NUL byte is encountered.
+        long storedSum = 0;
+        int digits = 0;
+        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+            byte b = header[i];
+
+            // NUL terminates the checksum field, potentially before 8 bytes are read
+            if (b == 0) {
+                break;
             }
+
+            // Check if the byte is an octal digit
+            if ('0' <= b && b <= '7') {
+                // Only parse the first 6 digits found
+                if (digits < 6) {
+                    storedSum = storedSum * 8 + (b - '0');
+                    digits++;
+                } else {
+                    // If we find more than 6 digits before a NUL or the end of the field,
+                    // we adhere to "get the first six digits" and stop parsing.
+                    break;
+                }
+            }
+            // Ignore other characters (like spaces, non-octal values) encountered
+            // while searching for the first 6 octal digits.
+        }
+
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
