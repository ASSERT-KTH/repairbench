diff --git a/tmp/6a0f0035-75c9-45f8-8a0d-93acbcc44e5f_buggy.java b/tmp/85c52b13-6bdf-4186-850d-9196a5f41f41_fixed.java
index 9d69396..a9c6a5f 100644
--- a/tmp/6a0f0035-75c9-45f8-8a0d-93acbcc44e5f_buggy.java
+++ b/tmp/85c52b13-6bdf-4186-850d-9196a5f41f41_fixed.java
@@ -1,46 +1,73 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
-        long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
-        int digits = 0;
+        // Calculate checksum assuming checksum field is spaces
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
             if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
-                b = ' ';
+                b = ' '; // Treat checksum field as spaces for calculation
             }
             unsignedSum += 0xff & b;
             signedSum += b;
         }
+
+        // Parse the stored checksum value from the header
+        long storedSum = 0;
+        int start = CHKSUM_OFFSET;
+        final int end = CHKSUM_OFFSET + CHKSUMLEN;
+
+        // Trim leading spaces
+        while (start < end && header[start] == ' ') {
+            start++;
+        }
+
+        // Trim trailing NULs and spaces
+        int effectiveEnd = end;
+        // Corrected loop condition to check effectiveEnd > start
+        while (effectiveEnd > start && (header[effectiveEnd - 1] == 0 || header[effectiveEnd - 1] == ' ')) {
+             effectiveEnd--;
+        }
+
+        int digitCount = 0;
+        // Iterate over the trimmed, relevant portion
+        for (int i = start; i < effectiveEnd; i++) {
+            byte b = header[i];
+            // Check for octal digit and limit to 6 digits
+            if (digitCount < 6 && b >= '0' && b <= '7') {
+                storedSum = storedSum * 8 + (b - '0');
+                digitCount++;
+            } else {
+                // Stop parsing if a non-octal is found within the trimmed section,
+                // or if we already have 6 digits (this condition handles the non-octal case)
+                break;
+            }
+        }
+
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
