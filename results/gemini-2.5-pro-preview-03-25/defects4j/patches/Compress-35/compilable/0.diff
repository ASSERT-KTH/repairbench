diff --git a/tmp/67a04ffd-16fb-49c8-b75b-1dca2e706215_buggy.java b/tmp/fadcc7c4-224d-48ab-b8a6-21c7cc011620_fixed.java
index 9d69396..257f45b 100644
--- a/tmp/67a04ffd-16fb-49c8-b75b-1dca2e706215_buggy.java
+++ b/tmp/fadcc7c4-224d-48ab-b8a6-21c7cc011620_fixed.java
@@ -1,46 +1,66 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
+     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-335">COMPRESS-335</a> Handling of NUL padded checksums.
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
         long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
+        boolean EOT = false; // Flag for End Of numerical Tar checksum chars
         int digits = 0;
+
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
+            if (TarConstants.CHKSUM_OFFSET <= i && i < TarConstants.CHKSUM_OFFSET + TarConstants.CHKSUMLEN) { // Inside checksum field
+                // Parse stored checksum value from header field.
+                // Handles NUL-terminated or space-terminated values, ignores leading spaces/NULs,
+                // stops after 6 digits or on the first non-octal character after finding a digit.
+                if (!EOT) {
+                    if (b == ' ' || b == 0) { // Space or NUL
+                        if (digits > 0) { // If we already have digits, this is a terminator
+                            EOT = true;
                         }
+                        // Leading spaces or NULs are ignored (continue loop without processing/error)
+                    } else if ('0' <= b && b <= '7') { // Octal digit
+                        if (digits < 6) { // Process up to 6 digits
+                            storedSum = storedSum * 8 + (b - '0');
+                            digits++;
+                        } else { // If more than 6 digits, stop parsing checksum field
+                            EOT = true;
+                        }
+                    } else { // Non-octal, non-space, non-NUL character encountered
+                        // This indicates an invalid character in the checksum field. Stop parsing.
+                        EOT = true;
+                    }
+                }
+                // For checksum calculation, treat bytes in the checksum field as spaces
                 b = ' ';
             }
             unsignedSum += 0xff & b;
             signedSum += b;
         }
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
