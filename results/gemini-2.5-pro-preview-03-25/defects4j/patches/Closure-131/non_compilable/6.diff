diff --git a/tmp/de342542-ccb9-4e53-b6dd-c56dc5c7e42b_buggy.java b/tmp/88b54619-520f-44a8-859f-eb997bdba887_fixed.java
index 19fe1b4..d1f0d29 100644
--- a/tmp/de342542-ccb9-4e53-b6dd-c56dc5c7e42b_buggy.java
+++ b/tmp/88b54619-520f-44a8-859f-eb997bdba887_fixed.java
@@ -1,17 +1,80 @@
+import java.util.Set;
+// NOTE: The following import and the RESERVED_KEYWORDS set are assumed to exist
+// in the original file's context or be accessible. They are provided here
+// for completeness of the thought process but should not be part of the
+// final function-only output block if they are defined elsewhere.
+// import com.google.common.collect.ImmutableSet;
+
+/**
+ * Utility functions for dealing with JavaScript identifiers.
+ * TODO(nicksantos): Fold this into the NodeUtil class.
+ * Copied from Rhino's Parser.java
+ */
+public final class NodeUtil {
+
+    // From Rhino Handler.Reserved
+    // TODO(user): This needs to be dynamic with language versions.
+    // Assume this set is defined and accessible within the scope of the function.
+    private static final Set<String> RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of(
+      "break", "case", "catch", "continue", "debugger", "default", "delete",
+      "do", "else", "finally", "for", "function", "if", "in", "instanceof",
+      "new", "return", "switch", "this", "throw", "try", "typeof", "var",
+      "void", "while", "with",
+      // ES5 reserved words
+      "class", "const", "enum", "export", "extends", "import", "super",
+      // ES5 strict mode reserved words
+      "implements", "interface", "let", "package", "private", "protected",
+      "public", "static", "yield",
+      // Literals
+      "true", "false", "null"
+      );
+
+    /**
+     * Determines whether {@code s} is a valid JavaScript identifier. {@link
+     * Character#isJavaIdentifierStart} and {@link Character#isIdentifierIgnorable}
+     * have known problems when checking JavaScript identifiers. This function is
+     * currently conservative and assumes that the identifier consists of only ASCII
+     * letters, digits, '$', and '_'. It also checks that the name is not a
+     * JavaScript reserved word.
+     *
+     * TODO(nicksantos): Make this function support non-ASCII characters in
+     * identifiers.
+     */
     public static boolean isJSIdentifier(String s) {
       int length = s.length();
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+      if (length == 0 || RESERVED_KEYWORDS.contains(s)) {
+        return false;
+      }
+
+      char firstChar = s.charAt(0);
+      // Character.isJavaIdentifierStart is too permissive for JS for the purposes
+      // of the ConvertToDottedProperties pass. It allows non-ASCII characters
+      // and ignorable control characters. We adopt a conservative approach,
+      // allowing only ASCII letters, '$', and '_'.
+      if (!((firstChar >= 'a' && firstChar <= 'z') ||
+            (firstChar >= 'A' && firstChar <= 'Z') ||
+            firstChar == '$' ||
+            firstChar == '_')) {
         return false;
       }
 
       for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+        char c = s.charAt(i);
+        // Character.isJavaIdentifierPart is also too permissive.
+        // See comments above. We allow only ASCII letters, ASCII digits,
+        // '$', and '_'.
+        if (!((c >= 'a' && c <= 'z') ||
+              (c >= 'A' && c <= 'Z') ||
+              (c >= '0' && c <= '9') || // Allow digits in subsequent parts
+              c == '$' ||
+              c == '_')) {
           return false;
         }
       }
 
       return true;
     }
+
+    // Assume other parts of the NodeUtil class exist here...
+}
\ No newline at end of file
