diff --git a/tmp/1f36ab31-49e2-43ee-b88f-728b316ee9b8_buggy.java b/tmp/16832e92-f237-4059-8b47-4d7ff1dbfe9f_fixed.java
index 19fe1b4..4df90b2 100644
--- a/tmp/1f36ab31-49e2-43ee-b88f-728b316ee9b8_buggy.java
+++ b/tmp/16832e92-f237-4059-8b47-4d7ff1dbfe9f_fixed.java
@@ -1,17 +1,55 @@
+import com.google.javascript.rhino.TokenStream;
+
+// Utility class, should not be instantiated.
+private class NodeUtil {
+    // ... other methods ...
+
+    /**
+     * Determines whether a string is a valid identifier according to JavaScript
+     * language specification. Reserves identifiers are excluded.
+     *
+     * <p>This function follows the ECMAScript 5 specification for identifiers, but restricts
+     * characters to ASCII letters, digits, underscore (_), and dollar sign ($), as required by
+     * certain compiler passes like ConvertToDottedProperties based on test cases.
+     * It also checks against JavaScript reserved words.
+     */
     public static boolean isJSIdentifier(String s) {
       int length = s.length();
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+      if (length == 0) {
         return false;
       }
 
+      char firstChar = s.charAt(0);
+      // Check first character (ASCII: a-z, A-Z, _, $)
+      if (!((firstChar >= 'a' && firstChar <= 'z') ||
+            (firstChar >= 'A' && firstChar <= 'Z') ||
+            firstChar == '_' ||
+            firstChar == '$')) {
+        return false;
+      }
+
+      // Check subsequent characters (ASCII: a-z, A-Z, 0-9, _, $)
       for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+        char c = s.charAt(i);
+        if (!((c >= 'a' && c <= 'z') ||
+              (c >= 'A' && c <= 'Z') ||
+              (c >= '0' && c <= '9') ||
+              c == '_' ||
+              c == '$')) {
           return false;
         }
       }
 
+      // Check if the identifier is a reserved word in JavaScript
+      // Note: We assume TokenStream is available in this context.
+      // If not, a list of JS keywords would need to be checked here.
+      if (TokenStream.isKeyword(s)) {
+        return false;
+      }
+
       return true;
     }
+
+    // ... other methods ...
+}
\ No newline at end of file
