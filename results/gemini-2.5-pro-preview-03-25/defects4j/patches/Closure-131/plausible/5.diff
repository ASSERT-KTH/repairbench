diff --git a/tmp/aa478326-ffc5-48ea-a4ec-5cc4bddf4abd_buggy.java b/tmp/467d449d-c316-4ed0-b180-1a3415138e92_fixed.java
index 19fe1b4..0a8ca2c 100644
--- a/tmp/aa478326-ffc5-48ea-a4ec-5cc4bddf4abd_buggy.java
+++ b/tmp/467d449d-c316-4ed0-b180-1a3415138e92_fixed.java
@@ -1,17 +1,46 @@
+    /**
+     * Returns true if the specified string is a valid ECMAScript identifier
+     * name according to ECMAScript 5.1 section 7.6 Identifier Names,
+     * and is not a reserved keyword. This function is intentionally
+     * conservative and only treats ASCII identifiers as valid.
+     *
+     * Note that this function is not intended to be a general purpose
+     * JavaScript identifier checker. For example, it does not support
+     * Unicode letters or digits. It is designed to be used where the only concern
+     * is whether a string can be used as a property name without quotes.
+     */
     public static boolean isJSIdentifier(String s) {
       int length = s.length();
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+      if (length == 0) {
         return false;
       }
 
+      char c0 = s.charAt(0);
+      // Check first character: Must be ASCII letter, '$', or '_'
+      boolean firstCharOk = (c0 >= 'a' && c0 <= 'z') || (c0 >= 'A' && c0 <= 'Z') ||
+                            c0 == '$' || c0 == '_';
+
+      if (!firstCharOk) {
+        return false;
+      }
+
+      // Check subsequent characters: Must be ASCII letter, ASCII digit, '$', or '_'
       for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+        char ci = s.charAt(i);
+        boolean charOk = (ci >= 'a' && ci <= 'z') || (ci >= 'A' && ci <= 'Z') ||
+                         (ci >= '0' && ci <= '9') ||
+                         ci == '$' || ci == '_';
+        if (!charOk) {
           return false;
         }
       }
 
+      // Check if the identifier is a reserved keyword in JavaScript.
+      // ECMAScript 5.1 section 7.6.1 Keywords and Reserved Words.
+      if (com.google.javascript.rhino.TokenStream.isKeyword(s)) {
+         return false;
+      }
+
       return true;
     }
\ No newline at end of file
