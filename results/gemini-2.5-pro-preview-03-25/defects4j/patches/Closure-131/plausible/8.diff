diff --git a/tmp/d3ce508d-f34b-42d4-9505-ea98386df2a2_buggy.java b/tmp/407d4813-8798-4343-a5b6-954ceda9954a_fixed.java
index 19fe1b4..68ad044 100644
--- a/tmp/d3ce508d-f34b-42d4-9505-ea98386df2a2_buggy.java
+++ b/tmp/407d4813-8798-4343-a5b6-954ceda9954a_fixed.java
@@ -1,17 +1,64 @@
+    /**
+     * Returns true if the specified string is a valid ECMAScript identifier name,
+     * restricted to ASCII characters. This function does *not* check if the
+     * identifier is a reserved word.
+     *
+     * This is a stricter definition than required by the ECMAScript spec,
+     * which allows a broader range of Unicode characters in identifiers.
+     * However, this stricter check is suitable for contexts like
+     * converting quoted property accesses to dotted accesses (a['foo'] -> a.foo)
+     * where restricting to simple ASCII identifiers is safer and matches behavior
+     * observed in the calling code's tests.
+     *
+     * ECMAScript 5.1 section 7.6 defines IdentifierName which includes
+     * IdentifierStart ::
+     *   UnicodeLetter
+     *   $
+     *   _
+     *   \ UnicodeEscapeSequence
+     * IdentifierPart ::
+     *   IdentifierStart
+     *   UnicodeCombiningMark
+     *   UnicodeDigit
+     *   UnicodeConnectorPunctuation
+     *   <ZWNJ> <ZWJ>
+     *
+     * This implementation only checks for ASCII letters (a-z, A-Z), digits (0-9),
+     * underscore (_), and dollar sign ($).
+     *
+     * @param s The string to check.
+     * @return true if the string is a valid ASCII-only JavaScript identifier.
+     */
     public static boolean isJSIdentifier(String s) {
       int length = s.length();
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+      if (length == 0) {
         return false;
       }
 
+      char firstChar = s.charAt(0);
+      // Check if the first character is a valid ASCII start character: letter, _, or $
+      if (!((firstChar >= 'a' && firstChar <= 'z') ||
+            (firstChar >= 'A' && firstChar <= 'Z') ||
+            firstChar == '_' ||
+            firstChar == '$')) {
+        return false;
+      }
+
+      // Check subsequent characters
       for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+        char c = s.charAt(i);
+        // Check if the character is a valid ASCII part character: letter, digit, _, or $
+        if (!((c >= 'a' && c <= 'z') ||
+              (c >= 'A' && c <= 'Z') ||
+              (c >= '0' && c <= '9') ||
+              c == '_' ||
+              c == '$')) {
           return false;
         }
       }
 
+      // All characters are valid ASCII identifier parts.
+      // Note: This does not check against reserved words.
       return true;
     }
\ No newline at end of file
