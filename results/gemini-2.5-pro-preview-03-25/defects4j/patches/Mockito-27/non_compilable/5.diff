diff --git a/tmp/6ac5da44-74c9-45e2-91a9-9247008c8e3d_buggy.java b/tmp/0a8e96af-a6c2-48e7-b659-4d2431d4e9cf_fixed.java
index 5c5286c..06ec0c7 100644
--- a/tmp/6ac5da44-74c9-45e2-91a9-9247008c8e3d_buggy.java
+++ b/tmp/0a8e96af-a6c2-48e7-b659-4d2431d4e9cf_fixed.java
@@ -1,6 +1,59 @@
+import org.mockito.Mockito;
+import org.mockito.cglib.proxy.Factory;
+import org.mockito.internal.creation.MethodInterceptorFilter;
+import org.mockito.internal.handler.MockHandler;
+import org.mockito.internal.InternalMockHandler; // Assuming MockHandlerInterface is or extends this
+import org.mockito.internal.util.MockUtil; // Assuming getMockHandler is from here or similar utility
+import org.mockito.invocation.MockHandlerInterface;
+import org.mockito.mock.MockCreationSettings; // MockSettings might be MockCreationSettings in newer versions
+import org.mockito.internal.mock.MockSettingsImpl; // Internal implementation, needed for MethodInterceptorFilter constructor
+
+// Note: getMockHandler(mock) needs to be defined or imported correctly in the actual class.
+// It usually retrieves the handler using something like MockUtil.getMockHandler(mock).
+// We assume getMockHandler exists and returns MockHandlerInterface<T>.
+
+// Placeholder for the surrounding class structure
+public class MockitoCore { // Or wherever resetMock belongs
+
+    // Assuming getMockHandler is available, e.g.:
+    private <T> MockHandlerInterface<T> getMockHandler(T mock) {
+         // Implementation depends on Mockito version, usually involves MockUtil
+         // For example: return (MockHandlerInterface<T>) MockUtil.getMockHandler(mock);
+         // This part is external to the function being fixed.
+         // Ensure this method returns the correct handler type.
+         // In some Mockito versions, it might return InternalMockHandler.
+         Object handler = MockUtil.getMockHandler(mock);
+         if (handler instanceof MockHandlerInterface) {
+            return (MockHandlerInterface<T>) handler;
+         }
+         // Handle error or unexpected type if necessary
+         throw new IllegalArgumentException("Could not get MockHandlerInterface for mock: " + mock);
+    }
+
+
     public <T> void resetMock(T mock) {
+        // Get the existing handler associated with the mock
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
+
+        // Retrieve the original mock settings from the existing handler.
+        // MethodInterceptorFilter requires MockSettingsImpl specifically.
+        MockSettingsImpl settings = (MockSettingsImpl) oldMockHandler.getMockSettings();
+
+        // Create a new MockHandler. The constructor MockHandler(MockHandlerInterface)
+        // is designed to create a handler for the reset state, keeping the settings
+        // but clearing invocations and stubbings.
         MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
+
+        // Create a new CGLIB interceptor filter using the new handler and
+        // importantly, PASSING THE ORIGINAL settings, not new default ones.
+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);
+
+        // Replace the CGLIB callback on the mock object with the new filter.
+        // This effectively applies the reset handler and settings to the mock instance.
         ((Factory) mock).setCallback(0, newFilter);
     }
+
+    // Add necessary imports if they are missing at the top level.
+    // The exact imports for MockUtil, MockHandlerInterface, MockSettingsImpl,
+    // MethodInterceptorFilter, Factory might vary slightly based on Mockito version.
+}
\ No newline at end of file
