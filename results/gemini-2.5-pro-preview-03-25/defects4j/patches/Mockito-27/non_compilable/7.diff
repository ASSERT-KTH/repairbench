diff --git a/tmp/1d16a99e-5e8e-46d7-b053-9f2d6b2bd83f_buggy.java b/tmp/79d39712-d3b7-4684-a22e-1eb8b2dcb51b_fixed.java
index 5c5286c..5b39074 100644
--- a/tmp/1d16a99e-5e8e-46d7-b053-9f2d6b2bd83f_buggy.java
+++ b/tmp/79d39712-d3b7-4684-a22e-1eb8b2dcb51b_fixed.java
@@ -1,6 +1,105 @@
+import org.mockito.Mockito;
+import org.mockito.internal.creation.settings.CreationSettings;
+import org.mockito.internal.handler.MockHandler;
+import org.mockito.internal.handler.MockHandlerFactory;
+import org.mockito.internal.invocation.finder.VerifiableInvocationsFinder;
+import org.mockito.internal.progress.ThreadSafeMockingProgress;
+import org.mockito.internal.stubbing.MockitoStubber;
+import org.mockito.internal.util.MockUtil;
+import org.mockito.internal.verification.MockAwareVerificationMode;
+import org.mockito.internal.verification.VerificationDataImpl;
+import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MockHandler;
+import org.mockito.listeners.VerificationListener;
+import org.mockito.mock.MockCreationSettings;
+import org.mockito.plugins.MockMaker;
+import org.mockito.verification.VerificationMode;
+
+// Added imports for clarity based on expected context, actual imports might vary.
+import org.mockito.internal.handler.MockHandlerInterface;
+import org.mockito.internal.creation.bytebuddy.MethodInterceptorFilter; // Or cglib equivalent
+import org.mockito.mock.MockSettings; // Assuming Mockito.withSettings() returns this
+import org.mockito.internal.creation.settings.CreationSettings; // MockSettingsImpl likely implements this
+import net.bytebuddy.implementation.auxiliary.AuxiliaryType.Factory; // Or cglib equivalent Factory
+// Assuming getMockHandler is available in the class context or via MockUtil
+import static org.mockito.internal.util.MockUtil.getMockHandler;
+import org.mockito.internal.creation.settings.MockSettingsImpl;
+
+
+public class MockitoCore { // Assuming this method is part of a class like MockitoCore or MockUtil
+
+    /**
+     * Resets a mock object. Replaces the existing mock handler with a new instance that has fresh state.
+     * The new handler is configured using the original mock settings, ensuring configuration like
+     * listeners, default answer, and name are preserved.
+     *
+     * @param mock The mock object to reset.
+     * @param <T>  The type of the mock object.
+     */
     public <T> void resetMock(T mock) {
+        // Get the handler and original settings from the existing mock
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
+        MockCreationSettings<T> originalSettings = oldMockHandler.getMockSettings();
+
+        // Create a new handler instance with the original settings.
+        // This effectively resets invocation counts and stubbings but keeps the configuration.
+        MockHandler<T> newMockHandler = MockHandlerFactory.createMockHandler(originalSettings);
+
+        // Create a new interceptor filter using the new handler and original settings.
+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, originalSettings);
+
+        // Replace the existing callback (interceptor) in the mock proxy with the new one.
+        // This requires access to the proxy's internal structure (e.g., using a Factory interface).
         ((Factory) mock).setCallback(0, newFilter);
     }
+
+    // Dummy MockHandlerFactory for compilation if needed in this isolated context
+    static class MockHandlerFactory {
+        public static <T> MockHandler<T> createMockHandler(MockCreationSettings<T> settings) {
+            // In a real scenario, this would return a proper MockHandler implementation
+            // For this fix context, assuming MockHandler has a constructor taking settings
+             return new MockHandler<T>(settings);
+            // return null; // Replace with actual factory logic if necessary
+        }
+    }
+
+     // Dummy MockHandler for compilation if needed
+     // Add required methods/constructor based on actual Mockito code if needed
+     static class MockHandler<T> implements MockHandlerInterface<T> {
+         private final MockCreationSettings<T> settings;
+
+         public MockHandler(MockCreationSettings<T> settings) {
+            this.settings = settings;
+         }
+
+          @Override
+          public MockCreationSettings<T> getMockSettings() {
+              return settings;
+          }
+
+          @Override
+          public org.mockito.invocation.InvocationHandler getInvocationHandler() {
+               // Implement or return null/default as needed for compilation
+               return null;
+           }
+
+         // Other methods required by MockHandlerInterface...
+         @Override
+         public Object handle(Invocation invocation) throws Throwable { return null;} // Dummy implementation
+     }
+
+    // Dummy MethodInterceptorFilter for compilation if needed
+    // Add required methods/constructor based on actual Mockito code if needed
+    static class MethodInterceptorFilter implements net.bytebuddy.implementation.bind.annotation.RuntimeType { // Or cglib equivalent Callback
+        public MethodInterceptorFilter(MockHandlerInterface handler, MockCreationSettings settings) {
+            // Store handler and settings
+        }
+        // Intercept method...
+    }
+
+    // Dummy Factory interface for compilation if needed (adjust based on actual proxy mechanism)
+    interface Factory {
+         void setCallback(int index, Object callback);
+         Object getCallback(int index);
+    }
+}
\ No newline at end of file
