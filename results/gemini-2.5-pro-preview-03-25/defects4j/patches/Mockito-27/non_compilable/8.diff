diff --git a/tmp/9ead37cf-1bc5-4b38-a8e6-4b7993f6d486_buggy.java b/tmp/d9e976cf-7641-4cc7-851b-fa2051a20245_fixed.java
index 5c5286c..3c79bb0 100644
--- a/tmp/9ead37cf-1bc5-4b38-a8e6-4b7993f6d486_buggy.java
+++ b/tmp/d9e976cf-7641-4cc7-851b-fa2051a20245_fixed.java
@@ -1,6 +1,34 @@
     public <T> void resetMock(T mock) {
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
+        // Retrieve the original settings, which include listeners, default answer, etc.
+        org.mockito.mock.MockCreationSettings<T> originalSettings = oldMockHandler.getMockSettings();
+
+        // Create a new handler instance. Assuming the constructor MockHandler(MockHandlerInterface)
+        // correctly initializes a handler suitable for reset, possibly copying immutable settings.
         MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
+
+        // Create a new MethodInterceptorFilter with the new handler BUT using the *original* settings.
+        // This ensures that the configuration of the mock (like invocation listeners) is preserved.
+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, originalSettings);
+
+        // Set the new filter as the callback for the mock instance.
+        // Assumes the mock implements net.sf.cglib.proxy.Factory or similar interface.
         ((Factory) mock).setCallback(0, newFilter);
     }
+
+    // Assuming the following helper method exists in the class or is accessible.
+    // This is a common way to get the handler in Mockito internals.
+    private <T> MockHandlerInterface<T> getMockHandler(T mock) {
+        return org.mockito.internal.util.MockUtil.getMockHandler(mock);
+    }
+
+    // Assuming the mock objects implement this interface (typical for CGLIB/ByteBuddy).
+    // Adjust the import based on the actual proxy mechanism used (e.g., net.bytebuddy.dynamic.scaffold.InstrumentedType).
+    private interface Factory {
+        void setCallback(int index, Object callback);
+        // Potentially other methods depending on the proxy library.
+    }
+
+    // Assuming MockHandler and MethodInterceptorFilter are accessible internal classes
+    // (e.g., from org.mockito.internal.handler and org.mockito.internal.creation packages).
+    // The specific constructor `new MockHandler<T>(oldMockHandler)` might be specific to the codebase/version.
