diff --git a/tmp/18c064b9-130e-4967-abc7-850eec06555d_buggy.java b/tmp/dfa803aa-a154-4c1c-8078-3c454c53c389_fixed.java
index 5c5286c..b03e80e 100644
--- a/tmp/18c064b9-130e-4967-abc7-850eec06555d_buggy.java
+++ b/tmp/dfa803aa-a154-4c1c-8078-3c454c53c389_fixed.java
@@ -1,6 +1,18 @@
     public <T> void resetMock(T mock) {
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
+        // Create a new handler instance based on the old one.
+        // The MockHandler constructor MockHandler(MockHandlerInterface) is responsible
+        // for copying the settings from the old handler.
         MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
+        // Retrieve the original mock settings (like listeners, default answer, etc.)
+        // that were preserved in the new handler instance.
+        // We need to cast to MockSettingsImpl because the MethodInterceptorFilter constructor
+        // expects this concrete type, as suggested by the original buggy code's cast.
+        org.mockito.internal.creation.settings.MockSettingsImpl<T> settings = (org.mockito.internal.creation.settings.MockSettingsImpl<T>) newMockHandler.getMockSettings();
+        // Create a new MethodInterceptorFilter. Pass the new handler and, crucially,
+        // pass the *original settings* retrieved above, instead of default settings.
+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);
+        // Set the new filter as the callback for the mock instance.
+        // Assumes the mock instance implements the Factory interface (e.g., from CGLIB).
         ((Factory) mock).setCallback(0, newFilter);
     }
\ No newline at end of file
