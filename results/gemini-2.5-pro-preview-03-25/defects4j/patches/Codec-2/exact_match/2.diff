diff --git a/tmp/6f92639c-8b7b-41d0-ae19-2474653c1f55_buggy.java b/tmp/c670c439-43d2-4acc-95b2-61bb9d39510a_fixed.java
index aea175a..f0215a5 100644
--- a/tmp/6f92639c-8b7b-41d0-ae19-2474653c1f55_buggy.java
+++ b/tmp/c670c439-43d2-4acc-95b2-61bb9d39510a_fixed.java
@@ -1,76 +1,87 @@
     /**
      * <p>
      * Encodes all of the provided data, starting at inPos, for inAvail bytes.
      * Must be called at least twice:  once with the data to encode, and once
      * with inAvail set to "-1" to alert encoder that EOF has been reached,
      * so flush last remaining bytes (if not multiple of 3).
      * </p><p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations,
      * and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in byte[] array of binary data to base64 encode.
      * @param inPos Position to start reading data from.
      * @param inAvail Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buf == null || buf.length - pos < encodeSize) {
+            if (buf == null || buf.length - pos < encodeSize) { // Ensure buffer has space for potential output (4 chars + separator)
                 resizeBuf();
             }
-            switch (modulus) {
-                case 1:
+            switch (modulus) { // Handle any leftover bytes (0, 1, or 2).
+                case 1: // One leftover byte needs padding
+                    // Output: 2 base64 chars + 2 padding (if standard) = 4 chars
                     buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                         buf[pos++] = PAD;
                     }
                     break;
 
-                case 2:
+                case 2: // Two leftover bytes need padding
+                    // Output: 3 base64 chars + 1 padding (if standard) = 4 chars
                     buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                     }
                     break;
+                // case 0: No leftover bytes -> no padding needed. pos remains unchanged.
             }
-            if (lineLength > 0) {
+            // Add final line separator if lineLength is enabled AND some output has actually been generated (pos > 0).
+            // This prevents adding a line separator for empty input, fixing the reported bug.
+            if (lineLength > 0 && pos > 0) {
+                 // Ensure buffer has space for the line separator - resizeBuf should have handled this?
+                 // Adding an explicit check/resize here might be safer depending on resizeBuf implementation.
+                 // Assuming resizeBuf called above is sufficient for now.
                  System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                  pos += lineSeparator.length;
             }
-        } else {
+        } else { // Process available data bytes
             for (int i = 0; i < inAvail; i++) {
-                if (buf == null || buf.length - pos < encodeSize) {
+                if (buf == null || buf.length - pos < encodeSize) { // Ensure buffer has space for next output group (4 chars + potential separator)
                     resizeBuf();
                 }
-                modulus = (++modulus) % 3;
+                modulus = (++modulus) % 3; // Track position within input triplet
                 int b = in[inPos++];
-                if (b < 0) { b += 256; }
-                x = (x << 8) + b;
-                if (0 == modulus) {
+                if (b < 0) { b += 256; } // Convert byte to unsigned value
+                x = (x << 8) + b; // Accumulate 3 bytes into 24 bits (int x)
+                if (0 == modulus) { // If 3 bytes have been processed
+                    // Output 4 Base64 characters corresponding to the 3 bytes
                     buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buf[pos++] = encodeTable[x & MASK_6BITS];
-                    currentLinePos += 4;
+                    currentLinePos += 4; // Update count of characters on current line
+
+                    // If line length is enabled and exceeded, add line separator
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        currentLinePos = 0; // Reset line counter
                     }
                 }
             }
         }
     }
\ No newline at end of file
