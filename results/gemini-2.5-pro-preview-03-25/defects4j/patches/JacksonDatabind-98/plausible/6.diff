diff --git a/tmp/b4386452-afd5-48f7-9fda-8d7149308f04_buggy.java b/tmp/5da37ef5-1980-4849-a478-e6e98ea842c0_fixed.java
index afcc27c..1fd4104 100644
--- a/tmp/b4386452-afd5-48f7-9fda-8d7149308f04_buggy.java
+++ b/tmp/5da37ef5-1980-4849-a478-e6e98ea842c0_fixed.java
@@ -1,61 +1,99 @@
     /**
      * Variant called when creation of the POJO involves buffering of creator properties
      * as well as property-based creator.
      */
     public Object complete(JsonParser p, DeserializationContext ctxt,
             PropertyValueBuffer buffer, PropertyBasedCreator creator)
         throws IOException
     {
         // first things first: deserialize all data buffered:
         final int len = _properties.length;
         Object[] values = new Object[len];
         for (int i = 0; i < len; ++i) {
             String typeId = _typeIds[i];
             final ExtTypedProperty extProp = _properties[i];
             if (typeId == null) {
                 // let's allow missing both type and property (may already have been set, too)
                 if (_tokens[i] == null) {
                     continue;
                 }
                 // but not just one
                 // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
                 if (!extProp.hasDefaultType()) {
+                    // 13-Dec-2015, tatu: Hmmh. Not sure if this should be an error, or
+                    //   just be ignored? For now, considered an error.
                     ctxt.reportInputMismatch(_beanType,
                             "Missing external type id property '%s'",
                             extProp.getTypePropertyName());
+                    // NOTE: Original code continues execution, possibly leading to downstream errors.
                 } else {
                     typeId = extProp.getDefaultTypeId();
                 }
             } else if (_tokens[i] == null) {
                 SettableBeanProperty prop = extProp.getProperty();
+                // 13-Dec-2015, tatu: This seems like a problem scenario; maybe should
+                //    allow propagating null? Or should have been buffered? For now,
+                //    let's err out
                 ctxt.reportInputMismatch(_beanType,
                         "Missing property '%s' for external type id '%s'",
                         prop.getName(), _properties[i].getTypePropertyName());
+                 // NOTE: Original code continues execution.
             }
+
+            // It is possible that we have already seen property (from explicit type id)
+            // OR default type impl (compatible type); if so, do not deserialize
+            // 17-Jan-2019, tatu: ... logic related to this removed / handled in _deserialize ...
             values[i] = _deserialize(p, ctxt, i, typeId);
 
             final SettableBeanProperty prop = extProp.getProperty();
             // also: if it's creator prop, fill in
             if (prop.getCreatorIndex() >= 0) {
                 buffer.assignParameter(prop, values[i]);
 
                 // [databind#999] And maybe there's creator property for type id too?
                 SettableBeanProperty typeProp = extProp.getTypeProperty();
                 // for now, should only be needed for creator properties, too
                 if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
                     // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
                     //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+                    
+                    Object typeValue;
+                    // Use TokenBuffer to feed the String value to the deserializer:
+                    // (p is used as codec source, ctxt has config)
+                    TokenBuffer tb = new TokenBuffer(p, ctxt);
+                    tb.writeString(typeId);
+
+                    // important: need a parser based on buffer to read value
+                    JsonParser p2 = tb.asParser(p);
+                    // and position parser at the value token:
+                    p2.nextToken();
+
+                    JsonDeserializer<Object> deser = typeProp.getValueDeserializer();
+                    // 19-Dec-2018, tatu: MUST handle null deser, find default one if need be
+                    if (deser == null) {
+                         deser = ctxt.findContextualValueDeserializer(typeProp.getType(), typeProp);
+                    }
+                    if (deser != null) { // usually should exist
+                        typeValue = deser.deserialize(p2, ctxt);
+                    } else {
+                         // 13-Jan-2019, tatu: Let's assume this is only possible if type is `Object`,
+                         //    in which case String is fine? Or if plain String. Assign raw string.
+                         typeValue = typeId;
+                    }
+                    p2.close(); // ensure related buffers/readers released
+                    tb.close();
+
+                    buffer.assignParameter(typeProp, typeValue);
                 }
             }
         }
         Object bean = creator.build(ctxt, buffer);
         // third: assign non-creator properties
         for (int i = 0; i < len; ++i) {
             SettableBeanProperty prop = _properties[i].getProperty();
             if (prop.getCreatorIndex() < 0) {
                 prop.set(bean, values[i]);
             }
         }
         return bean;
     }
\ No newline at end of file
