diff --git a/tmp/1853e02c-4fdc-42fa-ab0c-2ae5e625728a_buggy.java b/tmp/4b5b1a9e-0d0e-4969-a70a-061e46811227_fixed.java
index afcc27c..a7f5b14 100644
--- a/tmp/1853e02c-4fdc-42fa-ab0c-2ae5e625728a_buggy.java
+++ b/tmp/4b5b1a9e-0d0e-4969-a70a-061e46811227_fixed.java
@@ -1,61 +1,92 @@
     /**
      * Variant called when creation of the POJO involves buffering of creator properties
      * as well as property-based creator.
      */
     public Object complete(JsonParser p, DeserializationContext ctxt,
             PropertyValueBuffer buffer, PropertyBasedCreator creator)
         throws IOException
     {
         // first things first: deserialize all data buffered:
         final int len = _properties.length;
         Object[] values = new Object[len];
         for (int i = 0; i < len; ++i) {
             String typeId = _typeIds[i];
             final ExtTypedProperty extProp = _properties[i];
+            final SettableBeanProperty prop = extProp.getProperty();
+
             if (typeId == null) {
                 // let's allow missing both type and property (may already have been set, too)
                 if (_tokens[i] == null) {
                     continue;
                 }
                 // but not just one
                 // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
                 if (!extProp.hasDefaultType()) {
-                    ctxt.reportInputMismatch(_beanType,
-                            "Missing external type id property '%s'",
+                    // 13-Dec-2015, tatu: Let's pass property name, initially missing
+                    ctxt.reportInputMismatch(prop, // first blamed it on bean type, but more accurate to report property
+                            "Missing external type id property '%s' (and no 'defaultImpl' specified)",
                             extProp.getTypePropertyName());
                 } else {
                     typeId = extProp.getDefaultTypeId();
                 }
             } else if (_tokens[i] == null) {
-                SettableBeanProperty prop = extProp.getProperty();
-                ctxt.reportInputMismatch(_beanType,
+                ctxt.reportInputMismatch(prop, // same as above, blame property
                         "Missing property '%s' for external type id '%s'",
-                        prop.getName(), _properties[i].getTypePropertyName());
+                        prop.getName(), extProp.getTypePropertyName());
             }
+            // 05-Mar-2017, tatu: Minor optimization; must check for null only so that we can
+            //    avoid errors if value was already seen.
+            if (_tokens[i] != null) {
                  values[i] = _deserialize(p, ctxt, i, typeId);
+            } // otherwise fine, got delegate or null value
 
-            final SettableBeanProperty prop = extProp.getProperty();
             // also: if it's creator prop, fill in
             if (prop.getCreatorIndex() >= 0) {
                 buffer.assignParameter(prop, values[i]);
 
                 // [databind#999] And maybe there's creator property for type id too?
                 SettableBeanProperty typeProp = extProp.getTypeProperty();
                 // for now, should only be needed for creator properties, too
                 if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
                     // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
                     //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+                    // 19-Jun-2018, tatu: Related to #1328, need to use TokenBuffer, JsonParser;
+                    //    otherwise cannot deserialize non-String type ids
+                    Object typeIdValue;
+                    // We must use a separate parser/token buffer, cannot simple feed String.
+                    // Behaviour changed in 2.9 (specifically for #1328); was problematic in edge cases
+                    TokenBuffer tb = new TokenBuffer(p, ctxt);
+                    tb.writeString(typeId);
+
+                    // 11-Jan-2019, tatu: as per [databind#2240], Type Id is a regular
+                    //   value, needs to be parsed as such.
+                    JsonDeserializer<Object> deser = ctxt.findContextualValueDeserializer(typeProp.getType(), typeProp);
+                    JsonParser p2 = tb.asParser(p); // important: share Settings, Codec
+                    p2.nextToken(); // advances to VALUE_STRING token
+                    typeIdValue = deser.deserialize(p2, ctxt);
+                    // should be ok; but verify there isn't anything else
+                     if (p2.nextToken() != null) {
+                        ctxt.reportWrongTokenException(typeProp.getType(), JsonToken.FIELD_NAME /*bogus*/,
+                                "Unexpected token after external type id value: "+p2.currentToken());
+                    }
+                    tb.close(); // important: release resources
+                    buffer.assignParameter(typeProp, typeIdValue);
                 }
             }
         }
         Object bean = creator.build(ctxt, buffer);
         // third: assign non-creator properties
         for (int i = 0; i < len; ++i) {
             SettableBeanProperty prop = _properties[i].getProperty();
             if (prop.getCreatorIndex() < 0) {
+                 // 05-Mar-2017, tatu: Important constraint: only set if value to set was seen/buffered.
+                 //   Value may be null.
+                 if (_tokens[i] != null) {
                     prop.set(bean, values[i]);
+                 } else { // Although... if Type Id was specified, maybe should assign null?
+                     //  Need to think about that more; for now, don't assign if value missing
+                 }
             }
         }
         return bean;
     }
\ No newline at end of file
