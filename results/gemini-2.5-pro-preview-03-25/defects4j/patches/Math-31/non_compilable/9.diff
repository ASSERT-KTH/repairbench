diff --git a/tmp/4a54580e-db57-494c-a770-2d7466ac4103_buggy.java b/tmp/ac65c988-b842-4bda-b669-ddd37118d443_fixed.java
index 57d43b9..8effa9d 100644
--- a/tmp/4a54580e-db57-494c-a770-2d7466ac4103_buggy.java
+++ b/tmp/ac65c988-b842-4bda-b669-ddd37118d443_fixed.java
@@ -1,102 +1,116 @@
+import org.apache.commons.math3.exception.ConvergenceException;
+import org.apache.commons.math3.exception.MaxCountExceededException;
+import org.apache.commons.math3.exception.util.LocalizedFormats;
+import org.apache.commons.math3.util.FastMath;
+import org.apache.commons.math3.util.Precision;
+
+// Assumes the context of the ContinuedFraction abstract class
+// with abstract methods getA(int n, double x) and getB(int n, double x) defined.
+
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
-     * on page 18 ff. in:
+     * on page 5-13 in:
      * <ul>
      * <li>
-     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
-     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
-     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
+     *   William H. Press, Saul A. Teukolsky, William T. Vetterling, Brian P. Flannery.
+     *   <em>Numerical Recipes in C: The Art of Scientific Computing</em> (2nd ed.).
+     *   Cambridge University Press, New York. ISBN 0-521-43108-5.
      * </li>
      * </ul>
+     * This implementation is numerically more stable than the direct evaluation of the recurrences
+     * \( C_n = a_n C_{n-1} + b_n C_{n-2} \) and \( D_n = a_n D_{n-1} + b_n D_{n-2} \).
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
-     * @param epsilon maximum error allowed.
-     * @param maxIterations maximum number of convergents
+     * @param epsilon maximum relative error allowed.
+     * @param maxIterations maximum number of iterations.
      * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
+     * @throws ConvergenceException if the algorithm fails to converge due to NaN or Infinite values.
+     * @throws MaxCountExceededException if the maximum number of iterations is reached before convergence.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
         final double small = 1e-50;
-        double hPrev = getA(0, x);
+        // Use the definitions from Numerical Recipes Chap. 5.2 / Lentz algorithm
+        // adapted for the MathWorld notation:
+        // f = a0 + b1 / (a1 + b2 / (a2 + ... ))
+        // NR notation: f = b0 + a1 / (b1 + a2 / (b2 + ... ))
+        // Mapping: NR b0 = MW a0, NR aj = MW bj, NR bj = MW aj for j>=1
 
-        // use the value of small as epsilon criteria for zero checks
-        if (Precision.equals(hPrev, 0.0, small)) {
-            hPrev = small;
+        double h = getA(0, x); // h is the estimate of the continued fraction (NR f)
+                               // Initialized to MW a0 (NR b0)
+
+        // Handle potential division by zero in first step C=h=0
+        if (Precision.equals(h, 0.0, small)) {
+            h = small;
+        }
+
+        double c = h;     // NR C variable (stores C_{n-1} at the start of iteration n)
+        double d = 0.0;   // NR D variable (stores D_{n-1} at the start of iteration n)
+        double delta;   // Stores delta_n = C_n * D_n factor (where D_n is the inverse form 1/(b_n + a_n D_{n-1}))
+
+        int n = 1; // Iteration counter starts from 1
+
+        while (n <= maxIterations) {
+            double a = getB(n, x); // NR a_n = MW b_n
+            double b = getA(n, x); // NR b_n = MW a_n
+
+            // Calculate D_n = b_n + a_n * D_{n-1} (NR recurrence)
+            // Here d corresponds to D_{n-1} before the update
+            d = b + a * d;
+            // Handle potential zero D_n = 0 by replacing with small value
+            if (Precision.equals(d, 0.0, small)) {
+                d = small;
+            }
+
+            // Calculate C_n = b_n + a_n / C_{n-1} (NR recurrence)
+            // Here c corresponds to C_{n-1} before the update
+            c = b + a / c;
+             // Handle potential zero C_n = 0 by replacing with small value
+            if (Precision.equals(c, 0.0, small)) {
+                c = small;
+            }
+
+            // Calculate D_n = 1 / D_n (NR step, store inverse)
+            // After this, d holds 1/D_n
+            d = 1.0 / d;
+
+            // Calculate delta_n = C_n * (1/D_n) (NR step)
+            // C_n is stored in c, 1/D_n is stored in d
+            delta = c * d;
+
+            // Update h_n = h_{n-1} * delta_n (NR step)
+            // h corresponds to h_{n-1} before the update
+            h = h * delta;
+
+            // Check for convergence: |delta_n - 1| < epsilon
+            if (FastMath.abs(delta - 1.0) < epsilon) {
+                break; // Converged
             }
 
-        int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
-
-        while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
-
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+            // Check for divergence signaled by Infinite or NaN h_n
+            // These checks are performed after the update of h.
+            if (Double.isInfinite(h)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
-                }
-            }
-
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
-
-            if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
-            }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
-            }
-
-            if (FastMath.abs(deltaN - 1.0) < epsilon) {
-                break;
+             if (Double.isNaN(h)) {
+                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
 
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
             n++;
         }
 
-        if (n >= maxIterations) {
+        // Check for non-convergence after the loop exits
+        if (n > maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
-        return hN;
+        return h;
     }
\ No newline at end of file
