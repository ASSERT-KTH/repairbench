diff --git a/tmp/c8d8b612-bc92-4ece-8890-07358462c7a0_buggy.java b/tmp/da8c07cf-efe0-4278-84c6-3e5b37ab5028_fixed.java
index 57d43b9..8ff8219 100644
--- a/tmp/c8d8b612-bc92-4ece-8890-07358462c7a0_buggy.java
+++ b/tmp/da8c07cf-efe0-4278-84c6-3e5b37ab5028_fixed.java
@@ -1,102 +1,115 @@
+import org.apache.commons.math3.exception.ConvergenceException;
+import org.apache.commons.math3.exception.MaxCountExceededException;
+import org.apache.commons.math3.exception.util.LocalizedFormats;
+import org.apache.commons.math3.util.FastMath;
+import org.apache.commons.math3.util.Precision;
+
+// Assume the enclosing class ContinuedFraction and necessary imports exist.
+
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
-     *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
-     * on page 18 ff. in:
-     * <ul>
-     * <li>
-     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
-     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
-     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
-     * </li>
-     * </ul>
-     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
-     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
+     * in Section 5.2 of "Numerical Recipes". This implementation avoids potential
+     * overflow/underflow problems that may occur using the direct evaluation of
+     * the recurrence relations for numerator and denominator.
+     * </p>
+     * <p>
+     * The continued fraction is assumed to be of the form:
+     * <pre>
+     *        a1
+     * b0 + --------
+     *      b1 + a2
+     *           --------
+     *           b2 + ...
+     * </pre>
+     * where b<sub>0</sub> = {@link #getA(int, double) getA(0, x)},
+     * a<sub>n</sub> = {@link #getA(int, double) getA(n, x)} for n &ge; 1, and
+     * b<sub>n</sub> = {@link #getB(int, double) getB(n, x)} for n &ge; 1.
      * </p>
      *
      * @param x the evaluation point.
-     * @param epsilon maximum error allowed.
-     * @param maxIterations maximum number of convergents
+     * @param epsilon maximum relative error allowed for convergence.
+     * @param maxIterations maximum number of iterations.
      * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
+     * @throws MaxCountExceededException if the algorithm fails to converge after
+     * {@code maxIterations} iterations.
+     * @throws ConvergenceException if the algorithm diverges (produces NaN or Infinite).
      */
-    public double evaluate(double x, double epsilon, int maxIterations) {
-        final double small = 1e-50;
-        double hPrev = getA(0, x);
+    public double evaluate(double x, double epsilon, int maxIterations) throws ConvergenceException, MaxCountExceededException {
+        // Use the modified Lentz algorithm described in Numerical Recipes, Chapter 5.2
+        final double small = 1e-50; // A small number to prevent division by zero
 
-        // use the value of small as epsilon criteria for zero checks
-        if (Precision.equals(hPrev, 0.0, small)) {
-            hPrev = small;
+        double h_n; // Stores the convergent value f_n = P_n / Q_n
+        double b_n; // Term b_n from getB(n, x)
+        double a_n; // Term a_n from getA(n, x)
+
+        // Initialize with b0 = getA(0, x)
+        h_n = getA(0, x);
+
+        // Handle b0 = 0 case as suggested by Numerical Recipes
+        // If b0 is very close to zero, Subsequent calculations may lead to NaN or Inf.
+        if (Precision.equals(h_n, 0.0, small)) {
+            h_n = small;
         }
 
+        double C_n = h_n;  // Lentz's C_n variable, initialized C_0 = h_0 = b0
+        double D_n = 0.0;  // Lentz's D_n variable, initialized D_0 = 0
+
+        double delta_n; // The ratio C_n * D_n, used for convergence check
+
         int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
+        while (n <= maxIterations) {
+            a_n = getA(n, x);
+            b_n = getB(n, x);
 
-        while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
+            // Lentz recurrence relation for D_n
+            // D_n = b_n + a_n * D_{n-1}
+            D_n = b_n + a_n * D_n;
+            // Prevent division by zero / handle underflow
+            if (Precision.equals(D_n, 0.0, small)) {
+                D_n = small;
+            }
+            D_n = 1.0 / D_n; // D_n now stores 1 / (b_n + a_n * D_{n-1})
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+            // Lentz recurrence relation for C_n
+            // C_n = b_n + a_n / C_{n-1}
+            C_n = b_n + a_n / C_n;
+            // Prevent division by zero / handle underflow
+            if (Precision.equals(C_n, 0.0, small)) {
+                C_n = small;
+            }
+            // C_n now stores b_n + a_n / C_{n-1}
+
+            // Calculate the ratio delta_n = C_n * D_n
+            delta_n = C_n * D_n;
+
+            // Update the convergent value h_n = h_{n-1} * delta_n
+            h_n = h_n * delta_n;
+
+            // Check for divergence (NaN or Infinity) after the update
+            if (Double.isInfinite(h_n)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
-                }
-            }
-
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
-
-            if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
-            }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+            if (Double.isNaN(h_n)) {
+                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
 
-            if (FastMath.abs(deltaN - 1.0) < epsilon) {
-                break;
+            // Check for convergence: |delta_n - 1| < epsilon
+            if (FastMath.abs(delta_n - 1.0) < epsilon) {
+                break; // Converged
             }
 
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
             n++;
         }
 
-        if (n >= maxIterations) {
+        // Check if convergence was achieved within maxIterations
+        if (n > maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
-        return hN;
+        return h_n;
     }
\ No newline at end of file
