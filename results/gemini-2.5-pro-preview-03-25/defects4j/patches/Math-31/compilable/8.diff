diff --git a/tmp/af227c4c-bad5-4b58-bccf-6210123ebd7e_buggy.java b/tmp/1a8f1d86-433b-4d5b-8e29-32aa7287f7a4_fixed.java
index 57d43b9..c73f1bf 100644
--- a/tmp/af227c4c-bad5-4b58-bccf-6210123ebd7e_buggy.java
+++ b/tmp/1a8f1d86-433b-4d5b-8e29-32aa7287f7a4_fixed.java
@@ -1,102 +1,113 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
+     * The fraction implemented is of the form:
+     * <pre>
+     *           a1
+     * b0 + ---------------
+     *      b1 +      a2
+     *           ----------
+     *           b2 +    a3
+     *                -----
+     *                b3 + ...
+     * </pre>
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
+     * @throws MaxCountExceededException if the algorithm fails to converge.
+     * @throws ConvergenceException if the algorithm detects divergence.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
-        final double small = 1e-50;
-        double hPrev = getA(0, x);
+        // Modified Lentz algorithm (Numerical Recipes section 5.2)
+        // This implementation evaluates the fraction b_0 + K_{n=1}^\infty (a_n / b_n)
+        // It is assumed that getA(0, x) returns b_0
+        // getA(n, x) returns a_n for n >= 1
+        // getB(n, x) returns b_n for n >= 1
 
-        // use the value of small as epsilon criteria for zero checks
-        if (Precision.equals(hPrev, 0.0, small)) {
-            hPrev = small;
+        final double small = 1e-50; // A small number to avoid division by zero
+
+        double b0 = getA(0, x);
+        // Handle the case b0 = 0 by setting it to a small value.
+        if (Precision.equals(b0, 0.0, small)) {
+            b0 = small;
         }
 
+        double h_n = b0;    // Current convergent value f_n (starts with f_0 = b_0)
+        double C_n = h_n;   // C_n value needed for next iteration's C calculation (C_0 = f_0)
+        double D_n = 0.0;   // D_n value needed for next iteration's D calculation (D_0 = 0)
+
         int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
+        while (n <= maxIterations) {
+            final double a_n = getA(n, x);
+            final double b_n = getB(n, x);
 
-        while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
+            // Compute D_curr = b_n + a_n * D_{n-1}
+            // (D_n from the previous iteration, which is the inverted D_curr_inverted)
+            // This is D'_n in NR notation before inversion
+            double D_curr = b_n + a_n * D_n;
+            if (Precision.equals(D_curr, 0.0, small)) {
+                D_curr = small;
+            }
+            // Compute C_curr = b_n + a_n / C_{n-1}
+            // (C_n from the previous iteration)
+            // This is C_n in NR notation
+            double C_curr = b_n + a_n / C_n;
+             if (Precision.equals(C_curr, 0.0, small)) {
+                 C_curr = small;
+            }
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+            // D_curr now becomes 1 / D'_n
+            D_curr = 1.0 / D_curr;
+
+            // delta_n = C_n * (1 / D'_n) = C_n / D'_n
+            double delta_n = C_curr * D_curr;
+
+            // h_n = h_{n-1} * delta_n
+            h_n = h_n * delta_n;
+
+            // Check for NaN or Infinity, which indicate divergence
+            if (Double.isInfinite(h_n)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+            if (Double.isNaN(h_n)) {
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
-                }
-            }
-
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
 
-            if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
-            }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
-            }
-
-            if (FastMath.abs(deltaN - 1.0) < epsilon) {
+            // Check convergence: |delta_n - 1| < epsilon
+            if (FastMath.abs(delta_n - 1.0) < epsilon) {
                 break;
             }
 
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
+            // Prepare for next iteration:
+            // D_n stores the inverted D_curr for the next D calculation
+            D_n = D_curr;
+            // C_n stores C_curr for the next C calculation
+            C_n = C_curr;
+
             n++;
         }
 
-        if (n >= maxIterations) {
+        if (n > maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
-        return hN;
+        return h_n;
     }
\ No newline at end of file
