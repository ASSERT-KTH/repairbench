diff --git a/tmp/09ae3731-4746-43da-bae4-c4369911ae21_buggy.java b/tmp/2c8c35b9-33ab-4671-9c8d-44236fba52c1_fixed.java
index 57d43b9..a1ae644 100644
--- a/tmp/09ae3731-4746-43da-bae4-c4369911ae21_buggy.java
+++ b/tmp/2c8c35b9-33ab-4671-9c8d-44236fba52c1_fixed.java
@@ -1,102 +1,112 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
+     * The Lentz algorithm however uses notation f = b₀' + a₁'/(b₁' + a₂'/(b₂' + ...)).
+     * The implementation maps MathWorld → Lentz: b₀' = a₀, a_n' = b_n (for n≥1), b_n' = a_n (for n≥1).
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
+     * @throws ConvergenceException if the algorithm fails to converge or evaluates to infinity/NaN.
+     * @throws MaxCountExceededException if the maximum number of iterations is reached before convergence.
      */
-    public double evaluate(double x, double epsilon, int maxIterations) {
+    public double evaluate(double x, double epsilon, int maxIterations) throws ConvergenceException, MaxCountExceededException {
         final double small = 1e-50;
+
+        // Initialize based on the modified Lentz algorithm (Thompson/Barnett notation)
+        // f = b₀' + a₁'/(b₁' + a₂'/(b₂' + ...))
+        // Mapping from MathWorld: b₀' = a₀, a_n' = b_n (for n≥1), b_n' = a_n (for n≥1)
+
+        // hPrev corresponds to f_{n-1} in NR/T&B, starts with f₀ = b₀' = a₀
         double hPrev = getA(0, x);
-
-        // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
-        int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
+        // C_{n-1}, starts with C₀ = f₀
         double cPrev = hPrev;
-        double hN = hPrev;
-
-        while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
-
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+        // D_{n-1}, starts with D₀ = 0 (using T&B D_n = 1 / (b_n' + a_n' D_{n-1}))
+        double dPrev = 0.0;
+        // Stores the current estimate f_n, starts with f₀
+        double fN = hPrev;
+
+        int n = 1;
+        // Use n <= maxIterations to allow exactly maxIterations iterations.
+        while (n <= maxIterations) {
+            final double a_n_mw = getA(n, x); // a_n from MathWorld notation
+            final double b_n_mw = getB(n, x); // b_n from MathWorld notation
+
+            // Map to Thompson/Barnett notation coefficients for iteration n
+            final double a_n_tb = b_n_mw; // a_n' = b_n
+            final double b_n_tb = a_n_mw; // b_n' = a_n
+
+            // Calculate D_n = b_n' + a_n' * D_{n-1} (before inversion)
+            double dN = b_n_tb + a_n_tb * dPrev;
+            if (Precision.equals(dN, 0.0, small)) {
+                // Avoid division by zero near zero.
+                dN = small;
+            }
+            // Calculate C_n = b_n' + a_n' / C_{n-1}
+            double cN = b_n_tb + a_n_tb / cPrev;
+             if (Precision.equals(cN, 0.0, small)) {
+                // Avoid division by zero near zero.
+                cN = small;
+            }
+
+            // Complete calculation of D_n by inversion
+            dN = 1.0 / dN;
+
+            // Calculate delta_n = C_n * D_n
+            final double deltaN = cN * dN;
+
+            // Calculate f_n = f_{n-1} * delta_n
+            fN = hPrev * deltaN;
+
+            // Check for divergence BEFORE checking convergence
+            // This prevents potential issues with checks like |1/0 - 1| < epsilon
+            if (Double.isInfinite(fN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
-                }
-            }
-
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
-
-            if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
-            }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+            if (Double.isNaN(fN)) {
+                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
 
+            // Check for convergence: |delta_n - 1| < epsilon
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
+            // Update variables for the next iteration (n+1)
+            // D_{n} becomes D_{n-1} for next iteration
+            dPrev = dN;
+            // C_{n} becomes C_{n-1} for next iteration
+            cPrev = cN;
+            // f_{n} becomes f_{n-1} for next iteration
+            hPrev = fN;
             n++;
         }
 
-        if (n >= maxIterations) {
+        // Check if maximum iterations were exceeded
+        if (n > maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
-        return hN;
+        return fN;
     }
\ No newline at end of file
