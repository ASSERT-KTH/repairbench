diff --git a/tmp/5a855e52-b4e3-49ca-849c-fc966dd06f74_buggy.java b/tmp/44438aa2-36f7-4cbb-9fa0-a8dcd1d8f7c6_fixed.java
index 57d43b9..df58945 100644
--- a/tmp/5a855e52-b4e3-49ca-849c-fc966dd06f74_buggy.java
+++ b/tmp/44438aa2-36f7-4cbb-9fa0-a8dcd1d8f7c6_fixed.java
@@ -1,102 +1,92 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
-     * on page 18 ff. in:
-     * <ul>
-     * <li>
-     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
-     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
-     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
-     * </li>
-     * </ul>
+     * on page 5 Lentz, W. J. "Generating Bessel functions in Mie scattering calculations using continued fractions." Appl. Opt. 15, 668-671 (1976)
+     * and Thompson, I. J., and A. R. Barnett. "Coulomb and Bessel functions of complex arguments and order." Journal of Computational Physics 64.2 (1986): 490-509.
+     * </p>
+     * <p>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
-     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
+     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>,
+     * which corresponds to b<sub>i</sub> and a<sub>i</sub> in the NR/Lentz/Thompson notation respectively.
+     * The continued fraction is written as:
+     * <pre>
+     *               b1              b2
+     * f = a0 + ---------------   ---------------
+     *          a1 +            a2 + ...
+     * </pre>
      * </p>
      *
      * @param x the evaluation point.
-     * @param epsilon maximum error allowed.
-     * @param maxIterations maximum number of convergents
+     * @param epsilon maximum error allowed relative to the value.
+     * @param maxIterations maximum number of iterations.
      * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
+     * @throws MaxCountExceededException if the algorithm exceeds the maximum number of iterations.
+     * @throws ConvergenceException if the algorithm generates infinite or NaN values.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
-        final double small = 1e-50;
-        double hPrev = getA(0, x);
+        // Use the modified Lentz algorithm (Numerical Recipes section 5.2)
+        // F = b0 + a1 / (b1 + a2 / (b2 + ...))
+        // In our code: b0 = getA(0, x), bn = getA(n, x), an = getB(n, x) for n >= 1
 
-        // use the value of small as epsilon criteria for zero checks
-        if (Precision.equals(hPrev, 0.0, small)) {
-            hPrev = small;
+        final double small = 1e-50; // A small number to prevent division by zero
+
+        double h_n = getA(0, x); // Initialize h_n = b0 (f_0 in NR notation)
+
+        // Handle the case b0 = 0
+        if (Precision.equals(h_n, 0.0, small)) {
+            h_n = small;
+        }
+
+        double C_n = h_n;  // C_0 = h_0
+        double D_n = 0.0;  // D_0 = 0
+
+        for (int n = 1; n <= maxIterations; ++n) {
+            final double a_n = getB(n, x); // NR a_n corresponds to code's b_n
+            final double b_n = getA(n, x); // NR b_n corresponds to code's a_n
+
+            // Calculate D_n = b_n + a_n * D_{n-1}
+            // Note: D_n holds D_{n-1} from the previous iteration before this calculation
+            D_n = b_n + a_n * D_n;
+            // Prevent D_n from being zero
+            if (Precision.equals(D_n, 0.0, small)) {
+                D_n = small;
+            }
+
+            // Calculate C_n = b_n + a_n / C_{n-1}
+            // Note: C_n holds C_{n-1} from the previous iteration before this calculation
+            C_n = b_n + a_n / C_n;
+            // Prevent C_n from being zero
+            if (Precision.equals(C_n, 0.0, small)) {
+                C_n = small;
             }
 
-        int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
-
-        while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
-
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+            // Calculate the change factor Delta_n = C_n / D_n
+            // Update rule requires D_n = 1 / D_n for the next iteration calculation
+            D_n = 1.0 / D_n;
+            final double delta_n = C_n * D_n;
+
+            // Update the continued fraction value h_n = h_{n-1} * Delta_n
+            h_n = h_n * delta_n;
+
+            // Check for divergence (Infinity or NaN)
+            if (Double.isInfinite(h_n)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+            if (Double.isNaN(h_n)) {
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
-                }
-            }
-
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
 
-            if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+            // Check for convergence: |Delta_n - 1| < epsilon
+            if (FastMath.abs(delta_n - 1.0) < epsilon) {
+                return h_n; // Converged
             }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
-            }
-
-            if (FastMath.abs(deltaN - 1.0) < epsilon) {
-                break;
-            }
-
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
-            n++;
         }
 
-        if (n >= maxIterations) {
+        // Maximum number of iterations reached without convergence
         throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                             maxIterations, x);
     }
\ No newline at end of file
-
-        return hN;
-    }
