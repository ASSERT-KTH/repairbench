diff --git a/tmp/11e65472-4ded-439f-bf38-e8b88579daa7_buggy.java b/tmp/c8517c9b-fe73-45d5-a5bf-1d54d6db1cb7_fixed.java
index 6e45f80..83801fd 100644
--- a/tmp/11e65472-4ded-439f-bf38-e8b88579daa7_buggy.java
+++ b/tmp/c8517c9b-fe73-45d5-a5bf-1d54d6db1cb7_fixed.java
@@ -1,21 +1,44 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
-      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
+      @Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        // Return a new TypeAdapter that wraps the provided typeAdapter
+        // and performs a runtime check to ensure the deserialized object
+        // matches the requested type T2.
+        return new TypeAdapter<T2>() {
+          @Override public void write(JsonWriter out, T2 value) throws IOException {
+            // Delegate writing to the original adapter.
+            // Cast is safe because T2 is confirmed to be a subtype of T1 upon factory creation.
+            typeAdapter.write(out, (T1) value);
+          }
 
+          @Override public T2 read(JsonReader in) throws IOException {
+            // Delegate reading to the original adapter
+            T1 value = typeAdapter.read(in);
+            // Runtime check: ensure the deserialized object is an instance of the requested type T2
+            // This is necessary because the original adapter might just deserialize based on the
+            // JSON structure, not the specific requested subtype T2.
+            if (value != null && !requestedType.isInstance(value)) {
+              // Build the error message similar to how Gson does it for its internal adapters
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + value.getClass().getName() + ";_value=" + value); // Added value for debugging context like Gson does
+            }
+            // Cast is now safe due to the runtime check.
+            return (T2) value;
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
