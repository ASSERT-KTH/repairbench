diff --git a/tmp/bf33da74-f812-4005-b02e-7f06a8359e77_buggy.java b/tmp/e0ba199e-9394-48ad-aa36-f551f1a940e8_fixed.java
index 6e45f80..7b03fd2 100644
--- a/tmp/bf33da74-f812-4005-b02e-7f06a8359e77_buggy.java
+++ b/tmp/e0ba199e-9394-48ad-aa36-f551f1a940e8_fixed.java
@@ -1,21 +1,50 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
+      @Override
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        // Return a new adapter that delegates and performs runtime checks
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            // Delegate writing to the original adapter. Type safety is guaranteed
+            // because the factory only returns this adapter if T2 is a subtype of T1.
+            typeAdapter.write(out, (T1) value);
+          }
 
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            // Delegate reading to the original adapter
+            T1 value = typeAdapter.read(in);
+            // Runtime check: ensure the deserialized value is assignable to the requested type T2.
+            // This is necessary because the T1 adapter might deserialize a different subtype of T1
+            // than the requested T2. For example, when T1 is Number.class and T2 is Double.class,
+            // the T1 adapter might return an Integer which cannot be cast to a Double.
+            if (value != null && !requestedType.isInstance(value)) {
+              // The type adapter created a value of the wrong type
+              // Throw ClassCastException or JsonSyntaxException? Gson throws JsonSyntaxException e.g.
+              // for wrong JsonElement type, so let's stick to that.
+              throw new JsonSyntaxException(
+                  "Expected a " + requestedType.getName() + " but was " + value.getClass().getName()
+                  + "; synthesized type adapter failed type check"); // Added more context to message
+            }
+            // The cast is safe because we checked isInstance()
+            return (T2) value;
           }
+        };
+      }
+
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
