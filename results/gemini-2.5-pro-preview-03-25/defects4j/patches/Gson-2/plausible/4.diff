diff --git a/tmp/9882ec56-8bb0-4ea6-a1e1-dcb277747f84_buggy.java b/tmp/9a4bfa26-2bc6-4ec3-b337-e126288ccb04_fixed.java
index 6e45f80..4b4645a 100644
--- a/tmp/9882ec56-8bb0-4ea6-a1e1-dcb277747f84_buggy.java
+++ b/tmp/9a4bfa26-2bc6-4ec3-b337-e126288ccb04_fixed.java
@@ -1,21 +1,48 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
+      @Override
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // Return a wrapper adapter that delegates to the user-provided adapter
+        // but performs runtime type checking after deserialization.
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            // Delegate writing to the original adapter.
+            // Cast is safe because T2 is assignable to T1.
+            typeAdapter.write(out, (T1) value);
           }
+
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            // Delegate reading to the original adapter.
+            T1 result = typeAdapter.read(in);
+            // Perform runtime check: ensure the deserialized object is assignable
+            // to the specifically requested type T2.
+            if (result != null && !requestedType.isInstance(result)) {
+              // The deserialized object is not an instance of the requested type.
+              // Throw an exception similar to what Gson does for type mismatches.
+              throw new JsonSyntaxException(
+                  "Expected a " + requestedType.getName() + " but was " + result.getClass().getName());
+            }
+            // Cast is safe due to the isInstance check.
+            return (T2) result;
+          }
+        };
+      }
+
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
