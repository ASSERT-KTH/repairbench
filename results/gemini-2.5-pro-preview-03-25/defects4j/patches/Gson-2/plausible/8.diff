diff --git a/tmp/220d3f18-fddf-41f8-abd2-3876e410ae36_buggy.java b/tmp/c7a372c3-f630-49dd-b9e7-fd7d9f9cac67_fixed.java
index 6e45f80..adda423 100644
--- a/tmp/220d3f18-fddf-41f8-abd2-3876e410ae36_buggy.java
+++ b/tmp/c7a372c3-f630-49dd-b9e7-fd7d9f9cac67_fixed.java
@@ -1,21 +1,40 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
+      @Override
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        // Wrap the given type adapterdelegate to confirm that the final type matches the requested type.
+        return new TypeAdapter<T2>() {
+          @Override public void write(JsonWriter out, T2 value) throws IOException {
+            // T2 is a subtype of T1, so this assignment is safe.
+            typeAdapter.write(out, (T1) value);
+          }
+          @Override public T2 read(JsonReader in) throws IOException {
+            T1 result = typeAdapter.read(in);
+            if (result != null && !requestedType.isInstance(result)) {
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + result.getClass().getName());
+                  // Adding path information might be helpful for debugging, similar to Gson's standard adapters
+                  // For example: + "; at path " + in.getPath());
+                  // However, sticking to the original test's expected message structure for now.
+            }
+            // This cast is safe because of the isInstance check above.
+            return (T2) result;
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
