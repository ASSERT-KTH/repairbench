diff --git a/tmp/202b2c4b-a675-47dd-bee9-06ed85faa830_buggy.java b/tmp/2b860407-da03-43eb-9755-e700779d7e36_fixed.java
index 6e45f80..adab8c2 100644
--- a/tmp/202b2c4b-a675-47dd-bee9-06ed85faa830_buggy.java
+++ b/tmp/2b860407-da03-43eb-9755-e700779d7e36_fixed.java
@@ -1,21 +1,41 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
+      @Override
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
-
+        // Wrap the type adapter to perform runtime type checking
+        return new TypeAdapter<T2>() {
+          @Override public void write(JsonWriter out, T2 value) throws IOException {
+            // Delegate writing to the original adapter. T2 is a subtype of T1,
+            // so casting to T1 is safe.
+            typeAdapter.write(out, (T1) value);
+          }
+          @Override public T2 read(JsonReader in) throws IOException {
+            // Delegate reading to the original adapter
+            T1 result = typeAdapter.read(in);
+            // Check if the deserialized object is an instance of the requested type T2
+            // This is necessary because the original adapter might produce a T1 instance
+            // that is not actually a T2 instance (e.g., JsonPrimitive instead of JsonObject).
+            if (result != null && !requestedType.isInstance(result)) {
+              throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                  + " but was " + result.getClass().getName());
+            }
+            // The cast is safe because we checked the instance type, or result is null
+            return (T2) result;
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
