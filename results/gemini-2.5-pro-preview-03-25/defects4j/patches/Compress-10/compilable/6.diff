diff --git a/tmp/ba07db0f-289e-4444-926b-5484c885903b_buggy.java b/tmp/80a331ff-df54-41af-b89c-1a59992f452f_fixed.java
index 85e6a42..1c640d4 100644
--- a/tmp/ba07db0f-289e-4444-926b-5484c885903b_buggy.java
+++ b/tmp/80a331ff-df54-41af-b89c-1a59992f452f_fixed.java
@@ -1,50 +1,63 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
+        // Note: Iterating over keySet() and modifying the entry potentially
+        // referenced by the key might be problematic if the modification changes
+        // the key's hash code (like changing the name). Consider iterating over
+        // a copy or using entrySet() if issues arise.
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
+            // Seek to the position of filename length and extra field length in LFH
+            // LFH_OFFSET_FOR_FILENAME_LENGTH = 26
+            // SHORT = 2
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
-            archive.readFully(b);
+            archive.readFully(b); // Read filename length (2 bytes)
             int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
+            archive.readFully(b); // Read extra field length (2 bytes)
             int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
-            }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+            // Calculate the data offset using the lengths from LFH.
+            // Data offset = LFH start offset + fixed LFH header size (30)
+            //               + filename length + extra field length
+            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT
+                                     + fileNameLen + extraFieldLen;
+
+            // DONT'T read the LFH's extra data field or overwrite the entry's extra data.
+            // The entry 'ze' was populated from the central directory and we should keep
+            // the central directory's extra data which is generally more reliable
+            // and might contain information (like Unicode Path Extra Fields) not present
+            // in the LFH. Overwriting it here can lead to data access issues later.
+            // archive.skipBytes(fileNameLen); // No longer needed as we don't read extra data after this
+            // byte[] localExtraData = new byte[extraFieldLen]; // No longer needed
+            // archive.readFully(localExtraData); // No longer needed
+            // ze.setExtra(localExtraData); // DO NOT DO THIS - this was the likely bug
+
+            // If the entry might need name/comment correction based on central directory extra fields:
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+                // Attempt to set name and comment using the extra fields *already in ze*
+                // (which are the ones from the central directory).
+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
+                // If the name was changed (hopefully correctly using CD extra fields), update the nameMap.
                 if (!orig.equals(ze.getName())) {
+                    // Note: modifying the map while iterating over keyset can be risky.
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
         }
     }
\ No newline at end of file
