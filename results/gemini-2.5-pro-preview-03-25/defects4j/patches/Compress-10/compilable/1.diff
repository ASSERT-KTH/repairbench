diff --git a/tmp/0533d818-223a-45d5-80ac-2e5c4089f9a4_buggy.java b/tmp/ceaf76f1-9e7b-4ce1-89d6-5ec5206ff687_fixed.java
index 85e6a42..9b8a4f9 100644
--- a/tmp/0533d818-223a-45d5-80ac-2e5c4089f9a4_buggy.java
+++ b/tmp/ceaf76f1-9e7b-4ce1-89d6-5ec5206ff687_fixed.java
@@ -1,50 +1,69 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
+            // Seek to the LFH entry's filename length field
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
+            // Read filename length (2 bytes) and extra field length (2 bytes)
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
+
+            // Skip the filename in the LFH
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+                    throw new IOException("failed to skip file name in"
+                                               + " local file header"); // Use IOException
                 }
                 lenToSkip -= skipped;
             }
+
+            // Read the local extra field data to ascertain the correct data offset
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
+            // NOTE: We DO NOT update the entry's extra data with localExtraData.
+            // The extra data from the central directory is authoritative for metadata.
+            // Overwriting it here would discard potentially important information (e.g.,
+            // Unicode path extra fields) which might only be present in the central directory.
+            // ze.setExtra(localExtraData); // DO NOT DO THIS
+
+            // Calculate the data offset using lengths from LFH
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+            // If the UTF-8 flag is not set, we might need to use extra fields
+            // (from the central directory) to find the correct name.
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+                // This method uses the extra fields already set on ze (from CDH)
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
+                // If the name changed, update the name map
                 if (!orig.equals(ze.getName())) {
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
+            
+            // General Purpose Bit Flags specific processing? Usually done elsewhere.
+            // Setting the data offset is the main purpose here, plus potential name correction.
         }
     }
\ No newline at end of file
