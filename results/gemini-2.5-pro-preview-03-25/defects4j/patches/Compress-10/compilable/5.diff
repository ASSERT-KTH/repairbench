diff --git a/tmp/407f3167-6a12-4e7b-a9c2-d521c0b407a8_buggy.java b/tmp/3e7f686f-abf8-4b92-8060-b8a2288dfa25_fixed.java
index 85e6a42..017eaae 100644
--- a/tmp/407f3167-6a12-4e7b-a9c2-d521c0b407a8_buggy.java
+++ b/tmp/3e7f686f-abf8-4b92-8060-b8a2288dfa25_fixed.java
@@ -1,50 +1,58 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
+            // Seek to the position of filename length and extra field length
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
-            archive.readFully(b);
+            archive.readFully(b); // Read filename length
             int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
+            archive.readFully(b); // Read extra field length
             int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
-            }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+            // Calculate the data offset required to stream the entry data
+            // This is based on the LFH structure:
+            // LFH Signature (4) + Version (2) + GP Bit Flag (2) + Method (2) + Time (2) + Date (2)
+            // + CRC32 (4) + Compressed Size (4) + Uncompressed Size (4)
+            // + Filename Length (2) + Extra Field Length (2) == 30 bytes total fixed size
+            // + Filename Length (variable) + Extra Field Length (variable)
+            // = Start of data
+            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT
+                + fileNameLen + extraFieldLen;
+
+            // The extra data from the LFH is not needed here; we have the authoritative version
+            // from the central directory already stored in ze. We MUST NOT overwrite it,
+            // as the LFH extra data might be different or incomplete (e.g., missing Unicode Path).
+            // cf. https://issues.apache.org/jira/browse/COMPRESS-180
+            // cf. https://issues.apache.org/jira/browse/COMPRESS-206
+
+            // If the entry lacked the UTF8 general purpose bit flag in the central directory,
+            // we might need to re-evaluate the name and comment based on the presence of
+            // Unicode extra fields (which should be the ones from the central directory).
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+                // This uses the extra fields already parsed from the central directory
+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
                 if (!orig.equals(ze.getName())) {
+                    // If the name changed (e.g., corrected via Unicode Path Extra Field),
+                    // update the name mapping.
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
         }
     }
\ No newline at end of file
