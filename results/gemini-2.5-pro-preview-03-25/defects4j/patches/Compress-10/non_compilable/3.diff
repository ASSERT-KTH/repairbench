diff --git a/tmp/26b65d0c-c0ec-4543-9c28-626c57871a39_buggy.java b/tmp/17b5d126-b39c-4b96-8ecd-64c8e1a0672f_fixed.java
index 85e6a42..0477d9c 100644
--- a/tmp/26b65d0c-c0ec-4543-9c28-626c57871a39_buggy.java
+++ b/tmp/17b5d126-b39c-4b96-8ecd-64c8e1a0672f_fixed.java
@@ -1,50 +1,80 @@
+import java.io.IOException;
+import java.util.Map;
+
+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
+import org.apache.commons.compress.archivers.zip.ZipConstants;
+import org.apache.commons.compress.archivers.zip.ZipShort;
+import org.apache.commons.compress.archivers.zip.ZipUtil;
+
+// Imports only added for context, assuming they exist in the original file.
+// Actual fix only involves the function body.
+
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
+        // Using entries.keySet() preserves the insertion order from the central directory.
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
-            long offset = offsetEntry.headerOffset;
-            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
-            byte[] b = new byte[SHORT];
-            archive.readFully(b);
-            int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
-            int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
-            }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+            long offset = offsetEntry.headerOffset; // Start of LFH
 
+            // Seek to the position of filename length and extra field length in LFH
+            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH); // offset 26
+
+            // Read filename length (2 bytes)
+            byte[] shortBuf = new byte[SHORT];
+            archive.readFully(shortBuf);
+            int fileNameLen = ZipShort.getValue(shortBuf);
+
+            // Read extra field length (2 bytes)
+            archive.readFully(shortBuf);
+            int extraFieldLen = ZipShort.getValue(shortBuf);
+
+            // Calculate the offset to the actual data.
+            // dataOffset = start of LFH + size of fixed LFH fields (30 bytes)
+            //              + filename length + extra field length
+            offsetEntry.dataOffset = offset + ZipConstants.LFH_FIXED_SIZE // 30 bytes
+                                      + fileNameLen + extraFieldLen;
+
+
+            // Don't overwrite central directory extra data with local file header extra data.
+            // The central directory data might contain information (e.g., Unicode Path Extra Field)
+            // that is missing in the local file header. Preserving the central directory
+            // extra data is generally safer and resolves issues like the one reported in
+            // COMPRESS-176 / the failing test case where WinZip puts Unicode path data
+            // only in the central directory.
+            //
+            // byte[] localExtraData = new byte[extraFieldLen]; // No longer read
+            // archive.readFully(localExtraData); // No longer read
+            // ze.setExtra(localExtraData); // REMOVED THIS LINE
+
+            // If the entry's name might be non-UTF8 (based on Central Directory's flag),
+            // attempt to decode it using name/comment bytes potentially stored in
+            // the Central Directory's extra fields. This now uses the original extra
+            // data read from the central directory.
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+                // This uses ze.getExtra() which contains the Central Directory extra data.
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
                 if (!orig.equals(ze.getName())) {
+                    // If name changed, update the nameMap.
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
+            // No need to skip LFH filename/extra field data explicitly,
+            // as we are calculating the data offset based on lengths and seeking later.
         }
     }
\ No newline at end of file
