diff --git a/tmp/d021773d-f7b2-44d2-8cc7-085f6e8bfade_buggy.java b/tmp/fb92c6cd-506c-4f6a-95fe-83f2184cc904_fixed.java
index 6e238e7..6dfbf9f 100644
--- a/tmp/d021773d-f7b2-44d2-8cc7-085f6e8bfade_buggy.java
+++ b/tmp/fb92c6cd-506c-4f6a-95fe-83f2184cc904_fixed.java
@@ -1,15 +1,20 @@
     /**
      * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
      *
      * @param p1 the first point
      * @param p2 the second point
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
-      int sum = 0;
+      // Use double for sum to avoid potential integer overflow
+      // when calculating the square of differences, especially with large coordinate values.
+      double sum = 0;
       for (int i = 0; i < p1.length; i++) {
-          final int dp = p1[i] - p2[i];
+          // Cast the difference to double before squaring to ensure
+          // the multiplication is done using floating-point arithmetic
+          // and avoids integer overflow.
+          final double dp = (double)p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
     }
