diff --git a/tmp/69aae7c7-1850-48ce-9ae2-37edcf5f4ecc_buggy.java b/tmp/d48e380a-2a6c-4208-b8db-7dc687d0ba72_fixed.java
index 6e238e7..d3185cf 100644
--- a/tmp/69aae7c7-1850-48ce-9ae2-37edcf5f4ecc_buggy.java
+++ b/tmp/d48e380a-2a6c-4208-b8db-7dc687d0ba72_fixed.java
@@ -1,15 +1,19 @@
     /**
      * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
      *
      * @param p1 the first point
      * @param p2 the second point
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
-      int sum = 0;
+      // Use double for the sum to avoid integer overflow
+      double sum = 0;
       for (int i = 0; i < p1.length; i++) {
-          final int dp = p1[i] - p2[i];
+          // Cast difference to double before squaring to prevent potential intermediate overflow
+          // although simple subtraction of ints is unlikely to overflow unless the coordinates themselves
+          // are near Integer.MAX_VALUE/MIN_VALUE. The main issue is the sum of squares.
+          final double dp = (double)p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
     }
\ No newline at end of file
