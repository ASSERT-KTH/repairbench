diff --git a/tmp/6f4f0c40-7e34-4829-9b56-81e506bcacd0_buggy.java b/tmp/277fc78e-5ec8-4b57-b84b-784d335787eb_fixed.java
index 6e238e7..14998c3 100644
--- a/tmp/6f4f0c40-7e34-4829-9b56-81e506bcacd0_buggy.java
+++ b/tmp/277fc78e-5ec8-4b57-b84b-784d335787eb_fixed.java
@@ -1,15 +1,18 @@
     /**
      * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
      *
      * @param p1 the first point
      * @param p2 the second point
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
-      int sum = 0;
+      // Use double for summing, to avoid integer overflow with large coordinate values
+      // which could lead to negative results or NaN when taking the square root.
+      double sum = 0;
       for (int i = 0; i < p1.length; i++) {
-          final int dp = p1[i] - p2[i];
+          // Cast to double before subtraction to ensure intermediate calculations use floating-point arithmetic
+          final double dp = (double)p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
     }
