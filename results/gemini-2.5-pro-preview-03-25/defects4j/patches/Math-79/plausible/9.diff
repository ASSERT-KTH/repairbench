diff --git a/tmp/6238134a-7c52-4f3f-8c28-1fc06caf0d41_buggy.java b/tmp/01e6a211-345d-4086-9df9-1290506fb3b3_fixed.java
index 6e238e7..ed628fa 100644
--- a/tmp/6238134a-7c52-4f3f-8c28-1fc06caf0d41_buggy.java
+++ b/tmp/01e6a211-345d-4086-9df9-1290506fb3b3_fixed.java
@@ -1,15 +1,20 @@
     /**
      * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
      *
      * @param p1 the first point
      * @param p2 the second point
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
-      int sum = 0;
+      // Use double for the sum to avoid integer overflow during intermediate calculations.
+      double sum = 0.0;
       for (int i = 0; i < p1.length; i++) {
-          final int dp = p1[i] - p2[i];
+          // Calculate the difference as double to prevent potential overflow issues
+          // when squaring large differences.
+          final double dp = (double)p1[i] - p2[i];
           sum += dp * dp;
       }
+      // The square root of the sum of squared differences can be safely calculated.
+      // Math.sqrt handles non-negative double inputs correctly.
       return Math.sqrt(sum);
     }
