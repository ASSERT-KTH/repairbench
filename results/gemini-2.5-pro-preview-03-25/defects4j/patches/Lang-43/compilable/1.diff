diff --git a/tmp/c955d285-c8fd-4eb5-bb49-4ea2d041d718_buggy.java b/tmp/420c03c8-bd7a-4861-a22c-ff91b933a1a6_fixed.java
index b6b11b6..54f1758 100644
--- a/tmp/c955d285-c8fd-4eb5-bb49-4ea2d041d718_buggy.java
+++ b/tmp/420c03c8-bd7a-4861-a22c-ff91b933a1a6_fixed.java
@@ -1,38 +1,81 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        int start = pos.getIndex(); // Position of the first quote ' encountered by caller
+        char[] c = pattern.toCharArray(); // Use char array for efficient access
+
+        // Check if the sequence is an escaped quote '' only if escaping is enabled
+        // An escaped quote occurs when the current char is QUOTE and the next is also QUOTE
+        if (escapingOn && c[start] == QUOTE && start + 1 < pattern.length() && c[start + 1] == QUOTE) {
+            // It's an escaped quote sequence ''
+            if (appendTo != null) {
+                // Append a single literal quote, representing the escaped sequence
+                appendTo.append(QUOTE); 
             }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+            // Advance position past the two quotes ''
+            // Assumes ESCAPED_QUOTE is "''", length 2
+            pos.setIndex(start + 2); 
+            return appendTo; // Return buffer after handling the escaped quote
+        }
+
+        // It's the start of a quoted string literal '...'
+        next(pos); // Consume the opening quote '
+        
+        int lastHold = pos.getIndex(); // Remember the start index of the content inside quotes
+
+        // Loop through the pattern starting from the character after the opening quote
+        while (pos.getIndex() < pattern.length()) {
+            int currentIndex = pos.getIndex();
+
+            // Check for escaped quote '' inside the literal, but only if escaping is on
+            if (escapingOn && c[currentIndex] == QUOTE && currentIndex + 1 < pattern.length() && c[currentIndex + 1] == QUOTE) {
+                // Append the segment of text gathered so far (before the escaped quote '')
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, currentIndex - lastHold);
+                    // Append a single literal quote ' which represents the escaped ''
+                    appendTo.append(QUOTE);
+                }
+                
+                // Advance parser position past the escaped quote '' sequence
+                pos.setIndex(currentIndex + 2); 
+                // Update the starting point for the next text segment
                 lastHold = pos.getIndex(); 
-                continue;
             } 
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+            // Check for the closing quote '
+            else if (c[currentIndex] == QUOTE) {
+                // Found the closing quote ' for the literal segment
+                // Append the final segment of text before the closing quote
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, currentIndex - lastHold);
+                }
+                // Advance position past the closing quote
+                next(pos); // pos index becomes currentIndex + 1
+                return appendTo; // Quoted string parsing finished successfully
+            } 
+            // Default: The character is a regular character inside the quoted string
+            else {
+                // Just advance the position to the next character, content will be appended later in segments
                 next(pos); 
             }
         }
+
+        // If the loop finishes without finding a closing quote, the string is malformed
+        // Throw exception indicating where the unterminated quoted string began
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
+
+    // Helper methods/constants assumed to exist in the class:
+    // private static final char QUOTE = '\'';
+    // // Assuming ESCAPED_QUOTE = "''", but the code uses char checks directly
+    // private static final String ESCAPED_QUOTE = "''"; 
+    // private void next(ParsePosition pos) { pos.setIndex(pos.getIndex() + 1); }
\ No newline at end of file
