diff --git a/tmp/4029dbfb-bd3d-471f-bc28-5a3fef017b94_buggy.java b/tmp/6bdbde69-8d1f-450f-8c78-b01b8e930ae9_fixed.java
index b6b11b6..e6d9560 100644
--- a/tmp/4029dbfb-bd3d-471f-bc28-5a3fef017b94_buggy.java
+++ b/tmp/6bdbde69-8d1f-450f-8c78-b01b8e930ae9_fixed.java
@@ -1,38 +1,55 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
+        int start = pos.getIndex(); // Position of the opening quote
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+
+        // Assume c[start] == QUOTE is true (guaranteed by caller)
+
+        next(pos); // Move past the opening quote
+        int lastHold = pos.getIndex(); // Start index of segment to append
+
+        while (pos.getIndex() < pattern.length()) {
+            int currentPos = pos.getIndex();
+            char currentChar = c[currentPos];
+
+            if (escapingOn && currentChar == QUOTE && currentPos + 1 < pattern.length() && c[currentPos + 1] == QUOTE) {
+                // Found escaped quote ''
+                if (appendTo != null) {
+                    // Append segment before ''
+                    appendTo.append(c, lastHold, currentPos - lastHold);
+                    // Append the literal quote character
+                    appendTo.append(QUOTE);
                 }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+                // Skip both quotes
+                next(pos);
+                next(pos);
+                // Update start index for the next segment
                 lastHold = pos.getIndex();
-                continue;
+            } else if (currentChar == QUOTE) {
+                // Found the closing quote
+                next(pos); // Move past the closing quote
+                if (appendTo != null) {
+                    // Append the final segment
+                    appendTo.append(c, lastHold, currentPos - lastHold);
                 }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+                return appendTo; // Successfully consumed quoted string
+            } else {
+                // Regular character, just advance position
                 next(pos);
             }
         }
+
+        // If loop finishes, closing quote was not found
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string starting at position " + start);
     }
\ No newline at end of file
