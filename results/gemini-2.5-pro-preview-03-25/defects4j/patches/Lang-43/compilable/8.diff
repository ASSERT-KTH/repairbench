diff --git a/tmp/378d8fce-1e72-42e8-a50e-3a1c0b4362d7_buggy.java b/tmp/15ff4eaa-3f9e-4196-a44a-ef7d4cfd254d_fixed.java
index b6b11b6..76c8ccc 100644
--- a/tmp/378d8fce-1e72-42e8-a50e-3a1c0b4362d7_buggy.java
+++ b/tmp/15ff4eaa-3f9e-4196-a44a-ef7d4cfd254d_fixed.java
@@ -1,38 +1,63 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      *
      * @param pattern pattern to parse
-     * @param pos current parse position
+     * @param pos current parse position (must be positioned *after* the opening quote)
      * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
+     * @param escapingOn whether to process escaped quotes ('')
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
+        // Record the starting index within the pattern; this is the position after the opening quote.
         int start = pos.getIndex();
+        // Convert the pattern to a character array for efficient access.
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
+        // Keep track of the start index of the current segment of text to be appended.
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+
+        // Iterate through the pattern starting from the position after the opening quote.
+        for (int i = pos.getIndex(); i < c.length; i++) {
+            // Check if the current character is a QUOTE (' character).
+            if (c[i] == QUOTE) {
+                // If escaping is enabled, check if this is an escaped quote ('').
+                if (escapingOn && i + 1 < c.length && c[i + 1] == QUOTE) {
+                    // Found an escaped quote ('').
+                    // Append the segment of text from the last hold position up to the current quote.
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, i - lastHold);
+                        // Append a single literal quote character.
+                        appendTo.append(QUOTE);
+                    }
+                    // Advance the parse position past the escaped quote ('').
+                    pos.setIndex(i + 2);
+                    // Update the starting position for the next segment.
                     lastHold = pos.getIndex();
-                continue;
+                    // Increment loop counter 'i' to skip the second quote of the pair.
+                    i++;
+                    // Continue to the next iteration of the loop.
+                    continue; // continue parsing from the position after the escaped quote
+                } else {
+                    // Found the closing quote character.
+                    // Append the final segment of text from the last hold position up to the closing quote.
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, i - lastHold);
                     }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+                    // Advance the parse position past the closing quote.
+                    pos.setIndex(i + 1);
+                    // Return the StringBuffer (or null if appendTo was null).
+                    return appendTo; // Successfully parsed the quoted string
                 }
             }
+            // If the character is not a quote (or the first part of an escape sequence),
+            // simply continue the loop to process the next character.
+            // The character will be included in the next segment appended.
+        }
+
+        // If the loop completes without finding a closing quote, the string is unterminated.
+        // Throw an exception indicating the error and the position where the quoted string started.
+        // (start - 1) gives the position of the opening quote.
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string starting at position " + (start - 1));
     }
\ No newline at end of file
