diff --git a/tmp/6a12c0da-37d8-4317-bcbe-7ebe0461cdc6_buggy.java b/tmp/539a1aec-0c6a-4306-9087-537756d1c9e2_fixed.java
index b6b11b6..435d2fe 100644
--- a/tmp/6a12c0da-37d8-4317-bcbe-7ebe0461cdc6_buggy.java
+++ b/tmp/539a1aec-0c6a-4306-9087-537756d1c9e2_fixed.java
@@ -1,38 +1,58 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
+     * This method assumes the initial parse position is *after* the opening quote.
      *
      * @param pattern pattern to parse
-     * @param pos current parse position
+     * @param pos current parse position (just after opening quote)
      * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
+     * @param escapingOn whether to process escaped quotes ('')
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
+        // Keep track of the start index of the quoted string content for error reporting
+        // The start index is the character *after* the opening quote.
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
+        // Store the start index of the current segment to append
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+
+        while (pos.getIndex() < pattern.length()) {
+            int currentIndex = pos.getIndex();
+            // Check for QUOTE first, as it terminates the loop
+            if (c[currentIndex] == QUOTE) {
+                // Check if it's an escaped quote ('') if escaping is on
+                if (escapingOn && currentIndex + 1 < pattern.length() && c[currentIndex + 1] == QUOTE) {
+                    // Append segment before escaped quote
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, currentIndex - lastHold);
+                    }
+                    // Append the single quote represented by the escape
+                    if (appendTo != null) {
+                        appendTo.append(QUOTE);
+                    }
+                    // Advance position past escaped quote ('')
+                    pos.setIndex(currentIndex + 2); // Advance by 2 for ''
+                    // Update start of next segment
                     lastHold = pos.getIndex();
-                continue;
+                } else {
+                    // Found the closing quote
+                    // Append the final segment
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, currentIndex - lastHold);
                     }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+                    // Advance position past the closing quote
+                    next(pos); // Advances by 1
+                    return appendTo; // Success
                 }
+            } else {
+                // Regular character, just advance position
+                next(pos); // Advances by 1
             }
+        }
+
+        // End of pattern reached without finding a closing quote
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string starting at position " + (start - 1));
     }
\ No newline at end of file
