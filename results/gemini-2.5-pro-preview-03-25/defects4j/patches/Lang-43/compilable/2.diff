diff --git a/tmp/941b7a57-5001-4040-a884-8fbff2c07fde_buggy.java b/tmp/ac288066-bb6e-4823-8ae0-31ac4f1737fb_fixed.java
index b6b11b6..51caba8 100644
--- a/tmp/941b7a57-5001-4040-a884-8fbff2c07fde_buggy.java
+++ b/tmp/ac288066-bb6e-4823-8ae0-31ac4f1737fb_fixed.java
@@ -1,38 +1,68 @@
     /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
+     * Consume a quoted string (including the quotes), adding the
+     * literal content (with '' -> ' mapping) to <code>appendTo</code>.
+     * Assumes pos points to the opening quote.
      *
      * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
+     * @param pos current parse position (at the opening quote)
+     * @param appendTo optional StringBuffer to append the content
+     * @param escapingOn whether to process escaped quotes ('') inside.
+     *                   In MessageFormat, '' is always escaped, inside or outside quotes.
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
-            StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
+            StringBuffer appendTo, boolean escapingOn) { // assuming escapingOn is true for '' rule
+
+        int startQuoteIndex = pos.getIndex();
+        // Method assumes caller ensures pattern.charAt(startQuoteIndex) == QUOTE
+
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        // Start reading content *after* the opening quote
+        int lastHold = startQuoteIndex + 1;
+
+        // Find the closing quote, handling '' escapes along the way
+        for (int i = lastHold; i < pattern.length(); i++) {
+            if (escapingOn && c[i] == QUOTE) {
+                // Found a quote - check if it's an escaped quote ('') or closing quote
+                if (i + 1 < pattern.length() && c[i + 1] == QUOTE) {
+                    // It's an escaped quote ('')
+                    if (appendTo != null) {
+                        // Append the segment of text before the escaped quote
+                        appendTo.append(c, lastHold, i - lastHold);
+                        // Append a single literal quote character
+                        appendTo.append(QUOTE);
                     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+                    // Advance index past the second quote of the pair
+                    i++;
+                    // Update lastHold to start accumulating after the escaped quote
+                    lastHold = i + 1;
+                } else {
+                    // It's the closing quote
+                    if (appendTo != null) {
+                        // Append the final segment of text before the closing quote
+                        appendTo.append(c, lastHold, i - lastHold);
                     }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+                    // Set the ParsePosition to be *after* the closing quote
+                    pos.setIndex(i + 1);
+                    return appendTo; // Successfully parsed quoted string
                 }
             }
+            // else: c[i] is not a quote or escaping is off, treat as regular character. Continue loop.
+            // However, the original logic structure implies that if escaping is OFF,
+            // the first quote encountered simply terminates the string. Let's refine:
+
+            else if (!escapingOn && c[i] == QUOTE) {
+                 // If escaping is off, the first quote encountered is the closing quote
+                 if (appendTo != null) {
+                     appendTo.append(c, lastHold, i - lastHold);
+                 }
+                 pos.setIndex(i + 1);
+                 return appendTo;
+            }
+            // else: c[i] is just a regular char in the string. Continue loop.
+        }
+
+        // If the loop completes without finding a closing quote
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string starting at position " + startQuoteIndex);
     }
\ No newline at end of file
