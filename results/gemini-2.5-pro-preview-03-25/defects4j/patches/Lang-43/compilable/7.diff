diff --git a/tmp/dda06f59-ec82-47c2-ae05-93f55d1ac836_buggy.java b/tmp/fb5d1add-17f6-400b-a5df-264ba1faab56_fixed.java
index b6b11b6..7c37d00 100644
--- a/tmp/dda06f59-ec82-47c2-ae05-93f55d1ac836_buggy.java
+++ b/tmp/fb5d1add-17f6-400b-a5df-264ba1faab56_fixed.java
@@ -1,38 +1,72 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      *
      * @param pattern pattern to parse
-     * @param pos current parse position
+     * @param pos current parse position (should point AT the opening quote)
      * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
+     * @param escapingOn whether to process escaped quotes ('')
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        int start = pos.getIndex(); // Location of the opening quote
+        char[] c = pattern.toCharArray(); // Access pattern as char array
+
+        // Ensure the current position is indeed a quote
+        if (start >= c.length || c[start] != QUOTE) {
+            // This indicates a logic error in the caller or an unexpected pattern format.
+            // However, consistent with original behavior, we proceed, but the original's
+            // initial 'if' block is removed as it caused issues with 'escapingOn'.
+            // throw new IllegalArgumentException("Quoted string does not start with quote at position " + start);
         }
-        int lastHold = start;
+
+        // Advance position past the opening quote
+        pos.setIndex(start + 1);
+
+        int lastHold = pos.getIndex(); // Start index of the content inside the quotes
+
+        // Iterate through the pattern starting from the character after the opening quote
         for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+            char currentChar = c[i];
+
+            // Check for escaped quote ('')
+            // Need to look ahead one character
+            if (escapingOn && currentChar == QUOTE && i + 1 < pattern.length() && c[i+1] == QUOTE) {
+                // Append the segment before the escaped quote
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
+                    // Append the literal quote character
+                    appendTo.append(QUOTE);
+                }
+                // Advance the loop index past the second quote of the pair ''
+                i++;
+                // Update the parse position to be after the escaped quote ('')
+                pos.setIndex(i + 1);
+                // Update lastHold to the position after the escaped quote
                 lastHold = pos.getIndex();
+                // Continue to the next iteration of the loop
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+
+            // Check for the non-escaped closing quote (')
+            if (currentChar == QUOTE) {
+                // Found the closing quote
+                // Update the parse position to be past the closing quote
+                pos.setIndex(i + 1);
+                // Append the final segment of the string content (from lastHold to current position i)
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
                 }
+                // Successfully parsed the quoted string, return the buffer
+                return appendTo;
             }
+
+            // If it's a regular character inside the quotes, just continue the loop.
+            // The content will be appended in chunks when an escaped quote or the closing quote is found.
+        }
+
+        // If the loop completes without finding a closing quote, the string is unterminated.
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string starting at position " + start);
     }
\ No newline at end of file
