diff --git a/tmp/3e2f5271-2df3-4cc3-9941-623960679490_buggy.java b/tmp/5e1a1139-a4cd-4089-9ec3-c8076f8b1e86_fixed.java
index b6b11b6..7cbc314 100644
--- a/tmp/3e2f5271-2df3-4cc3-9941-623960679490_buggy.java
+++ b/tmp/5e1a1139-a4cd-4089-9ec3-c8076f8b1e86_fixed.java
@@ -1,38 +1,75 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
+     * specified. This function assumes the parser is currently positioned
+     * at the opening quote character. It consumes the content including the
+     * closing quote, handling escaped quotes ('') inside.
      *
      * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
+     * @param pos current parse position (should point at the opening quote)
+     * @param appendTo optional StringBuffer to append the processed content (without surrounding quotes)
+     * @param escapingOn whether to process escaped quotes ('')
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        int start = pos.getIndex(); // Position of the opening quote, for error message
+
+        // Ensure the pattern has an opening quote at the current position
+        if (pattern.charAt(start) != QUOTE) {
+            // This case should not happen if called correctly by the parser
+            throw new IllegalArgumentException(
+                "Parser processing error: appendQuotedString called without opening quote at position " + start);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+
+        // Consume the opening quote
+        pos.setIndex(start + 1);
+        int lastHold = pos.getIndex(); // Position after the opening quote, start of content
+
+        // Loop through the string starting from the character after the opening quote
+        while (pos.getIndex() < pattern.length()) {
+            int currentIndex = pos.getIndex();
+            char currentChar = pattern.charAt(currentIndex);
+
+            // Check for escaped quote ''
+            // Need to ensure we don't read past the end of the pattern
+            if (escapingOn && currentChar == QUOTE && currentIndex + 1 < pattern.length() &&
+                    pattern.charAt(currentIndex + 1) == QUOTE) {
+
+                // Append the segment of text before the escaped quote
+                if (appendTo != null) {
+                    // append(CharSequence s, int start, int end) appends substring s[start..end-1]
+                    appendTo.append(pattern, lastHold, currentIndex);
+                    // Append the literal single quote value for ''
+                    appendTo.append(QUOTE);
+                }
+
+                // Advance position past the escaped quote ''
+                pos.setIndex(currentIndex + 2); // Move past both quotes
+                // Update the start index for the next segment
                 lastHold = pos.getIndex();
-                continue;
+
+            } else if (currentChar == QUOTE) { // Check for the closing quote '
+                // Append the final segment of text before the closing quote
+                if (appendTo != null) {
+                    appendTo.append(pattern, lastHold, currentIndex);
                 }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+
+                // Advance position past the closing quote
+                pos.setIndex(currentIndex + 1); // Move past the closing quote
+
+                // Successfully parsed quoted string
+                return appendTo;
+
+            } else {
+                // It's a regular character within the quoted string.
+                // Simply advance the position. The segment containing this character
+                // will be appended later when an escape or the closing quote is found.
+                pos.setIndex(currentIndex + 1); // Move to the next character
             }
         }
+
+        // If the loop finishes, it means we reached the end of the pattern
+        // without finding the closing quote character.
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string starting at position " + start);
     }
\ No newline at end of file
