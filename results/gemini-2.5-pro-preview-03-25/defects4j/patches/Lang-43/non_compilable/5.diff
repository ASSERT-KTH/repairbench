diff --git a/tmp/5caf06c5-a0cf-4169-8698-5e4e3f3bcea8_buggy.java b/tmp/a866b02e-6a8d-49aa-9eaa-a6267f135f9f_fixed.java
index b6b11b6..1a741a9 100644
--- a/tmp/5caf06c5-a0cf-4169-8698-5e4e3f3bcea8_buggy.java
+++ b/tmp/a866b02e-6a8d-49aa-9eaa-a6267f135f9f_fixed.java
@@ -1,38 +1,70 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
-     * @param pos current parse position
+     * @param pos current parse position (should be positioned just after the opening quote)
      * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
+     * @param escapingOn whether to process escaped quotes ('' as ')
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
+        // pos is expected to be pointing at the character after the opening quote '
         int start = pos.getIndex(); 
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
+        char[] c = pattern.toCharArray(); // Convert once for efficient access
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        int patternLen = pattern.length(); // Cache pattern length
+
+        while (pos.getIndex() < patternLen) {
+            int currentPos = pos.getIndex();
+            char currentChar = c[currentPos];
+
+            // Check for escaped quote ('') using the char array
+            // Need to check currentPos + 1 < patternLen to avoid IndexOutOfBoundsException
+            if (escapingOn && currentChar == QUOTE && currentPos + 1 < patternLen && c[currentPos + 1] == QUOTE) {
+                // Found an escaped quote ('')
+                if (appendTo != null) {
+                    // Append the segment of text before the escaped quote
+                    appendTo.append(c, lastHold, currentPos - lastHold);
+                    // Append the literal quote character itself (since '' means ')
+                    appendTo.append(QUOTE); 
+                }
+                // Advance position past the escaped quote ('')
+                pos.setIndex(currentPos + 2); // Advance by 2 characters
+                // Update lastHold to the position immediately after the escaped quote
                 lastHold = pos.getIndex();
-                continue;
+            } else if (currentChar == QUOTE) {
+                // Found the closing quote (')
+                // Advance position past the closing quote. The loop terminates below.
+                next(pos); // Equivalent to pos.setIndex(currentPos + 1);
+
+                if (appendTo != null) {
+                    // Append the final segment of text before the closing quote
+                    appendTo.append(c, lastHold, currentPos - lastHold);
                 }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+                // Successfully consumed the quoted string, return the buffer
+                return appendTo; // Return the buffer (which might be null if it was null initially)
+            } else {
+                // It's a regular character inside the quotes, just advance the position
+                next(pos); // Equivalent to pos.setIndex(currentPos + 1);
             }
         }
+
+        // If the loop completes, it means we reached the end of the pattern 
+        // without finding the closing quote.
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                // Adjust start index for message to point to the opening quote location
+                "Unterminated quoted string starting at position " + (start - 1)); 
     }
+
+    // Helper method assumed to exist from the original class context
+    private void next(ParsePosition pos) {
+        pos.setIndex(pos.getIndex() + 1);
+    }
+
+    // Constants assumed to exist from the original class context
+    // QUOTE is likely '\''
+    private static final char QUOTE = '\''; 
+    // ESCAPED_QUOTE is likely "''" but not directly used in the fixed logic above
+    // private static final String ESCAPED_QUOTE = "''"; 
\ No newline at end of file
