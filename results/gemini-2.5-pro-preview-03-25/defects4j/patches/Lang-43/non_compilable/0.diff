diff --git a/tmp/fa199adf-7d07-41e5-9fe2-1252ffb3a46c_buggy.java b/tmp/c8b1669a-2808-400a-95c4-9b49cb18c592_fixed.java
index b6b11b6..17c9208 100644
--- a/tmp/fa199adf-7d07-41e5-9fe2-1252ffb3a46c_buggy.java
+++ b/tmp/c8b1669a-2808-400a-95c4-9b49cb18c592_fixed.java
@@ -1,38 +1,87 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
+     * specified. This method handles both normal quoted strings like
+     * <code>'abc'</code> and escaped quotes <code>''</code> (if escaping is on).
      *
      * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
+     * @param pos current parse position (should point to the opening quote)
+     * @param appendTo optional StringBuffer to append the interpreted text to
+     *                 (literal quotes are appended for escaped quotes, content inside
+     *                 quotes is appended for normal quoted strings).
+     * @param escapingOn whether to process escaped quotes (<code>''</code> treated as a literal <code>'</code>)
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+        int start = pos.getIndex(); // Position of the first quote encountered by the caller
+        char[] c = pattern.toCharArray(); // Use char array for efficient appending
+
+        // Ensure we are actually at a quote (as precondition)
+        // The calling code in parse() ensures this, but a check could be added for robustness.
+        // if (c[start] != QUOTE) { ... }
+
+        // Case 1: Handle escaped quote ''
+        // If escaping is on and we see '', consume it and append a single '
+        if (escapingOn && start + 1 < c.length && c[start + 1] == QUOTE) {
+            // Consume ''
+            pos.setIndex(start + 2);
+            // Append a single literal quote '
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+
+        // Case 2: Handle regular quoted string '...'
+        // Consume the opening quote '
+        next(pos);
+        int lastHold = pos.getIndex(); // Position *after* the opening quote
+
+        // Find the end of the quoted string by iterating through the characters
+        while (pos.getIndex() < c.length) {
+            int currentIdx = pos.getIndex();
+
+            // Check for escaped quote '' inside the string, e.g. 'ab''cd'
+            // This is needed if escaping is enabled within quoted segments.
+            if (escapingOn && c[currentIdx] == QUOTE && currentIdx + 1 < c.length && c[currentIdx + 1] == QUOTE) {
+                // Append the segment before the escaped quote ''
+                if (appendTo != null) {
+                    // Append characters from lastHold up to currentIdx
+                    appendTo.append(c, lastHold, currentIdx - lastHold);
+                    // Append the literal quote ' resulting from ''
+                    appendTo.append(QUOTE);
+                }
+                // Advance position past the escaped quote ''
+                pos.setIndex(currentIdx + 2);
+                // Update the start of the next segment to append
                 lastHold = pos.getIndex();
-                continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+            // Check for the closing quote '
+            else if (c[currentIdx] == QUOTE) {
+                // Found the closing quote for '...'
+                // Append the final segment before the closing quote
+                if (appendTo != null) {
+                    // Append characters from lastHold up to currentIdx
+                    appendTo.append(c, lastHold, currentIdx - lastHold);
+                }
+                // Advance position past the closing quote
+                next(pos); // pos index becomes currentIdx + 1
+                return appendTo; // Successfully parsed the quoted string content
+            }
+            // It's a regular character inside the quotes
+            else {
+                // Just advance the position; the character is part of the current segment
+                // which will be appended in batch later.
                 next(pos);
             }
         }
+
+        // If the loop completes without finding a closing quote
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string starting at position " + start);
     }
+
+    // Helper method assumed to exist within the class
+    private void next(ParsePosition pos) {
+        pos.setIndex(pos.getIndex() + 1);
+    }
+
+    // Constant assumed to exist within the class
+    private static final char QUOTE = '\'';
\ No newline at end of file
