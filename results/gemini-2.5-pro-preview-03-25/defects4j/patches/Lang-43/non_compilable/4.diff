diff --git a/tmp/c5b1804f-f68e-46d5-a5e6-5263681a730d_buggy.java b/tmp/db8f4b71-8e2c-40d3-a70b-ef0c026c3fe4_fixed.java
index b6b11b6..c13948e 100644
--- a/tmp/c5b1804f-f68e-46d5-a5e6-5263681a730d_buggy.java
+++ b/tmp/db8f4b71-8e2c-40d3-a70b-ef0c026c3fe4_fixed.java
@@ -1,38 +1,75 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
+     * The input ParsePosition should be pointing to the character *after* the
+     * opening quote.
      *
      * @param pattern pattern to parse
-     * @param pos current parse position
+     * @param pos current parse position (just after opening quote)
      * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
+     * @param escapingOn whether to process escaped quotes ('')
      * @return <code>appendTo</code>
+     * @throws IllegalArgumentException if unterminated quote is found
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
+        // Record the starting index (after opening quote) for error message reporting
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        // lastHold tracks the starting index of the current segment of characters to append
+        int lastHold = pos.getIndex();
+
+        // Loop while the current position is within the pattern's bounds
+        while (pos.getIndex() < pattern.length()) {
+            int currentPos = pos.getIndex();
+            char currentChar = c[currentPos];
+
+            // Check for an escaped quote ('') if escaping is enabled
+            // An escaped quote is represented by two consecutive QUOTE characters
+            if (escapingOn && currentChar == QUOTE && currentPos + 1 < pattern.length() && c[currentPos + 1] == QUOTE) {
+                // Append the segment of text accumulated since the last marker (lastHold)
+                if (appendTo != null) {
+                    // Append characters from lastHold up to the start of the escaped quote
+                    appendTo.append(c, lastHold, currentPos - lastHold);
+                    // Append the literal single quote value resulting from the escape sequence
+                    appendTo.append(QUOTE);
                 }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+                // Advance the parse position past the escaped quote ('')
+                pos.setIndex(currentPos + 2); // Move past both quotes
+                // Update lastHold to the new position after the escaped quote
                 lastHold = pos.getIndex();
-                continue;
+            } else if (currentChar == QUOTE) {
+                // Found the terminal closing quote for the string
+                // Advance the position past the closing quote
+                next(pos); // Equivalent to pos.setIndex(currentPos + 1);
+                // Append the final segment of text
+                if (appendTo != null) {
+                    // Append characters from lastHold up to (but not including) the closing quote
+                    appendTo.append(c, lastHold, currentPos - lastHold);
                 }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+                // Successfully consumed the quoted string, return the buffer (or null if none was provided)
+                return appendTo;
+            } else {
+                // Current character is a regular character within the quoted string
+                // Simply advance the parse position to check the next character
+                next(pos); // Equivalent to pos.setIndex(currentPos + 1);
             }
         }
+
+        // If the loop completes without finding a closing quote, the string is unterminated.
+        // Report the error using the starting position recorded at the beginning.
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string starting at position " + start);
+    }
+
+    // Helper method assumed to exist in the surrounding class (e.g., ExtendedMessageFormat)
+    // private static final char QUOTE = '\'';
+    // private static final String ESCAPED_QUOTE = "''"; // No longer needed directly
+
+    /**
+     * Advances the parse position by one character.
+     * @param pos The ParsePosition to advance.
+     */
+     private void next(ParsePosition pos) {
+         pos.setIndex(pos.getIndex() + 1);
      }
\ No newline at end of file
