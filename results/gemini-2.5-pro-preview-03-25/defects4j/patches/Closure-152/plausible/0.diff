diff --git a/tmp/e8df146a-462c-4712-afc4-d79579d4f599_buggy.java b/tmp/a69cd176-a58a-4c5c-8d3a-547f9e1597ed_fixed.java
index 58a1651..14bdcea 100644
--- a/tmp/e8df146a-462c-4712-afc4-d79579d4f599_buggy.java
+++ b/tmp/a69cd176-a58a-4c5c-8d3a-547f9e1597ed_fixed.java
@@ -1,32 +1,80 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
-    setResolvedTypeInternal(this);
+    setResolvedTypeInternal(this); // Mark as resolved early to prevent cycles
 
+    // Resolve call signature and prototype
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve the 'this' type specified in JSDoc.
+    // The field 'typeOfThis' must be an ObjectType, but the resolved type
+    // might not be (e.g., @this {string}, @this {MyTypedef} where MyTypedef = string|Date).
+    // Resolve it first, then check if it's an ObjectType before assigning.
+    // The validation/warning for non-ObjectType is handled upstream by TypeCheck,
+    // which likely re-resolves the type from JSDoc.
+    JSType maybeThisType = this.typeOfThis; // The original type before resolution
+    JSType resolvedThisType = safeResolve(maybeThisType, t, scope);
 
+    // The field 'typeOfThis' must hold an ObjectType.
+    // If the resolved type is an ObjectType, use it.
+    if (resolvedThisType instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedThisType;
+    } else {
+      // If the resolved type is not an ObjectType (e.g., string, union),
+      // 'typeOfThis' cannot store it directly.
+      // The warning is handled upstream. We need to set 'typeOfThis'
+      // to *some* ObjectType to avoid breaking assumptions downstream
+      // and prevent NPEs. Using the generic Object type seems reasonable,
+      // unless the original type was explicitly Unknown.
+      if (maybeThisType != null && maybeThisType.isUnknownType()) {
+        // If the original type was unknown, keep it unknown.
+        // Ensure we fetch the canonical UnknownType's ObjectType representation if needed.
+        typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+      } else {
+         // Otherwise, default to the base Object type.
+         typeOfThis = registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
+      }
+      // Note: This means getThisType() might return UNKNOWN or OBJECT
+      // even if the @this annotation resolved to String or a Union.
+      // The upstream checker MUST use the JSDoc + resolve independently
+      // to issue the correct warning. This fix just prevents the ClassCastException.
+    }
+
+
+    // Resolve implemented interfaces
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
+    // Defensive: check if implementedInterfaces is null
+    if (implementedInterfaces != null) {
       for (ObjectType iface : implementedInterfaces) {
+        // Defensive: check if iface is null
+        if (iface != null) {
            ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
            resolvedInterfaces.add(resolvedIface);
            changed |= (resolvedIface != iface);
         }
+      }
       if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
       }
+    } else {
+      // Ensure implementedInterfaces is non-null, empty list is standard
+      implementedInterfaces = ImmutableList.of();
+    }
 
+
+    // Resolve subtypes
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+         FunctionType subType = subTypes.get(i);
+         // Defensive: check if subType is null
+         if (subType != null) {
+           subTypes.set(i, (FunctionType) subType.resolve(t, scope));
+         }
       }
     }
 
+    // Call super implementation AFTER resolving FunctionType specifics
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
