diff --git a/tmp/f356b72f-8070-468a-9f7a-121ff30fedd4_buggy.java b/tmp/f20f9ae2-f05b-40cb-9713-97a68ba1ac1a_fixed.java
index 58a1651..4117bdd 100644
--- a/tmp/f356b72f-8070-468a-9f7a-121ff30fedd4_buggy.java
+++ b/tmp/f20f9ae2-f05b-40cb-9713-97a68ba1ac1a_fixed.java
@@ -1,32 +1,61 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
+    // Resolve call signature (ArrowType)
     call = (ArrowType) safeResolve(call, t, scope);
+    // Resolve prototype (FunctionPrototypeType)
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
+    // Resolve 'this' type
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
 
+    // Check if the resolved type is actually an ObjectType.
+    // The field 'typeOfThis' expects an ObjectType.
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis == null) {
+      // If safeResolve returns null (e.g., original type was null), assign null.
+      typeOfThis = null;
+    } else {
+      // Resolved to a non-ObjectType (like UnionType, PrimitiveType).
+      // The field type demands an ObjectType, so we assign a fallback.
+      // Using UNKNOWN_TYPE's object representation prevents ClassCastException.
+      // The upstream validation should still catch the invalid @this type.
+      // Note: This loses the specific resolved type information in the 'typeOfThis' field.
+      typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+    }
+
+    // Resolve implemented interfaces (ObjectTypes)
+    if (implementedInterfaces != null) {
         boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+        ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
         for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+            // Interfaces must resolve to ObjectType. Cast is expected to succeed,
+            // or indicates an error reported elsewhere. Use safeResolve for null safety on input 'iface'.
+            ObjectType resolvedIface = (ObjectType) safeResolve(iface, t, scope);
+            // Assume resolvedIface is not null if input iface was not null, otherwise
+            // the cast or subsequent operations might fail (same as original code).
             resolvedInterfaces.add(resolvedIface);
             changed |= (resolvedIface != iface);
         }
         if (changed) {
             implementedInterfaces = resolvedInterfaces.build();
         }
+    }
 
+    // Resolve subtypes (FunctionTypes)
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        // Subtypes must resolve to FunctionType. Cast is expected to succeed.
+        // Use safeResolve for null safety on input element.
+        subTypes.set(i, (FunctionType) safeResolve(subTypes.get(i), t, scope));
       }
     }
 
+    // Delegate to superclass for common resolution steps (like type parameters)
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
