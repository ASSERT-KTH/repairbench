diff --git a/tmp/d108afa6-e8d8-4c44-b56b-f178fca5e092_buggy.java b/tmp/a723ed92-a321-40b1-b977-0b5d7600f27b_fixed.java
index 58a1651..7e53f71 100644
--- a/tmp/d108afa6-e8d8-4c44-b56b-f178fca5e092_buggy.java
+++ b/tmp/a723ed92-a321-40b1-b977-0b5d7600f27b_fixed.java
@@ -1,32 +1,48 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis
+    // The result of resolution might be any JSType, including UnionType or primitives.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+
+    // The field typeOfThis requires an ObjectType.
+    // If resolution yielded an ObjectType, use it.
+    // Otherwise, use the generic ObjectType as a placeholder.
+    // Warnings about invalid @this types (non-object) are handled upstream (TypeCheck),
+    // as indicated by the original comment and TODO.
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // Use the built-in Object type as a fallback when the resolved type is not an ObjectType.
+      // This prevents ClassCastException and satisfies the field's type requirement.
+      // Assumes 'registry' field is available in FunctionType (which it typically is).
+      // If resolvedTypeOfThis was null, this also assigns a non-null default.
+      typeOfThis = registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
+      // Assuming interfaces always resolve to ObjectType. If not, this cast could also fail.
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
+        // Assuming subtypes always resolve to FunctionType. If not, this cast could fail.
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
