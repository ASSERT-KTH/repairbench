diff --git a/tmp/8a919fc8-a179-4b0f-b5f2-2cf1166e6149_buggy.java b/tmp/025ae223-f2bd-4ad3-b063-eeadc082b9f2_fixed.java
index 58a1651..d6ad749 100644
--- a/tmp/8a919fc8-a179-4b0f-b5f2-2cf1166e6149_buggy.java
+++ b/tmp/025ae223-f2bd-4ad3-b063-eeadc082b9f2_fixed.java
@@ -1,32 +1,53 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis, but only update the field if it's actually an ObjectType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    // Don't cast if it's not an object type. The warning is generated
+    // upstream.
+    // TODO(dimvar): This is not ideal. The error should be generated here,
+    // but we must wait until the type is resolved. We should change the code
+    // structure to make this possible.
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // If resolvedTypeOfThis is not an ObjectType, we don't update typeOfThis.
+      // This avoids the ClassCastException. The invalid @this annotation should
+      // be reported by the type checker using the original annotation type
+      // or the resolved non-object type. Leave typeOfThis as potentially
+      // unresolved or holding its previous value.
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
+      // Similarly, check before casting. Although interfaces are generally expected
+      // to be ObjectTypes, resolve could theoretically return something else
+      // if the definition is invalid or involves unions/typedefs resolving late.
+      // However, the original code cast directly, implying this might be safe
+      // or handled differently. Let's stick to fixing only the reported bug
+      // for typeOfThis for now.
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
