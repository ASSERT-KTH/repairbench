diff --git a/tmp/56207536-f67e-441f-aaa1-3e8f693d1320_buggy.java b/tmp/44ea5f5c-d4f1-4e29-959e-20f765f193f9_fixed.java
index 58a1651..30ad4c2 100644
--- a/tmp/56207536-f67e-441f-aaa1-3e8f693d1320_buggy.java
+++ b/tmp/44ea5f5c-d4f1-4e29-959e-20f765f193f9_fixed.java
@@ -1,32 +1,38 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Fix: Removed the cast to ObjectType, as typeOfThis can resolve to other types
+    // like UnionType or primitives, especially with typedefs. The validation
+    // that 'this' should be an object happens elsewhere (e.g., TypeCheck).
+    typeOfThis = safeResolve(typeOfThis, t, scope);
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
+    if (implementedInterfaces != null) {
       for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
       }
       if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
       }
+    }
+
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
