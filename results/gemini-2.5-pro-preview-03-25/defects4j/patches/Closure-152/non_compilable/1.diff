diff --git a/tmp/0d8f716e-ffd6-4b34-b05c-40d108686b92_buggy.java b/tmp/0c1df968-3248-46de-b911-616459756117_fixed.java
index 58a1651..1372d57 100644
--- a/tmp/0d8f716e-ffd6-4b34-b05c-40d108686b92_buggy.java
+++ b/tmp/0c1df968-3248-46de-b911-616459756117_fixed.java
@@ -1,32 +1,57 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // The original code casted to ObjectType, causing ClassCastException
+    // when the resolved type was a UnionType or primitive type (like string).
+    // The upstream check needs the actual resolved type to issue the correct warning.
+    // Therefore, we should store the resolved JSType directly, assuming the
+    // typeOfThis field is (or should be) JSType.
+    typeOfThis = safeResolve(typeOfThis, t, scope);
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
+    if (implementedInterfaces != null) {
       for (ObjectType iface : implementedInterfaces) {
+        // Interface types must be ObjectTypes. Resolve and cast.
+        JSType resolved = iface.resolve(t, scope);
+        // Handle the case where resolution doesn't yield an ObjectType,
+        // although interfaces are expected to.
+        ObjectType resolvedIface = resolved instanceof ObjectType ? (ObjectType) resolved : null;
+        // It might be better to report an error here if resolvedIface is null,
+        // or handle it based on how null interfaces are treated elsewhere.
+        // For minimal change, we add whatever we got (potentially null).
+        // Let's assume resolve returns ObjectType or the original logic was sufficient:
+        // ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        // Sticking to minimal change based on the original structure for interfaces:
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
       }
       if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
       }
+    }
+
 
     if (subTypes != null) {
+      // Make a copy to avoid ConcurrentModificationException if resolution
+      // affects the list structure indirectly (though unlikely here).
+      // However, the original code modified in place, so let's stick to that
+      // unless proven problematic.
       for (int i = 0; i < subTypes.size(); i++) {
+        // Assuming subTypes are FunctionTypes
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
