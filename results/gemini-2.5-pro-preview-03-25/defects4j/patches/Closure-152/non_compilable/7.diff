diff --git a/tmp/28d8002b-c901-41b0-b770-d32a25c8c8c1_buggy.java b/tmp/bf5a8de5-6a04-4486-bf15-2c0fd377e98e_fixed.java
index 58a1651..5246f76 100644
--- a/tmp/28d8002b-c901-41b0-b770-d32a25c8c8c1_buggy.java
+++ b/tmp/bf5a8de5-6a04-4486-bf15-2c0fd377e98e_fixed.java
@@ -1,32 +1,39 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // The cast to ObjectType caused ClassCastException when the resolved
+    // type was not an ObjectType (e.g., UnionType, StringType).
+    // Assign the result of safeResolve directly. This requires the
+    // field typeOfThis to be JSType or a compatible supertype to store
+    // non-ObjectType results correctly.
+    typeOfThis = safeResolve(typeOfThis, t, scope); // Removed the cast to ObjectType
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
+      // Assuming interfaces always resolve to ObjectType as per original code.
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
+        // Assuming subtypes always resolve to FunctionType as per original code.
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
