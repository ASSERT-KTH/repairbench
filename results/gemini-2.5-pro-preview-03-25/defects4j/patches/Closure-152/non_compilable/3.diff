diff --git a/tmp/00faa20f-eed8-4c96-a0d0-dddbcbea1298_buggy.java b/tmp/6734c501-a27a-434d-9a0c-7e3e0ffdb113_fixed.java
index 58a1651..16d8106 100644
--- a/tmp/00faa20f-eed8-4c96-a0d0-dddbcbea1298_buggy.java
+++ b/tmp/6734c501-a27a-434d-9a0c-7e3e0ffdb113_fixed.java
@@ -1,32 +1,47 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Fix: Remove the incorrect cast to ObjectType which caused ClassCastException
+    // when the resolved type was a UnionType or a primitive type.
+    typeOfThis = safeResolve(typeOfThis, t, scope);
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
+      // افترض أن safeResolve هنا سيعيد ObjectType أو نوعًا يمكن تحويله إليه بأمان.
+      // If iface.resolve returns something other than ObjectType, this could still cast error.
+      // However, interfaces are expected to be ObjectTypes.
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+       boolean subtypesChanged = false;
+       ImmutableList.Builder<FunctionType> resolvedSubtypes = ImmutableList.builder();
+       for (FunctionType subType : subTypes) {
+         FunctionType resolvedSubType = (FunctionType) subType.resolve(t, scope);
+         resolvedSubtypes.add(resolvedSubType);
+         subtypesChanged |= (resolvedSubType != subType);
        }
+       if (subtypesChanged) {
+         subTypes = resolvedSubtypes.build();
        }
+    }
+
 
-    return super.resolveInternal(t, scope);
+    // Note: We should be calling JSType#resolveInternal directly, but it's
+    // protected. This is the best we can do for now.
+    return registry.isLastGeneration() ? this : super.resolveInternal(t, scope);
   }
\ No newline at end of file
