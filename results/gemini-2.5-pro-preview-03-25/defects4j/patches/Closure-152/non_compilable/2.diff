diff --git a/tmp/f4fb485e-cdaa-4afe-837f-e223d41d0b24_buggy.java b/tmp/b7125c6e-1f3c-4d7d-af0a-74f78ec483a0_fixed.java
index 58a1651..761b156 100644
--- a/tmp/f4fb485e-cdaa-4afe-837f-e223d41d0b24_buggy.java
+++ b/tmp/b7125c6e-1f3c-4d7d-af0a-74f78ec483a0_fixed.java
@@ -1,32 +1,41 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
+    // Note: We want to resolve the prototype object, not the prototype
+    // property of the function. See PrototypeObjectType#resolveInternal.
+    if (prototype != null) {
       prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+    }
+
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // typeOfThis is declared as JSType, so the cast was incorrect.
+    typeOfThis = safeResolve(typeOfThis, t, scope);
 
     boolean changed = false;
+    if (implementedInterfaces != null) {
       ImmutableList.Builder<ObjectType> resolvedInterfaces =
           ImmutableList.builder();
       for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
       }
       if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
       }
+    }
+
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
