diff --git a/tmp/6b10469a-f404-4794-a625-0c3116ad6822_buggy.java b/tmp/593b2cb2-6bb4-4706-84f1-9b0db6c2bf6a_fixed.java
index b7a6b23..c2954a5 100644
--- a/tmp/6b10469a-f404-4794-a625-0c3116ad6822_buggy.java
+++ b/tmp/593b2cb2-6bb4-4706-84f1-9b0db6c2bf6a_fixed.java
@@ -1,99 +1,107 @@
     /**
      * Encodes the given String into a Caverphone value.
      *
      * @param txt String the source string
      * @return A caverphone code for the given String
      */
     public String caverphone(String txt) {
         // NOTE: Version 1.0 of Caverphone is easily derivable from this code
         // by commenting out the 2.0 lines and adding in the 1.0 lines
 
         if( txt == null || txt.length() == 0 ) {
             return "1111111111";
         }
 
         // 1. Convert to lowercase
         txt = txt.toLowerCase(java.util.Locale.ENGLISH);
 
         // 2. Remove anything not A-Z
         txt = txt.replaceAll("[^a-z]", "");
 
         // 2.5. Remove final e
+        // Rule 2.5: If the name ends in e remove it. Except for smee and see.
+        // The implementation txt.replaceAll("e$", "") is simple but handles most cases.
+        // Smee and See are edge cases not explicitly handled here.
         txt = txt.replaceAll("e$", "");             // 2.0 only
 
         // 3. Handle various start options
         txt = txt.replaceAll("^cough", "cou2f");
         txt = txt.replaceAll("^rough", "rou2f");
         txt = txt.replaceAll("^tough", "tou2f");
         txt = txt.replaceAll("^enough", "enou2f");  // 2.0 only
         txt = txt.replaceAll("^trough", "trou2f");  // 2.0 only - note the spec says ^enough here again, c+p error I assume
         txt = txt.replaceAll("^gn", "2n");
 
-        // End 
-        txt = txt.replaceAll("^mb", "m2");
+        // 4. Handle end options (mb -> m2) - Caverphone 2.0 spec rule 4
+        // Original code incorrectly used ^mb (start) instead of mb$ (end)
+        txt = txt.replaceAll("mb$", "m2");
 
-        // 4. Handle replacements
+        // 5. Handle replacements (Corresponds to Caverphone 2.0 spec rule 5)
         txt = txt.replaceAll("cq", "2q");
         txt = txt.replaceAll("ci", "si");
         txt = txt.replaceAll("ce", "se");
         txt = txt.replaceAll("cy", "sy");
         txt = txt.replaceAll("tch", "2ch");
         txt = txt.replaceAll("c", "k");
         txt = txt.replaceAll("q", "k");
         txt = txt.replaceAll("x", "k");
         txt = txt.replaceAll("v", "f");
         txt = txt.replaceAll("dg", "2g");
         txt = txt.replaceAll("tio", "sio");
         txt = txt.replaceAll("tia", "sia");
         txt = txt.replaceAll("d", "t");
         txt = txt.replaceAll("ph", "fh");
         txt = txt.replaceAll("b", "p");
         txt = txt.replaceAll("sh", "s2");
         txt = txt.replaceAll("z", "s");
         txt = txt.replaceAll("^[aeiou]", "A");
         txt = txt.replaceAll("[aeiou]", "3");
         txt = txt.replaceAll("j", "y");        // 2.0 only
         txt = txt.replaceAll("^y3", "Y3");     // 2.0 only
         txt = txt.replaceAll("^y", "A");       // 2.0 only
         txt = txt.replaceAll("y", "3");        // 2.0 only
         txt = txt.replaceAll("3gh3", "3kh3");
         txt = txt.replaceAll("gh", "22");
         txt = txt.replaceAll("g", "k");
         txt = txt.replaceAll("s+", "S");
         txt = txt.replaceAll("t+", "T");
         txt = txt.replaceAll("p+", "P");
         txt = txt.replaceAll("k+", "K");
         txt = txt.replaceAll("f+", "F");
         txt = txt.replaceAll("m+", "M");
         txt = txt.replaceAll("n+", "N");
         txt = txt.replaceAll("w3", "W3");
         //txt = txt.replaceAll("wy", "Wy");    // 1.0 only
         txt = txt.replaceAll("wh3", "Wh3");
         txt = txt.replaceAll("w$", "3");       // 2.0 only
         //txt = txt.replaceAll("why", "Why");  // 1.0 only
         txt = txt.replaceAll("w", "2");
         txt = txt.replaceAll("^h", "A");
         txt = txt.replaceAll("h", "2");
         txt = txt.replaceAll("r3", "R3");
         txt = txt.replaceAll("r$", "3");       // 2.0 only
         //txt = txt.replaceAll("ry", "Ry");    // 1.0 only
         txt = txt.replaceAll("r", "2");
         txt = txt.replaceAll("l3", "L3");
         txt = txt.replaceAll("l$", "3");       // 2.0 only
         //txt = txt.replaceAll("ly", "Ly");    // 1.0 only
         txt = txt.replaceAll("l", "2");
         //txt = txt.replaceAll("j", "y");      // 1.0 only
         //txt = txt.replaceAll("y3", "Y3");    // 1.0 only
         //txt = txt.replaceAll("y", "2");      // 1.0 only
 
-        // 5. Handle removals
+        // 6. Remove all 2s (Caverphone 2.0 spec rule 6)
         txt = txt.replaceAll("2", "");
+
+        // 7. Handle final 3 -> A (Caverphone 2.0 spec rule 7)
         txt = txt.replaceAll("3$", "A");       // 2.0 only
+
+        // 8. Remove all 3s (Caverphone 2.0 spec rule 8)
         txt = txt.replaceAll("3", "");
 
-        // 6. put ten 1s on the end
-        txt = txt + "111111" + "1111";        // 1.0 only has 6 1s
+        // 9. Pad with 10 1s (Caverphone 2.0 spec rule 9)
+        txt = txt + "1111111111"; // Use 10 1s for Caverphone 2.0
 
-        // 7. take the first six characters as the code
+        // 10. Take the first 10 characters (Caverphone 2.0 spec rule 10)
         return txt.substring(0, 10);          // 1.0 truncates to 6
     }
\ No newline at end of file
