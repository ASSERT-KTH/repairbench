diff --git a/tmp/2a45a5d6-c7d9-4776-be1b-fdc220c1fb8d_buggy.java b/tmp/2d388ea3-5546-484a-902c-3263109c1dda_fixed.java
index 0e18f59..d21762e 100644
--- a/tmp/2a45a5d6-c7d9-4776-be1b-fdc220c1fb8d_buggy.java
+++ b/tmp/2d388ea3-5546-484a-902c-3263109c1dda_fixed.java
@@ -1,13 +1,36 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
+            // LZMA properties format: (lc, lp, pb), dictSize_4bytes
+            // Ensure properties array is valid and long enough (at least 5 bytes)
+            // Note: Original code didn't check length, assuming valid input based on context.
+            // We retain that assumption to minimize changes, but robust code might add a check.
+            // if (coder.properties == null || coder.properties.length < 5) {
+            //     throw new IOException("LZMA Coder properties are corrupt or missing");
+            // }
+
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
-            for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
-            }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+            // Dictionary size is a 32-bit unsigned integer in little-endian order.
+            // Read bytes 1 to 4, treating them as unsigned to avoid issues with sign extension
+            // when bytes >= 0x80 are promoted to int before shifting.
+            long dictSize = coder.properties[1] & 0xFF;
+            dictSize |= ((long)(coder.properties[2] & 0xFF) << 8);
+            dictSize |= ((long)(coder.properties[3] & 0xFF) << 16);
+            dictSize |= ((long)(coder.properties[4] & 0xFF) << 24);
+
+            // The org.tukaani.xz.LZMAInputStream constructor takes the dictionary size as an int.
+            // Internally, it uses org.tukaani.xz.LZMADecoder which validates that the
+            // dictionary size is not negative and does not exceed Integer.MAX_VALUE (2GiB - 1).
+            // See org.tukaani.xz.LZMADecoder constructor.
+            // Therefore, the practical maximum dictionary size is Integer.MAX_VALUE.
+            // The original check used a potentially different constant (LZMAInputStream.DICT_SIZE_MAX)
+            // which might be 4GiB-1, leading to incorrect validation before the int cast.
+            if (dictSize > Integer.MAX_VALUE) {
+                // Throw an exception consistent with the actual limitation.
+                throw new IOException("Dictionary larger than " + Integer.MAX_VALUE + " bytes maximum size");
             }
+
+            // Pass -1 for uncompressed size (unknown in this context).
+            // Cast dictSize to int. This is safe now because we've ensured it's within the valid range [0, Integer.MAX_VALUE].
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
