diff --git a/tmp/863072d2-e51f-4ac2-92d7-2c747effdd27_buggy.java b/tmp/13169ef8-163a-4edb-9112-64db1153bc96_fixed.java
index 0e18f59..91c8e9a 100644
--- a/tmp/863072d2-e51f-4ac2-92d7-2c747effdd27_buggy.java
+++ b/tmp/13169ef8-163a-4edb-9112-64db1153bc96_fixed.java
@@ -1,13 +1,36 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
+            if (coder.properties == null) {
+                 throw new IOException("Missing LZMA properties");
+            }
+            // LZMA properties are 1 byte for props, 4 bytes for dict size
+            if (coder.properties.length < 5) {
+                 throw new IOException("LZMA properties too short, need at least 5 bytes, got " + coder.properties.length);
+            }
+
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
-            for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
-            }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+
+            // Dictionary size is a 32-bit unsigned integer in little-endian format
+            // stored in coder.properties[1] to coder.properties[4].
+            // We need to read it carefully to avoid sign extension issues and store it in a long.
+            long dictSize = coder.properties[1] & 0xFF;
+            dictSize |= (coder.properties[2] & 0xFFL) << 8;  // Use 0xFFL to ensure promotion to long before shift
+            dictSize |= (coder.properties[3] & 0xFFL) << 16;
+            dictSize |= (coder.properties[4] & 0xFFL) << 24;
+
+            // The org.tukaani.xz.LZMAInputStream constructor used takes dictionary size as an int.
+            // Therefore, the maximum dictionary size supported by this specific constructor path
+            // is Integer.MAX_VALUE (2GiB - 1). The 7z format itself allows up to 4GiB - 1.
+            // If the dictionary size exceeds Integer.MAX_VALUE, we cannot proceed with this constructor.
+            if (dictSize > Integer.MAX_VALUE) {
+                // Throw an informative exception indicating the limitation.
+                // This explains why the test might fail with "UnsupportedOptionsException" for large dictionaries.
+                throw new IOException("Dictionary size " + dictSize + " bytes exceeds implementation limit of " + Integer.MAX_VALUE + " bytes");
             }
+
+            // The constructor requires dictSize as int. Since we checked dictSize <= Integer.MAX_VALUE,
+            // the cast (int)dictSize is safe and preserves the value.
+            // The uncompressed size is set to -1 (unknown), as is often the case for raw LZMA streams.
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
