diff --git a/tmp/bf25bf6a-081d-429e-b2be-338c8445734e_buggy.java b/tmp/60bccfd9-38db-4bbc-b632-17675cd1e5b3_fixed.java
index 0e18f59..486c0ca 100644
--- a/tmp/bf25bf6a-081d-429e-b2be-338c8445734e_buggy.java
+++ b/tmp/60bccfd9-38db-4bbc-b632-17675cd1e5b3_fixed.java
@@ -1,13 +1,43 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
-            byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
-            for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+            // Ensure properties array is not null and has the minimum required length (1 byte for props + 4 bytes for dict size)
+            final byte[] properties = coder.properties;
+            if (properties == null || properties.length < 5) {
+                 throw new IOException("LZMA coder properties are too short.");
             }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+
+            final byte propsByte = properties[0];
+
+            // Dictionary size is stored as a 32-bit unsigned little-endian integer
+            // in properties[1] through properties[4].
+            // We read it into a long to handle unsigned values up to 2^32-1.
+            // Mask with 0xFFL to prevent sign extension when converting byte to long.
+            long dictSize = properties[1] & 0xFFL;
+            dictSize |= (properties[2] & 0xFFL) << 8;
+            dictSize |= (properties[3] & 0xFFL) << 16;
+            dictSize |= (properties[4] & 0xFFL) << 24;
+
+            // The LZMAInputStream constructor used internally expects the dictionary size as an int.
+            // See org.tukaani.xz.LZMAInputStream(InputStream, long, byte, int).
+            // If the dictionary size read from the 7z file (dictSize as long) is
+            // greater than Integer.MAX_VALUE (2^31 - 1), casting it to int will result
+            // in a negative value. The underlying LZMAInputStream implementation
+            // checks if the int dictSize parameter is negative and throws an
+            // UnsupportedOptionsException if it is.
+            // Therefore, we must reject dictionary sizes that don't fit in a positive int.
+            if (dictSize > Integer.MAX_VALUE) {
+                throw new IOException("Dictionary size " + dictSize + " bytes is larger than the maximum supported size " + Integer.MAX_VALUE);
             }
+
+            // The original check against LZMAInputStream.DICT_SIZE_MAX (4GiB) is technically correct
+            // for the LZMA format itself, but too lenient for the underlying implementation's constraints.
+            // The check against Integer.MAX_VALUE above effectively replaces it.
+            // if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { // DICT_SIZE_MAX is (1L << 32) - 1
+            //     throw new IOException("Dictionary larger than 4GiB maximum size");
+            // }
+
+            // Pass the dictionary size as int, now guaranteed to be non-negative.
+            // The memory limit is set to -1 (no limit).
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
