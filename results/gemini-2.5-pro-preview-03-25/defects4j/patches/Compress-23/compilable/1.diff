diff --git a/tmp/433fbc11-e634-4f6d-bbc1-cf74edd59606_buggy.java b/tmp/d441129c-e0c6-46d7-a602-11d5be8211a6_fixed.java
index 0e18f59..b202d03 100644
--- a/tmp/433fbc11-e634-4f6d-bbc1-cf74edd59606_buggy.java
+++ b/tmp/d441129c-e0c6-46d7-a602-11d5be8211a6_fixed.java
@@ -1,13 +1,27 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+            // Dictionary size is a 32-bit unsigned integer, stored in bytes 1-4 (little endian)
+            // Need to treat bytes as unsigned using & 0xFF and use long for calculation
+            // to avoid sign extension and overflow issues during intermediate steps.
+            long dictSize = coder.properties[1] & 0xFFL; // LSB
             for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+                // Combine the next bytes, masking with 0xFFL before shifting to treat as unsigned
+                dictSize |= ((coder.properties[i + 1] & 0xFFL) << (8 * i));
             }
+
+            // The check below uses LZMAInputStream.DICT_SIZE_MAX, which is assumed to be defined
+            // in the scope of this class (likely org.apache.commons.compress.archivers.sevenz.LZMAInputStream).
+            // This check should validate against the theoretical limit or the practical limit imposed
+            // by the underlying library or the int cast below.
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+                throw new IOException("Dictionary larger than maximum size " + LZMAInputStream.DICT_SIZE_MAX);
             }
+
+            // The org.tukaani.xz.LZMAInputStream constructor expects the dictionary size as an int.
+            // If dictSize > Integer.MAX_VALUE, casting to int results in a negative value,
+            // which the constructor will likely reject. The check above should ideally prevent this
+            // if LZMAInputStream.DICT_SIZE_MAX is appropriately defined (e.g., <= Integer.MAX_VALUE).
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
