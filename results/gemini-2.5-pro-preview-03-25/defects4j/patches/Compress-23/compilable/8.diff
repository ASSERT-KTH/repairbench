diff --git a/tmp/a2a8334b-7691-4133-b0be-1047015667cb_buggy.java b/tmp/1d9e9254-f762-4fe7-aa3d-bc47dbb528dc_fixed.java
index 0e18f59..0416931 100644
--- a/tmp/a2a8334b-7691-4133-b0be-1047015667cb_buggy.java
+++ b/tmp/1d9e9254-f762-4fe7-aa3d-bc47dbb528dc_fixed.java
@@ -1,13 +1,38 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
+            // LZMA properties consist of 1 byte for lc/lp/pb and 4 bytes for dictionary size (32-bit unsigned little-endian).
+            if (coder.properties == null || coder.properties.length < 5) {
+                throw new IOException("LZMA Coder properties are truncated.");
+            }
+
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
-            for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+            long dictSize = 0;
+            // Reconstruct the 32-bit unsigned little-endian dictionary size.
+            // The original code had a bug related to sign extension when reading bytes.
+            for (int i = 0; i < 4; i++) {
+                // Treat byte as unsigned using & 0xFF before casting to long and shifting.
+                // This prevents sign extension issues, especially with coder.properties[1].
+                dictSize |= ((long)(coder.properties[i + 1] & 0xFF)) << (8 * i);
             }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+
+            // The theoretical maximum dictionary size is 4GiB - 1 (0xFFFFFFFFL).
+            // However, the org.tukaani.xz.LZMAInputStream constructor takes an int for dictionary size.
+            // Furthermore, it imposes its own limit, slightly less than Integer.MAX_VALUE.
+            // See org.tukaani.xz.LZMA2Options.DICT_SIZE_MAX.
+            // We must ensure the dictionary size fits within the positive range of int.
+            // Values larger than Integer.MAX_VALUE would become negative or wrap around when cast to int,
+            // causing the constructor check `dictSize < 0` to fail.
+            if (dictSize > Integer.MAX_VALUE) {
+                 // Throw an IOException indicating the size is too large to be represented as a positive int,
+                 // which is a prerequisite for the underlying LZMAInputStream implementation.
+                 throw new IOException("Dictionary size " + dictSize + " bytes is too large for this implementation (max supported: " + Integer.MAX_VALUE + ")");
             }
-            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
+
+            // Now, dictSize is known to be between 0 and Integer.MAX_VALUE.
+            // Cast to int safely. The LZMAInputStream constructor will perform
+            // the final check against its specific implementation limit (LZMA2Options.DICT_SIZE_MAX).
+            int dictionarySizeInt = (int) dictSize;
+
+            return new LZMAInputStream(in, -1, propsByte, dictionarySizeInt);
         }
\ No newline at end of file
