diff --git a/tmp/47ac7f58-4151-49d9-b47c-0d4ba105907b_buggy.java b/tmp/b49a1a2f-8a6b-4e7a-a24f-39cab9df82bc_fixed.java
index 0e18f59..f614cbd 100644
--- a/tmp/47ac7f58-4151-49d9-b47c-0d4ba105907b_buggy.java
+++ b/tmp/b49a1a2f-8a6b-4e7a-a24f-39cab9df82bc_fixed.java
@@ -1,13 +1,25 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
+            // Properties: lc, lp, pb (1 byte); Dictionary size (4 bytes, unsigned little endian)
+            // See https://www.7-zip.org/7zFormat.txt section 2.1.1 LZMA
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+            long dictSize = coder.properties[1] & 0xFFL; // Read byte 1 as unsigned long
             for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+                // Read bytes 2, 3, 4 as unsigned longs and shift them
+                dictSize |= ((coder.properties[i + 1] & 0xFFL) << (8 * i));
             }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+
+            // The dictionary size stored in the 7z header is a 32-bit unsigned integer.
+            // However, the LZMAInputStream constructor (and the underlying tukaani.xz library)
+            // takes the dictionary size as a signed int.
+            // Java arrays (used for dictionary) are limited to Integer.MAX_VALUE elements.
+            // Therefore, we must check if the dictionary size exceeds Integer.MAX_VALUE.
+            if (dictSize > Integer.MAX_VALUE) {
+                throw new IOException("Dictionary size " + dictSize + " is too large for this implementation (max: " + Integer.MAX_VALUE + ")");
             }
+
+            // The constructor requires the dictionary size as an int.
+            // Since we've checked dictSize <= Integer.MAX_VALUE, this cast is safe.
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
