diff --git a/tmp/b0f0d319-e338-4216-a187-7bcea63b563d_buggy.java b/tmp/55666bdb-6228-40b7-ade8-2f5e20a95f7e_fixed.java
index 0e18f59..be7b04f 100644
--- a/tmp/b0f0d319-e338-4216-a187-7bcea63b563d_buggy.java
+++ b/tmp/55666bdb-6228-40b7-ade8-2f5e20a95f7e_fixed.java
@@ -1,13 +1,35 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
-            for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+            // Dictionary size is a 32-bit unsigned integer, little-endian
+            // See https://www.7-zip.org/_LZMA.txt (section "LZMA Properties")
+            long dictSize = 0;
+            for (int i = 0; i < 4; i++) {
+                // coder.properties[1] is the LSB, coder.properties[4] is the MSB
+                // Need to treat bytes as unsigned when converting to long
+                dictSize |= ((long)(coder.properties[i + 1] & 0xFF)) << (8 * i);
             }
+
+            // LZMAInputStream constructor takes dictionary size as an int.
+            // LZMAInputStream.DICT_SIZE_MAX is defined as (1 << 30) * 4L - 1, i.e. 4GiB - 1.
+            // This check ensures we don't exceed the 7z specification's theoretical limit.
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
                 throw new IOException("Dictionary larger than 4GiB maximum size");
             }
+
+            // Additionally, the LZMAInputStream constructor (from org.tukaani.xz) takes an int.
+            // Check if the dictionary size exceeds the maximum value for a Java int.
+            // Casting a value > Integer.MAX_VALUE to int results in a negative or wrapped-around value,
+            // which will likely cause an error in the underlying library.
+            if (dictSize > Integer.MAX_VALUE) {
+                 // Throw an exception here to prevent passing an invalid size to the constructor.
+                 // The underlying library (xz-java) might have its own, possibly lower, limit
+                 // (like ~1.5 GiB), but Integer.MAX_VALUE is the limit imposed by the method signature.
+                 throw new IOException("Dictionary size " + dictSize + " exceeds maximum int value");
+            }
+
+            // Pass the dictionary size as an int, now that we've validated it fits.
+            // The uncompressed size is set to -1 (unknown).
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
