diff --git a/tmp/2baea219-a38f-4de5-9c1d-fe8bae2df8ea_buggy.java b/tmp/ab7f5241-72b5-4c5e-819b-1f96c3f440c1_fixed.java
index 0e18f59..c0f35ee 100644
--- a/tmp/2baea219-a38f-4de5-9c1d-fe8bae2df8ea_buggy.java
+++ b/tmp/ab7f5241-72b5-4c5e-819b-1f96c3f440c1_fixed.java
@@ -1,13 +1,33 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
+            // Validate properties length
+            if (coder.properties == null || coder.properties.length < 5) {
+                 throw new IOException("LZMA Coder properties are too short.");
+            }
+
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
-            for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
-            }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+            
+            // Dictionary size is a 32-bit unsigned integer, stored little-endian.
+            // We must read it carefully into a long to handle values > Integer.MAX_VALUE.
+            // Bytes must be treated as unsigned by masking with 0xFF.
+            long dictSize = coder.properties[1] & 0xFFL; // Read byte 1 (LSB) as unsigned long
+            dictSize |= (coder.properties[2] & 0xFFL) << 8;  // Read byte 2
+            dictSize |= (coder.properties[3] & 0xFFL) << 16; // Read byte 3
+            dictSize |= (coder.properties[4] & 0xFFL) << 24; // Read byte 4 (MSB)
+
+            // The org.tukaani.xz.LZMAInputStream constructor (via LZMAAloneDecoder) 
+            // has an implementation limit of 1.5 GiB for the dictionary size.
+            // This limit is (1 << 30) + (1 << 29) = 1610612736L.
+            // See org.tukaani.xz.LZMAAloneDecoder constructor source code.
+            final long xzLibraryLimit = 1610612736L; 
+            if (dictSize > xzLibraryLimit) {
+                throw new IOException("Dictionary size " + dictSize 
+                                     + " exceeds the maximum supported size " + xzLibraryLimit);
             }
+
+            // The LZMAInputStream constructor takes an int for dictionary size.
+            // Since we've validated dictSize against xzLibraryLimit, which is 
+            // less than Integer.MAX_VALUE, the cast to int is safe.
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
