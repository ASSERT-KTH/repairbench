diff --git a/tmp/f32d33a2-b6d2-4518-886b-65c43c3130a2_buggy.java b/tmp/211c11f0-3c7a-4907-912d-2b0b76486741_fixed.java
index 0e18f59..090388f 100644
--- a/tmp/f32d33a2-b6d2-4518-886b-65c43c3130a2_buggy.java
+++ b/tmp/211c11f0-3c7a-4907-912d-2b0b76486741_fixed.java
@@ -1,13 +1,33 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
+            // LZMA properties are: 1 byte for props, 4 bytes for dictionary size (unsigned int)
+            if (coder.properties == null || coder.properties.length < 5) {
+                 throw new IOException("LZMA Coder properties missing or too short");
+            }
+
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
-            for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+            long dictSize = 0;
+            // Dictionary size is a 32-bit unsigned integer in little-endian order
+            for (int i = 0; i < 4; i++) {
+                // Read bytes coder.properties[1] to coder.properties[4]
+                // Mask with 0xFFL to treat byte as unsigned, ensuring no sign extension
+                // Shift to the correct byte position (0, 8, 16, 24) and OR into dictSize
+                dictSize |= (coder.properties[i + 1] & 0xFFL) << (8 * i);
             }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+
+            // The org.apache.commons.compress.compressors.lzma.LZMAInputStream constructor
+            // takes dictionary size as an int. Java's int is signed 32-bit.
+            // The underlying Tukaani XZ library also expects a non-negative int, typically <= Integer.MAX_VALUE.
+            // Therefore, we must check if the dictionary size exceeds the maximum positive value for an int.
+            if (dictSize > Integer.MAX_VALUE) {
+                 // Throw the same exception type observed in the failing test for consistency.
+                 throw new org.tukaani.xz.UnsupportedOptionsException(
+                     "LZMA dictionary is too big for this implementation (" + dictSize + " bytes, max is " + Integer.MAX_VALUE + " bytes)");
             }
-            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
+
+            // The memory limit parameter (-1) indicates to use the default calculation based on dictionary size.
+            // Cast dictSize to int, which is now safe as we've checked it's within the valid range.
+            // Use the LZMAInputStream implementation from the 'compressors' package.
+            return new org.apache.commons.compress.compressors.lzma.LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
