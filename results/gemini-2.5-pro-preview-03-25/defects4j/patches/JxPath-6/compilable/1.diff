diff --git a/tmp/163552b6-08a7-4bea-8855-2ea7ff64b038_buggy.java b/tmp/c407f068-811d-4a82-81cf-27b2261ba6e1_fixed.java
index f650982..0624404 100644
--- a/tmp/163552b6-08a7-4bea-8855-2ea7ff64b038_buggy.java
+++ b/tmp/c407f068-811d-4a82-81cf-27b2261ba6e1_fixed.java
@@ -1,42 +1,68 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        // Determine if left is iterator-like
+        Iterator li = null;
+        boolean lIsIterator = false;
+        // Check for Iterator first, as compute() might return it directly
+        if (l instanceof Iterator) {
+            li = (Iterator) l;
+            lIsIterator = true;
+        } else if (l instanceof Collection) { // Then check for Collection
+            li = ((Collection) l).iterator();
+            lIsIterator = true;
         }
+        // Note: This logic assumes that if a NodePointer represents a collection,
+        // compute() returns an Iterator over the corresponding nodes/pointers.
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        // Determine if right is iterator-like
+        Iterator ri = null;
+        boolean rIsIterator = false;
+        // Check for Iterator first
+        if (r instanceof Iterator) {
+            ri = (Iterator) r;
+            rIsIterator = true;
+        } else if (r instanceof Collection) { // Then check for Collection
+            ri = ((Collection) r).iterator();
+            rIsIterator = true;
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Apply XPath comparison logic based on iterator presence
+        if (lIsIterator && !rIsIterator) {
+            // Compare elements of iterator li with scalar r
+            return contains(li, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (!lIsIterator && rIsIterator) {
+            // Compare elements of iterator ri with scalar l
+            return contains(ri, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        if (lIsIterator && rIsIterator) {
+            // Check for any match between elements of li and ri
+            return findMatch(li, ri);
         }
-        return equal(l, r);
+
+        // Fallback: Neither side is directly an iterator or collection.
+        // Delegate to the base equality comparison method, which must handle
+        // potential NodePointers and apply XPath scalar comparison rules (type conversions etc.).
+        return equal(l, r); // Assumes this calls a base equal(Object, Object) method
     }
\ No newline at end of file
