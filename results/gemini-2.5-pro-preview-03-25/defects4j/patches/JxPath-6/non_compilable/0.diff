diff --git a/tmp/38920572-c86a-4d1e-b9fe-5e221607efc1_buggy.java b/tmp/3ae93d41-b1a3-4cfe-953d-94180e6a94eb_fixed.java
index f650982..2cea1cf 100644
--- a/tmp/38920572-c86a-4d1e-b9fe-5e221607efc1_buggy.java
+++ b/tmp/3ae93d41-b1a3-4cfe-953d-94180e6a94eb_fixed.java
@@ -1,42 +1,75 @@
+import java.util.Collection;
+import java.util.Iterator;
+import org.apache.commons.jxpath.NodePointer;
+import org.apache.commons.jxpath.ri.EvalContext;
+import org.apache.commons.jxpath.ri.axes.InitialContext;
+import org.apache.commons.jxpath.ri.axes.SelfContext;
+
     /**
-     * Compares two values
+     * Compares two values according to XPath comparison rules.
+     * Handles comparisons involving node-sets (represented as Iterators or Collections)
+     * and atomic values.
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+        // Unwrap special JXPath context types to get the node pointer
         if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+            l = ((EvalContext) l).getSingleNodePointer(); // l becomes NodePointer or null
         }
-
         if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
+            r = ((EvalContext) r).getSingleNodePointer(); // r becomes NodePointer or null
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        // If the result is a NodePointer, get its value for comparison.
+        // This is important because the pointer might point to a collection
+        // that needs to be treated as a node-set for comparison purposes.
+        Object lValue = l instanceof NodePointer ? ((NodePointer) l).getValue() : l;
+        Object rValue = r instanceof NodePointer ? ((NodePointer) r).getValue() : r;
+
+        // Prepare the values for comparison logic below.
+        // If a value is a Collection, convert it to an Iterator.
+        Object lCompare = lValue;
+        if (lCompare instanceof Collection) {
+            lCompare = ((Collection) lCompare).iterator();
         }
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        Object rCompare = rValue;
+        if (rCompare instanceof Collection) {
+            rCompare = ((Collection) rCompare).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Now determine the comparison logic based on whether the operands
+        // represent node-sets (Iterators) or atomic values.
+        if (lCompare instanceof Iterator) {
+            Iterator lIter = (Iterator) lCompare;
+            if (rCompare instanceof Iterator) {
+                // Node-set vs Node-set: comparison is true if there is a node
+                // in the first node-set and a node in the second node-set
+                // such that their string-values are equal.
+                return findMatch(lIter, (Iterator) rCompare);
+            }
+            else {
+                // Node-set vs Atomic value: comparison is true if there is
+                // a node in the node-set such that its string-value is
+                // equal to the atomic value.
+                // We pass the original (potentially unwrapped) atomic value 'rValue'.
+                return contains(lIter, rValue);
+            }
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        else if (rCompare instanceof Iterator) {
+            // Atomic value vs Node-set: similar to the case above.
+            // We pass the original (potentially unwrapped) atomic value 'lValue'.
+            return contains((Iterator) rCompare, lValue);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        else {
+            // Atomic value vs Atomic value: perform direct comparison.
+            // We use the potentially unwrapped values 'lValue' and 'rValue'.
+            return equal(lValue, rValue); // Delegates to the base equal(Object, Object)
         }
-        return equal(l, r);
     }
\ No newline at end of file
