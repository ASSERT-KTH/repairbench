diff --git a/tmp/0b83b248-5978-4f32-b5b5-256174f4635a_buggy.java b/tmp/8af662a9-f0d1-4a71-a7e8-81e9af83c023_fixed.java
index f650982..f18a18f 100644
--- a/tmp/0b83b248-5978-4f32-b5b5-256174f4635a_buggy.java
+++ b/tmp/8af662a9-f0d1-4a71-a7e8-81e9af83c023_fixed.java
@@ -1,42 +1,77 @@
     /**
-     * Compares two values
+     * Compares two values according to XPath comparison rules.
+     * Handles comparisons involving node-sets (represented as Iterators or Collections,
+     * potentially wrapped in NodePointers) and atomic values.
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+        // If an expression evaluates to a special context node, get its pointer.
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
-
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        // Check if the operands are NodePointers and get their underlying values.
+        // This is crucial because a NodePointer might point to a Collection,
+        // which needs to be treated as a node-set for comparison purposes.
+        // We use these values (vl, vr) to check for Collection/Iterator types.
+        Object vl = (l instanceof NodePointer) ? ((NodePointer) l).getValue() : l;
+        Object vr = (r instanceof NodePointer) ? ((NodePointer) r).getValue() : r;
+
+        // Determine if the underlying values represent iterable sets (Collections or Iterators).
+        Iterator lIter = null;
+        if (vl instanceof Collection) {
+            lIter = ((Collection) vl).iterator();
+        } else if (vl instanceof Iterator) {
+            // If the value itself is already an Iterator, use it directly.
+            lIter = (Iterator) vl;
         }
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        Iterator rIter = null;
+        if (vr instanceof Collection) {
+            rIter = ((Collection) vr).iterator();
+        } else if (vr instanceof Iterator) {
+            // If the value itself is already an Iterator, use it directly.
+            rIter = (Iterator) vr;
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Apply XPath comparison logic based on whether operands are sets (iterators) or atomic values:
+        // - set = atomic: true if any node in set equals the atomic value.
+        // - atomic = set: true if any node in set equals the atomic value.
+        // - set = set: true if any node in set1 equals any node in set2.
+
+        if (lIter != null && rIter == null) {
+            // Left is a set, right is atomic/single node.
+            // Compare elements from the left iterator with the original right value (r).
+            // The 'contains' method internally uses static 'equal(Object, Object)'
+            // which handles comparisons between node values and atomic values correctly.
+            return contains(lIter, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (lIter == null && rIter != null) {
+            // Left is atomic/single node, right is a set. Symmetric case.
+            // Compare elements from the right iterator with the original left value (l).
+            return contains(rIter, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        if (lIter != null && rIter != null) {
+            // Both operands are sets (iterators). Check for any matching pair.
+            // The 'findMatch' method internally uses static 'equal(Object, Object)'.
+            return findMatch(lIter, rIter);
         }
-        return equal(l, r);
+
+        // If neither operand resolves to an iterator (meaning both are effectively
+        // atomic values or single NodePointers not pointing to collections),
+        // perform a direct comparison using the static 'equal' helper method.
+        // This method handles various type comparisons, including NodePointer vs NodePointer
+        // and NodePointer vs atomic value, according to XPath rules (often involving string-value).
+        // We use the original 'l' and 'r' here, as the static 'equal' method knows
+        // how to handle NodePointers directly.
+        return equal(l, r); // Delegates to static equal(Object, Object)
     }
\ No newline at end of file
