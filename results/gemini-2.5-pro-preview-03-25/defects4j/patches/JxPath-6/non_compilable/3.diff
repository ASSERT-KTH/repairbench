diff --git a/tmp/4bad2afa-6fdf-4bf8-9684-cde359fe7b50_buggy.java b/tmp/a64346d6-5a87-4273-8007-fd0146413f76_fixed.java
index f650982..aa06904 100644
--- a/tmp/4bad2afa-6fdf-4bf8-9684-cde359fe7b50_buggy.java
+++ b/tmp/a64346d6-5a87-4273-8007-fd0146413f76_fixed.java
@@ -1,42 +1,78 @@
+import java.util.Collection;
+import java.util.Iterator;
+import org.apache.commons.jxpath.ri.EvalContext;
+import org.apache.commons.jxpath.ri.InfoSetUtil;
+import org.apache.commons.jxpath.ri.axes.InitialContext;
+import org.apache.commons.jxpath.ri.axes.SelfContext;
+import org.apache.commons.jxpath.ri.model.NodePointer;
+import org.apache.commons.jxpath.util.ValueUtils; // Import ValueUtils
+import org.apache.commons.jxpath.Pointer; // Import Pointer if needed by ValueUtils or context handling
+
+// Assuming the class structure includes access to helper methods:
+// - protected boolean contains(Iterator iter, Object value)
+// - protected boolean findMatch(Iterator iter1, Iterator iter2)
+// - protected boolean equal(Object o1, Object o2) // The helper method, likely CoreOps.equal
+
     /**
-     * Compares two values
+     * Compares two values according to XPath '=' semantics.
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+        // Context node handling: Convert context nodes (e.g., '.') to their corresponding NodePointer.
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
-
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
-        }
+        // Use ValueUtils to determine if operands represent multiple values
+        // (e.g., collections, node-sets represented by pointers, iterators).
+        // ValueUtils.isCollection correctly handles various types including NodePointers that represent node sets.
+        boolean lIter = ValueUtils.isCollection(l);
+        boolean rIter = ValueUtils.isCollection(r);
+
+        Iterator lIterator = null;
+        Iterator rIterator = null;
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        // Obtain iterators that yield the actual values if the operands represent multiple values.
+        // ValueUtils.iterate handles conversion from Collection, Pointer (node-set), Iterator, etc. to a value iterator.
+        if (lIter) {
+            lIterator = ValueUtils.iterate(l);
+        }
+        if (rIter) {
+            rIterator = ValueUtils.iterate(r);
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Perform comparison based on whether operands represent single or multiple values, following XPath rules.
+        if (lIter && rIter) {
+            // Both operands represent multiple values: True if a value from 'l' equals a value from 'r'.
+            return findMatch(lIterator, rIterator);
+        }
+        else if (lIter && !rIter) {
+            // Left has multiple values, Right is scalar: True if any value from 'l' equals 'r'.
+            // The 'contains' method uses the helper 'equal(Object, Object)', which should handle
+            // the case where 'r' might be a single NodePointer by comparing its underlying value.
+            return contains(lIterator, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        else if (!lIter && rIter) {
+            // Left is scalar, Right has multiple values: True if 'l' equals any value from 'r'.
+            // The 'contains' method uses the helper 'equal(Object, Object)', which should handle
+            // the case where 'l' might be a single NodePointer by comparing its underlying value.
+            return contains(rIterator, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        else {
+            // Neither operand represents multiple values (both are scalars or potentially single node pointers).
+            // Perform direct comparison using the helper method.
+            // The helper 'equal(Object, Object)' is responsible for comparisons like
+            // scalar=scalar, scalar=pointer, pointer=scalar, pointer=pointer,
+            // and should extract values from single NodePointers as needed according to XPath rules.
+            return equal(l, r); // Calls helper equal(Object, Object)
         }
-        return equal(l, r);
     }
\ No newline at end of file
