diff --git a/tmp/f8470eae-2e9f-46e9-bb6a-938f349b02f2_buggy.java b/tmp/2403cce5-095c-432f-a4af-aa4d5fbfa61a_fixed.java
index f650982..d15d831 100644
--- a/tmp/f8470eae-2e9f-46e9-bb6a-938f349b02f2_buggy.java
+++ b/tmp/2403cce5-095c-432f-a4af-aa4d5fbfa61a_fixed.java
@@ -1,42 +1,86 @@
+import java.util.Collection;
+import java.util.Iterator;
+import org.apache.commons.jxpath.ri.EvalContext;
+import org.apache.commons.jxpath.ri.axes.InitialContext;
+import org.apache.commons.jxpath.ri.axes.SelfContext;
+import org.apache.commons.jxpath.ri.model.NodePointer;
+import org.apache.commons.jxpath.util.ValueUtils; // Added import
+
     /**
-     * Compares two values
+     * Compares two values according to XPath '=' rules.
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+        // Handle special contexts like '.' or '/' which evaluate to EvalContext objects
+        // These need to be converted to their corresponding NodePointers.
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
-
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // Unpack NodePointers to get the actual underlying values.
+        // This is crucial because compute() might return a NodePointer
+        // (e.g., pointing to a collection) rather than the value itself.
+        // ValueUtils.getValue() handles NodePointers correctly, returning the pointed-to value.
+        // It also handles other types appropriately (e.g., returns collections as is).
+        l = ValueUtils.getValue(l);
+        r = ValueUtils.getValue(r);
+
+        // Determine if the unpacked values represent node sets (Collections or Iterators).
+        // We need Iterator instances to perform element-wise comparisons.
+        Iterator lIter = null;
+        boolean lIsNodeSet = false;
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            lIter = ((Collection) l).iterator();
+            lIsNodeSet = true;
+        } else if (l instanceof Iterator) {
+            // The value might already be an Iterator (e.g., from a previous step or NodeSet).
+            lIter = (Iterator) l;
+            lIsNodeSet = true;
         }
 
+        Iterator rIter = null;
+        boolean rIsNodeSet = false;
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            rIter = ((Collection) r).iterator();
+            rIsNodeSet = true;
+        } else if (r instanceof Iterator) {
+            rIter = (Iterator) r;
+            rIsNodeSet = true;
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Apply XPath comparison rules based on whether operands are node sets or scalars:
+        if (lIsNodeSet && rIsNodeSet) {
+            // Both are node sets: true if there exists a pair (one from each set) that are equal.
+            // The findMatch helper method should implement this logic.
+            return findMatch(lIter, rIter);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (lIsNodeSet && !rIsNodeSet) {
+            // Left is node set, right is scalar: true if any element in the left set equals the right scalar.
+            // The contains helper method should implement this logic, comparing elements from lIter to the scalar r.
+            return contains(lIter, r);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        if (!lIsNodeSet && rIsNodeSet) {
+            // Right is node set, left is scalar: true if any element in the right set equals the left scalar.
+            // The contains helper method should implement this logic, comparing elements from rIter to the scalar l.
+            return contains(rIter, l);
         }
+
+        // Neither operand is a node set (both are scalars): perform direct comparison.
+        // Rely on the overloaded equal(Object, Object) helper method, which handles
+        // necessary type conversions (e.g., string to number) and comparisons.
         return equal(l, r);
     }
+
+    // Declaration of helper methods assumed to exist elsewhere in the class:
+    // protected abstract boolean contains(Iterator iter, Object value);
+    // protected abstract boolean findMatch(Iterator iter1, Iterator iter2);
+    // protected abstract boolean equal(Object o1, Object o2);
