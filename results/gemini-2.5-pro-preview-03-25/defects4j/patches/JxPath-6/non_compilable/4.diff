diff --git a/tmp/c74d543f-ec1e-4b50-8c84-08d6b0cd25f1_buggy.java b/tmp/25ded391-8b9b-41f5-b0e3-348479d31abe_fixed.java
index f650982..fc0e6bb 100644
--- a/tmp/c74d543f-ec1e-4b50-8c84-08d6b0cd25f1_buggy.java
+++ b/tmp/25ded391-8b9b-41f5-b0e3-348479d31abe_fixed.java
@@ -1,42 +1,65 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+        // Handle context nodes -> NodePointer
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
+        // Extract underlying value if dealing with NodePointers
+        // This is needed to check if the pointer points to a collection.
+        Object vl = (l instanceof NodePointer) ? ((NodePointer) l).getValue() : l;
+        Object vr = (r instanceof NodePointer) ? ((NodePointer) r).getValue() : r;
+
+        // Convert collections (or NodePointers to collections) to iterators
+        // Check the unwrapped value first, then the original object if it wasn't a pointer.
+        boolean lIsIterator = false;
+        if (vl instanceof Collection) {
+            l = ((Collection) vl).iterator();
+            lIsIterator = true;
+        } else if (l instanceof Collection) { // Handle case where compute returns Collection directly
             l = ((Collection) l).iterator();
+            lIsIterator = true;
         }
 
-        if (r instanceof Collection) {
+        boolean rIsIterator = false;
+        if (vr instanceof Collection) {
+            r = ((Collection) vr).iterator();
+            rIsIterator = true;
+        } else if (r instanceof Collection) { // Handle case where compute returns Collection directly
             r = ((Collection) r).iterator();
+            rIsIterator = true;
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+        // Use the boolean flags for clarity, as l/r might now be Iterators
+        if (lIsIterator && rIsIterator) {
+            // Both are iterators (originally collections or pointers to collections)
+            return findMatch((Iterator) l, (Iterator) r);
+        }
+        if (lIsIterator /* && !rIsIterator implied */) {
+            // Left is iterator, right is scalar (or NodePointer to scalar)
             return contains((Iterator) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+        if (rIsIterator /* && !lIsIterator implied */) {
+            // Right is iterator, left is scalar (or NodePointer to scalar)
             return contains((Iterator) r, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
-        }
+        
+        // If we reach here, neither operand resulted in an iterator.
+        // They are either scalars or NodePointers to scalars/non-collections.
+        // Call the basic comparison method which handles NodePointer unwrapping
+        // and type conversions according to XPath rules.
         return equal(l, r);
     }
\ No newline at end of file
