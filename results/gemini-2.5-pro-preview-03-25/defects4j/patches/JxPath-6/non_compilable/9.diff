diff --git a/tmp/cc7dd6ca-77e8-4ecd-83c1-fc4547094269_buggy.java b/tmp/2f807ccf-8e6d-4565-b111-88d67decbaa7_fixed.java
index f650982..4afe69d 100644
--- a/tmp/cc7dd6ca-77e8-4ecd-83c1-fc4547094269_buggy.java
+++ b/tmp/2f807ccf-8e6d-4565-b111-88d67decbaa7_fixed.java
@@ -1,42 +1,177 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import org.apache.commons.jxpath.ri.EvalContext;
+import org.apache.commons.jxpath.ri.InfoSetUtil;
+import org.apache.commons.jxpath.ri.axes.InitialContext;
+import org.apache.commons.jxpath.ri.axes.SelfContext;
+import org.apache.commons.jxpath.ri.compiler.Expression;
+import org.apache.commons.jxpath.ri.model.NodePointer;
+
     /**
-     * Compares two values
+     * Compares two values according to XPath '=' semantics.
+     * This version fixes potential issues by inlining the logic for handling
+     * iterators/collections to ensure correct comparison semantics are used,
+     * specifically relying on a proper static 'equal(Object, Object)' helper
+     * for base comparisons.
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
-        Object l = left.compute(context);
-        Object r = right.compute(context);
-
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
+        // Compute the values of the left and right expressions
+        Object l = left.computeValue(context); // Use computeValue for clarity
+        Object r = right.computeValue(context); // Use computeValue for clarity
 
+        // Unwrap InitialContext/SelfContext to NodePointer
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
-
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        Iterator lit = null;
+        boolean lIsCollectionOrIterator = false;
+        // Check if left is an iterator or collection
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            lit = ((Collection) l).iterator();
+            lIsCollectionOrIterator = true;
+        } else if (l instanceof Iterator) {
+            lit = (Iterator) l;
+            lIsCollectionOrIterator = true;
+        } else if (l instanceof NodePointer && ((NodePointer) l).isCollection()) {
+             // Handle NodePointers that represent collections (e.g., result of path expression)
+             lit = ((NodePointer) l).childIterator(null, false, null); // Assuming iteration over values/nodes
+             lIsCollectionOrIterator = true;
         }
 
+
+        Iterator rit = null;
+        boolean rIsCollectionOrIterator = false;
+        // Check if right is an iterator or collection
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            rit = ((Collection) r).iterator();
+            rIsCollectionOrIterator = true;
+        } else if (r instanceof Iterator) {
+            rit = (Iterator) r;
+            rIsCollectionOrIterator = true;
+        } else if (r instanceof NodePointer && ((NodePointer) r).isCollection()) {
+             rit = ((NodePointer) r).childIterator(null, false, null);
+             rIsCollectionOrIterator = true;
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+
+        // Perform comparison based on whether arguments are sets (iterators) or scalars
+        if (lIsCollectionOrIterator && rIsCollectionOrIterator) {
+            // Case 1: Both are sets (Iterators) - find if any element in L equals any element in R
+            // Store elements of the left iterator to avoid consuming it multiple times if rit needs reset (it doesn't here)
+            // This corresponds to the findMatch logic.
+            ArrayList<Object> listL = new ArrayList<>();
+            while (lit.hasNext()) {
+                listL.add(lit.next());
+            }
+            // Iterate through the right iterator and compare each element against all elements from the left
+            while (rit.hasNext()) {
+                Object valR = rit.next();
+                for (Object valL : listL) {
+                    // Use the static helper for base comparison
+                    if (equal(valL, valR)) { // Assumes static equal(Object, Object) exists and is correct
+                        return true;
+                    }
+                }
+            }
+            return false; // No matching elements found
+        }
+        else if (lIsCollectionOrIterator) {
+            // Case 2: Left is a set, Right is a scalar - check if any element in L equals R
+            // This corresponds to the contains(lit, r) logic.
+            while (lit.hasNext()) {
+                Object valL = lit.next();
+                // Use the static helper for base comparison
+                if (equal(valL, r)) { // Assumes static equal(Object, Object) exists and is correct
+                    return true;
+                }
+            }
+            return false; // No element in L equals R
+        }
+        else if (rIsCollectionOrIterator) {
+            // Case 3: Left is a scalar, Right is a set - check if any element in R equals L
+            // This corresponds to the contains(rit, l) logic.
+            while (rit.hasNext()) {
+                Object valR = rit.next();
+                // Use the static helper for base comparison
+                if (equal(l, valR)) { // Assumes static equal(Object, Object) exists and is correct
+                    return true;
+                }
+            }
+            return false; // No element in R equals L
+        }
+        else {
+            // Case 4: Both are scalars - perform direct comparison
+            // Use the static helper for base comparison
+            return equal(l, r); // Assumes static equal(Object, Object) exists and is correct
+        }
+    }
+
+    /**
+     * Static helper method to compare two objects using XPath equality rules.
+     * This method must exist in the class or a superclass.
+     * Assumes standard XPath comparison logic: Booleans > Numbers > Strings.
+     * Handles NodePointers by comparing their values/string-values.
+     *
+     * @param left Left object
+     * @param right Right object
+     * @return boolean True if equal, false otherwise
+     */
+    protected static boolean equal(Object left, Object right) {
+        // This is a placeholder for the actual static comparison logic,
+        // which should be present in CoreOperationCompare or a similar base class.
+        // The actual implementation needs to handle NodePointers, type conversions (boolean, number, string)
+        // according to XPath 1.0 section 3.4 rules.
+
+        if (left == right) {
+             return true;
+        }
+        if (left == null || right == null) {
+             return false; // Since left != right (checked above), if one is null, they aren't equal.
+        }
+
+        // Example sketch of the full logic (needs InfoSetUtil):
+        if (left instanceof NodePointer && right instanceof NodePointer) {
+            return InfoSetUtil.stringValue(left).equals(InfoSetUtil.stringValue(right));
+        }
+
+        if (left instanceof NodePointer) {
+            left = ((NodePointer) left).getValue();
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (right instanceof NodePointer) {
+            right = ((NodePointer) right).getValue();
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+
+        if (left instanceof Boolean || right instanceof Boolean) {
+             return InfoSetUtil.booleanValue(left) == InfoSetUtil.booleanValue(right);
+        }
+
+        double ld = InfoSetUtil.doubleValue(left);
+        double rd = InfoSetUtil.doubleValue(right);
+
+        if (Double.isNaN(ld)) {
+            if (Double.isNaN(rd)) { // both NaN
+                return InfoSetUtil.stringValue(left).equals(InfoSetUtil.stringValue(right));
             }
-        return equal(l, r);
+            return false; // left is NaN, right is Number -> unequal
+        }
+        if (Double.isNaN(rd)) { // left is Number, right is NaN
+             return false;
+        }
+        // Both are numbers (not NaN)
+        return ld == rd;
+
+        // Simplified logic from some versions (might be less accurate for NaN/type mix):
+        // if (!Double.isNaN(ld) || !Double.isNaN(rd)) {
+        //     return ld == rd;
+        // }
+        // return InfoSetUtil.stringValue(left).equals(InfoSetUtil.stringValue(right));
     }
\ No newline at end of file
