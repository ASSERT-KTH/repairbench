diff --git a/tmp/3af0a875-617e-4d0b-9735-ffcd21a98ab2_buggy.java b/tmp/ff1cc02b-5c2c-4338-9e58-d85a38acb3c4_fixed.java
index f650982..f5e28e9 100644
--- a/tmp/3af0a875-617e-4d0b-9735-ffcd21a98ab2_buggy.java
+++ b/tmp/ff1cc02b-5c2c-4338-9e58-d85a38acb3c4_fixed.java
@@ -1,42 +1,87 @@
+import java.util.Collection;
+import java.util.Iterator;
+import org.apache.commons.jxpath.ri.EvalContext;
+import org.apache.commons.jxpath.ri.axes.InitialContext;
+import org.apache.commons.jxpath.ri.axes.SelfContext;
+import org.apache.commons.jxpath.ri.model.NodePointer;
+
+// Assuming the class extends CoreOperationCompare or similar base class
+// with access to contains(Iterator, Object), findMatch(Iterator, Iterator)
+// and a static equal(Object, Object) helper.
+
     /**
-     * Compares two values
+     * Compares two values according to XPath '=' rules.
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
-        Object l = left.compute(context);
-        Object r = right.compute(context);
-
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
+        // Compute the values of the left and right expressions
+        Object l = left.computeValue(context);
+        Object r = right.computeValue(context);
 
+        // Unwrap EvalContext to NodePointer if necessary
+        // This handles cases where an expression yields the context itself (e.g., '.')
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
-
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        // Extract the underlying value if l or r is a NodePointer
+        // This is necessary because NodePointers can wrap collections/iterators
+        Object lValue = l;
+        if (l instanceof NodePointer) {
+             // Use getValue() to access the object represented by the pointer
+             lValue = ((NodePointer) l).getValue();
         }
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        Object rValue = r;
+        if (r instanceof NodePointer) {
+            rValue = ((NodePointer) r).getValue();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Check if the underlying values are collections or iterators and get iterators
+        Iterator lIter = null;
+        if (lValue instanceof Collection) {
+            lIter = ((Collection) lValue).iterator();
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        else if (lValue instanceof Iterator) {
+            // Handle cases where computeValue directly returns an Iterator
+            lIter = (Iterator) lValue;
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+
+        Iterator rIter = null;
+        if (rValue instanceof Collection) {
+            rIter = ((Collection) rValue).iterator();
+        }
+        else if (rValue instanceof Iterator) {
+            rIter = (Iterator) rValue;
+        }
+
+        // Perform comparison based on XPath rules for sequences (represented by iterators)
+        // Rule: iterator = non-iterator -> true if exists item in iterator such that item = non-iterator
+        if (lIter != null && rIter == null) {
+            // Pass the iterator and the potentially wrapped value from the right side.
+            // contains should compare each element from lIter with rValue using the base equality rules.
+            return contains(lIter, rValue);
         }
+        // Rule: non-iterator = iterator -> true if exists item in iterator such that non-iterator = item
+        if (lIter == null && rIter != null) {
+            // Pass the iterator and the potentially wrapped value from the left side.
+             return contains(rIter, lValue);
+        }
+        // Rule: iterator = iterator -> true if exists item1 in iterator1 and item2 in iterator2 such that item1 = item2
+        if (lIter != null && rIter != null) {
+            return findMatch(lIter, rIter);
+        }
+
+        // Fallback: Neither underlying value (lValue, rValue) is a Collection or Iterator.
+        // Call the static equal helper with the original computed objects (l, r).
+        // These original objects (l, r) could still be NodePointers wrapping primitive values,
+        // or just the primitive values themselves. The static helper is responsible
+        // for handling NodePointer unwrapping ONLY for non-iterable value comparisons.
         return equal(l, r);
     }
\ No newline at end of file
