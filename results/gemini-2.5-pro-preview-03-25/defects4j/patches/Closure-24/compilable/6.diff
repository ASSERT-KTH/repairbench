diff --git a/tmp/e0542944-edb5-47b0-adaa-12c286751e47_buggy.java b/tmp/e544efe2-7fcd-4fff-a3d0-9f3bd1867171_fixed.java
index 602226b..f193a5e 100644
--- a/tmp/e0542944-edb5-47b0-adaa-12c286751e47_buggy.java
+++ b/tmp/e544efe2-7fcd-4fff-a3d0-9f3bd1867171_fixed.java
@@ -1,26 +1,68 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
+        Node n = v.getNameNode(); // The NAME node (e.g., 'x' in var x = ...)
         Node parent = n.getParent();
+
+        // Ignore declarations that are not directly in the scope body.
+        // Check if the parent's parent is the scope root (BLOCK node).
+        Node grandparent = parent.getParent();
+        if (grandparent == null || !grandparent.isBlock() || grandparent != scope.getRootNode()) {
+          continue;
+        }
+
+        // Ignore function parameters (handled by different checks)
+        if (parent.isParamList()) {
+          continue;
+        }
+
+        // Ignore the implicit 'arguments' variable
+        if (n.getString().equals("arguments")) {
+            continue;
+        }
+
+        // Bleeding functions are handled elsewhere (according to original comments)
+        if (v.isBleedingFunction()) {
+            continue;
+        }
+
+        // Now, determine if it's a valid alias declaration or should be reported.
+        boolean isAliasDefinition = false;
         if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+          Node value = n.getFirstChild(); // The assigned value (if any)
+          if (value != null && value.isQualifiedName()) {
+            // It's a var declaration assigned a qualified name. This is a potential alias.
             String name = n.getString();
-          Var aliasVar = scope.getVar(name);
+            Var aliasVar = v; // Same as scope.getVar(name)
+            Node initialValue = aliasVar.getInitialValue();
+
+            // Verify the initial value node matches the value node we found.
+            // Also check if getQualifiedName() returns non-null.
+            if (initialValue == value) {
+                String qualifiedName = initialValue.getQualifiedName();
+                if (qualifiedName != null) {
+                    // It's a confirmed alias.
+                    isAliasDefinition = true;
                     aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
                     transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+                }
+            }
+          }
+          // If it's a VAR but not a confirmed alias, it's an error.
+          // The !isAliasDefinition check below handles this.
+        }
+        // Function declarations (`function f() {}`) are not valid aliases
+        // and other direct declarations (like let/const if supported) are also not aliases.
+
+        // Report error if it's a variable declared directly in the scope
+        // that is not a valid alias definition.
+        if (!isAliasDefinition) {
+          // Only report for VAR and FUNCTION nodes, as other types like
+          // parameters or catch variables are already filtered out.
+          // Class declarations might need explicit handling if they become common.
+          if (parent.isVar() || parent.isFunction()) {
              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
