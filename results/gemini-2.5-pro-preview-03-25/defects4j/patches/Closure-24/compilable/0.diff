diff --git a/tmp/73fe3732-27ad-4d74-b184-21b616b941bd_buggy.java b/tmp/7487d0d9-b1b4-4bea-b49b-caf8785ac513_fixed.java
index 602226b..5b2dffe 100644
--- a/tmp/73fe3732-27ad-4d74-b184-21b616b941bd_buggy.java
+++ b/tmp/7487d0d9-b1b4-4bea-b49b-caf8785ac513_fixed.java
@@ -1,26 +1,49 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
+        Node n = v.getNode(); // The NAME node for the variable 'v'
+        Node parent = n.getParent(); // The node containing the declaration (VAR, FUNCTION, etc.)
+
+        // Assume it's not a valid alias unless proven otherwise.
+        boolean isAlias = false;
+
+        // Check if it's a 'var' declaration aliasing a qualified name.
+        // We only allow aliases of the form:
+        // var A = B.C;
         if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          Node initialValue = v.getInitialValue();
+          if (initialValue != null && initialValue.isQualifiedName()) {
+            // It looks like 'var name = qualified.name;'
+            String name = v.getName(); // Use Var's name
+            String qualifiedName = initialValue.getQualifiedName();
+            // getQualifiedName() can return null for valid qualified names
+            // like "this.foo". We don't want to alias those.
+            if (qualifiedName != null && initialValue.isGetProp()) {
+               aliases.put(name, v);
                transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+               isAlias = true; // Mark as a valid alias
+            }
+          }
+          // else: It's a 'var' declaration but not a qualified name alias
+          // (e.g., var x = 10; var x = function(){}; var x;).
+          // 'isAlias' remains false.
+        }
+        // else: It's not a 'var' declaration (e.g., function f() {}, param, catch).
+        // 'isAlias' remains false.
+
+        // Report error for declarations that are not valid aliases.
+        // We expect only aliases (var x = goog.module) within a goog.scope body.
+        // Other variable or function declarations (var x = 10; function y() {}) are disallowed.
+        // Parameters (parent.isParamList()) and catch variables (parent.isCatch()) are allowed implicitly
+        // as their parents are not VAR or FUNCTION.
+        if (!isAlias) {
+          if (parent.isVar() || parent.isFunction()) {
+            // Don't warn about bleeding functions, they are handled elsewhere.
+            // TODO(robbyw): Consider adding a specific exemption if v.isBleedingFunction() is true,
+            // although the original code structure didn't seem to do this explicitly here.
+            // For now, report for any local var/function that isn't a valid alias.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
