diff --git a/tmp/22299033-20e5-433f-a920-a0512c3f8c37_buggy.java b/tmp/2638a128-a3f6-4017-86ad-c00b4eef6f69_fixed.java
index 602226b..a9a0861 100644
--- a/tmp/22299033-20e5-433f-a920-a0512c3f8c37_buggy.java
+++ b/tmp/2638a128-a3f6-4017-86ad-c00b4eef6f69_fixed.java
@@ -1,26 +1,61 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+
+        // Parameters of the scope function are not aliases.
+        // Bleeding functions are also not aliases.
+        // We don't need to report an error because the scope creator
+        // will report errors for parameters and bleeding functions.
+        if (parent == null || parent.isParamList() || v.isBleedingFunction()) {
+          continue;
+        }
+
+        // We are only interested in variables that are defined in the scope
+        // block. This excludes variables declared in inner scopes, like block
+        // scopes.
+        if (v.getScope() != scope) {
+            continue;
+        }
+
+        // Check if the variable is initialized to a qualified name.
+        boolean isVarAlias = parent.isVar() &&
+            n.hasChildren() &&
+            n.getFirstChild().isQualifiedName();
+
+        // Check if the variable is a function declaration.
+        boolean isFunctionAlias = parent.isFunction();
+
+
+        if (isVarAlias) {
+          // Handle aliased variables.
           String name = n.getString();
+          Node initialValue = n.getFirstChild();
+          String qualifiedName = initialValue.getQualifiedName();
+
+          // Check for null qualified name, which indicates an issue.
+          if (qualifiedName == null) {
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+            continue; // Skip adding this as an alias
+          }
+
           Var aliasVar = scope.getVar(name);
+          // It should not be null, but check for safety.
+          if (aliasVar == null) {
+             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+             continue; // Skip adding this as an alias
+          }
+
           aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+
+        } else if (parent.isVar() || isFunctionAlias) {
+            // If it's a VAR declaration that's not a simple alias,
+            // or if it's a FUNCTION declaration,
+            // it's not allowed in goog.scope. Report it.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
-        }
+        // Other variable types (like catch clauses) are ignored.
       }
     }
\ No newline at end of file
