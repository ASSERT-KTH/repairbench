diff --git a/tmp/5c34ecbd-9390-4ed9-b71a-bff7a8edd43c_buggy.java b/tmp/3bfecd0b-a149-4f17-a8d0-6ab640819d51_fixed.java
index 602226b..6484a3d 100644
--- a/tmp/5c34ecbd-9390-4ed9-b71a-bff7a8edd43c_buggy.java
+++ b/tmp/3bfecd0b-a149-4f17-a8d0-6ab640819d51_fixed.java
@@ -1,26 +1,49 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
+        Node n = v.getNode(); // The NAME node (e.g., 'x' in var x = ...)
+        Node parent = n.getParent(); // The declaration node (e.g., VAR or FUNCTION)
+
+        // Skip parameters of the scope function, they get BAD_PARAMETERS error.
+        if (v.isParam()) {
+          continue;
+        }
+
+        // Skip bleeding functions (var fn = function() {}), they get BAD_PARAMETERS error.
+        // Per comments in original code.
+        if (v.isBleedingFunction()) {
+          continue;
+        }
+
+        // Check local variable declarations: var or function
         if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+          Node valueNode = n.getFirstChild(); // RHS of assignment, or null for 'var x;'
+
+          // Check if it's a valid alias: var name = qualified.name;
+          if (valueNode != null && valueNode.isQualifiedName()) {
             String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
+            String qualifiedName = valueNode.getQualifiedName();
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            // Ensure qualifiedName is not null (defensive check)
+            // and that the alias doesn't shadow a global Confirmation variable.
+            if (qualifiedName != null) {
+              // Record the valid alias
+              aliases.put(name, v);
               transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
             } else {
-          // TODO(robbyw): Support using locals for private variables.
+              // Should not happen if isQualifiedName is true, but report if it does.
               report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
+          } else {
+            // Not a valid alias (var x = 10; var x; var x = funcRef;)
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          }
+        } else if (parent.isFunction() && n == parent.getFirstChild()) {
+          // Function declaration: function f() {} is not an alias
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
+        // We ignore other kinds of variables (like catch) here, assuming they
+        // are either irrelevant or handled by other checks. The goal is to
+        // distinguish valid aliases from invalid local declarations (var/function).
       }
     }
\ No newline at end of file
