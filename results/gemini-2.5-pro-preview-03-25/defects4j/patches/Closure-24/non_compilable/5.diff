diff --git a/tmp/55e4ea47-0978-4edb-b1a9-fef6bdc29968_buggy.java b/tmp/e1a5d5bf-71d5-4660-8d68-6502e866b8b9_fixed.java
index 602226b..80f8fa9 100644
--- a/tmp/55e4ea47-0978-4edb-b1a9-fef6bdc29968_buggy.java
+++ b/tmp/e1a5d5bf-71d5-4660-8d68-6502e866b8b9_fixed.java
@@ -1,26 +1,47 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
+        Node n = v.getNode(); // The NAME node for variable v
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        // Parameters, catch variables, bleeding functions, and defines are ignored.
+        // They are either handled elsewhere or not relevant for aliasing.
+        if (v.isParam() || v.isCatch() || v.isBleedingFunction() || v.isDefine()) {
+           continue;
+        }
+
+        boolean isAliasDefinition = false;
+        // Check if it's a variable declaration (var/let/const)
+        if (parent.isVar() || parent.isLet() || parent.isConst()) {
+           Node initializer = v.getInitialValue(); // Get the initializer RHS node
+           // Check if initializer exists and is a qualified name
+           if (initializer != null && initializer.isQualifiedName()) {
+               String qualifiedName = initializer.getQualifiedName();
+               // Check if getQualifiedName() returns a non-null value,
+               // ensuring it's a simple qualified name like a.b.c not complex like a.b['c']
+               if (qualifiedName != null) {
+                   // This is a valid alias definition.
+                   isAliasDefinition = true;
+                   String name = v.getName();
+                   aliases.put(name, v);
                    transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
                }
            }
         }
+        // Other declarations like functions (parent.isFunction()),
+        // classes (parent.isClass()) are not valid alias definitions.
+
+        // If this variable declaration within the scope is not a recognized
+        // alias pattern (var/let/const name = qualified.name;), report an error.
+        if (!isAliasDefinition) {
+           // This reports an error for:
+           // - var x;
+           // - var x = 10;
+           // - var x = foo() + 1;
+           // - function f() {}
+           // - class C {}
+           // - let/const declarations not matching the alias pattern.
+           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());
+        }
+      }
     }
\ No newline at end of file
