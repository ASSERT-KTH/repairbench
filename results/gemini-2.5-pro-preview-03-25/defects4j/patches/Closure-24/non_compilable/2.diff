diff --git a/tmp/3c921ad6-be71-42b3-886b-c32fe8f81098_buggy.java b/tmp/09ff8999-5c99-4cf8-94c6-3e92f071399c_fixed.java
index 602226b..cd99d48 100644
--- a/tmp/3c921ad6-be71-42b3-886b-c32fe8f81098_buggy.java
+++ b/tmp/09ff8999-5c99-4cf8-94c6-3e92f071399c_fixed.java
@@ -1,26 +1,48 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
+        // Parameters of the scope function produce a BAD_PARAMETERS error elsewhere,
+        // so just ignore them.
+        if (v.isParameter()) {
+          continue;
+        }
+
+        // We are only interested in variables declared in *this* scope.
+        // Variables declared in outer scopes (bleeding vars) are ignored.
+        // Bleeding functions should already be caught by BAD_PARAMETERS.
+        if (v.getScope() != scope) {
+             continue;
+        }
+
+        Node n = v.getNode(); // The NAME node of the variable declaration.
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        Node initialValue = v.getInitialValue(); // The RHS of the assignment, if any.
+
+        // Check if it's a valid alias declaration: var alias = qualified.name;
+        boolean isValidAlias = false;
+        if (parent.isVar() && initialValue != null && initialValue.isQualifiedName()) {
           String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
+          // Make sure the qualified name is actually resolvable.
+          String qualifiedName = initialValue.getQualifiedName();
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          if (qualifiedName != null) {
+             // Record the alias. Use 'v' as the alias variable.
+             aliases.put(name, v);
              transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+             isValidAlias = true;
+          }
+        }
+
+        // If it wasn't a valid alias declared in this scope, report an error.
+        // This covers cases like:
+        // - var x; (initialValue == null)
+        // - var x = 10; (initialValue is not QualifiedName)
+        // - var x = foo(); (initialValue is not QualifiedName)
+        // - function f() {} (parent is FUNCTION, not VAR)
+        // - var x = goog['dom']; (initialValue is not QualifiedName)
+        // etc.
+        if (!isValidAlias) {
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
