diff --git a/tmp/f0bbfaa9-33ab-43f0-aff6-d0e31440dd89_buggy.java b/tmp/b5b9bf00-d4c3-4476-b5d6-28e0a0e2b0d5_fixed.java
index 602226b..4973fde 100644
--- a/tmp/f0bbfaa9-33ab-43f0-aff6-d0e31440dd89_buggy.java
+++ b/tmp/b5b9bf00-d4c3-4476-b5d6-28e0a0e2b0d5_fixed.java
@@ -1,26 +1,45 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
+        Node n = v.getNode(); // The NAME node (e.g., 'x')
+        Node parent = v.getParentNode(); // The declaration node (VAR, FUNCTION, CATCH...)
+
+        // Parameters of the scope function produce a BAD_PARAMETERS error elsewhere,
+        // so ignore them here.
+        // Bleeding functions defined inside the scope are also ignored, as they
+        // are not declared variables in this scope.
+        if (v.isParameter()) {
+          continue;
+        }
+
+        // Check if the variable declaration is a valid alias:
+        // var alias = qualified.name;
+        boolean isVar = parent.isVar();
+        Node initialValue = v.getInitialValue();
+        boolean isValidAlias = isVar
+            && initialValue != null
+            && initialValue.isQualifiedName();
+
+        if (isValidAlias) {
+          // Record the alias
+          String name = n.getString(); // Or v.getName()
+          // Check if aliasVar is null? v should always be in the scope.
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          // Note: initialValue is guaranteed non-null and QName here.
+          String qualifiedName = initialValue.getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // Not a valid alias. This includes:
+          // - var x; (initialValue == null)
+          // - var x = 10; (!initialValue.isQualifiedName())
+          // - var x = foo() + bar(); (!initialValue.isQualifiedName())
+          // - function f() {} (!isVar)
+          // - catch(e) {} (!isVar for e)
+          // We report an error for these cases, as they are invalid declarations
+          // directly inside a goog.scope block besides aliases.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
