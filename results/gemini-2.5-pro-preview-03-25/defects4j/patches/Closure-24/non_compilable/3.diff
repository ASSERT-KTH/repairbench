diff --git a/tmp/4c067785-b80c-40eb-8623-d29b98b17e3d_buggy.java b/tmp/e5144689-7ec7-4abd-b5d8-f4b094ebf802_fixed.java
index 602226b..edc7775 100644
--- a/tmp/4c067785-b80c-40eb-8623-d29b98b17e3d_buggy.java
+++ b/tmp/e5144689-7ec7-4abd-b5d8-f4b094ebf802_fixed.java
@@ -1,26 +1,47 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
+        Node n = v.getNode(); // Node where the var is declared (e.g., NAME, FUNCTION, CLASS)
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+
+        // Bleeding functions and parameters should be ignored according to comments
+        // in the original code, potentially handled by other checks or errors.
+        // We focus on VAR, FUNCTION, and CLASS declarations directly in the scope.
+
+        if (parent != null && parent.isVar()) {
+          // Case 1: It's a variable declaration: var name = initializer; or var name;
+          // Here, 'n' is the NAME node.
+          Node initializer = n.getFirstChild();
+
+          if (initializer != null && initializer.isQualifiedName()) {
+            // It looks like an alias syntactically: var name = Q.Name;
             String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
+            String qualifiedName = initializer.getQualifiedName();
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            // Check if getQualifiedName succeeded (it should if isQualifiedName is true)
+            if (qualifiedName != null) {
+              // Record the alias using the Var object 'v'
+              aliases.put(name, v);
               transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
             } else {
-          // TODO(robbyw): Support using locals for private variables.
+              // Should not happen, but report if qualified name resolution failed.
+              report(t, initializer, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+            }
+          } else {
+            // Not a valid alias: Initializer is null (var x;) or not a qualified name (var x = 10;).
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
+        } else if (n.isFunction()) {
+          // Case 2: It's a function declaration: function f() {}
+          // Function declarations are not allowed directly in goog.scope block.
+          // Report error using the function's name node.
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());
+        } else if (n.isClass()) {
+           // Case 3: It's a class declaration: class C {} (ES6)
+           // Class declarations are also not allowed directly.
+           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());
         }
+        // Other declaration types (e.g., parameters in function signature, catch variables)
+        // are implicitly ignored as they won't match parent.isVar() or n.isFunction()/isClass().
       }
     }
\ No newline at end of file
