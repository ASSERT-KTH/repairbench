diff --git a/tmp/56b0ebcf-855e-4e3b-9e28-a844876ec7e5_buggy.java b/tmp/374e7235-b6fd-425f-913d-cf5ca4ee8a28_fixed.java
index 602226b..4ef5fed 100644
--- a/tmp/56b0ebcf-855e-4e3b-9e28-a844876ec7e5_buggy.java
+++ b/tmp/374e7235-b6fd-425f-913d-cf5ca4ee8a28_fixed.java
@@ -1,26 +1,51 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
+        Node n = v.getNode(); // This is the NAME node (e.g., 'x' in var x = ...)
+        // Skip variables introduced by externs files, the built-in externs, bleeding functions,
+        // catch declarations, and function parameters.
+        if (n == null
+            || v.isExtern() // Added check for externs
+            || v.isBuiltin() // Added check for builtins
+            || v.isBleedingFunction()
+            || v.isCatch()
+            || v.isParam()
+            || v.isSynAlias()) { // Skip synthetic alias for goog.scope parameter
+          continue;
+        }
+
         Node parent = n.getParent();
+        if (parent == null) {
+          continue; // Should not happen for valid AST, but good practice
+        }
+
+        boolean isAlias = false;
+        // Check if it's a variable declaration (VAR only, based on original code)
+        // with an initializer that is a qualified name.
         if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
+          Node initialValue = v.getInitialValue();
+          if (initialValue != null && initialValue.isQualifiedName()) {
+            String name = v.getName(); // The alias name (e.g., 'dom')
+            String qualifiedName = initialValue.getQualifiedName();
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            // Check that the qualified name is valid and not referring back to the alias
+            // itself (like var x = x; which isn't useful). Also check for null.
+            if (qualifiedName != null && !name.equals(qualifiedName)) {
+              // Record the alias
+              aliases.put(name, v);
               transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+              isAlias = true;
+            }
+          }
+        }
+        // else if (parent.isLet() || parent.isConst()) {
+        // TODO(robbyw): Support let/const aliases if needed in the future.
+        // }
+
+        // If it wasn't successfully processed as a valid alias (e.g., it's a function decl,
+        // class decl, var without initializer, var with non-QName initializer), report error.
+        if (!isAlias) {
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
