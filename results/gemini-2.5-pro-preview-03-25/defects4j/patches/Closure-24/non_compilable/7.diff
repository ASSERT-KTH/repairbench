diff --git a/tmp/49e2d601-3600-4221-b103-97f46820d1be_buggy.java b/tmp/f054f467-1c89-4bb2-9b48-7e90f3ac7daf_fixed.java
index 602226b..5407c6d 100644
--- a/tmp/49e2d601-3600-4221-b103-97f46820d1be_buggy.java
+++ b/tmp/f054f467-1c89-4bb2-9b48-7e90f3ac7daf_fixed.java
@@ -1,26 +1,43 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
+        // Ignore parameters and catch variables, they are not declarations within the scope body.
+        if (v.isParameter() || v.isCatch()) {
+            continue;
+        }
+        // Bleeding functions already get a BAD_PARAMETERS error, so just ignore.
+        // We only care about variables declared directly within this scope.
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        Node n = v.getNode(); // The NAME node associated with the Var.
+        // Node parent = n.getParent(); // We can use Var properties instead.
+
+        if (v.isVarDeclaration()) {
+            Node value = v.getInitialValue(); // Get the initializer value node
+            if (value != null && value.isQualifiedName()) {
+                // Valid alias: var name = qualified.name;
+                String name = v.getName();
+                aliases.put(name, v);
+
+                // We need the Var stored in aliases to be the *actual* aliased
+                // variable, not the alias itself. The original code looked up
+                // the aliased var, let's verify that's needed.
+                // Based on how aliases is used later (replaceWithAliases),
+                // aliases.put(name, v) seems correct: map alias name to the alias Var.
+                // transformation.addAlias maps alias name to qualified name string.
+                String qualifiedName = value.getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
             } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
-        }
+                // Invalid var declaration: var name = non-qualified-name; or var name;
+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());
+            }
+        } else if (v.isFunctionDeclaration()
+            || v.isLet()
+            || v.isConst()
+            || v.isClass()
+            || v.isEnum()) {
+            // These declarations are not allowed directly inside goog.scope
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());
+        }
+        // Else: Other kinds of Vars? Ignore them if they weren't filtered earlier.
       }
     }
\ No newline at end of file
