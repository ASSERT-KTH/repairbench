diff --git a/tmp/bbe677e3-f8c7-4c77-930b-1f58d7d46bf8_buggy.java b/tmp/898c2ae1-244e-4ee2-8e78-131b12490b00_fixed.java
index 3cb9232..5881ded 100644
--- a/tmp/bbe677e3-f8c7-4c77-930b-1f58d7d46bf8_buggy.java
+++ b/tmp/898c2ae1-244e-4ee2-8e78-131b12490b00_fixed.java
@@ -1,26 +1,35 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
         String name = null;
 
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
             name = jg.value();
         } else {
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
-                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
-                 *   it's actually bit tricky to do it more efficiently (meta-annotations
-                 *   add more lookups; AnnotationMap costs etc)
-                 */
             } else if (_hasAnnotation(a, JsonSerialize.class)
                     || _hasAnnotation(a, JsonView.class)
-                    || _hasAnnotation(a, JsonRawValue.class)) {
+                    || _hasAnnotation(a, JsonRawValue.class)
+                    // [databind#498]: also consider @JsonUnwrapped
+                    || _hasAnnotation(a, JsonUnwrapped.class)
+                    ) {
+                // If any of these annotations found, indicates property HAS to be
+                // serialized; but without explicit name.
+                // Special case: empty String can be used to disable name, requirement
+                // is that there is AN annotation. Seems confusing, backwards,
+                // but is the current logic. Underlying problem is that there isn't
+                // dedicated mechanism for marking inclusion, independent of naming
                 name = "";
             } else {
                  return null;
             }
         }
+        // An empty String for name is indicator that there is no name associated
+        // (which usually means "use default", but here means "no name")
+        // But null means that there is no explicit name OR indication of inclusion
+        // So we need to construct instance to represent empty name.
         return PropertyName.construct(name);
     }
\ No newline at end of file
