diff --git a/tmp/a5ec862f-7c57-47f2-98c0-fd0e3d3111a7_buggy.java b/tmp/7f891a15-2c3e-491c-bbc9-72f46a8614cd_fixed.java
index 3cb9232..6d5df42 100644
--- a/tmp/a5ec862f-7c57-47f2-98c0-fd0e3d3111a7_buggy.java
+++ b/tmp/7f891a15-2c3e-491c-bbc9-72f46a8614cd_fixed.java
@@ -1,26 +1,35 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
-        String name = null;
-
+        // @JsonGetter is simplest, has precedence
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
-            name = jg.value();
-        } else {
+            String s = jg.value();
+            // always indicates property relationship, even if empty String:
+            return PropertyName.construct(s);
+        }
+
+        // @JsonProperty has next precedence
         JsonProperty pann = _findAnnotation(a, JsonProperty.class);
         if (pann != null) {
-                name = pann.value();
-                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
-                 *   it's actually bit tricky to do it more efficiently (meta-annotations
-                 *   add more lookups; AnnotationMap costs etc)
-                 */
-            } else if (_hasAnnotation(a, JsonSerialize.class)
-                    || _hasAnnotation(a, JsonView.class)
-                    || _hasAnnotation(a, JsonRawValue.class)) {
-                name = "";
-            } else {
+            String s = pann.value();
+             // always indicates property relationship, even if empty String:
+             return PropertyName.construct(s);
+        }
+
+        // 15-Oct-2015, tatu: Important; check JsonSerialize AFTER specific markers
+        //    Also: JsonRawValue should be checked before others
+        // 06-Nov-2015, tatu: Ok, further, `@JsonUnwrapped` needs consideration...
+        // but otherwise things like @JsonSerialize, @JsonView, @JsonRawValue imply existence
+        // (and more importantly, JsonUnwrapped!)
+        if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)
+                || _hasAnnotation(a, JsonRawValue.class)
+                // [databind#442]: @JsonUnwrapped needs to be considered too
+                || _hasAnnotation(a, JsonUnwrapped.class)) {
+             // And for these, implicit name is PROPERTY_NAME_USE_DEFAULT
+             return PropertyName.USE_DEFAULT;
+        }
+
+        // If nothing above, no indication of virtual property
         return null;
     }
\ No newline at end of file
-        }
-        return PropertyName.construct(name);
-    }
