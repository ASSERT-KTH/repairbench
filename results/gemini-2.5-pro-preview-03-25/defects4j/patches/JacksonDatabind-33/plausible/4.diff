diff --git a/tmp/199b2552-e39a-4195-aeb3-803de0d5dbbf_buggy.java b/tmp/763c30a8-3094-4b4f-b3e7-cf01aee9ec6b_fixed.java
index 3cb9232..86b50fa 100644
--- a/tmp/199b2552-e39a-4195-aeb3-803de0d5dbbf_buggy.java
+++ b/tmp/763c30a8-3094-4b4f-b3e7-cf01aee9ec6b_fixed.java
@@ -1,26 +1,34 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
         String name = null;
 
+        // 13-Jun-2015, tatu: As per [databind#784] allow @JsonGetter to specify
+        //    name override. Might make sense to refactor further...
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
             name = jg.value();
         } else {
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
-                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
-                 *   it's actually bit tricky to do it more efficiently (meta-annotations
-                 *   add more lookups; AnnotationMap costs etc)
-                 */
             } else if (_hasAnnotation(a, JsonSerialize.class)
                     || _hasAnnotation(a, JsonView.class)
-                    || _hasAnnotation(a, JsonRawValue.class)) {
+                    || _hasAnnotation(a, JsonRawValue.class)
+                    // [databind#44] Add support for @JsonUnwrapped too:
+                    || _hasAnnotation(a, JsonUnwrapped.class)) {
+                // Can be used to indicate that property is to be serialized,
+                // but without specifying name: names are deduced implicitly.
+                // But we need to return non-null locally to indicate it is
+                // recognized...
+                // ... and, need to use empty String (not null), similarly to how
+                // empty name from @JsonProperty is indicated.
                 name = "";
             } else {
+                // no explicit indicators, ignore
                 return null;
             }
         }
+        // just explicit name (`""`) means "use default name"; null means "no indicator"
         return PropertyName.construct(name);
     }
\ No newline at end of file
