diff --git a/tmp/20a241b5-0c33-4eeb-b9f9-1a7451bddb84_buggy.java b/tmp/4de7dda1-1932-452b-8fea-750429089eec_fixed.java
index 3cb9232..1719a90 100644
--- a/tmp/20a241b5-0c33-4eeb-b9f9-1a7451bddb84_buggy.java
+++ b/tmp/4de7dda1-1932-452b-8fea-750429089eec_fixed.java
@@ -1,26 +1,39 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
         String name = null;
 
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
             name = jg.value();
         } else {
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
                 /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
                  *   it's actually bit tricky to do it more efficiently (meta-annotations
                  *   add more lookups; AnnotationMap costs etc)
                  */
+            // Check for other annotations that indicate inclusion
+            // [databind#2120]: Need to check @JsonUnwrapped too
             } else if (_hasAnnotation(a, JsonSerialize.class)
                     || _hasAnnotation(a, JsonView.class)
-                    || _hasAnnotation(a, JsonRawValue.class)) {
+                    || _hasAnnotation(a, JsonRawValue.class)
+                    // IMPORTANT: must also check @JsonUnwrapped, since it also
+                    // indicates processing if discovered, but does not imply
+                    // explicit name
+                    || _hasAnnotation(a, JsonUnwrapped.class)
+            ) {
+                // Found annotation that indicates inclusion, but not name
                 name = "";
             } else {
+                // No serialization-indicating annotations found
                 return null;
             }
         }
+        // If name is null or empty, PropertyName.construct() will return
+        // `USE_DEFAULT` (which may be overridden later); we specifically want
+        // null marker only if no annotations were found.
+        // Empty String has specific default name meaning (usually "use default")
         return PropertyName.construct(name);
     }
\ No newline at end of file
