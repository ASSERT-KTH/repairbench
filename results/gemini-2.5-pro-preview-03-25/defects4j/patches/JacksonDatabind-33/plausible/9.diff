diff --git a/tmp/837a2e8a-019c-48b0-b172-6e759ca71660_buggy.java b/tmp/395e628f-2842-42f6-9525-9775cb20f676_fixed.java
index 3cb9232..a10dd26 100644
--- a/tmp/837a2e8a-019c-48b0-b172-6e759ca71660_buggy.java
+++ b/tmp/395e628f-2842-42f6-9525-9775cb20f676_fixed.java
@@ -1,26 +1,36 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
         String name = null;
 
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
             name = jg.value();
         } else {
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
                 /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
                  *   it's actually bit tricky to do it more efficiently (meta-annotations
                  *   add more lookups; AnnotationMap costs etc)
                  */
             } else if (_hasAnnotation(a, JsonSerialize.class)
                     || _hasAnnotation(a, JsonView.class)
-                    || _hasAnnotation(a, JsonRawValue.class)) {
+                    || _hasAnnotation(a, JsonRawValue.class)
+                    // [databind#426] Add check for `@JsonUnwrapped` as well:
+                    || _hasAnnotation(a, JsonUnwrapped.class)
+                    ) {
                 name = "";
             } else {
                 return null;
             }
         }
+        // must return non-null to be considered explicit name; empty String may be used
+        // as placeholder. Use explicit check for `null` to avoid returning `PropertyName("")`
+        // which does not have same semantics.
+        if (name == null) { // [databind#1771] explicitly check for null, don't fall through
+             return null;
+        }
+        // Empty String is legitimate, means "use default name"
         return PropertyName.construct(name);
     }
\ No newline at end of file
