diff --git a/tmp/0ab390f1-a9f3-4f3a-b8de-8140ffdb168f_buggy.java b/tmp/816263ab-d20b-4f9e-9934-4b8bd4e89a94_fixed.java
index 3cb9232..8b32a04 100644
--- a/tmp/0ab390f1-a9f3-4f3a-b8de-8140ffdb168f_buggy.java
+++ b/tmp/816263ab-d20b-4f9e-9934-4b8bd4e89a94_fixed.java
@@ -1,26 +1,45 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
         String name = null;
 
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
             name = jg.value();
         } else {
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
+            } else {
                 /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
                  *   it's actually bit tricky to do it more efficiently (meta-annotations
                  *   add more lookups; AnnotationMap costs etc)
+                 *
+                 * 16-Aug-2016, tatu: Also, Inclusion checks should not be handled here...
+                 *    (although this is registry? Or introspector? Oh well)
                  */
-            } else if (_hasAnnotation(a, JsonSerialize.class)
+                // Also: any getter, setter, field is considered implicitly a property...
+                // 19-May-2017, tatu: ... unless explicit indicates otherwise...
+                if (_hasAnnotation(a, JsonSerialize.class)
                         || _hasAnnotation(a, JsonView.class)
+                        // 14-Jan-2016, tatu: How about @JsonUnwrapped? Need to map it too,
+                        //    similar to other annotations that indicate property-ness
+                        || _hasAnnotation(a, JsonUnwrapped.class)
                         || _hasAnnotation(a, JsonRawValue.class)) {
                     name = "";
                 } else {
                     return null;
                 }
             }
+        }
+        // must return non-empty name or null
+        if (name == null) { // should not happen
+             return null;
+        }
+        // empty String non-null indicates 'default' name, which is currently
+        // indicated by null. This may be changed in future.
+        if (name.length() == 0) {
+            return PropertyName.USE_DEFAULT;
+        }
         return PropertyName.construct(name);
     }
\ No newline at end of file
