diff --git a/tmp/e0b67e1b-bd12-4be6-8067-1eccffd37c14_buggy.java b/tmp/af78bff0-20df-41d1-b8e2-567960dcc663_fixed.java
index 3cb9232..86a5cb7 100644
--- a/tmp/e0b67e1b-bd12-4be6-8067-1eccffd37c14_buggy.java
+++ b/tmp/af78bff0-20df-41d1-b8e2-567960dcc663_fixed.java
@@ -1,26 +1,29 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
         String name = null;
 
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
             name = jg.value();
         } else {
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
-                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
-                 *   it's actually bit tricky to do it more efficiently (meta-annotations
-                 *   add more lookups; AnnotationMap costs etc)
-                 */
             } else if (_hasAnnotation(a, JsonSerialize.class)
                     || _hasAnnotation(a, JsonView.class)
-                    || _hasAnnotation(a, JsonRawValue.class)) {
+                    || _hasAnnotation(a, JsonRawValue.class)
+                    // [databind#451]: Also recognize @JsonUnwrapped
+                    || _hasAnnotation(a, JsonUnwrapped.class)
+                    ) {
                 name = "";
             } else {
                 return null;
             }
         }
+        // As per [databind#44] need to consider empty String as marker
+        // for "just indicate it's a property, possibly unnamed"
+        // 22-Oct-2015, tatu: And for [databind#1019], even null
+        //   may need to be returned as-is.
         return PropertyName.construct(name);
     }
\ No newline at end of file
