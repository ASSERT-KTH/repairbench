diff --git a/tmp/016ff8ec-5f36-4a91-9b72-025cf4759122_buggy.java b/tmp/f27b5e32-38bc-43bb-8fa5-e1e0b53ddadf_fixed.java
index 2ce28b5..4b3409c 100644
--- a/tmp/016ff8ec-5f36-4a91-9b72-025cf4759122_buggy.java
+++ b/tmp/f27b5e32-38bc-43bb-8fa5-e1e0b53ddadf_fixed.java
@@ -1,72 +1,84 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
+     * @throws ArchiveException if the archiver name is not known or the stream could not be reset or read
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
+        int signatureLength = -1; // Initialize
         try {
-            int signatureLength = in.read(signature);
+            signatureLength = in.read(signature, 0, signature.length); // Read the first bytes
             in.reset();
+
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
+            // Read again, signatureLength will be updated
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
+            // Read again, signatureLength will be updated
             signatureLength = in.read(tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
-            // COMPRESS-117 - improve auto-recognition
+
+            // COMPRESS-117/-191 introduced a secondary check for TAR archives
+            // based on getNextEntry(). This check is removed as it caused
+            // false positives, like identifying AIFF files as TAR (COMPRESS-191).
+            // Relying solely on TarArchiveInputStream.matches now.
+            /*
             if (signatureLength >= 512) {
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                     // COMPRESS-191 - verify the header checksum
                     tais.getNextEntry();
                     return new TarArchiveInputStream(in);
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
                     // autodetection, simply not a TAR
                     // ignored
                 }
             }
+            */
         } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
+            // Add more context to the exception message
+            throw new ArchiveException("Could not detect Archiver format due to IOException", e);
         }
 
+        // If no specific archiver format matched the signature
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
