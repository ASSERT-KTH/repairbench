diff --git a/tmp/7ee055b4-db6a-4943-a734-be1da91924b6_buggy.java b/tmp/8e8acfdf-1918-4ec8-ab0b-a865ed56a997_fixed.java
index 2ce28b5..9dd7c37 100644
--- a/tmp/7ee055b4-db6a-4943-a734-be1da91924b6_buggy.java
+++ b/tmp/8e8acfdf-1918-4ec8-ab0b-a865ed56a997_fixed.java
@@ -1,72 +1,84 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
+     * @throws ArchiveException if the archiver name is not known or the stream is invalid
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
             signatureLength = in.read(tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
-            // COMPRESS-117 - improve auto-recognition
+            // COMPRESS-117/-191 - improve auto-recognition, verify the header checksum
             if (signatureLength >= 512) {
+                TarArchiveInputStream tais = null;
                 try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                    // If getNextEntry succeeds and returns an entry, then it's a tar archive
+                    if (tais.getNextEntry() != null) {
                         return new TarArchiveInputStream(in);
+                    }
+                    // otherwise fall through and signal that it's not a tar archive
                 } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
+                    // can generate IllegalArgumentException as well as IOException
                     // autodetection, simply not a TAR
-                    // ignored
+                    // ignored - fall through
+                } finally {
+                    // Closing the TarArchiveInputStream is important, even if it's just a probe
+                    // Based on a ByteArrayInputStream, close() is a no-op, but good practice nonetheless
+                    if (tais != null) {
+                        try {
+                            tais.close();
+                        } catch (IOException ignored) { // NOPMD
+                            // Can't do anything
+                        }
+                    }
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
