diff --git a/tmp/129f00b2-1dc6-42b8-aab7-7ec248e3c36a_buggy.java b/tmp/02de33fa-b392-478c-8987-74265a292be3_fixed.java
index 2ce28b5..1fa799b 100644
--- a/tmp/129f00b2-1dc6-42b8-aab7-7ec248e3c36a_buggy.java
+++ b/tmp/02de33fa-b392-478c-8987-74265a292be3_fixed.java
@@ -1,72 +1,107 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
+     * @throws ArchiveException if the archiver name is not known or the stream could not be reset
      * @throws IllegalArgumentException if the stream is null or does not support mark
+     * @since 1.1
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
-            int signatureLength = in.read(signature);
+            int signatureLength = readFully(in, signature); // Use readFully to ensure buffer is filled if possible
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+            signatureLength = readFully(in, dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+            signatureLength = readFully(in, tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
             // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+            if (signatureLength >= 512) {
+                TarArchiveInputStream tais = null;
+                try {
+                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                    // A non-null ArchiveEntry indicates a valid TAR header
+                    if (tais.getNextEntry() != null) {
+                        // Resets already done
                         return new TarArchiveInputStream(in);
+                    }
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
                     // autodetection, simply not a TAR
                     // ignored
+                } finally {
+                    // Avoid resource leak if tais was instantiated
+                    if (tais != null) {
+                        try {
+                            tais.close();
+                        } catch (IOException e) { // NOPMD
+                            // Close errors on ByteArrayInputStream are highly unlikely
+                            // and irrelevant to autodetection logic
+                        }
+                    }
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
+
+    /**
+     * Reads the requested number of bytes from the stream or until
+     * end of stream.<br/>
+     * Note: this is simplified from IOUtils.readFully as we don't need EOF checks
+     *
+     * @param in The stream to read from
+     * @param b The buffer to store data in
+     * @return The number of bytes read
+     * @throws IOException If an I/O error occurs
+     */
+    private int readFully(InputStream in, byte[] b) throws IOException {
+        int len = b.length;
+        int off = 0;
+        int read;
+        while (off < len && (read = in.read(b, off, len - off)) != -1) {
+            off += read;
+        }
+        return off;
+    }
\ No newline at end of file
