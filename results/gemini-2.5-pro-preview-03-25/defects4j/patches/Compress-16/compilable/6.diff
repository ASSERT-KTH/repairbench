diff --git a/tmp/64c140c6-bd1c-43cf-b080-b793bdaf21ee_buggy.java b/tmp/11eef5af-9246-4b39-ba3d-c0ac55b372c2_fixed.java
index 2ce28b5..aa03c93 100644
--- a/tmp/64c140c6-bd1c-43cf-b080-b793bdaf21ee_buggy.java
+++ b/tmp/11eef5af-9246-4b39-ba3d-c0ac55b372c2_fixed.java
@@ -1,72 +1,84 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
+        // Buffer for the short signatures
         final byte[] signature = new byte[12];
-        in.mark(signature.length);
+        in.mark(signature.length); // Mark for the first 12 bytes
         try {
-            int signatureLength = in.read(signature);
-            in.reset();
+            int signatureLength = in.read(signature); // Attempt to read 12 bytes
+            in.reset(); // Reset back to the start
+
+            // Check formats using the first 12 bytes
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+                // Note: JAR detection might need more bytes/logic if ZipArchiveInputStream.matches is too general
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
-            // Dump needs a bigger buffer to check the signature;
+            // Dump needs a bigger buffer (32 bytes)
             final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
+            in.mark(dumpsig.length); // Mark for 32 bytes
             signatureLength = in.read(dumpsig);
-            in.reset();
+            in.reset(); // Reset back to the start
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
+            // Tar needs an even bigger buffer (512 bytes)
             final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
+            in.mark(tarheader.length); // Mark for 512 bytes
             signatureLength = in.read(tarheader);
-            in.reset();
+            in.reset(); // Reset back to the start
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
+
+            // The following code block caused COMPRESS-191 - identifying AIFF files as TAR archives
+            // It was attempting to validate the TAR header including checksum by reading the first entry
+            // However, this proved unreliable and led to false positives.
+            // It is removed in favour of relying solely on TarArchiveInputStream.matches().
+            /*
             // COMPRESS-117 - improve auto-recognition
             if (signatureLength >= 512) {
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                     // COMPRESS-191 - verify the header checksum
                     tais.getNextEntry();
                         return new TarArchiveInputStream(in);
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
                     // autodetection, simply not a TAR
                     // ignored
                 }
             }
+            */
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
+        // If no format matched
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
