diff --git a/tmp/bcb9b3c1-4adf-4439-a436-fd35f72f18cf_buggy.java b/tmp/facce675-40b2-4b6b-88dc-98d231f7f325_fixed.java
index 2ce28b5..65bc1a9 100644
--- a/tmp/bcb9b3c1-4adf-4439-a436-fd35f72f18cf_buggy.java
+++ b/tmp/facce675-40b2-4b6b-88dc-98d231f7f325_fixed.java
@@ -1,72 +1,85 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
+     * @throws ArchiveException if the archiver name is not known or the stream could not be reset
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
+        int signatureLength = -1;
         try {
-            int signatureLength = in.read(signature);
+            signatureLength = org.apache.commons.compress.utils.IOUtils.readFully(in, signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+            signatureLength = org.apache.commons.compress.utils.IOUtils.readFully(in, dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+            signatureLength = org.apache.commons.compress.utils.IOUtils.readFully(in, tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
             // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+            if (signatureLength >= 512) {
+                TarArchiveInputStream tais = null;
+                try {
+                    tais = new TarArchiveInputStream(new java.io.ByteArrayInputStream(tarheader));
+                    // If getNextEntry succeeds and returns a non-null entry, then it's probably TAR
+                    if (tais.getNextEntry() != null) {
                         return new TarArchiveInputStream(in);
+                    }
+                    // If getNextEntry() returned null or threw an exception, fall through
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
                     // autodetection, simply not a TAR
                     // ignored
+                } finally {
+                    if (tais != null) {
+                       try {
+                           tais.close(); // Close the temporary stream
+                       } catch (java.io.IOException ignored) {
+                           // NOPMD Do nothing
                        }
                     }
-        } catch (IOException e) {
+                }
+            }
+        } catch (java.io.IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
