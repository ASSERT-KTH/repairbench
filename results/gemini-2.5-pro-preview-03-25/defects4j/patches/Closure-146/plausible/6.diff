diff --git a/tmp/22f47c9b-4d71-447d-b623-588f4dcdc832_buggy.java b/tmp/af16deaf-8ae1-4b9d-aab6-ca2b5917f3e2_fixed.java
index 210695a..61f96d7 100644
--- a/tmp/22f47c9b-4d71-447d-b623-588f4dcdc832_buggy.java
+++ b/tmp/af16deaf-8ae1-4b9d-aab6-ca2b5917f3e2_fixed.java
@@ -1,32 +1,47 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
-        return new TypePair(null, null);
+        // If types are definitely equal, then inequality implies the branch
+        // is unreachable. Return the bottom type (NO_TYPE).
+        // This handles cases like (undefined != undefined) which is impossible.
+        JSType noType = registry.getNativeType(JSTypeNative.NO_TYPE);
+        return new TypePair(noType, noType);
 
       case FALSE:
+        // If types are definitely not equal, then inequality provides no
+        // new information. Return the original types.
+        return new TypePair(this, that);
+
       case UNKNOWN:
+        // If types might be equal or might not be equal, then inequality
+        // implies we are in the case where they are not equal.
+        // This *might* allow type restriction (e.g., see docstring example),
+        // but for now, we return the original types as a safe over-approximation.
+        // TODO(johnlenz): Implement stronger type inference here. For example,
+        // if number != (number|string), then the type should be restricted to
+        // number in the false branch.
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
