diff --git a/tmp/8331fcbf-9c0b-4ecf-9d96-d43853916d6f_buggy.java b/tmp/f19515a6-22c8-4f5b-907d-98b813d54a05_fixed.java
index 210695a..543d65e 100644
--- a/tmp/8331fcbf-9c0b-4ecf-9d96-d43853916d6f_buggy.java
+++ b/tmp/f19515a6-22c8-4f5b-907d-98b813d54a05_fixed.java
@@ -1,32 +1,47 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
+  @Override
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
-        return new TypePair(null, null);
+        // If types according to the type system must be equal,
+        // but the runtime inequality check tells us they are not,
+        // then this path is unreachable or the initial types were wrong.
+        // Return NO_TYPE to signal this contradiction.
+        JSType noType = registry.getNativeType(JSTypeNative.NO_TYPE);
+        return new TypePair(noType, noType);
 
       case FALSE:
+        // If types according to the type system must be unequal,
+        // and the runtime inequality check confirms this,
+        // then we gain no new information. The types remain as they were.
+        return new TypePair(this, that);
+
       case UNKNOWN:
+        // If types might be equal or unequal, and the runtime inequality
+        // check confirms inequality, we generally don't gain definite type
+        // restrictions in the base case. Specific subtypes (like UnionType
+        // or primitives handling null/undefined) might provide refinements.
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
