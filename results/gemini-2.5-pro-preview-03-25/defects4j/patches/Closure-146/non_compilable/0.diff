diff --git a/tmp/c13bcc3f-14b6-483e-ba22-f8fa654814dc_buggy.java b/tmp/e7abefa7-b0af-47be-96c5-6e2a681a6c0a_fixed.java
index 210695a..14cf91b 100644
--- a/tmp/c13bcc3f-14b6-483e-ba22-f8fa654814dc_buggy.java
+++ b/tmp/e7abefa7-b0af-47be-96c5-6e2a681a6c0a_fixed.java
@@ -1,32 +1,43 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
-        return new TypePair(null, null);
+        // If we know that this == that, then this != that is impossible.
+        // Filter out both types.
+        JSType noType = getRegistry().getNativeType(JSTypeNative.NO_TYPE);
+        return new TypePair(noType, noType);
 
       case FALSE:
       case UNKNOWN:
+        // If we know that this != that, or we don't know if this == that,
+        // then the != constraint doesn't give us any new information.
+        // For example, if this = number and that = string,
+        // then this != that. This implies this = number and that = string.
+        //
+        // If this = number|string and that = number|string,
+        // then we don't know if this == that. If this != that,
+        // then we don't know anything else.
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
