diff --git a/tmp/51845ae9-b3f3-4b45-b5e4-ce9e559f5311_buggy.java b/tmp/c4dc89d9-ad06-456c-9a78-14bb09ad5e37_fixed.java
index 210695a..0a3d234 100644
--- a/tmp/51845ae9-b3f3-4b45-b5e4-ce9e559f5311_buggy.java
+++ b/tmp/c4dc89d9-ad06-456c-9a78-14bb09ad5e37_fixed.java
@@ -1,32 +1,42 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
+  @Override
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
-        return new TypePair(null, null);
+        // If this and that are definitely equal, the condition 'this != that'
+        // is impossible. The types in this branch should be NO_TYPE.
+        JSType noType = getRegistry().getNativeType(JSTypeNative.NO_TYPE);
+        return new TypePair(noType, noType);
 
       case FALSE:
+        // If this and that are definitely not equal, then 'this != that' is
+        // always true. Knowing the condition is true does not restrict the types.
+        return new TypePair(this, that);
       case UNKNOWN:
+        // If equality is unknown, then 'this != that' may be true.
+        // No restriction possible based only on this information for the base case.
+        // Subclasses (like UnionType) may provide better results.
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
