diff --git a/tmp/b69807a2-0ac0-46b8-9058-896a3d71c7c7_buggy.java b/tmp/0728e808-aeef-482e-aa12-8a8b06df59e0_fixed.java
index d95d5a8..ff2075c 100644
--- a/tmp/b69807a2-0ac0-46b8-9058-896a3d71c7c7_buggy.java
+++ b/tmp/0728e808-aeef-482e-aa12-8a8b06df59e0_fixed.java
@@ -1,177 +1,227 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
+            // behaviour changed across JDK versions, see LANG-1006
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Fixed: Handle 0X/-0X case-insensitively for hex detection
+        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
+            // Note: NFE checking is done by createInteger (which calls Integer.decode)
+            // Note: Should handle L suffix? Decided against for now (see LANG-847)
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
+        // Fixed: Use Math.max for cleaner exponent position finding
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));
+
 
         if (decPos > -1) {
 
             if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+                // Fixed: Removed redundant 'expPos > str.length()' check & simplified condition
+                if (expPos < decPos) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
-                if (expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
+                // Fixed: Removed redundant 'expPos > str.length()' check
+                // if (expPos > str.length()) { // Always false from indexOf
+                //    throw new NumberFormatException(str + " is not a valid number.");
+                // }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             String numeric = str.substring(0, str.length() - 1);
+            // isAllZeros check depends on mant & exp matching the numeric string accurately
+            // Re-calculate mant and possibly exp based on 'numeric' if safer? For now, trust original logic.
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Note: Potential issue if dec/expPos refers to the 'L' itself?
+                    // 'L' is handled by the !isDigit check, so dec/exp calculations should be fine.
+                    // Need to ensure "1.2L" or "1e2L" throw correctly.
+                    if (dec == null && expPos == -1 && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
+                            // NFE already handled by createLong
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
+                        // NFE already handled by createBigInteger
                         return createBigInteger(numeric);
 
                     }
+                    // Throws NFE if not a valid long format (e.g., has '.', 'e', 'E')
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
+                        // Use NumberUtils helper to abstract Float.valueOf ?
+                        // Assuming NumberUtils.createFloat calls Float.valueOf
                         Float f = NumberUtils.createFloat(numeric);
+                        // Prevent Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NaN return
+                        // Prevent 0.0f return unless the string is actually all zeros
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
-                    //$FALL-THROUGH$
+                    //$FALL-THROUGH$ intended in original code
                 case 'd' :
                 case 'D' :
                     try {
+                        // Use NumberUtils helper to abstract Double.valueOf ?
+                        // Assuming NumberUtils.createDouble calls Double.valueOf
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Prevent Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN return
+                        // Prevent 0.0d return unless the string is actually all zeros
+                        // Original code used d.floatValue() - corrected to d.doubleValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
+                        // Fall back to BigDecimal if Double is infinite or zero inappropriately
+                        // NFE already handled by createBigDecimal
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 default :
+                    // Last char is not digit, not '.', not L,F,D - invalid.
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+            // Last character is digit or '.'
+
+            // Extract exponent value if present (goes to end of string)
+            if (expPos > -1 && expPos < str.length()) { // Check expPos is valid index first
+                 // Check if char after exp is valid (+,-,digit) and if there are digits after sign
+                 if (expPos + 1 < str.length()) {
+                     char expStartChar = str.charAt(expPos + 1);
+                     boolean expSignOk = (expStartChar == '+' || expStartChar == '-');
+                     if (!expSignOk && !Character.isDigit(expStartChar)) {
+                         throw new NumberFormatException(str + " is not a valid number."); // e.g. "1e$"
+                     }
+                     // Check for "1e+" or "1e-" without digits
+                     if (expSignOk && expPos + 2 >= str.length()) {
+                         throw new NumberFormatException(str + " is not a valid number.");
+                     }
+                     exp = str.substring(expPos + 1);
+                 } else {
+                      throw new NumberFormatException(str + " is not a valid number."); // e.g. "1e"
+                 }
             } else {
                 exp = null;
             }
-            if (dec == null && exp == null) {
+
+            if (dec == null && expPos == -1) { // Use expPos check based on original string
                 //Must be an int,long,bigint
                 try {
+                    // NFE handled by createInteger
                     return createInteger(str);
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
+                     // NFE handled by createLong
                     return createLong(str);
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
+                 // NFE handled by createBigInteger
                 return createBigInteger(str);
 
             } else {
                 //Must be a float,double,BigDec
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
+                    // Use helper assuming it calls Float.valueOf(str)
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
+                    // Use helper assuming it calls Double.valueOf(str)
                     Double d = createDouble(str);
+                    // Original code used d.doubleValue() here, which is correct
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
-
+                // NFE handled by createBigDecimal
                 return createBigDecimal(str);
 
             }
         }
     }
\ No newline at end of file
