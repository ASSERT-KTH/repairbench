diff --git a/tmp/211f2dc1-e565-4e11-8ba8-ab61e80decc2_buggy.java b/tmp/0eee31b7-efc3-424f-b635-1ecdf2c5ee10_fixed.java
index d95d5a8..98a67f4 100644
--- a/tmp/211f2dc1-e565-4e11-8ba8-ab61e80decc2_buggy.java
+++ b/tmp/0eee31b7-efc3-424f-b635-1ecdf2c5ee10_fixed.java
@@ -1,177 +1,205 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
-            return null;
-        }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Need to deal with all possible hex prefixes here
+        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X"};
+        int pfxLen = 0;
+        for(final String pfx : hex_prefixes) {
+            if (str.startsWith(pfx)) {
+                pfxLen += pfx.length();
+                break;
+            }
+        }
+        if (pfxLen > 0) {
+            // we have a hex number
+            char firstSigDigit = 0; // strip leading zeroes
+            for(int i = pfxLen; i < str.length(); i++) {
+                firstSigDigit = str.charAt(i);
+                if (firstSigDigit == '0') {
+                    pfxLen++;
+                } else {
+                    break;
+                }
+            }
+            final int hexDigits = str.length() - pfxLen;
+            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many digits for a long
+                return createBigInteger(str);
+            }
+            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many digits for an int
+                return createLong(str);
+            }
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // slightly unorthodox, but works functionally
 
-        if (decPos > -1) {
+        // Detect if the return type is requested by the caller
+        boolean requestType = !Character.isDigit(lastChar) && lastChar != '.';
 
-            if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+        if (decPos > -1) { // there is a decimal point
+            if (expPos > -1) { // there is an exponent
+                if (expPos < decPos || expPos > str.length()) { // exponent appears before decimal point or is empty
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
+            } else { // no exponent
+                // last character is the trailing digit if not requesting type
+                dec = str.substring(decPos + 1, requestType ? str.length() -1 : str.length());
             }
             mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
+        } else { // no decimal point
+            if (expPos > -1) { // there is an exponent
+                if (expPos > str.length()) { // exponent is empty
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+            } else { // no exponent
+                // last character is the trailing digit if not requesting type
+                mant = requestType ? str.substring(0, str.length() -1) : str;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
+        if (requestType) {
+            //User specified a type suffix
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            String numeric = str.substring(0, str.length() - 1); // String representing the number without the suffix
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // mantissa and exponent are all zeros
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                        && exp == null // no decimal point or exponent
+                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { //requesting Long
                             try {
                                 return createLong(numeric);
                             } catch (NumberFormatException nfe) { // NOPMD
                                 // Too big for a long
                             }
-                        return createBigInteger(numeric);
-
+                            return createBigInteger(numeric); // If Long failed, try BigInteger
                     }
+                    // Had a decimal point or exponent, or not digits, invalid format for Long type
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
-                case 'F' :
+                case 'F' : //requesting Float
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        //Must be a valid float number, and not infinite, and not zero when it shouldn't be
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
-                    //$FALL-THROUGH$
+                    //$FALL-THROUGH$ - Fall through to Double if Float fails
                 case 'd' :
-                case 'D' :
+                case 'D' : //requesting Double
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Must be a valid double number, and not infinite, and not zero when it shouldn't be
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (NumberFormatException nfe) { // NOPMD
                          // ignore the bad number
                     }
                     try {
+                         // If Double failed, try BigDecimal
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
-                    //$FALL-THROUGH$
-                default :
+                    //$FALL-THROUGH$ - Fall through to invalid format if BigInteger fails
+                default : // unknown type suffix
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+             // No type suffix, let's try determining the type best fit
             if (expPos > -1 && expPos < str.length() - 1) {
+                // There is an exponent && it is not the last character
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
-            if (dec == null && exp == null) {
+            if (dec == null && exp == null) { // No decimal point or exponent - call is Integer / Long / BigInteger
                 //Must be an int,long,bigint
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
-                return createBigInteger(str);
-
-            } else {
-                //Must be a float,double,BigDec
+                return createBigInteger(str); // Should always work
+            } else { // Has a decimal point or exponent - call is Float / Double / BigDecimal
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);
+                    // Check if it's finite and if the value is zero, ensure the mantissa/exponent were also zero
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
+                     // Check if it's finite and if the value is zero, ensure the mantissa/exponent were also zero
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                        //Ensure that the requested precision is satisfied
+                        //There are some cases where ضloat might have been created indicating that the number was 0.0
+                        //but the string was something like 1e-320 - double can handle this but float can't
+                        //So if the string number is != 0 but the value obtained is 0.0, then this is not a valid double representation
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
 
-                return createBigDecimal(str);
+                return createBigDecimal(str); // Should always work
 
             }
         }
     }
\ No newline at end of file
