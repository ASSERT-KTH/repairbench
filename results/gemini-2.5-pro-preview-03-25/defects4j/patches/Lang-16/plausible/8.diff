diff --git a/tmp/ede452c2-c7b6-421c-aead-87fc81208559_buggy.java b/tmp/0f355f0f-5ca5-45b0-873b-f3b796ec4460_fixed.java
index d95d5a8..42351ba 100644
--- a/tmp/ede452c2-c7b6-421c-aead-87fc81208559_buggy.java
+++ b/tmp/0f355f0f-5ca5-45b0-873b-f3b796ec4460_fixed.java
@@ -1,177 +1,232 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
-            return null;
+            return null; // Should this be an error?
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Fix: Handle both lower and upper case hexadecimal prefixes.
+        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // Correct calculation for expPos
+        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Handles both 'e' and 'E'
+        // If both 'e' and 'E' are not found, expPos will be -1 + -1 + 1 = -1
+        // If 'e' is found at index i, expPos will be i + (-1) + 1 = i
+        // If 'E' is found at index j, expPos will be (-1) + j + 1 = j
 
         if (decPos > -1) {
 
             if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+                // Check exponent position relative to decimal and string length
+                if (expPos < decPos || expPos >= str.length()) { // Use >= to prevent index out of bounds
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
-                if (expPos > str.length()) {
+                // Check exponent position relative to string length
+                if (expPos >= str.length()) { // Use >= to prevent index out of bounds
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // Check for exponent part correctly
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Include dec in allZeros check
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
+                    // Check if the numeric part is a valid integer representation
                     if (dec == null
                         && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                        && (numeric.length() > 0 && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))) { // Check length > 0
                         try {
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                            // Fallthrough intended for BigInteger
                         }
+                        // Ensure createBigInteger is called with the correct string
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check for underflow/overflow issues precisely
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             // If it's too big for a float or the float value = 0 and the string
                             // has non-zeros in it, then float does not have the precision we want
+                            // Special case: "0.0f" should be Float 0.0f
+                             if (f.floatValue() != 0.0f || allZeros) {
                                 return f;
                              }
+                        }
 
                     } catch (NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
+                    // Fallthrough intended for d/D and BigDecimal
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                         // Check for underflow/overflow issues precisely
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                             // Special case: "0.0d" should be Double 0.0d
+                             if (d.doubleValue() != 0.0d || allZeros) {
                                 return d;
                              }
+                        }
                     } catch (NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
+                        // Use the numeric part for BigDecimal as well
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
+                    // Fallthrough intended - throw exception if no suitable type found
                     //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+            // Extract exponent correctly when no type qualifier is present
+            if (expPos > -1 && expPos < str.length()) { // Check expPos < length
+                 exp = str.substring(expPos + 1); // No need to exclude last char
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
                 //Must be an int,long,bigint
+                // Check for valid integer digits first
+                 if (str.length() > 0 && (str.charAt(0) == '-' && isDigits(str.substring(1)) || isDigits(str))) {
                     try {
                         return createInteger(str);
                     } catch (NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
                         return createLong(str);
                     } catch (NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     return createBigInteger(str);
+                 }
+                 // If not pure digits (e.g., "+123"), throw exception
+                 throw new NumberFormatException(str + " is not a valid number.");
 
             } else {
                 //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Include dec in allZeros check
                 try {
                     Float f = createFloat(str);
+                    // Check for underflow/overflow issues precisely
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                        // Special case: "0.0" should be Float 0.0f
+                         if (f.floatValue() != 0.0f || allZeros) {
+                            // Ensure we return Float for values like "1.0" etc.
+                            // that fit in float accurately
+                            if (f.toString().equals(str)) {
                                 return f;
                             }
+                            // Check if Double offers better precision or range
+                             try {
+                                if (Double.parseDouble(str) <= Float.MAX_VALUE) {
+                                    return f;
+                                }
+                             } catch (NumberFormatException nfe) {} // Ignore, try Double next
+                        }
+                    }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
+                    // Check for underflow/overflow issues precisely
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                        // Special case: "0.0" should be Double 0.0d
+                         if (d.doubleValue() != 0.0d || allZeros) {
+                            // Return Double if it fits and isn't zero unless specified as zero
+                             // Use BigDecimal to check if Double representation is exact for the input string
+                             try {
+                                if (!new java.math.BigDecimal(str).equals(new java.math.BigDecimal(d))) {
+                                    // If Double isn't exact, prefer BigDecimal later
+                                } else {
+                                    return d; // Return Double if exact
+                                }
+                             } catch (NumberFormatException nfe) {} // Ignore, proceed to BigDecimal
+                             // If not exact or exception, but still valid double range
                              return d;
                          }
+                    }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
 
                 return createBigDecimal(str);
 
             }
         }
     }
\ No newline at end of file
