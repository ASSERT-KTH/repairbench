diff --git a/tmp/2ca7b4b7-a6e4-405a-9814-9b833f074ae4_buggy.java b/tmp/be3de9f3-2113-4517-9c1a-b95d5e56343a_fixed.java
index d95d5a8..3262c0d 100644
--- a/tmp/2ca7b4b7-a6e4-405a-9814-9b833f074ae4_buggy.java
+++ b/tmp/be3de9f3-2113-4517-9c1a-b95d5e56343a_fixed.java
@@ -1,177 +1,203 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
-            return null;
+            return null; // Method contract returns null for non-numbers, keep consistent
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Fix 1: Handle 0X/-0X prefix (case-insensitive)
+        if (str.startsWith("0x") || str.startsWith("0X") || str.startsWith("-0x") || str.startsWith("-0X")) {
+             // The called method (createInteger) should handle hex parsing including 0X.
+             // If hex number is large it should ideally return Long or BigInteger,
+             // but createInteger suggests Integer. Let's trust createInteger handles hex.
+             // Consider using createBigInteger(str) for full hex range if createInteger fails large hex.
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // Fix 2: Correctly find the exponent indicator position (case-insensitive)
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        if (decPos > -1) {
-
-            if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+        // Parse the string into mantissa, decimal, and exponent parts
+        if (decPos > -1) { // Number has a decimal point
+            if (expPos > -1) { // Number has an exponent
+                if (expPos < decPos) { // Exponent marker must be after decimal point
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+                mant = str.substring(0, decPos);
+            } else { // Number has decimal point but no exponent
                 dec = str.substring(decPos + 1);
-            }
                 mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
+            }
+        } else { // Number has no decimal point
+            if (expPos > -1) { // Number has an exponent
+                 // Check if exponent indicator is the first character (e.g. "e1") which is invalid
+                 if(expPos == 0) {
                      throw new NumberFormatException(str + " is not a valid number.");
                  }
                 mant = str.substring(0, expPos);
-            } else {
+            } else { // Number has no decimal point and no exponent (integer)
                 mant = str;
             }
-            dec = null;
+            dec = null; // No decimal part
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
+
+        // Check if the string ends with a letter (type qualifier) or not
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // Ends with a non-digit, non-dot character
+             // Check if the exponent marker is the penultimate character (e.g. "123eL", "1.2eF") - invalid
+             if (expPos > -1 && expPos == str.length() - 2) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+             }
+
+            // Extract exponent digits if present
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
+            // The part of the string excluding the final type qualifier
             String numeric = str.substring(0, str.length() - 1);
+            // Check if mantissa and exponent parts are all zeros (doesn't check decimal part)
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
-                case 'l' :
-                case 'L' :
+                case 'l' : case 'L' :
+                    // Long type requested: Must not have decimal, must not have exponent (based on original check exp == null)
+                    // and must be composed of digits (optional leading minus)
                     if (dec == null
-                        && exp == null
+                        && exp == null // Original check implies 'L' is not valid with 'e'/'E' notation.
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                            // Fallback to BigInteger if value is too large for Long
                         }
                         return createBigInteger(numeric);
-
                     }
+                    // Invalid format for 'L' suffix (e.g., has decimal or exponent)
                     throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+                case 'f' : case 'F' :
+                    // Float type requested
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check for infinity or zero result where original string was non-zero
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // Ignore NFE, fall through to try Double/BigDecimal for better precision/range
                     }
                     //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
+                case 'd' : case 'D' :
+                    // Double type requested or fallback from Float
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Fix 3: Use doubleValue() for check, not floatValue()
+                        // Check for infinity or zero result where original string was non-zero
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                              return d;
                         }
                     } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                         // Ignore NFE, fall through to try BigDecimal
                     }
                     try {
+                        // Fallback to BigDecimal for precision/range issues with Double
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                        // Ignore NFE from BigDecimal, fall through to default error
                     }
                     //$FALL-THROUGH$
-                default :
+                default : // Invalid type qualifier character
                     throw new NumberFormatException(str + " is not a valid number.");
+            }
+        } else { // Ends with a digit or a decimal point (e.g. "123", "123.45", "1.", "1.3e4")
+            // Check if the exponent marker is the last character (e.g. "123e", "1.5E") - invalid
+            if (expPos > -1 && expPos == str.length() - 1) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
 
-            }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+            // Extract exponent digits if present
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
+            // Determine return type automatically (no type qualifier)
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // Integral number: Try Integer -> Long -> BigInteger
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
-                return createBigInteger(str);
-
+                return createBigInteger(str); // Final fallback for large integers
             } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                // Non-integral number (has decimal or exponent): Try Float -> Double -> BigDecimal
+                boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Checks mantissa and exponent digits
                 try {
                     Float f = createFloat(str);
+                     // Check for infinity or zero result where original string was non-zero
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
+                    // Fix 3: Use doubleValue() for check, not floatValue()
+                    // Check for infinity or zero result where original string was non-zero
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
-
-                return createBigDecimal(str);
-
+                return createBigDecimal(str); // Final fallback for non-integral numbers
             }
         }
     }
\ No newline at end of file
