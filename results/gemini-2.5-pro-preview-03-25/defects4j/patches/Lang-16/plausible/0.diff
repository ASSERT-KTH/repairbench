diff --git a/tmp/b5035293-b418-45c1-a47f-d7a12b378fb8_buggy.java b/tmp/e26736d7-dff5-4c39-86ce-8a78f67b9847_fixed.java
index d95d5a8..e56aebe 100644
--- a/tmp/b5035293-b418-45c1-a47f-d7a12b378fb8_buggy.java
+++ b/tmp/e26736d7-dff5-4c39-86ce-8a78f67b9847_fixed.java
@@ -1,177 +1,212 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
+        // Need to handle Long.MIN_VALUE explicitly as it lies outside the range of BigInteger.valueOf
+        // See LANG-1518 / LANG-1543
+        if ("-9223372036854775808L".equals(str)) {
+            return Long.valueOf(-9223372036854775808L);
+        }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
-            return null;
+            throw new NumberFormatException(str + " is not a valid number."); // Changed to throw exception as "--" is not valid
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Fix: Handle uppercase "X" for hexadecimal numbers
+        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
+            int hexDigits = str.length() - (str.startsWith("-") ? 3: 2);
+            if (hexDigits > 16 || (hexDigits == 16 && str.charAt(str.startsWith("-") ? 3 : 2) > '7')) {
+                 // Potentially beyond Long range, use BigInteger
+                 return createBigInteger(str);
+            }
+             if (hexDigits > 8 || (hexDigits == 8 && str.charAt(str.startsWith("-") ? 3 : 2) > '7')) {
+                 // Potentially beyond Integer range, use Long
+                 return createLong(str);
+             }
+            // Fits within Integer range
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // Fix: Correctly find the first exponent character 'e' or 'E'
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        if (decPos > -1) {
+        if (decPos > -1) { // Found decimal point
 
-            if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+            if (expPos > -1) { // Found exponent
+                // Fix: Remove impossible check `expPos > str.length()`
+                if (expPos < decPos) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+                mant = str.substring(0, decPos);
+            } else { // No exponent
                 dec = str.substring(decPos + 1);
-            }
                 mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
             }
+
+        } else { // No decimal point
+            if (expPos > -1) { // Found exponent
+                // Fix: Remove impossible check `expPos > str.length()`
                 mant = str.substring(0, expPos);
-            } else {
+            } else { // No decimal point, no exponent
                 mant = str;
             }
-            dec = null;
+            dec = null; // No decimal part
         }
+
+        // Handle type qualifiers or invalid trailing characters
         if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
+            if (expPos > -1 && expPos < str.length() - 1) { // Exponent exists and has digits after it
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
-                exp = null;
+                exp = null; // No exponent digits part
             }
             //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            String numeric = str.substring(0, str.length() - 1); // String without the type qualifier
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Check mantissa and exponent parts for zeros
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
+                    // Check if the string represents a valid long integer (potentially starting with '-')
                     if (dec == null
                         && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                        && (numeric.isEmpty() ? false : (numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                         try {
+                            // Attempt to create a Long
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                            // If Long creation fails (likely too large), try BigInteger
                             return createBigInteger(numeric);
-
                         }
+                    }
+                    // If format is invalid for Long/BigInteger (e.g., contains '.', 'e', 'E'), throw exception
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check for infinity or precision loss (value becomes 0 when original string wasn't all zeros)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                            // Return Float if it's finite and didn't lose precision significantly
                             return f;
                         }
 
                     } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number; proceed to Double/BigDecimal
                     }
+                    // Fall رموز to Double/BigDecimal handling if Float creation failed or resulted in infinity/precision loss
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                         // Check for infinity or precision loss (value becomes 0 when original string wasn't all zeros)
+                       if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue() for comparison
+                           // Return Double if it's finite and didn't lose precision significantly
                             return d;
                         }
                     } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number; proceed to BigDecimal
                     }
+                    // Fall رموز to BigDecimal handling if Double creation failed or resulted in infinity/precision loss
+                    //$FALL-THROUGH$
                     try {
+                        // Final attempt with BigDecimal for maximum precision
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                        // If all attempts fail, the number format is invalid
+                        throw new NumberFormatException(str + " is not a valid number."); // Throw specific exception
                     }
-                    //$FALL-THROUGH$
                 default :
+                    // Invalid trailing character (not L, F, D, digit, or '.')
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+        } else { // Last character is a digit or '.' (no type qualifier)
+            // Determine exponent string if applicable
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
+
+            // Check if the number format suggests an integer type (no decimal, no exponent)
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                 // Must be an Integer, Long, or BigInteger
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    // ignore the bad number and try the next type
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    // ignore the bad number and try the next type
                 }
+                // Final attempt for integer types
                 return createBigInteger(str);
 
-            } else {
-                //Must be a float,double,BigDec
+            } else { // Number has a decimal point or exponent: Float, Double, or BigDecimal
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);
+                     // Check for infinity or precision loss
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    // ignore the bad number and try the next type
                 }
                 try {
                     Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                     // Check for infinity or precision loss
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue()
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                   // ignore the bad number and try the next type
                 }
-
+                // Final attempt with BigDecimal
                 return createBigDecimal(str);
-
             }
         }
     }
\ No newline at end of file
