diff --git a/tmp/413cf025-f3a0-4c93-b5ff-0e59c8fb2fc6_buggy.java b/tmp/df7e2799-88a1-4eea-a066-9ade0bbdc2a8_fixed.java
index d95d5a8..cf88cb2 100644
--- a/tmp/413cf025-f3a0-4c93-b5ff-0e59c8fb2fc6_buggy.java
+++ b/tmp/df7e2799-88a1-4eea-a066-9ade0bbdc2a8_fixed.java
@@ -1,177 +1,222 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
+        // LANG-1006 protect against poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear
         // to be in specification of class. OS X Java parses it to
-            // a wrong value.
+        // a wrong value. See LANG-1006.
+        if (str.startsWith("--")) {
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Handle hex numbers, including upper case 'X' for LANG-1139
+        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
+            // Check length to avoid NumberFormatException from Integer.decode("")
+            final int hexDigits = str.length() - (str.startsWith("-") ? 3 : 2); // 0x or -0x
+            if (hexDigits == 0) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+            // If the leading character is a minus sign, createInteger() handles it correctly
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // Correctly find the exponent character 'e' or 'E'
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
+        // Detect if the input is potentionaly valid floating point number:
+        // - Number must contain either a decimal point or an exponent
+        //   character, or be suffixed with 'f', 'F', 'd', or 'D'.
+        // - Only numbers containing 'e' or 'E' may have an exponent part.
+        // - A number may not have exponent part without a preceding mantissa.
+        // - Exponent part may be empty, have a sign ('+' or '-'), and digits.
+
+        // Scientific notation specific validation:
+        if (expPos > -1) {
+            // Must not be the first character:
+            if (expPos == 0) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+            // Must be preceded by digits:
+            if (!Character.isDigit(str.charAt(expPos - 1)) && str.charAt(expPos -1) != '.') {
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+            // Check exponent sign:
+            if (expPos < str.length() - 1 && (str.charAt(expPos + 1) == '+' || str.charAt(expPos + 1) == '-')) {
+                // Check digit follows sign:
+                if (expPos + 2 == str.length()) { // No digits after sign
+                    throw new NumberFormatException(str + " is not a valid number.");
+                }
+            }
+            // Check exponent position relative to decimal:
+            if (decPos != -1 && expPos < decPos) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+
+        // Split the string into parts based on decimal and exponent positions
         if (decPos > -1) {
-
             if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
-                if (expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
+
+        // Check for type suffixes (L, F, D)
         if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // Extract exponent part if present, excluding the suffix
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
-                exp = null;
+                exp = null; // No exponent part or format issue handled later
             }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
+            String numeric = str.substring(0, str.length() - 1); // Number part without suffix
+            // Note: allZeros check uses mantissa from original string and potentially null exp here
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Check if the format is valid for Long/BigInteger (no decimal, no exponent)
+                    if (dec == null && exp == null) {
+                         // Check if the numeric part (without L) consists of digits (optional sign)
+                         boolean isNeg = numeric.charAt(0) == '-';
+                         boolean isDigitString = isDigits(isNeg ? numeric.substring(1) : numeric);
+                         if (isDigitString && (!isNeg || numeric.length() > 1)) { // Ensure '-' is not the only char
                              try {
                                  return createLong(numeric);
                              } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                                 // Fall through to BigInteger below
                              }
                              return createBigInteger(numeric);
-
                          }
+                    }
+                    // If format is invalid for L/l suffix
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check for loss of precision (infinite or zero for non-zero input)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number and fall through to Double/BigDecimal
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Check for loss of precision (infinite or zero for non-zero input)
+                        // Use doubleValue() for comparison
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number and fall through to BigDecimal
                     }
                     try {
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number, fall through to default error
                     }
                     //$FALL-THROUGH$
-                default :
+                default : // Handles invalid suffix or previous fallthroughs
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+            // No type suffix, last char is digit or '.'
+            // Extract exponent part if present
+            if (expPos > -1 && expPos < str.length()) {
+                 // Handle case like "1e", "1.2e" which are invalid because exponent is empty
+                 if (expPos == str.length() - 1) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
+                exp = str.substring(expPos + 1);
             } else {
                 exp = null;
             }
+
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // Must be Integer, Long, or BigInteger
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 return createBigInteger(str);
-
             } else {
-                //Must be a float,double,BigDec
+                // Must be Float, Double, or BigDecimal
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
+                    // Use doubleValue() for comparison
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
-
                 return createBigDecimal(str);
-
             }
         }
     }
\ No newline at end of file
