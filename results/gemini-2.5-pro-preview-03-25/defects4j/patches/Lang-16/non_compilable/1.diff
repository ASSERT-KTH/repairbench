diff --git a/tmp/7cc20f49-e50b-4d74-b8dc-17a6b63c9c68_buggy.java b/tmp/e9ca0491-26d2-4f55-ae31-3f48b6310c84_fixed.java
index d95d5a8..ba989fd 100644
--- a/tmp/7cc20f49-e50b-4d74-b8dc-17a6b63c9c68_buggy.java
+++ b/tmp/e9ca0491-26d2-4f55-ae31-3f48b6310c84_fixed.java
@@ -1,177 +1,354 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils;
+
+// Assume helper methods like isDigits, isAllZeros, createInteger, createLong, etc., exist and work correctly.
+// These might be static methods within the same NumberUtils class or imported.
+// For the fix, we assume their existence and correct behavior based on typical implementations.
+
+public static class NumberUtils { // Added class wrapper for context, assume helpers are within this class or accessible
+
+    // Assume necessary helper methods like isDigits, isAllZeros are available:
+    private static boolean isDigits(String str) {
+        if (StringUtils.isEmpty(str)) {
+            return false;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (!Character.isDigit(str.charAt(i))) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private static boolean isAllZeros(String str) {
+        if (StringUtils.isEmpty(str)) {
+            return true; // Treat empty as zeros for this check's purpose
+        }
+        for (int i = str.length() - 1; i >= 0; i--) {
+            char c = str.charAt(i);
+            // Allow sign at the start
+            if (i == 0 && (c == '+' || c == '-')) {
+                continue;
+            }
+            if (c != '0') {
+                return false; // Found non-zero digit
+            }
+        }
+        return true; // All digits were zero
+    }
+
+    // Assume createX methods wrapping standard parsing logic
+    public static Integer createInteger(String str) { return Integer.decode(str); }
+    public static Long createLong(String str) { return Long.decode(str); }
+    public static BigInteger createBigInteger(String str) {
+        int radix = 10;
+        int index = 0;
+        boolean negative = false;
+        if (str.startsWith("-")) {
+            negative = true;
+            index++;
+        }
+        if (str.startsWith("0x", index) || str.startsWith("0X", index)) {
+            index += 2;
+            radix = 16;
+        } else if (str.startsWith("#", index)) {
+            index++;
+            radix = 16;
+        } else if (str.startsWith("0", index) && str.length() > index + 1) {
+            // Octal? Javadoc says no octal. But BigInteger constructor handles it.
+            // For consistency with javadoc, treat leading 0 as decimal unless hex prefix.
+            // Let's stick to BigInteger(String) which handles decimal primarily.
+            // If strict no-octal needed, add validation here.
+        }
+         // Check for empty string after prefix/sign removal
+         if (index >= str.length()){
+              throw new NumberFormatException("Cannot parse empty number");
+         }
+
+        BigInteger val = new BigInteger(str.substring(index), radix);
+        return negative ? val.negate() : val;
+    }
+    public static Float createFloat(String str) { return Float.valueOf(str); }
+    public static Double createDouble(String str) { return Double.valueOf(str); }
+    public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
-    public static Number createNumber(String str) throws NumberFormatException {
+    public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
+            // protection for poorness in java.lang.BigDecimal
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
+
+        // Hexadecimal check (case-insensitive) - FIXED
+        if (str.startsWith("0x") || str.startsWith("0X") || str.startsWith("-0x") || str.startsWith("-0X")) {
+            int hexDigitsPos = (str.charAt(0) == '-') ? 3 : 2;
+            if (hexDigitsPos >= str.length()) { // e.g., "0x" is invalid
+                throw new NumberFormatException(str + " is not a valid number.");
             }
+            // Handle optional 'L' suffix for hex numbers
             char lastChar = str.charAt(str.length() - 1);
+            String hexNumeric;
+            boolean hasHexLQualifier = false;
+
+            if (lastChar == 'L' || lastChar == 'l') {
+                hexNumeric = str.substring(0, str.length() - 1);
+                hasHexLQualifier = true;
+                // Re-check prefix length against potentially shorter hexNumeric
+                if (hexDigitsPos >= hexNumeric.length()) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                }
+            } else {
+                hexNumeric = str;
+                hasHexLQualifier = false;
+            }
+
+            // Use BigInteger to parse hex, then check if it fits smaller types if no L qualifier
+            BigInteger val;
+            try {
+                val = createBigInteger(hexNumeric); // Assumes createBigInteger handles hex prefix
+            } catch (NumberFormatException nfe) {
+                 // Improve error message potentially
+                 throw new NumberFormatException("'" + str + "' is not a valid number. " + nfe.getMessage());
+            }
+
+            if (!hasHexLQualifier) {
+                // Try to return smaller type if value fits
+                 if (val.bitLength() <= 31) { // Fits in Integer? (signed 32-bit)
+                     return Integer.valueOf(val.intValue());
+                 }
+                 if (val.bitLength() <= 63) { // Fits in Long? (signed 64-bit)
+                     return Long.valueOf(val.longValue());
+                 }
+            }
+            // Return BigInteger if 'L' suffix was present or value too large for Long
+            return val;
+        }
+
+
+        // --- Non-hexadecimal path ---
+
+        final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        String numeric; // String without qualifier
+        boolean hasQualifier = false;
 
+        // Check for qualifier and extract the numeric part
+        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {
+            if (lastChar == 'D' || lastChar == 'd' || lastChar == 'F' || lastChar == 'f' || lastChar == 'L' || lastChar == 'l') {
+                numeric = str.substring(0, str.length() - 1);
+                hasQualifier = true;
+                if (numeric.isEmpty()) { // e.g., "L", ".D"
+                     throw new NumberFormatException(str + " is not a valid number.");
+                }
+                 // Avoid scientific notation ending in qualifier, e.g. 1e1L (invalid Java syntax)
+                 // Let downstream parsing handle this, simplifies logic here.
+            } else {
+                // Ends with an invalid letter
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        } else {
+            // No letter qualifier at the end (could end with digit, '.', 'e', 'E')
+            numeric = str;
+            hasQualifier = false;
+        }
+
+        // Find decimal point and exponent marker ('e' or 'E') in the numeric part
+        final int decPos = numeric.indexOf('.');
+        int expPos = numeric.indexOf('e'); // Corrected calculation - FIXED
+        if (expPos == -1) {
+            expPos = numeric.indexOf('E');
+        }
+
+        // Split numeric into mantissa, decimal, exponent parts (mainly for allZeros check)
         if (decPos > -1) {
-
+            // Contains decimal point
             if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+                // Contains exponent too
+                if (expPos < decPos || expPos >= numeric.length()) { // Check bounds and order
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
+                mant = numeric.substring(0, decPos);
+                dec = numeric.substring(decPos + 1, expPos);
+                exp = numeric.substring(expPos + 1);
+            } else { // No exponent
+                mant = numeric.substring(0, decPos);
+                dec = numeric.substring(decPos + 1);
+                exp = null;
             }
-            mant = str.substring(0, decPos);
-        } else {
+        } else { // No decimal point
             if (expPos > -1) {
-                if (expPos > str.length()) {
+                // Contains exponent
+                 if (expPos >= numeric.length()) { // Check bounds
                      throw new NumberFormatException(str + " is not a valid number.");
                  }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
-            }
+                mant = numeric.substring(0, expPos);
+                dec = null;
+                exp = numeric.substring(expPos + 1);
+            } else { // No decimal, no exponent
+                mant = numeric;
                 dec = null;
-        }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
                 exp = null;
             }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        }
+
+        // Validate exponent part if present
+        if (exp != null) {
+            boolean expValid = false;
+            if (!exp.isEmpty()) {
+                char firstChar = exp.charAt(0);
+                String expDigits = (firstChar == '+' || firstChar == '-') ? exp.substring(1) : exp;
+                // Ensure exponent digits part is not empty and contains only digits
+                if (!expDigits.isEmpty() && isDigits(expDigits)) {
+                    expValid = true;
+                }
+            }
+            if (!expValid) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+
+        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // isAllZeros should handle null/empty/signs
+
+        if (hasQualifier) {
+            // Type specified by qualifier
             switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                case 'l' : case 'L' :
+                    // Check if format is suitable for Long/BigInt (no decimal, no exponent)
+                    if (dec == null && expPos == -1) {
+                         // Validate numeric part syntax (optional sign + digits)
+                         if (!numeric.isEmpty()) {
+                             char first = numeric.charAt(0);
+                             String digitsPart = (first == '+' || first == '-') ? numeric.substring(1) : numeric;
+                             // Ensure digits part is not empty and contains only digits
+                             if (!digitsPart.isEmpty() && isDigits(digitsPart)) {
                                  try {
+                                     // Use createLong first, fallback to BigInteger
                                      return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                                 } catch (final NumberFormatException nfe) {
                                      return createBigInteger(numeric);
-
                                  }
+                             }
+                         }
+                    }
+                    // If format has decimal/exponent, or syntax is wrong, it's invalid for L/l
                     throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+
+                case 'f' : case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                        final Float f = createFloat(numeric);
+                        // Check for infinity and for zero values derived from non-zero strings
+                        if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {
                             return f;
                         }
+                        // If infinite or zero for non-zero string, fall through
+                    } catch (final NumberFormatException nfe) { /* Fall through */ }
+                    // $FALL-THROUGH$ for 'f' -> 'd' -> BigDecimal
 
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
+                case 'd' : case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = createDouble(numeric);
+                        // Check for infinity and for zero values derived from non-zero strings
+                        if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {
                            return d;
                         }
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
+                         // If infinite or zero for non-zero string, fall through
+                    } catch (final NumberFormatException nfe) { /* Fall through */ }
+                     // $FALL-THROUGH$ for 'd' -> BigDecimal
+
+                    // Final attempt with BigDecimal for F/D qualifiers
                     try {
                         return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
+                    } catch (final NumberFormatException e) {
+                         // If Float/Double/BigDecimal all failed, throw
                          throw new NumberFormatException(str + " is not a valid number.");
+                    }
+                    // break; // Unreachable after throw
 
+                default : // Should be unreachable due to qualifier checks
+                    throw new NumberFormatException(str + " is not a valid number.");
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
-            }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+            // No qualifier - auto detect type
+            if (expPos > -1 || decPos > -1) {
+                // Float / Double / BigDecimal path
                 try {
-                    return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    final Float f = createFloat(numeric);
+                    if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {
+                        return f;
                     }
+                } catch (final NumberFormatException nfe) { /* Ignore */ }
                 try {
-                    return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                    final Double d = createDouble(numeric);
+                    if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {
+                        return d;
                     }
-                return createBigInteger(str);
-
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                } catch (final NumberFormatException nfe) { /* Ignore */ }
                 try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        return f;
+                    return createBigDecimal(numeric);
+                } catch (final NumberFormatException e) {
+                    // If all float types fail
+                    throw new NumberFormatException(str + " is not a valid number.");
                 }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+            } else {
+                // Integer / Long / BigInteger path
+                // Validate syntax (optional sign + digits) first
+                 boolean syntaxOk = false;
+                 if (!numeric.isEmpty()) {
+                     char first = numeric.charAt(0);
+                     String digitsPart = (first == '+' || first == '-') ? numeric.substring(1) : numeric;
+                     if (!digitsPart.isEmpty() && isDigits(digitsPart)) {
+                         syntaxOk = true;
                      }
-                try {
-                    Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                        return d;
                  }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                 if (!syntaxOk) {
+                      throw new NumberFormatException(str + " is not a valid number.");
                  }
 
-                return createBigDecimal(str);
-
+                // Try smaller types first, falling back to larger ones
+                try {
+                    return createInteger(numeric);
+                } catch (final NumberFormatException nfe) { /* Ignore */ }
+                try {
+                    return createLong(numeric);
+                } catch (final NumberFormatException nfe) { /* Ignore */ }
+                // Final fallback for integers
+                return createBigInteger(numeric);
+            }
         }
     }
 }
\ No newline at end of file
