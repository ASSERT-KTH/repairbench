diff --git a/tmp/3e56e613-3d3e-4f12-b583-c182f0a6c40d_buggy.java b/tmp/3ad841fa-4613-49bc-9274-dad09c717188_fixed.java
index d95d5a8..b8db88e 100644
--- a/tmp/3e56e613-3d3e-4f12-b583-c182f0a6c40d_buggy.java
+++ b/tmp/3ad841fa-4613-49bc-9274-dad09c717188_fixed.java
@@ -1,177 +1,229 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+// Assuming StringUtils, isDigits, isAllZeros, createInteger, createLong, createBigInteger,
+// createFloat, createDouble, createBigDecimal are defined elsewhere and function correctly.
+
 /**
  * <p>Turns a string value into a java.lang.Number.</p>
  *
  * <p>First, the value is examined for a type qualifier on the end
  * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
  * trying to create successively larger types from the type specified
  * until one is found that can represent the value.</p>
  *
  * <p>If a type specifier is not found, it will check for a decimal point
  * and then try successively larger types from <code>Integer</code> to
  * <code>BigInteger</code> and from <code>Float</code> to
  * <code>BigDecimal</code>.</p>
  *
  * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
  * will be interpreted as a hexadecimal integer.  Values with leading
  * <code>0</code>'s will not be interpreted as octal.</p>
  *
  * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
  *
  * <p>This method does not trim the input string, i.e., strings with leading
  * or trailing spaces will generate NumberFormatExceptions.</p>
  *
  * @param str  String containing a number, may be null
  * @return Number created from the string (or null if the input is null)
  * @throws NumberFormatException if the value cannot be converted
  */
 public static Number createNumber(String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
-        if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
-            return null;
-        }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+    // -- BEGIN HEX HANDLING --
+    // Check for hex prefixes explicitly, handling both cases.
+    if (str.startsWith("0x") || str.startsWith("0X") || str.startsWith("-0x") || str.startsWith("-0X")) {
+        char lastChar = str.charAt(str.length() - 1);
+        // Check for Long qualifier 'L' or 'l'
+        if ((lastChar == 'l' || lastChar == 'L') && str.length() > 1) {
+            // Hexadecimal Long or BigInteger
+            String numeric = str.substring(0, str.length() - 1); // String without L/l
+             // Determine sign and prefix length
+             boolean isNegative = numeric.startsWith("-");
+             int prefixLen = isNegative ? 3 : 2; // Length of "-0x" or "0x"
+             // Ensure there are digits after the prefix
+             if (numeric.length() <= prefixLen) {
+                  throw new NumberFormatException(str + " is not a valid number."); // Handles "0xL", "-0xL" etc.
+             }
+            try {
+                // Long.decode handles "[-]0x..." prefix and throws NFE if format is invalid or value is too large
+                return Long.decode(numeric);
+            } catch (NumberFormatException nfe) {
+                // If Long.decode fails (e.g., too large), try BigInteger
+                try {
+                    String numberPart = isNegative ? numeric.substring(prefixLen) : numeric.substring(prefixLen); // Strip sign and "0x" / "0X"
+                    BigInteger bigInt = new BigInteger(numberPart, 16);
+                    if (isNegative) {
+                        bigInt = bigInt.negate();
+                    }
+                    return bigInt;
+                } catch (NumberFormatException e) {
+                     // If BigInteger parsing also fails, the format is truly invalid
+                     throw new NumberFormatException(str + " is not a valid number.");
+                }
+            }
+        } else {
+            // Hexadecimal without L/l suffix - delegate to createInteger
+            // Assuming createInteger handles hex format and potential promotion to Long/BigInteger if needed.
+             try {
                 return createInteger(str);
+             } catch (NumberFormatException nfe) {
+                 // If createInteger throws for a valid hex number (e.g., too large),
+                 // it indicates a limitation or bug in createInteger itself.
+                 // The original code relied on createInteger here.
+                 // Rethrow the exception if createInteger fails.
+                 throw nfe;
              }
+        }
+    }
+    // -- END HEX HANDLING --
+
+    // Non-hexadecimal number processing starts here
     char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    // Correctly find the position of 'e' or 'E'
+    int expPos = str.indexOf('e');
+    if (expPos == -1) {
+        expPos = str.indexOf('E');
+    }
 
-        if (decPos > -1) {
-
-            if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+    // Parse mantissa, decimal, exponent parts & validate structure
+    if (decPos > -1) { // Contains decimal point '.'
+        if (expPos > -1) { // Contains exponent 'e' or 'E'
+            // Validate exponent position relative to decimal point and end of string
+            if (expPos < decPos || expPos == str.length() - 1) { // Invalid format like "1.e2", "1.2e"
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
-            } else {
+            mant = str.substring(0, decPos);
+        } else { // No exponent
             dec = str.substring(decPos + 1);
-            }
             mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
+        }
+    } else { // No decimal point '.'
+        if (expPos > -1) { // Contains exponent 'e' or 'E'
+             // Validate exponent position relative to end of string
+            if (expPos == str.length() - 1) { // Invalid format like "1e", "123e"
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             mant = str.substring(0, expPos);
-            } else {
+        } else { // No decimal, no exponent (potential integer)
             mant = str;
         }
-            dec = null;
+        dec = null; // No decimal part found
     }
+
+    // Check for type qualifiers (L, F, D) if last char is not a digit or '.'
     if (!Character.isDigit(lastChar) && lastChar != '.') {
+        // Extract exponent part if present, removing the qualifier
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length() - 1);
         } else {
             exp = null;
         }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
+        String numeric = str.substring(0, str.length() - 1); // String without qualifier
+        // Check if the significant parts (mantissa and exponent) are all zeros
+        // Assumes isAllZeros handles null input appropriately (e.g., returns true).
         boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
         switch (lastChar) {
             case 'l' :
             case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                // Hex specific 'L' is handled above. This is for decimal numbers ending in L.
+                // Ensure it's a valid integer format (no decimal/exponent) and contains digits.
+                if (dec == null && exp == null && !numeric.isEmpty() && (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) {
                     try {
+                        // Delegate to createLong, assuming it handles parsing.
                         return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                    } catch (NumberFormatException nfe) {
+                        // Fallback to BigInteger if createLong fails (e.g., too large)
                         return createBigInteger(numeric);
-
                     }
+                }
+                // Invalid format for L/l qualifier (e.g., "1.2L", "1e2L")
                 throw new NumberFormatException(str + " is not a valid number.");
             case 'f' :
             case 'F' :
                 try {
-                        Float f = NumberUtils.createFloat(numeric);
+                    Float f = createFloat(numeric);
+                    // Check if Float representation is suitable (not infinite, not zero for non-zero input)
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                } catch (NumberFormatException nfe) {
+                     // Ignore NFE from createFloat (e.g., "1eF"), fall through to try Double/BigDecimal
                 }
-                    //$FALL-THROUGH$
+                //$FALL-THROUGH$ // Fall through intended
             case 'd' :
             case 'D' :
                 try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    Double d = createDouble(numeric);
+                     // Check if Double representation is suitable (Corrected: use d.doubleValue())
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                } catch (NumberFormatException nfe) {
+                    // Ignore NFE from createDouble, fall through to try BigDecimal
                 }
+                //$FALL-THROUGH$ // Fall through intended
                 try {
+                    // Try BigDecimal as a final fallback for F/f/D/d qualifiers
                     return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                } catch (NumberFormatException e) {
+                     // If createBigDecimal also fails, fall through to default error case
                 }
-                    //$FALL-THROUGH$
+                //$FALL-THROUGH$ // Fall through to default error case
             default :
+                // Handles invalid qualifiers or cases where all numeric parsing failed
                 throw new NumberFormatException(str + " is not a valid number.");
-
         }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+
+    } else { // No type qualifier (last char is digit or '.')
+        // Extract exponent part if present (validity checked before this block)
+        if (expPos > -1) {
+            exp = str.substring(expPos + 1);
         } else {
             exp = null;
         }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+
+        // Determine type based on presence of decimal or exponent
+        if (dec == null && exp == null) { // Should be Integer/Long/BigInteger (Decimal)
+            // Hex was handled earlier. This handles plain decimal integers.
             try {
                 return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
+            } catch (NumberFormatException nfe) { /* Ignore, try next larger type */ }
             try {
                 return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
+            } catch (NumberFormatException nfe) { /* Ignore, try next larger type */ }
+            // Final fallback for large integers
             return createBigInteger(str);
-
-            } else {
-                //Must be a float,double,BigDec
+        } else { // Should be Float/Double/BigDecimal
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             try {
                 Float f = createFloat(str);
+                 // Check suitability (non-Infinite, non-zero unless truly zero)
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
+            } catch (NumberFormatException nfe) { /* Ignore, try next larger type */ }
             try {
                 Double d = createDouble(str);
+                 // Check suitability (Corrected: use d.doubleValue())
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
-
+            } catch (NumberFormatException nfe) { /* Ignore, try next larger type */ }
+            // Final fallback for floating point numbers
             return createBigDecimal(str);
-
         }
     }
 }
\ No newline at end of file
