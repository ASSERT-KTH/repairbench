diff --git a/tmp/72b731bc-ea10-4566-866a-d1200249c2f8_buggy.java b/tmp/03473a61-2ca7-4188-8a80-accb053e279c_fixed.java
index d95d5a8..b5eb89d 100644
--- a/tmp/72b731bc-ea10-4566-866a-d1200249c2f8_buggy.java
+++ b/tmp/03473a61-2ca7-4188-8a80-accb053e279c_fixed.java
@@ -1,177 +1,284 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils;
+
+// Assuming NumberUtils class structure and availability of StringUtils
+// Assuming existence of a suitable isAllZeros helper method defined elsewhere in the class
+public class NumberUtils {
+
+    // Helper method assumed to exist elsewhere in the class
+    // A simple possible implementation for illustration:
+    private static boolean isAllZeros(String str) {
+        if (StringUtils.isEmpty(str)) {
+            return true; // Treat empty as all zeros
+        }
+        // Basic implementation: check if all characters are '0' after optional sign
+        int start = 0;
+        if (str.charAt(0) == '-' || str.charAt(0) == '+') {
+            start = 1;
+        }
+        if (start >= str.length()) return true; // Only sign present
+
+        for (int i = start; i < str.length(); i++) {
+            if (str.charAt(i) != '0') {
+                return false;
+            }
+        }
+        // Check if the string had at least one digit (or was just a sign)
+        return str.length() > start;
+    }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
+     * <p>If the string starts with <code>0x</code>, <code>0X</code>, <code>-0x</code>, or <code>-0X</code>,
+     * it will be interpreted as a hexadecimal integer. Values with leading
+     * <code>0</code>'s will **not** be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
-    public static Number createNumber(String str) throws NumberFormatException {
+    public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
+        // Hexadecimal check (case-insensitive)
+        if (str.startsWith("0x") || str.startsWith("0X") || str.startsWith("-0x") || str.startsWith("-0X")) {
+             // Reject L/l suffix for hex, as Java Integer/Long/BigInteger hex parsing doesn't support it
+             final char lastCharHex = str.charAt(str.length() - 1);
+             if (lastCharHex == 'l' || lastCharHex == 'L') {
+                  throw new NumberFormatException(str + " is not a valid number.");
+             }
+             try {
+                 // Integer.decode handles "0x", "0X", "#" prefixes and sign
+                 return Integer.decode(str);
+             } catch (final NumberFormatException nfe) { // NOPMD - Fallthrough intended
+                 try {
+                     // Long.decode handles "0x", "0X", "#" prefixes and sign
+                     return Long.decode(str);
+                 } catch (final NumberFormatException nfe2) { // NOPMD - Fallthrough intended
+                     // BigInteger constructor needs prefix/sign handled manually
+                     int sign = 1;
+                     // Determine start index after prefix and optional sign
+                     int startIndex = (str.charAt(0) == '-') ? 3 : 2;
+                     if (str.charAt(0) == '-') {
+                         sign = -1;
+                     }
+                     // Check if startIndex is valid (string might be just "-0x")
+                     if (startIndex >= str.length()) {
+                         throw new NumberFormatException(str + " is not a valid number.");
+                     }
+                     final String numericPart = str.substring(startIndex);
+                     // Check for empty numeric part after prefix
+                     if (numericPart.isEmpty()) {
+                        throw new NumberFormatException(str + " is not a valid number.");
+                     }
+                     try {
+                         return new BigInteger(numericPart, 16).multiply(BigInteger.valueOf(sign));
+                     } catch (final NumberFormatException e) { // NOPMD
+                         // Rethrowing original exception might be less informative
+                         throw new NumberFormatException(str + " is not a valid number.");
+                     }
+                 }
+             }
+        }
+
+        // Protection against "--" (standard parsers might handle differently or throw NFE; ensure consistent NFE)
         if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
-            return null;
-        }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
+            throw new NumberFormatException(str + " is not a valid number.");
         }
-        char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
 
-        if (decPos > -1) {
+        final char lastChar = str.charAt(str.length() - 1);
+        String mant; // Mantissa part for allZeros check
+        String exp; // Exponent part for allZeros check
 
-            if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
+        final int decPos = str.indexOf('.');
+        // Use indexOfAny to find the first occurrence of 'e' or 'E'
+        final int expPos = StringUtils.indexOfAny(str, "eE");
+
+
+        // Validate relative positions of '.' and 'e'/'E'
+        if (expPos > -1 && decPos > -1 && expPos < decPos) {
             throw new NumberFormatException(str + " is not a valid number.");
         }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
+        // Check for empty exponent string like "1.2e" or "123e"
+        if (expPos > -1 && expPos == str.length() - 1) {
              throw new NumberFormatException(str + " is not a valid number.");
         }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
-            }
-            dec = null;
-        }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+
+        // Simple parsing for mantissa/exponent parts for the 'allZeros' check ONLY.
+        // It does not need to be perfect, just good enough for isAllZeros.
+        // Actual number conversion uses standard Java methods.
+        if (expPos > -1) {
+            if (decPos > -1) { mant = str.substring(0, decPos); }
+            else { mant = str.substring(0, expPos); }
+            exp = str.substring(expPos + 1);
         } else {
+            if (decPos > -1) { mant = str.substring(0, decPos); }
+            else { mant = str; }
             exp = null;
         }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // Check for type qualifier (L, F, D)
+            // Extract the part before the qualifier
+            final String numeric = str.substring(0, str.length() - 1);
+
+            // Use indexOfAny for 'e' or 'E' in numeric part
+            final int numericExpPos = StringUtils.indexOfAny(numeric, "eE");
+
+            // Check for empty exponent part in 'numeric', e.g. "1.2eF" -> numeric="1.2e" -> invalid
+            if (numericExpPos > -1 && numericExpPos == numeric.length() - 1) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+
+            // Re-parse 'numeric' for 'allZeros' check specific to qualifier cases.
+            String qualMant, qualExp; // Parts of 'numeric' string
+            final int qualDecPos = numeric.indexOf('.');
+
+            if (numericExpPos > -1) {
+                if (qualDecPos > -1) { qualMant = numeric.substring(0, qualDecPos); }
+                else { qualMant = numeric.substring(0, numericExpPos); }
+                qualExp = numeric.substring(numericExpPos + 1);
+            } else {
+                if (qualDecPos > -1) { qualMant = numeric.substring(0, qualDecPos); }
+                else { qualMant = numeric; }
+                qualExp = null;
+            }
+
+            // Assuming isAllZeros is available and handles sign/empty strings appropriately
+            final boolean allZeros = isAllZeros(qualMant) && isAllZeros(qualExp);
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // L/l suffix requires integer format (no decimal, no exponent within numeric)
+                    if (qualDecPos == -1 && numericExpPos == -1) {
                          try {
-                            return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                             // Use Long.valueOf - handles sign, throws NFE if invalid format
+                             return Long.valueOf(numeric);
+                         } catch (final NumberFormatException nfe) { // NOPMD
+                             // Fallback to BigInteger if Long fails (too big or invalid format)
+                             try {
+                                 return new BigInteger(numeric); // Handles sign, throws NFE if invalid
+                             } catch (final NumberFormatException nfe2) { // NOPMD
+                                 // If BigInteger also fails, the format was fundamentally wrong
+                                 throw new NumberFormatException(str + " is not a valid number.");
+                             }
                          }
-                        return createBigInteger(numeric);
-
                     }
+                    // If format has dec or exp (e.g., "1.2L", "1e2L"), it's invalid for L/l.
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        final Float f = Float.valueOf(numeric);
+                        // Check for infinity or zero loss (mantissa/exp non-zero but result is 0)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // Fall through to BigDecimal if Float is Inf or imprecise Zero (as per test case expectation)
+                    } catch (final NumberFormatException nfe) { // NOPMD
+                        // If Float format itself is invalid, throw NFE - do not fall through
+                         throw new NumberFormatException(str + " is not a valid number.");
+                    }
+                     try {
+                         // Try BigDecimal as Float was infinite or zero
+                         return new BigDecimal(numeric);
+                     } catch (final NumberFormatException e) { // NOPMD
+                         // If BigDecimal also fails, something is wrong
+                         throw new NumberFormatException(str + " is not a valid number.");
                      }
-                    //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = Double.valueOf(numeric);
+                        // Corrected check: d.doubleValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // Fall through to BigDecimal if Double is Inf or imprecise Zero
+                    } catch (final NumberFormatException nfe) { // NOPMD
+                        // If Double format itself is invalid, throw NFE - do not fall through
+                         throw new NumberFormatException(str + " is not a valid number.");
                     }
+                    // Fall through to BigDecimal if Double insufficient
                     try {
-                        return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                        return new BigDecimal(numeric);
+                    } catch (final NumberFormatException e) { // NOPMD
+                         // If BigDecimal also fails, something is wrong
+                         throw new NumberFormatException(str + " is not a valid number.");
                      }
-                    //$FALL-THROUGH$
                 default :
+                    // Qualifiers other than L, F, D are invalid
                     throw new NumberFormatException(str + " is not a valid number.");
-
-            }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
             }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+        } else { // No type qualifier (or last char is '.' which Character.isDigit handles)
+            // String ends in digit or '.'
+
+            // Determine type based on structure (presence of '.', 'e', 'E')
+            if (decPos == -1 && expPos == -1) { // Potential Integer/Long/BigInteger
                  try {
-                    return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
+                     return Integer.valueOf(str);
+                 } catch (final NumberFormatException nfe) { // NOPMD
                      try {
-                    return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                         return Long.valueOf(str);
+                     } catch (final NumberFormatException nfe2) { // NOPMD
+                         try {
+                            return new BigInteger(str);
+                         } catch (final NumberFormatException nfe3) { // NOPMD
+                            // If all fail, the original string is not a valid integer format
+                            throw new NumberFormatException(str + " is not a valid number.");
+                         }
+                     }
                  }
-                return createBigInteger(str);
+            } else { // Potential Float/Double/BigDecimal
+                // Assuming isAllZeros is available and handles sign/empty strings appropriately
+                final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
 
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
-                    Float f = createFloat(str);
+                    final Float f = Float.valueOf(str);
+                    // LANG-521 "2." is handled correctly by Float.valueOf("2.") -> 2.0f
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                } catch (final NumberFormatException nfe) { /* NOPMD */ // Ignore Float failure (format or range), try Double
                 }
                 try {
-                    Double d = createDouble(str);
+                    final Double d = Double.valueOf(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                } catch (final NumberFormatException nfe) { /* NOPMD */ // Ignore Double failure (format or range), try BigDecimal
+                }
+                // Fallback to BigDecimal
+                try {
+                    return new BigDecimal(str);
+                } catch (final NumberFormatException e) { // NOPMD
+                    // If all fail (including BigDecimal), the string is definitely invalid
+                    throw new NumberFormatException(str + " is not a valid number.");
+                }
             }
-
-                return createBigDecimal(str);
-
         }
     }
 }
\ No newline at end of file
