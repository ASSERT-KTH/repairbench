diff --git a/tmp/dbafe2cc-d795-4b05-b505-332e000b0af6_buggy.java b/tmp/a75f9ece-1b33-4825-83dc-caf72233e88b_fixed.java
index 66af1fd..65ac07f 100644
--- a/tmp/dbafe2cc-d795-4b05-b505-332e000b0af6_buggy.java
+++ b/tmp/a75f9ece-1b33-4825-83dc-caf72233e88b_fixed.java
@@ -1,107 +1,106 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
-        int start = offset;
-        int pos = offset;
+        final int start = offset; // Keep original start for segment tracking
         final int end = offset + len;
 
+        // Local variables for frequently accessed format settings
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        final Character quoteCharObj = getQuoteCharacter();
+        // We assume quoteCharObj is non-null if quoteMode requires quoting (e.g., not NONE).
+        // If quoteCharObj could be null, the format validation should prevent this combination.
+        final char quoteChar = quoteCharObj.charValue();
+        final Character commentMarkerObj = getCommentMarker(); // Fetch potential comment marker
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
+
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
             quote = true;
             break;
         case NON_NUMERIC:
+            // Check object type for NON_NUMERIC mode
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
+            // In NONE mode, use escape logic (which might handle delimiters/specials differently)
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+                // Quote empty field if it's the first on a new record
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                final char firstChar = value.charAt(offset);
+                final char lastChar = value.charAt(offset + len - 1);
 
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+                // Rule 1: Check for leading/trailing spaces (less than or equal to SP).
+                // Note: Constants SP, LF, CR assumed accessible.
+                if (firstChar <= SP || lastChar <= SP) {
                     quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                } else {
+                    // Rule 2: Check for leading comment marker if applicable.
+                    if (newRecord && isCommentMarkerSet() && commentMarkerObj != null && firstChar == commentMarkerObj.charValue()) {
                         quote = true;
                     } else {
+                        // Rule 3: Scan for internal special characters (delimiter, quote, CR, LF).
+                        // This loop is only needed if the prior checks didn't trigger quoting.
+                        int pos = offset; // Use pos for scanning, similar to original code
                         while (pos < end) {
-                        c = value.charAt(pos);
+                            final char c = value.charAt(pos);
                             if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                                 quote = true;
-                            break;
+                                break; // Found a character needing quoting
                             }
                             pos++;
                         }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
-                            quote = true;
-                        }
+                        // If quote became true here, the escaping logic below will handle it.
                     }
                 }
             }
 
+            // If MINIMAL decided against quoting, write out directly and return
             if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
+                out.append(value, offset, end); // Use offset/end for the full original value
                 return;
             }
+            // Otherwise, break from switch and proceed to quoting logic below
             break;
+
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
-        }
+        } // End switch
 
+        // If quote is false after the switch (e.g., for NON_NUMERIC that wasn't Number), write directly.
         if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
+            out.append(value, offset, end);
             return;
         }
 
-        // we hit something that needed encapsulation
+        // ---- Quoting Logic ----
+        // This part executes if 'quote' is true.
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
-            final char c = value.charAt(pos);
+        // Iterate through the value to write segments and double internal quote chars
+        int segmentStart = start; // Use original 'start' (which is offset)
+        for (int i = offset; i < end; i++) {
+            final char c = value.charAt(i);
             if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
+                // Write segment up to and including the quote char
+                out.append(value, segmentStart, i + 1);
+                // Next segment starts at the quote char (effectively doubling it)
+                segmentStart = i; // Correct: next segment starts at the quote char index
             }
-            pos++;
         }
 
-        // write the last segment
-        out.append(value, start, pos);
+        // Write the final segment (from last quote char, or beginning, up to the end)
+        out.append(value, segmentStart, end);
         out.append(quoteChar);
     }
\ No newline at end of file
