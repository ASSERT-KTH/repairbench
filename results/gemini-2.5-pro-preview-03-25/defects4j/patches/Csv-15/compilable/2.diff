diff --git a/tmp/20ceaae1-61e9-4dad-a736-633da4bbd7b9_buggy.java b/tmp/5229d19c-8500-4802-af55-f5a382a7ed93_fixed.java
index 66af1fd..b922255 100644
--- a/tmp/20ceaae1-61e9-4dad-a736-633da4bbd7b9_buggy.java
+++ b/tmp/5229d19c-8500-4802-af55-f5a382a7ed93_fixed.java
@@ -1,107 +1,103 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
-        boolean quote = false;
-        int start = offset;
-        int pos = offset;
+
+        boolean quote = false; // Default: don't quote unless required by policy or content
+        int start = offset; // Keep original start for potential direct append or escaping loop
+        int pos = offset; // Position tracker, used differently in MINIMAL check vs escaping loop
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        final Character quoteCharRef = getQuoteCharacter();
+        // If quote char is null, quoting is impossible. Mode NONE is effectively forced.
+        // This should ideally be handled by format validation or higher up.
+        // Assuming quoteCharRef is non-null if quoteMode is not NONE.
+        final char quoteChar = (quoteCharRef == null ? 0 : quoteCharRef.charValue()); // Use 0 if null, though should not happen for quoting modes
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
+
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
+             // Assuming null handling is done elsewhere; if we are here, quote it.
             quote = true;
             break;
         case NON_NUMERIC:
+            // Quote if the original object was not a number.
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
+            // No quoting, just escape specific characters like delimiter, CR, LF.
             printAndEscape(value, offset, len, out);
-            return;
+            return; // Done for NONE mode.
         case MINIMAL:
+            // Quote only if necessary according to RFC 4180 minimal rules:
+            // 1. Field is empty and it's the first record.
+            // 2. Field contains delimiter, quote character, CR, or LF.
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
+                // If empty but not first record, no quote needed by minimal rules.
             } else {
-                char c = value.charAt(pos);
-
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
-                    quote = true;
-                } else {
+                // Scan for characters that require quoting.
+                // Reset pos to start for scanning the whole value
+                pos = offset;
                 while (pos < end) {
-                        c = value.charAt(pos);
+                    final char c = value.charAt(pos);
+                    // Standard triggers requiring quotes in MINIMAL mode (RFC 4180)
+                    // Assuming constants LF and CR are defined elsewhere (e.g., Constants.LF, Constants.CR)
                     if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                         quote = true;
-                            break;
+                        break; // Found a character requiring quoting
                     }
                     pos++;
                 }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
-                            quote = true;
-                        }
-                    }
-                }
+                // If loop finishes without finding quote triggers, quote remains false.
+                // Removed non-standard checks for first char range, comment char start, and trailing space.
             }
 
+            // If minimal checks determined no quote needed, print raw and return.
             if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
+                // Ensure using original start and calculated end for the slice
+                out.append(value, offset, end);
                 return;
             }
-            break;
+            // Otherwise 'quote' is true, fall through to quoting logic below.
+            break; // Break from MINIMAL case
         default:
+            // Should not happen if QuoteMode is a proper enum.
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
-        }
+        // If we reach here, quote must be true (from ALL, ALL_NON_NULL, NON_NUMERIC, or MINIMAL needing quotes).
+        // Perform quoting and escaping
 
-        // we hit something that needed encapsulation
+        // Append opening quote
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // Reset start and pos for the escaping loop - start tracks the beginning of the current segment,
+        // pos scans through the value. Using original variable names here for minimal diff.
+        // 'start' is already 'offset' from the beginning of the function scope.
+        pos = offset;   // Reset scanner position to the beginning of the value
+
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+                // write out the chunk up until this point (inclusive)
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
+                // Set start for the next chunk to be this quote char's position,
+                // effectively doubling it when the next chunk is printed.
+                start = pos; // The original code's logic for doubling quotes
             }
-            pos++;
+            pos++; // Advance scan position
         }
 
-        // write the last segment
-        out.append(value, start, pos);
+        // write the last segment (from last quote char found, or from the beginning if none found)
+        out.append(value, start, pos); // pos is now == end
+        // Append closing quote
         out.append(quoteChar);
     }
\ No newline at end of file
