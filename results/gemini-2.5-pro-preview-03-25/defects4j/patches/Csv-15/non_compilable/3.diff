diff --git a/tmp/96005df0-8129-4993-aec8-9a3713123f06_buggy.java b/tmp/44753bb7-e217-4cad-a851-d14fa0d6ece4_fixed.java
index 66af1fd..1b7433f 100644
--- a/tmp/96005df0-8129-4993-aec8-9a3713123f06_buggy.java
+++ b/tmp/44753bb7-e217-4cad-a851-d14fa0d6ece4_fixed.java
@@ -1,107 +1,161 @@
+import java.io.IOException;
+import org.apache.commons.csv.QuoteMode;
+// Assuming relevant constants like SP, LF, CR are available, either defined
+// in this class/superclass or imported from org.apache.commons.csv.Constants
+import static org.apache.commons.csv.Constants.CR;
+import static org.apache.commons.csv.Constants.LF;
+import static org.apache.commons.csv.Constants.SP;
+
+// Stub for dependencies, replace with actual context if needed
+abstract class CSVPrinterStub {
+    abstract char getDelimiter();
+    abstract Character getQuoteCharacter();
+    abstract QuoteMode getQuoteMode();
+    abstract boolean isCommentMarkerSet();
+    abstract Character getCommentMarker();
+    abstract String getNullString(); // Needed conceptually for ALL_NON_NULL? Not used in original logic here.
+    abstract void printAndEscape(final CharSequence value, final int offset, final int len, final Appendable out) throws IOException;
+
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
-        int pos = offset;
+        int pos = offset; // pos tracks current position, used later if quoting needed
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        final Character quoteCharObject = getQuoteCharacter();
+        // Quote character must be set for quote modes other than NONE. Format validation should ensure this.
+        final char quoteChar = quoteCharObject != null ? quoteCharObject.charValue() : Assertions.fail("quotechar must not be null");
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
+
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
+            // Original behavior: Always quote for ALL/ALL_NON_NULL modes here.
+            // Assumes caller handles null string representation before calling this.
+            // If ALL_NON_NULL, and object is null, this will quote the null string representation.
             quote = true;
             break;
         case NON_NUMERIC:
+            // Quote if the original object was not a number.
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
+            // No quoting, just escape special characters (handled by printAndEscape)
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+                // Always quote an empty field if it's the first one on the line,
+                // otherwise, it might be interpreted as an empty line.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                final char firstChar = value.charAt(start);
+                final char lastChar = value.charAt(end - 1);
 
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+                // Rule 1: Quote if leading or trailing whitespace is present.
+                // Whitespace definition includes space (SP) and control characters (<= SP).
+                if (firstChar <= SP || lastChar <= SP) {
                     quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                }
+                // Rule 2: Quote if the field starts with the comment marker
+                // (and comments are enabled, and it's the first field).
+                else if (newRecord && isCommentMarkerSet()) {
+                    Character comment = getCommentMarker();
+                    // Check comment is not null and matches first char
+                    if (comment != null && firstChar == comment.charValue()) {
                         quote = true;
-                } else {
+                    }
+                }
+
+                // Rule 3: Quote if the field contains delimiter, quote character, or record separator characters (CR, LF).
+                if (!quote) {
+                    // Scan the entire field if we haven't already decided to quote.
+                    // We update 'pos' here, as the quoting logic below might use it
+                    // to start processing from the character that triggered the quote.
+                    pos = start; // Ensure scan starts from the beginning
                     while (pos < end) {
-                        c = value.charAt(pos);
+                        final char c = value.charAt(pos);
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                             quote = true;
-                            break;
+                            break; // Found a character requiring quoting
                         }
                         pos++;
                     }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
-                            quote = true;
-                        }
-                    }
+                    // If loop finished without break, quote is still false, pos == end.
+                    // If loop broke, quote is true, pos is index of triggering char.
                 }
+                // If quote was true from Rule 1 or 2, the loop was skipped.
+                // 'pos' remains at its initial value 'offset'. The quoting logic below
+                // will start scanning from pos=offset, which is correct.
             }
 
+            // If no quoting is needed after all checks, write the value directly and return.
             if (!quote) {
-                // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
+            // Otherwise, break from switch to proceed with the quoting logic below.
             break;
         default:
+            // Should not happen with defined QuoteMode enum values.
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
+        // If quote mode required quoting (e.g., ALL) or MINIMAL determined quoting is needed.
+        // Note: The original code had a redundant check "if (!quote)" here, which is removed
+        // as the MINIMAL case now returns early if !quote, and other cases either set quote=true
+        // or return early (NONE). If quote is false here, it implies NONE mode (already returned)
+        // or potentially a future mode. For safety, if we reach here and quote is false,
+        // we write the value directly (matches the original redundant check's behavior).
         if (!quote) {
-            // no encapsulation needed - write out the original value
            out.append(value, start, end);
            return;
         }
 
-        // we hit something that needed encapsulation
+
+        // ---- Quoting Logic ----
+        // This part remains the same as the original code.
+        // It handles the actual quoting and escaping of the quote character itself.
+
+        // Append the initial quote character.
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // Iterate through the field's content. 'pos' was potentially updated by the MINIMAL scan loop
+        // to the index of the first character requiring quotes, or it remains 'offset' if quoting
+        // was triggered by initial conditions (like leading space) or mode (like ALL).
+        // 'start' tracks the beginning index of the substring to append in each step.
         while (pos < end) {
             final char c = value.charAt(pos);
+            // If the character is the quote character...
             if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+                // Write the segment leading up to and including the quote character.
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+                // Set the start position for the next segment to the current position.
+                // This ensures the quote character is written again (doubled).
                 start = pos;
             }
-            pos++;
+            pos++; // Move to the next character.
         }
 
-        // write the last segment
-        out.append(value, start, pos);
+        // Write the final segment of the field (from the last 'start' position to the end).
+        out.append(value, start, pos); // pos is now == end
+        // Append the final closing quote character.
         out.append(quoteChar);
     }
+
+    // Dummy Assertions class for the check added for quoteChar nullness
+    private static class Assertions {
+        static char fail(String message) {
+            throw new IllegalStateException(message);
+        }
+    }
+}
\ No newline at end of file
