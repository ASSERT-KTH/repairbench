diff --git a/tmp/b7b5447f-540f-4284-9c62-8db7da8a1067_buggy.java b/tmp/08d7d54c-91ef-4c36-a35e-38303e206f71_fixed.java
index 66af1fd..457db90 100644
--- a/tmp/b7b5447f-540f-4284-9c62-8db7da8a1067_buggy.java
+++ b/tmp/08d7d54c-91ef-4c36-a35e-38303e206f71_fixed.java
@@ -1,107 +1,138 @@
+import java.io.IOException;
+
+import org.apache.commons.csv.QuoteMode;
+// Assuming relevant constants (LF, CR, SP) and methods (getDelimiter, getQuoteCharacter, getQuoteMode,
+// getCommentMarker, isCommentMarkerSet, printAndEscape) are accessible in the class context.
+import static org.apache.commons.csv.Constants.CR;
+import static org.apache.commons.csv.Constants.LF;
+import static org.apache.commons.csv.Constants.SP;
+
+
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
-
+        final Character quoteCharRef = getQuoteCharacter();
+        // Use getQuoteMode() directly; handle null by defaulting to MINIMAL.
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
+
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
+            // Note: For ALL_NON_NULL, the check 'object != null' might be expected here
+            // or handled by the caller. Assuming caller handles it or object is non-null based on context.
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
+            // Use the existing escaping code logic (which might handle delimiters/quotes differently)
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
+                // Always quote an empty token that is the first on the line,
+                // as it may be the only thing on the line. If it were not quoted in that case,
                 // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                char firstChar = value.charAt(start);
+                char lastChar = value.charAt(end - 1);
 
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+                // Trigger quoting if:
+                // 1. The field contains the delimiter, quote character, CR, or LF.
+                // 2. The field starts or ends with whitespace (or control characters <= SP).
+                // 3. It's the first field of a record, comments are enabled, and it starts with the comment marker.
+
+                // Check for leading/trailing spaces or control characters first.
+                // Using <= SP is consistent with the original check for trailing spaces.
+                if (firstChar <= SP || lastChar <= SP) {
                     quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                } else if (newRecord && isCommentMarkerSet()) {
+                    // Check for comment marker start only if comments are enabled and it's the first field.
+                    Character commentMarker = getCommentMarker(); // Guarded by isCommentMarkerSet()
+                    if (commentMarker != null && firstChar == commentMarker.charValue()) {
                         quote = true;
-                } else {
+                    }
+                }
+
+                // If not already decided to quote, scan the string for internal special characters
+                // that require quoting (delimiter, quote char, line breaks).
+                if (!quote) {
+                    pos = start; // Reset position for the full scan of the field content.
                     while (pos < end) {
-                        c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                        final char c = value.charAt(pos);
+                        // Check for LF, CR, Delimiter, or the Quote Character itself.
+                        // Need to handle the case where quoteCharRef might be null.
+                        final boolean containsQuoteChar = quoteCharRef != null && c == quoteCharRef.charValue();
+                        if (c == LF || c == CR || c == delimChar || containsQuoteChar) {
                             quote = true;
-                            break;
+                            break; // Found a character requiring quoting.
                         }
                         pos++;
                     }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
-                            quote = true;
-                        }
-                    }
                 }
             }
 
+            // If MINIMAL mode decided against quoting, write the value directly and return.
             if (!quote) {
-                // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
-            break;
+            // If MINIMAL mode requires quoting, fall through to the common quoting logic below.
+            break; // End of MINIMAL case
+
         default:
+            // Handle unexpected QuoteMode values.
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
+        // --- Common Quoting Logic ---
+        // This section is executed if 'quote' is true (due to policies ALL, ALL_NON_NULL, NON_NUMERIC, or MINIMAL).
+
+        // Ensure a quote character is actually defined before attempting to use it.
+        if (quoteCharRef == null) {
+            // This scenario indicates a configuration issue (quoting needed, but no quote char set).
+            throw new IllegalStateException("No quote character defined but quoting is required ('" + quoteModePolicy + "' mode).");
         }
+        final char quoteChar = quoteCharRef.charValue(); // Safe to get value now.
 
-        // we hit something that needed encapsulation
+        // Append the opening quote character.
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // Iterate through the original value to handle embedded quote characters by escaping them.
+        start = offset; // Position for the start of the current segment to append.
+        pos = offset;   // Position for scanning the input value character by character.
+
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+                // Found an embedded quote character. Append the segment up to and including this quote.
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+                // Set the start for the next segment *at* the position of the quote character.
+                // This ensures the quote character is written again (effectively doubling it)
+                // when the next segment (or the final segment) is appended.
                 start = pos;
             }
             pos++;
         }
 
-        // write the last segment
-        out.append(value, start, pos);
+        // Append the final segment of the value. This segment runs from the position 'start'
+        // (which is either the original start, or the position of the last embedded quote)
+        // up to the end of the value.
+        out.append(value, start, end); // Note: 'pos' is equal to 'end' at this point.
+
+        // Append the closing quote character.
         out.append(quoteChar);
     }
\ No newline at end of file
