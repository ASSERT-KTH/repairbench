diff --git a/tmp/68bce07d-0cfc-45ec-b170-0fd7db020a18_buggy.java b/tmp/f56580c1-2a02-418f-aad5-f39f18525361_fixed.java
index 66af1fd..59e618d 100644
--- a/tmp/68bce07d-0cfc-45ec-b170-0fd7db020a18_buggy.java
+++ b/tmp/f56580c1-2a02-418f-aad5-f39f18525361_fixed.java
@@ -1,107 +1,122 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        // Use Character wrapper type as quote char is optional in CSVFormat
+        final Character quoteChar = getQuoteCharacter();
+        // Handle null quote mode as MINIMAL
+        final QuoteMode quoteModePolicy = getQuoteMode() == null ? QuoteMode.MINIMAL : getQuoteMode();
 
-        QuoteMode quoteModePolicy = getQuoteMode();
-        if (quoteModePolicy == null) {
-            quoteModePolicy = QuoteMode.MINIMAL;
-        }
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
             quote = true;
             break;
         case NON_NUMERIC:
+            // Quote if the original object is not a Number
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
+            // Use the escape character logic (if escape is set, otherwise standard string)
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+                // Always quote an empty token that is the first on the line
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                // MINIMAL mode requires a quote character
+                if (quoteChar == null) {
+                    throw new IllegalStateException("Cannot use MINIMAL quoting mode with no quote character defined");
+                }
+                final char qChar = quoteChar.charValue();
+                final char firstChar = value.charAt(start);
+                final char lastChar = value.charAt(end - 1);
 
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
-                    quote = true;
-                } else {
+                // Check for standard reasons to quote (delimiter, quote char itself, line breaks)
                 while (pos < end) {
-                        c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                    final char c = value.charAt(pos);
+                    // Note: Constants.LF, Constants.CR, Constants.SP assumed available/imported
+                    if (c == LF || c == CR || c == qChar || c == delimChar) {
                         quote = true;
                         break;
                     }
                     pos++;
                 }
 
                 if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
+                    // Check for other reasons based on format settings (comment start, surrounding spaces)
+                    // Check if field starts with a comment marker (if comment marker is enabled)
+                    // Use getFormat() to access format settings from CSVPrinter instance
+                    if (getFormat().isCommentMarkerSet() && getFormat().getCommentMarker().charValue() == firstChar) {
+                        quote = true;
+                    } else if (!getFormat().getIgnoreSurroundingSpaces()) {
+                        // Check for leading/trailing spaces or control chars (<= SP) if spaces are significant
+                        if (firstChar <= SP || lastChar <= SP) {
                             quote = true;
                         }
                     }
+                    // Removed overly aggressive quoting based on first char range (like > 0x7E) or <= COMMENT constant
+                    // The original check 'if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E))' is removed.
+                    // The original check 'else if (c <= COMMENT)' is removed and replaced by the specific comment marker check above.
                 }
             }
 
+            // If MINIMAL decided not to quote, write the raw value and return
             if (!quote) {
-                // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
-            break;
+            // If MINIMAL decided to quote, fall through to the quoting logic below
+            break; // End MINIMAL case
+
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
-        }
+        } // End switch
 
+        // If the policy decided not to quote (currently only possible for NON_NUMERIC), write raw and return
         if (!quote) {
-            // no encapsulation needed - write out the original value
             out.append(value, start, end);
             return;
         }
 
-        // we hit something that needed encapsulation
-        out.append(quoteChar);
+        // --- Quoting is required ---
+        // Ensure quote character is defined (should be true unless policy was NONE, which returned early)
+        if (quoteChar == null) {
+            // This should be unreachable if logic above is correct, but defensive check is ok.
+            throw new IllegalStateException("Trying to quote output when no quote character is defined");
+        }
+        final char qChar = quoteChar.charValue();
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // Write the opening quote
+        out.append(qChar);
+
+        // Write the value, doubling internal quote characters
+        // Reset start and pos for iterating through the value for quoting
+        start = offset;
+        pos = offset;
         while (pos < end) {
             final char c = value.charAt(pos);
-            if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+            if (c == qChar) {
+                // Write the segment leading up to the quote character (inclusive)
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+                // Set the start of the next segment to the position of the quote char.
+                // This ensures the quote char is output again when the next segment is written.
                 start = pos;
             }
             pos++;
         }
 
-        // write the last segment
-        out.append(value, start, pos);
-        out.append(quoteChar);
+        // Write the last segment of the value
+        out.append(value, start, pos); // pos is equal to 'end' here
+
+        // Write the closing quote
+        out.append(qChar);
     }
\ No newline at end of file
