diff --git a/tmp/705ce6ab-495a-4a78-bf00-818cbdbb636a_buggy.java b/tmp/51e74922-3bf4-44c8-bce3-a12253fc901d_fixed.java
index bf9bb88..4607880 100644
--- a/tmp/705ce6ab-495a-4a78-bf00-818cbdbb636a_buggy.java
+++ b/tmp/51e74922-3bf4-44c8-bce3-a12253fc901d_fixed.java
@@ -1,108 +1,149 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
-   * @param fromNode The original source node since {@code node} is changed
-   *        during recursion.
+   * @param fromNode The original source node whose successor is being computed.
+   *        Used as the source of the side-effect edges created for FINALLY jumps.
    * @param node The node that follow() should compute.
+   * @param cfa The current ControlFlowAnalysis instance. May be null.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
     Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
-        (cfa != null && node == cfa.root)) {
+        (cfa != null && node == cfa.getRoot())) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
       case Token.CASE:
       case Token.DEFAULT_CASE:
         // After the body of a CASE, the control goes to the body of the next
-        // case, without having to go to the case condition.
-        if (parent.getNext() != null) {
-          if (parent.getNext().isCase()) {
-            return parent.getNext().getFirstChild().getNext();
-          } else if (parent.getNext().isDefaultCase()) {
-            return parent.getNext().getFirstChild();
+        // case, without having to go to the case condition. Fallthrough.
+        Node nextCase = parent.getNext();
+        if (nextCase != null) {
+          if (nextCase.isCase()) {
+            // CASE EXPR: BLOCK <-- control goes to the block
+            return computeFallThrough(nextCase.getFirstChild().getNext());
+          } else if (nextCase.isDefaultCase()) {
+            // DEFAULT_CASE: BLOCK <-- control goes to the block
+            return computeFallThrough(nextCase.getFirstChild());
           } else {
-            Preconditions.checkState(false, "Not reachable");
+            // Shouldn't happen
+            throw new IllegalStateException("Not reachable");
           }
         } else {
-          return computeFollowNode(fromNode, parent, cfa);
+          // This is the last case/default clause. Control goes to whatever
+          // follows the switch statement.
+          return computeFollowNode(fromNode, parent.getParent(), cfa); // Pass SWITCH node
         }
-        break;
+        // Note: explicit breaks within cases are handled by standard jump logic
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
+          // For-in loops are structured as: FOR (VAR in EXPR) BLOCK
+          // The block follows the variable initialization.
+          // The iteration check happens implicitly. Follow of the block loops back to FOR.
           return parent;
         } else {
+          // Regular FOR loops: FOR(INIT; COND; INC) BLOCK
+          // The follow of the block is the INC node.
           return parent.getFirstChild().getNext().getNext();
         }
       case Token.WHILE:
       case Token.DO:
+        // Follow of the block is the loop condition (WHILE) or the loop itself (DO's condition).
         return parent;
       case Token.TRY:
-        // If we are coming out of the TRY block...
-        if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
+        Node tryBlock = parent.getFirstChild();
+        Node catchBlock = NodeUtil.getCatchBlock(parent); // The CATCH node.
+        Node finallyBlock = NodeUtil.getFinallyBlock(parent); // The BLOCK node for finally.
+
+        // Coming out of the TRY block (node == tryBlock)
+        if (node == tryBlock) {
+          // If try block falls through normally...
+          if (finallyBlock != null) {
+            // Go to finally block first.
+            return computeFallThrough(finallyBlock);
+          } else {
+            // No finally block, control goes to whatever follows the TRY statement.
             return computeFollowNode(fromNode, parent, cfa);
           }
-        // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
+        }
+        // Coming out of the CATCH block's body (node == catchBlock.getLastChild())
+        else if (catchBlock != null && node == catchBlock.getLastChild()) {
+          // If catch block falls through normally...
+          if (finallyBlock != null) {
+            // Go to finally block.
+            return computeFallThrough(finallyBlock);
           } else {
+            // No finally block, control goes to whatever follows the TRY statement.
             return computeFollowNode(fromNode, parent, cfa);
           }
-        // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
+        }
+        // Coming out of the FINALLY block (node == finallyBlock)
+        else if (finallyBlock != null && node == finallyBlock) {
+          // If finally block completes normally...
+          // Side effect: Add edges for pending jumps (break/continue/return/throw)
+          // that caused entry to this finally block. The edges connect the end
+          // of this finally block to the next finally block or the ultimate target.
           if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+            java.util.Collection<Node> finallyTargets = cfa.finallyMap.get(parent);
+            if (finallyTargets != null) {
+              for (Node finallyNode : finallyTargets) {
+                // Connect *this* finally block (node) to the target (finallyNode).
+                // The graph builder interprets this as edge from finally end.
+                cfa.createEdge(node, ControlFlowGraph.Branch.UNCOND, finallyNode);
               }
             }
+          }
+          // Control normally transfers to whatever follows the TRY statement.
           return computeFollowNode(fromNode, parent, cfa);
         }
+        // Fallthrough if node is not try, catch body end, or finally block.
+        // This can happen for nodes within the try/catch/finally blocks.
+        break; // End of TRY case
     }
 
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
+    // If not handled by special structural cases above:
+
+    // Default: follow should be the next sibling.
     Node nextSibling = node.getNext();
 
-    // Skip function declarations because control doesn't get pass into it.
+    // Skip function declarations because control doesn't flow into them sequentially.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
+      // If there is a next sibling, control goes to it.
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
+      // The follow() of the parent node determines where to go.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
