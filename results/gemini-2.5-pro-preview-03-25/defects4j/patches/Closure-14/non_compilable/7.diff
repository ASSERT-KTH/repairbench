diff --git a/tmp/29866abd-b1e5-48f9-90e1-f368bea74e31_buggy.java b/tmp/62201d15-60c0-4aa9-ad45-d8c9e2fda976_fixed.java
index bf9bb88..618fb77 100644
--- a/tmp/29866abd-b1e5-48f9-90e1-f368bea74e31_buggy.java
+++ b/tmp/62201d15-60c0-4aa9-ad45-d8c9e2fda976_fixed.java
@@ -1,108 +1,144 @@
   /**
-   * Computes the follow() node of a given node and its parent. There is a side
-   * effect when calling this function. If this function computed an edge that
-   * exists a FINALLY, it'll attempt to connect the fromNode to the outer
-   * FINALLY according to the finallyMap.
+   * Computes the follow() node of a given node and its parent.
+   * This method is primarily concerned with determining the next node in
+   * the control flow graph during normal execution flow.
    *
-   * @param fromNode The original source node since {@code node} is changed
-   *        during recursion.
-   * @param node The node that follow() should compute.
+   * Handling of exceptional control flow (like jumps out of loops or returns
+   * that need to execute finally blocks) is managed by the main
+   * {@link ControlFlowAnalysis#analyze} method, which may redirect control flow
+   * edges (e.g., to a FINALLY block) and then ensure the flow resumes correctly
+   * afterwards.
+   *
+   * @param fromNode The original source node (unused in this revised version,
+   *                 kept for signature compatibility).
+   * @param node The node whose normal successor is being computed.
+   * @param cfa The current ControlFlowAnalysis instance (can be null).
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
-     * This is the case where:
-     *
-     * 1. Parent is null implies that we are transferring control to the end of
-     * the script.
-     *
-     * 2. Parent is a function implies that we are transferring control back to
-     * the caller of the function.
-     *
-     * 3. If the node is a return statement, we should also transfer control
-     * back to the caller of the function.
-     *
-     * 4. If the node is root then we have reached the end of what we have been
-     * asked to traverse.
-     *
-     * In all cases we should transfer control to a "symbolic return" node.
-     * This will make life easier for DFAs.
+     * Determine the node's parent. Control flow generally stays within the
+     * parent's context or moves to the parent's successor.
      */
     Node parent = node.getParent();
+
+    /*
+     * Base cases for control flow termination or transfer:
+     * 1. Parent is null: Reached the top of the script/AST fragment.
+     * 2. Parent is FUNCTION: Exiting the function scope normally.
+     * 3. Node is the root of the analysis: Reached the end of the specific
+     *    subgraph being analyzed by CFA.
+     * In these cases, there is no explicit successor node within the graph,
+     * represented by returning null.
+     */
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
-    // If we are just before a IF/WHILE/DO/FOR:
+    // Handle control flow specific to the parent node's type.
     switch (parent.getType()) {
-      // The follow() of any of the path from IF would be what follows IF.
+      // IF: After either branch of an IF, control flows to whatever follows the IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
+
+      // CASE/DEFAULT_CASE: After the block of a CASE/DEFAULT_CASE executes.
       case Token.CASE:
       case Token.DEFAULT_CASE:
-        // After the body of a CASE, the control goes to the body of the next
-        // case, without having to go to the case condition.
-        if (parent.getNext() != null) {
-          if (parent.getNext().isCase()) {
-            return parent.getNext().getFirstChild().getNext();
-          } else if (parent.getNext().isDefaultCase()) {
-            return parent.getNext().getFirstChild();
+        Node nextCase = parent.getNext();
+        // If there's a following CASE/DEFAULT_CASE, control goes to its body.
+        if (nextCase != null) {
+          if (nextCase.isCase()) {
+            // Fall through to the next CASE's body (skip label).
+            return computeFallThrough(nextCase.getFirstChild().getNext());
+          } else if (nextCase.isDefaultCase()) {
+            // Fall through to the DEFAULT_CASE's body.
+            return computeFallThrough(nextCase.getFirstChild());
           } else {
-            Preconditions.checkState(false, "Not reachable");
+            // Should not happen in valid SWITCH structure.
+            throw new IllegalStateException("Unexpected sibling after CASE: " + nextCase);
           }
         } else {
-          return computeFollowNode(fromNode, parent, cfa);
+          // Last case/default in the SWITCH, flow goes after the SWITCH.
+          // The parent of CASE/DEFAULT_CASE is the SWITCH statement.
+          return computeFollowNode(fromNode, parent.getParent(), cfa);
         }
-        break;
+        // Note: Original code missed a break; here, but all paths return.
+
+      // FOR Loop:
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
+          // For-in loops back to the FOR node itself to iterate.
           return parent;
         } else {
-          return parent.getFirstChild().getNext().getNext();
+          // Standard FOR(init; condition; increment) { body }
+          // computeFollowNode is called when *exiting* a child normally.
+          // Exiting `body`: Follow is the `increment` expression.
+          // Exiting `condition` (evaluates true): Follow is `body`. (Handled by analyze)
+          // Exiting `increment`: Follow is the `condition`. (Handled by analyze loop back)
+          // Exiting `condition` (evaluates false): Follow is after the FOR loop. (Handled by analyze)
+          // Exiting `init`: Follow is the `condition`. (Handled by analyze)
+          // This function determines the successor after normal block execution.
+          // If 'node' is the body, the normal follow is the increment.
+          if (node == parent.getLastChild()) { // Assuming body is last child
+             return parent.getFirstChild().getNext().getNext(); // The increment node
+          } else {
+             // If exiting condition or init, should be handled by analyze method's logic.
+             // Fallback to parent's follow, although analyze should handle jumps directly.
+             return computeFollowNode(fromNode, parent, cfa);
           }
+        }
+
+      // WHILE/DO-WHILE Loops: After the body, control loops back to the condition check.
       case Token.WHILE:
       case Token.DO:
-        return parent;
+        return parent; // The WHILE/DO node itself represents the condition check.
+
+      // TRY/CATCH/FINALLY:
       case Token.TRY:
-        // If we are coming out of the TRY block...
+        Node finallyBlock = NodeUtil.getFinallyBlock(parent);
+        // Exiting the main TRY block normally:
         if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
-            return computeFollowNode(fromNode, parent, cfa);
-          }
-        // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
+          if (finallyBlock != null) {
+            return computeFallThrough(finallyBlock); // Go to FINALLY block.
           } else {
-            return computeFollowNode(fromNode, parent, cfa);
+            return computeFollowNode(fromNode, parent, cfa); // Go to code after TRY statement.
           }
-        // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
-          if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
         }
+        // Exiting the CATCH block normally:
+        Node catchBlock = NodeUtil.getCatchBlock(parent);
+        if (catchBlock != null && catchBlock == node) {
+          if (finallyBlock != null) {
+            return computeFallThrough(finallyBlock); // Go to FINALLY block.
+          } else {
+            return computeFollowNode(fromNode, parent, cfa); // Go to code after TRY statement.
           }
-          return computeFollowNode(fromNode, parent, cfa);
         }
+        // Exiting the FINALLY block normally:
+        if (finallyBlock != null && finallyBlock == node) {
+          // After normal execution of FINALLY, control flows to whatever follows the TRY statement.
+          // Handling of jumps (break, return, throw) that passed through FINALLY
+          // is done by the main analysis logic, not here.
+          return computeFollowNode(fromNode, parent, cfa); // Go to code after TRY statement.
         }
+        // If node is not a recognized child of TRY, structure is invalid.
+        // Original code might fall through; prevent this explicitly.
+        break; // Added break for robustness.
+    } // End switch
 
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
+    // Default behavior for statements in sequence: flow to the next sibling.
     Node nextSibling = node.getNext();
 
-    // Skip function declarations because control doesn't get pass into it.
+    // Skip function declarations, as control doesn't flow into them sequentially.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
+      // If a valid next sibling exists, compute its fall-through entry point.
       return computeFallThrough(nextSibling);
     } else {
-      // If there are no more siblings, control is transferred up the AST.
+      // No more siblings; control flow transfers up to the parent's successor.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
