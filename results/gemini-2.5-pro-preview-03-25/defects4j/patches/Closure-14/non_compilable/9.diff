diff --git a/tmp/07689ee6-08c0-47f1-aa57-1bfc57cf6da3_buggy.java b/tmp/bb58f47c-d6fc-4132-aee3-3c12229d5214_fixed.java
index bf9bb88..c6ceb12 100644
--- a/tmp/07689ee6-08c0-47f1-aa57-1bfc57cf6da3_buggy.java
+++ b/tmp/bb58f47c-d6fc-4132-aee3-3c12229d5214_fixed.java
@@ -1,108 +1,136 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
    * @param fromNode The original source node since {@code node} is changed
    *        during recursion.
    * @param node The node that follow() should compute.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
     Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
       case Token.CASE:
       case Token.DEFAULT_CASE:
-        // After the body of a CASE, the control goes to the body of the next
-        // case, without having to go to the case condition.
-        if (parent.getNext() != null) {
-          if (parent.getNext().isCase()) {
-            return parent.getNext().getFirstChild().getNext();
-          } else if (parent.getNext().isDefaultCase()) {
-            return parent.getNext().getFirstChild();
-          } else {
-            Preconditions.checkState(false, "Not reachable");
+        // After the body of a CASE or DEFAULT_CASE, control falls through
+        // to the next CASE or DEFAULT_CASE's body, or out of the SWITCH.
+        Node switchBlock = parent.getParent();
+        Node nextCase = parent.getNext();
+        // Find the next CASE or DEFAULT_CASE sibling
+        while (nextCase != null && !nextCase.isCase() && !nextCase.isDefaultCase()) {
+          // Skip comments or other nodes between cases? Should not happen in normalized AST.
+          nextCase = nextCase.getNext();
+        }
+
+        if (nextCase != null) { // Found next case/default
+            Node targetBlock;
+            if (nextCase.isCase()) {
+                // CASE -> expr, block. We need the block.
+                targetBlock = nextCase.getLastChild();
+            } else { // DEFAULT_CASE -> block. We need the block.
+                targetBlock = nextCase.getFirstChild();
             }
+            Preconditions.checkState(targetBlock != null && targetBlock.isBlock());
+            return computeFallThrough(targetBlock);
         } else {
-          return computeFollowNode(fromNode, parent, cfa);
+            // No more cases/defaults, control leaves the switch.
+            // The follow is the follow of the parent SWITCH node.
+            Node switchNode = switchBlock.getParent();
+            return computeFollowNode(fromNode, switchNode, cfa);
         }
-        break;
+        // break; // Unreachable due to returns.
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
+          // For-in loops are essentially while loops.
           return parent;
         } else {
+          // Regular FOR loop, control goes to the increment expression.
+          // FOR init; cond; incr BODY
           return parent.getFirstChild().getNext().getNext();
         }
       case Token.WHILE:
       case Token.DO:
+        // Control flows back to the loop condition.
         return parent;
       case Token.TRY:
+        Node tryBlock = parent.getFirstChild();
+        Node catchBlock = NodeUtil.getCatchBlock(parent); // BLOCK node inside CATCH
+        Node finallyBlock = NodeUtil.getFinallyBlock(parent); // BLOCK node inside FINALLY
+
         // If we are coming out of the TRY block...
-        if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
+        if (tryBlock == node) {
+          if (finallyBlock != null) { // and have FINALLY block.
+            // Normal fallthrough from TRY goes to FINALLY.
+            return computeFallThrough(finallyBlock);
           } else { // and have no FINALLY.
+            // Normal fallthrough follows the TRY statement.
             return computeFollowNode(fromNode, parent, cfa);
           }
-        // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
-          } else {
+        // If we are coming out of the CATCH block...
+        } else if (catchBlock == node) {
+          if (finallyBlock != null) { // and have FINALLY block.
+             // Normal fallthrough from CATCH goes to FINALLY.
+            return computeFallThrough(finallyBlock);
+          } else { // and have no FINALLY.
+            // Normal fallthrough follows the TRY statement.
             return computeFollowNode(fromNode, parent, cfa);
           }
         // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
-          if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
-            }
-          }
+        } else if (finallyBlock == node) {
+          // Normal fallthrough after FINALLY follows the TRY statement.
+          // Jumps (break/continue/return/throw) that led to the finally
+          // are handled by the CFG builder when the finally block completes,
+          // using the finallyMap. This function only computes fall-through.
           return computeFollowNode(fromNode, parent, cfa);
         }
+        // It is possible that node is the CATCH node itself, but typically
+        // this function is called with the last node *inside* a block.
+        // If none of the above match, control flow falls through to sibling logic below.
+        break;
     }
 
     // Now that we are done with the special cases follow should be its
     // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
 
     // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
