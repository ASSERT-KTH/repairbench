diff --git a/tmp/55ec2bea-4a63-4a1a-b66b-c001ecf1960f_buggy.java b/tmp/c97c59c5-b1ba-410c-accd-eef974e35ed2_fixed.java
index bf9bb88..946c68b 100644
--- a/tmp/55ec2bea-4a63-4a1a-b66b-c001ecf1960f_buggy.java
+++ b/tmp/c97c59c5-b1ba-410c-accd-eef974e35ed2_fixed.java
@@ -1,108 +1,125 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
    * @param fromNode The original source node since {@code node} is changed
    *        during recursion.
    * @param node The node that follow() should compute.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
     Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
       case Token.CASE:
       case Token.DEFAULT_CASE:
         // After the body of a CASE, the control goes to the body of the next
         // case, without having to go to the case condition.
         if (parent.getNext() != null) {
           if (parent.getNext().isCase()) {
             return parent.getNext().getFirstChild().getNext();
           } else if (parent.getNext().isDefaultCase()) {
             return parent.getNext().getFirstChild();
           } else {
             Preconditions.checkState(false, "Not reachable");
           }
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
-        break;
+        break; // Should be break instead of fallthrough
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
+          // For-in loops are essentially while loops.
           return parent;
         } else {
+          // Regular for loops have an increment structure.
+          // The follow of the body is the increment expression
           return parent.getFirstChild().getNext().getNext();
         }
       case Token.WHILE:
       case Token.DO:
-        return parent;
+        return parent; // The follow of the body is the loop itself.
       case Token.TRY:
+        Node tryBlock = parent.getFirstChild();
+        Node catchBlock = NodeUtil.getCatchBlock(parent);
+        Node finallyBlock = NodeUtil.getFinallyBlock(parent);
+
         // If we are coming out of the TRY block...
-        if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
+        if (tryBlock == node) {
+          if (finallyBlock != null) { // and have FINALLY block.
+            // Fall through TRY block goes to FINALLY.
+            return computeFallThrough(finallyBlock);
           } else { // and have no FINALLY.
+            // Fall through TRY block skips CATCH block. Go to code after TRY.
             return computeFollowNode(fromNode, parent, cfa);
           }
-        // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
+        // If we are coming out of the CATCH block...
+        } else if (catchBlock != null && catchBlock == node) {
+          if (finallyBlock != null) { // and have FINALLY block.
+            // Fall through CATCH block goes to FINALLY.
+            return computeFallThrough(finallyBlock);
           } else {
+            // Fall through CATCH block goes to code after TRY.
             return computeFollowNode(fromNode, parent, cfa);
           }
         // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
-          if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
-            }
-          }
+        } else if (finallyBlock != null && finallyBlock == node) {
+          // The side effect mentioned in the Javadoc and implemented here
+          // (creating edges from fromNode to finally targets) was incorrect.
+          // Edge creation from the end of the finally block to the
+          // appropriate targets (for both normal and abrupt completions)
+          // is handled in ControlFlowAnalysis.visitTry using the finallyMap.
+          // computeFollowNode should just return the node that follows the
+          // entire TRY statement in normal control flow.
           return computeFollowNode(fromNode, parent, cfa);
         }
+        // If node is none of the above (e.g. the CATCH node itself, not its block)
+        // fall through to default sibling logic. This shouldn't happen if node
+        // is one of the TRY statement's block children.
+        break;
     }
 
     // Now that we are done with the special cases follow should be its
     // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
 
     // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
