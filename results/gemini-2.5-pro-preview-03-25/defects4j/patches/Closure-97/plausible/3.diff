diff --git a/tmp/efc610dd-22b8-4aa3-a187-f3a4c9247690_buggy.java b/tmp/d2586821-d7bb-4086-bcc7-5e86131fa632_fixed.java
index 1126687..8d7f71a 100644
--- a/tmp/efc610dd-22b8-4aa3-a187-f3a4c9247690_buggy.java
+++ b/tmp/d2586821-d7bb-4086-bcc7-5e86131fa632_fixed.java
@@ -1,65 +1,76 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
+      // While JavaScript's ToInt32 operation handles clipping, we follow
+      // the compiler's apparent intent to warn on potentially unexpected clipping.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // only the lower 5 bits are used when shifting in JavaScript (mask with 0x1F).
+      // However, the compiler wants to warn for shifts outside [0,32).
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Convert the numbers to ints. JavaScript's ToInt32/ToUint32 truncates.
+      // The compiler requires integer operands for folding.
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      // The shift amount is masked with 0x1F in JavaScript.
+      // Although we check for [0, 32) above, use the masked value
+      // for actual calculation to match JS behavior precisely for valid inputs.
+      int shiftAmount = rvalInt & 0x1F;
+
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          result = lvalInt << shiftAmount;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          result = lvalInt >> shiftAmount;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript's >>> operator returns an unsigned 32-bit result.
+          // Java's >>> performs the correct bitwise operation, but the result
+          // is treated as signed int. To get the correct numerical value
+          // matching JavaScript, we convert the resulting bits to a long,
+          // treating them as unsigned, and then to a double.
+          int intResult = lvalInt >>> shiftAmount;
+          result = intResult & 0xFFFFFFFFL; // Treat bits as unsigned 32-bit
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
