diff --git a/tmp/9d3944c2-5623-4b48-9142-39ec609838ff_buggy.java b/tmp/9e224966-7d18-4168-b88c-c0ce2e18dc36_fixed.java
index 1126687..24313a2 100644
--- a/tmp/9d3944c2-5623-4b48-9142-39ec609838ff_buggy.java
+++ b/tmp/9e224966-7d18-4168-b88c-c0ce2e18dc36_fixed.java
@@ -1,65 +1,80 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
+      // JavaScript bitwise operations implicitly convert operands to Int32.
+      // We only fold if the operand is precisely representable as an Int32
+      // by the host platform's double representation.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
+      // JavaScript bitwise operations implicitly convert the shift amount
+      // to Uint32 and then use the lower 5 bits (mask with 0x1F).
+      // We only fold if the shift amount is an integer in the range [0, 31].
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
+          // JavaScript: ToInt32(lval) << (ToUint32(rval) & 0x1F)
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
+          // JavaScript: ToInt32(lval) >> (ToUint32(rval) & 0x1F)
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript: ToUint32(lval) >>> (ToUint32(rval) & 0x1F)
+          // Java's >>> operator performs the unsigned shift correctly
+          // on the bits. However, the result is an int. To represent
+          // the result as JavaScript would (a Number, which is a double,
+          // capable of representing unsigned 32-bit values), we need to
+          // convert the resulting bits (interpreted as unsigned) to double.
+          // Casting the result of >>> to long and masking with 0xFFFFFFFFL
+          // achieves this, correctly handling cases like (-1 >>> 0) which
+          // should result in 4294967295.0.
+          long unsignedResult = (lvalInt >>> rvalInt) & 0xFFFFFFFFL;
+          result = unsignedResult;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
