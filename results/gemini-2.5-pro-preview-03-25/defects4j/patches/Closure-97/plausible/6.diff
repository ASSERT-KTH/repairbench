diff --git a/tmp/79e6ac55-1867-49cb-899d-54ba24d7b22c_buggy.java b/tmp/4a96c6a8-ad6c-47b8-b7bc-d6ad4c587adf_fixed.java
index 1126687..6619723 100644
--- a/tmp/79e6ac55-1867-49cb-899d-54ba24d7b22c_buggy.java
+++ b/tmp/4a96c6a8-ad6c-47b8-b7bc-d6ad4c587adf_fixed.java
@@ -1,65 +1,90 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
+      // Note: This check differs slightly from the ECMA specification section
+      // 11.7 but works in practice for safe integer values. It prevents folding
+      // for large doubles that would lose precision or change value through
+      // the ToInt32/ToUint32 conversions implicit in JavaScript's bitwise ops.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // only the lower 5 bits are used when shifting, according to ECMAScript spec
+      // so check if the shift amount is outside [0, 31]. Note that the result
+      // of ToUint32(rval) & 0x1F is used, so we check the original double rval.
+      // We restrict folding to non-negative integer shifts for simplicity and safety.
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Convert the numbers to ints. Check for fractional parts.
+      // The previous range check ensures lval fits in signed int range.
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
+      // Check rval for fractional parts.
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      // Check that the rvalInt is still in the valid range [0, 31] after cast.
+      // This check is technically redundant given the previous double check and
+      // the rvalInt != rval check, but kept for clarity.
+      if (rvalInt < 0 || rvalInt >= 32) {
+         // This case should ideally not be reached due to earlier checks.
+         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+         return n;
+      }
+
+
       switch (n.getType()) {
         case Token.LSH:
+          // JavaScript << performs ToInt32(lval) << (ToUint32(rval) & 0x1F)
+          // Java's << on int performs a similar operation.
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
+          // JavaScript >> performs ToInt32(lval) >> (ToUint32(rval) & 0x1F)
+          // Java's >> on int performs a similar signed right shift.
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript >>> performs ToUint32(lval) >>> (ToUint32(rval) & 0x1F)
+          // Java's >>> on int results in an int, which can be negative if the
+          // high bit is set. To mimic JS's unsigned result accurately,
+          // we convert lvalInt to its unsigned 32-bit representation using a long,
+          // perform the shift, and store the result (which fits in double).
+          long unsignedLval = lvalInt & 0xFFFFFFFFL;
+          result = unsignedLval >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
