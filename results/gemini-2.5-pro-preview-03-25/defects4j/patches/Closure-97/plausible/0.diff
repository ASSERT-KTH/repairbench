diff --git a/tmp/46f89800-706f-434e-926a-e2bc39799953_buggy.java b/tmp/f939942e-cb27-4821-bd2b-0c2a6cc5187b_fixed.java
index 1126687..884afcd 100644
--- a/tmp/46f89800-706f-434e-926a-e2bc39799953_buggy.java
+++ b/tmp/f939942e-cb27-4821-bd2b-0c2a6cc5187b_fixed.java
@@ -1,65 +1,78 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
+      // check ranges. The operands must be convertible to 32-bit integers.
+      // We restrict the left operand to the signed 32-bit range for predictability,
+      // as values outside this range after ToInt32 conversion might surprise users.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // The shift amount is coerced ToUint32 and masked to 5 bits (0-31).
+      // We only fold if the original shift amount is representable as an
+      // integer in the range [0, 32), as fractional or out-of-range shifts
+      // might indicate programmer error or mask unexpected behavior.
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Convert the numbers to ints. JavaScript bitwise operations
+      // perform ToInt32 on operands. Report error for fractional values
+      // as they are often unintended in bitwise contexts.
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      // In JS, the shift amount is masked to 5 bits (0-31).
+      // rvalInt &= 0x1F; // This is technically redundant due to the rval check above.
+
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript's unsigned right shift results in a value between
+          // 0 and 2^32 - 1. Java's >>> operator performs the correct bitwise
+          // operation, but the result is an int. To represent the unsigned
+          // result correctly as a double (which JavaScript numbers are),
+          // we convert the int result bits to a long using a mask,
+          // ensuring the value is interpreted as unsigned.
+          int unsignedResult = lvalInt >>> rvalInt;
+          // Convert the unsigned 32-bit value to double.
+          result = (unsignedResult & 0xFFFFFFFFL);
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
