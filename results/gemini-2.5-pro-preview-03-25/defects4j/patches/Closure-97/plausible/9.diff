diff --git a/tmp/abb216bd-b4ec-4f04-b28f-6ce25a83fe24_buggy.java b/tmp/3257fe1f-1d7c-4b90-8c24-3a99a5eb28f6_fixed.java
index 1126687..6e83db0 100644
--- a/tmp/abb216bd-b4ec-4f04-b28f-6ce25a83fe24_buggy.java
+++ b/tmp/3257fe1f-1d7c-4b90-8c24-3a99a5eb28f6_fixed.java
@@ -1,65 +1,81 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
+      // JavaScript VMs would wrap overflows, but we don't handle that.
+      // TODO(johnlenz): Handle this case. BITWISE_OPERAND_OUT_OF_RANGE
+      // error expects the original Node.
+      // http://b/5669240
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // Check ranges. Only the lower 5 bits of the shift amount are used in
+      // JavaScript. The compile should not fold shifts by amounts outside
+      // the lower 5 bits, as the user likely does not intend the shift amount
+      // modulo 32 behavior.
       if (!(rval >= 0 && rval < 32)) {
+        // http://b/5669240
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
+        // http://b/5669240
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
+        // http://b/5669240
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      // The shift amount is coerced to an unsigned 32-bit integer, but the
+      // JS spec says that only the lower 5 bits are used. This is already
+      // enforced by the check above.
+
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript performs >>> on 32-bit integers and the result is
+          // treated as an unsigned 32-bit integer. Java performs >>> on signed
+          // integers. To emulate JavaScript's behavior, we cast the result
+          // of Java's >>> to long and mask it with 0xFFFFFFFFL to ensure
+          // the value is interpreted as unsigned before converting to double.
+          long unsignedResult = (lvalInt >>> rvalInt) & 0xFFFFFFFFL;
+          result = unsignedResult;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
