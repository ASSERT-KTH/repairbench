diff --git a/tmp/35e3f913-1168-41c6-84b9-2f3339c3933b_buggy.java b/tmp/2aa00e1e-2d59-4d14-95bd-c04f2ee022b2_fixed.java
index 1126687..34340f2 100644
--- a/tmp/35e3f913-1168-41c6-84b9-2f3339c3933b_buggy.java
+++ b/tmp/2aa00e1e-2d59-4d14-95bd-c04f2ee022b2_fixed.java
@@ -1,65 +1,70 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
+      // Per JS spec ToInt32 is applied to the left operand.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // if the shift amount is outside [0,32).
+      // Per JS spec ToUint32 is applied to the right operand, then the result
+      // is masked with 0x1F. The check [0,32) achieves the same result.
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript performs ToUint32 on the result of the shift.
+          // Java's >>> operator results in a signed integer, so mask
+          // with 0xFFFFFFFFL to treat the result as unsigned before
+          // converting to double.
+          long urshResult = (lvalInt >>> rvalInt) & 0xFFFFFFFFL;
+          result = urshResult;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
