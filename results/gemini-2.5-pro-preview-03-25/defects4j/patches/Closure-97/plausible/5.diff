diff --git a/tmp/8f294886-6cc0-4f4c-9a1c-9f24e083d13f_buggy.java b/tmp/a5a83776-3a24-49b9-9276-374cb6997b73_fixed.java
index 1126687..ee13ab6 100644
--- a/tmp/8f294886-6cc0-4f4c-9a1c-9f24e083d13f_buggy.java
+++ b/tmp/a5a83776-3a24-49b9-9276-374cb6997b73_fixed.java
@@ -1,65 +1,77 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
+      // JavaScript's ToInt32/ToUint32 specification handles wrapping,
+      // but we treat values outside the signed 32-bit range as an error.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
+      // Note: JavaScript engines may wrap the shift amount using ToUint32
+      //       and then mask to 5 bits, but warning is safer.
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Check for fractional values. JavaScript's ToInt32/ToUint32 truncates,
+      // but we report this as an error.
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      // rvalInt is now safely in the range [0, 31].
+
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript's >>> operator treats the left operand as unsigned 32-bit.
+          // We must use long to mimic this behavior, as Java's >>> on int
+          // operates on the signed int value.
+          // (lvalInt & 0xFFFFFFFFL) converts the int bits to an unsigned value
+          // stored in a long. The subsequent >>> operates correctly on this value.
+          long lvalUnsigned = lvalInt & 0xFFFFFFFFL;
+          result = lvalUnsigned >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
+      // The result is a double. Node.newNumber handles this.
+      // It can accurately represent all integer values resulting from 32-bit shifts.
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
