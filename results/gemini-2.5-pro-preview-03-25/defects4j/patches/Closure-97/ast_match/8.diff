diff --git a/tmp/ca0afcc6-1b9f-4ee2-82bb-b9bc2907a703_buggy.java b/tmp/d82df464-ec70-4916-a29e-96fa1dabcb6a_fixed.java
index 1126687..24b0646 100644
--- a/tmp/ca0afcc6-1b9f-4ee2-82bb-b9bc2907a703_buggy.java
+++ b/tmp/d82df464-ec70-4916-a29e-96fa1dabcb6a_fixed.java
@@ -1,65 +1,73 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
+      // JavaScript bitwise operators act on 32-bit integers. Anything
+      // outside this range is not foldable.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
+      // While the ECMA spec says the shift amount is &= 0x1f,
+      // Brewmaster says V8 and JSC don't follow the spec and throw for
+      // shift amounts outside the range [0, 32). Fold based on this.
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript performs >>> on 32-bit unsigned integers.
+          // Convert the left operand to unsigned 32-bit representation
+          // before shifting. A long is needed to hold the unsigned value
+          // correctly if the most significant bit is set.
+          // Cast to long first to avoid sign extension, then mask.
+          long lvalLong = lvalInt & 0xFFFFFFFFL;
+          result = lvalLong >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
