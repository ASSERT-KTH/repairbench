diff --git a/tmp/601739b6-0887-4a8d-a23e-4264373d0351_buggy.java b/tmp/efee90c7-2f54-4d41-8983-46c24ea3f8c8_fixed.java
index 6b8185e..44c918d 100644
--- a/tmp/601739b6-0887-4a8d-a23e-4264373d0351_buggy.java
+++ b/tmp/efee90c7-2f54-4d41-8983-46c24ea3f8c8_fixed.java
@@ -1,77 +1,116 @@
+import java.nio.charset.Charset;
+import java.nio.charset.CharsetEncoder;
+import java.util.Map;
+
+import org.jsoup.helper.StringUtil;
+import org.jsoup.internal.Entities;
+import org.jsoup.internal.Entities.CoreCharset;
+import org.jsoup.internal.Entities.EscapeMode;
+
+// Assuming Document, OutputSettings are available in the context.
+// Placeholder for missing types to allow compilation checking.
+class Document {
+    static class OutputSettings {
+        EscapeMode escapeMode() { return EscapeMode.base; }
+        CharsetEncoder encoder() { return Charset.forName("UTF-8").newEncoder(); }
+        Charset charset() { return Charset.forName("UTF-8"); }
+    }
+}
+
+class Scratch {
     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
     static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                        boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
 
         boolean lastWasWhite = false;
         boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
         final CharsetEncoder encoder = out.encoder();
         final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
 
         int codePoint;
         for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
             codePoint = string.codePointAt(offset);
 
             if (normaliseWhite) {
                 if (StringUtil.isWhitespace(codePoint)) {
                     if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                         continue;
                     accum.append(' ');
                     lastWasWhite = true;
                     continue;
                 } else {
                     lastWasWhite = false;
                     reachedNonWhite = true;
                 }
             }
             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                 final char c = (char) codePoint;
                 // html specific and required escapes:
                 switch (c) {
                     case '&':
                         accum.append("&amp;");
                         break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
+                    case 0xA0: // nbsp
+                        if (escapeMode != EscapeMode.xhtml) {
                             accum.append("&nbsp;");
-                        else
-                            accum.append(c);
-                        break;
+                            break; // only break if handled, otherwise fall through to default for xml mode
+                        }
+                        // if escapeMode == xhtml, fall through to default case, which will escape if invalid instead of outputting literal
                     case '<':
-                        if (!inAttribute)
+                        // escape < unless in attribute
+                        if (!inAttribute || escapeMode == EscapeMode.xhtml) // Fix: Also escape in XHTML attributes, which browsers tolerate but spec requires escaped
                             accum.append("&lt;");
                         else
                             accum.append(c);
                         break;
                     case '>':
+                        // Note: not escaping > in attribute values, per spec
                         if (!inAttribute)
                             accum.append("&gt;");
                         else
                             accum.append(c);
                         break;
                     case '"':
                         if (inAttribute)
                             accum.append("&quot;");
                         else
                             accum.append(c);
                         break;
                     default:
+                        // handles OutputSettings.ESC.xhtml falling through for nbsp
                         if (canEncode(coreCharset, c, encoder))
                             accum.append(c);
                         else if (map.containsKey(c))
                             accum.append('&').append(map.get(c)).append(';');
                         else
                             accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
                 }
             } else {
                 final String c = new String(Character.toChars(codePoint));
                 if (encoder.canEncode(c)) // uses fallback encoder for simplicity
                     accum.append(c);
                 else
                     accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
             }
         }
     }
+
+    // Helper method provided by Entities - needed for the escape method. Assume it exists.
+    private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback) {
+        if (charset == null) // non-core, use fallback
+             return fallback.canEncode(c);
+
+         switch (charset) {
+             case ascii:
+                 return c < 0x80;
+             case utf:
+                 return true; // real check done later by encoder
+             default:
+                 return fallback.canEncode(c);
+         }
+    }
+}
