diff --git a/tmp/a01f6995-98de-4dde-a5bb-5233aa5d9211_buggy.java b/tmp/f53a22c7-b67a-44c9-8d50-42cfc1500932_fixed.java
index 6b8185e..76608cd 100644
--- a/tmp/a01f6995-98de-4dde-a5bb-5233aa5d9211_buggy.java
+++ b/tmp/f53a22c7-b67a-44c9-8d50-42cfc1500932_fixed.java
@@ -1,77 +1,94 @@
     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
     static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                        boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
 
         boolean lastWasWhite = false;
         boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
         final CharsetEncoder encoder = out.encoder();
         final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
 
         int codePoint;
         for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
             codePoint = string.codePointAt(offset);
 
             if (normaliseWhite) {
                 if (StringUtil.isWhitespace(codePoint)) {
                     if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                         continue;
                     accum.append(' ');
                     lastWasWhite = true;
                     continue;
                 } else {
                     lastWasWhite = false;
                     reachedNonWhite = true;
                 }
             }
             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                 final char c = (char) codePoint;
+                boolean handled = true; // Will be false if needs default handling
+
                 // html specific and required escapes:
                 switch (c) {
                     case '&':
                         accum.append("&amp;");
                         break;
-                    case 0xA0:
+                    case 0xA0: // nbsp
                         if (escapeMode != EscapeMode.xhtml)
                             accum.append("&nbsp;");
                         else
-                            accum.append(c);
+                            // In XHTML, fall through to default handling to ensure it's okay to output (canEncode), otherwise use numeric entity
+                            handled = false;
                         break;
                     case '<':
+                        // escape < unless in attribute
                         if (!inAttribute)
                             accum.append("&lt;");
                         else
-                            accum.append(c);
+                            // In attribute, fall through to default handling to ensure it's okay to output (canEncode)
+                           handled = false;
                         break;
                     case '>':
+                        // escape > unless in attribute
                         if (!inAttribute)
                             accum.append("&gt;");
                         else
-                            accum.append(c);
+                            // In attribute, fall through to default handling to ensure it's okay to output (canEncode)
+                           handled = false;
                         break;
                     case '"':
+                        // escape " in attribute
                         if (inAttribute)
                             accum.append("&quot;");
                         else
-                            accum.append(c);
+                            // Not in attribute, fall through to default handling to ensure it's okay to output (canEncode)
+                            handled = false;
                         break;
                     default:
+                        // Does not need specific handling, fall through to default handling
+                        handled = false;
+                        break;
+                }
+
+                // Default handling for characters that were not explicitly handled above
+                if (!handled) {
                     if (canEncode(coreCharset, c, encoder))
                         accum.append(c);
                     else if (map.containsKey(c))
                         accum.append('&').append(map.get(c)).append(';');
                     else
                         accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
                 }
-            } else {
+            } else { // Supplementary character
                 final String c = new String(Character.toChars(codePoint));
-                if (encoder.canEncode(c)) // uses fallback encoder for simplicity
+                // Check if character can be encoded directly (using fallback for simplicity)
+                if (encoder.canEncode(c))
                     accum.append(c);
-                else
+                else // If not encodable, use numeric entity
                     accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
             }
         }
     }
\ No newline at end of file
