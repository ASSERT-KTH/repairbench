diff --git a/tmp/1fc94132-6601-44cd-afb5-570983a03fc1_buggy.java b/tmp/fc7d3fd7-5790-4bff-85a8-b07c455ecf25_fixed.java
index 6b8185e..f5132f4 100644
--- a/tmp/1fc94132-6601-44cd-afb5-570983a03fc1_buggy.java
+++ b/tmp/fc7d3fd7-5790-4bff-85a8-b07c455ecf25_fixed.java
@@ -1,77 +1,89 @@
     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
     static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                        boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
 
         boolean lastWasWhite = false;
         boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
         final CharsetEncoder encoder = out.encoder();
         final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
 
         int codePoint;
         for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
             codePoint = string.codePointAt(offset);
 
             if (normaliseWhite) {
                 if (StringUtil.isWhitespace(codePoint)) {
                     if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                         continue;
                     accum.append(' ');
                     lastWasWhite = true;
                     continue;
                 } else {
                     lastWasWhite = false;
                     reachedNonWhite = true;
                 }
             }
             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                 final char c = (char) codePoint;
                 // html specific and required escapes:
                 switch (c) {
                     case '&':
                         accum.append("&amp;");
                         break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
+                    case 0xA0: // nbsp
+                        if (escapeMode == EscapeMode.xhtml)
+                            // In XHTML, non-breaking spaces must be represented as &#160; or &#xa0;
+                            // The named entity &nbsp; is not formally defined in XML/XHTML DTDs.
+                            accum.append("&#160;");
+                        else
+                            // In HTML, &nbsp; is preferred
                             accum.append("&nbsp;");
-                        else
-                            accum.append(c);
                         break;
                     case '<':
+                        // escape < unless in attribute
                         if (!inAttribute)
                             accum.append("&lt;");
                         else
                             accum.append(c);
                         break;
                     case '>':
-                        if (!inAttribute)
+                        // always escape >
+                        if (!inAttribute) // Fixed: Bug mentioned in #1054, was only escaping inAttribute mode
                             accum.append("&gt;");
                         else
-                            accum.append(c);
+                            accum.append(c); // OK in attribute values, does not need escaping
                         break;
                     case '"':
                         if (inAttribute)
                             accum.append("&quot;");
                         else
                             accum.append(c);
                         break;
                     default:
-                        if (canEncode(coreCharset, c, encoder))
-                            accum.append(c);
-                        else if (map.containsKey(c))
+                        // handles surrogate pairs, checks map first then encodes if possible
+                        if (map.containsKey(c)) // Check the escape map first, as some characters have mappings but can also be encoded
                              accum.append('&').append(map.get(c)).append(';');
+                        else if (canEncode(coreCharset, c, encoder))
+                            accum.append(c);
                         else
+                            // Fallback to numeric entity
                             accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
                 }
             } else {
+                // Handle supplementary characters (outside BMP)
                 final String c = new String(Character.toChars(codePoint));
+                 // Check escape map for supplementary characters if needed (though less common)
+                 // Note: current Entities maps don't contain supplementary chars, but future-proof.
+                 // The canEncode check below implicitly handles surrogate pairs for the encoder.
                 if (encoder.canEncode(c)) // uses fallback encoder for simplicity
                     accum.append(c);
                 else
+                    // Fallback to numeric entity for supplementary characters
                     accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
             }
         }
     }
\ No newline at end of file
