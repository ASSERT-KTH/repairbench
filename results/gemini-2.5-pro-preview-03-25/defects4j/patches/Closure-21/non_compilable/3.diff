diff --git a/tmp/4091aee7-c07b-4837-85f4-5c71c1c2add2_buggy.java b/tmp/b3a8fd05-7d5b-4b0c-9153-a00363e74648_fixed.java
index 49a5702..4dcd0ed 100644
--- a/tmp/4091aee7-c07b-4837-85f4-5c71c1c2add2_buggy.java
+++ b/tmp/b3a8fd05-7d5b-4b0c-9153-a00363e74648_fixed.java
@@ -1,66 +1,129 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    if (n.isEmpty()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
+    // We are only interested in expressions that are statements or part of
+    // a comma sequence that is itself a statement.
+    boolean isResultUsed = true; // Assume used by default.
+    if (parent.isExprResult() || parent.isBlock()) {
+      // Standard statement context. Result is unused unless NodeUtil says otherwise.
+      isResultUsed = NodeUtil.isExpressionResultUsed(n);
+    } else if (parent.isComma()) {
+      // For comma operator, only the result of the last expression is used.
+      if (n != parent.getLastChild()) {
+         // Not the last child, result is never used in the comma expression itself.
+         isResultUsed = false;
+      } else {
+         // Last child. The result is used *by the comma expression*.
+         // Check if the comma expression's result is used by its parent context.
+         isResultUsed = NodeUtil.isExpressionResultUsed(parent);
+      }
+    } else if (parent.isFor() && parent.getChildCount() == 4) {
+       // Check FOR(init; cond; incr) structure.
+       Node condition = parent.getSecondChild();
+       Node increment = parent.getChildAtIndex(2);
+       if (n == condition) {
+         // Result of condition is used by FOR.
+         isResultUsed = true;
+       } else if (n == parent.getFirstChild() || n == increment) {
+         // Result of initializer or increment is not used by FOR.
+         isResultUsed = false;
+       } else {
+         // Must be the body node (or something unexpected). Assume result is used or handled elsewhere.
+         return;
+       }
+    } else {
+        // Expression is in some other context (assignment rhs, array literal, etc.)
+        // NodeUtil.isExpressionResultUsed should determine if the value is used.
+        // If used, we don't warn. If unused, it's likely not a "statement" context
+        // where this warning is typically desired (e.g., `[1, 2]`).
+        if (NodeUtil.isExpressionResultUsed(n)) {
+            return;
+        } else {
+            // Result is unused, but not in a standard statement context. Avoid warning.
+            return;
+        }
+    }
+
+    // If the result is used, don't report a warning.
     if (isResultUsed) {
         return;
     }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+
+    // If we reach here, the expression's result is not used in its context.
+    // Now, check if the expression itself lacks side effects or is purely computational.
+
+    boolean lacksSideEffects = !NodeUtil.mayHaveSideEffects(n, t.getCompiler());
+    boolean isComputationalOperator = false;
+    // Check if the node type represents an operator whose primary purpose
+    // isn't side effects, even if operands might have them (e.g., ==, +, !, typeof).
+    // These are operators where discarding the result is suspicious.
+    switch (n.getType()) {
+        // Unary operators
+        case Token.POS: case Token.NEG: case Token.BITNOT: case Token.NOT:
+        case Token.TYPEOF: case Token.VOID:
+        // Comparison operators
+        case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE:
+        case Token.LT: case Token.GT: case Token.LE: case Token.GE:
+        case Token.INSTANCEOF: case Token.IN:
+        // Binary arithmetic/bitwise operators
+        case Token.ADD: case Token.SUB: case Token.MUL: case Token.DIV: case Token.MOD:
+        case Token.LSH: case Token.RSH: case Token.URSH:
+        case Token.BITOR: case Token.BITXOR: case Token.BITAND:
+        // Property accessors are typically side-effect free but compute a value.
+        case Token.GETPROP: case Token.GETELEM:
+            isComputationalOperator = true;
+            break;
     }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
-      }
-    }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
-      String msg = "This code lacks side-effects. Is there a bug?";
+
+    // Warn if the expression provably lacks side effects OR is a computational operator
+    // whose result is discarded.
+    if (lacksSideEffects || isComputationalOperator) {
+      String msg = "This code lacks side effects and its result is not used."; // Default
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
-      } else if (isSimpleOp) {
+      } else if (isComputationalOperator && !n.isGetProp() && !n.isGetElem()
+                 && !n.isQualifiedName() && !n.isName()) {
+         // Specific message for operators like ==, +, typeof, etc.
          msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
+      } else if (n.isQualifiedName() || n.isName() || n.isGetProp() || n.isGetElem()) {
+         // Specific message for unused names/properties like `a.b;` or `myVar;`
+         msg = "This name/property stands alone and has no apparent side effects.";
       }
+      // Else: Keep the default message for other cases like `5;`
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
+
+      // Keep original problemNodes logic for potential follow-up passes.
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
