diff --git a/tmp/9bf7d9c4-e7e7-4c10-8729-a141b95b7073_buggy.java b/tmp/318488d5-b576-451d-a2fb-bb93fc23421c_fixed.java
index 49a5702..9098220 100644
--- a/tmp/9bf7d9c4-e7e7-4c10-8729-a141b95b7073_buggy.java
+++ b/tmp/318488d5-b576-451d-a2fb-bb93fc23421c_fixed.java
@@ -1,66 +1,127 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
-        n.isComma()) {
+        n.isComma()) { // Don't check comma nodes themselves, check their operands.
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
+      // If the EXPR_RESULT is empty, it is usually harmless.
+      // e.g. VAR declarations without assignments register as empty EXPR_RESULT.
+      if (n.hasChildren()) {
+         Node expr = n.getFirstChild();
+         // Allow constant expressions used for JSDoc purposes.
+         if (expr.isQualifiedName() && expr.getJSDocInfo() != null) {
              return;
          }
+         // Check EXPR_RESULT node children later in the control flow.
+      } else {
+         // Empty EXPR_RESULT is OK.
+         return;
+      }
+    }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
+    // Check moved slightly up to handle cases like `/** @type {foo} */ bar.baz;`
+    // which might be inside an EXPR_RESULT node.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
+
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // Now determine if the context requires the expression result.
     if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
+      // For a comma operand, the result is used if it's the last operand AND
+      // the whole comma expression's result is used.
       if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        // isResultUsed already reflects the comma expression's usage context.
+        if (isResultUsed) {
+          return; // Last operand's result is used.
         }
+      } else {
+        // Non-last operand's result is never used by the comma operator itself.
+        isResultUsed = false;
       }
+      // Fall through if result is not used.
+
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+      // Contexts other than EXPR_RESULT, BLOCK, COMMA.
+      // Allow FOR init/incr check to proceed if result is unused.
+      // For all other contexts (ARRAYLIT, OBJECTLIT value, ASSIGN rhs, etc.),
+      // assume the expression is needed, or handled elsewhere. The original logic
+      // returned here unless it was a FOR init/incr.
+       if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+             (n == parent.getFirstChild() || n == parent.getChildAtIndex(2)))) {
+          // If the result is used in these contexts, we should definitely bail.
+          // If not used (e.g. `[1, 2, 3]`), the original code returned, let's keep that.
+          if (isResultUsed) {
+             return;
+          }
+          // It's potentially useless code, but not in a statement context.
+          // Avoid warning for now, consistent with original logic.
+          return;
+       } else {
+         // For FOR init/incr, proceed only if the result is not used.
+         if (isResultUsed) {
+            return;
+         }
+       }
+    } else {
+      // Parent is EXPR_RESULT or BLOCK. Result is definitely not used if we're here.
+      // NodeUtil.isExpressionResultUsed should return false. Assert?
+      // Sanity check: if isResultUsed is true, NodeUtil is wrong.
+      if (isResultUsed) {
+        // This should not happen based on NodeUtil's documented behavior.
+        // If it does, returning prevents a potentially incorrect warning.
         return;
       }
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+
+    // If we reach here, the expression's result is not used in its context.
+    // Check if the expression itself lacks side effects or is a simple operator
+    // whose value is unused.
+    if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) || isSimpleOp) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
-      if (!NodeUtil.isStatement(n)) {
+      // problemNodes is used by another pass (RemoveUnusedCode) to remove nodes.
+      // Only add expression nodes, not EXPR_RESULT itself.
+      if (!n.isExprResult() && !NodeUtil.isStatement(n)) {
+         // Check if parent is EXPR_RESULT before adding.
+         // We don't want to remove 'var x = foo();' if foo() has no side effects but result is unused.
+         // Let RemoveUnusedCode handle variable removal.
+         // Only add nodes whose removal is safe and doesn't break structure.
+         // Check if n is directly under EXPR_RESULT or COMMA under EXPR_RESULT etc.
+         // This logic might need refinement depending on RemoveUnusedCode pass.
+         // For now, keep the original condition.
+        if (!NodeUtil.isStatement(n)) { // Original condition
            problemNodes.add(n);
         }
       }
     }
+  }
\ No newline at end of file
