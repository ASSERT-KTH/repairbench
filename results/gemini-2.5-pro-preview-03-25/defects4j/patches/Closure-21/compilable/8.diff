diff --git a/tmp/ea1488dd-990b-4039-ab96-fa748de49815_buggy.java b/tmp/95101a8f-7dd6-456e-87f5-a3425beff11c_fixed.java
index 49a5702..98cec59 100644
--- a/tmp/ea1488dd-990b-4039-ab96-fa748de49815_buggy.java
+++ b/tmp/95101a8f-7dd6-456e-87f5-a3425beff11c_fixed.java
@@ -1,66 +1,95 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
-        n.isComma()) {
+        n.isComma()) { // Don't check COMMA nodes directly. We check their children.
       return;
     }
 
     if (parent == null) {
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+    // Do not check EXPR_RESULT nodes themselves. We are interested in their children.
+    // The results of EXPR_RESULT nodes are never used.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // Determine if the expression's result is implicitly used by the context
+    // in which it appears.
+    // If the parent is not an EXPR_RESULT, BLOCK, or specific FOR structure,
+    // the result is likely used.
+    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
+        // If the node is the last child of a comma operator, its result
+        // might be used by an ancestor. Check the ancestors.
         if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+          boolean usageFound = false;
+          for (Node ancestor : parent.getAncestors()) {
+            int ancestorType = ancestor.getType();
+            if (ancestorType == Token.COMMA) {
+              continue; // Skip intermediate commas
             }
+            // If the ancestor context uses the result (e.g., ASSIGN, RETURN, IF),
+            // then the result is used.
+            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
+              usageFound = true;
+              break;
             }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+            // If we hit the statement level, the result is not used further up.
+            if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {
+              break;
+            }
+          }
+          // If the result of the comma expression was used by an ancestor, return.
+          if (usageFound) {
             return;
           }
+          // Otherwise (result not used), fall through to the side-effect check.
         }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+        // If 'n' is not the last child of a comma, its result is never used.
+        // Fall through to the side-effect check.
+
+      } else if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+                 (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+        // For contexts other than COMMA, EXPR_RESULT, BLOCK:
+        // If the context is not the initializer or increment of a standard FOR loop,
+        // the result is considered used (e.g., condition, assignment RHS, argument).
+        return; // Suppress side-effect check.
+      }
+      // Fall through for FOR initializer/increment and non-last COMMA children.
+    }
+    // Fall through for children of EXPR_RESULT or BLOCK.
+
+    // If we reach here, the expression's result is potentially unused.
+    // Check if the expression lacks side effects or is a simple operator
+    // whose result is unused.
+    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+      // Tag the node for potential removal if it's not a statement node.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
