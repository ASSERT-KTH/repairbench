diff --git a/tmp/f8082e88-652e-44be-b548-21a66a68ab74_buggy.java b/tmp/7d701e74-34e0-46f2-9ea9-c5d5775f092c_fixed.java
index 49a5702..dee1d3a 100644
--- a/tmp/f8082e88-652e-44be-b548-21a66a68ab74_buggy.java
+++ b/tmp/7d701e74-34e0-46f2-9ea9-c5d5775f092c_fixed.java
@@ -1,66 +1,106 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
+    // Allow EXPRESSION statements in VOID contexts to be removed.
     if (n.isExprResult()) {
+      // Allow synthetic EXPR_RESULT nodes created by passes such as
+      // PeepholeRemoveUselessCode. Allowing them here prevents the
+      // CheckSideEffects pass from reporting useless code errors that have already
+      // been fixed.
+      if (n.isSyntheticBlock()) {
         return;
       }
+      // Otherwise, the EXPR_RESULT's child should be checked.
+      // The result of the EXPR_RESULT node is never used.
+    }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
+
+    // Handle special cases in COMMA expressions.
+    if (parent.isComma()) {
+      // If the result is used, it isn't useless.
+      // An example of this is: return x(), y();
       if (isResultUsed) {
         return;
       }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+
+      // If this node is the last child of the comma, then whether the result
+      // is used depends on whether the COMMA's result is used. Let the
+      // logic below handle this case.
+      if (n != parent.getLastChild()) {
+        // Otherwise, if the result is not used, it is useless.
+        // An example of this is: x(), y()
+        if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+          // Report the error.
+          reportUselessCode(t, n);
         }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+        // We don't need to analyze this node any further.
         return;
       }
+    } else if (parent.isExprResult() || parent.isBlock()) {
+      // If the parent is an EXPR_RESULT or BLOCK, the result is not used.
+      // The exception is if the EXPR_RESULT is the child of a label, and
+      // the label is jumped to. But we don't track that here.
+      isResultUsed = false;
+    } else if (parent.isFor() && parent.getChildCount() == 4 &&
+               (n == parent.getFirstChild() || // The init condition
+                n == parent.getFirstChild().getNext().getNext())) { // The increment condition
+      // These results are not used, but continuously dumping warnings
+      // for this case is very annoying. This is a special-case from
+      // the old Rhino CheckSideEffects.
+      return;
     }
-    if (
+
+    // If the code reaches here, 'isResultUsed' properly reflects
+    // whether the surrounding code uses the result of the expression.
+
+    if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+      reportUselessCode(t, n);
+    }
+  }
+
+  /**
+   * Reports a useless code error.
+   * @param t The traversal.
+   * @param n The node.
+   */
+  private void reportUselessCode(NodeTraversal t, Node n) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
-      } else if (isSimpleOp) {
+    } else if (NodeUtil.isSimpleOperatorType(n.getType())) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
\ No newline at end of file
-  }
