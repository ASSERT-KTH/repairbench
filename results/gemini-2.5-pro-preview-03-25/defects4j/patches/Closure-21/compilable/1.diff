diff --git a/tmp/de213220-ea8c-455c-9210-5c7fad71b82f_buggy.java b/tmp/819e8209-bf21-440b-9f66-542a601b3a66_fixed.java
index 49a5702..06961a1 100644
--- a/tmp/de213220-ea8c-455c-9210-5c7fad71b82f_buggy.java
+++ b/tmp/819e8209-bf21-440b-9f66-542a601b3a66_fixed.java
@@ -1,66 +1,98 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
-        n.isComma()) {
+        n.isComma()) { // Don't check COMMA nodes directly, check their children.
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // Handle specific parent types where results might appear unused
+    // but are contextually required or handled differently.
     if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
+      // If 'n' is the last child of a comma operator, its value is the result
+      // of the comma expression. Check if the comma's result is ultimately used.
       if (n == parent.getLastChild()) {
+        boolean ultimatelyUsed = false;
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+          if (ancestorType == Token.COMMA) {
+            continue; // Look beyond parent commas.
           }
+          // If the first non-comma ancestor isn't EXPR_RESULT or BLOCK,
+          // the comma's value is used (e.g., in assignment, return, condition).
+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
+            ultimatelyUsed = true;
           }
+          // We found the determining context (used or discarded), stop checking ancestors.
+          break;
+        }
+        // If the comma's result is ultimately used, don't warn about the last child.
+        if (ultimatelyUsed) {
+          return;
+        }
+        // Otherwise (result discarded), fall through to check 'n' for side effects.
+      }
+      // If 'n' is not the last child, its result is discarded by the comma.
+      // Fall through to check 'n' for side effects.
+
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+      // If the parent is not EXPR_RESULT or BLOCK, the result is generally used,
+      // UNLESS it's the init or incr part of a standard FOR loop.
+      // example: for(init; cond; incr)
+      // The init and incr expressions are not in an EXPR_RESULT node.
+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+             (n == parent.getFirstChild() || // init
+              n == parent.getFirstChild().getNext().getNext()))) { // incr
+        // Result is used by the parent (e.g., condition, assignment RHS, return value),
+        // so don't warn about lack of side effects here.
         return;
       }
+      // If it IS the init or incr of a FOR loop, fall through to check for side effects.
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    // If we reach here, the node 'n' is in a context where its result is discarded
+    // (e.g., EXPR_RESULT, BLOCK, non-last COMMA operand, last COMMA operand in discarded context,
+    // FOR init/incr). Now check if it lacks side effects.
+
+    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+      // Report warning: the result is discarded and the expression has no side effects.
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
+      // Keep track of problematic nodes if they aren't full statements,
+      // potentially for removal by other passes.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
