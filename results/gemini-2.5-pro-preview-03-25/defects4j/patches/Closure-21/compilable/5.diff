diff --git a/tmp/59db8798-f5fa-474b-8dda-aa5523d18e94_buggy.java b/tmp/546fde33-ad96-42d5-8616-2b48c40aa8a0_fixed.java
index 49a5702..c32894d 100644
--- a/tmp/59db8798-f5fa-474b-8dda-aa5523d18e94_buggy.java
+++ b/tmp/546fde33-ad96-42d5-8616-2b48c40aa8a0_fixed.java
@@ -1,66 +1,109 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    // Allow these. (VOID is deprecated, use EMPTY).
+    if (n.isEmpty()) {
+      return;
+    }
+
+    // COMMA nodes are handled during traversal of their children. Check children, not the comma itself.
+    if (n.isComma()) {
         return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+    // these cases when we visit the child.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
+    // Allow certain expressions contexts like the initializer and incrementor
+    // of a FOR loop. e.g. for(i=0;i<10;i++);
+    // These are allowed to have no side effects, because the user likely
+    // intends for them to be evaluated statefully, even if the result is discarded.
+    Node contextNode = n;
+    Node contextParent = parent;
+    // If n is the child of an EXPR_RESULT, check the EXPR_RESULT's context.
+    // Example: for(EXPR_RESULT(i=0);...) - We care about the EXPR_RESULT context.
+    if (parent.isExprResult()) {
+      contextNode = parent;
+      contextParent = parent.getParent();
+    }
+
+    boolean allowNoSideEffects = false;
+    // Check for traditional FOR loops (4 children: init, cond, incr, body).
+    if (contextParent != null && contextParent.isFor() && contextParent.getChildCount() == 4) {
+      Node init = contextParent.getFirstChild();
+      Node condition = init.getNext(); // Not used, but shows structure
+      Node incr = condition.getNext();
+      // Check if the contextNode (n or its EXPR_RESULT parent) is the init or incr part.
+      if (contextNode == init || contextNode == incr) {
+        allowNoSideEffects = true;
+      }
+    }
+    // NOTE: This does not exempt FOR-IN or FOR-OF loops, as their structure
+    // is different and the expressions within them typically need results/effects.
+
+    if (allowNoSideEffects) {
+        return; // Skip the side-effect check for allowed contexts.
+    }
+
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+
+    // If the result is not used, check for side effects.
+    if (!isResultUsed) {
         boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
-      }
-    }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+        // Note: mayHaveSideEffects checks for assignments, calls, delete,
+        // ++, -- etc. It considers the potential effects of children.
+        // Simple operators like +, == are not intrinsically side-effecting
+        // unless their operands have side-effects (e.g. `a == foo()`).
+        boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());
+
+        // Report error if the result is unused AND EITHER:
+        // 1. The expression is a simple operator (e.g., +, ==), regardless
+        //    of operand side effects, because the operator's result is discarded.
+        // 2. The expression is known to have no side effects (e.g., literal,
+        //    call to known pure function).
+        if (isSimpleOp || !hasSideEffects) {
             String msg = "This code lacks side-effects. Is there a bug?";
+
+            // Customize message based on the findings.
             if (n.isString()) {
+                // String literals are often mistakes like missing "+"
                 msg = "Is there a missing '+' on the previous line?";
             } else if (isSimpleOp) {
+                // If it's a simple operator, mention the operator.
+                // This covers cases like `x == y;` or `a + b;`
+                // It also covers `x == foo();` where foo() might have side effects,
+                // but the `==` result itself is unused.
                  msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                        "' operator is not being used.";
+            } else if (!hasSideEffects) {
+                 // If not a simple op, but known no side effects (e.g. pure function call),
+                 // keep the general message. This branch might not be strictly necessary
+                 // if the default message is sufficient, but provides clarity.
+                 // Example: `Math.random();` if configured as @nosideeffects
+                 msg = "This code lacks side-effects. Is there a bug?";
             }
 
             t.getCompiler().report(
                 t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+
+            // Add to problem nodes unless it's a statement node that will
+            // be preserved anyway. This seems related to a subsequent removal pass.
              if (!NodeUtil.isStatement(n)) {
                problemNodes.add(n);
              }
         }
     }
+}
\ No newline at end of file
