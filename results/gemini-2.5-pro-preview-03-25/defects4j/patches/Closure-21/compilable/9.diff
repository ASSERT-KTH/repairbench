diff --git a/tmp/8b11a9cc-85e3-46d5-bb18-6a3febc9df2b_buggy.java b/tmp/1873a13c-50a7-442e-817f-a678a28e1df0_fixed.java
index 49a5702..21feea7 100644
--- a/tmp/8b11a9cc-85e3-46d5-bb18-6a3febc9df2b_buggy.java
+++ b/tmp/1873a13c-50a7-442e-817f-a678a28e1df0_fixed.java
@@ -1,66 +1,75 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    // An EMPTY node represents a semicolon only statement. Allow
+    // these only if they are direct children of a BLOCK.
+    if (n.isEmpty()) {
+      // Allow block-level empty statements:
+      //   { ;;; }
+      // Allow empty function bodies:
+      //   function foo() {}
+      // Allow empty control structures:
+      //   while(foo());
+      // TODO(johnlenz): Should we be stricter about these? C versions of
+      //                 lint generally warn about the latter.
+      if (parent == null
+          || parent.isBlock()
+          || parent.isScript()
+          || parent.isFunction()) {
          return;
       }
-
-    if (parent == null) {
-      return;
+      // Fall through to check EMPTY nodes in other contexts (e.g. if (x); )
+      // where they are likely bugs.
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult()) {
+    // Do not check comma nodes directly, check their operands.
+    // Do not check EXPR_RESULT nodes, check their expressions.
+    // Do not check the top level script node.
+    if (n.isComma() || n.isExprResult() || n.isScript() || parent == null) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
+    // Check if the code lacks side effects and its result is unused.
+    // Relies on NodeUtil helper functions to determine these conditions.
+    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+
+    // If it has side effects, or the result is used, it is useful.
+    if (hasSideEffects || isResultUsed) {
+        return;
+    }
+
+    // If the node has JSDoc attached, it maybe that the JSDoc is the
+    // reason for the code existing. Don't warn.
+    if (n.getJSDocInfo() != null) {
+      return;
+    }
+
+    // Report the useless code.
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
-      }
-    }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
-      } else if (isSimpleOp) {
+    } else if (isSimpleOp) { // Use isSimpleOp for msg only
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
+    } else if (n.isEmpty()) { // Specific message for suspicious empty statements
+        msg = "Suspicious empty statement.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
+
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
+    // The removal logic might need more refinement, but reporting should be fixed.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
\ No newline at end of file
-  }
