diff --git a/tmp/90143d45-dbb7-48ee-bb38-c239d6575c4b_buggy.java b/tmp/5072fa02-c9f7-4e95-8475-4eb50d103002_fixed.java
index 49a5702..1074152 100644
--- a/tmp/90143d45-dbb7-48ee-bb38-c239d6575c4b_buggy.java
+++ b/tmp/5072fa02-c9f7-4e95-8475-4eb50d103002_fixed.java
@@ -1,66 +1,60 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
-      return;
-    }
-
-    if (parent == null) {
-      return;
-    }
-
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult()) {
+    // Skip known safe cases or nodes handled elsewhere
+    // VOID nodes appear when there are extra semicolons at the BLOCK level. Allow it.
+    if (n.isEmpty() || n.isComma() || parent == null || n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
+    // Determine if the expression's result is effectively used, considering context.
+    boolean isResultEffectivelyUsed = NodeUtil.isExpressionResultUsed(n);
+    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());
+
+    // If the parent is a context where results are implicitly ignored,
+    // then the result is not used, regardless of what isExpressionResultUsed says.
+    if (parent.isExprResult() || parent.isBlock()) {
+      isResultEffectivelyUsed = false;
+    } else if (parent.isFor()) {
+      // The initializer and increment parts of a FOR loop are like EXPR_RESULT.
+      // The condition's result is used, and the body's result might be.
+      Node condition = NodeUtil.getConditionExpression(parent);
+      if (n != condition && n != parent.getLastChild()) {
+         // Node n is the initializer or the increment.
+         isResultEffectivelyUsed = false;
       }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+    } else if (parent.isComma() && n == parent.getLastChild()) {
+      // For the last child of a comma, its result is used if and only if
+      // the comma's result is used by the comma's parent.
+      isResultEffectivelyUsed = NodeUtil.isExpressionResultUsed(parent);
     }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
-      }
-    }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    // Note: For non-last children of COMMA, NodeUtil.isExpressionResultUsed(n)
+    // should correctly return false, as the comma operator discards the value.
+
+    // Report error if the result is not effectively used and there are no side effects.
+    if (!isResultEffectivelyUsed && !hasSideEffects) {
       String msg = "This code lacks side-effects. Is there a bug?";
+      boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
+
+      // Track problematic nodes if they aren't full statements.
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
