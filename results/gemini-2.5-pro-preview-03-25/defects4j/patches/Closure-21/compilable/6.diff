diff --git a/tmp/5f59c5d3-5a95-4ac2-9a83-9444092caa53_buggy.java b/tmp/e68dfaf1-2ac3-410a-ac38-dd82ca33e2e3_fixed.java
index 49a5702..14a818d 100644
--- a/tmp/5f59c5d3-5a95-4ac2-9a83-9444092caa53_buggy.java
+++ b/tmp/e68dfaf1-2ac3-410a-ac38-dd82ca33e2e3_fixed.java
@@ -1,66 +1,56 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
+    // Allow certain node types unconditionally.
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
-      return;
-    }
-
-    if (parent == null) {
-      return;
-    }
-
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult()) {
+    // We also don't check COMMA nodes themselves, only their children.
+    // We also don't need to check the wrapper EXPR_RESULT or BLOCK nodes.
+    if (n.isEmpty() || n.isComma() || n.isExprResult() || n.isBlock() || parent == null) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+    // Check if the result of the expression is actually used. If it is, then
+    // the expression is not useless, even if it has no side effects.
+    if (NodeUtil.isExpressionResultUsed(n)) {
+      return;
+    }
+
+    // Special case: `var x;` declares a variable, this is not useless code.
+    // VAR -> NAME nodes often lack side effects according to the analysis
+    // but are structurally necessary.
+    if (parent.isVar() && n.isName()) {
+      // TODO(johnlenz): determine if we should report this case.
+      // It is technically useless code, but could be used for type annotations.
+      return;
+    }
+
+    // If the result is not used, check if the node is a simple operator
+    // (e.g. EQ, ADD) or if it lacks side effects. These are usually indicative
+    // of programmer error.
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
-      }
-    }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
+      // Keep track of potentially problematic nodes, perhaps for removal.
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
-      if (!NodeUtil.isStatement(n)) {
+      // We potentially want to remove simple expressions like ('str') or (1), but
+      // not qualified names even if they don't have side effects.
+      if (!NodeUtil.isStatement(n) && !n.isQualifiedName()) {
          problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
