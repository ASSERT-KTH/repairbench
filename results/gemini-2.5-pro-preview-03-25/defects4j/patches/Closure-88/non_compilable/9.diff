diff --git a/tmp/bc19e9c0-91c5-4c70-9bc6-ed55d4cd2cc4_buggy.java b/tmp/db5e5ebf-66c6-4382-a9ce-0ee21ee4b831_fixed.java
index 9353941..397db02 100644
--- a/tmp/bc19e9c0-91c5-4c70-9bc6-ed55d4cd2cc4_buggy.java
+++ b/tmp/db5e5ebf-66c6-4382-a9ce-0ee21ee4b831_fixed.java
@@ -1,30 +1,54 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+    // Check NAME nodes for read or kill
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      Node parent = n.getParent();
+      // Check if n is the LHS of an assignment.
+      // Note: The assignment happens AFTER the right side is evaluated.
+      if (parent != null && parent.isAssign() && n == parent.getFirstChild()) {
+        // Check the right hand side for reads/kills of the variable first.
+        Node rhs = n.getNext();
+        VariableLiveness rhsLiveness = VariableLiveness.MAYBE_LIVE;
+        // Check rhs != null to be safe, and avoid recursing into new CFG nodes.
+        if (rhs != null && !ControlFlowGraph.isEnteringNewCfgNode(rhs)) {
+           rhsLiveness = isVariableReadBeforeKill(rhs, variable);
+        }
+
+        // If the RHS contains the first read or kill, that takes precedence
+        // over the kill from the assignment operation itself.
+        if (rhsLiveness != VariableLiveness.MAYBE_LIVE) {
+          return rhsLiveness;
+        }
+
+        // Otherwise, the assignment to this name is the first relevant operation
+        // originating from this ASSIGN node.
         return VariableLiveness.KILL;
       } else {
+        // This name is not being assigned to (or is not the direct LHS name),
+        // so it's a read reference.
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Expressions are generally evaluated left-right, depth first.
+    // Recurse down the children.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      // Don't traverse into functions, as they have different scopes and CFGs.
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // Found the first read or kill in this child subtree.
           return state;
         }
       }
     }
+
+    // No read or kill of the variable found in this subtree.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
