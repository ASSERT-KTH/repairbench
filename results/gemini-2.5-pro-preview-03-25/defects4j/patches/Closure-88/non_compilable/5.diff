diff --git a/tmp/59872bf2-cebd-4d80-9e07-3a32007d2b18_buggy.java b/tmp/28165e15-8579-4130-851b-85f40b057398_fixed.java
index 9353941..da593f4 100644
--- a/tmp/59872bf2-cebd-4d80-9e07-3a32007d2b18_buggy.java
+++ b/tmp/28165e15-8579-4130-851b-85f40b057398_fixed.java
@@ -1,30 +1,71 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      Node parent = n.getParent();
+      if (NodeUtil.isLhs(n, parent)) {
+
+        // Handle simple assignment (x = ...) LHS specially.
+        // The KILL operation logically occurs *after* the RHS is evaluated.
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+             Node rhs = n.getNext(); // RHS is the sibling of the LHS NAME node.
+             if (rhs != null) {
+                 // Check if the first reference to the variable within the RHS is a READ.
+                 // We need to check the RHS subtree before declaring the LHS a KILL.
+                 VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+                 if (rhsState == VariableLiveness.READ) {
+                     // If the RHS reads the variable before any potential kill within RHS,
+                     // then this READ happens before the LHS assignment's KILL.
+                     return VariableLiveness.READ;
+                 }
+                 // Fall through: If RHS is MAYBE_LIVE or KILL first, the LHS kill is dominant/first.
+             }
+             // If RHS is null or doesn't read the variable first, the LHS assignment
+             // is the first relevant operation encountered for this variable name.
              return VariableLiveness.KILL;
+        }
+
+        // Handle other types of LHS operations:
+        // Declarations are kills.
+        if (parent.isVar() || parent.isFunction() || parent.isCatch()
+              || (parent.isForIn() && parent.getFirstChild() == n)) {
+              return VariableLiveness.KILL;
+        }
+        // Compound assignments, increment/decrement read the LHS first.
+        if (NodeUtil.isAssignmentOp(parent) || parent.isInc() || parent.isDec()) {
+              // parent.isAssign() was handled above, so this covers +=, -=, *=, etc. and ++, --
+              return VariableLiveness.READ;
+        }
+
+        // Default for any other unidentified LHS case (should be rare).
+        // Maintaining original code's tendency might involve returning KILL,
+        // but MAYBE_LIVE is safer if unsure. Let's stick to KILL like original.
+        return VariableLiveness.KILL;
+
       } else {
+        // Not an LHS node, so it's a read operation.
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
+    // Recursively check children.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      // Avoid recursing into function bodies, as they represent a new scope/CFG.
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // Found the first READ or KILL in a child subtree. Return it immediately.
           return state;
         }
       }
     }
+
+    // Variable was not found in this subtree.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
