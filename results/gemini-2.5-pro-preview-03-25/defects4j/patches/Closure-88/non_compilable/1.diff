diff --git a/tmp/3ce33c0c-2f15-446d-9e97-0eaa138d1859_buggy.java b/tmp/8ef4e990-5846-40b8-89c3-bbe5dc90ee60_fixed.java
index 9353941..b3f149b 100644
--- a/tmp/3ce33c0c-2f15-446d-9e97-0eaa138d1859_buggy.java
+++ b/tmp/8ef4e990-5846-40b8-89c3-bbe5dc90ee60_fixed.java
@@ -1,30 +1,81 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * Note: Compound assignments (e.g., x += 1) and increments/decrements
+   * (e.g., x++) are treated as READs, as they read the variable's value before
+   * the assignment occurs.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+    // Check the node type FIRST, as specific nodes define read/kill semantics
+    // that override simple child traversal order.
+
+    // Base Case: Found the variable NAME node.
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      Node parent = n.getParent();
+      // Check if 'n' is the target (LHS) of an operation.
+      if (NodeUtil.isLhs(n, parent)) {
+
+        // Case 1: Simple assignment ( T.ASSIGN ) where n is the target.
+        if (parent.isAssign()) {
+          // We are looking at the 'x' in 'x = f(x)'
+          Node rhs = n.getNext(); // rhs is sibling of lhs 'n'
+          // Check if rhs is null for safety, although it shouldn't be for ASSIGN
+          if (rhs == null) {
+             // Should not happen for valid ASSIGN node, but be safe.
+             return VariableLiveness.KILL; // Treat as kill if RHS is unexpectedly missing
+          }
+
+          // IMPORTANT: Check the RHS *before* declaring this node a KILL.
+          // The RHS is evaluated completely before the assignment happens.
+          VariableLiveness rhsLiveness = isVariableReadBeforeKill(rhs, variable);
+          if (rhsLiveness != VariableLiveness.MAYBE_LIVE) {
+            // Variable was READ or KILLed in the RHS. Return that status,
+            // as it happens before this assignment completes.
+            return rhsLiveness;
+          }
+          // If variable is NOT in RHS, then this assignment (LHS node) is the KILL.
           return VariableLiveness.KILL;
+        }
+
+        // Case 2: Compound assignment ( T.ASSIGN_*, e.g., += ) or Inc/Dec ( T.INC / T.DEC )
+        // where n is the target.
+        if ((NodeUtil.isAssignmentOp(parent) || parent.isInc() || parent.isDec())
+             && parent.getFirstChild() == n) {
+          // Example: x += f(y), or x++
+          // The variable 'n' (x) is read *before* the RHS is evaluated (for +=)
+          // or as part of the operation (for ++/--).
+          // So, this node represents a READ first.
+          return VariableLiveness.READ;
+        }
+
+        // Case 3: Other LHS context (VAR, PARAM_LIST, CATCH, maybe FOR-IN/OF)
+        // These are declaration/binding sites. Treat as KILL.
+        return VariableLiveness.KILL;
+
       } else {
+        // It's a NAME node for the variable, but not LHS -> definitely a READ.
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // If 'n' is not the variable NAME node, traverse children L-R.
+    // The recursive calls handle nested structures. The base cases above
+    // will eventually hit the variable name or exhaust the subtree.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      // Don't descend into functions; they have different scopes/lifetimes.
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // Found the first read/kill in a child. Return it immediately
+          // as we respect left-to-right evaluation.
           return state;
         }
       }
     }
+
+    // Variable was not found in this subtree.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
