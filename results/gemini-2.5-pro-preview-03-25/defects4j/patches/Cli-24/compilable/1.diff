diff --git a/tmp/b1c18bac-b67e-47c0-9399-ebedf36f35aa_buggy.java b/tmp/6ca855ae-f76f-40c3-9f7d-601b735a3bda_fixed.java
index 229b3e7..ac6f96a 100644
--- a/tmp/b1c18bac-b67e-47c0-9399-ebedf36f35aa_buggy.java
+++ b/tmp/6ca855ae-f76f-40c3-9f7d-601b735a3bda_fixed.java
@@ -1,55 +1,79 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Handle null or empty text
+        if (text == null || text.length() == 0) {
+            return sb;
+        }
+
+        // Handle the edge case where the indentation is greater
+        // than or equal to the line width; print the text char by char
+        if (nextLineTabStop >= width && width > 0) {
+            // Create padding of width-1 spaces
+            final String padding = createPadding(width - 1);
+            // Trim the input text once at the beginning
+            String trimmedText = text.trim(); 
+            // Append each character on a new line, preceded by the padding
+            for (int i = 0; i < trimmedText.length(); i++) {
+                sb.append(padding).append(trimmedText.charAt(i)).append(defaultNewLine);
+            }
+            // All text processed in char-by-char mode
+            return sb;
+        }
+
+        // --- Standard wrapping logic ---
+        
+        // Find the first wrap position
         int pos = findWrapPos(text, width, 0);
 
+        // If the text fits on a single line, append it (trimmed) and return
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+        
+        // Append the first line chunk (trimmed)
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
+        // Get the remaining text, trimmed
+        String remainingText = text.substring(pos).trim();
 
-        while (true)
+        // Loop while there is remaining text to process
+        while (remainingText.length() > 0)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Construct the line to wrap for this iteration: padding + remaining text
+            String lineToWrap = padding + remainingText;
+            
+            // Find the wrap position within this potentially padded line
+            pos = findWrapPos(lineToWrap, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
+                // The rest fits on one line (with padding)
+                sb.append(rtrim(lineToWrap)); // Append the final chunk (trimmed)
+                break; // Done with the loop
+            }
+
+            // Wrap needed for this line. Append the chunk that fits (trimmed).
+            sb.append(rtrim(lineToWrap.substring(0, pos))).append(defaultNewLine);
+
+            // Update remaining text for the next iteration (trimmed)
+            remainingText = lineToWrap.substring(pos).trim();
+        }
 
         return sb;
     }
\ No newline at end of file
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
