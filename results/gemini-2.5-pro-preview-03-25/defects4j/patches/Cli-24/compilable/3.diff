diff --git a/tmp/06ee24ba-9a79-44b3-bd6a-394b6294496f_buggy.java b/tmp/17ece710-9761-4519-80b3-6f657d7723b1_fixed.java
index 229b3e7..5c6fa5d 100644
--- a/tmp/06ee24ba-9a79-44b3-bd6a-394b6294496f_buggy.java
+++ b/tmp/17ece710-9761-4519-80b3-6f657d7723b1_fixed.java
@@ -1,55 +1,83 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // Handle the edge case where the indent is greater than or equal to the width.
+        // In this situation, wrap character by character.
+        // Added width > 0 check for robustness, though typically width should be positive.
+        // Also check if text is null or empty, return original buffer if so.
+        if (text == null || text.length() == 0) {
+             return sb;
+        }
+        
+        if (nextLineTabStop >= width && width > 0) {
+            final String padding = createPadding(nextLineTabStop);
+            // Start with the trimmed text to avoid leading/trailing whitespace issues
+            String remainingText = text.trim();
+
+            while (remainingText.length() > 0) {
+                // Append padding and the first character of the current remaining text
+                sb.append(padding).append(remainingText.charAt(0)).append(defaultNewLine);
+                // Prepare the remainder for the next iteration: remove the first char and trim leading spaces
+                if (remainingText.length() > 1) {
+                     remainingText = remainingText.substring(1).trim();
+                } else {
+                    remainingText = ""; // No more characters left
+                }
+            }
+            return sb; // Finished handling this special case
+        }
+
+        // --- Normal processing when nextLineTabStop < width ---
+
+        // Find the wrap position for the first line (no padding assumed here)
         int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+        if (pos == -1) {
+            // The entire text fits on the first line without wrapping
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first wrapped line segment
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Setup for subsequent lines which require padding
         final String padding = createPadding(nextLineTabStop);
+        // Get the text remaining after the first line wrap, trimmed
+        String remainingText = text.substring(pos).trim();
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // Loop to wrap the remaining text with padding
+        while (remainingText.length() > 0) {
+             // Calculate the actual width available for text content on subsequent lines
+             // Ensure availableWidth is positive. It should be because nextLineTabStop < width
+             int availableWidth = Math.max(1, width - nextLineTabStop); // Use Math.max to ensure at least 1
 
-            if (pos == -1)
-            {
-                sb.append(text);
+             // Find the wrap position within the remaining text based on the available width
+             pos = findWrapPos(remainingText, availableWidth, 0);
+
+             if (pos == -1) {
+                 // The rest of the text fits on the current line within the available width
+                 sb.append(padding).append(remainingText);
+                 remainingText = ""; // Mark as done, loop will terminate
+             } else {
+                 // Wrap is needed for the remaining text
+                 // Append the padding and the chunk of text that fits
+                 sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);
+                 // Update remaining text for the next iteration
+                 remainingText = remainingText.substring(pos).trim();
+             }
+        } // end while
 
         return sb;
     }
\ No newline at end of file
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
