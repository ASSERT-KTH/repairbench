diff --git a/tmp/6a88eb6c-1313-45c1-a038-14b645809215_buggy.java b/tmp/67f3435f-7b96-4d81-b42f-b071385da389_fixed.java
index 229b3e7..e2dc81b 100644
--- a/tmp/6a88eb6c-1313-45c1-a038-14b645809215_buggy.java
+++ b/tmp/67f3435f-7b96-4d81-b42f-b071385da389_fixed.java
@@ -1,55 +1,133 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // Find the first wrap position in the original text
+        // Find the position of the first space, tab, or newline character from the start index
+        // This finds the earliest potential wrap point if the full text doesn't fit
         int pos = findWrapPos(text, width, 0);
 
+        // If text fits on one line or no wrap needed (findWrapPos returns -1)
         if (pos == -1)
         {
-            sb.append(rtrim(text));
-
+            sb.append(rtrim(text)); // Append the whole text (trimmed)
             return sb;
         }
+
+        // Append the first line (the part before the initial wrap position), trimmed
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // Determine the padding string and effective tab stop for subsequent lines
+        final String padding;
+        final int effectiveTabStop;
+
+        // Check if the requested indent leaves enough room for at least one character
+        // Ensure width > 0 to avoid issues with zero or negative width.
+        if (nextLineTabStop >= width && width > 0) {
+             // Special case: Not enough room.
+             // The effective indent becomes width - 1 to leave exactly one space for the character.
+             effectiveTabStop = width - 1;
+             padding = createPadding(effectiveTabStop);
+        } else {
+            // Normal case: Use the requested nextLineTabStop
+            effectiveTabStop = nextLineTabStop;
+            padding = createPadding(effectiveTabStop);
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        // Get the text remaining after the first line wrap
+        String remainingText = text.substring(pos);
 
+        // Loop for subsequent wrapped lines
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Trim leading whitespace from the remaining text before padding
+            remainingText = remainingText.trim();
+            // If no more content left after trimming, exit the loop
+            if (remainingText.length() == 0) {
+                break;
+            }
 
-            if (pos == -1)
+            // Construct the line to be potentially wrapped (padding + remaining content)
+            // Use the calculated padding based on effectiveTabStop
+            String lineToWrap = padding + remainingText;
+            int lineLength = lineToWrap.length();
+
+            // If the padded line now fits within the specified width, append it and finish
+            if (lineLength <= width)
+            {
+                sb.append(lineToWrap);
+                break; // Exit loop, all remaining text appended
+            }
+
+            // Line still doesn't fit, need to determine where to wrap it
+            int wrapPosInLine;
+            // Check again if we are in the special case scenario (indent too large)
+            if (nextLineTabStop >= width && width > 0) {
+                 // Special case scenario: Wrap after the first character of the content.
+                 // The wrap position is thus the effective indent + 1 character.
+                 wrapPosInLine = effectiveTabStop + 1;
+                 // Ensure wrapPos does not exceed actual line length if the remaining text is just one char
+                 if (wrapPosInLine > lineLength) {
+                     wrapPosInLine = lineLength;
+                 }
+            } else {
+                // Normal case: Find the wrap position in the padded line using findWrapPos
+                wrapPosInLine = findWrapPos(lineToWrap, width, 0);
+                 if (wrapPosInLine == -1) {
+                     // This should ideally not happen if lineLength > width was true,
+                     // means no natural wrap point (like space) found within width.
+                     // As a safeguard, wrap forcefully at the width boundary.
+                     wrapPosInLine = width;
+                 }
+
+                 // Apply original heuristic: if wrap occurs exactly one position before the
+                 // *intended* nextLineTabStop (could be due to space before content starts),
+                 // force the wrap to the width boundary instead. This might avoid wrapping just padding.
+                 // Added check for nextLineTabStop > 0 to prevent potential negative index access.
+                 if ( (lineLength > width) && (nextLineTabStop > 0) && (wrapPosInLine == nextLineTabStop - 1) )
                  {
-                sb.append(text);
+                     wrapPosInLine = width;
+                 }
+            }
+
+            // Append the wrapped part of the current line (substring up to wrap position), trimmed
+            sb.append(rtrim(lineToWrap.substring(0, wrapPosInLine))).append(defaultNewLine);
+
+            // Update remainingText for the next iteration.
+            // Calculate how many content characters were consumed from remainingText in this step.
+            // This is the wrap position minus the length of the padding (effectiveTabStop).
+            int consumedContentLength = wrapPosInLine - effectiveTabStop;
+
+            // If wrapped within padding, or exactly at padding end (consumed <= 0)
+            if (consumedContentLength <= 0) {
+                 // We must advance past the first character of the actual content
+                 // to avoid getting stuck in an infinite loop processing the same character.
+                 if (remainingText.length() > 0) {
+                     remainingText = remainingText.substring(1); // Consume first char of content
+                 } else {
+                     // Should not happen if trim() check passed, but defensive break
+                     break;
+                 }
+            } else {
+                // Consumed 'consumedContentLength' characters from 'remainingText'
+                // Update remainingText by removing the consumed part.
+                if (consumedContentLength >= remainingText.length()) {
+                    remainingText = ""; // Consumed all content
+                } else {
+                    remainingText = remainingText.substring(consumedContentLength);
+                }
+            }
+        } // end while
 
         return sb;
     }
\ No newline at end of file
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
