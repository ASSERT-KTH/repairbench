diff --git a/tmp/6a57e8bf-91db-4665-89cb-2dec8b290ce2_buggy.java b/tmp/b01faf34-a29d-4dda-b257-3e24e0946a15_fixed.java
index 229b3e7..b8b40e4 100644
--- a/tmp/6a57e8bf-91db-4665-89cb-2dec8b290ce2_buggy.java
+++ b/tmp/b01faf34-a29d-4dda-b257-3e24e0946a15_fixed.java
@@ -1,55 +1,91 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+        
+        // Append the first line (wrapped).
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
+        // Get the rest of the text for subsequent lines.
+        String currentText = text.substring(pos).trim();
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Create padding string for subsequent lines.
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        while (currentText.length() > 0) // Loop while there is text remaining
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
+            // Handle the special case where indentation is >= width.
+            // In this case, wrap character by character.
+            if (nextLineTabStop >= width)
             {
-                sb.append(text);
+                // Create line content: padding + first char of current text
+                StringBuffer lineBuf = new StringBuffer();
+                lineBuf.append(padding);
+                // Add the first character of the remaining text
+                lineBuf.append(currentText.charAt(0));
+
+                String line = lineBuf.toString();
+                // Truncate line to width if necessary
+                if (line.length() > width) {
+                    line = line.substring(0, width);
+                }
+
+                // Append the line (rtrim is safe here, line should end with a non-space char)
+                sb.append(rtrim(line));
+                sb.append(defaultNewLine);
 
-                return sb;
+                // Consume the first character
+                currentText = currentText.substring(1);
             }
+            else // Normal case: nextLineTabStop < width
+            {
+                // Prepare the line with padding and current text for wrap calculation
+                String lineToWrap = padding + currentText;
+                pos = findWrapPos(lineToWrap, width, 0);
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+                if (pos == -1) // No wrap point found, append the rest
+                {
+                    sb.append(rtrim(lineToWrap));
+                    currentText = ""; // Mark as done
+                }
+                else // Wrap point found
+                {
+                    // This condition handles cases where the wrap point is precisely
+                    // the indentation boundary (pos equals the start of the text
+                    // after padding). In these cases, we might want to force wrapping
+                    // at the width boundary if the text overflows.
+                    // This check prevents an infinite loop in certain scenarios involving
+                    // text that doesn't contain spaces near the wrap position.                    
+                    if ( (lineToWrap.length() > width) && (pos == nextLineTabStop - 1) )
                     {
                         pos = width;
                     }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+                    // Append the wrapped line segment
+                    sb.append(rtrim(lineToWrap.substring(0, pos))).append(defaultNewLine);
+                    
+                    // Update remaining text; trim leading whitespace.
+                    currentText = lineToWrap.substring(pos).trim();
                 }
             }
+        } // end while
+
+        return sb;
+    }
\ No newline at end of file
