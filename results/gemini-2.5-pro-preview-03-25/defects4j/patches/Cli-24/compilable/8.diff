diff --git a/tmp/96278ac9-20fc-409c-886b-e41cefaecff0_buggy.java b/tmp/372b6fbd-3e2f-4cad-bd92-a8cf61a1348b_fixed.java
index 229b3e7..b7c7d4d 100644
--- a/tmp/96278ac9-20fc-409c-886b-e41cefaecff0_buggy.java
+++ b/tmp/372b6fbd-3e2f-4cad-bd92-a8cf61a1348b_fixed.java
@@ -1,55 +1,69 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // Protection against bad arguments like nextLineTabStop >= width
+        // which could be passed by the caller (e.g. renderOptions).
+        // If the requested indent is greater than or equal to the width,
+        // wrapping with that indent is impossible.
+        // Instead of throwing an error (CLI-162), we cap the indent
+        // to a maximum sensible value: width - 1 (or 0 if width is 0 or 1).
+        // This allows at least one character after the padding, preventing infinite loops.
+        int indent = nextLineTabStop;
+        if (indent >= width) {
+             // Cap indent: use width - 1 if possible, otherwise 0.
+             indent = Math.max(0, width - 1);
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        // Use the potentially capped indent for padding
+        final String padding = createPadding(indent);
 
+        // The rest of the text is processed line by line
         while (true)
         {
+            // Add padding and the remainder of the text (trimmed)
             text = padding + text.substring(pos).trim();
+            // Find the next wrap position in the padded text
             pos = findWrapPos(text, width, 0);
 
+            // If the rest fits on one line, append it and exit the loop
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // Handle edge case (CLI-134 adjustment): if the wrap position is exactly
+            // at the end of the padding ('pos == indent') and the text overflows ('text.length() > width'),
+            // we must ensure we break at 'width' to include at least the first character
+            // following the padding. Otherwise, appending 'text.substring(0, pos)'
+            // might just append the padding again, leading to an infinite loop.
+            if (pos == indent && text.length() > width)
             {
                 pos = width;
             }
 
+            // Append the wrapped line (trimmed) and continue the loop
+            // with the remaining text.
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
