diff --git a/tmp/7b576288-0fd7-4904-ae62-0266173d01a2_buggy.java b/tmp/b23c2e27-bd4f-46cc-a36a-9c90ca94871a_fixed.java
index 229b3e7..9cfb7e0 100644
--- a/tmp/7b576288-0fd7-4904-ae62-0266173d01a2_buggy.java
+++ b/tmp/b23c2e27-bd4f-46cc-a36a-9c90ca94871a_fixed.java
@@ -1,55 +1,70 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // The existing check for nextLineTabStop >= width should remain,
+        // as it prevents infinite loops if the available width is non-positive
+        // after accounting for the indentation. The test failure indicates this
+        // condition is met unexpectedly, suggesting an issue elsewhere or
+        // in the logic leading to this state, potentially related to the removed block below.
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
             throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                             "- no room for the description");
         }
 
         // all following lines must be padded with nextLineTabStop space
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
+            // This specific condition check and adjustment (pos = width) was introduced
+            // as part of the fix for CLI-162. However, it appears to be problematic
+            // in certain edge cases, potentially leading to the IllegalStateException
+            // or incorrect wrapping observed in the failing test. Removing this adjustment
+            // might resolve the issue by simplifying the wrap logic for subsequent lines.
+            // Original problematic block:
+            // if ( (text.length() > width) && (pos == nextLineTabStop - 1) )
+            // {
+            //     pos = width;
+            // }
+            // By removing it, we rely solely on findWrapPos for determining the break point.
 
+            // Append the wrapped line, preserving the original rtrim behavior for consistency,
+            // although removing rtrim inside the loop might be another potential refinement
+            // if padding issues arise.
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
