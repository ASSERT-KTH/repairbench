diff --git a/tmp/ad6434b0-8190-4b6e-af0f-e80f597c1528_buggy.java b/tmp/cc101795-6de5-4751-aa42-1cdb6e30d951_fixed.java
index 229b3e7..9d5555b 100644
--- a/tmp/ad6434b0-8190-4b6e-af0f-e80f597c1528_buggy.java
+++ b/tmp/cc101795-6de5-4751-aa42-1cdb6e30d951_fixed.java
@@ -1,55 +1,71 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
-            sb.append(rtrim(text));
-
+            // Text fits on one line
+            sb.append(rtrim(text)); // Trim trailing spaces
             return sb;
         }
+
+        // Append the first line, trimming trailing spaces
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // Check if indentation is feasible - prevent potential issues later
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
             throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                             "- no room for the description");
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Pad subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
+            // Prepare the text for the next line (pad + remaining text)
+            // Ensure leading/trailing whitespace from the remainder is handled
             text = padding + text.substring(pos).trim();
+            // Find the wrap position for the padded text
             pos = findWrapPos(text, width, 0);
 
+            // If the rest fits on one line (including padding)
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(text); // Append remaining text (already has padding)
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // If the calculated wrap position falls within the padding area
+            // (pos <= nextLineTabStop), it implies that the first word after
+            // the padding doesn't fit within the remaining width on the line.
+            // In this scenario, and only if the text actually exceeds the width,
+            // we must force a break at the line's width boundary to ensure
+            // forward progress and handle potential infinite loops.
+            if (pos <= nextLineTabStop && text.length() > width)
             {
+                // Force the wrap position to the maximum width
                 pos = width;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the line chunk up to the determined wrap position.
+            // Do NOT trim trailing spaces here, as the leading padding
+            // for the next line relies on the correct positioning.
+            sb.append(text.substring(0, pos)).append(defaultNewLine);
+            // Loop continues, processing text starting from the new 'pos' for the next line
         }
     }
\ No newline at end of file
