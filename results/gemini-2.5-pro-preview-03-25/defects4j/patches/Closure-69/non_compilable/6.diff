diff --git a/tmp/3e1a309c-8e30-447f-8ac6-9362106c0593_buggy.java b/tmp/1482f965-427f-4dc7-88e3-b8d66b4aad0f_fixed.java
index bf9c086..f6d868b 100644
--- a/tmp/3e1a309c-8e30-447f-8ac6-9362106c0593_buggy.java
+++ b/tmp/1482f965-427f-4dc7-88e3-b8d66b4aad0f_fixed.java
@@ -1,54 +1,83 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
+      // Note: functionJSDocInfo can be null if the function type is created
+      // by code rather than parsed from source.
+      if(functionJSDocInfo != null && functionJSDocInfo.getSourceName() != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
+        // functionSource can be null if the function is defined in a
+        // different compilation unit.
+        if (functionSource != null) {
            isExtern = functionSource.isExtern();
         }
+      }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+      // Functions with explicit 'this' types must be called in a GETPROP
+      // or GETELEM context.
+      JSType fnThisType = functionType.getTypeOfThis();
+      // TODO(johnlenz): consider making isExplicitThis a method of FunctionType
+      // isLoose indicates that the 'this' type is not strictly enforced.
+      boolean isLoose = child.getBooleanProp(Node.FREE_CALL);
+      // An explicit 'this' type is specified if it's not unknown and not <All>.
+      // The global 'this' is not considered explicit. Native Object is the
+      // expected 'this' for unbound functions.
+      boolean isExplicitThis = fnThisType != null &&
+          !fnThisType.isUnknownType() &&
+          !fnThisType.isAllType() && // different from UNKNOWN
+          !fnThisType.isEquivalentTo(registry.getNativeType(JSTypeNative.GLOBAL_THIS));
+
+      // Is the call performed as a method call?
+      boolean isMethodCall = child.isGetProp() || child.isGetElem();
+
+      // Constructors and interfaces are subtypes of FunctionType, but don't need this check.
+      // Constructors implicitly create the 'this' type. Interfaces can't be called.
+      // The check should only apply to regular functions with a @this annotation.
+      if (isExplicitThis && !isMethodCall && !isLoose &&
+          !functionType.isConstructor() && !functionType.isInterface()) {
+        report(t, n, WRONG_THIS_ERROR, functionType.toString());
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
+      // Handle calls to types that are not FunctionType, like boxed primitives.
       ensureTyped(t, n);
     }
 
-    // TODO: Add something to check for calls of RegExp objects, which is not
+    // TODO(johnlenz): Add something to check for calls of RegExp objects, which is not
     // supported by IE. Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
