diff --git a/tmp/7284fd9c-069b-4033-8e4b-126f371864bb_buggy.java b/tmp/da16e7aa-71c2-43b2-852e-3e247c463f6c_fixed.java
index bf9c086..9256e71 100644
--- a/tmp/7284fd9c-069b-4033-8e4b-126f371864bb_buggy.java
+++ b/tmp/da16e7aa-71c2-43b2-852e-3e247c463f6c_fixed.java
@@ -1,54 +1,89 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if (functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
+        // Check if sourceName is null, as it can be (e.g. for built-in types).
+        if (sourceName != null) {
           CompilerInput functionSource = compiler.getInput(sourceName);
+          // functionSource can be null if the function is defined in a synthesized script.
+          if (functionSource != null) {
             isExtern = functionSource.isExtern();
           }
+        }
+      }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
       // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+      // or GETELEM, or with .call/.apply
+      JSType typeOfThis = functionType.getTypeOfThis();
+      // NoObjectType means function is specified with @this {void} or has no
+      // @this annotation. UnknownType means we don't know the type.
+      // In either case, we don't complain.
+      if (!typeOfThis.isUnknownType() && !typeOfThis.isNoObjectType()) {
+        Node callTarget = n.getFirstChild();
+        boolean isMethodCall = callTarget.isGetProp() || callTarget.isGetElem();
+        boolean isCallOrApply = false;
+
+        if (isMethodCall) {
+           // Check if the call is explicitly using .call or .apply
+           String methodName = callTarget.getLastChild().getString();
+           if ("call".equals(methodName) || "apply".equals(methodName)) {
+               // Verify the object being called upon is actually a function
+               // or the Function prototype.
+               Node receiver = callTarget.getFirstChild();
+               JSType receiverType = getJSType(receiver).restrictByNotNullOrUndefined();
+               if (receiverType.isFunctionType() || receiverType.isFunctionPrototypeType()) {
+                   isCallOrApply = true;
+               }
+           }
+        }
+
+        // If it's not a method call (like obj.f(), arr[0]()) and it's not an
+        // explicit .call or .apply invocation, then issue a warning.
+        if (!isMethodCall && !isCallOrApply) {
+          report(t, n, NEED_EXPLICIT_THIS_TYPE, functionType.toString());
+        }
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
