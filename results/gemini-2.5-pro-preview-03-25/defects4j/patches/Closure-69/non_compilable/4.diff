diff --git a/tmp/ca35557a-5f60-4853-a549-864060e23385_buggy.java b/tmp/4f4815a1-0ddc-46ea-a83a-605923d707b0_fixed.java
index bf9c086..ea1439b 100644
--- a/tmp/ca35557a-5f60-4853-a549-864060e23385_buggy.java
+++ b/tmp/4f4815a1-0ddc-46ea-a83a-605923d707b0_fixed.java
@@ -1,54 +1,79 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
+      // TODO(nicksantos): Add a test case for this isExterns check.
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if (functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
+        if (sourceName != null) {
           CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+          // NOTE(nicksantos): We would really like to use the input's
+          // isExtern method, but FunctionType#getSourceName does not
+          // necessarily return the same path as InputId#getName.
+          isExtern = functionSource != null && functionSource.isExtern();
+        }
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
+          !child.isQualifiedName() && // Allow calls like goog.base(this).
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+      // Functions with explicit 'this' types must be called in a GETPROP
+      // or GETELEM, or be the first operand of a CALL/APPLY.
+      // TODO(johnlenz): Add checks for CALL/APPLY/BIND.
+      JSType thisType = functionType.getTypeOfThis();
+      // A function requires a specific 'this' if its this-type is not unknown
+      // and not the root Object type.
+      boolean requiresExplicitThis = !thisType.isUnknownType() &&
+          !thisType.isEquivalentTo(registry.getNativeType(OBJECT_TYPE)) &&
+          // Added !functionType.isConstructor() check to avoid conflicting
+          // checks with CONSTRUCTOR_NOT_CALLABLE. Calling a constructor
+          // without new is checked above.
+          !functionType.isConstructor();
+
+      // We check if the call is made without a receiver object.
+      // Calls like obj.method() or obj['method']() have child as GETPROP/GETELEM.
+      // Calls like f() or (condition ? foo : bar)() have child as NAME or HOOK.
+      if (requiresExplicitThis && !(child.isGetProp() || child.isGetElem())) {
+        report(t, n, MISSING_THIS, functionType.toString());
+      }
+
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
-    // TODO: Add something to check for calls of RegExp objects, which is not
+    // TODO(user): Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
