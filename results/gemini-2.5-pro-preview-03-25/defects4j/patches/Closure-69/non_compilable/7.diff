diff --git a/tmp/69b9d9bf-b87f-46f6-a75d-e41a24e85594_buggy.java b/tmp/39c72933-5c06-4ece-a6ff-8e20e603e232_fixed.java
index bf9c086..40b2d04 100644
--- a/tmp/69b9d9bf-b87f-46f6-a75d-e41a24e85594_buggy.java
+++ b/tmp/39c72933-5c06-4ece-a6ff-8e20e603e232_fixed.java
@@ -1,54 +1,94 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
+      // Try to determine extern status from the function's source node first
+      Node functionNode = functionType.getSource();
+      if (functionNode != null) {
+          // Check JSDoc on the function node itself
+          JSDocInfo functionJSDocInfo = NodeUtil.getBestJSDocInfo(functionNode);
+          if (functionJSDocInfo != null && functionJSDocInfo.isExterns()) {
+              isExtern = true;
+          } else {
+              // Fallback to checking the source file name associated with the node
+              String sourceName = functionNode.getSourceFileName();
+              if (sourceName != null) {
+                  CompilerInput functionSource = compiler.getInput(sourceName);
+                  if (functionSource != null && functionSource.isExtern()) {
+                      isExtern = true;
+                  }
+              }
+          }
+      } else {
+          // Fallback to the JSDoc associated with the FunctionType (less reliable)
           JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
           if (functionJSDocInfo != null) {
               String sourceName = functionJSDocInfo.getSourceName();
+               if (sourceName != null) {
                  CompilerInput functionSource = compiler.getInput(sourceName);
+                 if (functionSource != null) {
                     isExtern = functionSource.isExtern();
                  }
+               }
+          }
+      }
+
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
       // Functions with explcit 'this' types must be called in a GETPROP
       // or GETELEM.
+      JSType thisType = functionType.getTypeOfThis();
+      // Check if 'this' is constrained (not unknown and not the default Object type)
+      boolean requiresSpecificThis = !thisType.isUnknownType() &&
+          !(thisType.isObjectType() && thisType.toObjectType().isNativeObjectType() && "Object".equals(thisType.toObjectType().getReferenceName()));
+
+      // Check if the call is made directly on a property access (method call)
+      boolean isMethodCall = child.isGetProp() || child.isGetElem();
+
+      if (requiresSpecificThis && !isMethodCall) {
+          // Report warning for calls like `f()` or `(cond ? foo : bar)()`
+          // when `f` or `foo`/`bar` require a specific `this`.
+          // We don't check for .call/.apply here, assuming other checks handle them.
+          report(t, n, FUNCTION_WITH_THIS_TYPE_MUST_BE_CALLED_AS_METHOD, childType.toString());
+      }
+
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
