diff --git a/tmp/e9fba784-6b2e-4061-a7aa-e61d4644fd87_buggy.java b/tmp/ea2eb149-33cf-4482-8d88-5e045b0cdcda_fixed.java
index bf9c086..276f66d 100644
--- a/tmp/e9fba784-6b2e-4061-a7aa-e61d4644fd87_buggy.java
+++ b/tmp/ea2eb149-33cf-4482-8d88-5e045b0cdcda_fixed.java
@@ -1,54 +1,79 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
+      // Calculate isExtern once.
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
+        // Add null checks for safety
+        if (sourceName != null) {
           CompilerInput functionSource = compiler.getInput(sourceName);
+          if (functionSource != null) { // Might be null for synthetic nodes
              isExtern = functionSource.isExtern();
           }
+        }
+      }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
+        // Allow native types (like Number, String) to be called
+        // for type casting. DomHelper used to rely on this.
+        JSType nativeType = JSType.toMaybePrimitiveType(functionType.getInstanceType());
+        if (nativeType == null || !nativeType.isNumberValueType() && !nativeType.isStringValueType()) {
             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
         }
+      }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+      // Functions with explicit 'this' types must be called in a GETPROP
+      // or GETELEM context, unless they are externs or specify global this.
+      JSType thisType = functionType.getTypeOfThis();
+      // Check if 'this' is explicitly specified (not Unknown) and not the global this type,
+      // and the function is not an extern, and it's not called as obj.method() or obj['method']().
+      if (!isExtern &&
+          thisType != null && // Ensure thisType is not null (getTypeOfThis can return null)
+          !thisType.isUnknownType() &&
+          !thisType.isGlobalThisType() && // Exclude functions that explicitly declare @this {Window}
+          !child.isGetProp() &&
+          !child.isGetElem()) {
+        report(t, n, FUNCTION_WITH_EXPLICIT_THIS, functionType.toString());
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
+      // Handle cases where non-FunctionType is callable (e.g., UnionType).
+      // We might need to check for the 'this' mismatch in union types as well.
+      // TODO(dimvar): Check this mismatch across unions.
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
