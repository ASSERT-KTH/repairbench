diff --git a/tmp/1e22a279-e76e-4f1b-9a55-1a08b49646d3_buggy.java b/tmp/da00ad20-5f18-49fb-a721-cd2c05f9547c_fixed.java
index bf9c086..1a83e91 100644
--- a/tmp/1e22a279-e76e-4f1b-9a55-1a08b49646d3_buggy.java
+++ b/tmp/da00ad20-5f18-49fb-a721-cd2c05f9547c_fixed.java
@@ -1,54 +1,92 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
+      // Check source file of the function definition JSDoc, if available.
       if (functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
+        // SourceName might be null if the function is defined synthetically.
+        if (sourceName != null) {
           CompilerInput functionSource = compiler.getInput(sourceName);
+          // functionSource might be null if the sourceName does not exist in the compiler inputs.
+          // This can happen if the functionType is created programmatically.
+          if (functionSource != null) {
              isExtern = functionSource.isExtern();
           }
+        }
+      }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+      // Functions with explicit 'this' types (including methods) must be called
+      // in a way that sets the 'this' context correctly, typically via property access
+      // (GETPROP/GETELEM) or using Function.prototype.call/apply.
+      JSType expectedThisType = functionType.getTypeOfThis();
+      // Need the registry to access the global 'this' type.
+      JSType globalThis = registry.getNativeType(JSTypeNative.GLOBAL_THIS);
+
+      // Check if 'this' is explicitly specified or inferred as a specific object type
+      // which is not unknown, not NoObjectType, and not the global this.
+      // Functions explicitly annotated with @this {None} have NoObjectType and are excluded.
+      // Functions bound to the global 'this' are also excluded.
+      boolean requiresSpecificThis = !expectedThisType.isUnknownType() &&
+                                     expectedThisType.isObjectType() &&
+                                     !expectedThisType.isNoObjectType() &&
+                                     expectedThisType != globalThis;
+
+      // Check if the function is being called directly (e.g., "f()")
+      // rather than as a method (e.g., "obj.f()", "obj['f']()").
+      // Calls via .call or .apply are implicitly handled because the child node
+      // would be a GETPROP (e.g., `f.call`), thus `isDirectCall` would be false.
+      boolean isDirectCall = !(child.isGetProp() || child.isGetElem());
+
+      // If the function requires a specific 'this' and is called directly,
+      // then the 'this' context is likely incorrect (usually the global 'this').
+      if (requiresSpecificThis && isDirectCall) {
+           // Report the error, indicating that the function needs to be called
+           // with a specific 'this' type.
+           // Example: /** @this {MyClass} */ function f() {}; f(); <-- error
+           // Example: var m = myObj.method; m(); <-- error
+           // Example: (cond ? myObj.m1 : myObj.m2)(); <-- error
+           report(t, n, WRONG_THIS_ERROR, expectedThisType.toString(), childType.toString());
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
