diff --git a/tmp/ce67f229-cf0c-466c-b3e3-1ffa3e3bbff5_buggy.java b/tmp/66c118cb-cd34-4b21-a44a-5172942747cd_fixed.java
index fd8eae5..f4aab4b 100644
--- a/tmp/ce67f229-cf0c-466c-b3e3-1ffa3e3bbff5_buggy.java
+++ b/tmp/66c118cb-cd34-4b21-a44a-5172942747cd_fixed.java
@@ -1,47 +1,72 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
+        // Find the index of x. If autoSort is true, this should use binary search.
+        // Binary search returns index >= 0 if found, or (-(insertion point) - 1) if not found.
+        // Linear search (if autoSort is false) returns index >= 0 if found, or -1 if not found.
         int index = indexOf(x);
+
         if (index >= 0 && !this.allowDuplicateXValues) {
+            // Item found at 'index' and duplicates are not allowed: UPDATE
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
             existing.setY(y);
         }
         else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            // Item not found (index < 0) OR duplicates are allowed: ADD a new item.
+            XYDataItem newItem = new XYDataItem(x, y);
+
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                // If autoSort is true, insert the new item at the correct sorted position.
+                // Calculate the insertion point based on the result of indexOf(x).
+                int insertionPoint;
+                if (index >= 0) {
+                    // Item found at 'index', but duplicates are allowed.
+                    // Insert the new item immediately after the found item's index
+                    // to maintain order and keep duplicates potentially adjacent.
+                    insertionPoint = index + 1;
+                } else {
+                    // Item not found (index < 0).
+                    // The insertion point is derived from the binary search result: -index - 1.
+                    insertionPoint = -index - 1;
+                }
+                // The add method handles insertionPoint == size correctly.
+                this.data.add(insertionPoint, newItem);
             }
             else {
-                this.data.add(new XYDataItem(x, y));
+                // If autoSort is false, just append the new item to the end.
+                this.data.add(newItem);
             }
-            // check if this addition will exceed the maximum item count...
+
+            // Check if this addition exceeds the maximum item count...
+            // Note: This check should be performed *after* adding the item.
             if (getItemCount() > this.maximumItemCount) {
+                // Remove the item at index 0. If !autoSort, this is the oldest item.
+                // If autoSort, this is the item with the smallest x-value.
                 this.data.remove(0);
             }
         }
+
+        // Notify listeners that the series has changed.
         fireSeriesChanged();
+        // Return the item that was overwritten (if any).
         return overwritten;
     }
\ No newline at end of file
