diff --git a/tmp/fa74852b-4654-4c76-972e-4e0e0c387c64_buggy.java b/tmp/4d98302d-a0fe-4205-8c7b-cd4b25bc5e37_fixed.java
index fd8eae5..80ab401 100644
--- a/tmp/fa74852b-4654-4c76-972e-4e0e0c387c64_buggy.java
+++ b/tmp/4d98302d-a0fe-4205-8c7b-cd4b25bc5e37_fixed.java
@@ -1,47 +1,90 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
+        // Note: 'data' is List<XYDataItem>
         XYDataItem overwritten = null;
-        int index = indexOf(x);
+        int index = indexOf(x); // uses binarySearch if autoSort=true
+
         if (index >= 0 && !this.allowDuplicateXValues) {
+            // Existing item found, and duplicates are not allowed, so update
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
-            existing.setY(y);
+            existing.setY(y); // Update the y-value
         }
         else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            // Item not found (index < 0), or duplicates are allowed. Add new item.
+            XYDataItem newItem = new XYDataItem(x, y);
+
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                // Need to insert at the correct sorted position
+                int insertionPoint;
+                if (index < 0) {
+                    // Item not found, binarySearch result indicates insertion point
+                    insertionPoint = -index - 1;
                 }
                 else {
-                this.data.add(new XYDataItem(x, y));
+                    // Item found (at 'index'), but duplicates allowed.
+                    // We must insert the new item. To maintain sorted order
+                    // and handle duplicates consistently, find the insertion
+                    // point *after* all existing items with the same x-value.
+                    insertionPoint = index;
+                    // Note: XYDataItem uses compareTo(Object) which delegates
+                    // to comparing x-values. We use compareTo for Numbers.
+                    while (insertionPoint < this.data.size() &&
+                            x.equals(((XYDataItem) this.data.get(insertionPoint)).getX())) {
+                           // Note: Using x.equals() here assumes x has a well-defined equals method
+                           // matching the Number type stored in XYDataItem. Using compareTo might be
+                           // safer if types can vary but compare meaningfully. Let's stick to equals
+                           // for now as it matches the likely intent of binarySearch finding an equal item.
+                           // Re-checking with compareTo might be slightly more robust:
+                           // Number currentX = ((XYDataItem) this.data.get(insertionPoint)).getX();
+                           // if (currentX.compareTo(x) == 0) { // Check if x values are equivalent
+                           //     insertionPoint++;
+                           // } else {
+                           //     break; // Should not happen if list is sorted and binarySearch worked
+                           // }
+                        insertionPoint++; // Move past items with the same x-value
                     }
-            // check if this addition will exceed the maximum item count...
+                    // Insert after the block of equal x-values
+                }
+                // Ensure insertion point is valid before adding
+                if (insertionPoint < 0) { // Should not happen with -index - 1 logic
+                   insertionPoint = 0;
+                }
+                if (insertionPoint > this.data.size()) { // Should not happen if logic is correct
+                   insertionPoint = this.data.size();
+                }
+                this.data.add(insertionPoint, newItem);
+            }
+            else {
+                // Not auto-sorted, just add to the end
+                this.data.add(newItem);
+            }
+
+            // Check if this addition exceeds the maximum item count
+            // This check should apply regardless of whether it was an add or update,
+            // but the original code only had it in the 'add' block. Let's keep it here.
             if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
+                this.data.remove(0); // Remove the oldest item (at index 0)
             }
         }
-        fireSeriesChanged();
-        return overwritten;
+        fireSeriesChanged(); // Notify listeners
+        return overwritten;  // Return the item that was overwritten (null if added)
     }
\ No newline at end of file
