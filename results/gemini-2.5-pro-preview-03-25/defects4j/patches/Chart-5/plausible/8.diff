diff --git a/tmp/acd710e0-f4af-427b-8659-c74e4f5f886f_buggy.java b/tmp/7f25d2dc-04fe-4029-8033-ebff0ccc7c99_fixed.java
index fd8eae5..c74e12c 100644
--- a/tmp/acd710e0-f4af-427b-8659-c74e4f5f886f_buggy.java
+++ b/tmp/7f25d2dc-04fe-4029-8033-ebff0ccc7c99_fixed.java
@@ -1,47 +1,73 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
+
+        // Find the index of x. If autoSort is true, this uses binary search.
         int index = indexOf(x);
+
         if (index >= 0 && !this.allowDuplicateXValues) {
+            // Case: x found, duplicates NOT allowed --> Update existing item
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
+            // Update the y-value of the existing item
             existing.setY(y);
         }
         else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            // Case: x not found (index < 0), OR duplicates ARE allowed.
+            // In both sub-cases, we need to ADD a new item.
+
+            XYDataItem item = new XYDataItem(x, y);
+
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                // Add DataItem in sorted order
+                int insertionPoint = index;
+                if (insertionPoint < 0) {
+                    // x was not found, binary search returned -(insertion point) - 1
+                    insertionPoint = -insertionPoint - 1;
                 }
                 else {
-                this.data.add(new XYDataItem(x, y));
+                    // x was found (at index >= 0), but duplicates are allowed.
+                    // We need to insert the new item while maintaining order.
+                    // Find the spot after the last existing item with the same x-value
+                    // to ensure stable insertion order for duplicates.
+                    while (insertionPoint < this.data.size() &&
+                           ((XYDataItem) this.data.get(insertionPoint)).getX().equals(x)) {
+                        insertionPoint++;
                     }
-            // check if this addition will exceed the maximum item count...
+                    // insertionPoint is now the correct place to insert the new item.
+                }
+                this.data.add(insertionPoint, item);
+            }
+            else {
+                // Add DataItem to the end of the list (not sorted)
+                this.data.add(item);
+            }
+
+            // Check if this addition exceeds the maximum item count
             if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
+                this.data.remove(0); // Remove the oldest item
             }
         }
+
         fireSeriesChanged();
+        // return null if an item was added, or the original item if updated
         return overwritten;
     }
\ No newline at end of file
