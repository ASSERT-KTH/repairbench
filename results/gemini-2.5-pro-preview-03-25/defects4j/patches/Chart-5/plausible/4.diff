diff --git a/tmp/476a4ef1-d411-439a-acee-5a6e789d5b2b_buggy.java b/tmp/1a5a5f9a-37f3-44c7-953b-ca5b1c9903fc_fixed.java
index fd8eae5..40b71c4 100644
--- a/tmp/476a4ef1-d411-439a-acee-5a6e789d5b2b_buggy.java
+++ b/tmp/1a5a5f9a-37f3-44c7-953b-ca5b1c9903fc_fixed.java
@@ -1,47 +1,99 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
+        // Create the new item upfront in case it needs to be added
+        XYDataItem newItem = new XYDataItem(x, y);
+
         XYDataItem overwritten = null;
+        boolean itemAdded = false;
+
+        // Find the index of x, using binary search if sorted
         int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
+
+        if (index >= 0) { // An item with the same x-value exists
             XYDataItem existing = (XYDataItem) this.data.get(index);
+            if (this.allowDuplicateXValues) {
+                // Add a new item (duplicates allowed)
+                if (this.autoSort) {
+                    // Find the correct insertion point to maintain sort order.
+                    // We should insert after all existing items with the same x-value.
+                    // The index returned by binarySearch might point to any of the duplicates.
+                    // Iterate forward from 'index' to find the position after the last duplicate.
+                    int insertionPoint = index;
+                    // Use compareTo for consistency with sorting logic.
+                    // Assumes XYDataItem implements Comparable based on x-value.
+                    while (insertionPoint < this.data.size() &&
+                           ((XYDataItem) this.data.get(insertionPoint)).compareTo(newItem) == 0) {
+                        insertionPoint++;
+                    }
+                    // Insert the new item at the determined position
+                    this.data.add(insertionPoint, newItem);
+                    itemAdded = true;
+                }
+                else {
+                    // Not sorted, just add to the end
+                    this.data.add(newItem);
+                    itemAdded = true;
+                }
+                // In this case, nothing is 'overwritten' in the update sense
+                overwritten = null;
+            }
+            else {
+                // Update existing item (duplicates not allowed)
                 try {
+                    // Clone the existing item to return as 'overwritten'
                     overwritten = (XYDataItem) existing.clone();
                 }
                 catch (CloneNotSupportedException e) {
+                    // Should not happen if XYDataItem is properly cloneable
                     throw new SeriesException("Couldn't clone XYDataItem!");
                 }
+                // Update the y-value of the existing item found at 'index'
+                // Note: binarySearch might return any index if duplicates were somehow present
+                // despite allowDuplicateXValues being false, but updating the one at 'index'
+                // is the defined behavior here.
                 existing.setY(y);
+                // itemAdded remains false, as we updated, not added.
             }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+        }
+        else { // No item with the same x-value exists (index < 0)
+            // Add the new item
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                // Insert at the position determined by binary search result
+                // The formula -index - 1 gives the correct insertion point
+                this.data.add(-index - 1, newItem);
+                itemAdded = true;
             }
             else {
-                this.data.add(new XYDataItem(x, y));
+                // Not sorted, just add to the end
+                this.data.add(newItem);
+                itemAdded = true;
             }
-            // check if this addition will exceed the maximum item count...
-            if (getItemCount() > this.maximumItemCount) {
+            // Nothing was overwritten
+            overwritten = null;
+        }
+
+        // If an item was added, check if the maximum item count is exceeded
+        if (itemAdded && getItemCount() > this.maximumItemCount) {
+            // Remove the oldest item (at index 0)
             this.data.remove(0);
         }
-        }
+
+        // Notify listeners of the change
         fireSeriesChanged();
+
+        // Return the data item that was overwritten, or null if an item was added
         return overwritten;
     }
\ No newline at end of file
