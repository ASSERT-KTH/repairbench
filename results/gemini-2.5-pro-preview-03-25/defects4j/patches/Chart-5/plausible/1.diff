diff --git a/tmp/80e3ac05-c582-4672-8841-c525e4cb9176_buggy.java b/tmp/6ff6bae4-295b-497d-be48-87e141fc031a_fixed.java
index fd8eae5..0fbf126 100644
--- a/tmp/80e3ac05-c582-4672-8841-c525e4cb9176_buggy.java
+++ b/tmp/6ff6bae4-295b-497d-be48-87e141fc031a_fixed.java
@@ -1,47 +1,81 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
+        // Find the index of the item with the specified x-value.
+        // If 'autoSort' is true, this will be via a binary search.
         int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
+
+        if (index >= 0) { // An item with the specified x-value already exists
             XYDataItem existing = (XYDataItem) this.data.get(index);
+            if (this.allowDuplicateXValues) {
+                // If duplicates are allowed, we add a new item rather than update.
+                if (this.autoSort) {
+                    // If the list is sorted, we need to ensure the new item is inserted
+                    // in the correct position. binarySearch might return any index
+                    // if multiple items have the same x-value. We scan forward
+                    // from the found index to find the position *after* all existing
+                    // items with the same x-value.
+                    int insertionPoint = index;
+                    while (insertionPoint < this.data.size() &&
+                           ((XYDataItem) this.data.get(insertionPoint)).getX().equals(x)) {
+                        insertionPoint++;
+                    }
+                    this.data.add(insertionPoint, new XYDataItem(x, y));
+                } else {
+                    // If not sorted, just add the new item to the end.
+                    this.data.add(new XYDataItem(x, y));
+                }
+
+                // Check if adding the new item exceeds the maximum item count
+                if (getItemCount() > this.maximumItemCount) {
+                    this.data.remove(0);
+                }
+                fireSeriesChanged(); // Notify listeners of the change (add)
+                // No item was overwritten in this case
+            } else {
+                // If duplicates are not allowed, update the existing item's y-value.
                 try {
+                    // Clone the existing item to return as 'overwritten'
                     overwritten = (XYDataItem) existing.clone();
-            }
-            catch (CloneNotSupportedException e) {
+                } catch (CloneNotSupportedException e) {
+                    // This should not happen if XYDataItem is cloneable
                     throw new SeriesException("Couldn't clone XYDataItem!");
                 }
+                // Update the y-value of the existing item
                 existing.setY(y);
+                fireSeriesChanged(); // Notify listeners of the change (update)
             }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+        } else { // No item with the specified x-value exists, add a new one
+            XYDataItem newItem = new XYDataItem(x, y);
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                // If sorted, add the item at the calculated insertion point.
+                // The negative index from binarySearch indicates the insertion point.
+                this.data.add(-index - 1, newItem);
+            } else {
+                // If not sorted, just add the new item to the end.
+                this.data.add(newItem);
             }
-            else {
-                this.data.add(new XYDataItem(x, y));
-            }
-            // check if this addition will exceed the maximum item count...
+
+            // Check if adding the new item exceeds the maximum item count
             if (getItemCount() > this.maximumItemCount) {
                 this.data.remove(0);
             }
+            fireSeriesChanged(); // Notify listeners of the change (add)
+            // No item was overwritten in this case
         }
-        fireSeriesChanged();
+
         return overwritten;
     }
\ No newline at end of file
