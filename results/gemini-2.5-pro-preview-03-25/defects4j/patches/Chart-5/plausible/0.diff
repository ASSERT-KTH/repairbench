diff --git a/tmp/b79d6265-e33b-48a5-97a2-cd1839d6ceac_buggy.java b/tmp/114c275f-fe0e-4dd9-a573-2ea65166ed6c_fixed.java
index fd8eae5..76b6a20 100644
--- a/tmp/b79d6265-e33b-48a5-97a2-cd1839d6ceac_buggy.java
+++ b/tmp/114c275f-fe0e-4dd9-a573-2ea65166ed6c_fixed.java
@@ -1,47 +1,66 @@
     /**
      * Adds or updates an item in the series and sends a
-     * {@link SeriesChangeEvent} to all registered listeners.
+     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
-        int index = indexOf(x);
+        int index = indexOf(x); // Uses binary search if autoSort is true
+
         if (index >= 0 && !this.allowDuplicateXValues) {
+            // Case 1: Item found and duplicates ARE NOT allowed --> Update existing item
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
-            }
-            catch (CloneNotSupportedException e) {
+            } catch (CloneNotSupportedException e) {
+                // This should never happen since XYDataItem implements Cloneable
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
             existing.setY(y);
-        }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            // Note: An update doesn't change the item count or require re-sorting by X.
+        } else {
+            // Case 2: Item not found (index < 0), OR item found and duplicates ARE allowed --> Add new item
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                int insertionPoint;
+                if (index >= 0) {
+                    // Item found, duplicates allowed: find insertion point AFTER existing items
+                    // with the same x-value. Because binarySearch doesn't guarantee which duplicate
+                    // is found, we search forward from the found index 'index' to find the position
+                    // after the last item with the same x-value.
+                    insertionPoint = index;
+                    while (insertionPoint < this.data.size() &&
+                           ((XYDataItem) this.data.get(insertionPoint)).getX().equals(x)) {
+                        insertionPoint++;
                     }
-            else {
+                    // insertionPoint is now the correct position to insert the new item
+                    // while maintaining the sort order.
+                 } else {
+                    // Item not found: calculate insertion point from binary search result
+                    insertionPoint = -index - 1;
+                }
+                this.data.add(insertionPoint, new XYDataItem(x, y));
+            } else {
+                // Not sorted: just add to the end
                 this.data.add(new XYDataItem(x, y));
             }
-            // check if this addition will exceed the maximum item count...
+
+            // After adding, check if the maximum item count has been exceeded
             if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
+                this.data.remove(0); // Remove the oldest item
             }
+            // When adding, no item is overwritten in the sense of the return value specification
+             overwritten = null;
         }
+
         fireSeriesChanged();
         return overwritten;
     }
\ No newline at end of file
