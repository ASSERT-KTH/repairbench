diff --git a/tmp/6124b801-941b-49a4-bae5-8bd30ae56e33_buggy.java b/tmp/180053c4-6595-4d16-8f87-6f2a38730bae_fixed.java
index fd8eae5..ede1277 100644
--- a/tmp/6124b801-941b-49a4-bae5-8bd30ae56e33_buggy.java
+++ b/tmp/180053c4-6595-4d16-8f87-6f2a38730bae_fixed.java
@@ -1,47 +1,70 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
-        int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
+        int index = indexOf(x); // uses binary search if autoSort
+
+        if (index >= 0 && !this.allowDuplicateXValues) { // Update existing item
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
-            existing.setY(y);
+            existing.setY(y); // Update the y-value
         }
-        else {
+        else { // Add new item (either index < 0 or allowDuplicateXValues is true)
             // if the series is sorted, the negative index is a result from
             // Collections.binarySearch() and tells us where to insert the
             // new item...otherwise it will be just -1 and we should just
             // append the value to the list...
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                 int insertionIndex;
+                 if (index < 0) { // Item not found, calculate insertion point from negative index
+                     insertionIndex = -index - 1;
                  }
-            else {
+                 else { // Item found (at index >= 0) AND duplicates are allowed.
+                       // We need to insert the new item MAINTAINING SORT ORDER.
+                       // Find the insertion point *after* all existing items with the same x value.
+                       // This ensures that items with duplicate x-values are appended.
+                     insertionIndex = index;
+                     // Note: 'index' is where binary search found *an* item with matching x.
+                     // We iterate forward from this point to find the position *after* the last
+                     // item with the same x-value.
+                     while (insertionIndex < this.data.size() &&
+                            ((XYDataItem) this.data.get(insertionIndex)).getX().equals(x)) {
+                         insertionIndex++;
+                     }
+                     // If the binary search found the *last* item with value x,
+                     // insertionIndex will now be index + 1.
+                     // If it found an earlier item, the loop moves insertionIndex
+                     // to the position after the last item with value x.
+                 }
+                 this.data.add(insertionIndex, new XYDataItem(x, y));
+            }
+            else { // Not autoSort
                 this.data.add(new XYDataItem(x, y));
             }
             // check if this addition will exceed the maximum item count...
+            // We should do this *after* adding the item.
             if (getItemCount() > this.maximumItemCount) {
                 this.data.remove(0);
             }
         }
+        // fireSeriesChanged only once at the end, regardless of add or update
         fireSeriesChanged();
-        return overwritten;
+        return overwritten; // null if added, non-null if updated
     }
\ No newline at end of file
