diff --git a/tmp/96e4cac6-24e7-47d2-a2bf-ea9f5ae074e7_buggy.java b/tmp/02f02094-bae2-418f-b7ca-7f8944509df0_fixed.java
index fd8eae5..b524f69 100644
--- a/tmp/96e4cac6-24e7-47d2-a2bf-ea9f5ae074e7_buggy.java
+++ b/tmp/02f02094-bae2-418f-b7ca-7f8944509df0_fixed.java
@@ -1,47 +1,78 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
-        int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
+        boolean added = false; // Flag to track if we added a new item
+
+        // find the index for the item with the given x-value
+        int index = indexOf(x); // uses Collections.binarySearch if autoSort is true
+
+        if (index >= 0) {
+            // An item with the same x-value exists...
+            if (!this.allowDuplicateXValues) {
+                // If duplicates are not allowed, update the existing item
                 XYDataItem existing = (XYDataItem) this.data.get(index);
                 try {
                     overwritten = (XYDataItem) existing.clone();
                 }
                 catch (CloneNotSupportedException e) {
                     throw new SeriesException("Couldn't clone XYDataItem!");
                 }
                 existing.setY(y);
+                // item updated, no need to add, added remains false
             }
             else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+                // Duplicates ARE allowed, so we ADD a new item...
+                XYDataItem newItem = new XYDataItem(x, y);
                 if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                    // If sorted, insert the duplicate after the item found by
+                    // indexOf(). This maintains order relative to duplicates.
+                    // Note: List.add(index, item) inserts *before* the element
+                    // currently at 'index'. Adding at 'index + 1' inserts after.
+                    this.data.add(index + 1, newItem);
                 }
                 else {
-                this.data.add(new XYDataItem(x, y));
+                    // If not sorted, just append the new item.
+                    this.data.add(newItem);
                 }
-            // check if this addition will exceed the maximum item count...
-            if (getItemCount() > this.maximumItemCount) {
+                added = true;
+            }
+        }
+        else {
+            // No item with the same x-value exists, so ADD a new item...
+            XYDataItem newItem = new XYDataItem(x, y);
+            if (this.autoSort) {
+                // If sorted, insert item at the correct position determined
+                // by the binary search result (-(insertion point) - 1).
+                this.data.add(-index - 1, newItem);
+            }
+            else {
+                // If not sorted, just append the new item.
+                this.data.add(newItem);
+            }
+            added = true;
+        }
+
+        // If we added an item, check if this exceeds the maximum item count...
+        if (added && getItemCount() > this.maximumItemCount) {
             this.data.remove(0);
         }
-        }
+
+        // Notify listeners that the series has changed (either by update or add)
         fireSeriesChanged();
+
+        // Return the overwritten item if an update occurred, otherwise null.
         return overwritten;
     }
\ No newline at end of file
