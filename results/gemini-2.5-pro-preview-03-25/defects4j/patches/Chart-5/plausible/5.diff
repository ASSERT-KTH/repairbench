diff --git a/tmp/6040a8b1-c157-47f0-b45f-459a4d7d7343_buggy.java b/tmp/34b1236d-0721-49df-a18f-27e923dfff82_fixed.java
index fd8eae5..8fcad78 100644
--- a/tmp/6040a8b1-c157-47f0-b45f-459a4d7d7343_buggy.java
+++ b/tmp/34b1236d-0721-49df-a18f-27e923dfff82_fixed.java
@@ -1,47 +1,72 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
-        int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
+        int index = indexOf(x); // uses Collections.binarySearch if autoSort is true
+
+        if (index >= 0) { // An item with the same x-value exists
             XYDataItem existing = (XYDataItem) this.data.get(index);
+            if (!this.allowDuplicateXValues) { // If duplicates are not allowed, overwrite
                 try {
                     overwritten = (XYDataItem) existing.clone();
                 }
                 catch (CloneNotSupportedException e) {
                     throw new SeriesException("Couldn't clone XYDataItem!");
                 }
-            existing.setY(y);
+                existing.setY(y); // Update the existing item's y-value
             }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            else { // If duplicates ARE allowed, add a new item
                 if (this.autoSort) {
+                    // Insert the new item in the correct sorted position.
+                    // Since index >= 0, binarySearch found an item with the same x-value.
+                    // We need to find the insertion point AFTER all existing items
+                    // with the same x-value to maintain order. The 'index' returned
+                    // by binarySearch could be any of the duplicates. We iterate
+                    // forward from 'index' to find the position after the last
+                    // duplicate x-value.
+                    int insertionPoint = index;
+                    // Need a temporary item to compare x-values correctly using compareTo
+                    XYDataItem probe = new XYDataItem(x, null);
+                    while (insertionPoint < this.data.size() &&
+                           ((XYDataItem) this.data.get(insertionPoint)).compareTo(probe) == 0) {
+                        insertionPoint++;
+                    }
+                    // Insert the new item at the calculated insertion point
+                    this.data.add(insertionPoint, new XYDataItem(x, y));
+                }
+                else { // Not auto-sorted, just add to the end
+                    this.data.add(new XYDataItem(x, y));
+                }
+            }
+        }
+        else { // Item with x not found (index < 0)
+            // if the series is sorted, the negative index tells us where to insert
+            if (this.autoSort) {
+                // Calculate the insertion point using the formula for binarySearch's negative result
                 this.data.add(-index - 1, new XYDataItem(x, y));
             }
-            else {
+            else { // Not auto-sorted, just add to the end
                 this.data.add(new XYDataItem(x, y));
             }
+        }
+
         // check if this addition will exceed the maximum item count...
         if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
-            }
+            this.data.remove(0); // Remove the item at index 0
         }
+
         fireSeriesChanged();
         return overwritten;
     }
\ No newline at end of file
