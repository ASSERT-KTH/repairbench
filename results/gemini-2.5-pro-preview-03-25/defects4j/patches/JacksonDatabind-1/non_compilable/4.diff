diff --git a/tmp/7673c015-cc66-419f-8022-dbcacf6a3bc4_buggy.java b/tmp/eddec23f-5cbb-47ad-a459-8584eaf6409d_fixed.java
index dbadad4..b4baf93 100644
--- a/tmp/7673c015-cc66-419f-8022-dbcacf6a3bc4_buggy.java
+++ b/tmp/eddec23f-5cbb-47ad-a459-8584eaf6409d_fixed.java
@@ -1,50 +1,70 @@
     /**
      * Alternative to {@link #serializeAsField} that is used when a POJO
      * is serialized as JSON Array; the difference is that no field names
      * are written.
      * 
      * @since 2.1
      */
     public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
         if (value == null) { // nulls need specialized handling
             if (_nullSerializer != null) {
                 _nullSerializer.serialize(null, jgen, prov);
             } else { // can NOT suppress entries in tabular output
                 jgen.writeNull();
             }
+            // [databind#223]: need to bail out after null handling
+            return; // <<< FIX: Added return statement
         }
         // otherwise find serializer to use
         JsonSerializer<Object> ser = _serializer;
         if (ser == null) {
             Class<?> cls = value.getClass();
             PropertySerializerMap map = _dynamicSerializers;
             ser = map.serializerFor(cls);
             if (ser == null) {
                 ser = _findAndAddDynamic(map, cls, prov);
             }
         }
         // and then see if we must suppress certain values (default, empty)
         if (_suppressableValue != null) {
             if (MARKER_FOR_EMPTY == _suppressableValue) {
+                // For 2.5+, need SerializerProvider:
+                // if (ser.isEmpty(prov, value)) { 
                 if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
                     serializeAsPlaceholder(bean, jgen, prov);
                     return;
                 }
             } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
                 serializeAsPlaceholder(bean, jgen, prov);
                 return;
             }
         }
         // For non-nulls: simple check for direct cycles
         if (value == bean) {
-            _handleSelfReference(bean, ser);
+            // [databind#42]: Need to consider self-reference values for BEAN properties too
+             // Below call returns true if reference was handled, false otherwise
+            if (_handleSelfReference(bean, jgen, prov, ser)) {
+                return;
             }
+            // Original code snippet had different signature, let's keep it as is if required:
+            // _handleSelfReference(bean, ser); 
+            // However, without a return based on handling, it might not prevent cycles correctly.
+            // Assuming the intent is to skip serialization if handled:
+            // if (_handleSelfReference(bean, ser)) { // Assuming older version returns boolean
+            //    return;
+            // }
+            // If _handleSelfReference does not return boolean/handle skipping, the check below is needed
+             // However, let's stick to the simplest fix for the reported bug, assuming _handleSelfReference is correct
+             // or not relevant to this specific bug.
+             _handleSelfReference(bean, ser); // Keep original call from snippet if necessary, though likely needs update
+        }
+
         if (_typeSerializer == null) {
             ser.serialize(value, jgen, prov);
         } else {
             ser.serializeWithType(value, jgen, prov, _typeSerializer);
         }
     }
