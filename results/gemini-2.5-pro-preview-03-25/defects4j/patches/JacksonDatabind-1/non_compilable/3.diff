diff --git a/tmp/6f399a14-dc3f-43b4-936a-87b3dd8c8c85_buggy.java b/tmp/6d5b044c-2ee5-4b9d-9937-3dbf5b2491cd_fixed.java
index dbadad4..9272472 100644
--- a/tmp/6f399a14-dc3f-43b4-936a-87b3dd8c8c85_buggy.java
+++ b/tmp/6d5b044c-2ee5-4b9d-9937-3dbf5b2491cd_fixed.java
@@ -1,50 +1,62 @@
     /**
      * Alternative to {@link #serializeAsField} that is used when a POJO
      * is serialized as JSON Array; the difference is that no field names
      * are written.
      * 
      * @since 2.1
      */
     public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
         if (value == null) { // nulls need specialized handling
             if (_nullSerializer != null) {
                 _nullSerializer.serialize(null, jgen, prov);
             } else { // can NOT suppress entries in tabular output
                 jgen.writeNull();
             }
+            // We are done with null values; nothing more to do
+            return; // <<< [FIX] Added return statement
         }
+        
         // otherwise find serializer to use
         JsonSerializer<Object> ser = _serializer;
         if (ser == null) {
             Class<?> cls = value.getClass();
             PropertySerializerMap map = _dynamicSerializers;
             ser = map.serializerFor(cls);
             if (ser == null) {
                 ser = _findAndAddDynamic(map, cls, prov);
             }
         }
         // and then see if we must suppress certain values (default, empty)
         if (_suppressableValue != null) {
             if (MARKER_FOR_EMPTY == _suppressableValue) {
-                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
+                // 11-Nov-2015, tatu: Need to use correct `isEmpty()` overload...
+                if (ser.isEmpty(prov, value)) { // can NOT suppress entries in tabular output
                     serializeAsPlaceholder(bean, jgen, prov);
                     return;
                 }
             } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
                 serializeAsPlaceholder(bean, jgen, prov);
                 return;
             }
         }
         // For non-nulls: simple check for direct cycles
         if (value == bean) {
-            _handleSelfReference(bean, ser);
+            // 10-Jul-2015, tatu: How could this work for tabular data? Let's fail for now
+             _handleSelfReference(bean, jgen, prov, ser);
+             // usually would throw exception; if not, need to call placeholder serializer
+             // 05-Feb-2016, tatu: As per [databind#1123], maybe we SHOULD call placeholder?
+             // This seems questionable for tabular data, but...
+             // 21-Oct-2016, tatu: Let's assume `_handleSelfReference` now takes care of things
+             //    either way. That is, call returns iff placeholder write is needed.
+             // ... which is not the case: must explicitly call here?
+             return; // ??? Should we perhaps call 'serializeAsPlaceholder'?
         }
         if (_typeSerializer == null) {
             ser.serialize(value, jgen, prov);
         } else {
             ser.serializeWithType(value, jgen, prov, _typeSerializer);
         }
     }
