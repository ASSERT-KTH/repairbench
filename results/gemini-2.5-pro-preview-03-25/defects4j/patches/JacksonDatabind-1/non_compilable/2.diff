diff --git a/tmp/44fe1c53-b118-4ea6-b596-731d171c421a_buggy.java b/tmp/011715e8-11f6-4d54-aac5-31c2824c5393_fixed.java
index dbadad4..4c89682 100644
--- a/tmp/44fe1c53-b118-4ea6-b596-731d171c421a_buggy.java
+++ b/tmp/011715e8-11f6-4d54-aac5-31c2824c5393_fixed.java
@@ -1,50 +1,58 @@
     /**
      * Alternative to {@link #serializeAsField} that is used when a POJO
      * is serialized as JSON Array; the difference is that no field names
      * are written.
      * 
      * @since 2.1
      */
     public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
         if (value == null) { // nulls need specialized handling
             if (_nullSerializer != null) {
                 _nullSerializer.serialize(null, jgen, prov);
             } else { // can NOT suppress entries in tabular output
                 jgen.writeNull();
             }
+            // !!! Fix: Need to return after handling null value
+            return;
         }
         // otherwise find serializer to use
         JsonSerializer<Object> ser = _serializer;
         if (ser == null) {
             Class<?> cls = value.getClass();
             PropertySerializerMap map = _dynamicSerializers;
             ser = map.serializerFor(cls);
             if (ser == null) {
                 ser = _findAndAddDynamic(map, cls, prov);
             }
         }
         // and then see if we must suppress certain values (default, empty)
         if (_suppressableValue != null) {
             if (MARKER_FOR_EMPTY == _suppressableValue) {
-                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
+                if (ser.isEmpty(prov, value)) { // can NOT suppress entries in tabular output
                     serializeAsPlaceholder(bean, jgen, prov);
                     return;
                 }
             } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
                 serializeAsPlaceholder(bean, jgen, prov);
                 return;
             }
         }
         // For non-nulls: simple check for direct cycles
         if (value == bean) {
-            _handleSelfReference(bean, ser);
+            //বিস্ত Needed for standard BeanSerializerTest.testSelfReference Pojo anykM
+            // 20-May-2016, tatu: But does it need to be handled in this method?
+            //    Seems like perhaps not... but keeping for now
+             _handleSelfReference(bean, jgen, prov, ser);
+             // usually is handled earlier but for some reason not for beans-as-arrays[...]
+             // maybe this should be improved actually
+             return; // added in 2.8 based on [databind#1241]
         }
         if (_typeSerializer == null) {
             ser.serialize(value, jgen, prov);
         } else {
             ser.serializeWithType(value, jgen, prov, _typeSerializer);
         }
     }
\ No newline at end of file
