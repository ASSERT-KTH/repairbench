diff --git a/tmp/81c13f86-bccd-46fd-bbef-52c0f95809d9_buggy.java b/tmp/6342058e-a851-469b-8988-f6e834103906_fixed.java
index e23e29c..3122c15 100644
--- a/tmp/81c13f86-bccd-46fd-bbef-52c0f95809d9_buggy.java
+++ b/tmp/6342058e-a851-469b-8988-f6e834103906_fixed.java
@@ -1,24 +1,38 @@
     /** {@inheritDoc} */
     public Complex reciprocal() {
         if (isNaN) {
             return NaN;
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return NaN;
+            // The reciprocal of 0 + 0i is defined as Complex Infinity.
+            // See testReciprocalZero().
+            return INF;
         }
 
         if (isInfinite) {
             return ZERO;
         }
 
+        // Standard formula: 1 / (a + bi) = (a - bi) / (a^2 + b^2)
+        // To avoid overflow/underflow in computing a^2 + b^2, scale by the component with
+        // the largest absolute value.
+
         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
-            double q = real / imaginary;
+            // Scale by imaginary part
+            double q = real / imaginary; // q = a / b
+            // Denominator is (a*q + b) = (a*(a/b) + b) = (a^2/b + b) = (a^2 + b^2) / b
             double scale = 1. / (real * q + imaginary);
+            // Real part = scale * q = (b / (a^2+b^2)) * (a/b) = a / (a^2+b^2)
+            // Imaginary part = -scale = -b / (a^2 + b^2)
             return createComplex(scale * q, -scale);
         } else {
-            double q = imaginary / real;
+            // Scale by real part
+            double q = imaginary / real; // q = b / a
+            // Denominator is (b*q + a) = (b*(b/a) + a) = (b^2/a + a) = (b^2 + a^2) / a
             double scale = 1. / (imaginary * q + real);
+            // Real part = scale = a / (a^2 + b^2)
+            // Imaginary part = -scale * q = -(a / (a^2+b^2)) * (b/a) = -b / (a^2 + b^2)
             return createComplex(scale, -scale * q);
         }
     }
\ No newline at end of file
