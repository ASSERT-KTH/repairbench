diff --git a/tmp/31424e62-3950-43fc-9a90-744bf615f9ae_buggy.java b/tmp/7317eedf-92c8-4fbf-9729-0147cf2a0896_fixed.java
index e23e29c..6bdf6a2 100644
--- a/tmp/31424e62-3950-43fc-9a90-744bf615f9ae_buggy.java
+++ b/tmp/7317eedf-92c8-4fbf-9729-0147cf2a0896_fixed.java
@@ -1,24 +1,35 @@
     /** {@inheritDoc} */
     public Complex reciprocal() {
         if (isNaN) {
             return NaN;
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return NaN;
+            // The reciprocal of 0 is INF, according to the test case.
+            // The original code returned NaN, causing the test failure.
+            return INF;
         }
 
         if (isInfinite) {
             return ZERO;
         }
 
         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
             double q = real / imaginary;
+            // Avoid intermediate overflow/underflow by using scaling.
+            // Formula: 1 / (a + bi) = (a - bi) / (a^2 + b^2)
+            // scale = 1 / (a*(a/b) + b) = 1 / (a^2/b + b) = b / (a^2 + b^2)
             double scale = 1. / (real * q + imaginary);
+            // Real part = scale * q = (b / (a^2 + b^2)) * (a / b) = a / (a^2 + b^2)
+            // Imaginary part = -scale = -b / (a^2 + b^2)
             return createComplex(scale * q, -scale);
         } else {
             double q = imaginary / real;
+            // Avoid intermediate overflow/underflow by using scaling.
+            // scale = 1 / (b*(b/a) + a) = 1 / (b^2/a + a) = a / (a^2 + b^2)
             double scale = 1. / (imaginary * q + real);
+            // Real part = scale = a / (a^2 + b^2)
+            // Imaginary part = -scale * q = -(a / (a^2 + b^2)) * (b / a) = -b / (a^2 + b^2)
             return createComplex(scale, -scale * q);
         }
     }
\ No newline at end of file
