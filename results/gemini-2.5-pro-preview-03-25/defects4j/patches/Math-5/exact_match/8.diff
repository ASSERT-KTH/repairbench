diff --git a/tmp/d0f55d09-3e1a-46c3-a804-734a2c740b0f_buggy.java b/tmp/c5e8766a-2830-4f8d-92e3-b41c6f91ce79_fixed.java
index e23e29c..246ec56 100644
--- a/tmp/d0f55d09-3e1a-46c3-a804-734a2c740b0f_buggy.java
+++ b/tmp/c5e8766a-2830-4f8d-92e3-b41c6f91ce79_fixed.java
@@ -1,24 +1,38 @@
     /** {@inheritDoc} */
     public Complex reciprocal() {
         if (isNaN) {
             return NaN;
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return NaN;
+            // The reciprocal of 0 + 0i is Complex Infinity.
+            // The original code returned NaN, causing the test failure.
+            return INF;
         }
 
         if (isInfinite) {
             return ZERO;
         }
 
+        // Scaling implementation to avoid intermediate overflow/underflow
+        // This part correctly calculates 1 / (a + bi) = (a - bi) / (a^2 + b^2)
         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
             double q = real / imaginary;
+            // Denominator: real * q + imaginary = real * (real / imaginary) + imaginary
+            //             = (real^2 / imaginary) + imaginary = (real^2 + imaginary^2) / imaginary
+            // Scale: 1. / denominator = imaginary / (real^2 + imaginary^2)
             double scale = 1. / (real * q + imaginary);
+            // Real part: scale * q = (imaginary / (real^2 + imaginary^2)) * (real / imaginary) = real / (real^2 + imaginary^2)
+            // Imaginary part: -scale = -imaginary / (real^2 + imaginary^2)
             return createComplex(scale * q, -scale);
         } else {
             double q = imaginary / real;
+            // Denominator: imaginary * q + real = imaginary * (imaginary / real) + real
+            //             = (imaginary^2 / real) + real = (imaginary^2 + real^2) / real
+            // Scale: 1. / denominator = real / (imaginary^2 + real^2)
             double scale = 1. / (imaginary * q + real);
+            // Real part: scale = real / (real^2 + imaginary^2)
+            // Imaginary part: -scale * q = -(real / (real^2 + imaginary^2)) * (imaginary / real) = -imaginary / (real^2 + imaginary^2)
             return createComplex(scale, -scale * q);
         }
     }
