diff --git a/tmp/68752457-4d9e-41f0-97c7-97a3c4bff5df_buggy.java b/tmp/d773c325-3569-4121-97b0-2122d54dbd49_fixed.java
index e23e29c..a0d471e 100644
--- a/tmp/68752457-4d9e-41f0-97c7-97a3c4bff5df_buggy.java
+++ b/tmp/d773c325-3569-4121-97b0-2122d54dbd49_fixed.java
@@ -1,24 +1,34 @@
     /** {@inheritDoc} */
     public Complex reciprocal() {
         if (isNaN) {
             return NaN;
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return NaN;
+            // The reciprocal of 0 + 0i should be Complex Infinity according to the test.
+            // The original code returned NaN, causing the test failure.
+            return INF;
         }
 
         if (isInfinite) {
             return ZERO;
         }
 
+        // Calculation for non-special cases using scaling to avoid overflow/underflow.
+        // 1 / (a + bi) = (a - bi) / (a^2 + b^2)
         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
-            double q = real / imaginary;
+            double q = real / imaginary; // q = a / b
+            // scale = 1 / (a * (a/b) + b) = 1 / (a^2/b + b) = 1 / ((a^2 + b^2)/b) = b / (a^2 + b^2)
             double scale = 1. / (real * q + imaginary);
+            // real part = scale * q = (b / (a^2 + b^2)) * (a / b) = a / (a^2 + b^2)
+            // imag part = -scale = -b / (a^2 + b^2)
             return createComplex(scale * q, -scale);
         } else {
-            double q = imaginary / real;
+            double q = imaginary / real; // q = b / a
+            // scale = 1 / (b * (b/a) + a) = 1 / (b^2/a + a) = 1 / ((b^2 + a^2)/a) = a / (a^2 + b^2)
             double scale = 1. / (imaginary * q + real);
+            // real part = scale = a / (a^2 + b^2)
+            // imag part = -scale * q = -(a / (a^2 + b^2)) * (b / a) = -b / (a^2 + b^2)
             return createComplex(scale, -scale * q);
         }
     }
