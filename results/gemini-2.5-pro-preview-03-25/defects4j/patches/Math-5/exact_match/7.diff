diff --git a/tmp/27951287-09ca-4290-a14e-9dd256507a54_buggy.java b/tmp/0972313d-8d2a-4be4-a74b-33cfd2445501_fixed.java
index e23e29c..150a12f 100644
--- a/tmp/27951287-09ca-4290-a14e-9dd256507a54_buggy.java
+++ b/tmp/0972313d-8d2a-4be4-a74b-33cfd2445501_fixed.java
@@ -1,24 +1,37 @@
     /** {@inheritDoc} */
     public Complex reciprocal() {
         if (isNaN) {
             return NaN;
         }
 
+        // Handle division by zero
         if (real == 0.0 && imaginary == 0.0) {
-            return NaN;
+            // The test org.apache.commons.math3.complex.ComplexTest.testReciprocalZero
+            // expects Complex.ZERO.reciprocal() to return Complex.INF.
+            // The original code returned Complex.NaN.
+            return INF; // Fixed: return INF for 1/0
         }
 
+        // Handle reciprocal of infinity
         if (isInfinite) {
             return ZERO;
         }
 
+        // Standard case: 1 / (a + ib) = (a - ib) / (a^2 + b^2)
+        // Use scaling to prevent intermediate overflow or underflow
         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
             double q = real / imaginary;
-            double scale = 1. / (real * q + imaginary);
+            // Denominator is (real * q + imaginary) = (real^2 / imaginary + imaginary) = (real^2 + imaginary^2) / imaginary
+            double scale = 1. / (real * q + imaginary); // scale = imaginary / (real^2 + imaginary^2)
+            // Real part = scale * q = (imaginary / (real^2 + imaginary^2)) * (real / imaginary) = real / (real^2 + imaginary^2)
+            // Imaginary part = -scale = -imaginary / (real^2 + imaginary^2)
             return createComplex(scale * q, -scale);
         } else {
             double q = imaginary / real;
-            double scale = 1. / (imaginary * q + real);
+            // Denominator is (imaginary * q + real) = (imaginary^2 / real + real) = (imaginary^2 + real^2) / real
+            double scale = 1. / (imaginary * q + real); // scale = real / (real^2 + imaginary^2)
+            // Real part = scale = real / (real^2 + imaginary^2)
+            // Imaginary part = -scale * q = -(real / (real^2 + imaginary^2)) * (imaginary / real) = -imaginary / (real^2 + imaginary^2)
             return createComplex(scale, -scale * q);
         }
     }
\ No newline at end of file
