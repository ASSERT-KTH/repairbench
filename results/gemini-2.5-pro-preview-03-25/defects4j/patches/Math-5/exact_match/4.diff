diff --git a/tmp/43e59300-0c0b-46f1-abf4-4e5d5e777c2a_buggy.java b/tmp/470fb8d8-ff76-434a-9424-587c57796e32_fixed.java
index e23e29c..80d97c4 100644
--- a/tmp/43e59300-0c0b-46f1-abf4-4e5d5e777c2a_buggy.java
+++ b/tmp/470fb8d8-ff76-434a-9424-587c57796e32_fixed.java
@@ -1,24 +1,33 @@
     /** {@inheritDoc} */
     public Complex reciprocal() {
         if (isNaN) {
             return NaN;
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return NaN;
+            // The reciprocal of 0 + 0i is INF, not NaN.
+            return INF;
         }
 
         if (isInfinite) {
             return ZERO;
         }
 
         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
             double q = real / imaginary;
+            // Avoid intermediate overflow/underflow by using formula:
+            // 1 / (a + bi) = (a - bi) / (a^2 + b^2)
+            // When |a| < |b|, compute scale = b / (a^2 + b^2) = 1 / (a*(a/b) + b)
+            // real part = scale * (a/b) = a / (a^2 + b^2)
+            // imaginary part = -scale = -b / (a^2 + b^2)
             double scale = 1. / (real * q + imaginary);
             return createComplex(scale * q, -scale);
         } else {
             double q = imaginary / real;
+            // When |a| >= |b|, compute scale = a / (a^2 + b^2) = 1 / (b*(b/a) + a)
+            // real part = scale = a / (a^2 + b^2)
+            // imaginary part = -scale * (b/a) = -b / (a^2 + b^2)
             double scale = 1. / (imaginary * q + real);
             return createComplex(scale, -scale * q);
         }
     }
\ No newline at end of file
