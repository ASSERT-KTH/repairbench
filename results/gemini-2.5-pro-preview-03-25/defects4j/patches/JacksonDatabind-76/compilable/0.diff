diff --git a/tmp/99c8c5a8-fe44-4408-b36f-8c7243b1dd50_buggy.java b/tmp/6db81c86-bf9e-4dc5-a0ff-861c06598b69_fixed.java
index 3effef5..b63eb32 100644
--- a/tmp/99c8c5a8-fe44-4408-b36f-8c7243b1dd50_buggy.java
+++ b/tmp/6db81c86-bf9e-4dc5-a0ff-861c06598b69_fixed.java
@@ -1,73 +1,95 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+                // Last creator property to assign? If so, ready to build
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                    t = p.nextToken(); // token after value handled
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                          wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                         continue; // Or return null? Or throw?
                     }
+                    // if so, need to copy all remaining tokens into buffer
+                    // Note: This comparison is Namenode specific (using reference equality)
+                    // Need to check class of bean produced, may be different if using subtypes?
                     while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
+                        // (Gotcha: need to use method that forces copying, not reference):
                         tokens.copyCurrentStructure(p);
                         t = p.nextToken();
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
+                         // TBD: try calling method(s) for converting? Or fail? For now, let's fail
+                         // Throw exception or return null? For now, let's throw...
+                         // 15-Feb-2012, tatu: Probably should not block this, better try to handle somehow..
+                         // 13-Dec-2015, tatu: Indeed. Still not fixed for 2.7, but should be fixed later on.
                          ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                          return null;
                     }
+                    //交给 UnwrappedPropertyHandler 处理缓存的 tokens
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
+            // Ignorable? Or handled by external type id?
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+            // Oh, different: some properties are part of value itself... others are not. Hmmm....
+            // Let's assume that anything NOT known is supposed to be unwrapped, for now.
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
+                // TODO: deserialize vs buffer?
                  buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
+            /* Unknown property? Try to throw an exception (if configured to do so); or ignore.
+             * Let's start with ignoring, for now... generally we should report an exception, probably.
+             * 15-Feb-2012, tatu: Need to reconsider this, handle according to configuration
+             */
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
-            return wrapInstantiationProblem(e, ctxt);
+            //return wrapInstantiationProblem(e, ctxt);
+            // We don't have property name context here (yet?), so:
+            wrapInstantiationProblem(e, ctxt);
+            // never gets here...
+            return null;
         }
+        // And then unwrapped properties... This is assumed to close buffer etc
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
