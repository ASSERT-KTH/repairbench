diff --git a/tmp/fae5c898-67c0-4645-973b-b5e6f81e4124_buggy.java b/tmp/7f1354a3-ecb1-4d7a-8785-a8fe8b5cddcc_fixed.java
index 3effef5..553ed70 100644
--- a/tmp/fae5c898-67c0-4645-973b-b5e6f81e4124_buggy.java
+++ b/tmp/7f1354a3-ecb1-4d7a-8785-a8fe8b5cddcc_fixed.java
@@ -1,73 +1,109 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+        // 01-Sep-2017, tatu: Although we need to buffer all properties,
+        //   may need to buffer into separate TokenBuffer if Built-Based Creators
+        //   are used: this is because Builder may be needed to process
+        //   unwrapped properties.
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+                // Last creator property to assign?
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                        // 24-Aug-2016, tatu: As per [databind#1347], need to wrap problem
+                        bean = wrapInstantiationProblem(e, ctxt);
                     }
+                    // if so, need to copy all remaining tokens into buffer
                     while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                        // NOTE: do not call p.copyCurrentStructure() as that implies reading closing END_OBJECT
+                        tokens.writeFieldName(p.getCurrentName());
+                        p.nextToken(); // value token
+                        tokens.copyCurrentStructure(p); // copies value structure, advances p
+                        t = p.getCurrentToken(); // p points to FIELD_NAME or END_OBJECT
                     }
+                    // We must be pointing to `END_OBJECT`, so:
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
+                        // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
+                        //   it's too complicated, so bail out
+                        // 17-Dec-2013, tatu: Need to allow this case for Builder methods that
+                        //    return differing type...
+
+                         // 03-Feb-2017, tatu: ... except, may need to check Builder settings?
+                         //     Ok, for now let's assume this is fine.
+
+//                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                        // note: this call returns null
+                        return ctxt.reportBadDefinition(_beanType, String.format(
+"Cannot create polymorphic instances with unwrapped values. Resetting parser to ignore remaining tokens (%s)", p.currentToken()));
+
+//                        return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
-                continue;
+                continue; // otherwise, keep collecting creator properties
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
+            // Things marked as ignorable should not be passed to any setter
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+            // Most likely an unwrapped property, need to buffer
+            // 29-Aug-2010, tatu: Does this actually work? Seems problematic, buffering-wise.
+            //  Need to change this to perhaps bufferign tokens... Yeah, looks like it.
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
+                try {
                     buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                } catch (Exception e) {
+                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                 }
+                continue;
+            }
+            // Unknown: let's call handler method
+            // 01-Sep-2017, tatu: Should this be done here? Or outside?
+            //    For now, do here, assuming it's ok to call within loop.
+            handleUnknownVanilla(p, ctxt, handledType(), propName);
         }
 
         // We hit END_OBJECT, so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
-            return wrapInstantiationProblem(e, ctxt);
+            // 24-Aug-2016, tatu: As per [databind#1347], need to wrap problem
+            bean = wrapInstantiationProblem(e, ctxt);
+            // signal downstream handlers, if possible
+            return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
