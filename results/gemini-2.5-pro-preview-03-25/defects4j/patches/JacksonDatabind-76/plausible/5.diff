diff --git a/tmp/80161f99-5850-483a-a708-cde795c9f98e_buggy.java b/tmp/45f97080-a912-4dda-9b89-48ba01816d6c_fixed.java
index 3effef5..b5626c9 100644
--- a/tmp/80161f99-5850-483a-a708-cde795c9f98e_buggy.java
+++ b/tmp/45f97080-a912-4dda-9b89-48ba01816d6c_fixed.java
@@ -1,73 +1,88 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+        // 01-Sep-2017, tatu: Unusual case combining property-based + unwrapped:
+        //   must keep track of properties, handle creator properties, buffer FIELD_NAME,
+        //   and then process buffered operations!
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+                // Last creator property to assign? (may not be last in JSON)
+                // NOTE: can not just call buffer.assignParameter() because we need to add existing buffered properties:
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                    // Maybe we are all done with creator properties?
+                    // But we still must continue processing, buffer FIELD_NAME
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
-            // regular property? needs buffering
+            // regular property? needs buffering (could be passed to creator)
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
+            // Things marked as ignorable should not be passed to any setter
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+            // Ok, likely an unwrapped property: buffer
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
+                 // Ok, this is messy: should we assign any setter LATER ON, OR buffer?
+                 // Problem is that we do not know whether we might need to build instance
+                 // first, or if we can assign right away.
+                 // Let's assume we must buffer...
+                 // We may need to improve on this in future.
+                 try {
                      buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                 } catch (Exception e) {
+                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                  }
+                 continue;
+             }
+             // Unknown: let's call handler method
+//             handleUnknownProperty(p, ctxt, _valueClass, propName);
         }
 
         // We hit END_OBJECT, so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
+//            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
             return wrapInstantiationProblem(e, ctxt);
         }
+        // And then need to process buffered tokens...
+        tokens.writeEndObject(); // Close the buffer
+
+        // sanity check?
+        if (bean.getClass() != _beanType.getRawClass()) {
+            // 03-Feb-2014, tatu: Not sure if this can happen; but if it does, better
+            //   have an error message that indicates the problem. Mostly just in case
+            //   future changes unexpectedly cause issues.
+            // Actually... yes, it CAN happen if builder has different type than target.
+            // ... yet, not sure if we want to keep it? Comment out for now
+//            ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+//            return null;
+        }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
