diff --git a/tmp/86cba7e2-61cd-488e-beae-255bfca42da6_buggy.java b/tmp/62b6e1e7-5b85-446f-80e6-a950105d6dba_fixed.java
index 19fd63e..2db3c51 100644
--- a/tmp/86cba7e2-61cd-488e-beae-255bfca42da6_buggy.java
+++ b/tmp/62b6e1e7-5b85-446f-80e6-a950105d6dba_fixed.java
@@ -1,24 +1,50 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
+    if (n.getType() == Token.BLOCK) { // Check if the node is a BLOCK
+      if (n.hasOneChild()) { // Check if the block has exactly one child
+        Node maybeExpr = n.getFirstChild(); // Get the single child
+        // Check if the child is an EXPR_RESULT node.
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          Node expr = maybeExpr.getFirstChild(); // Get the expression inside EXPR_RESULT
+
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
+          // containing calls to likely event handlers (obj.on...).
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+          // Check if the expression is a call to a property starting with "on"
+          if (expr.getType() == Token.CALL) {
+            Node callee = expr.getFirstChild();
+            // Check specifically for GETPROP (e.g., f.onchange())
+            if (callee.getType() == Token.GETPROP) {
+              Node propNode = callee.getLastChild();
+              // Make sure the property name is a string literal
+              if (propNode.getType() == Token.STRING) {
+                  String propName = propNode.getString();
+                  // If the property name starts with "on", assume it's an event handler
+                  // and don't fold it due to the IE bug.
+                  if (propName.startsWith("on")) {
+                    return false; // Don't fold likely event handlers
+                  }
+              }
+            }
+            // We don't apply this restriction to GETELEM (f['onchange']()) or
+            // other call types based on the specific behavior shown in Issue 291 tests.
+          }
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+          // If the expression is not a call to a GETPROP starting with "on",
+          // then the block is considered foldable.
+          return true;
+        }
       }
     }
 
+    // If the node is not a BLOCK, or doesn't have one child,
+    // or the single child is not an EXPR_RESULT, it's not foldable.
     return false;
   }
\ No newline at end of file
