diff --git a/tmp/0035fe43-589a-49e4-af87-b22a80350ce8_buggy.java b/tmp/31f46897-bf7a-40de-a1c4-9d1c40d0d598_fixed.java
index 19fd63e..5649218 100644
--- a/tmp/0035fe43-589a-49e4-af87-b22a80350ce8_buggy.java
+++ b/tmp/31f46897-bf7a-40de-a1c4-9d1c40d0d598_fixed.java
@@ -1,24 +1,54 @@
   /**
    * @return Whether the node is a block with a single statement that is
-   *     an expression.
+   *     an expression, but not expression that is problematic for folding.
    */
   private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
+    if (n.getType() != Token.BLOCK) {
+      return false;
+    }
+
+    if (!n.hasOneChild()) {
+      return false;
+    }
+
+    Node stmt = n.getFirstChild();
+    if (stmt.getType() != Token.EXPR_RESULT) {
+      // Only EXPR_RESULT statements can be safely folded.
+      return false;
+    }
+
+    Node expr = stmt.getFirstChild();
+
     // IE has a bug where event handlers behave differently when
     // their return value is used vs. when their return value is in
     // an EXPR_RESULT. It's pretty freaking weird. See:
     // http://code.google.com/p/closure-compiler/issues/detail?id=291
     // We try to detect this case, and not fold EXPR_RESULTs
     // into other expressions.
 
     // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+    // param, or this doesn't happen. This means assignments to
+    // properties are ok, but calls on properties are not.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+    if (expr.getType() == Token.CALL) {
+      Node callee = expr.getFirstChild();
+      // Calls via GETPROP (like obj.onclick()) or GETELEM (like obj['onclick']())
+      // are problematic.
+      if (callee.getType() == Token.GETPROP) {
+         String propName = callee.getString();
+         if (propName.startsWith("on")) {
+           // It's an obj.on...() call, don't fold.
+           return false;
+         }
+      } else if (callee.getType() == Token.GETELEM) {
+        // It's an obj[...](), don't fold these either, as per test Issue291.
+        // Be conservative for GETELEM calls.
+        return false;
       }
+      // Otherwise (e.g. direct function call foo()), it might be foldable.
     }
 
-    return false;
+    // If it wasn't a problematic call, or not a call at all,
+    // it's a foldable expression block.
+    return true;
   }
\ No newline at end of file
