diff --git a/tmp/deb24ba8-2527-4cb9-bba6-accc3edcb3c5_buggy.java b/tmp/87eb7b27-84e9-4f72-96ec-88cf55642e4c_fixed.java
index 19fd63e..02c4279 100644
--- a/tmp/deb24ba8-2527-4cb9-bba6-accc3edcb3c5_buggy.java
+++ b/tmp/87eb7b27-84e9-4f72-96ec-88cf55642e4c_fixed.java
@@ -1,24 +1,41 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        // Ensure the single child is an EXPR_RESULT node.
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+          Node expr = maybeExpr.getFirstChild();
+          // Check if the expression is a call to a property starting with "on".
+          // We specifically look for GETPROP (like obj.onfoo) as mentioned
+          // in the original comment about implicit 'this'.
+          // GETELEM (like obj['onfoo']) doesn't seem to trigger the IE bug
+          // based on test cases.
+          if (expr.getType() == Token.CALL) {
+            Node fn = expr.getFirstChild();
+            if (fn.getType() == Token.GETPROP) {
+              // Check the property name
+              String propName = fn.getLastChild().getString();
+              if (propName != null && propName.startsWith("on")) {
+                // This looks like an event handler call, don't fold it.
+                return false;
+              }
+            }
+          }
+          // Otherwise, it's safe to fold.
+          return true;
+        }
       }
     }
 
     return false;
   }
\ No newline at end of file
