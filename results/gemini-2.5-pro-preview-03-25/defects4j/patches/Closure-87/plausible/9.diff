diff --git a/tmp/dbf4385e-4b6e-47d7-a5f6-86ae4a327989_buggy.java b/tmp/3c03245c-7d31-4355-8ed7-7ecce6a0678b_fixed.java
index 19fd63e..c93d58b 100644
--- a/tmp/dbf4385e-4b6e-47d7-a5f6-86ae4a327989_buggy.java
+++ b/tmp/3c03245c-7d31-4355-8ed7-7ecce6a0678b_fixed.java
@@ -1,24 +1,51 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        // Check if the single child is an EXPR_RESULT node.
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          Node expr = maybeExpr.getFirstChild();
+
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
           // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+          // param, or this doesn't happen. Such methods are represented
+          // by GETPROP or GETELEM calls.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+          // Check if the expression is a call.
+          if (expr.getType() == Token.CALL) {
+            Node callTarget = expr.getFirstChild();
+            // Check for GETPROP: obj.method()
+            if (callTarget.getType() == Token.GETPROP) {
+              // Check if the property name looks like an event handler (e.g., "onchange").
+              // This is a heuristic based on the issue description and common patterns.
+              String propName = callTarget.getLastChild().getString();
+              if (propName.startsWith("on")) {
+                return false; // Avoid folding due to potential IE bug.
+              }
+            // Check for GETELEM: obj['method']()
+            // Test case testIssue291 suggests these might also be problematic
+            // or folding them is undesirable in this context.
+            } else if (callTarget.getType() == Token.GETELEM) {
+              // Be conservative and prevent folding for GETELEM calls within
+              // single-statement blocks based on the test case.
+              return false; // Avoid folding.
+            }
+          }
+          // If it's not a problematic call (or not a call at all),
+          // the expression block is generally foldable.
+          return true;
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
