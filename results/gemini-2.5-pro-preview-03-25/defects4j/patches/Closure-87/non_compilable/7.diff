diff --git a/tmp/1fd47319-7e00-4c18-a5d0-274fa115be75_buggy.java b/tmp/ad5d092b-c809-4812-b4de-95746f9090e4_fixed.java
index 19fd63e..51ff470 100644
--- a/tmp/1fd47319-7e00-4c18-a5d0-274fa115be75_buggy.java
+++ b/tmp/ad5d092b-c809-4812-b4de-95746f9090e4_fixed.java
@@ -1,24 +1,48 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
+    if (n.isBlock()) { // Use Node methods for readability
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
+        // Check if the single statement is an EXPR_RESULT.
+        if (maybeExpr.isExprResult()) {
+          Node expr = maybeExpr.getFirstChild();
+          // Check for cases that should not be folded due to potential issues.
+          if (expr.isCall()) {
+            Node callee = expr.getFirstChild();
+            // Check calls with implicit 'this' (GETPROP/GETELEM).
+            if (callee.isGetProp() || callee.isGetElem()) {
+              // IE has a bug with event handlers (like "onchange") when the
+              // return value is used vs. discarded in an EXPR_RESULT.
+              // See http://code.google.com/p/closure-compiler/issues/detail?id=291
+              // We prevent folding these cases.
+              boolean isPotentialEventHandler = false;
+              Node prop = callee.getLastChild();
+              if (prop.isString()) {
+                  String propName = prop.getString();
+                  // Check if the property name looks like an event handler (starts with "on")
+                  if (propName.length() > 2 && propName.startsWith("on")) {
+                      isPotentialEventHandler = true;
+                  }
+              }
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+              // Also, based on testIssue291, folding calls via GETELEM
+              // (like obj['prop']()) seems unsafe in this context.
+              boolean isGetElem = callee.isGetElem();
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+              // Do not fold if it's a GETELEM call or a potential "on..." event handler call.
+              if (isGetElem || isPotentialEventHandler) {
+                  return false;
               }
             }
-
+          }
+          // It's an EXPR_RESULT, and not an excluded case. Foldable.
+          return true;
+        }
+      }
+    }
+    // Otherwise, it's not a foldable expression block.
     return false;
   }
\ No newline at end of file
