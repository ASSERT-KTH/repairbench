diff --git a/tmp/c7701e76-8622-4917-81cd-fbb2d60de42e_buggy.java b/tmp/6375e138-613d-481e-81e6-34b90ac50cbf_fixed.java
index 19fd63e..99ecf91 100644
--- a/tmp/c7701e76-8622-4917-81cd-fbb2d60de42e_buggy.java
+++ b/tmp/6375e138-613d-481e-81e6-34b90ac50cbf_fixed.java
@@ -1,24 +1,52 @@
   /**
    * @return Whether the node is a block with a single statement that is
-   *     an expression.
+   *     an expression, which is safe to fold.
    */
   private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
+    if (n.isBlock() && n.hasOneChild()) {
+        Node exprResultNode = n.getFirstChild();
+        // Ensure the single child is an EXPR_RESULT. While the primary caller
+        // (tryFoldBlock) already checks this, being explicit might be safer
+        // if this utility function is reused elsewhere. However, sticking
+        // to the original logic's implied assumption is fine too.
+        if (exprResultNode.isExprResult()) {
+            Node expr = exprResultNode.getFirstChild();
+
             // IE has a bug where event handlers behave differently when
             // their return value is used vs. when their return value is in
             // an EXPR_RESULT. It's pretty freaking weird. See:
             // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
+            // We try to detect this case, and not fold EXPR_RESULTs containing
+            // such calls into other expressions (like && or Hook).
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+            // The issue applies to method calls with an implicit 'this',
+            // specifically GETPROP (obj.onEvent()) and GETELEM (obj['onEvent']()).
+            // Test cases indicate GETELEM calls in general are problematic, and
+            // GETPROP calls specifically for names starting with "on".
+            if (expr.isCall()) {
+                Node callee = expr.getFirstChild();
+                // Computed property accesses (obj['prop']()) are problematic.
+                if (callee.isGetElem()) {
+                    return false; // Unsafe to fold
                 }
+                // Property accesses (obj.prop()) are problematic for potential event handlers.
+                if (callee.isGetProp()) {
+                    String propName = callee.getString();
+                    // Check if the property name looks like an event handler (e.g., "onchange").
+                    // This simple check might be overly broad but covers the known cases.
+                    if (propName != null && propName.startsWith("on")) {
+                        return false; // Unsafe to fold
                     }
-
+                    // Otherwise (e.g. obj.foo(), obj.bonchange()), it's considered safe.
+                    return true;
+                }
+                // Direct calls (foo()) or other call types are considered safe.
+                return true;
+            }
+            // If the expression is not a call, it's considered safe to fold.
+            return true;
+        }
+    }
+    // Not a block, not a single child, or the child is not EXPR_RESULT.
     return false;
   }
\ No newline at end of file
