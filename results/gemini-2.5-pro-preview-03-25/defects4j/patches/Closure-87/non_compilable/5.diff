diff --git a/tmp/f25d5355-34f0-4595-a1fa-361f7dd55160_buggy.java b/tmp/f0e78bc7-8f29-429e-86f5-5120f77f3ef5_fixed.java
index 19fd63e..2b670a0 100644
--- a/tmp/f25d5355-34f0-4595-a1fa-361f7dd55160_buggy.java
+++ b/tmp/f0e78bc7-8f29-429e-86f5-5120f77f3ef5_fixed.java
@@ -1,24 +1,39 @@
   /**
    * @return Whether the node is a block with a single statement that is
-   *     an expression.
+   *     an expression, and that expression is safe to fold according to IE specific logic.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        // Check if the single child is an EXPR_RESULT node.
+        if (maybeExpr.isExprResult()) {
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
           // We only have to worry about methods with an implicit 'this'
           // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+          // Check for the IE specific problematic case.
+          // This function is used to determine foldability for constructs
+          // like if(x) { foo(); } -> x && foo();
+          // For the IE case, we don't want to perform this fold.
+          Node exprNode = maybeExpr.getFirstChild();
+          if (isProblemCodeForInternetExplorer(exprNode)) {
+              // This is the problematic IE case, so don't consider the block
+              // foldable in this context.
+              return false;
+          }
+
+          // It's a single EXPR_RESULT block and not the problematic IE case.
+          return true;
+        }
       }
     }
 
     return false;
   }
\ No newline at end of file
