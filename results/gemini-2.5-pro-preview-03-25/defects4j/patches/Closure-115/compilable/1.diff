diff --git a/tmp/1080485d-77f9-49fe-a477-5db5a838102d_buggy.java b/tmp/f68509d5-9439-4570-81f6-3bf6dabc6cfe_fixed.java
index 3075782..51747b6 100644
--- a/tmp/1080485d-77f9-49fe-a477-5db5a838102d_buggy.java
+++ b/tmp/f68509d5-9439-4570-81f6-3bf6dabc6cfe_fixed.java
@@ -1,82 +1,85 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
-    Node block = fnNode.getLastChild();
+    Node block = fnNode.getLastChild(); // Function body block
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
-    Node cArg = callNode.getFirstChild().getNext();
+    // CALL NODE: [ NAME/GETPROP, (THIS), ARG1, ARG2, ... ]
+    Node cArg = callNode.getFirstChild().getNext(); // Potential 'this' or first real argument
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
+        // If 'this' is passed specifically, it must be the first arg.
+        // We currently don't support arbitrary 'this' values for direct inlining.
         if (cArg == null || !cArg.isThis()) {
+           // This case implies either no 'this' arg for .call, or an arbitrary one.
+           // We could potentially allow it if the function doesn't use 'this',
+           // but for simplicity, disallow direct inlining for now.
           return CanInlineResult.NO;
         }
-        cArg = cArg.getNext();
+        cArg = cArg.getNext(); // Skip 'this' node, move to the next argument
       } else {
-        // ".apply" call should be filtered before this.
+        // ".apply" call should be filtered before this point.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(); // First function parameter
+
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+      // Check parameters and arguments pairwise
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+          // Check Criterion 1: If argument might have side-effects or modify state,
+          // ensure the corresponding parameter is used at most once within the function body.
+          // Note: NodeUtil.mayEffectMutableState checks for modifying properties of
+          // existing objects or arrays, which is okay if the parameter is used once.
+          if ((NodeUtil.mayHaveSideEffects(cArg, compiler) ||
+               NodeUtil.mayEffectMutableState(cArg, compiler)) &&
+              NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+            // Argument with side effects or mutable state effect is used more than once.
             return CanInlineResult.NO;
           }
         }
+        // else: Parameter exists, but no argument provided (e.g. call f(1) for function f(a,b){...})
+        // This is fine, the parameter will be 'undefined'.
 
-        // Move to the next name.
-        fnParam = fnParam.getNext();
+        fnParam = fnParam.getNext(); // Move to the next parameter
       }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // Check arguments, especially those without a corresponding parameter
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+         // If this argument doesn't correspond to a formal parameter (fnParam is null),
+         // and this argument has side-effects, prevent inlining. Its value would be
+         // evaluated but potentially discarded (unless used via 'arguments', which direct
+         // replacement doesn't handle). Don't evaluate side effects of unused arguments.
+        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          // Extra argument has side effects.
           return CanInlineResult.NO;
         }
-        cArg = cArg.getNext();
+        cArg = cArg.getNext(); // Move to the next argument
       }
     }
 
+    // All checks passed.
     return CanInlineResult.YES;
   }
\ No newline at end of file
