diff --git a/tmp/6f5ee042-63cf-45e7-a5ea-f6a105c3a429_buggy.java b/tmp/f06ac063-e519-40c5-bd73-dd7b13c2e79f_fixed.java
index 3075782..b2f048e 100644
--- a/tmp/6f5ee042-63cf-45e7-a5ea-f6a105c3a429_buggy.java
+++ b/tmp/f06ac063-e519-40c5-bd73-dd7b13c2e79f_fixed.java
@@ -1,82 +1,107 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
+   * 2) If a call's arguments may represent mutable state, the corresponding
+   * argument in the function must only be referenced once.
+   * For instance, this will not be inlined:
+   * <pre>
+   *     function foo(a) { return a + a }
+   *     x = foo(this.bar);
+   * </pre>
+   * 3) Extra arguments (passed to the call but not part of the function's
+   *    signature) that have side effects will prevent inlining.
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
+    // Check if the block has the expected structure: { return EXPR; }
+    // This is implicitly handled by isDirectCallNodeReplacementPossible,
+    // but we need the block for reference counting.
+    Preconditions.checkState(block.isBlock() && block.hasOneChild());
+    Node returnNode = block.getFirstChild();
+    Preconditions.checkState(returnNode.isReturn());
+    // A return node with no right hand side shouldn't be replaced.
+    if (!returnNode.hasChildren()) {
+      return CanInlineResult.NO;
+    }
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+    // CALL NODE: [ NAME/GETPROP, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
+      // Check arguments first.
       if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+        boolean argMayHaveSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);
+        boolean argMayMutateState = NodeUtil.mayEffectMutableState(cArg, compiler);
+
+        // Rule 1 & 3: Check arguments with side effects.
+        if (argMayHaveSideEffects) {
+          if (fnParam != null) {
+            // Argument corresponds to a parameter. Check parameter usage count.
+            if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+              // Parameter used more than once, side effects would be duplicated.
+              return CanInlineResult.NO;
+            }
+            // Parameter used 0 or 1 time is OK.
+          } else {
+            // Extra argument has side-effects. Don't inline, as the side-effect
+            // would be lost in direct replacement.
              return CanInlineResult.NO;
           }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+        }
+
+        // Rule 2: Check arguments that may represent mutable state.
+        // (Skip check if already handled by side effect check)
+        if (!argMayHaveSideEffects && argMayMutateState) {
+           if (fnParam != null) {
+             if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+               // Parameter used more than once, potentially observing different states
+               // or duplicating mutations.
                return CanInlineResult.NO;
              }
            }
+           // If fnParam is null (extra argument), its potential mutation doesn't matter
+           // because direct replacement won't use it.
+        }
+
+        cArg = cArg.getNext();
+      }
 
-        // Move to the next name.
+      // Move to the next parameter.
+      if (fnParam != null) {
         fnParam = fnParam.getNext();
       }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
-        }
-        cArg = cArg.getNext();
-      }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
