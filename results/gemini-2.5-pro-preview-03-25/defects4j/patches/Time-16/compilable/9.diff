diff --git a/tmp/16aa2ce6-4b3d-4c59-929a-c51d877640e6_buggy.java b/tmp/e464a743-83bc-42e5-9d00-14233530f8fe_fixed.java
index b9f1241..d5861e0 100644
--- a/tmp/16aa2ce6-4b3d-4c59-929a-c51d877640e6_buggy.java
+++ b/tmp/e464a743-83bc-42e5-9d00-14233530f8fe_fixed.java
@@ -1,60 +1,81 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant as the default.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
+        Chronology originalChrono = instant.getChronology();
+        // Use the year from the instant as the default year, ignore iDefaultYear
+        int defaultYear = originalChrono.year().get(instantMillis);
+        long instantLocal = instantMillis + originalChrono.getZone().getOffset(instantMillis);
         
+        // Select chronology for parsing, potentially applying zone override or UTC for offset parsing
+        Chronology parseChrono = selectChronology(originalChrono);
+        
+        // Create bucket using instant's year as default
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+            instantLocal, parseChrono, iLocale, iPivotYear, defaultYear);
         int newPos = parser.parseInto(bucket, text, position);
+        
+        // Compute new millis by merging parsed fields onto the base instant
         instant.setMillis(bucket.computeMillis(false, text));
-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
-        } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
-        }
-        instant.setChronology(chrono);
+        
+        // Determine the final zone based on overrides or parsed values
+        DateTimeZone resultZone = null;
         if (iZone != null) {
-            instant.setZone(iZone);
+            // Formatter's explicit zone overrides everything
+            resultZone = iZone;
+        } else if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+            // Parsed offset applies if no explicit zone
+            resultZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());
+        } else if (bucket.getZone() != null) {
+            // Parsed zone name applies if no explicit zone or offset
+            resultZone = bucket.getZone();
+        } else {
+            // Otherwise, retain the original zone
+            resultZone = originalChrono.getZone();
         }
+        
+        // Set the final chronology on the instant (original type with final zone)
+        Chronology resultChrono = originalChrono.withZone(resultZone);
+        instant.setChronology(resultChrono);
+        
+        // Note: The original code had a final instant.setZone(iZone) call here.
+        // This is now handled by the iZone check above when determining resultZone,
+        // ensuring the formatter's zone correctly overrides others.
+        
         return newPos;
     }
\ No newline at end of file
