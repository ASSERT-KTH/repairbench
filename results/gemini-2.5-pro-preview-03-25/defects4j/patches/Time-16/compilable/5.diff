diff --git a/tmp/1dc8bc79-a0b3-4e75-8559-a5acc5564800_buggy.java b/tmp/24bfda4d-d6de-4adf-9daf-0d3e8e8da250_fixed.java
index b9f1241..4461a8b 100644
--- a/tmp/1dc8bc79-a0b3-4e75-8559-a5acc5564800_buggy.java
+++ b/tmp/24bfda4d-d6de-4adf-9daf-0d3e8e8da250_fixed.java
@@ -1,60 +1,75 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant as the default.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
 
         long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
+        // Use the instant's chronology to get the default year, as per method Javadoc.
+        Chronology instantChrono = instant.getChronology();
+        int defaultYear = instantChrono.year().get(instantMillis);
 
+        // Select the chronology for parsing. This might differ from the instant's chronology
+        // if the formatter has a chronic override.
+        Chronology parseChrono = selectChronology(instantChrono);
+
+        // Calculate the local instant millis using the *parsing* chronology's zone offset.
+        // This ensures the base instant used by the bucket aligns with the parsing context.
+        long instantLocal = instantMillis + parseChrono.getZone().getOffset(instantMillis);
+
+        // Create the bucket using the parsing chrono and the instant's year as the default year.
+        // This ensures unspecified fields (like year) default to the instant's original values.
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+            instantLocal, parseChrono, iLocale, iPivotYear, defaultYear);
         int newPos = parser.parseInto(bucket, text, position);
+
+        // Update the instant's millis using the computed value from the bucket.
+        // bucket.computeMillis handles merging parsed fields with the base instant and applies
+        // any parsed offset or zone.
         instant.setMillis(bucket.computeMillis(false, text));
-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
-        } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
-        }
-        instant.setChronology(chrono);
+
+        // Set the final chronology on the instant.
+        // Start with the chronology from the bucket (which reflects parsed zone/offset).
+        // Then, apply the formatter's zone override (iZone) if it exists.
+        Chronology resultChrono = bucket.getChronology();
         if (iZone != null) {
-            instant.setZone(iZone);
+            resultChrono = resultChrono.withZone(iZone);
         }
+        instant.setChronology(resultChrono);
+        // The original code had an incorrect instant.setZone(iZone) call here.
+        // Setting the chronology's zone above is the correct approach.
+
         return newPos;
     }
\ No newline at end of file
