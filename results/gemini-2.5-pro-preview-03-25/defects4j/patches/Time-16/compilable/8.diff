diff --git a/tmp/082cb6ce-8725-414b-b710-54a2a122abfa_buggy.java b/tmp/1c130ced-afa8-47d7-a188-4522c2dd49fa_fixed.java
index b9f1241..3a74f00 100644
--- a/tmp/082cb6ce-8725-414b-b710-54a2a122abfa_buggy.java
+++ b/tmp/1c130ced-afa8-47d7-a188-4522c2dd49fa_fixed.java
@@ -1,60 +1,69 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant as the default.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
+        // Select the chronology to use for parsing (might differ from instant's)
+        Chronology parsingChrono = selectChronology(chrono);
+
+        // Use the year from the instant as the default year for the bucket,
+        // consistent with the method documentation.
+        int defaultYear = parsingChrono.year().get(instantMillis);
+        
+        // Calculate the local instant millis based on the selected chronology's zone
+        long instantLocal = instantMillis + parsingChrono.getZone().getOffset(instantMillis);
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+            instantLocal, parsingChrono, iLocale, iPivotYear, defaultYear); // Use instant's year
         int newPos = parser.parseInto(bucket, text, position);
+
+        // Set the millis computed by the bucket. The 'false' flag ensures unspecified
+        // fields are retained from the original instant's local time (instantLocal).
         instant.setMillis(bucket.computeMillis(false, text));
-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
-        } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
-        }
-        instant.setChronology(chrono);
+
+        // Set the chronology determined by the bucket, which reflects any parsed zone or offset.
+        // This ensures the instant's chronology matches the computed millis.
+        instant.setChronology(bucket.getChronology());
+
+        // Apply the formatter's override zone if it exists. This takes precedence
+        // over any parsed zone or offset.
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
