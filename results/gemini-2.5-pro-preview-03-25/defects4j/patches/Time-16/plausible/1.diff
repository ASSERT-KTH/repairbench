diff --git a/tmp/b48147d6-e6e9-4f9d-9ae1-d170a27ffb97_buggy.java b/tmp/a001da03-7e36-45dd-b4d7-5ee60b48291b_fixed.java
index b9f1241..ad1e029 100644
--- a/tmp/b48147d6-e6e9-4f9d-9ae1-d170a27ffb97_buggy.java
+++ b/tmp/a001da03-7e36-45dd-b4d7-5ee60b48291b_fixed.java
@@ -1,60 +1,74 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant as the default.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
+        // Calculate local instant millis using the instant's chronology and zone
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
+        // Select the chronology for parsing, potentially overriding the instant's chronology
         chrono = selectChronology(chrono);
+        // Determine the default year from the input instant for use in the bucket
+        // This ensures that unspecified year fields default to the instant's year
+        int defaultYear = chrono.year().get(instantLocal);
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+            instantLocal, chrono, iLocale, iPivotYear, defaultYear); // Use year from instant as default
         int newPos = parser.parseInto(bucket, text, position);
+        // Compute millis by merging parsed fields onto the base instant (instantLocal)
+        // false means merge, don't reset fields to epoch
         instant.setMillis(bucket.computeMillis(false, text)); 
+        
+        // Update chronology and zone based on parsed results
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+            // Parsed fixed offset
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
             chrono = chrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
+            // Parsed zone ID
             chrono = chrono.withZone(bucket.getZone());
         }
         instant.setChronology(chrono);
+        
+        // Apply the formatter's zone override if it exists
+        // This takes precedence over parsed zone/offset information
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
