diff --git a/tmp/9d2d91f6-59a7-44c3-babe-51559055d622_buggy.java b/tmp/e0d5d09d-8362-4443-9221-764373766686_fixed.java
index 25ca093..20e6e24 100644
--- a/tmp/9d2d91f6-59a7-44c3-babe-51559055d622_buggy.java
+++ b/tmp/e0d5d09d-8362-4443-9221-764373766686_fixed.java
@@ -1,52 +1,173 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import org.jsoup.helper.Validate;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+
+// Imports assumed available in the original context:
+// import static org.jsoup.helper.DataUtil.defaultCharset; // Assuming defaultCharset = "UTF-8"
+// import static org.jsoup.helper.DataUtil.getCharsetFromContentType; // Helper method assumed available
+
+class FixedDataUtil { // Renamed class for clarity; use original class name in practice
+
+    // Assuming these constants and helpers are available or defined in the actual DataUtil class
+    private static final String UTF_32BE = "UTF-32BE";
+    private static final String UTF_32LE = "UTF-32LE";
+    private static final String UTF_16BE = "UTF-16BE";
+    private static final String UTF_16LE = "UTF-16LE";
+    private static final String UTF_8 = "UTF-8";
+    static final String defaultCharset = UTF_8; // Or get from DataUtil.defaultCharset
+
+    // Dummy helper for compilation; use the real one from DataUtil
+    private static String getCharsetFromContentType(String contentType) {
+        if (contentType == null) return null;
+        String[] params = contentType.split(";");
+        for (String param : params) {
+            param = param.trim().toLowerCase();
+            if (param.startsWith("charset=")) {
+                String charset = param.substring("charset=".length()).replace("\"", "").replace("'", "");
+                 if (charset.isEmpty()) return null;
+                 try {
+                     if (Charset.isSupported(charset)) return charset;
+                 } catch (IllegalCharsetNameException e) { /* ignore */ }
+                 return null;
+            }
+        }
+        return null;
+     }
+
+
+    /**
+     * Parses the input byte data into a Document. Given a byte buffer, detects the character set via BOM or
+     * meta http-equiv tags, or specified Bset. Then parses into a Document.
+     *
+     * @param byteData    byte data to parse. The buffer will be consumed.
+     * @param charsetName character set to decode the data by. If null, will try to detect.
+     * @param baseUri     base uri of the document, used to resolve relative urls.
+     * @param parser      parser to use to parse the data.
+     * @return Document parsed from the byte data.
+     */
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        int bomOffset = 0;
+        String bomCharset = null; // Used to hold detected BOM charset name
 
-        // look for BOM - overrides any other header or input
+        // *** BOM Detection ***
+        // Detects UTF-32BE, UTF-32LE, UTF-16BE, UTF-16LE, UTF-8 BOMs
+        byteData.mark(); // Mark the start for potential rewind/reset
+        if (byteData.remaining() >= 4) {
+            byte b1 = byteData.get(); byte b2 = byteData.get(); byte b3 = byteData.get(); byte b4 = byteData.get();
+            byteData.rewind(); // Reset position to mark after reading bytes
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            if (b1 == (byte) 0x00 && b2 == (byte) 0x00 && b3 == (byte) 0xFE && b4 == (byte) 0xFF) { // UTF-32BE "00 00 FE FF"
+                bomCharset = UTF_32BE; bomOffset = 4;
+            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE && b3 == (byte) 0x00 && b4 == (byte) 0x00) { // UTF-32LE "FF FE 00 00"
+                bomCharset = UTF_32LE; bomOffset = 4;
+            } else if (b1 == (byte) 0xFE && b2 == (byte) 0xFF) { // UTF-16BE "FE FF"
+                bomCharset = UTF_16BE; bomOffset = 2;
+            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE) { // UTF-16LE "FF FE"
+                bomCharset = UTF_16LE; bomOffset = 2;
+            } else if (b1 == (byte) 0xEF && b2 == (byte) 0xBB && b3 == (byte) 0xBF) { // UTF-8 "EF BB BF"
+                bomCharset = UTF_8; bomOffset = 3;
+            }
+            // If no match, bomCharset remains null, bomOffset 0
+        } else if (byteData.remaining() >= 2) { // Check for 2/3 byte BOMs if buffer smaller than 4
+            byte b1 = byteData.get(); byte b2 = byteData.get();
+            byteData.rewind(); // Reset position to mark
+
+            if (b1 == (byte) 0xFE && b2 == (byte) 0xFF) { // UTF-16BE "FE FF"
+                bomCharset = UTF_16BE; bomOffset = 2;
+            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE) { // UTF-16LE "FF FE"
+                bomCharset = UTF_16LE; bomOffset = 2;
+            } else if (byteData.remaining() >= 3 && b1 == (byte) 0xEF && b2 == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) { // UTF-8 "EF BB BF" - need get(index) to peek
+                 byteData.rewind(); // Ensure position is reset before applying offset later
+                 bomCharset = UTF_8; bomOffset = 3;
+            }
+        }
+        // Ensure position is back at the mark if no BOM matched, or ready to be advanced if BOM matched
+        if (bomCharset != null) {
+            charsetName = bomCharset; // BOM overrides specified charset, always takes precedence
+            byteData.position(byteData.position() + bomOffset); // Consume the BOM bytes
+        } else {
+            // No BOM found; ensure position is reset to the start mark
+            byteData.reset();
+        }
+
+
+        // *** Charset Detection from Meta or Use Provided/Default ***
+        if (charsetName == null) { // If no BOM detected and no charset specified by caller
+            // We need to find the encoding from a meta tag. Decode tentatively using default (UTF-8).
+            byteData.mark(); // Mark current position (start of actual data)
+            try {
                 docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            } catch (Exception e) {
+                // Handle potential decoding errors if defaultCharset is wrong
+                // For now, rethrow as runtime, or consider returning an empty doc or logging error.
+                throw new RuntimeException("Could not decode using default charset " + defaultCharset, e);
+            }
+
+            // Parse the tentatively decoded data to find meta tags
             doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            Element meta = doc.selectFirst("meta[http-equiv=content-type], meta[charset]");
             String foundCharset = null;
+
+            if (meta != null) {
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+                        String metaCharset = meta.attr("charset").trim();
+                        if (Charset.isSupported(metaCharset)) {
+                            foundCharset = metaCharset;
                         }
                     } catch (IllegalCharsetNameException e) {
+                        // Ignore invalid charset attribute value
                         foundCharset = null;
                     }
                 }
+            }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() > 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
+                // Meta tag found a different, valid charset. Re-decode the original byte data.
+                // Normalize charset name (trim, remove quotes - based on original code's behavior)
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                byteData.reset(); // Rewind to the position marked before the tentative decode
+                docData = Charset.forName(charsetName).decode(byteData).toString(); // Decode again with correct charset
+                doc = null; // Discard the tentatively parsed document
+            } else {
+                // Meta tag not found, or specified the default charset. Use the tentatively parsed doc.
+                // Ensure the charset name reflects the default used.
+                charsetName = defaultCharset;
+                // byteData was consumed by the decode operation, no need to reset position
             }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        } else { // Charset was specified by caller or detected from BOM
+            // We must decode with the specified charsetName.
+            Validate.notEmpty(charsetName, "Charset must not be empty at this point"); // Should be guaranteed
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            // byteData is consumed by the decode operation
+            doc = null; // Ensure doc is parsed fresh below
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
+
+        // *** Final Parse ***
         if (doc == null) {
+            // Parse the string document data using the selected parser
             doc = parser.parseInput(docData, baseUri);
+        }
+
+        // Set the determined charset on the document's output settings.
+        // Fallback to default if somehow null (shouldn't happen with current logic).
+        if (charsetName == null) {
+            charsetName = defaultCharset;
+        }
         doc.outputSettings().charset(charsetName);
-        }
+
         return doc;
     }
+}
\ No newline at end of file
