diff --git a/tmp/222aafc4-1967-466f-ac52-8d079a696087_buggy.java b/tmp/8bd9fdf0-b4af-4187-be54-0cf7a2203deb_fixed.java
index 25ca093..32dcfaf 100644
--- a/tmp/222aafc4-1967-466f-ac52-8d079a696087_buggy.java
+++ b/tmp/8bd9fdf0-b4af-4187-be54-0cf7a2203deb_fixed.java
@@ -1,52 +1,155 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+import org.jsoup.helper.Validate;
+// Assuming DataUtil class structure and access to its static members/methods like:
+// import static org.jsoup.helper.DataUtil.defaultCharset;
+// import static org.jsoup.helper.DataUtil.getCharsetFromContentType;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+
+    // todo - this is getting gnarly. needs a rewrite. (Still complex, but handles BOM correctly now)
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+        String docData = null;
         Document doc = null;
+        String foundCharset = null; // Charset determined by BOM, meta tag, or caller
+        final char UNICODE_BOM = '\uFEFF';
+        // Assuming DataUtil.defaultCharset is accessible and static final
+        final String defaultCharset = org.jsoup.helper.DataUtil.defaultCharset;
 
-        // look for BOM - overrides any other header or input
+        // 1. Check for BOM - overrides any other header or input. Does not change byteData position yet.
+        byteData.mark(); // Mark the start
+        byte[] bom = new byte[4];
+        int bomLength = 0;
+        if (byteData.remaining() >= 4) {
+            // Read first 4 bytes without changing position for BOM detection
+            bom[0] = byteData.get(0);
+            bom[1] = byteData.get(1);
+            bom[2] = byteData.get(2);
+            bom[3] = byteData.get(3);
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
+            if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) { // UTF-32BE
+                 foundCharset = "UTF-32BE";
+                 bomLength = 4;
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) { // UTF-32LE
+                 foundCharset = "UTF-32LE";
+                 bomLength = 4;
+            } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) { // UTF-16BE
+                 foundCharset = "UTF-16BE";
+                 bomLength = 2;
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { // UTF-16LE
+                 foundCharset = "UTF-16LE";
+                 bomLength = 2;
+            } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { // UTF-8
+                 foundCharset = "UTF-8";
+                 bomLength = 3;
+             }
+            // Add other BOMs if needed (e.g., UTF-7 - unlikely)
+        } else if (byteData.remaining() >= 2) { // Check for 2-byte BOMs only if not enough for 4
+            bom[0] = byteData.get(0);
+            bom[1] = byteData.get(1);
+
+            if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) { // UTF-16BE
+                 foundCharset = "UTF-16BE";
+                 bomLength = 2;
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { // UTF-16LE
+                 foundCharset = "UTF-16LE";
+                 bomLength = 2;
+            }
+        }
+
+        if (bomLength > 0) {
+             byteData.position(byteData.position() + bomLength); // Advance position past BOM if detected
+        }
+        // Reset not needed here as we used absolute gets and only advanced position if BOM found.
+
+        // 2. Determine encoding if not found via BOM
+        if (foundCharset == null) { // No BOM found
+             if (charsetName != null) { // Caller provided charset takes precedence over meta tag
+                 Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+                 foundCharset = charsetName;
+             } else { // No BOM, no caller charset - attempt meta tag detection
+                 // We need to tentatively decode using the default charset to find meta tag.
+                 // byteData is still positioned at 0 (or start after mark).
+                 byteData.mark(); // Mark position before tentative decode
+                 try {
+                     String tentativeDocData = Charset.forName(defaultCharset).decode(byteData).toString();
+                     // tentativeDocData now contains the decoded string. byteData position is advanced.
+                     doc = parser.parseInput(tentativeDocData, baseUri); // Parse tentatively
+                     Element meta = doc.selectFirst("meta[http-equiv=content-type], meta[charset]");
+                     String metaCharset = null;
+                     if (meta != null) { // Found a meta tag
                          if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+                             // Assuming DataUtil.getCharsetFromContentType is accessible and static
+                             metaCharset = org.jsoup.helper.DataUtil.getCharsetFromContentType(meta.attr("content"));
                          }
-                if (foundCharset == null && meta.hasAttr("charset")) {
+                         if (metaCharset == null && meta.hasAttr("charset")) {
+                             metaCharset = meta.attr("charset");
+                         }
+                     }
+
+                     if (metaCharset != null && metaCharset.length() > 0) {
+                         metaCharset = metaCharset.trim().replaceAll("[\"']", ""); // Clean input
+                         // Validate meta charset
                          try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+                            if (Charset.isSupported(metaCharset) && !metaCharset.equalsIgnoreCase(defaultCharset)) {
+                                 // Different, valid charset found in meta. Use it.
+                                 foundCharset = metaCharset;
+                                 doc = null; // Discard initial parse result
+                                 byteData.reset(); // IMPORTANT: Rewind buffer to re-decode with correct charset
+                            } else {
+                                 // Meta charset is same as default, invalid, or unsupported.
+                                 // Stick with the default charset parse. 'doc' is already parsed.
+                                 foundCharset = defaultCharset;
+                                 docData = tentativeDocData; // Keep the decoded data from default decode
+                                 // Buffer already consumed by decode, no reset needed.
                             }
                          } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                             // Meta charset is invalid (e.g., unsupported format). Stick with default.
+                             foundCharset = defaultCharset;
+                             docData = tentativeDocData; // Keep the doc parsed with default
+                         }
+                     } else {
+                         // No meta charset found, or empty. Stick with default charset parse.
+                         foundCharset = defaultCharset;
+                         docData = tentativeDocData; // Keep the doc parsed with default
+                     }
+                 } catch (Exception e) {
+                     // Catch exceptions during tentative parse/decode (e.g., CharacterCodingException)
+                     byteData.reset(); // Rewind on error
+                     foundCharset = defaultCharset; // Fallback to default
+                     doc = null; // Ensure re-parse below if possible
+                     docData = null;
+                 }
              }
         }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
+        // 3. Decode and Parse (if not already parsed in step 2)
+        if (doc == null) { // Happens if BOM found, caller charset provided, meta required re-parse, or tentative parse failed
+            Validate.notEmpty(foundCharset, "Charset must be resolved by now for re-parse");
+            // Decode using the determined charset (from BOM, caller, or meta)
+            // byteData position is either advanced past BOM or at the start (due to reset or first read)
             docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+
+            // Strip potential leading BOM character (\uFEFF) from decoded string.
+            // Although BOM bytes were skipped, some decoders might still insert the char.
             if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
             }
-        if (doc == null) {
+            // Check for null docData? If decode failed, Charset.decode throws exception.
+            // If byteData was empty after BOM skip, docData would be empty string.
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+
+        // 4. Set final charset and return
+        Validate.notNull(doc, "Doc should not be null here");
+        // Ensure foundCharset reflects the actual encoding used for the final parse
+        if (foundCharset == null) { // Should not happen if logic above is sound, but as fallback
+            foundCharset = defaultCharset;
+        }
+        doc.outputSettings().charset(foundCharset);
+
         return doc;
     }
\ No newline at end of file
