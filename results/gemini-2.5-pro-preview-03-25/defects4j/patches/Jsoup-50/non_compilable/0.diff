diff --git a/tmp/a41e6cfd-1f3f-4cd0-93f5-186db5b4c504_buggy.java b/tmp/781b842e-b243-4e64-b251-8509cd66579d_fixed.java
index 25ca093..e77b594 100644
--- a/tmp/a41e6cfd-1f3f-4cd0-93f5-186db5b4c504_buggy.java
+++ b/tmp/781b842e-b243-4e64-b251-8509cd66579d_fixed.java
@@ -1,52 +1,167 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+import org.jsoup.helper.Validate;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+
+// Replaced the buggy function with the fixed version below
+class FixedDataUtil { // Helper class to contain the static method and potential dependencies
+
+    // Assume defaultCharset is defined elsewhere, e.g., static final String defaultCharset = "UTF-8";
+    // Assume getCharsetFromContentType is defined elsewhere.
+    // Assume UNICODE_BOM is no longer needed here.
+    private static final String defaultCharset = "UTF-8"; // Assuming UTF-8 is the default
+
+    /**
+     * Placeholder for the actual utility method if needed by the logic below.
+     * Extracts charset name from a Content-Type header value.
+     * @param contentType e.g. "text/html; charset=UTF-8"
+     * @return "UTF-8" or null if not found.
+     */
+    private static String getCharsetFromContentType(String contentType) {
+        if (contentType == null) return null;
+        // Basic implementation, real one might be more robust
+        String[] params = contentType.split(";");
+        for (String param : params) {
+            param = param.trim();
+            if (param.toLowerCase().startsWith("charset=")) {
+                String charset = param.substring("charset=".length());
+                // Remove quotes if present
+                if (charset.startsWith("\"") && charset.endsWith("\"") || charset.startsWith("'") && charset.endsWith("'")) {
+                    charset = charset.substring(1, charset.length() - 1);
+                }
+                return charset.trim();
+            }
+        }
+        return null;
+    }
+
+
+    // todo - this is getting gnarly. needs a rewrite. // Note: Rewritten based on analysis
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        String foundCharset = null; // Used to hold detected charset based on BOM or meta tags
 
-        // look for BOM - overrides any other header or input
+        // -- BOM Detection --
+        // First, try reading UTF-32 BOM. Needs 4 bytes.
+        byteData.mark(); // Mark the start
+        byte[] bom = new byte[4];
+        if (byteData.remaining() >= 4) {
+            byteData.get(bom);
+            byteData.reset(); // Go back to the start to read the actual sequence
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            // UTF-32 BE: 00 00 FE FF
+            if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
+                foundCharset = "UTF-32BE";
+                byteData.position(byteData.position() + 4); // Consume BOM
+            }
+            // UTF-32 LE: FF FE 00 00
+            else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == 0x00 && bom[3] == 0x00) {
+                foundCharset = "UTF-32LE";
+                byteData.position(byteData.position() + 4); // Consume BOM
+            }
+            // UTF-16 BE: FE FF
+            else if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+                foundCharset = "UTF-16BE";
+                byteData.position(byteData.position() + 2); // Consume BOM
+            }
+            // UTF-16 LE: FF FE
+            else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+                foundCharset = "UTF-16LE";
+                byteData.position(byteData.position() + 2); // Consume BOM
+            }
+            // UTF-8: EF BB BF
+            else if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
+                foundCharset = "UTF-8"; // Explicitly UTF-8
+                byteData.position(byteData.position() + 3); // Consume BOM
+            }
+            // No matching BOM, reset() is effectively called by lack of position change or was called explicitly earlier
+        } else if (byteData.remaining() >= 3) {
+             // Try reading UTF-8 BOM
+             byteData.get(bom, 0, 3);
+             byteData.reset();
+             // UTF-8: EF BB BF
+             if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
+                 foundCharset = "UTF-8";
+                 byteData.position(byteData.position() + 3);
+             }
+        } else if (byteData.remaining() >= 2) {
+            // Try reading UTF-16 BOM
+             byteData.get(bom, 0, 2);
+             byteData.reset();
+            // UTF-16 BE: FE FF
+             if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+                 foundCharset = "UTF-16BE";
+                 byteData.position(byteData.position() + 2);
+             }
+             // UTF-16 LE: FF FE
+             else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+                 foundCharset = "UTF-16LE";
+                 byteData.position(byteData.position() + 2);
+             }
+        }
+        // If no BOM found, foundCharset remains null. Position is at the start (due to reset or no match).
+
+        final String effectiveCharset; // The charset used for final decoding
+
+        if (foundCharset != null) {
+            // BOM dictates charset. Use it.
+            effectiveCharset = foundCharset;
+        } else if (charsetName != null) {
+            // No BOM, but charset provided externally (e.g. HTTP header). Use it.
+            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            effectiveCharset = charsetName;
+        } else {
+            // No BOM, no external charset. Detect from meta tags.
+            // Tentatively decode using default charset (UTF-8)
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+            doc = parser.parseInput(docData, baseUri); // Parse tentatively to find meta tags
+
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
+            String metaCharset = null;
+            if (meta != null) { // If not found, will keep utf-8 as best attempt
                 if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+                    metaCharset = getCharsetFromContentType(meta.attr("content"));
                 }
-                if (foundCharset == null && meta.hasAttr("charset")) {
+                if (metaCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+                            metaCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                        // ignore invalid charset attribute
+                        metaCharset = null;
                     }
                 }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+
+            if (metaCharset != null && metaCharset.length() != 0 && !metaCharset.equalsIgnoreCase(defaultCharset)) {
+                 // Found a different charset in meta tag, use it. Need to re-decode.
+                 metaCharset = metaCharset.trim().replaceAll("[\"']", "");
+                 effectiveCharset = metaCharset;
+                 doc = null; // Signal that we need to parse again after re-decoding
+                 byteData.reset(); // Rewind to start (before BOM check mark) for re-decoding
+            } else {
+                // No usable meta charset found, or it matched the default. Stick with default.
+                // Keep the doc parsed with default charset.
+                effectiveCharset = defaultCharset;
             }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
+
+        // If doc is null, it means we either had a BOM, an explicit charset, or found a meta charset requiring re-decode.
+        // In these cases, we need to decode the (remaining) byte data using the effectiveCharset.
         if (doc == null) {
+            // Decode the byte buffer from its current position (after BOM, or from start if no BOM/re-decode)
+            docData = Charset.forName(effectiveCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+
+        // Set the document's output charset to the determined effective charset
+        doc.outputSettings().charset(effectiveCharset);
         return doc;
     }
+}
\ No newline at end of file
