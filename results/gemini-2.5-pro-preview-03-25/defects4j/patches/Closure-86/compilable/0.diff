diff --git a/tmp/1935d61e-a81b-46a9-8587-7d225ad1db06_buggy.java b/tmp/5117f62a-d26b-4d92-a479-7d1d014a5b90_fixed.java
index a3709ee..950f9ea 100644
--- a/tmp/1935d61e-a81b-46a9-8587-7d225ad1db06_buggy.java
+++ b/tmp/5117f62a-d26b-4d92-a479-7d1d014a5b90_fixed.java
@@ -1,71 +1,84 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
         return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+            || (locals.apply(value.getFirstChild()) // Check if the L-Value is local?
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+          // Prefix operators return a number. Numbers are local.
+          return true;
         } else {
-          return true;
+          // Postfix operators return the value prior to the change.
+          return evaluatesToLocalValue(value.getFirstChild(), locals);
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
+        // A variable may be define in global scope or aliased.
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+        // Property references are assumed to be non-local unless the object is
+        // known locally. Recurse down the left side.
+        return isImmutableValue(value) || evaluatesToLocalValue(value.getFirstChild(), locals);
+        // TODO(johnlenz): should we consider the case where the object is local
+        // but the property is not? Technically, this is side-effect free but
+        // the property might be an alias for a non-local object.
+
       case Token.CALL:
+        // Built-in functions that return primitives are local values.
+        // TODO(nicksantos): This needs to be changed so that it
+        // returns true iff we're sure the value was never aliased from inside
+        // the function.
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
         // TODO(nicksantos): This needs to be changed so that it
         // returns true iff we're sure the value was never aliased from inside
         // the constructor (similar to callHasLocalResult)
-        return true;
+        // For now, assume that all constructors return non-local values.
+        return false;
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
         // Literals objects with non-literal children are allowed.
         return true;
       case Token.IN:
         // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
         return true;
       default:
         // Other op force a local value:
         //  x = '' + g (x is now an local string)
         //  x -= g (x is now an local number)
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
\ No newline at end of file
