diff --git a/tmp/5c4301a0-96f2-4a8d-bdc0-0f12aba25177_buggy.java b/tmp/e7a6bade-c1a7-4ec8-8dfe-0deec425b1a2_fixed.java
index b56897c..240721e 100644
--- a/tmp/5c4301a0-96f2-4a8d-bdc0-0f12aba25177_buggy.java
+++ b/tmp/e7a6bade-c1a7-4ec8-8dfe-0deec425b1a2_fixed.java
@@ -1,27 +1,45 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
-        // function.
+        // function. // Note: This comment seems outdated compared to the implementation.
+
+        // Check for nodes known to have side effects.
+        // Use specific helpers for CALL and NEW as they might be more precise
+        // (e.g., respecting @nosideeffects annotations).
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // Add checks for other operators that modify state.
+        if (NodeUtil.isAssignmentOp(n) || // =, +=, -=, etc.
+            n.isInc() ||                  // ++
+            n.isDec() ||                  // --
+            n.isDelProp()) {              // delete
+          return true;
+        }
 
+
+        // If the node itself doesn't have side-effects according to the checks above,
+        // recursively check its children.
+        // We skip children that represent the start of a new control flow graph node
+        // (like function bodies, loop bodies) because side effects within those
+        // structures are typically handled by the broader flow analysis, not by this
+        // local predicate checking for side effects within a single expression or statement.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
