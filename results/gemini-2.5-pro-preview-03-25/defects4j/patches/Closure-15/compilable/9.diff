diff --git a/tmp/08a876be-7c50-4800-87db-09201b452d4b_buggy.java b/tmp/21d42b59-afba-4f12-897d-0fd4b4e174e7_fixed.java
index b56897c..0d3bad9 100644
--- a/tmp/08a876be-7c50-4800-87db-09201b452d4b_buggy.java
+++ b/tmp/21d42b59-afba-4f12-897d-0fd4b4e174e7_fixed.java
@@ -1,27 +1,43 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
-        // function.
+        // function. (Comment seems outdated/incomplete based on code logic)
+
+        // Check for nodes that inherently have side effects or whose side effects
+        // need careful checking.
+
+        // Calls and Constructor Calls require special checking, as not all
+        // have side effects (e.g. String('a')).
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
-
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // Other operators that modify state are side effects.
+        // This includes assignments, increments, decrements, and delete.
+        if (NodeUtil.isAssignmentOp(n) ||
+            n.isInc() ||
+            n.isDec() ||
+            n.isDelProp()) {
+          return true;
+        }
 
+        // Recursively check children, unless the child starts a new CFG node
+        // (like a function definition).
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          // We should not look into expressions that execute later.
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
