diff --git a/tmp/6794802d-92b6-4b4c-a976-03d0c2d006f0_buggy.java b/tmp/32d0149f-d040-4b4a-a8fd-bfdaaaa9bfe9_fixed.java
index b56897c..0cafe69 100644
--- a/tmp/6794802d-92b6-4b4c-a976-03d0c2d006f0_buggy.java
+++ b/tmp/32d0149f-d040-4b4a-a8fd-bfdaaaa9bfe9_fixed.java
@@ -1,27 +1,42 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
+        // Check for nodes that modify state directly.
+        // Examples: assignments, inc/dec, delete
+        int type = n.getType();
+        if (NodeUtil.isAssignmentOp(n) || // Check all ASSIGN_* types
+            type == Token.INC ||
+            type == Token.DEC ||
+            type == Token.DELPROP) {
+          return true;
+        }
+
+
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
-        // function.
+        // function. The checks below are more general.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
-
+        // For other node types (like IN, GETPROP, NAME, constants, arithmetic ops),
+        // side effects depend on their children/operands.
+        // Recursively check children.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          // Don't traverse into nodes that start a new CFG basic block,
+          // as side effects there are handled by the CFG traversal.
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
