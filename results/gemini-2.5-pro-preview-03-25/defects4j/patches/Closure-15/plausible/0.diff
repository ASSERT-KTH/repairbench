diff --git a/tmp/03f99bfd-804d-40d6-a4de-31dec1e12450_buggy.java b/tmp/9d2f8b12-b779-4b8c-a7e6-eae5130d62a8_fixed.java
index b56897c..5e240ac 100644
--- a/tmp/03f99bfd-804d-40d6-a4de-31dec1e12450_buggy.java
+++ b/tmp/9d2f8b12-b779-4b8c-a7e6-eae5130d62a8_fixed.java
@@ -1,27 +1,61 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
+        // (Comment seems outdated or potentially misleading based on implementation)
+
+        // Check for function calls with side effects.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
+        // Check for constructor calls with side effects.
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // Check for the delete operator, which modifies objects and is
+        // considered a side effect that prevents inlining in this context.
+        if (n.isDelProp()) {
+          return true;
+        }
 
+        // Check for assignments and increments/decrements. These have side effects,
+        // but are handled by checkRedefinition if they modify the variable
+        // being considered for inlining. However, they might have other side effects
+        // (e.g., modifying an object property) that could affect the program state
+        // in ways that invalidate inlining assumptions. NodeUtil.mayHaveSideEffects
+        // captures these. Note: This might be broader than strictly necessary if only
+        // modifications to the specific variable were the concern, but aligns with
+        // treating unknown function calls and delete as barriers.
+        // Let's use a targeted check for operations known to cause issues beyond
+        // simple variable reassignment.
+        if (NodeUtil.nodeTypeMayHaveSideEffects(n)) {
+            // This check includes assignments, inc/dec, delete, call, new, etc.
+            // Refining based on the original logic and the failed test:
+            // The original code checked CALL and NEW. The test fails for DELPROP.
+            // Assignments/INC/DEC to the variable itself are handled elsewhere.
+            // Assignments/INC/DEC to *other* variables or properties *could*
+            // theoretically have side effects via getters/setters or aliasing,
+            // but let's stick to the explicit checks for now.
+            // DELPROP was already added above. Let's keep the structure focused.
+            // No change needed here based on current understanding.
+        }
+
+
+        // Recursively check children, avoiding traversal into new CFG nodes
+        // (like functions or loops) as their effects are analyzed separately.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
