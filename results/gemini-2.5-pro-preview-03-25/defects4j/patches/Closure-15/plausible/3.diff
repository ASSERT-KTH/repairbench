diff --git a/tmp/dca29506-0c3b-4bbc-93fc-7daf654b037a_buggy.java b/tmp/3c354c28-9be8-47a5-846f-28e5b01f43bf_fixed.java
index b56897c..38252da 100644
--- a/tmp/dca29506-0c3b-4bbc-93fc-7daf654b037a_buggy.java
+++ b/tmp/3c354c28-9be8-47a5-846f-28e5b01f43bf_fixed.java
@@ -1,27 +1,49 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
+        // NOTE(fix): Broadened the check beyond CALL/NEW to include other
+        // common side-effecting operations like delete, inc/dec, and
+        // property/element assignments, which the original code missed.
+
+        // Check for explicit calls and constructor calls known to have side effects.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
-
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // Check for other operators that always have side effects.
+        if (n.isDelProp() || n.isInc() || n.isDec()) {
+          return true;
+        }
 
+        // Check for assignments. Assignments to simple names (var x = ...)
+        // are generally handled by variable definition/liveness analysis elsewhere.
+        // However, assignments to properties (obj.prop = ...) or elements (arr[i] = ...)
+        // definitely have side effects that this check should capture.
+        if (NodeUtil.isAssignmentOp(n)) {
+          Node lhs = n.getFirstChild();
+          // Check if the assignment target is a property or element access.
+          if (lhs.isGetProp() || lhs.isGetElem()) {
+            return true;
+          }
+        }
+
+        // Recursively check children, but don't cross Control Flow Graph node boundaries.
+        // This keeps the check within the current "expression" or basic block segment.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
