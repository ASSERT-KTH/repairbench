diff --git a/tmp/7bdacefb-fadf-4145-805a-3f901b16fa76_buggy.java b/tmp/66e50397-7825-45e0-acc0-0af0bbf15460_fixed.java
index b56897c..473c2f3 100644
--- a/tmp/7bdacefb-fadf-4145-805a-3f901b16fa76_buggy.java
+++ b/tmp/66e50397-7825-45e0-acc0-0af0bbf15460_fixed.java
@@ -1,27 +1,32 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
-          return true;
-        }
+        // TODO(user): We are looking for side effects, maybe this check is
+        // too aggressive and doesn't allow changing some local variables. User
+        // preference?
 
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+        // Check for side effects using the general utility function.
+        // This covers calls, assignments, increments, decrements, deletes, etc.
+        // We don't need to check specifically for CALL or NEW because
+        // nodeHasSideEffects covers them.
+        if (NodeUtil.nodeHasSideEffects(n)) {
           return true;
         }
 
-
+        // Recursively check children, skipping descent into new control flow graphs.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+          // Don't traverse into inner functions or loops, as variables there
+          // might be shadowed or modified differently.
+          if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+            if (apply(c)) { // Check recursively.
               return true;
             }
           }
+        }
         return false;
       }
\ No newline at end of file
