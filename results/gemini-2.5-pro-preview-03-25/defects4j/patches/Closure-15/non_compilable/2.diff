diff --git a/tmp/d51f81fd-2dcd-490d-b8ef-9a3b7d4c1105_buggy.java b/tmp/e65162a7-89b8-4e44-ae33-7c570571819b_fixed.java
index b56897c..8fe20c8 100644
--- a/tmp/d51f81fd-2dcd-490d-b8ef-9a3b7d4c1105_buggy.java
+++ b/tmp/e65162a7-89b8-4e44-ae33-7c570571819b_fixed.java
@@ -1,27 +1,36 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
-          return true;
-        }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+        // Check if the node itself has side-effects according to the general utility.
+        // This is more comprehensive than checking only CALL and NEW nodes.
+        // It covers assignments, increments, decrements, deletes, specific function calls, etc.
+        // Let NodeUtil determine if a node type might have side effects.
+        if (NodeUtil.nodeHasSideEffects(n)) {
           return true;
         }
 
+        // TODO(user): The original TODO suggested a more refined check potentially
+        // involving analysis of whether the *variable being considered* is passed
+        // to a side-effectful function. This implementation checks for *any*
+        // side effect in the traversed code region, which might be too
+        // conservative or not exactly match the original intent. However,
+        // using nodeHasSideEffects is more likely correct than the previous check
+        // limited to CALL/NEW.
 
+        // Recursively check children, skipping those that represent entering
+        // a new control flow graph structure (like function definitions).
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          // Check children recursively. If a child subtree has side effects, return true.
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
+
+        // No side effects were found in this node or its descendants (within the same CFG).
         return false;
       }
\ No newline at end of file
