diff --git a/tmp/b0e52fb7-16e9-49cb-bfcf-1fa66f4af94f_buggy.java b/tmp/ad08aeb0-33ef-4ca1-8533-d888245ab471_fixed.java
index b56897c..8ce1826 100644
--- a/tmp/b0e52fb7-16e9-49cb-bfcf-1fa66f4af94f_buggy.java
+++ b/tmp/ad08aeb0-33ef-4ca1-8533-d888245ab471_fixed.java
@@ -1,27 +1,50 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
-        // function.
+        // function. (The current implementation is broader).
+
+        // Check for nodes types that modify state or have clear side effects.
+        // These types are generally considered side-effecting regardless of context.
+        if (NodeUtil.isAssignmentOp(n)
+            || NodeUtil.isUpdateOp(n)
+            || n.isDelProp()
+            || n.isThrow()) {
+          return true;
+        }
+
+        // Check CALL and NEW using context-sensitive analysis, as not all
+        // calls/constructors have side effects.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // Hook and Tagged Template Literals might have side effects
+        // We rely on the recursive checks for these node types as specific analysis might be complex.
+        // For example, a hook's side effects depend on its children.
+        // A tagged template literal's side effects depend on the tag function call.
+        // The existing CALL check should handle the tagged template literal case via the tag function.
 
+        // Recursively check children, skipping control flow structures.
+        // The CFG traversal handles side effects within those structures.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+          // Don't descend into control structures or functions (handled by CFG)
+          if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+             // If a descendant has side effects, propagate the result up.
+             if (apply(c)) {
                return true;
              }
           }
+        }
         return false;
       }
\ No newline at end of file
