diff --git a/tmp/763f35a8-e6b3-401f-9521-1f11a9829f42_buggy.java b/tmp/c402516e-c776-4794-8845-f2495f3f07a6_fixed.java
index b56897c..06b0426 100644
--- a/tmp/763f35a8-e6b3-401f-9521-1f11a9829f42_buggy.java
+++ b/tmp/c402516e-c776-4794-8845-f2495f3f07a6_fixed.java
@@ -1,27 +1,51 @@
+      // Assume 'compiler' field/variable exists in the enclosing scope
+      private final AbstractCompiler compiler;
+
+      // Constructor or method where the predicate is used needs to pass 'compiler'
+      // Example: new SomePredicate(compiler) or defined in a scope with 'this.compiler'
+
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+        // Check for side effects using the general utility.
+        // We need to check the children recursively, but we can short-circuit
+        // if the node itself has side-effects, unless it's an operator
+        // that we specifically want to allow (like 'in', 'instanceof', 'typeof').
+        // These operators are side-effect free in isolation (ignoring exceptions).
+        if (NodeUtil.nodeMayHaveSideEffects(n, compiler)) {
+          // Check if the side-effect comes from an operator considered safe
+          // for this optimization.
+          switch (n.getToken()) {
+            case IN:
+            case INSTANCEOF:
+            case TYPEOF:
+              // These operators are safe, don't return true yet.
+              // We still need to check their children recursively below.
+              break;
+            default:
+              // Node has side effects due to other reasons (call, new, assign,
+              // delete, ++, --, etc.). This prevents inlining.
               return true;
           }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
-          return true;
         }
 
-
+        // Recursively check children, skipping nodes that start new CFG basic blocks.
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+          // Don't recurse into functions or inner blocks, as they are not part of
+          // the current block's side-effect analysis in this context.
+          if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+            if (apply(c)) {
+              // If a child node has side effects, then this node effectively does too.
               return true;
             }
           }
+        }
+
+        // No side effects found in this node or its relevant children.
         return false;
       }
\ No newline at end of file
