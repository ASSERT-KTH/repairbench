diff --git a/tmp/995e5ded-2f59-4757-a844-e3a3bd71f93a_buggy.java b/tmp/1abc8fd0-b534-4afd-9ac8-f687e1f8ac2e_fixed.java
index b56897c..76a5c16 100644
--- a/tmp/995e5ded-2f59-4757-a844-e3a3bd71f93a_buggy.java
+++ b/tmp/1abc8fd0-b534-4afd-9ac8-f687e1f8ac2e_fixed.java
@@ -1,27 +1,15 @@
+      // Assume 'compiler' instance is available in the scope this predicate is defined.
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
-          return true;
-        }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
-          return true;
-        }
-
-
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
-            return true;
-          }
-        }
-        return false;
+        // Delegate the side effect check to the comprehensive utility function.
+        // This correctly handles CALL, NEW, ASSIGN, INC, DEC, DELETE, etc.,
+        // and correctly identifies 'IN' as having no side effects relevant here.
+        // The NodeUtil.has call which uses this predicate handles the traversal.
+        return NodeUtil.nodeMayHaveSideEffects(n, compiler);
       }
\ No newline at end of file
