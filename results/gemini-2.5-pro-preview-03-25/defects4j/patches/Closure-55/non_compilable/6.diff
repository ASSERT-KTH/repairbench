diff --git a/tmp/7e836fc5-545c-4944-aac9-710528616353_buggy.java b/tmp/8e20a7b3-123d-40ee-8d2d-4e45b1cec5a6_fixed.java
index 43937f5..20ac26b 100644
--- a/tmp/7e836fc5-545c-4944-aac9-710528616353_buggy.java
+++ b/tmp/8e20a7b3-123d-40ee-8d2d-4e45b1cec5a6_fixed.java
@@ -1,3 +1,37 @@
   private static boolean isReduceableFunctionExpression(Node n) {
+    // We don't want to rewrite functions that are bleeding edge ES6
+    // features, because the rewriting might not be valid.
+    if (n.isArrowFunction() || n.isGeneratorFunction()) {
+      return false;
+    }
+
+    // GET/SET properties are syntactic sugar for Object.defineProperty
+    // calls. Simply rewriting the function nodes of GET/SET properties
+    // leads to invalid code generation.
+    //
+    // Example:
+    // var x = { get y() { return 1; } };
+    //
+    // becomes:
+    //
+    // var x = { get $jscomp$newfunc0() { return 1; } };
+    // $jscomp.global.Object.defineProperties(x,
+    //    {y: {get: $jscomp$newfunc0}});
+    //
+    // Which is wrong.
+    //
+    // Fortunately, GET/SET properties are already rewritten by
+    // Es6ToEs3Converter. Any GET/SET properties that reach this pass
+    // must be on extern types, or the target language is ES5. In the former case,
+    // we can't rewrite the function because we don't know the type. In the
+    // latter case, we don't need to rewrite the function.
+    //
+    // ES6 classes also use GET/SET properties for class methods, but these
+    // are transpiled away by Es6ToEs3Converter.
+    Node parent = n.getParent();
+    if (parent != null && (parent.isGetterDef() || parent.isSetterDef())) {
+      return false;
+    }
+
     return NodeUtil.isFunctionExpression(n);
   }
\ No newline at end of file
