diff --git a/tmp/e1d20ccb-c347-4148-9211-e9b8d36b7e38_buggy.java b/tmp/8e75c128-f46e-4a6f-8a72-dfa6f3dca045_fixed.java
index cb1fb60..ebd5eac 100644
--- a/tmp/e1d20ccb-c347-4148-9211-e9b8d36b7e38_buggy.java
+++ b/tmp/8e75c128-f46e-4a6f-8a72-dfa6f3dca045_fixed.java
@@ -1,73 +1,173 @@
     /**
      * <p>
      * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
      * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
      * call is not necessary when decoding, but it doesn't hurt, either.
      * </p>
      * <p>
      * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
      * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
      * garbage-out philosophy: it will not check the provided data for validity.
      * </p>
      * <p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in
      *            byte[] array of ascii data to base64 decode.
      * @param inPos
      *            Position to start reading data from.
      * @param inAvail
      *            Amount of bytes available from input for encoding.
+     * @param context the context to be used
+     *
+     * N.B. The context parameter is unused but is required by the abstract base class.
      */
-    void decode(byte[] in, int inPos, int inAvail) {
+    @Override
+    void decode(byte[] in, int inPos, int inAvail, Context context) {
+        if (context.eof) {
+            return;
+        }
+        if (inAvail < 0) {
+            context.eof = true;
+        }
+        for (int i = 0; i < inAvail; i++) {
+            final byte[] buffer = ensureBufferSize(decodeSize, context);
+            final byte b = in[inPos++];
+            if (b == pad) {
+                // We're done.
+                context.eof = true;
+                break;
+            } else {
+                if (b >= 0 && b < DECODE_TABLE.length) {
+                    final int result = DECODE_TABLE[b];
+                    if (result >= 0) {
+                        context.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;
+                        context.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;
+                        if (context.modulus == 0) {
+                            buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
+                            buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
+                            buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);
+                        }
+                    }
+                }
+            }
+        }
+
+        // Two forms of EOF as far as base64 decoder is concerned: actual
+        // EOF (-1) and first time '=' character is encountered in stream.
+        // This approach makes the '=' padding characters completely optional.
+        if (context.eof && context.modulus != 0) {
+            final byte[] buffer = ensureBufferSize(decodeSize, context);
+
+            // We have some spare bits remaining
+            // Output all whole multiples of 8 bits and ignore the rest
+            context.ibitWorkArea = context.ibitWorkArea << BITS_PER_ENCODED_BYTE; // Shift in 6 bits worth of padding.
+            switch (context.modulus) {
+                case 2 : // We have 2 bytes -> 12 bits -> 1 output byte
+                    context.ibitWorkArea = context.ibitWorkArea << BITS_PER_ENCODED_BYTE; // Shift in another 6 bits worth of padding.
+                    buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
+                    break;
+                case 3 : // We have 3 bytes -> 18 bits -> 2 output bytes
+                    buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
+                    buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
+                    break;
+                default:
+                    // Should not happen. Modulus must be 0, 1, 2 or 3. Put exception here if we want to be picky.
+            }
+        }
+    }
+
+    // Note: The original buggy code was missing the context parameter and used instance fields directly.
+    // The fixed code assumes the context object holds the state (eof, modulus, ibitWorkArea, buffer, pos)
+    // and uses ensureBufferSize for buffer management, which internally calls resizeBuffer if needed.
+    // The core logic fix is ensuring the buffer is ready before writing the final bytes when EOF is reached.
+    // Since the original code snippet was partial (missing class context, fields like MASK_8BITS, PAD, DECODE_TABLE, decodeSize, resizeBuffer, buffer, pos, modulus, x, eof),
+    // I've adapted the fix based on the likely structure of the surrounding BaseNCodec class from Apache Commons Codec,
+    // using context object and ensureBufferSize as is standard there. The key change is adding the `ensureBufferSize`
+    // call within the `if (context.eof && context.modulus != 0)` block.
+
+    // Minimal fix applied to the provided snippet structure (assuming fields exist on the instance):
+    /**
+     * <p>
+     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
+     * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
+     * call is not necessary when decoding, but it doesn't hurt, either.
+     * </p>
+     * <p>
+     * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
+     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
+     * garbage-out philosophy: it will not check the provided data for validity.
+     * </p>
+     * <p>
+     * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
+     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
+     * </p>
+     *
+     * @param in
+     *            byte[] array of ascii data to base64 decode.
+     * @param inPos
+     *            Position to start reading data from.
+     * @param inAvail
+     *            Amount of bytes available from input for encoding.
+     */
+    void decode(byte[] in, int inPos, int inAvail) { // Assuming instance fields: eof, buffer, pos, decodeSize, PAD, DECODE_TABLE, modulus, x, MASK_8BITS, resizeBuffer()
         if (eof) {
             return;
         }
         if (inAvail < 0) {
             eof = true;
         }
         for (int i = 0; i < inAvail; i++) {
+            // Ensure buffer has space for potential output of 3 bytes
             if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
             if (b == PAD) {
                 // We're done.
                 eof = true;
                 break;
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
                     if (result >= 0) {
                         modulus = (++modulus) % 4;
                         x = (x << 6) + result;
                         if (modulus == 0) {
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
                         }
                     }
                 }
             }
         }
 
         // Two forms of EOF as far as base64 decoder is concerned: actual
         // EOF (-1) and first time '=' character is encountered in stream.
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
+            // Ensure buffer has space for final output (max 2 bytes)
+            // Using decodeSize (likely 3) is safe check
+            if (buffer == null || buffer.length - pos < decodeSize) { // FIX: Added this check
+                resizeBuffer();
+            }
 
             x = x << 6;
             switch (modulus) {
                 case 2 :
                     x = x << 6;
+                    // Final check assumes resizeBuffer succeeded if called. Write the byte.
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
                 case 3 :
+                    // Final check assumes resizeBuffer succeeded if called. Write the bytes.
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                     break;
+                // case 0 and 1 should not happen here because modulus != 0 is checked.
             }
         }
     }
\ No newline at end of file
