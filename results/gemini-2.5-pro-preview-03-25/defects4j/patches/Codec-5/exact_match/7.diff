diff --git a/tmp/6f3dc97a-7b5c-4df2-8dad-7a6e67609ed0_buggy.java b/tmp/9f30447c-9682-4648-9eb4-9c12ba555f60_fixed.java
index cb1fb60..83412db 100644
--- a/tmp/6f3dc97a-7b5c-4df2-8dad-7a6e67609ed0_buggy.java
+++ b/tmp/9f30447c-9682-4648-9eb4-9c12ba555f60_fixed.java
@@ -1,73 +1,106 @@
     /**
      * <p>
      * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
      * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
      * call is not necessary when decoding, but it doesn't hurt, either.
      * </p>
      * <p>
      * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
      * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
      * garbage-out philosophy: it will not check the provided data for validity.
      * </p>
      * <p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in
      *            byte[] array of ascii data to base64 decode.
      * @param inPos
      *            Position to start reading data from.
      * @param inAvail
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         if (inAvail < 0) {
             eof = true;
         }
         for (int i = 0; i < inAvail; i++) {
+            // Notes:
+            // 1. Must be defined externally:
+            //    - byte[] buffer
+            //    - int pos
+            //    - int decodeSize (likely 3)
+            //    - boolean eof
+            //    - int modulus
+            //    - int x
+            //    - byte PAD
+            //    - int[] DECODE_TABLE
+            //    - int MASK_8BITS (0xFF)
+            //    - void resizeBuffer()
+            // 2. decodeSize is used to estimate buffer growth needed.
+
             if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
             if (b == PAD) {
                 // We're done.
                 eof = true;
                 break;
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
                     if (result >= 0) {
                         modulus = (++modulus) % 4;
                         x = (x << 6) + result;
                         if (modulus == 0) {
+                            // We might need to resize again here if resizeBuffer() didn't provide
+                            // enough space for 3 bytes. The check at the start of the loop ensures
+                            // space *before* reading the character, but processing it might fill buffer.
+                            // However, the common pattern is to check before potentially writing.
+                            // Let's assume the initial check is sufficient for this block.
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
                         }
                     }
                 }
             }
         }
 
         // Two forms of EOF as far as base64 decoder is concerned: actual
         // EOF (-1) and first time '=' character is encountered in stream.
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
+            // On EOF, ensure buffer is big enough to hold last possible decoded bytes
+            // (1 or 2 bytes, depending on modulus). Check against decodeSize for safety,
+            // consistent with the loop check. This addresses the NPE reported in CODEC-98.
+            if (buffer == null || buffer.length - pos < decodeSize) {
+                resizeBuffer();
+            }
 
+            // Final calculation may need adding imaginary PAD characters to complete the bytes.
             x = x << 6;
             switch (modulus) {
                 case 2 :
+                    // We have processed 2 base64 chars => 12 bits. Add 2 virtual PADs (12 bits) => 24 bits total.
+                    // Need 1 byte result ((12+12) >> 16). Shift left by 6 again for 18 bits, then 6 more for 24.
                     x = x << 6;
+                    // Write the top 8 bits.
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
                 case 3 :
+                    // We have processed 3 base64 chars => 18 bits. Add 1 virtual PAD (6 bits) => 24 bits total.
+                    // Need 2 byte result ((18+6) >> 16 and (18+6) >> 8). Shift was already done (x << 6).
+                    // Write the top 8 bits, then the next 8 bits.
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                     break;
+                // case 1 should not happen based on base64 structure rules
             }
         }
     }
\ No newline at end of file
