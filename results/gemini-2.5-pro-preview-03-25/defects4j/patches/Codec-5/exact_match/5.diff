diff --git a/tmp/5d6ffb8f-6a43-4092-ad30-3d8c9a026893_buggy.java b/tmp/ad138348-b6cd-4b78-9c1c-6d4a6a3236c7_fixed.java
index cb1fb60..3264edf 100644
--- a/tmp/5d6ffb8f-6a43-4092-ad30-3d8c9a026893_buggy.java
+++ b/tmp/ad138348-b6cd-4b78-9c1c-6d4a6a3236c7_fixed.java
@@ -1,73 +1,87 @@
     /**
      * <p>
      * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
      * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
      * call is not necessary when decoding, but it doesn't hurt, either.
      * </p>
      * <p>
      * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
      * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
      * garbage-out philosophy: it will not check the provided data for validity.
      * </p>
      * <p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in
      *            byte[] array of ascii data to base64 decode.
      * @param inPos
      *            Position to start reading data from.
      * @param inAvail
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         if (inAvail < 0) {
             eof = true;
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
             if (b == PAD) {
                 // We're done.
                 eof = true;
                 break;
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
                     if (result >= 0) {
                         modulus = (++modulus) % 4;
                         x = (x << 6) + result;
                         if (modulus == 0) {
+                            // Don't need to check buffer again here,
+                            // the check at the start of the loop ensures enough space for decodeSize bytes
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
                         }
                     }
                 }
             }
         }
 
         // Two forms of EOF as far as base64 decoder is concerned: actual
         // EOF (-1) and first time '=' character is encountered in stream.
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
+            // On EOF, write out any remaining bits.
+            // Ensure buffer exists and has capacity before writing. This is needed
+            // in case the initial loop did not run or did not trigger a resize,
+            // which can happen if the stream ends unexpectedly or EOF is signaled
+            // with inAvail = -1 before submitting any data. Fixes CODEC-98 NPE.
+            if (buffer == null || buffer.length - pos < decodeSize) { // Using decodeSize for consistency. It guarantees enough space.
+                 resizeBuffer();
+            }
 
             x = x << 6;
             switch (modulus) {
-                case 2 :
+                case 2 : // Need 1 byte output buffer
                     x = x << 6;
+                    // resizeBuffer() called above ensures capacity
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
-                case 3 :
+                case 3 : // Need 2 bytes output buffer
+                    // resizeBuffer() called above ensures capacity
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                     break;
+                // case 1 cannot happen in Base64: 1 byte encodes to 8 bits, but Base64 deals with 6-bit chunks.
+                // If somehow modulus==1 occurs, it indicates an error or corrupted stream. Handled implicitly?
             }
         }
     }
\ No newline at end of file
