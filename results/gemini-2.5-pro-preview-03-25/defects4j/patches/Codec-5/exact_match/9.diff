diff --git a/tmp/f8679346-fe6b-42ea-a12b-1e6a940c4129_buggy.java b/tmp/65fe17dd-3d6b-485e-a1fd-3db3a082aaf7_fixed.java
index cb1fb60..8731ee6 100644
--- a/tmp/f8679346-fe6b-42ea-a12b-1e6a940c4129_buggy.java
+++ b/tmp/65fe17dd-3d6b-485e-a1fd-3db3a082aaf7_fixed.java
@@ -1,73 +1,99 @@
     /**
      * <p>
      * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
      * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
      * call is not necessary when decoding, but it doesn't hurt, either.
      * </p>
      * <p>
      * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
      * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
      * garbage-out philosophy: it will not check the provided data for validity.
      * </p>
      * <p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      * 
      * @param in
      *            byte[] array of ascii data to base64 decode.
      * @param inPos
      *            Position to start reading data from.
      * @param inAvail
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         if (inAvail < 0) {
             eof = true;
         }
         for (int i = 0; i < inAvail; i++) {
+            // Ensure buffer is large enough for decoding triplets
             if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
             if (b == PAD) {
                 // We're done.
                 eof = true;
                 break;
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
                     if (result >= 0) {
                         modulus = (++modulus) % 4;
                         x = (x << 6) + result;
                         if (modulus == 0) {
+                            // Ensure buffer is large enough for the decoded triplet
+                            // (This check is repeated here because resizeBuffer() might have been called
+                            // unnecessarily if the first condition was true but the second was false.
+                            // Redundant check removed as it should be handled by the check at the start of the loop)
+                            // if (buffer == null || buffer.length - pos < decodeSize) {
+                            //     resizeBuffer();
+                            // }
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
                         }
                     }
                 }
             }
         }
 
         // Two forms of EOF as far as base64 decoder is concerned: actual
         // EOF (-1) and first time '=' character is encountered in stream.
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
+            // We may have unprocessed data left in the buffer.
+            // Ensure the buffer has capacity to write the final bytes.
+            if (buffer == null || buffer.length - pos < decodeSize) { // Use decodeSize, ensures capacity for up to 3 bytes, covers 1 or 2 needed here
+                resizeBuffer();
+            }
+
+            // The following check is necessary because resizeBuffer() could potentially fail
+            // or not allocate enough space in edge cases, though ideally it should handle this.
+            // However, the primary issue (NPE) is resolved by ensuring buffer is not null
+            // before attempting to write to it. A robust resizeBuffer() implementation is assumed.
 
             x = x << 6;
             switch (modulus) {
                 case 2 :
                     x = x << 6;
+                    // We can't assume the buffer is large enough, check again for the specific bytes needed
+                    // (Simplified: the check before the switch ensures non-null and *some* capacity >= decodeSize)
+                    // if (buffer == null || buffer.length - pos < 1) { // Need 1 byte
+                    //     resizeBuffer(); // This call path might be complex if resize depends on decodeSize
+                    // }
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
                 case 3 :
+                    // if (buffer == null || buffer.length - pos < 2) { // Need 2 bytes
+                    //     resizeBuffer();
+                    // }
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                     break;
             }
         }
     }
\ No newline at end of file
