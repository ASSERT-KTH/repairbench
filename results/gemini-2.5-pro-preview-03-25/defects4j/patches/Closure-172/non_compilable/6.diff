diff --git a/tmp/936825ed-6826-42fb-b6a0-7a7ca3dbc02a_buggy.java b/tmp/7053e849-ad99-4ae1-9ea0-5b531475986c_fixed.java
index 7b89a27..bb857b0 100644
--- a/tmp/936825ed-6826-42fb-b6a0-7a7ca3dbc02a_buggy.java
+++ b/tmp/7053e849-ad99-4ae1-9ea0-5b531475986c_fixed.java
@@ -1,76 +1,140 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
+      // Handle assignments like MyConstructor.prototype = ...
+      // This addresses issue 1024 by distinguishing constructor prototypes
+      // from assignments to obj.prototype where obj is not a constructor.
       if (qName != null && qName.endsWith(".prototype")) {
+        if (n != null && n.isGetProp()) {
+            Node ownerNode = n.getFirstChild();
+            // Make sure ownerNode is not null, which might happen for detached nodes
+            if (ownerNode == null) {
+              return true; // Cannot determine owner, assume inferred
+            }
+            JSType ownerType = ownerNode.getJSType();
+            if (ownerType != null) {
+                ownerType = ownerType.restrictByNotNullOrUndefined();
+                // Check if owner is a constructor or interface type.
+                boolean ownerIsConstructorOrInterface = false;
+                if (ownerType.isFunctionType()) {
+                    FunctionType fnType = ownerType.toMaybeFunctionType();
+                    if (fnType != null && (fnType.isConstructor() || fnType.isInterface())) {
+                       ownerIsConstructorOrInterface = true;
+                    }
+                // Checking isNominalConstructorOrInterface handles built-in constructors like Object.
+                } else if (ownerType.isNominalConstructorOrInterface()) {
+                   FunctionType fnType = ownerType.toMaybeFunctionType();
+                   // Ensure it's actually the constructor function, not an instance type.
+                   // For example, 'Object' is a constructor, but an instance {Object} is not.
+                   if (fnType != null && fnType.isConstructor()) {
+                       ownerIsConstructorOrInterface = true;
+                   }
+                }
+
+                if (ownerIsConstructorOrInterface) {
+                    // It's MyConstructor.prototype or Object.prototype, treat as declared.
                     return false;
                 }
+            }
+            // Otherwise (e.g., owner is instance like {Object}, or unknown type),
+            // treat assignment as inferred. This handles issue 1024 where
+            // assignments like obj.prototype = {} should be inferred.
+            return true;
+        } else {
+           // If not a GETPROP (unlikely for x.prototype unless computed),
+           // conservatively treat as inferred.
+           return true;
+        }
+      }
 
+      // ---- Regular Inference Logic ----
+      // Based on JSDoc
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
+      // Special handling for function literals without JSDoc.
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
+        // Generally, function assignments are declarations unless in specific contexts.
         if (info != null) {
+          // Should have been caught above, but confirms not inferred.
           return false;
-        } else if (!scope.isDeclared(qName, false) &&
-            n.isUnscopedQualifiedName()) {
+        } else if (n != null && !scope.isDeclared(qName, false) &&
+                   // Make sure n isn't detached and has a parent.
+                   n.getParent() != null &&
+                   n.isUnscopedQualifiedName()) { // Check for simple qualified names like a.b.c
 
-          // Check if this is in a conditional block.
-          // Functions assigned in conditional blocks are inferred.
+          // Check if assigned inside a control structure (if, for, while etc.) -> inferred.
           for (Node current = n.getParent();
-               !(current.isScript() || current.isFunction());
+               // Check current != null as getParent() can return null.
+               current != null && !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
-          // Check if this is assigned in an inner scope.
-          // Functions assigned in inner scopes are inferred.
-          AstFunctionContents contents =
-              getFunctionAnalysisResults(scope.getRootNode());
-          if (contents == null ||
-              !contents.getEscapedQualifiedNames().contains(qName)) {
+          // Check if assigned in an inner scope and escapes -> inferred.
+          // Otherwise (global scope, or inner scope but doesn't escape) -> declared.
+          // Use NodeUtil to find scope root, as scope.getScope(n) might be too broad.
+          Node scopeRoot = NodeUtil.getEnclosingFunction(n);
+          // Check if the assignment occurs within a function scope (not global).
+          if (scopeRoot != null && scopeRoot.isFunction()) {
+              AstFunctionContents contents = getFunctionAnalysisResults(scopeRoot);
+              // If analysis is available and name is known to escape this scope -> inferred.
+              if (contents != null && contents.getEscapedQualifiedNames().contains(qName)) {
+                  return true;
+              } else {
+                  // Does not escape or analysis unavailable -> declared (local to this function).
                   return false;
               }
+          } else {
+            // In global scope (or scope analysis failed), treat as declared.
+            return false;
+          }
+        } else if (n != null && n.isName() && scope.isDeclared(qName, false)) {
+            // If it's a simple name re-assignment in the same scope, treat it as non-inferred.
+            // Example: function f() { var x = function() {}; x = function() {}; }
+            // The second assignment should not be inferred.
+            return false;
         }
       }
-      return inferred;
+      return inferred; // Return the final inferred status.
     }
\ No newline at end of file
