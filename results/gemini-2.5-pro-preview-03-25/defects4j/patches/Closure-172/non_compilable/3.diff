diff --git a/tmp/ffcc0eee-2aea-4259-b0c8-102ec99ee875_buggy.java b/tmp/bed8653d-8357-4a35-b094-8d0f4b76cd91_fixed.java
index 7b89a27..7fc091d 100644
--- a/tmp/ffcc0eee-2aea-4259-b0c8-102ec99ee875_buggy.java
+++ b/tmp/bed8653d-8357-4a35-b094-8d0f4b76cd91_fixed.java
@@ -1,76 +1,106 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
-      if (qName != null && qName.endsWith(".prototype")) {
+      // Check the owner node of the GETPROP.
+      // We assume that 'n' is the GETPROP node for prototype assignments.
+      if (qName != null && qName.endsWith(".prototype") && n.isGetProp()) {
+          Node ownerNode = n.getFirstChild();
+          if (ownerNode != null) {
+              JSType ownerType = ownerNode.getJSType();
+              // If the owner is specifically a constructor or interface type,
+              // then this assignment is defining its prototype, hence "declared".
+              if (ownerType != null && ownerType.isNominalConstructorOrInterface()) {
+                 // This is the defining site for the prototype, so it's declared.
                  return false;
+              } else {
+                 // Otherwise, it's just a property named "prototype" on some other type
+                 // (like a generic Object parameter, as in issue 1024).
+                 // Treat this assignment as inferred, allowing flexibility.
+                 return true;
+              }
+          }
+          // Fall through if ownerNode/ownerType is null, or n is not GETPROP.
+          // This case seems less likely for typical prototype assignments.
       }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
+          // If it has JSDoc, it's explicitly declared.
           return false;
-        } else if (!scope.isDeclared(qName, false) &&
-            n.isUnscopedQualifiedName()) {
+        } else if (n.isUnscopedQualifiedName() && !scope.isDeclared(qName, false)) {
+          // If it's an unqualified name or rooted in a name that is not locally
+          // defined, check if the assignment is in a conditional block or an inner scope.
+          // Those are inferred. Otherwise, this is likely the defining declaration.
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
-               !(current.isScript() || current.isFunction());
+               current != null && !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
+          // We check this by seeing if the name is escaped by the current function.
+          Scope functionScope = scope.getFunctionScope();
+          if (functionScope != null) {
             AstFunctionContents contents =
-              getFunctionAnalysisResults(scope.getRootNode());
-          if (contents == null ||
-              !contents.getEscapedQualifiedNames().contains(qName)) {
+                getFunctionAnalysisResults(functionScope.getRootNode());
+            if (contents != null &&
+                contents.getEscapedQualifiedNames().contains(qName)) {
+              return true;
+            }
+          }
+
+          // If none of the above conditions met (no JSDoc, not conditional, not inner scope),
+          // and it's the first time we see this function assigned to this qname,
+          // consider it a declaration.
           return false;
         }
       }
-      }
       return inferred;
     }
\ No newline at end of file
