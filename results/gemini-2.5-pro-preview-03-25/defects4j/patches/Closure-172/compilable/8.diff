diff --git a/tmp/e5e2f659-7666-4588-8012-688a22c4bdd4_buggy.java b/tmp/15127039-8aab-4c0a-8f24-4f2d7247e8cf_fixed.java
index 7b89a27..42ad521 100644
--- a/tmp/e5e2f659-7666-4588-8012-688a22c4bdd4_buggy.java
+++ b/tmp/15127039-8aab-4c0a-8f24-4f2d7247e8cf_fixed.java
@@ -1,76 +1,123 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
+      // However, assignments to the prototype property of variables
+      // that are not constructors/interfaces (like function parameters
+      // typed as {Object}) should be inferred. See b/5887044.
       if (qName != null && qName.endsWith(".prototype")) {
+          Node lhs = n.getFirstChild(); // Get LHS of assignment (e.g., a.prototype)
+          // Only consider it a declaration if the base (e.g., 'a') is a known
+          // constructor or interface.
+          boolean definitelyDeclaration = false;
+          if (lhs != null && lhs.isGetProp()) { // Ensure LHS is like base.prototype
+              Node base = lhs.getFirstChild();
+              if (base != null) { // Ensure base exists
+                  JSType baseType = base.getJSType();
+                  // If we don't know the type, or it's not a function type,
+                  // it's unlikely to be a constructor/interface declaration.
+                  if (baseType != null && baseType.isFunctionType()) {
+                      FunctionType fnType = baseType.toMaybeFunctionType();
+                      // Check if the base function type is explicitly a constructor or interface
+                      if (fnType != null && (fnType.isConstructor() || fnType.isInterface())) {
+                          definitelyDeclaration = true;
+                      }
+                  }
+              }
+          }
+          // If we determined it's definitely a prototype declaration on a Ctor/Interface, return false (declared)
+          if (definitelyDeclaration) {
               return false;
           }
+          // Otherwise (e.g., base is not Ctor/Interface, base type unknown, or LHS isn't simple base.prototype),
+          // let subsequent logic decide based on JSDoc, RHS value etc.
+      }
+
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
+        // Function literal assigned to a qualified name.
+
+        // Explore edge cases where FUNCTIONs should be inferred.
+        // 1) The coding convention suggests that FUNCTION properties should
+        //    always be declared with JSDoc. Check for JSDoc->declared.
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
+            // Make sure this isn't an inner function reference.
+            // We use isUnscopedQualifiedName to ignore functions that are part
+            // of an object literal: { V: function() {} }
+            // NOTE(nicksantos): This is smelly. Let's remove it.
+            // TODO(nicksantos): Maybe use scope.isLocal instead?
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
+          // This doesn't work very well with AstFunctionContents, because
+          // AstFunctionContents isn't specific to the scope where this qname is
+          // first defined. For example, if you have:
+          // var goog = {}; goog.foo = function() {}; function f() { goog.foo = 3; }
+          // Then the qname goog.foo will escape f, and this heuristic will
+          // treat the function literal assignment as declared, even though we
+          // don't want it to be.
+          // TODO(nicksantos): Fix this. This isInferrable qualifies names as
+          // escaping when they shouldn't.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
             return false;
           }
         }
       }
       return inferred;
     }
\ No newline at end of file
