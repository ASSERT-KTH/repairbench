diff --git a/tmp/c0596b91-6071-4d09-9522-0f5be3629d9e_buggy.java b/tmp/543aa599-4ecd-42fc-971f-105028593986_fixed.java
index 7b89a27..a45ad53 100644
--- a/tmp/c0596b91-6071-4d09-9522-0f5be3629d9e_buggy.java
+++ b/tmp/543aa599-4ecd-42fc-971f-105028593986_fixed.java
@@ -1,76 +1,115 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
-        return true;
+        return true; // Inferred if no type info for RHS
       }
 
-      // Prototypes of constructors and interfaces are always declared.
-      if (qName != null && qName.endsWith(".prototype")) {
-          return false;
-      }
-
-      boolean inferred = true;
+      // 1. Check JSDoc for explicit declaration info
       if (info != null) {
-        inferred = !(info.hasType()
+        boolean isDeclaredByJsDoc = info.hasType()
             || info.hasEnumParameterType()
-            || (isConstantSymbol(info, n) && valueType != null
-                && !valueType.isUnknownType())
-            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
+            // Note: A @const property with an unknown type is inferred.
+            || (isConstantSymbol(info, n) && valueType != null && !valueType.isUnknownType())
+            || FunctionTypeBuilder.isFunctionTypeDeclaration(info);
+        if (isDeclaredByJsDoc) {
+            return false; // Declared by JSDoc
+        }
+        // If JSDoc exists but doesn't declare it, it remains potentially inferred.
+        // We might still override below if it's Ctor.prototype.
+      }
+
+      // 2. Check for prototype assignment
+      if (qName != null && qName.endsWith(".prototype")) {
+          Node baseNode = null;
+          // Need the LHS of the assignment or the object in the GETPROP
+          Node nodeToCheck = n;
+          // If n is the ASSIGN node, check its LHS.
+          if (n.isAssign()) {
+              nodeToCheck = n.getFirstChild();
+          }
+
+          // Ensure the node represents a GETPROP '.prototype'
+          if (nodeToCheck != null && nodeToCheck.isGetProp() && "prototype".equals(nodeToCheck.getString())) {
+              baseNode = nodeToCheck.getFirstChild();
+          }
+
+          if (baseNode != null) {
+              JSType baseType = baseNode.getJSType();
+              if (baseType != null) {
+                   baseType = baseType.restrictByNotNullOrUndefined();
+                   // If the base IS a constructor or interface, it's declared.
+                   if (!baseType.isUnknownType() && !baseType.isAllType() &&
+                       (baseType.isConstructor() || baseType.isInterface())) {
+                        // Even if non-declaring JSDoc was present, this rule takes precedence.
+                        return false; // Declared
+                   } else {
+                       // If the base is NOT a constructor/interface (e.g. Object, Function, unknown),
+                       // then assignment to its 'prototype' property is INFERRED.
+                       return true; // Inferred because it's obj.prototype where obj isn't Ctor/Interface
+                   }
+              }
+          }
+          // If we couldn't determine base type, or it wasn't a '.prototype' GETPROP, fall through.
       }
 
-      if (inferred && rhsValue != null && rhsValue.isFunction()) {
-        if (info != null) {
-          return false;
-        } else if (!scope.isDeclared(qName, false) &&
-            n.isUnscopedQualifiedName()) {
+      // 3. Apply heuristics for function assignments (if not handled by prototype case, and no JSDoc info)
+      boolean inferred = true; // Default assumption if not declared by JSDoc or Ctor.prototype
+      if (info == null && rhsValue != null && rhsValue.isFunction()) {
+            // Check if this looks like the first declaration in the scope
+            // TODO(nicksantos): This isQualifiedName check is imprecise.
+            // We should move this into the typed scope creator.
+            if (!scope.isDeclared(qName, false) && n.isUnscopedQualifiedName()) {
 
-          // Check if this is in a conditional block.
                 // Functions assigned in conditional blocks are inferred.
                 for (Node current = n.getParent();
-               !(current.isScript() || current.isFunction());
+                     current != null && !(current.isScript() || current.isFunction());
                      current = current.getParent()) {
                    if (NodeUtil.isControlStructure(current)) {
-              return true;
+                     return true; // Inferred (conditional assignment)
                    }
                 }
 
-          // Check if this is assigned in an inner scope.
-          // Functions assigned in inner scopes are inferred.
-          AstFunctionContents contents =
-              getFunctionAnalysisResults(scope.getRootNode());
-          if (contents == null ||
-              !contents.getEscapedQualifiedNames().contains(qName)) {
-            return false;
+                // Functions assigned locally (not escaped) in the top level
+                // of a function/script are potentially declarations.
+                AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());
+                if (contents == null || !contents.getEscapedQualifiedNames().contains(qName)) {
+                    // Not escaped from root scope => treat as declared
+                    inferred = false; // Declared by function heuristic
                 }
+                // else: escaped, remains inferred=true
             }
+            // else: already declared or scoped name, remains inferred=true
+            // (Modifying an existing function is inferred)
       }
+
+      // 4. Final result
       return inferred;
     }
\ No newline at end of file
