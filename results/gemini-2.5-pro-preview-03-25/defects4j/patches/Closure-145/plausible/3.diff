diff --git a/tmp/54dee352-33cd-4778-a164-b2abeb5185ac_buggy.java b/tmp/729ea802-e3cb-45bb-8b32-475daa348256_fixed.java
index 57f69c5..82047b5 100644
--- a/tmp/54dee352-33cd-4778-a164-b2abeb5185ac_buggy.java
+++ b/tmp/729ea802-e3cb-45bb-8b32-475daa348256_fixed.java
@@ -1,12 +1,25 @@
   /**
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
+        // Check if the node itself is FUNCTION or DO
+        if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+            return true;
+        }
+        // Check if the node is a LABEL whose child is FUNCTION or DO
         // For labels with block children, we need to ensure that a
         // labeled FUNCTION or DO isn't generated when extraneous BLOCKs
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+        // are skipped. This is handled by only checking the direct child
+        // of the LABEL.
+        if (n.getType() == Token.LABEL) {
+            Node labeledStatement = n.getLastChild(); // The statement associated with the label
+            // Check if the labeled statement exists and is a FUNCTION or DO
+            if (labeledStatement != null &&
+                (labeledStatement.getType() == Token.FUNCTION || labeledStatement.getType() == Token.DO)) {
+                return true;
+            }
+        }
+        // Otherwise, it's not a FUNCTION or DO (or a label directly wrapping one)
+        return false;
   }
\ No newline at end of file
