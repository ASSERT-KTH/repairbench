diff --git a/tmp/7c8bf6d4-c4fa-49be-bb10-4d27d9ecb207_buggy.java b/tmp/e7c34f07-2b7c-4444-b83b-07159f3088da_fixed.java
index 57f69c5..2292d62 100644
--- a/tmp/7c8bf6d4-c4fa-49be-bb10-4d27d9ecb207_buggy.java
+++ b/tmp/e7c34f07-2b7c-4444-b83b-07159f3088da_fixed.java
@@ -1,12 +1,26 @@
   /**
-   * @return Whether the Node is a DO or FUNCTION (with or without
-   * labels).
+   * @return Whether the Node represents a DO or FUNCTION statement,
+   * potentially nested within a LABEL.
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    // Check if the node itself is FUNCTION or DO.
+    if (n.isFunction() || n.isDo()) {
+      return true;
+    }
+
+    // Check if the node is a LABEL whose statement is FUNCTION or DO.
+    // This is needed because structures like "if (cond) L: function f() {}"
+    // or "if (cond) L: do {} while(...)" require bracing for browser compatibility.
+    if (n.isLabel()) {
+      Node labeledStatement = n.getFirstChild();
+      // A LABEL node must have a child statement.
+      com.google.common.base.Preconditions.checkNotNull(labeledStatement, "Label node should have a child");
+      // Check the type of the statement associated with the label.
+      if (labeledStatement.isFunction() || labeledStatement.isDo()) {
+          return true;
+      }
+    }
+
+    // Otherwise, it's not a FUNCTION or DO, labeled or direct.
+    return false;
   }
\ No newline at end of file
