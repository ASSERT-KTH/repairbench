diff --git a/tmp/e35d3ad3-b966-446c-a25e-0cead8061355_buggy.java b/tmp/a107c4c7-ee50-430d-b7c7-87265f67decd_fixed.java
index 82bdfd4..a332eee 100644
--- a/tmp/e35d3ad3-b966-446c-a25e-0cead8061355_buggy.java
+++ b/tmp/a107c4c7-ee50-430d-b7c7-87265f67decd_fixed.java
@@ -1,51 +1,65 @@
+import java.math.BigDecimal;
+
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
      *
+     * <p>Special handling is implemented for {@link BigDecimal} objects.
+     * Two {@code BigDecimal} objects are considered equal if they are numerically equal
+     * (using {@code compareTo == 0}) rather than strictly equal (using {@code equals}).</p>
+     *
      * @param lhs  the left hand object
      * @param rhs  the right hand object
      * @return EqualsBuilder - used to chain calls.
      */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
-        Class lhsClass = lhs.getClass();
+        // Using generic type for Class
+        Class<?> lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
-                // The simple case, not an array, just test the element
+            // Special handling for BigDecimal using compareTo to check for numerical equality
+            // This behavior is required by testBigDecimal (LANG-393)
+            if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {
+                isEquals = (((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0);
+            } else {
+                // The simple case, not an array, just test the element using equals
                 isEquals = lhs.equals(rhs);
-        } else if (lhs.getClass() != rhs.getClass()) {
-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
+            }
+        } else if (lhsClass != rhs.getClass()) {
+            // Here when we compare arrays of different types or dimensions,
+            // for example: a boolean[][] to a boolean[] or String[] to Long[]
             this.setEquals(false);
         }
         // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
+        // This handles multi dimensional arrays of the same depth and type
         else if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
         } else if (lhs instanceof short[]) {
             append((short[]) lhs, (short[]) rhs);
         } else if (lhs instanceof char[]) {
             append((char[]) lhs, (char[]) rhs);
         } else if (lhs instanceof byte[]) {
             append((byte[]) lhs, (byte[]) rhs);
         } else if (lhs instanceof double[]) {
             append((double[]) lhs, (double[]) rhs);
         } else if (lhs instanceof float[]) {
             append((float[]) lhs, (float[]) rhs);
         } else if (lhs instanceof boolean[]) {
             append((boolean[]) lhs, (boolean[]) rhs);
         } else {
             // Not an array of primitives
             append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }
\ No newline at end of file
