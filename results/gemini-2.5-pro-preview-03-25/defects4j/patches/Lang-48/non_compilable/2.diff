diff --git a/tmp/77b3dc95-fa2b-4a26-a6d1-7f8bef8ffc1f_buggy.java b/tmp/d5796e12-2d1a-47a0-b2ac-1e4ccd2047d2_fixed.java
index 82bdfd4..9a1d538 100644
--- a/tmp/77b3dc95-fa2b-4a26-a6d1-7f8bef8ffc1f_buggy.java
+++ b/tmp/d5796e12-2d1a-47a0-b2ac-1e4ccd2047d2_fixed.java
@@ -1,51 +1,66 @@
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
      *
      * @param lhs  the left hand object
      * @param rhs  the right hand object
      * @return EqualsBuilder - used to chain calls.
      */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
-        Class lhsClass = lhs.getClass();
+        // Using Class<?> is preferred over raw Class type
+        Class<?> lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
                 // The simple case, not an array, just test the element
-                isEquals = lhs.equals(rhs);
-        } else if (lhs.getClass() != rhs.getClass()) {
+                // FIX: Ensure isEquals is only ever potentially set to false,
+                // respecting the current state of isEquals. The initial check
+                // 'if (isEquals == false)' ensures this block only runs if
+                // isEquals is currently true. If lhs.equals(rhs) is false,
+                // set the state to false. If it's true, the state remains true.
+                if (!lhs.equals(rhs)) {
+                    this.setEquals(false);
+                }
+        } else {
+            // lhs is an array. Check rhs is an array of the same type.
+            // (Note: A check like '!rhs.getClass().isArray()' might be redundant
+            // if 'lhs.getClass() != rhs.getClass()' handles it, but can be clearer).
+            if (lhs.getClass() != rhs.getClass()) {
                 // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]
+                // or an array to a non-array (if rhs wasn't null but classes differ)
                 this.setEquals(false);
             }
             // 'Switch' on type of array, to dispatch to the correct handler
             // This handles multi dimensional arrays of the same depth
+            // Only executes if lhs is an array AND rhs is an array of the same type.
             else if (lhs instanceof long[]) {
                 append((long[]) lhs, (long[]) rhs);
             } else if (lhs instanceof int[]) {
                 append((int[]) lhs, (int[]) rhs);
             } else if (lhs instanceof short[]) {
                 append((short[]) lhs, (short[]) rhs);
             } else if (lhs instanceof char[]) {
                 append((char[]) lhs, (char[]) rhs);
             } else if (lhs instanceof byte[]) {
                 append((byte[]) lhs, (byte[]) rhs);
             } else if (lhs instanceof double[]) {
                 append((double[]) lhs, (double[]) rhs);
             } else if (lhs instanceof float[]) {
                 append((float[]) lhs, (float[]) rhs);
             } else if (lhs instanceof boolean[]) {
                 append((boolean[]) lhs, (boolean[]) rhs);
             } else {
-            // Not an array of primitives
+                // Not an array of primitives, must be Object[]
                 append((Object[]) lhs, (Object[]) rhs);
             }
+        }
         return this;
     }
\ No newline at end of file
