diff --git a/tmp/b00d5c79-2497-4799-8913-01b6f514408d_buggy.java b/tmp/7ff73aa6-fb17-4617-a0bf-eebc2505eb4f_fixed.java
index 82bdfd4..247a7bf 100644
--- a/tmp/b00d5c79-2497-4799-8913-01b6f514408d_buggy.java
+++ b/tmp/7ff73aa6-fb17-4617-a0bf-eebc2505eb4f_fixed.java
@@ -1,51 +1,87 @@
+import java.math.BigDecimal;
+import java.util.Arrays;
+
+// Assuming EqualsBuilder class structure as context
+// @SuppressWarnings("unused") // Assuming methods like setEquals, append overloads exist
+// class EqualsBuilder {
+//    private boolean isEquals = true;
+//    protected void setEquals(boolean isEquals) { this.isEquals = isEquals; }
+//    public boolean isEquals() { return this.isEquals; }
+//    // Dummy overloads for compilation context
+//    public EqualsBuilder append(long[] lhs, long[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }
+//    public EqualsBuilder append(int[] lhs, int[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }
+//    public EqualsBuilder append(short[] lhs, short[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }
+//    public EqualsBuilder append(char[] lhs, char[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }
+//    public EqualsBuilder append(byte[] lhs, byte[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }
+//    public EqualsBuilder append(double[] lhs, double[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }
+//    public EqualsBuilder append(float[] lhs, float[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }
+//    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }
+//    public EqualsBuilder append(Object[] lhs, Object[] rhs) {
+//         if (lhs == rhs) return this;
+//         if (lhs == null || rhs == null) { setEquals(false); return this; }
+//         if (lhs.length != rhs.length) { setEquals(false); return this; }
+//         for (int i = 0; i < lhs.length && isEquals; ++i) {
+//             append(lhs[i], rhs[i]);
+//         }
+//         return this;
+//    }
+
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
      *
      * @param lhs  the left hand object
      * @param rhs  the right hand object
      * @return EqualsBuilder - used to chain calls.
      */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
-        Class lhsClass = lhs.getClass();
+        Class<?> lhsClass = lhs.getClass(); // Use generic type
         if (!lhsClass.isArray()) {
-                // The simple case, not an array, just test the element
+                // The simple case, not an array.
+                // Special handling for BigDecimal required by test LANG-393,
+                // which expects compareTo semantics for BigDecimals.
+                if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {
+                    isEquals = (((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0);
+                } else {
+                    // Default behavior: use equals() for non-array objects.
                     isEquals = lhs.equals(rhs);
+                }
         } else if (lhs.getClass() != rhs.getClass()) {
             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]
             this.setEquals(false);
         }
         // 'Switch' on type of array, to dispatch to the correct handler
         // This handles multi dimensional arrays of the same depth
         else if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
         } else if (lhs instanceof short[]) {
             append((short[]) lhs, (short[]) rhs);
         } else if (lhs instanceof char[]) {
             append((char[]) lhs, (char[]) rhs);
         } else if (lhs instanceof byte[]) {
             append((byte[]) lhs, (byte[]) rhs);
         } else if (lhs instanceof double[]) {
             append((double[]) lhs, (double[]) rhs);
         } else if (lhs instanceof float[]) {
             append((float[]) lhs, (float[]) rhs);
         } else if (lhs instanceof boolean[]) {
             append((boolean[]) lhs, (boolean[]) rhs);
         } else {
             // Not an array of primitives
             append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }
+// } // End of assumed EqualsBuilder class structure
\ No newline at end of file
