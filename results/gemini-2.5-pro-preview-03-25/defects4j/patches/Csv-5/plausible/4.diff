diff --git a/tmp/1529c052-7001-4415-976d-c5e1120d78fe_buggy.java b/tmp/1b823b23-94a6-4866-93b1-2a3a6d961cfd_fixed.java
index d2a3c80..62d22da 100644
--- a/tmp/1529c052-7001-4415-976d-c5e1120d78fe_buggy.java
+++ b/tmp/1b823b23-94a6-4866-93b1-2a3a6d961cfd_fixed.java
@@ -1,11 +1,25 @@
     /**
      * Outputs the record separator.
      *
      * @throws IOException
      *             If an I/O error occurs
      */
     public void println() throws IOException {
         final String recordSeparator = format.getRecordSeparator();
+        // Simulate the behavior of PrintWriter.println() which uses the system line separator.
+        // However, CSV printers should generally use CRLF, or the configured separator.
+        if (recordSeparator == null) {
+            // As per RFC 4180, the default record separator should be CRLF
+            // Using Constants.CRLF assuming it's defined as "\r\n" in the context.
+            // If Constants class is not available or CRLF is not defined, use "\r\n" directly.
+            // Example context: import org.apache.commons.csv.Constants;
+            // If Constants.CRLF is not accessible, replace with "\r\n".
+             // Let's assume Constants.CRLF = "\r\n" based on common library patterns.
+             // If the actual constant isn't available, "\r\n" should be used directly.
+             // For the fix, assuming Constants.CRLF is "\r\n"
+            out.append(Constants.CRLF); 
+        } else {
             out.append(recordSeparator);
+        }
         newRecord = true;
     }
\ No newline at end of file
