diff --git a/tmp/281e9ee1-6110-40dd-8965-4fa8f9fda33f_buggy.java b/tmp/7ddb0816-d4fe-4ce3-aca1-5b2e2b427d63_fixed.java
index 0eef537..17a4d61 100644
--- a/tmp/281e9ee1-6110-40dd-8965-4fa8f9fda33f_buggy.java
+++ b/tmp/7ddb0816-d4fe-4ce3-aca1-5b2e2b427d63_fixed.java
@@ -1,74 +1,90 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = matrix.getData(); // Represents L^T in the end, computed in place
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check the matrix symmetry
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lIJ = lI[j]; // A[i][j]
+                final double lJI = lJ[i]; // A[j][i]
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
+                    // Matrix is not symmetric enough relative to the threshold
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // Do not zero out elements (lJ[i] = 0) here.
+                // The algorithm computes L^T in the upper triangle in place.
+                // The lower triangle elements (lJ[i]) are needed for intermediate calculations
+                // implicitly or explicitly depending on the exact algorithm variant.
            }
         }
 
-        // transform the matrix
+        // Transform the matrix to L^T in place (upper triangle)
+        // This version modifies the input matrix data directly.
         for (int i = 0; i < order; ++i) {
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // Row i
 
-            // check diagonal element
+            // Calculate the diagonal element L^T[i][i]
+            // First, update A[i][i] to A[i][i] - sum(L^T[k][i]^2 for k < i)
+            // This update happens implicitly via the inner loop calculations in previous iterations (p=i case).
+            // So, ltI[i] already contains the value A[i][i] - sum(L^T[k][i]^2 for k < i).
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Check for positive definiteness: diagonal element must be strictly positive
+            // This check must happen *before* taking the square root.
+            if (ltI[i] <= absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
+            ltI[i] = Math.sqrt(ltI[i]); // Calculate L^T[i][i]
+            final double inverse = 1.0 / ltI[i]; // Inverse of L^T[i][i] for efficiency
+
+            // Calculate the elements L^T[i][q] for q > i (rest of row i)
+            // and update the Schur complement (lower right submatrix A[i+1:n, i+1:n])
+            for (int q = order - 1; q > i; --q) { // Iterate over columns q to the right of i (decreasing index)
+                // Calculate L^T[i][q] = (A[i][q] - sum(L^T[k][i] * L^T[k][q] for k < i)) / L^T[i][i]
+                // The value (A[i][q] - sum(...)) is already stored in ltI[q] due to previous updates
+                ltI[q] *= inverse; // Compute L^T[i][q]
+
+                // Update the submatrix A[q:n, q:n] by subtracting the outer product L^T[i][q:n]^T * L^T[i][q:n]
+                // Specifically, update A[r][c] -= L^T[i][r] * L^T[i][c] for r >= q, c >= r
+                final double[] ltQ = lTData[q]; // Row q (where q > i)
+                for (int p = q; p < order; ++p) { // Iterate over columns p >= q
+                    // Update A[q][p] using L^T[i][q] and L^T[i][p]
+                    // L^T[i][q] is ltI[q] (just computed)
+                    // L^T[i][p] is ltI[p] (computed in a previous step of this q-loop when q was p, or already available if p > q)
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
