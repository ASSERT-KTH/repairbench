diff --git a/tmp/6e5372e3-c53d-4de7-882a-3292bc2d3c6a_buggy.java b/tmp/3f3585d3-d193-478f-9fe4-5a9468e51f8b_fixed.java
index 0eef537..da8803d 100644
--- a/tmp/6e5372e3-c53d-4de7-882a-3292bc2d3c6a_buggy.java
+++ b/tmp/3f3585d3-d193-478f-9fe4-5a9468e51f8b_fixed.java
@@ -1,74 +1,81 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = matrix.getData(); // Use a copy to avoid modifying the original matrix
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // check the matrix symmetry
         for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            final double[] rowI = lTData[i];
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double[] rowJ = lTData[j];
+                final double mij = rowI[j];
+                final double mji = rowJ[i];
                 final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
+                    relativeSymmetryThreshold * Math.max(Math.abs(mij), Math.abs(mji));
+                if (Math.abs(mij - mji) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // Do not zero out lower triangle elements here, the algorithm below uses them if needed,
+                // or computes L^T in the upper triangle.
            }
         }
 
-        // transform the matrix
+        // Perform Cholesky decomposition (calculating L^T in place in the upper triangle)
         for (int i = 0; i < order; ++i) {
+            final double[] ltI = lTData[i]; // Row i of matrix being transformed (stores L^T)
 
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
+            // Calculate diagonal element L^T[i][i]
+            double d = ltI[i]; // Element A[i][i] initially
+            for (int k = 0; k < i; ++k) {
+                // In L^T, the elements below diagonal are not used/calculated by standard Cholesky for L^T.
+                // We need L^T[k][i] which is element (k,i) in lTData.
+                double lki = lTData[k][i];
+                d -= lki * lki;
+            }
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Check for positive definiteness: diagonal elements must be positive
+            // The check is done here, using the value d = L^T[i][i]^2
+            if (d <= absolutePositivityThreshold) {
+                 throw new NotPositiveDefiniteMatrixException();
+            }
+            ltI[i] = Math.sqrt(d); // Calculate L^T[i][i]
+            final double lTii = ltI[i];
+            final double inverse = 1.0 / lTii;
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+            // Calculate elements L^T[i][j] for j > i in row i
+            for (int j = i + 1; j < order; ++j) {
+                double sum = lTData[i][j]; // Element A[i][j] initially
+                for (int k = 0; k < i; ++k) {
+                     // We need L^T[k][i] (lTData[k][i]) and L^T[k][j] (lTData[k][j])
+                     sum -= lTData[k][i] * lTData[k][j];
                 }
+                ltI[j] = sum * inverse; // L^T[i][j] = sum / L^T[i][i]
             }
-
         }
-
     }
\ No newline at end of file
