diff --git a/tmp/b8895704-cbab-4c67-b0f0-4765338584b4_buggy.java b/tmp/a68abbb5-1031-4e8c-b421-18e34221b93e_fixed.java
index 0eef537..c05f05a 100644
--- a/tmp/b8895704-cbab-4c67-b0f0-4765338584b4_buggy.java
+++ b/tmp/a68abbb5-1031-4e8c-b421-18e34221b93e_fixed.java
@@ -1,74 +1,92 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = matrix.getData(); // Data is modified in place
         cachedL  = null;
         cachedLT = null;
 
         // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
 
             final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
+            // check that the diagonal element is positive
+            if (lTData[i][i] <= absolutePositivityThreshold) { // Changed < to <= for robustness
                 throw new NotPositiveDefiniteMatrixException();
             }
-            // check off-diagonal elements (and reset them to 0)
+
+            // check off-diagonal elements (and reset the lower triangle elements to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                lJ[i] = 0.0; // Zero out lower triangle entry (lTData will store L^T)
            }
         }
 
-        // transform the matrix
+        // transform the matrix into L^T
         for (int i = 0; i < order; ++i) {
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // Row i of L^T
 
-            // check diagonal element
+            // Calculate the diagonal element L_ii = sqrt(A_ii - sum_{k=0}^{i-1} L_ik^2)
+            // The value ltI[i] at this point holds the argument of the square root: A'_ii = A_ii - sum_{k=0}^{i-1} L_ik^2
+            final double diagonalElement = ltI[i];
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Check for positive definiteness: diagonal element must be positive.
+            if (diagonalElement <= absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
-            for (int q = order - 1; q > i; --q) {
+            // Compute L_ii = sqrt(A'_ii) and store it
+            ltI[i] = Math.sqrt(diagonalElement);
+            final double inverse = 1.0 / ltI[i]; // Inverse of L_ii
+
+            // Compute the non-diagonal elements LT_iq for q > i in the current row
+            // and update the remaining lower-right submatrix A'
+            for (int q = i + 1; q < order; ++q) { // Corrected loop bounds: q > i -> q = i+1 to order-1
+                // Compute LT_iq = A'_iq / L_ii
+                // A'_iq is the value currently at ltI[q]
                 ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
+                final double[] ltQ = lTData[q]; // Row q of L^T
+                // Update the lower-right submatrix element A'_qp using outer product:
+                // A''_qp = A'_qp - L_qi * L_pi = A'_qp - LT_iq * LT_ip
                 for (int p = q; p < order; ++p) {
+                    // ltQ[p] is A'_qp
+                    // ltI[q] is LT_iq (calculated above)
+                    // ltI[p] is LT_ip (calculated in previous iterations of 'q' or is L_ii if p=i - which isn't the case here as p>=q>i)
+                    // The element ltI[p] should contain the value LT_ip computed previously.
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
