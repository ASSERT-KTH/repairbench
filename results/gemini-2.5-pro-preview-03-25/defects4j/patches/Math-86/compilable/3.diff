diff --git a/tmp/0dc6ff73-1c0b-4f99-aa74-3e728b731ac8_buggy.java b/tmp/aee0b339-c34e-46e3-8767-3408ef4329d8_fixed.java
index 0eef537..5e6995f 100644
--- a/tmp/0dc6ff73-1c0b-4f99-aa74-3e728b731ac8_buggy.java
+++ b/tmp/aee0b339-c34e-46e3-8767-3408ef4329d8_fixed.java
@@ -1,74 +1,88 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = matrix.getData(); // Modifies the input matrix data array directly
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // check the matrix for symmetry
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // Removed premature positivity check from here
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lIJ = lI[j]; // Upper triangle element A[i][j]
+                final double lJI = lJ[i]; // Lower triangle element A[j][i]
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // Removed unnecessary modification: lJ[i] = 0;
            }
         }
 
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
+        // transform the matrix using Cholesky decomposition (L^T * L variant, storing L^T in upper triangle)
+        // This implements the outer product / bordering method in place.
+        for (int i = 0; i < order; ++i) { // Process row/column i
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // Row i of the matrix being transformed
 
-            // check diagonal element
+            // Calculate the value for the diagonal element L^T[i,i]^2
+            // The value ltI[i] at this point should contain A[i,i] - sum_{k=0}^{i-1} (L^T[k,i])^2
+            // due to the update step performed in previous iterations (k < i).
+            final double d = ltI[i];
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
-
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
-                }
+            // Check diagonal element for positivity *before* taking the square root
+            if (d < absolutePositivityThreshold) {
+                // The matrix is not positive definite because a pivot element is too small
+                throw new NotPositiveDefiniteMatrixException();
             }
 
+            ltI[i] = Math.sqrt(d); // Calculate L^T[i,i]
+            final double inverse = 1.0 / ltI[i]; // Cache 1.0 / L^T[i,i]
+
+            // Calculate the remaining elements of row i in L^T: L^T[i,k] for k > i
+            for (int k = i + 1; k < order; ++k) {
+                // ltI[k] contains A_updated[i,k] = A_orig[i,k] - sum_{l=0}^{i-1} L^T[l,i] * L^T[l,k]
+                ltI[k] *= inverse; // Compute L^T[i,k] = A_updated[i,k] / L^T[i,i]
             }
 
+            // Update the lower right submatrix A[j,k] -= L^T[i,j] * L^T[i,k] for j > i, k >= j
+            // This prepares the matrix elements for the next iteration (i+1) by subtracting the outer product
+            // of the i-th column of L^T (which corresponds to the i-th row ltI of the matrix L^T).
+            for (int j = i + 1; j < order; ++j) {
+                final double LiJ = ltI[j]; // L^T[i,j], computed in the loop above
+                final double[] ltJ = lTData[j]; // Row j
+                // Update only the upper triangle elements A[j,k] where k >= j
+                for (int k = j; k < order; ++k) {
+                    // Subtract the outer product term: L^T[i,j] * L^T[i,k]
+                    ltJ[k] -= LiJ * ltI[k]; // ltI[k] is L^T[i,k], computed above
+                }
+            }
+        } // End of outer loop 'i'
     }
\ No newline at end of file
