diff --git a/tmp/1e0393b5-b92c-46a3-a1ad-48f3f8e0b93c_buggy.java b/tmp/db46773e-2d49-41d8-934d-cfe328377298_fixed.java
index 0eef537..d1053e8 100644
--- a/tmp/1e0393b5-b92c-46a3-a1ad-48f3f8e0b93c_buggy.java
+++ b/tmp/db46773e-2d49-41d8-934d-cfe328377298_fixed.java
@@ -1,74 +1,85 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // check the matrix symmetry and clear the lower triangle
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // check off-diagonal elements symmetry
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // Clear the lower triangle element, the algorithm operates on the upper triangle
+                lJ[i] = 0.0;
            }
+           // The initial check for diagonal element positivity here was removed,
+           // as it's insufficient. The check must be done during the transformation.
         }
 
-        // transform the matrix
+        // transform the matrix into its L^T Cholesky decomposition
         for (int i = 0; i < order; ++i) {
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // Row i of the matrix (transforming to L^T row i)
 
-            // check diagonal element
+            // check diagonal element positivity: A[i][i] - sum_{k=0}^{i-1} L[i][k]^2 > 0
+            // The value ltI[i] at this point holds the value which must be positive
+            final double diagonalElement = ltI[i];
+            if (diagonalElement < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
+
+            // Compute L^T[i][i] = sqrt( A[i][i] - sum_{k=0}^{i-1} L^T[k][i]^2 )
+            ltI[i] = Math.sqrt(diagonalElement);
+            final double inverse = 1.0 / ltI[i]; // Cache 1.0 / L^T[i][i]
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Compute the elements L^T[i][j] for j > i in the i-th row
+            // and update the lower right submatrix A[j][k] -= L^T[i][j] * L^T[i][k]
+            for (int q = order - 1; q > i; --q) { // q iterates through columns j > i
+                // Compute L^T[i][q] = (A[i][q] - sum_{k=0}^{i-1} L^T[k][i] * L^T[k][q]) / L^T[i][i]
+                // The value A[i][q] - sum... is already stored in ltI[q] due to previous updates
+                ltI[q] *= inverse; // Compute and store L^T[i][q]
+                final double ltIQ = ltI[q]; // Cache L^T[i][q]
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                // Update the submatrix A[q][p] for p >= q
+                // A[q][p] -= L^T[i][q] * L^T[i][p]
+                final double[] ltQ = lTData[q]; // Row q
+                for (int p = q; p < order; ++p) { // p iterates through columns k >= q
+                    ltQ[p] -= ltIQ * ltI[p]; // Update A[q][p] using computed L^T elements
                 }
             }
-
         }
-
     }
\ No newline at end of file
