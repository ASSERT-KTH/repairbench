diff --git a/tmp/baf162ad-c6a0-4a0c-baab-04fb522abf6a_buggy.java b/tmp/be15a394-00d9-40d2-a09d-62f8c4d2d60b_fixed.java
index 0eef537..f1a20cb 100644
--- a/tmp/baf162ad-c6a0-4a0c-baab-04fb522abf6a_buggy.java
+++ b/tmp/be15a394-00d9-40d2-a09d-62f8c4d2d60b_fixed.java
@@ -1,74 +1,92 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
+        // Use getData() to get a potentially modifiable reference or copy.
+        // The Cholesky decomposition modifies the matrix data in place to store L^T.
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check matrix symmetry and zero out lower triangular part (below diagonal).
+        // The decomposition algorithm relies on the upper triangular part of the matrix.
         for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            final double[] lI = lTData[i]; // Row i
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double[] lJ = lTData[j]; // Row j
+                final double lIJ = lI[j];      // A[i][j] from upper triangle
+                final double lJI = lJ[i];      // A[j][i] from lower triangle
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
+                    // Matrix is not symmetric enough relative to its elements
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                 // Zero the element below the diagonal after the symmetry check.
+                 // The algorithm will compute L^T in the upper triangle.
+                 lJ[i] = 0.0;
             }
         }
 
-        // transform the matrix
+        // Perform the Cholesky decomposition (L^T in the upper triangle) using the outer product method.
+        // Algorithm: For each row i, compute U_ii and U_ij (j > i), then update the trailing submatrix.
         for (int i = 0; i < order; ++i) {
+            final double[] ltI = lTData[i]; // Row i of the matrix being transformed
 
-            final double[] ltI = lTData[i];
+            // Calculate the value that will become the diagonal element U_ii.
+            // At this point, ltI[i] holds A_ii - sum_{k=0}^{i-1} U_ki^2 due to previous updates.
+            final double d = ltI[i];
 
-            // check diagonal element
+            // Check for positive definiteness: the diagonal element must be strictly positive.
+            // Use <= threshold to ensure strict positivity.
+            if (d <= absolutePositivityThreshold) {
+                // The matrix is not positive definite.
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Calculate U_ii = sqrt(d) and store it back into the matrix.
+            ltI[i] = Math.sqrt(d);
+            final double inverse = 1.0 / ltI[i]; // Precompute 1.0 / U_ii
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
+            // Calculate the remaining elements of row i: U_ij = A'_ij / U_ii for j > i.
+            // At this point, ltI[j] holds A'_ij = A_ij - sum_{k=0}^{i-1} U_ki * U_kj.
+            for (int j = i + 1; j < order; ++j) {
+                ltI[j] *= inverse; // Compute U_ij = A'_ij / U_ii and store it back in ltI[j]
+            }
+
+            // Update the trailing submatrix A'_{qp} = A'_{qp} - U_iq * U_ip for q > i, p >= q.
+            // This step subtracts the outer product of the computed part of row i from the
+            // remaining lower-right submatrix.
+            for (int q = i + 1; q < order; ++q) {
+                final double[] ltQ = lTData[q]; // Row q to be updated
+                final double u_iq = ltI[q];     // U_iq (already computed and stored in ltI[q])
                 for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                    final double u_ip = ltI[p]; // U_ip (already computed and stored in ltI[p])
+                    ltQ[p] -= u_iq * u_ip;      // Update element A'[q][p]
                 }
             }
-
         }
-
     }
\ No newline at end of file
