diff --git a/tmp/a20a0752-e4ce-4cad-9571-ceac1d05e369_buggy.java b/tmp/c3de4c3b-938a-4217-ba8c-eebaa7a52709_fixed.java
index 0eef537..2634b02 100644
--- a/tmp/a20a0752-e4ce-4cad-9571-ceac1d05e369_buggy.java
+++ b/tmp/c3de4c3b-938a-4217-ba8c-eebaa7a52709_fixed.java
@@ -1,74 +1,87 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = matrix.getData(); // Use getData to access internal array, assumes modification is allowed or getData returns a copy.
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // check the matrix symmetry and initialize the lower triangle for L^T storage
         for (int i = 0; i < order; ++i) {
+            final double[] lI = lTData[i]; // Row i
 
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // Check symmetry (comparing A[i][j] with A[j][i])
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double[] lJ = lTData[j]; // Row j
+                final double lIJ = lI[j];      // A[i][j]
+                final double lJI = lJ[i];      // A[j][i]
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // Zero the lower triangle part, as we work with L^T in the upper triangle
+                lJ[i] = 0.0;
            }
         }
 
-        // transform the matrix
+        // transform the matrix in-place to store L^T in the upper triangle
         for (int i = 0; i < order; ++i) {
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // Row i of the matrix being transformed
 
-            // check diagonal element
+            // Calculate the diagonal element L^T[i][i] (U_ii)
+            // This requires the value A[i][i] - sum_{k=0}^{i-1} (L^T[k][i])^2
+            // which is the value currently stored in ltI[i] after previous updates.
+            final double diagonalElement = ltI[i];
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Check for positive definiteness: diagonal element must be positive
+            if (diagonalElement < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
+            // Calculate L^T[i][i] = sqrt(diagonalElement)
+            ltI[i] = Math.sqrt(diagonalElement);
+            final double inverse = 1.0 / ltI[i]; // 1.0 / L^T[i][i]
+
+            // Calculate the elements L^T[i][q] for q > i
+            // And update the trailing submatrix A[q][p] -= L^T[i][q] * L^T[i][p]
             for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
+                // Calculate L^T[i][q] = (A[i][q] - sum_{k=0}^{i-1} L^T[k][i] * L^T[k][q]) / L^T[i][i]
+                // The numerator is the value currently stored in ltI[q]
+                ltI[q] *= inverse; // Now ltI[q] holds L^T[i][q]
+                final double L_T_iq = ltI[q]; // L^T[i][q]
+
+                final double[] ltQ = lTData[q]; // Row q
+                // Update A[q][p] for p >= q using the calculated L^T[i][q] and L^T[i][p]
+                // Note: L^T[i][p] is stored in ltI[p] (calculated in previous steps of this q-loop or current step if p=q)
                 for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                    // A'[q][p] = A[q][p] - L^T[i][q] * L^T[i][p]
+                    ltQ[p] -= L_T_iq * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
