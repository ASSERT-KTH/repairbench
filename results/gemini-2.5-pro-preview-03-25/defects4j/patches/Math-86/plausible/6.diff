diff --git a/tmp/39496caa-c703-4d14-931b-c7539dff3166_buggy.java b/tmp/bd624582-9e3b-4c3c-a78a-87be4d2f0e33_fixed.java
index 0eef537..33c9627 100644
--- a/tmp/39496caa-c703-4d14-931b-c7539dff3166_buggy.java
+++ b/tmp/bd624582-9e3b-4c3c-a78a-87be4d2f0e33_fixed.java
@@ -1,74 +1,73 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // check the matrix symmetry and zero out lower triangular part
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                lJ[i] = 0.0; // Zero out the lower triangle as we work on L^T
            }
         }
 
         // transform the matrix
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
             // check diagonal element
+            // The diagonal element is A[i][i] minus the sum of squares of elements
+            // in columns k < i in row i of L^T, which were computed in previous iterations.
+            // This value must be positive for positive definite matrices.
+            if (ltI[i] < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
-            ltI[i] = Math.sqrt(ltI[i]);
+            ltI[i] = Math.sqrt(ltI[i]); // Compute L^T[i][i]
             final double inverse = 1.0 / ltI[i];
 
+            // Update the remaining part of the matrix
             for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
+                ltI[q] *= inverse; // Compute L^T[i][q] = A[i][q] / L^T[i][i] (A[i][q] is updated)
+                final double[] ltQ = lTData[q]; // Row q
                 for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                    ltQ[p] -= ltI[q] * ltI[p]; // Update A[q][p] = A[q][p] - L^T[i][q] * L^T[i][p]
                 }
             }
-
         }
-
     }
\ No newline at end of file
