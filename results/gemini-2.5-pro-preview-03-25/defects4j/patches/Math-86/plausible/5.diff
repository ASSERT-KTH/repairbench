diff --git a/tmp/87fac30f-7c91-4d25-8fcc-242b2c6a25ee_buggy.java b/tmp/e9538848-3a63-49ba-8d5b-381e38b3a268_fixed.java
index 0eef537..67e8f6e 100644
--- a/tmp/87fac30f-7c91-4d25-8fcc-242b2c6a25ee_buggy.java
+++ b/tmp/e9538848-3a63-49ba-8d5b-381e38b3a268_fixed.java
@@ -1,74 +1,78 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // check the matrix symmetry and initialize the lower triangle (below diagonal) to 0
+        // This loop assumes the decomposition will compute L^T in the upper triangle in-place.
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
+                // Store 0 in the lower triangle part, as we work with L^T in the upper triangle
                 lJ[i] = 0;
            }
         }
 
         // transform the matrix
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
-            // check diagonal element
+            // check diagonal element (after updates from previous iterations)
+            // This is the value a_ii - sum_{k=0}^{i-1} (L^T_{ki})^2 which must be positive
+            if (ltI[i] <= absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
-            ltI[i] = Math.sqrt(ltI[i]);
+            ltI[i] = Math.sqrt(ltI[i]); // Calculate L^T_{ii}
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
+            // Calculate the rest of the i-th row of L^T and update the trailing submatrix
+            for (int q = order - 1; q > i; --q) { // Work on columns j > i (stored in L^T as (i, q))
+                ltI[q] *= inverse; // Compute L^T_{iq} = (a_{iq} - sum) / L^T_{ii}
+                                   // (Assuming ltI[q] contains the updated a_{iq} - sum)
+
+                final double[] ltQ = lTData[q]; // Get row q (where q > i)
+                // Update the lower right submatrix A_{qp} = A_{qp} - L^T_{iq} * L^T_{ip}
+                // for p >= q > i
                 for (int p = q; p < order; ++p) {
+                    // Note: ltI[p] is L^T_{ip} which has been computed in this loop or previous iterations of i
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
