diff --git a/tmp/7fbdc03c-faa4-4ca4-b03f-60a6984e2957_buggy.java b/tmp/bc55bc80-9870-4a53-bdf2-3a27658654cf_fixed.java
index 0eef537..339833f 100644
--- a/tmp/7fbdc03c-faa4-4ca4-b03f-60a6984e2957_buggy.java
+++ b/tmp/bc55bc80-9870-4a53-bdf2-3a27658654cf_fixed.java
@@ -1,74 +1,85 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = matrix.getData(); // In-place decomposition of the matrix data
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check the matrix symmetry and clear the lower triangle
         for (int i = 0; i < order; ++i) {
+            final double[] lI = lTData[i]; // Row i
 
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // Check off-diagonal elements for symmetry
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double[] lJ = lTData[j]; // Row j
+                final double lIJ = lI[j]; // Element (i, j)
+                final double lJI = lJ[i]; // Element (j, i)
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                lJ[i] = 0.0; // Clear the lower triangular element (optional, does not affect L^T)
            }
         }
 
-        // transform the matrix
+        // Transform the matrix (compute L^T in the upper triangle, in-place)
+        // using the Right-Looking Cholesky algorithm (variant)
         for (int i = 0; i < order; ++i) {
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // Row i of the matrix being transformed (stores L^T eventually)
 
-            // check diagonal element
+            // Check diagonal element positivity before taking the square root
+            // At step i, the element lTData[i][i] should contain the updated value
+            // A_ii - sum_{k=0}^{i-1} (L^T_ki)^2
+            // This value must be strictly positive for a positive definite matrix.
+            if (ltI[i] <= absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
+            // Compute L^T_ii = sqrt( A_ii - sum_{k=0}^{i-1} (L^T_ki)^2 )
             ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            final double inverse = 1.0 / ltI[i]; // Precompute 1 / L^T_ii for efficiency
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
+            // Compute the rest of row i (L^T_ij for j > i) and update the trailing submatrix
+            // This loop structure implicitly performs the updates needed for subsequent steps
+            for (int q = order - 1; q > i; --q) { // q represents the column index j > i, iterating downwards
+                // Compute L^T_iq = (A_iq - sum_{k=0}^{i-1} L^T_ki * L^T_kq) / L^T_ii
+                // The value ltI[q] currently holds the numerator part due to updates from previous outer loop iterations (k < i)
+                ltI[q] *= inverse; // Divide by L^T_ii to get the final L^T_iq
+
+                // Update the trailing submatrix A(q:n, q:n) using the computed row i elements
+                final double[] ltQ = lTData[q]; // Row q (where q > i)
+                for (int p = q; p < order; ++p) { // p represents the column index (p >= q > i)
+                    // Update element A_qp = A_qp - L^T_iq * L^T_ip
+                    // where L^T_iq = ltI[q] (computed above)
+                    // and L^T_ip = ltI[p] (computed in a previous iteration of this q-loop or is L^T_ii if p=i, which is handled by loop bounds)
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
