diff --git a/tmp/65c13c33-75de-4871-bea0-e7736a5a4ba1_buggy.java b/tmp/9793f82f-be92-4b54-b956-4a6d9d5c28c4_fixed.java
index bb3193c..858009a 100644
--- a/tmp/65c13c33-75de-4871-bea0-e7736a5a4ba1_buggy.java
+++ b/tmp/9793f82f-be92-4b54-b956-4a6d9d5c28c4_fixed.java
@@ -1,52 +1,76 @@
   /**
    * For each qualified name N in the global scope, we check if:
    * (a) No ancestor of N is ever aliased or assigned an unknown value type.
    *     (If N = "a.b.c", "a" and "a.b" are never aliased).
    * (b) N has exactly one write, and it lives in the global scope.
    * (c) N is aliased in a local scope.
    *
    * If (a) is true, then GlobalNamespace must know all the writes to N.
    * If (a) and (b) are true, then N cannot change during the execution of
    *    a local scope.
    * If (a) and (b) and (c) are true, then the alias can be inlined if the
    *    alias obeys the usual rules for how we decide whether a variable is
    *    inlineable.
    * @see InlineVariables
    */
   private void inlineAliases(GlobalNamespace namespace) {
     // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
       Name name = workList.pop();
 
       // Don't attempt to inline a getter or setter property as a variable.
       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
         continue;
       }
 
+      // Condition (b): Check if the name is constant during local execution.
       if (name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
+
+        // Make a copy to avoid ConcurrentModificationException if
+        // removeRef modifies the list.
         List<Ref> refs = Lists.newArrayList(name.getRefs());
         for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
+          // Condition (c): Check if the name is aliased in a local scope.
+          if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {
+
+            // Aliasing the 'arguments' object requires special handling
+            // by the variable inliner. Do not attempt to inline here
+            // if the original name ('name') corresponds to the 'arguments'
+            // object, as this pass is not equipped to handle it correctly,
+            // especially if it escapes the local scope.
+            // See https://github.com/google/closure-compiler/issues/931
+            Node refNode = ref.getNode();
+            if (refNode != null && refNode.isName() && "arguments".equals(refNode.getString())) {
+              // This reference is to the keyword 'arguments'. Skip it.
+              // The aliasing variable ('args' in 'var args = arguments') might be
+              // inlined by InlineVariables later, which has specific checks
+              // for 'arguments'.
+              continue;
+            }
+
+            // {@code name} meets condition (c). Try to inline the alias.
             if (inlineAliasIfPossible(ref, namespace)) {
+              // If inlining was successful, remove the reference
+              // from the original name.
               name.removeRef(ref);
             }
           }
         }
       }
 
       // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
+      // local-alias-inlining above. If not, and it's an object or function,
+      // we can process its properties.
       if ((name.type == Name.Type.OBJECTLIT ||
            name.type == Name.Type.FUNCTION) &&
           name.aliasingGets == 0 && name.props != null) {
         // All of {@code name}'s children meet condition (a), so they can be
         // added to the worklist.
         workList.addAll(name.props);
       }
     }
   }
\ No newline at end of file
