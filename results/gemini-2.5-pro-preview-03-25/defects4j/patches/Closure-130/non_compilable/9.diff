diff --git a/tmp/0e4a7f4b-c4ae-49f8-9065-c77a91628069_buggy.java b/tmp/ca12eb85-0702-4f13-8236-5017447af486_fixed.java
index bb3193c..2bfd143 100644
--- a/tmp/0e4a7f4b-c4ae-49f8-9065-c77a91628069_buggy.java
+++ b/tmp/ca12eb85-0702-4f13-8236-5017447af486_fixed.java
@@ -1,52 +1,99 @@
+import com.google.javascript.jscomp.GlobalNamespace.Name;
+import com.google.javascript.jscomp.GlobalNamespace.Ref;
+import com.google.javascript.jscomp.GlobalNamespace.Ref.Type;
+import com.google.common.collect.Lists;
+import com.google.javascript.rhino.Node; // Import Node
+
+import java.util.ArrayDeque;
+import java.util.Deque;
+import java.util.List;
+
+
   /**
    * For each qualified name N in the global scope, we check if:
    * (a) No ancestor of N is ever aliased or assigned an unknown value type.
    *     (If N = "a.b.c", "a" and "a.b" are never aliased).
    * (b) N has exactly one write, and it lives in the global scope.
    * (c) N is aliased in a local scope.
    *
    * If (a) is true, then GlobalNamespace must know all the writes to N.
    * If (a) and (b) are true, then N cannot change during the execution of
    *    a local scope.
    * If (a) and (b) and (c) are true, then the alias can be inlined if the
    *    alias obeys the usual rules for how we decide whether a variable is
    *    inlineable.
    * @see InlineVariables
    */
   private void inlineAliases(GlobalNamespace namespace) {
     // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
       Name name = workList.pop();
 
       // Don't attempt to inline a getter or setter property as a variable.
       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
         continue;
       }
 
+      // Conditions (a) and (b) must be true.
       if (name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
+
+        // Make a copy to avoid ConcurrentModificationException when removing refs.
         List<Ref> refs = Lists.newArrayList(name.getRefs());
         for (Ref ref : refs) {
+          // Make sure this is a local alias reference. This checks condition (c).
           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
+
+            // Check if this is an alias of the 'arguments' object. If so, don't inline it,
+            // as this is problematic with closures and potentially mutating 'arguments'.
+            // See https://github.com/google/closure-compiler/issues/931
+            Node aliasNode = ref.getNode();
+            // We assume ref.getNode() points to the alias NAME node (the LHS).
+            if (aliasNode != null && aliasNode.isName()) {
+              Node parent = aliasNode.getParent();
+              if (parent != null) {
+                // Case: var args = arguments;
+                // AST: VAR -> NAME(args) -> NAME(arguments)
+                if (parent.isVar() && aliasNode == parent.getFirstChild() && aliasNode.hasChildren()) {
+                  Node rhs = aliasNode.getFirstChild();
+                  if (rhs != null && rhs.isName() && "arguments".equals(rhs.getString())) {
+                    continue; // Skip inlining attempt for arguments alias
+                  }
+                }
+                // Case: args = arguments;
+                // AST: ASSIGN -> NAME(args) -> NAME(arguments)
+                else if (parent.isAssign() && aliasNode == parent.getFirstChild()) {
+                  Node rhs = aliasNode.getNext();
+                  if (rhs != null && rhs.isName() && "arguments".equals(rhs.getString())) {
+                    continue; // Skip inlining attempt for arguments alias
+                  }
+                }
+              }
+            }
+
+            // {@code name} meets condition (c) and is not an alias of 'arguments'. Try to inline it.
             if (inlineAliasIfPossible(ref, namespace)) {
+              // If inlining is successful, remove the reference.
               name.removeRef(ref);
             }
           }
         }
       }
 
       // Check if {@code name} has any aliases left after the
       // local-alias-inlining above.
+      // If the name is an object literal or function, and it has no remaining
+      // aliases, then its properties can also be collapsed. Add them to the
+      // work list.
       if ((name.type == Name.Type.OBJECTLIT ||
            name.type == Name.Type.FUNCTION) &&
           name.aliasingGets == 0 && name.props != null) {
         // All of {@code name}'s children meet condition (a), so they can be
         // added to the worklist.
         workList.addAll(name.props);
       }
     }
   }
\ No newline at end of file
