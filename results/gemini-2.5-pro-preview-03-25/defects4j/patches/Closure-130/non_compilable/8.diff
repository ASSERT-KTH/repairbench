diff --git a/tmp/4d9db10f-377e-48d8-9163-f70f909d9e12_buggy.java b/tmp/485a1fd8-8eb1-4fab-b2bb-47f436707629_fixed.java
index bb3193c..df1c0e5 100644
--- a/tmp/4d9db10f-377e-48d8-9163-f70f909d9e12_buggy.java
+++ b/tmp/485a1fd8-8eb1-4fab-b2bb-47f436707629_fixed.java
@@ -1,52 +1,95 @@
+import com.google.common.collect.Lists;
+import com.google.javascript.jscomp.GlobalNamespace.Name;
+import com.google.javascript.jscomp.GlobalNamespace.Ref;
+import com.google.javascript.jscomp.GlobalNamespace.Ref.Type;
+import com.google.javascript.rhino.Node;
+import java.util.ArrayDeque;
+import java.util.Deque;
+import java.util.List;
+
+
   /**
    * For each qualified name N in the global scope, we check if:
    * (a) No ancestor of N is ever aliased or assigned an unknown value type.
    *     (If N = "a.b.c", "a" and "a.b" are never aliased).
    * (b) N has exactly one write, and it lives in the global scope.
    * (c) N is aliased in a local scope.
    *
    * If (a) is true, then GlobalNamespace must know all the writes to N.
    * If (a) and (b) are true, then N cannot change during the execution of
    *    a local scope.
    * If (a) and (b) and (c) are true, then the alias can be inlined if the
    *    alias obeys the usual rules for how we decide whether a variable is
    *    inlineable.
    * @see InlineVariables
    */
   private void inlineAliases(GlobalNamespace namespace) {
     // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
       Name name = workList.pop();
 
       // Don't attempt to inline a getter or setter property as a variable.
       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
         continue;
       }
 
       if (name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
+        // Create a copy for iterating because `inlineAliasIfPossible` can
+        // modify the original list of refs.
         List<Ref> refs = Lists.newArrayList(name.getRefs());
         for (Ref ref : refs) {
           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
             // {@code name} meets condition (c). Try to inline it.
+
+            // Check if this alias involves 'arguments'. Aliases of 'arguments'
+            // should not be inlined, as it can break code that relies on the
+            // special behavior of 'arguments' (like in closures).
+            Node aliasNode = ref.getNode(); // This is the NAME node for the alias (LHS)
+            Node parent = aliasNode.getParent();
+            Node assignedValue = null;
+
+            if (parent.isVar() && aliasNode.hasChildren()) {
+              // Case: var alias = value;
+              assignedValue = aliasNode.getFirstChild();
+            } else if (parent.isAssign() && aliasNode == parent.getFirstChild()) {
+              // Case: alias = value;
+              assignedValue = parent.getLastChild();
+            }
+
+            // Check if the assigned value is the 'arguments' object
+            // NodeUtil.isArgumentsObject verifies it's the special Arguments
+            // object and not a user-defined variable named "arguments".
+            if (assignedValue != null && NodeUtil.isArgumentsObject(assignedValue)) {
+               // Do not inline aliases of 'arguments'
+               continue; // Skip to the next ref
+            }
+
+            // If we reach here, it's not a direct alias of 'arguments'.
+            // Try to inline the alias.
             if (inlineAliasIfPossible(ref, namespace)) {
+              // If inlining is successful, the original Ref might be removed
+              // or altered by inlineAliasIfPossible. We reflect this change
+              // in the GlobalNamespace representation, though the iteration
+              // uses a snapshot. If inlineAliasIfPossible already handles
+              // name.removeRef, this might be redundant, but safe.
               name.removeRef(ref);
             }
           }
         }
       }
 
       // Check if {@code name} has any aliases left after the
       // local-alias-inlining above.
       if ((name.type == Name.Type.OBJECTLIT ||
            name.type == Name.Type.FUNCTION) &&
           name.aliasingGets == 0 && name.props != null) {
         // All of {@code name}'s children meet condition (a), so they can be
         // added to the worklist.
         workList.addAll(name.props);
       }
     }
   }
\ No newline at end of file
