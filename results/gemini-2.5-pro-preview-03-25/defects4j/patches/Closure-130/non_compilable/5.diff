diff --git a/tmp/a237936d-c04d-4a08-ac3f-c6edd4e3f7ee_buggy.java b/tmp/3f35aae5-f1a3-45f2-ac52-2520c50d4355_fixed.java
index bb3193c..bb05529 100644
--- a/tmp/a237936d-c04d-4a08-ac3f-c6edd4e3f7ee_buggy.java
+++ b/tmp/3f35aae5-f1a3-45f2-ac52-2520c50d4355_fixed.java
@@ -1,52 +1,91 @@
+import com.google.common.collect.Lists;
+import com.google.javascript.jscomp.GlobalNamespace.Name;
+import com.google.javascript.jscomp.GlobalNamespace.Ref;
+import com.google.javascript.jscomp.GlobalNamespace.Ref.Type;
+import com.google.javascript.rhino.Node;
+import java.util.ArrayDeque;
+import java.util.Deque;
+import java.util.List;
+
   /**
    * For each qualified name N in the global scope, we check if:
    * (a) No ancestor of N is ever aliased or assigned an unknown value type.
    *     (If N = "a.b.c", "a" and "a.b" are never aliased).
    * (b) N has exactly one write, and it lives in the global scope.
    * (c) N is aliased in a local scope.
    *
    * If (a) is true, then GlobalNamespace must know all the writes to N.
    * If (a) and (b) are true, then N cannot change during the execution of
    *    a local scope.
    * If (a) and (b) and (c) are true, then the alias can be inlined if the
    *    alias obeys the usual rules for how we decide whether a variable is
    *    inlineable.
    * @see InlineVariables
    */
   private void inlineAliases(GlobalNamespace namespace) {
     // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
       Name name = workList.pop();
 
       // Don't attempt to inline a getter or setter property as a variable.
       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
         continue;
       }
 
+      // Condition (b): N has exactly one global write, no local writes.
+      // Condition (c) check: N is aliased at least once (locally).
       if (name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
+
+        // Make a copy to avoid concurrent modification issues if
+        // name.removeRef modifies the underlying list.
         List<Ref> refs = Lists.newArrayList(name.getRefs());
         for (Ref ref : refs) {
+          // Check if the reference is a local alias.
           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
+            // {@code name} meets condition (c) for this specific alias ref.
+
+            // *** FIX START ***
+            // Check if the value being aliased is the 'arguments' object.
+            // ref.getNode() returns the RHS node in an assignment like 'var x = node;'
+            // or 'x = node;'. In the case of 'var args = arguments', ref.getNode()
+            // should be the NAME node for 'arguments'.
+            Node rhsNode = ref.getNode();
+
+            // Check if the reference node is the identifier "arguments". If it is,
+            // don't attempt to inline it, as inlining 'arguments' is unsafe,
+            // especially when it's captured in closures (like in Issue 931).
+            boolean isArgumentsAlias = rhsNode != null && rhsNode.isName() &&
+                "arguments".equals(rhsNode.getString());
+
+            // If it's not an alias of 'arguments', proceed with the inlining check.
+            if (!isArgumentsAlias) {
               if (inlineAliasIfPossible(ref, namespace)) {
+                // Inlining successful, remove the reference. This updates
+                // name.aliasingGets implicitly via name.removeRef.
                 name.removeRef(ref);
               }
             }
+            // Else: It is an alias of 'arguments'. We do nothing, leaving the
+            // reference and the alias count intact. This prevents the unsafe
+            // optimization.
+            // *** FIX END ***
+          }
         }
       }
 
       // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
+      // local-alias-inlining above. If not, and it's an object/function,
+      // its properties might now meet condition (a) and can be processed.
       if ((name.type == Name.Type.OBJECTLIT ||
            name.type == Name.Type.FUNCTION) &&
           name.aliasingGets == 0 && name.props != null) {
         // All of {@code name}'s children meet condition (a), so they can be
         // added to the worklist.
         workList.addAll(name.props);
       }
     }
   }
\ No newline at end of file
