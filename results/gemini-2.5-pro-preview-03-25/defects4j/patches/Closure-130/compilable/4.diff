diff --git a/tmp/93a2a353-8610-41f1-8e3c-c23a0042d442_buggy.java b/tmp/e3e4c2e0-93db-4e4e-bef2-336f92e867dd_fixed.java
index bb3193c..b661a7d 100644
--- a/tmp/93a2a353-8610-41f1-8e3c-c23a0042d442_buggy.java
+++ b/tmp/e3e4c2e0-93db-4e4e-bef2-336f92e867dd_fixed.java
@@ -1,52 +1,65 @@
   /**
    * For each qualified name N in the global scope, we check if:
    * (a) No ancestor of N is ever aliased or assigned an unknown value type.
    *     (If N = "a.b.c", "a" and "a.b" are never aliased).
    * (b) N has exactly one write, and it lives in the global scope.
    * (c) N is aliased in a local scope.
    *
    * If (a) is true, then GlobalNamespace must know all the writes to N.
    * If (a) and (b) are true, then N cannot change during the execution of
    *    a local scope.
    * If (a) and (b) and (c) are true, then the alias can be inlined if the
    *    alias obeys the usual rules for how we decide whether a variable is
    *    inlineable.
    * @see InlineVariables
    */
   private void inlineAliases(GlobalNamespace namespace) {
     // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
       Name name = workList.pop();
 
       // Don't attempt to inline a getter or setter property as a variable.
       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
         continue;
       }
 
-      if (name.globalSets == 1 && name.localSets == 0 &&
+      // Condition (a) and (b) are met. Check for condition (c).
+      // Try to inline local aliases of NAMEs that are not functions.
+      // Functions are skipped due to complexity with 'arguments' and 'this'
+      // potentially causing issues in InlineVariables (See Issue 931).
+      if (name.type != Name.Type.FUNCTION && // Added Check: Don't inline aliases OF functions
+          name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
+        // Create a copy for iterating because inlineAliasIfPossible can
+        // modify the original list.
         List<Ref> refs = Lists.newArrayList(name.getRefs());
         for (Ref ref : refs) {
           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
             // {@code name} meets condition (c). Try to inline it.
             if (inlineAliasIfPossible(ref, namespace)) {
+              // If inlining succeeded, remove the reference. Note that
+              // inlineAliasIfPossible takes care of updating the aliasingGets
+              // count, but we still need to remove the Ref object itself.
               name.removeRef(ref);
             }
           }
         }
       }
 
       // Check if {@code name} has any aliases left after the
       // local-alias-inlining above.
+      // This part remains unchanged: if a FUNCTION or OBJECTLIT has no aliases
+      // (aliasingGets == 0), its properties might still be considered for
+      // collapsing later by adding them to the worklist.
       if ((name.type == Name.Type.OBJECTLIT ||
            name.type == Name.Type.FUNCTION) &&
           name.aliasingGets == 0 && name.props != null) {
         // All of {@code name}'s children meet condition (a), so they can be
         // added to the worklist.
         workList.addAll(name.props);
       }
     }
   }
\ No newline at end of file
