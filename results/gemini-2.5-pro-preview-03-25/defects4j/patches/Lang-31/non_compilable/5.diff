diff --git a/tmp/6919da56-5573-467b-8f07-df7b08af4d57_buggy.java b/tmp/42a0c709-cad2-45bd-8ca2-10004360f39e_fixed.java
index eea9e73..636707e 100644
--- a/tmp/6919da56-5573-467b-8f07-df7b08af4d57_buggy.java
+++ b/tmp/42a0c709-cad2-45bd-8ca2-10004360f39e_fixed.java
@@ -1,41 +1,90 @@
+import java.util.HashSet;
+import java.util.Set;
+// Assuming ArrayUtils.isEmpty and StringUtils.isEmpty are available in the context.
+// If not, the direct checks below can be used, or local helper methods implemented.
+// import org.apache.commons.lang3.ArrayUtils;
+
+
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
+     * <p>This method handles supplementary characters defined by surrogate pairs.
+     * If a surrogate pair is included in <code>searchChars</code>, it is treated as a single
+     * character (code point).</p>
+     *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
+     * StringUtils.containsAny("ab\uD800\uDC00c", ['\uD800', '\uDC00']) = true // U+10000 in searchChars matches U+10000 in cs
+     * StringUtils.containsAny("ab\uD800\uDC00c", ['a', '\uDC00'])      = true // 'a' matches 'a'
+     * StringUtils.containsAny("ab\uD800\uDC00c", ['\uD800'])           = false // High surrogate alone doesn't match code point U+10000
+     * StringUtils.containsAny("ab\uD83D\uDE00d", ['\uD83D', '\uDE00']) = true // U+1F600 in searchChars matches U+1F600 in cs
+     * StringUtils.containsAny("\uD800\uDC00", ['\uD800', '\uDC01'])    = false // U+10000 in cs does not match U+10001 in searchChars
+     * StringUtils.containsAny("\uD800\uDC00", ['\uD800'])              = false // U+10000 in cs does not match high surrogate alone
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
+     * @return <code>true</code> if any of the characters (code points) are found,
      * <code>false</code> if no match or null input
      * @since 2.4
+     * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char[])
+     * @since 3.0 Handled supplementary characters correctly (code point aware).
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+        // Replace with StringUtils.isEmpty(cs) || ArrayUtils.isEmpty(searchChars) if those utils are available
+		if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {
 			return false;
 		}
-		int csLength = cs.length();
+
+        // Build a set of code points from the search characters for efficient lookup.
+        // This set will contain integers representing code points.
+        Set<Integer> searchCodePoints = new HashSet<>();
         int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+        for (int i = 0; i < searchLength; i++) {
+            char c1 = searchChars[i];
+            // Check if c1 is a high surrogate and if the next char forms a valid pair
+            if (Character.isHighSurrogate(c1)) {
+                if (i + 1 < searchLength) {
+                    char c2 = searchChars[i + 1];
+                    if (Character.isLowSurrogate(c2)) {
+                        // Valid supplementary character found, add its code point to the set
+                        searchCodePoints.add(Character.toCodePoint(c1, c2));
+                        i++; // Skip the low surrogate in the next iteration
+                        continue; // Continue to the next potential code point start
                     }
+                    // else: High surrogate not followed by a low surrogate. Treat it as an individual char below.
                 }
+                // else: High surrogate at the end of the array. Treat it as an individual char below.
             }
+            // Add BMP character or an isolated surrogate (treated as a single code point value) to the set.
+            // Casting char to int gives its UTF-16 value, which is the code point for BMP chars.
+            searchCodePoints.add((int) c1);
+        }
+
+        // Iterate through the input CharSequence by code points.
+        int csLength = cs.length();
+        for (int i = 0; i < csLength; ) {
+            // Get the code point at the current index
+            int codePoint = Character.codePointAt(cs, i);
+            // Check if this code point is present in our set of search code points
+            if (searchCodePoints.contains(codePoint)) {
+                return true; // Found a match
+            }
+            // Advance the index by the number of chars used by the current code point
+            // (1 for BMP characters, 2 for supplementary characters)
+            i += Character.charCount(codePoint);
+        }
+
+        // No matching code point found in the entire CharSequence
 		return false;
 	}
\ No newline at end of file
