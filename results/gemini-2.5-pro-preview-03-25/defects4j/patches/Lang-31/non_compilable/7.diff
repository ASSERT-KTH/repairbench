diff --git a/tmp/85ef2884-f9e9-40b2-8bc0-926f683a45a0_buggy.java b/tmp/2f185464-0a3e-429e-9c75-bfc8f7f458fc_fixed.java
index eea9e73..75bc721 100644
--- a/tmp/85ef2884-f9e9-40b2-8bc0-926f683a45a0_buggy.java
+++ b/tmp/2f185464-0a3e-429e-9c75-bfc8f7f458fc_fixed.java
@@ -1,41 +1,70 @@
+import java.util.HashSet;
+import java.util.Set;
+// Note: The ArrayUtils.isEmpty method is assumed to be available from org.apache.commons.lang3.ArrayUtils
+
     /**
-     * <p>Checks if the CharSequence contains any character in the given
+     * <p>Checks if the CharSequence contains any character (code point) in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
+     * <p>This method handles supplementary characters based on code points.
+     * If a surrogate pair appears in <code>searchChars</code>, it is treated as
+     * a single supplementary character code point. Unpaired surrogates are
+     * treated as separate code points.</p>
+     *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
+     * StringUtils.containsAny("\uD800\uDC00", ['\uD800', '\uDC00']) = true // U+10000 in cs, U+10000 in searchChars
+     * StringUtils.containsAny("\uD800\uDC01", ['\uD800', '\uDC00']) = false // U+10001 in cs, U+10000 in searchChars
+     * StringUtils.containsAny("\uD800", ['\uD800', '\uDC00'])      = false // U+D800 in cs, U+10000 in searchChars
+     * StringUtils.containsAny("\uD800\uDC00", ['\uD800'])          = false // U+10000 in cs, U+D800 in searchChars
+     * StringUtils.containsAny("\uD800", ['\uD800'])                = true // U+D800 in both
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
+     * @return <code>true</code> if any code point in <code>cs</code> is also represented in <code>searchChars</code>,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+		// Check for null or empty inputs
+        // Note: Using explicit check for cs instead of isEmpty(cs) from the original code
+        // to avoid potential recursion if this is StringUtils.isEmpty itself.
+		if (cs == null || cs.length() == 0 || org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+
+        // Build a set of code points from searchChars for efficient lookup.
+        // This handles supplementary characters correctly if they are represented
+        // by adjacent surrogate pairs in searchChars. Unpaired surrogates are treated
+        // as individual code points (their char values).
+        final Set<Integer> searchCodePoints = new HashSet<>();
+        final int searchLength = searchChars.length;
+        for (int i = 0; i < searchLength; ) {
+            final int codePoint = Character.codePointAt(searchChars, i);
+            searchCodePoints.add(codePoint);
+            i += Character.charCount(codePoint); // Advance index by 1 or 2
+        }
+
+        // Iterate through the input CharSequence by code points.
+        final int csLength = cs.length();
+        for (int i = 0; i < csLength; ) {
+            final int codePoint = Character.codePointAt(cs, i);
+            // Check if the current code point exists in the search set.
+            if (searchCodePoints.contains(codePoint)) {
                 return true;
             }
+            i += Character.charCount(codePoint); // Advance index by 1 or 2
         }
-		}
-		return false;
+
+		return false; // No matching code point found
 	}
\ No newline at end of file
