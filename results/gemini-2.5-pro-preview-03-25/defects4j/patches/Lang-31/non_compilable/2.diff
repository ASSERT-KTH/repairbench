diff --git a/tmp/5fac92e0-203f-4065-92c5-0bf16c2faf41_buggy.java b/tmp/56253653-713c-4028-b513-b8d6c276f101_fixed.java
index eea9e73..a4c58b1 100644
--- a/tmp/5fac92e0-203f-4065-92c5-0bf16c2faf41_buggy.java
+++ b/tmp/56253653-713c-4028-b513-b8d6c276f101_fixed.java
@@ -1,41 +1,96 @@
+import java.util.HashSet;
+import java.util.Set;
+
+// NOTE: The following imports are usually handled by the environment
+// import static org.apache.commons.lang3.StringUtils.isEmpty; // Assuming StringUtils.isEmpty exists
+// import org.apache.commons.lang3.ArrayUtils; // Assuming ArrayUtils.isEmpty exists
+
 /**
  * <p>Checks if the CharSequence contains any character in the given
  * set of characters.</p>
  *
  * <p>A <code>null</code> CharSequence will return <code>false</code>.
  * A <code>null</code> or zero length search array will return <code>false</code>.</p>
  *
  * <pre>
  * StringUtils.containsAny(null, *)                = false
  * StringUtils.containsAny("", *)                  = false
  * StringUtils.containsAny(*, null)                = false
  * StringUtils.containsAny(*, [])                  = false
  * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
  * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
  * StringUtils.containsAny("aba", ['z'])           = false
  * </pre>
  *
  * @param cs  the CharSequence to check, may be null
  * @param searchChars  the chars to search for, may be null
  * @return the <code>true</code> if any of the chars are found,
  * <code>false</code> if no match or null input
  * @since 2.4
  */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+    // Check for null or empty inputs early
+    // Assumes static import or availability of isEmpty and ArrayUtils.isEmpty
+    if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {
+         // Adjusted check to directly handle cs null/empty and searchChars null/empty
+         // This replaces the need for external isEmpty/ArrayUtils.isEmpty for this snippet,
+         // assuming the original check `isEmpty(cs) || ArrayUtils.isEmpty(searchChars)`
+         // behaved equivalently for null/empty conditions.
         return false;
     }
-		int csLength = cs.length();
+
+    // Create a set of code points from searchChars for efficient lookup.
+    // This handles supplementary characters correctly by pairing surrogates.
+    Set<Integer> searchCodePoints = new HashSet<>();
     int searchLength = searchChars.length;
+    for (int i = 0; i < searchLength; i++) {
+        char c1 = searchChars[i];
+        // Check if the character is a high surrogate
+        if (Character.isHighSurrogate(c1)) {
+            // Ensure there is a next character to form a pair
+            if (i + 1 < searchLength) {
+                char c2 = searchChars[i + 1];
+                // Check if the next character is a low surrogate
+                if (Character.isLowSurrogate(c2)) {
+                    // Form the supplementary code point and add it to the set
+                    searchCodePoints.add(Character.toCodePoint(c1, c2));
+                    // Skip the low surrogate character in the next iteration
+                    i++;
+                    continue; // Continue to the next potential start of a character
+                }
+            }
+            // If it's a lone high surrogate or not followed by a low surrogate,
+            // it doesn't form a valid character. We choose to ignore it based on
+            // the interpretation of searching for valid Unicode characters (code points).
+        } else if (!Character.isLowSurrogate(c1)) {
+            // It's a BMP character (not a high or low surrogate). Add its code point.
+            // Lone low surrogates are also ignored as they are not valid characters alone.
+            searchCodePoints.add((int) c1);
+        }
+        // else: c1 is a lone low surrogate, ignore it.
+    }
+
+    // If the set of valid search code points is empty (e.g., searchChars only contained lone surrogates),
+    // no match is possible. The loop below will handle this correctly.
+
+    // Iterate through the input CharSequence by code points.
+    int csLength = cs.length();
     for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+        // Get the code point at the current position.
+        int codePoint = Character.codePointAt(cs, i);
+
+        // Check if the current code point exists in the set of search code points.
+        if (searchCodePoints.contains(codePoint)) {
+            return true; // Found a match.
         }
+
+        // If the current code point is a supplementary character (using two chars),
+        // advance the index by an extra step to correctly position for the next code point.
+        if (Character.isSupplementaryCodePoint(codePoint)) {
+            i++;
         }
     }
+
+    // No matching character found after iterating through the entire CharSequence.
     return false;
 }
\ No newline at end of file
