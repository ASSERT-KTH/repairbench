diff --git a/tmp/e1a5ae76-9b92-4aa7-8b3f-4c966fedf1df_buggy.java b/tmp/0eef4362-0898-4fe8-ba48-307e058a4b13_fixed.java
index eea9e73..41e4778 100644
--- a/tmp/e1a5ae76-9b92-4aa7-8b3f-4c966fedf1df_buggy.java
+++ b/tmp/0eef4362-0898-4fe8-ba48-307e058a4b13_fixed.java
@@ -1,41 +1,69 @@
+import org.apache.commons.lang3.ArrayUtils; // Assuming this import exists based on ArrayUtils.isEmpty call
+
+// We assume the existence of a helper method isEmpty(CharSequence) like the one below
+// or similar functionality available in the context (e.g., from StringUtils itself or another utility class).
+import static org.apache.commons.lang3.StringUtils.isEmpty; // Example import
+
+// ... other imports if necessary ...
+
+public class StringUtils { // Assuming the method is in a class named StringUtils
+
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
+     * <p>This method handles supplementary characters (code points &gt; 0xFFFF) correctly.</p>
+     *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+		// Iterate through code points of cs
+		for (int i = 0; i < csLength; ) {
+			int csCodePoint = Character.codePointAt(cs, i);
+			int csCharCount = Character.charCount(csCodePoint);
+
+			// Iterate through code points of searchChars
+			for (int j = 0; j < searchLength; ) {
+				 int searchCodePoint = Character.codePointAt(searchChars, j);
+				 int searchCharCount = Character.charCount(searchCodePoint);
+				 if (searchCodePoint == csCodePoint) {
+					 // Found a matching code point
 					 return true;
 				 }
+				 // Increment j by the number of chars for the current search code point
+				 j += searchCharCount;
 			}
+			// Increment i by the number of chars for the current cs code point
+			i += csCharCount;
 		}
 		return false;
 	}
+
+    // Helper method stub for isEmpty (if not already available)
+    // private static boolean isEmpty(CharSequence cs) {
+    //     return cs == null || cs.length() == 0;
+    // }
+
+} // End of StringUtils class example
\ No newline at end of file
