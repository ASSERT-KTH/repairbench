diff --git a/tmp/2171044d-55c8-4983-aa80-fa86c19ca1a2_buggy.java b/tmp/432d1d04-475c-49af-a7e1-ca9b9850c1f0_fixed.java
index eea9e73..dfcb887 100644
--- a/tmp/2171044d-55c8-4983-aa80-fa86c19ca1a2_buggy.java
+++ b/tmp/432d1d04-475c-49af-a7e1-ca9b9850c1f0_fixed.java
@@ -1,41 +1,75 @@
+import org.apache.commons.lang3.ArrayUtils;
+import static org.apache.commons.lang3.StringUtils.isEmpty;
+
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
+     * <p>Note that supplementary characters (those requiring two chars in Java) are handled.
+     * If the input CharSequence contains a supplementary character, the method checks if
+     * either of its surrogate chars is in the search array. However, a match is only returned
+     * if the matched char in the input sequence is not a high-surrogate forming a valid
+     * surrogate pair.</p>
+     *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
+     * StringUtils.containsAny("\uD840\uDC00", ['\uD840']) = false // U+20000 not found by matching high surrogate alone
+     * StringUtils.containsAny("\uD840\uDC00", ['\uDC00']) = true  // U+20000 found by matching low surrogate
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
+            // Check if ch is a high surrogate that is part of a valid pair.
+            boolean isHighSurrogateInPair = false;
+            if (Character.isHighSurrogate(ch)) {
+                // Check existence of subsequent character
+                if (i + 1 < csLength) {
+                    char nextChar = cs.charAt(i + 1);
+                    // Check if the next character is a low surrogate.
+                    if (Character.isLowSurrogate(nextChar)) {
+                        isHighSurrogateInPair = true;
+                    }
+                }
+            }
+
 			for (int j = 0; j < searchLength; j++) {
 				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                    // If the matched char 'ch' is NOT a high surrogate part of a valid pair,
+                    // then we found a match. Matches on low surrogates or BMP chars or unpaired high surrogates are valid.
+                    if (!isHighSurrogateInPair) {
 					    return true;
                     }
+                    // If ch is a high surrogate part of a pair, we continue searching in searchChars,
+                    // but this specific match (searchChars[j] == ch) based on the high surrogate alone is ignored.
+                    // We proceed to check the low surrogate in the next iteration of the outer loop.
+				}
+			}
+            // If the current char was a high surrogate part of a valid pair,
+            // skip the next char (low surrogate) in the outer loop iteration.
+            if (isHighSurrogateInPair) {
+                i++;
             }
 		}
 		return false;
 	}
\ No newline at end of file
