diff --git a/tmp/5b0c64f2-1409-4674-8284-6fde6b33f97a_buggy.java b/tmp/8916045d-7043-4082-944e-78bac4eb6ce5_fixed.java
index eea9e73..d4bb2e9 100644
--- a/tmp/5b0c64f2-1409-4674-8284-6fde6b33f97a_buggy.java
+++ b/tmp/8916045d-7043-4082-944e-78bac4eb6ce5_fixed.java
@@ -1,41 +1,103 @@
+import org.apache.commons.lang3.ArrayUtils;
+
+// assume StringUtils.isEmpty is available and works as expected.
+
 	/**
 	 * <p>Checks if the CharSequence contains any character in the given
 	 * set of characters.</p>
 	 *
 	 * <p>A <code>null</code> CharSequence will return <code>false</code>.
 	 * A <code>null</code> or zero length search array will return <code>false</code>.</p>
+	 *
+	 * <p>This method handles supplementary characters correctly. A supplementary character in the
+     * {@code cs} sequence is considered found if and only if both of its surrogate {@code char}
+     * values are present in the {@code searchChars} array.</p>
 	 *
 	 * <pre>
 	 * StringUtils.containsAny(null, *)                = false
 	 * StringUtils.containsAny("", *)                  = false
 	 * StringUtils.containsAny(*, null)                = false
 	 * StringUtils.containsAny(*, [])                  = false
 	 * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
 	 * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
 	 * StringUtils.containsAny("aba", ['z'])           = false
+	 * StringUtils.containsAny("\uD840\uDC00", ['\uD840','\uDC00']) = true // Supplementary U+20000
+     * StringUtils.containsAny("\uD840\uDC00", ['\uD840','\uDC01']) = false
+     * StringUtils.containsAny("\uD840\uDC00", ['a','\uD840','b','\uDC00']) = true
 	 * </pre>
 	 *
 	 * @param cs  the CharSequence to check, may be null
 	 * @param searchChars  the chars to search for, may be null
 	 * @return the <code>true</code> if any of the chars are found,
 	 * <code>false</code> if no match or null input
 	 * @since 2.4
 	 */
-	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+	public static boolean containsAny(final CharSequence cs, final char[] searchChars) {
+        // Mimic the behavior of the isEmpty method if it's not directly available
+        // or if we need to ensure null-safety and length check locally.
+        final boolean csIsEmpty = cs == null || cs.length() == 0;
+
+        if (csIsEmpty || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
+
+        final int csLength = cs.length();
+        final int searchLength = searchChars.length;
+
+        // Iterate through the CharSequence by code points
         for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+            final int codePoint = Character.codePointAt(cs, i);
+            boolean found = false; // Flag: does the current codePoint match based on searchChars?
+
+            if (Character.isSupplementaryCodePoint(codePoint)) {
+                // Handle supplementary character (requires two chars)
+                final char high = Character.highSurrogate(codePoint);
+                final char low = Character.lowSurrogate(codePoint);
+                boolean highFound = false;
+                boolean lowFound = false;
+                // Check if BOTH surrogates are present in searchChars
+                for (int j = 0; j < searchLength; j++) {
+                    if (searchChars[j] == high) {
+                        highFound = true;
+                    }
+                    if (searchChars[j] == low) {
+                        lowFound = true;
+                    }
+                    // Optimization: If both found, no need to check further for this code point
+                    if (highFound && lowFound) {
+                        break;
+                    }
+                }
+                // A supplementary code point matches only if both its surrogates are in searchChars
+                if (highFound && lowFound) {
+                    found = true;
+                }
+                // Advance the index by one extra step, as this code point used two chars
+                i++;
+            } else {
+                // Handle BMP character (single char)
+                final char ch = (char) codePoint; // Safe cast for BMP code points
+                // Check if this single char is present in searchChars
                 for (int j = 0; j < searchLength; j++) {
                     if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                        found = true;
+                        break; // Found the char, no need to check further in searchChars
+                    }
+                }
+            }
+
+            // If a match was found for the current code point (either BMP or supplementary)
+            if (found) {
                 return true;
             }
         }
-		}
+
+        // No match found after iterating through all code points in cs
         return false;
     }
+
+    // Dummy isEmpty method if not provided by the context/class this method belongs to.
+    // Replace with actual StringUtils.isEmpty if available.
+    private static boolean isEmpty(final CharSequence cs) {
+        return cs == null || cs.length() == 0;
+    }
\ No newline at end of file
