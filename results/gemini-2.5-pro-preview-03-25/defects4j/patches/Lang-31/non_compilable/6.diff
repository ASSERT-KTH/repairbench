diff --git a/tmp/4fabd602-0887-40f6-a18c-4504a9c5103a_buggy.java b/tmp/6b571214-a4af-40a1-acd1-d31cdf8ce6ba_fixed.java
index eea9e73..209814f 100644
--- a/tmp/4fabd602-0887-40f6-a18c-4504a9c5103a_buggy.java
+++ b/tmp/6b571214-a4af-40a1-acd1-d31cdf8ce6ba_fixed.java
@@ -1,41 +1,84 @@
+import java.util.HashSet;
+import java.util.Set;
+
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
+        // Note: Assuming isEmpty and ArrayUtils.isEmpty are helper methods available in the context.
+        // If not, they should be replaced with (cs == null || cs.length() == 0)
+        // and (searchChars == null || searchChars.length == 0) respectively.
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+		final int csLength = cs.length();
+		final int searchLength = searchChars.length;
+		
+		// Build set of code points from searchChars for efficient lookup.
+        // This set stores the Unicode code points we are searching for.
+        // Supplementary characters in searchChars are represented as code points > 0xFFFF.
+        // Lone surrogates or BMP chars are represented as their char value cast to int.
+        final Set<Integer> searchCodepoints = new HashSet<>();
+        int i = 0;
+        while (i < searchLength) {
+            final char ch = searchChars[i];
+            // Check if the character is a high surrogate
+            if (Character.isHighSurrogate(ch)) {
+                // Check if there's a next character available
+                if (i + 1 < searchLength) {
+                    final char ch2 = searchChars[i + 1];
+                    // Check if the next character is a low surrogate
+                    if (Character.isLowSurrogate(ch2)) {
+                        // Found a valid surrogate pair, convert to a supplementary code point
+                        searchCodepoints.add(Character.toCodePoint(ch, ch2));
+                        i += 2; // Advance index past the surrogate pair
+                        continue; // Continue to the next potential code point in searchChars
                     }
                 }
+                // Lone high surrogate or high surrogate followed by non-low surrogate.
+                // Treat the high surrogate as an individual code point (as per its char value).
+                searchCodepoints.add((int) ch);
+                i++; // Advance index past the lone high surrogate
+            } else {
+                // BMP character or a lone low surrogate.
+                // Treat it as an individual code point (as per its char value).
+                searchCodepoints.add((int) ch);
+                i++; // Advance index past the character
             }
-		return false;
+        }
+
+		// Iterate through the input CharSequence by code points
+		for (int j = 0; j < csLength; ) {
+            // Get the code point at the current index j
+			final int codepoint = Character.codePointAt(cs, j);
+            // Check if the current code point exists in the set of search code points
+			if (searchCodepoints.contains(codepoint)) {
+				return true; // Found a match
+			}
+            // Advance the CharSequence index by the number of char units
+            // occupied by the current code point (1 for BMP, 2 for supplementary)
+			j += Character.charCount(codepoint);
+		}
+		
+		return false; // No matching code point found
 	}
\ No newline at end of file
