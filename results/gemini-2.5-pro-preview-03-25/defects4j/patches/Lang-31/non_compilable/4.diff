diff --git a/tmp/76642741-40de-4ef9-9a00-59f80c817529_buggy.java b/tmp/ab2a60a5-e65f-4534-8ff5-3c79674874ce_fixed.java
index eea9e73..4b8632a 100644
--- a/tmp/76642741-40de-4ef9-9a00-59f80c817529_buggy.java
+++ b/tmp/ab2a60a5-e65f-4534-8ff5-3c79674874ce_fixed.java
@@ -1,41 +1,68 @@
+import org.apache.commons.lang3.ArrayUtils; // Added for clarity, assumed available in context
+
 /**
  * <p>Checks if the CharSequence contains any character in the given
  * set of characters.</p>
  *
  * <p>A <code>null</code> CharSequence will return <code>false</code>.
  * A <code>null</code> or zero length search array will return <code>false</code>.</p>
  *
  * <pre>
  * StringUtils.containsAny(null, *)                = false
  * StringUtils.containsAny("", *)                  = false
  * StringUtils.containsAny(*, null)                = false
  * StringUtils.containsAny(*, [])                  = false
  * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
  * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
  * StringUtils.containsAny("aba", ['z'])           = false
+ * StringUtils.containsAny("ab\uD800\uDC00c", ['\uD800\uDC00']) = true // Example with supplementary
+ * StringUtils.containsAny("ab\uD800\uDC00c", ['d', '\uD800\uDC00']) = true // Example with supplementary
+ * StringUtils.containsAny("ab\uD800\uDC00c", ['d', 'x']) = false // Example with supplementary
  * </pre>
  *
  * @param cs  the CharSequence to check, may be null
  * @param searchChars  the chars to search for, may be null
  * @return the <code>true</code> if any of the chars are found,
  * <code>false</code> if no match or null input
  * @since 2.4
+ * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char[])
  */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
+    // Assuming StringUtils.isEmpty handles CharSequence correctly
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+    int csIdx = 0;
+    while (csIdx < csLength) {
+        // Get the code point at the current index in cs
+        int csCodePoint = Character.codePointAt(cs, csIdx);
+        int csCharCount = Character.charCount(csCodePoint); // Number of chars for this code point
+
+        int searchIdx = 0;
+        while (searchIdx < searchLength) {
+            // Get the code point at the current index in searchChars
+            int searchCodePoint = Character.codePointAt(searchChars, searchIdx);
+             // Number of chars for this code point
+            int searchCharCount = Character.charCount(searchCodePoint);
+
+            // Compare the code points
+            if (searchCodePoint == csCodePoint) {
+                return true; // Found a matching code point
             }
+
+            // Move to the next code point in searchChars
+            searchIdx += searchCharCount;
         }
+
+        // Move to the next code point in cs
+        csIdx += csCharCount;
     }
-		return false;
+    return false; // No match found
 }
+
+// Assuming isEmpty is available, e.g.:
+// private static boolean isEmpty(final CharSequence cs) {
+//      return cs == null || cs.length() == 0;
+// }
