diff --git a/tmp/da59b633-5e84-44ff-9846-4173ee1def76_buggy.java b/tmp/3ffde592-8150-427b-a68b-0d2173c94bc4_fixed.java
index eea9e73..c6e9ab6 100644
--- a/tmp/da59b633-5e84-44ff-9846-4173ee1def76_buggy.java
+++ b/tmp/3ffde592-8150-427b-a68b-0d2173c94bc4_fixed.java
@@ -1,41 +1,55 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
+     * <p>Note that supplementary characters (those needing two {@code char}s)
+     * are handled correctly.</p>
+     *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
+     * StringUtils.containsAny(" \uD800\uDC00 ", ['\uD800\uDC00']) = true // Example with supplementary char
+     * StringUtils.containsAny(" \uD800\uDC00 ", ['D', '\uDC00']) = false // Example with partial surrogate match
+     * StringUtils.containsAny(" \uD800\uDC00 ", ['\uD800', 'C']) = false // Example with partial surrogate match
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
-	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+	public static boolean containsAny(final CharSequence cs, final char[] searchChars) {
+        // Check if cs is null or empty or searchChars is null or empty
+        // Note: Using explicit check for cs to avoid potential dependency cycles
+        // if StringUtils.isEmpty calls this method internally.
+        if (cs == null || cs.length() == 0 || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+        final int csLength = cs.length();
+        final int searchLength = searchChars.length;
+        // Outer loop iterates through code points of cs
+        for (int i = 0; i < csLength; ) {
+            final int csCodePoint = Character.codePointAt(cs, i);
+            // Inner loop iterates through potential code points in searchChars
+            for (int j = 0; j < searchLength; ) {
+                final int searchCodePoint = Character.codePointAt(searchChars, j, searchLength); // Use boundary-checking version
+                if (searchCodePoint == csCodePoint) {
                     return true;
                 }
+                // Advance inner loop index by char count of searchCodePoint
+                j += Character.charCount(searchCodePoint);
             }
+            // Advance outer loop index by char count of csCodePoint
+            i += Character.charCount(csCodePoint);
         }
         return false;
     }
\ No newline at end of file
