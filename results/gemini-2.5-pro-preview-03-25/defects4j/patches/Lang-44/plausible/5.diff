diff --git a/tmp/9e9919bc-1343-42b5-9b00-5106af0826fa_buggy.java b/tmp/c098ca34-b4dc-4de2-9d04-ba32789ba2a2_fixed.java
index 4a05f03..2f9c2ed 100644
--- a/tmp/9e9919bc-1343-42b5-9b00-5106af0826fa_buggy.java
+++ b/tmp/c098ca34-b4dc-4de2-9d04-ba32789ba2a2_fixed.java
@@ -1,170 +1,212 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can hold the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * @param val String containing a number
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String val) throws NumberFormatException {
         if (val == null) {
             return null;
         }
         if (val.length() == 0) {
             throw new NumberFormatException("\"\" is not a valid number.");
         }
         if (val.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (val.startsWith("0x") || val.startsWith("-0x")) {
             return createInteger(val);
         }
         char lastChar = val.charAt(val.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = val.indexOf('.');
-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;
+        // Corrected expPos calculation to find the first 'e' or 'E'
+        int expPos = val.indexOf('e');
+        if (expPos == -1) {
+            expPos = val.indexOf('E');
+        }
 
+        // Detectmantissa and decimal adjustments
         if (decPos > -1) {
-
+            // Found decimal point
             if (expPos > -1) {
-                if (expPos < decPos) {
+                // Found decimal point and exponential code
+                if (expPos < decPos || expPos > val.length()) { // Check exponent is after decimal and within string bounds
                     throw new NumberFormatException(val + " is not a valid number.");
                 }
                 dec = val.substring(decPos + 1, expPos);
             } else {
+                // Found decimal point but no exponential code
                 dec = val.substring(decPos + 1);
             }
             mant = val.substring(0, decPos);
         } else {
+            // No decimal point
             if (expPos > -1) {
+                // Found exponential code but no decimal point
+                if (expPos > val.length()) { // Check exponent is within string bounds
+                    throw new NumberFormatException(val + " is not a valid number.");
+                }
                 mant = val.substring(0, expPos);
             } else {
+                // Found neither decimal point nor exponential code
                 mant = val;
             }
-            dec = null;
+            dec = null; // No decimal part
         }
-        if (!Character.isDigit(lastChar)) {
+
+        // Handle type qualifiers and parse appropriately
+        if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // Found a non-digit, non-decimal character at the end. Check if it's a type qualifier.
             if (expPos > -1 && expPos < val.length() - 1) {
+                // If exponent exists, extract it considering the suffix
                 exp = val.substring(expPos + 1, val.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
+            // Extract the numeric part before the suffix
             String numeric = val.substring(0, val.length() - 1);
+
+            // *** Fix for LANG-457: Handle case where string is only a suffix (e.g., "L") ***
+            if (numeric.length() == 0) {
+                 throw new NumberFormatException(val + " is not a valid number.");
+            }
+
+            // Check for all zeros in mantissa and exponent (used later for Float/Double precision checks)
+            // Note: isAllZeros handles null strings returning true
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
+                    // Must be an integer (no decimal or exponent allowed with L/l suffix)
                     if (dec == null
                         && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                        // Basic check for integer characters (digits, optional leading '-')
+                        && (numeric.startsWith("-") ? isDigits(numeric.substring(1)) : isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                            // Fallback to BigInteger if Long conversion fails (likely overflow)
                         }
+                        // N.B. createBigInteger can still fail if the format is bad (e.g., "--1L")
+                        // but the isDigits check above attempts to prevent this.
                         return createBigInteger(numeric);
-
                     }
+                    // Invalid format for L/l suffix
                     throw new NumberFormatException(val + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check for infinite values or loss of precision to zero
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
+                        // If Float is not suitable (infinite, or zero due to loss), fall through
+                        // (Original behavior was to fall through)
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                        // Fall through on parsing failure as well
                     }
-                    //Fall through
+                    // Fall through to Double/BigDecimal handling is questionable design but matches original code
+                    //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Check for infinite values or loss of precision to zero
+                        // Corrected: use d.doubleValue() instead of d.floatValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
+                        // If Double is not suitable, fall through to BigDecimal
                     } catch (NumberFormatException nfe) {
-                        // empty catch
+                        // Fall through on parsing failure
                     }
+                    // Fall through to BigDecimal
                     try {
+                        // Last resort for F/f/D/d suffixes
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
-                        // empty catch
+                        // If BigDecimal also fails, fall through to the final default exception
                     }
                     // Fall through
+                    //$FALL-THROUGH$
                 default :
+                    // Character is not a digit, '.', or a valid type suffix (L, F, D)
                     throw new NumberFormatException(val + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length());
+            // Last character is a digit or '.', so no type suffix is present.
+            // Determine type based on presence of decimal point and/or exponent.
+            if (expPos > -1 && expPos < val.length()) {
+                // Extract exponent part if present and has digits after 'e'/'E'
+                if (expPos < val.length() -1) {
+                   exp = val.substring(expPos + 1);
+                } else {
+                   // Exponent marker is last char (e.g. "123e") - invalid. Let subsequent parsers fail.
+                   exp = null; // Or ""? Let's use null for consistency with other exp==null cases.
+                }
             } else {
                 exp = null;
             }
+
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // No decimal, no exponent: try Integer, Long, BigInteger
                 try {
                     return createInteger(val);
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // ignore
                 }
                 try {
                     return createLong(val);
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // ignore
                 }
-                return createBigInteger(val);
+                return createBigInteger(val); // Last resort for integer types
 
             } else {
-                //Must be a float,double,BigDec
+                // Has decimal or exponent: try Float, Double, BigDecimal
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(val);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // ignore
                 }
                 try {
                     Double d = createDouble(val);
+                     // Corrected: use d.doubleValue() instead of d.floatValue()
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // ignore
                 }
-
-                return createBigDecimal(val);
-
+                return createBigDecimal(val); // Last resort for non-integer types
             }
-
         }
     }
\ No newline at end of file
