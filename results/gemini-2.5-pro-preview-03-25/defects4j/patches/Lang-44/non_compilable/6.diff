diff --git a/tmp/6bfb214b-ae91-4397-b032-627ae368c752_buggy.java b/tmp/25b9cd52-6ba8-4b37-ad5a-908eb00ae24c_fixed.java
index 4a05f03..ed68fbe 100644
--- a/tmp/6bfb214b-ae91-4397-b032-627ae368c752_buggy.java
+++ b/tmp/25b9cd52-6ba8-4b37-ad5a-908eb00ae24c_fixed.java
@@ -1,170 +1,295 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can hold the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * @param val String containing a number
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String val) throws NumberFormatException {
         if (val == null) {
             return null;
         }
         if (val.length() == 0) {
             throw new NumberFormatException("\"\" is not a valid number.");
         }
         if (val.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (val.startsWith("0x") || val.startsWith("-0x")) {
             return createInteger(val);
         }
         char lastChar = val.charAt(val.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = val.indexOf('.');
-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;
+        int expPos = val.indexOf('e') + val.indexOf('E') + 1; // Avoid multiple calls
+
+        // Detect if the value starts with +/-sign
+        boolean hasSign = val.charAt(0) == '-' || val.charAt(0) == '+';
+        // Detect trailing sign, if present
+        boolean signPresent = hasSign && (val.endsWith("L") || val.endsWith("l") || val.endsWith("F") || val.endsWith("f") || val.endsWith("D") || val.endsWith("d"));
+
+        // Check for characters after the exponent sign
+        if (expPos > -1) {
+            // Check that the exponent expression is valid, e.g. not just "1e"
+            if (expPos == val.length() - 1) {
+                 throw new NumberFormatException(val + " is not a valid number.");
+            }
+            // Check that the exponent is numeric
+            String expStr = val.substring(expPos + 1);
+            if (expStr.length() > 0 && (expStr.charAt(0) == '+' || expStr.charAt(0) == '-')) {
+                expStr = expStr.substring(1);
+            }
+            if(expStr.length() == 0 || !isDigits(expStr)){
+                 throw new NumberFormatException(val + " is not a valid number.");
+            }
+        }
+
 
         if (decPos > -1) {
-
             if (expPos > -1) {
-                if (expPos < decPos) {
+                if (expPos < decPos || expPos > val.length() -1 ) { // Check exponent position validity relative to decimal and string end
                     throw new NumberFormatException(val + " is not a valid number.");
                 }
                 dec = val.substring(decPos + 1, expPos);
+            } else {
+                // No exponent, check for type specifier
+                char potentialQualifier = val.charAt(val.length() - 1);
+                 if (Character.isLetter(potentialQualifier) && potentialQualifier != 'e' && potentialQualifier != 'E') {
+                    dec = val.substring(decPos + 1, val.length() - 1);
                  } else {
                     dec = val.substring(decPos + 1);
                  }
+            }
             mant = val.substring(0, decPos);
         } else {
             if (expPos > -1) {
+                 if (expPos > val.length() -1) {
+                    throw new NumberFormatException(val + " is not a valid number.");
+                }
                 mant = val.substring(0, expPos);
+            } else {
+                // No decimal, no exponent - could be integer or qualified float/double
+                char potentialQualifier = val.charAt(val.length() - 1);
+                if (Character.isLetter(potentialQualifier) && val.length() > 1) { // Avoid single letter strings like "L"
+                    mant = val.substring(0, val.length() - 1);
                 } else {
                     mant = val;
                 }
+            }
             dec = null;
         }
-        if (!Character.isDigit(lastChar)) {
+
+        // Handle type qualifiers at the end
+        if (!Character.isDigit(lastChar) && lastChar != '.') {
+             // Ensure exponent part exists if 'e' or 'E' is present but not last char
             if (expPos > -1 && expPos < val.length() - 1) {
                 exp = val.substring(expPos + 1, val.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
-            String numeric = val.substring(0, val.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            String numeric = val.substring(0, val.length() - 1); // String excluding the qualifier
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Use mant and exp derived above
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Check if the string before L/l is a valid integer/long format
+                    if (dec == null && exp == null) {
+                        // Handle potential signs correctly
+                        if (numeric.length() == 0 || (numeric.charAt(0) == '-' && numeric.length() == 1)) {
+                           throw new NumberFormatException(val + " is not a valid number."); // Catches "L", "-L"
+                        }
+                        String digits = numeric.charAt(0) == '-' ? numeric.substring(1) : numeric;
+                        if (isDigits(digits)) { // Checks "123L", "-123L", rejects "1.2L", "1e2L", "bobL"
                             try {
                                 return createLong(numeric);
                             } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                                // It was probably too big for a Long
                             }
                             return createBigInteger(numeric);
-
                         }
+                         // Fall through to throw exception if not digits, e.g. "bobL"
+                    }
+                    // If decimal or exponent present with L/l, it's invalid
                     throw new NumberFormatException(val + " is not a valid number.");
                 case 'f' :
                 case 'F' :
+                    // Use the pre-calculated numeric part
+                    if (numeric.length() == 0 || (numeric.charAt(0) == '-' && numeric.length() == 1)) {
+                         throw new NumberFormatException(val + " is not a valid number."); // Catches "F", "-F"
+                    }
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check for underflow/overflow issues
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                        // Invalid format, fall through
                     }
-                    //Fall through
+                     // If createFloat failed or resulted in zero/infinity inappropriately, throw error
+                    // (Removed fallthrough to Double/BigDecimal for explicit F/f)
+                     throw new NumberFormatException(val + " is not a valid number.");
+
                 case 'd' :
                 case 'D' :
+                    // Use the pre-calculated numeric part
+                     if (numeric.length() == 0 || (numeric.charAt(0) == '-' && numeric.length() == 1)) {
+                         throw new NumberFormatException(val + " is not a valid number."); // Catches "D", "-D"
+                    }
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Check for underflow/overflow issues
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
-                        // empty catch
+                       // Invalid format, fall through
                     }
+                    // If createDouble failed or resulted in zero/infinity inappropriately, try BigDecimal
                     try {
+                         // Check if numeric is valid for BigDecimal before creating it
+                         // BigDecimal constructor can throw NumberFormatException for invalid formats like "1.2e"
+                         if (!isValidBigDecimalString(numeric)) {
+                              throw new NumberFormatException(val + " is not a valid number.");
+                         }
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
-                        // empty catch
+                        // If BigDecimal also fails
+                        throw new NumberFormatException(val + " is not a valid number.");
                     }
-                    //Fall through
+
                 default :
+                    // Qualifier is not L, F, D
                     throw new NumberFormatException(val + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length());
+            // No type qualifier, determine type based on presence of decimal or exponent
+             if (expPos > -1 && expPos < val.length() ) { // expPos checked for validity earlier
+                 exp = val.substring(expPos + 1); // Exponent is from expPos+1 to end
              } else {
                  exp = null;
              }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+            if (dec == null && exp == null) { // Should be Integer, Long, or BigInteger
+                 // Check for leading + sign which createInteger/Long/BigInteger might reject
+                String numberToCheck = val;
+                 if (val.charAt(0) == '+') {
+                    numberToCheck = val.substring(1);
+                 }
+
+                if(numberToCheck.length() == 0 || !isDigits(numberToCheck.charAt(0) == '-' ? numberToCheck.substring(1) : numberToCheck)) {
+                    // Reject strings like "+", "-" or containing non-digits
+                    throw new NumberFormatException(val + " is not a valid number.");
+                }
+
                 try {
                     return createInteger(val);
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // Not an Integer
                 }
                 try {
                     return createLong(val);
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // Not a Long
                 }
+                // Must be BigInteger
                 return createBigInteger(val);
 
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            } else { // Should be Float, Double, or BigDecimal
+                boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Re-evaluate based on final mant/exp
                  try {
-                    Float f = createFloat(val);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        return f;
+                    // Check if valid for BigDecimal first to avoid precision loss with Float/Double
+                    // if the number can be perfectly represented.
+                     if (!isValidBigDecimalString(val)) {
+                         throw new NumberFormatException(val + " is not a valid number.");
                     }
-                } catch (NumberFormatException nfe) {
-                    // empty catch
+
+                    BigDecimal bigDec = createBigDecimal(val);
+                    // If it fits in a Double with no loss of precision and isn't infinite/zero inappropriately
+                     if (bigDec.compareTo(BigDecimal.valueOf(bigDec.doubleValue())) == 0 && !(bigDec.doubleValue() == 0.0 && !allZeros) && !Double.isInfinite(bigDec.doubleValue()) ) {
+                         Double d = bigDec.doubleValue();
+                          // Check if it also fits in a Float
+                         if (bigDec.compareTo(BigDecimal.valueOf(bigDec.floatValue())) == 0 && !(bigDec.floatValue() == 0.0F && !allZeros) && !Float.isInfinite(bigDec.floatValue())) {
+                             return bigDec.floatValue();
                          }
-                try {
-                    Double d = createDouble(val);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                          return d;
                      }
+                     // Otherwise, return as BigDecimal
+                     return bigDec;
+
                  } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // Should not happen if isValidBigDecimalString passed, but handle defensively
+                     throw new NumberFormatException(val + " is not a valid number.");
+                 }
+            }
+        }
     }
 
-                return createBigDecimal(val);
+    // Helper method to check for all zeros (implementation assumed elsewhere)
+    private static boolean isAllZeros(String str) {
+        if (str == null) {
+            return true;
+        }
+        for (int i = str.length() - 1; i >= 0; i--) {
+            if (str.charAt(i) != '0') {
+                return false;
+            }
+        }
+        return str.length() > 0;
+    }
 
+     // Helper method to check if a string consists of digits (implementation assumed elsewhere)
+    private static boolean isDigits(String str) {
+         if (str == null || str.length() == 0) {
+             return false;
+         }
+         for (int i = 0; i < str.length(); i++) {
+             if (!Character.isDigit(str.charAt(i))) {
+                 return false;
+             }
+         }
+         return true;
      }
 
+     // Helper method (you might need to create this or use an existing utility)
+     // to validate string format before passing to BigDecimal constructor.
+     // This is a basic check; a robust one might use regex or more detailed parsing.
+    private static boolean isValidBigDecimalString(String s) {
+        if (s == null || s.length() == 0) return false;
+        // Simplified check: allows digits, optional sign, optional decimal, optional exponent
+        // Does not fully validate exponent format or multiple decimals/signs.
+        // A proper validation might be needed depending on strictness required.
+        try {
+            new java.math.BigDecimal(s);
+            return true;
+        } catch (NumberFormatException nfe) {
+            return false;
         }
     }
+    // Assumed helper methods (implementations not shown but required by the original code)
+    // private static Integer createInteger(String str) { ... }
+    // private static Long createLong(String str) { ... }
+    // private static BigInteger createBigInteger(String str) { ... }
+    // private static Float createFloat(String str) { ... }
+    // private static Double createDouble(String str) { ... }
+    // private static BigDecimal createBigDecimal(String str) { ... }
\ No newline at end of file
