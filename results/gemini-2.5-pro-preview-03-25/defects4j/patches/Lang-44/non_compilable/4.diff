diff --git a/tmp/ad5bcca2-8ae0-40bf-ae9b-c05fecebfb7a_buggy.java b/tmp/3b310a52-555e-42d0-8060-d33ef99b0716_fixed.java
index 4a05f03..0c15e6c 100644
--- a/tmp/ad5bcca2-8ae0-40bf-ae9b-c05fecebfb7a_buggy.java
+++ b/tmp/3b310a52-555e-42d0-8060-d33ef99b0716_fixed.java
@@ -1,170 +1,264 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can hold the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * @param val String containing a number
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String val) throws NumberFormatException {
         if (val == null) {
             return null;
         }
         if (val.length() == 0) {
             throw new NumberFormatException("\"\" is not a valid number.");
         }
         if (val.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (val.startsWith("0x") || val.startsWith("-0x")) {
             return createInteger(val);
         }
         char lastChar = val.charAt(val.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = val.indexOf('.');
         int expPos = val.indexOf('e') + val.indexOf('E') + 1;
 
+        // Check for negative exponent
+        if (expPos > -1) {
+            // Check that the exponent is valid
+            if (expPos > val.length() -1) {
+                 throw new NumberFormatException(val + " is not a valid number.");
+            }
+            // Check for '-' sign in exponent
+            if (expPos > decPos && decPos != -1 && val.charAt(expPos -1) == '-') {
+                 throw new NumberFormatException(val + " is not a valid number.");
+            }
+         }
+
+
         if (decPos > -1) {
 
             if (expPos > -1) {
-                if (expPos < decPos) {
+                if (expPos < decPos || expPos > val.length() -1) { // check exponent pos relative to string length
                     throw new NumberFormatException(val + " is not a valid number.");
                 }
                 dec = val.substring(decPos + 1, expPos);
             } else {
                 dec = val.substring(decPos + 1);
             }
             mant = val.substring(0, decPos);
         } else {
             if (expPos > -1) {
+                if (expPos > val.length() - 1) { // check exponent pos relative to string length
+                    throw new NumberFormatException(val + " is not a valid number.");
+                }
                 mant = val.substring(0, expPos);
             } else {
                 mant = val;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar)) {
             if (expPos > -1 && expPos < val.length() - 1) {
                 exp = val.substring(expPos + 1, val.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             String numeric = val.substring(0, val.length() - 1);
+            // Must implement isAllZeros. Assuming it exists and works.
+            // Signature: private static boolean isAllZeros(String str)
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
+                    // Check if the explicit L/l is preceded by digits only (+ optional - sign)
+                    // and is not part of a potential float/double/decimal number.
                     if (dec == null
                         && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                        && !numeric.isEmpty() // Ensure numeric part is not empty
+                        && ( (numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric) ) ) {
                         try {
+                            // Use lang3 method for consistency if available, else standard parseLong
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
                             //Too big for a long
                         }
+                        // Use lang3 method for consistency if available, else standard BigInteger constructor
                         return createBigInteger(numeric);
 
                     }
+                    // If the conditions are not met, it's not a valid Long/BigInteger format with L/l suffix
                     throw new NumberFormatException(val + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        // Use lang3 method for consistency if available, else standard parseFloat
+                        Float f = createFloat(numeric);
+                        // Use equals() method for comparison to avoid precision issues with == for floats
+                        // Check for underflow/overflow issues indicated by isInfinite or zero result for non-zero input
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
+                            //If it's too big/small for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                        // ignore the bad number; proceed to check Double/BigDecimal
                     }
-                    //Fall through
+                    // Fall through intended for d/D case or final BigDecimal attempt
+
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                         // Use lang3 method for consistency if available, else standard parseDouble
+                        Double d = createDouble(numeric);
+                        // Check for underflow/overflow issues indicated by isInfinite or zero result for non-zero input
+                        // Note: Using floatValue() comparison here is likely a bug, should be doubleValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed d.floatValue() to d.doubleValue()
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
-                        // empty catch
+                        // empty catch, ignore and proceed to BigDecimal
                     }
+                    // Fall through after attempting Double
                     try {
+                         // Use lang3 method for consistency if available, else standard BigDecimal constructor
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
-                        // empty catch
+                        // If BigDecimal also fails, throw the final exception
+                        throw new NumberFormatException(val + " is not a valid number.");
                     }
-                    //Fall through
+                    // Fall through to default is not strictly needed here after BigDecimal try/catch
+                    // but kept for structural similarity if future logic were added.
                 default :
+                    // The character is not a recognized digit or type suffix
                     throw new NumberFormatException(val + " is not a valid number.");
 
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
+            //User doesn't have a preference on the return type (no suffix), so let's start
             //small and go from there...
             if (expPos > -1 && expPos < val.length() - 1) {
                 exp = val.substring(expPos + 1, val.length());
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                 // Must be an Integer, Long, or BigInteger
+                 // Check if the string is composed of digits only (+ optional - sign)
+                 if (isDigits(val) || (val.charAt(0) == '-' && isDigits(val.substring(1)))) {
                     try {
+                         // Use lang3 method for consistency if available, else standard parseInt
                         return createInteger(val);
                     } catch (NumberFormatException nfe) {
-                    // empty catch
+                        // empty catch, try Long
                     }
                     try {
+                         // Use lang3 method for consistency if available, else standard parseLong
                         return createLong(val);
                     } catch (NumberFormatException nfe) {
-                    // empty catch
+                        // empty catch, try BigInteger
                     }
+                    // Use lang3 method for consistency if available, else standard BigInteger constructor
                     return createBigInteger(val);
+                 } else {
+                    // String contains non-digit characters and is not hex (checked earlier)
+                    throw new NumberFormatException(val + " is not a valid number.");
+                 }
 
             } else {
-                //Must be a float,double,BigDec
+                // Must be a Float, Double, or BigDecimal
+                // Must implement isAllZeros. Assuming it exists and works.
+                // Signature: private static boolean isAllZeros(String str)
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
+                     // Use lang3 method for consistency if available, else standard parseFloat
                     Float f = createFloat(val);
+                     // Use equals() method for comparison to avoid precision issues with == for floats
+                     // Check for underflow/overflow issues indicated by isInfinite or zero result for non-zero input
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // empty catch, try Double
                 }
                 try {
+                     // Use lang3 method for consistency if available, else standard parseDouble
                     Double d = createDouble(val);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                     // Check for underflow/overflow issues indicated by isInfinite or zero result for non-zero input
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed d.floatValue() to d.doubleValue()
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // empty catch, try BigDecimal
                 }
-
+                 // Use lang3 method for consistency if available, else standard BigDecimal constructor
                 return createBigDecimal(val);
 
             }
 
         }
     }
+
+    // Helper methods assumed to exist (based on original code context in Apache Commons Lang)
+    // These need to be present in the NumberUtils class or imported.
+
+    private static boolean isDigits(String str) {
+        if (str == null || str.length() == 0) {
+            return false;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (!Character.isDigit(str.charAt(i))) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private static boolean isAllZeros(String str) {
+       if (str == null) {
+           return true; // Treat null exponent/mantissa part as all zeros
+       }
+       for (int i = str.length() - 1; i >= 0; i--) {
+           if (str.charAt(i) != '0') {
+               return false;
+           }
+       }
+       // Return true if str is not null and contains only zeros or is empty
+       // Empty string could be considered all zeros in this context
+       return str.length() > 0;
+    }
+
+    // Assumed createX methods (should exist in NumberUtils)
+    private static Integer createInteger(String val) { return Integer.decode(val); }
+    private static Long createLong(String val) { return Long.decode(val); } // Use decode for hex/octal if needed, else parseLong
+    private static BigInteger createBigInteger(String val) {
+        if (val.startsWith("0x") || val.startsWith("-0x")) {
+             return new BigInteger(val.substring(val.startsWith("-") ? 3 : 2), 16);
+        }
+        return new BigInteger(val);
+    }
+    private static Float createFloat(String val) { return Float.valueOf(val); }
+    private static Double createDouble(String val) { return Double.valueOf(val); }
+    private static BigDecimal createBigDecimal(String val) { return new BigDecimal(val); }
