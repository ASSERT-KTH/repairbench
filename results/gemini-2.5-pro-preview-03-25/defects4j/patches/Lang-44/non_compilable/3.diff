diff --git a/tmp/f73712ca-fa28-49d9-9fb7-aa360db03b21_buggy.java b/tmp/ac3b6fca-3306-4d0b-a42f-2f9f74d41072_fixed.java
index 4a05f03..f5b3fc0 100644
--- a/tmp/f73712ca-fa28-49d9-9fb7-aa360db03b21_buggy.java
+++ b/tmp/ac3b6fca-3306-4d0b-a42f-2f9f74d41072_fixed.java
@@ -1,170 +1,339 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Assume NumberUtils class exists and these helpers are available/defined,
+// potentially as private static methods within NumberUtils itself.
+// We need: createFloat, createDouble, createInteger, createLong, createBigInteger, createBigDecimal.
+// We also need isAllZeros helper method.
+
+public class FixedNumberUtils { // Renamed class for clarity
+
+    // Placeholder for the assumed helper methods (implementations need to be provided/exist)
+    // These should ideally handle hex/octal prefixes, signs appropriately.
+    // For this fix, we assume they exist and behave like standard Java parsing (e.g., valueOf, decode, new BigDecimal).
+    private static Float createFloat(String s) throws NumberFormatException { return Float.valueOf(s); }
+    private static Double createDouble(String s) throws NumberFormatException { return Double.valueOf(s); }
+    private static Integer createInteger(String s) throws NumberFormatException { return Integer.decode(s); } // Assumes decode for hex/octal
+    private static Long createLong(String s) throws NumberFormatException { return Long.decode(s); } // Assumes decode for hex/octal
+    private static BigInteger createBigInteger(String s) throws NumberFormatException {
+        int index = 0;
+        int radix = 10;
+        boolean negative = false;
+        if (s.startsWith("-")) {
+            negative = true;
+            index++;
+        } else if (s.startsWith("+")) {
+            index++;
+        }
+        if (s.startsWith("0x", index) || s.startsWith("0X", index)) {
+            index += 2;
+            radix = 16;
+        } else if (s.startsWith("#", index)) {
+             index++;
+             radix = 16;
+        }
+        // Standard BigInteger constructor doesn't handle '0' octal prefix by default
+        String num = s.substring(index);
+        if (num.isEmpty()) {
+            // Handle case like "+" or "-" or "0x"
+            throw new NumberFormatException("Illegal embedded sign character or empty number");
+        }
+        BigInteger bi = new BigInteger(num, radix);
+        return negative ? bi.negate() : bi;
+    }
+    private static BigDecimal createBigDecimal(String s) throws NumberFormatException { return new BigDecimal(s); }
+
+    /**
+     * Checks if the string {@code s} contains only zeros.
+     * Handles {@code null} input by returning {@code true}.
+     */
+    private static boolean isAllZeros(String s) {
+        if (s == null) {
+            return true;
+        }
+        for (int i = 0; i < s.length(); i++) {
+            if (s.charAt(i) != '0') {
+                return false;
+            }
+        }
+        // Returns true if s is null, empty, or contains only '0's.
+        return true;
+    }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can hold the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
+     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (or <code>0X</code> / <code>-0X</code>), it
      * will be interpreted as a hexadecimal integer. Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
+     * <code>0</code>'s *might* be interpreted as octal depending on the
+     * underlying parsing method (e.g., <code>Integer.decode</code> does).</p>
      *
      * @param val String containing a number
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String val) throws NumberFormatException {
         if (val == null) {
             return null;
         }
         if (val.length() == 0) {
             throw new NumberFormatException("\"\" is not a valid number.");
         }
+
+        // Handle common prefixes/suffixes that indicate specific types or invalid patterns
         if (val.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
-            return null;
+             // Reject -- which is parsed inconsistently and is likely invalid intent
+             throw new NumberFormatException(val + " is not a valid number.");
         }
-        if (val.startsWith("0x") || val.startsWith("-0x")) {
+        // Handle Hex Numbers: 0x or -0x (and case variants)
+        if (val.startsWith("0x") || val.startsWith("-0x") || val.startsWith("0X") || val.startsWith("-0X")) {
+            // Use appropriate parsing method that handles hex (decode or BigInteger with radix)
+             try {
+                  // Try Integer first (assuming createInteger uses decode or similar)
                   return createInteger(val);
+             } catch (NumberFormatException nfe){
+                 try {
+                      // Try Long next (assuming createLong uses decode or similar)
+                      return createLong(val);
+                 } catch (NumberFormatException nfe2){
+                      // Fallback to BigInteger for potentially very large hex numbers
+                      return createBigInteger(val);
                  }
+             }
+        }
+        // Reject underscores in non-hex numbers as standard parse methods don't support them
+        if (val.contains("_")){
+             throw new NumberFormatException(val + " contains underscores and is not a valid number.");
+        }
+
         char lastChar = val.charAt(val.length() - 1);
+
+        // Find decimal and exponent separators
+        int decPos = val.indexOf('.');
+        int expPos = val.indexOf('e');
+        if (expPos == -1) {
+            expPos = val.indexOf('E');
+        }
+
+        // Basic structural validation BEFORE splitting based on potential qualifier
+        String numeric = val; // Assume no qualifier initially
+        boolean hasQualifier = false;
+        char qualifier = 0;
+
+        // Check for trailing exponent/decimal issues on the full string
+        if (expPos > -1) {
+            if (decPos > -1 && expPos < decPos) { // Exponent before decimal "1e2.3"
+                throw new NumberFormatException(val + " is not a valid number.");
+            }
+            if (expPos == val.length() - 1) { // Trailing exponent "1e"
+                 throw new NumberFormatException(val + " is not a valid number.");
+            }
+        }
+         if (val.equals(".") || val.equals("-.") || val.equals("+.")) { // Just a dot or sign+dot
+             throw new NumberFormatException(val + " is not a valid number.");
+         }
+        // Check for invalid trailing sign
+        if (lastChar == '+' || lastChar == '-') {
+             throw new NumberFormatException(val + " is not a valid number.");
+        }
+
+        // Check for Type Qualifier ('f','F','d','D','l','L')
+        if (Character.isLetter(lastChar)) {
+            if (lastChar == 'l' || lastChar == 'L' || lastChar == 'f' ||
+                lastChar == 'F' || lastChar == 'd' || lastChar == 'D') {
+
+                 numeric = val.substring(0, val.length() - 1);
+                 // Prevent StringIndexOutOfBoundsException for "L", "F" etc. and invalid forms like "-L", "+L"
+                 if (numeric.isEmpty() || numeric.equals("-") || numeric.equals("+")) {
+                      throw new NumberFormatException(val + " is not a valid number.");
+                 }
+                 // Check last char of numeric part isn't a sign either ("1+L", "1-F")
+                 char lastNumericChar = numeric.charAt(numeric.length() - 1);
+                 if (lastNumericChar == '+' || lastNumericChar == '-') {
+                      throw new NumberFormatException(val + " is not a valid number.");
+                 }
+
+                 hasQualifier = true;
+                 qualifier = lastChar;
+            } else {
+                // Ends in a letter that is not a valid qualifier
+                 throw new NumberFormatException(val + " is not a valid number.");
+            }
+        }
+        // Note: If no qualifier, 'numeric' remains equal to 'val'.
+
+        // Recalculate positions based on the 'numeric' string (after potential qualifier removal).
+        int numericDecPos = numeric.indexOf('.');
+        int numericExpPos = numeric.indexOf('e');
+        if (numericExpPos == -1) {
+            numericExpPos = numeric.indexOf('E');
+        }
+
+        // Further structural checks now on 'numeric' part
+        if (numericDecPos > -1 && numeric.indexOf('.', numericDecPos + 1) > -1) { // Multiple decimal points
+             throw new NumberFormatException(numeric + " is not a valid number.");
+        }
+        if (numericExpPos > -1) { // Check structure around exponent
+             if ( (numeric.indexOf('e', numericExpPos + 1) > -1 || numeric.indexOf('E', numericExpPos + 1) > -1) ) { // Multiple exponents
+                throw new NumberFormatException(numeric + " has multiple exponents and is not a valid number.");
+             }
+             // Check if char after E/e is valid (digit or sign) - handled by createX methods mostly, but basic check:
+             if (numericExpPos + 1 < numeric.length()) {
+                 char charAfterExp = numeric.charAt(numericExpPos + 1);
+                 if (charAfterExp != '+' && charAfterExp != '-' && !Character.isDigit(charAfterExp)) {
+                    throw new NumberFormatException("Invalid character " + charAfterExp + " after exponent in " + numeric);
+                 }
+             } // Trailing 'e'/'E' was already checked on 'val'
+
+             // Check exponent part for validity (e.g., signs only allowed at start)
+             String expPart = numeric.substring(numericExpPos + 1);
+             if (expPart.indexOf('+') > 0 || expPart.indexOf('-') > 0) {
+                 throw new NumberFormatException("Invalid sign in exponent " + expPart + " in " + numeric);
+             }
+             if (expPart.isEmpty() || expPart.equals("+") || expPart.equals("-")) {
+                // Should have been caught by trailing 'e' check, but double check structure
+                 throw new NumberFormatException("Invalid or empty exponent in " + numeric);
+             }
+        }
+        // Check if sign character appears mid-string (outside of exponent)
+        int signPos = numeric.indexOf('+');
+        if (signPos > 0 && signPos != numericExpPos + 1) throw new NumberFormatException(numeric + " has misplaced '+' sign.");
+        signPos = numeric.indexOf('-');
+        // Allow sign only at start (index 0) or right after 'e'/'E' (index numericExpPos + 1)
+        if (signPos > 0 && signPos != numericExpPos + 1) throw new NumberFormatException(numeric + " has misplaced '-' sign.");
+
+
+        // Split numeric into components (mantissa, decimal, exponent) for the 'allZeros' check
         String mant;
         String dec;
         String exp;
-        int decPos = val.indexOf('.');
-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;
-
-        if (decPos > -1) {
-
-            if (expPos > -1) {
-                if (expPos < decPos) {
-                    throw new NumberFormatException(val + " is not a valid number.");
-                }
-                dec = val.substring(decPos + 1, expPos);
+        if (numericDecPos > -1) {
+            if (numericExpPos > -1) {
+                mant = numeric.substring(0, numericDecPos);
+                dec = numeric.substring(numericDecPos + 1, numericExpPos);
             } else {
-                dec = val.substring(decPos + 1);
+                mant = numeric.substring(0, numericDecPos);
+                dec = numeric.substring(numericDecPos + 1);
             }
-            mant = val.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                mant = val.substring(0, expPos);
+        } else { // No decimal
+            if (numericExpPos > -1) {
+                mant = numeric.substring(0, numericExpPos);
             } else {
-                mant = val;
+                mant = numeric;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar)) {
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length() - 1);
+        if (numericExpPos > -1 ) {
+            exp = numeric.substring(numericExpPos + 1);
         } else {
             exp = null;
         }
-            //Requesting a specific type..
-            String numeric = val.substring(0, val.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
+
+
+        // Create number based on qualifier or content
+        if (hasQualifier) {
+             boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Fixed: checks all parts
+             switch (qualifier) {
                  case 'l' :
                  case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                     // Qualifier L/l requires integer format (no decimal, no exponent)
+                     if (numericDecPos == -1 && numericExpPos == -1) {
                          try {
+                             // Use createLong first (assumes handles hex/octal via decode)
                              return createLong(numeric);
                          } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
+                             // Fallback to BigInteger for range
                              return createBigInteger(numeric);
-
                          }
+                     }
+                     // Invalid format for L/l (e.g., "1.2L", "1e2L")
                      throw new NumberFormatException(val + " is not a valid number.");
+
                  case 'f' :
                  case 'F' :
                      try {
-                        Float f = NumberUtils.createFloat(numeric);
+                         Float f = createFloat(numeric); // Assumes Float.valueOf
+                         // Check for infinity or zero result where original string wasn't all zeros
                          if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                              return f;
                          }
-
+                         // If Inf, NaN, or 0.0 from non-zero, fall through to Double/BigDecimal
                      } catch (NumberFormatException e) {
-                        // ignore the bad number
+                         // If createFloat fails (e.g., invalid format), fall through to try Double/BigDecimal
                      }
-                    //Fall through
+                     // Fall through intended
+
                  case 'd' :
                  case 'D' :
+                     // Handles 'd', 'D', and fallthrough from 'f', 'F'
                      try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                         Double d = createDouble(numeric); // Assumes Double.valueOf
+                         // Check for infinity or zero result where original string wasn't all zeros
+                         if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Fixed: use doubleValue()
                              return d;
                          }
+                         // If Inf, NaN, or 0.0 from non-zero, fall through to BigDecimal
                      } catch (NumberFormatException nfe) {
-                        // empty catch
+                         // If createDouble fails, fall through to BigDecimal
                      }
+                     // Final attempt with BigDecimal for F/f/D/d suffixes
                      try {
+                         return createBigDecimal(numeric); // Assumes new BigDecimal(String)
+                     } catch (NumberFormatException e) {
+                          // If all attempts (Float, Double, BigDecimal) fail for this numeric part, throw
+                          throw new NumberFormatException(val + " is not a valid number.");
+                     }
+                 // Default case should not be reachable due to checks on qualifier char
+             }
+         } else { // No qualifier - determine type from content
+             if (numericDecPos == -1 && numericExpPos == -1) {
+                 // Looks like an integer (no decimal, no exponent)
+                 try {
+                     // Try Integer (assuming handles hex/octal via decode)
+                     return createInteger(numeric);
+                 } catch (NumberFormatException nfe) { /* ignore */ }
+                 try {
+                      // Try Long (assuming handles hex/octal via decode)
+                     return createLong(numeric);
+                 } catch (NumberFormatException nfe) { /* ignore */ }
+                 // Final fallback for integers is BigInteger
+                 return createBigInteger(numeric);
+
+             } else {
+                 // Looks like a floating point number
+                 boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Fixed: checks all parts
+                 try {
+                     // Try float first
+                     Float f = createFloat(numeric);
+                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                         return f;
+                     }
+                 } catch (NumberFormatException nfe) { /* ignore */ }
+                 try {
+                     // Try double next
+                     Double d = createDouble(numeric);
+                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Fixed: use doubleValue()
+                         return d;
+                     }
+                 } catch (NumberFormatException nfe) { /* ignore */ }
+                 // Final fallback to BigDecimal for precision/range
                  return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // empty catch
              }
-                    //Fall through
-                default :
-                    throw new NumberFormatException(val + " is not a valid number.");
-
-            }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length());
-            } else {
-                exp = null;
-            }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
-                try {
-                    return createInteger(val);
-                } catch (NumberFormatException nfe) {
-                    // empty catch
-                }
-                try {
-                    return createLong(val);
-                } catch (NumberFormatException nfe) {
-                    // empty catch
-                }
-                return createBigInteger(val);
-
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-                try {
-                    Float f = createFloat(val);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        return f;
          }
-                } catch (NumberFormatException nfe) {
-                    // empty catch
+         // This part should ideally be unreachable if all paths return or throw.
+         // Adding assertion for safety.
+         throw new AssertionError("Logic error in createNumber: Fell through all cases for value '" + val + "'");
     }
-                try {
-                    Double d = createDouble(val);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                        return d;
-                    }
-                } catch (NumberFormatException nfe) {
-                    // empty catch
-                }
-
-                return createBigDecimal(val);
 
 }
-
-        }
-    }
