diff --git a/tmp/0ccc8e16-0f8e-4b80-9882-e77a222ccc5e_buggy.java b/tmp/d4bfba18-e0ab-4b16-9f53-ac9a94e414dd_fixed.java
index 4a05f03..ba5b324 100644
--- a/tmp/0ccc8e16-0f8e-4b80-9882-e77a222ccc5e_buggy.java
+++ b/tmp/d4bfba18-e0ab-4b16-9f53-ac9a94e414dd_fixed.java
@@ -1,170 +1,286 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Added imports for clarity, assuming they are available.
+// Removed class definition as only the method is required.
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can hold the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
+     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (or <code>0X</code> or <code>-0X</code>),
+     * it will be interpreted as a hexadecimal integer. Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * @param val String containing a number
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String val) throws NumberFormatException {
         if (val == null) {
             return null;
         }
         if (val.length() == 0) {
             throw new NumberFormatException("\"\" is not a valid number.");
         }
         if (val.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
-            // a wrong value.
+            // a wrong value. (LANG-1BigDecimal constructor is buggy)
+            // Return null as historically users may have expected this behavior.
             return null;
         }
-        if (val.startsWith("0x") || val.startsWith("-0x")) {
+        // Handle hexadecimal numbers (0x or 0X)
+        if (val.startsWith("0x") || val.startsWith("-0x") || val.startsWith("0X") || val.startsWith("-0X")) {
+             int signLen = (val.startsWith("-") ? 1 : 0);
+             // Check if string is only "0x", "-0x", "0X", "-0X"
+             if (val.length() <= signLen + 2) {
+                 throw new NumberFormatException(val + " is not a valid number.");
+             }
+             // Ensure characters after hex prefix are valid hex digits
+             for (int i = signLen + 2; i < val.length(); i++) {
+                 char c = val.charAt(i);
+                 if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                     throw new NumberFormatException(val + " is not a valid number."); // Invalid hex character
+                 }
+             }
+             // Use Integer.decode to handle hex, or implement custom logic if needed elsewhere
+             // Assuming createInteger handles hex like Integer.decode does
             return createInteger(val);
         }
+
         char lastChar = val.charAt(val.length() - 1);
-        String mant;
-        String dec;
-        String exp;
+        String mant; // Part before decimal/exponent
+        String exp;  // Part after exponent marker
+
         int decPos = val.indexOf('.');
-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;
+        int ePos = val.indexOf('e');
+        int EPos = val.indexOf('E');
+        int expPos = Math.max(ePos, EPos); // Store correct exponent position
 
-        if (decPos > -1) {
+        // Check if the string represents a qualified number (ends in L,l,F,f,D,d)
+        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {
+            // Check for valid suffixes
+            if (lastChar == 'd' || lastChar == 'D' || lastChar == 'f' || lastChar == 'F' || lastChar == 'l' || lastChar == 'L') {
+                 // Check if suffix is immediately after exponent marker (e.g., "1eL") -> invalid
+                 if (expPos != -1 && expPos == val.length() - 2) {
+                     throw new NumberFormatException(val + " is not a valid number.");
+                 }
 
-            if (expPos > -1) {
-                if (expPos < decPos) {
+                 String numeric = val.substring(0, val.length() - 1); // String without the suffix
+
+                 // FIX: Check if the numeric part is empty (e.g., "L") or just a sign ("-L", "+L")
+                 if (numeric.length() == 0 || numeric.equals("-") || numeric.equals("+")) {
                      throw new NumberFormatException(val + " is not a valid number.");
                  }
-                dec = val.substring(decPos + 1, expPos);
-            } else {
-                dec = val.substring(decPos + 1);
+                 // Check for "--" prefix within the numeric part as well
+                 if (numeric.startsWith("--")) {
+                     return null; // Consistent with the initial check
                  }
-            mant = val.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                mant = val.substring(0, expPos);
+
+                 // Calculate mantissa/exponent parts based on 'numeric' for allZeros check
+                 // This logic assumes isAllZeros helper exists and correctly checks if parts are all zero digits.
+                 String numMant;
+                 String numExp;
+                 int numDecPos = numeric.indexOf('.');
+                 int numEPos = numeric.indexOf('e');
+                 int numBigEPos = numeric.indexOf('E');
+                 int numExpPos = Math.max(numEPos, numBigEPos);
+
+                 if (numDecPos > -1) {
+                     if (numExpPos > -1) {
+                         if (numExpPos < numDecPos || numExpPos > numeric.length()) { // Check bounds and order
+                             throw new NumberFormatException(val + " is not a valid number.");
+                         }
+                         numMant = numeric.substring(0, numDecPos);
+                         numExp = numeric.substring(numExpPos + 1);
                      } else {
-                mant = val;
+                         numMant = numeric.substring(0, numDecPos);
+                         numExp = null;
+                     }
+                 } else { // No decimal point
+                     if (numExpPos > -1) {
+                          if (numExpPos > numeric.length()) { // Check bounds
+                              throw new NumberFormatException(val + " is not a valid number.");
                           }
-            dec = null;
+                         numMant = numeric.substring(0, numExpPos);
+                         numExp = numeric.substring(numExpPos + 1);
+                     } else { // Integer format
+                         numMant = numeric;
+                         numExp = null;
                      }
-        if (!Character.isDigit(lastChar)) {
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length() - 1);
-            } else {
-                exp = null;
                  }
-            //Requesting a specific type..
-            String numeric = val.substring(0, val.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                 // Assuming isAllZeros helper exists and handles null correctly
+                 boolean allZeros = isAllZeros(numMant) && isAllZeros(numExp);
+
                  switch (lastChar) {
                      case 'l':
                      case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                         // Long type requested: numeric part must not have '.', 'e', or 'E'
+                         if (numDecPos == -1 && numExpPos == -1) {
                              try {
+                                 // Rely on createLong/BigInteger to handle format parsing and range.
+                                 // createBigInteger should throw NFE for invalid formats like "abcL".
                                  return createLong(numeric);
                              } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
+                                 // Input is likely too large for Long, try BigInteger
                                  return createBigInteger(numeric);
-
                              }
+                         }
+                         // Contains invalid characters for Long type
                          throw new NumberFormatException(val + " is not a valid number.");
                      case 'f':
                      case 'F':
                          try {
-                        Float f = NumberUtils.createFloat(numeric);
+                             // Assuming createFloat helper exists (could be Float.valueOf)
+                             Float f = createFloat(numeric);
+                             // Check for infinity and potential precision loss (value is 0, but string wasn't)
                              if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                                  return f;
                              }
-
+                             // If Float is not suitable, fall through to try Double/BigDecimal
                          } catch (NumberFormatException e) {
-                        // ignore the bad number
+                             // Fall through: Allow Double/BigDecimal check even if Float parsing fails?
+                             // Original code suggests fall-through.
                          }
                          // Fall through
                      case 'd':
                      case 'D':
                          try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                            // Assuming createDouble helper exists (could be Double.valueOf)
+                             Double d = createDouble(numeric);
+                             // FIX: Use doubleValue() for the check, not floatValue()
+                             if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                                  return d;
                              }
+                             // If Double is not suitable, fall through to try BigDecimal
                          } catch (NumberFormatException nfe) {
-                        // empty catch
+                             // Fall through
                          }
                          try {
+                            // Assuming createBigDecimal helper exists (could be new BigDecimal)
                              return createBigDecimal(numeric);
                          } catch (NumberFormatException e) {
-                        // empty catch
+                             // If Float/Double were unsuitable or failed, and BigDecimal also fails,
+                             // the original numeric string was likely invalid.
                          }
-                    //Fall through
-                default :
+                         // If we reach here, indicates failure after fall-through.
                          throw new NumberFormatException(val + " is not a valid number.");
 
+                     // Default case should not be reachable as suffix is checked above
                  }
             } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < val.length() - 1) {
-                exp = val.substring(expPos + 1, val.length());
-            } else {
-                exp = null;
+                 // Last character is a letter but not a valid suffix (e, E handled elsewhere)
+                 throw new NumberFormatException(val + " is not a valid number.");
+            }
+
+        } else { // Last character is a digit or potentially 'e'/'E' if exponent is last
+            // Check for invalid exponent formats like "1e", "1e+", "1e-" at the end
+             if (expPos > -1 && expPos >= val.length() - 1) { // Exponent marker is last char
+                 throw new NumberFormatException(val + " is not a valid number.");
              }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+             if (expPos > -1 && (val.charAt(expPos+1) == '+' || val.charAt(expPos+1) == '-')) {
+                 if (expPos + 1 == val.length() - 1) { // Sign is the very last char after e/E
+                     throw new NumberFormatException(val + " is not a valid number.");
+                 }
+             }
+
+            // No type suffix; determine type based on content (decimal/exponent)
+            if (decPos == -1 && expPos == -1) {
+                // Looks like an Integer, Long, or BigInteger
                 try {
                     return createInteger(val);
-                } catch (NumberFormatException nfe) {
-                    // empty catch
-                }
+                } catch (NumberFormatException nfe) { /* ignore */ }
                 try {
                     return createLong(val);
-                } catch (NumberFormatException nfe) {
-                    // empty catch
-                }
+                } catch (NumberFormatException nfe) { /* ignore */ }
+                // Rely on createBigInteger for final validation (handles range and format like "+")
                 return createBigInteger(val);
 
             } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                // Looks like a Float, Double, or BigDecimal
+                 // Calculate mantissa/exponent parts based on 'val' for allZeros check
+                 String currentMant;
+                 String currentExp;
+                 if (decPos > -1) {
+                     if (expPos > -1) {
+                         // Ensure exponent comes after decimal for standard notation
+                          if (expPos < decPos) {
+                              throw new NumberFormatException(val + " is not a valid number.");
+                          }
+                         currentMant = val.substring(0, decPos);
+                         currentExp = val.substring(expPos + 1);
+                     } else { // Has decimal, no exponent
+                         currentMant = val.substring(0, decPos);
+                         currentExp = null;
+                     }
+                 } else { // No decimal, must have exponent if we're in this else block
+                     currentMant = val.substring(0, expPos);
+                     currentExp = val.substring(expPos + 1);
+                 }
+                boolean allZeros = isAllZeros(currentMant) && isAllZeros(currentExp);
+
                 try {
                     Float f = createFloat(val);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) {
-                    // empty catch
-                }
+                } catch (NumberFormatException nfe) { /* ignore */ }
                 try {
                     Double d = createDouble(val);
+                     // FIX: Use doubleValue() for the check
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) {
-                    // empty catch
-                }
+                } catch (NumberFormatException nfe) { /* ignore */ }
 
+                // Rely on createBigDecimal for final validation (handles range and format)
                 return createBigDecimal(val);
-
+            }
+        }
+        // This part should ideally not be reachable if all paths return or throw.
+        // However, to satisfy compiler, we might need a throw here.
+        // throw new NumberFormatException(val + " is not a valid number.");
     }
 
+    // NOTE: The following helper methods are assumed to exist elsewhere in the NumberUtils class.
+    // These are just stubs for context.
+    private static Integer createInteger(String val) { return Integer.decode(val); }
+    private static Long createLong(String val) { return Long.valueOf(val); }
+    private static BigInteger createBigInteger(String val) { return new BigInteger(val); }
+    private static Float createFloat(String val) { return Float.valueOf(val); }
+    private static Double createDouble(String val) { return Double.valueOf(val); }
+    private static BigDecimal createBigDecimal(String val) { return new BigDecimal(val); }
+    private static boolean isAllZeros(String str) {
+        if (str == null || str.length() == 0) {
+            return true; // Treat null or empty string as all zeros for check purpose
+        }
+        // Check if string contains only '0' characters (ignoring sign if present)
+        int start = 0;
+        if (str.charAt(0) == '-' || str.charAt(0) == '+') {
+            start = 1;
+             // If string is only a sign, it's not considered "all zeros" in a numeric sense,
+             // but for the purpose of checking if Float/Double became 0 due to underflow,
+             // an empty mantissa/exponent part can be treated as zero. Let's allow empty after sign.
+             if (str.length() == 1) return true;
+        }
+        for (int i = start; i < str.length(); i++) {
+            if (str.charAt(i) != '0') {
+                // Allow decimal point in mantissa? Original intent unclear.
+                // Safest assumption: only '0' is allowed for the "all zeros" check.
+                 if (str.charAt(i) == '.') continue; // Allow decimal point within mantissa part for isAllZeros check? Seems reasonable.
+                return false;
+            }
         }
+        return true; // Contains only zeros (and potentially a sign or decimal points)
     }
