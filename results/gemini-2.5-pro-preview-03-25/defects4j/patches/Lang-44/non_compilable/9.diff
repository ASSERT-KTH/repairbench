diff --git a/tmp/7910f628-47be-43db-a320-0211babd738a_buggy.java b/tmp/258fb8b0-6b7a-45b4-8147-4d1236db841d_fixed.java
index 4a05f03..70fc29b 100644
--- a/tmp/7910f628-47be-43db-a320-0211babd738a_buggy.java
+++ b/tmp/258fb8b0-6b7a-45b4-8147-4d1236db841d_fixed.java
@@ -1,170 +1,254 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can hold the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * @param val String containing a number
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String val) throws NumberFormatException {
         if (val == null) {
             return null;
         }
         if (val.length() == 0) {
             throw new NumberFormatException("\"\" is not a valid number.");
         }
         if (val.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
-            return null;
+            return null; // Behaviour based on original code for this edge case
         }
         if (val.startsWith("0x") || val.startsWith("-0x")) {
+            // Need external createInteger method to handle hex
             return createInteger(val);
         }
         char lastChar = val.charAt(val.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = val.indexOf('.');
+        // Original calculation; seems to work for valid cases, even if slightly odd
         int expPos = val.indexOf('e') + val.indexOf('E') + 1;
 
-        if (decPos > -1) {
+        // Reset expPos if the exponent marker is the last character
+        if (expPos > -1 && expPos == val.length() -1) {
+            expPos = -1;
+        }
 
-            if (expPos > -1) {
-                if (expPos < decPos) {
+        if (decPos > -1) { // Contains a decimal point
+            if (expPos > -1) { // Contains exponent marker
+                if (expPos < decPos || expPos > val.length()) { // Check if 'e'/'E' is misplaced
                     throw new NumberFormatException(val + " is not a valid number.");
                 }
                 dec = val.substring(decPos + 1, expPos);
-            } else {
+            } else { // No exponent marker
                 dec = val.substring(decPos + 1);
             }
             mant = val.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
+        } else { // No decimal point
+            if (expPos > -1) { // Contains exponent marker
+                 if (expPos > val.length()) { // Check if 'e'/'E' is misplaced
+                    throw new NumberFormatException(val + " is not a valid number.");
+                 }
                 mant = val.substring(0, expPos);
-            } else {
+            } else { // No decimal point, no exponent
                 mant = val;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar)) {
+
+        // Check for type qualifier
+        if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // If exponent marker exists, find the exponent path
             if (expPos > -1 && expPos < val.length() - 1) {
                 exp = val.substring(expPos + 1, val.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
+            // Extract the numeric part before the qualifier
             String numeric = val.substring(0, val.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Check if the mantissa and exponent are all zeros
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Assumes isAllZeros handles null
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Input must be an integer (no decimal point, no exponent)
+                    // and the numeric part must be non-empty and consist of digits (optional minus sign)
+                    if (dec == null && exp == null && numeric.length() > 0) {
+                        boolean isPotentialInt = false;
+                        char firstChar = numeric.charAt(0);
+                        if (firstChar == '-') {
+                            // Must have digits after the '-' sign
+                            isPotentialInt = numeric.length() > 1 && isDigits(numeric.substring(1));
+                        } else {
+                            // Must have only digits
+                            isPotentialInt = isDigits(numeric);
+                        }
+
+                        if(isPotentialInt) {
                            try {
                                 return createLong(numeric);
                             } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                                // Fall through to BigInteger if Long overflows
                             }
+                            // Let BigInteger handle its own format exceptions (e.g., "-")
                             return createBigInteger(numeric);
-
                         }
+                    }
+                    // If not a valid format for Long/BigInteger qualifier
                     throw new NumberFormatException(val + " is not a valid number.");
+
                 case 'f' :
                 case 'F' :
                     try {
+                        // Use helper; throws NFE if 'numeric' is not a valid float string
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check for infinity or zero value when the string wasn't all zeroes (loss of precision)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                        // Ignore NFE - indicates numeric is not valid float format ("F", "abcF")
                     }
-                    //Fall through
+                    // Fall through intended by original logic to try Double if Float fails/loses precision
+
                 case 'd' :
                 case 'D' :
                     try {
+                        // Use helper; throws NFE if 'numeric' is not a valid double string
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Check for infinity or zero value when the string wasn't all zeroes
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Corrected floatValue to doubleValue
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
-                        // empty catch
+                         // Ignore NFE - indicates numeric is not valid double format ("D", "abcD")
                     }
                     try {
+                        // If Double failed or lost precision, try BigDecimal
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
-                        // empty catch
+                        // Ignore NFE from BigDecimal. Means numeric was fundamentally invalid.
                     }
-                    //Fall through
+                    // Fall through to default if all F/D/BigDecimal attempts fail
+
                 default :
+                    // Qualifier is not L, F, or D, or parsing failed
                     throw new NumberFormatException(val + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+            // Last character is a digit or '.', so no type qualifier. Auto-detect type.
+            // Extract exponent part if present
             if (expPos > -1 && expPos < val.length() - 1) {
                 exp = val.substring(expPos + 1, val.length());
             } else {
                 exp = null;
             }
+            // Check if it looks like an integer (no decimal, no exponent)
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // Must be an Integer, Long, or BigInteger
                 try {
                     return createInteger(val);
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // ignore, try next size
                 }
                 try {
                     return createLong(val);
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // ignore, try next size
                 }
-                return createBigInteger(val);
+                // If Integer/Long fail, fallback to BigInteger
+                return createBigInteger(val); // Let BigInteger throw if 'val' is invalid integer format
 
             } else {
-                //Must be a float,double,BigDec
+                // Has decimal or exponent: must be Float, Double, or BigDecimal
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(val);
+                    // Check for infinity or loss of precision
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // ignore, try next size
                 }
                 try {
                     Double d = createDouble(val);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                    // Check for infinity or loss of precision
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Corrected floatValue to doubleValue
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
-                    // empty catch
+                    // ignore, try next size
+                }
+                // If Float/Double fail or lose precision, fallback to BigDecimal
+                return createBigDecimal(val); // Let BigDecimal throw if 'val' is invalid decimal format
+            }
+        }
     }
 
-                return createBigDecimal(val);
+    // ---- Helper methods assumed to exist elsewhere ----
+    // These methods are not part of the provided code but are required for compilation and logic.
+    // Their exact implementation affects the behavior.
 
+    private static boolean isDigits(String str) {
+        if (str == null || str.length() == 0) {
+            return false; // Modified assumption: empty string is not considered digits
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (!Character.isDigit(str.charAt(i))) {
+                return false;
+            }
+        }
+        return true;
     }
 
+    private static boolean isAllZeros(String str) {
+         if (str == null) {
+            return true;
+        }
+        for (int i = str.length() - 1; i >= 0; i--) {
+            if (str.charAt(i) != '0') {
+                return false;
+            }
         }
+        return str.length() > 0; // Treat "" as false? Original code likely treated "" as true. Let's stick to null=true.
+        // If str is not null, return true only if all chars are '0'. Empty string would return true.
+        // Let's refine: return true if null or contains only '0'.
+        // if (str == null) return true; // Handled above
+        // for (int i=0; i<str.length(); i++) if (str.charAt(i) != '0') return false;
+        // return true; // If loop completes, it's all zeros or empty
     }
+
+    // Assume these methods exist and call the respective constructors/parsing methods,
+    // potentially handling hex for createInteger.
+    private static Integer createInteger(String val) throws NumberFormatException { return Integer.decode(val); } // decode handles 0x, 0, #
+    private static Long createLong(String val) throws NumberFormatException { return Long.valueOf(val); }
+    private static BigInteger createBigInteger(String val) throws NumberFormatException { return new BigInteger(val); }
+    private static Float createFloat(String val) throws NumberFormatException { return Float.valueOf(val); }
+    private static Double createDouble(String val) throws NumberFormatException { return Double.valueOf(val); }
+    private static BigDecimal createBigDecimal(String val) throws NumberFormatException { return new BigDecimal(val); }
+
+    // Need access to NumberUtils.createFloat and NumberUtils.createDouble if they are different
+    // from the standard valueOf methods. Assuming they are the same for this fix.
+    // If NumberUtils.createFloat/Double have special logic, this needs adjustment.
+    // Reverting to use NumberUtils calls as in original code
+    // Assuming NumberUtils class exists with these static methods
+    // private static Float NumberUtils.createFloat(String val) ...
+    // private static Double NumberUtils.createDouble(String val) ...
