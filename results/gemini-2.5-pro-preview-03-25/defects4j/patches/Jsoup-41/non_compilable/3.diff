diff --git a/tmp/03ebcfc4-9df4-4f37-9641-170a0d32008d_buggy.java b/tmp/23877894-0a99-463f-b4e3-51ebcb146c0f_fixed.java
index d457dbe..8010106 100644
--- a/tmp/03ebcfc4-9df4-4f37-9641-170a0d32008d_buggy.java
+++ b/tmp/23877894-0a99-463f-b4e3-51ebcb146c0f_fixed.java
@@ -1,10 +1,36 @@
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
+        // Note: We don't call super.equals(o) here.
+        // Node.equals() is identity comparison by default, and even if implemented
+        // to compare parent/siblingIndex, we want structural equality independent of position.
 
         Element element = (Element) o;
 
-        return this == o;
+        // Compare tag
+        if (!tag.equals(element.tag)) return false;
+
+        // Compare attributes
+        // Ensure attributes are initialized for comparison
+        ensureAttributes();
+        element.ensureAttributes();
+        // The attributes field is inherited from Node.
+        if (!attributes.equals(element.attributes)) return false;
+
+        // Compare children recursively
+        // childNodes() returns an unmodifiable view of the children list from Node.
+        List<org.jsoup.nodes.Node> thisChildren = childNodes();
+        List<org.jsoup.nodes.Node> otherChildren = element.childNodes();
+        if (thisChildren.size() != otherChildren.size()) return false;
+
+        for (int i = 0; i < thisChildren.size(); i++) {
+            // This relies on Node subclasses (Element, TextNode, etc.) having correct equals() implementations.
+            if (!thisChildren.get(i).equals(otherChildren.get(i))) {
+                return false;
+            }
+        }
+
+        // If tag, attributes, and children are all equal, the elements are equal.
+        return true;
     }
\ No newline at end of file
