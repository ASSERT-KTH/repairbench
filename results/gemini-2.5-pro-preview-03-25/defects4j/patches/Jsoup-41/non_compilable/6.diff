diff --git a/tmp/76f58ff2-089f-4327-8434-091f1129a72b_buggy.java b/tmp/22c1adeb-e23f-4d95-a5ce-b781427154d4_fixed.java
index d457dbe..b830ad9 100644
--- a/tmp/76f58ff2-089f-4327-8434-091f1129a72b_buggy.java
+++ b/tmp/22c1adeb-e23f-4d95-a5ce-b781427154d4_fixed.java
@@ -1,10 +1,43 @@
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
+        // Cannot rely on super.equals() as Node.equals() is identity-based.
+        // Element equality is defined by structural equivalence: same tag, attributes, and children.
 
-        Element element = (Element) o;
+        Element that = (Element) o;
 
-        return this == o;
+        // 1. Compare tag
+        if (!java.util.Objects.equals(this.tag, that.tag)) {
+            return false;
+        }
+
+        // 2. Compare attributes (inherited from Node -> BaseNode)
+        // Attributes class has a content-based equals method.
+        if (!java.util.Objects.equals(this.attributes, that.attributes)) {
+            return false;
+        }
+
+        // 3. Compare child nodes structurally (inherited from Node -> BaseNode)
+        // We must compare children using hasSameValue() as Node.equals() is identity-based,
+        // and List.equals() would use Node.equals().
+        java.util.List<org.jsoup.nodes.Node> thisChildNodes = this.childNodes; // Use field directly for efficiency if possible, or childNodes()
+        java.util.List<org.jsoup.nodes.Node> thatChildNodes = that.childNodes;
+
+        if (thisChildNodes.size() != thatChildNodes.size()) {
+            return false;
+        }
+
+        for (int i = 0; i < thisChildNodes.size(); i++) {
+            org.jsoup.nodes.Node thisChild = thisChildNodes.get(i);
+            org.jsoup.nodes.Node thatChild = thatChildNodes.get(i);
+
+            // Use hasSameValue for structural comparison of children.
+            if (!thisChild.hasSameValue(thatChild)) {
+                 return false;
+            }
+        }
+
+        // If all checks pass, the elements are structurally equal.
+        return true;
     }
\ No newline at end of file
