diff --git a/tmp/48d7e709-6a63-40a4-b9ec-4b76aa3e220d_buggy.java b/tmp/7479ad8c-a846-4ced-a292-67b0d8edaa00_fixed.java
index d457dbe..6e20fc9 100644
--- a/tmp/48d7e709-6a63-40a4-b9ec-4b76aa3e220d_buggy.java
+++ b/tmp/7479ad8c-a846-4ced-a292-67b0d8edaa00_fixed.java
@@ -1,10 +1,19 @@
+import java.util.Objects;
+
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
+        // Note: Cannot rely on super.equals(o) because Node.equals() is not implemented meaningfully (it's Object.equals).
+        // We need to compare the fields that define Element equality: tag, attributes, and children.
 
         Element element = (Element) o;
 
-        return this == o;
+        // Compare tag (Element specific), attributes (from Node), and childNodes (from Node)
+        // Use Objects.equals for null-safety.
+        // Use public accessor methods.
+        // List.equals() compares elements recursively, relying on the equals() implementation of child nodes (Element, TextNode, etc.)
+        return Objects.equals(this.tag(), element.tag()) &&
+               Objects.equals(this.attributes(), element.attributes()) &&
+               this.childNodes().equals(element.childNodes());
     }
