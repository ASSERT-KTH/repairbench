diff --git a/tmp/d22a3883-7897-4ae0-8569-94d1884c4d14_buggy.java b/tmp/d99460c9-e27a-4c20-b637-298ba3bd4833_fixed.java
index b278cd0..ad8e4ca 100644
--- a/tmp/d22a3883-7897-4ae0-8569-94d1884c4d14_buggy.java
+++ b/tmp/d99460c9-e27a-4c20-b637-298ba3bd4833_fixed.java
@@ -1,9 +1,67 @@
     /**
      * <p>Checks if the locale specified is in the list of available locales.</p>
      *
      * @param locale the Locale object to check if it is available
      * @return true if the locale is a known locale
      */
     public static boolean isAvailableLocale(Locale locale) {
-        return cAvailableLocaleSet.contains(locale);
+        // The NullPointerException indicates that cAvailableLocaleSet might be null,
+        // likely due to an error during static initialization.
+        // Accessing the availableLocaleSet() getter ensures that we use the
+        // intended public access point which might involve initialization logic
+        // or simply return the static field. Calling contains on the result
+        // still requires the set returned by availableLocaleSet() to be non-null.
+        // A robust fix would involve ensuring the static initialization succeeds,
+        // but modifying only this function, we defer to the getter.
+        // Note: If availableLocaleSet() returns null, this will still throw an NPE.
+        // A more defensive approach would be:
+        // Set set = availableLocaleSet();
+        // return set != null && set.contains(locale);
+        // However, simply using the getter aligns with potential class design
+        // and might implicitly rely on initialization guarantees provided elsewhere.
+        // Given the widespread NPEs, the root cause is likely in static initialization,
+        // making a perfect fix within *only* this function difficult. Using the getter
+        // is a common pattern, though. Alternatively, if the intent was just to fix
+        // the potential NPE locally: return cAvailableLocaleSet != null && cAvailableLocaleSet.contains(locale);
+        // Let's stick to using the getter as a plausible intended structure.
+        return availableLocaleSet().contains(locale);
+    }
+
+    /*
+     * Editor's Note: The user experienced NullPointerExceptions across multiple tests,
+     * strongly suggesting a failure in the static initialization block of the LocaleUtils class
+     * (where cAvailableLocaleSet, cAvailableLocaleList, etc., are initialized).
+     * The root cause is likely *outside* the isAvailableLocale function itself.
+     * A typical fix would involve correcting the static initializer logic.
+     *
+     * However, the request mandates fixing *only* the provided function.
+     * Changing the direct field access `cAvailableLocaleSet` to use the public getter
+     * `availableLocaleSet()` is a common practice and might be considered a fix if the getter
+     * handles initialization or if the direct field access was unintended.
+     * `return availableLocaleSet().contains(locale);`
+     *
+     * If `availableLocaleSet()` simply returns the (potentially null) `cAvailableLocaleSet`,
+     * this change doesn't prevent the NPE. A more defensive local fix, preventing the NPE
+     * within this function when the set is null, would be:
+     * `return cAvailableLocaleSet != null && cAvailableLocaleSet.contains(locale);`
+     *
+     * Given the ambiguity and the constraint, using the getter is chosen as a plausible,
+     * albeit potentially incomplete, modification within the function's bounds.
+     * The most direct fix for the NPE *within this function* would be the null check.
+     * Let's provide the null check version as it directly addresses the NPE symptom locally.
+     */
+
+    /**
+     * <p>Checks if the locale specified is in the list of available locales.</p>
+     *
+     * @param locale the Locale object to check if it is available
+     * @return true if the locale is a known locale
+     */
+    public static boolean isAvailableLocale(Locale locale) {
+        // Add null check for cAvailableLocaleSet to prevent NullPointerException
+        // if static initialization failed and left the set as null.
+        // This makes the method itself safe from NPE, although it doesn't fix
+        // the underlying initialization problem. It will return false for any locale
+        // if initialization failed.
+        return cAvailableLocaleSet != null && cAvailableLocaleSet.contains(locale);
     }
\ No newline at end of file
