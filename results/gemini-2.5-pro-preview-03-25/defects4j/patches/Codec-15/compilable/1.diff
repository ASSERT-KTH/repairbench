diff --git a/tmp/d84edd3f-5975-4422-a927-2498dd9db49f_buggy.java b/tmp/a2410b64-c254-4031-b35e-c78fc2b285e6_fixed.java
index b529d33..cd93135 100644
--- a/tmp/d84edd3f-5975-4422-a927-2498dd9db49f_buggy.java
+++ b/tmp/a2410b64-c254-4031-b35e-c78fc2b285e6_fixed.java
@@ -1,29 +1,69 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
+     * Vowels and H, W are mapped to '0'.
+     * Y is also mapped to '0'.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
+        // mappedChar is expected to be '0' for vowels and H, W, Y
         final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
-        if (index > 1 && mappedChar != '0') {
+
+        // HW rule check: Consonants (non-'0') from the same code group (#)
+        // separated by H or W, are treated as one: C1 H C2 -> C1 #, C1 W C2 -> C1 #
+        // Only apply the rule if the current character has a mapping code (is a consonant).
+        if (index > 0 && mappedChar != '0') {
+            final char prevChar = str.charAt(index - 1);
+            // Check if the previous character was H or W
+            if ('H' == prevChar || 'W' == prevChar) {
+                // Need to check the character before H/W
+                // Ensure index isn't too low (at least 2 chars before current)
+                if (index > 1) {
+                    final char preHWChar = str.charAt(index - 2);
+                    final char firstCode = this.map(preHWChar);
+                    // If the code before H/W is the same as the current code,
+                    // the current char is ignored (treated as one with C1)
+                    if (firstCode == mappedChar) {
+                        return '0'; // Return '0' to signify it should be ignored
+                    }
+                }
+                // If index is 1 (i.e., sequence is H C2 or W C2 at start),
+                // C2 is not ignored by HW rule (no C1 to compare). Handled by main loop.
+            }
+        }
+        // Also handle the case where the character immediately preceding
+        // the current character maps to the same code.
+        // This logic is typically handled in the main loop comparing with 'last',
+        // but the original code had index > 1 check which suggests some context awareness here.
+        // However, based on test case failure analysis, the primary issue seems to be
+        // either the extra condition `|| 'H' == preHWChar || 'W' == preHWChar`
+        // or the return of integer 0 instead of char '0'.
+        // The extra condition `|| 'H' == preHWChar || 'W' == preHWChar` in the original code
+        // caused characters to be ignored incorrectly (e.g. the 'D' in 'yhwdyt').
+        // Removing it makes the HW rule check more precise.
+        // Returning '0' (char) is consistent with how map() indicates ignored chars.
+
+        // Corrected HW Rule check (simplified from original buggy version):
+        if (index > 1 && mappedChar != '0') { // Need index > 1 for preHWChar
             final char hwChar = str.charAt(index - 1);
             if ('H' == hwChar || 'W' == hwChar) {
                 final char preHWChar = str.charAt(index - 2);
                 final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                // If the consonant before H/W maps to the same code, ignore current consonant.
+                if (firstCode == mappedChar) {
+                    return '0'; // Use char '0'
                 }
             }
         }
+
         return mappedChar;
     }
\ No newline at end of file
