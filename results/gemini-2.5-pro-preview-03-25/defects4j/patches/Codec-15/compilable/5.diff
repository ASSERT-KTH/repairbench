diff --git a/tmp/336399ab-5a42-4034-8ba7-7fa96aebe3a6_buggy.java b/tmp/fa663c04-694b-4969-84bf-5c45364edaf1_fixed.java
index b529d33..d12279a 100644
--- a/tmp/336399ab-5a42-4034-8ba7-7fa96aebe3a6_buggy.java
+++ b/tmp/fa663c04-694b-4969-84bf-5c45364edaf1_fixed.java
@@ -1,29 +1,43 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
+     * Vowels and H, W are generally ignored.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
-     * @return Mapping code for a particular character
+     * @return Mapping code for a particular character, or 0 if the character should be skipped.
      * @throws IllegalArgumentException
-     *                  if the character is not mapped
+     *                  if the character is not mapped (though map() handles this)
      */
     private char getMappingCode(final String str, final int index) {
-        // map() throws IllegalArgumentException
+        // map() throws IllegalArgumentException if char is not in the map
+        // Request the mapping for the current character.
         final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
+
+        // HW rule check: Consonants from the same code group separated by H or W
+        // are treated as one. Rule applies only if the current character has a
+        // mapping code (!= '0'), and there are at least two preceding characters.
         if (index > 1 && mappedChar != '0') {
             final char hwChar = str.charAt(index - 1);
+            // Check if the immediately preceding character is H or W.
             if ('H' == hwChar || 'W' == hwChar) {
+                // Get the character before H/W.
                 final char preHWChar = str.charAt(index - 2);
+                // Get the code for the character before H/W.
                 final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                // If the code before H/W is the same as the current character's code,
+                // the current character is skipped (treated as one with the char before H/W).
+                // Note: The original code included an erroneous check '|| 'H' == preHWChar || 'W' == preHWChar'
+                // which caused valid consonants after sequences like H-H or W-H to be skipped.
+                if (firstCode == mappedChar) {
+                    return 0; // Return 0 ('skip')
                 }
             }
         }
+        // If the HW rule check did not result in skipping the character, return its mapped code.
+        // The main loop will handle skipping based on vowels ('0' mapping) and simple adjacency (`last` variable).
         return mappedChar;
     }
\ No newline at end of file
