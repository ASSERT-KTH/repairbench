diff --git a/tmp/70c872dc-305e-413e-80e3-69cf578ace8a_buggy.java b/tmp/9d57c666-ed17-4974-8e7c-65986866c684_fixed.java
index b529d33..2c51651 100644
--- a/tmp/70c872dc-305e-413e-80e3-69cf578ace8a_buggy.java
+++ b/tmp/9d57c666-ed17-4974-8e7c-65986866c684_fixed.java
@@ -1,29 +1,53 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
+     * Vowels are generally ignored in Soundex, mapping to '0'.
+     * H and W are also ignored ('0'), but affect adjacent consonants.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
-     * @return Mapping code for a particular character
+     * @return Mapping code for a particular character, or the NUL character (0) 
+     *         if the character should be skipped (e.g., due to the H-W rule).
      * @throws IllegalArgumentException
-     *                  if the character is not mapped
+     *                  if the character is not mapped (though the default mapping covers all uppercase letters)
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
+        // mappedChar: The code ('0'-'6') for the character at str.charAt(index).
         final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
+
+        // HW rule check:
+        // Apply only if the current character is a consonant (mappedChar != '0')
+        // and there are at least two preceding characters (index > 1).
         if (index > 1 && mappedChar != '0') {
             final char hwChar = str.charAt(index - 1);
+            // Check if the immediately preceding character is 'H' or 'W'.
             if ('H' == hwChar || 'W' == hwChar) {
+                // Get the character before the 'H' or 'W'.
                 final char preHWChar = str.charAt(index - 2);
+                // Get the mapping code for the character before the 'H' or 'W'.
                 final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                // If the code before the H/W is the same as the code after the H/W,
+                // the current character's code should be ignored (return NUL char 0).
+                if (firstCode == mappedChar) {
+                    // Consonants from the same code group separated by H or W are treated as one.
+                    // Example: ASHCRAFT -> A S(2) H C(2) R(6) A F(1) T(3)
+                    // C is ignored because S=2, H separates, C=2. Result A261
+                    // Example: YHWDYT -> Y H W D(3) Y T(3)
+                    // D is not ignored because map(H) = 0, which != map(D) = 3. Result Y330
+                    return 0; // Return NUL char (value 0) to indicate skipping this code.
                 }
+                // The original buggy code had an additional check here:
+                // || 'H' == preHWChar || 'W' == preHWChar
+                // This incorrectly caused characters to be skipped if the character
+                // two positions back was H or W, regardless of code matching.
+                // For YHWDYT, D was skipped because preHWChar was 'H'.
             }
         }
+        // Return the mapped code ('0'-'6') for the current character.
+        // The calling function (soundex) handles skipping vowels ('0') and adjacent duplicates.
         return mappedChar;
     }
\ No newline at end of file
