diff --git a/tmp/1286c1e6-da26-41e8-8dbd-8c8e058d4a1e_buggy.java b/tmp/f5d99c03-f6ca-4267-bb17-0dd33a0e5d8b_fixed.java
index b529d33..025d447 100644
--- a/tmp/1286c1e6-da26-41e8-8dbd-8c8e058d4a1e_buggy.java
+++ b/tmp/f5d99c03-f6ca-4267-bb17-0dd33a0e5d8b_fixed.java
@@ -1,29 +1,48 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
+     * H and W are otherwise ignored. Vowels are ignored.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
-     * @return Mapping code for a particular character
+     * @return Mapping code for a particular character, or '0' if the character should be ignored.
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
+        // Map the character at the specified index to its Soundex code.
         final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
+
+        // HW Rule: Consonants from the same code group separated by H or W are treated as one.
+        // Check if:
+        // 1. We are at least at the third character (index > 1)
+        // 2. The current character maps to a consonant code (mappedChar != '0')
         if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+            final char prevChar = str.charAt(index - 1);
+            // 3. The immediately preceding character is H or W
+            if ('H' == prevChar || 'W' == prevChar) {
+                // If H or W precedes the current character, look at the character before H/W
+                final char prevPrevChar = str.charAt(index - 2);
+                final char prevPrevCode = this.map(prevPrevChar);
+                // 4. If the character before H/W maps to the same code as the current character
+                if (prevPrevCode == mappedChar) {
+                    // Treat the current character as code '0' (ignore it)
+                    return '0';
                 }
+                // Note: The original code had an additional condition here:
+                // || 'H' == prevPrevChar || 'W' == prevPrevChar
+                // This was incorrect, as it would ignore the current character if the character
+                // *before* the H/W was itself H or W, regardless of codes matching.
+                // Example: In YHWDYT, 'D' (code 3) would be incorrectly ignored because the
+                // character 'H' (prevPrevChar) precedes 'W'. The corrected logic correctly compares
+                // map(D) which is 3, with map(H) which is 0, finds they are different, and thus
+                // does not return '0' based on this rule.
             }
         }
+        // If the HW rule does not apply, or the character is a vowel/ignored, return its mapped code.
         return mappedChar;
     }
\ No newline at end of file
