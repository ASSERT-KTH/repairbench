diff --git a/tmp/afc7e700-91ee-4ae8-9f9d-163cb5ac7aa7_buggy.java b/tmp/5b4f03b7-8b89-4816-a463-6b113bd4c98a_fixed.java
index b529d33..2d5bab1 100644
--- a/tmp/afc7e700-91ee-4ae8-9f9d-163cb5ac7aa7_buggy.java
+++ b/tmp/5b4f03b7-8b89-4816-a463-6b113bd4c98a_fixed.java
@@ -1,29 +1,35 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
-        if (index > 1 && mappedChar != '0') {
+        // Check requires str.charAt(index-1) and str.charAt(index-2)
+        if (index > 1 && mappedChar != '0') { // Ensure index >= 2 and current char is consonant.
             final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
+            if ('H' == hwChar || 'W' == hwChar) { // Check if previous char is H or W.
                 final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                final char firstCode = this.map(preHWChar); // Get code of char before H/W.
+                // Fixed: The original condition "firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar"
+                // was incorrect. It incorrectly caused consonant codes to be skipped if the character
+                // before the H/W was also H or W, even if the consonant codes were different.
+                // The correct HW rule only skips if the consonant codes are the same.
+                if (firstCode == mappedChar) {
+                    // Consonants from the same code group separated by H or W are treated as one.
+                    return 0; // Return 0 to ignore this consonant.
                 }
             }
         }
-        return mappedChar;
+        return mappedChar; // Otherwise, return the mapped code.
     }
\ No newline at end of file
