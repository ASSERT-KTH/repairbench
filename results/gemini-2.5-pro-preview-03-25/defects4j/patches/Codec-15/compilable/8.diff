diff --git a/tmp/86510355-8da4-423a-9c50-70bf5da5ad25_buggy.java b/tmp/b9c01ef6-f1f6-45c8-b258-81e9062c1937_fixed.java
index b529d33..b5e9769 100644
--- a/tmp/86510355-8da4-423a-9c50-70bf5da5ad25_buggy.java
+++ b/tmp/b9c01ef6-f1f6-45c8-b258-81e9062c1937_fixed.java
@@ -1,29 +1,55 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
+     * Vowels and H, W are mapped to '0'.
+     * <p>
+     * The Soundex algorithm requires map(char1) != map(char2) for neighbouring consonants.
+     * This is handled by the main loop which calls this method, comparing the result code
+     * to the last non-'0' code obtained.
+     * </p>
+     * <p>
+     * This method handles the H/W rule: if sequence is C1 H C2 or C1 W C2 and map(C1) == map(C2),
+     * then the code for C2 should be ignored (returned as '0').
+     * </p>
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
-     * @return Mapping code for a particular character
+     * @return Mapping code for a particular character, or '0' if the character should be ignored
+     *         due to H/W rule.
      * @throws IllegalArgumentException
-     *                  if the character is not mapped
+     *                  if the character is not mapped (should not happen with A-Z input)
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
+        // Map the current character
         final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
-        if (index > 1 && mappedChar != '0') {
+
+        // Rule: Consonants from the same code group separated by W or H are treated as one.
+        // This means C1 H C2 or C1 W C2 -> ignore C2 if map(C1) == map(C2).
+        // Check applies only if the current character maps to a consonant code (is not 0),
+        // and we are far enough into the string to check C1 and H/W (index > 1).
+        if (index > 1 && mappedChar != '0') { // Check required index and non-zero code
             final char hwChar = str.charAt(index - 1);
+            // Check if the preceding character is H or W
             if ('H' == hwChar || 'W' == hwChar) {
+                // Get the character before H/W
                 final char preHWChar = str.charAt(index - 2);
+                // Get the code of the character before H/W
                 final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                // If the code before H/W matches the current code, ignore the current code by returning 0
+                if (firstCode == mappedChar) {
+                    return 0; // Return 0 to ignore the code for the current character (C2)
                 }
+                // The original code had an additional condition here:
+                // || 'H' == preHWChar || 'W' == preHWChar
+                // This caused incorrect behavior. For example, in "YHWDYT", when processing 'D' (index 3),
+                // hwChar was 'W', preHWChar was 'H'. The condition ('H' == preHWChar) was true,
+                // causing 'D' to be incorrectly ignored (returned 0). This extra check is removed in the fix.
             }
         }
+        // Return the mapped code (or 0 if the H/W rule applied)
         return mappedChar;
     }
\ No newline at end of file
