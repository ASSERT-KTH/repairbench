diff --git a/tmp/a9cc6412-9a72-4479-9e4a-1b5108c07cea_buggy.java b/tmp/cacb42bd-5c30-40e4-ba43-5dab8b09f0f2_fixed.java
index b529d33..aa4bb38 100644
--- a/tmp/a9cc6412-9a72-4479-9e4a-1b5108c07cea_buggy.java
+++ b/tmp/cacb42bd-5c30-40e4-ba43-5dab8b09f0f2_fixed.java
@@ -1,29 +1,48 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
+     * Vowels and H, W do not separate consonants with the same code.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
+        // retrieve the mapped digit for the current character
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
-        if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
+        // if the current character is a consonant and it's not the first character
+        if (index > 0 && mappedChar != '0') {
+            final char prevChar = str.charAt(index - 1);
+            // Check if the previous character was H or W
+            if ('H' == prevChar || 'W' == prevChar) {
+                // If the character before H/W exists (i.e., index > 1)
+                if (index > 1) {
                     final char preHWChar = str.charAt(index - 2);
                     final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                    // If the code of the char before H/W is the same as the current char's code
+                    // NARA Rule 4: "Two letters with the same number separated by 'h' or 'w' are coded as a single number"
+                    // This means the current character's code should be ignored (treated as 0).
+                    // The original code had an additional check "|| 'H' == preHWChar || 'W' == preHWChar"
+                    // which incorrectly ignored the current character if the character *before* H/W was also H/W.
+                    // This part is removed in the fix.
+                    if (firstCode == mappedChar) {
+                        return 0; // Ignore the current character's code
                     }
                 }
+                // If index == 1, prevChar is H/W, preHWChar doesn't exist.
+                // The current consonant is the first consonant after an initial H/W.
+                // It should be coded normally. mappedChar is already correct.
+            }
+            // Note: NARA Rule 5 ("Vowels ... Like 'h' and 'w', they do not separate consonants that have the same soundex code.")
+            // implies that the main encoding loop should handle adjacent consonants or consonants separated by vowels having the same code.
+            // This function only needs to handle the specific H/W separation rule.
         }
         return mappedChar;
     }
\ No newline at end of file
