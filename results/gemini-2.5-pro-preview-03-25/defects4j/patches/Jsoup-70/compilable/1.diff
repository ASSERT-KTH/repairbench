diff --git a/tmp/0085f3fc-d650-4754-89b5-443d309de529_buggy.java b/tmp/1d43eb13-f0ac-4f23-a6e6-8c5ea8b1a0b1_fixed.java
index 6c87721..653f611 100644
--- a/tmp/0085f3fc-d650-4754-89b5-443d309de529_buggy.java
+++ b/tmp/1d43eb13-f0ac-4f23-a6e6-8c5ea8b1a0b1_fixed.java
@@ -1,11 +1,26 @@
     static boolean preserveWhitespace(Node node) {
         // looks only at this element and five levels up, to prevent recursion & needless stack searches
-        if (node != null && node instanceof Element) {
-            Element el = (Element) node;
-                if (el.tag.preserveWhitespace())
+        // The depth limit arbitrarily chosen covers practical use cases, like <pre> deep inside tables.
+        int i = 0;
+        final int MaxLevels = 6; // node itself + 5 levels up
+        Node current = node;
+        while (current != null && i < MaxLevels) {
+            if (current instanceof Element) {
+                Element el = (Element) current;
+                if (el.tag.preserveWhitespace()) {
                     return true;
-                else
-                    return el.parent() != null && el.parent().tag.preserveWhitespace();
+                }
+            }
+            // Stop check at block-level element that is not whitespace preserving.
+            // Prevents look-up starting from deeply nested inline tags climbing up to unexpected blocks.
+            // (Don't care about parent blocks of <p>s, etc.)
+            // But do allow look-up in <pre> → <code> → <span> etc.
+            if (current instanceof Element && ((Element) current).tag().isBlock() && !((Element) current).tag.preserveWhitespace()) {
+                return false; // Found a non-preserving block parent, so stop searching
+            }
+
+            current = current.parent();
+            i++;
         }
         return false;
     }
\ No newline at end of file
