diff --git a/tmp/5a347319-3ec2-40eb-a5a8-2955f5d3be3c_buggy.java b/tmp/84dc4016-0eae-4dfe-845f-3499a0bee36b_fixed.java
index b5d94e0..a79f110 100644
--- a/tmp/5a347319-3ec2-40eb-a5a8-2955f5d3be3c_buggy.java
+++ b/tmp/84dc4016-0eae-4dfe-845f-3499a0bee36b_fixed.java
@@ -1,26 +1,47 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
+    boolean nodeChanged; // Tracks if visit(node) caused a change in the current iteration
     do {
+      // First, traverse the children recursively.
+      // Changes made deep down the tree will be handled by recursive calls.
+      // Their changes might set the instance 'codeChanged' flag, but we are
+      // interested in whether 'visit(node)' *itself* causes a change
+      // to decide if the *current* node's loop needs repeating.
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
+        // Store the next sibling *before* the recursive call.
+        // The recursive call might modify the child node structure,
+        // including removing the node or replacing it.
         Node next = c.getNext();
+        traverse(c);
         c = next;
       }
 
+      // Now, visit the current node. We reset the 'codeChanged' flag
+      // before the visit to isolate the changes made by this specific visit.
+      // This assumes 'codeChanged' is an instance variable used to track changes.
+      this.codeChanged = false;
+
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+
+      // Check if the visit to *this* node resulted in a change.
+      nodeChanged = this.codeChanged;
+
+      // Repeat the loop only if visit(node) changed something.
+      // This prevents unnecessary re-traversal of children if changes
+      // occurred deeper in the tree, as those are handled recursively.
+    } while (nodeChanged);
 
     exitNode(node);
   }
\ No newline at end of file
