diff --git a/tmp/56ec151a-470b-4a14-ada8-17dd15aa5fdc_buggy.java b/tmp/9ccc14af-0f33-4f2d-ac86-060a497286e1_fixed.java
index b5d94e0..d92718c 100644
--- a/tmp/56ec151a-470b-4a14-ada8-17dd15aa5fdc_buggy.java
+++ b/tmp/9ccc14af-0f33-4f2d-ac86-060a497286e1_fixed.java
@@ -1,26 +1,39 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // NOTE: This child traversal loop is O(N^2) in the number of children
+      // N. This occurs because shouldRetraverse may be true multiple times.
+      // We can improve this, if it proves to be an issue.
+
+      // Record the node's children before traversing. If the node is modified
+      // during traversal, we may need to restart the traversal.
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
+        // Save the next sibling before potentially modifying c, because the
+        // modification may detach c from the AST.
         Node next = c.getNext();
+        traverse(c);
+        // If the node c was removed, then its next sibling is still valid.
+        // If the node c was replaced, then its next sibling is still valid.
+        // If the node c was moved, then this traversal might be incorrect.
+        // TODO(johnlenz): Determine if this needs to be changed. Retraversal
+        // may be needed.
         c = next;
       }
 
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
