diff --git a/tmp/f506bf11-4489-46d7-b614-beca9dc5e043_buggy.java b/tmp/650d4c87-0885-48cc-875a-d3f3f802f0b2_fixed.java
index b5d94e0..3d573bb 100644
--- a/tmp/f506bf11-4489-46d7-b614-beca9dc5e043_buggy.java
+++ b/tmp/650d4c87-0885-48cc-875a-d3f3f802f0b2_fixed.java
@@ -1,26 +1,35 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Make sure we store the next child before traversing the current child.
+      // traverse() may modify the current node's children list, so we
+      // find the next child ahead of time.
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
+        Node next = c.getNext(); // Store next sibling before traversing c.
+        traverse(c);             // Traverse the child subtree.
+        // c may have been removed or replaced, move to the previously stored next sibling.
         c = next;
       }
 
-      visit(node);
+      visit(node); // Visit the node itself (post-order).
       visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+      // Check for infinite loops.
+      Preconditions.checkState(visits < 10000, "too many iterations");
+
+      // Check if the node needs to be revisited along with its children.
+      // This check is done on the node potentially modified by visit().
     } while (shouldRetraverse(node));
 
+    // Called once after the node and its subtree are fully processed.
     exitNode(node);
   }
\ No newline at end of file
