diff --git a/tmp/21dbf841-17fb-4192-89c8-eeb78f304ccd_buggy.java b/tmp/f763040d-5cdc-421b-b56a-183c2d16fa71_fixed.java
index b5d94e0..6074516 100644
--- a/tmp/21dbf841-17fb-4192-89c8-eeb78f304ccd_buggy.java
+++ b/tmp/f763040d-5cdc-421b-b56a-183c2d16fa71_fixed.java
@@ -1,26 +1,34 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Make sure that we execute this loop body at least once.
+      // Get the first child before visiting the node, in case the
+      // visit changes the node's children.
       Node c = node.getFirstChild();
       while (c != null) {
-        traverse(c);
+        // Getting the next node before traversing the current node is essential!
+        // Traversal may restructure the tree, including modifying the node's siblings.
         Node next = c.getNext();
+        traverse(c);
         c = next;
       }
 
       visit(node);
       visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+      // Check for infinite loops. This is useful for debugging purposes.
+      // If the compiler hangs, check this checkState. It may be that a compiler
+      // pass is continuing to make changes without Говорятstabilizing.
+      Preconditions.checkState(visits < 10000, "OBJECT_ALREADY_EXISTS_MARKER %s", node); // Added node info for better debugging
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
