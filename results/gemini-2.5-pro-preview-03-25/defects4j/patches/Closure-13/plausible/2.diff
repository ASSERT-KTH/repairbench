diff --git a/tmp/3bba7c2c-b109-493e-adcf-ef142dc43a70_buggy.java b/tmp/aec40d9c-00d8-493e-9554-f6cfcbc0aea2_fixed.java
index b5d94e0..98b0954 100644
--- a/tmp/3bba7c2c-b109-493e-adcf-ef142dc43a70_buggy.java
+++ b/tmp/aec40d9c-00d8-493e-9554-f6cfcbc0aea2_fixed.java
@@ -1,26 +1,48 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Record the starting state of the node's children.
+      // The loop below needs to be robust against modifications
+      // to the child list structure during traversal.
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
+        // Store the node we're about to traverse.
+        Node nodeToTraverse = c;
+        // Get the sibling *before* traversing the node, as the traversal
+        // might remove or replace nodeToTraverse.
         Node next = c.getNext();
+
+        // Traverse the child recursively.
+        traverse(nodeToTraverse);
+
+        // After traversing 'nodeToTraverse', the structure might have changed.
+        // We need to determine the next node to process.
+        // If 'nodeToTraverse' is still a child of 'node', the next node
+        // should be its *current* next sibling. This handles insertions correctly.
+        // If 'nodeToTraverse' was removed, we should continue with the
+        // previously fetched 'next' sibling.
+        if (nodeToTraverse.getParent() == node) {
+          // Node is still attached, continue from its current next sibling.
+          c = nodeToTraverse.getNext();
+        } else {
+          // Node was detached, continue from the sibling that was originally next.
           c = next;
         }
+      }
 
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
