diff --git a/tmp/f9747cb3-676c-4c8c-a061-754eb7a3bcb9_buggy.java b/tmp/948df590-a877-4efe-84f1-94c15f5b6adb_fixed.java
index b5d94e0..5af9a6b 100644
--- a/tmp/f9747cb3-676c-4c8c-a061-754eb7a3bcb9_buggy.java
+++ b/tmp/948df590-a877-4efe-84f1-94c15f5b6adb_fixed.java
@@ -1,26 +1,39 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
-    int visits = 0;
-    do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
+    // First, traverse the children.
+    // We must store the next child before traversing the current child because
+    // the traversal of the child may splice it out of the tree.
+    for (Node c = node.getFirstChild(); c != null; ) {
       Node next = c.getNext();
+      traverse(c);
       c = next;
     }
 
+    // Now, visit the node itself. This may modify the node and necessitate
+    // revisiting the node, but we should not retraverse the children here
+    // unless the visitor requests it explicitly (which this structure doesn't support).
+    int visits = 0;
+    boolean shouldTraverseAgain;
+    do {
       visit(node);
       visits++;
+      // Check for infinite loops. This is essential because `shouldRetraverse`
+      // depends on modifications made by `visit`. If `visit` keeps making
+      // modifications that trigger `shouldRetraverse` without converging,
+      // we'll loop indefinitely.
+      Preconditions.checkState(visits < 10000, "Node has been visited too many times: %s", node);
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+      // Check if we should retraverse the node. This is based on whether the node
+      // was changed during the visit.
+      shouldTraverseAgain = shouldRetraverse(node);
+    } while (shouldTraverseAgain); // Re-visit the node if it has changed.
 
     exitNode(node);
   }
\ No newline at end of file
