diff --git a/tmp/91342220-c267-41e4-b30a-16bd1f6b45af_buggy.java b/tmp/6adcc098-a648-492f-a511-d9b513d3b28b_fixed.java
index b5d94e0..7d7224b 100644
--- a/tmp/91342220-c267-41e4-b30a-16bd1f6b45af_buggy.java
+++ b/tmp/6adcc098-a648-492f-a511-d9b513d3b28b_fixed.java
@@ -1,26 +1,40 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Note: This pattern avoids infinite loops if Nodes are created
+      // with cycles. It's also essential that we call getFirstChild()
+      // and getNext() every time through the loop, as the structure
+      // might change during traversal. See bug 19647768.
+
+      // Fetch the first child before visiting the parent or siblings,
+      // as the traversal may change the structure of the AST.
       Node c = node.getFirstChild();
+
       while (c != null) {
-        traverse(c);
+        // It is important to fetch the next sibling node PRIOR to the
+        // recursive call to traverse. This is because the current node c
+        // may be removed or replaced as part of the traversal, which would
+        // invalidate the getNext() call on c.
         Node next = c.getNext();
+        traverse(c); // Process the child subtree.
+        // Update c to the next sibling that we fetched before the recursive
+        // call.
         c = next;
       }
 
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
