diff --git a/tmp/0ff3cdde-6081-41e6-b210-ab7e5c8d51c0_buggy.java b/tmp/043eadf0-5156-47e2-b485-267e2d309b2b_fixed.java
index d6662c7..457ca17 100644
--- a/tmp/0ff3cdde-6081-41e6-b210-ab7e5c8d51c0_buggy.java
+++ b/tmp/043eadf0-5156-47e2-b485-267e2d309b2b_fixed.java
@@ -1,23 +1,46 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
+     * <p>
+     * The parser assumes that the name is encoded using simple US-ASCII
+     * bytes. If the name is encoded using UTF-8, it can be corrupted
+     * if it contains multi-byte characters. Thus, it is preferred to
+     * use {@link #parseName(byte[], int, int, ZipEncoding)} with the
+     * UTF-8 encoding.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
+        // Tar entries are expected to be NUL terminated
+        // NUL is used as a marker, so it should not occur in the file name.
+
+        // Tar names are officially encoded in variant of ASCII that treats
+        // bytes between 128 and 255 as-is. This is the same behaviour
+        // as ISO-8859-1. So using the US-ASCII encoding, which treats
+        // values > 127 as question marks, is problematic.
+        // Further, it is common practice to store UTF-8 encoded names
+        // in tar archives. So using the platform default encoding is
+        // also problematic.
+        // For these reasons, the following parsing loop converts bytes
+        // between 0 and 255 into the respective chars. This is the same
+        // behaviour as ISO-8859-1.
+
+        final StringBuffer result = new StringBuffer(length);
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
+            final byte b = buffer[i];
+            if (b == 0) { // Trailing null
                 break;
             }
-            result.append((char) buffer[i]);
+            // CheckStyle:MagicNumber OFF
+            result.append((char) (b & 0xFF)); // Allow for extended ASCII
+            // CheckStyle:MagicNumber ON
         }
 
         return result.toString();
     }
\ No newline at end of file
