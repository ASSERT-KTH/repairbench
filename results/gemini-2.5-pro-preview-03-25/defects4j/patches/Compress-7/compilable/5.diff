diff --git a/tmp/f2f9c58b-e6fa-4f49-bea9-6c73aa2e4aa8_buggy.java b/tmp/a6b884bc-781f-448a-8a58-0c87343c0b68_fixed.java
index d6662c7..b5c2600 100644
--- a/tmp/f2f9c58b-e6fa-4f49-bea9-6c73aa2e4aa8_buggy.java
+++ b/tmp/a6b884bc-781f-448a-8a58-0c87343c0b68_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
+     *<p>
+     * The charactersDame are treated as encoded in ISO-8859-1.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
+        // Use StringBuilder for better performance as synchronization is not needed
+        StringBuilder result = new StringBuilder(length);
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
+            final byte currentByte = buffer[i];
+            // Check for NUL terminator
+            if (currentByte == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            // Treat byte as unsigned value (0-255) corresponding to ISO-8859-1 character
+            // Casting a byte directly to char results in sign extension for values > 127
+            // e.g. byte 0xB1 (-79) becomes char 0xFFB1 instead of desired 0x00B1.
+            // Bitwise AND with 0xFF masks off the upper bits during conversion to int.
+            result.append((char) (currentByte & 0xFF));
         }
 
         return result.toString();
     }
\ No newline at end of file
