diff --git a/tmp/983facf9-5ec9-4fce-9f89-fcb295f6713d_buggy.java b/tmp/61db4cb2-ae3f-463d-b53f-5c012dbe8650_fixed.java
index d6662c7..a99ff14 100644
--- a/tmp/983facf9-5ec9-4fce-9f89-fcb295f6713d_buggy.java
+++ b/tmp/61db4cb2-ae3f-463d-b53f-5c012dbe8650_fixed.java
@@ -1,23 +1,31 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
+        // Use StringBuilder for potentially better performance (though StringBuffer is thread-safe)
+        // The original code used StringBuffer, so we stick to it unless modernization is desired.
         StringBuffer result = new StringBuffer(length);
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
+            // Check for NUL terminator
             if (buffer[i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            // Treat byte as unsigned value (0-255) when converting to char.
+            // Casting a byte directly to char involves sign extension,
+            // e.g., byte 0xB1 (-79) becomes char 0xFFB1.
+            // We want byte 0xB1 to become char 0x00B1.
+            // Masking with 0xFF achieves this unsigned conversion.
+            result.append((char) (buffer[i] & 0xFF));
         }
 
         return result.toString();
     }
\ No newline at end of file
