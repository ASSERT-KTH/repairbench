diff --git a/tmp/feff8943-785c-4d68-ad58-e4a6e8214675_buggy.java b/tmp/06cd3973-d3d4-4922-b6f7-a49bfc16ba4a_fixed.java
index d6662c7..57861cc 100644
--- a/tmp/feff8943-785c-4d68-ad58-e4a6e8214675_buggy.java
+++ b/tmp/06cd3973-d3d4-4922-b6f7-a49bfc16ba4a_fixed.java
@@ -1,23 +1,41 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
+        // Tar file names are character arrays terminated by NUL,
+        // and restricted to US-ASCII. If they contain bytes with the
+        // sign bit set, they are improperly encoded and should be
+        // treated as ISO-8859-1 chars. Less portable implementations
+        // treat the bytes as being encoded using the local default
+        // charset. TarUtils is not particularly portable in either case.
+        //
+        // See http://www.gnu.org/software/tar/manual/html_node/Standard.html
+        //
+        // Treat the bytes as ISO-8859-1 characters.
+        // See https://issues.apache.org/jira/browse/COMPRESS-114
+
         StringBuffer result = new StringBuffer(length);
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
+            final byte b = buffer[i];
+            if (b == 0) { // NUL terminator
                 break;
             }
-            result.append((char) buffer[i]);
+            // Convert byte to char, interpreting byte as unsigned value (0-255)
+            // corresponding to ISO-8859-1 code points.
+            // Standard Java cast (char)b treats byte as signed (-128 to 127),
+            // which leads to sign extension for values >= 128, resulting in incorrect
+            // characters. Masking with 0xFF ensures the value is treated as unsigned.
+            result.append((char) (b & 0xFF));
         }
 
         return result.toString();
     }
\ No newline at end of file
