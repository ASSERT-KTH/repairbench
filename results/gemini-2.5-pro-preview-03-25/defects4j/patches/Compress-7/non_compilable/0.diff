diff --git a/tmp/2ea782e7-0cfb-4582-be2f-fe48b182cc0b_buggy.java b/tmp/65bb38cb-6ef8-4498-84e7-98c00060d1f4_fixed.java
index d6662c7..822d505 100644
--- a/tmp/2ea782e7-0cfb-4582-be2f-fe48b182cc0b_buggy.java
+++ b/tmp/65bb38cb-6ef8-4498-84e7-98c00060d1f4_fixed.java
@@ -1,23 +1,44 @@
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
+
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
-
-        for (int i = offset; i < end; ++i) {
+        int len = 0;
+        // Find the length of the string up to the first NUL or the maximum length.
+        for (int i = offset; i < offset + length && len < length; ++i) {
             if (buffer[i] == 0) {
-                break;
+                break; // Stop at NUL
             }
-            result.append((char) buffer[i]);
+            len++;
         }
 
-        return result.toString();
+        if (len <= 0) {
+             return "";
+        }
+
+        // Tar file names are traditionally encoded in ASCII or ISO-8859-1.
+        // Using ISO-8859-1 ensures that all byte values (0-255) are preserved,
+        // mapping directly to Unicode code points U+0000 to U+00FF.
+        // This addresses issues where direct byte-to-char casting fails for bytes > 127.
+        // Modern tars might use UTF-8 via PAX headers, but this utility function likely
+        // handles the raw header block where ISO-8859-1 is a safer assumption
+        // if no other encoding context is provided.
+        try {
+            // Use StandardCharsets constants for better readability and guaranteed availability
+            // Although "ISO-8859-1" string is also guaranteed by Java spec.
+             return new String(buffer, offset, len, "ISO-8859-1");
+        } catch (UnsupportedEncodingException e) {
+             // This should technically never happen, as ISO-8859-1 is required by JVM spec.
+             // Rethrow as a runtime exception if it does for some reason.
+             throw new RuntimeException("ISO-8859-1 encoding not supported", e);
+        }
     }
\ No newline at end of file
