diff --git a/tmp/a08e494d-8e21-41a3-b770-ce34117f6b6c_buggy.java b/tmp/e5c5e3bf-0aba-4e8c-b145-0c86abf4aea6_fixed.java
index d6662c7..8c26736 100644
--- a/tmp/a08e494d-8e21-41a3-b770-ce34117f6b6c_buggy.java
+++ b/tmp/e5c5e3bf-0aba-4e8c-b145-0c86abf4aea6_fixed.java
@@ -1,23 +1,37 @@
+import java.nio.charset.StandardCharsets;
+
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
+     * <p>
+     * The String is created using the {@link StandardCharsets#ISO_8859_1} charset.
+     * </p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
+        int len = 0;
+        final int limit = offset + length;
 
-        for (int i = offset; i < end; ++i) {
+        // Find the first NUL or the end of the buffer segment
+        for (int i = offset; i < limit; ++i) {
             if (buffer[i] == 0) {
-                break;
+                break; // NUL terminator found
             }
-            result.append((char) buffer[i]);
+            len++;
         }
 
-        return result.toString();
+        if (len <= 0) { // Handle cases where length is 0 or name is empty
+            return "";
+        }
+
+        // Decode the name bytes using ISO-8859-1.
+        // This assumes names in standard tar headers are encoded in ISO-8859-1,
+        // which preserves all byte values from 0-255.
+        // For PAX headers, UTF-8 parsing is typically handled elsewhere.
+        return new String(buffer, offset, len, StandardCharsets.ISO_8859_1);
     }
\ No newline at end of file
