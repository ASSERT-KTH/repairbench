diff --git a/tmp/f36713f8-ffba-4dd8-bbfd-a81312708524_buggy.java b/tmp/a0db2e30-2678-40f0-913e-4a7585bed283_fixed.java
index d6662c7..e28c247 100644
--- a/tmp/f36713f8-ffba-4dd8-bbfd-a81312708524_buggy.java
+++ b/tmp/a0db2e30-2678-40f0-913e-4a7585bed283_fixed.java
@@ -1,23 +1,43 @@
+import java.nio.charset.StandardCharsets;
+
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
+     * <p>
+     * Historically, tar files were restricted to ASCII filenames, but modern
+     * implementations often encode filenames using UTF-8 or the platform's
+     * default encoding. However, the simplest and most robust way to round-trip
+     * filenames is often to treat them as sequences of bytes using an encoding
+     * like ISO-8859-1, which maps every possible byte value to a unique Unicode
+     * code point. This method adopts the ISO-8859-1 approach.
+     * </p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
-
-        for (int i = offset; i < end; ++i) {
+        // In contrast to the formatName function which truncates names
+        // that are too long, this method stops reading at the first NUL.
+        // Scan the buffer for the first NUL byte.
+        int len = 0;
+        for (int i = offset; len < length && i < buffer.length; ++i, ++len) {
             if (buffer[i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
         }
 
-        return result.toString();
+        if (len == 0) {
+            return "";
+        }
+        
+        // Use ISO-8859-1 encoding. This encoding maps each byte (0-255)
+        // directly to a Unicode code point (U+0000 to U+00FF).
+        // This is crucial for correctly handling non-ASCII characters
+        // often found in tar archives created on different systems,
+        // and avoids issues caused by platform default encodings or
+        // direct casting of bytes (which involves sign extension).
+        return new String(buffer, offset, len, StandardCharsets.ISO_8859_1);
     }
\ No newline at end of file
