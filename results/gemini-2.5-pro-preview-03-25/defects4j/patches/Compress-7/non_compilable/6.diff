diff --git a/tmp/3b2258fb-dc47-476c-9d1b-36bd71b262ce_buggy.java b/tmp/f4e395ec-8ad4-4969-92cf-8bb1cd569fca_fixed.java
index d6662c7..fe86818 100644
--- a/tmp/3b2258fb-dc47-476c-9d1b-36bd71b262ce_buggy.java
+++ b/tmp/f4e395ec-8ad4-4969-92cf-8bb1cd569fca_fixed.java
@@ -1,23 +1,44 @@
+import java.io.IOException;
+import org.apache.commons.compress.archivers.zip.ZipEncoding;
+import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
+
+// NOTE: This fix uses the minimal change approach (& 0xFF) to correct the byte-to-char conversion issue.
+// An alternative, potentially cleaner approach would be to determine the actual name length
+// and use `new String(buffer, offset, actualLength, StandardCharsets.ISO_8859_1)`,
+// assuming ISO-8859-1 is the intended encoding for standard tar headers.
+// However, the provided code structure is maintained here.
+
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
+     * <p>
+     * This method assumes that the name is encoded using simple byte-to-character
+     * mapping, equivalent to ISO-8859-1. Correct handling of bytes with the
+     * high bit set (values > 127) requires treating them as unsigned.
+     * </p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
+        // Using StringBuffer for compatibility with the original code structure.
+        // Consider StringBuilder if thread safety is not required and Java 5+ is assumed.
         StringBuffer result = new StringBuffer(length);
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
             if (buffer[i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            // Treat byte as an unsigned value (0-255) before casting to char.
+            // This prevents sign extension issues for bytes > 127 (negative values)
+            // and correctly maps byte values 0x00-0xFF to Unicode U+0000-U+00FF,
+            // effectively decoding as ISO-8859-1.
+            result.append((char) (buffer[i] & 0xFF));
         }
 
         return result.toString();
     }
\ No newline at end of file
