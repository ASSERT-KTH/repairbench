diff --git a/tmp/0e59e312-c30d-4291-84a3-8c02045de9e1_buggy.java b/tmp/da6fa994-34c6-4bf5-9cf7-f9953119a031_fixed.java
index d6662c7..de1a3fb 100644
--- a/tmp/0e59e312-c30d-4291-84a3-8c02045de9e1_buggy.java
+++ b/tmp/da6fa994-34c6-4bf5-9cf7-f9953119a031_fixed.java
@@ -1,23 +1,51 @@
+import java.io.UnsupportedEncodingException;
+
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
+     * Per POSIX/GNU standards, tar file names are sequences of bytes.
+     * They are not necessarily encoded in any specific character set.
+     * While often ASCII or UTF-8, other encodings or raw bytes are possible.
+     * ISO-8859-1 (Latin-1) is a common assumption for bytes 0-255,
+     * as it maps each byte directly to a Unicode code point (U+0000 to U+00FF).
+     * This method decodes the byte sequence using ISO-8859-1.
+     *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
-
-        for (int i = offset; i < end; ++i) {
+        int len = 0;
+        final int max = offset + length;
+        // Determine the actual length of the name by finding the first NUL byte
+        // or hitting the boundary defined by length.
+        for (int i = offset; i < max; ++i) {
             if (buffer[i] == 0) {
-                break;
+                break; // Found NUL terminator
             }
-            result.append((char) buffer[i]);
+            len++;
         }
 
-        return result.toString();
+        if (len > 0) {
+            try {
+                // Decode the relevant portion of the buffer using ISO-8859-1.
+                // This ensures that bytes 0x80-0xFF are mapped to U+0080-U+00FF,
+                // preserving the byte values as Unicode code points, which seems
+                // to be the behavior required by the test case.
+                return new String(buffer, offset, len, "ISO-8859-1");
+            } catch (UnsupportedEncodingException e) {
+                // This exception should technically never happen, as ISO-8859-1
+                // is required by the Java Language Specification.
+                // If it did, we might fallback to platform default or the original
+                // buggy behavior, but rethrowing seems appropriate given the
+                // guarantee of the encoding's presence.
+                throw new RuntimeException("ISO-8859-1 encoding not supported", e);
+            }
+        }
+        // If the name has zero length (e.g., first byte is NUL or length is 0),
+        // return an empty string.
+        return "";
     }
\ No newline at end of file
