diff --git a/tmp/56977231-4317-46a0-8c8e-3490ba716a17_buggy.java b/tmp/dd999334-7dc6-4f04-b94d-af6330f77d03_fixed.java
index a7e6997..20c7269 100644
--- a/tmp/56977231-4317-46a0-8c8e-3490ba716a17_buggy.java
+++ b/tmp/dd999334-7dc6-4f04-b94d-af6330f77d03_fixed.java
@@ -1,12 +1,56 @@
     /**
      * Tells if the token looks like a short option.
+     * <p>
+     * A token is considered a short option if it starts with a single hyphen
+     * followed by at least one character that is not a hyphen.
+     * This check is purely syntactical and does not verify if the option
+     * character(s) are registered in the {@link Options}.
+     * </p>
+     * Examples of tokens that look like short options: {@code -S}, {@code -SV},
+     * {@code -S=V}, {@code -S1S2}, {@code -h}, {@code -last}.
+     * <p>
+     * Examples of tokens that do not look like short options: {@code -- S},
+     * {@code -}, {@code --}, {@code --long}, {@code value}.
+     * </p>
      *
-     * @param token
+     * @param token The token to check.
+     * @return true if the token has the syntax of a short option, false otherwise.
      */
     private boolean isShortOption(String token)
     {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        // A null token is not an option
+        if (token == null)
+        {
+            return false;
+        }
+
+        // Must start with "-"
+        if (!token.startsWith("-"))
+        {
+            return false;
+        }
+
+        // Must have length >= 2, e.g., "-X"
+        if (token.length() < 2)
+        {
+            // Token is just "-"
+            return false;
+        }
+
+        // Must not be a long option ("--") or the separator ("--")
+        // Check token.charAt(1) != '-' to handle "--" and "--foo"
+        if (token.charAt(1) == '-')
+        {
+            return false;
+        }
 
-        // remove leading "-" and "=value"
+        // Passed all checks, looks like a short option syntactically.
+        // Note: The original implementation also checked options.hasShortOption(token.substring(1, 2)),
+        // which was too strict and caused issues like CLI-265, where a token like "-last"
+        // (where 'l' is not a registered short option) was not recognized as a potential option,
+        // leading it to be potentially consumed as an argument by a preceding option.
+        // This revised implementation correctly identifies tokens with the short option
+        // syntax, deferring the check for whether the option is *registered* to later
+        // stages of parsing (e.g., within handleShortAndLongOption).
+        return true;
     }
\ No newline at end of file
