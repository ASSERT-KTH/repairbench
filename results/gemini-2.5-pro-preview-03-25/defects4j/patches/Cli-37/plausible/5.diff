diff --git a/tmp/1a58765e-0f60-4a5a-aaf0-1c9c0be77cb7_buggy.java b/tmp/08890909-e77d-4ae3-ba46-1021164446bd_fixed.java
index a7e6997..7cc737f 100644
--- a/tmp/1a58765e-0f60-4a5a-aaf0-1c9c0be77cb7_buggy.java
+++ b/tmp/08890909-e77d-4ae3-ba46-1021164446bd_fixed.java
@@ -1,12 +1,55 @@
     /**
      * Tells if the token looks like a short option.
+     * Handles "-opt", "-opt=val", "-o", "-oval" (attached value), "-abc" (cluster).
+     * Distinguishes short options from arguments and long options.
      *
-     * @param token
+     * @param token The token to check.
+     * @return true if the token starts with "-", has at least one character after "-",
+     *         and either the full name (before '=') is a registered short option,
+     *         or the first character is a registered short option (for clusters/attached values).
      */
     private boolean isShortOption(String token)
     {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        // Check basic format: "-" followed by at least one character
+        if (token == null || !token.startsWith("-") || token.length() == 1)
+        {
+            return false;
+        }
+
+        // Find the potential option name (part after "-" and before "=")
+        String optionName = token.substring(1);
+        int pos = optionName.indexOf("=");
+        if (pos != -1)
+        {
+            optionName = optionName.substring(0, pos);
+        }
+
+        // If the potential option name is empty after removing '=', it's invalid. e.g., "-="
+        // This also handles the case where token is just "-" after stripping equals.
+        if (optionName.isEmpty()) {
+             return false;
+        }
+
+        // Check if the full name is a registered short option. Handles "-t1" if "t1" is registered.
+        // This is the primary check.
+        if (options.hasShortOption(optionName))
+        {
+            return true;
+        }
+
+        // If the full name isn't a short option, check if it might be a cluster
+        // or a short option with an attached value (e.g., "-ofile" where "o" is short,
+        // but "ofile" is not registered).
+        // This is only possible if the option name has more than one character, AND
+        // the first character is a registered short option.
+        // (If optionName.length() == 1, it was already checked by options.hasShortOption(optionName) above).
+        if (optionName.length() > 1 && options.hasShortOption(optionName.substring(0, 1)))
+        {
+            // It starts with a known short option, suggesting a cluster or attached value.
+            // The parser logic will handle the separation later.
+            return true;
+        }
 
-        // remove leading "-" and "=value"
+        // Does not match known short option patterns based on registered options.
+        return false;
     }
\ No newline at end of file
