diff --git a/tmp/ac689f29-d204-497b-aab3-d2c1eecb1940_buggy.java b/tmp/62635c1c-44de-4059-b1bd-91ef56a4e950_fixed.java
index a7e6997..a5daa1f 100644
--- a/tmp/ac689f29-d204-497b-aab3-d2c1eecb1940_buggy.java
+++ b/tmp/62635c1c-44de-4059-b1bd-91ef56a4e950_fixed.java
@@ -1,12 +1,52 @@
     /**
      * Tells if the token looks like a short option.
+     * Handles standard single-character options (-S), clusters (-SV),
+     * attached values (-S=V, -SV), and potentially non-standard
+     * multi-character short options (-shortOpt).
      *
-     * @param token
+     * @param token The token to check.
+     * @return {@code true} if the token looks like a short option.
      */
     private boolean isShortOption(String token)
     {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        // Must start with "-" and have at least one character after it.
+        if (token == null || !token.startsWith("-") || token.length() < 2)
+        {
+            return false;
+        }
+
+        // Handle special token "-" normally used for stdin/stdout redirection
+        if (token.equals("-"))
+        {
+           return false;
+        }
+
+        // Extract the potential option name (part after "-" and before "=" if present)
+        // e.g., "-o" -> "o", "-o=val" -> "o", "-oval" -> "oval", "-o1" -> "o1"
+        String optionName = token.substring(1);
+        int equalsPos = optionName.indexOf('=');
+        if (equalsPos != -1)
+        {
+            optionName = optionName.substring(0, equalsPos);
+        }
+
+        // Check if this exact name is registered as a short option.
+        // This handles both standard single-character short options
+        // and non-standard multi-character short options if they are registered.
+        // For standard clustered options like -sv, this check might fail if "sv" isn't
+        // registered, but the parser logic should handle clusters separately after
+        // identifying the start of a potential short option sequence.
+        // The original code only checked the first character: options.hasShortOption(token.substring(1, 2))
+        // The fix is to check the whole token name (up to '=') against registered short options.
+        // This allows options like "-t1" (where "t1" is the registered short option name) to be recognized.
+        if (options.hasShortOption(optionName)) {
+            return true;
+        }
 
-        // remove leading "-" and "=value"
+        // Handle cases like -SV (attached value) or -S1S2 (clusters) for *single character* options.
+        // If the full name isn't a short option, check if the first character is.
+        // This preserves the original logic for standard POSIX behavior where only the first char matters initially.
+        // Note: This might overlap with parser logic that handles clusters/attached values,
+        // but ensures tokens like "-SValue" are identified if 'S' is a short option.
+        return optionName.length() > 0 && options.hasShortOption(optionName.substring(0, 1));
     }
\ No newline at end of file
