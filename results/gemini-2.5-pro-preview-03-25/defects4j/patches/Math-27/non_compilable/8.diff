diff --git a/tmp/c94b27d3-b87f-40af-9b7a-c0636faadcef_buggy.java b/tmp/60a955ed-955e-4dc1-8d65-fb698ac3ded7_fixed.java
index 490e9f7..066497d 100644
--- a/tmp/c94b27d3-b87f-40af-9b7a-c0636faadcef_buggy.java
+++ b/tmp/60a955ed-955e-4dc1-8d65-fb698ac3ded7_fixed.java
@@ -1,11 +1,48 @@
     /**
      * <p>
      * Gets the fraction percentage as a <tt>double</tt>. This calculates the
      * fraction as the numerator divided by denominator multiplied by 100.
      * </p>
      *
      * @return the fraction percentage as a <tt>double</tt>.
      */
     public double percentageValue() {
-        return multiply(100).doubleValue();
+        // Calculate the percentage directly using double arithmetic
+        // to avoid potential integer overflow in intermediate calculations.
+        // The previous implementation `multiply(100).doubleValue()` could cause
+        // integer overflow when calculating the numerator of the intermediate
+        // fraction (numerator * 100), especially for large numerators.
+        return 100.0 * doubleValue();
+        // Alternative equivalent implementation:
+        // return 100.0 * (double)numerator / (double)denominator;
+        // Using doubleValue() is slightly cleaner if available and correct.
+        // Let's assume doubleValue() is correctly implemented as (double)numerator / denominator.
+    }
+
+    // Note: The fix depends on doubleValue() being implemented correctly,
+    // typically as: return (double)numerator / (double)denominator;
+    // If doubleValue() itself had issues, the alternative direct calculation would be necessary.
+    // Given the context, it's more likely the overflow happened in multiply(100).
+    // Therefore, calling the existing doubleValue() and multiplying by 100.0 is the
+    // minimal and correct change. Let's double check doubleValue() implementation.
+    // Assume standard implementation:
+    // public double doubleValue() {
+    //     return (double)numerator / (double)denominator;
+    // }
+    // So, 100.0 * doubleValue() is equivalent to 100.0 * (double)numerator / (double)denominator.
+    // This avoids the integer overflow that occurred in multiply(100).
+
+    // Final proposed code block:
+    /**
+     * <p>
+     * Gets the fraction percentage as a <tt>double</tt>. This calculates the
+     * fraction as the numerator divided by denominator multiplied by 100.
+     * </p>
+     *
+     * @return the fraction percentage as a <tt>double</tt>.
+     */
+    public double percentageValue() {
+        // The previous implementation multiply(100).doubleValue() could overflow.
+        // Calculate percentage using double arithmetic to avoid overflow.
+        return 100.0 * doubleValue();
     }
\ No newline at end of file
