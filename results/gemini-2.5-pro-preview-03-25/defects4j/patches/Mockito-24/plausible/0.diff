diff --git a/tmp/39f36ed9-3347-42f7-bea4-e573c0656372_buggy.java b/tmp/d2a0cbf9-7426-4c28-9b58-06348cca1ab1_fixed.java
index 47915ed..4c7f0b5 100644
--- a/tmp/39f36ed9-3347-42f7-bea4-e573c0656372_buggy.java
+++ b/tmp/d2a0cbf9-7426-4c28-9b58-06348cca1ab1_fixed.java
@@ -1,22 +1,28 @@
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = mockUtil.getMockName(mock);
             if (name.isDefault()) {
                 return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
             //see issue 184.
             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
             //Only for compareTo() method by the Comparable interface
-            return 1;
+            Object mock = invocation.getMock();
+            Object other = invocation.getArguments()[0];
+            if (mock == other) {
+                return 0; // Proper compareTo semantics: return 0 if objects are the same.
+            } else {
+                return 1; // Return non-zero for non-equal objects, consistent with previous behavior for distinct objects.
+            }
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
         return returnValueFor(returnType);
     }
\ No newline at end of file
