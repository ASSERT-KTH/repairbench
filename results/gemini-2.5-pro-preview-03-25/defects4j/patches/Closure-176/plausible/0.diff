diff --git a/tmp/a84ad9c2-fad2-4f8b-97ac-9da3f9b72a74_buggy.java b/tmp/f6df61f9-296b-4128-bec7-0ec0f3a56106_fixed.java
index 8b2f10f..8216222 100644
--- a/tmp/a84ad9c2-fad2-4f8b-97ac-9da3f9b72a74_buggy.java
+++ b/tmp/f6df61f9-296b-4128-bec7-0ec0f3a56106_fixed.java
@@ -1,67 +1,75 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
 
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
         //
         // For example,
         // /** @param {number} */ var f = goog.abstractMethod;
         // it's obvious that the programmer wants you to use
         // the declared function signature, not the inferred signature.
         //
         // Or,
         // /** @type {Object.<string>} */ var x = {};
         // the one-time anonymous object on the right side
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
-
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
         //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
+        // However, we need to make an exception for null/undefined. If a
+        // variable is assigned null or undefined, the scope *must* reflect that,
+        // even if it was a VAR declaration with a declared type.
 
+        // Update the scope if this is an assignment (not a VAR declaration),
+        // or the VAR's type is inferred, or the assigned type is null/undefined.
+        boolean updateScope = !isVarDeclaration ||
+                              var == null ||
+                              var.isTypeInferred() ||
+                              resultType.isNullType() ||
+                              resultType.isVoidType();
 
-        if (isVarTypeBetter) {
+        if (updateScope) {
+          // Update the variable's type in the current scope.
           redeclareSimpleVar(scope, left, resultType);
         }
+
+        // Set the type of the NAME node itself.
+        // For VAR declarations or assignments where the previous type was unknown,
+        // use the result type. Otherwise (assignment with known previous type),
+        // set it to null.
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
+        // If the variable's type in the symbol table (Var object) was originally
+        // inferred, update it globally to the least supertype of the old inferred
+        // type and the new result type. This handles back-inference.
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
         break;
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
     }
   }
\ No newline at end of file
