diff --git a/tmp/d079e44a-6418-4d6e-930a-c1f4ebfebcc2_buggy.java b/tmp/3faf9b31-0f2e-483c-b48f-157f3a94b322_fixed.java
index 8b2f10f..78b700c 100644
--- a/tmp/d079e44a-6418-4d6e-930a-c1f4ebfebcc2_buggy.java
+++ b/tmp/3faf9b31-0f2e-483c-b48f-157f3a94b322_fixed.java
@@ -1,67 +1,76 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
+        // Note: left represents the NAME node (variable itself).
 
-        // When looking at VAR initializers for declared VARs, we tend
-        // to use the declared type over the type it's being
-        // initialized to in the global scope.
-        //
-        // For example,
-        // /** @param {number} */ var f = goog.abstractMethod;
-        // it's obvious that the programmer wants you to use
-        // the declared function signature, not the inferred signature.
-        //
-        // Or,
-        // /** @type {Object.<string>} */ var x = {};
-        // the one-time anonymous object on the right side
-        // is as narrow as it can possibly be, but we need to make
-        // sure we back-infer the <string> element constraint on
-        // the left hand side, so we use the left hand side.
+        // In a var declaration with a declared type (e.g., /** @type {Foo} */ var x = ...;),
+        // we usually want to keep the declared type in the scope, even if the
+        // initial assigned type is narrower. This preserves the programmer's intent and
+        // constraints like {Object<string>}.
+        // However, if null or undefined is assigned, the variable clearly holds that value
+        // at this point in the flow. The scope *must* reflect this for subsequent checks
+        // (like property access) to be accurate.
 
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
+        // Determine if we should update the scope with the resultType.
+        boolean updateScope = true; // Default to updating the scope.
+        if (isVarDeclaration && var != null && !var.isTypeInferred()) {
+          // This is a VAR declaration with an explicit JSDoc type annotation.
+          // Check if the assigned type is null or undefined.
+          if (resultType.isNullType() || resultType.isVoidType()) {
+            // Assigning null or undefined. Update scope to reflect the actual value.
+            updateScope = true;
+          } else {
+            // Assigning some other type. Keep the stronger declared type in the scope.
+            // This handles cases like:
+            // /** @type {Object<string>} */ var x = {}; (scope keeps Object<string>)
+            // /** @param ... */ var f = goog.abstractMethod; (scope keeps function type)
+            updateScope = false;
+          }
+        }
+        // For non-declarations, or declarations without explicit types, or inferred types,
+        // updateScope remains true (the default), so the scope reflects the assigned type.
 
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
-        //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
-
-        if (isVarTypeBetter) {
+        if (updateScope) {
           redeclareSimpleVar(scope, left, resultType);
         }
+
+        // Set the JSType for the NAME node itself.
+        // Original logic: If it's a VAR decl or LHS had no type, use resultType, else null.
+        // This seems related to how the node itself is typed in the AST, possibly separate
+        // from the flow scope's tracking of the variable's type. Let's keep it.
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
+        // Update the type on the Var object itself IF its type was originally inferred.
+        // This affects global type inference or later lookups of the Var's static type.
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
         break;
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
+          // Infer the type of the qualified name slot in the scope.
           scope.inferQualifiedSlot(left, qualifiedName,
+              // If leftType is null (e.g., obj.prop = val when obj unknown), use unknown.
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
+        // Set the type of the GETPROP expression itself to the result type.
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
     }
   }
\ No newline at end of file
