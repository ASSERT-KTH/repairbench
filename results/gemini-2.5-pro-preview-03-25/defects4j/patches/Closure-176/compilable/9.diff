diff --git a/tmp/9a11d309-c7da-41bf-8f59-1f249633bb69_buggy.java b/tmp/2084a733-8393-47f3-9648-f7db0d2b36a3_fixed.java
index 8b2f10f..9c39df3 100644
--- a/tmp/9a11d309-c7da-41bf-8f59-1f249633bb69_buggy.java
+++ b/tmp/2084a733-8393-47f3-9648-f7db0d2b36a3_fixed.java
@@ -1,67 +1,86 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
+        // TODO(johnlenz): scope.getVar should never return null.
+
+        // A null var means that the variable was not declared in
+        // the global scope or outer local scope, and that it might be
+        // a variable targetting a slot in the scope chain. For example,
+        // 'y' in:
+        // function f(x) { with (x) { y = 3; } }
+        // We don't know what 'y' is referring to, so we can't do much.
+
+        // isVarDeclaration is true if this is the NAME node in a VAR declaration.
+        // ex: var x = 1;
+        // left.isName() is true, left.hasChildren() is true.
+        // ex: x = 1;
+        // left.isName() is true, left.hasChildren() is false.
         boolean isVarDeclaration = left.hasChildren();
 
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
         //
         // For example,
         // /** @param {number} */ var f = goog.abstractMethod;
         // it's obvious that the programmer wants you to use
         // the declared function signature, not the inferred signature.
         //
         // Or,
         // /** @type {Object.<string>} */ var x = {};
         // the one-time anonymous object on the right side
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
-
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
         //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
+        // However, if the variable is initialized to null or undefined,
+        // we want the scope to reflect the narrower type, as that's
+        // crucial for nullability/checkTypes checks.
 
+        boolean declaredTypeIsBetter = var != null && isVarDeclaration &&
+            !var.isTypeInferred() &&
+            !resultType.isNullType() &&
+            !resultType.isVoidType(); // Check for null or undefined
 
-        if (isVarTypeBetter) {
+        // Update the scope only if the declared type isn't better, or if the var is null.
+        if (var == null || !declaredTypeIsBetter) {
+           // If the variable is unknown, this might be a slot in the scope chain.
+           // Assignment to such a slot does not redefine the type in the current scope.
+           if (var != null) {
              redeclareSimpleVar(scope, left, resultType);
            }
+        }
+
+        // Set the JSType on the Node. Use the result type when it's a VAR declaration
+        // or the original type was unknown.
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
+        // Update the Var's type if it was originally inferred.
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
         break;
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
     }
   }
\ No newline at end of file
