diff --git a/tmp/bb6eba64-2beb-4e16-8dd1-3dbc977f3f80_buggy.java b/tmp/c844fe69-a130-4f00-a41d-d4061ce3fcb9_fixed.java
index 8b2f10f..dd52614 100644
--- a/tmp/bb6eba64-2beb-4e16-8dd1-3dbc977f3f80_buggy.java
+++ b/tmp/c844fe69-a130-4f00-a41d-d4061ce3fcb9_fixed.java
@@ -1,67 +1,84 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
 
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
         //
         // For example,
         // /** @param {number} */ var f = goog.abstractMethod;
         // it's obvious that the programmer wants you to use
         // the declared function signature, not the inferred signature.
         //
         // Or,
         // /** @type {Object.<string>} */ var x = {};
         // the one-time anonymous object on the right side
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
+        //
+        // However, for flow-sensitive typing, the variable's current type
+        // *must* reflect the assigned value (resultType). The declared type
+        // acts as a constraint checked elsewhere. Therefore, we always update
+        // the scope with the resultType.
+        //
+        // The 'isVarTypeBetter' logic previously prevented updating the scope
+        // when a variable with a declared type was initialized, causing issues
+        // like Issue 1056, where 'x' remained 'Array' in the scope after
+        // 'var x = null;'.
 
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
+        // boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
             // Makes it easier to check for NPEs.
 
         // TODO(nicksantos): This might be a better check once we have
         // back-inference of object/array constraints.  It will probably
         // introduce more type warnings.  It uses the result type iff it's
         // strictly narrower than the declared var type.
         //
         //boolean isVarTypeBetter = isVarDeclaration &&
         //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
         //     || !resultType.isSubtype(varType));
 
 
-        if (isVarTypeBetter) {
+        // Update the scope with the type after the assignment/change.
         redeclareSimpleVar(scope, left, resultType);
-        }
+
+        // Set the JSType for the NAME node itself.
+        // If it's a var declaration, the node represents the variable's value
+        // after initialization. Otherwise (assignment), the node represents the
+        // variable *before* the assignment, so its type might be different or null.
+        // Keep the original logic here for now.
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
+        // If the variable's type was inferred, update the Var object's type.
+        // This seems related to back-inference or global type refinement.
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
         break;
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
     }
   }
\ No newline at end of file
