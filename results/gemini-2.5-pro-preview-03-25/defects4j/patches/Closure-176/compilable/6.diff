diff --git a/tmp/1d811039-54f1-4172-8e0c-192ee42f697c_buggy.java b/tmp/52e62bbf-3eb7-4433-9bde-d6fd8c5200ea_fixed.java
index 8b2f10f..8eb9d1b 100644
--- a/tmp/1d811039-54f1-4172-8e0c-192ee42f697c_buggy.java
+++ b/tmp/52e62bbf-3eb7-4433-9bde-d6fd8c5200ea_fixed.java
@@ -1,67 +1,63 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
 
-        // When looking at VAR initializers for declared VARs, we tend
-        // to use the declared type over the type it's being
-        // initialized to in the global scope.
-        //
-        // For example,
-        // /** @param {number} */ var f = goog.abstractMethod;
-        // it's obvious that the programmer wants you to use
-        // the declared function signature, not the inferred signature.
-        //
-        // Or,
-        // /** @type {Object.<string>} */ var x = {};
-        // the one-time anonymous object on the right side
-        // is as narrow as it can possibly be, but we need to make
-        // sure we back-infer the <string> element constraint on
-        // the left hand side, so we use the left hand side.
+        // Update the scope with the result type known in this flow.
+        // This ensures that flow typing reflects the assignment's outcome,
+        // regardless of whether the variable had a declared type.
+        // For example, after `/** @type {Array} */ var x = null;`, the
+        // scope should know that x is currently null.
+        redeclareSimpleVar(scope, left, resultType);
 
+        // Original logic for deciding whether to use declared type over inferred type
+        // for other purposes (like setting node JSType or updating Var type).
         boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
             // Makes it easier to check for NPEs.
 
         // TODO(nicksantos): This might be a better check once we have
         // back-inference of object/array constraints.  It will probably
         // introduce more type warnings.  It uses the result type iff it's
         // strictly narrower than the declared var type.
         //
         //boolean isVarTypeBetter = isVarDeclaration &&
         //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
         //     || !resultType.isSubtype(varType));
 
 
-        if (isVarTypeBetter) {
-          redeclareSimpleVar(scope, left, resultType);
-        }
+        // Set the JSType for the AST node. Use the result type if this is
+        // a VAR declaration or the LHS node didn't have a type initially.
+        // Otherwise, let the node inherit its type or keep its existing type.
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
+        // Update the Var's static type only if it was inferred.
+        // We don't want assignments to overwrite a declared type.
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
-        break;
+        break; // End of Token.NAME case
+
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
     }
   }
\ No newline at end of file
