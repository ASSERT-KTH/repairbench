diff --git a/tmp/0ad24e83-81a2-4b21-bcb6-009f6e4fb5e4_buggy.java b/tmp/c66e5ca7-f8d5-4dc8-950b-59a5d69fd38e_fixed.java
index 8b2f10f..e2d1017 100644
--- a/tmp/0ad24e83-81a2-4b21-bcb6-009f6e4fb5e4_buggy.java
+++ b/tmp/c66e5ca7-f8d5-4dc8-950b-59a5d69fd38e_fixed.java
@@ -1,67 +1,58 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
 
-        // When looking at VAR initializers for declared VARs, we tend
-        // to use the declared type over the type it's being
-        // initialized to in the global scope.
-        //
-        // For example,
-        // /** @param {number} */ var f = goog.abstractMethod;
-        // it's obvious that the programmer wants you to use
-        // the declared function signature, not the inferred signature.
-        //
-        // Or,
-        // /** @type {Object.<string>} */ var x = {};
-        // the one-time anonymous object on the right side
-        // is as narrow as it can possibly be, but we need to make
-        // sure we back-infer the <string> element constraint on
-        // the left hand side, so we use the left hand side.
-
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
-        //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
-
-        if (isVarTypeBetter) {
+        // Update the flow scope to reflect the type computed by the RHS.
+        // This is the primary responsibility of this function for NAME nodes.
+        // It ensures that the type of the variable in the current scope reflects
+        // the assigned value.
         redeclareSimpleVar(scope, left, resultType);
-        }
+
+        // Set the JSType for the NAME node. This reflects the type of the
+        // L-value expression itself.
+        // In a var declaration, the node represents the variable being declared,
+        // so its type should be the result type.
+        // In an assignment, the node represents the variable before the
+        // assignment, but JSType is often used to propagate the assigned type;
+        // however, the original code used 'null' in assignment if leftType wasn't null.
+        // We stick to the original logic for node type setting to avoid unintended consequences.
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
+        // If the variable's type was inferred (not declared with @type), update
+        // the variable's type in the symbol table to track the new type.
+        // We avoid overriding declared types in the symbol table based on assignments.
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
-        break;
+        break; // End of Token.NAME case
+
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
+          // Infer the type of the qualified name slot in the scope. This updates
+          // the type of the property in the current flow scope.
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
+        // Update the JSType of the GETPROP node itself. This reflects the type
+        // of the property access expression.
         left.setJSType(resultType);
+        // Check if the property is defined on the object it's accessed from.
         ensurePropertyDefined(left, resultType);
         break;
     }
   }
\ No newline at end of file
