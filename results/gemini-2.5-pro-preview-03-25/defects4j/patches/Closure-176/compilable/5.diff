diff --git a/tmp/32d23866-1dcf-40d3-b3e7-101f8ed72dd9_buggy.java b/tmp/9f0a8fb3-ca31-49ba-92f0-27a9dda2322d_fixed.java
index 8b2f10f..e544def 100644
--- a/tmp/32d23866-1dcf-40d3-b3e7-101f8ed72dd9_buggy.java
+++ b/tmp/9f0a8fb3-ca31-49ba-92f0-27a9dda2322d_fixed.java
@@ -1,67 +1,71 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
-        boolean isVarDeclaration = left.hasChildren();
+        boolean isVarDeclaration = NodeUtil.isVarDeclaration(left);
 
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
         //
         // For example,
         // /** @param {number} */ var f = goog.abstractMethod;
         // it's obvious that the programmer wants you to use
         // the declared function signature, not the inferred signature.
         //
         // Or,
         // /** @type {Object.<string>} */ var x = {};
         // the one-time anonymous object on the right side
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
-
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
         //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
-
-        if (isVarTypeBetter) {
+        // However, we *must* update the scope if the new type is null or
+        // undefined. Otherwise, we might not issue warnings for null-dereferences
+        // (like in issue 1056).
+        //
+        // The original logic only updated the scope if:
+        // a) It wasn't a VAR declaration initialization, OR
+        // b) The var's type was inferred.
+        // This prevented updates for VARs with declared types, causing the bug.
+        // boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
+
+        // New logic: Always update the scope to reflect the assigned type.
+        // Flow-sensitive typing requires tracking the current type in the scope.
+        // The declared type is still stored on the Var object for other checks.
         redeclareSimpleVar(scope, left, resultType);
-        }
+
+        // Update the JSType of the NAME node itself. Use original logic here,
+        // as changing it might have unintended side effects. The main fix
+        // is always updating the flow scope via redeclareSimpleVar.
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
+        // Update the Var's overall type if it was originally inferred.
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
-        break;
+        break; // End of Token.NAME case
+
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
-        break;
+        break; // End of Token.GETPROP case
     }
   }
\ No newline at end of file
