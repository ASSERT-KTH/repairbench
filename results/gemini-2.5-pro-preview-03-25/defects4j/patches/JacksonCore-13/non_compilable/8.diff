diff --git a/tmp/a4d5a063-5eab-49cb-8dbc-cd7a783a1509_buggy.java b/tmp/d6c31125-bf57-4d10-9ff2-076b9fe28b20_fixed.java
index e69de29..7a5511c 100644
--- a/tmp/a4d5a063-5eab-49cb-8dbc-cd7a783a1509_buggy.java
+++ b/tmp/d6c31125-bf57-4d10-9ff2-076b9fe28b20_fixed.java
@@ -0,0 +1,60 @@
+import java.io.IOException;
+import java.io.Writer;
+
+import com.fasterxml.jackson.core.*;
+import com.fasterxml.jackson.core.io.SerializedString;
+
+// Assuming this class is WriterBasedJsonGenerator or a similar implementation.
+// The fix targets the logic for writing field names when QUOTE_FIELD_NAMES feature is disabled.
+// It assumes the necessary fields (_writer, _cfgPrettyPrinter, _quoteChar etc.) and methods (isEnabled, _writePPFieldName)
+// are available in the class or its hierarchy.
+public abstract class WriterBasedJsonGenerator extends JsonGeneratorImpl { // Extends necessary base class
+
+    // Provide the likely buggy method dealing with SerializableString field names
+    // This is often the core implementation called by the String version.
+    protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException
+    {
+        // Delegate to pretty printer if configured, as it handles complex formatting.
+        if (_cfgPrettyPrinter != null) {
+            _writePPFieldName(name, commaBefore);
+            return;
+        }
+
+        // Write comma separator if needed before the field name in object context.
+        if (commaBefore) {
+            _writer.write(',');
+        }
+
+        // Check if field names should be quoted according to the feature setting.
+        if (isEnabled(Feature.QUOTE_FIELD_NAMES)) {
+            // Quoting enabled: Write the opening quote character.
+            _writer.write(_quoteChar);
+            // Use SerializableString's optimized method to get pre-quoted and escaped characters.
+            // This assumes asQuotedChars() provides the correct representation including internal escapes.
+            char[] ch = name.asQuotedChars();
+            // Write the quoted and escaped characters to the output writer.
+            _writer.write(ch, 0, ch.length);
+            // Write the closing quote character.
+            _writer.write(_quoteChar);
+        } else {
+            // Quoting disabled: Write the raw field name value without quotes.
+            // The potential bug was incorrectly using a method that added quotes (like asQuotedChars() or _writeString)
+            // or performed inappropriate escaping for unquoted field names.
+            // The fix uses getValue() to retrieve the raw, unquoted string value.
+            // Note: JSON specification does not formally support unquoted field names.
+            // This assumes minimal/no escaping is needed for the raw value in this mode,
+            // which aligns with the typical expectation for this feature.
+            _writer.write(name.getValue());
+        }
+    }
+
+    // Assume these methods are defined elsewhere
+    // protected abstract void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException;
+    // @Override public abstract boolean isEnabled(Feature f);
+    // protected PrettyPrinter _cfgPrettyPrinter;
+    // protected Writer _writer;
+    // protected char _quoteChar;
+
+    // Base class definition placeholder for context
+    protected static abstract class JsonGeneratorImpl extends JsonGenerator { }
+}
\ No newline at end of file
