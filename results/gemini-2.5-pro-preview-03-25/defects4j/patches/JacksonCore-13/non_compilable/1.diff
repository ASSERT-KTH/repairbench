diff --git a/tmp/3b11cd97-b071-44ff-a6da-dae4d546778f_buggy.java b/tmp/160340c7-dc91-4b28-a813-eb3db9715791_fixed.java
index e69de29..5e4f607 100644
--- a/tmp/3b11cd97-b071-44ff-a6da-dae4d546778f_buggy.java
+++ b/tmp/160340c7-dc91-4b28-a813-eb3db9715791_fixed.java
@@ -0,0 +1,53 @@
+// Located in class: com.fasterxml.jackson.core.json.UTF8JsonGenerator
+// Method to fix: _writeFieldName(SerializableString name, boolean commaBefore)
+
+private final void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException
+{
+    if (_cfgPrettyPrinter != null) {
+        _writePPFieldName(name, commaBefore);
+        return;
+    }
+    // verbatim from 2.8.0
+    if ((_outputTail + 1) >= _outputEnd) {
+        _flushBuffer();
+    }
+    if (commaBefore) {
+        _outputBuffer[_outputTail++] = _comma;
+    }
+    // Original code commented out, showing the fix for #246
+    /* Previously:
+    // 14-Mar-2016, tatu: As per [core#246], should still quote, regardless...
+    if (isEnabled(Feature.QUOTE_FIELD_NAMES)) {
+        final byte[] quotedBytes = name.asQuotedUTF8();
+        final int qlen = quotedBytes.length;
+        if ((_outputTail + qlen + 1) >= _outputEnd) { // +1 for ':'
+            _flushBuffer();
+        }
+        System.arraycopy(quotedBytes, 0, _outputBuffer, _outputTail, qlen);
+        _outputTail += qlen;
+    } else {
+        byte[] raw = name.asUnquotedUTF8();
+        final int rlen = raw.length;
+        if ((_outputTail + rlen + 1) >= _outputEnd) { // +1 for ':'
+             _flushBuffer();
+        }
+        System.arraycopy(raw, 0, _outputBuffer, _outputTail, rlen);
+        _outputTail += rlen;
+    }
+    */
+
+    // Fixed code for #246: Always use quoted version from SerializableString
+    final byte[] quotedBytes = name.asQuotedUTF8();
+    final int qlen = quotedBytes.length;
+    if ((_outputTail + qlen + 1) >= _outputEnd) { // +1 for ':'
+        _flushBuffer();
+    }
+    System.arraycopy(quotedBytes, 0, _outputBuffer, _outputTail, qlen);
+    _outputTail += qlen;
+
+    // and finally append the separator
+    if (_outputTail >= _outputEnd) {
+        _flushBuffer();
+    }
+    _outputBuffer[_outputTail++] = _colon;
+}
\ No newline at end of file
