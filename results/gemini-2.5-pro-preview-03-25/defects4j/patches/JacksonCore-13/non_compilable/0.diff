diff --git a/tmp/95f3c388-449b-4e57-9595-8276d46f6741_buggy.java b/tmp/042726f1-274d-4693-9fa8-1f5baa811f87_fixed.java
index e69de29..885531b 100644
--- a/tmp/95f3c388-449b-4e57-9595-8276d46f6741_buggy.java
+++ b/tmp/042726f1-274d-4693-9fa8-1f5baa811f87_fixed.java
@@ -0,0 +1,36 @@
+// Method in class com.fasterxml.jackson.core.json.UTF8JsonGenerator
+private final void _writePPFieldName(SerializableString name) throws IOException
+{
+    /* 20-Apr-2015, tatu: Note: cannot use version that takes String, because
+     *    that depends on calculations based on contexts other than current one...
+     * 14-Mar-2016, tatu: Actually, looks like we must pass String regardless,
+     *    for quoting/escaping logic.
+     */
+    int status = _writeContext.writeFieldName(name.getValue());
+    if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
+        _reportError("Can not write a field name, expecting a value");
+    }
+
+    if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) { // need comma
+        _cfgPrettyPrinter.writeNameValueSeparator(this);
+    } else { // first entry
+        _cfgPrettyPrinter.beforeObjectEntries(this);
+    }
+
+    // 13-Mar-2016, tatu: Need to check if underlying name requires quoting
+    if (_cfgUnqNames) { // If unquoted names allowed
+        // always have to convert (= escape), so:
+         _writeStringSegments(name.getValue(), false); // Write String value, non-quoted
+    } else { // If quoting required
+         // With pretty-printing, always quoting. But have to take care: needs escaping
+         if (_outputTail >= _outputEnd) { _flushBuffer(); }
+         _outputBuffer[_outputTail++] = _quoteChar; // Write leading quote
+
+         // 14-Mar-2016, tatu: Use version that encodes+escapes value, but WITHOUT quotes.
+         // So must use the method that encodes and escapes, but without quotes:
+         _writeStringSegments(name.getValue(), false); // Write String value, non-quoted (escaped)
+
+         if (_outputTail >= _outputEnd) { _flushBuffer(); }
+         _outputBuffer[_outputTail++] = _quoteChar; // Write trailing quote
+    }
+}
\ No newline at end of file
