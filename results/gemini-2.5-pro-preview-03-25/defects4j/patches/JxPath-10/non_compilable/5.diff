diff --git a/tmp/9991b9c0-0682-4b41-9497-7ce8e46ede01_buggy.java b/tmp/3a87372b-30dc-4b59-bf50-8f6ceffe691f_fixed.java
index b86b44d..aace95e 100644
--- a/tmp/9991b9c0-0682-4b41-9497-7ce8e46ede01_buggy.java
+++ b/tmp/3a87372b-30dc-4b59-bf50-8f6ceffe691f_fixed.java
@@ -1,4 +1,55 @@
+import org.apache.commons.jxpath.NodeSet;
+import org.apache.commons.jxpath.ri.compiler.CoreOperationCompare;
+import org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression;
+import java.util.Collection;
+
+// Note: This method likely belongs to a class like CoreOperation, and requires access to 'args' field
+// and 'compute(Object, Object)' method defined in subclasses. Imports added for clarity.
+
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object arg1 = args[0].computeValue(context);
+        Object arg2 = args[1].computeValue(context);
+
+        // Special handling for XPath comparisons involving empty node sets.
+        // According to XPath 1.0 specification section 3.4 (Booleans):
+        // - Comparing an empty node-set using <, <=, >, >= with anything results in FALSE.
+        // - Comparing an empty node-set using = or != with a number, string, or another node-set results in FALSE.
+        // - Comparisons with booleans have specific rules (e.g., boolean(empty-set) is false).
+        // This fix handles the common cases where comparison against an empty node set should yield FALSE,
+        // specifically when the other operand is NOT a boolean.
+        if (this instanceof CoreOperationCompare || this instanceof CoreOperationRelationalExpression) {
+            boolean arg1IsNodeSet = arg1 instanceof NodeSet;
+            boolean arg2IsNodeSet = arg2 instanceof NodeSet;
+
+            // Check if arg1 is an empty NodeSet and arg2 is not Boolean
+            if (arg1IsNodeSet) {
+                // Assuming NodeSet.getPointers() returns the collection of pointers, which is null or empty for an empty set.
+                // Casting should be safe due to instanceof check.
+                Collection pointers = ((NodeSet) arg1).getPointers();
+                boolean arg1IsEmpty = pointers == null || pointers.isEmpty();
+                // If arg1 is empty node set and arg2 is not boolean, result is always false for comparison ops.
+                if (arg1IsEmpty && !(arg2 instanceof Boolean)) {
+                    return Boolean.FALSE;
+                }
+            }
+
+            // Check if arg2 is an empty NodeSet and arg1 is not Boolean
+            if (arg2IsNodeSet) {
+                // Casting should be safe due to instanceof check.
+                Collection pointers = ((NodeSet) arg2).getPointers();
+                boolean arg2IsEmpty = pointers == null || pointers.isEmpty();
+                // If arg2 is empty node set and arg1 is not boolean, result is always false for comparison ops.
+                // This condition is checked *after* the arg1 check. If arg1 was also an empty node set,
+                // the first check would have already returned FALSE. This correctly handles the symmetric case.
+                // If arg1 was boolean and arg2 is empty node set, !(arg1 instanceof Boolean) is false, so we proceed.
+                if (arg2IsEmpty && !(arg1 instanceof Boolean)) {
+                     return Boolean.FALSE;
+                }
+            }
+        }
+
+        // For all other cases (including boolean comparisons with node sets, or non-node-set comparisons),
+        // delegate to the specific operation's compute method.
+        // The compute method is expected to return a boolean.
+        return compute(arg1, arg2) ? Boolean.TRUE : Boolean.FALSE;
     }
