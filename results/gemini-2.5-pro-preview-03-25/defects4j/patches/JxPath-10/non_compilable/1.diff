diff --git a/tmp/59d2d3b0-84cf-41b5-a622-a678bcef5d0c_buggy.java b/tmp/7e319c8c-3f6b-4986-8a59-9ba4de4025fe_fixed.java
index b86b44d..c25f9dc 100644
--- a/tmp/59d2d3b0-84cf-41b5-a622-a678bcef5d0c_buggy.java
+++ b/tmp/7e319c8c-3f6b-4986-8a59-9ba4de4025fe_fixed.java
@@ -1,4 +1,83 @@
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.commons.jxpath.ri.EvalContext;
+import org.apache.commons.jxpath.ri.InfoSetUtil;
+
+// Note: This code assumes the existence of 'args' array (holding Expression arguments)
+// and an abstract method 'compute(Object left, Object right)' defined in the base class
+// or the current class, which performs the actual comparison between two scalar values.
+// It also relies on InfoSetUtil from Apache Commons JXPath.
+
 public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+    Object left = args[0].computeValue(context);
+    Object right = args[1].computeValue(context);
+
+    // Convert arguments to iterators if they represent node-sets or collections.
+    // InfoSetUtil.iterator returns null for primitive types (Number, String, Boolean).
+    Iterator lit = InfoSetUtil.iterator(left);
+    Iterator rit = InfoSetUtil.iterator(right);
+
+    if (lit == null && rit == null) {
+        // If neither is an iterator, compare directly using the specific operation's compute method.
+        return compute(left, right) ? Boolean.TRUE : Boolean.FALSE;
+    }
+
+    if (lit != null && rit != null) {
+        // Node-set vs Node-set comparison:
+        // True if there exists lval in lit and rval in rit such that compute(lval, rval) is true.
+        // Collect the right side to allow multiple iterations over it.
+        List rightValues = new ArrayList();
+        while (rit.hasNext()) {
+            rightValues.add(rit.next());
+        }
+
+        // If either set is empty, the comparison result is false.
+        if (rightValues.isEmpty()) {
+            return Boolean.FALSE;
+        }
+
+        while (lit.hasNext()) {
+            Object lval = lit.next();
+            // Use iterator for the collected right values
+            Iterator rit2 = rightValues.iterator();
+            while (rit2.hasNext()) {
+                 Object rval = rit2.next();
+                 // compute(lval, rval) compares the values according to the specific operation (e.g., >=)
+                 // It should handle potential Pointer objects internally via InfoSetUtil conversions.
+                 if (compute(lval, rval)) {
+                     return Boolean.TRUE; // Found a matching pair
+                 }
+            }
+        }
+        // No matching pair found after checking all combinations.
+        return Boolean.FALSE;
+    }
+
+    // One argument is a node-set/iterator, the other is a scalar value.
+    if (lit != null) {
+        // Left is node-set, Right is scalar:
+        // True if there exists lval in lit such that compute(lval, right) is true.
+        while (lit.hasNext()) {
+            Object lval = lit.next();
+            if (compute(lval, right)) {
+                return Boolean.TRUE;
+            }
+        }
+        // No node in the left set satisfied the condition.
+        return Boolean.FALSE;
+    }
+    else { // rit != null
+        // Left is scalar, Right is node-set:
+        // True if there exists rval in rit such that compute(left, rval) is true.
+        while (rit.hasNext()) {
+            Object rval = rit.next();
+            if (compute(left, rval)) {
+                return Boolean.TRUE;
+            }
+        }
+        // No node in the right set satisfied the condition.
+        return Boolean.FALSE;
+    }
 }
\ No newline at end of file
