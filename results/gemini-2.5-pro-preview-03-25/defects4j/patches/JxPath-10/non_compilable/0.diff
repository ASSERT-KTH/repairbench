diff --git a/tmp/f12746e1-dad7-4bd8-ad5f-9aebbf15b753_buggy.java b/tmp/85029e69-8c5b-4f19-9a04-0e1ca8058980_fixed.java
index b86b44d..b3abb81 100644
--- a/tmp/f12746e1-dad7-4bd8-ad5f-9aebbf15b753_buggy.java
+++ b/tmp/85029e69-8c5b-4f19-9a04-0e1ca8058980_fixed.java
@@ -1,4 +1,35 @@
+import org.apache.commons.jxpath.ri.InfoSetUtil;
+import java.util.Collection;
+import java.util.Iterator;
+
+// ... inside the class containing the computeValue method ...
+// Note: Ensure necessary imports (InfoSetUtil, Collection, Iterator) are available.
+
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object v0 = args[0].computeValue(context);
+        Object v1 = args[1].computeValue(context);
+
+        // Determine if the computed values potentially represent node sets.
+        // Common representations in JXPath include Iterator and Collection (often of Pointers).
+        // Checking the instance type is a way to infer if it *could* be a node set.
+        boolean v0isNodeSet = v0 instanceof Iterator || v0 instanceof Collection; // Add other JXPath specific node set types if necessary
+        boolean v1isNodeSet = v1 instanceof Iterator || v1 instanceof Collection; // Add other JXPath specific node set types if necessary
+
+        // According to XPath 1.0 Section 3.4, comparisons involving an empty node-set must yield false.
+        // We use InfoSetUtil.booleanValue() to check for emptiness.
+        // InfoSetUtil.booleanValue(value) returns false if 'value' represents an empty node set (e.g., empty Iterator/Collection),
+        // and true if it represents a non-empty node set. It also handles conversions for other types.
+        if (v0isNodeSet && !InfoSetUtil.booleanValue(v0)) {
+            // If v0 represents an empty node set, the comparison result is false.
+            return Boolean.FALSE;
+        }
+        if (v1isNodeSet && !InfoSetUtil.booleanValue(v1)) {
+            // If v1 represents an empty node set, the comparison result is false.
+            return Boolean.FALSE;
+        }
+
+        // If neither operand represents an empty node set, proceed with the comparison logic
+        // implemented in the 'compute' method (specific to the operation like =, !=, <, >= etc.).
+        // The 'compute' method handles the detailed XPath comparison rules between various types.
+        return compute(v0, v1) ? Boolean.TRUE : Boolean.FALSE;
     }
