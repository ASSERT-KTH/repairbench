diff --git a/tmp/2ca31ddf-09f3-45b3-9aba-1a77b9c122fe_buggy.java b/tmp/7135ef6e-f725-4986-9852-9a0db0e5e220_fixed.java
index b86b44d..66c0579 100644
--- a/tmp/2ca31ddf-09f3-45b3-9aba-1a77b9c122fe_buggy.java
+++ b/tmp/7135ef6e-f725-4986-9852-9a0db0e5e220_fixed.java
@@ -1,4 +1,39 @@
+import java.util.Iterator;
+import org.apache.commons.jxpath.ri.InfoSetUtil;
+
+// The fix assumes this method belongs to a class handling relational comparisons
+// like <, >, <=, >= (e.g., CoreOperationRelationalExpression) and that
+// node-sets are represented as Iterators in the computed values.
+// It also relies on InfoSetUtil for correct XPath boolean conversion.
+
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object v1 = args[0].computeValue(context);
+        Object v2 = args[1].computeValue(context);
+
+        // XPath 1.0 Spec for relational comparisons (<, >, <=, >=):
+        // If one object to be compared is a node-set and the other is not,
+        // the comparison will be true iff there is a node in the node-set such
+        // that the comparison on the node and the other object is true.
+        // If both are node-sets, it's true iff there exists a node in the first
+        // and a node in the second such that the comparison on their string-values is true.
+        // Crucially, if a node-set involved in such a comparison is empty,
+        // the condition "there is a node..." or "there exists a node..."
+        // can never be met, so the result must be false.
+
+        // Check if either argument is an empty node-set.
+        // We assume node-sets are represented by Iterators here.
+        // InfoSetUtil.booleanValue(value) correctly implements the XPath boolean()
+        // function: for a node-set (Iterator), it returns true if it's non-empty, false otherwise.
+        boolean v1IsEmptyNodeSet = (v1 instanceof Iterator && !InfoSetUtil.booleanValue(v1));
+        boolean v2IsEmptyNodeSet = (v2 instanceof Iterator && !InfoSetUtil.booleanValue(v2));
+
+        // If either operand is an empty node-set, the result of a relational comparison is false.
+        if (v1IsEmptyNodeSet || v2IsEmptyNodeSet) {
+            // This logic is specific to <, >, <=, >= operators.
+            // It assumes this computeValue method is used only for these operators.
+            return Boolean.FALSE;
+        }
+
+        // Otherwise, proceed with the specific comparison logic implemented in the subclass.
+        return compute(v1, v2) ? Boolean.TRUE : Boolean.FALSE;
     }
