diff --git a/tmp/2db074f8-8829-4ab3-a019-a204423df011_buggy.java b/tmp/4d8d2b64-e0f0-4f44-aa55-e3af94798085_fixed.java
index b86b44d..db3f5ca 100644
--- a/tmp/2db074f8-8829-4ab3-a019-a204423df011_buggy.java
+++ b/tmp/4d8d2b64-e0f0-4f44-aa55-e3af94798085_fixed.java
@@ -1,4 +1,35 @@
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import org.apache.commons.jxpath.EvalContext; // Assuming EvalContext is in this package or similar
+
+// The buggy function is likely within a class like CoreOperation or CoreOperationCompare
+// We provide the fixed version of the computeValue method below.
+
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object arg1 = args[0].computeValue(context);
+        Object arg2 = args[1].computeValue(context);
+
+        // Per XPath specification, comparisons involving an empty node-set always yield false.
+        // JXPath sometimes represents node-sets as Collections.
+        // The 'reduction' step within the 'compute' method might convert an empty Collection
+        // to null, which can then be incorrectly converted to 0.0 for numeric comparisons,
+        // leading to wrong results (e.g., null >= 0 becoming 0.0 >= 0.0 -> true).
+        // To avoid this specific path, if an argument evaluates to an empty Collection,
+        // we replace it with an empty Iterator before passing it to the 'compute' method.
+        // The 'compute' method's node-set handling logic (e.g., findMatch using iterators)
+        // correctly returns false when dealing with an empty iterator, aligning with the XPath spec.
+
+        if (arg1 instanceof Collection && ((Collection) arg1).isEmpty()) {
+            // Treat empty collection as an empty node-set via an empty iterator
+            arg1 = Collections.emptyIterator();
+        }
+        if (arg2 instanceof Collection && ((Collection) arg2).isEmpty()) {
+            // Treat empty collection as an empty node-set via an empty iterator
+            arg2 = Collections.emptyIterator();
+        }
+
+        // Proceed with the actual computation logic (specific to the operation type)
+        // The 'compute' method should handle iterators (including empty ones) correctly.
+        return compute(arg1, arg2) ? Boolean.TRUE : Boolean.FALSE;
     }
