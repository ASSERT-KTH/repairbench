diff --git a/tmp/8c97e2de-d083-45f4-b547-e76293ad10ea_buggy.java b/tmp/40e97d08-1815-4ce5-a862-a8238d4a83bc_fixed.java
index b86b44d..fb8dd1b 100644
--- a/tmp/8c97e2de-d083-45f4-b547-e76293ad10ea_buggy.java
+++ b/tmp/40e97d08-1815-4ce5-a862-a8238d4a83bc_fixed.java
@@ -1,4 +1,43 @@
+import org.apache.commons.jxpath.ri.InfoSetUtil;
+import java.util.Iterator;
+
+// The class context is missing, but the method should be placed within the appropriate class.
+// Assuming necessary imports (InfoSetUtil, Iterator) are available or added.
+
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object arg1 = args[0].computeValue(context);
+        Object arg2 = args[1].computeValue(context);
+
+        boolean arg1IsNodeSet = InfoSetUtil.isNodeSet(arg1);
+        // According to XPath 1.0 spec section 3.4/3.5: relational comparisons
+        // (<, >, <=, >=) involving an empty node-set should result in false.
+        // Check if arg1 is an empty node-set.
+        if (arg1IsNodeSet) {
+            // Optimization: InfoSetUtil.iterator() can be expensive.
+            // A cheaper check might be possible depending on the concrete type of arg1,
+            // but using the utility function is safer.
+            Iterator it = InfoSetUtil.iterator(arg1);
+            if (!it.hasNext()) {
+                // If arg1 is an empty node-set, the comparison result is false.
+                return Boolean.FALSE;
+            }
+        }
+
+        boolean arg2IsNodeSet = InfoSetUtil.isNodeSet(arg2);
+        // Check if arg2 is an empty node-set.
+        // This is necessary for cases like (primitive vs empty-node-set)
+        // or (non-empty-node-set vs empty-node-set).
+        if (arg2IsNodeSet) {
+            Iterator it = InfoSetUtil.iterator(arg2);
+            if (!it.hasNext()) {
+                // If arg2 is an empty node-set, the comparison result is false.
+                return Boolean.FALSE;
+            }
+        }
+
+        // If neither argument was an empty node-set (or if they are not node-sets),
+        // proceed with the original specific comparison logic defined in the 'compute' method.
+        // The 'compute' method should handle comparisons between non-empty node-sets
+        // and primitives according to XPath rules.
+        return compute(arg1, arg2) ? Boolean.TRUE : Boolean.FALSE;
     }
