diff --git a/tmp/c66f9496-4b1b-4b0d-b6f5-f1b4794e27f2_buggy.java b/tmp/4a4a872b-ffd1-410f-bca2-47e9d5e92de4_fixed.java
index b86b44d..10258c2 100644
--- a/tmp/c66f9496-4b1b-4b0d-b6f5-f1b4794e27f2_buggy.java
+++ b/tmp/4a4a872b-ffd1-410f-bca2-47e9d5e92de4_fixed.java
@@ -1,4 +1,32 @@
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object v1 = args[0].computeValue(context);
+        Object v2 = args[1].computeValue(context);
+
+        /*
+         * XPath 1.0 spec, Section 3.4 Booleans: Relational expressions
+         * involving node-sets require checking for the existence of a node
+         * in the node-set that satisfies the comparison. If the node-set
+         * is empty, no such node exists, and the comparison must yield false.
+         * This applies to all comparison operators: =, !=, <, >, <=, >=.
+         *
+         * We check if either evaluated argument represents an empty node-set.
+         * In JXPath evaluation, empty node-sets are often represented as
+         * empty Iterators.
+         */
+        boolean v1IsEmptyIterator = v1 instanceof java.util.Iterator && !((java.util.Iterator) v1).hasNext();
+        boolean v2IsEmptyIterator = v2 instanceof java.util.Iterator && !((java.util.Iterator) v2).hasNext();
+
+        // Add check for NodeSet interface as well, if iterator check misses it.
+        boolean v1IsEmptyNodeSet = v1 instanceof org.apache.commons.jxpath.NodeSet && !org.apache.commons.jxpath.util.InfoSetUtil.booleanValue(v1);
+        boolean v2IsEmptyNodeSet = v2 instanceof org.apache.commons.jxpath.NodeSet && !org.apache.commons.jxpath.util.InfoSetUtil.booleanValue(v2);
+
+
+        if (v1IsEmptyIterator || v2IsEmptyIterator || v1IsEmptyNodeSet || v2IsEmptyNodeSet) {
+             // If either operand is an empty node-set (represented as empty iterator or empty NodeSet object),
+             // the result of the comparison is always false.
+            return Boolean.FALSE;
+        }
+
+        // If neither operand represents an empty node-set, proceed with the standard comparison logic.
+        return compute(v1, v2) ? Boolean.TRUE : Boolean.FALSE;
     }
\ No newline at end of file
