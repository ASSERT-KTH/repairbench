diff --git a/tmp/c93c7cc0-1f0c-4564-9fa9-7a04f166584c_buggy.java b/tmp/7dcbdded-8edd-4996-87ad-2fde31e37215_fixed.java
index b86b44d..19bd7b5 100644
--- a/tmp/c93c7cc0-1f0c-4564-9fa9-7a04f166584c_buggy.java
+++ b/tmp/7dcbdded-8edd-4996-87ad-2fde31e37215_fixed.java
@@ -1,4 +1,29 @@
+import org.apache.commons.jxpath.util.ValueUtils;
+
     public final Object computeValue(EvalContext context) {
-        return compute(args[0].computeValue(context), args[1].computeValue(context))
-                ? Boolean.TRUE : Boolean.FALSE;
+        Object v1 = args[0].computeValue(context);
+        Object v2 = args[1].computeValue(context);
+
+        // XPath 1.0 spec section 3.4:
+        // If one object to be compared is a node-set and the other is a number,
+        // then the comparison will be true if and only if there is a node in the
+        // node-set such that the result of performing the comparison on the number
+        // value of the node and the other number is true.
+        // Similar rules apply for node-set vs string and node-set vs boolean.
+        // Crucially, if the node-set is empty, "there is a node" is never true,
+        // so the comparison MUST be false for =, !=, <, >, <=, >=.
+
+        // Check if either operand represents a node-set or collection using ValueUtils.
+        boolean v1IsCollection = ValueUtils.isCollection(v1);
+        boolean v2IsCollection = ValueUtils.isCollection(v2);
+
+        // If either operand is an empty collection/node-set, the result of the comparison is false.
+        // ValueUtils.sizeOf handles various collection/iterator types and returns their size.
+        if ((v1IsCollection && ValueUtils.sizeOf(v1) == 0)
+                || (v2IsCollection && ValueUtils.sizeOf(v2) == 0)) {
+            return Boolean.FALSE;
+        }
+
+        // If neither is an empty node-set, proceed with the original computation logic.
+        return compute(v1, v2) ? Boolean.TRUE : Boolean.FALSE;
     }
\ No newline at end of file
