diff --git a/tmp/1ebfad06-c236-45a9-ba3e-0ddd1653a3cd_buggy.java b/tmp/a62418e4-6aed-4de0-9278-1ea2380d8e96_fixed.java
index 6fecc90..39fb262 100644
--- a/tmp/1ebfad06-c236-45a9-ba3e-0ddd1653a3cd_buggy.java
+++ b/tmp/a62418e4-6aed-4de0-9278-1ea2380d8e96_fixed.java
@@ -1,7 +1,26 @@
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+      // A node represents a value that might be a string if
+      // it is NOT the case that all possible results of the expression
+      // are definitely NOT strings.
+      // We need a predicate that determines if a node definitely cannot be a string.
+      // This is effectively the negation of mayBeStringHelper.
+      Predicate<Node> notMayBeStringPredicate = new Predicate<Node>() {
+        @Override
+        public boolean apply(Node input) {
+          // Assuming mayBeStringHelper(input) returns true if 'input' node
+          // might be a string based on its direct type.
+          return !mayBeStringHelper(input);
+        }
+      };
+      // If all possible results match the "notMayBeStringPredicate", it means the node
+      // can definitely NOT be a string. In that case, !allResultsMatch(...) is !true = false.
+      // If at least one possible result could be a string (i.e., does not match the
+      // "notMayBeStringPredicate"), then allResultsMatch(...) returns false,
+      // and !allResultsMatch(...) is !false = true.
+      return !allResultsMatch(n, notMayBeStringPredicate);
     } else {
+      // Use the basic helper for non-recursive checks (checks the node's direct type).
       return mayBeStringHelper(n);
     }
   }
\ No newline at end of file
