diff --git a/tmp/4631e43f-bc65-48a5-aee8-efb348d876ad_buggy.java b/tmp/f98dfd41-68f7-4285-a8a9-8ffb3df67f5d_fixed.java
index 6fecc90..fb0f10f 100644
--- a/tmp/4631e43f-bc65-48a5-aee8-efb348d876ad_buggy.java
+++ b/tmp/f98dfd41-68f7-4285-a8a9-8ffb3df67f5d_fixed.java
@@ -1,7 +1,32 @@
+import com.google.common.base.Predicate;
+
+// The following is the fixed version of the buggy function `mayBeString`
+// It resides within a class, likely `NodeUtil`, which requires the import above.
+// It assumes the existence of `allResultsMatch` and `mayBeStringHelper` functions
+// with their expected behaviors, and that `MAY_BE_STRING_PREDICATE` was essentially
+// defined as `node -> mayBeString(node, false)`.
+
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+      // A node may be a string if *any* of its possible results may be a string.
+      // This is equivalent to checking that *not all* of its results are
+      // *definitely not* strings. To check this, we use allResultsMatch with
+      // a predicate that checks if a node is *definitely not* a string.
+      // The predicate "definitely not string" is the negation of the base-case
+      // "may be string" check.
+      Predicate<Node> definitelyNotStringPredicate =
+          new Predicate<Node>() {
+            @Override
+            public boolean apply(Node node) {
+              // Check if the node is definitely not a string using the base case check.
+              // `mayBeString(node, false)` invokes `mayBeStringHelper`.
+              return !mayBeString(node, false);
+            }
+          };
+      // If not all results are definitely not strings, then it may be a string.
+      return !allResultsMatch(n, definitelyNotStringPredicate);
     } else {
+      // Base case: perform a non-recursive check using the helper.
       return mayBeStringHelper(n);
     }
   }
\ No newline at end of file
