diff --git a/tmp/cc12c8cb-b8cd-44f1-b458-0b4ac1764873_buggy.java b/tmp/dbe402cb-6e69-43e5-b2dc-56219c5272a5_fixed.java
index 6fecc90..99371d4 100644
--- a/tmp/cc12c8cb-b8cd-44f1-b458-0b4ac1764873_buggy.java
+++ b/tmp/dbe402cb-6e69-43e5-b2dc-56219c5272a5_fixed.java
@@ -1,7 +1,119 @@
+  /**
+   * Returns true if the node represents a value that *may* be a string. This includes control
+   * flow structures where one path might produce a string. This is a conservative estimate.
+   *
+   * @param n The node to check.
+   * @param recurse When true, forces traversal down control structures (like HOOK, AND, OR).
+   *     NOTE: In this revised implementation, recursion is handled internally based on node type,
+   *     but the parameter is kept for compatibility if needed elsewhere, and recursive calls pass true.
+   * @return True if the node's value might be a string.
+   */
   static boolean mayBeString(Node n, boolean recurse) {
-    if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
-    } else {
-      return mayBeStringHelper(n);
+    // This implementation directly handles node types, including recursive cases,
+    // to ensure correct 'OR' logic for potential string results, bypassing
+    // potential issues with allResultsMatch for this specific predicate.
+    // It also incorporates conservative logic based on JSType when available.
+    switch (n.getToken()) {
+      // Definitely String types
+      case STRING:
+      case TEMPLATELIT: // Template literals are strings
+      case TEMPLATELIT_SUB: // Template literal substitutions can be strings
+      case TYPEOF: // typeof operator returns a string
+        return true;
+
+      // Operations potentially resulting in strings
+      case ADD:
+        // '+' potentially performs string concatenation if either operand might be a string.
+        return mayBeString(n.getFirstChild(), true) || mayBeString(n.getLastChild(), true);
+
+      case ASSIGN_ADD:
+        // 'a += b' can result in a string if 'a' might be a string or 'b' might be a string.
+        // Check the types of both LHS (NAME/GETPROP/GETELEM) and RHS.
+        // Conservatively assume true if either side might be string.
+        return mayBeString(n.getFirstChild(), true) || mayBeString(n.getLastChild(), true);
+
+      // Control flow - result might be a string if *any* path might be a string
+      case HOOK: // cond ? then : else
+        return mayBeString(n.getSecondChild(), true) || mayBeString(n.getLastChild(), true);
+
+      case OR: // lhs || rhs
+      case AND: // lhs && rhs
+        // Result can be the value of either lhs or rhs depending on conditions.
+        // True if either operand's evaluation might result in a string.
+        return mayBeString(n.getFirstChild(), true) || mayBeString(n.getLastChild(), true);
+
+      case COMMA: // Result is the value of the right-hand side.
+        return mayBeString(n.getLastChild(), true);
+
+      // Potentially complex cases - be conservative
+      case CALL:
+      case NEW:
+        // Result depends on the function. Assume it might be a string conservatively.
+        // TODO(user): Could potentially check for known string constructors like String().
+        return true;
+
+      case TAGGED_TEMPLATELIT:
+        // Result depends on the tag function. Assume it might be a string conservatively.
+        return true;
+
+      case GETPROP:
+      case GETELEM:
+         // Accessing a property or element. Could it be a string?
+         // Consider obj.prop or arr[i].
+         // Use type information if available, otherwise be conservative.
+         @Nullable JSType propType = n.getJSType();
+         if (propType != null && !propType.isUnknownType() && !propType.isAllType()) {
+            // Check if type guarantees it's not a string.
+            // Return true if isString() is TRUE or UNKNOWN.
+            return propType.isString() != TernaryValue.FALSE;
+         }
+         return true; // Conservative: Assume property access might yield a string.
+
+      case NAME:
+        // Check type information if available.
+        @Nullable JSType nameType = n.getJSType();
+        if (nameType != null && !nameType.isUnknownType() && !nameType.isAllType()) {
+           // Check if type guarantees it's not a string.
+           // Use isString() which returns UNKNOWN if it might be a string or might not.
+           // Return true if type.isString() is TRUE or UNKNOWN.
+           return nameType.isString() != TernaryValue.FALSE;
+        }
+        // No reliable type information, assume it could be a string.
+        return true; // Conservative: Assume unknown name might hold a string.
+
+      // Cases that are definitely NOT strings (based on common JS semantics)
+      case NUMBER:
+      case TRUE:
+      case FALSE:
+      case NULL:
+      case VOID: // undefined
+      case FUNCTION:
+      case REGEXP:
+      case OBJECTLIT:
+      case ARRAYLIT:
+      // Operators returning boolean/number
+      case INSTANCEOF: case EQ: case NE: case SHEQ: case SHNE:
+      case LT: case GT: case LE: case GE: case IN:
+      // Bitwise ops return numbers
+      case BITAND: case BITOR: case BITXOR: case LSH: case RSH: case URSH:
+      // Unary numeric/logical ops
+      case POS: case NEG: case BITNOT: case NOT:
+      // Numeric binary ops
+      case SUB: case MUL: case DIV: case MOD: case EXPONENT:
+      // Assignments (excluding ASSIGN_ADD)
+      case ASSIGN: // Value of assignment is the RHS value
+          return mayBeString(n.getLastChild(), true);
+      // Other assignments coerce to number before operation.
+      case ASSIGN_SUB: case ASSIGN_MUL: case ASSIGN_DIV: case ASSIGN_MOD:
+      case ASSIGN_EXPONENT: case ASSIGN_BITAND: case ASSIGN_BITOR: case ASSIGN_BITXOR:
+      case ASSIGN_LSH: case ASSIGN_RSH: case ASSIGN_URSH:
+      // Increment/Decrement coerce to number
+      case INC: case DEC:
+        return false;
+
+      default:
+        // Assume false for unhandled node types. This mirrors the original mayBeStringHelper's default.
+        // If a new node type can produce strings, it needs explicit handling.
+        return false;
     }
   }
\ No newline at end of file
