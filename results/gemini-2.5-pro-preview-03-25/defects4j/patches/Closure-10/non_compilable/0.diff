diff --git a/tmp/b9d981ad-aed7-46f3-b99b-218b37a16b42_buggy.java b/tmp/1ce59336-413f-4594-b877-d5b2567bfab8_fixed.java
index 6fecc90..dd05bc5 100644
--- a/tmp/b9d981ad-aed7-46f3-b99b-218b37a16b42_buggy.java
+++ b/tmp/1ce59336-413f-4594-b877-d5b2567bfab8_fixed.java
@@ -1,7 +1,37 @@
   static boolean mayBeString(Node n, boolean recurse) {
-    if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+    if (!recurse) {
+      // If not recursing, delegate to the helper which handles basic types
+      // and assumes unknown types might be strings.
+      return mayBeStringHelper(n);
     } else {
+      // If recursing, handle structures that combine results.
+      switch (n.getToken()) {
+        case ADD:
+        case ASSIGN_ADD:
+          // String concatenation can happen if either side is potentially a string.
+          // We need to recursively check the children.
+          return mayBeString(n.getFirstChild(), true)
+              || mayBeString(n.getLastChild(), true);
+
+        case HOOK:
+          // Result is potentially a string if either the 'then' or 'else' branch
+          // is potentially a string. Recurse into branches.
+          return mayBeString(n.getSecondChild(), true)
+              || mayBeString(n.getLastChild(), true);
+
+        case OR:
+        case AND:
+          // Conservatively assume the result might be a string if either operand might be.
+          // While the actual type depends on truthiness and specific values,
+          // this is a safe assumption for 'mayBeString'. Recurse into branches.
+          return mayBeString(n.getFirstChild(), true)
+              || mayBeString(n.getLastChild(), true);
+
+        // For all other node types, delegate to the helper.
+        // The helper handles literals and provides a default (usually true)
+        // for unknown types like NAME, CALL, GETPROP etc.
+        default:
           return mayBeStringHelper(n);
       }
     }
+  }
\ No newline at end of file
