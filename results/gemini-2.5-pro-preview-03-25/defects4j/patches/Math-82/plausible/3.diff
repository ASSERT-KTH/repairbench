diff --git a/tmp/45fdf452-44f2-42fe-bf64-ace1bf36c949_buggy.java b/tmp/5a46bb9c-34fa-47e1-88a3-a81a4ff2e803_fixed.java
index 220820e..159daac 100644
--- a/tmp/45fdf452-44f2-42fe-bf64-ace1bf36c949_buggy.java
+++ b/tmp/5a46bb9c-34fa-47e1-88a3-a81a4ff2e803_fixed.java
@@ -1,22 +1,39 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // Check if the entry in the pivot column is strictly positive
+            // (allowing for floating point inaccuracies)
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
-                if (ratio < minRatio) {
+                // Compare the ratio with the current minimum ratio using floating point comparison
+                final int cmp = Double.compare(ratio, minRatio);
+                if (cmp < 0) {
+                    // This row has a strictly smaller ratio
                     minRatio = ratio;
                     minRatioPos = i;
+                } else if (cmp == 0) {
+                    // This row has a ratio equal to the current minimum.
+                    // Apply a tie-breaking rule (like Bland's rule principle):
+                    // choose the row with the smaller index to help prevent cycling.
+                    // Note: This assumes that the initial basis variables (e.g., slacks)
+                    // are ordered according to row index.
+                    if (minRatioPos != null && i < minRatioPos) {
+                         minRatioPos = i;
+                         // minRatio remains the same
                     }
                 }
+                // else (cmp > 0), current ratio is larger, do nothing
+            }
         }
         return minRatioPos;
     }
\ No newline at end of file
