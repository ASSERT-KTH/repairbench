diff --git a/tmp/3ce541d1-ae45-49bd-a58d-aa5ce19db637_buggy.java b/tmp/8a271aad-0b1e-4694-9ab2-dc53e1093374_fixed.java
index 220820e..cd465ec 100644
--- a/tmp/3ce541d1-ae45-49bd-a58d-aa5ce19db637_buggy.java
+++ b/tmp/8a271aad-0b1e-4694-9ab2-dc53e1093374_fixed.java
@@ -1,22 +1,42 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // The standard Minimum Ratio Test requires the entry in the pivot column
+            // to be strictly positive. We use compareTo with epsilon tolerance.
+            // Check if entry > 0 considering tolerance (entry > epsilon)
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
-                if (ratio < minRatio) {
+                // Compare the ratio with the current minimum ratio using tolerance.
+                // We are looking for the minimum positive ratio.
+                final int comparison = MathUtils.compareTo(ratio, minRatio, epsilon);
+                if (comparison < 0) {
+                    // This ratio is strictly smaller than the current minimum
                     minRatio = ratio;
                     minRatioPos = i;
+                } else if (comparison == 0) {
+                    // Tie-breaking rule: The original code implicitly selects the row
+                    // that appears first in the iteration. A common alternative is
+                    // Bland's rule or choosing the smallest index i. To minimize
+                    // potential side effects, we keep the original behavior:
+                    // the first row encountered with the minimum ratio is chosen.
+                    // Thus, no explicit action is needed here for the tie-breaking case
+                    // unless a different strategy (like smallest index) is desired.
+                    // If smallest index 'i' was desired:
+                    // if (minRatioPos == null || i < minRatioPos) {
+                    //     minRatioPos = i;
+                    // }
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
