diff --git a/tmp/5885588b-3575-40ad-92c9-3952fddaf00f_buggy.java b/tmp/49b596be-380e-4548-8968-524e346503fa_fixed.java
index 220820e..c5a6b76 100644
--- a/tmp/5885588b-3575-40ad-92c9-3952fddaf00f_buggy.java
+++ b/tmp/49b596be-380e-4548-8968-524e346503fa_fixed.java
@@ -1,22 +1,29 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // The pivot element (entry) must be strictly positive for the ratio test.
+            // Original code used compareTo(entry, 0, epsilon) >= 0 which allows entry to be zero or negative within epsilon.
+            // The correct condition is entry > epsilon, which translates to compareTo(entry, 0, epsilon) > 0.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
+                // check if the ratio is strictly smaller than the current minimum ratio
+                // Note: using '<' automatically implements Bland's rule assuming row ordering corresponds to variable index
+                // or picks the first row encountered in case of ties.
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i;
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
