diff --git a/tmp/07c77e10-572c-4939-9b3a-00a292c74b02_buggy.java b/tmp/2743f625-a773-4d1d-943c-d0551211da08_fixed.java
index 220820e..9936010 100644
--- a/tmp/07c77e10-572c-4939-9b3a-00a292c74b02_buggy.java
+++ b/tmp/2743f625-a773-4d1d-943c-d0551211da08_fixed.java
@@ -1,22 +1,43 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // Check if the entry in the pivot column is strictly positive
+            // The original check MathUtils.compareTo(entry, 0, epsilon) >= 0 allowed
+            // entries that are zero or slightly negative (within epsilon), violating
+            // the requirement of the Minimum Ratio Test that the divisor must be strictly positive.
+            // Changing to MathUtils.compareTo(entry, 0, epsilon) > 0 ensures entry > epsilon.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
+                // check if the new ratio is smaller than the current minimum
+                // Use "<" comparison for finding the minimum ratio.
+                // Using MathUtils.compareTo(ratio, minRatio, epsilon) < 0 could be more robust
+                // against floating point issues but might require handling Double.MAX_VALUE carefully.
+                // Sticking to "<" preserves original behavior regarding ties (first row found wins).
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i;
                 }
+                // TODO: Consider adding explicit tie-breaking logic (e.g. Bland's rule)
+                // if cycling or numerical instability becomes an issue.
+                // For example:
+                // else if (MathUtils.compareTo(ratio, minRatio, epsilon) == 0) {
+                //     // Apply tie-breaking rule, e.g., choose the row with the smaller index
+                //     // or the row corresponding to the basic variable with the smallest index.
+                //     if (minRatioPos != null && tableau.getBasicRow(minRatioPos) > tableau.getBasicRow(i)) {
+                //         minRatioPos = i;
+                //     }
+                // }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
