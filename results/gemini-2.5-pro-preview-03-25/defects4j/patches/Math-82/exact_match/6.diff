diff --git a/tmp/d4b4effd-4bcc-45fc-9c55-8795794ff0c1_buggy.java b/tmp/6a7930df-ec1b-4b0e-a49f-7e25d0ec87c4_fixed.java
index 220820e..c67b66b 100644
--- a/tmp/d4b4effd-4bcc-45fc-9c55-8795794ff0c1_buggy.java
+++ b/tmp/6a7930df-ec1b-4b0e-a49f-7e25d0ec87c4_fixed.java
@@ -1,22 +1,28 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // The Minimum Ratio Test requires the pivot column entry to be strictly positive.
+            // Use compareTo(..., 0, epsilon) > 0 to check if entry > epsilon.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
+                // Use "<" comparison: if ratios are tied, the first encountered row is chosen.
+                // (This is consistent with many Simplex implementations, although Bland's rule provides stronger cycling prevention guarantees).
+                // Using compareTo for ratios might add robustness but complicates tie-breaking logic.
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i;
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
