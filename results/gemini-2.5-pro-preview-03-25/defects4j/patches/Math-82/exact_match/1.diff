diff --git a/tmp/f21b413d-5ea5-4af1-b738-448183ecb0c5_buggy.java b/tmp/8a61183a-75ef-4cdf-91b2-f56574310cc6_fixed.java
index 220820e..1f357e0 100644
--- a/tmp/f21b413d-5ea5-4af1-b738-448183ecb0c5_buggy.java
+++ b/tmp/8a61183a-75ef-4cdf-91b2-f56574310cc6_fixed.java
@@ -1,22 +1,29 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // Check if the entry in the pivot column is strictly positive
+            // According to the Minimum Ratio Test, we only consider rows with positive entries in the pivot column.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
+                // find the minimum positive ratio
+                // Note: Negative RHS values are not explicitly handled here, but the standard
+                // Simplex method assumes non-negative RHS for feasibility.
+                // If multiple rows have the same minimum ratio, the one with the lowest index is chosen (Bland's rule implicitly)
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i;
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
