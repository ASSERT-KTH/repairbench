diff --git a/tmp/c650137d-d85b-4100-b92f-1a005397df9b_buggy.java b/tmp/c902cdc2-c495-489b-9b75-795f9cba6a5e_fixed.java
index 220820e..42c7899 100644
--- a/tmp/c650137d-d85b-4100-b92f-1a005397df9b_buggy.java
+++ b/tmp/c902cdc2-c495-489b-9b75-795f9cba6a5e_fixed.java
@@ -1,22 +1,28 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // The entry in the pivot column must be strictly positive for the MRT.
+            // Check if entry > 0 using tolerance.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
+                // find the minimum ratio
+                // Use compareTo for ratio comparison as well for robustness?
+                // Keeping original comparison style for minimal change based on bug report.
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i;
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
