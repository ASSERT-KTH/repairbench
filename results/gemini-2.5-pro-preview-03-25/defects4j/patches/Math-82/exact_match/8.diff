diff --git a/tmp/28d58bc3-b82a-47a2-8140-698c84589b3f_buggy.java b/tmp/86c62fce-ba57-4a84-ae99-053affeaebca_fixed.java
index 220820e..602cefb 100644
--- a/tmp/28d58bc3-b82a-47a2-8140-698c84589b3f_buggy.java
+++ b/tmp/86c62fce-ba57-4a84-ae99-053affeaebca_fixed.java
@@ -1,22 +1,30 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // The Minimum Ratio Test requires the denominator (entry) to be strictly positive.
+            // The original code used >= 0, which included zero or near-zero values,
+            // violating the MRT rule and potentially causing division by zero or numerical instability.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
+                // check if the new ratio is smaller than the current minimum
+                // using compareTo to handle floating point comparisons robustly might be even better,
+                // but sticking to the original comparison logic for minimal change.
+                // E.g., if (MathUtils.compareTo(ratio, minRatio, epsilon) < 0)
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i;
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
