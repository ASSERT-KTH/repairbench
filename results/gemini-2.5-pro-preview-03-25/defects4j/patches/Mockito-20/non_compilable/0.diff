diff --git a/tmp/701c5156-2c8e-4d7b-acfb-a91eb8691a55_buggy.java b/tmp/1129b514-6129-461f-b3c2-55a29b2b2c7c_fixed.java
index f9a9b5b..bc46f60 100644
--- a/tmp/701c5156-2c8e-4d7b-acfb-a91eb8691a55_buggy.java
+++ b/tmp/1129b514-6129-461f-b3c2-55a29b2b2c7c_fixed.java
@@ -1,30 +1,72 @@
+import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.creation.instance.Instantiator;
+import org.mockito.internal.creation.instance.InstantiatorProvider;
+import org.mockito.internal.handler.MockHandlerImpl;
+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;
+import org.mockito.mock.MockCreationSettings;
+import org.mockito.mock.SerializableMode;
+import org.mockito.plugins.MockMaker;
+import org.mockito.invocation.MockHandler;
+import org.mockito.internal.InternalMockHandler; // Assuming this is the type returned by asInternalMockHandler
+
+// Assume the following are available in the class containing the method:
+// import static org.mockito.internal.util.StringJoiner.join;
+// import org.mockito.internal.creation.bytebuddy.BytecodeGenerator; // Type of cachingMockBytecodeGenerator
+// Helper methods:
+// private String describeClass(Object typeOrInstance);
+// private <T> InternalMockHandler<T> asInternalMockHandler(MockHandler handler); // Adjusted return type based on common Mockito structure
+// private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mockInstance);
+// Fields:
+// private final BytecodeGenerator cachingMockBytecodeGenerator;
+// private final InstantiatorProvider instantiatorProvider; // Assumed field
+
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
+
+    // Get the appropriate instantiator based on the settings (e.g., constructor usage, outer instance)
+    Instantiator instantiator = instantiatorProvider.getInstantiator(settings);
+
     T mockInstance = null;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        // Instantiate the mock using the selected instantiator
+        mockInstance = instantiator.newInstance(mockedProxyType);
+
+        // Cast the instance to MockAccess to set the interceptor
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // Create and set the interceptor
+        InternalMockHandler<T> internalMockHandler = asInternalMockHandler(handler); // Use the appropriate internal handler type
+        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(internalMockHandler, settings));
+
+        // Ensure the created mock is assignable to the mocked type (e.g., classloader checks)
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
+        // Provide clearer diagnostics for ClassCastException
+        // Assumes join and describeClass helpers are available
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock:",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                "  class to mock                : " + describeClass(settings.getTypeToMock()),
+                "  created proxy class          : " + describeClass(mockedProxyType),
+                "  real proxy instance class    : " + describeClass(mockInstance), // Can be null if instantiation failed before CCE point
+                "  instance creation method     : " + instantiator.getClass().getSimpleName(),
                 "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
+                "You might experience classloading issues.",
+                "Typically, this error occurs when the classloader settings are wrong.",
+                "Also, please ensure that the type to mock is accessible and non-final.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        // Report failure using the user-provided type's name and keep the cause
+        throw new MockitoException(
+            "Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'",
+            e // Preserve the original exception cause for detailed diagnostics
+        );
     }
 }
\ No newline at end of file
