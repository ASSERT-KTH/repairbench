diff --git a/tmp/059a8d33-ae91-4736-ac8d-027a9e63e93c_buggy.java b/tmp/c6f6b7bb-2bb0-4596-b5d1-6a867cdf99f5_fixed.java
index f9a9b5b..90d572d 100644
--- a/tmp/059a8d33-ae91-4736-ac8d-027a9e63e93c_buggy.java
+++ b/tmp/c6f6b7bb-2bb0-4596-b5d1-6a867cdf99f5_fixed.java
@@ -1,30 +1,40 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+
+        // Get the appropriate instantiator for these settings.
+        // This ensures that spies or mocks configured with .useConstructor()
+        // are instantiated correctly by invoking the constructor.
+        org.mockito.internal.creation.instance.Instantiator instantiator = org.mockito.internal.creation.instance.InstantiatorProvider.INSTANCE.getInstantiator(settings);
+
         T mockInstance = null;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            // Instantiate the mock using the determined instantiator
+            mockInstance = instantiator.newInstance(mockedProxyType);
+
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
+            // Provide more accurate information in the CCE error message
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  class to mock : " + describeClass(settings.getTypeToMock()), // Use settings.getTypeToMock()
+                    "  created proxy class : " + describeClass(mockedProxyType),     // Use mockedProxyType
+                    "  proxy instance class : " + describeClass(mockInstance),        // Use mockInstance
+                    "  instance creation by : " + instantiator.getClass().getSimpleName(), // Use the actual instantiator
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // Use the user-specified type name which is more intuitive
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
