diff --git a/tmp/c87030b1-22c1-4273-b0d8-528990a1353b_buggy.java b/tmp/8e84c191-6375-41bd-8fdb-d540ed67e5dd_fixed.java
index f9a9b5b..d16b996 100644
--- a/tmp/c87030b1-22c1-4273-b0d8-528990a1353b_buggy.java
+++ b/tmp/8e84c191-6375-41bd-8fdb-d540ed67e5dd_fixed.java
@@ -1,30 +1,56 @@
+import org.mockito.internal.creation.instance.ConstructorInstantiator;
+import org.mockito.internal.creation.instance.Instantiator;
+import org.mockito.internal.creation.instance.InstantiationException; // Ensure this is the correct import if needed elsewhere, though the catch uses the FQN.
+import static org.mockito.internal.util.StringJoiner.join; // Assuming this import exists based on usage
+import static org.mockito.internal.util.MockUtil.asInternalMockHandler; // Assuming this import exists based on usage
+
+// Other necessary imports like MockitoException, MockCreationSettings, MockHandler, etc.
+
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+
         T mockInstance = null;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            // Select the appropriate instantiator
+            Instantiator instantiator;
+            if ((settings.isSpy() && settings.getSpiedInstance() == null) || settings.isUsingConstructor()) {
+                 // Use constructor either for spying classes or when explicitly requested
+                 // Outer instance and constructor args are retrieved from settings.
+                 instantiator = new ConstructorInstantiator(settings.getOuterClassInstance(), settings.getConstructorArgs());
+            } else {
+                 // Otherwise, use the default instantiator (likely Objenesis) provided to this MockMaker
+                 instantiator = classInstantiator;
+            }
+
+            // Instantiate the mock using the chosen instantiator
+            mockInstance = instantiator.newInstance(mockedProxyType);
+
+            // Set up the Mockito interceptor
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+            // Ensure type compatibility and return
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
+            // Provide details for ClassCastException diagnosis
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  class to mock : " + describeClass(settings.getTypeToMock()), // Class requested by the user
+                    "  created class : " + describeClass(mockedProxyType), // Actual generated class
+                    "  proxy instance class : " + describeClass(mockInstance), // Class of the created instance (if available)
+                    "  instance creation by : " + ( (settings.isSpy() && settings.getSpiedInstance() == null) || settings.isUsingConstructor() ? ConstructorInstantiator.class.getSimpleName() : classInstantiator.getClass().getSimpleName() ), // Show which instantiator was used
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // Handle exceptions specifically from instantiation attempts (e.g., constructor failures)
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
