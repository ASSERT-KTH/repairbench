diff --git a/tmp/1aafaa06-5411-4622-baff-3cb8b59fb74b_buggy.java b/tmp/52de91dd-389d-4d55-92e1-fc3d1ceeac22_fixed.java
index f9a9b5b..3997211 100644
--- a/tmp/1aafaa06-5411-4622-baff-3cb8b59fb74b_buggy.java
+++ b/tmp/52de91dd-389d-4d55-92e1-fc3d1ceeac22_fixed.java
@@ -1,30 +1,56 @@
+import org.mockito.creation.instance.Instantiator;
+import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;
+import org.mockito.internal.creation.bytebuddy.SubclassInstantiator;
+import org.mockito.internal.creation.instance.InstantiationException;
+import org.mockito.invocation.MockHandler;
+import org.mockito.mock.MockCreationSettings;
+import org.mockito.mock.SerializableMode;
+
+import static org.mockito.internal.util.MockUtil.asInternalMockHandler;
+import static org.mockito.internal.util.MockUtil.describeClass;
+import static org.mockito.internal.util.StringUtil.join;
+
+// Note: This assumes the presence of fields like 'cachingMockBytecodeGenerator'
+// and helper methods like 'ensureMockIsAssignableToMockedType' and 'asInternalMockHandler'
+// Also assumes necessary imports for MockitoException, MockCreationSettings, MockHandler etc. are present.
+
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
+        // Generate or retrieve the mock proxy type from cache
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+
         T mockInstance = null;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            // Instantiate the mock using an instantiator that respects the creation settings
+            // (e.g., uses constructor if requested for spies or via withSettings().useConstructor())
+            Instantiator instantiator = new SubclassInstantiator(settings);
+            mockInstance = instantiator.newInstance(mockedProxyType);
+
+            // Access the mock instance internal fields to set the interceptor
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+            // Ensure the created mock instance is assignable to the mocked type (e.g., for generics)
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
+            // Provide a detailed exception message in case of ClassCastException
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  class to mock : " + describeClass(settings.getTypeToMock()), // User requested type
+                    "  created class : " + describeClass(mockedProxyType),        // Generated proxy type
+                    "  proxy instance class : " + describeClass(mockInstance),     // Actual instance class (can be null if CCE happens early)
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ), cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // Provide a clearer exception message when instantiation fails
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
