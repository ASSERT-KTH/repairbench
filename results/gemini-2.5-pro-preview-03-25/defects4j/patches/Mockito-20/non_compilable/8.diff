diff --git a/tmp/a559df9d-824a-4296-af39-ec1b1f03feec_buggy.java b/tmp/9cc38c4b-dfa3-4661-a3c8-8d3b160485ec_fixed.java
index f9a9b5b..dfb854d 100644
--- a/tmp/a559df9d-824a-4296-af39-ec1b1f03feec_buggy.java
+++ b/tmp/9cc38c4b-dfa3-4661-a3c8-8d3b160485ec_fixed.java
@@ -1,30 +1,53 @@
+    @Override
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+
         T mockInstance = null;
+        // Decalare instantiator variable to use it in the catch block
+        Instantiator instantiator = null;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            // Determine the instantiator based on settings:
+            // - If mockito should use constructor, create an instance an instantiator that uses the constructor
+            // - Otherwise use the default instantiator that bypass the constructor (when possible)
+            if (settings.isUsingConstructor()) {
+                 instantiator = new ConstructorInstantiator(
+                     settings.getOuterClassInstance(),
+                     settings.getConstructorArgs()
+                 );
+            } else {
+                // Use the default instantiator (likely Objenesis-based to bypass constructor)
+                instantiator = classInstantiator;
+            }
+
+            // Instantiate the mock using the chosen instantiator
+            mockInstance = instantiator.newInstance(mockedProxyType);
+
+            // Set the interceptor
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
+            // Useful diagnostics for ClassCastException happened during mock creation
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  class to mock : " + describeClass(settings.getTypeToMock()),
+                    "  created class : " + describeClass(mockedProxyType),
+                    "  proxy instance class : " + describeClass(mockInstance), // Can be null if instantiation failed before assignment
+                    "  instance creation method : " + (settings.isUsingConstructor() ? "constructor" : "jvm-bypass (Objenesis)"),
+                    "  instantiator : " + (instantiator != null ? instantiator.getClass().getSimpleName() : "UNKNOWN"), // Show actual instantiator class
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ), cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // Use a clearer message referencing the type requested by the user for InstantiationException
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
