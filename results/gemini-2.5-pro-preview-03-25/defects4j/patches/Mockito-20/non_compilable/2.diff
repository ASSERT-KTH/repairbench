diff --git a/tmp/5beed2bc-8f66-4f1b-9a29-53fdea11e24e_buggy.java b/tmp/263c9c86-d9e1-4534-abf1-a10ef92e3693_fixed.java
index f9a9b5b..baf4d85 100644
--- a/tmp/5beed2bc-8f66-4f1b-9a29-53fdea11e24e_buggy.java
+++ b/tmp/263c9c86-d9e1-4534-abf1-a10ef92e3693_fixed.java
@@ -1,30 +1,69 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+
+        // Select the appropriate instantiator based on settings
+        // Use the internal Instantiator interface and implementations
+        org.mockito.internal.creation.instance.Instantiator instantiator;
+        if (settings.isUsingConstructor()) {
+            // Explicitly requested constructor use
+            instantiator = new org.mockito.internal.creation.instance.ConstructorInstantiator(
+                    settings.getOuterClassInstance(), settings.getConstructorArgs());
+        } else if (settings.isSpy() && settings.getSpiedInstance() == null) {
+            // Spy based on class requires constructor invocation (usually default constructor)
+            // Pass null for args to let ConstructorInstantiator find the default constructor.
+            instantiator = new org.mockito.internal.creation.instance.ConstructorInstantiator(
+                    settings.getOuterClassInstance(), null);
+        } else {
+            // Standard mock or spy on existing instance: Use the default instantiator (likely Objenesis)
+            // Assumes 'this.classInstantiator' is compatible with org.mockito.internal.creation.instance.Instantiator
+            instantiator = this.classInstantiator;
+        }
+
         T mockInstance = null;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            // Instantiate the proxy class using the selected instantiator
+            // Assumes the internal Instantiator interface uses newInstance method
+            mockInstance = instantiator.newInstance(mockedProxyType);
+
+            // Set the interceptor
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+            // Ensure type compatibility
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
+            // Provide a more informative error message for ClassCastException
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock:",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  Requested type to mock: '" + describeClass(settings.getTypeToMock()) + "'",
+                    "  Generated proxy type: '" + describeClass(mockedProxyType) + "'",
+                    "  Proxy instance class: '" + describeClass(mockInstance) + "'", // describeClass should handle null safely
+                    "  Instance created by: " + instantiator.getClass().getSimpleName(),
                     "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
+                    "You might experience classloading issues, potentially related to multiple classloaders.",
+                    "Underlying exception: " + cce
             ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        } catch (org.mockito.creation.instance.InstantiationException e) { // Catch the specific InstantiationException
+            // Use the simple name of the type being mocked, as expected by tests
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
+        // Catch other potential instantiation errors, though InstantiationException should cover most cases
+        catch (Exception e) {
+             throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
+    }
+
+    // Helper methods assumed to be available in the class scope:
+    // abstract MockHandlerInterface asInternalMockHandler(MockHandler handler);
+    // abstract <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mockInstance);
+    // static String describeClass(Class<?> type); // Example: type == null ? "null" : type.getName();
+    // static String describeClass(Object instance); // Example: instance == null ? "null" : instance.getClass().getName();
+    // static String join(String... lines); // From Mockito's StringJoiner
+    // private final CachingMockBytecodeGenerator cachingMockBytecodeGenerator;
+    // private final org.mockito.internal.creation.instance.Instantiator classInstantiator; // Assumed field
\ No newline at end of file
