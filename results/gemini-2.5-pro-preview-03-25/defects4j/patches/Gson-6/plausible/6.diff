diff --git a/tmp/aa472335-e98f-4bc5-aa65-232498049cb2_buggy.java b/tmp/fbbd3ed8-bd44-4505-8aa0-fba9284ee539_fixed.java
index 1c53d31..449a820 100644
--- a/tmp/aa472335-e98f-4bc5-aa65-232498049cb2_buggy.java
+++ b/tmp/fbbd3ed8-bd44-4505-8aa0-fba9284ee539_fixed.java
@@ -1,20 +1,28 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
+      // Consider supporting JsonSerializer and JsonDeserializer are supported? (Not in original code)
+      // This code path is only responsible for TypeAdapter and TypeAdapterFactory.
       throw new IllegalArgumentException(
-          "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
+          "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference. "
+          + "Got: " + value.getName());
     }
+
+    // The T ypeAdapter or TypeAdapterFactory may return null if it cannot handle the type
+    if (typeAdapter != null) {
       typeAdapter = typeAdapter.nullSafe();
+    }
+
     return typeAdapter;
   }
\ No newline at end of file
