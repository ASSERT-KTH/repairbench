diff --git a/tmp/f0fa64f8-9f5b-491a-8610-02196f7cb39b_buggy.java b/tmp/c630d2c5-b4f7-4cbc-87d1-e6f20af50386_fixed.java
index 1c53d31..32a60f5 100644
--- a/tmp/f0fa64f8-9f5b-491a-8610-02196f7cb39b_buggy.java
+++ b/tmp/c630d2c5-b4f7-4cbc-87d1-e6f20af50386_fixed.java
@@ -1,20 +1,33 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
+      // Get the factory instance and create the TypeAdapter.
+      // The create() method can return null if the factory does not support the type.
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
+      // Consider throwing a more specific error if value is JsonSerializer or JsonDeserializer,
+      // depending on the Gson version and features supported.
+      // Based on the provided snippet, only TypeAdapter and TypeAdapterFactory are checked.
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+
+    // Add a null check before calling nullSafe().
+    // If the factory's create() method returned null, typeAdapter will be null here.
+    // In that case, we should return null, indicating that the @JsonAdapter did not provide an adapter.
+    if (typeAdapter != null) {
+      // Apply the nullSafe wrapper unless the user specified nullSafe=false (if supported by the JsonAdapter annotation version)
+      // Assuming the original behavior (always apply nullSafe) or nullSafe=true is default.
       typeAdapter = typeAdapter.nullSafe();
+    }
     return typeAdapter;
   }
\ No newline at end of file
