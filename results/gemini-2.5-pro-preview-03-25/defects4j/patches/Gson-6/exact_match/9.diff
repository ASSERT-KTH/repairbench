diff --git a/tmp/e5877a21-5a6c-4a7a-8ac6-741ce824b210_buggy.java b/tmp/a4558276-41c3-4dfa-9062-24716622cc8d_fixed.java
index 1c53d31..e73a614 100644
--- a/tmp/e5877a21-5a6c-4a7a-8ac6-741ce824b210_buggy.java
+++ b/tmp/a4558276-41c3-4dfa-9062-24716622cc8d_fixed.java
@@ -1,20 +1,25 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
-          .create(gson, fieldType);
+          .create(gson, fieldType); // This create method can return null
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+
+    // The type adapter created by the factory can be null, Guard against NullPointerException
+    if (typeAdapter != null) {
       typeAdapter = typeAdapter.nullSafe();
+    }
+
     return typeAdapter;
   }
\ No newline at end of file
