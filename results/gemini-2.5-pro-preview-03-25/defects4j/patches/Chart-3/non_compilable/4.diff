diff --git a/tmp/35a3f9c7-affc-4c7c-a589-55136b7e8b36_buggy.java b/tmp/522bdbf7-2d03-4ce4-9a81-0c2f4b9480d3_fixed.java
index 388771b..11207b9 100644
--- a/tmp/35a3f9c7-affc-4c7c-a589-55136b7e8b36_buggy.java
+++ b/tmp/522bdbf7-2d03-4ce4-9a81-0c2f4b9480d3_fixed.java
@@ -1,37 +1,71 @@
+import org.jfree.data.general.SeriesException; // Required for SeriesException
+// Assume TimeSeriesDataItem is accessible and implements Cloneable
+// Assume TimeSeries extends Series and implements Cloneable, providing minY and maxY fields or equivalent logic in add()
+
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
+
+        // Reset the data list and min/max values for the copy.
+        // The super.clone() copied the original series' data reference and
+        // min/max values, which need to be specific to the subset.
         copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+
+        // Reset min/max Y values. Assuming NaN indicates they need recalculation.
+        // The add() method should handle updating these correctly from a NaN state.
+        // If TimeSeries has specific methods to reset these, they should be used.
+        // Based on the test failure, the issue is likely that the original min/max
+        // are retained, so resetting them is necessary.
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
+
+        // If the original series has data, proceed to copy the subset.
+        if (!this.data.isEmpty()) {
+            // Ensure the start and end indices are within the bounds of the original data.
+            int startIdx = Math.max(0, start); // Ensure start is not negative (already checked, but safe)
+            int endIdx = Math.min(end, this.data.size() - 1); // Cap end at the last valid index
+
+            // Only iterate if the adjusted start index is valid and the range is meaningful.
+            if (startIdx <= endIdx && startIdx < this.data.size()) {
+                for (int index = startIdx; index <= endIdx; index++) {
+                    // We are sure index is within bounds [0, data.size() - 1] here.
+                    TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
                     TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                     try {
+                        // Add the cloned item to the copy. The add() method is expected
+                        // to update the copy's min/max Y values correctly now that
+                        // they have been reset to NaN.
                         copy.add(clone);
                     }
                     catch (SeriesException e) {
+                        // Maintain original behavior of printing stack trace for SeriesException
+                        // This indicates an unexpected internal state issue during add.
                         e.printStackTrace();
                     }
                 }
             }
+            // If startIdx > endIdx or startIdx >= this.data.size(), the loop is skipped,
+            // and an empty copy (with NaN min/max) is correctly returned.
+        }
+        // If the original series was empty, the copy remains empty with NaN min/max.
+
         return copy;
     }
\ No newline at end of file
