diff --git a/tmp/ef0aefdd-5d5f-4358-b6fc-11e4eb29fd33_buggy.java b/tmp/1d70e1fa-e587-4ef1-b9a8-7f945f6de2b8_fixed.java
index 388771b..4758bfc 100644
--- a/tmp/ef0aefdd-5d5f-4358-b6fc-11e4eb29fd33_buggy.java
+++ b/tmp/1d70e1fa-e587-4ef1-b9a8-7f945f6de2b8_fixed.java
@@ -1,37 +1,80 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
+     * @throws IllegalArgumentException if {@code start} or {@code end} are
+     *         invalid indices.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+        // Perform shallow clone first. Series.clone() creates a new empty
+        // data list for the clone, but copies metadata including minY/maxY
+        // from the original series.
         TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+
+        // The following line was redundant because super.clone() (specifically
+        // Series.clone()) already replaces the data list reference with a new
+        // empty ArrayList.
+        // copy.data = new java.util.ArrayList(); // Redundant line removed.
+
+        // If the source series is empty, the clone is already empty and correct.
+        // Otherwise, copy the specified range.
         if (this.data.size() > 0) {
+            // Ensure indices are within the bounds of the source data list.
+            // Note: original code didn't explicitly check 'end' here,
+            // relying on get() to throw IndexOutOfBoundsException.
+            // Throwing IllegalArgumentException is slightly cleaner if end is invalid.
+            if (start >= this.data.size()) {
+                 throw new IllegalArgumentException(
+                         "Requires start < size (" + this.data.size() + ").");
+            }
+            if (end >= this.data.size()) {
+                 throw new IllegalArgumentException(
+                         "Requires end < size (" + this.data.size() + ").");
+            }
+            if (start > end) { // Should be caught by earlier check, but double-check
+                throw new IllegalArgumentException("Requires start <= end.");
+            }
+
             for (int index = start; index <= end; index++) {
+                // No need to check bounds again inside the loop due to checks above.
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
+                    // Adding items might incrementally update bounds in the copy,
+                    // potentially starting from the incorrect inherited minY/maxY.
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
-                    e.printStackTrace();
+                    // This exception typically relates to duplicate periods,
+                    // which shouldn't happen when adding to an empty series copy.
+                    System.err.println("Unable to add cloned item.");
+                    e.printStackTrace(); // Keep original error handling.
                 }
             }
         }
+
+        // After adding all items, the inherited minY/maxY and any incremental
+        // updates during add() might leave the bounds incorrect for the subset.
+        // Force a recalculation of minY/maxY based on the actual data in the copy.
+        // This ensures the bounds reflect the copied subset accurately.
+        // If no items were copied (original was empty or range was invalid/empty
+        // based on checks), updateBounds() correctly sets minY/maxY to NaN.
+        copy.updateBounds(); // <-- FIX: Ensure bounds are recalculated correctly.
+
         return copy;
     }
\ No newline at end of file
