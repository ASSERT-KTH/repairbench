diff --git a/tmp/6e9b2195-5981-421e-bd0e-f83a02b52af8_buggy.java b/tmp/2bf06d66-57a1-43c8-a135-c8ab127d2418_fixed.java
index 388771b..f269657 100644
--- a/tmp/6e9b2195-5981-421e-bd0e-f83a02b52af8_buggy.java
+++ b/tmp/2bf06d66-57a1-43c8-a135-c8ab127d2418_fixed.java
@@ -1,37 +1,68 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
+     * @throws IllegalArgumentException if {@code start} or {@code end} are
+     *         outside the valid range of indices.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
+
+        // Reset the data list and cached min/max values for the copy
         copy.data = new java.util.ArrayList();
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
+
         if (this.data.size() > 0) {
+            // Check indices against the size of the original data list
+            // Note: end index is inclusive
+            if (start >= this.data.size()) {
+                 throw new IllegalArgumentException(
+                         "Requires start < size (" + this.data.size() + ").");
+            }
+            if (end >= this.data.size()) {
+                 // This check prevents IndexOutOfBoundsException in the loop
+                 throw new IllegalArgumentException(
+                         "Requires end < size (" + this.data.size() + ").");
+            }
+
+            // Now we know 0 <= start <= end < this.data.size()
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
+                    // Use the add method to ensure consistency (e.g., event
+                    // notification, maxItem constraints) and to update the
+                    // min/max values correctly from their initial NaN state.
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
+                    // This should not happen with a fresh list and cloned items,
+                    // but handle defensively by printing the stack trace,
+                    // maintaining the original behavior.
+                    System.err.println("Internal error cloning data item.");
                     e.printStackTrace();
                 }
             }
         }
+        // If the original series was empty, or if the valid range [start, end]
+        // resulted in no items being copied (e.g., if start and end were valid
+        // but out of order, though prevented by initial check), the copy
+        // remains empty with minY/maxY as NaN.
         return copy;
     }
\ No newline at end of file
