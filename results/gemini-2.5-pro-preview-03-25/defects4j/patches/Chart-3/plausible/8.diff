diff --git a/tmp/5de401ec-1b0f-44ba-b55c-e1b9ebc52ce7_buggy.java b/tmp/f36c8c60-da6d-4d80-a3e4-a549ad101f8f_fixed.java
index 388771b..82238ea 100644
--- a/tmp/5de401ec-1b0f-44ba-b55c-e1b9ebc52ce7_buggy.java
+++ b/tmp/f36c8c60-da6d-4d80-a3e4-a549ad101f8f_fixed.java
@@ -1,37 +1,70 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
+
+        // Reset data structure and cached values specific to the data subset
         copy.data = new java.util.ArrayList();
+        // FIX: Reset min/max Y values. The clone() method copies the original
+        // series' min/max Y values. These need to be reset and recalculated
+        // based on the subset of items being added to the copy.
+        // Initialize to NaN which is the typical initial state.
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
+
+        // Check if there's any data in the original series to potentially copy
         if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
+            // Determine the actual range of indices to copy, clamping to the
+            // bounds of the original data list.
+            int actualStart = Math.max(0, start); // Ensure start index is not negative
+            int actualEnd = Math.min(end, this.data.size() - 1); // Ensure end index is within bounds
+
+            // Only proceed if the calculated range is valid (start <= end) after clamping.
+            // If actualStart > actualEnd, it means the requested range [start, end]
+            // has no overlap with the available data indices [0, size-1].
+            if (actualStart <= actualEnd) {
+                for (int index = actualStart; index <= actualEnd; index++) {
+                    // Get the item from the original series
                     TimeSeriesDataItem item
                             = (TimeSeriesDataItem) this.data.get(index);
+                    // Clone the item to ensure the copy has its own instances
                     TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                     try {
+                        // Add the cloned item to the copy. The 'add' method is
+                        // expected to handle the update of minY and maxY correctly,
+                        // especially now that they've been reset before the loop.
                         copy.add(clone);
                     }
                     catch (SeriesException e) {
+                        // This catch block was in the original code. It might be
+                        // intended to handle unexpected issues during the add operation.
+                        System.err.println("TimeSeries.createCopy(): unable to add cloned item.");
                         e.printStackTrace();
                     }
                 }
             }
+            // If actualStart > actualEnd, the loop is skipped, and the copy remains empty.
+        }
+        // If the original series (this.data) was empty, the copy also remains empty.
+
+        // Return the newly created TimeSeries copy containing the subset of data.
+        // Its minY and maxY values should now reflect the range of values in the subset.
         return copy;
     }
\ No newline at end of file
