diff --git a/tmp/0661bcec-5746-43e9-90be-e732169952eb_buggy.java b/tmp/9494195a-0efe-4f4c-b0a7-36727756dce3_fixed.java
index 388771b..9fc88a1 100644
--- a/tmp/0661bcec-5746-43e9-90be-e732169952eb_buggy.java
+++ b/tmp/9494195a-0efe-4f4c-b0a7-36727756dce3_fixed.java
@@ -1,37 +1,68 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
+
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+
         TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+
+        // The clone operation potentially shallow copies the data list and
+        // the min/max values. We need to create a new list and ensure
+        // the min/max values are recalculated based *only* on the subset
+        // of items being copied.
+        // The clear() method resets the data list AND the min/max values to NaN.
+        // However, clear() also resets timePeriodClass, so we preserve and restore it.
+        copy.data = new java.util.ArrayList(); // Use new list, avoid clear() side effect on timePeriodClass
+        copy.minY = Double.NaN; // Explicitly reset min/max values
+        copy.maxY = Double.NaN;
+
         if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
+            // Ensure indices are within the bounds of the original data list
+            int actualStart = Math.max(start, 0); // Ensure start is not negative (already checked, but safer)
+            int actualEnd = Math.min(end, this.data.size() - 1);
+
+            // Check if the adjusted range is valid
+            if (actualStart <= actualEnd) {
+                for (int index = actualStart; index <= actualEnd; index++) {
+                    // Check index again? Not strictly necessary due to actualEnd logic,
+                    // but protects against potential off-by-one errors if logic changes.
+                    if (index >= this.data.size()) {
+                        // Should not happen with current logic, but defensive check.
+                        break;
+                    }
                     TimeSeriesDataItem item
                             = (TimeSeriesDataItem) this.data.get(index);
                     TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                     try {
+                        // The add method should now correctly update minY and maxY
+                        // starting from NaN, based on the items actually added.
                         copy.add(clone);
                     }
                     catch (SeriesException e) {
+                        // This should not happen if cloning from a valid series
+                        System.err.println("Unable to add cloned item.");
                         e.printStackTrace();
                     }
                 }
             }
+        }
+        // If no items are copied (original empty, or start > end),
+        // the copy will be empty and minY/maxY will remain NaN, which is correct.
         return copy;
     }
\ No newline at end of file
