diff --git a/tmp/f724c6b2-8a04-48d2-92ee-0d7606c13ace_buggy.java b/tmp/1e7b1d7c-fb76-41d0-9c3a-4e40835596a5_fixed.java
index 388771b..4fa994d 100644
--- a/tmp/f724c6b2-8a04-48d2-92ee-0d7606c13ace_buggy.java
+++ b/tmp/1e7b1d7c-fb76-41d0-9c3a-4e40835596a5_fixed.java
@@ -1,37 +1,60 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
+        // Reset min/max Y values, they will be recalculated as items are added
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
         if (this.data.size() > 0) {
+            // Ensure the index doesn't exceed the bounds of the original data
+            if (start >= this.data.size()) {
+                 // This indicates an issue with the requested start index,
+                 // or the series is smaller than expected. Returning an empty series might be one option,
+                 // but based on typical behavior, throwing might be better if start is invalid.
+                 // However, let's adhere to the original loop structure but prevent IndexOutOfBounds.
+                 // If start is valid but >= size, the loop condition will handle it correctly.
+                 // If end is >= size, we need to adjust it.
+                 end = Math.min(end, this.data.size() - 1); // Adjust end to avoid IndexOutOfBounds
+            }
+
+            // Check if the adjusted range is valid before proceeding
+            if (start <= end) {
                 for (int index = start; index <= end; index++) {
+                    // Check if the index is still valid (e.g., if start >= size initially)
+                    // This check is slightly redundant given the adjustments above but adds safety.
+                    if (index < this.data.size()) {
                         TimeSeriesDataItem item
                                 = (TimeSeriesDataItem) this.data.get(index);
                         TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                         try {
-                    copy.add(clone);
+                            copy.add(clone); // add will update minY and maxY correctly
                         }
                         catch (SeriesException e) {
+                            // This should not happen normally when copying items
+                            // to a fresh series, but we keep the original error handling.
                             e.printStackTrace();
                         }
                     }
                 }
+            }
+        }
         return copy;
     }
\ No newline at end of file
