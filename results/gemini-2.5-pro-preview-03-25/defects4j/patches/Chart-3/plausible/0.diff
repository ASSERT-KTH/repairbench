diff --git a/tmp/ad8b002c-ecca-4298-82ae-ae0d1040fceb_buggy.java b/tmp/2e75d6b0-c8f2-4632-b924-19f897b9f2c0_fixed.java
index 388771b..4462c91 100644
--- a/tmp/ad8b002c-ecca-4298-82ae-ae0d1040fceb_buggy.java
+++ b/tmp/2e75d6b0-c8f2-4632-b924-19f897b9f2c0_fixed.java
@@ -1,37 +1,65 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
+
+        // Reset the list of data items and cached min/max values
         copy.data = new java.util.ArrayList();
+        // Assuming TimeSeries caches min and max Y values in fields minY and maxY
+        // Reset them so they are recalculated based *only* on the copied items
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
+        // Note: If other range-dependent cached values exist, they might need resetting too.
+
         if (this.data.size() > 0) {
+            // Ensure the end index is not out of bounds
+            int M = this.data.size() - 1;
+            if (end > M) {
+                end = M;
+            }
+            // If start is still valid relative to the potentially adjusted end
+            if (start <= end) {
                 for (int index = start; index <= end; index++) {
+                    // Check if index is within the bounds of the original data list
+                    // Although start/end checks are done, defensive check inside loop is safer
+                    // if list could somehow change concurrently (unlikely here, but good practice)
+                    // However, given the initial checks and adjustment, index should be valid.
+                    // Let's rely on the check 'start <= end' after adjustment.
                     TimeSeriesDataItem item
                             = (TimeSeriesDataItem) this.data.get(index);
                     TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                     try {
+                        // The add method should correctly update minY and maxY
+                        // starting from the NaN state.
                         copy.add(clone);
                     }
                     catch (SeriesException e) {
+                        // Should not happen if cloning logic is correct and add handles clones
+                        System.err.println("Internal error copying TimeSeries data.");
                         e.printStackTrace();
                     }
                 }
             }
+            // If start > end (occurs if start >= size initially or end was adjusted below start),
+            // the loop is skipped, the copy remains empty, minY/maxY are NaN - this is correct.
+        }
+        // If the original series was empty, the loop is skipped, copy is empty, minY/maxY are NaN - correct.
         return copy;
     }
