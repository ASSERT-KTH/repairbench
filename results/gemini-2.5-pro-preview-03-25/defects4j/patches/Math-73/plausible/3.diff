diff --git a/tmp/d83705d2-7c21-41bf-b348-fa6d7d7c4fca_buggy.java b/tmp/8748923d-a388-4ecb-a14f-617ae4491b25_fixed.java
index 757067a..43de453 100644
--- a/tmp/d83705d2-7c21-41bf-b348-fa6d7d7c4fca_buggy.java
+++ b/tmp/8748923d-a388-4ecb-a14f-617ae4491b25_fixed.java
@@ -1,63 +1,77 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root), or if the function values at the
+     * endpoints do not bracket a root and the initial guess does not provide
+     * a bracket either.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // FIX: Set result to 'min', not 'yMin'
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // FIX: Set result to 'max', not 'yMax'
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // FIX: Add check for non-bracketing endpoints when initial guess doesn't help.
+        // If neither (min, initial) nor (initial, max) brackets the root,
+        // then we must require (min, max) to bracket the root. If they
+        // don't, then all three points have the same sign (or one is zero
+        // and should have been caught earlier).
+        if (yMin * yMax > 0) {
+            throw new IllegalArgumentException
+                ("function values at endpoints do not bracket a root");
+        }
 
-        // full Brent algorithm starting with provided initial guess
+        // full Brent algorithm starting with provided initial guess,
+        // requires yMin * yMax < 0
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
