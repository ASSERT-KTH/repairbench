diff --git a/tmp/624acb54-1bdf-4630-a361-04f5db78af9d_buggy.java b/tmp/fa66f9fb-c142-491a-9bf4-57b8327ac3ba_fixed.java
index 757067a..417473e 100644
--- a/tmp/624acb54-1bdf-4630-a361-04f5db78af9d_buggy.java
+++ b/tmp/fa66f9fb-c142-491a-9bf4-57b8327ac3ba_fixed.java
@@ -1,63 +1,78 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root) or if the function values at the
+     * three points (min, initial, max) have the same sign.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Use 'min' as the result, not 'yMin'
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Use 'max' as the result, not 'yMax'
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // If we reach here, it implies yInitial * yMin >= 0 and yInitial * yMax >= 0.
+        // If yInitial is not zero (checked earlier), this means that
+        // sgn(yInitial) == sgn(yMin) and sgn(yInitial) == sgn(yMax).
+        // Therefore, the function values at min, initial, and max all have the same sign.
+        // The Javadoc requires throwing an IllegalArgumentException in this situation.
+        // The message should reflect this condition.
+        throw new IllegalArgumentException(String.format(
+                "Function values at the three points %.15g, %.15g, %.15g do not bracket the root: values are %.15g, %.15g, %.15g",
+                min, initial, max, yMin, yInitial, yMax));
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        // The original code called the internal solve method here:
+        // return solve(f, min, yMin, max, yMax, initial, yInitial);
+        // This path is incorrect based on the method's contract specified in the Javadoc
+        // and the expectation of the failing unit test, as it violates the precondition
+        // that the function values at the three points should not have the same sign unless
+        // one of the subintervals [min, initial] or [initial, max] brackets the root.
     }
\ No newline at end of file
