diff --git a/tmp/c21c9fe3-125e-4b6c-9905-d9ec67c904c5_buggy.java b/tmp/96a1a3d6-d520-4b1f-9bc2-104235be5c4e_fixed.java
index 757067a..fc51200 100644
--- a/tmp/c21c9fe3-125e-4b6c-9905-d9ec67c904c5_buggy.java
+++ b/tmp/96a1a3d6-d520-4b1f-9bc2-104235be5c4e_fixed.java
@@ -1,63 +1,73 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root) or if the function values at the
+     * provided points do not indicate a root is bracketed.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Fixed: Set result to min, not yMin
+            setResult(min, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Fixed: Set result to max, not yMax
+            setResult(max, 0);
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
+        // Check bracketing: a root is bracketed if function values at endpoints have different signs
+        if (yInitial * yMin < 0) {
+            // Root is bracketed by [min, initial]. Refine interval.
+            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        } else if (yInitial * yMax < 0) {
+            // Root is bracketed by [initial, max]. Refine interval.
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
+        } else {
+            // Initial guess does not form a bracketing interval with either endpoint.
+            // Check if the original interval [min, max] brackets the root.
+            if (yMin * yMax < 0) {
+                 // Root is bracketed by [min, max]. Proceed with the full Brent algorithm,
+                 // using the initial guess as a starting point.
                  return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+            } else {
+                 // No interval brackets the root (yMin, yInitial, yMax have the same sign).
+                 // Throw exception as per Javadoc and bracketing requirement.
+                 throw MathRuntimeException.createIllegalArgumentException(
+                        NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
+            }
+        }
     }
\ No newline at end of file
