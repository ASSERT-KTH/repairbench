diff --git a/tmp/cd4c62eb-c3ee-443e-b6d5-38aa806ed7b9_buggy.java b/tmp/8736f2e7-61f7-4132-b4e2-cb1c0b7fd886_fixed.java
index 757067a..9cdb365 100644
--- a/tmp/cd4c62eb-c3ee-443e-b6d5-38aa806ed7b9_buggy.java
+++ b/tmp/8736f2e7-61f7-4132-b4e2-cb1c0b7fd886_fixed.java
@@ -1,63 +1,82 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root) or if the function values at the
+     * three points (min, max, initial) have the same sign.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Fix: Set result to min, not yMin
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Fix: Set result to max, not yMax
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // If we reach here, neither endpoint formed a bracket with the
+        // initial point. This implies that yInitial has the same sign
+        // as both yMin and yMax. According to the Javadoc, we must throw
+        // an exception if all three points have the same sign.
+        // The case yMin * yMax < 0 is implicitly handled:
+        // If yMin * yMax < 0, then yMin and yMax have opposite signs.
+        // It's impossible for yInitial to have the same sign as both.
+        // Therefore, this point is only reached if yMin, yInitial, and yMax
+        // have the same sign (or are zero, which is handled earlier).
+        throw new IllegalArgumentException(String.format(
+                "Function values at endpoints do not bracket any root. " +
+                "Values at endpoints are [%f, %f]", yMin, yMax));
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        // The original code had a call here:
+        // return solve(f, min, yMin, max, yMax, initial, yInitial);
+        // This call is problematic because it doesn't guarantee a bracketing
+        // interval for the underlying solver if yMin * yMax >= 0 and
+        // no bracket exists with the initial point.
+        // It is removed because the exception above should be thrown instead,
+        // matching the Javadoc contract for non-bracketing signs.
     }
\ No newline at end of file
