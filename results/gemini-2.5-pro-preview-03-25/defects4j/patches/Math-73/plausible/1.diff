diff --git a/tmp/9717e515-ccda-4953-9331-4c1ddee54020_buggy.java b/tmp/ad0b26d3-5313-43f3-b85e-3725fd6f34c8_fixed.java
index 757067a..a3a9272 100644
--- a/tmp/9717e515-ccda-4953-9331-4c1ddee54020_buggy.java
+++ b/tmp/ad0b26d3-5313-43f3-b85e-3725fd6f34c8_fixed.java
@@ -1,63 +1,80 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root) or if the function values at the
+     * three points (min, max, initial) have the same sign.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Fixed: return min, not yMin
+            setResult(min, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Fixed: return max, not yMax
+            setResult(max, 0);
             return result;
         }
 
+        // Check that min, initial, and max don't have the same sign
+        // Required by Javadoc. Also catches the case where endpoints have
+        // the same sign and the initial point doesn't help create a bracket.
+        if (yInitial * yMin > 0 && yInitial * yMax > 0) {
+             throw new IllegalArgumentException
+                ("Function values at endpoints and initial point must not have the same sign." +
+                 "  Endpoints: [" + min + ", " + max + "]" +
+                 ", Values: [" + yMin + ", " + yMax + "]" +
+                 ", Initial: " + initial + ", Value: " + yInitial);
+        }
+
+
+        // reduce interval if min and initial bracket the root
+        if (yInitial * yMin < 0) {
+            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        }
+
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-
+        // If we get here, then yMin and yMax must have opposite signs
+        // (since the case where all 3 have same sign was checked above)
+        // So the interval [min, max] brackets the root.
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
