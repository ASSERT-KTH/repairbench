diff --git a/tmp/bfbb2d9f-10a5-4a6f-b3d8-e848abc49259_buggy.java b/tmp/6573d4ab-4965-4aad-99ca-b67301911121_fixed.java
index 757067a..c022ee2 100644
--- a/tmp/bfbb2d9f-10a5-4a6f-b3d8-e848abc49259_buggy.java
+++ b/tmp/6573d4ab-4965-4aad-99ca-b67301911121_fixed.java
@@ -1,63 +1,79 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
+     * @throws IllegalArgumentException if the function values at the three
+     * points (min, max, initial) have the same sign.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        // Evaluate function values
         double yInitial = f.value(initial);
+        double yMin = f.value(min);
+        double yMax = f.value(max);
+
+        // return the initial guess if it is good enough
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
-        double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Fixed: Set result to min, not yMin
+            setResult(min, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
-        double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Fixed: Set result to max, not yMax
+            setResult(max, 0);
             return result;
         }
 
+        // Check bracketing conditions
+        if (yInitial * yMin < 0) {
+            // reduce interval if min and initial bracket the root
+            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        } else if (yInitial * yMax < 0) {
             // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
+        } else {
+            // Neither (min, initial) nor (initial, max) brackets the root.
+            // Brent method requires the function to have opposite signs at the
+            // endpoints of the provided interval. Check if (min, max) brackets.
+            // If not, it means yMin, yInitial, and yMax likely have the same sign.
+            if (yMin * yMax < 0) {
+                 // Root is bracketed by (min, max). Proceed with the full Brent algorithm
+                 // using the provided initial guess.
                  return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+            } else {
+                 // The function values at the three points (min, initial, max) must have the same sign
+                 // (unless some were zero, which was handled earlier).
+                 // This violates the requirement for Brent method.
+                 throw new IllegalArgumentException(
+                     "function values at endpoints and initial guess have the same sign");
+           }
+        }
     }
\ No newline at end of file
