diff --git a/tmp/071a5590-556c-4f0a-b488-63bc6044c681_buggy.java b/tmp/12bbead3-1058-4b4e-b784-59b62a5cf0aa_fixed.java
index 757067a..07201fa 100644
--- a/tmp/071a5590-556c-4f0a-b488-63bc6044c681_buggy.java
+++ b/tmp/12bbead3-1058-4b4e-b784-59b62a5cf0aa_fixed.java
@@ -1,63 +1,73 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root), or if the function values at the
+     * endpoints and initial guess do not bracket a root.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        // Evaluate function at initial, min, and max
         double yInitial = f.value(initial);
+        double yMin = f.value(min);
+        double yMax = f.value(max);
+
+        // return the initial guess if it is good enough
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
-        double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // Use min, not yMin
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
-        double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // Use max, not yMax
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
+        // Check for bracketing:
+        // A root is bracketed if initial has different sign than either endpoint,
+        // or if the endpoints have different signs.
+        if (yInitial * yMin < 0) {
+            // Root is bracketed by [min, initial]. Refine using this interval.
+            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        } else if (yInitial * yMax < 0) {
+            // Root is bracketed by [initial, max]. Refine using this interval.
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
+        } else if (yMin * yMax < 0) {
+             // Root is bracketed by [min, max]. Use initial point as starting guess.
             return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        } else {
+            // If none of the above conditions are met, the function values
+            // do not indicate a bracketed root according to the requirement.
+            // (Either all have the same sign, or some are zero but not close enough to count as roots).
+             throw new IllegalArgumentException(
+                 "Function values at endpoints do not bracket a root. " +
+                 "Values at endpoints: [" + min + ", " + max + "] -> [" + yMin + ", " + yMax + "]. " +
+                 "Value at initial: " + initial + " -> " + yInitial);
+        }
     }
\ No newline at end of file
