diff --git a/tmp/f20becf0-e141-4804-ac28-b456a3ebe8e1_buggy.java b/tmp/b95f4743-240a-4f3e-8116-0d30ad460059_fixed.java
index 757067a..6695f28 100644
--- a/tmp/f20becf0-e141-4804-ac28-b456a3ebe8e1_buggy.java
+++ b/tmp/b95f4743-240a-4f3e-8116-0d30ad460059_fixed.java
@@ -1,63 +1,81 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
+     * <p>Throws <code>IllegalArgumentException</code> if the function values
+     * at the endpoints {@code min} and {@code max} do not bracket a root (i.e.
+     * {@code f(min) * f(max) >= 0}), unless the value at the {@code initial}
+     * point has a different sign than either endpoint.</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root), or if the function values do not
+     * indicate a root is bracketed by the interval / initial point.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
+        verifySequence(min, initial, max); // Check min <= initial <= max
 
-        // return the initial guess if it is good enough
+        // Evaluate function values
         double yInitial = f.value(initial);
+        double yMin = f.value(min);
+        double yMax = f.value(max);
+
+        // return the initial guess if it is good enough
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
-        double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // Use min as the result, not yMin
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
-        double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // Use max as the result, not yMax
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
+        // Check bracketing condition between min and initial
+        if (yInitial * yMin < 0) {
+            // Root is in [min, initial]
+            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        }
+
+        // Check bracketing condition between initial and max
         if (yInitial * yMax < 0) {
+            // Root is in [initial, max]
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-
-        // full Brent algorithm starting with provided initial guess
+        // If neither [min, initial] nor [initial, max] brackets a root,
+        // check the overall interval [min, max]. This is the standard
+        // requirement for Brent's method.
+        if (yMin * yMax < 0) {
+             // Root is in [min, max], proceed with the Brent algorithm using initial
              return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        } else {
+             // If yMin * yMax >= 0, no interval brackets the root according to the signs.
+             // This includes the case where yMin, yInitial, yMax all have the same sign.
+             throw new IllegalArgumentException(
+                 String.format("Function values at endpoints do not bracket a root. Values at [%f, %f]: [%f, %f]",
+                               min, max, yMin, yMax));
+        }
     }
\ No newline at end of file
