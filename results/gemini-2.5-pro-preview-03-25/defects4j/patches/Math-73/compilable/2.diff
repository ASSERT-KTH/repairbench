diff --git a/tmp/05d82eac-7260-4590-a7ff-844049e88a86_buggy.java b/tmp/dc4a3964-a901-4e6b-991e-52841a0da861_fixed.java
index 757067a..2e53a11 100644
--- a/tmp/05d82eac-7260-4590-a7ff-844049e88a86_buggy.java
+++ b/tmp/dc4a3964-a901-4e6b-991e-52841a0da861_fixed.java
@@ -1,63 +1,66 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root), or if the function values at the
+     * three points (min, max, initial) have the same sign.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
+        // Calculate function values
+        final double yInitial = f.value(initial);
+        final double yMin = f.value(min);
+        final double yMax = f.value(max);
+
+        // Check for roots at the input points
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
-
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // Use min, not yMin
             return result;
         }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // Use max, not yMax
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
+        // Check for bracketing condition
+        if (yMin * yInitial < 0) {
+            // The interval [min, initial] brackets the root.
+            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        } else if (yInitial * yMax < 0) {
+            // The interval [initial, max] brackets the root.
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
+        } else if (yMin * yMax < 0) {
+             // The interval [min, max] brackets the root.
+             // Use the full Brent algorithm starting with initial guess.
             return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        } else {
+            // If none of the pairs bracket the root, the function values must have the same sign.
+            throw new IllegalArgumentException(String.format(
+                    "Function values at endpoints [%.10g, %.10g] and initial guess %.10g " +
+                    "do not bracket a root. Values are [%.10g, %.10g] and %.10g.",
+                    min, max, initial, yMin, yMax, yInitial));
+        }
     }
\ No newline at end of file
