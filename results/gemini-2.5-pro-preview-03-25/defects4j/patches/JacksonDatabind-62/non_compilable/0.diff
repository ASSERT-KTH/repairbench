diff --git a/tmp/71ea54cf-de4f-4559-a69f-15dbd7b51435_buggy.java b/tmp/2c9ce29f-fec5-4bbd-b4ea-ffc573d659f8_fixed.java
index 6c9090f..b67ea63 100644
--- a/tmp/71ea54cf-de4f-4559-a69f-15dbd7b51435_buggy.java
+++ b/tmp/2c9ce29f-fec5-4bbd-b4ea-ffc573d659f8_fixed.java
@@ -1,45 +1,69 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
+        // Let's make local copy since ValueInstantiator is immutable in common case
+        ValueInstantiator valueInstantiator = _valueInstantiator;
         JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        if (valueInstantiator != null) {
+            // Use getter for creator to be more specific/reliable than `canCreateXxx`
+            // (canCreateUsingDelegate() may rely on delegateType == null check; incorrect)
+            AnnotatedWithParams delegateCreator = valueInstantiator.getDelegateCreator();
+            if (delegateCreator != null) {
+                JavaType delegateType = valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
+                            +": value instantiator ("+valueInstantiator.getClass().getName()
+                            +") returned non-null Delegate Creator method, but null for 'getDelegateType()'");
                 }
+                // Find the delegate deserializer
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
+            // Note: Property-based creators are not handled here in the provided code snippet.
+            // They are handled elsewhere, possibly directly by ValueInstantiator logic.
         }
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
+
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+
+        // Compare resolved components with current ones; only create new instance if changed.
+        // Use Objects.equals() for potentially null Boolean values.
+        // Assuming the original 'withResolved' and state comparison didn't involve NullProvider.
+        // (Note: later versions might include NullProvider comparison here too)
+        if (Objects.equals(_unwrapSingle, unwrapSingle)
+                && (_delegateDeserializer == delegateDeser)
+                && (_valueDeserializer == valueDeser)
+                && (_valueTypeDeserializer == valueTypeDeser)) {
+            return this;
+        }
+
+        // Create new instance with potentially resolved components
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
