diff --git a/tmp/c9c07d06-dfd0-4dad-829d-7d501bf0e5da_buggy.java b/tmp/673dce08-4225-4909-9050-23e52e79177b_fixed.java
index 6c9090f..2b9080c 100644
--- a/tmp/c9c07d06-dfd0-4dad-829d-7d501bf0e5da_buggy.java
+++ b/tmp/673dce08-4225-4909-9050-23e52e79177b_fixed.java
@@ -1,45 +1,70 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
+        // Start with existing delegate deserializer, if any:
+        JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
+
         // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
+            JavaType delegateType = null;
             if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
+            } else if (_valueInstantiator.canCreateUsingArrayDelegate()) { // Also check array delegate
+                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+                if (delegateType == null) {
+                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
+                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'");
+                }
+            }
+
+            // If potential delegate creator, find/validate/contextualize deserializer:
+            if (delegateType != null) {
+                if (delegateDeser == null) {
+                    // If no delegate deserializer assigned yet, find one
                     delegateDeser = findDeserializer(ctxt, delegateType, property);
+                } else { // if we already had one, may need to contextualize
+                    // Note: MUST ensure contextualization, should be fine for secondary call
+                    delegateDeser = ctxt.handleSecondaryContextualization(delegateDeser,
+                            property, delegateType);
                 }
             }
+        }
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
 
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
+
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+        // Pass along resolved delegate, value deserializer, value type deserializer, unwrap single setting
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
