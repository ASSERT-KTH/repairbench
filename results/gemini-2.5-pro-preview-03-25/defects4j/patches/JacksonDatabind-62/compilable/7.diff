diff --git a/tmp/4f5e1a34-2400-4aed-bd9b-f455c62cc1c9_buggy.java b/tmp/a0a9d168-fd6c-4aa7-823b-76012f43c5dd_fixed.java
index 6c9090f..ef9a5e1 100644
--- a/tmp/4f5e1a34-2400-4aed-bd9b-f455c62cc1c9_buggy.java
+++ b/tmp/a0a9d168-fd6c-4aa7-823b-76012f43c5dd_fixed.java
@@ -1,45 +1,56 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
+        // For contextualization, handlers may be re-configured; start with current/defaults,
+        // then potentially update based on context.
+
+        ValueInstantiator valueInst = _valueInstantiator;
+        // Keep references to current deserializers in case resolution does not change them
+        JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
+        JsonDeserializer<?> valueDeser = _valueDeserializer;
+        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
+        // By default, retain existing setting for inclusion of single value:
+        Boolean unwrapSingle = _unwrapSingle;
+
         // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        if (valueInst != null && valueInst.canCreateUsingDelegate()) {
+            JavaType delegateType = valueInst.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
+                throw new IllegalArgumentException(String.format(
+                        "Invalid delegate-creator definition for %s: value instantiator (%s) returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'",
+                        _collectionType, valueInst.getClass().getName()));
             }
+            // Resolve delegate deserializer contextually
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
-        }
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
-        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
+        Boolean override = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
-        JsonDeserializer<?> valueDeser = _valueDeserializer;
+        if (override != null) {
+             unwrapSingle = override; // Update setting if override is found
+        }
 
-        // May have a content converter
+        // Resolve value deserializer:
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
-        // and finally, type deserializer needs context as well
-        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
+
+        // Resolve value type deserializer:
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+
+        // Call withResolved using the possibly updated values
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
