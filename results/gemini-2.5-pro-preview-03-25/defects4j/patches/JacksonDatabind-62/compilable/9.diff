diff --git a/tmp/259c2345-eeea-4778-b46e-4d41a94c98bb_buggy.java b/tmp/351153df-d6db-43e1-a65b-0f7429a2befd_fixed.java
index 6c9090f..55a7fe7 100644
--- a/tmp/259c2345-eeea-4778-b46e-4d41a94c98bb_buggy.java
+++ b/tmp/351153df-d6db-43e1-a65b-0f7429a2befd_fixed.java
@@ -1,45 +1,52 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
+        // A) If already resolved, no need to re-resolve
+        JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
+        if (delegateDeser == null) {
+             // B) If not yet resolved, try to find one
+             if (_valueInstantiator != null && _valueInstantiator.canCreateUsingDelegate()) {
                  JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                  if (delegateType == null) {
                      throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                              +": value instantiator ("+_valueInstantiator.getClass().getName()
                              +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                  }
+                 // find the actual deserializer; only resolving once contextualized (if applicable)
                  delegateDeser = findDeserializer(ctxt, delegateType, property);
              }
-        }
+        } // else already resolved, possibly contextualized, keep as is
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
+            // no specification necessary, can use contextual value resolution:
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+        // `withResolved` will handle case where no changes were made
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
