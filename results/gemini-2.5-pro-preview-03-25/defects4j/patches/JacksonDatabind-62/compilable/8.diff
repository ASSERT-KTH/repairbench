diff --git a/tmp/408b7325-0cc4-45ed-aafb-cd2d6acf9664_buggy.java b/tmp/13d91737-790f-4e77-abc8-58f9f15eefab_fixed.java
index 6c9090f..6c370ed 100644
--- a/tmp/408b7325-0cc4-45ed-aafb-cd2d6acf9664_buggy.java
+++ b/tmp/13d91737-790f-4e77-abc8-58f9f15eefab_fixed.java
@@ -1,45 +1,54 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        ValueInstantiator valueInstantiator = _valueInstantiator;
+
+        // [databind#2324]: Check ValueInstantiator here, if possible?
+
+        // For delegate-based creators, needs contextualization using the delegate type:
+        if (valueInstantiator != null) {
+            if (valueInstantiator.canCreateUsingDelegate()) {
+                JavaType delegateType = valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +": value instantiator ("+valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
+                // Important: Must call findContextualValueDeserializer not findValueDeserializer
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
+            // NOTE: Property-based creators MUST be handled properly by ValueInstantiator.createContextual()
+            // (if instantiator implements ContextualValueInstantiator)
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
+            // We may have been called without initially knowing value deserializer (which typically
+            // happens when type deserializer is used for generic type): if so, need to find it now
            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
