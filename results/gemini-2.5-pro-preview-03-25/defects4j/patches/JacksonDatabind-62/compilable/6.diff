diff --git a/tmp/b000118f-7454-4887-ab2c-cbc159df1f96_buggy.java b/tmp/e23a6226-bed7-4d5f-be6d-972fbe059264_fixed.java
index 6c9090f..4c84373 100644
--- a/tmp/b000118f-7454-4887-ab2c-cbc159df1f96_buggy.java
+++ b/tmp/e23a6226-bed7-4d5f-be6d-972fbe059264_fixed.java
@@ -1,45 +1,64 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        // [databind#1484]: Make sure to use existing delegate ref, if any
+        JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
+        ValueInstantiator valueInstantiator = _valueInstantiator;
+
+        if (valueInstantiator != null) {
+            // Check if creator needs contextualization? No. Resolve delegate? Yes.
+            if (valueInstantiator.canCreateUsingDelegate()) {
+                JavaType delegateType = valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +": value instantiator ("+valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
+                // And find the value deserializer for the delegate type
+                // must be contextualized for the property access
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
+            // Otherwise, we may have property-based creator, accessible either via
+            // default creator plus setters, or taking arguments? Just need ValueInstantiator, configuration settings
+            // No: need contextual info too. If so, maybe this does not belong here...
+            /*
+            else if (valueInstantiator.canCreateFromObjectWith()) {
+                SettableBeanProperty[] creatorProps = valueInstantiator.getFromObjectArguments(ctxt.getConfig());
+                 valueInstantiator = valueInstantiator.configureCreatorPropertyBased(ctxt, creatorProps);
+                 // TBDEL?
             }
+            */
+        }
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
 
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+        // Note: We pass ValueInstantiator unchanged, but delegate deserializer potentially resolved
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
