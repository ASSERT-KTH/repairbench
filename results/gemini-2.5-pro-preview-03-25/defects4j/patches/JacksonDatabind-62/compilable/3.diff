diff --git a/tmp/b7673f3e-709b-4c3c-8c0d-bf34ec35171a_buggy.java b/tmp/fad1b1fb-4245-4835-bfba-fdb80636074d_fixed.java
index 6c9090f..504377c 100644
--- a/tmp/b7673f3e-709b-4c3c-8c0d-bf34ec35171a_buggy.java
+++ b/tmp/fad1b1fb-4245-4835-bfba-fdb80636074d_fixed.java
@@ -1,45 +1,58 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
+        // To resolve [databind#799]: may need contextual delegate deserializer
+        // 15-Sep-2017, tatu: Not 100% sure this is right, but seems reasonable..
         if (_valueInstantiator != null) {
+             // Important: do NOT call `getDelegateType()` if no delegates are being used,
+             // as it may not be valid to do so (if delegate types are not used)
+             // (likewise, for delegate creator)
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
+                // Theoretically should be `Object.class`? Or actual type? Probably actual type, so:
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
+            } else if (_valueInstantiator.canCreateFromObjectWith()) {
+                // Need details about CreatorProperty used, to let caller determine delegate strategy
             }
+            // Otherwise, no delegate; use standard String or Int key deserializer most likely
         }
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+        // `delegateDeser` may be null, assuming `_valueInstantiator` figures things out
+        // (i.e. has logic to create delegate using Creator properties)
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
