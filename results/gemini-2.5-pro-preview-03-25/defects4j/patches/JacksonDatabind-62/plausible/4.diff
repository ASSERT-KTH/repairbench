diff --git a/tmp/fed9696f-ec1c-4ee2-95cf-83c053b2f5d9_buggy.java b/tmp/c1066203-a5b3-4754-9dde-535846ec3c34_fixed.java
index 6c9090f..867f458 100644
--- a/tmp/fed9696f-ec1c-4ee2-95cf-83c053b2f5d9_buggy.java
+++ b/tmp/c1066203-a5b3-4754-9dde-535846ec3c34_fixed.java
@@ -1,45 +1,58 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
+            JavaType delegateType = null;
             if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
+            } else if (_valueInstantiator.canCreateUsingArrayDelegate()) { // Add check for array delegate
+                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+                 if (delegateType == null) {
+                    throw new IllegalArgumentException("Invalid array-delegate-creator definition for "+_collectionType
+                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'");
+                 }
+            }
+            // If defined, find/contextualize the delegate deserializer:
+            if (delegateType != null) {
+                // Important: must pass 'property' that contains collection, not property of delegate
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
