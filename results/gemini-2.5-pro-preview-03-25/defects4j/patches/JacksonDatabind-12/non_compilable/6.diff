diff --git a/tmp/7255a57c-e0f1-495e-951a-911856b89e5e_buggy.java b/tmp/0255f2a9-ea58-4f6f-89f5-25c98c81816b_fixed.java
index 845704e..a17efa7 100644
--- a/tmp/7255a57c-e0f1-495e-951a-911856b89e5e_buggy.java
+++ b/tmp/0255f2a9-ea58-4f6f-89f5-25c98c81816b_fixed.java
@@ -1,21 +1,32 @@
     /**
      * Turns out that these are expensive enough to create so that caching
      * does make sense.
      *<p>
      * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
      * a value type deserializer; this caused an issue with 2.4.4 of
      * JAXB Annotations (failing a test).
      * It is also possible that some other settings could make deserializers
      * un-cacheable; but on the other hand, caching can make a big positive
      * difference with performance... so it's a hard choice.
+     * Additions based on [databind#735] and general complexity (Object Id, etc).
      * 
      * @since 2.4.4
      */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
+         * Further, existence of Object Id, any-setter or back-reference
+         * properties also make bean deserializers non-cachable.
          */
+        // NOTE: logic updated to include checks for ObjectIdReader, AnySetter, BackReferenceProperty
         return (_valueTypeDeserializer == null)
-                && (_ignorableProperties == null);
+                && (_ignorableProperties == null)
+                // [databind#735]: Should also check for key/value custom deserializers?
+                // If so, that state is not available here in builder; has to be checked
+                // elsewhere? For now, let's add other known reasons for non-cachability:
+                && (_objectIdReader == null)
+                && (_backRefProperties == null)
+                && (_anySetter == null)
+        ;
     }
