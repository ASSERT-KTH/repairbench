diff --git a/tmp/6b0a6bc5-59e9-4829-9d7e-b194a73f7614_buggy.java b/tmp/d90cdfe2-2bc2-406d-a08b-e6b9a1379276_fixed.java
index 845704e..41d7645 100644
--- a/tmp/6b0a6bc5-59e9-4829-9d7e-b194a73f7614_buggy.java
+++ b/tmp/d90cdfe2-2bc2-406d-a08b-e6b9a1379276_fixed.java
@@ -1,21 +1,45 @@
     /**
      * Turns out that these are expensive enough to create so that caching
      * does make sense.
      *<p>
      * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
      * a value type deserializer; this caused an issue with 2.4.4 of
      * JAXB Annotations (failing a test).
      * It is also possible that some other settings could make deserializers
      * un-cacheable; but on the other hand, caching can make a big positive
      * difference with performance... so it's a hard choice.
      *
      * @since 2.4.4
      */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
+         * Although the primary fix for #735 was implemented in MapDeserializer,
+         * BeanDeserializers might also be uncacheable due to various contextual
+         * configurations. Adding checks for common cases like object identity,
+         * delegation, creator properties, and external type ids, similar to
+         * checks found in later versions.
          */
-        return (_valueTypeDeserializer == null)
-                && (_ignorableProperties == null);
+        // Original checks:
+        if (_valueTypeDeserializer != null || _ignorableProperties != null) {
+             return false;
+        }
+        // Add checks for other known contextual features that prevent caching:
+        // (These were added in later versions to address various caching issues)
+        if (_objectIdReader != null || _delegateDeserializer != null ||
+            _externalTypeIdHandler != null || _creatorProperties != null) {
+            return false;
+        }
+        // Ensure that _anySetter is also checked, as it can be contextual
+        if (_anySetter != null) { // Adding check for _anySetter which might be contextual
+            return false;
+        }
+        // And check unwrapped properties handler
+        if (_unwrappedPropertyHandler != null) { // Adding check for unwrapped properties
+             return false;
+        }
+
+        // Otherwise, assume it is cachable
+        return true;
     }
