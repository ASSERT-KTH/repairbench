diff --git a/tmp/49e54cd4-b3e8-468e-b835-bbd73fb16cdd_buggy.java b/tmp/034c4470-ac38-46ef-a850-202ce803ff4e_fixed.java
index 845704e..675a95c 100644
--- a/tmp/49e54cd4-b3e8-468e-b835-bbd73fb16cdd_buggy.java
+++ b/tmp/034c4470-ac38-46ef-a850-202ce803ff4e_fixed.java
@@ -1,21 +1,39 @@
     /**
      * Turns out that these are expensive enough to create so that caching
      * does make sense.
      *<p>
      * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
      * a value type deserializer; this caused an issue with 2.4.4 of
      * JAXB Annotations (failing a test).
      * It is also possible that some other settings could make deserializers
      * un-cacheable; but on the other hand, caching can make a big positive
      * difference with performance... so it's a hard choice.
      * 
      * @since 2.4.4
      */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
+         * We'll broaden this to cover any property that has TypeDeserializer
+         * (for polymorphic handling).
          */
-        return (_valueTypeDeserializer == null)
-                && (_ignorableProperties == null);
+        if (_valueTypeDeserializer != null) {
+            return false;
+        }
+        if (_ignorableProperties != null) {
+            return false;
+        }
+        // Also, let's traverse properties, see if any require TypeDeserializer.
+        if (_beanProperties != null) {
+            final Iterator<SettableBeanProperty> it = _beanProperties.iterator();
+            while (it.hasNext()) {
+                // 04-Feb-2017, tatu: As per [databind#1521], existence of TypeDeserializer
+                //   for properties may prevent cachability as well
+                 if (it.next().getValueTypeDeserializer() != null) {
+                     return false;
+                 }
+            }
+        }
+        return true;
     }
