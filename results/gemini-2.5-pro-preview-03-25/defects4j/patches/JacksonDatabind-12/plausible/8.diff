diff --git a/tmp/9e36822e-1069-48b4-ae7b-56f7505bfc06_buggy.java b/tmp/dc2b7b94-28de-4743-aa26-5da1efe0a272_fixed.java
index 845704e..65c8182 100644
--- a/tmp/9e36822e-1069-48b4-ae7b-56f7505bfc06_buggy.java
+++ b/tmp/dc2b7b94-28de-4743-aa26-5da1efe0a272_fixed.java
@@ -1,21 +1,30 @@
     /**
      * Turns out that these are expensive enough to create so that caching
      * does make sense.
      *<p>
      * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
      * a value type deserializer; this caused an issue with 2.4.4 of
      * JAXB Annotations (failing a test).
      * It is also possible that some other settings could make deserializers
      * un-cacheable; but on the other hand, caching can make a big positive
      * difference with performance... so it's a hard choice.
+     * <p>
+     * Also: May not be cachable if it has key or value deserializers,
+     * or value type deserializer
      * 
      * @since 2.4.4
      */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
+         * Same goes for value type deserializer (used for generics).
          */
-        return (_valueTypeDeserializer == null)
-                && (_ignorableProperties == null);
+        // NOTE: key/value deserializer instances may NOT be cachable, if they are
+        // contextual; for now assume they are NOT reliably cachable.
+        // Later perhaps try to determine if they are standard ones that are
+        // indeed cachable.
+        return (_valueDeserializer == null)
+                && (_keyDeserializer == null)
+                && (_valueTypeDeserializer == null);
     }
