diff --git a/tmp/6938f859-c206-41ae-97fd-a1743c163f4c_buggy.java b/tmp/0ce4848e-039e-420d-9b86-f08c2ceaa556_fixed.java
index 845704e..fb6f41f 100644
--- a/tmp/6938f859-c206-41ae-97fd-a1743c163f4c_buggy.java
+++ b/tmp/0ce4848e-039e-420d-9b86-f08c2ceaa556_fixed.java
@@ -1,21 +1,29 @@
     /**
      * Turns out that these are expensive enough to create so that caching
      * does make sense.
      *<p>
      * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
      * a value type deserializer; this caused an issue with 2.4.4 of
      * JAXB Annotations (failing a test).
      * It is also possible that some other settings could make deserializers
      * un-cacheable; but on the other hand, caching can make a big positive
      * difference with performance... so it's a hard choice.
      * 
      * @since 2.4.4
      */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
+         * We also know that presence of Value Type Deserializer prevents caching.
+         * Also, if ignorable properties are present.
          */
-        return (_valueTypeDeserializer == null)
+        // Both key and value deserializers must be standard ones for caching to work
+        // Also, no value type deserializer; and no ignorable properties
+        // NOTE: value deserializer is for CONTENTS (values of map/collection),
+        // value type deserializer is for the container type itself.
+        return (_valueDeserializer == null) 
+                 && (_keyDeserializer == null)
+                 && (_valueTypeDeserializer == null)
                  && (_ignorableProperties == null);
     }
