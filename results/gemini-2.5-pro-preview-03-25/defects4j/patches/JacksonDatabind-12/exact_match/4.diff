diff --git a/tmp/95f74d27-7244-4945-b2e8-6b6d2ddba346_buggy.java b/tmp/e976bdf8-c6bf-4266-8571-7079fb9dce7a_fixed.java
index 845704e..6004d32 100644
--- a/tmp/95f74d27-7244-4945-b2e8-6b6d2ddba346_buggy.java
+++ b/tmp/e976bdf8-c6bf-4266-8571-7079fb9dce7a_fixed.java
@@ -1,21 +1,31 @@
     /**
      * Turns out that these are expensive enough to create so that caching
      * does make sense.
      *<p>
      * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
      * a value type deserializer; this caused an issue with 2.4.4 of
      * JAXB Annotations (failing a test).
      * It is also possible that some other settings could make deserializers
      * un-cacheable; but on the other hand, caching can make a big positive
      * difference with performance... so it's a hard choice.
      * 
      * @since 2.4.4
      */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
+         * We can check this simply by seeing if related fields are null
+         * after construction, but before resolve() has been called.
          */
-        return (_valueTypeDeserializer == null)
+        // also: value instantiator is non-cachable? why?
+        // 22-Dec-2017, tatu: Turns out ValueInstantiator is needed too...
+        //   Probably because it'd be weird to attach it to an otherwise
+        //  "standard" deserializer? Or maybe knows something about props?
+        //   ...
+        // Let's NOT include ValueInstantiator check for now, minimal fix:
+        return (_valueDeserializer == null)
+                && (_keyDeserializer == null)
+                && (_valueTypeDeserializer == null)
                 && (_ignorableProperties == null);
     }
