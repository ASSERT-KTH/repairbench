diff --git a/tmp/44346553-d34c-4b02-bf07-244f0b4d3035_buggy.java b/tmp/0d040964-b099-4332-9749-4d878353c4f8_fixed.java
index 03b03d7..51336e8 100644
--- a/tmp/44346553-d34c-4b02-bf07-244f0b4d3035_buggy.java
+++ b/tmp/0d040964-b099-4332-9749-4d878353c4f8_fixed.java
@@ -1,25 +1,81 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+        // Get the offset at the current instant
+        int offset = getOffset(instant);
 
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // Find the transition defining the start of the period including 'instant'.
+        // Adding 1ms handles cases where 'instant' is exactly at a transition.
+        long prevTrans = previousTransition(instant + 1);
+
+        // Check if the transition at prevTrans resulted in an overlap (offset decreased).
+        // We need the offset *before* prevTrans for this comparison.
+        if (prevTrans != Long.MIN_VALUE) {
+            int offsetPrev = getOffset(prevTrans - 1); // Offset before the transition
+            int offsetAtPrev = getOffset(prevTrans); // Offset immediately after the transition
+
+            // Check if offset decreased (e.g., -2h to -3h) indicating an overlap started.
+            if (offsetAtPrev < offsetPrev) { 
+                long duration = (long)offsetPrev - offsetAtPrev; // Duration of the overlap in milliseconds
+                long overlapEndUTC = prevTrans + duration; // UTC time when the overlap effect ends
+
+                // Check if 'instant' falls within the second part of the overlap interval (UTC).
+                // The instant must be within [prevTrans, overlapEndUTC)
+                // AND it must be using the later offset (offsetAtPrev).
+                if (instant >= prevTrans && instant < overlapEndUTC && offset == offsetAtPrev) { 
+                    // Instant is in the second half of the overlap.
+                    long local = instant + offset; // Calculate the local time
+                    // Calculate the UTC instant corresponding to the same local time but using the earlier offset.
+                    long earlierUTC = local - offsetPrev; 
+                    // Calculate the UTC instant corresponding to the same local time but using the later offset.
+                    long laterUTC = local - offsetAtPrev; // This should == instant
+
+                    // Return the UTC instant corresponding to the requested offset (earlier or later).
+                    return earlierOrLater ? laterUTC : earlierUTC;
+                }
+            }
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // Find the transition defining the end of the period including 'instant'.
+        long nextTrans = nextTransition(instant);
+        
+        // If nextTrans is the same as instant, or MAX_VALUE, there's no relevant upcoming transition.
+        if (nextTrans == instant || nextTrans == Long.MAX_VALUE) {
+             return instant; // Instant is not in the first part of an overlap.
+        }
+
+        // Get the offset that will apply after the next transition.
+        int offsetNext = getOffset(nextTrans);
+
+        // Check if the offset will decrease at nextTrans (e.g., -2h to -3h), indicating an overlap will start.
+        // The current instant must be before nextTrans and use the earlier offset (offset > offsetNext).
+        if (offset > offsetNext) {
+            // Overlap starts at nextTrans. Check if the *local time* of the current instant
+            // falls into the ambiguous range of local times created by this overlap.
+            long local = instant + offset; // Local time using the current (earlier) offset
+            
+            // Calculate the start and end of the ambiguous local time range.
+            long overlapLocalStart = nextTrans + offsetNext; // Start of local range (using later offset)
+            long overlapLocalEnd = nextTrans + offset;      // End of local range (using earlier offset)
+
+            // Check if the calculated local time falls within the ambiguous range.
+            if (local >= overlapLocalStart && local < overlapLocalEnd) {
+                 // The local time is ambiguous. 'instant' is in the first half of the overlap.
+                 // Calculate the UTC instant for the earlier offset (should be == instant).
+                 long earlierUTC = local - offset; 
+                 // Calculate the UTC instant for the later offset.
+                 long laterUTC = local - offsetNext; 
+                 
+                 // Return the UTC instant corresponding to the requested offset (earlier or later).
+                 return earlierOrLater ? laterUTC : earlierUTC;
+            }
+        }
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // If the instant is not part of an overlap requiring adjustment, return it unchanged.
+        return instant;
     }
\ No newline at end of file
