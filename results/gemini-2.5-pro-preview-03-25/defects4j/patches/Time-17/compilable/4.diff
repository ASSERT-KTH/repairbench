diff --git a/tmp/5b494a6d-e20e-4b3a-afe2-b2a11136c78c_buggy.java b/tmp/eca7f58c-4f94-425f-8e5a-f2cf79e01dad_fixed.java
index 03b03d7..9d30857 100644
--- a/tmp/5b494a6d-e20e-4b3a-afe2-b2a11136c78c_buggy.java
+++ b/tmp/eca7f58c-4f94-425f-8e5a-f2cf79e01dad_fixed.java
@@ -1,25 +1,74 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+        // Find the transition potentially related to this instant.
+        // previousTransition(instant + 1) ensures we find the transition <= (instant + 1).
+        // This helps find the relevant transition boundary correctly, even if 'instant'
+        // itself is exactly on the transition.
+        long transition = previousTransition(instant + 1);
 
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // Get the offsets before and after the transition.
+        long offsetBefore = getOffset(transition - 1);
+        long offsetAfter = getOffset(transition); // This is the offset that applies from 'transition' onwards.
+
+        // If offsets are equal, it wasn't a transition causing an offset change relevant to overlaps.
+        if (offsetBefore == offsetAfter) {
+            return instant; // Not an overlap scenario for this transition.
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // Check specifically for an overlap condition (clock winds back, offset decreases, e.g., -02:00 -> -03:00).
+        // In this case, offsetBefore > offsetAfter numerically.
+        if (offsetBefore > offsetAfter) {
+            // Calculate the local time corresponding to the input instant using its actual offset.
+            long currentOffset = getOffset(instant);
+            long local = instant + currentOffset;
+
+            // Determine the UTC instant associated with the later offset for this local time.
+            // convertLocalToUTC(local, false) reliably returns the later instant in an overlap.
+            // The 'false' means non-strict, resolving ambiguity by choosing the later mapping.
+            long utcLater = convertLocalToUTC(local, false);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+            if (instant == utcLater) {
+                // The input instant was already the one with the later offset.
+                // This happens if getOffset(instant) returned offsetAfter.
+                if (earlierOrLater) {
+                    // User wants the later offset, which is what we have, return the input instant.
+                    return instant;
+                } else {
+                    // User wants the earlier offset. Calculate the UTC instant corresponding
+                    // to the same local time but using the offset before the transition.
+                    long utcEarlier = local - offsetBefore;
+                    // Ensure the calculated earlier instant is different from the input.
+                    // This guards against cases where the local time might not truly be ambiguous
+                    // or if the input instant didn't fall into the overlap range as expected.
+                    if (utcEarlier != instant) {
+                        return utcEarlier;
+                    } else {
+                        // Fallback: If calculation didn't yield a different instant,
+                        // return the original instant (should be rare in true overlaps).
+                        return instant;
+                    }
+                }
+            } else {
+                // The input instant was the one with the earlier offset.
+                // This implies getOffset(instant) returned offsetBefore, and instant != utcLater.
+                if (earlierOrLater) {
+                    // User wants the later offset, return the calculated utcLater.
+                    return utcLater;
+                } else {
+                    // User wants the earlier offset, which is what we have, return the input instant.
+                    return instant;
+                }
+            }
+        } else {
+            // This transition is a gap (offsetBefore < offsetAfter), not an overlap.
+            // The adjustOffset method is specifically for resolving overlap ambiguity.
+            // For gaps, or instants outside overlaps, no adjustment is needed.
+            return instant;
+        }
     }
\ No newline at end of file
