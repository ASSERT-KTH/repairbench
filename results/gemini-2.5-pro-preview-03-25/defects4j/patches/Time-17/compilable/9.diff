diff --git a/tmp/2d1b7053-fdd1-4342-9933-80aa1324b0d5_buggy.java b/tmp/e44256c6-2b75-4c0d-a3e5-14bfb3045abd_fixed.java
index 03b03d7..d48adf8 100644
--- a/tmp/2d1b7053-fdd1-4342-9933-80aa1324b0d5_buggy.java
+++ b/tmp/e44256c6-2b75-4c0d-a3e5-14bfb3045abd_fixed.java
@@ -1,25 +1,62 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+        // Find the transition occurring strictly before instant + 1
+        // This ensures we find the transition potentially relevant to the specified instant.
+        // Add 1 to handle the case where the instant is exactly at the transition.
+        // If instant is Long.MAX_VALUE, adding 1 wraps around, but previousTransition should handle it.
+        // If instant is Long.MIN_VALUE, Long.MIN_VALUE + 1 is safe.
+        long transition = previousTransition(instant + 1);
 
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // If there is no transition before this instant, return original instant
+        if (transition == Long.MIN_VALUE) {
+            return instant;
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // Get offsets before and after the transition
+        int offsetBefore = getOffset(transition - 1);
+        int offsetAfter = getOffset(transition);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Check if it's an overlap transition (offset decreases)
+        // Example: Fall back from UTC-2 to UTC-3. offsetBefore=-7200000, offsetAfter=-10800000. offsetBefore > offsetAfter.
+        if (offsetBefore > offsetAfter) {
+            // Calculate the start and end of the ambiguous local time interval
+            // The interval is [transition + offsetAfter, transition + offsetBefore)
+            long localOverlapStart = transition + offsetAfter;
+            long localOverlapEnd = transition + offsetBefore;
+
+            // Calculate the local time of the input instant using its current offset
+            // This offset might be offsetBefore or offsetAfter if the instant is in the overlap.
+            int instantOffset = getOffset(instant);
+            long localInstant = instant + instantOffset;
+
+            // Check if the instant's local time falls within the ambiguous range [start, end)
+            if (localInstant >= localOverlapStart && localInstant < localOverlapEnd) {
+                // Instant is in the overlap ambiguity.
+                // We need to return the instant corresponding to the earlier or later offset,
+                // which corresponds to the earlier or later UTC instant mapping to the same local time.
+
+                // Find the two possible UTC instants for this local time.
+                // utcEarlier corresponds to the offsetBefore (the one active before the transition)
+                // utcLater corresponds to the offsetAfter (the one active at and after the transition)
+                long utcEarlier = localInstant - offsetBefore;
+                long utcLater = localInstant - offsetAfter;
+
+                // Return the requested one based on the flag
+                // false means earlier offset (-> utcEarlier instant)
+                // true means later offset (-> utcLater instant)
+                return earlierOrLater ? utcLater : utcEarlier;
+            }
+            // else: Instant's local time is not in the ambiguous range, so no adjustment needed.
+        }
+        // else: It wasn't an overlap transition (either a gap or no change)
+
+        // If it wasn't an overlap transition, or the instant's local time was not ambiguous,
+        // return the original instant.
+        return instant;
     }
\ No newline at end of file
