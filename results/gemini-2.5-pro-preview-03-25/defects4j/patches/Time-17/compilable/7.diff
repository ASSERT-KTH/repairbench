diff --git a/tmp/81b099f7-101c-48b8-bf2c-60caaafe8ba9_buggy.java b/tmp/ac42f0f4-a154-4eb2-ac21-ea87fa6b4b61_fixed.java
index 03b03d7..174d7a2 100644
--- a/tmp/81b099f7-101c-48b8-bf2c-60caaafe8ba9_buggy.java
+++ b/tmp/ac42f0f4-a154-4eb2-ac21-ea87fa6b4b61_fixed.java
@@ -1,25 +1,67 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
+     * <p>
+     * If the instant is not in an overlap, the instant is returned unaltered.
+     * If the instant is in an overlap, the returned instant will have the same
+     * local time, but will be expressed in the earlier or later offset as requested.
      *
      * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
+     * @param earlierOrLater  false for earlier offset, true for later offset
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+        // Find the transition potentially relevant to this instant.
+        // Use instant + 1 to ensure we get the transition that instant might be on or just after.
+        long transition = previousTransition(instant + 1);
 
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // If transition is Long.MIN_VALUE, it means no transition exists before instant + 1.
+        // This implies the instant is in the first defined offset period or the implementation
+        // cannot determine a relevant previous transition. In such cases, the instant is likely
+        // unambiguous, or at least cannot be adjusted based on a preceding transition.
+        if (transition == Long.MIN_VALUE) {
+             return instant; // Cannot adjust based on previous transition
         }
         
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // Check if the transition is actually an overlap (offset after < offset before)
+        long offsetBefore = getOffset(transition - 1);
+        long offsetAfter = getOffset(transition);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        if (offsetAfter >= offsetBefore) {
+             // It's a gap or a standard offset change, not an overlap.
+             // The instant is therefore unambiguous with respect to this transition.
+             // We might still need convertLocalToUTC if the local time maps to
+             // *another* overlap, but for adjusting the offset *at this instant*,
+             // no adjustment is needed if it's not in an overlap defined by this transition.
+             // Let's refine: Check if the instant itself falls within the UTC range of the overlap.
+             // This handles cases where the transition is an overlap, but the instant is outside it.
+             return instant;
+        }
+
+        // Overlap confirmed. Check if the instant is within the UTC range of the overlap.
+        // The overlap duration is (offsetBefore - offsetAfter).
+        long overlapDuration = offsetBefore - offsetAfter;
+        long overlapStartUTC = transition;
+        long overlapEndUTC = transition + overlapDuration;
+
+        if (instant < overlapStartUTC || instant >= overlapEndUTC) {
+             // Instant is outside the UTC range of this overlap.
+             return instant;
+        }
+
+        // Instant is within an overlap period.
+        // Determine the reference UTC instant to pass to convertLocalToUTC.
+        // This reference instant dictates the choice of offset if the local time is ambiguous.
+        // If we want the earlier offset (offsetBefore), use a time before the transition.
+        // If we want the later offset (offsetAfter), use a time at or after the transition.
+        long referenceInstant = earlierOrLater ? transition : (transition - 1);
+
+        // Convert the original instant to local time millis.
+        // This local time will be ambiguous (fall within the local time overlap).
+        long localInstant = convertUTCToLocal(instant);
+
+        // Convert the local time back to UTC. Since localInstant is ambiguous,
+        // convertLocalToUTC uses the referenceInstant relative to the transition
+        // time associated with localInstant to select the appropriate UTC instant
+        // (corresponding to either the earlier or later offset).
+        return convertLocalToUTC(localInstant, false, referenceInstant);
     }
\ No newline at end of file
