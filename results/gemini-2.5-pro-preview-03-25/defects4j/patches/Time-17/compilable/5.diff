diff --git a/tmp/0eebe1e8-8339-48d5-ba1f-2c099cd75895_buggy.java b/tmp/0d636459-0210-4b20-9f54-53f40cdee9ea_fixed.java
index 03b03d7..b0e6f4b 100644
--- a/tmp/0eebe1e8-8339-48d5-ba1f-2c099cd75895_buggy.java
+++ b/tmp/0d636459-0210-4b20-9f54-53f40cdee9ea_fixed.java
@@ -1,25 +1,66 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // Check the transition point AFTER the instant, if any.
+        long nextTrans = nextTransition(instant);
+        // Check if the transition happens AFTER the instant and involves an overlap
+        if (nextTrans != Long.MAX_VALUE && nextTrans > instant) {
+            long offsetBefore = getOffset(nextTrans - 1);
+            long offsetAfter = getOffset(nextTrans);
+            // Check if this transition is an overlap (offset decreases, e.g., -2 -> -3 for southern hemisphere DST end)
+            if (offsetBefore > offsetAfter) {
+                long duration = offsetBefore - offsetAfter;
+                // Check if the instant is in the first UTC interval of the overlap: [nextTrans - duration, nextTrans)
+                if (instant >= nextTrans - duration) {
+                    // Instant is in the overlap.
+                    // Calculate the local time using the offset before the transition.
+                    long local = instant + offsetBefore;
+                    // Find the two UTC instants mapping to this local time.
+                    // utcEarlier corresponds to the offset before transition (offsetBefore)
+                    // utcLater corresponds to the offset after transition (offsetAfter)
+                    // Note: utcEarlier = instant, by definition of local = instant + offsetBefore
+                    // So, utcEarlier = local - offsetBefore
+                    long utcLater = local - offsetAfter;
+                    // Return the requested instant.
+                    // If earlierOrLater is false (earlier), return instant (utcEarlier).
+                    // If earlierOrLater is true (later), return utcLater.
+                    return earlierOrLater ? utcLater : instant; // Simplified: utcEarlier is always 'instant' in this block
+                }
+            }
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // Check the transition point AT or BEFORE the instant, if any.
+        long prevTrans = previousTransition(instant);
+        // Check if the transition happens AT or BEFORE the instant and involves an overlap
+        if (prevTrans != Long.MIN_VALUE && prevTrans <= instant) {
+            long offsetBefore = getOffset(prevTrans - 1);
+            long offsetAfter = getOffset(prevTrans);
+            // Check if this transition is an overlap (offset decreases)
+            if (offsetBefore > offsetAfter) {
+                long duration = offsetBefore - offsetAfter;
+                // Check if the instant is in the second UTC interval of the overlap: [prevTrans, prevTrans + duration)
+                if (instant < prevTrans + duration) {
+                    // Instant is in the overlap.
+                    // Calculate the local time using the offset after the transition.
+                    long local = instant + offsetAfter;
+                    // Find the two UTC instants mapping to this local time.
+                    long utcEarlier = local - offsetBefore; // Corresponds to the offset before transition
+                    // utcLater corresponds to the offset after transition (offsetAfter)
+                    // Note: utcLater = instant, by definition of local = instant + offsetAfter
+                    // So, utcLater = local - offsetAfter
+                    // Return the requested instant.
+                    // If earlierOrLater is false (earlier), return utcEarlier.
+                    // If earlierOrLater is true (later), return instant (utcLater).
+                    return earlierOrLater ? instant : utcEarlier; // Simplified: utcLater is always 'instant' in this block
+                }
+            }
+        }
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // If the instant is not within any overlap period found, return it unchanged.
+        return instant;
     }
\ No newline at end of file
