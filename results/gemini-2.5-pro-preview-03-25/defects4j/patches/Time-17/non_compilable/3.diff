diff --git a/tmp/f951153c-9a37-41a0-8926-9413e445a8b6_buggy.java b/tmp/33dc4ec0-295e-4fb7-b4d8-03020ad7d6ef_fixed.java
index 03b03d7..887b764 100644
--- a/tmp/f951153c-9a37-41a0-8926-9413e445a8b6_buggy.java
+++ b/tmp/33dc4ec0-295e-4fb7-b4d8-03020ad7d6ef_fixed.java
@@ -1,25 +1,45 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // we check offsets not local instants because of complexities with gaps
+        long offsetBefore = getOffset(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long offsetAfter = getOffset(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+
+        if (offsetBefore == offsetAfter) {
+             // Check if the instant is actually in a gap. If so, cannot adjust.
+             // This handles cases where the offset 3 hours before and after are the same
+             // but the instant itself is invalid.
+             if (isLocalDateTimeGap(convertUTCToLocal(instant))) {
+                 // Cannot adjust instant in gap, return original instant
+                 // Note: This is a defensive check, behavior in gaps might be undefined.
+             }
+             // If offsets are the same and not in a gap, it implies no overlap/gap affecting
+             // the instant's offset relative to its neighbors. Return original instant.
+             // This also handles cases where the transition is outside the +/- 3 hour window.
+            return instant;
         }
         
-        // work out range of instants that have duplicate local times
+        // If offsets are different, there is a transition nearby.
+        // Convert the instant to local time. This local time might be ambiguous
+        // if the instant falls within the overlap period.
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // convertLocalToUTC will resolve the ambiguity based on the preferred instant.
+        // We need to provide a UTC instant for preference. Using instants far away
+        // biases the choice correctly towards the earlier or later offset.
+        long preferredInstantUTC = earlierOrLater ? 
+            (instant + 3 * DateTimeConstants.MILLIS_PER_HOUR) : 
+            (instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+            
+        // When converting local time back to UTC, use the preferred instant to
+        // select the correct offset if in an overlap. false means non-strict.
+        return convertLocalToUTC(local, false, preferredInstantUTC);
     }
\ No newline at end of file
