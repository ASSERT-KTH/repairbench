diff --git a/tmp/4ee0c083-7f07-43e1-987f-d81317fdf63b_buggy.java b/tmp/c9bffbcb-4041-49c4-b994-cfc2ff3934c0_fixed.java
index 03b03d7..9009a49 100644
--- a/tmp/4ee0c083-7f07-43e1-987f-d81317fdf63b_buggy.java
+++ b/tmp/c9bffbcb-4041-49c4-b994-cfc2ff3934c0_fixed.java
@@ -1,25 +1,76 @@
+import org.joda.time.DateTimeZone; // Needed for getOffset, convertLocalToUTC, previousTransition
+import org.joda.time.LocalDateTimeAmbiguousException; // Needed for catch block
+import org.joda.time.IllegalInstantException; // Parent of LocalDateTimeAmbiguousException, sometimes thrown directly
+
+// The function belongs to a class extending DateTimeZone or similar context.
+// Assume methods like getOffset(long), convertUTCToLocal(long),
+// convertLocalToUTC(long, boolean), previousTransition(long) are available.
+
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+        // Calculate the local time for the instant
+        long localInstant = convertUTCToLocal(instant);
 
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
+        // Check if the local time is ambiguous using strict conversion
+        try {
+            // Attempt strict conversion. If it succeeds, the local time is not
+            // ambiguous at this instant for this zone, or it's resolvable 
+            // (e.g., exactly at transition boundary where one offset applies).
+            // In such cases, no adjustment based on earlier/later preference 
+            // for an *overlap* is needed.
+            convertLocalToUTC(localInstant, true); 
+            return instant;
+        } catch (LocalDateTimeAmbiguousException e) {
+            // Ambiguous local time: we are in an overlap.
+            // Find the two possible UTC instants for this local time.
+
+            // Get the instant associated with the later offset using non-strict conversion.
+            // This is the default behavior of convertLocalToUTC(local, false).
+            long utcLater = convertLocalToUTC(localInstant, false);
+            
+            // Determine the instant associated with the earlier offset.
+            // Find the transition point 't' immediately preceding the later offset instant.
+            // This transition defines the boundary between the earlier and later offsets for the overlap.
+            long t = previousTransition(utcLater);
+            // Get the offset effective just before the transition 't'. This represents the earlier offset.
+            int offsetEarlier = getOffset(t - 1);
+            // Calculate the UTC instant corresponding to the earlier offset.
+            long utcEarlier = localInstant - offsetEarlier;
+
+            // As a sanity check and to ensure consistency, especially with complex zones,
+            // verify that both calculated instants map back to the original local time
+            // and have the expected earlier/later relationship based on the transition.
             
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+            // Check if the calculated earlier instant is valid and distinct from the later one
+            if (utcEarlier != utcLater && // Ensure they are different instants
+                getOffset(utcEarlier) == offsetEarlier && // Ensure earlier instant has earlier offset
+                convertUTCToLocal(utcEarlier) == localInstant) { // Ensure earlier instant maps back to local time
                 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+                // Successfully validated both instants. Return the one requested.
+                return earlierOrLater ? utcLater : utcEarlier;
+            } else {
+                 // This block might be reached if:
+                 // 1. utcEarlier somehow equals utcLater (e.g., transition logic error, zone definition issue)
+                 // 2. The calculated utcEarlier does not have the expected offsetEarlier.
+                 // 3. The calculated utcEarlier does not map back to localInstant.
+                 // In these unusual cases, falling back is necessary. Returning utcLater (the result
+                 // of non-strict conversion) is a reasonable fallback, as it's guaranteed to be one
+                 // of the valid mappings for the ambiguous local time.
+                 // Note: The original instant 'instant' could be either the earlier or later one,
+                 // so returning it directly might not satisfy the earlierOrLater request.
+                 return utcLater; 
+            }
+
+        } catch (ArithmeticException | IllegalArgumentException ex) {
+             // Catch potential exceptions from convertLocalToUTC (if localInstant is invalid, e.g., in a gap)
+             // or previousTransition (if instant is too extreme).
+             // An instant resulting in a gap or being invalid doesn't require overlap adjustment.
+             return instant;
+        }
     }
\ No newline at end of file
