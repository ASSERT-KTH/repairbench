diff --git a/tmp/00de2ef6-3baf-47dc-a3c4-020459b6b324_buggy.java b/tmp/3cd66e44-1689-49b7-a90a-7e00a5aedd33_fixed.java
index 03b03d7..ea5ab1d 100644
--- a/tmp/00de2ef6-3baf-47dc-a3c4-020459b6b324_buggy.java
+++ b/tmp/3cd66e44-1689-49b7-a90a-7e00a5aedd33_fixed.java
@@ -1,25 +1,57 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        long instantBeforeUTC = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long instantAfterUTC = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long offsetBefore = getOffset(instantBeforeUTC);
+        long offsetAfter = getOffset(instantAfterUTC);
+        if (offsetBefore == offsetAfter) {
+            // Check if the instant itself is in an overlap - edge case issue #145
+            // If it is, convertuses the later offset, which is correct for withLaterOffsetAtOverlap RFE#3476684
+            long offset = getOffset(instant);
+            long local = instant + offset;
+            if (local >= previousTransition(local) && local < nextTransition(local)) {
+                 // Instant is in a regular period, so must be correct
+                 return instant;
             }
+            // Otherwise, we are in an overlap. Fall through.
+            // The check above might return true if the transition is > 3 hours from instant,
+            // but the instant is still in an overlap.
+            // Example: Easter Island transitions at midnight Oct 7/8 2017. Instant is Oct 8 00:30.
+            // 3 hours before is Sep 7 21:30. 3 hours after is Oct 8 03:30. Offsets are same.
+            // But 00:30 is in the overlap [00:00, 01:00).
+            // We need to check if the instant's local time is ambiguous.
             
-        // work out range of instants that have duplicate local times
+            // Simpler check: if offsets are same 3h before/after, AND the offset at the instant
+            // is also the same, then we are definitely not in an overlap related to those transitions.
+            if (offset == offsetBefore) { // or offset == offsetAfter
+                 return instant;
+            }
+            // If offset at instant differs from offset 3h before/after, it implies a transition
+            // occurred, but we might not be *in* the overlap/gap. However, if we are in an overlap,
+            // the offsets 3h away *might* be equal if the overlap is short.
+            // The original check `offsetBefore == offsetAfter` is primarily to optimize for the common case
+            // where the instant is far from any transition. If it passes, we *might* still be in an overlap.
+            // Fall through to the more detailed check using convertLocalToUTC.
+        }
+        
+        // work out local time representation of instant
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // This is messy, but will work in all non-pathological cases
+        // If we need the later instant, pass something LATER. If we need the earlier instant, pass something EARLIER.
+        // The instants passed are UTC instants. convertLocalToUTC uses the offset at the UTC instant
+        // passed as the third parameter to disambiguate the local instant.
+        return convertLocalToUTC(local, false, earlierOrLater ? instantAfterUTC : instantBeforeUTC);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Note: Previous buggy version passed local millis calculated from the instants +/- 3 hours
+        // into convertLocalToUTC, which expects a UTC millis hint. It also used a less reliable
+        // initial check based on comparing local millis representations 6 hours apart.
     }
\ No newline at end of file
