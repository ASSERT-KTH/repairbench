diff --git a/tmp/2e56a8ee-2e8d-44c6-9b1f-49669d8842ed_buggy.java b/tmp/d28fe182-a686-429d-91c9-a37d4d3825d3_fixed.java
index 03b03d7..f4358df 100644
--- a/tmp/2e56a8ee-2e8d-44c6-9b1f-49669d8842ed_buggy.java
+++ b/tmp/d28fe182-a686-429d-91c9-a37d4d3825d3_fixed.java
@@ -1,25 +1,57 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
+     * <p>
+     * If the zone performs overlaps, then these operations specify which offset
+     * to use.
+     * <p>
+     * If the specified instant is not in an overlap, it is returned unaltered.
+     * If the zone does not perform overlaps, the instant is returned unaltered.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+        // This method needs to return an instant equivalent to the input instant
+        // but with the earlier or later offset choice resolved if the instant
+        // falls within an overlap.
 
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
+        // The core idea is to use the behavior of convertLocalToUTC(local, false, referenceUTC).
+        // When the local time 'local' is ambiguous (falls in an overlap), this method
+        // resolves the ambiguity by choosing the UTC instant (out of the two possibilities)
+        // whose offset matches the offset of the 'referenceUTC' instant provided.
+
+        // Choose reference UTC instants far enough before and after the potential transition
+        // related to 'instant'. A 12-hour buffer is likely safe for typical DST changes.
+        // These instants act as anchors representing the time zone state before and after a transition.
+        long instantBeforeTransition = instant - 12 * DateTimeConstants.MILLIS_PER_HOUR;
+        long instantAfterTransition = instant + 12 * DateTimeConstants.MILLIS_PER_HOUR;
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // Calculate the local time associated with the input UTC instant.
+        long localInstant = convertUTCToLocal(instant);
+
+        // Determine the reference instant to use for disambiguation based on the desired outcome.
+        long referenceInstant;
+        if (earlierOrLater) {
+            // true: We want the later offset (e.g., the standard time after DST ends).
+            // The time after the transition has the later offset.
+            // So, use instantAfterTransition as the reference. Its offset will guide
+            // convertLocalToUTC to select the UTC instant with the later offset.
+            referenceInstant = instantAfterTransition;
+        } else {
+            // false: We want the earlier offset (e.g., the DST time before it ends).
+            // The time before the transition has the earlier offset.
+            // So, use instantBeforeTransition as the reference. Its offset will guide
+            // convertLocalToUTC to select the UTC instant with the earlier offset.
+            referenceInstant = instantBeforeTransition;
+        }
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Convert the local time back to UTC using the chosen reference instant.
+        // If localInstant is unambiguous (not in an overlap), this call should simply
+        // return the unique UTC instant corresponding to localInstant, which will be
+        // equivalent to the original 'instant'.
+        // If localInstant is ambiguous (in an overlap), this call will return the
+        // UTC instant (either the first or second occurrence) whose offset matches
+        // the offset of referenceInstant, thus selecting the earlier or later instant as desired.
+        return convertLocalToUTC(localInstant, false, referenceInstant);
     }
\ No newline at end of file
