diff --git a/tmp/040b236d-ad94-4d73-8a0a-cf5558df5059_buggy.java b/tmp/318353b6-9cc3-42d2-bebb-0f8f79daea56_fixed.java
index 14b51f9..6963789 100644
--- a/tmp/040b236d-ad94-4d73-8a0a-cf5558df5059_buggy.java
+++ b/tmp/318353b6-9cc3-42d2-bebb-0f8f79daea56_fixed.java
@@ -1,124 +1,164 @@
+import org.apache.commons.math.exception.ConvergenceException; // Needed for the fix
+import org.apache.commons.math.exception.MathInternalError;   // Already used
+import org.apache.commons.math.util.FastMath;                 // Already used
+// Assuming Method and AllowedSolution enums are defined/imported from the context of the original class
+// Assuming base class methods like computeObjectiveValue, getMin, getMax, verifyBracketing,
+// getFunctionValueAccuracy, getAbsoluteAccuracy, getRelativeAccuracy are available.
+// Assuming the class has member variables 'method' and 'allowed' of appropriate enum types.
+
     /** {@inheritDoc} */
+    @Override // Assuming this method overrides a method from a base class/interface
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
+        // Keep track if the x0 endpoint is stagnant for REGULA_FALSI.
+        boolean x0_is_stagnant = false;
+
         // Keep finding better approximations.
         while (true) {
-            // Calculate the next approximation.
+            // Calculate the next approximation using the secant method formula.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
-            // Update the bounds with the new approximation.
+            // Update the bounds with the new approximation. Check the sign of f(x) * f(x1).
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // The root is in the interval [x1, x].
+                // Update x0 to x1, f0 to f1. The new interval will be [old_x1, x].
                 x0 = x1;
                 f0 = f1;
+                // The interval orientation might change.
                 inverted = !inverted;
+                // Since x0 was updated (by taking the value of the previous x1),
+                // the stagnation flag is reset.
+                x0_is_stagnant = false;
             } else {
-                switch (method) {
+                // The root is in the interval [x0, x]. The endpoint x0 remains fixed.
+                // Apply acceleration modifications for Illinois and Pegasus methods.
+                switch (method) { // 'method' is assumed to be an enum field (e.g., ILLINOIS, PEGASUS, REGULA_FALSI)
                 case ILLINOIS:
+                    // Reduce the function value at the stagnant endpoint x0.
                     f0 *= 0.5;
+                    // Reset stagnation flag as f0 was modified.
+                    x0_is_stagnant = false;
                     break;
                 case PEGASUS:
+                    // Reduce the function value at the stagnant endpoint x0 using the Pegasus formula.
                     f0 *= f1 / (f1 + fx);
+                    // Reset stagnation flag as f0 was modified.
+                    x0_is_stagnant = false;
                     break;
                 case REGULA_FALSI:
-                    // Detect early that algorithm is stuck, instead of waiting
-                    // for the maximum number of iterations to be exceeded.
+                    // Check for stagnation: if x0 was already stagnant in the previous iteration,
+                    // the plain Regula Falsi method is stuck. Throw a ConvergenceException.
+                    if (x0_is_stagnant) {
+                        throw new ConvergenceException(); // Indicates failure to converge due to stagnation.
+                    }
+                    // Mark x0 as stagnant for the next iteration's check. If this 'else' block
+                    // is entered again, the exception will be thrown.
+                    x0_is_stagnant = true;
                     break;
                 default:
-                    // Should never happen.
+                    // This case should not be reachable if 'method' is a valid enum value.
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint x1 to the new approximation x, and f1 to its function value fx.
+            // This happens in both cases (sign change or no sign change).
             x1 = x;
             f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // Check for convergence based on the function value at the latest approximation x1.
+            // If |f(x1)| is within the function value tolerance 'ftol'.
             if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
+                // Check if the current solution x1 satisfies the AllowedSolution requirement.
+                switch (allowed) { // 'allowed' is assumed to be an enum field (e.g., ANY_SIDE, LEFT_SIDE, etc.)
                 case ANY_SIDE:
-                    return x1;
+                    return x1; // Return if any side is acceptable.
                 case LEFT_SIDE:
-                    if (inverted) {
+                    // Return if x1 is on the left side of the root.
+                    if (inverted) { // Interval is [x1, x0] with x1 > x0.
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, continue iterating.
                 case RIGHT_SIDE:
-                    if (!inverted) {
+                    // Return if x1 is on the right side of the root.
+                    if (!inverted) { // Interval is [x0, x1] with x0 < x1.
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, continue iterating.
                 case BELOW_SIDE:
+                    // Return if f(x1) is below or at zero.
                     if (f1 <= 0) {
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, continue iterating.
                 case ABOVE_SIDE:
+                    // Return if f(x1) is above or at zero.
                     if (f1 >= 0) {
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, continue iterating.
                 default:
                     throw new MathInternalError();
                 }
+                // If break was hit, ftol is satisfied, but the side condition is not. Loop continues.
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
-                switch (allowed) {
+            // Check for convergence based on the width of the interval [x0, x1].
+            // If the interval width is within the absolute or relative tolerance.
+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+                // Interval is small enough, return the appropriate endpoint based on AllowedSolution.
+                switch (allowed) { // 'allowed' is assumed to be an enum field
                 case ANY_SIDE:
-                    return x1;
+                    return x1; // Return the latest approximation.
                 case LEFT_SIDE:
+                    // Return the endpoint guaranteed to be on the left side.
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                    // Return the endpoint guaranteed to be on the right side.
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Return the endpoint whose function value is guaranteed <= 0.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                    // Return the endpoint whose function value is guaranteed >= 0.
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
-        }
+        } // End of while loop
     }
