diff --git a/tmp/00153564-a0fd-4f39-a3da-256692cd4931_buggy.java b/tmp/fd2d589e-7780-4a19-8c5a-a0c0a7f7763d_fixed.java
index 14b51f9..7bb3252 100644
--- a/tmp/00153564-a0fd-4f39-a3da-256692cd4931_buggy.java
+++ b/tmp/fd2d589e-7780-4a19-8c5a-a0c0a7f7763d_fixed.java
@@ -1,124 +1,165 @@
+import org.apache.commons.math.exception.ConvergenceException;
+import org.apache.commons.math.exception.MathInternalError;
+import org.apache.commons.math.exception.util.LocalizedFormats;
+import org.apache.commons.math.util.FastMath;
+
+// Note: The imports above might need adjustment based on the actual package structure
+// of the project version (e.g., org.apache.commons.math vs org.apache.commons.math3).
+// The provided code structure and test case suggest Commons Math 2.x. Assuming
+// necessary base class methods (getMin, getMax, computeObjectiveValue, verifyBracketing,
+// get*Accuracy) and member fields (method, allowed) are available.
+
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+        // larger than the right bound initially, or the interval orientation
+        // changed sign-wise during iterations.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
-            // Calculate the next approximation.
+            // Calculate the next approximation using the secant method.
+            // x = x1 - f1 * (x1 - x0) / (f1 - f0)
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
-            // Update the bounds with the new approximation.
+            // Update the bounds with the new approximation. Check which subinterval
+            // brackets the root based on the sign of f(x).
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // Root is in the interval [x1, x]. Update x0 to the old x1 value.
                 x0 = x1;
                 f0 = f1;
+                // The interval's orientation might have changed.
                 inverted = !inverted;
             } else {
+                // Root is in the interval [x0, x]. Keep x0, update x1 to x.
+                // For Illinois and Pegasus, modify the function value f0 associated
+                // with the stationary endpoint x0 to accelerate convergence.
                 switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
+                    // f1 and fx have the same sign, fx != 0, f1 != 0 (ensured by bracketing checks)
+                    // so f1 + fx should not be zero.
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Detect early that algorithm is stuck, instead of waiting
-                    // for the maximum number of iterations to be exceeded.
+                    // Standard Regula Falsi does not modify function values.
+                    // It can stall if one endpoint (x0 in this branch) remains stationary.
+                    // Check if the new point x is identical to the endpoint x1 it's meant to replace.
+                    // If x == x1, the algorithm is stuck and cannot make progress.
+                    if (x == x1) {
+                       // Throw ConvergenceException to indicate stalling, as expected by testIssue631.
+                       throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED);
+                    }
+                    // Original comment about detecting stuck algorithm is now implemented by the check above.
                     break;
                 default:
                     // Should never happen.
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint x1 to the new approximation x, and update f1.
             x1 = x;
             f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // Check for convergence based on function value: |f(x1)| <= ftol.
             if (FastMath.abs(f1) <= ftol) {
+                // Function value is small enough. Check if the current estimate x1
+                // satisfies the AllowedSolution requirement.
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
+                    // Check if x1 is on the left side relative to the root.
+                    // The 'inverted' flag tracks the interval's orientation.
                     if (inverted) {
                         return x1;
                     }
+                    // If ftol is met but x1 is not on the allowed side, break
+                    // and proceed to the interval width check.
                     break;
                 case RIGHT_SIDE:
+                    // Check if x1 is on the right side relative to the root.
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
+                    // Check if f(x1) is below or at zero.
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
+                    // Check if f(x1) is above or at zero.
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
+            // Check for convergence based on interval width: |x1 - x0| is small enough.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
+                // Interval width is within tolerance. Return the endpoint that satisfies
+                // the AllowedSolution criteria.
                 switch (allowed) {
                 case ANY_SIDE:
+                    // Return the latest approximation.
                     return x1;
                 case LEFT_SIDE:
+                    // Return the endpoint guaranteed to be on the left side.
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                    // Return the endpoint guaranteed to be on the right side.
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Return the endpoint x where f(x) <= 0.
+                    // Since f0 * f1 < 0, one must satisfy this.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                    // Return the endpoint x where f(x) >= 0.
+                    // Since f0 * f1 < 0, one must satisfy this.
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
-        }
+        } // End while loop
     }
\ No newline at end of file
