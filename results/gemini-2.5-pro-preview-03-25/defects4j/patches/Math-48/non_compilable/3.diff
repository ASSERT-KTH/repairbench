diff --git a/tmp/ca5e435b-cf2f-4b50-a7bc-e6d51132bbbc_buggy.java b/tmp/8a1d3add-f617-4c6b-82c5-efdd8f198539_fixed.java
index 14b51f9..6ccbc27 100644
--- a/tmp/ca5e435b-cf2f-4b50-a7bc-e6d51132bbbc_buggy.java
+++ b/tmp/8a1d3add-f617-4c6b-82c5-efdd8f198539_fixed.java
@@ -1,124 +1,161 @@
+import org.apache.commons.math.exception.ConvergenceException; // Needed for the fix
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.exception.MathInternalError;
+// Assuming BaseSecantSolver.Method and AllowedSolution enums are defined and accessible
+// Assuming computeObjectiveValue, verifyBracketing, getMin, getMax, getFunctionValueAccuracy,
+// getAbsoluteAccuracy, getRelativeAccuracy, method, allowed are accessible member variables or methods.
+
     /** {@inheritDoc} */
+    @Override // Added @Override assuming this overrides a superclass method
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
+        // Keep track of Regula Falsi stagnation. Added for fix.
+        int stagnant = 0;
+
         // Keep finding better approximations.
         while (true) {
-            // Calculate the next approximation.
+            // Calculate the next approximation using the secant method formula.
+            // x = x1 - f1 * (x1 - x0) / (f1 - f0)
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // The root is in the interval [x1, x]. Update the bound x0, function value f0.
+                // The interval becomes [x1, x] but we rename x1 to x0 for the next iteration.
                 x0 = x1;
                 f0 = f1;
+                // The interval orientation might change.
                 inverted = !inverted;
+                // Reset the stagnation counter as the interval endpoint x0 was updated. Added for fix.
+                stagnant = 0;
             } else {
+                // The root is in the interval [x0, x]. The bound x0 remains the same.
+                // Increment the stagnation counter. Added for fix.
+                stagnant++;
+                // Adjust the function value f0 for non-stagnating methods like Illinois and Pegasus.
                 switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Detect early that algorithm is stuck, instead of waiting
-                    // for the maximum number of iterations to be exceeded.
+                    // For pure Regula Falsi, check for stagnation. Added for fix.
+                    // If the same endpoint boundary x0 has been kept for 2 or more consecutive iterations,
+                    // it indicates that the Regula Falsi algorithm is likely stuck.
+                    // Throw ConvergenceException to signal this condition early.
+                    if (stagnant >= 2) {
+                       throw new ConvergenceException();
+                    }
+                    // No function value modification in the REGULA_FALSI case.
                     break;
                 default:
-                    // Should never happen.
+                    // Should never happen. Indicates an unknown solver method.
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the bound x1 and function value f1 for the next iteration.
+            // The new interval is effectively [x0, x] or [x, x0] depending on 'inverted'.
             x1 = x;
             f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // Check convergence: function value close to zero.
             if (FastMath.abs(f1) <= ftol) {
+                // The function value at x1 is small enough. Return x1 if it satisfies the AllowedSolution criteria.
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
+                    // Return x1 if it's on the left side of the root (or the root itself).
+                    // 'inverted' tracks interval orientation relative to initial state (assumed f(min)<0, f(max)>0).
+                    // If inverted, x1 is the lower bound (left side).
                     if (inverted) {
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, x1 is on the right, continue iteration.
                 case RIGHT_SIDE:
+                    // Return x1 if it's on the right side of the root.
+                    // If not inverted, x1 is the upper bound (right side).
                     if (!inverted) {
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, x1 is on the left, continue iteration.
                 case BELOW_SIDE:
+                    // Return x1 if its function value is below or equal to zero.
                     if (f1 <= 0) {
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, f1 > 0, continue iteration.
                 case ABOVE_SIDE:
+                     // Return x1 if its function value is above or equal to zero.
                     if (f1 >= 0) {
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, f1 < 0, continue iteration.
                 default:
                     throw new MathInternalError();
                 }
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
+            // Check convergence: interval width is small enough.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
+                // The interval [x0, x1] is small enough. Return the endpoint that satisfies the AllowedSolution criteria.
                 switch (allowed) {
                 case ANY_SIDE:
+                    // Return the latest approximation x1.
                     return x1;
                 case LEFT_SIDE:
+                    // Return the endpoint which is guaranteed to be <= root.
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                    // Return the endpoint which is guaranteed to be >= root.
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Return the endpoint with function value <= 0. Check latest f1 first.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                     // Return the endpoint with function value >= 0. Check latest f1 first.
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
