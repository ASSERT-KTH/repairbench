diff --git a/tmp/1fbc40a4-07a0-4b7e-b3f3-b9bc8126d9ac_buggy.java b/tmp/ef9b5746-e531-4dea-a3b5-f3a682e3fbcf_fixed.java
index 14b51f9..0b45a01 100644
--- a/tmp/1fbc40a4-07a0-4b7e-b3f3-b9bc8126d9ac_buggy.java
+++ b/tmp/ef9b5746-e531-4dea-a3b5-f3a682e3fbcf_fixed.java
@@ -1,124 +1,155 @@
+import org.apache.commons.math.exception.ConvergenceException; // Assuming this is the required exception based on the test
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.exception.MathInternalError;
+// Assuming 'method', 'allowed', 'getMin', 'getMax', 'computeObjectiveValue',
+// 'verifyBracketing', 'getFunctionValueAccuracy', 'getAbsoluteAccuracy',
+// 'getRelativeAccuracy', 'ILLINOIS', 'PEGASUS', 'REGULA_FALSI', 'ANY_SIDE',
+// 'LEFT_SIDE', 'RIGHT_SIDE', 'BELOW_SIDE', 'ABOVE_SIDE' are defined in the base class or context.
+// Also assuming BaseAbstractUnivariateRealSolver context for getEvaluations if needed by ConvergenceException constructor,
+// although the default constructor is used in the fix.
+
     /** {@inheritDoc} */
+    @Override
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
+            // Keep track of the endpoint whose value is supposed to be updated
+            // or used as base for the update. By default, it's x1.
+            final double oldX1 = x1;
+
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
                 // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // the interval. The new interval is [x1, x] (possibly inverted).
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
             } else {
+                // The new interval is [x0, x].
                 switch (method) {
                 case ILLINOIS:
+                    // Modify the function value of the stagnant endpoint x0.
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
+                    // Modify the function value of the stagnant endpoint x0.
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
                     // Detect early that algorithm is stuck, instead of waiting
                     // for the maximum number of iterations to be exceeded.
+                    // If the new approximation 'x' is identical to the endpoint 'oldX1'
+                    // that was used as base for the update, it means the formula
+                    // resulted in x = x1. This signifies stagnation, possibly due
+                    // to floating point issues or a flat region, or very slow convergence.
+                    if (x == oldX1) {
+                        // Throw ConvergenceException as required by the failing test.
+                        throw new ConvergenceException();
+                    }
+                    // No modification to f0 in the REGULA_FALSI case.
                     break;
                 default:
                     // Should never happen.
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint which is always updated (x1) towards the new
+            // approximation x.
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // the root than we already are. Check based on allowed side.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
-                    break;
+                    break; // Not the correct side yet.
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
-                    break;
+                    break; // Not the correct side yet.
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
-                    break;
+                    break; // Not the correct side yet.
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
-                    break;
+                    break; // Not the correct side yet.
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
+            // are satisfied with the current approximation. Check based on allowed side.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Test function value / side for the best endpoint according to interval accuracy.
+                    // Usually x1 is the endpoint that converges, check its side.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                     // Test function value / side for the best endpoint according to interval accuracy.
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
