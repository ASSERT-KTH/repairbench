diff --git a/tmp/4819c27a-9870-40b4-9927-ed99acc02976_buggy.java b/tmp/7dd0cba9-6d83-4e6e-8737-313953f4c4f9_fixed.java
index 22640dd..a959260 100644
--- a/tmp/4819c27a-9870-40b4-9927-ed99acc02976_buggy.java
+++ b/tmp/7dd0cba9-6d83-4e6e-8737-313953f4c4f9_fixed.java
@@ -1,3 +1,47 @@
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.NodeUtil;
+
+// ... other code ...
+
+  /**
+   * Checks if the given node might be part of control flow that can be altered
+   * by an exception handler (a CATCH block). Traverses the AST upwards from
+   * the node, looking for an enclosing TRY node with a non-empty CATCH block.
+   * Stops searching at function boundaries.
+   *
+   * @param cfgNode The node in the AST to check.
+   * @return {@code true} if an enclosing TRY...CATCH is found,
+   *         {@code false} otherwise.
+   */
   private boolean hasExceptionHandler(Node cfgNode) {
+    Node n = cfgNode;
+    // Check the node and its ancestors.
+    while (n != null) {
+      // Check if the current node 'n' is a TRY node with a CATCH block.
+      if (n.isTry()) {
+        Node catchBlock = NodeUtil.getCatchBlock(n);
+        // A non-null catch block with children indicates a CATCH clause exists.
+        if (catchBlock != null && catchBlock.hasChildren()) {
+          // Found an enclosing TRY with a CATCH. The original node cfgNode
+          // is either within the try, catch, or finally block of this TRY.
+          // In any case, its execution context is influenced by the presence
+          // of this exception handler.
+          return true;
+        }
+      }
+
+      // Stop searching upwards if we encounter a function boundary,
+      // as exception handlers are generally function-scoped in terms of
+      // how enclosing handlers are determined.
+      if (n.isFunction()) {
+        break;
+      }
+
+      // Move up to the parent node.
+      n = n.getParent();
+    }
+
+    // No corresponding TRY...CATCH found in the ancestry chain
+    // up to the function boundary or root.
     return false;
   }
\ No newline at end of file
