diff --git a/tmp/1f1d1ee2-47a9-434e-8573-159e5a97fc85_buggy.java b/tmp/062f5d35-e491-4a65-99d1-e41955601bef_fixed.java
index 22640dd..a79638c 100644
--- a/tmp/1f1d1ee2-47a9-434e-8573-159e5a97fc85_buggy.java
+++ b/tmp/062f5d35-e491-4a65-99d1-e41955601bef_fixed.java
@@ -1,3 +1,96 @@
-  private boolean hasExceptionHandler(Node cfgNode) {
+import com.google.javascript.jscomp.ControlFlowGraph;
+import com.google.javascript.jscomp.ControlFlowGraph.Branch;
+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
+import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
+import com.google.javascript.rhino.Node;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Queue;
+import java.util.Set;
+
+/**
+ * Determines if the given AST node is inside a TRY block and has a
+ * corresponding CATCH handler, or if any node reachable from it has
+ * an outgoing ON_EX edge.
+ *
+ * This method requires access to the {@code ControlFlowGraph} instance,
+ * assumed to be available as a field named {@code graph}.
+ *
+ * @param astNode The AST node to check.
+ * @return {@code true} if an exception handler is potentially reachable.
+ */
+private boolean hasExceptionHandler(Node astNode) {
+  // This method requires access to the ControlFlowGraph, assumed to be in `this.graph`.
+  // If `this.graph` is not available, this code will not compile as-is.
+  // Ensure the graph is computed before calling this.
+  if (this.graph == null) {
+      // Or handle appropriately if graph computation might fail.
+      throw new IllegalStateException("ControlFlowGraph not available.");
+  }
+
+  // Find the CFG node associated with the AST node or its nearest
+  // AST ancestor that has an associated CFG node.
+  DiGraphNode<Node, Branch> startNode = null;
+  Node cfgAstNode = astNode;
+  while (cfgAstNode != null) {
+    // Skip block nodes, as they don't typically represent execution points themselves
+    // in the way expressions or statements do for exception handling checks.
+    if (!cfgAstNode.isBlock()) {
+        startNode = graph.getDirectedGraphNode(cfgAstNode);
+        if (startNode != null) {
+          break;
+        }
+    }
+    cfgAstNode = cfgAstNode.getParent();
+  }
+
+  // If no CFG node is found for the AST node or its relevant ancestors,
+  // assume no handler is reachable from this point via the CFG.
+  if (startNode == null) {
+    return false;
+  }
+
+  // Perform a graph traversal (BFS) starting from startNode
+  // to see if any node reachable from it has an ON_EX edge.
+  Queue<DiGraphNode<Node, Branch>> worklist = new LinkedList<>();
+  Set<DiGraphNode<Node, Branch>> visited = new HashSet<>();
+
+  worklist.add(startNode);
+  visited.add(startNode);
+
+  while (!worklist.isEmpty()) {
+    DiGraphNode<Node, Branch> current = worklist.poll();
+    Node currentNodeValue = current.getValue(); // AST node associated with CFG node
+
+    // Avoid NPE if somehow a null value gets into the graph node
+    if (currentNodeValue == null) {
+        continue;
+    }
+
+    // Check outgoing edges of the current CFG node.
+    List<DiGraphEdge<Node, Branch>> outEdges = graph.getOutEdges(currentNodeValue);
+    if (outEdges != null) {
+      for (DiGraphEdge<Node, Branch> edge : outEdges) {
+        Branch edgeType = edge.getValue();
+        // If an exceptional edge is found, an exception handler is reachable.
+        if (edgeType == Branch.ON_EX) {
+          return true;
+        }
+
+        // Follow all edges (including conditional, unconditional) to find successors.
+        Node successorValue = edge.getDestination();
+        DiGraphNode<Node, Branch> successorNode = graph.getDirectedGraphNode(successorValue);
+
+        // If the successor exists and hasn't been visited, add it to the worklist.
+        // Ensure successorNode is not null before adding to visited set.
+        if (successorNode != null && visited.add(successorNode)) {
+          worklist.add(successorNode);
+        }
+      }
+    }
+  }
+
+  // No ON_EX edge was found in the subgraph reachable from startNode.
   return false;
 }
\ No newline at end of file
