diff --git a/tmp/447a79bc-6775-4504-9ea7-2ce650f715a1_buggy.java b/tmp/788dfa3b-4bb1-4d9d-83a5-de1114f55333_fixed.java
index 22640dd..50538ba 100644
--- a/tmp/447a79bc-6775-4504-9ea7-2ce650f715a1_buggy.java
+++ b/tmp/788dfa3b-4bb1-4d9d-83a5-de1114f55333_fixed.java
@@ -1,3 +1,47 @@
-  private boolean hasExceptionHandler(Node cfgNode) {
+import com.google.javascript.jscomp.ControlFlowGraph;
+import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
+import com.google.javascript.jscomp.ControlFlowGraph.Branch;
+import com.google.javascript.rhino.Node;
+
+// Assume this method is part of a class that has access to the ControlFlowGraph instance,
+// likely stored in a field named 'cfg'. For example:
+// private ControlFlowGraph<Node> cfg;
+
+/**
+ * Determines if the given AST node {@code n} is syntactically inside a try block that has an
+ * associated catch block, according to the control flow graph {@code cfg}.
+ * It checks the node {@code n} and its AST ancestors until a corresponding CFG node is found.
+ * If a CFG node is found, it checks if that node is covered by an exception handler
+ * in the control flow graph.
+ *
+ * @param n The AST node to check.
+ * @return {@code true} if the node is determined to be inside a try block with a catch handler,
+ *     {@code false} otherwise.
+ */
+private boolean hasExceptionHandler(Node n) {
+  // Search the AST ancestors of the node n.
+  for (Node ancestor = n; ancestor != null; ancestor = ancestor.getParent()) {
+    // Check if the current ancestor corresponds to a node in the control flow graph.
+    DiGraphNode<Node, Branch> cfgNode = cfg.getNode(ancestor);
+    if (cfgNode != null) {
+      // We found the innermost ancestor that has a representation in the CFG.
+      // Now, check if this CFG node (representing a point in the control flow)
+      // has an associated exception handler (i.e., is covered by a try-catch).
+      // The cfg.getExceptionHandler method traverses the CFG structure
+      // (potentially looking at parent/enclosing scopes within the CFG)
+      // to find the relevant handler.
+      return cfg.getExceptionHandler(cfgNode) != null;
+    }
+
+    // Optimization: Stop searching upwards if we reach a script or function boundary,
+    // as CFGs are typically built per-function or per-script.
+    if (ancestor.isScript() || ancestor.isFunction()) {
+      break;
+    }
+  }
+
+  // If no CFG node was found for 'n' or any of its relevant ancestors,
+  // it implies this node is not directly represented in the CFG flow
+  // in a way that would be affected by a try-catch, or it's outside any try-catch.
   return false;
 }
\ No newline at end of file
