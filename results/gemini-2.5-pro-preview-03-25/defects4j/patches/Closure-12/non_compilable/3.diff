diff --git a/tmp/6ac170c4-ade4-4cf7-82cb-25e80d447c1d_buggy.java b/tmp/751d1e59-fbac-4827-ba36-1ecfab216f1a_fixed.java
index 22640dd..e807175 100644
--- a/tmp/6ac170c4-ade4-4cf7-82cb-25e80d447c1d_buggy.java
+++ b/tmp/751d1e59-fbac-4827-ba36-1ecfab216f1a_fixed.java
@@ -1,3 +1,34 @@
-  private boolean hasExceptionHandler(Node cfgNode) {
+import com.google.javascript.jscomp.ControlFlowGraph;
+import com.google.javascript.jscomp.graph.GraphNode;
+import com.google.javascript.rhino.Node;
+
+// Assume this method is part of a class that has a ControlFlowGraph field named 'cfg'
+// e.g., private ControlFlowGraph<Node> cfg;
+
+/**
+ * Determines if a specific CFG node is part of a TRY block that has a
+ * corresponding CATCH block.
+ *
+ * @param cfgNode The CFG node representing the instruction.
+ * @return True if the node is inside a try block with a catch handler.
+ */
+private boolean hasExceptionHandler(GraphNode<Node, ControlFlowGraph.Branch> cfgNode) {
+  // Retrieve the AST Node associated with the CFG node.
+  Node astNode = cfgNode.getValue();
+
+  // If the CFG node doesn't correspond to an AST node,
+  // it can't be inside a JavaScript try-catch block in the typical sense.
+  if (astNode == null) {
     return false;
   }
+
+  // Query the Control Flow Graph to find if there's an exception handler
+  // (a CATCH block) associated with this AST node.
+  // This relies on the ControlFlowAnalysis having computed handler information.
+  // 'cfg' is assumed to be an accessible instance of ControlFlowGraph<Node>.
+  Node handler = cfg.getExceptionHandler(astNode);
+
+  // If getExceptionHandler returns a non-null node, it signifies that
+  // an exception handler exists for this node.
+  return handler != null;
+}
\ No newline at end of file
