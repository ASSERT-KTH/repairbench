diff --git a/tmp/262d3ff0-106b-4e19-80ba-e94b70726f4a_buggy.java b/tmp/1982e887-e444-4079-a776-ed42c99abe79_fixed.java
index 22640dd..59d7d1d 100644
--- a/tmp/262d3ff0-106b-4e19-80ba-e94b70726f4a_buggy.java
+++ b/tmp/1982e887-e444-4079-a776-ed42c99abe79_fixed.java
@@ -1,3 +1,58 @@
-  private boolean hasExceptionHandler(Node cfgNode) {
+import com.google.javascript.jscomp.ControlFlowGraph.Branch;
+import com.google.javascript.jscomp.graph.GraphNode;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.jscomp.NodeUtil;
+
+// The context of this function is assumed to be within a class
+// like FlowSensitiveInlineVariables or similar, which has access
+// to the necessary Node and NodeUtil classes.
+
+  /**
+   * Checks if the given node is inside a TRY block that has a CATCH handler.
+   * Traverses up the parent chain from the node represented by the CFG node.
+   * If a TRY node is found for which the current traversal path came from its
+   * first child (the main try block), it checks if that TRY node has a
+   * corresponding CATCH block. The search stops at function boundaries.
+   *
+   * @param cfgNode The CFG node representing the statement/expression.
+   * @return {@code true} if the node is in a {@code try} block guarded by a {@code catch}.
+   */
+  private boolean hasExceptionHandler(GraphNode<Node, Branch> cfgNode) {
+    Node n = cfgNode.getValue();
+    // If the node is null (e.g., for synthetic CFG nodes) or represents a function
+    // itself, it cannot be considered "inside" a try block of that function.
+    if (n == null || n.isFunction()) {
+      return false;
+    }
+
+    Node cur = n;
+    Node parent = n.getParent();
+
+    while (parent != null) {
+      // Check if the parent is a TRY node and the current node `cur` is its
+      // first child (the block executed within the try).
+      if (parent.isTry() && parent.getFirstChild() == cur) {
+        // Check if this TRY node has a CATCH block.
+        if (NodeUtil.getCatchBlock(parent) != null) {
+          // Found an enclosing TRY block with an associated CATCH block.
+          return true;
+        }
+        // If this TRY node doesn't have a CATCH block, an exception might
+        // still be caught by an outer TRY/CATCH. Continue searching upwards.
+      }
+
+      // Exceptions are generally handled within the scope of the function they
+      // occur in. Stop searching if a function boundary is reached.
+      if (parent.isFunction()) {
+        break;
+      }
+
+      // Move up the AST hierarchy.
+      cur = parent;
+      parent = parent.getParent();
+    }
+
+    // No enclosing TRY block with a CATCH handler found within the current
+    // function scope.
     return false;
   }
\ No newline at end of file
