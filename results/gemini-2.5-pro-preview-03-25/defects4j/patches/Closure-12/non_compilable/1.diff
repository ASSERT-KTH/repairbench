diff --git a/tmp/4ff99212-4bce-4a1d-81bb-f24dd5bf41d7_buggy.java b/tmp/9acb6565-242f-4886-b1e9-12b797d51d35_fixed.java
index 22640dd..f32fa20 100644
--- a/tmp/4ff99212-4bce-4a1d-81bb-f24dd5bf41d7_buggy.java
+++ b/tmp/9acb6565-242f-4886-b1e9-12b797d51d35_fixed.java
@@ -1,3 +1,42 @@
-  private boolean hasExceptionHandler(Node cfgNode) {
+  /**
+   * Checks if the given node has an associated exception handler.
+   * This is true if the node is part of a try block that has a
+   * corresponding catch block.
+   *
+   * @param cfgNode The CFG node (basic block) containing the instruction.
+   * @return true if an exception handler exists for this node.
+   */
+  private boolean hasExceptionHandler(Node cfgNodeValue) {
+    // NOTE(lh) The original code used the basic block Node as the parameter.
+    // The CFG node object (DiGraphNode) is needed to check edges.
+    // Find the DiGraphNode in the CFG whose value is cfgNodeValue.
+    DiGraphNode<Node, Branch> cfgNode = cfg.getNode(cfgNodeValue);
+
+    // If the node is not found in the graph, assume no handler.
+    // This might happen for nodes not representing executable code or detached nodes.
+    if (cfgNode == null) {
+      return false;
+    }
+
+    // Look for an outgoing edge representing exceptional control flow (ON_EX).
+    List<DiGraphEdge<Node, Branch>> outEdges = cfg.getOutEdges(cfgNode);
+    if (outEdges == null) {
+        // Defensive check, should not happen for nodes in the graph.
+        return false;
+    }
+
+    for (DiGraphEdge<Node, Branch> edge : outEdges) {
+      if (edge.getValue() == Branch.ON_EX) {
+        // An ON_EX edge exists. Check where it leads.
+        // If the destination is not the implicit "bubble up/throw" node,
+        // then it must lead to a CATCH block.
+        DiGraphNode<Node, Branch> target = edge.getDestination();
+        if (target != cfg.getImplicitReturn()) {
+          return true; // Found an edge leading to an explicit handler.
+        }
+      }
+    }
+
+    // No ON_EX edge found, or the existing ON_EX edge leads to the implicit handler.
     return false;
   }
\ No newline at end of file
