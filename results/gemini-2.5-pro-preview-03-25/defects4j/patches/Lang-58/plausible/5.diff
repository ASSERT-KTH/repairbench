diff --git a/tmp/e07444e0-9fda-4259-a071-38e2187d7f83_buggy.java b/tmp/3057f286-ac47-4c26-a11b-27fa184a81ee_fixed.java
index 4837962..f0cb7ba 100644
--- a/tmp/e07444e0-9fda-4259-a071-38e2187d7f83_buggy.java
+++ b/tmp/3057f286-ac47-4c26-a11b-27fa184a81ee_fixed.java
@@ -1,175 +1,224 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
-            return null;
+            return null; // Should this be an error? Code changed below to throw.
+            // throw new NumberFormatException(str + " is not a valid number.");
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // LANG-342 sensitivity to locales
+        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Avoid Locale dependent parsing
+
+        // Detect if 'e'/'E' appears before '.' or multiple times
+        if (expPos > -1) {
+            if (expPos > str.length() -1) { // Avoids IndexOutOfBoundsException for "1e"
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+            int firstExpPos = str.toLowerCase().indexOf('e');
+            if (firstExpPos != str.toLowerCase().lastIndexOf('e')) { // Check for multiple 'e'/'E'
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+            if (decPos > -1 && expPos < decPos) { // Check if 'e' appears before '.'
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+
 
         if (decPos > -1) {
-
             if (expPos > -1) {
-                if (expPos < decPos) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
+                // Already checked expPos >= decPos above
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar)) {
+        // Check for invalid trailing characters after determining parts
+        if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
+                // Check that characters after exponent marker and before type specifier are valid
+                // (optional sign and digits)
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
+                // If no exponent found, 'exp' should be null when a type specifier exists
                  exp = null;
             }
             //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            String numeric = str.substring(0, str.length() - 1); // Part before the type suffix
+            boolean allZeros = isAllZeros(mant) && isAllZeros(dec); // Check mantissa and decimal part for zeros
+            // Note: 'exp' might have its own zeros, but the original allZeros didn't check 'dec' properly
+            // Correcting allZeros check to be more relevant to F/D precision check.
+            if (exp != null) { // Add exponent check to allZeros if exponent exists
+                allZeros = allZeros && isAllZeros(exp);
+            }
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                    // Long type requested. Must not have decimal or exponent.
+                    // 'numeric' must be a valid integer (optional sign, digits).
+                    if (dec == null && exp == null && numeric != null && !numeric.isEmpty()) {
+                        boolean isNegative = numeric.charAt(0) == '-';
+                        int startIndex = isNegative ? 1 : 0;
+
+                        // Ensure there's at least one digit after the potential sign.
+                        if (startIndex < numeric.length()) {
+                            boolean allDigits = true;
+                            for (int i = startIndex; i < numeric.length(); i++) {
+                                if (!Character.isDigit(numeric.charAt(i))) {
+                                    allDigits = false;
+                                    break;
+                                }
+                            }
+
+                            if (allDigits) {
                                 try {
                                     return createLong(numeric);
                                 } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
+                                    // Input is valid integer format but too big for Long, treat as BigInteger
                                     return createBigInteger(numeric);
-
                                 }
+                            }
+                            // If non-digits found after sign, fall through to throw exception
+                        }
+                        // If only a sign ('-'), fall through to throw exception
+                    }
+                    // If format conditions (no dec/exp, valid integer string) are not met, throw exception.
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        Float f = createFloat(numeric); // Use 'numeric' which excludes the suffix
+                        // Check for overflow/underflow and precision loss
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                            // If Float is finite and represents the number accurately
+                            // (avoid returning 0.0f for non-zero strings like "0.00000001F")
                             return f;
                         }
-
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        // ignore the bad number format and fall through
                     }
-                    //Fall through
+                    // Fall through intended for cases where Float lacks precision or overflows
+                    // Let Double or BigDecimal handle it. Note: Original code fell through to D case.
+                    // Let's keep that behavior.
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        Double d = createDouble(numeric); // Use 'numeric' which excludes the suffix
+                        // Check for overflow/underflow and precision loss
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                            // If Double is finite and represents the number accurately
                            return d;
                         }
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                         // ignore the bad number format and fall through
                     }
                     try {
-                        return createBigDecimal(numeric);
+                         // If Float/Double failed or lacked precision, try BigDecimal
+                        return createBigDecimal(numeric); // Use 'numeric' which excludes the suffix
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                        // If BigDecimal also fails (should be rare for valid numeric part), fall through
                     }
-                    //Fall through
+                    // Fall through to default exception if all attempts fail
                 default :
+                    // If suffix is not l, L, f, F, d, D
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+            // Last character is a digit (or '.')
+            // User doesn't have a preference on the return type (no suffix)
+            if (expPos > -1 && expPos < str.length()) {
+                exp = str.substring(expPos + 1); // Exponent runs to the end
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // Must be an Integer, Long, or BigInteger
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
-                return createBigInteger(str);
+                return createBigInteger(str); // Should succeed if basic format is valid
 
             } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                 // Must be a Float, Double, or BigDecimal
+                 boolean allZeros = isAllZeros(mant) && isAllZeros(dec); // Check mantissa and decimal part
+                 if (exp != null) { // Add exponent check if exponent exists
+                     allZeros = allZeros && isAllZeros(exp);
+                 }
+
                  try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
                      // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                      // ignore the bad number
                 }
 
-                return createBigDecimal(str);
-
+                return createBigDecimal(str); // Should succeed if basic format is valid
             }
         }
     }
\ No newline at end of file
