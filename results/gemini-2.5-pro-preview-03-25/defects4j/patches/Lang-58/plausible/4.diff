diff --git a/tmp/a2a202cc-2270-4f3f-895b-c6e64da033cd_buggy.java b/tmp/8bbbc7af-48a8-4ce3-be78-3cbdc07aaf80_fixed.java
index 4837962..619953c 100644
--- a/tmp/a2a202cc-2270-4f3f-895b-c6e64da033cd_buggy.java
+++ b/tmp/8bbbc7af-48a8-4ce3-be78-3cbdc07aaf80_fixed.java
@@ -1,175 +1,206 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // Handle edge case for strings like ".1", "1."
+        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Handles both 'e' and 'E'
+        // Ensure exponent is after decimal point if both exist
+        if (decPos > -1 && expPos > -1 && expPos < decPos) {
+             throw new NumberFormatException(str + " is not a valid number.");
+        }
+
 
         if (decPos > -1) {
-
             if (expPos > -1) {
-                if (expPos < decPos) {
+                // Check for empty exponent "1.2e"
+                if (expPos > str.length()) { // Fixed: check index bounds
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
+                 // Check for empty exponent "1e"
+                if (expPos > str.length()) { // Fixed: check index bounds
+                    throw new NumberFormatException(str + " is not a valid number.");
+                }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar)) {
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // allow '.' as last char e.g "1."
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // exp can be null here
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                    // Check if the L/l applies to an integer format number
+                    // Must not have a decimal point or exponent
+                    if (dec == null && exp == null && numeric.length() > 0) {
+                        boolean isNegative = numeric.charAt(0) == '-';
+                        // Extract the potential digits part
+                        String digitsToCheck = isNegative ? numeric.substring(1) : numeric;
+                        // Check if the extracted part is non-empty and contains only digits
+                        if (digitsToCheck.length() > 0 && isDigits(digitsToCheck)) {
                             try {
                                 return createLong(numeric);
                             } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                                // Too big for a long, fall through to BigInteger
                             }
                             return createBigInteger(numeric);
-
                         }
+                        // If not a valid integer format before L/l
+                    }
+                    // If format constraints are not met (e.g., "1.2L", "1e2L", "-L")
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Ensure not infinite and handles cases like "0.0F" vs "0F" preserving precision perception
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        // ignore the bad number format and try Double below
                     }
-                    //Fall through
+                    // Fall through to try Double if Float failed or was not precise enough
                 case 'd' :
                 case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                         // Ensure not infinite and handles cases like "0.0D" vs "0D" preserving precision perception
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed d.floatValue() to d.doubleValue()
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                       // ignore the bad number format and try BigDecimal below
                     }
+                    // Fall through to try BigDecimal if Double failed or was not precise enough
                     try {
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                        // ignore the bad number format
                     }
-                    //Fall through
+                    // Fall through - indicates failure after trying Float, Double, BigDecimal
                 default :
+                    // Reached if the suffix is not L,l,F,f,D,d
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
-        } else {
+        } else { // last char is a digit or '.'
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+            if (expPos > -1 && expPos < str.length()) { // Corrected condition for exponent presence
+                 // Check for empty exponent "1e" "1.e"
+                if (expPos == str.length() -1) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                }
+                exp = str.substring(expPos + 1); // exp includes the full exponent part
             } else {
                 exp = null;
             }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+            if (dec == null && exp == null) { // No decimal, no exponent -> integer types
+                //Must be an Integer, Long, or BigInteger
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
-                return createBigInteger(str);
+                return createBigInteger(str); // Should always succeed if format is right
 
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            } else { // Has decimal or exponent -> floating point types
+                //Must be a Float, Double, or BigDecimal
+                boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // exp can be null here
                 try {
                     Float f = createFloat(str);
+                    // Check precision like in the typed section
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                     // Check precision like in the typed section
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed d.floatValue() to d.doubleValue()
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
 
-                return createBigDecimal(str);
+                return createBigDecimal(str); // Should always succeed if format is right
+            }
+        }
+    }
 
-            }
-        }
-    }
+    // Helper methods assumed to exist (like in Apache Commons Lang NumberUtils)
+    // private static boolean isDigits(String str) { ... }
+    // private static boolean isAllZeros(String str) { ... }
+    // private static Integer createInteger(String str) { ... }
+    // private static Long createLong(String str) { ... }
+    // private static BigInteger createBigInteger(String str) { ... }
+    // private static Float createFloat(String str) { ... }
+    // private static Double createDouble(String str) { ... }
+    // private static BigDecimal createBigDecimal(String str) { ... }
