diff --git a/tmp/2074a9d6-0612-4416-b7de-7b9a0f5835ba_buggy.java b/tmp/620b7b5d-6086-4d52-8b48-dfe60fd7c40d_fixed.java
index 4837962..c9f9301 100644
--- a/tmp/2074a9d6-0612-4416-b7de-7b9a0f5835ba_buggy.java
+++ b/tmp/620b7b5d-6086-4d52-8b48-dfe60fd7c40d_fixed.java
@@ -1,175 +1,191 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
+        // LANG-552: handle -- correctly
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
-            // a wrong value.
+            // a wrong value. Proper fix is to return null, as documentation suggests.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // Corrected calculation for exponent position
+        int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));
 
+        // Parse the string into mantissa, decimal, and exponent parts
+        // Retaining original parsing logic structure with minimal correction for validity checks
         if (decPos > -1) {
-
             if (expPos > -1) {
-                if (expPos < decPos) {
+                // Ensure exponent appears after decimal and has digits
+                if (expPos < decPos || expPos >= str.length() - 1) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+                mant = str.substring(0, decPos);
+                exp = str.substring(expPos + 1); // May include type suffix initially
+            } else { // Only decimal present
                 dec = str.substring(decPos + 1);
-            }
                 mant = str.substring(0, decPos);
-        } else {
+                exp = null;
+            }
+        } else { // No decimal point
             if (expPos > -1) {
+                // Ensure exponent has digits
+                 if (expPos >= str.length() - 1) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
                 mant = str.substring(0, expPos);
-            } else {
-                mant = str;
-            }
                 dec = null;
-        }
-        if (!Character.isDigit(lastChar)) {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
+                exp = str.substring(expPos + 1); // May include type suffix initially
+            } else { // Neither decimal nor exponent
+                mant = str; // Initially holds the full string if no separators
+                dec = null;
                 exp = null;
             }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
+        }
+
+        // Check if the last character is a valid type qualifier
+        if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // Remove suffix from exponent string if present
+            if (exp != null && exp.length() > 0 && exp.charAt(exp.length() - 1) == lastChar) {
+                 if (exp.length() == 1) { // Ensure exponent had digits before suffix (e.g., "1eL")
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
+                 exp = exp.substring(0, exp.length() - 1);
+            } else if (exp == null && dec == null && mant.length() > 0 && mant.charAt(mant.length() - 1) == lastChar){
+                 // If no exp/dec, suffix might be at end of mantissa (e.g., "1L")
+                 // Check for cases like "L" or "-L" which are invalid
+                 if (mant.length() == 1 || (mant.startsWith("-") && mant.length() == 2)) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
+                 // This adjustment is needed for isAllZeros logic below, but use 'numeric' for parsing attempts.
+                 mant = mant.substring(0, mant.length() - 1);
+            } else {
+                 // Suffix present but not attached to exponent or simple integer/long mantissa. Invalid.
+                 // e.g. "1.0L" is invalid based on this logic (needs dec==null, exp==null for L).
+                 // Let the switch handle final validation.
+            }
+
+            String numeric = str.substring(0, str.length() - 1); // String without the suffix
+            // Using original isAllZeros logic based on originally parsed parts
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l':
                 case 'L':
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                    // Must be integer-like format (no decimal, no exponent part in original string)
+                    if (dec == null && exp == null) {
+                        // Validate the numeric part (string without suffix)
+                        int startIndex = (numeric.startsWith("-")) ? 1 : 0;
+                        // Fixed: Check if part after sign contains only digits and is not empty
+                        if (numeric.length() > startIndex && StringUtils.isDigits(numeric.substring(startIndex))) {
                             try {
                                 return createLong(numeric);
                             } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                                // Fall through to BigInteger
                             }
                             return createBigInteger(numeric);
-
                         }
+                        // If not a valid integer format (e.g., "-", empty after sign)
+                    }
+                    // If format had decimal/exponent, or numeric part wasn't valid integer
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f':
                 case 'F':
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        Float f = createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    //Fall through
+                    } catch (NumberFormatException nfe) { /* Ignore */ }
+                    // Fall through to try Double/BigDecimal
+                    //$FALL-THROUGH$
                 case 'd':
                 case 'D':
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        Double d = createDouble(numeric);
+                        // Fixed: Use d.doubleValue() for check
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
+                    } catch (NumberFormatException nfe) { /* Ignore */ }
+                    // Fall through to try BigDecimal
+                    //$FALL-THROUGH$
                     try {
                         return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
-                    }
-                    //Fall through
-                default :
+                    } catch (NumberFormatException e) { /* Ignore */ }
+                    // Fall through to throw exception if all attempts fail
+                    //$FALL-THROUGH$
+                default: // Invalid suffix character
                     throw new NumberFormatException(str + " is not a valid number.");
-
-            }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
             }
+        } else { // Last character is a digit or '.'
+            // No type specified, parse using the full original string 'str'
+            // Type determined by structure (presence of '.', 'e', 'E')
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // Integer format
                 try {
                     return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* Ignore */ }
                 try {
                     return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* Ignore */ }
                 return createBigInteger(str);
-
             } else {
-                //Must be a float,double,BigDec
+                // Floating point format
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* Ignore */ }
                 try {
                     Double d = createDouble(str);
+                    // Fixed: Use d.doubleValue() for check
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
-
+                } catch (NumberFormatException nfe) { /* Ignore */ }
                 return createBigDecimal(str);
-
             }
         }
     }
\ No newline at end of file
