diff --git a/tmp/ebda7671-9efa-4772-a044-e18000fc1e10_buggy.java b/tmp/fc53ac56-dbee-4c88-b8c8-34a87f56dafb_fixed.java
index 4837962..8f7c3b7 100644
--- a/tmp/ebda7671-9efa-4772-a044-e18000fc1e10_buggy.java
+++ b/tmp/fc53ac56-dbee-4c88-b8c8-34a87f56dafb_fixed.java
@@ -1,175 +1,284 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        //int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Original calculation was incorrect
+        // Correct way to find 'e' or 'E'
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
+
 
         if (decPos > -1) {
 
             if (expPos > -1) {
-                if (expPos < decPos) {
+                if (expPos < decPos || expPos > str.length()) { // Check if 'e'/'E' is validly placed
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
+                 if (expPos > str.length()) { // Check if 'e'/'E' is validly placed
+                    throw new NumberFormatException(str + " is not a valid number.");
+                }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar)) {
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // Added '.' check as it could be the last char
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // isAllZeros check needs to be safe for null/empty strings
+            boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Checked dec as well
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                    // Check if it's potentially a valid Long string (no decimal, no exponent)
+                    if (dec == null && exp == null) {
+                        // Validate the 'numeric' part (the string without 'L')
+                        boolean isValid = false;
+                        if (numeric != null && !numeric.isEmpty()) {
+                            char firstChar = numeric.charAt(0);
+                            if (firstChar == '-') {
+                                // Must have at least one digit after '-'
+                                isValid = numeric.length() > 1 && StringUtils.isDigits(numeric.substring(1));
+                            } else {
+                                // All characters must be digits
+                                isValid = StringUtils.isDigits(numeric);
+                            }
+                        }
+                        
+                        if (isValid) {
                            try {
                                return createLong(numeric);
                            } catch (NumberFormatException nfe) {
                                // Too big for a long
                            }
-                        return createBigInteger(numeric);
-
+                           return createBigInteger(numeric); // Fallback to BigInteger if Long overflows
                         }
+                    }
+                    // If the format is not valid for Long (e.g., has decimal/exponent, or invalid chars)
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        // Use Float.valueOf directly? createFloat might have its own logic
+                        Float f = createFloat(numeric);
+                        //sun's Double/Float.valueOf doesn't create Infinities
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (NumberFormatException nfe) {
                         // ignore the bad number
                     }
                     // Fall through
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Use Double.valueOf directly? createDouble might have its own logic
+                        Double d = createDouble(numeric);
+                        //sun's Double/Float.valueOf doesn't create Infinities
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed floatValue() to doubleValue()
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
                          // ignore the bad number
                     }
                     try {
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
                         // ignore the bad number
                     }
                     // Fall through
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
             if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+                 // Check if character after 'e'/'E' is valid (sign or digit)
+                 char expChar = str.charAt(expPos + 1);
+                 if (expChar == '+' || expChar == '-' || Character.isDigit(expChar)) {
+                     exp = str.substring(expPos + 1);
                  } else {
+                     // Invalid char after exponent symbol, treat as integer/long/bigint if no decimal
+                     if (dec == null) exp = null; // Effectively ignore exponent part if invalid
+                     else throw new NumberFormatException(str + " is not a valid number."); // Invalid exponent on decimal number
+                 }
+            } else if (expPos == str.length() -1 ) { // Exponent symbol is last char
+                 if (dec == null) exp = null; // Ignore exponent symbol if no digits follow and no decimal
+                 else throw new NumberFormatException(str + " is not a valid number."); // Invalid exponent on decimal number
+            }
+            else {
                 exp = null;
             }
+
+            // Check if exp is valid if it exists
+             if (exp != null && !isExponent(exp)) { // Added helper isExponent check
+                  if (dec == null) { // If no decimal, maybe it was meant as a Long/Integer? Try parsing full string.
+                      exp = null; // Reset exp if invalid, rely on integer parsing below
+                      // Reset mant to full string if we incorrectly split at 'e'/'E'
+                      mant = str;
+                  } else {
+                     throw new NumberFormatException(str + " is not a valid number."); // Invalid exponent on decimal number
+                  }
+             }
+
+
             if (dec == null && exp == null) {
                 //Must be an int,long,bigint
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 return createBigInteger(str);
 
             } else {
                 //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                // isAllZeros check needs to be safe for null/empty strings
+                boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Checked dec as well
                 try {
                     Float f = createFloat(str);
+                    //sun's Double/Float.valueOf doesn't create Infinities
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                     //sun's Double/Float.valueOf doesn't create Infinities
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed floatValue() to doubleValue()
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
 
                 return createBigDecimal(str);
+            }
+        }
+    }
 
+    // Helper method to check if a string represents a valid exponent part
+    // Assumes the exponent string itself (e.g., "-3", "+4", "5")
+    private static boolean isExponent(String exp) {
+        if (exp == null || exp.isEmpty()) {
+            return false; // Or true depending on definition? Assume false if empty.
+        }
+        char first = exp.charAt(0);
+        if (first == '+' || first == '-') {
+            if (exp.length() == 1) return false; // Sign only is invalid
+            return StringUtils.isDigits(exp.substring(1));
+        } else {
+            return StringUtils.isDigits(exp);
+        }
+    }
+
+
+    // Helper method, assumed to exist elsewhere, stubbed here
+    private static boolean isAllZeros(String str) {
+        if (str == null) {
+            return true; // Treat null as all zeros? Or false? Context matters. Assuming true based on original code.
+        }
+        for (int i = str.length() - 1; i >= 0; i--) {
+            if (str.charAt(i) != '0') {
+                return false;
+            }
+        }
+        return str.length() > 0; // Treat "" as not all zeros? Or true? Based on usage, likely true if empty.
+    }
+    
+    // These are assumed to exist in NumberUtils or be static imports
+    // private static Integer createInteger(String str) { return Integer.valueOf(str); }
+    // private static Long createLong(String str) { return Long.valueOf(str); }
+    // private static BigInteger createBigInteger(String str) { return new BigInteger(str); }
+    // private static Float createFloat(String str) { return Float.valueOf(str); }
+    // private static Double createDouble(String str) { return Double.valueOf(str); }
+    // private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+
+    // Assume StringUtils exists and provides isBlank and isDigits
+    private static class StringUtils {
+        public static boolean isBlank(String str) {
+            return str == null || str.trim().isEmpty();
+        }
+        public static boolean isDigits(String str) {
+            if (str == null || str.isEmpty()) {
+                return false;
+            }
+            for (int i = 0; i < str.length(); i++) {
+                if (!Character.isDigit(str.charAt(i))) {
+                    return false;
+                }
             }
+            return true;
         }
     }
\ No newline at end of file
