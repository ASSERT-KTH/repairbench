diff --git a/tmp/bc2e9b05-4254-48ea-877e-58a8c7389e95_buggy.java b/tmp/2979a847-c351-4837-8baa-51c30fa69530_fixed.java
index 4837962..6c0bc04 100644
--- a/tmp/bc2e9b05-4254-48ea-877e-58a8c7389e95_buggy.java
+++ b/tmp/2979a847-c351-4837-8baa-51c30fa69530_fixed.java
@@ -1,175 +1,294 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang.StringUtils; // Assuming this import exists and the class provides isBlank()
+
+/**
+ * Helper class assumed to exist for NumberUtils methods like createFloat, etc.
+ * This is just for context; the fix is within createNumber.
+ */
+class NumberUtils {
+    // Assume these helper methods exist and function as expected (e.g., wrapping standard parsers)
+    public static Float createFloat(String str) { return Float.valueOf(str); }
+    public static Double createDouble(String str) { return Double.valueOf(str); }
+    public static Integer createInteger(String str) {
+        // Handle hex format if needed, like Integer.decode or custom logic
+        if (str.startsWith("0x") || str.startsWith("-0x")) {
+             try {
+                 return Integer.decode(str);
+             } catch (NumberFormatException nfe) {
+                 // May overflow Integer, throw or handle differently?
+                 // The original code's behaviour for hex needs clarification,
+                 // but this stub assumes basic Integer parsing or hex handling.
+                 throw nfe; // Propagate for now
+             }
+        }
+        return Integer.valueOf(str);
+    }
+    public static Long createLong(String str) { return Long.valueOf(str); }
+    public static BigInteger createBigInteger(String str) { return new BigInteger(str); }
+    public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+
+    // Assume isAllZeros exists and handles null safely (returning true for null/empty)
+    // and checks if all characters in a non-null string are '0'.
+    public static boolean isAllZeros(String str) {
+        if (str == null || str.length() == 0) {
+            return true;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (str.charAt(i) != '0') {
+                return false;
+            }
+        }
+        return true;
+    }
+    
+    // Assume isDigits exists (similar to StringUtils.isNumeric but maybe stricter)
+    // For simplicity, let's assume it checks if non-empty string contains only digits 0-9
+    public static boolean isDigits(String str) {
+         if (str == null || str.length() == 0) {
+             return false;
+         }
+         for (int i = 0; i < str.length(); i++) {
+             if (!Character.isDigit(str.charAt(i))) {
+                 return false;
+             }
+         }
+         return true;
+     }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
+            // Consider using Long.decode or BigInteger(String, 16) for full hex support
+            // Original code delegates to createInteger, which might be limited.
+            // For this fix, retain original call structure.
+            try {
                 return createInteger(str);
+            } catch (NumberFormatException e){
+                 // If createInteger fails (e.g. overflow), maybe try Long/BigInteger hex
+                 // This part is outside the scope of the reported bug fix.
+                 // Re-throwing the exception from createInteger for now.
+                 throw e;
+            }
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
+        // Correct calculation for first 'e' or 'E'
         int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // Adjust expPos if it indicates position beyond string length
+        // or if it points to the very last character (invalid exponent format unless qualifier follows)
+        if (expPos > str.length() || expPos == str.length()) {
+            expPos = -1;
+        }
 
-        if (decPos > -1) {
 
-            if (expPos > -1) {
-                if (expPos < decPos) {
+        // Simplified logic: Check for qualifier first. If present, process 'numeric' part.
+        // If not present, process the whole 'str'.
+
+        if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // Potential qualifier found.
+            String numeric = str.substring(0, str.length() - 1); // String without the potential qualifier
+
+            // Check if numeric part is empty or just a sign (e.g., "L", "-F")
+             if (numeric.isEmpty() || numeric.equals("-")) {
                  throw new NumberFormatException(str + " is not a valid number.");
              }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
+
+            // Assign mant, dec, exp based on the structure of 'numeric' for isAllZeros check later
+            // Recalculate positions within 'numeric'
+            int numDecPos = numeric.indexOf('.');
+            int numExpPos = numeric.indexOf('e') + numeric.indexOf('E') + 1;
+            if (numExpPos > numeric.length()) {
+                 numExpPos = -1;
             }
-            mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                mant = str.substring(0, expPos);
+
+            if (numDecPos > -1) {
+                if (numExpPos > -1) {
+                     if (numExpPos < numDecPos) throw new NumberFormatException(str + " is not a valid number."); // Invalid format
+                     mant = numeric.substring(0, numDecPos);
+                     dec = numeric.substring(numDecPos + 1, numExpPos);
+                     exp = numeric.substring(numExpPos + 1);
                 } else {
-                mant = str;
+                     mant = numeric.substring(0, numDecPos);
+                     dec = numeric.substring(numDecPos + 1);
+                     exp = null;
                 }
+            } else { // No decimal in numeric
+                 if (numExpPos > -1) {
+                     mant = numeric.substring(0, numExpPos);
                      dec = null;
-        }
-        if (!Character.isDigit(lastChar)) {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+                     exp = numeric.substring(numExpPos + 1);
                  } else {
+                     mant = numeric;
+                     dec = null;
                      exp = null;
                  }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            }
+            // Note: isAllZeros needs to handle potentially empty exp/dec strings correctly.
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Use mant/exp derived from 'numeric'
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                    // FIX: Ensure 'numeric' part represents an integer (no decimal, no exponent)
+                    // Rely on createLong/createBigInteger for actual parsing and validation.
+                    if (dec == null && exp == null && numeric.indexOf('.') == -1 && numeric.toLowerCase().indexOf('e') == -1) {
                         try {
+                            // Attempt Long conversion using the helper
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
+                            // Fallback to BigInteger if Long fails (e.g., too large)
+                             // createBigInteger should throw if format is fundamentally wrong
                              return createBigInteger(numeric);
-
                         }
+                    }
+                    // If format constraints (no decimal/exponent) fail for L/l, throw NFE.
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
+                        // Check for infinity/zero precision issues
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        // ignore the bad number, fall through
                     }
-                    //Fall through
+                    // Fall through intended
                 case 'd' :
                 case 'D' :
                     try {
                         Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Check for infinity/zero precision issues (FIXED: use d.doubleValue())
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        // ignore the bad number, fall through
                     }
+                    // Fall through intended
                     try {
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                         throw new NumberFormatException(str + " is not a valid number.");
                     }
-                    //Fall through
                 default :
+                    // Invalid trailing character if not a recognized qualifier
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
+            // No type qualifier, last char is digit or potentially '.'
+            // Process the whole string 'str'.
+
+            // Check for trailing '.' or exponent markers without digits
+            if (lastChar == '.' && str.indexOf('.', str.length() - 2) != -1) { // Double decimal point ".."
+                throw new NumberFormatException(str + " is not a valid number.");
             }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+            if (expPos == str.length() - 1) { // ends with e/E
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+
+
+            // Determine type based on presence of decimal point or exponent marker in 'str'.
+            if (decPos == -1 && expPos == -1) {
+                 // No decimal, no exponent -> Integer, Long, BigInteger
+                 // If ends in '.', treat as float/double/decimal below
+                 if (lastChar == '.') {
+                     // Fall through to float/double/decimal path
+                 } else {
+                    // Try integer types
                     try {
                         return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                    } catch (NumberFormatException nfe) { /* ignore */ }
                     try {
                         return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                    } catch (NumberFormatException nfe) { /* ignore */ }
+                    // Final attempt with BigInteger
+                    return createBigInteger(str); // Let it throw NFE if invalid
                  }
-                return createBigInteger(str);
+            }
+            // If we reach here, it has decimal or exponent, or ends with '.'
+            // -> Float, Double, BigDecimal path
 
+            // Assign mant, dec, exp based on the structure of 'str' for isAllZeros check
+            // Recalculate positions within 'str'
+            if (decPos > -1) {
+                if (expPos > -1) {
+                     if (expPos < decPos) throw new NumberFormatException(str + " is not a valid number."); // Invalid format
+                     mant = str.substring(0, decPos);
+                     dec = str.substring(decPos + 1, expPos);
+                     exp = str.substring(expPos + 1);
                 } else {
-                //Must be a float,double,BigDec
+                     mant = str.substring(0, decPos);
+                     // Handle trailing '.' case "123." -> dec should be ""
+                     dec = str.substring(decPos + 1);
+                     exp = null;
+                }
+            } else { // No decimal
+                 // ExpPos must be > -1 here, otherwise handled above
+                 mant = str.substring(0, expPos);
+                 dec = null;
+                 exp = str.substring(expPos + 1);
+            }
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             try {
                 Float f = createFloat(str);
                  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+            } catch (NumberFormatException nfe) { /* ignore */ }
             try {
                 Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
-
-                return createBigDecimal(str);
-
+            } catch (NumberFormatException nfe) { /* ignore */ }
+             // Final attempt with BigDecimal
+            return createBigDecimal(str); // Let it throw NFE if invalid
         }
     }
 }
