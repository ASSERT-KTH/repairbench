diff --git a/tmp/50180869-9fb8-4481-8ed5-1df04e886b1e_buggy.java b/tmp/fa457c80-bf70-4daa-9ee0-1d5b69bdca90_fixed.java
index 4837962..265ae1b 100644
--- a/tmp/50180869-9fb8-4481-8ed5-1df04e886b1e_buggy.java
+++ b/tmp/fa457c80-bf70-4daa-9ee0-1d5b69bdca90_fixed.java
@@ -1,175 +1,273 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
-            return null;
+            return null; // Keep original behavior
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
+            // Delegate handling of hex numbers to a dedicated method or Integer.decode if sufficient.
+            // Assuming createInteger handles hex logic correctly (potentially returning Long or BigInteger for large values)
+            // Note: The original code relied on createInteger which might need its own fix depending on its implementation.
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        int expPos = str.indexOf('e'); // Find first 'e' or 'E'
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
+        // Parse the string into parts: mantissa, decimal, exponent
+        // This logic needs to be careful about the exponent position relative to decimal and potential type suffix
         if (decPos > -1) {
-
+            // String has decimal point
             if (expPos > -1) {
-                if (expPos < decPos) {
+                // String has decimal point and exponent marker
+                if (expPos < decPos || expPos == str.length() - 1) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
+                // String has decimal point but no exponent marker
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
+            // String has no decimal point
             if (expPos > -1) {
+                // String has exponent marker but no decimal point
+                if (expPos == str.length() - 1) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
                 mant = str.substring(0, expPos);
             } else {
+                // String has no decimal point and no exponent marker
                 mant = str;
             }
-            dec = null;
+            dec = null; // No decimal part
         }
-        if (!Character.isDigit(lastChar)) {
+
+        // Handle type qualifiers (L, F, D)
+        if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // Extract the exponent string if an exponent marker exists before the suffix
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
-                exp = null;
+                exp = null; // No exponent part found
             }
-            //Requesting a specific type..
+            // The main numeric part of the string (excluding the suffix)
             String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Check for all zeros, considering the mantissa and exponent parts
+            // Note: isAllZeros needs to handle nulls and signs appropriately. Assume it does.
+            // We need the mantissa part used for the allZeros check. If mant computed above included the suffix, adjust it.
+             String mantForZeroCheck = mant;
+             if (expPos == -1 && decPos == -1 && mant != null && mant.length() > numeric.length()) {
+                mantForZeroCheck = numeric;
+             }
+            boolean allZeros = isAllZeros(mantForZeroCheck) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                    // Long types must not have decimal or exponent parts
+                    if (dec == null && exp == null && // Check based on parts derived from original string structure
+                        // Additionally ensure the numeric part itself doesn't contain '.' or 'e'/'E'
+                        numeric.indexOf('.') == -1 && numeric.indexOf('e') == -1 && numeric.indexOf('E') == -1)
+                    {
+                        // Validate the format of the numeric part (digits, optional leading '-')
+                        boolean isPotentialLong = (numeric.length() > 0);
+                        if (isPotentialLong) {
+                            char firstChar = numeric.charAt(0);
+                            if (firstChar == '-') {
+                                // Must have digits after '-'
+                                if (numeric.length() > 1) {
+                                    for (int i = 1; i < numeric.length(); i++) {
+                                        if (!Character.isDigit(numeric.charAt(i))) {
+                                            isPotentialLong = false; break;
+                                        }
+                                    }
+                                } else {
+                                    isPotentialLong = false; // Just "-" is not valid
+                                }
+                            } else {
+                                // All characters must be digits
+                                for (int i = 0; i < numeric.length(); i++) {
+                                    if (!Character.isDigit(numeric.charAt(i))) {
+                                        isPotentialLong = false; break;
+                                    }
+                                }
+                            }
+                        }
+
+                        // If the format is valid, try creating Long, then BigInteger
+                        if (isPotentialLong) {
                             try {
                                 return createLong(numeric);
                             } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                                // Fallback to BigInteger if Long parsing fails (e.g., overflow)
                             }
+                            try {
                                 return createBigInteger(numeric);
-
+                            } catch (NumberFormatException nfe2) {
+                                // If BigInteger also fails, format is fundamentally wrong (should have been caught by isPotentialLong?)
+                                // Or createBigInteger has its own validation issues. Rethrow original string NFE.
                             }
+                        }
+                    }
+                    // If checks fail, throw NumberFormatException
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        Float f = createFloat(numeric);
+                        // Avoid returning Float if it overflows to infinity or loses precision to zero inappropriately
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    //Fall through
+                    } catch (NumberFormatException nfe) { /* Fall through */ }
+                    // Fall through to try Double and BigDecimal if Float is unsuitable
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        Double d = createDouble(numeric);
+                        // Corrected check: use d.doubleValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
+                    } catch (NumberFormatException nfe) { /* Fall through */ }
                     try {
+                        // Use BigDecimal as the final fallback for F/f and D/d types
                         return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
-                    }
-                    //Fall through
+                    } catch (NumberFormatException e) { /* Fall through */ }
+                    // If all floating point types fail for the numeric part, throw exception
+                    throw new NumberFormatException(str + " is not a valid number.");
                 default :
+                    // Invalid type suffix
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+            // Last character is a digit (or potentially '.') -> No type suffix
+            // Extract exponent string if 'e'/'E' is present
             if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+                exp = str.substring(expPos + 1);
+            } else if (expPos > -1) { // covers expPos == str.length() - 1, which is invalid
+                 throw new NumberFormatException(str + " is not a valid number.");
             } else {
                 exp = null;
             }
+             // Check for all zeros using the initially computed mantissa and the exponent string
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // No decimal point, no exponent -> Integer types
                 try {
                     return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* ignore */ }
                 try {
                     return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* ignore */ }
+                // Default to BigInteger, letting its constructor handle validation
                 return createBigInteger(str);
-
             } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                // Has decimal point or exponent -> Floating point types
                 try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* ignore */ }
                 try {
                     Double d = createDouble(str);
+                    // Corrected check: use d.doubleValue()
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
-
+                } catch (NumberFormatException nfe) { /* ignore */ }
+                // Default to BigDecimal, letting its constructor handle validation
                 return createBigDecimal(str);
+            }
+        }
+    }
 
+    // Assume helper methods like isAllZeros, createInteger, createLong, createBigInteger,
+    // createFloat, createDouble, createBigDecimal are defined elsewhere and function correctly.
+    // For example:
+    private static boolean isAllZeros(String str) {
+        if (str == null || str.isEmpty()) {
+            return true; // Consider null/empty as "all zeros" for the check logic
+        }
+        for (int i = 0; i < str.length(); i++) {
+            char c = str.charAt(i);
+             // Allow sign, but check digits
+             if (c == '+' || c == '-') {
+                if (i != 0) return false; // Sign only allowed at start
+             } else if (c != '0') {
+                return false;
+            }
+        }
+        // Check if it wasn't just a sign character
+        if (str.equals("+") || str.equals("-")) {
+             return false;
+        }
+        return true; // All digits were '0' (or string was empty/null)
+    }
+    // Stubs for other helpers (replace with actual implementations)
+    private static Integer createInteger(String str) { return Integer.decode(str); } // Needs proper hex/octal/decimal handling & BigInt fallback
+    private static Long createLong(String str) { return Long.valueOf(str); }
+    private static BigInteger createBigInteger(String str) { return new BigInteger(str); }
+    private static Float createFloat(String str) { return Float.valueOf(str); }
+    private static Double createDouble(String str) { return Double.valueOf(str); }
+    private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+
+    // Assume StringUtils.isBlank is available from Apache Commons Lang
+    private static class StringUtils {
+        public static boolean isBlank(String str) {
+            int strLen;
+            if (str == null || (strLen = str.length()) == 0) {
+                return true;
+            }
+            for (int i = 0; i < strLen; i++) {
+                if (!Character.isWhitespace(str.charAt(i))) {
+                    return false;
+                }
             }
+            return true;
         }
     }
\ No newline at end of file
