diff --git a/tmp/48d7c069-d8f8-430e-a85d-98c91ed8fa60_buggy.java b/tmp/593c0daf-85f6-45a2-b220-3e45c907a559_fixed.java
index 4837962..68e8d48 100644
--- a/tmp/48d7c069-d8f8-430e-a85d-98c91ed8fa60_buggy.java
+++ b/tmp/593c0daf-85f6-45a2-b220-3e45c907a559_fixed.java
@@ -1,175 +1,301 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string
-     * @throws NumberFormatException if the value cannot be converted
-     */
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Assuming StringUtils and other helper methods like createInteger, createLong, createBigInteger,
+// createFloat, createDouble, createBigDecimal, isAllZeros, isDigits are defined/accessible
+// within the context of the original class (e.g., NumberUtils).
+
 public static Number createNumber(String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear
         // to be in specification of class. OS X Java parses it to
         // a wrong value.
+        // Returning null as per original code's behavior.
         return null;
     }
     if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Handle hexadecimal numbers.
+        // Let's assume createInteger/createLong/createBigInteger can handle hex format.
+        // We try them in increasing order of size.
+        try {
+             // Need to handle potential NumberFormatException if createInteger/Long cannot parse hex
+             // or if the hex value is out of range for Integer/Long.
+             // A more robust way might involve BigInteger directly for hex.
+             // For now, follow the pattern of trying smaller types first.
+             // Let's assume createInteger handles hex (e.g., via Integer.decode).
              return createInteger(str);
+         } catch (NumberFormatException nfe) {
+             // If createInteger fails (e.g., too large, or doesn't handle hex), try Long.
+             try {
+                 // Assume createLong handles hex (e.g., via Long.decode).
+                 return createLong(str);
+             } catch (NumberFormatException nfe2) {
+                 // If createLong fails, try BigInteger.
+                 // Assume createBigInteger handles hex (e.g., via new BigInteger(str.substring(prefixLen), 16)).
+                 return createBigInteger(str);
+             }
+         }
     }
     char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
-
-        if (decPos > -1) {
+    // Corrected calculation for exponent position ('e' or 'E')
+    int expPos = str.indexOf('e');
+    if (expPos == -1) {
+        expPos = str.indexOf('E');
+    }
 
-            if (expPos > -1) {
-                if (expPos < decPos) {
+    // Pre-validation for common invalid formats
+    if (decPos > -1 && expPos > -1 && expPos < decPos) {
+        // Exponent 'e'/'E' cannot appear before decimal '.'
         throw new NumberFormatException(str + " is not a valid number.");
     }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
+    // Trailing ., e/E, or sign is invalid
+    if (str.endsWith(".") || str.endsWith("e") || str.endsWith("E") ||
+        str.endsWith("+") || str.endsWith("-")) {
+         throw new NumberFormatException(str + " is not a valid number.");
     }
-            mant = str.substring(0, decPos);
-        } else {
+    // Check for empty exponent part (e.g., "1e", "1e+", "1e-")
     if (expPos > -1) {
-                mant = str.substring(0, expPos);
+        String expPart = str.substring(expPos + 1);
+        if (expPart.isEmpty()) {
+             throw new NumberFormatException(str + " is not a valid number.");
+        }
+        // Check if exponent part consists of optional sign and digits
+        char firstExpChar = expPart.charAt(0);
+        String expDigits;
+        if (firstExpChar == '+' || firstExpChar == '-') {
+            expDigits = expPart.substring(1);
         } else {
-                mant = str;
+            expDigits = expPart;
+        }
+        // Exponent digits must not be empty and must contain only digits
+        if (expDigits.length() == 0 || !StringUtils.isDigits(expDigits)) {
+             throw new NumberFormatException(str + " is not a valid number.");
         }
-            dec = null;
     }
-        if (!Character.isDigit(lastChar)) {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+
+
+    if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {
+        // String potentially ends with a type qualifier L, F, D
+        String numeric = str.substring(0, str.length() - 1); // The part before the qualifier
+
+        // Use the numeric part for parsing and checks
+        int numDecPos = numeric.indexOf('.');
+        int numExpPos = numeric.indexOf('e');
+        if (numExpPos == -1) {
+            numExpPos = numeric.indexOf('E');
+        }
+
+        // Extract mantissa and exponent from the numeric part for the allZeros check
+        String numMant, numExp;
+        if (numDecPos > -1) {
+             if (numExpPos > -1) {
+                 numMant = numeric.substring(0, numExpPos); // Mantissa includes decimal for check
+                 numExp = numeric.substring(numExpPos + 1);
              } else {
-                exp = null;
+                 numMant = numeric; // Mantissa includes decimal
+                 numExp = null;
              }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        } else { // No decimal in numeric part
+             if (numExpPos > -1) {
+                 numMant = numeric.substring(0, numExpPos);
+                 numExp = numeric.substring(numExpPos + 1);
+             } else {
+                 numMant = numeric; // No decimal, no exponent
+                 numExp = null;
+             }
+        }
+        boolean allZeros = isAllZeros(numMant) && isAllZeros(numExp);
+
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                // Long/BigInteger format requires no decimal point and no exponent in the numeric part.
+                if (numDecPos == -1 && numExpPos == -1) {
+                    // Validate the numeric part as a standard integer (optional sign, digits)
+                    boolean isPotentialInt = numeric.length() > 0;
+                    if (isPotentialInt) {
+                        char firstChar = numeric.charAt(0);
+                        if (firstChar == '-') {
+                            isPotentialInt = numeric.length() > 1 && StringUtils.isDigits(numeric.substring(1));
+                        } else if (firstChar == '+') { // Allow leading '+'
+                            isPotentialInt = numeric.length() > 1 && StringUtils.isDigits(numeric.substring(1));
+                        } else {
+                            isPotentialInt = StringUtils.isDigits(numeric);
+                        }
+                    }
+
+                    if (isPotentialInt) {
                         try {
+                            // Assume createLong handles optional '+' sign if needed.
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                            // Fall through to BigInteger if Long overflows or format invalid for Long but ok for BigInt
                         }
-                        return createBigInteger(numeric);
-
+                        // Assume createBigInteger handles optional '+' sign if needed.
+                        return createBigInteger(numeric); // Let it throw NFE if format is truly invalid
                     }
+                }
+                // If format constraints (no dec/exp, valid integer) are not met
                 throw new NumberFormatException(str + " is not a valid number.");
+
             case 'f':
             case 'F':
                 try {
                     Float f = NumberUtils.createFloat(numeric);
+                    // Check for infinity or zero representations losing precision
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
                 } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                    // ignore NFE, try Double
                 }
                 // Fall through
             case 'd':
             case 'D':
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    // Corrected check: use d.doubleValue()
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                     // ignore NFE, try BigDecimal
                 }
                 try {
+                    // If Float/Double were not suitable, try BigDecimal for precision.
                     return createBigDecimal(numeric);
                 } catch (NumberFormatException e) {
-                        // ignore the bad number
+                    // If BigDecimal also fails, the number format is invalid for F/D type.
+                    throw new NumberFormatException(str + " is not a valid number.");
                 }
-                    //Fall through
+
             default:
+                // Last character is a letter but not a valid type qualifier (L, F, D) or e/E.
                 throw new NumberFormatException(str + " is not a valid number.");
-
         }
     } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+        // Last char is not a letter (likely a digit, or caught by earlier checks if invalid like '.')
+        // Treat as number without type qualifier. Use the original string 'str' for parsing.
+
+        // Extract mantissa and exponent from the full string for the allZeros check
+        if (decPos > -1) {
+            if (expPos > -1) {
+                mant = str.substring(0, expPos); // Mantissa includes decimal
+                exp = str.substring(expPos + 1);
             } else {
+                mant = str; // Mantissa includes decimal
                 exp = null;
             }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+        } else { // No decimal
+            if (expPos > -1) {
+                mant = str.substring(0, expPos);
+                exp = str.substring(expPos + 1);
+            } else {
+                mant = str; // No decimal, no exponent
+                exp = null;
+            }
+        }
+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+        // Determine type based on presence of decimal or exponent in the original string 'str'
+        if (decPos == -1 && expPos == -1) {
+            // No decimal, no exponent -> Must be Integer, Long, or BigInteger
+
+            // Pre-validate format before attempting parsing
+             boolean isPotentialInt = str.length() > 0;
+             if (isPotentialInt) {
+                 char firstChar = str.charAt(0);
+                 if (firstChar == '-') {
+                     isPotentialInt = str.length() > 1 && StringUtils.isDigits(str.substring(1));
+                 } else if (firstChar == '+') {
+                     isPotentialInt = str.length() > 1 && StringUtils.isDigits(str.substring(1));
+                 } else {
+                     isPotentialInt = StringUtils.isDigits(str);
+                 }
+             }
+             if (!isPotentialInt) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+             }
+
+            // Try parsing in increasing order of size
             try {
                 return createInteger(str);
             } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                // ignore and try next larger type
             }
             try {
                 return createLong(str);
             } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                // ignore and try next larger type
             }
-                return createBigInteger(str);
+            return createBigInteger(str); // Let it throw NFE if invalid
 
         } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Has decimal or exponent -> Must be Float, Double, or BigDecimal
+            // Try parsing in increasing order of precision/range
             try {
                 Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                // ignore and try next larger type
             }
             try {
                 Double d = createDouble(str);
+                // Corrected check: use d.doubleValue()
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                // ignore and try next larger type
+            }
+            return createBigDecimal(str); // Let it throw NFE if invalid
+        }
+    }
 }
 
-                return createBigDecimal(str);
+// Dummy helper methods assumed to exist in the actual context (e.g., in NumberUtils class)
+// These would need proper implementation.
+private static Integer createInteger(String str) { /* actual implementation needed */ return Integer.decode(str); }
+private static Long createLong(String str) { /* actual implementation needed */ return Long.decode(str); }
+private static BigInteger createBigInteger(String str) { /* actual implementation needed */
+    if (str.startsWith("0x") || str.startsWith("-0x")) {
+        int index = str.startsWith("-") ? 3 : 2;
+        return new BigInteger(str.substring(index), 16); // Basic hex handling
+    }
+    return new BigInteger(str);
+}
+private static Float createFloat(String str) { /* actual implementation needed */ return Float.valueOf(str); }
+private static Double createDouble(String str) { /* actual implementation needed */ return Double.valueOf(str); }
+private static BigDecimal createBigDecimal(String str) { /* actual implementation needed */ return new BigDecimal(str); }
+
+// Assume StringUtils.isBlank and StringUtils.isDigits are available and correct.
 
+// Helper method to check if a string represents zero conceptually for float/double precision checks.
+// This needs to align with the original intent. A simple check for non-'0' digits might suffice.
+private static boolean isAllZeros(String str) {
+    if (str == null) {
+        return true; // Treat null as effectively zero for this check
+    }
+    for (int i = 0; i < str.length(); i++) {
+        char c = str.charAt(i);
+        // Check for any digit 1-9
+        if (c >= '1' && c <= '9') {
+            return false;
         }
     }
+    // Contains only '0', signs, decimal points, 'e', 'E', etc.
+    return true;
 }
\ No newline at end of file
