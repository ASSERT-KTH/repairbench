diff --git a/tmp/195bc1c3-4796-420d-8f20-3d4857d5f88b_buggy.java b/tmp/98622f5f-be67-4614-8332-c8ee9f8ff607_fixed.java
index 91dc4ff..03f4282 100644
--- a/tmp/195bc1c3-4796-420d-8f20-3d4857d5f88b_buggy.java
+++ b/tmp/98622f5f-be67-4614-8332-c8ee9f8ff607_fixed.java
@@ -1,107 +1,100 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        final Character quoteChar = getQuoteCharacter(); // Use Character wrapper type
+        final QuoteMode quoteModePolicy = getQuoteMode() == null ? QuoteMode.MINIMAL : getQuoteMode();
 
-        QuoteMode quoteModePolicy = getQuoteMode();
-        if (quoteModePolicy == null) {
-            quoteModePolicy = QuoteMode.MINIMAL;
+        // Check policy and conditions that preclude quoting or require escaping instead
+        if (quoteChar == null || quoteModePolicy == QuoteMode.NONE) {
+            printAndEscape(value, offset, len, out);
+            return;
         }
+
+        final char qChar = quoteChar.charValue(); // Safe to call now because quoteChar is not null
+
         switch (quoteModePolicy) {
         case ALL:
+        case ALL_NON_NULL: // ALL_NON_NULL requires quoting for non-null values. The null check is typically done before calling this.
             quote = true;
             break;
         case NON_NUMERIC:
-            quote = !(object instanceof Number);
+            // Quote if the object is null or not an instance of Number.
+            quote = object == null || !(object instanceof Number);
             break;
-        case NONE:
-            // Use the existing escaping code
-            printAndEscape(value, offset, len, out);
-            return;
         case MINIMAL:
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+                // Always quote an empty token that is the first on the line, as it may be the only thing on the
+                // line. If it were not quoted in that case, an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                char firstChar = value.charAt(start);
+                char lastChar = value.charAt(end - 1);
+                final Character commentStart = getCommentMarker();
 
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                // Rule: Quote if starts/ends with SP, starts with comment marker (if defined),
+                // or contains delimiter, quote char, or newline (LF/CR).
+                // SP = Space (ASCII 32)
+                if (firstChar <= SP || lastChar <= SP || (commentStart != null && firstChar == commentStart.charValue())) {
                     quote = true;
                 } else {
+                    // Scan the entire string for inner characters that require quoting
+                    pos = start; // Reset position for full scan
                     while (pos < end) {
-                        c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                        final char c = value.charAt(pos);
+                        if (c == LF || c == CR || c == qChar || c == delimChar) {
                             quote = true;
                             break;
                         }
                         pos++;
                     }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
-                            quote = true;
-                        }
-                    }
                 }
             }
 
             if (!quote) {
-                // no encapsulation needed - write out the original value
+                // No quoting needed for MINIMAL policy based on content
                 out.append(value, start, end);
                 return;
             }
+            // If quote is true, fall through to the quoting logic below
             break;
+        // case NONE: // Already handled at the beginning by checking quoteModePolicy == QuoteMode.NONE
+        //     printAndEscape(value, offset, len, out);
+        //     return;
         default:
-            throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
+            // Handles any potentially unexpected QuoteMode values.
+            throw new IllegalStateException("Unexpected QuoteMode: " + quoteModePolicy);
         }
 
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
-        }
+        // --- Apply quoting ---
+        // If we reached here, 'quote' is true based on policy (ALL, NON_NUMERIC) or content (MINIMAL)
+        out.append(qChar);
 
-        // we hit something that needed encapsulation
-        out.append(quoteChar);
+        // Reset start/pos for iterating through the value to handle embedded quotes
+        start = offset;
+        pos = offset;
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
         while (pos < end) {
             final char c = value.charAt(pos);
-            if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+            // Need to double inner quote characters
+            if (c == qChar) {
+                // Write segment ending at the quote char, including the quote char itself
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+                // Set start to current pos, so the quote char is effectively written twice
+                // (once above, and again as the start of the next segment or by the final append)
                 start = pos;
             }
             pos++;
         }
 
-        // write the last segment
-        out.append(value, start, pos);
-        out.append(quoteChar);
+        // Write the last segment (from the last quote char encountered, or from the beginning if no quotes were found)
+        out.append(value, start, pos); // pos is equal to 'end' here
+        out.append(qChar); // Append the closing quote char
     }
\ No newline at end of file
