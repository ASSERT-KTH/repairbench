diff --git a/tmp/637be3f9-830c-4992-a703-9e713e7863d0_buggy.java b/tmp/80e02149-167d-4b7b-b29a-9c523ce7184b_fixed.java
index 91dc4ff..ec72fd8 100644
--- a/tmp/637be3f9-830c-4992-a703-9e713e7863d0_buggy.java
+++ b/tmp/80e02149-167d-4b7b-b29a-9c523ce7184b_fixed.java
@@ -1,107 +1,120 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        // Use local variable for performance (perhaps)
+        final Character quoteCharIfSet = getQuoteCharacter();
+        // Try to avoid NullPointerException
+        final char quoteChar = quoteCharIfSet != null ? quoteCharIfSet.charValue() : Constants.UNDEFINED;
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
         switch (quoteModePolicy) {
         case ALL:
+        case ALL_NON_NULL: // Currently handled the same as ALL
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
             // Use the existing escaping code
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
                 // always quote an empty token that is the first
                 // on the line, as it may be the only thing on the
                 // line. If it were not quoted in that case,
                 // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                char c = value.charAt(pos); // pos equals offset initially
 
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                // Check if the first char requires quoting
+                // We are being conservative by including the default comment char too.
+                if (c <= COMMENT) {
                     quote = true;
                 } else {
+                    // Check for internal characters that require quoting
                     while (pos < end) {
                         c = value.charAt(pos);
+                        // Check for standard quoting triggers
+                        // Note: We must check quoteChar even if null because we might be printing an empty value
+                        //       or a value with only special characters like LF, CR, or delimiter.
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                             quote = true;
                             break;
                         }
                         pos++;
                     }
 
+                    // Check if the last char requires quoting
                     if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
+                        // If the loop finished without finding a quoting trigger, check the last character.
+                        // Note: pos will be 'end' if the loop completed. Need end - 1.
+                        c = value.charAt(end - 1);
+                        // Some edge cases involving spaces at the end require quoting.
                         if (c <= SP) {
                             quote = true;
                         }
                     }
                 }
             }
 
             if (!quote) {
                 // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
+        // If quote is not true, we should have returned earlier in MINIMAL or NONE modes.
+        // For ALL or NON_NUMERIC, quote might be true here.
+        // This check handles the case where MINIMAL decided not to quote but didn't return. (Redundant Check removed for clarity)
+        // if (!quote) {
+        //     out.append(value, start, end);
+        //     return;
+        // }
+
+        // If we get here, we need to quote the value.
+        // Throw exception if quote character is not set, as we need it for quoting.
+        if (quoteCharIfSet == null) {
+             throw new IllegalStateException("No quote char configured");
         }
 
         // we hit something that needed encapsulation
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // Reset position for scanning the value to apply quoting rules (e.g., doubling quote chars)
+        // 'start' already holds the initial offset correctly.
+        pos = offset; // Start scanning from the beginning of the relevant substring
+
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+                // write out the chunk up until this point which includes the quote char
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+                // update starting position to point to the quote char, effectively doubling it when the loop continues or ends
+                // This logic correctly handles doubling the quote character.
                 start = pos;
             }
             pos++;
         }
 
         // write the last segment
-        out.append(value, start, pos);
-        out.append(quoteChar);
+        out.append(value, start, pos); // pos is now 'end'
+        out.append(quoteChar); // append the closing quote character
     }
\ No newline at end of file
