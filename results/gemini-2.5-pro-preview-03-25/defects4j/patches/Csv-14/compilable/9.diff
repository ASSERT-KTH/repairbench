diff --git a/tmp/9b063bcb-3cf2-4790-84c3-3d22190fa3f5_buggy.java b/tmp/c8a425a9-0ea0-4247-8397-6039dbd57019_fixed.java
index 91dc4ff..cc0a201 100644
--- a/tmp/9b063bcb-3cf2-4790-84c3-3d22190fa3f5_buggy.java
+++ b/tmp/c8a425a9-0ea0-4247-8397-6039dbd57019_fixed.java
@@ -1,107 +1,120 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
-        int start = offset;
-        int pos = offset;
+        final int start = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        final Character quoteCharOpt = getQuoteCharacter();
+        // quoteChar value is only used later if quote is true
+
+        // Define constants locally if not available as class members/imports
+        final char LF = '\n';
+        final char CR = '\r';
+        final char SP = ' ';
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
+
         switch (quoteModePolicy) {
         case ALL:
+            if (quoteCharOpt == null) {
+                 throw new IllegalStateException("Cannot use QuoteMode.ALL with no quote character configured.");
+            }
             quote = true;
             break;
         case NON_NUMERIC:
+             if (quoteCharOpt == null) {
+                 throw new IllegalStateException("Cannot use QuoteMode.NON_NUMERIC with no quote character configured.");
+            }
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
-            printAndEscape(value, offset, len, out);
+            // If quote mode is NONE, just append the value.
+            // Escaping (if an escape char is configured) should be handled by CSVPrinter calling printAndEscape,
+            // not this method. If this method is called with NONE, it implies no escape char, so raw output is correct.
+            out.append(value, start, end);
             return;
         case MINIMAL:
+            if (quoteCharOpt == null) {
+                 // If no quote char, MINIMAL behaves like NONE
+                 out.append(value, start, end);
+                 return;
+            }
+            // Only fetch quoteChar if MINIMAL mode might use it
+            final char quoteChar = quoteCharOpt.charValue();
+
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+                // Quote empty field if it's the first on a new record
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
-
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                char firstChar = value.charAt(start);
+                // Rule: Quote if starts or ends with SP or control characters (<= SP)
+                // Rule: Quote if contains CR, LF, delimiter, or the quote character itself.
+                if (firstChar <= SP) {
                     quote = true;
                 } else {
+                    // Search for internal triggers (CR, LF, Delimiter, Quote Char)
+                    // Use a local variable 'pos' for the search loop.
+                    int pos = start;
                     while (pos < end) {
-                        c = value.charAt(pos);
+                        final char c = value.charAt(pos);
+                        // Check for standard triggers for quoting
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                             quote = true;
-                            break;
+                            break; // Found a trigger char
                         }
                         pos++;
                     }
 
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
+                    if (!quote) { // If no internal trigger, check the trailing character
+                        final char lastChar = value.charAt(end - 1);
+                        if (lastChar <= SP) { // Quote if ends with space or control char (<= SP)
                             quote = true;
                         }
                     }
                 }
             }
+            // MINIMAL decision logic ends, 'quote' is set.
+            break; // Break from MINIMAL case
 
-            if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
-                return;
-            }
-            break;
         default:
-            throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
-        }
+            throw new IllegalStateException("Unexpected QuoteMode value: " + quoteModePolicy);
+        } // End of switch
+
+        // ---- Write the output ----
 
         if (!quote) {
-            // no encapsulation needed - write out the original value
+            // No quoting needed
             out.append(value, start, end);
-            return;
-        }
-
-        // we hit something that needed encapsulation
+        } else {
+            // Quoting is needed. We know quoteCharOpt is not null here for modes ALL, NON_NUMERIC, MINIMAL.
+            final char quoteChar = quoteCharOpt.charValue();
             out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
-            final char c = value.charAt(pos);
+            // Iterate through the value[start..end-1], doubling internal quote characters.
+            int segmentStart = start;
+            for (int i = start; i < end; i++) { // Use local loop variable 'i'
+                final char c = value.charAt(i);
                 if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
+                    // Append segment before the quote char
+                    out.append(value, segmentStart, i);
+                    // Append the quote char twice
+                    out.append(quoteChar);
+                    out.append(quoteChar);
+                    // Update start of the next segment to be after the processed quote char
+                    segmentStart = i + 1;
                 }
-            pos++;
             }
 
-        // write the last segment
-        out.append(value, start, pos);
-        out.append(quoteChar);
+            // Write the final segment (from last special char/start to the end)
+            out.append(value, segmentStart, end);
+
+            out.append(quoteChar); // Append closing quote
+        }
     }
\ No newline at end of file
