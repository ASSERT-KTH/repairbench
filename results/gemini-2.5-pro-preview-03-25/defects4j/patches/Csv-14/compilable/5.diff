diff --git a/tmp/70b09249-3906-4f35-96ca-7f6f2f0ea271_buggy.java b/tmp/9cb5dc6b-e039-4a04-b92b-aee58b5f66b9_fixed.java
index 91dc4ff..c477346 100644
--- a/tmp/70b09249-3906-4f35-96ca-7f6f2f0ea271_buggy.java
+++ b/tmp/9cb5dc6b-e039-4a04-b92b-aee58b5f66b9_fixed.java
@@ -1,107 +1,128 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
+        // Use a separate variable for the scanning position in MINIMAL mode
+        // to avoid interfering with the 'start' variable used for output segments.
         int pos = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        final Character quoteCharOpt = getQuoteCharacter(); // Fetch once
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
+
         switch (quoteModePolicy) {
         case ALL:
+            if (quoteCharOpt == null) { throw new IllegalStateException("No quote character defined for QuoteMode.ALL"); }
             quote = true;
             break;
         case NON_NUMERIC:
+            if (quoteCharOpt == null) { throw new IllegalStateException("No quote character defined for QuoteMode.NON_NUMERIC"); }
+            // Check object nullity? Original code didn't, assumes non-null?
+            // Or rely on !(null instanceof Number) == true? Let's keep original behaviour.
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
+            // Use the existing escaping code (which should handle null escape char)
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
+            if (quoteCharOpt == null) { throw new IllegalStateException("No quote character defined for QuoteMode.MINIMAL"); }
+            final char quoteChar = quoteCharOpt.charValue(); // Safe to get char value now
+
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+                // Always quote an empty token that is the first on the line
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                char c = value.charAt(pos); // pos is still offset here
 
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                // FIX 1: Removed overly aggressive quoting of fields starting with non-alphanumeric
+                //        when newRecord is true. Minimal quoting should only quote when necessary
+                //        due to delimiters, quotes, line breaks, etc.
+                // Original check was:
+                // if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+                //     quote = true;
+                // } else
+
+                // Check if the first character necessitates quoting (conservative check for control chars/comment)
+                if (c <= COMMENT) { // Includes default comment char '#' and chars below it
                     quote = true;
                 } else {
-                    while (pos < end) {
-                        c = value.charAt(pos);
+                    // Scan the rest of the value for chars that require quoting
+                    int scanPos = pos; // Use a separate variable for scanning position
+                    while (scanPos < end) {
+                        c = value.charAt(scanPos);
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                             quote = true;
-                            break;
+                            break; // Found a character needing quoting
                         }
-                        pos++;
+                        scanPos++;
                     }
 
                     if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
+                        // Check if the last character necessitates quoting (leading/trailing space handling)
+                        c = value.charAt(end - 1);
+                        if (c <= SP) { // Includes space and chars below it
                             quote = true;
+                            // If quote becomes true here, the common quoting logic below will handle it.
+                            // Fix 2 (resetting pos/start below) ensures the entire field is scanned
+                            // for internal quote chars that need doubling.
                         }
                     }
                 }
             }
 
             if (!quote) {
-                // no encapsulation needed - write out the original value
+                // No quoting deemed necessary for MINIMAL mode, write raw value
                 out.append(value, start, end);
                 return;
             }
+            // If quote is true, break from switch and fall through to the common quoting logic
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
-        }
+        // --- Common Quoting Logic ---
+        // If we reach here, quote=true was determined by the policy (ALL, NON_NUMERIC, or MINIMAL).
+        // quoteCharOpt must be non-null based on checks above.
+        final char quoteChar = quoteCharOpt.charValue();
 
-        // we hit something that needed encapsulation
+        // Append the opening quote character
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // FIX 2: Reset start and pos to the beginning of the segment before scanning for
+        // internal quote characters that need to be doubled. This ensures the entire
+        // value is processed correctly, regardless of why quoting was triggered.
+        start = offset;
+        pos = offset;
         while (pos < end) {
             final char c = value.charAt(pos);
+            // Check for the quote character
             if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+                // Append the segment leading up to *and including* the quote character
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+                // Set the start for the next segment to the position *of* the quote character.
+                // This ensures that when the loop continues and eventually the final segment
+                // is appended, the quote character is included again, effectively doubling it.
                 start = pos;
             }
+            // NOTE: This block does not handle the escape character. In Commons CSV,
+            // escaping is typically handled by printAndEscape when QuoteMode is NONE.
+            // When quoting is active, only quote doubling is performed as per RFC4180.
             pos++;
         }
 
-        // write the last segment
-        out.append(value, start, pos);
+        // Append the final segment of the value (from the last special char encountered, or the beginning)
+        out.append(value, start, pos); // pos is equal to 'end' here
+
+        // Append the closing quote character
         out.append(quoteChar);
     }
\ No newline at end of file
