diff --git a/tmp/1dd30da0-d719-4459-bc5b-3b6236146522_buggy.java b/tmp/bbf4d3b7-bbda-4600-a8d5-715b5ce2c4f2_fixed.java
index 91dc4ff..2a279c3 100644
--- a/tmp/1dd30da0-d719-4459-bc5b-3b6236146522_buggy.java
+++ b/tmp/bbf4d3b7-bbda-4600-a8d5-715b5ce2c4f2_fixed.java
@@ -1,107 +1,128 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
-        int pos = offset;
+        int pos = offset; // pos used for scanning checks in MINIMAL mode
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        final Character quoteCharObject = getQuoteCharacter(); // Keep as Character object to check for null
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
+
+        // Check if quoting is disabled or not configured
+        if (quoteCharObject == null || quoteModePolicy == QuoteMode.NONE) {
+            // If quote char is null or mode is NONE, disable quoting logic, rely on escaping
+            printAndEscape(value, offset, len, out);
+            return;
+        }
+
+        // We have a valid quoteChar and a mode other than NONE.
+        final char quoteChar = quoteCharObject.charValue();
+
         switch (quoteModePolicy) {
         case ALL:
             quote = true;
             break;
         case NON_NUMERIC:
+            // Quote if the object is not a Number.
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
+            // This case is handled by the check above, but included for completeness.
+            // Should not be reached if quoteCharObject is not null.
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+                // Quote empty fields on new records to distinguish from empty lines.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                char firstChar = value.charAt(start);
 
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                // Rule 1: Quote if first char is the quote char or delimiter
+                // Checking CR/LF here is redundant due to the loop below.
+                if (firstChar == quoteChar || firstChar == delimChar) {
                     quote = true;
                 } else {
+                    // Rule 2: Scan the whole string for quote, delimiter, CR, LF
+                    // Reset pos ensures scan starts from the beginning for this check.
+                    pos = start;
                     while (pos < end) {
-                        c = value.charAt(pos);
+                        final char c = value.charAt(pos);
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                             quote = true;
-                            break;
+                            break; // Found a character requiring quoting
                         }
                         pos++;
                     }
 
+                    // Rule 3: Heuristic: Quote if ends with whitespace (original code check: char <= SP)
+                    // This check is applied only if the loop didn't already decide to quote.
                     if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
+                        // Using charAt(end - 1) is safe due to len > 0 check above
+                        if (value.charAt(end - 1) <= SP) {
                             quote = true;
                         }
+                        // Note: Removed the original code's check for leading chars <= COMMENT
+                        // Note: Removed the original code's check for non-alphanumeric first char on newRecord
                     }
                 }
             }
 
+            // If MINIMAL decided not to quote, print directly and return
             if (!quote) {
-                // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
-            break;
+            // Otherwise, MINIMAL decided quoting is needed, break to common quoting logic
+            break; // Break from MINIMAL case
+
         default:
-            throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
+            // Should not happen if QuoteMode is an enum
+            throw new IllegalStateException("Unexpected QuoteMode: " + quoteModePolicy);
         }
 
+        // If we reach here, quoting *might* be required.
+        // It's required for ALL, or if MINIMAL decided to quote,
+        // or if NON_NUMERIC decided to quote.
+        // Check if quoting is actually needed before proceeding.
         if (!quote) {
-            // no encapsulation needed - write out the original value
+            // This path is reachable for NON_NUMERIC mode when the object is a Number.
+            // It was also reachable in original code if MINIMAL decided not to quote,
+            // but that case now returns early.
             out.append(value, start, end);
             return;
         }
 
-        // we hit something that needed encapsulation
+
+        // --- Common Quoting Logic ---
+        // We determined quoting is needed (quote == true)
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // Scan the value again to write segments and double quotes
+        // Reset scanning variables 'start' and 'pos' for the writing loop
+        start = offset; // Start writing from the beginning
+        pos = offset;   // Scan from the beginning
+
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
+                // write out the chunk up until this point (exclusive end), plus the quote char itself
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
+                // Set start for the next segment to be this quote char (effectively doubling it)
                 start = pos;
             }
             pos++;
         }
 
-        // write the last segment
-        out.append(value, start, pos);
+        // write the last segment (from last detected quote char or beginning, up to the end)
+        out.append(value, start, pos); // pos is now equal to 'end'
         out.append(quoteChar);
     }
\ No newline at end of file
