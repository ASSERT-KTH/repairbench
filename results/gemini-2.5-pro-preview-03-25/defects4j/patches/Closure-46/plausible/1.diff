diff --git a/tmp/d1de0ebc-7275-4b52-aef7-2243e7292754_buggy.java b/tmp/4755899b-2ee5-4435-be5e-5953ee0c3dbf_fixed.java
index 46817a7..ab822db 100644
--- a/tmp/d1de0ebc-7275-4b52-aef7-2243e7292754_buggy.java
+++ b/tmp/4755899b-2ee5-4435-be5e-5953ee0c3dbf_fixed.java
@@ -1,16 +1,14 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
+    // Record types form a lattice structure based on properties.
+    // The least supertype of two record types is generally their union,
+    // unless one is a subtype of the other.
+    // The base JSType#getLeastSupertype correctly handles subtype checks
+    // and defaults to creating a union type. The previous logic attempted
+    // to find a structural supertype based on common properties, which
+    // was incorrect according to the test expectations (it calculated
+    // something closer to the greatest common subtype/intersection).
+    // Therefore, we delegate to the superclass implementation which handles
+    // unions correctly.
     return super.getLeastSupertype(that);
   }
\ No newline at end of file
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
