diff --git a/tmp/56b761ae-84c8-4afd-8fb6-39d622fcf37f_buggy.java b/tmp/ff49a8d8-6a3d-43ab-bdc5-d2d394207ce6_fixed.java
index 46817a7..9212da5 100644
--- a/tmp/56b761ae-84c8-4afd-8fb6-39d622fcf37f_buggy.java
+++ b/tmp/ff49a8d8-6a3d-43ab-bdc5-d2d394207ce6_fixed.java
@@ -1,16 +1,11 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
+    // The superclass implementation handles subtype relationships
+    // (returning the supertype record if one is a subtype of the other)
+    // and correctly creates a union type when necessary for other cases.
+    // The previous logic attempting to build a common record supertype
+    // by intersecting properties with equivalent types was incorrect for
+    // the general case, as demonstrated by the failing tests which expect
+    // a UnionType.
     return super.getLeastSupertype(that);
   }
\ No newline at end of file
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
