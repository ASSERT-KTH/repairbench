diff --git a/tmp/c70844db-676c-4135-ab6f-84d51a1bfba7_buggy.java b/tmp/f196c468-9a6c-49a3-92fc-6e9043db0437_fixed.java
index 46817a7..c16b131 100644
--- a/tmp/c70844db-676c-4135-ab6f-84d51a1bfba7_buggy.java
+++ b/tmp/f196c468-9a6c-49a3-92fc-6e9043db0437_fixed.java
@@ -1,16 +1,13 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
+    // The previous logic computed a record type based on the intersection
+    // of properties with equivalent types. This is incorrect for the
+    // least supertype operation. For example, LUB({a:number}, {b:string})
+    // should not be {}. The tests expect a Union Type in cases where
+    // neither record type is a subtype of the other.
+    // Delegating to the superclass's implementation handles standard LUB
+    // rules (like subtype returning the supertype, etc.) and likely
+    // creates a UnionType when appropriate, matching the test expectations.
+    // It also handles the case where 'that' is not a RecordType correctly.
     return super.getLeastSupertype(that);
   }
\ No newline at end of file
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
