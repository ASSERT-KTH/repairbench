diff --git a/tmp/f1bba441-dd90-46ae-9a1b-3291482fcd0d_buggy.java b/tmp/2b7ec076-4567-48f9-8b2d-5f5e73d4ba85_fixed.java
index 46817a7..4462250 100644
--- a/tmp/f1bba441-dd90-46ae-9a1b-3291482fcd0d_buggy.java
+++ b/tmp/2b7ec076-4567-48f9-8b2d-5f5e73d4ba85_fixed.java
@@ -1,16 +1,18 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
+    // If 'that' isn't a record type, delegate to the generic ObjectType implementation.
+    // This handles cases like LUB(Record, number) or LUB(Record, Object).
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
+
+    // Both 'this' and 'that' are record types.
+    // The least common supertype of two record types, in the absence of structural
+    // subtyping relationships that would simplify the result (e.g., if A <: B, LUB(A,B) = B),
+    // is generally represented by their union.
+    // The UnionType logic itself should handle simplification if one record type
+    // happens to be a subtype of the other.
+    // The previous implementation attempted to find common properties, which is
+    // closer to computing the greatest common subtype (intersection).
+    return registry.createUnionType(this, that);
   }
\ No newline at end of file
