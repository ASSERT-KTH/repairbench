diff --git a/tmp/67826255-4041-461b-b5df-2cac8af72cde_buggy.java b/tmp/65b87bdd-7966-4590-9505-5701c830cae3_fixed.java
index 46817a7..3e5878a 100644
--- a/tmp/67826255-4041-461b-b5df-2cac8af72cde_buggy.java
+++ b/tmp/65b87bdd-7966-4590-9505-5701c830cae3_fixed.java
@@ -1,16 +1,17 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
+    // If 'that' isn't a record type, delegate to the standard JSType logic.
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
+
+    // Both 'this' and 'that' are RecordTypes.
+    // The superclass's getLeastSupertype implementation handles equivalence
+    // and subtype relationships. If none of those apply, it should default
+    // to creating a union type for the least common supertype.
+    // The previous logic here incorrectly computed a record type based on
+    // common properties with identical types, which is not the standard LUB.
+    // Delegating to the superclass ensures the correct behavior, including
+    // creating a UnionType when appropriate, as expected by the failing tests.
+    return super.getLeastSupertype(that);
   }
\ No newline at end of file
