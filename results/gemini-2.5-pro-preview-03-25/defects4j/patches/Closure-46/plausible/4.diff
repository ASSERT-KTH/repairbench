diff --git a/tmp/eacd7db0-28a7-4abe-8b60-527b3124001d_buggy.java b/tmp/48c4834b-0633-4d94-a129-dc0614ddb8e3_fixed.java
index 46817a7..631b616 100644
--- a/tmp/eacd7db0-28a7-4abe-8b60-527b3124001d_buggy.java
+++ b/tmp/48c4834b-0633-4d94-a129-dc0614ddb8e3_fixed.java
@@ -1,16 +1,9 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
+    // The previous implementation attempted to find common properties,
+    // which is incorrect for the least supertype (it's closer to a greatest subtype).
+    // The least supertype of two distinct record types (or any two unrelated types)
+    // is typically their union. Delegating to the superclass's implementation
+    // should handle this correctly, likely by creating a UnionType.
     return super.getLeastSupertype(that);
   }
\ No newline at end of file
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
