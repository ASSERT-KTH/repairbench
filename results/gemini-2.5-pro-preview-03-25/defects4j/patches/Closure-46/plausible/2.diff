diff --git a/tmp/dd08e185-9560-45db-ae02-d52a7c94a8e3_buggy.java b/tmp/3a91fbb6-c0ce-4418-9e04-3a0a0c7e56db_fixed.java
index 46817a7..32bc60b 100644
--- a/tmp/dd08e185-9560-45db-ae02-d52a7c94a8e3_buggy.java
+++ b/tmp/3a91fbb6-c0ce-4418-9e04-3a0a0c7e56db_fixed.java
@@ -1,16 +1,43 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
+    // If 'that' isn't a RecordType, fall back to the general ObjectType/JSType logic.
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
+
+    RecordType thatRecord = that.toMaybeRecordType();
+
+    // The least supertype is only guaranteed to be a RecordType if both 'this'
+    // and 'thatRecord' have the exact same set of defined property names.
+    // Note: This assumes structural typing where extra properties don't prevent
+    // LUB from being a record if the common core properties match exactly by name.
+    // However, standard LUB for records often results in a Union unless one is
+    // a subtype of the other OR they have identical property sets.
+    if (this.properties.keySet().equals(thatRecord.properties.keySet())) {
+      RecordTypeBuilder builder = new RecordTypeBuilder(this.registry);
+
+      for (String property : this.properties.keySet()) {
+        // Property must exist in thatRecord due to the keySet equality check.
+        JSType thisPropType = this.getPropertyType(property);
+        JSType thatPropType = thatRecord.getPropertyType(property);
+
+        // Calculate the LUB of the individual property types.
+        JSType lubPropType = thisPropType.getLeastSupertype(thatPropType);
+
+        // Add the property with the computed LUB type to the builder.
+        // Use the property node from 'this' as a representative node.
+        builder.addProperty(property, lubPropType, this.getPropertyNode(property));
       }
+       // If we successfully processed all properties with identical names,
+       // build and return the resulting record type.
       return builder.build();
+
+    } else {
+      // If the property sets differ, the least supertype cannot generally be represented
+      // by a single record type that precisely captures both structures (unless one
+      // is a subtype of the other, which should be handled by the caller or superclass).
+      // Fall back to the general LUB mechanism (likely creating a UnionType or handled
+      // by ObjectType's LUB logic).
+      return super.getLeastSupertype(that);
+    }
   }
\ No newline at end of file
