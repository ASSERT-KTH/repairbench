diff --git a/tmp/ce72e44b-2fbe-4332-ad2b-db1d893f72ec_buggy.java b/tmp/ca9df36d-f3f7-4991-87f8-4421fcf28c82_fixed.java
index 6b160ef..c9de436 100644
--- a/tmp/ce72e44b-2fbe-4332-ad2b-db1d893f72ec_buggy.java
+++ b/tmp/ca9df36d-f3f7-4991-87f8-4421fcf28c82_fixed.java
@@ -1,68 +1,99 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
-            int signatureLength = in.read(signature);
+            int signatureLength = readFully(in, signature); // Use readFully to ensure buffer is filled if possible
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+            signatureLength = readFully(in, dumpsig); // Use readFully
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+            signatureLength = readFully(in, tarheader); // Use readFully
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
-            // COMPRESS-117 - improve auto-recognition
+            // COMPRESS-117/-171 - improve auto-recognition, fallback check
+            // Try to read first block as a tar archive entry, requires mark support
+            if (signatureLength >= 512) { // Only run secondary check if we read the full header
+                TarArchiveInputStream tais = null;
                 try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
+                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                    // COMPRESS-171: TAR needs at least one entry
+                    if (tais.getNextTarEntry() != null) {
+                        // Looks like a TAR archive, return the stream for the real input
                         return new TarArchiveInputStream(in);
+                    }
+                    // else: No entry found, not identified as TAR
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well as IOException
                     // autodetection, simply not a TAR
                     // ignored
+                } finally {
+                    if (tais != null) {
+                         try {
+                             tais.close(); // Close the temporary stream
+                         } catch (IOException ignored) { // NOPMD NOSONAR
+                             // Ignore exception closing the BytArrayInputStream
+                         }
+                    }
+                }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
+
+    // Helper method to read buffer fully (similar to IOUtils.readFully but local)
+    // Returns the number of bytes read
+    private int readFully(InputStream in, byte[] buffer) throws IOException {
+        int totalRead = 0;
+        int bytesRead;
+        while (totalRead < buffer.length) {
+            bytesRead = in.read(buffer, totalRead, buffer.length - totalRead);
+            if (bytesRead == -1) { // EOF
+                break;
+            }
+            totalRead += bytesRead;
+        }
+        return totalRead;
+    }
\ No newline at end of file
