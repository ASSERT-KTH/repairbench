diff --git a/tmp/00d3f221-2475-487f-831f-c72eb762d474_buggy.java b/tmp/aa8b36a6-cbb6-4501-a75e-21276183f374_fixed.java
index 6b160ef..8cd70ad 100644
--- a/tmp/00d3f221-2475-487f-831f-c72eb762d474_buggy.java
+++ b/tmp/aa8b36a6-cbb6-4501-a75e-21276183f374_fixed.java
@@ -1,68 +1,89 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
-        in.mark(signature.length);
+        // Mark for the maximum bytes needed for detection (512 for TAR)
+        // Allows resetting after reading different amounts.
+        in.mark(512);
         try {
+            // Read first 12 bytes
+            // Use in.read(), which might read less than 12 bytes if stream is short or EOF is near.
             int signatureLength = in.read(signature);
-            in.reset();
+            in.reset(); // Reset stream to the position marked
+
+            // Check formats needing <= 12 bytes
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
-            // Dump needs a bigger buffer to check the signature;
+            // Check Dump (needs 32 bytes)
+            // Need to read up to 32 bytes for Dump detection
             final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
+            // No need to mark again; original mark(512) is sufficient
+            signatureLength = in.read(dumpsig); // Reads up to 32 bytes
+            in.reset(); // Reset stream to the position marked
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
+            // Check Tar (needs 512 bytes)
+            // Need to read up to 512 bytes for Tar detection
             final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
+            // No need to mark again
+            signatureLength = in.read(tarheader); // Reads up to 512 bytes
+            in.reset(); // Reset stream to the position marked
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
-            // COMPRESS-117 - improve auto-recognition
+
+            // The try-catch block below attempted to handle cases where TarArchiveInputStream.matches
+            // might fail but the stream could potentially still be parsed. However, this led to
+            // false positives, such as identifying short text files as TAR archives (COMPRESS-171).
+            // Relying solely on the TarArchiveInputStream.matches check is safer for auto-detection.
+            /*
+            // COMPRESS-117 - improve auto-recognition - REMOVED due to COMPRESS-171
             try {
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                // The check for getNextEntry was too lenient and caused issues
                 tais.getNextEntry();
+                // If getNextEntry didn't throw, it was assumed to be TAR.
                 return new TarArchiveInputStream(in);
             } catch (Exception e) { // NOPMD
                 // can generate IllegalArgumentException as well as IOException
                 // autodetection, simply not a TAR
                 // ignored
             }
+            */
+
+            // Add checks for other stream types here if needed (e.g. 7z)
+
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
+        // If no archive format matched the signature
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
