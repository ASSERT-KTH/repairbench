diff --git a/tmp/5ecdd1fd-5060-4451-9842-09924f74ba8e_buggy.java b/tmp/ffa5d364-df2a-4857-abc2-c7366993b556_fixed.java
index 6b160ef..3cca971 100644
--- a/tmp/5ecdd1fd-5060-4451-9842-09924f74ba8e_buggy.java
+++ b/tmp/ffa5d364-df2a-4857-abc2-c7366993b556_fixed.java
@@ -1,68 +1,81 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
             signatureLength = in.read(tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
-            // COMPRESS-117 - improve auto-recognition
+
+            // COMPRESS-117 / COMPRESS-171:
+            // The following code (trying to parse the read header) was removed
+            // because it caused files like plain text files to be detected as TAR
+            // archives if their first 512 bytes happened to pass the TarArchiveInputStream
+            // constructor and getNextEntry() checks. Relying solely on the matches()
+            // method is safer for auto-detection.
+            /*
             try {
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
+                // COMPRESS-191 - verify the header identifies an ArchiveEntry
+                if (tais.getNextEntry() != null) {
+                    // Put the bytes back.
+                    //in.reset(); // reset has already been called
+                    return new TarArchiveInputStream(in); // Read from the start of the stream
+                }
             } catch (Exception e) { // NOPMD
                 // can generate IllegalArgumentException as well as IOException
                 // autodetection, simply not a TAR
                 // ignored
             }
+            */
+
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
