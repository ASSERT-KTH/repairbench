diff --git a/tmp/2599556b-bc26-4cf1-8ef5-d205f06e070e_buggy.java b/tmp/512a5289-d355-4b49-899c-e07f12e75c7f_fixed.java
index 6b160ef..a09e22d 100644
--- a/tmp/2599556b-bc26-4cf1-8ef5-d205f06e070e_buggy.java
+++ b/tmp/512a5289-d355-4b49-899c-e07f12e75c7f_fixed.java
@@ -1,68 +1,116 @@
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+// NOTE: The following imports are assumed based on the original code context.
+// They might need adjustment based on the actual project structure.
+import org.apache.commons.compress.archivers.ArchiveException;
+import org.apache.commons.compress.archivers.ArchiveInputStream;
+import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
+import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
+import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
+import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
+import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
+
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
+     * @throws ArchiveException if the archiver name is not known or an error occurs reading the stream
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
+        int signatureLength = -1;
         try {
-            int signatureLength = in.read(signature);
+            signatureLength = in.read(signature);
             in.reset();
+
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+            int dumpSigLength = in.read(dumpsig);
             in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+            if (DumpArchiveInputStream.matches(dumpsig, dumpSigLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
+            // Tar needs an even bigger buffer (512 bytes); read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+            int tarHeaderLength = in.read(tarheader);
             in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+
+            // First check using the standard TarArchiveInputStream.matches method
+            if (TarArchiveInputStream.matches(tarheader, tarHeaderLength)) {
                 return new TarArchiveInputStream(in);
             }
-            // COMPRESS-117 - improve auto-recognition
+
+            // COMPRESS-117 fallback: If TarArchiveInputStream.matches failed,
+            // try to parse the header to see if it's a TAR format that
+            // TarArchiveInputStream can handle anyway (e.g., with variations).
+            // Only attempt if we read enough bytes for a TAR header.
+            // A valid TAR header is 512 bytes.
+            if (tarHeaderLength >= 512) {
+                 TarArchiveInputStream tais = null;
                  try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
+                     // Use a temporary input stream based on the header bytes read
+                     tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader, 0, tarHeaderLength));
+                     // Try to read the first entry. If it succeeds and returns a non-null entry,
+                     // then it's likely a TAR archive we can process.
+                     // This differentiates from the previous logic which only checked for absence of Exception.
+                     if (tais.getNextEntry() != null) {
+                         // It seems to be a TAR archive based on parsing, return a new stream for the original input
                          return new TarArchiveInputStream(in);
+                     }
+                     // If getNextEntry() returned null, it implies an empty archive or an invalid header
+                     // that wasn't detected as an exception. Since matches() failed, we treat it as non-TAR.
                  } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
+                     // Catch IOException, IllegalArgumentException, etc. These indicate parsing failure.
+                     // If parsing fails, it's not a TAR according to this fallback check.
+                     // Ignore the exception and proceed to the final failure case.
+                 } finally {
+                     // Ensure the temporary stream used for checking is closed.
+                     if (tais != null) {
+                         try {
+                             tais.close();
+                         } catch (IOException ignored) { // NOPMD
+                             // Exception on closing the temporary stream can be ignored.
                          }
+                     }
+                 }
+            }
+            // If we reach here, none of the checks identified the stream as a known archive type.
+
         } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
+            // This exception implies an issue with the input stream itself (e.g., mark/reset error, read error).
+            throw new ArchiveException("Could not use reset and mark operations, or read failed.", e);
         }
 
+        // If stream is not null and supports mark, but no archive format matched.
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
