diff --git a/tmp/7c2d98d1-e16d-4e08-9037-d3a1d51fdc0a_buggy.java b/tmp/41b15327-ac26-4ec8-9dd2-9844412228c3_fixed.java
index 86553f4..6a03c0b 100644
--- a/tmp/7c2d98d1-e16d-4e08-9037-d3a1d51fdc0a_buggy.java
+++ b/tmp/41b15327-ac26-4ec8-9dd2-9844412228c3_fixed.java
@@ -1,57 +1,75 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
+  @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
+      // Don't traverse functions that are known to have a non-global "this".
+
+      // 1. Check JSDoc annotations (@constructor, @interface, @override, @this)
+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
+           jsDoc.isInterface() || // Added: check for @interface
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
+      // 2. Check for methods assigned to prototypes, object literals, or classes.
+      if (parent != null) {
+          // Functions assigned to prototype properties (e.g., Foo.prototype.bar = function() {})
+          // Handles GETPROP (a.b) and GETELEM (a['b']).
+          if (parent.getType() == Token.ASSIGN) {
+              if (n == parent.getLastChild() && // function is the RHS
+                  NodeUtil.isPrototypePropertyDeclaration(parent)) {
+                  return false;
+              }
+          } else if (parent.getType() == Token.EXPR_RESULT) {
+              // Handle assignments like (Foo.prototype.bar = function() {})
+              Node exprChild = parent.getFirstChild();
+              if (exprChild.getType() == Token.ASSIGN &&
+                  n == exprChild.getLastChild() && // function is the RHS of assign
+                  NodeUtil.isPrototypePropertyDeclaration(exprChild)) {
+                  return false;
+              }
+          }
+          // Functions defined in object literals (e.g., { bar: function() {} })
+          else if (parent.getType() == Token.OBJECTLIT && n.getParent().isStringKey()) {
+              return false;
+          }
+          // Functions defined in ES6 classes (e.g., class C { bar() {} })
+          else if (NodeUtil.isMethodDeclaration(n)) {
+              return false;
+          }
+      }
+
+      // 3. Heuristic: Limit traversal to functions where 'this' is likely global.
+      // Allow traversal only for function declarations (in SCRIPT or BLOCK)
+      // or functions assigned directly to simple names (var f = function; f = function;).
+      // Avoid traversing functions in other contexts (like callbacks, complex assignments)
+      // where 'this' is often non-global or the context is ambiguous for this check.
+      if (parent != null) {
         int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+        if (!(pType == Token.BLOCK || // function f() {}
+              pType == Token.SCRIPT || // function f() {} (top level)
+              (pType == Token.NAME && parent.getParent() != null && // var f = function() {}
+               parent.getParent().getType() == Token.VAR) ||
+              (pType == Token.ASSIGN && parent.getFirstChild().isName() && // f = function() {}
+               n == parent.getLastChild()))) {
+            // If the function is not in one of these simple global-likely contexts,
+            // and wasn't explicitly identified as a non-global method above,
+            // default to not traversing to avoid false positives.
             return false;
         }
-    }
-
-    if (parent != null && parent.getType() == Token.ASSIGN) {
-      Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
-      
-      if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
-        if (assignLhsChild == null) {
-          assignLhsChild = lhs;
-        }
       } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
-          }
+         // No parent implies the root SCRIPT node itself, not a function. Fall through.
       }
     }
 
+    // Allow traversal for non-function nodes, or functions determined to be
+    // potentially in a global context by the checks above.
     return true;
   }
\ No newline at end of file
