diff --git a/tmp/6e63f72a-cee4-43e9-b0bd-1d24531cc612_buggy.java b/tmp/8809c1e3-b592-4bc5-9c54-67b1c7b82b50_fixed.java
index 86553f4..4aed6ec 100644
--- a/tmp/6e63f72a-cee4-43e9-b0bd-1d24531cc612_buggy.java
+++ b/tmp/8809c1e3-b592-4bc5-9c54-67b1c7b82b50_fixed.java
@@ -1,57 +1,95 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
+  @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
+      // Don't traverse functions that are constructors, interfaces or have the @this
+      // or @override annotation. These define their own 'this' context.
+      // Use NodeUtil.getBestJSDocInfo which handles functions, assignments, var declarations.
+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
+           jsDoc.isInterface() || // FIX: Added check for @interface
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
+      // Don't traverse functions unless they are defined in contexts where 'this'
+      // might be global or needs checking (top level script, block, simple assignments).
+      if (parent != null) {
           int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+          // Only traverse functions that are declarations or potentially global assignments.
+          if (!(pType == Token.BLOCK || // function foo() { ... } in a block
+                pType == Token.SCRIPT || // function foo() { ... } at top level
+                pType == Token.NAME || // var foo = function() { ... }
+                pType == Token.ASSIGN)) { // foo.bar = function() { ... } (need further check below)
+              // Skip functions in object literals, class methods, IIFEs (parent EXPR_RESULT), etc.
+              // 'this' is usually well-defined or not global in these cases.
               return false;
           }
       }
+      // Note: If parent is null, n must be the SCRIPT node, which isn't a FUNCTION.
+    }
 
+    // Handle assignments: Specifically avoid traversing functions assigned to prototypes.
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
-      if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      if (n == rhs) {
+        // We are traversing the right hand side (RHS) of an assignment.
+        // Check if the LHS indicates assignment to a prototype or its members.
+        // If so, don't traverse the function on the RHS, as 'this' is likely
+        // intended to refer to an instance, not the global object.
+        boolean isPrototypeAssign = false;
+        Node curr = lhs;
+        if (curr.getType() == Token.GETPROP) {
+            // Case: LHS is obj.prop1.prop2...
+            // Check if it ends in ".prototype" (e.g., Class.prototype = {...})
+            if (curr.getLastChild().getString().equals("prototype")) {
+                isPrototypeAssign = true;
+            } else {
+                // Check if ".prototype." exists in the qualified name
+                // (e.g., Class.prototype.method = function() {})
+                String qualifiedName = curr.getQualifiedName();
+                if (qualifiedName != null && qualifiedName.contains(".prototype.")) {
+                    isPrototypeAssign = true;
+                }
+            }
+        } else if (curr.getType() == Token.GETELEM) {
+            // Case: LHS is obj['prop'] or obj.prop1['prop2']
+            // FIX: Added check for GETELEM, e.g., Class.prototype['method'] = function() {}
+            Node target = curr.getFirstChild(); // The object part of GETELEM
+            // Check if target is Class.prototype
+            if (target.getType() == Token.GETPROP &&
+                target.getLastChild().getString().equals("prototype")) {
+                isPrototypeAssign = true; // e.g., Class.prototype['method'] = function() {}
+            } else {
+                // Check if target is Class.prototype.Y
+                // e.g., Class.prototype.prop['method'] = function() {}
+                String qualifiedName = target.getQualifiedName();
+                if (qualifiedName != null && qualifiedName.contains(".prototype.")) {
+                    isPrototypeAssign = true;
+                }
+            }
+        }
+
+        if (isPrototypeAssign) {
+          // Don't traverse into functions assigned to prototype properties.
+          return false;
+        }
+      } else if (n == lhs) {
+        // Handle the LHS of assignment (potentially for nested assignments like (a=this).foo=...)
+        // Keep original logic for handling 'this' potentially used on LHS.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
-          }
       }
     }
 
-    return true;
+    return true; // Traverse otherwise
   }
\ No newline at end of file
