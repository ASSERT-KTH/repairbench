diff --git a/tmp/26e5b8ff-5607-41c0-b427-fcf725daf655_buggy.java b/tmp/253e8b2c-a457-4e45-9d67-2f87eb03b317_fixed.java
index a7549f0..77b33af 100644
--- a/tmp/26e5b8ff-5607-41c0-b427-fcf725daf655_buggy.java
+++ b/tmp/253e8b2c-a457-4e45-9d67-2f87eb03b317_fixed.java
@@ -1,50 +1,73 @@
     /**
      * Sets the values of Options using the values in <code>properties</code>.
      *
      * @param properties The value properties to be processed.
      */
     protected void processProperties(Properties properties)
     {
         if (properties == null)
         {
             return;
         }
 
-        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
+        // Use generics for Enumeration
+        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)
         {
             String option = e.nextElement().toString();
 
+            // only process options that have not already been processed
             if (!cmd.hasOption(option))
             {
                 Option opt = getOptions().getOption(option);
 
+                // unknown option property-> ignore
+                if (opt == null)
+                {
+                    continue;
+                }
+
                 // get the value from the properties instance
                 String value = properties.getProperty(option);
 
-                if (opt.hasArg())
+                if (opt.hasArg()) // Option expects an argument
                 {
+                    // If the option already has a value, do not override it
                     if (opt.getValues() == null || opt.getValues().length == 0)
                     {
                         try
                         {
+                            // process value like it would be on the command line
                             opt.addValueForProcessing(value);
                         }
                         catch (RuntimeException exp)
                         {
                             // if we cannot add the value don't worry about it
+                            // an OptionValidator could be used to deal with this
                         }
                     }
+                    // Add the option to the command line
+                    cmd.addOption(opt);
                 }
-                else if (!("yes".equalsIgnoreCase(value)
+                // Flag option (--flag) vs (-f value)
+                // If the value is specified for a flag option, check if it indicates true
+                else // Option is a flag (no argument expected)
+                {
+                    if (!("yes".equalsIgnoreCase(value)
                             || "true".equalsIgnoreCase(value)
                             || "1".equalsIgnoreCase(value)))
                     {
-                    // if the value is not yes, true or 1 then don't add the
-                    // option to the CommandLine
-                    break;
+                        // The value is not a "true" value, so ignore the option
+                        // Previously, this had a 'break' which incorrectly stopped all property processing.
+                        // Now we 'continue' to the next property.
+                        continue;
                     }
-
+                    // The value is a "true" value, so add the option.
                     cmd.addOption(opt);
                 }
+
+                // We need to add the option to the command line, but this was
+                // moved inside the if/else blocks above to handle flags correctly.
+                // cmd.addOption(opt); <-- Removed from here
+            }
         }
     }
\ No newline at end of file
