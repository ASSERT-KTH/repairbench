diff --git a/tmp/7924addc-f023-4e69-a39f-dca8bd706f2a_buggy.java b/tmp/390193f3-52ba-471b-a3ac-5a1dfa362add_fixed.java
index a7549f0..6d814eb 100644
--- a/tmp/7924addc-f023-4e69-a39f-dca8bd706f2a_buggy.java
+++ b/tmp/390193f3-52ba-471b-a3ac-5a1dfa362add_fixed.java
@@ -1,50 +1,75 @@
     /**
      * Sets the values of Options using the values in <code>properties</code>.
      *
      * @param properties The value properties to be processed.
      */
     protected void processProperties(Properties properties)
     {
         if (properties == null)
         {
             return;
         }
 
-        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
+        // Use generics for Enumeration
+        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)
         {
             String option = e.nextElement().toString();
 
+            // ensures that options specified on the command line are not overridden
             if (!cmd.hasOption(option))
             {
+                // Get the Option mapped to the property name
                 Option opt = getOptions().getOption(option);
 
+                // Check if the option exists before processing
+                if (opt == null) {
+                    // Property name does not correspond to a known option, ignore it.
+                    continue;
+                }
+
                 // get the value from the properties instance
                 String value = properties.getProperty(option);
 
                 if (opt.hasArg())
                 {
+                    // Ensure option is not multi-valued or already has a value
                     if (opt.getValues() == null || opt.getValues().length == 0)
                     {
                         try
                         {
+                            // Attempt to add the value
                             opt.addValueForProcessing(value);
                         }
                         catch (RuntimeException exp)
                         {
                             // if we cannot add the value don't worry about it
+                            // Log this potentially? System.err.println("Failed to add value "+value+" for option "+option);
+                            // Original code implicitly continued to add the option below.
                         }
                     }
+                    // If opt has values already, the original code did nothing here,
+                    // but still added the option below.
                 }
-                else if (!("yes".equalsIgnoreCase(value)
+                else // Option is a flag (no argument)
+                {
+                    // Check if the value indicates the flag should NOT be set
+                    if (!("yes".equalsIgnoreCase(value)
                             || "true".equalsIgnoreCase(value)
                             || "1".equalsIgnoreCase(value)))
                     {
-                    // if the value is not yes, true or 1 then don't add the
-                    // option to the CommandLine
-                    break;
+                        // The flag value is not interpreted as 'true'.
+                        // Skip adding this option and proceed to the next property.
+                        // The original code used 'break', exiting the loop prematurely.
+                        continue; // <-- FIX: Replaced break with continue
+                    }
+                    // Otherwise (value is 'yes', 'true', '1'), continue execution to add the option.
                 }
 
+                // Add the option to the command line.
+                // This happens if:
+                // - opt has an argument (regardless of value addition success/failure, as per original code)
+                // - opt is a flag and its value is 'yes', 'true', or '1'
                 cmd.addOption(opt);
             }
         }
     }
\ No newline at end of file
