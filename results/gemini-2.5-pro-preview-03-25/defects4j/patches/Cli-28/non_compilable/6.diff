diff --git a/tmp/b6971005-5b53-4bdc-a09e-0a66a2ef5c1f_buggy.java b/tmp/2219d474-1e96-4dee-91b0-c558846856e6_fixed.java
index a7549f0..3ef844b 100644
--- a/tmp/b6971005-5b53-4bdc-a09e-0a66a2ef5c1f_buggy.java
+++ b/tmp/2219d474-1e96-4dee-91b0-c558846856e6_fixed.java
@@ -1,50 +1,68 @@
     /**
      * Sets the values of Options using the values in <code>properties</code>.
      *
      * @param properties The value properties to be processed.
      */
     protected void processProperties(Properties properties)
     {
         if (properties == null)
         {
             return;
         }
 
-        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
+        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)
         {
             String option = e.nextElement().toString();
 
+            // process options not already processed by the command line
             if (!cmd.hasOption(option))
             {
                 Option opt = getOptions().getOption(option);
 
                 // get the value from the properties instance
                 String value = properties.getProperty(option);
 
                 if (opt.hasArg())
                 {
                     if (opt.getValues() == null || opt.getValues().length == 0)
                     {
                         try
                         {
                             opt.addValueForProcessing(value);
                         }
                         catch (RuntimeException exp)
                         {
                             // if we cannot add the value don't worry about it
                         }
                     }
+                    // add the option to the command line
+                    cmd.addOption(opt);                    
                 }
                 else if (!("yes".equalsIgnoreCase(value)
                         || "true".equalsIgnoreCase(value)
                         || "1".equalsIgnoreCase(value)))
                 {
                     // if the value is not yes, true or 1 then don't add the
-                    // option to the CommandLine
-                    break;
+                    // option to the CommandLine - skip this property
+                    continue; // Fix: Use continue instead of break to process next property
                 }
-
+                else
+                {
+                    // Corresponding property is true, so add the option
                     cmd.addOption(opt);
                 }
+
+                // LWG: If we just added an option, we need to update the parent
+                // Not sure what the intention of the original code was, but the addOption
+                // was outside the else if block, potentially adding options whose values
+                // indicated they shouldn't be added. Moved cmd.addOption(opt) inside the
+                // relevant blocks (for options with args, and for flags with true values).
+                // Also, need to ensure options defined in properties are added to the cmd.
+                // The original code structure added the option outside the 'if (opt.hasArg())'
+                // block, but after the 'else if' check. This means it added the option
+                // even if the flag check failed, *unless* the flag check caused a 'break'.
+                // The correct logic is to only add the option if it has an arg, or if it's
+                // a flag and its value is considered "true".
+            }
         }
     }
\ No newline at end of file
