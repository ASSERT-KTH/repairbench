diff --git a/tmp/38f5b85d-ce28-430c-a94a-b25fc3ff7887_buggy.java b/tmp/6fe1d905-d5f3-4e95-a4ad-db9bf3efb761_fixed.java
index a7549f0..eb07f95 100644
--- a/tmp/38f5b85d-ce28-430c-a94a-b25fc3ff7887_buggy.java
+++ b/tmp/6fe1d905-d5f3-4e95-a4ad-db9bf3efb761_fixed.java
@@ -1,50 +1,74 @@
     /**
      * Sets the values of Options using the values in <code>properties</code>.
      *
      * @param properties The value properties to be processed.
      */
     protected void processProperties(Properties properties)
     {
         if (properties == null)
         {
             return;
         }
 
-        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
+        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)
         {
             String option = e.nextElement().toString();
 
+            // process properties that are not already set
             if (!cmd.hasOption(option))
             {
                 Option opt = getOptions().getOption(option);
 
+                // DCL requires that options property names refer to valid options
+                if (opt == null) {
+                    // Option specified in properties is not valid, perhaps log a warning.
+                    // Skip this property.
+                     continue;
+                }
+
                 // get the value from the properties instance
                 String value = properties.getProperty(option);
 
                 if (opt.hasArg())
                 {
+                    // if the option accepts an argument value
                     if (opt.getValues() == null || opt.getValues().length == 0)
                     {
                         try
                         {
+                            // add the value from the properties
                             opt.addValueForProcessing(value);
                         }
                         catch (RuntimeException exp)
                         {
                             // if we cannot add the value don't worry about it
+                            // A logger could be used here.
                         }
                     }
+                    // else: The option already has a value, properties do not override.
+                    // Add the option to the command line anyway.
+                     cmd.addOption(opt);
                 }
-                else if (!("yes".equalsIgnoreCase(value)
+                else
+                {
+                    // if the option does not accept an argument value (it's a flag)
+                    // Add the option only if the value is considered "true"
+                    if ("yes".equalsIgnoreCase(value)
                             || "true".equalsIgnoreCase(value)
-                        || "1".equalsIgnoreCase(value)))
+                            || "1".equalsIgnoreCase(value))
                     {
-                    // if the value is not yes, true or 1 then don't add the
-                    // option to the CommandLine
-                    break;
-                }
-
+                         // Corresponding property is true, so add the option
                          cmd.addOption(opt);
                     }
+                    // otherwise (value is not true/yes/1), do not add the flag option.
+                    // The loop will continue to the next property.
+                }
+
+                // Ensure that the option is added to the command line if it has an arg
+                // or if it is a flag with a true value.
+                // NOTE: cmd.addOption(opt) was moved inside the if/else blocks above
+                // to correctly handle flags based on their property value.
+            }
+            // else: Option already present in cmd (likely from command line args), ignore property.
         }
     }
\ No newline at end of file
