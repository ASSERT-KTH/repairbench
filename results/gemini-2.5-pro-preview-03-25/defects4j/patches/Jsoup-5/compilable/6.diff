diff --git a/tmp/dd7b1775-59da-46b6-8a24-6aea4395e7cd_buggy.java b/tmp/c1f6c4b1-dd52-4130-b440-37703e629ae3_fixed.java
index 39dd8e7..1184bd6 100644
--- a/tmp/dd7b1775-59da-46b6-8a24-6aea4395e7cd_buggy.java
+++ b/tmp/c1f6c4b1-dd52-4130-b440-37703e629ae3_fixed.java
@@ -1,30 +1,43 @@
     private Attribute parseAttribute() {
-        tq.consumeWhitespace();
+        tq.consumeWhitespace(); // Consume any leading whitespace.
+        // Attempts to read an attribute name. Returns "" if starts with invalid char like =, >, /, etc.
         String key = tq.consumeAttributeKey();
-        String value = "";
-        tq.consumeWhitespace();
+
+        // If no valid attribute name characters were found, e.g., we encountered '=', '/', '>', '.', '!', etc.
+        if (key.length() == 0) {
+            // We are at an unexpected character. Stop parsing attributes for this tag.
+            // Return null to signal that no attribute could be parsed; let the caller handle the current char.
+            return null;
+        }
+
+        // A valid key was found.
+        String value = ""; // Default value for boolean attributes or if '=' is not present.
+        tq.consumeWhitespace(); // Consume whitespace after the key.
+
+        // Check if there is an '=' sign indicating a value assignment.
         if (tq.matchChomp("=")) {
-            tq.consumeWhitespace();
+            tq.consumeWhitespace(); // Consume whitespace after the '='.
 
-            if (tq.matchChomp(SQ)) {
-                value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
-                value = tq.chompTo(DQ);
-            } else {
+            // Determine the value based on quotes or lack thereof.
+            if (tq.matchChomp(SQ)) { // Value is single-quoted.
+                value = tq.chompTo(SQ); // Read until the closing single quote.
+            } else if (tq.matchChomp(DQ)) { // Value is double-quoted.
+                value = tq.chompTo(DQ); // Read until the closing double quote.
+            } else { // Value is unquoted.
                 StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                // Read until whitespace, certain tag end markers ('<', '>', '/'), or EOF.
+                // Need to check isEmpty first to prevent IndexOutOfBounds errors on matches methods.
+                while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny("<", "/>", ">")) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
-            tq.consumeWhitespace();
+            tq.consumeWhitespace(); // Consume whitespace potentially following the value.
         }
-        if (key.length() != 0)
+        // If no '=', we treat it as an attribute without value (value remains "").
+
+        // Create and return the parsed attribute.
+        // The check for key.length() != 0 from the original code is implicitly true here
+        // because we returned null earlier if the key length was 0.
         return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
-            return null;
-        }
     }
\ No newline at end of file
