diff --git a/tmp/12ad3fda-a872-4843-a7cb-92836623851f_buggy.java b/tmp/769aa4d0-60d5-4a66-aefd-45c6dde7e3ff_fixed.java
index 39dd8e7..4450eb3 100644
--- a/tmp/12ad3fda-a872-4843-a7cb-92836623851f_buggy.java
+++ b/tmp/769aa4d0-60d5-4a66-aefd-45c6dde7e3ff_fixed.java
@@ -1,30 +1,41 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                // Append characters until we hit a stop condition:
+                //  - End of input (isEmpty)
+                //  - Whitespace
+                //  - End of tag characters ('<', '/>', '>')
+                while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny("<", "/>", ">")) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
+            // consumeWhitespace() called after value parsing seems redundant if value loop stops at whitespace,
+            // but keeping original structure unless it causes issues. Let's assume it handles potential trailing space.
             tq.consumeWhitespace();
         }
-        if (key.length() != 0)
+        if (key.length() != 0) {
+            // Found a valid key, return the attribute
             return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
+        } else {
+            // Key is empty, indicating an invalid attribute start (e.g., "=value", ">", "/")
+            // The original code had tq.consume() here, which caused StringIndexOutOfBoundsException
+            // when the parser reached the end of the input after parsing an invalid attribute like '=a'.
+            // It also incorrectly consumed the '>' character in cases like '<p =a>'.
+            // Removing the consume() call fixes the exception and the incorrect consumption.
+            // We simply return null for an invalid attribute structure where the key is missing.
             return null;
         }
     }
\ No newline at end of file
