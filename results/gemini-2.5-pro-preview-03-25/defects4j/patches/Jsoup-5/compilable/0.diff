diff --git a/tmp/50e2a340-4907-44aa-aa74-952a7e43cabf_buggy.java b/tmp/4e404f53-de18-47d4-a526-971fa79c551f_fixed.java
index 39dd8e7..48fa749 100644
--- a/tmp/50e2a340-4907-44aa-aa74-952a7e43cabf_buggy.java
+++ b/tmp/4e404f53-de18-47d4-a526-971fa79c551f_fixed.java
@@ -1,30 +1,41 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                // Changed from `matchesAny` to `matchesAnySorted` in later jsoup versions, but logic is similar
+                // The original code uses matchesAny("<", "/>", ">") which might not be perfectly correct for HTML5 unquoted attributes
+                // but we stick to the original logic pattern here.
+                while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny("<", "/>", ">")) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
+            // ensure value eaten periods don't eat the end tag
+            // Kkeep this consommation after the value has been retrieved
             tq.consumeWhitespace(); 
         }
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
-            tq.consume();
-                
-            return null;
+            // If the key is empty (e.g., due to "=val", "/", ">"), it's not a valid attribute.
+            // The parser might have consumed the invalid chars like '=' and the value.
+            // The original code consumed one more character here, which could lead to EOF exception
+            // if the value parsing consumed the last character.
+            // We should only consume if we are not at the end of the input.
+            if (!tq.isEmpty()) {
+                tq.consume(); // Consume the character that made the key invalid, or the leftover part.
+            }
+            return null; // Return null because the attribute is invalid (empty key).
         }
     }
\ No newline at end of file
