diff --git a/tmp/3e97ebcc-fb28-4f35-8b8a-75a64154e6f7_buggy.java b/tmp/4f2f4a56-cdaa-46b1-8ea2-71baf49e575c_fixed.java
index 39dd8e7..b480c2f 100644
--- a/tmp/3e97ebcc-fb28-4f35-8b8a-75a64154e6f7_buggy.java
+++ b/tmp/4f2f4a56-cdaa-46b1-8ea2-71baf49e575c_fixed.java
@@ -1,30 +1,40 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
+        boolean eqFound = false; // Flag to track if '=' was consumed
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
+            eqFound = true; // Mark that '=' was found and consumed
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                // Original loop condition: Scan until space, <, /, > or EOF
+                while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny("<", "/>", ">")) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
         }
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
+            // Key is empty. This means consumeAttributeKey() returned empty.
+            // If we found and consumed an equals sign ('=') followed by a value (e.g., <tag =val>),
+            // we've already processed the relevant parts. Don't consume anything further.
+            // If we did *not* find an equals sign (e.g., <tag .badkey>), it means the character
+            // immediately following the tag name or previous attribute was invalid as an attribute key start.
+            // In this case, consume that single character to make progress.
+            if (!eqFound && !tq.isEmpty()) { // Only consume if '=' was NOT found and the queue is not empty
                 tq.consume();
-                
-            return null;
+            }
+            return null; // Return null as the attribute is invalid (empty key)
         }
     }
\ No newline at end of file
