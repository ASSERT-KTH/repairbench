diff --git a/tmp/66a075ea-e531-47da-969f-19b92d4d1799_buggy.java b/tmp/2e584654-3803-4824-a613-a88501218b87_fixed.java
index 39dd8e7..e0d5925 100644
--- a/tmp/66a075ea-e531-47da-969f-19b92d4d1799_buggy.java
+++ b/tmp/2e584654-3803-4824-a613-a88501218b87_fixed.java
@@ -1,30 +1,44 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
+        boolean valueParsed = false; // Flag to track if we parsed '=value' part
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
+            valueParsed = true; // Consumed '=', will attempt to read value
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                // Check !tq.isEmpty() first for robustness
+                while (!tq.isEmpty() && !tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
         }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
+        // valueParsed is true if we consumed the '=' and potentially parsed a value.
+
+        if (key.length() != 0) {
+             // Found a valid key, return the attribute
+            return Attribute.createFromEncoded(key, value); // value is "" if '=' wasn't present or value was empty
+        } else {
+            // Key is empty. This indicates junk at the attribute position (e.g., "<p =val>", "<p .....").
+            // If we didn't parse a value (i.e., no '=' was found after the position where a key was expected),
+            // it means consumeAttributeKey stopped on an invalid char (like the first '.' in "<p .....").
+            // Consume that single invalid character to make progress and allow the parser to continue.
+            // Do not consume if we already parsed a value (like in '<p =val>') as the cursor is already positioned after the value.
+            // Also, only consume if the queue is not empty.
+            if (!valueParsed && !tq.isEmpty()) {
                 tq.consume();
-                
+            }
+            // Return null to indicate no valid attribute was found here.
             return null;
         }
     }
\ No newline at end of file
