diff --git a/tmp/e5c1a249-79fb-4854-90ad-1884a7cb3b35_buggy.java b/tmp/854999b8-6c43-4d4f-8c4a-6205c9b987f4_fixed.java
index 39dd8e7..1f8e384 100644
--- a/tmp/e5c1a249-79fb-4854-90ad-1884a7cb3b35_buggy.java
+++ b/tmp/854999b8-6c43-4d4f-8c4a-6205c9b987f4_fixed.java
@@ -1,30 +1,44 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
+        boolean lookedForValue = false; // Track if we parsed a value associated with an equals sign
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
+            lookedForValue = true;
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
+                // Note: This condition is stricter than HTML5 spec allows (e.g., allows /).
+                // Maintaining original behavior for this fix.
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
-            tq.consumeWhitespace();
+            tq.consumeWhitespace(); // Consume any whitespace after the value
         }
-        if (key.length() != 0)
+        
+        if (key.length() != 0) {
+            // Ensure value is entity-decoded if necessary by using createFromEncoded
             return Attribute.createFromEncoded(key, value);
-        else {
+        } else {
+            // Key is empty. This could be due to =val, ="", ='val', or just junk chars.
+            // If we didn't look for a value (no '='), it means the character that stopped
+            // consumeAttributeKey() is still the current character. Consume it
+            // to prevent an infinite loop if it's not a relevant closing character.
+            // Do not consume if we are already at the end of the input.
+            if (!lookedForValue && !tq.isEmpty()) {
+                 // Check added to prevent StringIndexOutOfBoundsException
                 tq.consume();
-                
+            }
+            // Return null because we couldn't form a valid attribute.
             return null;
         }
     }
\ No newline at end of file
