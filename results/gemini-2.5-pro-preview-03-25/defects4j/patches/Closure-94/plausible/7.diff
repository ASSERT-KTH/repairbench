diff --git a/tmp/beb26dcc-7ef0-4636-9aa6-0fc31c7d7832_buggy.java b/tmp/4fef6517-5f5e-4222-a4c5-aef15962481f_fixed.java
index 66e3d01..2180297 100644
--- a/tmp/beb26dcc-7ef0-4636-9aa6-0fc31c7d7832_buggy.java
+++ b/tmp/4fef6517-5f5e-4222-a4c5-aef15962481f_fixed.java
@@ -1,34 +1,53 @@
   /**
    * Determines whether the given value may be assigned to a define.
+   * Defines are immutable values that are substituted later in the code.
+   * They must be primitives, or computed from primitives using unary or
+   * binary operators.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
+      // Unary operators are valid if the child is valid.
+      case Token.BITNOT:
+      case Token.NEG:
+      case Token.NOT:
+        Node firstChild = val.getFirstChild();
+        return firstChild != null && isValidDefineValue(firstChild, defines);
+
       // Binary operators are only valid if both children are valid.
+      case Token.ADD:
       case Token.BITAND:
-      case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+      // Other acceptable binary operators (assuming they are const-evaluable)
+      case Token.DIV:
+      case Token.MOD:
+      case Token.MUL:
+      case Token.SUB:
+      case Token.LSH:
+      case Token.RSH:
+      case Token.URSH:
+        Node left = val.getFirstChild();
+        Node right = val.getLastChild();
+        return left != null && right != null
+            && isValidDefineValue(left, defines)
+            && isValidDefineValue(right, defines);
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        break; // Fall through to return false
     }
     return false;
   }
\ No newline at end of file
