diff --git a/tmp/4cfd5e0a-b395-415f-959e-d91827822658_buggy.java b/tmp/0b343690-4d43-4b81-93ee-29d2833bba07_fixed.java
index 66e3d01..25ac7e2 100644
--- a/tmp/4cfd5e0a-b395-415f-959e-d91827822658_buggy.java
+++ b/tmp/0b343690-4d43-4b81-93ee-29d2833bba07_fixed.java
@@ -1,34 +1,53 @@
   /**
    * Determines whether the given value may be assigned to a define.
+   * Defines may be assigned expressions involving defines:
+   *   A) Literals: string, number, true, false
+   *   B) Defines: references to other defines
+   *   C) Unary operators: !, -, ~ applied to A), B) or C)
+   *   D) Binary operators: &, |, ^, +, applied to A), B), C) or D)
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
+      // A) Literals
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
+      // B) Defines names
       case Token.NAME:
-      case Token.GETPROP:
+      case Token.GETPROP: // object.property or object['property']
+        // For defines, it must be a qualified name that refers to a define.
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        break; // Not a valid qualified name define reference
+
+      // C) Unary operators
+      case Token.NOT: // !
+      case Token.NEG: // -
+      case Token.BITNOT: // ~
+        // Recurse on the operand.
+        Node firstChild = val.getFirstChild();
+        return firstChild != null && isValidDefineValue(firstChild, defines);
+
+      // D) Binary operators
+      case Token.BITAND: // &
+      case Token.BITOR:  // |
+      case Token.BITXOR: // ^
+      case Token.ADD:    // +
+        // Recurse on both operands.
+        Node left = val.getFirstChild();
+        Node right = val.getLastChild();
+        return left != null && right != null // Ensure both children exist
+            && isValidDefineValue(left, defines)
+            && isValidDefineValue(right, defines);
+
     }
+    // Anything else is invalid.
     return false;
   }
\ No newline at end of file
