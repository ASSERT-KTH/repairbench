diff --git a/tmp/7159ef98-2488-4be9-87ec-1f68d89d0dbe_buggy.java b/tmp/b43c4144-8984-4b7d-a5fd-5c1e336de6e4_fixed.java
index 66e3d01..4328c30 100644
--- a/tmp/7159ef98-2488-4be9-87ec-1f68d89d0dbe_buggy.java
+++ b/tmp/b43c4144-8984-4b7d-a5fd-5c1e336de6e4_fixed.java
@@ -1,34 +1,55 @@
   /**
    * Determines whether the given value may be assigned to a define.
+   * Defines may be assigned literals, names that resolve to defines, or
+   * NEG, NOT, or BITNOT operations applied to defines.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
+      // Literals are valid values.
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+      // Unary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
+      case Token.BITNOT:
         return isValidDefineValue(val.getFirstChild(), defines);
 
+      // Binary operators are valid if both children are valid.
+      case Token.BITAND:
+      case Token.BITOR:
+      case Token.BITXOR:
+      case Token.ADD:
+      case Token.SUB:
+      case Token.MUL:
+      case Token.DIV:
+      case Token.MOD:
+      case Token.LSH:
+      case Token.RSH:
+      case Token.URSH:
+        // Check if both children are valid define values recursively.
+        return isValidDefineValue(val.getFirstChild(), defines)
+            && isValidDefineValue(val.getLastChild(), defines);
+
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        // Non-qualified names are not valid, fall out of switch.
+        break;
+
+      // Other node types are invalid.
+      default:
+        return false;
     }
+    // Only reached for non-qualified NAME/GETPROP
     return false;
   }
\ No newline at end of file
