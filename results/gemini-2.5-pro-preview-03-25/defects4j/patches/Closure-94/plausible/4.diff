diff --git a/tmp/f380618e-0b3c-4d75-b098-c7c6be2af696_buggy.java b/tmp/1eaf39ec-8836-4ad1-8043-f926902ea5eb_fixed.java
index 66e3d01..df72c60 100644
--- a/tmp/f380618e-0b3c-4d75-b098-c7c6be2af696_buggy.java
+++ b/tmp/1eaf39ec-8836-4ad1-8043-f926902ea5eb_fixed.java
@@ -1,34 +1,44 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
+      // Unary operators are valid if the child is valid.
+      case Token.NOT:
+      case Token.NEG:
+      case Token.BITNOT: // BITNOT is unary
+        Node firstChild = val.getFirstChild();
+        return firstChild != null && isValidDefineValue(firstChild, defines);
+
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
-      case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+      case Token.ADD: // ADD is needed for 'a' + 'b' and 1 + 8
+        Node left = val.getFirstChild();
+        Node right = val.getLastChild();
+        // Check that both children are present before recursing
+        return left != null && right != null &&
+               isValidDefineValue(left, defines) &&
+               isValidDefineValue(right, defines);
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        // Fall through if not a qualified name - invalid.
+        break;
     }
     return false;
   }
\ No newline at end of file
