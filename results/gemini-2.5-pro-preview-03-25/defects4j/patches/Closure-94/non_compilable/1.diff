diff --git a/tmp/12e96564-89e6-4277-954c-5979cabde569_buggy.java b/tmp/387e4215-c0be-4790-8bc5-4cbcd5990eed_fixed.java
index 66e3d01..b864768 100644
--- a/tmp/12e96564-89e6-4277-954c-5979cabde569_buggy.java
+++ b/tmp/387e4215-c0be-4790-8bc5-4cbcd5990eed_fixed.java
@@ -1,34 +1,52 @@
   /**
    * Determines whether the given value may be assigned to a define.
+   * Defines are run-time constants, and thus can only contain value types
+   * and simple expressions.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
+      // Primitives are valid constants.
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+      // Unary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
+      case Token.BITNOT:
+        Preconditions.checkState(val.hasOneChild());
         return isValidDefineValue(val.getFirstChild(), defines);
 
+      // Binary operators are valid if both children are valid.
+      case Token.AND:
+      case Token.OR:
+      case Token.ADD:
+      case Token.SUB:
+      case Token.MUL:
+      case Token.DIV:
+      case Token.MOD:
+      case Token.BITAND:
+      case Token.BITOR:
+      case Token.BITXOR:
+      case Token.LSH:
+      case Token.RSH:
+      case Token.URSH:
+        Preconditions.checkState(val.hasTwoChildren());
+        return isValidDefineValue(val.getFirstChild(), defines) &&
+               isValidDefineValue(val.getLastChild(), defines);
+
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
+    // Other node types (like CALL, HOOK, FUNCTION, etc.) are invalid.
     return false;
   }
\ No newline at end of file
