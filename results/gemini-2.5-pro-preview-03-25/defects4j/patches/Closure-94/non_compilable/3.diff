diff --git a/tmp/5668c685-d35b-424f-aa70-0511b19a7550_buggy.java b/tmp/22e5e3b2-c15f-4cf0-8bc0-73942fbe11ff_fixed.java
index 66e3d01..26b9278 100644
--- a/tmp/5668c685-d35b-424f-aa70-0511b19a7550_buggy.java
+++ b/tmp/22e5e3b2-c15f-4cf0-8bc0-73942fbe11ff_fixed.java
@@ -1,34 +1,53 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
+      // Unary operators are valid if the child is valid.
+      case Token.NOT:
+      case Token.NEG:
+      case Token.BITNOT: // BITNOT is a unary operator.
+        // Make sure it has one child before recursing
+        if (val.hasOneChild()) {
+          return isValidDefineValue(val.getFirstChild(), defines);
+        }
+        // If not one child, it's invalid, fall through to return false.
+        break;
+
       // Binary operators are only valid if both children are valid.
+      case Token.ADD: // ADD needs to be supported for string concatenation.
       case Token.BITAND:
-      case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+        // Make sure it has two children before recursing
+        if (val.hasTwoChildren()) {
+           Node left = val.getFirstChild();
+           Node right = val.getLastChild();
+           // Both children must be valid define values.
+           return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);
+        }
+        // If not two children, it's invalid, fall through to return false.
+        break;
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        // If not a qualified name or not in defines, fall through to return false.
+        break;
     }
+    // Value is not a string, number, boolean, valid operator expression,
+    // or a known define name.
     return false;
   }
\ No newline at end of file
