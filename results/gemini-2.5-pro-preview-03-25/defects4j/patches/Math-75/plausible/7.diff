diff --git a/tmp/07372d01-a5ea-4f21-87e2-3742e278524d_buggy.java b/tmp/d04e6d59-6626-4bc5-b314-c849915b2d63_fixed.java
index 877a1a1..1bdfcf4 100644
--- a/tmp/07372d01-a5ea-4f21-87e2-3742e278524d_buggy.java
+++ b/tmp/d04e6d59-6626-4bc5-b314-c849915b2d63_fixed.java
@@ -1,14 +1,26 @@
     /**
       * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
      *
      * @param v the value to lookup
      * @return the proportion of values equal to v
      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
      */
     @Deprecated
     public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+        final long sumFreq = getSumFreq();
+        if (sumFreq == 0) {
+            return Double.NaN;
+        }
+        try {
+            // Cast to Comparable needed to use getCount method, which relies on Comparable keys
+            Comparable<?> comparableV = (Comparable<?>) v;
+            return (double) getCount(comparableV) / sumFreq;
+        } catch (ClassCastException e) {
+             // If v is not Comparable, it cannot be stored in the frequency table,
+             // so its count is 0.
+            return 0d;
+        }
     }
\ No newline at end of file
