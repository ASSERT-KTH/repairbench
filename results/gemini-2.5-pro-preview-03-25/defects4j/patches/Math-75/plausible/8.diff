diff --git a/tmp/7fc59a05-a3c0-4355-9eac-80e02c0c5050_buggy.java b/tmp/7ed013e4-1bc7-469a-8837-41bfbc7b720f_fixed.java
index 877a1a1..dcc179a 100644
--- a/tmp/7fc59a05-a3c0-4355-9eac-80e02c0c5050_buggy.java
+++ b/tmp/7ed013e4-1bc7-469a-8837-41bfbc7b720f_fixed.java
@@ -1,14 +1,32 @@
     /**
       * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
      *
      * @param v the value to lookup
      * @return the proportion of values equal to v
      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
      */
     @Deprecated
     public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+        final long n = getSumFreq(); // Get total frequency count
+        if (n == 0) {
+            return Double.NaN; // Handle case of no values
+        }
+        long count = 0;
+        try {
+            // Get frequency count for the specific value v.
+            // Need to cast to Comparable first as getCount likely expects Comparable keys,
+            // based on other method signatures like getPct(Comparable) and getCumPct(Comparable).
+            count = getCount((Comparable<?>) v);
+        } catch (ClassCastException e) {
+            // If v is not Comparable or cannot be compared with the existing values
+            // stored in the frequency distribution, its count is considered 0.
+            // This is consistent with how getPct(Comparable) would handle a value
+            // not present in the distribution.
+            count = 0;
+        }
+        // Calculate and return the percentage (count of v / total count)
+        return (double) count / n;
     }
\ No newline at end of file
