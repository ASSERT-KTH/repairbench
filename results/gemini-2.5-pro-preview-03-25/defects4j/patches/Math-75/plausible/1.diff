diff --git a/tmp/8fa65b1e-db87-4c0b-83b9-d0ee2e64f1ae_buggy.java b/tmp/3e265f2d-cf3f-4573-85c4-f44a12bb02af_fixed.java
index 877a1a1..5e73968 100644
--- a/tmp/8fa65b1e-db87-4c0b-83b9-d0ee2e64f1ae_buggy.java
+++ b/tmp/3e265f2d-cf3f-4573-85c4-f44a12bb02af_fixed.java
@@ -1,14 +1,24 @@
     /**
       * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
      *
      * @param v the value to lookup
      * @return the proportion of values equal to v
      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
      */
     @Deprecated
     public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+        // The non-deprecated getPct(Comparable<?>) has the correct logic.
+        // This deprecated version should delegate to it, handling potential
+        // ClassCastExceptions if 'v' is not Comparable or is incompatible
+        // with the types stored in the frequency distribution.
+        // The test case "foo pct" suggests returning 0 on such exceptions.
+        try {
+            return getPct((Comparable<?>) v);
+        } catch (ClassCastException e) {
+            // v is not Comparable or is incompatible with keys in the frequency table
+            return 0d;
+        }
     }
\ No newline at end of file
