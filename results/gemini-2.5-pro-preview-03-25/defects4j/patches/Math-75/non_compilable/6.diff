diff --git a/tmp/f7f4e641-df9c-4ecb-bd24-91852740b64a_buggy.java b/tmp/a812e7e9-109f-4f4f-9be9-67e60a94c1fa_fixed.java
index 877a1a1..0425bd2 100644
--- a/tmp/f7f4e641-df9c-4ecb-bd24-91852740b64a_buggy.java
+++ b/tmp/a812e7e9-109f-4f4f-9be9-67e60a94c1fa_fixed.java
@@ -1,14 +1,57 @@
     /**
       * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
      *
      * @param v the value to lookup
      * @return the proportion of values equal to v
      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
      */
     @Deprecated
     public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+        final long sumFreq = getSumFreq();
+        if (sumFreq == 0) {
+            return Double.NaN;
+        }
+        try {
+            // Cast to Comparable needed for getCount(Comparable) call later
+            // Maintains compatibility between this Object version and the Comparable version
+            @SuppressWarnings("unchecked") // v is verified to be Comparable below
+            Comparable<Object> comparableV = (v instanceof Comparable) ? (Comparable<Object>) v : new Comparable<Object>() {
+                /** {@inheritDoc} */
+                @Override
+                public int compareTo(Object other) {
+                    return String.valueOf(v).compareTo(String.valueOf(other));
+                }
+            };
+            // Use getCount(Comparable) to ensure consistent counting logic with other methods
+            return (double) getCount(comparableV) / (double) sumFreq;
+        } catch (ClassCastException ex) {
+            // v is not Comparable, try to convert to String and lookup count
+            // Note: This path might deviate from getPct(Comparable) behavior
+            // if v's toString() representation doesn't match how it would compare
+            // if it were Comparable. However, it preserves the behavior of
+            // looking up non-Comparable objects based on their string form,
+            // which might have been relied upon by users of this deprecated method.
+            // A cleaner approach would be to strictly require Comparable or handle
+            // the comparison based on the actual types stored in the frequency map,
+            // but this maintains closer compatibility with potential old usage.
+            return (double) getCount(v.toString()) / (double) sumFreq; // Fallback for non-Comparable
+                                                                       // Should ideally align with how counts are stored/compared
+                                                                       // This assumes counts might be keyed by String for non-Comparables
+                                                                       // or that getCount handles Object comparison appropriately.
+                                                                       // A direct call to the internal map's get might be better if accessible.
+                                                                       // Or simply rely on getCount(Object) if it exists and handles this.
+                                                                       // Let's assume getCount(Object) exists and handles the lookup correctly.
+             // Correction: Assuming getCount(Object v) exists and handles the lookup
+             // return (double) getCount(v) / (double) sumFreq;
+             // Based on the structure and the test failure, the most likely intended fix,
+             // aligning with the purpose (getting pct for *that* value, not cumulative),
+             // is to use the count of that specific value.
+             // The simplest fix reflecting this intent is:
+             // return (double) getCount(v) / (double) sumFreq;
+             // Let's use this direct approach.
+             return (double) getCount(v) / (double) sumFreq;
+        }
     }
\ No newline at end of file
