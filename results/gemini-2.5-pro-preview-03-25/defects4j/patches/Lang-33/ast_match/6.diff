diff --git a/tmp/55f61ff1-5b55-4821-846e-2d5bd16e90ad_buggy.java b/tmp/ef27ccfe-1a9e-4306-a56c-3c95bf2bf0ec_fixed.java
index dd6dcb5..d08f45f 100644
--- a/tmp/55f61ff1-5b55-4821-846e-2d5bd16e90ad_buggy.java
+++ b/tmp/ef27ccfe-1a9e-4306-a56c-3c95bf2bf0ec_fixed.java
@@ -1,22 +1,27 @@
     /**
      * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.
      * If any of these objects is null, a null element will be inserted into the array.</p>
      *
      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
      *
      * @param array an <code>Object</code> array
      * @return a <code>Class</code> array, <code>null</code> if null array input
      * @since 2.4
      */
     public static Class<?>[] toClass(Object[] array) {
         if (array == null) {
             return null;
         } else if (array.length == 0) {
-            return ArrayUtils.EMPTY_CLASS_ARRAY;
+            // The code used ArrayUtils.EMPTY_CLASS_ARRAY which is likely a constant for new Class<?>[0];
+            // Assuming ArrayUtils is available and EMPTY_CLASS_ARRAY is defined appropriately.
+            // If not, replace with `new Class<?>[0];`
+            // return new Class<?>[0]; // Alternative if ArrayUtils is not available
+             return org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY; // Keep original dependency if intended
         }
         Class<?>[] classes = new Class[array.length];
         for (int i = 0; i < array.length; i++) {
-            classes[i] = array[i].getClass();
+            // Check for null element before calling getClass()
+            classes[i] = array[i] == null ? null : array[i].getClass();
         }
         return classes;
     }
\ No newline at end of file
