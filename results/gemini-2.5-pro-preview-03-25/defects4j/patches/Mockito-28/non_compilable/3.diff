diff --git a/tmp/13086e04-2465-445b-9d53-f312e59c703a_buggy.java b/tmp/b417a17d-1942-4db8-aa73-cfc05abdfafd_fixed.java
index fa6828a..cd5ac76 100644
--- a/tmp/13086e04-2465-445b-9d53-f312e59c703a_buggy.java
+++ b/tmp/b417a17d-1942-4db8-aa73-cfc05abdfafd_fixed.java
@@ -1,5 +1,77 @@
+import java.lang.reflect.Field;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import org.mockito.internal.configuration.injection.filter.MockCandidateFilter;
+import org.mockito.internal.configuration.injection.filter.OngoingInjecter;
+
+// Assume MockCandidateFilter, OngoingInjecter, and orderedInstanceFieldsFrom exist and work as expected.
+// The fix involves implementing a two-pass injection strategy within injectMockCandidate.
+
+class MockInjectionFix { // Helper class to contain the method and necessary imports/assumptions
+
+    // Assume these methods/classes exist and are accessible
+    private MockCandidateFilter mockCandidateFilter;
+    private List<Field> orderedInstanceFieldsFrom(Class<?> clazz) { /* implementation assumed */ return Collections.emptyList(); }
+
+    /**
+     * Injects mock candidates into fields of the given instance. This method prioritizes injecting mocks
+     * into fields where the field type exactly matches the mock type. After attempting exact type matches,
+     * it proceeds to inject remaining mocks into remaining fields based on assignable types.
+     *
+     * @param awaitingInjectionClazz The class of the instance where fields are awaiting injection.
+     * @param mocks                  The set of mock objects available for injection.
+     * @param fieldInstance          The instance into which mocks should be injected.
+     */
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // Use a mutable copy of the mocks to track availability
+        Set<Object> availableMocks = new HashSet<>(mocks);
+        List<Field> allFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+        Set<Field> injectedFields = new HashSet<>();
+
+        // Pass 1: Inject exact type matches only.
+        for (Field field : allFields) {
+            Object exactMatchMock = null;
+            // Find an available mock whose type exactly matches the field type.
+            for (Object mock : availableMocks) {
+                if (field.getType() == mock.getClass()) {
+                    exactMatchMock = mock;
+                    break;
+                }
+            }
+
+            if (exactMatchMock != null) {
+                // Attempt injection using the filter constrained to the exact match mock.
+                // This ensures other filter logic (e.g., final field check, accessibility) is still applied.
+                OngoingInjecter injecter = mockCandidateFilter.filterCandidate(Collections.singleton(exactMatchMock), field, fieldInstance);
+                Object injected = injecter.thenInject(); // Inject the exact match if possible.
+
+                // Check if the specific exact-match mock was successfully injected.
+                if (injected == exactMatchMock) {
+                    availableMocks.remove(exactMatchMock); // Mock is used, remove from available set.
+                    injectedFields.add(field); // Mark field as successfully injected.
+                }
+                // If injection failed (e.g., final field), the mock remains available,
+                // and the field remains unprocessed for the next pass.
+            }
+        }
+
+        // Pass 2: Inject remaining mocks into remaining fields based on assignable type.
+        for (Field field : allFields) {
+            // Skip fields that were already successfully injected in Pass 1.
+            if (injectedFields.contains(field)) {
+                continue;
+            }
+
+            // Use the filter with the remaining available mocks. The filter should find the best assignable match.
+            OngoingInjecter injecter = mockCandidateFilter.filterCandidate(availableMocks, field, fieldInstance);
+            Object injected = injecter.thenInject(); // Inject the best assignable match found by the filter.
+
+            if (injected != null) {
+                availableMocks.remove(injected); // Mock is used, remove from available set.
+                injectedFields.add(field); // Mark field as successfully injected (optional for correctness here, but good practice).
+            }
+        }
     }
 }
\ No newline at end of file
