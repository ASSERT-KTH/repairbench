diff --git a/tmp/49dcee00-d4b9-4de6-bd52-8196aee1adaa_buggy.java b/tmp/00a0d411-3e51-4acf-b990-2a1aacefc077_fixed.java
index fa6828a..1dac490 100644
--- a/tmp/49dcee00-d4b9-4de6-bd52-8196aee1adaa_buggy.java
+++ b/tmp/00a0d411-3e51-4acf-b990-2a1aacefc077_fixed.java
@@ -1,5 +1,104 @@
+import java.lang.reflect.Field;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.Set;
+// Add imports for Collections, OngoingInjecter, MockCandidateFilter if necessary, based on actual package structure.
+// Assume orderedInstanceFieldsFrom, mockCandidateFilter, OngoingInjecter exist and are accessible.
+
+    /**
+     * Inject mock candidates into fields of the given instance. This method prioritizes injecting mocks
+     * into fields where the field type exactly matches the mock type (Pass 1). After attempting exact
+     * type matches, it attempts to inject remaining mocks into fields where the field type is assignable
+     * from the mock type (Pass 2), using the provided filter logic. A mock is injected at most once.
+     *
+     * @param awaitingInjectionClazz The class level where injection should happen.
+     * @param mocks The set of mock objects to be injected.
+     * @param fieldInstance The instance into which mocks should be injected.
+     */
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // Work on a mutable copy of mocks to track unused mocks.
+        Set<Object> availableMocks = new HashSet<>(mocks);
+        // Use LinkedHashSet to maintain field order potentially received from orderedInstanceFieldsFrom.
+        Set<Field> allFields = new LinkedHashSet<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+        Set<Field> injectedFields = new HashSet<>(); // Keep track of fields injected in Pass 1
+
+        // Pass 1: Inject mocks into fields with exact type match.
+        for (Field field : allFields) {
+            Object exactMatchMock = null;
+            // Find a mock whose type exactly matches the field's type.
+            for (Object mock : availableMocks) {
+                if (field.getType().equals(mock.getClass())) {
+                    exactMatchMock = mock;
+                    break;
+                }
+            }
+
+            if (exactMatchMock != null) {
+                // Directly inject the exact match mock. This bypasses filter's injection logic
+                // but ensures exact type priority and mock consumption.
+                // Consider if filter logic (e.g., annotations) needs to be checked here.
+                // Assuming simple type matching is the primary goal for exact matches.
+                try {
+                    field.setAccessible(true);
+                    field.set(fieldInstance, exactMatchMock);
+                    availableMocks.remove(exactMatchMock); // Mock is used
+                    injectedFields.add(field);            // Field is injected
+                } catch (IllegalAccessException e) {
+                    // Log or potentially throw a Mockito framework exception.
+                    // For now, if injection fails, the mock remains available.
+                }
+            }
+        }
+
+        // Pass 2: Inject remaining mocks into remaining fields (assignable types) using the filter.
+        for (Field field : allFields) {
+            // Skip fields that already received an exact match mock in Pass 1.
+            if (injectedFields.contains(field)) {
+                continue;
+            }
+
+            // Use the filter mechanism with the pool of remaining mocks.
+            // The filter might select a mock based on assignable types or other criteria.
+            OngoingInjecter injecter = mockCandidateFilter.filterCandidate(availableMocks, field, fieldInstance);
+
+            // To ensure the mock is removed from availableMocks if injected, we need to identify it.
+            // Read the field value *after* injection and check if it's one of the available mocks.
+            Object valueBefore = null;
+            Object valueAfter = null;
+            Object injectedMock = null;
+
+            try {
+                // Access needs to be ensured before reading/writing.
+                field.setAccessible(true);
+                valueBefore = field.get(fieldInstance); // Get value before injection attempt
+            } catch (IllegalAccessException e) {
+                // Ignore if cannot read valueBefore, proceed with injection attempt.
+            } catch (SecurityException e) {
+                 // Ignore if cannot make accessible.
+            }
+
+            injecter.thenInject(); // Perform injection via filter logic
+
+            try {
+                // Ensure accessible again in case thenInject changed it (unlikely but possible).
+                field.setAccessible(true);
+                valueAfter = field.get(fieldInstance); // Get value after injection attempt
+
+                // Check if the value changed to one of the mocks that were available for injection.
+                // Note: We check against 'availableMocks', assuming 'thenInject' doesn't modify the set passed to 'filterCandidate'.
+                if (valueAfter != valueBefore && availableMocks.contains(valueAfter)) {
+                    injectedMock = valueAfter;
+                }
+            } catch (IllegalAccessException e) {
+                // Cannot read field value to confirm injection and identify the mock.
+            } catch (SecurityException e) {
+                // Cannot make accessible after injection.
+            }
+
+            // If we identified the injected mock, remove it from the available set so it's not used again.
+            if (injectedMock != null) {
+                availableMocks.remove(injectedMock);
+            }
+            // Note: Field accessibility might be left enabled. Mockito might handle cleanup elsewhere.
         }
     }
