diff --git a/tmp/8576e6eb-a3bb-43df-8ad8-713b8dc910c6_buggy.java b/tmp/9654401d-fac2-4c90-bef5-e41a5cd6392e_fixed.java
index fa6828a..bd1018d 100644
--- a/tmp/8576e6eb-a3bb-43df-8ad8-713b8dc910c6_buggy.java
+++ b/tmp/9654401d-fac2-4c90-bef5-e41a5cd6392e_fixed.java
@@ -1,5 +1,62 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        // Use LinkedHashSet to preserve mock order and allow efficient removal
+        Set<Object> availableMocks = new LinkedHashSet<>(mocks);
+        Set<Field> injectedFields = new HashSet<>();
+
+        // First Pass: Inject mocks into fields with the exact same type
         for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            Object matchingMock = findExactMatchMockForField(field, availableMocks);
+
+            if (matchingMock != null) {
+                // Try injecting only the exact match mock.
+                // Pass a singleton set to filterCandidate to ensure only this mock is considered for this field.
+                // Assume thenInject() returns true upon successful injection.
+                boolean injected = mockCandidateFilter.filterCandidate(
+                                        Collections.singleton(matchingMock), field, fieldInstance)
+                                        .thenInject();
+
+                if (injected) {
+                    injectedFields.add(field);
+                    availableMocks.remove(matchingMock); // Remove successfully injected mock from available set
                 }
+                // If injection failed (e.g., final field), the mock remains available,
+                // but it's unlikely to be injected elsewhere if it was an exact match.
+            }
+        }
+
+        // Second Pass: Inject remaining mocks based on assignable types into the remaining fields
+        if (!availableMocks.isEmpty()) {
+            for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+                // Skip fields that were already injected in the first pass
+                if (!injectedFields.contains(field)) {
+                    // Pass the remaining available mocks. Let filterCandidate decide the best fit among them based on its internal logic (type, name, etc.).
+                    // We rely on filterCandidate/thenInject or the underlying injection engine
+                    // to handle the state (i.e., not injecting a mock that was already used,
+                    // even if passed again in the set). This prioritization ensures exact matches were handled first.
+                    mockCandidateFilter.filterCandidate(availableMocks, field, fieldInstance).thenInject();
+                    // We don't necessarily know which mock was injected here or if the availableMocks set
+                    // was modified by the call, but the primary goal (prioritizing exact matches) is achieved.
+                }
+            }
+        }
+    }
+
+    // Helper method to find an available mock with the exact type of the field
+    // Requires Mockito API access. Assumes 'mocks' contains Mockito mocks.
+    private Object findExactMatchMockForField(Field field, Set<Object> availableMocks) {
+        Class<?> fieldType = field.getType();
+        for (Object mock : availableMocks) {
+            // Check if it's a mock and get its mocked type
+            org.mockito.MockingDetails mockingDetails = org.mockito.Mockito.mockingDetails(mock);
+            if (!mockingDetails.isMock()) {
+                 continue; // Skip non-mocks if any are present
+            }
+            // We need the type that was originally requested to be mocked
+            Class<?> mockType = mockingDetails.getMockCreationSettings().getTypeToMock();
+
+            if (fieldType.equals(mockType)) { // Check for exact Class equality
+                return mock; // Found an available mock with the exact type
+            }
+        }
+        return null; // No exact type match found among available mocks
     }
\ No newline at end of file
