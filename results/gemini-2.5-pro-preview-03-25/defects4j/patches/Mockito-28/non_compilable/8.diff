diff --git a/tmp/4529c3a9-4d93-4fd3-8ab0-574214e1c988_buggy.java b/tmp/8e595492-b550-4acc-96b6-e1121e404fc0_fixed.java
index fa6828a..dbc6fa9 100644
--- a/tmp/4529c3a9-4d93-4fd3-8ab0-574214e1c988_buggy.java
+++ b/tmp/8e595492-b550-4acc-96b6-e1121e404fc0_fixed.java
@@ -1,5 +1,29 @@
+import java.lang.reflect.Field;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+// Other imports might be necessary depending on the context (e.g., for orderedInstanceFieldsFrom, mockCandidateFilter)
+
+// ... surrounding class definition ...
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // Assuming orderedInstanceFieldsFrom provides fields from superclasses down to the specific class.
+        // Get the fields, likely ordered from superclass to subclass.
+        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+        // Reverse the order to process fields from the specific class up towards the superclasses.
+        // This ensures that fields in subclasses (which are potentially more specific types)
+        // are considered for injection before fields in superclasses.
+        Collections.reverse(fields);
+
+        // Iterate through the fields in the reversed order (subclass first).
+        for(Field field : fields) {
+            // filterCandidate finds a suitable mock from the 'mocks' set for the given 'field'.
+            // thenInject performs the injection if a candidate is found.
+            // This process is assumed to handle mock consumption correctly (injecting a mock only once).
+            // By processing subclass fields first, we prioritize injecting mocks into the fields
+            // with the most specific matching type.
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
+
+// ... rest of the class ...
\ No newline at end of file
