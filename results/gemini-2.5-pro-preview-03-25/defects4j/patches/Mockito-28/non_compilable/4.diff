diff --git a/tmp/185792fb-59e3-46a6-8560-1ba27f92e3bd_buggy.java b/tmp/ec15d77b-41c3-4441-9540-cd040424ee22_fixed.java
index fa6828a..f76106f 100644
--- a/tmp/185792fb-59e3-46a6-8560-1ba27f92e3bd_buggy.java
+++ b/tmp/ec15d77b-41c3-4441-9540-cd040424ee22_fixed.java
@@ -1,5 +1,124 @@
+import java.lang.reflect.Field;
+import java.util.*;
+import org.mockito.Mockito;
+// Imports assumed to be available from the original context/class:
+// import org.mockito.internal.configuration.injection.MockCandidateFilter;
+// import org.mockito.internal.configuration.injection.OngoingInjecter;
+
+    /**
+     * Injects mock candidates into fields of the given instance.
+     * This implementation prioritizes exact type matches and then assignable type matches.
+     * Among assignable type matches, it prioritizes fields with more specific types.
+     * Each mock is injected at most once, into the best possible matching field.
+     * Each field receives at most one mock.
+     *
+     * @param awaitingInjectionClazz The class level where injection is considered.
+     * @param mocks The set of mock objects available for injection.
+     * @param fieldInstance The instance into which mocks should be injected.
+     */
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        // Store potential injections with quality metrics.
+        // Using Object[]: {Object mock, Field field, Integer quality (0=exact, 1=assignable)}
+        List<Object[]> potentialInjections = new ArrayList<>();
+
+        // Helper function to safely get the mocked type using public API.
+        java.util.function.Function<Object, Class<?>> getMockedType = mock -> {
+            if (mock == null) return null;
+            org.mockito.MockingDetails details = Mockito.mockingDetails(mock);
+            if (!details.isMock()) return null;
+            return details.getMockCreationSettings().getTypeToMock();
+        };
+
+        // 1. Find all potential injections and score their quality.
         for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            // Prevent injection into static fields
+            if (java.lang.reflect.Modifier.isStatic(field.getModifiers())) {
+                continue;
+            }
+            for (Object mock : mocks) {
+                Class<?> mockType = getMockedType.apply(mock);
+                // Ensure mockType is valid and field type is not primitive (mocks are objects)
+                if (mockType != null && !field.getType().isPrimitive()) {
+                    if (field.getType().equals(mockType)) {
+                        // Exact type match
+                        potentialInjections.add(new Object[]{mock, field, 0}); // Quality 0
+                    } else if (field.getType().isAssignableFrom(mockType)) {
+                        // Assignable type match (mockType is a subtype of fieldType)
+                        potentialInjections.add(new Object[]{mock, field, 1}); // Quality 1
+                    }
+                }
+            }
+        }
+
+        // 2. Sort potential injections to prioritize the best matches.
+        //    - Primary: Quality (0=Exact, 1=Assignable). Lower quality first.
+        //    - Secondary: Field type specificity. More specific types (subtypes) first.
+        //    - Tertiary: Field name (for consistent tie-breaking).
+        Collections.sort(potentialInjections, (p1, p2) -> {
+            Field field1 = (Field) p1[1];
+            int quality1 = (Integer) p1[2];
+            Field field2 = (Field) p2[1];
+            int quality2 = (Integer) p2[2];
+
+            // Compare quality (lower is better)
+            int qualityComparison = Integer.compare(quality1, quality2);
+            if (qualityComparison != 0) {
+                return qualityComparison;
+            }
+
+            // Compare field type specificity (more specific is better)
+            Class<?> type1 = field1.getType();
+            Class<?> type2 = field2.getType();
+
+            if (type1.equals(type2)) {
+                 // Same type, break tie with field name
+                 return field1.getName().compareTo(field2.getName());
+            } else if (type1.isAssignableFrom(type2)) {
+                 // type2 is subtype of type1, so type2 is more specific. It should come first.
+                 return 1; // Sort p2 before p1
+            } else if (type2.isAssignableFrom(type1)) {
+                 // type1 is subtype of type2, so type1 is more specific. It should come first.
+                 return -1; // Sort p1 before p2
+            } else {
+                 // Unrelated types, break tie with field name
+                 return field1.getName().compareTo(field2.getName());
+            }
+        });
+
+        // 3. Perform injections based on sorted potentials, ensuring each mock/field is used at most once.
+        Set<Object> injectedMocks = new HashSet<>();
+        Set<Field> injectedFields = new HashSet<>();
+
+        for (Object[] potential : potentialInjections) {
+            Object mock = potential[0];
+            Field field = (Field) potential[1];
+
+            // Inject only if both mock and field haven't been used yet.
+            if (!injectedMocks.contains(mock) && !injectedFields.contains(field)) {
+                try {
+                    // Make the field accessible before attempting injection.
+                    field.setAccessible(true);
+
+                    // Use Mockito's filter/injecter mechanism.
+                    // Pass only the single selected mock candidate.
+                    // Assumes mockCandidateFilter and OngoingInjecter are from Mockito's internal API
+                    // as implied by the original method structure.
+                    org.mockito.internal.configuration.injection.OngoingInjecter injecter =
+                        mockCandidateFilter.filterCandidate(Collections.singleton(mock), field, fieldInstance);
+
+                    // Attempt the injection.
+                    injecter.thenInject();
+
+                    // If thenInject() completes without throwing, assume success for this pair.
+                    // Mark mock and field as injected to prevent reuse.
+                    injectedMocks.add(mock);
+                    injectedFields.add(field);
+
+                } catch (Exception e) {
+                    // Injection failed for this pair (e.g., security restriction, final field, error in thenInject).
+                    // Log the error or ignore. The mock and field remain available for other potential pairings.
+                    // System.err.println("WARN: Injection failed for field " + field.getName() + ": " + e.getMessage());
+                }
+            }
         }
     }
\ No newline at end of file
