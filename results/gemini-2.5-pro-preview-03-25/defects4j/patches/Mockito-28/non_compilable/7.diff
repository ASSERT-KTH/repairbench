diff --git a/tmp/2aed4c6d-08b7-4203-ba78-4bf268eb3fb1_buggy.java b/tmp/8d1559c4-1ad6-4628-ba42-a1a9b7ed4e48_fixed.java
index fa6828a..97e1382 100644
--- a/tmp/2aed4c6d-08b7-4203-ba78-4bf268eb3fb1_buggy.java
+++ b/tmp/8d1559c4-1ad6-4628-ba42-a1a9b7ed4e48_fixed.java
@@ -1,5 +1,38 @@
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Set;
+
+// Content of the fixed injectMockCandidate method below.
+// Assume other necessary imports and helper classes/interfaces like
+// `OngoingInjecter`, `MockCandidateFilter`, and the method `orderedInstanceFieldsFrom`
+// are defined elsewhere correctly.
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // Get all instance fields based on the class hierarchy and potentially order them.
+        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+
+        // Sort the fields to prioritize injection targets.
+        // Fields where a mock with the *exact* same type exists should be considered first.
+        // This ensures that a mock is injected into the most specific field type available
+        // before potentially being injected into a field of a superclass or interface type.
+        // Use Comparator.comparingInt for clarity: 0 for highest priority (exact match), 1 for lower.
+        fields.sort(Comparator.comparingInt(field -> {
+            for (Object mock : mocks) {
+                if (field.getType().equals(mock.getClass())) {
+                    return 0; // Exact type match found, highest priority.
+                }
+            }
+            return 1; // No exact type match found, lower priority.
+        }));
+
+        // Iterate through the fields in the prioritized order.
+        // Attempt to find a suitable mock from the provided set and inject it.
+        // The underlying filterCandidate and thenInject mechanism is assumed to handle
+        // the actual injection logic, including checking if the field is already initialized
+        // and selecting an appropriate mock based on its internal criteria (like type compatibility).
+        for (Field field : fields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
\ No newline at end of file
