diff --git a/tmp/02f4968a-fef4-45f6-8e33-dfce137908df_buggy.java b/tmp/61c19b70-3169-41e7-a908-8a9ee604c6ad_fixed.java
index fa6828a..db224bb 100644
--- a/tmp/02f4968a-fef4-45f6-8e33-dfce137908df_buggy.java
+++ b/tmp/61c19b70-3169-41e7-a908-8a9ee604c6ad_fixed.java
@@ -1,5 +1,63 @@
+import java.lang.reflect.Field;
+import java.util.HashSet;
+import java.util.Set;
+// Imports added for clarity; assume necessary types like PotentialInjectee are available.
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        // Copy mocks to allow removal of injected mocks during processing
+        Set<Object> availableMocks = new HashSet<>(mocks);
+
+        // First Pass: Iterate through fields and inject mocks only if the type matches EXACTLY.
         for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            if (availableMocks.isEmpty()) {
+                break; // Optimization: No more mocks to inject.
+            }
+
+            // Find mocks from the available set that have the exact same type as the field.
+            Set<Object> exactMatchingMocks = new HashSet<>();
+            for (Object mock : availableMocks) {
+                // Using equals() for type comparison is generally safer than ==
+                if (field.getType().equals(mock.getClass())) {
+                    exactMatchingMocks.add(mock);
+                }
+            }
+
+            // If any exact type matches were found, attempt injection using only those mocks.
+            if (!exactMatchingMocks.isEmpty()) {
+                // Use the filterCandidate mechanism, but restrict it to the exact matching mocks.
+                // filterCandidate is expected to select the best candidate if multiple apply
+                // and handle checks like field modifiers (static, final) and existing values.
+                PotentialInjectee injection = mockCandidateFilter.filterCandidate(exactMatchingMocks, field, fieldInstance);
+                // thenInject performs the actual field assignment and should return the mock that was injected.
+                Object injectedMock = injection.thenInject();
+
+                if (injectedMock != null) {
+                    // If injection was successful, remove the injected mock from the available pool
+                    // to ensure it's not injected again.
+                    availableMocks.remove(injectedMock);
+                }
+            }
+        }
+
+        // Second Pass: Iterate through fields again. Inject remaining mocks into fields where the
+        // field type is assignable from the mock type (i.e., superclass or interface).
+        // This pass handles cases where no exact match was found or preferred.
+        if (!availableMocks.isEmpty()) { // Only proceed if there are still mocks left to inject.
+            for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+                if (availableMocks.isEmpty()) {
+                    break; // Optimization: No more mocks to inject.
+                }
+
+                // Attempt injection using the *remaining* available mocks.
+                // filterCandidate will check for assignability and other injection criteria.
+                // It should not inject if the field already received a mock in the first pass (assuming filter logic prevents this).
+                PotentialInjectee injection = mockCandidateFilter.filterCandidate(availableMocks, field, fieldInstance);
+                Object injectedMock = injection.thenInject();
+
+                if (injectedMock != null) {
+                    // If injection was successful, remove the injected mock from the available pool.
+                    availableMocks.remove(injectedMock);
+                }
+            }
         }
     }
\ No newline at end of file
