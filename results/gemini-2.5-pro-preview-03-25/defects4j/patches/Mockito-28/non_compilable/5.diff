diff --git a/tmp/63b46085-20f9-4ba7-89f7-ad5c890f8cad_buggy.java b/tmp/735d4e71-0e1d-4acf-8abb-af28eb1b76f8_fixed.java
index fa6828a..387cc22 100644
--- a/tmp/63b46085-20f9-4ba7-89f7-ad5c890f8cad_buggy.java
+++ b/tmp/735d4e71-0e1d-4acf-8abb-af28eb1b76f8_fixed.java
@@ -1,5 +1,55 @@
+import java.lang.reflect.Field;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+
+// Other necessary imports might be missing in this context, assume they exist.
+
+// Assume MockCandidateFilter and OngoingInjecter classes/interfaces exist and work as intended,
+// specifically that thenInject() consumes the mock from the mocks set upon successful injection.
+// Assume orderedInstanceFieldsFrom is a helper method that returns fields in a deterministic order.
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        List<Field> allFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+        List<Field> exactTypeMatchingFields = new LinkedList<>();
+        List<Field> otherFields = new LinkedList<>();
+
+        // Partition fields based on whether an exact type match exists in the initial mock set.
+        // This ensures fields with an exact type match get priority for injection.
+        for (Field field : allFields) {
+            boolean foundExactMatch = false;
+            for (Object mock : mocks) {
+                // Check if the mock instance is non-null and its class is exactly the field's type
+                if (mock != null && field.getType().equals(mock.getClass())) {
+                    foundExactMatch = true;
+                    break;
+                }
+            }
+            if (foundExactMatch) {
+                exactTypeMatchingFields.add(field);
+            } else {
+                otherFields.add(field);
+            }
+        }
+
+        // Process fields with potential exact matches first.
+        // The filterCandidate logic might further prioritize exact types, but processing these
+        // fields first guarantees they get the first opportunity to claim exact-matching mocks.
+        for (Field field : exactTypeMatchingFields) {
+            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            // If injection occurs, the mock is assumed to be removed from the 'mocks' set
+            // by the implementation of thenInject() or filterCandidate().
+        }
+
+        // Process the remaining fields. These fields will be injected using any remaining mocks
+        // based on assignable types or if the exact type mock was not used in the first pass.
+        for (Field field : otherFields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
+
+    // Assume the following methods/classes exist and are imported correctly:
+    // abstract List<Field> orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz);
+    // MockCandidateFilter mockCandidateFilter; // Assume this field exists
+    // interface MockCandidateFilter { OngoingInjecter filterCandidate(Set<Object> mocks, Field field, Object fieldInstance); }
+    // interface OngoingInjecter { void thenInject(); /* or maybe boolean/Object thenInject(); */ }
