diff --git a/tmp/f6b3f096-1e97-4b82-b1fc-0186b360a104_buggy.java b/tmp/d6414a6b-e628-4b77-bf0e-948f2b9863e0_fixed.java
index fa6828a..91db778 100644
--- a/tmp/f6b3f096-1e97-4b82-b1fc-0186b360a104_buggy.java
+++ b/tmp/d6414a6b-e628-4b77-bf0e-948f2b9863e0_fixed.java
@@ -1,5 +1,54 @@
+import java.lang.reflect.Field;
+import java.util.HashSet;
+import java.util.Set;
+import org.mockito.Mockito; // Added for mockingDetails
+import org.mockito.internal.util.reflection.FieldSetter; // Added for direct injection
+
+// Other imports remain as they were in the original file
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // Two pass strategy: prioritize exact type matching first, then assignable types.
+        Set<Object> availableMocks = new HashSet<>(mocks); // Work with a mutable copy of mocks.
+        Set<Field> candidateFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+        Set<Field> injectedFields = new HashSet<>();
+
+        // Pass 1: Process exact type matches. Find mocks that match field type exactly.
+        for (Field field : candidateFields) {
+            Object matchingMock = null;
+            for (Object mock : availableMocks) {
+                // Use Mockito.mockingDetails to get the actual mocked type.
+                // Check if the mocked type is equal to the field type.
+                if (field.getType().equals(Mockito.mockingDetails(mock).getMockedType())) {
+                    matchingMock = mock;
+                    break; // Found the first exact match for this field.
+                }
+            }
+
+            if (matchingMock != null) {
+                // An exact match was found. Inject it directly.
+                try {
+                    // Use FieldSetter to inject the mock into the field.
+                    new FieldSetter(fieldInstance, field).set(matchingMock);
+                    injectedFields.add(field);        // Mark this field as injected.
+                    availableMocks.remove(matchingMock); // Remove the mock from the available set.
+                } catch (RuntimeException e) {
+                    // If injection fails, Mockito might log or throw. Let FieldSetter handle propagation.
+                    // Or potentially add logging here if needed.
+                }
+            }
+        }
+
+        // Pass 2: Process remaining fields and mocks based on assignability.
+        // Iterate through all candidate fields again.
+        for (Field field : candidateFields) {
+            // Consider only fields that were not injected in the first pass (exact match).
+            if (!injectedFields.contains(field)) {
+                // Use the existing filter mechanism (mockCandidateFilter).
+                // Pass the remaining available mocks.
+                // filterCandidate should find an assignable mock from the 'availableMocks'.
+                // thenInject() should perform the injection and handle marking the mock as used
+                // (implicitly by removing it from availableMocks or internal tracking).
+                mockCandidateFilter.filterCandidate(availableMocks, field, fieldInstance).thenInject();
+            }
         }
     }
\ No newline at end of file
