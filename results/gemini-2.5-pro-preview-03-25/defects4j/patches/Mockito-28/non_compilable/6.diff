diff --git a/tmp/bb58bbfe-ef09-4cc1-a1ba-8ea56b6a819e_buggy.java b/tmp/83ba6085-612f-4006-a0e2-a4423ef69fe2_fixed.java
index fa6828a..cd628cb 100644
--- a/tmp/bb58bbfe-ef09-4cc1-a1ba-8ea56b6a819e_buggy.java
+++ b/tmp/83ba6085-612f-4006-a0e2-a4423ef69fe2_fixed.java
@@ -1,5 +1,22 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        // Create a mutable copy of the mocks set to allow removal of injected mocks
+        Set<Object> availableMocks = new HashSet<>(mocks);
+        // Process fields in the order defined by the framework (e.g., declaration order)
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            // Ask the filter for the best candidate mock for the current field among the *available* mocks
+            // The filter is responsible for prioritization logic (e.g., exact type, name matching, ancestor types)
+            // It returns an OngoingInjecter that knows which mock (if any) was selected.
+            org.mockito.internal.configuration.MockCandidateFilter.OngoingInjecter ongoingInjecter =
+                    mockCandidateFilter.filterCandidate(availableMocks, field, fieldInstance);
+
+            // Execute the injection if a suitable mock was found by the filter.
+            // Assume thenInject() returns the actual mock object that was injected, or null if no injection occurred.
+            Object injectedMock = ongoingInjecter.thenInject();
+
+            // If a mock was successfully injected into the field, remove it from the set of available mocks
+            // This ensures a mock instance is injected into at most one field.
+            if (injectedMock != null) {
+                availableMocks.remove(injectedMock);
+            }
         }
     }
\ No newline at end of file
