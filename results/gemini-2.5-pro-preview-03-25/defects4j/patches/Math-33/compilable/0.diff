diff --git a/tmp/51e6ab9b-7d9c-4246-84f1-7c04eced6abe_buggy.java b/tmp/5cd6c556-e2a2-4c75-b70d-72d465ed118d_fixed.java
index 56b2d66..e3bb54a 100644
--- a/tmp/51e6ab9b-7d9c-4246-84f1-7c04eced6abe_buggy.java
+++ b/tmp/5cd6c556-e2a2-4c75-b70d-72d465ed118d_fixed.java
@@ -1,45 +1,68 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // DO NOT DROP COLUMN 0 - it's the RHS column. The phase 1 objective *row* (row 0)
+        // is dropped later by starting the matrix copy from row 1.
+        // columnsToDrop.add(0); // Buggy line removed
 
-        // positive cost non-artificial variables
+        // Identify columns corresponding to positive cost non-artificial variables in the phase 1 objective function (row 0).
+        // These variables are typically between the objective function columns and the artificial variable columns.
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
+            // Use Precision.compareTo with maxUlps for robust comparison against 0
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
-        // non-basic artificial variables
+        // Identify columns corresponding to non-basic artificial variables.
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
+          // If getBasicRow(col) returns null, the artificial variable in column 'col' is non-basic.
           if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
           }
         }
 
+        // Create the new tableau matrix, excluding row 0 and the identified columns.
+        // New dimensions: height - 1, width - columnsToDrop.size()
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+
+        // Copy data from the old tableau to the new matrix.
+        for (int i = 1; i < getHeight(); i++) { // Start from row 1 to skip the phase 1 objective row (row 0).
+          int newMatrixColumn = 0; // Index for the columns in the new matrix.
+          for (int j = 0; j < getWidth(); j++) { // Iterate through columns of the old tableau.
+            if (!columnsToDrop.contains(j)) { // If the column should not be dropped...
+              // Copy the entry to the new matrix.
+              // Row index in the new matrix is i - 1.
+              matrix[i - 1][newMatrixColumn++] = tableau.getEntry(i, j);
             }
           }
         }
 
+        // Remove the labels for the dropped columns.
+        // Iterate backwards through the list of indices to avoid issues with shifting indices upon removal.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+          // Ensure columnLabels is not null and index is valid before removing
+          if (columnLabels != null) {
+              int colIndexToRemove = columnsToDrop.get(i);
+              // Basic bounds check, although index should be valid if logic is correct
+              if (colIndexToRemove >= 0 && colIndexToRemove < columnLabels.size()) {
+                  // Cast is important to call remove(int index) not remove(Object o)
+                  columnLabels.remove(colIndexToRemove);
+              }
+          }
         }
 
+        // Replace the old tableau with the new, smaller tableau.
         this.tableau = new Array2DRowRealMatrix(matrix);
+        // All artificial variables are either removed or effectively zero, so reset the count.
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
