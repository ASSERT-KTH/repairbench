diff --git a/tmp/213d3e09-71f4-4ea2-b392-fb3684cba455_buggy.java b/tmp/dc592541-888b-4067-b56d-bc6817f570d1_fixed.java
index 56b2d66..fefc847 100644
--- a/tmp/213d3e09-71f4-4ea2-b392-fb3684cba455_buggy.java
+++ b/tmp/dc592541-888b-4067-b56d-bc6817f570d1_fixed.java
@@ -1,45 +1,54 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // Do not drop column 0, which is often the RHS or objective value column in some tableau representations,
+        // or the first variable column. In this implementation's context (based on createTableau),
+        // dropping it unconditionally seems incorrect and was identified as a bug (MATH-781).
+        // columnsToDrop.add(0); // Buggy line removed
 
-        // positive cost non-artificial variables
+        // identify positive cost non-artificial variables that are non-basic
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+            // Drop the column only if the variable is non-basic and has a positive cost
+            if (Precision.compareTo(entry, 0d, maxUlps) > 0 && getBasicRow(i) == null) {
                 columnsToDrop.add(i);
             }
         }
 
-        // non-basic artificial variables
+        // identify non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
           if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
           }
         }
 
+        // Create the new matrix without the phase 1 objective row (row 0) and the identified columns
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+        for (int i = 1; i < getHeight(); i++) { // Start from row 1 to skip phase 1 objective
+          int newCol = 0;
           for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+              matrix[i - 1][newCol++] = tableau.getEntry(i, j);
             }
           }
         }
 
+        // Update column labels, removing the labels for the dropped columns
+        // Iterate backwards to avoid index issues after removal
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+          // Use intValue() for clarity, although autoboxing/unboxing handles (int) too
+          columnLabels.remove(columnsToDrop.get(i).intValue());
         }
 
+        // Update the tableau state
         this.tableau = new Array2DRowRealMatrix(matrix);
-        this.numArtificialVariables = 0;
+        this.numArtificialVariables = 0; // Phase 1 is done, no more artificial variables needed
     }
\ No newline at end of file
