diff --git a/tmp/6abc2dd4-ce41-4bd8-9194-597d5cce20f6_buggy.java b/tmp/587bac79-43c1-482d-9f5c-44cea8dedc3a_fixed.java
index 56b2d66..a5767df 100644
--- a/tmp/6abc2dd4-ce41-4bd8-9194-597d5cce20f6_buggy.java
+++ b/tmp/587bac79-43c1-482d-9f5c-44cea8dedc3a_fixed.java
@@ -1,45 +1,99 @@
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import org.apache.commons.math3.linear.Array2DRowRealMatrix;
+import org.apache.commons.math3.util.Precision;
+
+// Added imports for context, assuming these classes are available.
+// Remove these if providing only the function body.
+import org.apache.commons.math3.linear.RealMatrix;
+
+abstract class SimplexTableau {
+    // Minimal fields and methods needed for the dropPhase1Objective function context
+    protected RealMatrix tableau;
+    protected List<String> columnLabels = new ArrayList<String>();
+    protected int numArtificialVariables;
+    protected final int maxUlps = 10; // Example value, should match class context
+
+    // Abstract methods assumed to be implemented in concrete class
+    protected abstract int getNumObjectiveFunctions();
+    protected abstract int getArtificialVariableOffset();
+    protected abstract int getNumArtificialVariables();
+    protected abstract Integer getBasicRow(int col);
+    protected abstract int getHeight();
+    protected abstract int getWidth();
+
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
+     *
+     * Correction: This version removes the Phase 1 objective function (row 0)
+     * and the columns corresponding to non-basic artificial variables.
+     * Dropping columns for positive cost non-artificial variables is omitted
+     * as it might remove variables needed for Phase 2 optimality and deviates
+     * from the most common Simplex implementations.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
+            // No Phase 1 objective to drop
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
-            }
-        }
-
-        // non-basic artificial variables
+        // Identify columns corresponding to non-basic artificial variables
+        // Artificial variables start at getArtificialVariableOffset()
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
+          // If artificial variable 'col' is non-basic (its basic row is null)
           if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
           }
         }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        // Create the new matrix dimensions:
+        // Height: original height - 1 (removing Phase 1 objective row)
+        // Width: original width - number of columns being dropped
+        int newWidth = getWidth() - columnsToDrop.size();
+        double[][] matrix = new double[getHeight() - 1][newWidth];
+
+        // Copy entries from the original tableau:
+        // Skip row 0 (Phase 1 objective)
+        // Skip columns listed in columnsToDrop
+        for (int i = 1; i < getHeight(); i++) { // Start from row 1 (original objective function)
+          int newCol = 0; // Column index for the new matrix
+          for (int j = 0; j < getWidth(); j++) { // Iterate through original columns
+            if (!columnsToDrop.contains(j)) { // If column j is NOT being dropped
+              matrix[i - 1][newCol++] = tableau.getEntry(i, j);
             }
           }
         }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        // Update column labels:
+        // Remove labels corresponding to the dropped columns.
+        // Sort indices in descending order to avoid index shifting issues during removal.
+        Collections.sort(columnsToDrop, Collections.reverseOrder());
+        for (int colIndexToRemove : columnsToDrop) {
+            // columnLabels stores labels for columns 1, 2, ..., getWidth()-1.
+            // The label for tableau column 'j' (j>0) is at index 'j-1' in columnLabels.
+            int labelIndexToRemove = colIndexToRemove - 1;
+
+            // Check if the index is valid before removing
+            if (labelIndexToRemove >= 0 && labelIndexToRemove < columnLabels.size()) {
+                columnLabels.remove(labelIndexToRemove);
             }
+            // It's generally assumed colIndexToRemove > 0 since we're dropping variable columns, not RHS (col 0).
+        }
+
+        // Update the tableau instance with the new matrix
+        this.tableau = new Array2DRowRealMatrix(matrix, false); // Use 'false' to avoid copying matrix again
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+        // Update the count of artificial variables (they are now all removed)
         this.numArtificialVariables = 0;
+        // Note: Other properties like numDecisionVariables, numSlackVariables,
+        // slackVariableOffset, artificialVariableOffset may become inconsistent
+        // or irrelevant after this operation, but they are often final fields
+        // or their values aren't critical after Phase 1. The dimensions (width/height)
+        // are implicitly updated via the new tableau matrix.
+    }
 }
\ No newline at end of file
