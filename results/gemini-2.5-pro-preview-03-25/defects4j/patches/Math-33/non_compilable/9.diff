diff --git a/tmp/d87baf33-69d2-4acc-bd3b-9ebd18dd9609_buggy.java b/tmp/5d58e39b-fff8-4700-b3df-685cdf1f8f42_fixed.java
index 56b2d66..054a97d 100644
--- a/tmp/d87baf33-69d2-4acc-bd3b-9ebd18dd9609_buggy.java
+++ b/tmp/5d58e39b-fff8-4700-b3df-685cdf1f8f42_fixed.java
@@ -1,45 +1,110 @@
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import org.apache.commons.math3.linear.Array2DRowRealMatrix;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.Precision;
+
+// Add necessary imports and context for the function to compile if needed.
+// Assuming this method is part of a class like SimplexTableau which has
+// fields like tableau, columnLabels, epsilon, maxUlps and methods like
+// getNumObjectiveFunctions, getArtificialVariableOffset, getNumArtificialVariables,
+// getWidth, getHeight, getBasicRow.
+
+/**
+ * Represents a Simplex tableau, used for solving linear programming problems.
+ * This class is likely named SimplexTableau or similar.
+ */
+class SimplexTableauStub { // Stub class for context
+    protected RealMatrix tableau;
+    protected List<String> columnLabels;
+    protected int numArtificialVariables;
+    protected final double epsilon; // Assuming epsilon exists
+    protected final int maxUlps;    // Assuming maxUlps exists
+
+    // Dummy constructor and methods for compilation
+    public SimplexTableauStub(double epsilon, int maxUlps) {
+        this.epsilon = epsilon;
+        this.maxUlps = maxUlps;
+        // Initialize other fields as needed for the method logic
+        this.columnLabels = new ArrayList<>();
+        this.numArtificialVariables = 0;
+        this.tableau = new Array2DRowRealMatrix(); // Dummy matrix
+    }
+
+    protected int getNumObjectiveFunctions() { return 2; } // Example value
+    protected int getArtificialVariableOffset() { return 5; } // Example value
+    protected int getNumArtificialVariables() { return numArtificialVariables; } // Example value
+    protected int getWidth() { return tableau.getColumnDimension(); }
+    protected int getHeight() { return tableau.getRowDimension(); }
+    protected Integer getBasicRow(int col) {
+         // Dummy implementation: Check if a variable is basic
+         // In a real implementation, this would check the tableau column for a single 1.0
+         // and return the row index, or null if non-basic.
+         // For this fix, we assume the logic using it is correct.
+         return null; // Assume non-basic for simplicity here
+    }
+
+
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // DO NOT drop the RHS column (column 0)
+        // columnsToDrop.add(0); // BUG: Dropping RHS column
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
+        // identify columns corresponding to positive cost non-artificial variables
+        // Non-artificial variables are typically in columns 1..getArtificialVariableOffset()-1
+        // The original loop started at getNumObjectiveFunctions(), potentially skipping column 1
+        for (int i = 1; i < getArtificialVariableOffset(); i++) { // FIX: Start check from column 1
+            final double entry = tableau.getEntry(0, i); // Phase 1 objective row (row 0)
+            // Use maxUlps for comparison, consistent with the original code snippet
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
-        // non-basic artificial variables
+        // identify columns corresponding to non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
+          if (getBasicRow(col) == null) { // Check if the artificial variable is non-basic
             columnsToDrop.add(col);
           }
         }
 
+        // Rebuild the tableau matrix, dropping row 0 and the identified columns
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        for (int i = 1; i < getHeight(); i++) { // Start from row 1 (skip phase 1 objective row 0)
+          int newMatrixColumn = 0;
+          for (int j = 0; j < getWidth(); j++) { // Iterate through original columns
+            if (!columnsToDrop.contains(j)) { // Keep the column if it's not in the drop list
+              matrix[i - 1][newMatrixColumn++] = tableau.getEntry(i, j);
             }
           }
         }
 
+        // Update column labels by removing labels for the dropped columns
+        // It's crucial to remove elements from high index to low index to avoid shifting issues
+        // The original loop iterates backwards through the indices of columnsToDrop, which is correct.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+          // columnsToDrop.get(i) gives the original column index to remove
+          // Ensure index is within bounds before removing
+          int colIndexToRemove = columnsToDrop.get(i);
+          if (colIndexToRemove < columnLabels.size()) { // Basic bounds check
+              columnLabels.remove(colIndexToRemove);
+          }
         }
 
+        // Update the tableau instance and reset artificial variable count
         this.tableau = new Array2DRowRealMatrix(matrix);
         this.numArtificialVariables = 0;
     }
+}
+
+// --- Provide the fixed function only, inside a code block ---
