diff --git a/tmp/f9aea4c8-b6e3-4737-8440-2ecd4ffc48b7_buggy.java b/tmp/ecee13a9-5788-4fa6-8ccb-d286416080ac_fixed.java
index 56b2d66..f7ec311 100644
--- a/tmp/f9aea4c8-b6e3-4737-8440-2ecd4ffc48b7_buggy.java
+++ b/tmp/ecee13a9-5788-4fa6-8ccb-d286416080ac_fixed.java
@@ -1,45 +1,60 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // Do NOT drop the RHS column (index 0)
+        // columnsToDrop.add(0); // Buggy line removed
 
-        // positive cost non-artificial variables
+        // identify columns corresponding to positive cost non-artificial variables
+        // in the phase 1 objective row
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
+            // Check Precision.compareTo first as it is tolerant to floating point arithmetic errors.
+            // Drop the column if the entry is greater than zero using Precision.compareTo.
+            // Drop the column if the entry is equal to zero and we are minimizing the objective function.
+            // Note: The second check is not necessary for the example test case but might be needed for other cases.
+            // However, sticking to the original logic of only dropping if > 0 based on Precision seems safer
+            // without more context or failing tests requiring the equals check.
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
-        // non-basic artificial variables
+        // identify columns corresponding to non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
+          if (getBasicRow(col) == null) { // Variable is non-basic
             columnsToDrop.add(col);
           }
         }
 
+        // Create the new matrix excluding the first row (phase 1 objective) and the identified columns
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        for (int i = 1; i < getHeight(); i++) { // Start from row 1 to skip phase 1 objective row
+          int newMatrixCol = 0;
+          for (int j = 0; j < getWidth(); j++) { // Iterate through original columns
+            if (!columnsToDrop.contains(j)) { // Check if the column should be kept
+              matrix[i - 1][newMatrixCol++] = tableau.getEntry(i, j);
             }
           }
         }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        // Remove labels for the dropped columns (iterate backwards to avoid index issues)
+        // Ensure columnsToDrop is sorted or handle removal carefully if it's not inherently sorted.
+        // ArrayList preserves insertion order, which matches the column index order here.
+        // Iterating backwards is the standard way to remove multiple items from a list by index.
+        Collections.sort(columnsToDrop, Collections.reverseOrder()); // Sort descending for safe removal
+        for (int colIndex : columnsToDrop) {
+          columnLabels.remove(colIndex);
         }
 
+        // Update the tableau and artificial variable count
         this.tableau = new Array2DRowRealMatrix(matrix);
-        this.numArtificialVariables = 0;
+        this.numArtificialVariables = 0; // Phase 1 is done, no more artificial variables needed conceptually
     }
\ No newline at end of file
