diff --git a/tmp/ceec2830-6472-4480-9f7e-3da4ebf05843_buggy.java b/tmp/1ecece1a-d4a1-49df-8caf-40e04b67db93_fixed.java
index 56b2d66..62022d6 100644
--- a/tmp/ceec2830-6472-4480-9f7e-3da4ebf05843_buggy.java
+++ b/tmp/1ecece1a-d4a1-49df-8caf-40e04b67db93_fixed.java
@@ -1,45 +1,112 @@
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import org.apache.commons.math3.linear.Array2DRowRealMatrix;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.Precision;
+
+// Assuming this code is within the org.apache.commons.math3.optimization.linear.SimplexTableau class
+// which has access to fields like: tableau, numArtificialVariables, columnLabels, maxUlps, basicRows, basicVariables
+// and methods like: getNumObjectiveFunctions, getArtificialVariableOffset, getNumArtificialVariables, getBasicRow, getHeight, getWidth
+
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // Do NOT drop column 0 (RHS column)
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
+        // Identify columns corresponding to positive cost non-artificial variables in Phase 1 objective (row 0)
+        // Non-artificial variables are in columns 1 to getArtificialVariableOffset() - 1
+        for (int i = 1; i < getArtificialVariableOffset(); i++) { // Start from column 1
+            final double entry = tableau.getEntry(0, i); // Phase 1 objective is in row 0
+            // Use maxUlps for comparison as in the original code
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
-        // non-basic artificial variables
+        // Identify columns corresponding to non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
+          if (getBasicRow(col) == null) { // Check if variable is non-basic
             columnsToDrop.add(col);
           }
         }
 
+        // Create the new matrix, removing row 0 (Phase 1 objective) and the identified columns
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+
+        // Create mapping for old column index to new column index
+        int currentNewCol = 0;
+        // Use an array for efficient lookup; initialize with -1 for dropped columns
+        int[] oldColToNewCol = new int[getWidth()];
+        java.util.Arrays.fill(oldColToNewCol, -1); // Initialize all as dropped
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                oldColToNewCol[j] = currentNewCol++;
             }
         }
+
+        // Copy row by row, skipping row 0 and columns in columnsToDrop
+        for (int i = 1; i < getHeight(); i++) { // Start from row 1 (Phase 2 objective or first constraint)
+          int newMatrixCol = 0;
+          for (int j = 0; j < getWidth(); j++) { // Iterate through columns of the old tableau
+            if (!columnsToDrop.contains(j)) { // Check if column should be kept
+              // Row index in new matrix is i - 1
+              // Column index in new matrix is newMatrixCol (which corresponds to oldColToNewCol[j])
+              matrix[i - 1][newMatrixCol++] = tableau.getEntry(i, j); // Copy entry to new matrix
+            }
           }
+        }
+
+        // Update column labels by removing labels for dropped columns
+        // Sort columnsToDrop indices in descending order for safe removal by index
+        Collections.sort(columnsToDrop, Collections.reverseOrder());
+        for (int colIndex : columnsToDrop) {
+          columnLabels.remove(colIndex); // Remove by index
+        }
+
+        // Update the basic variable maps {column -> row} and {row -> column}
+        Map<Integer, Integer> newBasicRows = new HashMap<>();
+        Map<Integer, Integer> newBasicVariables = new HashMap<>();
+        if (this.basicRows != null) { // Check if map exists (it should)
+            for (Map.Entry<Integer, Integer> entry : this.basicRows.entrySet()) {
+                int oldCol = entry.getKey();
+                int oldRow = entry.getValue();
+
+                // Only consider basic variables that are not dropped and whose rows are kept (i.e., oldRow >= 1)
+                if (oldRow >= 1 && !columnsToDrop.contains(oldCol)) {
+                    int newCol = oldColToNewCol[oldCol]; // Map old column to new column index
+                    int newRow = oldRow - 1; // Row index shifts down by 1
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+                    // Ensure the mapping was successful (newCol >= 0)
+                    if (newCol >= 0) {
+                         newBasicRows.put(newCol, newRow);
+                         // basicVariables map should always be maintained if basicRows is
+                         if (newBasicVariables != null) {
+                             newBasicVariables.put(newRow, newCol);
                          }
+                    }
+                }
+            }
+             this.basicRows = newBasicRows;
+             // Only update basicVariables if it was previously being maintained (it should be)
+             if (this.basicVariables != null) {
+                 this.basicVariables = newBasicVariables;
+             }
+        }
+
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+        // Update the tableau and artificial variable count
+        // Use copy=false for efficiency as the matrix array is newly created
+        this.tableau = new Array2DRowRealMatrix(matrix, false);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
