diff --git a/tmp/0157a3f0-359b-45b7-be4e-6b15a38c122d_buggy.java b/tmp/578b3013-5782-449c-80b5-edbe5755a074_fixed.java
index 56b2d66..0dc9643 100644
--- a/tmp/0157a3f0-359b-45b7-be4e-6b15a38c122d_buggy.java
+++ b/tmp/578b3013-5782-449c-80b5-edbe5755a074_fixed.java
@@ -1,45 +1,76 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
+        // Identify columns corresponding to variables to drop (NOT including column 0 - RHS)
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
+        // Positive cost non-artificial variables in the phase 1 objective row (row 0)
+        // Variables start after the objective function columns.
+        // getNumObjectiveFunctions() gives the index of the first variable column.
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
+            // If the reduced cost in phase 1 objective is positive, mark column for removal
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
-        // non-basic artificial variables
+        // Non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
+          // Check if the artificial variable is non-basic (its column is not a basic variable)
           if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
           }
         }
 
+        // Create the new matrix excluding row 0 (phase 1 objective) and the selected columns
+        // New dimensions: height-1 rows, width - columnsToDrop.size() columns
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+
+        // Copy row by row, skipping row 0
         for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+          int targetCol = 0; // Column index for the new matrix
+          // Copy column by column for the current row
           for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+            // Check if current column j should be dropped
+            boolean drop = false;
+            // Use contains for efficient checking if list size grows
+            if (columnsToDrop.contains(j)) {
+                 drop = true;
+            }
+            // If the column is not dropped, copy the entry
+            if (!drop) {
+              // Copy from original tableau (row i, col j) to new matrix (row i-1, targetCol)
+              matrix[i - 1][targetCol++] = tableau.getEntry(i, j);
             }
           }
         }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        // Remove column labels for the dropped variable columns.
+        // Sort the indices in descending order to handle index shifts correctly during removal.
+        Collections.sort(columnsToDrop, Collections.reverseOrder());
+        for (int colIndex : columnsToDrop) {
+          // Ensure index is valid before removing. Should be fine if logic is correct.
+          if (colIndex < columnLabels.size()) {
+             columnLabels.remove(colIndex);
+          } else {
+             // Log or handle potential error: index out of bounds for columnLabels
+             // This might indicate an issue in calculating columnsToDrop or inconsistency
+             // between tableau width and columnLabels size.
+          }
         }
 
+        // Update the tableau with the new matrix
         this.tableau = new Array2DRowRealMatrix(matrix);
+        // Reset the count of artificial variables as they are effectively removed
         this.numArtificialVariables = 0;
+        // Note: numObjectiveFunctions is not explicitly updated here.
+        // It's assumed the caller or subsequent operations handle the transition correctly.
     }
\ No newline at end of file
