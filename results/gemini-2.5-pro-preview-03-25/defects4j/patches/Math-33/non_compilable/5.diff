diff --git a/tmp/4c1b08cf-2eeb-4ade-9e12-fc2df984cc8a_buggy.java b/tmp/3ba14ca1-8b81-4bfa-97b2-b9784ec5e291_fixed.java
index 56b2d66..6e7893e 100644
--- a/tmp/4c1b08cf-2eeb-4ade-9e12-fc2df984cc8a_buggy.java
+++ b/tmp/3ba14ca1-8b81-4bfa-97b2-b9784ec5e291_fixed.java
@@ -1,45 +1,113 @@
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.math3.linear.Array2DRowRealMatrix;
+// Note: Ensure other necessary imports like RealMatrix and Precision are available if needed elsewhere in the class.
+
+// Inside the SimplexTableau class...
+
     /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+     * Removes the phase 1 objective function row and the non-basic artificial variables columns
+     * from this tableau.
      */
     protected void dropPhase1Objective() {
+        // Check if we are already in phase 2 (only one objective function)
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
-
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
-            }
-        }
-
-        // non-basic artificial variables
+        // Identify the columns corresponding to non-basic artificial variables.
+        // These columns should be dropped.
+        Set<Integer> columnsToDrop = new HashSet<Integer>();
         for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
+            int artificialVarColIndex = i + getArtificialVariableOffset();
+            // A variable is non-basic if it's not in the basis (getBasicRow returns null).
+            if (getBasicRow(artificialVarColIndex) == null) {
+                columnsToDrop.add(artificialVarColIndex);
             }
         }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        // Create the data array for the new tableau matrix.
+        // The new matrix will have one less row (row 0, the phase 1 objective, is removed)
+        // and fewer columns (non-basic artificial variable columns are removed).
+        final int newHeight = getHeight() - 1;
+        final int newWidth = getWidth() - columnsToDrop.size();
+        double[][] matrixData = new double[newHeight][newWidth];
+
+        // Populate the new matrix data by copying entries from the old tableau,
+        // skipping row 0 and the columns marked for dropping.
+        for (int i = 1; i < getHeight(); i++) { // Iterate old rows, skipping row 0.
+            int newMatrixCol = 0; // Column index for the new matrix data array.
+            for (int j = 0; j < getWidth(); j++) { // Iterate old columns.
+                if (!columnsToDrop.contains(j)) { // If this column is kept...
+                    // Copy the value to the new matrix data.
+                    // The row index in the new matrix is 'i - 1' because row 0 was skipped.
+                    matrixData[i - 1][newMatrixCol++] = tableau.getEntry(i, j);
+                }
             }
         }
+
+        // Update the list of column labels: remove labels for the dropped columns.
+        // Get a sorted list of columns to drop to remove labels correctly by index.
+        List<Integer> sortedColumnsToDrop = new ArrayList<Integer>(columnsToDrop);
+        Collections.sort(sortedColumnsToDrop);
+
+        // Remove labels from right to left (highest index first) to avoid index shifting issues
+        // when removing elements from the list.
+        for (int i = sortedColumnsToDrop.size() - 1; i >= 0; i--) {
+            columnLabels.remove((int) sortedColumnsToDrop.get(i));
         }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        // Update the map of basic variables: adjust row and column indices.
+        Map<Integer, Integer> newBasicVariables = new HashMap<Integer, Integer>();
+        for (Map.Entry<Integer, Integer> entry : basicVariables.entrySet()) {
+            Integer oldColumnIndex = entry.getKey();
+            // Consider only basic variables whose columns are *not* being dropped.
+            // Note: Basic artificial variables might remain if they were basic at level zero;
+            // their columns are not dropped, and they are treated as regular variables in Phase 2.
+            if (!columnsToDrop.contains(oldColumnIndex)) {
+                int oldRowIndex = entry.getValue();
+                // New row index is one less because row 0 was removed.
+                int newRowIndex = oldRowIndex - 1;
+
+                // Calculate the new column index: subtract the count of dropped columns
+                // that appeared *before* this column's original index.
+                int droppedCountBefore = 0;
+                for (int droppedCol : sortedColumnsToDrop) {
+                    if (droppedCol < oldColumnIndex) {
+                        droppedCountBefore++;
+                    } else {
+                        // Optimization: since the list of dropped columns is sorted,
+                        // we can stop counting once we encounter a dropped column index
+                        // that is not smaller than the current variable's column index.
+                        break;
+                    }
                 }
+                int newColumnIndex = oldColumnIndex - droppedCountBefore; // Adjust column index.
+
+                // Add the updated mapping (new column index -> new row index) to the new map,
+                // but only if the adjusted row index is valid (non-negative).
+                if (newRowIndex >= 0) {
+                    newBasicVariables.put(newColumnIndex, newRowIndex);
+                }
+                // If newRowIndex < 0, it would imply the basic variable was in the objective row (row 0).
+                // This should not happen in a standard Simplex tableau structure after Phase 1 initialization.
+            }
+        }
+        // Replace the old basic variables map with the newly computed map.
+        this.basicVariables = newBasicVariables;
+
+        // Update the tableau's underlying matrix reference with the new matrix.
+        // Use the 'false' flag in the constructor to avoid making another copy of the 'matrixData' array.
+        this.tableau = new Array2DRowRealMatrix(matrixData, false);
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+        // Phase 1 is complete, so set the number of artificial variables to 0.
+        // Any remaining artificial variables (which must be basic at level 0)
+        // are now treated like other variables.
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
