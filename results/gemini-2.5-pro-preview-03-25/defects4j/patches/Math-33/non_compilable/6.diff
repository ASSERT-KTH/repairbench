diff --git a/tmp/30907088-2211-46ac-bd52-4c4f9f6858b7_buggy.java b/tmp/70cfb893-eaca-4c22-8f3c-dacaf6c2d383_fixed.java
index 56b2d66..89b5caf 100644
--- a/tmp/30907088-2211-46ac-bd52-4c4f9f6858b7_buggy.java
+++ b/tmp/70cfb893-eaca-4c22-8f3c-dacaf6c2d383_fixed.java
@@ -1,45 +1,139 @@
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.math3.linear.Array2DRowRealMatrix;
+import org.apache.commons.math3.util.Precision;
+
+// Imports added for context. Assume necessary member variables like
+// tableau, numArtificialVariables, numObjectiveFunctions, columnLabels, basicRows, maxUlps
+// and methods like getNumObjectiveFunctions, getArtificialVariableOffset, getHeight,
+// getWidth, getBasicRow, getNumArtificialVariables exist within the class.
+
     /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+     * Removes the phase 1 objective function, columns corresponding to the
+     * phase 1 objective function value and non-basic artificial variables
+     * from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
-            return;
+            return; // Already in phase 2 or no artificial variables needed
         }
 
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // Identify columns to drop:
+        // We need to drop the column holding the value of the phase 1 objective function 'W'.
+        // Based on the constructor logic (tableau.setEntry(0, 1, -1) when artificials > 0),
+        // column 1 seems to serve this purpose.
+        // We also drop columns corresponding to non-basic artificial variables.
+        Set<Integer> columnsToDropSet = new HashSet<>();
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
-            }
+        // Drop column 1 (assumed to be phase 1 objective value 'W')
+        // This column is only relevant during phase 1.
+        if (getWidth() > 1) { // Check if column 1 exists
+            columnsToDropSet.add(1);
         }
 
-        // non-basic artificial variables
+
+        // Drop columns corresponding to non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
             int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
+            // Check if the artificial variable in column 'col' is basic.
+            // getBasicRow(col) returns the row index if basic, null otherwise.
+            if (getBasicRow(col) == null) { // If artificial variable is non-basic
+                columnsToDropSet.add(col);
             }
+            // Note: Basic artificial variables might remain if they correspond to
+            // redundant constraints. Their columns are kept for now, but the variable
+            // count numArtificialVariables will be set to 0.
         }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        // Create a sorted list of unique column indices to drop
+        List<Integer> sortedColumnsToDrop = new ArrayList<>(columnsToDropSet);
+        Collections.sort(sortedColumnsToDrop);
+
+        // Create the new tableau matrix:
+        // Height decreases by 1 (removing phase 1 objective row 0).
+        // Width decreases by the number of columns dropped.
+        double[][] matrix = new double[getHeight() - 1][getWidth() - sortedColumnsToDrop.size()];
+        for (int i = 1; i < getHeight(); i++) { // Iterate through old rows, skipping row 0
+            int newCol = 0;
+            int dropIdx = 0; // Index into sortedColumnsToDrop
+            for (int j = 0; j < getWidth(); j++) { // Iterate through old columns
+                boolean dropCurrentCol = false;
+                // Check if the current old column 'j' should be dropped
+                if (dropIdx < sortedColumnsToDrop.size() && j == sortedColumnsToDrop.get(dropIdx)) {
+                    dropCurrentCol = true;
+                    dropIdx++;
+                }
+
+                if (!dropCurrentCol) {
+                    // Copy the entry to the new matrix. Row index is i-1.
+                    matrix[i - 1][newCol++] = tableau.getEntry(i, j);
+                }
             }
         }
+
+        // Update column labels (removing labels for dropped columns)
+        List<String> newLabels = new ArrayList<>();
+        int dropIdx = 0; // Index into sortedColumnsToDrop
+        for (int j = 0; j < columnLabels.size(); j++) { // Iterate through old labels by index
+            boolean dropCurrentLabel = false;
+            // Check if the current old column index 'j' should be dropped
+            if (dropIdx < sortedColumnsToDrop.size() && j == sortedColumnsToDrop.get(dropIdx)) {
+                dropCurrentLabel = true;
+                dropIdx++;
+            }
+            if (!dropCurrentLabel) {
+                newLabels.add(columnLabels.get(j));
             }
+        }
+        this.columnLabels = newLabels; // Replace the old list
+
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        // Update the map of basic variables (basicRows)
+        // Column indices shift left, row indices shift up by 1.
+        Map<Integer, Integer> newBasicRows = new HashMap<>();
+        for (Map.Entry<Integer, Integer> entry : basicRows.entrySet()) {
+            int oldColIndex = entry.getKey();
+            int rowIndex = entry.getValue(); // Row index in the old tableau
+
+            // Check if the column of this basic variable was dropped
+            if (columnsToDropSet.contains(oldColIndex)) {
+                // This basic variable's column was dropped. Remove it from the map.
+                // This should generally not happen for essential variables, but could
+                // occur if a basic artificial variable corresponding to a truly
+                // redundant constraint was somehow targeted for removal (though current
+                // logic only targets non-basic artificials).
+                continue;
+            }
+
+            // Calculate the new column index for this basic variable
+            int numDroppedBefore = 0;
+            for (int droppedCol : sortedColumnsToDrop) {
+                if (droppedCol < oldColIndex) {
+                    numDroppedBefore++;
+                } else {
+                    break; // sortedColumnsToDrop is sorted
+                }
+            }
+            int newColIndex = oldColIndex - numDroppedBefore;
+
+            // Row indices shift up by 1 because row 0 was removed.
+            // The row index must be > 0 as row 0 was the objective row.
+            if (rowIndex > 0) {
+                 newBasicRows.put(newColIndex, rowIndex - 1);
+            }
+             // else: Basic variable was in row 0? Should not happen in feasible phase 1 end. Ignore/log error?
         }
+        this.basicRows = newBasicRows;
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
-        this.numArtificialVariables = 0;
+        // Update the tableau state
+        this.tableau = new Array2DRowRealMatrix(matrix, false); // Use the new matrix (false = don't copy)
+        this.numArtificialVariables = 0; // Phase 1 artifacts are removed or accounted for
+        this.numObjectiveFunctions = 1; // Only the original objective remains
+        // Width and Height are implicitly updated by using the new tableau matrix.
     }
\ No newline at end of file
