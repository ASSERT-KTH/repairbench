diff --git a/tmp/57083a7f-6a88-4174-b390-d7b20b793a87_buggy.java b/tmp/63685815-d3c9-4a89-819a-876d4784b39a_fixed.java
index 56b2d66..9dcff02 100644
--- a/tmp/57083a7f-6a88-4174-b390-d7b20b793a87_buggy.java
+++ b/tmp/63685815-d3c9-4a89-819a-876d4784b39a_fixed.java
@@ -1,45 +1,71 @@
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.math3.linear.Array2DRowRealMatrix;
+import org.apache.commons.math3.util.Precision; // Keep import in case it's needed by helpers, though not directly used in the fixed logic
+
+// The context assumes this method is part of a SimplexTableau class with access
+// to methods like getNumObjectiveFunctions, getArtificialVariableOffset,
+// getNumArtificialVariables, getBasicRow, getHeight, getWidth, and fields
+// like tableau (RealMatrix), columnLabels (List<String>), numArtificialVariables (int), maxUlps (int).
+
     /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+     * Removes the phase 1 objective function row (row 0) and columns corresponding to
+     * non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
+        // If there's only one objective function, it implies Phase 1 was not used or
+        // has already been dropped. Nothing to do.
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // List to store the indices of columns that should be dropped.
+        List<Integer> columnsToDrop = new ArrayList<>();
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
-            }
-        }
-
-        // non-basic artificial variables
+        // Identify columns corresponding to non-basic artificial variables.
+        // Artificial variable columns are located starting from getArtificialVariableOffset().
         for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
+          int colIndex = i + getArtificialVariableOffset();
+          // getBasicRow(colIndex) returns the index of the basic row for this column,
+          // or null if the variable is non-basic.
+          if (getBasicRow(colIndex) == null) {
+            // If the artificial variable is non-basic, mark its column for removal.
+            columnsToDrop.add(colIndex);
           }
         }
 
+        // Create the data array for the new tableau matrix.
+        // The new matrix will have one less row (the Phase 1 objective row 0 is removed).
+        // The width will be reduced by the number of dropped columns.
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
+
+        // Populate the new matrix by copying relevant entries from the old tableau.
+        for (int i = 1; i < getHeight(); i++) { // Iterate through rows of the original tableau, skipping row 0.
+          int newMatrixColumnIndex = 0;
+          for (int j = 0; j < getWidth(); j++) { // Iterate through columns of the original tableau.
+            // Check if the current original column 'j' is one of the columns to be dropped.
+            // Using contains() is efficient enough for typical numbers of artificial variables.
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+              // If the column should be kept, copy the entry to the new matrix.
+              // Original row 'i' maps to new row 'i-1'.
+              // Original column 'j' maps to new column 'newMatrixColumnIndex'.
+              matrix[i - 1][newMatrixColumnIndex++] = tableau.getEntry(i, j);
             }
           }
         }
 
+        // Remove the labels corresponding to the dropped columns from the columnLabels list.
+        // It's crucial to iterate backwards when removing elements by index from a List
+        // to avoid index shifting issues. Sorting columnsToDrop is not necessary here.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
+          // Ensure the index is treated as an int for remove(int index) method.
           columnLabels.remove((int) columnsToDrop.get(i));
         }
 
+        // Update the tableau to use the newly created matrix.
         this.tableau = new Array2DRowRealMatrix(matrix);
+        // Reset the count of artificial variables, as Phase 1 is complete and these
+        // variables (or their tracking) are no longer needed for Phase 2.
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
