diff --git a/tmp/1ef64930-73a9-446a-bb9d-838542bdabb0_buggy.java b/tmp/96ab8f85-fd56-4030-b358-849d309f2fe8_fixed.java
index 1bec4d6..60b36d7 100644
--- a/tmp/1ef64930-73a9-446a-bb9d-838542bdabb0_buggy.java
+++ b/tmp/96ab8f85-fd56-4030-b358-849d309f2fe8_fixed.java
@@ -1,14 +1,26 @@
     private JavaType _mapType(Class<?> rawClass)
     {
-        // 28-May-2015, tatu: Properties are special, as per [databind#810]
+        // [databind#810]: Properties has fixed types: String, String
+        // TODO: Maybe should allow overriding? But for now, fixed
+        if (rawClass == java.util.Properties.class) {
+            // Properties is a Map<String, String> implementation, despite its
+            // superclass declaring <Object, Object>
+            // 13-Oct-2015, tatu: For stricter typing, should use `constructType`? For now,
+            //    existing method is fine, assumes untyped type bindings
+            return MapType.construct(rawClass, _stringType(), _stringType());
+        }
+
+        // Otherwise, generic Map. Let's see if we can find type parameters
         JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
         // ok to have no types ("raw")
         if (typeParams == null) {
+            // Usually means we don't have type information; defaults to Object/Object
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         // but exactly 2 types if any found
         if (typeParams.length != 2) {
+            // And if not, plain fail, can not construct type.
             throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
         }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
