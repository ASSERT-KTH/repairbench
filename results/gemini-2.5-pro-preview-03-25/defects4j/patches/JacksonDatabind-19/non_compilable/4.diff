diff --git a/tmp/fa16b32e-56a0-4209-841e-1d5285e02943_buggy.java b/tmp/15ddce56-2ada-4198-81a7-ca27c1c8c8cc_fixed.java
index 1bec4d6..9907b97 100644
--- a/tmp/fa16b32e-56a0-4209-841e-1d5285e02943_buggy.java
+++ b/tmp/15ddce56-2ada-4198-81a7-ca27c1c8c8cc_fixed.java
@@ -1,14 +1,23 @@
     private JavaType _mapType(Class<?> rawClass)
     {
         // 28-May-2015, tatu: Properties are special, as per [databind#810]
-        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
+        JavaType[] typeParams;
+        if (rawClass == Properties.class) {
+            typeParams = new JavaType[] { _stringType(), _stringType() };
+        } else {
+            typeParams = findTypeParameters(rawClass, Map.class);
             // ok to have no types ("raw")
             if (typeParams == null) {
+                 // Even if declared as raw, we may know the type parameters through annotations
+                 // (think sub-classes of collections, declarations via interfaces)
+                 // 18-Jan-2018, tatu: Let's default to <Object,Object> for raw type
+                 //   (used to default to <String,Object>... why?)
                  return MapType.construct(rawClass, _unknownType(), _unknownType());
             }
             // but exactly 2 types if any found
             if (typeParams.length != 2) {
                 throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
             }
+        }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
\ No newline at end of file
