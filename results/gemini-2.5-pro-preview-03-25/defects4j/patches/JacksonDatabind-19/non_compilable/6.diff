diff --git a/tmp/63c2e92c-682c-47ea-a452-70221b46240f_buggy.java b/tmp/7782f2fe-95bd-48d4-9bb4-8f90b3e70902_fixed.java
index 1bec4d6..2b544f3 100644
--- a/tmp/63c2e92c-682c-47ea-a452-70221b46240f_buggy.java
+++ b/tmp/7782f2fe-95bd-48d4-9bb4-8f90b3e70902_fixed.java
@@ -1,14 +1,23 @@
     private JavaType _mapType(Class<?> rawClass)
     {
-        // 28-May-2015, tatu: Properties are special, as per [databind#810]
+        // [databind#810]: Properties are special, must be <String,String>
+        if (rawClass == Properties.class) {
+            // Use SimpleType.constructUnsafe() for String type to avoid potential recursion issues
+            // if _stringType() relies on constructType() which calls back here.
+            // A safer approach might be to have pre-constructed String type constants.
+            // Assuming _stringType() is safe or TypeFactory has constants like _stringType:
+             return MapType.construct(rawClass, _stringType(), _stringType());
+        }
         JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
         // ok to have no types ("raw")
         if (typeParams == null) {
+            // Call SimpleType.constructUnsafe() for Object type if _unknownType relies on constructType()
+            // Assuming _unknownType() is safe or TypeFactory has constants like _unknownType:
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         // but exactly 2 types if any found
         if (typeParams.length != 2) {
             throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
         }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
\ No newline at end of file
