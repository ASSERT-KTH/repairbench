diff --git a/tmp/04f681c7-713c-48fb-ab58-aa30b68fa0fc_buggy.java b/tmp/820d1f0d-fa6a-4980-b5a5-e056844941ca_fixed.java
index 1bec4d6..e7d8587 100644
--- a/tmp/04f681c7-713c-48fb-ab58-aa30b68fa0fc_buggy.java
+++ b/tmp/820d1f0d-fa6a-4980-b5a5-e056844941ca_fixed.java
@@ -1,14 +1,40 @@
     private JavaType _mapType(Class<?> rawClass)
     {
-        // 28-May-2015, tatu: Properties are special, as per [databind#810]
+        // [databind#810]: Properties are special, as Map<String,String>
+        if (rawClass == Properties.class) {
+            // Properties is a non-generic type, but for type handling purposes,
+            // we should consider it <String,String> map.
+            // NOTE: must account for possible sub-classing (pass 'rawClass');
+            // or perhaps instead pass `Properties.class`? For now, use specified
+            // type.
+            return MapType.construct(rawClass, _stringType(), _stringType());
+        }
         JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
         // ok to have no types ("raw")
         if (typeParams == null) {
+            // Mismatched for sub-class of Properties? Seems unlikely but...
+            // For [databind#810], ensure that if we do get Properties descendant,
+            // we use <String,String>
+            /* 04-Jul-2016, tatu: Should probably check for this case earlier... but let it be
+             *   for now, logic gets simpler this way.
+             */
+            if (Properties.class.isAssignableFrom(rawClass)) {
+                return MapType.construct(rawClass, _stringType(), _stringType());
+            }
+            
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         // but exactly 2 types if any found
         if (typeParams.length != 2) {
-            throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
+            // Usually should not happen... but let's add a check
+            // One case: we might have a sub-class of Properties with other type parameters
+            // (if that is even allowed)
+            if (rawClass == Properties.class) { // shouldn't happen...
+                 return MapType.construct(rawClass, _stringType(), _stringType());
+            }
+
+            throw new IllegalArgumentException(String.format(
+                    "Strange Map type %s: cannot determine type parameters", rawClass.getName()));
         }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
\ No newline at end of file
