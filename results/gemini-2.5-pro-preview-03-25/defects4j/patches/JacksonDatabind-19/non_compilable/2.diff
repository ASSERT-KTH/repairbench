diff --git a/tmp/098adae8-68d9-43f0-8d6e-5e646f666830_buggy.java b/tmp/6150c05a-6bee-47cf-b41d-f8c7cee767ff_fixed.java
index 1bec4d6..c75f9e3 100644
--- a/tmp/098adae8-68d9-43f0-8d6e-5e646f666830_buggy.java
+++ b/tmp/6150c05a-6bee-47cf-b41d-f8c7cee767ff_fixed.java
@@ -1,14 +1,28 @@
     private JavaType _mapType(Class<?> rawClass)
     {
-        // 28-May-2015, tatu: Properties are special, as per [databind#810]
+        // [databind#810]: Properties are special, force to <String,String>
+        if (rawClass == Properties.class) {
+            return MapType.construct(rawClass, CORE_TYPE_STRING, CORE_TYPE_STRING);
+        }
         JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
         // ok to have no types ("raw")
         if (typeParams == null) {
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         // but exactly 2 types if any found
         if (typeParams.length != 2) {
-            throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
+            // nominally should never happen -- but perhaps some raw types slipped through?
+            // 18-Oct-2015, tatu: As per [databind#933], should be ok; require specialization
+             //    The case is Properties extending Hashtable<Object,Object>
+            // Or... let's rather assume it's <Object,Object> for now? Seems more practical
+            // than throwing exception
+            // 28-May-2018, tatu: No. This is not acceptable, see [databind#2040];
+            //    need to fail with more information
+            throw new IllegalArgumentException(String.format(
+                    "Cannot find Key/Value type parameterization for Map class %s (via %s)",
+                    rawClass.getName(), _referenceDesc(rawClass)));
+
+//            return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
