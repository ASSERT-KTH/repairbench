diff --git a/tmp/43a5b2c4-ea03-458c-b9f8-be88247d2c70_buggy.java b/tmp/d32f4e66-c591-4784-901e-ccc6695e7745_fixed.java
index 1bec4d6..882fe01 100644
--- a/tmp/43a5b2c4-ea03-458c-b9f8-be88247d2c70_buggy.java
+++ b/tmp/d32f4e66-c591-4784-901e-ccc6695e7745_fixed.java
@@ -1,14 +1,30 @@
     private JavaType _mapType(Class<?> rawClass)
     {
-        // 28-May-2015, tatu: Properties are special, as per [databind#810]
+        // [databind#810]: Properties are special, as <String,String>
+        if (rawClass == Properties.class) {
+            // Properties DOES implement `Map<Object, Object>` but for jackson purposes
+            // we want to treat it as Map<String, String>
+            //
+            // note: Churches comment is wrong here, Properties does not implement Map<Object, Object>
+            // but Hashtable<Object, Object>. Type parameters are resolved accordingly.
+            // But we want to force it to <String,String>
+             return MapType.construct(rawClass, _stringType(), _stringType());
+        }
         JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
         // ok to have no types ("raw")
         if (typeParams == null) {
+            // 18-Sep-2017, tatu: Should perhaps indicate legacy handling? For now, fine.
+            // 06-Mar-2019, tatu: As per [databind#2274], better be explicit & strict?
+            //    Need to reconsider...
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         // but exactly 2 types if any found
         if (typeParams.length != 2) {
-            throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
+            // nominally should specify type parameters found, for better error message;
+            // but would need toString() over JavaTypes etc. Not needed for now.
+            throw new IllegalArgumentException(String.format(
+                    "Cannot construct MapType for class %s with %d type parameters: expected 2",
+                    rawClass.getName(), typeParams.length));
         }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
\ No newline at end of file
