diff --git a/tmp/33e1b692-1874-4ed4-a14b-220074665675_buggy.java b/tmp/0c9d9101-7111-4868-b0c3-497ce8456850_fixed.java
index 1bec4d6..980d899 100644
--- a/tmp/33e1b692-1874-4ed4-a14b-220074665675_buggy.java
+++ b/tmp/0c9d9101-7111-4868-b0c3-497ce8456850_fixed.java
@@ -1,14 +1,35 @@
     private JavaType _mapType(Class<?> rawClass)
     {
         // 28-May-2015, tatu: Properties are special, as per [databind#810]
+        // Handle Properties explicitly as Map<String,String>
+        if (rawClass == Properties.class) {
+            return MapType.construct(rawClass, _stringType, _stringType);
+        }
         JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
         // ok to have no types ("raw")
         if (typeParams == null) {
             return MapType.construct(rawClass, _unknownType(), _unknownType());
         }
         // but exactly 2 types if any found
         if (typeParams.length != 2) {
-            throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
+            // 18-Mar-2017, tatu: Sometimes this happens perhaps due to Reflection weirdness...
+            //   try to determine from super-class?
+            // TODO: try fallback for type determination? For now, punt
+            /* Alternatively, could consider check via `TypeBindings`:
+            JavaType mapType = findSuperType(rawClass, Map.class, TypeBindings.emptyBindings());
+            if (mapType != null) {
+                ...
+            }
+            */
+
+            // Otherwise, let's just consider it raw type
+            // 16-Jan-2018, tatu: As per [databind#1898], should not do this; causes issues
+            //    like thinking `Object` means `String` for properties
+//            return MapType.construct(rawClass, _unknownType(), _unknownType());
+            // 16-Jan-2018, tatu: Let's instead throw an exception, demand type resolution
+            throw new IllegalArgumentException(String.format(
+                    "Cannot find Key/Value type parameterization for Map class %s (expected 2, found %d)",
+                    rawClass.getName(), typeParams.length));
         }
         return MapType.construct(rawClass, typeParams[0], typeParams[1]);
     }
\ No newline at end of file
