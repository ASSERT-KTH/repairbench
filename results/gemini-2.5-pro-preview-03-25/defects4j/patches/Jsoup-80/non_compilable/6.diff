diff --git a/tmp/f7b5f5da-efb7-40b2-a066-72acfff7a705_buggy.java b/tmp/fb42127e-71eb-4c5f-b080-53b6e8f96c8f_fixed.java
index cbfa753..a6ecc48 100644
--- a/tmp/f7b5f5da-efb7-40b2-a066-72acfff7a705_buggy.java
+++ b/tmp/fb42127e-71eb-4c5f-b080-53b6e8f96c8f_fixed.java
@@ -1,15 +1,31 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
             String data = comment.getData();
+            // Ensure data is long enough, starts with ! or ?, and has content after the ! or ?
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
+                String declarationBody = data.substring(1); // Extract content after ? or !
+                // Avoid parsing empty strings like "<>" which can lead to errors.
+                if (!declarationBody.isEmpty()) {
+                    // Parse the declaration content as a standalone XML tag
+                    // Use the baseUri and the XML parser settings inherited from the current parse.
+                    Document doc = Jsoup.parse("<" + declarationBody + ">", baseUri, Parser.xmlParser());
+                    // Check if the parse resulted in a document with at least one child element
+                    if (doc.childrenSize() > 0) { // Use childrenSize() to count Element children
+                        Element el = doc.child(0); // Get the first element child
+                        // Create an XmlDeclaration node (which is a subtype of Node)
+                        // Pass the normalized tag name and whether it started with !
                         insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                        // Copy the attributes from the parsed element to the XmlDeclaration node
                         insert.attributes().addAll(el.attributes());
                     }
+                    // If parsing failed to produce an element (e.g., <? > or malformed content),
+                    // the 'insert' node remains the original Comment, providing fallback behavior.
                 }
+            }
+        }
+        // Insert the determined node (either the original Comment or the created XmlDeclaration)
         insertNode(insert);
     }
\ No newline at end of file
