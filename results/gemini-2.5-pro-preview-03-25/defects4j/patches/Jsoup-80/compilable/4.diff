diff --git a/tmp/e6205568-eed1-4f50-b955-1d6e451e9ff1_buggy.java b/tmp/c2415c71-9f32-484f-890b-9905a02a92b2_fixed.java
index cbfa753..241625c 100644
--- a/tmp/e6205568-eed1-4f50-b955-1d6e451e9ff1_buggy.java
+++ b/tmp/c2415c71-9f32-484f-890b-9905a02a92b2_fixed.java
@@ -1,15 +1,33 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
             String data = comment.getData();
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
+                // grab markup content, may fail if not end >
+                // Example: data = "?xml version='1.0'" -> parseContent = "xml version='1.0"
+                String parseContent = data.substring(1, data.length() - 1);
+                // Avoid parsing empty strings like "<>" which result in doc with no children
+                if (!parseContent.trim().isEmpty()) {
+                    // Use the current document's base uri but a fresh parser.
+                    // Disable error tracking during this hypothetical parse to avoid polluting main parse errors.
+                    Parser parser = Parser.xmlParser().setTrackErrors(0);
+                    Document doc = parser.parseInput("<" + parseContent + ">", baseUri);
+
+                    // Check if parsing produced a root element. It might not if content is invalid,
+                    // e.g. parsing "<>" results in an empty doc.children list.
+                    if (!doc.children().isEmpty()) {
+                        Element el = doc.child(0); // Safely access the first element child
+                        // Create XmlDeclaration with normalized name and attributes extracted from the parsed element
                         insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
                         insert.attributes().addAll(el.attributes());
                     }
+                    // else: parsing failed to produce an element (e.g., from "<>"),
+                    // keep 'insert' as the original Comment node.
+                }
+                // else: parseContent was empty or whitespace, keep 'insert' as the original Comment node.
+            }
         }
         insertNode(insert);
     }
\ No newline at end of file
