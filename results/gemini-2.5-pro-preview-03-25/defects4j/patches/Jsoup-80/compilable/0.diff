diff --git a/tmp/462a6d90-fb1e-49bc-9502-97041bd2dfa9_buggy.java b/tmp/41a6f3c5-3fbb-4902-9d62-ae1ed97eb969_fixed.java
index cbfa753..b945c23 100644
--- a/tmp/462a6d90-fb1e-49bc-9502-97041bd2dfa9_buggy.java
+++ b/tmp/41a6f3c5-3fbb-4902-9d62-ae1ed97eb969_fixed.java
@@ -1,15 +1,96 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
-        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
+        Node insert = comment; // Default node to insert is the original comment
+
+        if (commentToken.bogus) {
             String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+
+            // Handle <?xml... ?> declarations or other PIs mis-tokenized as bogus comments
+            if (data.length() > 1 && data.startsWith("?")) {
+                // data likely looks like "?xml version='1.0'" or similar
+                String coreData = data.substring(1); // Remove leading '?'
+
+                // XML Processing Instructions should end with "?>" but tokenizer might miss it / parse differently
+                // Cleanup potential trailing '?' or '>'
+                if (coreData.endsWith("?>")) {
+                    coreData = coreData.substring(0, coreData.length() - 2);
+                } else if (coreData.endsWith("?") || coreData.endsWith(">")) {
+                    coreData = coreData.substring(0, coreData.length() - 1);
+                }
+                coreData = coreData.trim(); // Trim whitespace
+
+                try {
+                    // Extract the name and attribute payload
+                    int nameEndIdx = coreData.indexOf(' ');
+                    String name;
+                    String attributesPayload;
+
+                    if (nameEndIdx == -1) { // No attributes, e.g., <?xml?>
+                        name = coreData;
+                        attributesPayload = "";
+                    } else {
+                        name = coreData.substring(0, nameEndIdx);
+                        attributesPayload = coreData.substring(nameEndIdx).trim();
+                    }
+
+                    if (!name.isEmpty()) {
+                        // Create the XmlDeclaration node
+                        XmlDeclaration decl = new XmlDeclaration(settings.normalizeTag(name), true); // true because it's a PI <?...>
+
+                        if (!attributesPayload.isEmpty()) {
+                            // Use a dummy element parsed by the XML parser to extract attributes robustly
+                            String dummyTag = "<dummy " + attributesPayload + " />";
+                            // Use a fresh parser instance to avoid interfering with current parse state
+                            Document tempDoc = Jsoup.parse(dummyTag, baseUri, Parser.xmlParser());
+                            Element dummyEl = tempDoc.selectFirst("dummy"); // Find the dummy element
+
+                            if (dummyEl != null) {
+                                // Copy attributes from dummy element to the XmlDeclaration
+                                decl.attributes().addAll(dummyEl.attributes());
+                            }
+                            // If dummy parse failed, decl will have no attributes, which is acceptable fallback
+                        }
+                        insert = decl; // Set the node to insert as the parsed XmlDeclaration
+                    }
+                    // If name is empty after processing, insert remains the original comment.
+
+                } catch (Exception e) {
+                    // On any parsing error, fallback to inserting the original comment node
+                    insert = comment;
+                }
+
+            } else if (data.length() > 1 && data.startsWith("!")) {
+                // Handle <!...> bogus comments (e.g., mis-parsed DOCTYPE)
+                // This section preserves the original logic's intent but adds safety checks
+                // Note: Creating XmlDeclaration for <!DOCTYPE> is semantically incorrect, but
+                // preserves the original code's behavior pattern beyond fixing the specific crash.
+                try {
+                    String coreData = data.substring(1); // Remove leading '!'
+                    // Remove potential trailing '>'
+                    if (coreData.endsWith(">")) {
+                       coreData = coreData.substring(0, coreData.length() -1);
+                    }
+                    coreData = coreData.trim();
+
+                    if (!coreData.isEmpty()) {
+                         // Try parsing the content within a tag, similar to original logic
+                         Document doc = Jsoup.parse("<" + coreData + ">", baseUri, Parser.xmlParser());
+                         // Check that parsing produced at least one child element
+                         if (doc.childNodeSize() > 0 && doc.child(0) instanceof Element) {
                              Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
-                    insert.attributes().addAll(el.attributes());
+                             // Create XmlDeclaration (potentially incorrect type, but matches original logic pattern)
+                             Node newNode = new XmlDeclaration(settings.normalizeTag(el.tagName()), false); // false for isProcessingInstruction for <!...>
+                             newNode.attributes().addAll(el.attributes());
+                             insert = newNode; // Set the node to insert
                          }
+                         // If parsing fails or yields no element, insert remains the original comment.
                     }
-        insertNode(insert);
+                    // If coreData is empty, insert remains the original comment.
+                 } catch (Exception e) {
+                     // On any parsing error, fallback to inserting the original comment node
+                     insert = comment;
+                 }
+            }
+        }
+        insertNode(insert); // Insert the determined node (either parsed node or original comment)
     }
\ No newline at end of file
