diff --git a/tmp/42c9c4e4-d90e-468d-9bbe-f93f1d5a95eb_buggy.java b/tmp/12434118-2182-4078-a440-eb186986b226_fixed.java
index cbfa753..7e0f222 100644
--- a/tmp/42c9c4e4-d90e-468d-9bbe-f93f1d5a95eb_buggy.java
+++ b/tmp/12434118-2182-4078-a440-eb186986b226_fixed.java
@@ -1,15 +1,53 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
+        Node insert = comment; // Default to inserting the comment itself
+
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
             String data = comment.getData();
+            // Check if data looks like <?...> or <!...> and has content after the marker
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
+                // Correctly extract the content, e.g., "xml version='1.0'" from "?xml version='1.0'"
+                // The original code used data.substring(1, data.length() -1), which incorrectly assumed the data ended with a matching '>'.
+                String innerData = data.substring(1);
+
+                // Avoid parsing if innerData is empty, which could happen for "?>" or "!>"
+                if (!innerData.isEmpty()) {
+                    // Parse the inner data wrapped in <> to extract tag name and attributes
+                    // Using a temporary base URI and the XML parser settings
+                    Document doc = Jsoup.parse("<" + innerData + ">", baseUri, Parser.xmlParser());
+                    
+                    // Safely get the first element child, if parsing was successful
+                    // Check body() first as parse() might wrap in html/body implicitly even in xml mode for fragments
+                    Element el = null;
+                    if (doc.body() != null && doc.body().childNodeSize() > 0) {
+                         Node firstChild = doc.body().childNode(0);
+                         if (firstChild instanceof Element) {
+                             el = (Element) firstChild;
+                         }
+                    }
+                    // If not found in body, check doc's direct children (less common for fragment parsing but possible)
+                    if (el == null && doc.childNodeSize() > 0) {
+                        Node firstChild = doc.childNode(0);
+                        if (firstChild instanceof Element) {
+                            el = (Element) firstChild;
+                        }
+                    }
+
+
+                    if (el != null) {
+                        // Successfully parsed the inner data as an element.
+                        // Create the appropriate node (XmlDeclaration or potentially other node types like DocumentType).
+                        // The second arg to XmlDeclaration constructor indicates if it starts with "!", influencing its syntax representation (<? vs <! sort).
                         insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                        // Copy attributes from the parsed element to the new node.
                         insert.attributes().addAll(el.attributes());
                     }
+                    // If el is null, parsing failed or produced no usable elements.
+                    // In this case, 'insert' remains the original Comment node, which is a reasonable fallback.
                 }
+            }
+        }
+        // Insert the determined node (either the parsed XmlDeclaration or the original Comment)
         insertNode(insert);
     }
\ No newline at end of file
