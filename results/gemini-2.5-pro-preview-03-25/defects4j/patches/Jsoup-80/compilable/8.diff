diff --git a/tmp/911c1091-a716-48bc-a74c-c1d123d82297_buggy.java b/tmp/5d4b38d0-f718-4d90-8c76-f4f4170500fc_fixed.java
index cbfa753..6c94f2f 100644
--- a/tmp/911c1091-a716-48bc-a74c-c1d123d82297_buggy.java
+++ b/tmp/5d4b38d0-f718-4d90-8c76-f4f4170500fc_fixed.java
@@ -1,15 +1,41 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
+        Node insert = comment; // Default node to insert
+
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
+            String data = comment.getData(); // E.g., "?xml version='1.0'" or "!DOCTYPE html"
+
+            // Basic validation: must start with ? or ! and have content after it.
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
+                // Extract content: "xml version='1.0'" or "DOCTYPE html"
+                // data.substring(1) is safe due to data.length() > 1 check
+                String content = data.substring(1);
+
+                // Ensure content is not empty or just whitespace before attempting parse
+                // trim() is important to handle cases like "? " or "! "
+                if (!content.trim().isEmpty()) {
+                    // Attempt to parse the content as an element to extract tag name and attributes
+                    // We wrap the content in "<...>" to parse it as a tag.
+                    String parseInput = "<" + content + ">";
+                    Document doc = Jsoup.parse(parseInput, baseUri, Parser.xmlParser());
+
+                    // Check if parsing produced at least one element child.
+                    // This prevents IndexOutOfBoundsException if parse fails or yields unexpected structure (e.g., empty doc).
+                    if (!doc.children().isEmpty()) {
+                        Element el = doc.child(0); // Get the first element child
+                        // Create an XmlDeclaration node. The second arg indicates if it started with '!' (like <!DOCTYPE>)
+                        // The original code used XmlDeclaration for both <?xml...> and <!DOCTYPE...>, so we retain that logic.
+                        // Normalizing the tag name using settings is crucial.
                         insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                        // Copy attributes from the parsed element to the new node
                         insert.attributes().addAll(el.attributes());
                     }
+                    // If parsing failed or resulted in no children (e.g., invalid XML fragment in `content`),
+                    // 'insert' remains the original Comment node, providing a safe fallback.
                 }
+                // If content is empty or whitespace, 'insert' remains the original Comment node.
+            }
+        }
+        // Insert the determined node (either XmlDeclaration or the original Comment)
         insertNode(insert);
     }
