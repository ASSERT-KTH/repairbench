diff --git a/tmp/9daaef1a-beba-45b8-8b47-3da5ec296c81_buggy.java b/tmp/8e550e10-2376-4535-b19f-dbbc8a48c86a_fixed.java
index cbfa753..6bcd9e6 100644
--- a/tmp/9daaef1a-beba-45b8-8b47-3da5ec296c81_buggy.java
+++ b/tmp/8e550e10-2376-4535-b19f-dbbc8a48c86a_fixed.java
@@ -1,15 +1,51 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
+        Node insert = comment; // Default node to insert is the comment itself
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
             String data = comment.getData();
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
+                try {
+                    // Attempt to parse the content as an XML fragment
+                    // Substring data excluding the first and last character (`!` or `?` and potentially `>`)
+                    String declarationContent = data.substring(1);
+                    // Ensure we don't pass an empty string to parse, which can lead to issues.
+                    // Also, check if the content looks like a valid tag name start.
+                    if (declarationContent.length() > 0 && !Character.isWhitespace(declarationContent.charAt(0))) {
+                        // Wrap in < > to make it look like an XML tag for parsing
+                        // Use data.substring(1) assuming the token data includes the ?, but not necessarily the >.
+                        // Example: <?xml version="1.0"> token data might be "?xml version="1.0"" or "?xml version="1.0">"
+                        // Parsing <xml version="1.0"> should work.
+                        // Let's refine substring logic: remove first char, assume rest is content ending optionally with >
+                        // If it ends with '>', remove it for parsing.
+                        if (declarationContent.endsWith(">")) {
+                            declarationContent = declarationContent.substring(0, declarationContent.length() - 1);
+                        }
+
+                        // Ensure the string to parse is not empty after potentially removing '>'
+                        if (!declarationContent.isEmpty()) {
+                             Document doc = Jsoup.parse("<" + declarationContent + ">", baseUri, Parser.xmlParser());
+                             if (doc.childNodeSize() > 0) { // Check if parsing produced any nodes
+                                 Node child = doc.childNode(0);
+                                 // Check if the first node is an Element (expected for declarations like <?xml...>)
+                                 if (child instanceof Element) {
+                                     Element el = (Element) child;
+                                     // Create XmlDeclaration from the parsed element
                                      insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
                                      insert.attributes().addAll(el.attributes());
                                  }
+                                 // If child(0) is not an Element (e.g., <?...> contained only text), 'insert' remains the original Comment (fallback)
                              }
-        insertNode(insert);
+                             // If parsing produced no nodes (e.g., <? >), 'insert' remains the original Comment (fallback)
+                        }
+                    }
+                } catch (Exception e) {
+                    // If any error occurs during parsing (e.g., invalid XML fragment),
+                    // fall back to inserting the original comment.
+                    // Log error? For now, just fallback.
+                    // insert = comment; // already the default
+                }
+            }
+        }
+        insertNode(insert); // Insert either XmlDeclaration or the original Comment
     }
\ No newline at end of file
