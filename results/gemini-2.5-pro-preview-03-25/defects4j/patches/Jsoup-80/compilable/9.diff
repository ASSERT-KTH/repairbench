diff --git a/tmp/787e60cf-7bfb-499e-a5eb-5fbafb1cd473_buggy.java b/tmp/2bdb16b3-90dc-471e-98e7-b1cd962d6fc5_fixed.java
index cbfa753..f919dc1 100644
--- a/tmp/787e60cf-7bfb-499e-a5eb-5fbafb1cd473_buggy.java
+++ b/tmp/2bdb16b3-90dc-471e-98e7-b1cd962d6fc5_fixed.java
@@ -1,15 +1,37 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
             String data = comment.getData();
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+                try {
+                    // Remove the first character (? or !)
+                    String declarationContent = data.substring(1);
+                    // Check if content is empty or blank, which would lead to invalid tag like "<>"
+                    if (declarationContent.trim().isEmpty()) {
+                         // If content is empty/blank, fallback to inserting the original comment node.
+                         // The 'insert' variable already holds the comment node.
+                    } else {
+                        // Parse the content as an XML fragment, wrapped in "<>"
+                        Document doc = Jsoup.parse("<" + declarationContent + ">", baseUri, Parser.xmlParser());
+                        // Check if the parsing resulted in a valid element
+                        if (doc.children().size() > 0) {
                             Element el = doc.child(0);
+                            // Create an XmlDeclaration node
                             insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                            // Copy attributes from the parsed element
                             insert.attributes().addAll(el.attributes());
                         }
+                        // If doc had no children (e.g., parsed fragment was empty or invalid like "<>"),
+                        // 'insert' remains the original comment node.
+                    }
+                } catch (Exception e) {
+                    // In case of any parsing errors, fallback to inserting the original comment.
+                    // 'insert' remains the original comment node.
+                    // Consider logging the exception e if necessary for debugging.
+                }
+            }
         }
         insertNode(insert);
     }
\ No newline at end of file
