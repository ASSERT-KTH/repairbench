diff --git a/tmp/545f977a-a9b9-49ce-a618-a779560d1585_buggy.java b/tmp/483ac74d-e8a9-4f54-aab2-7d00e16a89d7_fixed.java
index cbfa753..a8e6df0 100644
--- a/tmp/545f977a-a9b9-49ce-a618-a779560d1585_buggy.java
+++ b/tmp/483ac74d-e8a9-4f54-aab2-7d00e16a89d7_fixed.java
@@ -1,15 +1,60 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
+        Node insert = comment; // Default node is the comment itself
+
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
+            // try to parse as XML Declaration or other declaration <!...>
             String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+            String coreData = data; // Data to parse
+            boolean isProcessingInstruction = false; // <?...> vs <!...>
+
+            // Try to determine the type and extract core data based on common patterns from Tokeniser state machine:
+            // CommentEndBang: <?foo?> -> data="foo?" (bogus=true)
+            // MarkupDeclarationOpen: <?foo?> -> data="?foo?" (bogus=true) -- this seems more likely per original code's check
+            //                          <!foo> -> data="!foo" (bogus=true)
+            // If input is <?xml version='1.0'> -> Tokeniser might emit data="xml version='1.0'" with bogus=true (needs verification, but test implies this)
+            if (data.length() > 1) { // Need at least 2 chars to determine e.g. "?x"
+                if (data.startsWith("?")) { // Data like "?foo?" from <?foo?>
+                    isProcessingInstruction = true;
+                    // Strip leading '?' and potential trailing '?'
+                    if (data.endsWith("?") && data.length() >= 2)
+                        coreData = data.substring(1, data.length() - 1);
+                    else
+                        coreData = data.substring(1); // Strip only leading '?'
+                } else if (data.startsWith("!")) { // Data like "!foo" from <!foo>
+                    isProcessingInstruction = false;
+                    // Strip leading '!'
+                    coreData = data.substring(1);
+                } else if (data.toLowerCase().startsWith("xml")) {
+                    // Handle case where Tokeniser might provide "xml version='1.0'" for <?xml...>
+                    // Check this case *before* checking data.endsWith(">") test below if that test is added.
+                    // No leading '?' or '!', but looks like an XML decl. Assume it's <?xml?>
+                    isProcessingInstruction = true;
+                    coreData = data; // Use data as is
+                    // If tokenizer includes trailing '>', like "xml version='1.0'>", handle it:
+                    if (data.endsWith(">")) {
+                        coreData = data.substring(0, data.length() - 1);
+                    }
+                }
+                // Note: The original code also had data.substring(1, data.length() -1), implying it expected
+                // both start and end characters to be stripped. This logic handles cases more flexibly.
+            }
+
+            // If coreData is not empty, try parsing it as an element tag
+            // Use a self-closing tag format `<coreData />` for parsing robustness
+            if (!coreData.isEmpty()) {
+                Document doc = Jsoup.parse("<" + coreData + " />", baseUri, Parser.xmlParser());
+                // Check if parsing produced a child element
+                if (doc.childNodeSize() > 0 && doc.childNode(0) instanceof Element) {
+                    Element el = (Element) doc.childNode(0);
+                    // Create an XmlDeclaration node (used for both <?...> PI and <!...> Declaration types in Jsoup)
+                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), isProcessingInstruction);
                     insert.attributes().addAll(el.attributes());
                 }
+                // else: parsing failed or produced unexpected nodes (like text), leave insert as the original comment
             }
-        insertNode(insert);
+            // else: coreData was empty after stripping, leave insert as the original comment
+        }
+
+        insertNode(insert); // Insert the determined node (Comment or XmlDeclaration)
     }
\ No newline at end of file
