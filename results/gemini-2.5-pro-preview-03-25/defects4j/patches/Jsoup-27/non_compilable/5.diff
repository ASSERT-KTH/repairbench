diff --git a/tmp/a5ccfea1-4e26-4274-b46a-a00910fd502c_buggy.java b/tmp/9c173494-bfc2-42e9-80c7-dfec2b428495_fixed.java
index 7fb120e..fed2ea2 100644
--- a/tmp/a5ccfea1-4e26-4274-b46a-a00910fd502c_buggy.java
+++ b/tmp/9c173494-bfc2-42e9-80c7-dfec2b428495_fixed.java
@@ -1,16 +1,60 @@
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern; // Assuming charsetPattern is a static Pattern field defined elsewhere in the class
+
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+     * @return "EUC-JP", or null if not found or not supported. Charset is trimmed and case is preserved.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+
+        // charsetPattern is assumed to be a static Pattern field initialized elsewhere.
+        // It needs to capture the charset value in group 1.
+        // A simple pattern that might be used: Pattern.compile("(?i)\\bcharset=([^;]*)")
+        // This code assumes group(1) may contain the value, possibly with quotes.
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
-            String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            String charset = m.group(1); // Get the captured value
+            if (charset == null) { // Defensive check
+                 return null;
+            }
+            charset = charset.trim(); // Trim surrounding whitespace
+
+            // Remove paired quotes (double or single) from the extracted value
+            if (charset.length() > 1) { // Check if it can possibly be quoted
+                if (charset.startsWith("\"") && charset.endsWith("\"")) {
+                    charset = charset.substring(1, charset.length() - 1);
+                } else if (charset.startsWith("'") && charset.endsWith("'")) {
+                    charset = charset.substring(1, charset.length() - 1);
+                }
+                // Trim again in case of whitespace inside quotes like charset=" UTF-8 "
+                charset = charset.trim();
+            }
+
+            // After cleaning (trimming, quote removal), check if empty
+            if (charset.isEmpty()) {
+                return null;
+            }
+
+            // Validate the charset name and check if it's supported.
+            try {
+                if (Charset.isSupported(charset)) {
+                    // Return the original case as found in the header (after cleaning)
                     return charset;
+                } else {
+                    // Charset specified, but not supported by the JVM
+                    return null;
+                }
+            } catch (IllegalCharsetNameException e) {
+                // The charset name has invalid syntax
+                return null;
+            }
         }
+        // No charset parameter found in the Content-Type header
         return null;
     }
\ No newline at end of file
