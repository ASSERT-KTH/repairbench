diff --git a/tmp/d3a674ef-5951-4113-b3ea-d452dfce8332_buggy.java b/tmp/2fffdea6-a8ca-4869-9a43-09dbbcbc9a47_fixed.java
index 7fb120e..d5c6a1b 100644
--- a/tmp/d3a674ef-5951-4113-b3ea-d452dfce8332_buggy.java
+++ b/tmp/2fffdea6-a8ca-4869-9a43-09dbbcbc9a47_fixed.java
@@ -1,16 +1,71 @@
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.UnsupportedCharsetException;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
     /**
-     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
-     * will kick in.)
+     * Parse out a charset from a content type header.
      * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+     * @return The extracted charset name, trimmed and unquoted, if supported by the JVM, otherwise null.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+
+        // A robust pattern for matching charset values, including quoted ones.
+        // Assumes charsetPattern is a pre-compiled Pattern like:
+        // Pattern.compile("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)?\"?");
+        // If charsetPattern is simpler, the quote removal logic below handles it.
+        // Let's stick to the original code's structure where charsetPattern is external.
+        // Assume charsetPattern is defined elsewhere, e.g., as a static field.
+        // private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*([^;]*)"); // Example if simpler pattern used
+
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
-            String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            String charset = m.group(1); // Get the captured group (the charset value)
+            if (charset != null) {
+                charset = charset.trim(); // Trim leading/trailing whitespace
+
+                // Remove surrounding quotes (double or single) if present
+                if (charset.length() > 1) {
+                    if ((charset.startsWith("\"") && charset.endsWith("\""))
+                            || (charset.startsWith("'") && charset.endsWith("'"))) {
+                        // Substring to remove the first and last characters (the quotes)
+                        charset = charset.substring(1, charset.length() - 1);
+                        // Trim again in case there were spaces inside the quotes like charset=" utf-8 "
+                        charset = charset.trim();
+                    }
+                }
+
+                // Validate charset: Check if it's empty or unsupported
+                if (charset.isEmpty()) {
+                    return null; // Return null if charset value is empty after trimming/unquoting
+                }
+
+                try {
+                    // Check if the charset is supported by the current Java virtual machine.
+                    // This check works regardless of the case of the charset string.
+                    if (Charset.isSupported(charset)) {
+                        // Return the original case charset name as extracted and processed
                         return charset;
                     }
+                } catch (IllegalCharsetNameException e) {
+                    // If the charset name is syntactically invalid (e.g., contains illegal characters)
                     return null;
                 }
+                // UnsupportedCharsetException is not thrown by isSupported, but good practice
+                // if using forName. Since we return based on isSupported, we don't strictly need the catch block
+                // unless some JVMs behave differently, but keeping it makes it slightly more robust.
+                // If isSupported returns false, fall through to return null.
+            }
+        }
+        // Return null if no charset= part found, or if the extracted charset is null, empty, or unsupported.
+        return null;
+    }
+
+    // Assume charsetPattern is defined somewhere in the class like:
+    // import java.util.regex.Pattern;
+    // private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)?\"?");
+    // Or a simpler one that requires the quote removal logic:
+    private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*([^;]*)");
