diff --git a/tmp/04ce0f51-eb71-4d4a-a822-b34c4285dcd3_buggy.java b/tmp/f285d014-b03d-4da8-b867-d18dbdbb744b_fixed.java
index 7fb120e..7357da0 100644
--- a/tmp/04ce0f51-eb71-4d4a-a822-b34c4285dcd3_buggy.java
+++ b/tmp/f285d014-b03d-4da8-b867-d18dbdbb744b_fixed.java
@@ -1,16 +1,45 @@
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.UnsupportedCharsetException;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+// Assuming charsetPattern is defined elsewhere in the class, e.g.:
+// private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*(?:\"|')?([^\\s,;\"']*)");
+// This pattern captures the charset value potentially after quotes, but not the quotes themselves.
+
     /**
-     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
-     * will kick in.)
+     * Parse out a charset from a content type header.
      * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+     * @return "EUC-JP", or null if not found, empty, or not supported. Charset is trimmed; casing is preserved.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+
+        // Note: assumes charsetPattern is a static Pattern field in the enclosing class
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
-            String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            String charset = m.group(1); // Group 1 captures the charset name without quotes
+            if (charset != null) {
+                charset = charset.trim();
+                if (charset.isEmpty())
+                    return null;
+
+                try {
+                    // Check if the charset is supported, preserving the original case.
+                    if (Charset.isSupported(charset)) {
                         return charset;
                     }
+                    // The original code uppercased the charset. While tests indicate original case is preferred,
+                    // java.nio charset lookup *can* be case-sensitive depending on implementation/platform details,
+                    // though standard names are usually case-insensitive. Let's not uppercase unless proven necessary,
+                    // as test failures specifically point against it for utf-8/UTF-8 cases.
+                } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {
+                    // If the charset name is syntactically invalid or unsupported
                     return null;
                 }
+            }
+        }
+        return null; // Return null if charset parameter not found or unsupported
+    }
