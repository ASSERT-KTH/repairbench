diff --git a/tmp/9ae4cca3-d86c-4ebc-95f7-559807315270_buggy.java b/tmp/b22e058f-ca0c-4448-bac7-b8d9fe1729e5_fixed.java
index 7fb120e..8a890e5 100644
--- a/tmp/9ae4cca3-d86c-4ebc-95f7-559807315270_buggy.java
+++ b/tmp/b22e058f-ca0c-4448-bac7-b8d9fe1729e5_fixed.java
@@ -1,16 +1,50 @@
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.UnsupportedCharsetException;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+// Note: The surrounding class structure and the definition of charsetPattern 
+// (assumed to be Pattern.compile("(?i)\\bcharset=\\s*(?:\"|')?([^\\s,;\"']*)")) 
+// are omitted as per the requirement to only provide the fixed function.
+
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+     * @return "EUC-JP", or null if not found or not supported. Charset is trimmed and retains original case.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+        // Assuming charsetPattern is a static final Pattern field in the same class, e.g.:
+        // private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*(?:\"|')?([^\\s,;\"']*)");
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
             String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            // Removed the conversion to uppercase: charset = charset.toUpperCase(Locale.ENGLISH);
+            // This addresses the test failures where original casing was expected.
+
+            // Return null if charset is empty after trimming
+            if (charset.length() == 0)
+                return null;
+
+            try {
+                // Check if the charset is supported by the JVM, retaining original case
+                if (Charset.isSupported(charset)) {
                     return charset;
                 }
+                // The tests expect null for "Unknown" and "Unsupported", 
+                // so checking for support is necessary.
+            } catch (IllegalCharsetNameException e) {
+                // If the extracted charset string is not a legal charset name, return null.
+                return null;
+            } catch (UnsupportedCharsetException e) {
+                 // Should not be thrown by isSupported, but catch defensively.
+                 return null;
+            }
+            // If isSupported returned false, return null.
+            return null; 
+        }
         return null;
     }
\ No newline at end of file
