diff --git a/tmp/319346e9-fee3-4ce0-ab86-e8f27d2fa707_buggy.java b/tmp/8bcd05c0-0161-463a-8743-b88fd4ca09ef_fixed.java
index 7fb120e..663af2c 100644
--- a/tmp/319346e9-fee3-4ce0-ab86-e8f27d2fa707_buggy.java
+++ b/tmp/8bcd05c0-0161-463a-8743-b88fd4ca09ef_fixed.java
@@ -1,16 +1,55 @@
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.UnsupportedCharsetException;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern; // Assuming this is imported if charsetPattern is defined here
+
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased. // Note: Uppercasing removed based on test failures.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+
+        // Assuming charsetPattern is defined elsewhere in the class, e.g.:
+        // private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)");
+        // Or a pattern that captures the value in group 1, potentially including quotes.
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
-            String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            String charset = m.group(1).trim(); // Extract charset string
+
+            // Remove surrounding quotes if present (handles charset="UTF-8" case)
+            if (charset.length() >= 2) { // Need at least two characters for quotes
+                 boolean isQuoted = (charset.startsWith("\"") && charset.endsWith("\""))
+                               || (charset.startsWith("'") && charset.endsWith("'"));
+                 if (isQuoted) {
+                     charset = charset.substring(1, charset.length() - 1);
+                     // Trim again in case of internal spaces like " utf-8 "
+                     charset = charset.trim();
+                 }
+            }
+
+
+            // An empty string is not a valid charset
+            if (charset.isEmpty()) {
+                return null;
+            }
+
+            // Check if the charset is supported by the JVM.
+            // Charset.isSupported() checks for both valid syntax and availability.
+            // It returns false for invalid names (IllegalCharsetNameException)
+            // and unsupported charsets (UnsupportedCharsetException).
+            if (Charset.isSupported(charset)) {
+                // Return the cleaned, potentially unquoted charset name, preserving original case
+                // This fixes the test failures where "utf-8" was expected instead of "UTF-8".
                 return charset;
-        }
+            } else {
+                // Charset not supported or invalid name
                 return null;
             }
+        }
+        return null; // charset attribute not found in the input string
+    }
