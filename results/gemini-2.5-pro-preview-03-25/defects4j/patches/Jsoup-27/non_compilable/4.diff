diff --git a/tmp/51cba072-dfa5-44a0-820b-b99a4cdd42f0_buggy.java b/tmp/bec01ff2-2eb0-4b28-aee2-ffe9fb266e93_fixed.java
index 7fb120e..b392176 100644
--- a/tmp/51cba072-dfa5-44a0-820b-b99a4cdd42f0_buggy.java
+++ b/tmp/bec01ff2-2eb0-4b28-aee2-ffe9fb266e93_fixed.java
@@ -1,16 +1,55 @@
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern; // Assuming charsetPattern is a static Pattern field in the same class
+
     /**
-     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
-     * will kick in.)
+     * Parse out a charset from a content type header.
      * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+     * @return "EUC-JP", or null if not found or not supported. Charset is trimmed and returned case-inherit.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+        
+        // Use the existing charsetPattern (assumed to be defined elsewhere)
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
+            // Extract the charset name - group 1 must capture the value part
             String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            
+            // Remove surrounding quotes (single or double) if present
+            if (charset.length() > 1) { // Need at least 2 chars for quotes
+                 if ((charset.startsWith("\"") && charset.endsWith("\""))
+                         || (charset.startsWith("'") && charset.endsWith("'"))) {
+                     charset = charset.substring(1, charset.length() - 1);
+                     // Trim again in case of spaces within quotes like " utf-8 "
+                     charset = charset.trim();
+                 }
+            }
+
+            // Ensure charset name is not empty after cleaning
+            if (charset.length() == 0) {
+                return null;
+            }
+
+            // Check if the charset is supported by the JVM. We want to return null if
+            // the JVM does not support it, so the default charset can be used instead.
+            // This also catches invalid charset names.
+            try {
+                if (Charset.isSupported(charset)) {
+                    // Return the charset name, preserving its original case
                     return charset;
+                } else {
+                    // Return null if the charset is explicitly known to be unsupported
+                    return null;
+                }
+            } catch (IllegalCharsetNameException e) {
+                // Return null if the charset name is syntactically invalid
+                return null;
+            }
         }
+        
+        // Return null if the charset pattern is not found in the content type string
         return null;
     }
