diff --git a/tmp/ca351aa4-75bb-460e-bb4b-834e7ac4e188_buggy.java b/tmp/40dc6d6b-74f6-45c2-83ed-1f6e461e8956_fixed.java
index 7fb120e..1f96eaa 100644
--- a/tmp/ca351aa4-75bb-460e-bb4b-834e7ac4e188_buggy.java
+++ b/tmp/40dc6d6b-74f6-45c2-83ed-1f6e461e8956_fixed.java
@@ -1,16 +1,57 @@
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern; // Import needed for Matcher and Pattern if charsetPattern is defined here
+
     /**
-     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
-     * will kick in.)
+     * Parse out a charset from a content type header.
      * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+     * @return The parsed charset name, or null if not found, empty, or unsupported. Case is preserved if supported.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+
+        // Assuming charsetPattern is a static Pattern field defined elsewhere in the class.
+        // It should capture the charset value in group 1. Examples:
+        // Pattern.compile("(?i)\\bcharset=\\s*([^;]*)"); // Simple version, might capture quotes
+        // Pattern.compile("(?i)\\bcharset=\\s*(?:[\"'])?([^\\s;\"']*)"); // More robust, excludes quotes from group
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
-            String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
+            String charset = m.group(1).trim(); // Extract and trim whitespace
+
+            // Remove optional leading/trailing quotes (double or single)
+            // Necessary if the regex might capture quotes (like the simple version above)
+            if (charset.length() > 1) {
+               if ((charset.startsWith("\"") && charset.endsWith("\""))
+                 || (charset.startsWith("'") && charset.endsWith("'"))) {
+                    // Substring to remove quotes and trim again in case of spaces inside quotes
+                    charset = charset.substring(1, charset.length() - 1).trim();
+               }
+            }
+
+            // Previous version converted to uppercase, causing test failures:
+            // charset = charset.toUpperCase(Locale.ENGLISH);
+
+            // Return null if charset name is empty after trimming/quote removal
+            if (charset.isEmpty()) {
+                return null;
+            }
+
+            try {
+                // Validate that the charset is supported by the JVM.
+                // This check ensures we return null for unsupported values like "Unknown" or "Unsupported".
+                if (Charset.isSupported(charset)) {
+                    // Return the charset name, preserving its original case, as required by tests.
                     return charset;
+                } else {
+                    return null; // Charset not supported
                 }
+            } catch (IllegalCharsetNameException e) {
+                // The charset name has invalid syntax (e.g., contains illegal characters)
+                return null;
+            }
+        }
+        // No "charset=" found in the content type string
         return null;
     }
\ No newline at end of file
