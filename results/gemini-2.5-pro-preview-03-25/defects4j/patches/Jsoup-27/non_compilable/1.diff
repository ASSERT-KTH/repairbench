diff --git a/tmp/f6e58f65-3449-4465-a287-6ecfdf74275b_buggy.java b/tmp/ecc29621-97a1-4f59-a45b-2df35b8148fd_fixed.java
index 7fb120e..248d76d 100644
--- a/tmp/f6e58f65-3449-4465-a287-6ecfdf74275b_buggy.java
+++ b/tmp/ecc29621-97a1-4f59-a45b-2df35b8148fd_fixed.java
@@ -1,16 +1,60 @@
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.UnsupportedCharsetException;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern; // Assuming charsetPattern is a static field of this type
+
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+     * @return "EUC-JP", or null if not found or not supported. Charset is trimmed.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
+
+        // Note: The effectiveness of this method depends on the definition of charsetPattern.
+        // Assuming a pattern like: Pattern.compile("(?i)\\bcharset=\\s*([^;]+)")
+        // This pattern captures the value after 'charset=' up to the next semicolon or end of string.
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
-            String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
-            return charset;
+            String charset = m.group(1); // Extract the potentially quoted charset value.
+            if (charset == null) { // Defensive check, should not happen with typical regex group(1)
+                 return null;
+            }
+            charset = charset.trim(); // Trim leading/trailing whitespace.
+
+            // Remove surrounding quotes (single or double) if present.
+            if (charset.length() > 1) {
+                if ((charset.startsWith("'") && charset.endsWith("'"))
+                        || (charset.startsWith("\"") && charset.endsWith("\""))) {
+                    // Extract content within quotes.
+                    charset = charset.substring(1, charset.length() - 1);
+                    // Trim again in case of whitespace inside quotes: charset=" utf-8 "
+                    charset = charset.trim();
+                }
+            }
+
+            // After cleaning, check if the result is empty.
+            if (charset.isEmpty()) {
+                return null;
+            }
+
+            // Validate the extracted charset name.
+            try {
+                // Charset.forName() checks if the charset is supported and throws
+                // exceptions for invalid or unsupported names.
+                if (Charset.isSupported(charset)) // Use isSupported for check first
+                    return charset; // Return the original case version if supported.
+                // Some systems might support a charset name but isSupported returns false, try forName as fallback/confirmation
+                Charset.forName(charset);
+                return charset; // Return the original case version if supported by forName.
+            } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {
+                // If the charset name is syntactically invalid or the charset is unsupported, return null.
+                return null;
+            }
         }
+        // No charset found in the content type header.
         return null;
     }
\ No newline at end of file
