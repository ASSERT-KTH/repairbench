diff --git a/tmp/a448e51d-304e-4948-bc8b-2904478eae44_buggy.java b/tmp/12b003a6-24cb-44f7-acad-2f69e0196165_fixed.java
index 7c9c72e..13d7389 100644
--- a/tmp/a448e51d-304e-4948-bc8b-2904478eae44_buggy.java
+++ b/tmp/12b003a6-24cb-44f7-acad-2f69e0196165_fixed.java
@@ -1,93 +1,147 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is not {@code null}, this is an index into the {@code chars} array.
+     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is not {@code null}, this is an index into the {@code chars} array.
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     *  {@code (end - start) + 1} characters in the set array, or if {@code end > chars.length}.
+     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided {@code chars} array is empty, or {@code end <= start}.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        // Check for empty chars array early, as it affects start/end logic and is an invalid argument.
+        if (chars != null && chars.length == 0) {
+             throw new IllegalArgumentException("The provided chars array is empty.");
+        }
 
-        if (start == 0 && end == 0) {
+        boolean isStartAndEndZero = start == 0 && end == 0;
+
+        if (chars == null) { // No specific character set provided, use character codes
+            if (isStartAndEndZero) {
                 if (!letters && !numbers) {
+                    // Original behavior: Use a very large range, effectively up to max char value due to casting later
+                    // This range does not correctly handle surrogate pairs or code points beyond 0xFFFF
                     end = Integer.MAX_VALUE;
+                    start = 0;
                 } else {
+                    // Default printable ASCII range
                     end = 'z' + 1;
                     start = ' ';
                 }
+            } else if (end <= start) {
+                // Check for invalid range
+                throw new IllegalArgumentException(
+                        "Parameter end (" + end + ") must be greater than start (" + start + ")");
+            }
+        } else { // Specific character set IS provided, start/end are indices
+            if (isStartAndEndZero) {
+                // Default to using the entire provided char array
+                start = 0; // Set start first
+                end = chars.length; // end is exclusive index
+            } else {
+                // Validate provided start/end against chars array bounds
+                if (end > chars.length) {
+                    throw new ArrayIndexOutOfBoundsException(
+                         "Parameter end (" + end + ") must not be greater than the length of chars (" + chars.length + ")");
+                }
+                // start is inclusive, end is exclusive. So start must be < end.
+                if (start >= end) { 
+                     throw new IllegalArgumentException(
+                         "Parameter end (" + end + ") must be greater than start (" + start + ")");
+                }
+                // start < 0 check is implicitly covered if start < end and end >= 0 (which holds if end <= chars.length)
+            }
         }
 
         char[] buffer = new char[count];
+        // Calculate gap *after* start/end are finalized. Represents number of choices.
         int gap = end - start;
 
         while (count-- != 0) {
-            char ch;
+            int randomIndex; // Renamed from 'ch' in the original code where it was confusingly used for index/codepoint too
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                // Generate a random integer within the range [start, end)
+                randomIndex = random.nextInt(gap) + start;
+                // Treat randomIndex as a potential character code point (though flawed due to cast and surrogate handling)
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                // Generate a random index within the range [start, end) for the chars array
+                randomIndex = random.nextInt(gap) + start;
             }
+
+            char ch; // The character to potentially add to the buffer
+            if (chars == null) {
+                 // Cast the potential code point to char. This truncates supplementary characters.
+                 ch = (char) randomIndex;
+            } else {
+                 // Select character from the provided `chars` array using the generated index
+                 ch = chars[randomIndex]; // This is now safe due to earlier checks and corrected range logic
+            }
+
+
+            // Apply filters (letters/numbers) based on the generated character 'ch'
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                    || !letters && !numbers) { // If no filters, always include
+
+                if (chars == null && ch >= 56320 && ch <= 57343) { // Low surrogate generated directly when chars is null
+                    if (count == 0) { // Not enough space left to insert a pair
+                        count++; // Retry to get a different character
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
+                        // Insert surrogate pair (chosen low surrogate + random high surrogate)
                         buffer[count] = ch;
                         count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // Random high surrogate
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if (chars == null && ch >= 55296 && ch <= 56191) { // High surrogate generated directly when chars is null
+                    if (count == 0) { // Not enough space left to insert a pair
+                        count++; // Retry
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
+                        // Insert surrogate pair (chosen high surrogate + random low surrogate)
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // Random low surrogate
                         count--;
                         buffer[count] = ch;
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
+                } else if (chars == null && ch >= 56192 && ch <= 56319) { // Private high surrogate generated directly when chars is null
+                    // Skip and retry - these should not be generated alone
                     count++;
                 } else {
+                    // Character is valid (BMP, or from chars array, or surrogate pair handled above)
+                    // or it's a surrogate picked from the chars array (which is allowed)
                     buffer[count] = ch;
                 }
             } else {
+                // Character did not meet letters/numbers criteria, retry
                 count++;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
