diff --git a/tmp/765f7dd5-cb98-4c17-a4fc-276aa95a4283_buggy.java b/tmp/f07da43d-056d-4fca-9d99-649aa518035e_fixed.java
index 7c9c72e..e464624 100644
--- a/tmp/765f7dd5-cb98-4c17-a4fc-276aa95a4283_buggy.java
+++ b/tmp/f07da43d-056d-4fca-9d99-649aa518035e_fixed.java
@@ -1,93 +1,136 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at. If {@code chars} is {@code null}, this is the starting code point. If {@code chars} is not {@code null}, this is the starting index in the {@code chars} array.
+     * @param end  the position in set of chars to end before. If {@code chars} is {@code null}, this is the ending code point (exclusive). If {@code chars} is not {@code null}, this is the ending index in the {@code chars} array (exclusive).
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
+     *  If {@code null}, then it will use the set of all chars based on {@code start}/{@code end} code points.
      * @param random  a source of randomness.
      * @return the random string
-     * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     * @throws ArrayIndexOutOfBoundsException if {@code start} or {@code end} are out of bounds for the {@code chars} array.
+     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided {@code chars} array is empty, or {@code end <= start}.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        // Check chars array before manipulating start/end based on its properties
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The Array of chars must not be empty");
+        }
 
-        if (start == 0 && end == 0) {
+        int E = end; // Use local copies of start/end to allow modification for defaults
+        int S = start;
+
+        if (chars == null) {
+            // Case 1: Generate characters based on code points
+            if (S == 0 && E == 0) {
+                // Default range: ASCII printable or full range
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    // Original code used Integer.MAX_VALUE. Sticking to it for minimal change,
+                    // although Character.MAX_CODE_POINT+1 would be more correct for full Unicode.
+                    // The generation logic (casting to char) is flawed for supplementary chars anyway.
+                    E = Integer.MAX_VALUE;
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    E = 'z' + 1; // exclusive
+                    S = ' ';     // inclusive
                 }
+            } else if (E <= S) {
+                // Explicitly provided range must be valid (end > start)
+                throw new IllegalArgumentException("Parameter end (" + E + ") must be greater than start (" + S + ")");
+            }
+        } else {
+            // Case 2: Generate characters by picking from the 'chars' array using indices
+            if (S == 0 && E == 0) {
+                // Default range: Use the entire 'chars' array
+                E = chars.length; // end index is exclusive
+                S = 0;            // start index is inclusive
+                // No need to check E <= S here, as array is non-empty (checked above).
+            } else if (E <= S) {
+                 // Explicitly provided range must be valid (end > start)
+                 throw new IllegalArgumentException("Parameter end (" + E + ") must be greater than start (" + S + ")");
+            }
+            // Note: Bounds check for S and E against chars.length is implicit.
+            // Accessing chars[random.nextInt(gap) + S] will throw AIOOBE if S < 0 or S >= chars.length
+            // or if E > chars.length leading to an index >= chars.length.
+            // This matches the Javadoc's mention of AIOOBE.
         }
 
         char[] buffer = new char[count];
-        int gap = end - start;
+        int gap = E - S; // The number of values (codepoints or indices) to choose from
 
-        while (count-- != 0) {
+        while (count-- != 0) { // Decrement count after checking condition
             char ch;
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                // Generate a random integer in [S, E) and cast to char
+                // Flawed for supplementary characters, but consistent with original code.
+                ch = (char) (random.nextInt(gap) + S);
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                // Generate a random index in [S, E) and get char from array
+                // This was the source of the AIOOBE in the original code.
+                ch = chars[random.nextInt(gap) + S];
             }
-            if (letters && Character.isLetter(ch)
-                    || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
+
+            // Apply filters (letters/numbers)
+            if ( (letters && Character.isLetter(ch))
+                    || (numbers && Character.isDigit(ch))
+                    || (!letters && !numbers) ) {
+
+                // Original surrogate handling logic. Applied regardless of 'chars' parameter.
+                // This block attempts to fix issues if a lone surrogate was generated,
+                // particularly in the (chars == null) case. It modifies 'count' to retry or insert pairs.
+                if(ch >= 56320 && ch <= 57343) { // ch is a low surrogate
                     if(count == 0) {
-                        count++;
+                        count++; // Need space for companion high surrogate, retry last char
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
+                        // Add low surrogate, then randomly generate and add high surrogate before it
                         buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        count--; // Use previous buffer spot
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // Random high surrogate
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
+                } else if(ch >= 55296 && ch <= 56191) { // ch is a high surrogate
                     if(count == 0) {
-                        count++;
+                        count++; // Need space for companion low surrogate, retry last char
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
+                        // Add randomly generated low surrogate, then add high surrogate before it
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // Random low surrogate
+                        count--; // Use previous buffer spot
                         buffer[count] = ch;
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
+                } else if(ch >= 56192 && ch <= 56319) { // Private Use Area high surrogate?
+                    // Skip this character, retry
                     count++;
                 } else {
+                    // ch is a valid non-surrogate char, add it to buffer
                     buffer[count] = ch;
                 }
             } else {
+                // Filter failed (e.g., requested letters only, got a digit), retry
                 count++;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
