diff --git a/tmp/753c1ce3-559c-4811-a692-039ab2729927_buggy.java b/tmp/502ef459-2001-49a8-a0b1-ad2b6ac8abbd_fixed.java
index 7c9c72e..7757837 100644
--- a/tmp/753c1ce3-559c-4811-a692-039ab2729927_buggy.java
+++ b/tmp/502ef459-2001-49a8-a0b1-ad2b6ac8abbd_fixed.java
@@ -1,93 +1,149 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is not {@code null}, this is an index into the array.
+     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is not {@code null}, this is an index into the array.
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
+     *  If {@code null}, then it will use the set of all chars within the range defined by {@code start} and {@code end}.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
+     *  {@code (end - start)} characters in the set array, or if {@code start} or {@code end} are out of bounds.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        // This validation needs to happen *before* the start/end adjustments
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The chars array must not be empty");
+        }
 
+        int effectiveStart = start;
+        int effectiveEnd = end;
+        int gap;
+
+        if (chars == null) {
+            // Using character codes range
             if (start == 0 && end == 0) {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    // Original code used Integer.MAX_VALUE, let's retain this, assuming it intends a wide range of char values
+                    effectiveStart = 0;
+                    effectiveEnd = Integer.MAX_VALUE;
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    effectiveStart = ' '; // 32
+                    effectiveEnd = 'z' + 1; // 123
                 }
+            } else {
+                // Use provided range directly
+                effectiveStart = start;
+                effectiveEnd = end;
+            }
+            // Check for invalid range that would cause random.nextInt to fail
+             if (effectiveStart >= effectiveEnd) {
+                 throw new IllegalArgumentException("Parameter end (" + effectiveEnd + ") must be greater than start (" + effectiveStart + ")");
+             }
+             gap = effectiveEnd - effectiveStart;
+
+        } else {
+            // Using index range within the provided chars array
+            if (start == 0 && end == 0) {
+                // Default range: use the entire chars array
+                effectiveStart = 0;
+                effectiveEnd = chars.length;
+            } else {
+                // Use provided start/end as indices, validate them
+                effectiveStart = start;
+                effectiveEnd = end;
+                if (effectiveEnd > chars.length) {
+                    throw new ArrayIndexOutOfBoundsException("Parameter end (" + effectiveEnd + ") must not be greater than chars.length (" + chars.length + ")");
+                }
+                if (effectiveStart < 0) {
+                    throw new ArrayIndexOutOfBoundsException("Parameter start (" + effectiveStart + ") must not be negative.");
+                }
+                if (effectiveStart >= effectiveEnd) {
+                    throw new IllegalArgumentException("Parameter end (" + effectiveEnd + ") must be greater than start (" + effectiveStart + ")");
+                }
+            }
+            gap = effectiveEnd - effectiveStart;
         }
 
+
         char[] buffer = new char[count];
-        int gap = end - start;
 
+        // The loop fills the buffer backwards, from count-1 down to 0
+        // count is decremented *before* each iteration check
         while (count-- != 0) {
             char ch;
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                int codePoint = random.nextInt(gap) + effectiveStart;
+                ch = (char) codePoint; // Cast potentially loses information for supplementary characters
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                int index = random.nextInt(gap) + effectiveStart;
+                ch = chars[index];
             }
+
+            // Filter character
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+
+                // Surrogate pair handling logic (original logic preserved)
+                if(ch >= 56320 && ch <= 57343) { // low surrogate
+                    if(count == 0) { // Not enough room left for companion high surrogate
+                        count++; // Retry this iteration
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        // Low surrogate generated, insert a matching high surrogate before it
+                        buffer[count] = ch; // Place low surrogate at current index (e.g., index 1)
+                        count--; // Move to the previous index (e.g., index 0)
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // Place random high surrogate there
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if(ch >= 55296 && ch <= 56191) { // high surrogate
+                    if(count == 0) { // Not enough room left for companion low surrogate
+                        count++; // Retry this iteration
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        // High surrogate generated, insert a matching low surrogate after it (logic seems reversed in placement)
+                        // buffer[count] = low surrogate, buffer[count-1] = high surrogate
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // Place random low surrogate here (current index, e.g. index 1)
+                        count--; // Move to previous index (e.g. index 0)
+                        buffer[count] = ch; // Place high surrogate there (index 0)
+                        // This correctly forms the pair <high><low> at indices [count-1, count] relative to the start of the iteration
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
+                } else if(ch >= 56192 && ch <= 56319) { // Private Use Area high surrogate
+                    // Skip PUA high surrogates as they cannot form valid pairs here
+                    count++; // Retry this iteration
                 } else {
-                    buffer[count] = ch;
+                    // Normal character (BMP, not a surrogate)
+                    buffer[count] = ch; // Place character at current index
                 }
             } else {
-                count++;
+                // Character did not meet letters/numbers criteria, retry
+                count++; // Counteract the count-- in the while condition
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
