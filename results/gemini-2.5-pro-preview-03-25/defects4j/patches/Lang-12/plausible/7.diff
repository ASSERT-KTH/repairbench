diff --git a/tmp/bc7b9c86-74d2-44c8-a9df-2fc210aa5da8_buggy.java b/tmp/e09e25f1-d0c4-4eb8-98c2-557e1bdc450f_fixed.java
index 7c9c72e..8e3dc32 100644
--- a/tmp/bc7b9c86-74d2-44c8-a9df-2fc210aa5da8_buggy.java
+++ b/tmp/e09e25f1-d0c4-4eb8-98c2-557e1bdc450f_fixed.java
@@ -1,93 +1,114 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is not specified, this refers to the Unicode code point range. If {@code chars} is specified, this refers to an index into the {@code chars} array. Ignored if {@code 0}.
+     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is not specified, this refers to the Unicode code point range. If {@code chars} is specified, this refers to an index into the {@code chars} array. Ignored if {@code 0}.
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
+     *  If {@code null}, then it will use the set of all chars within the specified range.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     *  {@code (end - start) + 1} characters in the set array. (Note: This exception condition seems incorrect based on usage, the check is usually just for negative indices or indices >= length)
+     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty, or {@code end <= start} when {@code chars} is null.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The provided chars array is empty.");
+        }
 
+        // Calculate effective start and end based on parameters, only if chars is null
+        if (chars == null) {
             if (start == 0 && end == 0) {
                 if (!letters && !numbers) {
+                    // Full Unicode range
                     end = Integer.MAX_VALUE;
                 } else {
+                    // Default printable ASCII
                     end = 'z' + 1;
                     start = ' ';
                 }
+            } else if (end <= start) {
+                 // Validate range if provided
+                 throw new IllegalArgumentException(
+                     "Parameter end (" + end + ") must be greater than start (" + start + ")");
+            }
         }
 
         char[] buffer = new char[count];
-        int gap = end - start;
+        int gap = (chars == null) ? end - start : 0; // Calculate gap for range selection only if chars is null
 
         while (count-- != 0) {
             char ch;
             if (chars == null) {
+                // Select a character code point within the range [start, end)
+                 // The check end <= start above should prevent gap <= 0
                  ch = (char) (random.nextInt(gap) + start);
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                // Select a character from the provided array 'chars'
+                // Ignore start/end parameters when selecting from 'chars' array directly
+                ch = chars[random.nextInt(chars.length)];
             }
+
+            // Apply filters (letters/numbers) regardless of the source
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+
+                // Surrogate handling (copied from original logic)
+                if(ch >= 56320 && ch <= 57343) { // Low surrogate
+                    if(count == 0) { // Not enough space left for the required high surrogate
+                        count++; // Retry to find a different character
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        // Insert high surrogate before the low surrogate
+                        buffer[count] = ch; // Put low surrogate in current position
+                        count--; // Decrement count again because we're adding a pair
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // Add high surrogate in preceding position
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if(ch >= 55296 && ch <= 56191) { // High surrogate
+                    if(count == 0) { // Not enough space left for the required low surrogate
+                        count++; // Retry
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        // Insert low surrogate after the high surrogate
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // Add low surrogate in current position
+                        count--; // Decrement count again
+                        buffer[count] = ch; // Add high surrogate in preceding position
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
+                } else if(ch >= 56192 && ch <= 56319) { // Private high surrogate
+                    // Skip / Retry
                     count++;
-                } else {
-                    buffer[count] = ch;
+                } else { // Normal character (or outside surrogate pair handling range)
+                    buffer[count] = ch; // Add selected char to buffer
                 }
             } else {
+                // Character did not meet letter/number criteria, retry
                 count++;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
