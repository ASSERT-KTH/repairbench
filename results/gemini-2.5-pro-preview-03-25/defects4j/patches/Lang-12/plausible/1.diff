diff --git a/tmp/5e19185e-c2d2-4456-bb68-58f3b0fd130a_buggy.java b/tmp/9fe5f4f2-70f8-459f-b601-c085363eb641_fixed.java
index 7c9c72e..d1c99cd 100644
--- a/tmp/5e19185e-c2d2-4456-bb68-58f3b0fd130a_buggy.java
+++ b/tmp/9fe5f4f2-70f8-459f-b601-c085363eb641_fixed.java
@@ -1,93 +1,128 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        // Check if the provided chars array is empty, as documented and tested.
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The provided chars array is empty.");
+        }
 
         if (start == 0 && end == 0) {
+            // If chars array is specified, default start/end to its bounds.
+            if (chars != null) {
+                end = chars.length;
+                // start remains 0
+            } else {
+                // If no chars array, use default range based on letters/numbers flags.
                 if (!letters && !numbers) {
                     end = Integer.MAX_VALUE;
+                    // start remains 0
                 } else {
                     end = 'z' + 1;
                     start = ' ';
                 }
             }
+        } else {
+            // Ensure end > start if not zero, otherwise random.nextInt(gap) will fail.
+            // This check prevents IllegalArgumentException from random.nextInt( <= 0 ).
+            if (end <= start) {
+                 throw new IllegalArgumentException(
+                     String.format("Parameter end (%d) must be greater than start (%d)", end, start));
+            }
+        }
+
+        // If the range is invalid relative to the chars array, AIOOBE will be thrown later.
 
         char[] buffer = new char[count];
         int gap = end - start;
 
         while (count-- != 0) {
             char ch;
+            int codePoint = random.nextInt(gap) + start;
+
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                ch = (char) codePoint;
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                // Accessing chars array - may throw AIOOBE if start/end indices are
+                // invalid wrt array length, leading to out-of-bounds codePoint.
+                ch = chars[codePoint];
             }
+
+            // Filter and handle surrogates (original logic)
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                // This logic requires the loop variable 'count' to be manipulated
+                // to ensure the correct number of characters are generated.
+
+                if(ch >= 56320 && ch <= 57343) { // low surrogate DC00-DFFF
+                    if(count == 0) { // Not enough room for second character.
+                        count++; // Roll back decrement to retry.
                     } else {
                         // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        buffer[count] = ch; // Put low surrogate
+                        count--; // Decrement count for the high surrogate
+                        // Check if count is still valid before assigning to buffer
+                        if (count < 0) { throw new IllegalStateException("Logic error: count became negative"); } // Should not happen
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // Put high surrogate (D800-D87F)
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if(ch >= 55296 && ch <= 56191) { // high surrogate D800-DB7F
+                    if(count == 0) { // Not enough room for second character.
+                        count++; // Roll back decrement to retry.
                     } else {
                         // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        // The low surrogate goes into the buffer first at current 'count' index
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // Put low surrogate (DC00-DC7F)
+                        count--; // Decrement count for the high surrogate
+                         // Check if count is still valid before assigning to buffer
+                        if (count < 0) { throw new IllegalStateException("Logic error: count became negative"); } // Should not happen
+                        buffer[count] = ch; // Put high surrogate
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
-                } else {
-                    buffer[count] = ch;
+                } else if(ch >= 56192 && ch <= 56319) { // private high surrogate DB80-DBFF
+                    // skip it and retry
+                    count++; // Roll back decrement.
+                } else { // normal character (BMP non-surrogate or astral)
+                    buffer[count] = ch; // Put character in buffer.
                 }
-            } else {
-                count++;
+            } else { // character filtered out
+                count++; // Roll back decrement to retry.
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
