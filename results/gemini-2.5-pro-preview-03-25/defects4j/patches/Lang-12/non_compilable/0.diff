diff --git a/tmp/e54e763a-3cfd-4e58-8168-f66b1b4edcf1_buggy.java b/tmp/9d8465c4-cc8b-4fd7-9656-33032431a64a_fixed.java
index 7c9c72e..c86fdf1 100644
--- a/tmp/e54e763a-3cfd-4e58-8168-f66b1b4edcf1_buggy.java
+++ b/tmp/9d8465c4-cc8b-4fd7-9656-33032431a64a_fixed.java
@@ -1,93 +1,163 @@
+import java.util.Random;
+
+/**
+ * Contains the fixed random function.
+ */
+class FixedRandomStringUtils {
+
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
-     * <p>If start and end are both {@code 0}, start and end are set
-     * to {@code ' '} and {@code 'z'}, the ASCII printable
-     * characters, will be used, unless letters and numbers are both
-     * {@code false}, in which case, start and end are set to
-     * {@code 0} and {@code Integer.MAX_VALUE}.
+     * <p>If {@code start} and {@code end} are both {@code 0},
+     * {@code start} and {@code end} are set based on the values of {@code letters} and {@code numbers}:
+     * <ul>
+     *  <li>If {@code letters} and {@code numbers} are both {@code false},
+     *      {@code start} and {@code end} are set to {@code 0} and {@code Integer.MAX_VALUE} (exclusive) respectively.
+     *      Note: This range is problematic for generating valid Unicode characters and primarily useful for generating arbitrary {@code char} values.
+     *  </li>
+     *  <li>Otherwise, {@code start} and {@code end} are set to {@code ' '} and {@code 'z' + 1} (exclusive) respectively, covering ASCII printable characters.</li>
+     * </ul>
+     * </p>
      *
-     * <p>If set is not {@code null}, characters between start and
-     * end are chosen.</p>
+     * <p>If {@code chars} is not {@code null}, the characters are chosen from
+     * the provided array, using the range defined by {@code start} (inclusive)
+     * and {@code end} (exclusive). If {@code start} and {@code end} are both {@code 0}
+     * in this case, the entire {@code chars} array is used ({@code start=0}, {@code end=chars.length}).
+     * </p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position to start picking chars from (inclusive).
+     *               If {@code chars} is {@code null}, this is the starting Unicode code point (when cast to {@code char}).
+     *               If {@code chars} is not {@code null}, this is the starting index into the array.
+     * @param end  the position to end picking chars before (exclusive).
+     *             If {@code chars} is {@code null}, this is the ending Unicode code point (when cast to {@code char}).
+     *             If {@code chars} is not {@code null}, this is the ending index into the array.
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
+     *               If {@code null}, then the range from {@code start} to {@code end} is used.
      * @param random  a source of randomness.
      * @return the random string
-     * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     * @throws ArrayIndexOutOfBoundsException if {@code start < 0} or {@code end > chars.length} when {@code chars} is not {@code null}.
+     * @throws IllegalArgumentException if {@code count < 0}, the provided {@code chars} array is empty,
+     *                                  or {@code end <= start}.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
-        } else if (count < 0) {
+        }
+        if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The provided chars array is empty.");
+        }
 
-        if (start == 0 && end == 0) {
+        int effectiveStart = start;
+        int effectiveEnd = end;
+
+        if (effectiveStart == 0 && effectiveEnd == 0) {
+            if (chars != null) {
+                // If chars provided and start/end are 0, use the full array
+                effectiveEnd = chars.length;
+            } else {
+                // If chars is null and start/end are 0, adjust based on letters/numbers
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    // Using Integer.MAX_VALUE as the end code point is problematic for Unicode correctness,
+                    // but preserves the original behavior. Values > 0xFFFF are truncated when cast to char.
+                    effectiveEnd = Integer.MAX_VALUE;
+                    effectiveStart = 0;
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    effectiveEnd = 'z' + 1; // exclusive end ('{' after 'z')
+                    effectiveStart = ' '; // inclusive start (space)
+                }
+            }
+        } else if (effectiveEnd <= effectiveStart) {
+            // Ensure the range is valid, even if start/end were not initially 0.
+            throw new IllegalArgumentException(
+               String.format("Parameter end (%d) must be greater than start (%d)", effectiveEnd, effectiveStart));
+        }
+
+        // Validate indices relative to chars array if applicable
+        if (chars != null) {
+             // Check end boundary (exclusive index)
+             if (effectiveEnd > chars.length) {
+                  throw new ArrayIndexOutOfBoundsException(
+                    String.format("Parameter end (%d) must not exceed the length of chars (%d)", effectiveEnd, chars.length));
+             }
+             // Check start boundary (inclusive index)
+             if (effectiveStart < 0) {
+                  throw new ArrayIndexOutOfBoundsException(
+                    String.format("Parameter start (%d) must not be negative.", effectiveStart));
              }
         }
 
         char[] buffer = new char[count];
-        int gap = end - start;
+        // Calculate the number of choices available
+        int gap = effectiveEnd - effectiveStart;
 
+        // Decrement count before use in the loop, serves as the index from buffer end
         while (count-- != 0) {
             char ch;
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                // Select a random code point (int) within the range [start, end)
+                int codePoint = random.nextInt(gap) + effectiveStart;
+                // Cast to char - this truncates code points outside the Basic Multilingual Plane (BMP).
+                // Surrogate handling below attempts to fix pairs for some generated surrogate chars.
+                ch = (char) codePoint;
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                // Select a random index within the range [start, end)
+                int randomIndex = random.nextInt(gap) + effectiveStart;
+                // Select the character from the array
+                ch = chars[randomIndex];
             }
+
+            // Filter character and handle surrogates (using original logic)
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                    || !letters && !numbers) // Accept if no filter or if filters pass
+            {
+                // Original surrogate handling logic:
+                // Applied regardless of whether char came from `chars` array or generated code point.
+                // Attempts to form valid surrogate pairs if a surrogate character is chosen.
+                // Uses a limited range for generating the paired surrogate (nextInt(128)).
+                if (ch >= 56320 && ch <= 57343) { // Low surrogate (DC00-DFFF)
+                    if (count == 0) { // Not enough room left in buffer for preceding high surrogate
+                        count++; // Effectively retry extracting a character for this position
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
+                        buffer[count] = ch; // Place low surrogate
+                        count--; // Move to the previous spot for the high surrogate
+                        // Generate a high surrogate (D800â€“DBFF). Original used nextInt(128) -> D800-D87F only.
                         buffer[count] = (char) (55296 + random.nextInt(128));
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if (ch >= 55296 && ch <= 56191) { // High surrogate (D800-DB7F) (Excludes private use high surrogates)
+                    if (count == 0) { // Not enough room left for subsequent low surrogate
+                        count++; // Retry
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
+                        // Generate a low surrogate (DC00-DFFF). Original used nextInt(128) -> DC00-DC7F only.
                         buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        count--; // Move to the previous spot for the high surrogate
+                        buffer[count] = ch; // Place high surrogate
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
-                } else {
-                    buffer[count] = ch;
+                } else if (ch >= 56192 && ch <= 56319) { // Private Use High surrogate (DB80-DBFF)
+                    // Original code explicitly skips these by retrying.
+                    count++; // Retry
+                } else { // BMP character (or potentially a surrogate from the chars array not handled above)
+                    buffer[count] = ch; // Place the character
                 }
-            } else {
-                count++;
+            } else { // Character rejected by letters/numbers filter
+                count++; // Retry
             }
         }
         return new String(buffer);
     }
+}
\ No newline at end of file
