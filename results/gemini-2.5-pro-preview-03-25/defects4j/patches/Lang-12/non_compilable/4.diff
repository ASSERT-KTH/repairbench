diff --git a/tmp/96e826d6-f936-4847-b145-dab6ae06194f_buggy.java b/tmp/ce91e90c-e6c0-42f6-ade1-157056bb2c9a_fixed.java
index 7c9c72e..95c10a2 100644
--- a/tmp/96e826d6-f936-4847-b145-dab6ae06194f_buggy.java
+++ b/tmp/ce91e90c-e6c0-42f6-ade1-157056bb2c9a_fixed.java
@@ -1,93 +1,158 @@
+import java.util.Random;
+
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is null, this is the starting character code.
+     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is null, this is the ending character code (exclusive).
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
+     *  If {@code null}, then it will use the set of all chars within the range defined by start/end.
      * @param random  a source of randomness.
      * @return the random string
-     * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     * @throws ArrayIndexOutOfBoundsException if {@code chars} is not null and {@code start < 0} or {@code end > chars.length}.
+     * @throws IllegalArgumentException if {@code count} &lt; 0 or {@code start >= end} (unless start and end are both 0 and chars is null) or the provided {@code chars} array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        // Ensure chars array is usable if provided
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The chars array must not be empty");
+        }
 
-        if (start == 0 && end == 0) {
+        int gap;
+        int effectiveStart = start;
+        int effectiveEnd = end;
+
+        if (chars == null) {
+            // Logic when character set is not provided: start/end refer to code points.
+            if (effectiveStart == 0 && effectiveEnd == 0) {
+                // Default range behavior
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    // If no specific type requested, use a very broad range (0 to Integer.MAX_VALUE)
+                    // Note: This range includes surrogates and undefined code points.
+                    effectiveStart = 0;
+                    effectiveEnd = Integer.MAX_VALUE;
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    // Default to ASCII printable characters ' ' to 'z'
+                    effectiveStart = ' '; // Inclusive start
+                    effectiveEnd = 'z' + 1; // Exclusive end
                 }
+            } else if (effectiveEnd <= effectiveStart) {
+                 // Range must be valid (end > start)
+                 throw new IllegalArgumentException(
+                     "Parameter end (" + effectiveEnd + ") must be greater than start (" + effectiveStart + ")");
             }
+        } else {
+            // Logic when character set is provided: start/end refer to indices in the chars array.
+            if (effectiveStart == 0 && effectiveEnd == 0) {
+                // Default to using the entire chars array if start and end are 0.
+                effectiveEnd = chars.length; // Exclusive end index is the array length
+                // effectiveStart remains 0 (inclusive start index)
+            } else {
+                // Validate the provided start/end indices against the array bounds.
+                if (effectiveEnd > chars.length) {
+                    throw new ArrayIndexOutOfBoundsException(
+                        "Parameter end (" + effectiveEnd + ") must not be greater than the length of chars (" + chars.length + ")");
+                }
+                if (effectiveStart < 0) {
+                     throw new ArrayIndexOutOfBoundsException(
+                        "Parameter start (" + effectiveStart + ") must be non-negative.");
+                }
+                if (effectiveStart >= effectiveEnd) {
+                     // Range must include at least one index (start < end).
+                     throw new IllegalArgumentException(
+                         "Parameter start (" + effectiveStart + ") must be strictly less than end (" + effectiveEnd + ")");
+                }
+            }
+        }
+
+        // Calculate the size of the range for random selection.
+        gap = effectiveEnd - effectiveStart;
 
         char[] buffer = new char[count];
-        int gap = end - start;
+        int charsAdded = 0; // Tracks the number of characters added to the buffer.
 
-        while (count-- != 0) {
+        // Loop until the buffer is filled to the requested count.
+        while (charsAdded < count) {
             char ch;
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                // Generate a random code point within the effective range [start, end).
+                int codePoint = random.nextInt(gap) + effectiveStart;
+                // Cast the code point to char. This might result in a surrogate character.
+                ch = (char) codePoint;
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                // Generate a random index within the effective range [start, end) of the chars array.
+                int randomIndex = random.nextInt(gap) + effectiveStart;
+                // Select the character from the specified set at the random index.
+                ch = chars[randomIndex];
             }
+
+            // Check if the generated character meets the filter criteria (letters/numbers).
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                    || !letters && !numbers) { // Always true if letters and numbers are false.
+
+                // Handle surrogate characters to ensure the resulting string is valid Unicode.
+                if (Character.isSurrogate(ch)) {
+                    // Need two positions in the buffer to store a surrogate pair.
+                    if (charsAdded < count - 1) {
+                        if (Character.isLowSurrogate(ch)) {
+                            // Generated a low surrogate. Need a preceding high surrogate.
+                            // Generate a random high surrogate (using the original code's limited range).
+                            buffer[charsAdded++] = (char) (55296 + random.nextInt(128)); // Random high surrogate U+D800..U+D87F
+                            buffer[charsAdded++] = ch; // The generated low surrogate
+                        } else { // Must be a high surrogate (Character.isHighSurrogate(ch))
+                            // Check if it's in the private use high surrogate range (U+DB80 to U+DBFF), which the original code skipped.
+                            if (ch >= 56192 && ch <= 56319) {
+                                // Skip this private use character and try generating another one.
+                                continue;
                             } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                                // Standard high surrogate (U+D800 to U+DB7F). Need a following low surrogate.
+                                buffer[charsAdded++] = ch; // The generated high surrogate
+                                // Generate a random low surrogate (using the original code's limited range).
+                                buffer[charsAdded++] = (char) (56320 + random.nextInt(128)); // Random low surrogate U+DC00..U+DC7F
+                            }
                         }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        // Not enough space left in the buffer for a surrogate pair.
+                        // Skip this character and try generating another one.
+                        continue;
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
                 } else {
-                    buffer[count] = ch;
+                    // The character is not a surrogate. Add it directly to the buffer.
+                    buffer[charsAdded++] = ch;
                 }
             } else {
-                count++;
+                // The character was filtered out (e.g., generated a number when only letters allowed).
+                // Skip this character and try generating another one.
+                continue; // Redundant as it's the end of the loop body, but clarifies intent.
             }
         }
+        // Return the final random string.
         return new String(buffer);
     }
\ No newline at end of file
