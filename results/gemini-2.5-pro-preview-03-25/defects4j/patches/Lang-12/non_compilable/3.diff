diff --git a/tmp/ed828db3-231d-4784-bd59-8a6eeed124c4_buggy.java b/tmp/5002badc-982d-48f5-ad96-02c5ec8d2bca_fixed.java
index 7c9c72e..cb1ebfd 100644
--- a/tmp/ed828db3-231d-4784-bd59-8a6eeed124c4_buggy.java
+++ b/tmp/5002badc-982d-48f5-ad96-02c5ec8d2bca_fixed.java
@@ -1,93 +1,162 @@
+import java.util.Random;
+
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is not null, this is an index into the array.
+     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is not null, this is an index into the array.
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
+     *  If {@code null}, then it will use the set of all chars based on {@code start} and {@code end}.
      * @param random  a source of randomness.
      * @return the random string
-     * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     * @throws ArrayIndexOutOfBoundsException if {@code start} or {@code end} are out of bounds for the {@code chars} array.
+     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided {@code chars} array is empty, or {@code start} &ge; {@code end}.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        // Check for empty chars array *after* count check, as count < 0 exception takes precedence
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The provided chars array is empty.");
+        }
 
+        int realStart;
+        int realEnd;
+
+        if (chars == null) {
+            // Generate from Unicode range
             if (start == 0 && end == 0) {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    // Full Unicode range potentially including surrogates.
+                    // Note: Integer.MAX_VALUE is not a valid code point, but used as range limit.
+                    realStart = 0;
+                    realEnd = Integer.MAX_VALUE;
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    // Default printable ASCII range
+                    realStart = ' '; // 32
+                    realEnd = 'z' + 1; // 123
+                }
+            } else {
+                // Use specified Unicode range [start, end)
+                realStart = start;
+                realEnd = end;
+            }
+             // Defer validation of range (end > start) to random.nextInt(gap) below
+        } else {
+            // Generate from provided char array
+            if (start == 0 && end == 0) {
+                // Default: use the entire chars array
+                realStart = 0;
+                realEnd = chars.length; // Cannot be 0 here due to the earlier check
+            } else {
+                 // Use the specified range within the chars array [start, end)
+                 // Validate the indices according to array constraints
+                 if (start < 0) {
+                     // Use AIOOBE for negative start index
+                     throw new ArrayIndexOutOfBoundsException(
+                         "Requested random string range start index " + start + " is less than 0.");
+                 }
+                 if (end > chars.length) {
+                     // Use AIOOBE for end index exceeding array length
+                     throw new ArrayIndexOutOfBoundsException(
+                         "Requested random string range end index " + end + " is greater than array length " + chars.length);
+                 }
+                 if (start >= end) {
+                     // Use IAE for invalid range where start is not less than end
+                     throw new IllegalArgumentException(
+                          "Requested random string range start index " + start + " must be less than end index " + end);
+                 }
+                 realStart = start;
+                 realEnd = end;
             }
         }
 
+        // Calculate the gap for random number generation
+        // Note: If realEnd <= realStart, gap will be <= 0
+        int gap = realEnd - realStart;
+
         char[] buffer = new char[count];
-        int gap = end - start;
 
         while (count-- != 0) {
             char ch;
+            try {
                 if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                    // random.nextInt will throw IAE if gap <= 0
+                    ch = (char) (random.nextInt(gap) + realStart);
                 } else {
-                ch = chars[random.nextInt(gap) + start];
+                    // random.nextInt will throw IAE if gap <= 0
+                    int randomIndex = random.nextInt(gap) + realStart;
+                    ch = chars[randomIndex];
                 }
-            if (letters && Character.isLetter(ch)
-                    || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
+            } catch (IllegalArgumentException e) {
+                // Catch exception from random.nextInt(gap) when gap <= 0
+                // This indicates an invalid start/end range was provided (or default calc resulted in invalid range)
+                 throw new IllegalArgumentException(
+                     "Cannot generate random char from range [" + realStart + ", " + realEnd + ")", e);
+            }
+
+            // Filter based on letters/numbers criteria
+            if ((letters && Character.isLetter(ch))
+                    || (numbers && Character.isDigit(ch))
+                    || (!letters && !numbers)) {
+
+                // Surrogate pair handling (copied from original logic)
+                // Ensure generated characters form valid Unicode strings if surrogates are possible
+                if(ch >= 56320 && ch <= 57343) { // Low surrogate (U+DC00..U+DFFF)
                     if(count == 0) {
-                        count++;
+                        count++; // Need space for high surrogate, retry
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
+                        // Add low surrogate, step back, add random high surrogate
                         buffer[count] = ch;
                         count--;
+                        // Range 55296..55423 (U+D800..U+D87F) - From original code
                         buffer[count] = (char) (55296 + random.nextInt(128));
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
+                } else if(ch >= 55296 && ch <= 56191) { // High surrogate, non-private range (U+D800..U+DB7F) - From original code
                     if(count == 0) {
-                        count++;
+                        count++; // Need space for low surrogate, retry
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
+                        // Add random low surrogate, step back, add high surrogate
+                        // Range 56320..56447 (U+DC00..U+DC7F) - From original code
                         buffer[count] = (char) (56320 + random.nextInt(128));
                         count--;
                         buffer[count] = ch;
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
+                } else if(ch >= 56192 && ch <= 56319) { // High surrogate, private range (U+DB80..U+DBFF) - From original code
+                    // Skip & retry
                     count++;
                 } else {
+                    // Not a surrogate or already handled, add to buffer
                     buffer[count] = ch;
                 }
             } else {
+                // Character did not meet letters/numbers criteria, retry
                 count++;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
