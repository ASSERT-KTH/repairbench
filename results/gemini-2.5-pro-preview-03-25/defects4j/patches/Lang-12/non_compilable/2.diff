diff --git a/tmp/249bbd83-1171-4019-9385-adbffee00378_buggy.java b/tmp/83136d0c-5128-4197-91ff-9e33661bc52d_fixed.java
index 7c9c72e..b86c0aa 100644
--- a/tmp/249bbd83-1171-4019-9385-adbffee00378_buggy.java
+++ b/tmp/83136d0c-5128-4197-91ff-9e33661bc52d_fixed.java
@@ -1,93 +1,156 @@
+import java.util.Random;
+
+public class RandomStringUtils { // Added class wrapper for context, provide only the method below
+
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
-     * {@code 0} and {@code Integer.MAX_VALUE}.
+     * {@code 0} and {@code Character.MAX_CODE_POINT}.
      *
-     * <p>If set is not {@code null}, characters between start and
-     * end are chosen.</p>
+     * <p>If set ('chars') is not {@code null}, characters between start (inclusive) and
+     * end (exclusive) are chosen from the set. If start and end are both {@code 0},
+     * the whole array is used.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive, >= 0) or the starting character code point
+     * @param end  the position in set of chars to end before (exclusive) or the ending character code point (exclusive)
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
+     *  If {@code null}, then it will use the set of all chars within the specified code point range.
      * @param random  a source of randomness.
      * @return the random string
-     * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     * @throws ArrayIndexOutOfBoundsException if {@code start} or {@code end} are out of bounds for the {@code chars} array.
+     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided {@code chars} array is empty,
+     *  or {@code start} &gt;= {@code end} (for code points or array indices).
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
-        if (start == 0 && end == 0) {
-                if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
-                } else {
-                    end = 'z' + 1;
-                    start = ' ';                
-                }
+        // Validate chars array if provided BEFORE buffer creation or other logic
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The provided chars array is empty.");
         }
 
         char[] buffer = new char[count];
-        int gap = end - start;
+        int bufferPos = 0; // Tracks position in buffer, fills forwards
+        int gap; // Stores the size of the selection range
 
-        while (count-- != 0) {
-            char ch;
-            if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+        if (chars != null) {
+            // Case 1: Choose characters from the provided 'chars' array.
+            int effectiveStart = start;
+            int effectiveEnd = end;
+
+            // Default to whole array if start and end are 0.
+            if (effectiveStart == 0 && effectiveEnd == 0) {
+                 effectiveEnd = chars.length;
+                 // effectiveStart remains 0
             } else {
-                ch = chars[random.nextInt(gap) + start];
-            }
-            if (letters && Character.isLetter(ch)
-                    || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                // Validate user-provided start/end indices against array bounds.
+                if (effectiveEnd > chars.length) {
+                    throw new ArrayIndexOutOfBoundsException(
+                        "Upper bound (" + effectiveEnd + ") exceeds array length (" + chars.length + ")");
+                }
+                if (effectiveStart < 0) {
+                     throw new ArrayIndexOutOfBoundsException(
+                        "Lower bound (" + effectiveStart + ") is negative");
+                }
+                if (effectiveStart >= effectiveEnd) {
+                     throw new IllegalArgumentException(
+                        "Lower bound (" + effectiveStart + ") must be less than upper bound (" + effectiveEnd + ")");
+                 }
+            }
+
+            gap = effectiveEnd - effectiveStart;
+
+            while (bufferPos < count) {
+                // Select a random character from the specified range in the chars array
+                int randomIndex = random.nextInt(gap) + effectiveStart;
+                char ch = chars[randomIndex];
+
+                // Apply filtering (letters/numbers constraints).
+                if ((letters && Character.isLetter(ch))
+                        || (numbers && Character.isDigit(ch))
+                        || (!letters && !numbers)) {
+                    // If the character matches criteria, add it to the buffer.
+                    buffer[bufferPos++] = ch;
+                }
+                // If criteria not met, loop again to pick another character (retry).
+            }
         } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
-                    }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+            // Case 2: Generate characters based on code points in the range [start, end).
+            int effectiveStart = start;
+            int effectiveEnd = end;
+
+            // Adjust start/end if they are 0 (default case).
+            if (effectiveStart == 0 && effectiveEnd == 0) {
+                if (!letters && !numbers) {
+                    // Default to any valid Unicode character.
+                    effectiveStart = 0;
+                    effectiveEnd = Character.MAX_CODE_POINT + 1; // end is exclusive.
                 } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
-                    }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
+                    // Default range ' ' to 'z' inclusive for letters/numbers.
+                    effectiveStart = ' ';
+                    effectiveEnd = 'z' + 1; // end is exclusive.
+                }
             } else {
-                    buffer[count] = ch;
+                 // Validate range if explicitly provided.
+                 if (effectiveEnd <= effectiveStart) {
+                     throw new IllegalArgumentException(
+                         "Parameter end (" + end + ") must be greater than start (" + start + ")");
+                 }
+                 // Assume valid code point range inputs, rely on isValidCodePoint check later.
+            }
+
+            gap = effectiveEnd - effectiveStart;
+
+            while (bufferPos < count) {
+                // Generate a random code point within the range [effectiveStart, effectiveEnd).
+                int codePoint = random.nextInt(gap) + effectiveStart;
+
+                // Check filter criteria based on the generated code point.
+                boolean criteriaMet = (letters && Character.isLetter(codePoint))
+                                   || (numbers && Character.isDigit(codePoint))
+                                   || (!letters && !numbers);
+
+                // Ensure the code point is valid (not a surrogate) and meets criteria.
+                // Character.isValidCodePoint excludes surrogates U+D800 to U+DFFF.
+                if (criteriaMet && Character.isValidCodePoint(codePoint)) {
+                    if (Character.isSupplementaryCodePoint(codePoint)) {
+                        // Supplementary character needs two char positions in the buffer.
+                        // Check if there's enough space left for both chars.
+                        if (bufferPos < count - 1) {
+                            buffer[bufferPos++] = Character.highSurrogate(codePoint);
+                            buffer[bufferPos++] = Character.lowSurrogate(codePoint);
                         }
+                        // If not enough space, loop continues (retry hoping for a BMP char).
                     } else {
-                count++;
+                        // Basic Multilingual Plane (BMP) character (valid, not surrogate, meets criteria).
+                        buffer[bufferPos++] = (char) codePoint;
+                    }
+                }
+                // If criteria not met or code point invalid (e.g., a surrogate),
+                // loop continues without incrementing bufferPos (retry).
             }
         }
+        // Return the string constructed from the buffer.
         return new String(buffer);
     }
+} // End of class wrapper
\ No newline at end of file
