diff --git a/tmp/72bd588c-7ab8-4cde-80fc-72ccc5c47ab0_buggy.java b/tmp/f99c5057-7d54-4f96-9730-be51a45bf727_fixed.java
index 7c9c72e..27a8a7d 100644
--- a/tmp/72bd588c-7ab8-4cde-80fc-72ccc5c47ab0_buggy.java
+++ b/tmp/f99c5057-7d54-4f96-9730-be51a45bf727_fixed.java
@@ -1,93 +1,151 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
-     * {@code 0} and {@code Integer.MAX_VALUE}.
+     * {@code 0} and {@code Character.MAX_CODE_POINT + 1}.
      *
      * <p>If set is not {@code null}, characters between start and
-     * end are chosen.</p>
+     * end indices (exclusive) are chosen from the set.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive). If chars is null, this is the starting code point.
+     * @param end  the position in set of chars to end before (exclusive). If chars is null, this is the ending code point (exclusive).
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
-     * @param random  a source of randomness.
+     *  If {@code null}, then it will use the set of all chars based on start/end code points.
+     * @param random  a source of randomness, must not be null.
      * @return the random string
-     * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     * @throws ArrayIndexOutOfBoundsException if {@code start/end} are invalid indices for {@code chars} array.
+     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided {@code chars} array is empty,
+     * {@code random} is null, or the range specified by {@code start/end} is invalid.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The provided chars array is empty.");
+        }
+        if (random == null) {
+            throw new IllegalArgumentException("Random generator must not be null.");
+        }
 
-        if (start == 0 && end == 0) {
-                if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
-                } else {
-                    end = 'z' + 1;
-                    start = ' ';                
-                }
-        }
 
         char[] buffer = new char[count];
-        int gap = end - start;
+        int bufferPos = 0;
 
-        while (count-- != 0) {
-            char ch;
         if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+            // Generate using character code points
+            int codePointStart = start;
+            int codePointEnd = end; // Exclusive end boundary
+
+            // Define defaults if range is 0/0
+            if (start == 0 && end == 0) {
+                if (!letters && !numbers) {
+                    // Use full Unicode range [0, MAX_CODE_POINT]
+                    codePointStart = 0;
+                    codePointEnd = Character.MAX_CODE_POINT + 1; // exclusive end
                 } else {
-                ch = chars[random.nextInt(gap) + start];
-            }
-            if (letters && Character.isLetter(ch)
-                    || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
-                    } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
-                    }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
-                    } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
-                    }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
+                    // Default to printable ASCII range [' ', 'z']
+                    codePointStart = ' '; // 32 (inclusive)
+                    codePointEnd = 'z' + 1; // 123 (exclusive)
+                }
             } else {
-                    buffer[count] = ch;
+                // Use provided start/end as code points. End is already exclusive.
+            }
+
+            // Validate the range
+            if (codePointEnd <= codePointStart) {
+                 throw new IllegalArgumentException(
+                     String.format("Character code range [%d, %d) is invalid.", codePointStart, codePointEnd));
+            }
+
+            int codePointRange = codePointEnd - codePointStart;
+
+            while (bufferPos < count) {
+                int randomCodePoint = codePointStart + random.nextInt(codePointRange);
+
+                // Filter based on letters/numbers flags
+                boolean characterAccepted = (letters && Character.isLetter(randomCodePoint))
+                                         || (numbers && Character.isDigit(randomCodePoint))
+                                         || (!letters && !numbers);
+
+                // Ensure the code point is valid and can fit in the buffer
+                if (characterAccepted && Character.isValidCodePoint(randomCodePoint)) {
+                    int charsNeeded = Character.charCount(randomCodePoint);
+                    if (bufferPos + charsNeeded <= count) {
+                        // Append character(s) to buffer
+                        Character.toChars(randomCodePoint, buffer, bufferPos);
+                        bufferPos += charsNeeded;
+                    }
+                    // If not enough space (only occurs for surrogate pairs near the end),
+                    // loop again to find a character that fits (likely BMP).
+                }
+                // If not accepted, not valid, or not enough space, loop again
             }
         } else {
-                count++;
+            // Generate using provided chars array
+            int indexStart = start;
+            int indexEnd = end; // Exclusive index boundary
+
+            // Define defaults if range is 0/0
+            if (start == 0 && end == 0) {
+                indexStart = 0;
+                indexEnd = chars.length; // exclusive end
+            }
+            // else: use provided start/end as indices. End is already exclusive.
+
+            // Validate the range indices
+            if (indexEnd <= indexStart) {
+                 throw new IllegalArgumentException(
+                     String.format("Character array range [%d, %d) is invalid.", indexStart, indexEnd));
+            }
+            // Check if indices are within the bounds of the array
+            // (ArrayIndexOutOfBoundsException is specified in the Javadoc for this)
+            if (indexStart < 0 || indexEnd > chars.length) {
+                 throw new ArrayIndexOutOfBoundsException(
+                     String.format("Character array range [%d, %d) is out of bounds for array of length %d.", indexStart, indexEnd, chars.length));
+            }
+
+            int indexRange = indexEnd - indexStart;
+
+            while (bufferPos < count) {
+                // Select a character index from the specified range in the chars array
+                int charIndex = indexStart + random.nextInt(indexRange);
+                char ch = chars[charIndex];
+
+                // Filter based on letters/numbers flags
+                boolean characterAccepted = (letters && Character.isLetter(ch))
+                                         || (numbers && Character.isDigit(ch))
+                                         || (!letters && !numbers);
+
+                if (characterAccepted) {
+                    // Skip lone surrogates from the provided array, as they can lead to invalid strings.
+                    // A valid surrogate pair in the input array would be treated as two separate chars here,
+                    // potentially being picked individually. Skipping lone ones is safer.
+                    if (!Character.isSurrogate(ch)) {
+                        buffer[bufferPos++] = ch;
+                    }
+                    // If ch is a surrogate, loop again to find an acceptable char.
+                }
+                // If not accepted or is a lone surrogate, loop again
             }
         }
+
         return new String(buffer);
     }
\ No newline at end of file
