diff --git a/tmp/ad75965c-635e-4bca-883a-a4cf5eea68a2_buggy.java b/tmp/3b19764d-b879-4e87-af91-c2eb9e324781_fixed.java
index 9033e1c..07f8fab 100644
--- a/tmp/ad75965c-635e-4bca-883a-a4cf5eea68a2_buggy.java
+++ b/tmp/3b19764d-b879-4e87-af91-c2eb9e324781_fixed.java
@@ -1,11 +1,23 @@
     /**
      * Returns true iff they are equal as defined by
      * {@link #equals(double,double,int) equals(x, y, 1)}.
      *
      * @param x first value
      * @param y second value
      * @return {@code true} if the values are equal.
      */
     public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+        // The Javadoc specifies that this method should behave identically to equals(x, y, 1).
+        // The failing test org.apache.commons.math.util.MathUtilsTest::testArrayEquals
+        // includes the assertion:
+        // assertFalse(MathUtils.equals(new double[] { Double.NaN }, new double[] { Double.NaN }));
+        // This implies that equals(Double.NaN, Double.NaN) must return false.
+        // The original implementation returned true for equals(NaN, NaN) due to the
+        // (Double.isNaN(x) && Double.isNaN(y)) check.
+        // Assuming the referenced equals(double, double, int) method correctly handles
+        // NaN comparison (i.e., equals(NaN, NaN, 1) returns false) and performs
+        // comparison based on ULPs (Units in the Last Place) for non-NaN values,
+        // delegating to equals(x, y, 1) is the correct fix according to the Javadoc
+        // and will pass the failing test regarding NaN comparison.
+        return equals(x, y, 1);
     }
\ No newline at end of file
