diff --git a/tmp/7b964e1d-e36c-4a7c-9755-128c4985c3d6_buggy.java b/tmp/4fab87e5-6fef-4847-854e-1694932a3197_fixed.java
index 8e40528..50284cc 100644
--- a/tmp/7b964e1d-e36c-4a7c-9755-128c4985c3d6_buggy.java
+++ b/tmp/4fab87e5-6fef-4847-854e-1694932a3197_fixed.java
@@ -1,78 +1,108 @@
      /**
      * This method attempts to find two values a and b satisfying <ul>
      * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>
      * <li> <code> f(a) * f(b) <= 0 </code> </li>
      * </ul>
      * If f is continuous on <code>[a,b],</code> this means that <code>a</code>
      * and <code>b</code> bracket a root of f.
      * <p>
      * The algorithm starts by setting
      * <code>a := initial -1; b := initial +1,</code> examines the value of the
      * function at <code>a</code> and <code>b</code> and keeps moving
      * the endpoints out by one unit each time through a loop that terminates
      * when one of the following happens: <ul>
      * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>
      * <li> <code> a = lower </code> and <code> b = upper</code>
      * -- ConvergenceException </li>
      * <li> <code> maximumIterations</code> iterations elapse
      * -- ConvergenceException </li></ul></p>
      *
      * @param function the function
      * @param initial initial midpoint of interval being expanded to
      * bracket a root
      * @param lowerBound lower bound (a is never lower than this value)
      * @param upperBound upper bound (b never is greater than this
      * value)
      * @param maximumIterations maximum number of iterations to perform
      * @return a two element array holding {a, b}.
      * @throws ConvergenceException if the algorithm fails to find a and b
      * satisfying the desired conditions
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function
      * @throws IllegalArgumentException if function is null, maximumIterations
      * is not positive, or initial is not between lowerBound and upperBound
      */
     public static double[] bracket(UnivariateRealFunction function,
             double initial, double lowerBound, double upperBound,
             int maximumIterations) throws ConvergenceException,
             FunctionEvaluationException {
 
         if (function == null) {
             throw MathRuntimeException.createIllegalArgumentException("function is null");
         }
         if (maximumIterations <= 0)  {
             throw MathRuntimeException.createIllegalArgumentException(
                   "bad value for maximum iterations number: {0}", maximumIterations);
         }
         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
             throw MathRuntimeException.createIllegalArgumentException(
                   "invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",
                   lowerBound, initial, upperBound);
         }
         double a = initial;
         double b = initial;
-        double fa;
-        double fb;
+        double fa = Double.NaN; // Initialize to NaN or some value that ensures the first loop iteration runs
+        double fb = Double.NaN;
         int numIterations = 0 ;
 
         do {
+            // Check if bounds have been reached in the previous iteration.
+            // Need this check before modifying a and b again.
+             if ( (a == lowerBound) && (b == upperBound) ) {
+                 // Check function values one last time if bounds were reached simultaneously
+                 if (Double.isNaN(fa)) { // If first iteration reaches bounds
+                     fa = function.value(a);
+                 }
+                 if (Double.isNaN(fb)) {
+                      fb = function.value(b);
+                 }
+                 // If condition still not met after hitting bounds, throw exception
+                 if (fa * fb > 0.0) {
+                    throw new ConvergenceException(
+                              "number of iterations={0}, maximum iterations={1}, " +
+                              "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
+                              "final b value={6}, f(a)={7}, f(b)={8}",
+                              numIterations, maximumIterations, initial,
+                              lowerBound, upperBound, a, b, fa, fb);
+                 } else {
+                     // Condition met at the bounds
+                     break;
+                 }
+            }
+
             a = Math.max(a - 1.0, lowerBound);
             b = Math.min(b + 1.0, upperBound);
             fa = function.value(a);
-            
             fb = function.value(b);
+
             numIterations++ ;
+
+        // Continue as long as the product is strictly positive, we haven't run out of iterations,
+        // AND there's still room to expand (either a > lowerBound OR b < upperBound)
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&
                 ((a > lowerBound) || (b < upperBound)));
 
-        if (fa * fb >= 0.0 ) {
+        // Check for convergence failure: loop terminated without bracketing
+        // This happens if max iterations reached OR bounds reached AND fa*fb > 0
+        if (fa * fb > 0.0) {
             throw new ConvergenceException(
                       "number of iterations={0}, maximum iterations={1}, " +
                       "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
                       "final b value={6}, f(a)={7}, f(b)={8}",
                       numIterations, maximumIterations, initial,
                       lowerBound, upperBound, a, b, fa, fb);
         }
 
+        // If fa * fb <= 0.0, we have successfully bracketed the root
         return new double[]{a, b};
     }
\ No newline at end of file
