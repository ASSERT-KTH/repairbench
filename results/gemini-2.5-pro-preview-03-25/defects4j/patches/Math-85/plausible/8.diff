diff --git a/tmp/a5944fd0-bf27-4570-a762-3acdca29b31d_buggy.java b/tmp/046b5d62-1a9b-48bc-808a-1bcba61cdc15_fixed.java
index 8e40528..4eb97fa 100644
--- a/tmp/a5944fd0-bf27-4570-a762-3acdca29b31d_buggy.java
+++ b/tmp/046b5d62-1a9b-48bc-808a-1bcba61cdc15_fixed.java
@@ -1,78 +1,101 @@
      /**
      * This method attempts to find two values a and b satisfying <ul>
      * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>
      * <li> <code> f(a) * f(b) <= 0 </code> </li>
      * </ul>
      * If f is continuous on <code>[a,b],</code> this means that <code>a</code>
      * and <code>b</code> bracket a root of f.
      * <p>
      * The algorithm starts by setting
      * <code>a := initial -1; b := initial +1,</code> examines the value of the
      * function at <code>a</code> and <code>b</code> and keeps moving
      * the endpoints out by one unit each time through a loop that terminates
      * when one of the following happens: <ul>
      * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>
      * <li> <code> a = lower </code> and <code> b = upper</code>
      * -- ConvergenceException </li>
      * <li> <code> maximumIterations</code> iterations elapse
      * -- ConvergenceException </li></ul></p>
      *
      * @param function the function
      * @param initial initial midpoint of interval being expanded to
      * bracket a root
      * @param lowerBound lower bound (a is never lower than this value)
      * @param upperBound upper bound (b never is greater than this
      * value)
      * @param maximumIterations maximum number of iterations to perform
      * @return a two element array holding {a, b}.
      * @throws ConvergenceException if the algorithm fails to find a and b
      * satisfying the desired conditions
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function
      * @throws IllegalArgumentException if function is null, maximumIterations
      * is not positive, or initial is not between lowerBound and upperBound
      */
     public static double[] bracket(UnivariateRealFunction function,
             double initial, double lowerBound, double upperBound,
             int maximumIterations) throws ConvergenceException,
             FunctionEvaluationException {
 
         if (function == null) {
             throw MathRuntimeException.createIllegalArgumentException("function is null");
         }
         if (maximumIterations <= 0)  {
             throw MathRuntimeException.createIllegalArgumentException(
                   "bad value for maximum iterations number: {0}", maximumIterations);
         }
         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
             throw MathRuntimeException.createIllegalArgumentException(
                   "invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",
                   lowerBound, initial, upperBound);
         }
         double a = initial;
         double b = initial;
-        double fa;
-        double fb;
+        double fa = Double.NaN; // Initialize fa and fb to avoid potential compiler errors
+        double fb = Double.NaN; // although they will be assigned in the first loop iteration.
         int numIterations = 0 ;
 
+        // Evaluate function at initial point to start correctly
+        // This handles the case where initial itself is a root or very close to one.
+        // Although the original loop logic would eventually evaluate it,
+        // evaluating it first might slightly change the initial expansion step,
+        // but the core logic remains the same: expand until f(a)*f(b) <= 0.
+        // However, the original loop starts by immediately modifying a and b.
+        // Let's stick to the original algorithm's expansion logic.
+        // The key issue is the final check.
+
         do {
             a = Math.max(a - 1.0, lowerBound);
             b = Math.min(b + 1.0, upperBound);
             fa = function.value(a);
-            
             fb = function.value(b);
+
             numIterations++ ;
-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
-                ((a > lowerBound) || (b < upperBound)));
 
-        if (fa * fb >= 0.0 ) {
+            // Check termination conditions
+            // 1. Found a bracket: fa * fb <= 0
+            // 2. Reached iteration limit: numIterations >= maximumIterations
+            // 3. Reached boundaries: a == lowerBound and b == upperBound
+            if (fa * fb <= 0.0) {
+                 // Found a bracket, break the loop.
+                 break;
+            }
+
+        } while ((numIterations < maximumIterations) && (a > lowerBound || b < upperBound));
+        // Note: The loop condition simplified: if fa * fb > 0.0, we continue ONLY if
+        // we haven't hit the iteration limit AND we can still expand (either a > lowerBound or b < upperBound).
+        // If we exit the loop, it's either because fa * fb <= 0.0 (handled by the break),
+        // or numIterations >= maximumIterations, or (a == lowerBound and b == upperBound).
+
+        // Check if we failed to bracket a root
+        if (fa * fb > 0.0) { // Changed >= to >
             throw new ConvergenceException(
                       "number of iterations={0}, maximum iterations={1}, " +
                       "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
                       "final b value={6}, f(a)={7}, f(b)={8}",
                       numIterations, maximumIterations, initial,
                       lowerBound, upperBound, a, b, fa, fb);
         }
 
         return new double[]{a, b};
     }
\ No newline at end of file
