diff --git a/tmp/a6891b48-0528-411d-820b-bfc6c8d0d9dc_buggy.java b/tmp/eaa74cce-59fc-43f3-afc1-023aff281705_fixed.java
index c1f30a5..6150701 100644
--- a/tmp/a6891b48-0528-411d-820b-bfc6c8d0d9dc_buggy.java
+++ b/tmp/eaa74cce-59fc-43f3-afc1-023aff281705_fixed.java
@@ -1,15 +1,108 @@
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+import java.util.TimeZone;
+
     /**
      * <p>Formats a <code>Calendar</code> object into the
      * supplied <code>StringBuffer</code>.</p>
      *
      * @param calendar  the calendar to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
      */
     public StringBuffer format(Calendar calendar, StringBuffer buf) {
+        // Use a working copy potentially converted to the forced timezone.
+        Calendar workingCalendar = calendar;
         if (mTimeZoneForced) {
-            calendar = (Calendar) calendar.clone();
-            calendar.setTimeZone(mTimeZone);
+            // Create a new calendar instance in the formatter's timezone
+            // representing the same instant in time as the input calendar.
+            // Cloning and using setTimeZone on the clone can be problematic
+            // (e.g., LANG-538 issue observed, potentially due to Calendar implementation subtleties).
+            // Creating a new instance avoids these potential issues.
+            workingCalendar = new GregorianCalendar(mTimeZone); // Use the forced timezone
+            workingCalendar.setTimeInMillis(calendar.getTimeInMillis()); // Set to the same instant
         }
-        return applyRules(calendar, buf);
+        // Apply rules using the appropriate calendar instance
+        // (either original or the new one with the forced timezone).
+        return applyRules(workingCalendar, buf);
     }
+
+// Helper fields assumed to be present in the class based on the original code
+private TimeZone mTimeZone;
+private boolean mTimeZoneForced;
+
+// Helper method assumed to be present
+protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {
+    // Implementation details of applyRules are not needed for the fix
+    // It's assumed to correctly use the passed calendar.
+    return buf;
+}
+
+// Dummy GregorianCalendar class for compilation if needed in isolation
+// Not part of the actual fix.
+/*
+static class GregorianCalendar extends Calendar {
+    private long millis;
+    private TimeZone zone;
+    public GregorianCalendar(TimeZone zone) { this.zone = zone; }
+    @Override public void setTimeInMillis(long millis) { this.millis = millis; }
+    @Override public long getTimeInMillis() { return millis; }
+    @Override public TimeZone getTimeZone() { return zone; }
+    // Other abstract methods would need dummy implementations for standalone compilation
+    @Override protected void computeTime() {}
+    @Override protected void computeFields() {}
+    @Override public void add(int field, int amount) {}
+    @Override public void roll(int field, boolean up) {}
+    @Override public int getMinimum(int field) { return 0; }
+    @Override public int getMaximum(int field) { return 0; }
+    @Override public int getGreatestMinimum(int field) { return 0; }
+    @Override public int getLeastMaximum(int field) { return 0; }
+	@Override public int getActualMinimum(int field) { return 0;} // Added method
+	@Override public int getActualMaximum(int field) { return 0;} // Added method
+}
+*/
+// Dummy TimeZone class for compilation if needed in isolation
+// Not part of the actual fix.
+/*
+static class TimeZone {
+    public static TimeZone getTimeZone(String id) { return new TimeZone(); }
+}
+*/
+// Dummy Calendar class for compilation if needed in isolation
+// Not part of the actual fix.
+/*
+import java.util.TimeZone;
+abstract class Calendar implements Cloneable {
+	public static final int HOUR_OF_DAY = 11;
+	public static final int ZONE_OFFSET = 15;
+	public static final int DST_OFFSET = 16;
+
+    protected Calendar() {}
+    public abstract void setTimeInMillis(long millis);
+    public abstract long getTimeInMillis();
+    public abstract TimeZone getTimeZone();
+    public abstract void setTimeZone(TimeZone value);
+	public abstract int get(int field); // Added method
+    public abstract void add(int field, int amount);
+    public abstract void roll(int field, boolean up);
+    public abstract int getMinimum(int field);
+    public abstract int getMaximum(int field);
+    public abstract int getGreatestMinimum(int field);
+    public abstract int getLeastMaximum(int field);
+    public abstract int getActualMinimum(int field); // Added method
+    public abstract int getActualMaximum(int field); // Added method
+
+    protected abstract void computeTime();
+    protected abstract void computeFields();
+
+    @Override
+    public Object clone() {
+        try {
+            return super.clone();
+        } catch (CloneNotSupportedException e) {
+            // This should not happen, since we are Cloneable
+            throw new InternalError();
+        }
+    }
+}
+*/
