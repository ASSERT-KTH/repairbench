diff --git a/tmp/ffca6789-52ea-45dd-9aee-3a9ddaf7ca34_buggy.java b/tmp/3670273f-3ed8-49e5-bad1-b126fca437c5_fixed.java
index 7c7fdc2..1db080f 100644
--- a/tmp/ffca6789-52ea-45dd-9aee-3a9ddaf7ca34_buggy.java
+++ b/tmp/3670273f-3ed8-49e5-bad1-b126fca437c5_fixed.java
@@ -1,81 +1,136 @@
-    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
+    static Document parseInputStream(@Nullable InputStream input, @Nullable String charsetName, String baseUri, Parser parser) throws IOException  {
         if (input == null) // empty body
             return new Document(baseUri);
         input = ConstrainableInputStream.wrap(input, bufferSize, 0);
 
         Document doc = null;
         boolean fullyRead = false;
+        @Nullable BomCharset bomCharset = null;
 
-        // read the start of the stream and look for a BOM or meta charset
         input.mark(bufferSize);
-        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
-        fullyRead = input.read() == -1;
+        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // read first chunk to detect charset
+        fullyRead = input.read() == -1; // Check if stream completed after first read
         input.reset();
 
-        // look for BOM - overrides any other header or input
-        BomCharset bomCharset = detectCharsetFromBom(firstBytes);
+        // Look for BOM - overrides any other header or input. Does not update position.
+        bomCharset = detectCharsetFromBom(firstBytes);
         if (bomCharset != null)
             charsetName = bomCharset.charset;
 
-        if (charsetName == null) { // determine from meta. safe first parse as UTF-8
+        if (charsetName == null) { // Determine from meta element, or <?xml env
+            firstBytes.rewind(); // Rewind buffer to read meta charset afresh
             String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();
+            // Subsequent readToByteBuffer might be required if bytes representation differs vs default decode
+            // We don't yet know the HTML structure, so parsing the initial flavoursome bytes is the only way to find meta
+            // charset. If we could peek the bytes and detect meta charset without parsing, that'd be more efficient.
+
             doc = parser.parseInput(docData, baseUri);
 
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            // Check for meta charset
             Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
-            String foundCharset = null; // if not found, will keep utf-8 as best attempt
+            String foundCharset = null;
             for (Element meta : metaElements) {
                 if (meta.hasAttr("http-equiv"))
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset"))
                     foundCharset = meta.attr("charset");
                 if (foundCharset != null)
                     break;
             }
 
-            // look for <?xml encoding='ISO-8859-1'?>
+            // Check for <?xml encoding declaration
             if (foundCharset == null && doc.childNodeSize() > 0) {
                 Node first = doc.childNode(0);
                 XmlDeclaration decl = null;
                 if (first instanceof XmlDeclaration)
                     decl = (XmlDeclaration) first;
                 else if (first instanceof Comment) {
                     Comment comment = (Comment) first;
                     if (comment.isXmlDeclaration())
                         decl = comment.asXmlDeclaration();
                 }
-                if (decl != null) {
-                    if (decl.name().equalsIgnoreCase("xml"))
+                if (decl != null && decl.name().equalsIgnoreCase("xml")) {
                     foundCharset = decl.attr("encoding");
                 }
             }
+
             foundCharset = validateCharset(foundCharset);
-            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
-                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) {
+                // Charset found, differs from default; update and reset for re-parse
                 charsetName = foundCharset;
-                doc = null;
+                doc = null; // Signal re-parse
             } else if (!fullyRead) {
-                doc = null;
+                // Fully read check helps when we read the whole doc matching default charset initially
+                doc = null; // Signal re-parse with default charset
             }
-        } else { // specified by content type header (or by user on file load)
+            // If found charset is null or same as default, and fullyRead, doc is OK as is.
+        } else { // Charset specified by caller (e.g. HTTP header)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         }
-        if (doc == null) {
-            if (charsetName == null)
+
+        if (doc == null) { // Needs re-parsing
+            if (charsetName == null) // If no charset specified or detected, use default
                 charsetName = defaultCharset;
+
+            input.reset(); // Back to stream start
+            if (bomCharset != null && bomCharset.offset) {
+                // If BOM detected, skip BOM bytes before reading
+                // detectCharsetFromBom updates the position of the buffer to after the BOM
+                int bomLen = firstBytes.position();
+                 if (bomLen > 0) {
+                     long skipped = input.skip(bomLen);
+                     Validate.isTrue(skipped == bomLen, "Input stream could not be skipped as requested for BOM adjustment.");
+                 }
+            }
+
             BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
-            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
-                reader.skip(1);
             try {
                 doc = parser.parseInput(reader, baseUri);
-            } catch (UncheckedIOException e) {
-                // io exception when parsing (not seen before because reading the stream as we go)
+            } catch (UncheckedIOException e) { // Seen some InputReaders throw this on stream ends
                 throw e.ioException();
             }
-            Charset charset = Charset.forName(charsetName);
-            doc.outputSettings().charset(charset);
-                // some charsets can read but not encode; switch to an encodable charset and update the meta el
+            // Class uses UTF-8 by default; update meta if appropriate. Node charset update happens below
+             Charset parsedCharset = Charset.forName(charsetName);
+             doc.outputSettings().charset(parsedCharset);
+        } else {
+            // Doc parsed ok on initial pass; update charset to detected final name
+            Validate.notNull(charsetName); // Must have been set by now
+            doc.outputSettings().charset(Charset.forName(charsetName));
         }
+
         input.close();
+
+        // Check if the determined charset can encode, otherwise fallback to UTF-8:
+        // Note that the meta update relies on the document structure being modifiable. This may be undesirable.
+        Charset currentCharset = doc.outputSettings().charset();
+        if (!currentCharset.canEncode()) {
+            try {
+                doc.outputSettings().charset(Charset.forName(defaultCharset));
+            } catch (IllegalCharsetNameException e) {
+                Validate.fail("Default charset " + defaultCharset + " unsupported?", e);
+            }
+
+            // Update meta elements to reflect the fallback
+            Elements metaElements = doc.select("meta[charset], meta[http-equiv=content-type]");
+            Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)"); // Re-compile pattern here, or make static final
+            for (Element meta : metaElements) {
+                if (meta.hasAttr("charset")) {
+                    meta.attr("charset", doc.outputSettings().charset().name());
+                } else if (meta.hasAttr("http-equiv") && meta.attr("http-equiv").equalsIgnoreCase("content-type")) {
+                    String content = meta.attr("content");
+                    Matcher m = charsetPattern.matcher(content);
+                    if (m.find()) {
+                        // Replace the found charset name with the new one
+                        String updatedContent = content.substring(0, m.start(1)) + doc.outputSettings().charset().name() + content.substring(m.end(1));
+                        meta.attr("content", updatedContent);
+                    }
+                    // We could also add a charset if one wasn't found; but generally it's better to just update
+                    // the existing declaration.
+                }
+            }
+        }
+
+        // Ensure the document location is set (was missing in original)
+        doc.location(baseUri);
         return doc;
     }
\ No newline at end of file
