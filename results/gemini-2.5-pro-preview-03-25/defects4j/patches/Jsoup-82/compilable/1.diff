diff --git a/tmp/016087f2-8d10-4924-91ea-58b44769ec6d_buggy.java b/tmp/584956c3-8ce5-4bff-8998-40ad42a99070_fixed.java
index 7c7fdc2..8847dae 100644
--- a/tmp/016087f2-8d10-4924-91ea-58b44769ec6d_buggy.java
+++ b/tmp/584956c3-8ce5-4bff-8998-40ad42a99070_fixed.java
@@ -1,81 +1,95 @@
     static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
         if (input == null) // empty body
             return new Document(baseUri);
         input = ConstrainableInputStream.wrap(input, bufferSize, 0);
 
         Document doc = null;
         boolean fullyRead = false;
 
         // read the start of the stream and look for a BOM or meta charset
         input.mark(bufferSize);
         ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
         fullyRead = input.read() == -1;
         input.reset();
 
         // look for BOM - overrides any other header or input
         BomCharset bomCharset = detectCharsetFromBom(firstBytes);
         if (bomCharset != null)
             charsetName = bomCharset.charset;
 
         if (charsetName == null) { // determine from meta. safe first parse as UTF-8
-            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();
+            // Make slice of the firstBytes, rather than a view, so if buffer is larger than doc, rest of bytes aren't loaded.
+            ByteBuffer PEEK_BYTES = firstBytes.slice(); // backup, in case need to re-read with detected charset
+            String docData = Charset.forName(defaultCharset).decode(PEEK_BYTES).toString();
             doc = parser.parseInput(docData, baseUri);
 
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
             String foundCharset = null; // if not found, will keep utf-8 as best attempt
             for (Element meta : metaElements) {
                 if (meta.hasAttr("http-equiv"))
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset"))
                     foundCharset = meta.attr("charset");
                 if (foundCharset != null)
                     break;
             }
 
             // look for <?xml encoding='ISO-8859-1'?>
             if (foundCharset == null && doc.childNodeSize() > 0) {
                 Node first = doc.childNode(0);
                 XmlDeclaration decl = null;
                 if (first instanceof XmlDeclaration)
                     decl = (XmlDeclaration) first;
                 else if (first instanceof Comment) {
                     Comment comment = (Comment) first;
                     if (comment.isXmlDeclaration())
                         decl = comment.asXmlDeclaration();
                 }
                 if (decl != null) {
                     if (decl.name().equalsIgnoreCase("xml"))
                         foundCharset = decl.attr("encoding");
                 }
             }
             foundCharset = validateCharset(foundCharset);
             if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                doc = null;
-            } else if (!fullyRead) {
+                doc = null; // discard doc and parse again
+            } else if (!fullyRead) { // if UTF-8 wasn't explicit via meta tag, and we haven't read the whole stream, maybe give up and re-parse with final encoding
                 doc = null;
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         }
-        if (doc == null) {
+        if (doc == null) { // If doc is null, we need to parse it from the input stream, possibly with a detected charset.
             if (charsetName == null)
-                charsetName = defaultCharset;
+                charsetName = defaultCharset; // Determines the character encoding to use for the InputStreamReader
+
             BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
-            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
-                reader.skip(1);
+            if (bomCharset != null && bomCharset.offset) { // creating the buffered reader ignores the input pos, so must skip here
+                long skipped = reader.skip(1); // Bom is always 1 character, regardless of actual encoding byte count.
+                Validate.isTrue(skipped == 1);
+            }
             try {
                 doc = parser.parseInput(reader, baseUri);
             } catch (UncheckedIOException e) {
                 // io exception when parsing (not seen before because reading the stream as we go)
                 throw e.ioException();
             }
+
+            // We determine the charset name from the stream byte sequences,
+            // and then set the output stream appropriately.
             Charset charset = Charset.forName(charsetName);
-            doc.outputSettings().charset(charset);
-                // some charsets can read but not encode; switch to an encodable charset and update the meta el
+            doc.outputSettings().charset(charset); // Initially set the output charset based on determined/provided name
+
+            // Check if the determined charset can actually be encoded. If not, swap to default (UTF-8)
+            // and update the document's meta element. This is useful for reading docs from CJK
+            // charsets that may not be supported on the writing JVM.
+            if (!charset.canEncode()) {
+                doc.charset(Charset.forName(defaultCharset)); // This updates the output charset AND the meta tag.
             }
-        input.close();
+        }
+        input.close(); // Ensure the input stream is closed, even if fully read before.
         return doc;
     }
\ No newline at end of file
