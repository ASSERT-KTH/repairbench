diff --git a/tmp/167deedf-4c81-40d7-8caa-8497a76f0447_buggy.java b/tmp/cc43cf94-5e4b-44b6-87ae-53383f654ed7_fixed.java
index 7c7fdc2..0f972a3 100644
--- a/tmp/167deedf-4c81-40d7-8caa-8497a76f0447_buggy.java
+++ b/tmp/cc43cf94-5e4b-44b6-87ae-53383f654ed7_fixed.java
@@ -1,81 +1,124 @@
     static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
         if (input == null) // empty body
             return new Document(baseUri);
         input = ConstrainableInputStream.wrap(input, bufferSize, 0);
 
         Document doc = null;
         boolean fullyRead = false;
 
         // read the start of the stream and look for a BOM or meta charset
         input.mark(bufferSize);
-        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
-        fullyRead = input.read() == -1;
-        input.reset();
+        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed.
+        fullyRead = input.read() == -1; // Check if fully read
+        input.reset(); // Reset input stream to position before reading firstBytes
 
         // look for BOM - overrides any other header or input
         BomCharset bomCharset = detectCharsetFromBom(firstBytes);
-        if (bomCharset != null)
-            charsetName = bomCharset.charset;
+        if (bomCharset != null && bomCharset.charset != null) { // Check bomCharset.charset nullness
+            charsetName = bomCharset.charset; // Assign found charset name
+        }
 
         if (charsetName == null) { // determine from meta. safe first parse as UTF-8
+            firstBytes.rewind(); // Ensure buffer is read from the start for decoding
+            // defaultCharset is used for the initial parse if no BOM/header found
             String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();
             doc = parser.parseInput(docData, baseUri);
 
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
             String foundCharset = null; // if not found, will keep utf-8 as best attempt
             for (Element meta : metaElements) {
                 if (meta.hasAttr("http-equiv"))
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset"))
                     foundCharset = meta.attr("charset");
                 if (foundCharset != null)
                     break;
             }
 
             // look for <?xml encoding='ISO-8859-1'?>
             if (foundCharset == null && doc.childNodeSize() > 0) {
                 Node first = doc.childNode(0);
                 XmlDeclaration decl = null;
                 if (first instanceof XmlDeclaration)
                     decl = (XmlDeclaration) first;
                 else if (first instanceof Comment) {
                     Comment comment = (Comment) first;
-                    if (comment.isXmlDeclaration())
+                    if (comment.isXmlDeclaration()) // Use built-in check
                         decl = comment.asXmlDeclaration();
                 }
                 if (decl != null) {
-                    if (decl.name().equalsIgnoreCase("xml"))
-                        foundCharset = decl.attr("encoding");
+                    if (decl.name().equalsIgnoreCase("xml")) // Check name is 'xml'
+                        foundCharset = decl.attr("encoding"); // Get encoding attribute
                 }
             }
+
             foundCharset = validateCharset(foundCharset);
             if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
-                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                // found a different charset, need to reparse
+                foundCharset = foundCharset.trim().replaceAll("[\"']", ""); // Sanitize
                 charsetName = foundCharset;
-                doc = null;
+                doc = null; // Discard initial parse, signal for reparse
             } else if (!fullyRead) {
-                doc = null;
+                // The charset is default, but the input stream was truncated. Need to reparse with default charset.
+                doc = null; // Discard initial parse, signal for reparse
+                charsetName = defaultCharset; // Ensure charsetName is set for reparsing
+            } else {
+                 // Fully read and charset is default (or not found). Initial parse is sufficient.
+                 // Ensure charsetName reflects the default for later use.
+                 charsetName = defaultCharset;
             }
-        } else { // specified by content type header (or by user on file load)
+        } else { // charsetName provided by BOM or user/header
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         }
-        if (doc == null) {
-            if (charsetName == null)
+
+        if (doc == null) { // Reparse needed (or initial parse was discarded)
+            if (charsetName == null) { // Safety check, should be set by now
                 charsetName = defaultCharset;
+            }
+            // We need to read the whole stream with the correct charset.
+            // Input stream position should be at the start due to input.reset() earlier.
+
             BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
-            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
+
+            if (bomCharset != null && bomCharset.offset) {
+                // Skip BOM character read by BufferedReader. Keeping original logic for minimal change.
                  reader.skip(1);
+            }
+
             try {
                 doc = parser.parseInput(reader, baseUri);
             } catch (UncheckedIOException e) {
                 // io exception when parsing (not seen before because reading the stream as we go)
                 throw e.ioException();
             }
-            Charset charset = Charset.forName(charsetName);
-            doc.outputSettings().charset(charset);
-                // some charsets can read but not encode; switch to an encodable charset and update the meta el
+            // Set the charset that was used for parsing this final document.
+            Charset parsedCharset = Charset.forName(charsetName);
+            doc.outputSettings().charset(parsedCharset);
+
         }
-        input.close();
+        // If doc was not null, it means the initial parse was used. Its charset should be defaultCharset.
+        // The final check below will ensure output settings are correctly set and handle encodability.
+
+        // Final step: ensure charset is set and check encodability.
+        // This applies whether doc came from initial parse or reparse.
+        Validate.notNull(doc, "Doc should not be null"); // Ensure doc exists
+
+        Charset currentCharset = doc.outputSettings().charset(); // Get the current charset setting
+        if (currentCharset == null) {
+             // If doc is from initial parse, output setting might be null.
+             // Set it based on the determined charsetName (which is defaultCharset in this case).
+             if (charsetName == null) charsetName = defaultCharset; // Extra safety
+             currentCharset = Charset.forName(charsetName);
+             doc.outputSettings().charset(currentCharset);
+        }
+
+        // THE FIX: Check if the current charset can encode. If not, update to defaultCharset (UTF-8).
+        if (!currentCharset.canEncode()) {
+            Charset fallbackCharset = Charset.forName(defaultCharset); // Use the defined default charset
+            doc.charset(fallbackCharset); // Use doc.charset() to update both output settings and the meta tag
+        }
+
+        input.close(); // Close the outermost InputStream
         return doc;
     }
\ No newline at end of file
