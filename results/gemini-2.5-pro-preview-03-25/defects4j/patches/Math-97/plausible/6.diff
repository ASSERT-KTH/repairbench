diff --git a/tmp/1dfa6bee-6648-4f10-a962-761bf3be973f_buggy.java b/tmp/d43c6b8b-2e1d-40ee-be41-92f2a20a2986_fixed.java
index 88647d1..d349bc9 100644
--- a/tmp/1dfa6bee-6648-4f10-a962-761bf3be973f_buggy.java
+++ b/tmp/d43c6b8b-2e1d-40ee-be41-92f2a20a2986_fixed.java
@@ -1,44 +1,65 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
+        // Check if min is close enough to zero according to function value accuracy.
+        // functionValueAccuracy is typically very small, e.g., 1E-15.
+        if (Math.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0);
+            // Return min as the root, as its function value is negligible.
+            // The internal result state is set by setResult.
+            return min; 
+        }
+        
         double yMax = f.value(max);
+        // Check if max is close enough to zero according to function value accuracy.
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
+            // Return max as the root, as its function value is negligible.
+            // The internal result state is set by setResult.
+            return max;
+        }
         
-        // Verify bracketing
+        // Verify bracketing: function values at endpoints must have different signs.
+        // This check is performed AFTER verifying whether endpoints themselves are roots.
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+        // The case sign == 0 is handled by the endpoint checks above.
+        // If sign > 0, the values have the same sign, and the interval does not bracket a root.
+        if (sign > 0) {
+            // Neither endpoint is a root (within functionValueAccuracy), 
+            // and they don't bracket a root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
+        } 
+        // If sign < 0, the interval properly brackets a root. Proceed with the solver algorithm.
+        // The internal solve method implements the core Brent's algorithm logic.
+        // It's expected to find the root, call setResult, and return the root value.
+        // The original code calls solve with min as the initial guess.
         ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
-        }
             
+        // Return the root found by the internal solve method.
         return ret;
     }
\ No newline at end of file
