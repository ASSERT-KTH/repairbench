diff --git a/tmp/cc056fbd-766e-48c8-beed-135c01c91735_buggy.java b/tmp/85a95802-17c3-4876-bc63-e1918fcdeaa0_fixed.java
index 88647d1..4402ebd 100644
--- a/tmp/cc056fbd-766e-48c8-beed-135c01c91735_buggy.java
+++ b/tmp/85a95802-17c3-4876-bc63-e1918fcdeaa0_fixed.java
@@ -1,44 +1,68 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      *
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
         clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
 
         double yMin = f.value(min);
+        // Check if min is a root within absolute accuracy
+        if (Math.abs(yMin) <= absoluteAccuracy) {
+            setResult(min, 0);
+            return result;
+        }
+
         double yMax = f.value(max);
+        // Check if max is a root within absolute accuracy
+        if (Math.abs(yMax) <= absoluteAccuracy) {
+            setResult(max, 0);
+            return result;
+        }
 
-        // Verify bracketing
+        // Verify bracketing: ensure function values have opposite signs
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+        if (sign > 0) {
+            // check if either value is close to a zero is done above
             // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                      "  Endpoints: [" + min + "," + max + "]" +
                      "  Values: [" + yMin + "," + yMax + "]");
+        } else if (sign == 0) {
+            // This case should not be reachable due to the checks above,
+            // but handle defensively just in case.
+            // One of the endpoints is a root, handled above. If we reach here,
+            // it implies a potential precision issue or logic error.
+            // Let's decide based on which value is zero.
+             if (yMin == 0.0) {
+                 setResult(min, 0);
+                 return result;
              } else {
-            // solve using only the first endpoint as initial guess
+                 setResult(max, 0);
+                 return result;
+             }
+        } else { // sign < 0 : The interval brackets a root.
+            // solve using the Brent algorithm, starting with min as the initial guess
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            // The solve(...) method above calls setResult(...) before returning.
         }
 
-        return ret;
+        return ret; // Return the computed root
     }
\ No newline at end of file
