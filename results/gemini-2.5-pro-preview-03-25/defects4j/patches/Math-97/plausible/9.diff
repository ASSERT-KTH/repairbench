diff --git a/tmp/d28d36bf-b36f-47b5-9c06-711fa5344d86_buggy.java b/tmp/7d6796ef-90fa-4767-8a57-e22f32a64351_fixed.java
index 88647d1..5054960 100644
--- a/tmp/d28d36bf-b36f-47b5-9c06-711fa5344d86_buggy.java
+++ b/tmp/7d6796ef-90fa-4767-8a57-e22f32a64351_fixed.java
@@ -1,44 +1,58 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
+        // Check if min is a root
+        if (Math.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0);
+            return result;
+        }
+        
         double yMax = f.value(max);
+        // Check if max is a root
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
+            return result;
+        }
         
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+        if (sign > 0) { // Use sign > 0 instead of sign >= 0 after checking endpoints
+            // check if either value is close to a zero - Already handled above
             // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
             // solve using only the first endpoint as initial guess
+            // Only the sign < 0 case should be treated here, 
+            // as sign == 0 implies one endpoint is a root (handled above).
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
         }
 
+        // The result is set by the internal solve method or the endpoint checks.
+        // The internal solve method returns the root value which is assigned to ret.
         return ret;
     }
\ No newline at end of file
