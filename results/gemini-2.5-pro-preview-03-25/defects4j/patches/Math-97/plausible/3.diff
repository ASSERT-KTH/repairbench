diff --git a/tmp/70a1d097-cd79-4c86-b6e2-58c8bb7352e0_buggy.java b/tmp/56639710-115d-492e-b173-866eda2d57c4_fixed.java
index 88647d1..aa19992 100644
--- a/tmp/70a1d097-cd79-4c86-b6e2-58c8bb7352e0_buggy.java
+++ b/tmp/56639710-115d-492e-b173-866eda2d57c4_fixed.java
@@ -1,44 +1,65 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
+     * (unless one endpoint is already a root within the function value accuracy)
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
+        // Calculate function values at endpoints
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
+        // Check if endpoints are roots within tolerance
+        // This must be done before checking the sign condition for bracketing,
+        // to handle cases where F(min) or F(max) is exactly or very close to zero.
+        if (Math.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0); // Found root at min endpoint, 0 iterations
+            return result; // 'result' is set by setResult
+        }
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0); // Found root at max endpoint, 0 iterations
+            return result; // 'result' is set by setResult
+        }
+        
+        // Verify bracketing: signs should be opposite for Brent's method to proceed.
+        // This check is performed AFTER checking if endpoints themselves are roots.
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+        if (sign > 0) {
+            // If signs are the same, and neither endpoint is a root (checked above),
+            // then the interval does not bracket a root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
+            // sign < 0: The interval brackets a root. Proceed with Brent's method.
+            // The sign == 0 case is handled by the endpoint checks above,
+            // as one of yMin or yMax must be within functionValueAccuracy of zero.
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            // The inner solve method performs the iterations and calls setResult.
+            // It returns the computed root.
         }
 
+        // Return the root found by the inner solve method.
+        // Note: The result field is also set by the inner solve, but returning 
+        // the value directly returned by the inner solve is consistent with original code.
         return ret;
     }
\ No newline at end of file
