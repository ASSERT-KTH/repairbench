diff --git a/tmp/0f789ea8-b8f2-4620-8e99-8401c95c04d9_buggy.java b/tmp/591e548f-43d4-47db-8b66-589f7f94430e_fixed.java
index 88647d1..f05bd2c 100644
--- a/tmp/0f789ea8-b8f2-4620-8e99-8401c95c04d9_buggy.java
+++ b/tmp/591e548f-43d4-47db-8b66-589f7f94430e_fixed.java
@@ -1,44 +1,68 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
+        // Check if min is already a root within function value accuracy
+        if (Math.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0);
+            return result; // result field is set by setResult
+        }
+        
         double yMax = f.value(max);
+        // Check if max is already a root within function value accuracy
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
+            return result; // result field is set by setResult
+        }
         
-        // Verify bracketing
+        // Verify bracketing, now that we know neither endpoint is the root.
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+        if (sign > 0) {
+            // yMin and yMax have the same sign (and are non-zero).
+            // Root is not bracketed.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
+        } else if (sign < 0) {
+            // solve using the Brent algorithm, starting with min as initial guess
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+        } else {
+            // sign == 0.0
+            // This implies one of yMin or yMax was exactly 0.0
+            // This case should have been caught by the Math.abs(y) <= functionValueAccuracy checks,
+            // but handle it for robustness.
+             if (yMin == 0.0) {
+                 ret = min;
+                 setResult(ret, 0);
+             } else { // yMax == 0.0
+                 ret = max;
+                 setResult(ret, 0);
+             }
         }
 
+        // The result should have been set either by the endpoint checks or by the internal solve call.
+        // The internal solve method is expected to return the computed root value.
         return ret; 
     }
\ No newline at end of file
