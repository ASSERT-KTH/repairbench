diff --git a/tmp/1fb62a4a-8241-469f-a624-3bb9e0cadbc3_buggy.java b/tmp/a0f1c631-affc-4f3b-9b27-b9d8dabdd688_fixed.java
index 88647d1..03d75fe 100644
--- a/tmp/1fb62a4a-8241-469f-a624-3bb9e0cadbc3_buggy.java
+++ b/tmp/a0f1c631-affc-4f3b-9b27-b9d8dabdd688_fixed.java
@@ -1,44 +1,53 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
+        // Check if min is a root
+        if (Math.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0);
+            return result;
+        }
+        
         double yMax = f.value(max);
+        // Check if max is a root
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
+            return result;
+        }
         
         // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+        if (yMin * yMax > 0) { // Use > 0 instead of >= 0 after checking endpoints
             // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
+        }
+        // Signs are opposite, solve using the Brent algorithm
         ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
-        }
 
+        // solve(double, double, double, double, double, double) is expected
+        // to set the result and iteration count, so we just return the value.
         return ret;
     }
\ No newline at end of file
