diff --git a/tmp/5daed7fc-a71f-4454-9e15-de169a42f4d5_buggy.java b/tmp/be27d6f9-1e2c-403d-8660-709b51a07afd_fixed.java
index 88647d1..39e5fd4 100644
--- a/tmp/5daed7fc-a71f-4454-9e15-de169a42f4d5_buggy.java
+++ b/tmp/be27d6f9-1e2c-403d-8660-709b51a07afd_fixed.java
@@ -1,44 +1,61 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
+     * signs, unless one of the endpoints is actually a root. An
+     * <code>IllegalArgumentException</code> is thrown if this is not the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
-     * @throws IllegalArgumentException if min is not less than max or the
+     * @throws IllegalArgumentException if min is not less than max, or the
      * signs of the values of the function at the endpoints are not opposites
+     * (and neither endpoint is a root).
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
+        // check if min is a root
+        if (Math.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0);
+            return result;
+        }
+        
         double yMax = f.value(max);
+        // check if max is a root
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
+            return result;
+        }
         
         // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+        if (yMin * yMax > 0) {
+            // The signs are the same, and neither endpoint is zero function value.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
+        }
+        
+        // Signs are different, proceed with Brent's method
+        // The original code used min as the initial guess, which is acceptable.
         ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
-        }
 
+        // solve(..) should have set the result and iteration count.
+        // This return statement assumes the internal solve method returns the root.
+        // If the internal solve method updates the result field directly, 
+        // returning this.result might be more appropriate depending on the exact
+        // implementation details of the internal solve method. However, returning
+        // the value returned by the internal solve method matches the original code's
+        // structure after the fix.
         return ret;
     }
\ No newline at end of file
