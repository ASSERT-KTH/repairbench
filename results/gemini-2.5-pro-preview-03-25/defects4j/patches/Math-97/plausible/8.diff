diff --git a/tmp/e51d278a-0fd7-43e2-8cd6-54a9d7f19820_buggy.java b/tmp/1d357062-4e27-4c7b-9864-8caec43cf691_fixed.java
index 88647d1..d55030d 100644
--- a/tmp/e51d278a-0fd7-43e2-8cd6-54a9d7f19820_buggy.java
+++ b/tmp/1d357062-4e27-4c7b-9864-8caec43cf691_fixed.java
@@ -1,44 +1,69 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
+     * signs OR one of the endpoints is close to a root based on the function value accuracy.
+     * An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
+     * and neither endpoint is close to a root.
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
+        // Verify bracketing or endpoint root
         double sign = yMin * yMax;
         if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+            // check if either endpoint is a root within function value accuracy
+            // Note: functionValueAccuracy is typically defined in the AbstractUnivariateRealSolver class or BrentSolver itself
+            if (Math.abs(yMin) < functionValueAccuracy) {
+                // Ensure result is set before returning
+                setResult(min, 0); 
+                return min;
+            } 
+            if (Math.abs(yMax) < functionValueAccuracy) {
+                // Ensure result is set before returning
+                setResult(max, 0);
+                return max;
+            }   
+            
+            // If neither endpoint is a root (within tolerance) and signs are not opposite, then it's an error.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
+            // Function values have opposite signs, proceed with Brent's method.
+            // solve using the Brent algorithm, starting with the provided interval.
+            // The overloaded solve method below presumably implements Brent's algorithm.
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
         }
 
+        // Check that the returned value satisfies the function value accuracy.
+        // This check might be redundant if the internal solve method already ensures it,
+        // but it is included for robustness, similar to how it might be done in AbstractUnivariateRealSolver.
+        // It might be better placed within the internal solve or AbstractUnivariateRealSolver's solve method.
+        // However, without seeing the rest of the class, we keep the structure close to the original.
+        // if (Math.abs(f.value(ret)) > functionValueAccuracy) {
+             // Handle appropriately, perhaps log or refine result if needed, 
+             // though Brent's method should ideally converge to this accuracy if possible.
+        // }
+
         return ret;
     }
\ No newline at end of file
