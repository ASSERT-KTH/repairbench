diff --git a/tmp/1891e859-8299-4445-afca-87b554cc2101_buggy.java b/tmp/9a16e341-d0a6-43a3-84a7-cfe4d262ecac_fixed.java
index 88647d1..89e7709 100644
--- a/tmp/1891e859-8299-4445-afca-87b554cc2101_buggy.java
+++ b/tmp/9a16e341-d0a6-43a3-84a7-cfe4d262ecac_fixed.java
@@ -1,44 +1,64 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      *
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
         clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
 
         double yMin = f.value(min);
+        // check if min is a root
+        if (Math.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0);
+            return result; // Use the result field updated by setResult
+        }
+
         double yMax = f.value(max);
+        // check if max is a root
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
+            return result; // Use the result field updated by setResult
+        }
 
-        // Verify bracketing
+        // Verify bracketing. We know that neither endpoint is a root
+        // within the function value accuracy.
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+        if (sign > 0) {
+            // check if either value is close to a zero - already done above
             // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" +
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
+            // sign < 0 or sign == 0
+            // solve using only the first endpoint as initial guess.
+            // The iterative solver should handle the case where sign == 0
+            // (i.e., one endpoint is exactly zero but not caught by the tolerance check).
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            // We should return the result field, which is set by the iterative solve method
+            // or retrieve the value returned by solve if it doesn't use setResult internally
+            // Assuming the internal solve sets the result field:
+            // return result;
+            // However, the original code returned 'ret', let's stick to that pattern assuming
+            // the internal solve returns the root value.
         }
 
-        return ret;
+        return ret; // Return the root found by the iterative solve method
     }
\ No newline at end of file
