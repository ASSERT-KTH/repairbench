diff --git a/tmp/00469210-35d7-4b36-83a8-b66106bd1a4c_buggy.java b/tmp/8b2e30bd-7dc7-4530-a9fb-9540b4396347_fixed.java
index a667cbe..678571e 100644
--- a/tmp/00469210-35d7-4b36-83a8-b66106bd1a4c_buggy.java
+++ b/tmp/8b2e30bd-7dc7-4530-a9fb-9540b4396347_fixed.java
@@ -1,10 +1,34 @@
     /**
      * Recalculate the hash code after deserialization. The hash code of some
      * keys might have change (hash codes based on the system hash code are
      * only stable for the same process).
      * @return the instance with recalculated hash code
+     * @throws ObjectStreamException if the deserialization fails
      */
-    private Object readResolve() {
+    private Object readResolve() throws ObjectStreamException {
+        // Recalculate the hash code based on the deserialized keys.
+        // The transient 'hashCode' field is initialized to 0 after deserialization.
+        // This method ensures it's populated correctly before the object is returned.
         calculateHashCode(keys);
         return this;
     }
+
+    /**
+     * Calculates the hash code based on the keys.
+     * @param keys the keys
+     */
+    // Assuming calculateHashCode is defined correctly in the same class like:
+    // private void calculateHashCode(final Object[] keys) {
+    //     int total = 0;
+    //     if (keys != null) {
+    //         for (final Object key : keys) {
+    //             if (key != null) {
+    //                 total ^= key.hashCode();
+    //             }
+    //         }
+    //     }
+    //     this.hashCode = total; // Updates the transient hashCode field
+    // }
+    // Note: The actual implementation of calculateHashCode needs to exist
+    // and correctly update the transient 'hashCode' field. The provided
+    // buggy function 'readResolve' depends on it.
