diff --git a/tmp/66aa31f5-7296-4921-9c72-686cdd7cab61_buggy.java b/tmp/0ff37db3-fe1c-4743-a1d9-222c9466afac_fixed.java
index 65c0e7b..eb8fedf 100644
--- a/tmp/66aa31f5-7296-4921-9c72-686cdd7cab61_buggy.java
+++ b/tmp/0ff37db3-fe1c-4743-a1d9-222c9466afac_fixed.java
@@ -1,127 +1,155 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
+            // Check the signs of the function values to determine which side of x the root lies.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // The root is in the interval [x, x1].
+                // Update the endpoint known not to contain the root:
+                // Set x0 = x1, f0 = f1. The interval becomes [x1, x], which is inverted.
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
             } else {
+                 // The root is in the interval [x0, x].
+                 // Update the endpoint known not to contain the root:
+                 // Set x1 = x, f1 = fx. The interval remains [x0, x].
+                 // In this case, the endpoint x0 (and f0) remains stationary,
+                 // potentially causing stagnation in the Regula Falsi method.
                 switch (method) {
                 case ILLINOIS:
+                    // Apply the Illinois modification to the stationary endpoint's function value.
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
+                     // Apply the Pegasus modification to the stationary endpoint's function value.
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+                    // Standard Regula Falsi does not modify the stationary endpoint.
+                    // This branch is intentionally left empty. The previous implementation
+                    // had a problematic check 'if (x == x1)' which attempted to handle
+                    // stagnation but was flawed and incorrect for standard Regula Falsi.
+                    // Removing it restores the standard behavior, which might stagnate
+                    // as expected by some tests (like testIssue631).
                     break;
                 default:
                     // Should never happen.
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint corresponding to the newly computed approximation x.
+            // This is always the 'x1' endpoint in our representation.
             x1 = x;
             f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // Check convergence based on function value magnitude at the latest estimate x1.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
+                    // If the interval is inverted, [x0, x1] actually represents [orig_x1, x].
+                    // So, x1 = x is the left endpoint.
                     if (inverted) {
                         return x1;
                     }
+                    // Otherwise, x1 is the right endpoint, which doesn't satisfy LEFT_SIDE.
+                    // Continue to check interval convergence. The other endpoint might satisfy it.
                     break;
                 case RIGHT_SIDE:
+                    // If the interval is not inverted, [x0, x1] represents [orig_x0, x].
+                    // So, x1 = x is the right endpoint.
                     if (!inverted) {
                         return x1;
                     }
+                     // Otherwise, x1 is the left endpoint, which doesn't satisfy RIGHT_SIDE.
+                    // Continue to check interval convergence. The other endpoint might satisfy it.
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
+                    // Otherwise, f1 > 0, which doesn't satisfy BELOW_SIDE.
+                    // Continue to check interval convergence. The other endpoint might satisfy it.
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
+                     // Otherwise, f1 < 0, which doesn't satisfy ABOVE_SIDE.
+                    // Continue to check interval convergence. The other endpoint might satisfy it.
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
+            // Check convergence based on the width of the interval [x0, x1].
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
+                // The interval is small enough. Return the endpoint that satisfies the side requirement.
                 switch (allowed) {
                 case ANY_SIDE:
+                    // Return the latest estimate.
                     return x1;
                 case LEFT_SIDE:
+                    // Return the endpoint confirmed to be on the left side of the root.
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                    // Return the endpoint confirmed to be on the right side of the root.
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Return the endpoint with a function value <= 0.
+                    // Assumes f0 and f1 have opposite signs due to bracketing.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                     // Return the endpoint with a function value >= 0.
+                    // Assumes f0 and f1 have opposite signs due to bracketing.
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
