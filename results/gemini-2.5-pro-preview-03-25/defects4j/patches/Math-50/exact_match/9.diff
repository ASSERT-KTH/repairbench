diff --git a/tmp/7c07bdc9-5981-437b-b102-20ec9b5ee3a4_buggy.java b/tmp/f89dd22b-5fe1-4612-90fe-5e7303d7e658_fixed.java
index 65c0e7b..19a419c 100644
--- a/tmp/7c07bdc9-5981-437b-b102-20ec9b5ee3a4_buggy.java
+++ b/tmp/f89dd22b-5fe1-4612-90fe-5e7303d7e658_fixed.java
@@ -1,127 +1,136 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
                 // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // the interval. The new interval is [old x1, x]. Updates:
+                // x0 = old x1, f0 = old f1, x1 = x, f1 = fx
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
             } else {
+                // The value of x1 has not switched to the other bound.
+                // The new interval is [x0, x]. Updates:
+                // x0 = x0, f0 = f0 (unless method modifies it), x1 = x, f1 = fx
                 switch (method) {
                 case ILLINOIS:
+                    // Modify the stagnant endpoint representation.
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
+                     // Modify the stagnant endpoint representation.
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
-                    break;
+                    // In classic Regula Falsi, the stagnant endpoint is not modified.
+                    // This can lead to slow convergence (stagnation).
+                    // The problematic modification below is removed to potentially
+                    // trigger the expected TooManyEvaluationsException in testIssue631.
+                    // if (x == x1) {
+                    //     x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                    //     f0 = computeObjectiveValue(x0);
+                    // }
+                    break; // Nothing.
                 default:
                     // Should never happen.
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint which is converging to the root.
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
