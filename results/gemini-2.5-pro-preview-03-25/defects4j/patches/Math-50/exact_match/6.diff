diff --git a/tmp/fabe8f3f-67a3-430d-a93d-934f91b0c071_buggy.java b/tmp/610a11ab-da52-4a23-877d-3571f10cd8b2_fixed.java
index 65c0e7b..a1d5d46 100644
--- a/tmp/fabe8f3f-67a3-430d-a93d-934f91b0c071_buggy.java
+++ b/tmp/610a11ab-da52-4a23-877d-3571f10cd8b2_fixed.java
@@ -1,127 +1,140 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
+            // Regula Falsi formula.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // The root is in the interval [x, x1]. We update x0 to x,
+                // but to keep the code structure simple, we swap x0/f0 and x1/f1
+                // and later update x1/f1 to x/fx.
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
             } else {
+                // The root is in the interval [x0, x]. We update x1 to x.
+                // For faster convergence, in some methods we need to modify the
+                // function value of the endpoint that retains its position.
                 switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+                    // The standard Regula Falsi does not modify function values.
+                    // It can be slow if one endpoint is stagnant.
+                    // The problematic code for stagnation handling was removed here.
                     break;
                 default:
                     // Should never happen.
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint associated with x. It replaces the old x1.
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // check if the current estimate meets the desired side criteria.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
+                    if (inverted) { // Current interval is (x1, x0) with x1 < x0
+                        return x1;  // x1 is the left endpoint
                     }
+                    // If !inverted, x1 is the right endpoint. Cannot return yet.
                     break;
                 case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
+                    if (!inverted) { // Current interval is (x0, x1) with x0 < x1
+                        return x1;   // x1 is the right endpoint
                     }
+                    // If inverted, x1 is the left endpoint. Cannot return yet.
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
+                    // If f1 > 0, cannot return yet.
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
+                    // If f1 < 0, cannot return yet.
                     break;
                 default:
                     throw new MathInternalError();
                 }
+                // If we didn't return, it means f1 is close to 0 but x1 is not on the desired side.
+                // We proceed to check the interval width convergence.
             }
 
             // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
+            // are satisfied. Return the endpoint that satisfies the allowed solutions.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return x1; // Return the latest approximation.
                 case LEFT_SIDE:
+                    // Return the endpoint closer to negative infinity.
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                    // Return the endpoint closer to positive infinity.
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Return the endpoint with function value <= 0.
+                    // Since f0 * f1 is supposed to be < 0, one of them should satisfy the condition.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                    // Return the endpoint with function value >= 0.
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
-        }
+        } // End of while loop
     }
\ No newline at end of file
