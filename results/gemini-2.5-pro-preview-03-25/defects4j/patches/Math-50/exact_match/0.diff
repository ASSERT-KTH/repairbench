diff --git a/tmp/c6194d95-6c40-4aa2-8923-4972c0a49df2_buggy.java b/tmp/7df27d7b-57ea-4854-a18b-04c966d363bf_fixed.java
index 65c0e7b..8c77423 100644
--- a/tmp/c6194d95-6c40-4aa2-8923-4972c0a49df2_buggy.java
+++ b/tmp/7df27d7b-57ea-4854-a18b-04c966d363bf_fixed.java
@@ -1,127 +1,146 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
                 // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // the interval. The new interval is [x, x1], but we assign
+                // x to x1 below, so x0 needs to become the old x1.
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
             } else {
+                // Root is in [x0, x]. Keep x0 the same endpoint index, but update
+                // its value for guarded methods. The new interval is [x0, x].
                 switch (method) {
                 case ILLINOIS:
+                    // Dampen the function value of the stagnant endpoint
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
+                     // Dampen the function value of the stagnant endpoint
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+                    // Classic Regula Falsi does not modify the stagnant endpoint.
+                    // It can be very slow if one endpoint is stagnant.
+                    // The original code had a problematic check here:
+                    // if (x == x1) { ... } which is removed as it's unlikely
+                    // to trigger correctly and is not part of the standard
+                    // Regula Falsi algorithm. Its removal allows the expected
+                    // slow convergence / TooManyEvaluationsException for
+                    // cases like testIssue631.
                     break;
                 default:
                     // Should never happen.
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint currently associated with x1 to the new
+            // approximation x.
             x1 = x;
             f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // Check for convergence based on function value
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    if (inverted) {
+                    if (inverted) { // Corresponds to original x1 (max) < x0 (min) case? No, checks orientation.
                         return x1;
                     }
-                    break;
+                    break; // If not left side, criteria not met. Check interval width.
                 case RIGHT_SIDE:
-                    if (!inverted) {
+                    if (!inverted) { // Corresponds to original x0 (min) < x1 (max)?
                         return x1;
                     }
-                    break;
+                    break; // If not right side, criteria not met. Check interval width.
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
-                    break;
+                     break; // If not below side, criteria not met. Check interval width.
                case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
-                    break;
+                    break; // If not above side, criteria not met. Check interval width.
                 default:
                     throw new MathInternalError();
                 }
+                // If we reach here, the function value criterion was met, but the allowed side condition was not.
+                // The original code fell through to check the interval width criterion.
+                // However, if ftol is met, we should potentially return the *other* endpoint
+                // if the current endpoint x1 doesn't satisfy the side condition.
+                // This logic seems missing / potentially incorrect in the original code too.
+                // But for fixing the specific test failure, we focus on the REGULA_FALSI case.
+                // Let's keep the original logic here for now.
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
+
+            // Check for convergence based on interval width
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
+                // If interval width is met, return the endpoint satisfying the side condition.
                 switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return x1; // Return the latest approximation
                 case LEFT_SIDE:
-                    return inverted ? x1 : x0;
+                    // Return the endpoint closer to negative infinity
+                    return inverted ? x1 : x0; // If inverted, x0=old_x1>x1, so x1 is left. If not inverted, x0<x1, so x0 is left.
                 case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
+                    // Return the endpoint closer to positive infinity
+                     return inverted ? x0 : x1; // If inverted, x0=old_x1>x1, so x0 is right. If not inverted, x0<x1, so x1 is right.
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    // Return the endpoint where f <= 0
+                    return (f1 <= 0) ? x1 : x0; // Check f1 first (latest), then f0. Relies on f0*f1<0
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    // Return the endpoint where f >= 0
+                    return (f1 >= 0) ? x1 : x0; // Check f1 first (latest), then f0. Relies on f0*f1<0
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
