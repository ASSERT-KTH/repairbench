diff --git a/tmp/64d9470c-46b0-4122-8d41-c7bc9a26bfc3_buggy.java b/tmp/1b4f0914-3984-4580-8de1-7d27f660936b_fixed.java
index 5abdeb5..b0133cb 100644
--- a/tmp/64d9470c-46b0-4122-8d41-c7bc9a26bfc3_buggy.java
+++ b/tmp/1b4f0914-3984-4580-8de1-7d27f660936b_fixed.java
@@ -1,29 +1,55 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+
+            boolean isLhsOfAssignment = parent != null && parent.isAssign() && parent.getFirstChild() == n;
+
+            // Check if this assignment is part of a statement that defines/initializes the variable,
+            // rather than an assignment used as an expression value.
+            boolean isStatementLevelAssignment = false;
+            if (isLhsOfAssignment) {
+                Node assignNode = parent;
+                Node assignParent = assignNode.getParent();
+                if (assignParent != null) {
+                    // Case: i = x; (parent is EXPR_RESULT)
+                    if (assignParent.isExprResult()) {
+                        isStatementLevelAssignment = true;
+                    }
+                    // Case: for (i = 0; ...), for (...; ...; i++)
+                    // Check if assignNode is the initializer or increment part of a FOR loop.
+                    else if (assignParent.isFor() &&
+                             (assignNode == assignParent.getSecondChild() || // initializer
+                              assignNode == assignParent.getLastChild())) {  // increment
+                        isStatementLevelAssignment = true;
+                    }
+                    // NOTE: This intentionally does not cover `var x = 1;` because in that case `n`
+                    // would be the NAME node `x`, whose parent is VAR, not ASSIGN.
+                    // We only need to exclude the LHS of ASSIGN nodes in specific statement contexts.
+                }
+            }
+
+            // We count the name occurrence if it's NOT the LHS of a statement-level assignment.
+            // This means we count:
+            // 1. Regular reads of the variable.
+            // 2. LHS of assignments that are nested within expressions (e.g., `(i=5)`, `x || (i=1)`),
+            //    as these assignments are used for their value and signal complexity that
+            //    might make inlining unsafe based on a simple use count.
+            if (!isStatementLevelAssignment) {
               numUsesWithinCfgNode++;
             }
           }
-
+        }
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
