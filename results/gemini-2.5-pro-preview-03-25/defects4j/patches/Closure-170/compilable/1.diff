diff --git a/tmp/9c1682f2-18e6-4e70-b2d6-afb26dc6cc73_buggy.java b/tmp/7a4fc81f-f3a4-4144-aad6-a422ddf7e447_fixed.java
index 5abdeb5..c2394e2 100644
--- a/tmp/9c1682f2-18e6-4e70-b2d6-afb26dc6cc73_buggy.java
+++ b/tmp/7a4fc81f-f3a4-4144-aad6-a422ddf7e447_fixed.java
@@ -1,29 +1,27 @@
     /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+     * Computes the number of uses or definitions of the variable varName and
+     * store it in numUseWithinUseCfgNode.
+     * TODO(bashir): Change the name of this function. It computes the
+     * number of uses AND definition between Def and Use.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // We are looking for uses OR definitions between the definition site
+          // and the use site. An assignment to the variable (definition) means
+          // that the value might have changed, therefore we count it the same way
+          // as a use.
+          if (n.isName() && n.getString().equals(varName)) {
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
