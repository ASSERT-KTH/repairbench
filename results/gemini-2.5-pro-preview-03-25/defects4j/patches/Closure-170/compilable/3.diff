diff --git a/tmp/1ed11e71-8696-4832-9be8-328b75c7f291_buggy.java b/tmp/277f551c-aeba-4fff-9333-ebdc71251ca3_fixed.java
index 5abdeb5..5182986 100644
--- a/tmp/1ed11e71-8696-4832-9be8-328b75c7f291_buggy.java
+++ b/tmp/277f551c-aeba-4fff-9333-ebdc71251ca3_fixed.java
@@ -1,29 +1,31 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Check if the node represents the variable we are tracking.
+          if (n.isName() && n.getString().equals(varName)) {
+            // Previously, the LHS of an assignment was excluded:
+            // !(parent.isAssign() && (parent.getFirstChild() == n))
+            // However, this prevents inlining in cases like `a ? (var = 1) : 2`
+            // where the assignment itself is a side effect within the expression
+            // that should prevent inlining. Issue 965 demonstrated this need.
+            // By removing the exclusion, we count all occurrences, including
+            // assignments, as potential reasons to avoid inlining within
+            // this CFG node. The broader flow analysis will handle whether
+            // a definition actually reaches this point.
             numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
