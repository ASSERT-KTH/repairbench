diff --git a/tmp/c7aa1ffa-c3f7-46a5-a9ea-844b4f4200ab_buggy.java b/tmp/e150069b-22c5-402f-a7cd-c52d7690c4ec_fixed.java
index 5abdeb5..e8b0559 100644
--- a/tmp/c7aa1ffa-c3f7-46a5-a9ea-844b4f4200ab_buggy.java
+++ b/tmp/e150069b-22c5-402f-a7cd-c52d7690c4ec_fixed.java
@@ -1,29 +1,37 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Check if n is a NAME node representing the variable varName.
+          if (n.isName() && n.getString().equals(varName)) {
+
+            // Previously, there was a condition here to exclude the LHS of assignments:
+            // !(parent.isAssign() && (parent.getFirstChild() == n))
+            // This exception caused issues when an assignment occurred within
+            // the same expression (CFG node) as a use, like in hooks or logical operators,
+            // leading to incorrect inlining decisions (e.g., Issue 965).
+            // Example: `cond ? (var = 1) : 0, var`
+            // The assignment `var = 1` modifies the variable within the same expression/node
+            // as the subsequent use of `var`. For safe inlining, the pass needs to know
+            // about this modification. Counting the assignment LHS as a reference
+            // within the node helps signal this complexity.
+            // We now count all references, including assignment LHS, within the node.
+            // TODO(blickly): The original comment mentioned making SIDE_EFFECT_PREDICATE
+            //   check more exact. This change addresses the specific issue, but
+            //   side effect analysis might need further refinement.
             numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
