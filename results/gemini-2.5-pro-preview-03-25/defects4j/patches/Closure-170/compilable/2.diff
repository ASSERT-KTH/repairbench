diff --git a/tmp/31f6ea84-f826-4ed0-8fff-fc39d274b32a_buggy.java b/tmp/37608433-edd0-4b80-9835-0c02e30aecc6_fixed.java
index 5abdeb5..2e37bf3 100644
--- a/tmp/31f6ea84-f826-4ed0-8fff-fc39d274b32a_buggy.java
+++ b/tmp/37608433-edd0-4b80-9835-0c02e30aecc6_fixed.java
@@ -1,29 +1,53 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
+      // Use an array to allow modification within the anonymous class.
+      final boolean[] foundAssignment = {false};
+
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
+            // Check if this is the left hand side of a simple assignment.
+            boolean isLhsOfAssign = parent != null && parent.isAssign() &&
+                                   parent.getFirstChild() == n;
+
+            if (isLhsOfAssign) {
+              // We found an assignment to the variable within this CFG node.
+              foundAssignment[0] = true;
+              // We don't count the LHS of an assignment as a "use".
+            } else {
+              // This is a potential use (read or part of compound assignment/update).
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+              //   and remove this special case. (Comment retained from original)
+              // Original logic counted all non-ASSIGN LHS occurrences as uses.
+              // Let's retain the original check structure here, focusing on counting reads.
+              // Note: The original check `!(parent.isAssign() && (parent.getFirstChild() == n))`
+              // is implicitly handled by the `if (isLhsOfAssign) {} else {}` structure.
+              // All names that are not LHS of simple assign go here.
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
+
+      // If the variable was assigned within the same CFG node where it was used,
+      // treat it as multiple uses to prevent incorrect inlining in cases like
+      // assignments within hooks or comma operators.
+      if (foundAssignment[0] && numUsesWithinCfgNode > 0) {
+         // Set count to 2 (representing multiple uses) to prevent inlining.
+         numUsesWithinCfgNode = 2;
+      }
     }
\ No newline at end of file
