diff --git a/tmp/bdd6a69d-eeb5-4669-a39e-9385e053b398_buggy.java b/tmp/53561e4b-c30b-4cc9-991c-26d1e922c0d4_fixed.java
index 5abdeb5..ecfd1e4 100644
--- a/tmp/bdd6a69d-eeb5-4669-a39e-9385e053b398_buggy.java
+++ b/tmp/53561e4b-c30b-4cc9-991c-26d1e922c0d4_fixed.java
@@ -1,29 +1,45 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Count occurrences that are definitely reads.
+            // NodeUtil.isLValue distinguishes between declarations, assignments,
+            // and uses. We should only count uses.
+            // Exclude labels (parent IS_LABEL), CATCH var name.
+            if (!NodeUtil.isLValue(n)
+                && !(parent != null && parent.isLabelName())) {
+              // A read of a variable, not a declaration or assignment.
+              // Examples:
+              //   var x = 1; // x is L-Value
+              //   x = 2; // x is L-Value
+              //   foo(x); // x is R-Value (use)
+              //   x++; // x is L-Value
+              //   x.prop; // x is R-Value (use)
+              //   ({x} = {}); // x is L-Value (destructuring)
+              //   label: // label is not a variable use
+              //   try {} catch (x) {} // x is CATCH var, not a typical use
+              // TODO(johnlenz): rework the catch var handling.
+              // This is technically a definition but isn't handled by Liveness
+              // analysis. See markCfgNodeRead.
+
+              // Don't count catch exception names. This is a definition.
+              // They are handled in References.
+              if (parent == null || !parent.isCatch()) {
                 numUsesWithinCfgNode++;
               }
             }
-
+          }
+        }
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
