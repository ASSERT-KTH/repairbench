diff --git a/tmp/34ce3f87-ce90-4fb7-ae38-ba97fd9f7212_buggy.java b/tmp/277f693d-811e-420d-9d3d-fe3c4fb8da9d_fixed.java
index 5abdeb5..da981af 100644
--- a/tmp/34ce3f87-ce90-4fb7-ae38-ba97fd9f7212_buggy.java
+++ b/tmp/277f693d-811e-420d-9d3d-fe3c4fb8da9d_fixed.java
@@ -1,29 +1,26 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // If n is a NAME node representing the variable being tracked.
+          // We count all occurrences, including the LHS of assignments,
+          // because this count is used to check if there's exactly one usage
+          // site within this CFG node. An assignment is treated as a potential
+          // complication that prevents inlining here.
+          // See https://github.com/google/closure-compiler/issues/965
+          if (n.isName() && n.getString().equals(varName)) {
               numUsesWithinCfgNode++;
           }
         }
-
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
