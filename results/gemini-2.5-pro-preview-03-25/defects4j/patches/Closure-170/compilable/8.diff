diff --git a/tmp/517ff0df-f8a0-4399-8033-0221532d7264_buggy.java b/tmp/4910724a-bdcb-4fdb-bf9f-bec27c37307d_fixed.java
index 5abdeb5..7e5556f 100644
--- a/tmp/517ff0df-f8a0-4399-8033-0221532d7264_buggy.java
+++ b/tmp/4910724a-bdcb-4fdb-bf9f-bec27c37307d_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
+     * NOTE: This counts all references, including the left-hand side of simple assignments.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Original code excluded LHS of simple assignments using a check like:
+            // !(parent.isAssign() && (parent.getFirstChild() == n)))
+            // This check is removed. FlowSensitiveInlineVariables needs to know
+            // about assignments within expressions (like ternaries in issue 965)
+            // even if they are assignments, as they represent a modification
+            // that can make inlining unsafe if the variable is used afterward.
+            // Counting all references (including LHS) helps detect this.
+            // The TODO in the original code also hinted that this special
+            // case might be removable with better side-effect analysis.
             numUsesWithinCfgNode++;
           }
         }
-
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
