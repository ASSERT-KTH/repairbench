diff --git a/tmp/fc73686f-0895-436d-abe5-32cff1f570fc_buggy.java b/tmp/7318c1d3-9cac-405d-b26b-1b3d014abad5_fixed.java
index 80921f4..287d926 100644
--- a/tmp/fc73686f-0895-436d-abe5-32cff1f570fc_buggy.java
+++ b/tmp/7318c1d3-9cac-405d-b26b-1b3d014abad5_fixed.java
@@ -1,135 +1,162 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
+            // Need to duplicate context handling from below, just in case
             switch (t) {
             case START_OBJECT:
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 break;
             case START_ARRAY:
                 _parsingContext = _parsingContext.createChildArrayContext(-1, -1);
                 break;
             case END_OBJECT:
             case END_ARRAY:
                 _parsingContext = _parsingContext.getParent();
-                _namesToWrap = _parsingContext.getNamesToWrap();
+                _namesToWrap = (_parsingContext == null) ? null : _parsingContext.getNamesToWrap();
                 break;
             case FIELD_NAME:
-                _parsingContext.setCurrentName(_xmlTokens.getLocalName());
+                 // 16-Feb-2015, tatu: Binding side has no access to Stax XML local name,
+                 //   so it has to be pushed here. Context needs to be parent tho
+                 _parsingContext.setCurrentName(_currText); // Use the text passed from FIELD_NAME case
                 break;
-            default: // VALUE_STRING, VALUE_NULL
-                // should be fine as is?
+            default: // VALUE_STRING, VALUE_NULL etc
             }
             return t;
         }
         int token = _xmlTokens.next();
 
         // Need to have a loop just because we may have to eat/convert
         // a start-element that indicates an array element.
         while (token == XmlTokenStream.XML_START_ELEMENT) {
-            // If we thought we might get leaf, no such luck
+            // If we thought we might get leaf, no such luck: promote to OBJECT
             if (_mayBeLeaf) {
-                // leave _mayBeLeaf set, as we start a new context
                  _nextToken = JsonToken.FIELD_NAME;
+                 // important: createContext automatically creates OBJECT, bumps up level
                  _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
+                 // Should try to retain local name... But use name FIELD_NAME will report
+                 _currText = _xmlTokens.getLocalName();
+                 // 16-Feb-2015, tatu: Need to set name for context too
+                 _parsingContext.setCurrentName(_currText);
                  return (_currToken = JsonToken.START_OBJECT);
             }
+            // Or, seeing element in array context?
             if (_parsingContext.inArray()) {
-                // Yup: in array, so this element could be verified; but it won't be
-                // reported anyway, and we need to process following event.
-                token = _xmlTokens.next();
-                _mayBeLeaf = true;
-                continue;
+                 // In array context, START_ELEMENT implies START_OBJECT for the list element.
+                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1); // Context for the list item
+                 _mayBeLeaf = true; // This object could be empty, i.e. </...> immediately after
+                 // We don't consume the next token yet. Return START_OBJECT for the item.
+                 return (_currToken = JsonToken.START_OBJECT); // FIX for [#180], part 1
             }
+            
+            // Otherwise, regular FIELD_NAME entry
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
 
             // Ok: virtual wrapping can be done by simply repeating current START_ELEMENT.
-            // Couple of ways to do it; but start by making _xmlTokens replay the thing...
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
                 _xmlTokens.repeatStartElement();
             }
 
             _mayBeLeaf = true;
-            // Ok: in array context we need to skip reporting field names.
-            // But what's the best way to find next token?
+            // Need to store local name to be used by _nextToken handling...
+            _currText = name;
             return (_currToken = JsonToken.FIELD_NAME);
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
             // Simple, except that if this is a leaf, need to suppress end:
              if (_mayBeLeaf) {
                  _mayBeLeaf = false;
-                    // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
-                    //    expose as empty Object, not null
-                return (_currToken = JsonToken.VALUE_NULL);
+                 // As per [dataformat-xml#180], need to represent as empty Object.
+                 // We should have returned START_OBJECT just before this due to START_ELEMENT in array.
+                 // Now close it. Context is the object context created then.
+                 _currToken = JsonToken.END_OBJECT; // FIX for [#180], part 2a
+                 _parsingContext = _parsingContext.getParent(); // Pop the object context
+                 _namesToWrap = (_parsingContext == null) ? null : _parsingContext.getNamesToWrap();
+                 return _currToken; // FIX for [#180], part 2b
              }
+            // Otherwise, normal end element; requires matching START_OBJECT/ARRAY was returned
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
-            _namesToWrap = _parsingContext.getNamesToWrap();
+            _namesToWrap = (_parsingContext == null) ? null : _parsingContext.getNamesToWrap();
             return _currToken;
             
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
-            // If there was a chance of leaf node, no more...
+            // If there was a chance of leaf node, no more... Promote to Object.
              if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 _nextToken = JsonToken.FIELD_NAME;
-                _currText = _xmlTokens.getText();
+                 // important: createContext automatically creates OBJECT, bumps up level
                  _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
+                 // We also know the field name (_xmlTokens has it)
+                 _currText = _xmlTokens.getLocalName();
+                 _parsingContext.setCurrentName(_currText); // Also need to set for the context!
                  return (_currToken = JsonToken.START_OBJECT);
              }
-            _parsingContext.setCurrentName(_xmlTokens.getLocalName());
+             // otherwise, just a FIELD_NAME token...
+            _currText = _xmlTokens.getLocalName(); // Need to store local name to be used by _nextToken handling...
+            _parsingContext.setCurrentName(_currText);
             return (_currToken = JsonToken.FIELD_NAME);
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             return (_currToken = JsonToken.VALUE_STRING);
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 /* One more refinement (pronunced like "hack") is that if
                  * we had an empty String (or all white space), and we are
                  * deserializing an array, we better hide the empty text.
                  */
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
+
+                // 21-Feb-2015, tatu: Moved from END_ELEMENT handling part
                 if (_parsingContext.inArray()) {
                     if (_isEmpty(_currText)) {
                         // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
                         //    expose as empty Object, not null (or, worse, as used to
                         //    be done, by swallowing the token)
-                        _currToken = JsonToken.END_ARRAY;
-                        _parsingContext = _parsingContext.getParent();
-                        _namesToWrap = _parsingContext.getNamesToWrap();
-                        return _currToken;
+                        // -> This seems wrong place? Empty text is not empty object?
+                        // TODO: Maybe return VALUE_NULL instead? Or let caller decide?
+                        // For now, let's revert to earlier behavior of swallowing
+                        return nextToken();
+//                        _currToken = JsonToken.END_ARRAY;
+//                        _parsingContext = _parsingContext.getParent();
+//                        _namesToWrap = _parsingContext.getNamesToWrap();
+//                        return _currToken;
                     }
                 }
                 return (_currToken = JsonToken.VALUE_STRING);
             } else {
                 // [dataformat-xml#177]: empty text may also need to be skipped
                  if (_parsingContext.inObject()
                          && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {
-                    _currToken = JsonToken.END_OBJECT;
-                    _parsingContext = _parsingContext.getParent();
-                    _namesToWrap = _parsingContext.getNamesToWrap();
-                    return _currToken;
+                     // But what is the appropriate token to return? Seems like we should just
+                     // try to advance?
+                      return nextToken();
+//                    _currToken = JsonToken.END_OBJECT;
+//                    _parsingContext = _parsingContext.getParent();
+//                    _namesToWrap = _parsingContext.getNamesToWrap();
+//                    return _currToken;
                  }
              }
             // If not a leaf (or otherwise ignorable), need to transform into property...
             _parsingContext.setCurrentName(_cfgNameForTextElement);
             _nextToken = JsonToken.VALUE_STRING;
             return (_currToken = JsonToken.FIELD_NAME);
         case XmlTokenStream.XML_END:
             return (_currToken = null);
         }
         
         // should never get here
         _throwInternal();
         return null;
     }
\ No newline at end of file
