diff --git a/tmp/3b00de4f-42e3-46eb-b846-d5b825517135_buggy.java b/tmp/66736d49-1174-4449-be54-af97b982456f_fixed.java
index 80921f4..339fb2d 100644
--- a/tmp/3b00de4f-42e3-46eb-b846-d5b825517135_buggy.java
+++ b/tmp/66736d49-1174-4449-be54-af97b982456f_fixed.java
@@ -1,135 +1,142 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
+            // Need to create Object/Array contexts dynamically, when found
+            // But what about parents? How to find? May need to keep track...
             switch (t) {
             case START_OBJECT:
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 break;
             case START_ARRAY:
                 _parsingContext = _parsingContext.createChildArrayContext(-1, -1);
                 break;
             case END_OBJECT:
             case END_ARRAY:
                 _parsingContext = _parsingContext.getParent();
                 _namesToWrap = _parsingContext.getNamesToWrap();
                 break;
             case FIELD_NAME:
-                _parsingContext.setCurrentName(_xmlTokens.getLocalName());
+                // Note: can't readily access name, as we only have token type
+                // But it should have been set correctly already
+//                _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 break;
             default: // VALUE_STRING, VALUE_NULL
                 // should be fine as is?
             }
             return t;
         }
         int token = _xmlTokens.next();
 
         // Need to have a loop just because we may have to eat/convert
         // a start-element that indicates an array element.
         while (token == XmlTokenStream.XML_START_ELEMENT) {
             // If we thought we might get leaf, no such luck
             if (_mayBeLeaf) {
                 // leave _mayBeLeaf set, as we start a new context
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 return (_currToken = JsonToken.START_OBJECT);
             }
             if (_parsingContext.inArray()) {
                 // Yup: in array, so this element could be verified; but it won't be
                 // reported anyway, and we need to process following event.
                 token = _xmlTokens.next();
                 _mayBeLeaf = true;
                 continue;
             }
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
 
             // Ok: virtual wrapping can be done by simply repeating current START_ELEMENT.
             // Couple of ways to do it; but start by making _xmlTokens replay the thing...
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
                 _xmlTokens.repeatStartElement();
             }
 
             _mayBeLeaf = true;
             // Ok: in array context we need to skip reporting field names.
             // But what's the best way to find next token?
             return (_currToken = JsonToken.FIELD_NAME);
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
             // Simple, except that if this is a leaf, need to suppress end:
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
-                    //    expose as empty Object, not null
-                return (_currToken = JsonToken.VALUE_NULL);
+                //    expose as empty Object, not null. For lists, means {}
+                //    Need START_OBJECT, END_OBJECT sequence.
+                _nextToken = JsonToken.END_OBJECT;
+                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
+                return (_currToken = JsonToken.START_OBJECT);
             }
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
             return _currToken;
             
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 _nextToken = JsonToken.FIELD_NAME;
-                _currText = _xmlTokens.getText();
+                _currText = _xmlTokens.getText(); // Note: not actually text, but name
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 return (_currToken = JsonToken.START_OBJECT);
             }
             _parsingContext.setCurrentName(_xmlTokens.getLocalName());
             return (_currToken = JsonToken.FIELD_NAME);
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             return (_currToken = JsonToken.VALUE_STRING);
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
-                /* One more refinement (pronunced like "hack") is that if
-                 * we had an empty String (or all white space), and we are
-                 * deserializing an array, we better hide the empty text.
-                 */
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
+
                 if (_parsingContext.inArray()) {
                     if (_isEmpty(_currText)) {
-                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
-                        //    expose as empty Object, not null (or, worse, as used to
-                        //    be done, by swallowing the token)
-                        _currToken = JsonToken.END_ARRAY;
-                        _parsingContext = _parsingContext.getParent();
-                        _namesToWrap = _parsingContext.getNamesToWrap();
-                        return _currToken;
+                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], empty element
+                        // represents an empty Object, so START_OBJECT/END_OBJECT
+                       _nextToken = JsonToken.END_OBJECT;
+                       _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
+                       return (_currToken = JsonToken.START_OBJECT);
                     }
+                    // If we have non-empty text, it's a String value
+                    return (_currToken = JsonToken.VALUE_STRING);
                 }
+                // Otherwise, text is a leaf value, return as String
                 return (_currToken = JsonToken.VALUE_STRING);
             } else {
                 // [dataformat-xml#177]: empty text may also need to be skipped
+                // But only between elements, basically?
                 if (_parsingContext.inObject()
                         && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {
-                    _currToken = JsonToken.END_OBJECT;
-                    _parsingContext = _parsingContext.getParent();
-                    _namesToWrap = _parsingContext.getNamesToWrap();
-                    return _currToken;
+                    // In this case, let's just try to skip it and find the next token
+                    // This occurs if we get TEXT nodes between elements
+                    // For now, fall through and get FIELD_NAME/#text ? Or skip? Skip seems better.
+                    // Let's try fetching next token
+                    return nextToken();
                 }
             }
             // If not a leaf (or otherwise ignorable), need to transform into property...
             _parsingContext.setCurrentName(_cfgNameForTextElement);
             _nextToken = JsonToken.VALUE_STRING;
             return (_currToken = JsonToken.FIELD_NAME);
         case XmlTokenStream.XML_END:
             return (_currToken = null);
         }
         
         // should never get here
         _throwInternal();
         return null;
     }
\ No newline at end of file
