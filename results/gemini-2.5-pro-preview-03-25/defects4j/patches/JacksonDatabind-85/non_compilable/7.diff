diff --git a/tmp/8088126c-3f5b-48df-9a95-f27f253323da_buggy.java b/tmp/f6b63223-ad68-4118-94fb-c91cb5fd6de0_fixed.java
index d926eea..2043252 100644
--- a/tmp/8088126c-3f5b-48df-9a95-f27f253323da_buggy.java
+++ b/tmp/f6b63223-ad68-4118-94fb-c91cb5fd6de0_fixed.java
@@ -1,48 +1,109 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
+            // No @JsonFormat annotation. Check for global default.
+            DateFormat globalDf = serializers.getConfig().getDateFormat();
+            // If global definition seems to differ, may need to create new instance
+            if (globalDf != null) {
+                DateFormat newFormat = null;
+                // Need to clone for thread-safety, if possible & needed
+                // SimpleDateFormat is not thread-safe, must clone.
+                if (globalDf instanceof SimpleDateFormat) {
+                    newFormat = (DateFormat) ((SimpleDateFormat)globalDf).clone();
+                }
+                // StdDateFormat is thread-safe, but we might need to apply context (tz)
+                else if (globalDf instanceof StdDateFormat) {
+                    StdDateFormat std = (StdDateFormat) globalDf;
+                    TimeZone tz = serializers.getTimeZone();
+                    // Only create new instance if timezone differs
+                    if (!tz.equals(std.getTimeZone())) {
+                        newFormat = std.withTimeZone(tz);
+                    } else {
+                        newFormat = std; // Use shared instance
+                    }
+                    // Note: could consider locale too, but timezone is primary contextual aspect
+                } else {
+                    // Other DateFormat type? Try cloning, warn if not possible.
+                    try {
+                        newFormat = (DateFormat) globalDf.clone();
+                    } catch (Exception e) {
+                         // 17-Jan-2018, tatu: Maybe log warning? Or should this throw exception?
+                         serializers.reportBadDefinition(handledType(), String.format(
+                                 "Configured `DateFormat` (%s) not cloneable: serializer instances for type %s will be shared, potentially causing thread-safety issues",
+                                 globalDf.getClass().getName(), handledType().getName()));
+                         newFormat = globalDf; // Use shared (potentially unsafe)
+                    }
+                }
+
+                // Check if the derived format `newFormat` (string-based) differs from current config
+                boolean useTimestamp;
+
+                // If serializer is currently configured for numeric timestamp,
+                // and global default is NOT numeric format, change that
+                if (Boolean.TRUE.equals(this._useTimestamp)) {
+                    // [databind#1744]: careful explanation of precedence
+                    // If the default mapping is timestamp,asking for default format should NOT change that
+                    if (newFormat == null) { // should not happen if globalDf != null
                         return this;
                     }
-        // Simple case first: serialize as numeric timestamp?
+                    // Otherwise, string format definition does override default numeric choice:
+                    useTimestamp = false;
+                } else {
+                    useTimestamp = false;
+                }
+
+                // Either way, need to check if format differs
+                if ((useTimestamp != this._useTimestamp) // use of timestamp changed?
+                        || (newFormat != this._customFormat // format instance changed?
+                            // also, handle case where current format is null (default)
+                            // and new format is non-null
+                           && (this._customFormat == null || !this._customFormat.equals(newFormat)))
+               ) {
+                    // Important: indicate change via timestamp flag, rather than format,
+                    // if format remains null
+                    return withFormat(useTimestamp, newFormat);
+                }
+            }
+            // No @JsonFormat and no differing global format found, return current configuration
+            return this; // Return 'this' if no change needed
+        }
+
+        // --- @JsonFormat annotation found ---
+
         JsonFormat.Shape shape = format.getShape();
+        // Numeric timestamp?
         if (shape.isNumeric()) {
+            // Let base class handle optimization of returning 'this' if no change
             return withFormat(Boolean.TRUE, null);
         }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+        // String format? (Explicit shape, pattern, locale, or timezone)
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                         || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                             ? format.getPattern()
+                            // If not specified, default to standard format *as string*:
                             : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
-                            : serializers.getLocale();
+                            : serializers.getLocale(); // Default locale from context
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
-                        tz = serializers.getTimeZone();
+                tz = serializers.getTimeZone(); // Default timezone from context
             }
             df.setTimeZone(tz);
+            // Let base class handle optimization of returning 'this' if no change
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // Other shapes or @JsonFormat without specific overrides?
+        // Fall through, return 'this'. Use the existing configuration.
         return this;
     }
\ No newline at end of file
