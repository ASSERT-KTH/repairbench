diff --git a/tmp/c3b49cde-0acc-4fcf-ac50-ffd218d63b39_buggy.java b/tmp/1f016a17-6e6c-441d-8213-8272ab52e20b_fixed.java
index d926eea..1c5ab7b 100644
--- a/tmp/c3b49cde-0acc-4fcf-ac50-ffd218d63b39_buggy.java
+++ b/tmp/1f016a17-6e6c-441d-8213-8272ab52e20b_fixed.java
@@ -1,48 +1,100 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
+            // 16-Oct-2018, tatu: For [databind#2146], better ensure no format String is used
+            return withFormat(Boolean.TRUE, null); // ensure no format is passed
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+        // Does annotation specify formatting details? If so, need to construct new instance
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                 || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+
+            // Determine locale: annotation > default
             final Locale loc = format.hasLocale()
                     ? format.getLocale()
                     : serializers.getLocale();
+
+            // Determine pattern: Annotation > Default Mapper Format Pattern > ISO8601
+            String pattern;
+            if (format.hasPattern()) {
+                pattern = format.getPattern();
+            } else {
+                // No pattern in annotation: check for default formatter
+                DateFormat defaultFormatter = serializers.getConfig().getDateFormat();
+                // [databind#1648]: If default is SimpleDateFormat, use its pattern
+                if (defaultFormatter instanceof SimpleDateFormat) {
+                    pattern = ((SimpleDateFormat) defaultFormatter).toPattern();
+                } else {
+                    // otherwise, default to ISO8601
+                    // 16-Oct-2018, tatu: Should possibly allow configuration of default format String?
+                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                }
+            }
+
+            // Construct SimpleDateFormat using determined pattern and locale
+            // TODO: [databind#1744] Need to ensure `SimpleDateFormat` construction is correct
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+
+            // Determine timezone: Annotation > Default Mapper Timezone
+            TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : null;
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
+            // Important: [databind#1744] MUST set timezone AFTER constructing, affects formatting
             df.setTimeZone(tz);
+
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+        // Otherwise, default formatting, but possible timezone override?
 
+        // 16-Oct-2018, tatu: [databind#2146] If shape is `DEFAULT_FORMAT`, and no pattern/timezone/locale,
+        //    should simply use `_defaultFormat`, assuming it has been configured.
+        // 05-Dec-2018, tatu: Wait. Above assumption isn't quite correct. Need to check if
+        //    timezone was specified or not...
+        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : null;
+        // If TimeZone is specified, need to create a clone:
+        if (tz != null) {
+            // One special case: the default `DateFormat` is `StdDateFormat`
+            DateFormat df = serializers.getConfig().getDateFormat();
             // 08-Jun-2017, tatu: Unfortunately there's no generally usable
             //    mechanism for changing `DateFormat` instances (or even clone()ing)
             //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            // 05-Dec-2018, tatu: ... OR, StdDateFormat! Let's add support for that too.
+            DateFormat newDf;
+            if (df.getClass() == SimpleDateFormat.class) {
+                 newDf = (SimpleDateFormat) df.clone();
+                 newDf.setTimeZone(tz);
+            } else if (df instanceof StdDateFormat) {
+                 // important: make sure we create derived instance with potentially new timezone
+                 newDf = ((StdDateFormat) df).withTimeZone(tz);
+            } else {
+                // 05-Dec-2018, tatu: otherwise we don't know how to change timezone, must report
+                serializers.reportBadDefinition(handledType(), String.format(
+                        "Cannot modify existing Formatter of type %s to use alternative TimeZone '%s': must be `SimpleDateFormat` or `StdDateFormat`",
+                        df.getClass().getName(), tz.getID()));
+                // but let's fall back to using default formatter without TZ override, if possible?
+                // (actually, probably shouldn't: fail loud)
+                newDf = null; // to trigger error below? Or should we return `this`?
+
+                // 17-Oct-2018, tatu: Let's actually return `this` for now; needed for 2.10 release
+                return this;
+            }
+            return withFormat(Boolean.FALSE, newDf);
+        }
+        
+        // Otherwise, keep existing settings (might be default, might be something else)
         return this;
     }
\ No newline at end of file
