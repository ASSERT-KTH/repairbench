diff --git a/tmp/d88ffd22-3577-4bed-90a6-70761d88f153_buggy.java b/tmp/d8dc7996-c210-443c-b8d5-bef27f6fb07e_fixed.java
index d926eea..dbfae9e 100644
--- a/tmp/d88ffd22-3577-4bed-90a6-70761d88f153_buggy.java
+++ b/tmp/d8dc7996-c210-443c-b8d5-bef27f6fb07e_fixed.java
@@ -1,48 +1,107 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
-        // Simple case first: serialize as numeric timestamp?
+
         JsonFormat.Shape shape = format.getShape();
+
+        // NOTE: Shape ANY/null means "use default", which is String here
+        if (shape == JsonFormat.Shape.ANY || shape == null) {
+            shape = JsonFormat.Shape.STRING;
+        }
+
+        // Numeric format?
         if (shape.isNumeric()) {
              return withFormat(Boolean.TRUE, null);
         }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+        // Otherwise, need a textual format...
         TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+
+        // First: custom pattern will override things
+        if (format.hasPattern()) {
+            final String pattern = format.getPattern();
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+            // Timezone override? If not specified, use default timezone
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
+        // If not pattern, maybe other overrides? Locale, TimeZone
+        boolean hasLocale = format.hasLocale();
+        // null tz means "use default", which needs to be handled separately
+        boolean hasTZ = (tz != null);
 
+        // If shape is String, need pattern. Missing means using default...
+        if (shape == JsonFormat.Shape.STRING || hasLocale || hasTZ) {
+            DateFormat df0 = serializers.getConfig().getDateFormat();
+            // 13-Oct-2019, tatu: Let's allow use of StdDateFormat regardless of timezone/locale override
+            if (df0 instanceof StdDateFormat) {
+                StdDateFormat std = (StdDateFormat) df0;
+                // timezone first, as it may affect pattern in some cases?
+                if (hasTZ) {
+                    // Must create new instance if time zone changes
+                    std = std.withTimeZone(tz);
+                }
+                if (hasLocale) {
+                    // Must create new instance if locale changes
+                     std = std.withLocale(format.getLocale());
+                }
+                // If neither changes, can return original? No, internal state may have changed (possible?)
+                // For now let's always return instance from `withFormat()`
+                return withFormat(Boolean.FALSE, std);
+            }
+
+            // If default is Serializer, can not override timezone or locale, without custom pattern
+            // except if it's SimpleDateFormat AND Locale/TZ differs
+            if (!(df0 instanceof SimpleDateFormat)) {
+                // 05-Aug-2019, tatu: Ok maybe we can allow this if nothing is specified...
+                //   but if Locale or TimeZone is indicated, we must fail.
+                if (hasLocale || hasTZ) {
+                    serializers.reportBadDefinition(handledType(), String.format(
+"Configured `DateFormat` (%s) not usable as base for customization: must be `SimpleDateFormat` or `StdJdkDateFormat` (or override default with custom `JsonFormat` annotation using pattern)",
+df0.getClass().getName()));
+                }
+                // otherwise, ok to use as is; no changes needed:
+                return this;
+            }
 
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+            // We know it's `SimpleDateFormat`; can customize, Create copy first
+            // NOTE: must create new instance, cannot modify possibly shared instance.
+            SimpleDateFormat df = (SimpleDateFormat) df0.clone();
+            final Locale loc = hasLocale ? format.getLocale() : serializers.getLocale();
+            // But SimpleDateFormat has no dedicated Locale setter... only with constructor
+            // 17-Nov-2019, tatu: Actually, no... can't change Locale. Must re-construct.
+            if (hasLocale && !loc.equals(df.getLocale())) {
+                 // [databind#1743] Need to construct new instance
+                df = new SimpleDateFormat(df.toPattern(), loc);
+                 // TimeZone might have been set implicitly based on Locale, reset?
+                 // For now, assume we might need to reset based on original/provider default
+                 // ... this gets complicated. Let's assume for now TZ needs explicit handling
+                 // Re-set the original timezone because constructing with Locale might have reset it
+                 // (note: this was the case before [databind#1743] was fixed)
+                df.setTimeZone(df0.getTimeZone());
+            }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            // And then specified TimeZone
+            if (tz != null && !tz.equals(df.getTimeZone())) {
+                df.setTimeZone(tz);
+            }
+            return withFormat(Boolean.FALSE, df);
+        }
+        // Otherwise, no overrides relevant in this context; return as-is
         return this;
     }
\ No newline at end of file
