diff --git a/tmp/e32cc9d1-4636-460d-abb3-52c0a04536c9_buggy.java b/tmp/ffed2e5b-8e39-4788-ae6f-84d09dad232e_fixed.java
index d926eea..90f67a8 100644
--- a/tmp/e32cc9d1-4636-460d-abb3-52c0a04536c9_buggy.java
+++ b/tmp/ffed2e5b-8e39-4788-ae6f-84d09dad232e_fixed.java
@@ -1,48 +1,62 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+        // If not numeric, must be String compatible shape.
+        // Then, need to check if any overrides defined via annotation:
+        // logical OR means that if any of these are defined, will create
+        // new instance with specified configuration
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                 || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+
+            // Locale override takes precedence over pattern/timezone
             final Locale loc = format.hasLocale()
                     ? format.getLocale()
                     : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+
+            // Pattern override takes next precedence
+            String pattern;
+            if (format.hasPattern()) {
+                pattern = format.getPattern();
+            } else {
+                // If not specified via annotation, maybe we have specific default format?
+                DateFormat df = serializers.getDateFormat();
+                // If default is `SimpleDateFormat`, great; otherwise can not change easily
+                if (df instanceof SimpleDateFormat) {
+                    // TODO: Looks like we probably should clone, but could also
+                    // cache these variations? Let's clone for now.
+                    pattern = ((SimpleDateFormat) df).toPattern();
+                } else {
+                    // If not, default back to default
+                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                }
+            }
+
+            // Timezone override has lowest precedence
+            TimeZone tz = format.getTimeZone();
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
+            // Need to create a new SimpleDateFormat using specified pattern, locale, timezone
+            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // Otherwise, if no changes based on format, return original
         return this;
     }
\ No newline at end of file
