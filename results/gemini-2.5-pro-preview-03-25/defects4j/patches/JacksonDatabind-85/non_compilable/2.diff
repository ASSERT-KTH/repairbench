diff --git a/tmp/0f72d4b5-dee1-4934-9a6f-49c5eeee3c6f_buggy.java b/tmp/ee5a0082-57d4-41e0-955f-cd28ac7765a0_fixed.java
index d926eea..5e32d9f 100644
--- a/tmp/0f72d4b5-dee1-4934-9a6f-49c5eeee3c6f_buggy.java
+++ b/tmp/ee5a0082-57d4-41e0-955f-cd28ac7765a0_fixed.java
@@ -1,48 +1,92 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
+
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
+        // If not numeric, textual it is...
+        // Any overrides specified? Shape, pattern, locale, timezone?
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                 || format.hasLocale() || format.hasTimeZone()) {
+
             TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+
+            // Pattern specified? Creates a new SimpleDateFormat
+            DateFormat df;
+            if (format.hasPattern()) {
+                final String pattern = format.getPattern();
                 if (tz == null) {
                     tz = serializers.getTimeZone();
                 }
-            df.setTimeZone(tz);
+                SimpleDateFormat simpleDf = new SimpleDateFormat(pattern, loc);
+                simpleDf.setTimeZone(tz);
+                df = simpleDf;
+            }
+            // No pattern specified: Start with configured format, modify if necessary
+            else {
+                DateFormat base = serializers.getConfig().getDateFormat();
+                // Default specified? Requires cloning if SimpleDateFormat
+                if (base instanceof SimpleDateFormat) {
+                    // Important: clone() to prevent modifying the shared instance
+                    SimpleDateFormat simpleDf = (SimpleDateFormat) base.clone();
+                    // Locale override? Must recreate with pattern/locale.
+                    // NOTE: order matters; locale first then timezone.
+                    if (format.hasLocale() && !loc.equals(simpleDf.getLocale())) {
+                        simpleDf = new SimpleDateFormat(simpleDf.toPattern(), loc);
+                        // timezone may have been reset: needs re-setting later
+                    }
+
+                    // Timezone override?
+                    // [databind#1743]: Don't override if annotation doesn't specify one (i.e. tz == null)
+                    // But wait; Annotation default 'null' SHOULD mean "use context timezone", shouldn't it?
+                    if (tz == null) {
+                        tz = serializers.getTimeZone(); // Use default timezone from provider
+                    }
+                    // [databind#3142]: only apply timezone if it differs from format's default
+                    if ((tz != null) && !tz.equals(simpleDf.getTimeZone())) {
+                        simpleDf.setTimeZone(tz);
+                    }
+                    df = simpleDf;
+                }
+                // If base is not SimpleDateFormat, we cannot modify it.
+                // Check if overrides requires us to fail or fallback.
+                else if (format.hasLocale() || format.hasTimeZone()) {
+                    // Cannot modify; fallback to default ISO pattern
+                    // (note: this used to be an error, but makes sense as fallback)
+                    final String pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                    if (tz == null) {
+                        tz = serializers.getTimeZone();
+                    }
+                    SimpleDateFormat simpleDf = new SimpleDateFormat(pattern, loc);
+                    simpleDf.setTimeZone(tz);
+                    df = simpleDf;
+                } else {
+                    // No pattern, locale, or timezone override applied to a non-SimpleDateFormat base.
+                    // Just use the base format. This can happen if only shape=STRING is set.
+                    df = base;
+                }
+            }
+             // Use Boolean.FALSE to indicate textual format using 'df'.
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // Otherwise, no overrides, just return 'this'
         return this;
     }
\ No newline at end of file
