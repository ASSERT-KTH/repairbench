diff --git a/tmp/818184c7-76e9-4405-99e9-648e8fc6d16e_buggy.java b/tmp/7b4541ae-5e98-407c-95cc-7b62d28f426d_fixed.java
index d926eea..e038bab 100644
--- a/tmp/818184c7-76e9-4405-99e9-648e8fc6d16e_buggy.java
+++ b/tmp/7b4541ae-5e98-407c-95cc-7b62d28f426d_fixed.java
@@ -1,48 +1,80 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
+        // 16-Oct-2019, tatu: [databind#1743] adds another twist...
         // First: custom pattern will override things
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                         || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
+
+            // Determine the pattern to use:
+            String pattern;
+            if (format.hasPattern()) {
+                pattern = format.getPattern();
+            } else {
+                // No pattern in @JsonFormat: check base format
+                DateFormat blueprint = serializers.getConfig().getDateFormat();
+                // [databind#1743]: If passing format String, should use it;
+                //   otherwise, default without pattern is ISO8601
+                //   ... except if we just specified shape OR locale OR timezone,
+                //   in which case pattern is needed.
+                // And [databind#1648] says that timezone needs to be respected
+                if (blueprint instanceof SimpleDateFormat) {
+                    // Use pattern from SimpleDateFormat blueprint
+                    pattern = ((SimpleDateFormat) blueprint).toPattern();
+                } else {
+                    // Otherwise, default to ISO8601
+                    // (NOTE: StdDateFormat.DEFAULT_TIMEZONE_FORMAT is package protected)
+                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                }
+            }
+
+            // Need to create a new instance, usually, due to locale/timezone changes
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+
+            // Timezone override? If specified in `@JsonFormat`, use it; otherwise use default
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
+            // Compare `tz` with the timezone `df` was created with (via locale)
+            // NOTE: `getTimeZone()` may return null if locale lacks default;
+            // also TimeZone equality check is tricky... safest is to just set it
+            // if we have a non-default timezone.
+            // 06-Sep-2021, tatu: make sure we have non-null tz to set
+            if (tz != null) {
                 df.setTimeZone(tz);
+            }
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
 
-
         // Jackson's own `StdDateFormat` is quite easy to deal with...
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
 //            serializers.reportBadDefinition(handledType(), String.format(
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // If no format settings specified (shape, pattern, locale, timezone) via @JsonFormat,
+        // just use the default serializer, which will use the ObjectMapper's configured DateFormat.
         return this;
     }
\ No newline at end of file
