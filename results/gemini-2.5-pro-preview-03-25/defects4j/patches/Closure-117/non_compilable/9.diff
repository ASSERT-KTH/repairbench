diff --git a/tmp/7ee9a5fb-63d8-4b05-929a-cf1d9fb62e36_buggy.java b/tmp/4deb9265-83c1-4e61-afed-58bde1be1d76_fixed.java
index 39981f0..9cff01e 100644
--- a/tmp/7ee9a5fb-63d8-4b05-929a-cf1d9fb62e36_buggy.java
+++ b/tmp/4deb9265-83c1-4e61-afed-58bde1be1d76_fixed.java
@@ -1,65 +1,93 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
+    // Get the type of the node, attempt to dereference if requested.
+    JSType type = getJSType(n);
+    if (dereference) {
+      ObjectType dereferenced = type.dereference();
+      if (dereferenced != null) {
+        type = dereferenced;
+      }
+    }
 
-    // The best type name is the actual type name.
+    // Try to get a good name from the type first.
+    // Order matters: Constructors/interfaces first, then prototypes, then nominal instances.
+    if (type.isNominalConstructorOrInterface()) {
+        // For constructor/interface types, use their reference name (e.g., "MyClass").
+        ObjectType objType = type.toObjectType();
+        if (objType != null && objType.hasReferenceName()) {
+            return objType.getReferenceName();
+        }
+        // Fall back to toString() if no reference name (less likely)
+        return type.toString();
+    } else if (type.isFunctionPrototypeType()) {
+        // For prototype types, toString() usually gives a good name (e.g., "MyClass.prototype").
+        return type.toString();
+    } else if (type.isNominalType()) {
+        // For nominal instance types (e.g., an instance of MyClass), use the reference name.
+         ObjectType objType = type.toObjectType();
+         // Check it's not a constructor/interface (already handled) and has a name.
+         if (objType != null && !objType.isConstructorOrInterface() && objType.hasReferenceName() && !objType.isUnknownType()) {
+              return objType.getReferenceName(); // e.g., "MyClass" for the instance type
+         }
+    } else if (type.isEnumElementType()) {
+        // For enum elements, toString() is usually best (e.g., "MyEnum.VALUE").
+        return type.toString();
+    }
 
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+    // If the type didn't provide a good name, and we're analyzing a GETPROP,
+    // try climbing the prototype chain to find where the property was originally defined.
+    // This gives names like "Foo.prototype.bar".
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
+          // interfaces
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
+        // If we found the object type, use its name + the property name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
+          // Use toString() for the object type's name (e.g., "Foo.prototype" or "Foo")
           return objectType.toString() + "." + propName;
         }
       }
     }
 
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
-    }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
-    }
+
+    // If we still don't have a name, fall back to the qualified name of the node, if available.
+    // This can be useful for complex expressions. (e.g., "a.b.c")
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
-    } else if (type.isFunctionType()) {
-      // Don't show complex function names.
+    }
+
+    // If it's a function type not handled earlier (e.g., anonymous function literal),
+    // return a generic "function".
+    if (type.isFunctionType()) {
       return "function";
-    } else {
+    }
+
+    // Otherwise, fall back to the default type toString(). This handles unknowns,
+    // structural types (like "{prop: string}"), etc.
     return type.toString();
   }
\ No newline at end of file
-  }
