diff --git a/tmp/02987f5a-f41e-4939-a3bd-b3e3c7a9167b_buggy.java b/tmp/7f404849-80d7-4356-9df2-99f19b6f3b85_fixed.java
index 39981f0..ed78f5a 100644
--- a/tmp/02987f5a-f41e-4939-a3bd-b3e3c7a9167b_buggy.java
+++ b/tmp/7f404849-80d7-4356-9df2-99f19b6f3b85_fixed.java
@@ -1,65 +1,80 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
-    // The best type name is the actual type name.
+    JSType type = getJSType(n);
+    if (dereference) {
+      ObjectType dereferenced = type.dereference();
+      if (dereferenced != null) {
+        type = dereferenced;
+      }
+    }
 
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+    // Check if the type itself provides a good name (nominal type or prototype).
+    // Function types with constructors have qualified names.
+    // This check is done upfront to prioritize the actual type name over potentially
+    // misleading property origin names (like in Issue 1047).
+    if (type.isFunctionPrototypeType() ||
+        (type.toObjectType() != null &&
+         type.toObjectType().getConstructor() != null)) {
+      return type.toString();
+    }
+
+    // If the type name wasn't informative (e.g., primitive, structural type),
+    // and it's a GETPROP, try finding where the property was originally defined.
+    // This helps provide more context, e.g., "Foo.prototype.bar".
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
+          // Interfaces can't be instantiated, so climb the hierarchy looking
+          // for the property.
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
-          // classes
+          // Classes, climb the prototype chain looking for the property.
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
+        // If we found the object type where the property is defined,
+        // and that object type has a printable name (constructor/prototype),
+        // return the qualified property name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
           return objectType.toString() + "." + propName;
         }
       }
     }
 
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
-    }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
-    }
+    // If we couldn't find a good name using the type or property origin,
+    // try the qualified name of the node itself (e.g., "my.namespace.someVar").
+    // This might be better than a very generic type name like "Object".
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
-    } else if (type.isFunctionType()) {
-      // Don't show complex function names.
+    }
+
+    // If it's a function type, just say "function".
+    // Complex function names/signatures are often unhelpful here.
+    if (type.isFunctionType()) {
       return "function";
-    } else {
+    }
+
+    // Otherwise, fall back to the type's basic toString representation.
+    // This might be "number", "string", "{...}", "Object", etc.
     return type.toString();
   }
\ No newline at end of file
-  }
