diff --git a/tmp/7a3ebb04-3301-4eb8-ba2d-f05192715f19_buggy.java b/tmp/17bfe8b9-80c1-4c59-80a8-f517d4cbe39e_fixed.java
index 39981f0..3630e3b 100644
--- a/tmp/7a3ebb04-3301-4eb8-ba2d-f05192715f19_buggy.java
+++ b/tmp/17bfe8b9-80c1-4c59-80a8-f517d4cbe39e_fixed.java
@@ -1,65 +1,117 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
+    // This is useful for messages like "property X defined on Foo.prototype".
+    // However, if the property is defined on the instance itself, this
+    // logic can return "InstanceType.prop" which might mask the actual type
+    // of the property (e.g., if this.prop is {TypeA} but defined on InstanceType).
+    // So, we only return the "DefiningType.propName" format if the property
+    // was found on a prototype, or the base object itself is a prototype,
+    // or we are dealing with an interface.
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+      Node objectNode = n.getFirstChild();
+      JSType baseType = getJSType(objectNode);
+      ObjectType objectType = baseType.dereference();
+
       if (objectType != null) {
         String propName = n.getLastChild().getString();
+        ObjectType initialObjectType = objectType; // Store the initial type
+        boolean isInterfaceProperty = false;
+
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
+          // Handle interfaces
+          ObjectType defininingInterface = FunctionType.getTopDefiningInterface(
               objectType, propName);
-        } else {
+          // If the property is defined on an interface, use that.
+          if (defininingInterface != null) {
+             objectType = defininingInterface;
+             isInterfaceProperty = true;
+          }
+          // interfaces have no implicit prototype in the same way classes do,
+          // so don't walk the prototype chain below.
+        } else if (!objectType.isEnumElementType()) { // Don't walk prototype chain for enum elements
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
+        // Check if the property was found on a prototype or interface.
+        // We consider it found on a prototype if the defining objectType is
+        // different from the initial objectType, OR if the initial objectType
+        // itself was a prototype. Interfaces are handled separately.
+        boolean foundOnPrototype = objectType != null && objectType != initialObjectType;
+        boolean initialIsPrototype = initialObjectType != null && initialObjectType.isFunctionPrototypeType();
+
+        boolean useDefiningType = objectType != null
+            && (isInterfaceProperty // Property was defined on an interface
+                || foundOnPrototype // Property was found on a superclass prototype
+                || initialIsPrototype); // Property is on a prototype object directly
+
         // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
+        // Instead, try to get a human-readable type name based on the defining type.
+        if (useDefiningType &&
+            (objectType.getConstructor() != null || // Includes classes and interfaces
              objectType.isFunctionPrototypeType())) {
           return objectType.toString() + "." + propName;
         }
+        // Otherwise (property found on instance, or not found, or other cases),
+        // fall through to the general logic below which uses the type of the node 'n'.
       }
     }
 
+    // Fallback logic: Get the type name based on the node's JSType.
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
+
+    // Prefer the type's toString if it's identifiable (constructor/prototype).
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
+      // Don't return "Type.prototype" for prototype properties accessed directly,
+      // let the qualified name logic handle it below if possible.
+      if (!(type.isFunctionPrototypeType() && n.isGetProp())) {
           return type.toString();
       }
+    }
+
+    // Next, try the qualified name of the node.
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
+      // Avoid qualified names that just refer to the prototype property of a function.
+      if (!qualifiedName.endsWith(".prototype")) {
           return qualifiedName;
-    } else if (type.isFunctionType()) {
+      }
+    }
+
+    // Use "function" for unnamed function types.
+    if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
-    } else {
+    }
+
+    // Finally, use the type's toString as a last resort.
+    // This may include ".prototype" for prototype types handled above.
     return type.toString();
   }
\ No newline at end of file
-  }
