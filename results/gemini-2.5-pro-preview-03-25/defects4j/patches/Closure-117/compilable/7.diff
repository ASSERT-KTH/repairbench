diff --git a/tmp/5f3f6767-755f-421e-be5f-43e94ce25e6e_buggy.java b/tmp/b21030f7-3e03-42d5-b7f8-d7f2a03de85c_fixed.java
index 39981f0..839f056 100644
--- a/tmp/5f3f6767-755f-421e-be5f-43e94ce25e6e_buggy.java
+++ b/tmp/b21030f7-3e03-42d5-b7f8-d7f2a03de85c_fixed.java
@@ -1,65 +1,97 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
+   *     to an Object type, if possible. This is used, for example, when
+   *     generating warnings about property access on primitive types. It's
+   *     also used when generating "property never defined" warnings, where
+   *     we want the name of the base object type, not a qualified property name.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
-    // The best type name is the actual type name.
-
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
+    // However, if 'dereference' is true, we are likely interested in the base
+    // type name for error reporting (like "property X never defined on Y"),
+    // rather than the qualified name of the property definition.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
+        ObjectType definingType = null; // Type where the property is defined
+
+        // Find the type that directly defines the property.
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
+          // interfaces
+          definingType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+          ObjectType currentType = objectType;
+          while (currentType != null) {
+            if (currentType.hasOwnProperty(propName)) {
+              definingType = currentType;
+              break;
+            }
+            currentType = currentType.getImplicitPrototype();
           }
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        // If we found the defining type and it's suitable (constructor/prototype)
+        // AND dereference is false, return the qualified name (e.g., Foo.prototype.bar).
+        if (definingType != null &&
+            (definingType.getConstructor() != null ||
+             definingType.isFunctionPrototypeType())) {
+          // Only return the qualified property name if dereference is false.
+          // If dereference is true, we fall through to the general logic below,
+          // which will give the type name of the node 'n' itself.
+          if (!dereference) {
+             return definingType.toString() + "." + propName;
+          }
+          // If dereference is true, fall through.
         }
+        // Fall through if property not found, defining type unsuitable, or dereference is true.
       }
+      // Fall through if objectType was null.
     }
 
+    // General logic to get the name of the type of node 'n'.
     JSType type = getJSType(n);
     if (dereference) {
+      // If dereference is true, get the Object type associated with the
+      // node's type. For example, convert primitive number to Number object,
+      // or constructor type Ctor to instance type Ctor.
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
+
+    // If the resulting type 'type' represents a class instance or a prototype,
+    // use its toString() name (e.g., "MyClass", "MyClass.prototype").
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
+
+    // Otherwise, try the qualified name of the node 'n' itself, if available.
+    // This can be useful for names like 'a.b.c'.
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
+      // Don't show complex function signatures.
       return "function";
     } else {
+      // Fallback to the type's toString() representation.
       return type.toString();
     }
   }
\ No newline at end of file
