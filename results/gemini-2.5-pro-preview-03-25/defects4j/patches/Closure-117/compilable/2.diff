diff --git a/tmp/9a2ad3a6-ed97-4900-a8a9-2eb89bea4851_buggy.java b/tmp/dbc7cc52-9320-423a-a8c9-806c28a0ed5b_fixed.java
index 39981f0..568362a 100644
--- a/tmp/9a2ad3a6-ed97-4900-a8a9-2eb89bea4851_buggy.java
+++ b/tmp/dbc7cc52-9320-423a-a8c9-806c28a0ed5b_fixed.java
@@ -1,65 +1,107 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+    // If we're analyzing a GETPROP:
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
+      Node objectNode = n.getFirstChild();
+      JSType objectJsType = getJSType(objectNode);
+      // Get the base type the property is accessed on.
+      ObjectType accessedObjectType = objectJsType.dereference();
+
+      if (accessedObjectType != null) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+        ObjectType definingType = null; // The type that defines the property
+
+        // Find the type that *actually* defines the property by walking the chain.
+        if (accessedObjectType.getConstructor() != null &&
+            accessedObjectType.getConstructor().isInterface()) {
+          // Interfaces: Find the interface that defines it.
+          definingType = FunctionType.getTopDefiningInterface(
+              accessedObjectType, propName);
         } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+          // Classes: Find the class/prototype that defines it.
+          ObjectType currentType = accessedObjectType;
+          // The original code checked hasOwnProperty here, which only finds own
+          // properties. To find inherited properties correctly for the message,
+          // we should use getPropertyType or check recursively. However, the
+          // existing logic finds the *first* type in the chain that *has* the
+          // property, even if it's inherited further up. Let's stick to that
+          // search logic for now, as changing it might affect other cases.
+          // The key fix is what happens when the property is *not* found.
+          ObjectType ownerType = accessedObjectType;
+           while (ownerType != null && !ownerType.hasOwnProperty(propName)) {
+             ownerType = ownerType.getImplicitPrototype();
            }
+           // If the loop finished with a type that has the property, use that.
+           if (ownerType != null && ownerType.hasOwnProperty(propName)) {
+               definingType = ownerType;
+           }
+           // If hasOwnProperty check failed, maybe it's defined on an interface?
+           // This part seems complex and potentially redundant with interface check above.
+           // Let's simplify: if the loop above didn't find it via hasOwnProperty,
+           // definingType remains null.
+        }
+
+        // Case 1: Property is defined somewhere in the chain found by the logic above.
+        // Use the defining type's name + property name.
+        if (definingType != null &&
+            (definingType.getConstructor() != null ||
+             definingType.isFunctionPrototypeType())) {
+          return definingType.toString() + "." + propName;
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        // Case 2: Property is NOT defined anywhere in the chain according to the checks above.
+        // This happens in the failing test case.
+        // Report the error against the type it was accessed on (accessedObjectType).
+        // Use the accessedObjectType's name.
+        // Prefer its toString() if it's a constructor or prototype (named type).
+        if (accessedObjectType.isFunctionPrototypeType() ||
+             (accessedObjectType.getConstructor() != null) ||
+              // Handle cases like unknown types that still have a readable name
+             !accessedObjectType.isUnknownType()) {
+           // For test case, accessedObjectType is C2. toString() is "C2". This is correct.
+           // Return the name of the type itself, not including the property name.
+          return accessedObjectType.toString();
         }
+        // If accessedObjectType doesn't have a good name (e.g., anonymous object literal),
+        // fall through to the generic logic below which might use qualified name or 'object'.
       }
+      // If accessedObjectType was null, fall through to generic logic.
     }
 
+    // Generic Fallback Logic (if not GETPROP, or if property lookup failed to produce a name)
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
+    // If the type is well-named (constructor/prototype), use its name.
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
+    // Otherwise, try the qualified name of the node 'n'.
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
+      // Final fallback: the type's toString representation.
       return type.toString();
     }
   }
\ No newline at end of file
