diff --git a/tmp/5c5a36e0-e182-431b-8bc2-5b8f38520862_buggy.java b/tmp/c6e56253-00dd-410a-bca9-3c99029f078c_fixed.java
index 39981f0..9d057be 100644
--- a/tmp/5c5a36e0-e182-431b-8bc2-5b8f38520862_buggy.java
+++ b/tmp/c6e56253-00dd-410a-bca9-3c99029f078c_fixed.java
@@ -1,65 +1,110 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
-      }
-    }
-
+    // 1. Get the JSType of the node n.
     JSType type = getJSType(n);
-    if (dereference) {
+
+    // Apply dereferencing if requested and type is known.
+    if (type != null && dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
+
+    // If type information is available, try to get the best name based on it.
+    if (type != null) {
+      // 2. If the type itself has a clear, readable name (instance of a constructor,
+      //    or a function prototype), use that first. This is often the most
+      //    intuitive name for the programmer.
+      ObjectType typeObj = type.toObjectType();
       if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+          (typeObj != null && typeObj.getConstructor() != null)) {
+        // This correctly returns "C2" for the node this.c2_ in testIssue1047.
         return type.toString();
       }
+    }
+
+    // 3. If the node represents a property access (GETPROP),
+    //    and the property was *inherited*, provide the qualified name
+    //    showing where it was inherited from (e.g., "Super.prototype.prop").
+    //    This provides more context but should only be used if step 2 didn't apply
+    //    (e.g., for primitive types or function types resulting from the GETPROP).
+    if (n.isGetProp()) {
+      JSType ownerNodeType = getJSType(n.getFirstChild());
+      if (ownerNodeType != null) {
+        ObjectType objectType = ownerNodeType.dereference(); // Type of the object being accessed
+        if (objectType != null) {
+          String propName = n.getLastChild().getString();
+          ObjectType definingType = null; // Type where propName is defined
+          boolean isInherited = false; // Was propName inherited?
+
+          if (objectType.getConstructor() != null &&
+              objectType.getConstructor().isInterface()) {
+            // Interface case: find defining interface
+            definingType = FunctionType.getTopDefiningInterface(objectType, propName);
+            // Check if the property was defined on a *different* interface than the object's direct type.
+            isInherited = definingType != null && !objectType.equals(definingType);
+          } else {
+            // Class/Object case: check instance, then prototype chain
+            ObjectType currentType = objectType;
+            if (currentType.hasOwnProperty(propName)) {
+              // Property found directly on the object's type. Not considered inherited for this purpose.
+              definingType = currentType;
+              isInherited = false;
+            } else {
+              // Look on prototypes
+              ObjectType proto = currentType.getImplicitPrototype();
+              while (proto != null) {
+                if (proto.hasOwnProperty(propName)) {
+                  isInherited = true; // Found on a prototype
+                  definingType = proto;
+                  break;
+                }
+                proto = proto.getImplicitPrototype();
+              }
+            }
+          }
+
+          // Return "DefiningType.propName" only if the property was inherited
+          // and the defining type has a readable name (constructor or prototype).
+          if (isInherited && definingType != null &&
+              (definingType.getConstructor() != null ||
+               definingType.isFunctionPrototypeType())) {
+            return definingType.toString() + "." + propName;
+          }
+        }
+      }
+    }
+
+    // 4. Fallback: Try the node's qualified name if it has one.
+    //    Useful for names like goog.ui.Component. Also handles cases where type is null.
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
-    } else if (type.isFunctionType()) {
-      // Don't show complex function names.
+    }
+
+    // 5. Further fallbacks based on the type kind (if type is known).
+    if (type != null) {
+      if (type.isFunctionType()) {
+        // Avoid long signatures for unnamed function types.
         return "function";
       } else {
+        // Final fallback: the basic toString() of the type from step 1.
+        // This might be "Object", "{prop: string}", "unknown", etc.
         return type.toString();
       }
     }
+
+    // Absolute fallback if type is null and qualified name is null.
+    return "unknown";
+  }
\ No newline at end of file
