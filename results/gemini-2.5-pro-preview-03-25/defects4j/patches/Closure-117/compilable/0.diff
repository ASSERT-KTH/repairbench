diff --git a/tmp/85d54819-82a4-49a1-b457-c62bfdee7c26_buggy.java b/tmp/edf38826-de67-47bb-91af-4cfc802ec516_fixed.java
index 39981f0..fc33762 100644
--- a/tmp/85d54819-82a4-49a1-b457-c62bfdee7c26_buggy.java
+++ b/tmp/edf38826-de67-47bb-91af-4cfc802ec516_fixed.java
@@ -1,65 +1,95 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+      Node objectNode = n.getFirstChild();
+      JSType nodeType = getJSType(objectNode);
+      ObjectType objectType = nodeType.dereference(); // Type of the object being accessed
+
       if (objectType != null) {
         String propName = n.getLastChild().getString();
+        ObjectType definer = null; // The type where the property is actually defined
+
+        // Find the definer
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+          // Interfaces
+          definer = FunctionType.getTopDefiningInterface(objectType, propName);
         } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+          // Classes / structural types
+          ObjectType currentType = objectType;
+          while (currentType != null && !currentType.hasOwnProperty(propName)) {
+            currentType = currentType.getImplicitPrototype();
           }
+          definer = currentType; // This will be null if the property is not found
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        // If the property was found on the chain and the definer has a good name
+        if (definer != null &&
+            (definer.getConstructor() != null ||
+             definer.isFunctionPrototypeType())) {
+          return definer.toString() + "." + propName;
+        } else {
+          // *** FIX ***
+          // If the property was NOT found (definer is null) or the definer doesn't
+          // have a representable name, the error message should refer to the type
+          // we were searching on. Return the name of the base object type if it's
+          // representable.
+          if (objectType.isFunctionPrototypeType() ||
+              (objectType.toObjectType() != null &&
+               objectType.toObjectType().getConstructor() != null)) {
+             // Return the name of the type where the property was expected but not found.
+             return objectType.toString();
+          }
+          // If the base object type itself doesn't have a good name (e.g.,
+          // anonymous object literal), fall through to the general logic below.
+          // *** END FIX ***
         }
       }
+      // Fallthrough if objectType was initially null or if the specific object type name wasn't suitable
+      // in the failure case.
     }
 
+    // General fallback logic for non-GETPROP nodes or GETPROPs where the specific logic didn't return.
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
+
+    // Prefer the type name if it's identifiable
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
+
+    // Next, try the qualified name of the node
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
+      // Fallback to the JSType's toString()
       return type.toString();
     }
   }
\ No newline at end of file
