diff --git a/tmp/4fa30663-4db2-4efd-a6dc-3f9ed45b3a3d_buggy.java b/tmp/1139d807-8944-4c2c-a53e-8b6d69a14ed4_fixed.java
index 39981f0..44dae7a 100644
--- a/tmp/4fa30663-4db2-4efd-a6dc-3f9ed45b3a3d_buggy.java
+++ b/tmp/1139d807-8944-4c2c-a53e-8b6d69a14ed4_fixed.java
@@ -1,65 +1,108 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
+   *     to an Object type, if possible. This is usually true when the goal
+   *     is to describe the type *of* the expression n. If false, the original
+   *     type is used, and for GETPROP nodes, an attempt is made to find the
+   *     defining type.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+    // If we're analyzing a GETPROP and *not* dereferencing, the goal might be
+    // to find where the property was originally defined. Climb the prototype
+    // chain to find the owner.
+    // This is useful for messages explaining where a property originates.
+    if (!dereference && n.isGetProp()) {
+      // Safe handling of potential null base type
+      JSType baseType = getJSType(n.getFirstChild());
+      ObjectType objectType = baseType == null ? null : baseType.dereference();
+
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
+          // Interfaces
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
-          // classes
+          // Classes
+          // Climb the prototype chain to find the owner of the property.
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
+        // If we found the defining type, and it has a readable name (like
+        // a constructor or prototype), return the qualified property name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
+          // e.g., "Foo.prototype.bar"
           return objectType.toString() + "." + propName;
         }
       }
     }
 
+    // If it's not a GETPROP, or if we are dereferencing, or if the GETPROP
+    // logic failed to produce a name, get the type of the node n itself.
+    // This path is taken when we want the type *of* the expression n (usually when dereference=true).
     JSType type = getJSType(n);
+
+    // Handle cases where type information is unavailable.
+    if (type == null || type.isUnknownType() || type.isAllType()) {
+      // Fallback to node's qualified name if possible.
+      String qualifiedName = n.getQualifiedName();
+      if (qualifiedName != null) {
+        return qualifiedName;
+      }
+      // TODO(b/116138134): Include node source information for better debugging.
+      // If no qualified name, return a placeholder.
+      return (type == null || type.isUnknownType()) ? "?" : type.toString();
+    }
+
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
-        type = dereferenced;
+        type = dereferenced; // Use the dereferenced object type
       }
+      // If dereference resulted in null or didn't change the type, 'type' holds
+      // the best available type (original or dereferenced object type).
+      // Need null check in case original type was somehow null after initial checks
+      // or dereferenced type is null, though ideally handled by dereference().
+      if (type == null) {
+         return "<?>"; // Should be rare
       }
+    }
+
+
+    // Prefer the type's toString if it represents a constructor or prototype,
+    // as these typically have readable names (e.g., "MyClass", "MyClass.prototype").
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
+
+    // If the type's toString isn't helpful (e.g., for anonymous objects or
+    // complex union/function types), try the node's qualified name if available.
+    // This helps provide context for object literals or complex types.
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
+      // Don't show complex function signatures like "function(string, number): boolean".
       return "function";
     } else {
+      // Fallback to the type's toString representation for other cases
+      // (e.g., primitive types, union types, anonymous object types).
       return type.toString();
     }
   }
\ No newline at end of file
