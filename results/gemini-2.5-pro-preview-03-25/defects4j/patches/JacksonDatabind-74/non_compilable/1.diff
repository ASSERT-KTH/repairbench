diff --git a/tmp/cb5e89a8-42ed-4fd7-8f7f-5fbeac6a9984_buggy.java b/tmp/ccef6d8f-bf87-44f5-93ce-68ea28864d6d_fixed.java
index 658036e..597b015 100644
--- a/tmp/cb5e89a8-42ed-4fd7-8f7f-5fbeac6a9984_buggy.java
+++ b/tmp/ccef6d8f-bf87-44f5-93ce-68ea28864d6d_fixed.java
@@ -1,29 +1,50 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // First check for potential null-equivalent values
+        // (NOTE: We do not have an instance yet so can't call contextual handlers)
+        // (Also note: we can NOT yet check value contents easily if buffered.)
+        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            if (tb == null && p.hasToken(JsonToken.VALUE_STRING)) {
+                 String str = p.getText();
+                 if (str.isEmpty()) {
+                      return null;
+                 }
+            }
+        }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
+
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
-        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
-                "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
-        return null;
+
+        // 29-Mar-2021, tatu: As per [databind#3095], need to use `reportMissingTypeId`
+        String msg = String.format("missing type id property '%s'", _typePropertyName);
+        // Any extra context?
+        if (_property != null) {
+            msg = String.format("%s (for POJO property '%s')", msg, _property.getName());
+        }
+        // Pass `null` for base value because it's assumed to be the containing POJO
+        // Must pass type id resolver for handler lookups
+        // Important: pass 'p' from argument, not one possibly created from buffer
+        return ctxt.reportMissingTypeId(p, _idResolver, msg);
     }
