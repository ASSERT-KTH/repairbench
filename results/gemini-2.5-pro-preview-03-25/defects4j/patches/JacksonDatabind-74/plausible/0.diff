diff --git a/tmp/afe3682e-761c-4823-814b-79ddd37e54f6_buggy.java b/tmp/2f5a5a9b-cb4d-45a6-b757-ef3c14832d89_fixed.java
index 658036e..d12377a 100644
--- a/tmp/afe3682e-761c-4823-814b-79ddd37e54f6_buggy.java
+++ b/tmp/2f5a5a9b-cb4d-45a6-b757-ef3c14832d89_fixed.java
@@ -1,29 +1,56 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // [databind#1533]: First, check for potentially null-indicating empty Value String
+        // NOTE: Only applies if `tb` is null, meaning we didn't buffer anything;
+        // otherwise we have structured content for which this does not apply.
+        if (tb == null) { // Check applicability only if we have non-buffered "raw" token
+             JsonToken t = p.currentToken();
+             if (t == JsonToken.VALUE_STRING) {
+                 if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                      String str = p.getText();
+                      // Note: cannot use `trim()` as that could change value interpretation
+                      if (str != null && str.isEmpty()) {
+                           // Important: MUST consume the token to be compatible, avoid infinite loop
+                           p.nextToken();
+                           // Return null as directed by feature
+                           return null;
+                      }
+                  }
+              }
+             // 10-Jun-2020, tatu: As per [databind#2714], consider other "natural" types
+             //    as well -- perhaps even START_ARRAY? But let's handle specific case first.
+         }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
+            // Deserializer should consume token(s) it needs
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+        // Note: deserializeIfNatural consumes the token IF it finds a match and returns non-null
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
-            return super.deserializeTypedFromAny(p, ctxt);
+        if (p.currentToken() == JsonToken.START_ARRAY) {
+            // deserializeTypedFromArray consumes tokens
+            return super.deserializeTypedFromArray(p, ctxt);
         }
+
+        // If we get here, we either have token that was not handled, or for buffered
+        // content, we failed to find type id and have no default impl
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
-        return null;
+        return null; // never reached
     }
