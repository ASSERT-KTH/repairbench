diff --git a/tmp/4e28e6f2-6500-4ac3-a2c8-45d86dbf853e_buggy.java b/tmp/5e37de45-ca39-493d-b651-67a4183f8973_fixed.java
index 658036e..d4acd75 100644
--- a/tmp/4e28e6f2-6500-4ac3-a2c8-45d86dbf853e_buggy.java
+++ b/tmp/5e37de45-ca39-493d-b651-67a4183f8973_fixed.java
@@ -1,29 +1,46 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // [databind#1533]: May need special handling for empty String as null
+        // NOTE: only handles empty string; null handled earlier upstream
+        // Check must be performed specifically for VALUE_STRING, considering it is the current token
+        // 11-Jun-2020, tatu: In case of `null` property value, we expect null token;
+        //    but with empty String, may get `VALUE_STRING` instead. Need to handle.
+        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            JsonToken t = p.currentToken();
+            if (t == JsonToken.VALUE_STRING) {
+                String str = p.getText().trim();
+                if (str.isEmpty()) {
+                    return null;
+                }
+            }
+        }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
+        if (p.currentToken() == JsonToken.START_ARRAY) { // Use currentToken() for safety
             return super.deserializeTypedFromAny(p, ctxt);
         }
+        // 16-Feb-2018, tatu: As per [databind#1898], should use `reportMissingTypeId`
+        // 11-Jun-2020, tatu: ... or maybe `handleMissingTypeId`? For now, leave as is
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
-        return null;
+        return null; // never gets here
     }
