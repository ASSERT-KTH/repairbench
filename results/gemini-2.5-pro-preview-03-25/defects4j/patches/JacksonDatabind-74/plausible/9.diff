diff --git a/tmp/7fd285d1-0846-4926-a208-40e05d2c9cdb_buggy.java b/tmp/5f6e28a9-d298-4dd4-bc2a-2084b6383ba7_fixed.java
index 658036e..59d3cff 100644
--- a/tmp/7fd285d1-0846-4926-a208-40e05d2c9cdb_buggy.java
+++ b/tmp/5f6e28a9-d298-4dd4-bc2a-2084b6383ba7_fixed.java
@@ -1,29 +1,47 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // As per [databind#1533], need to allow mapping "" to null,
+        // even if not explicitly specified for type. Let's handle it here.
+        // 18-Oct-2019, tatu: This is tricky -- make sure it should NOT apply to
+        //   buffered case? Yes. Only if we get VALUE_STRING directly
+        if (tb == null && p.hasToken(JsonToken.VALUE_STRING)) {
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                String text = p.getText();
+                if (text.isEmpty()) {
+                     return null;
+                }
+            }
+        }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+
+        // 18-Oct-2019, tatu: What we have here is VALUE_STRING (''), but potentially non-String
+        //    target type. This could perhaps be handled...? Or maybe not, requires default impl?
+        // Let's leave as is for now -- callers likely report errors if this method returns null.
+
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
