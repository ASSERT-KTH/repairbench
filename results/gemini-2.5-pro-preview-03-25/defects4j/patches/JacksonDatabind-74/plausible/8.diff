diff --git a/tmp/caf5b9a3-8ec5-4a63-a518-f238e55f5843_buggy.java b/tmp/972dcc86-791f-459f-b98f-4902204c790d_fixed.java
index 658036e..0689afa 100644
--- a/tmp/caf5b9a3-8ec5-4a63-a518-f238e55f5843_buggy.java
+++ b/tmp/972dcc86-791f-459f-b98f-4902204c790d_fixed.java
@@ -1,29 +1,56 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // As per [databind#1533], check for empty string should be delegated properly
+        // BEFORE trying default implementation or natural types
+        if (p.hasToken(JsonToken.VALUE_STRING)) {
+            String str = p.getText();
+            // Note: cannot use `p.getText().isEmpty()` as that could advance parser
+            if (str.isEmpty() && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                 return null;
+            }
+        }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+
+        // 17-Jan-2018, tatu: Add specialized handling for `null`? Seems unlikely
+        //   to pass related checks above, but...
+        // NOTE: Do NOT use `p.hasToken()` as that cannot distinguish between `null` available
+        //   and no token available.
+        if (p.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
+           Object ob = p.getEmbeddedObject();
+           if (ob == null) {
+              // 02-Mar-2018, tatu: as per [databind#1899] need to return `null` here
+              return null;
+           }
+           // 04-Sep-2019, tatu: [databind#2430]: need to allow compatible type as well
+           if (_baseType.getRawClass().isAssignableFrom(ob.getClass())) {
+               return ob;
+           }
+        }
+
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
