diff --git a/tmp/9ec3be3c-7a7a-4245-ac13-89af93508b59_buggy.java b/tmp/33c62025-f5ee-4b65-aecc-4420ac62c9b5_fixed.java
index 658036e..d742579 100644
--- a/tmp/9ec3be3c-7a7a-4245-ac13-89af93508b59_buggy.java
+++ b/tmp/33c62025-f5ee-4b65-aecc-4420ac62c9b5_fixed.java
@@ -1,29 +1,62 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
+
+        // [databind#1533]: May map empty String to null, if enabled
+        if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
+            // Cant check for "" + ACCEPT_EMPTY_STRING_AS_NULL_OBJECT without this:
+             if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                 String str = p.getText();
+                 if (str.isEmpty()) {
+                     return null;
+                 }
+             }
+        }
+
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+        // 20-May-2020, tatu: As per [databind#2777], need to ensure we handle BUFFERING
+        //   correctly (don't consume token that belongs to value)
+        //   (but only applies if buffering occurred)
+        if (tb != null) { // only matters if we are buffering
+             // Is this even possible? It ought to mean we were buffering a scalar...
+             // This seems like it should perhaps lead to an exception?
+             // Specifically: we seem to be inside a `{}` structure (implicit or explicit),
+             // and we were trying to buffer. But we are hitting a scalar token?
+             // This would seem to require input like:
+             //
+             //   { "prop" : 123 }
+             //
+             // which would seem broken...
+
+             // ... but perhaps not. Consider case of `@JsonTypeInfo(use = DEDUCTION)` ?
+             // (although why would we get here?)
+
+             // For now let's assume things are fine... ?
+        }
+
+        // Hitting this point means that we are missing the type property
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
