diff --git a/tmp/d84daf89-19b6-42bf-a5bd-139059822358_buggy.java b/tmp/ab0ba2c8-1067-454f-a627-b2c19d649a11_fixed.java
index 658036e..dcfbe1e 100644
--- a/tmp/d84daf89-19b6-42bf-a5bd-139059822358_buggy.java
+++ b/tmp/ab0ba2c8-1067-454f-a627-b2c19d649a11_fixed.java
@@ -1,29 +1,47 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+        // [databind#1533]: May need to accept empty string as null instance?
+        if (p.hasToken(JsonToken.VALUE_STRING)) {
+            final String str = p.getText().trim();
+            // note: can NOT skip empty string values here, MUST handle such cases;
+            // otherwise they'll be left hanging without anything consuming them.
+            // 18-Nov-2017, tatu: Except that... If this is meant to be Polymorphic
+            //   value, and we have neither Type Id nor default impl, what could
+            //   this be? Most likely case is an error. A possible (?) case is that
+            //   of `JsonTypeInfo.As.EXTERNAL_PROPERTY`... ?
+            //   Let's try this: only if enabled, and if empty string, return null.
+            if (str.isEmpty()) {
+                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                    return null;
+                }
+            }
+        }
+        // Failure mode: unrecognized token, or found scalar
+        // for type that has no default impl
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
