diff --git a/tmp/3c6d5916-31d6-40a6-ba7b-80b0dab6e558_buggy.java b/tmp/2dedf68a-366d-47f0-b675-7a395380455f_fixed.java
index 658036e..4e12d2f 100644
--- a/tmp/3c6d5916-31d6-40a6-ba7b-80b0dab6e558_buggy.java
+++ b/tmp/2dedf68a-366d-47f0-b675-7a395380455f_fixed.java
@@ -1,29 +1,61 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
+            // If we have buffer, must use copy marker
+            JsonParser p2 = p; // use method parameter name 'p' for buffer parser if needed
             if (tb != null) {
+                // Must be done before trying to deserialize:
                 tb.writeEndObject();
-                p = tb.asParser(p);
+                p2 = tb.asParser(p);
                 // must move to point to the first token:
-                p.nextToken();
+                p2.nextToken();
+            }
+            try {
+                // Ok, let's try using default implementation
+                return deser.deserialize(p2, ctxt);
+            } catch (Exception e) {
+                // 03-Nov-2017, tatu: As per [databind#1533], need to be careful...
+                // Intercept and check for explicit `null` from empty String value?
+                // (note: we are only called if JsonTypeInfo.As.PROPERTY handling fails)
+                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                    // Need to use a copy for introspection, to avoid interference with fallbacks
+                    // Also, need to START with buffer/existing parser: does not consume token from `p`
+                    // 18-Nov-2017, tatu: NOTE! This is messy, likely to break for cases where there are
+                    //    multiple properties, OR if value itself is structured. But has to do for now.
+                    JsonParser p3 = (tb == null) ? p : tb.asParser(p);
+                    if (p3.nextToken() == JsonToken.VALUE_STRING) {
+                        if (p3.getText().isEmpty()) {
+                            if (p3.nextToken() == null) { // end of input? Or just buffer...
+                                return null;
+                            }
+                        }
+                    }
+                }
+                // If exception is not handled, fall through to default error reporting:
+                // also, need to simply call method itself, not throw here
+                // Fall through to error reporting below? Or re-throw? Let's fall through for now.
+                // ... fall through to outside catches looks necessary, actually...
+                // But, nope, return path is just null return, apparently. Do that. Seems wrong tho.
+                // ... and finally, let's try re-throwing, to see what happens: maybe the intent is
+                // that the original failure should propagate.
+                 throw JsonMappingException.wrapWithPath(e, deser.handledType(), 0);
             }
-            return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
