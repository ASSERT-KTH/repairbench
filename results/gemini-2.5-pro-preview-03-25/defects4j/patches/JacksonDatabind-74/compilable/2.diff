diff --git a/tmp/a16ba78d-1de9-4f87-bfa1-e84da6811029_buggy.java b/tmp/cd586b62-c4f8-47af-bc15-5294aa5bfab8_fixed.java
index 658036e..4bfb627 100644
--- a/tmp/a16ba78d-1de9-4f87-bfa1-e84da6811029_buggy.java
+++ b/tmp/cd586b62-c4f8-47af-bc15-5294aa5bfab8_fixed.java
@@ -1,29 +1,67 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
+            // [databind#1533]: Handle empty String as null possibly
+            if (p.hasToken(JsonToken.VALUE_STRING)) {
+                final String text = p.getText();
+                if (text.isEmpty()) {
+                    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                         // Important: check based on resolved type, not base type; base type is nominal
+                         // and generally abstract, so not useful
+                         // 26-Oct-2021, tatu: But wait! We have default type's deserializer...
+                         //   Let's use that information then?
+
+                         // 03-Nov-2021, tatu: Should not need to construct an actual type but
+                         //    rather check kind of type... Also: related to `CoercionConfigs`
+                         Class<?> rawDefaultType = deser.handledType();
+
+                         // 03-Nov-2021, tatu: Need to consider coercion effects similar to
+                         //    `StdDeserializer._deserializeFromEmptyString()` ... may seem
+                         //    counter-intuitive but rules for coercion from empty String need
+                         //    to be applied same way regardless of where Empty String occurs.
+                         //    Except let's not block Containers, Reference types. String is ambigous
+                         //    but handled by default deser so fine.
+                         //    Basically: only use `null` for POJO/Enum/Scalar-non-String
+                         if (!String.class.isAssignableFrom(rawDefaultType)
+                                 && !java.util.Collection.class.isAssignableFrom(rawDefaultType)
+                                 && !java.util.Map.class.isAssignableFrom(rawDefaultType)
+                                 && !com.fasterxml.jackson.databind.type.ReferenceType.class.isAssignableFrom(rawDefaultType)
+                                 ) {
+                             return null;
+                         }
+                    }
+                }
+            }
+            
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
+        
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
+        
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+        
+        // 10-Jun-2020, tatu: Should we check for `JsonToken.VALUE_EMBEDDED_OBJECT`?
+        //   Seems like we probably should.
+
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
-        return null;
+        return null; // never gets here
     }
\ No newline at end of file
