diff --git a/tmp/e91455f4-f0ef-4bcf-8021-0896bc8e682f_buggy.java b/tmp/50996743-7fc3-4a04-8c71-fb89a958c597_fixed.java
index 658036e..3e3724c 100644
--- a/tmp/e91455f4-f0ef-4bcf-8021-0896bc8e682f_buggy.java
+++ b/tmp/50996743-7fc3-4a04-8c71-fb89a958c597_fixed.java
@@ -1,29 +1,53 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // [databind#1533]: First check allows "" to be null
+        if (p.hasToken(JsonToken.VALUE_STRING)) {
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                String str = p.getText().trim();
+                 if (str.isEmpty()) {
+                    return null;
+                 }
+            }
+        }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
-        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
-                "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
+
+        // 13-Oct-2016, tatu: We already handled VALUE_STRING="" above, explicitly,
+        // so no need to re-check here. But other scalar values may indicate issues.
+
+        // 17-Jan-2018, tatu: Most likely indicates missing type id, so provide
+        //   meaningful error message. Note that we could get `VALUE_STRING` here
+        //   for example, with non-empty value etc.
+        JsonToken t = JsonToken.FIELD_NAME;
+        // If we did not buffer, we may have different current token...
+        if (tb == null) {
+             // do we know it should be FIELD_NAME? It is the common case for AS_PROPERTY
+//        	 t = p.getCurrentToken();
+        }
+        // 17-Jan-2018, tatu: Let's report FIELD_NAME as expected, seems reasonable
+        ctxt.reportWrongTokenException(p, t,
+                "missing type id property '"+_typePropertyName+"' (for POJO property '"+baseTypeName()+"')");
         return null;
     }
\ No newline at end of file
