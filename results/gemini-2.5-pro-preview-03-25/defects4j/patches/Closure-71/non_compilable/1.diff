diff --git a/tmp/3d2713ac-db25-4887-a93c-d1575229c77d_buggy.java b/tmp/817e1c60-36d0-4c7b-97ad-5d5357ad78ec_fixed.java
index 6f24eb6..dbce751 100644
--- a/tmp/3d2713ac-db25-4887-a93c-d1575229c77d_buggy.java
+++ b/tmp/817e1c60-36d0-4c7b-97ad-5d5357ad78ec_fixed.java
@@ -1,99 +1,138 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
+   * @param parent The parent of the getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+    if (objectType == null) {
+      // Don't know the type of the object? Assume it's public.
+      // TODO(nicksantos): This introduces a hole in the access controls.
+      // We should be able to check the access controls without knowing the
+      // exact object type. See bug 1802063.
+      return;
+    }
     String propertyName = getprop.getLastChild().getString();
 
-    if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
+    // Determine if this is a prototype/static assignment in global scope.
+    boolean isPrototypeOverride = t.inGlobalScope() &&
         parent.getType() == Token.ASSIGN &&
         parent.getFirstChild() == getprop;
 
-      // Find the lowest property defined on a class with visibility
-      // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
-      }
-      JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-        if (docInfo != null &&
-            docInfo.getVisibility() != Visibility.INHERITED) {
+    // Find the lowest property defined on the prototype chain with visibility info.
+    // For prototype overrides, start search from the immediate supertype's prototype.
+    // For other accesses (instance properties, reads), start from the objectType itself
+    // and search up the prototype chain.
+    JSDocInfo definingDocInfo = null;
+    ObjectType ownerObjectType = null;
+    ObjectType currentSearchType = isPrototypeOverride ? objectType.getImplicitPrototype() : objectType;
+
+    for (; currentSearchType != null;
+         currentSearchType = currentSearchType.getImplicitPrototype()) {
+      definingDocInfo = currentSearchType.getOwnPropertyJSDocInfo(propertyName);
+      if (definingDocInfo != null &&
+          definingDocInfo.getVisibility() != Visibility.INHERITED) {
+        ownerObjectType = currentSearchType;
         break;
       }
     }
 
-      if (objectType == null) {
+    // If we didn't find the property on the prototype chain check the original
+    // object type directly. This could be the case for instance properties defined
+    // in constructors, or static properties accessed directly on the constructor.
+    if (ownerObjectType == null) {
+       definingDocInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
+       if (definingDocInfo != null && definingDocInfo.getVisibility() != Visibility.INHERITED) {
+         ownerObjectType = objectType;
+       }
+    }
+
+    if (ownerObjectType == null) {
       // We couldn't find a visibility modifier; assume it's public.
       return;
     }
 
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
-      Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
-      if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
-        JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+    // Found the property definition. Extract info.
+    // Check source file equality using the compiler's source file representation.
+    StaticSourceFile definingSource = definingDocInfo.getSourceName() == null ?
+        null : compiler.getSourceFileByName(definingDocInfo.getSourceName());
+    StaticSourceFile currentSource = t.getSourceFile();
+    boolean sameInput = definingSource != null && currentSource != null &&
+        definingSource.getName().equals(currentSource.getName());
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+    Visibility visibility = definingDocInfo.getVisibility();
+    // Get the class type where the property was defined.
+    JSType ownerType = normalizeClassType(ownerObjectType);
+    boolean isAssign = parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;
+
+    // Check 1: Private visibility violations
     if (visibility == Visibility.PRIVATE && !sameInput) {
+      if (definingDocInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {
+        // Allowed: Special case for goog.inherits using private constructors.
+      } else {
+        // Private property accessed from outside the defining file.
+        if (isAssign && !isPrototypeOverride) {
+           // Case: this.privateProp = ... in subclass constructor/method (different file)
+           // Report PRIVATE_OVERRIDE error. Owner type is the class where it was defined.
            compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
-          compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
-                  overridingVisibility.name()));
-        }
+              t.makeError(getprop, PRIVATE_OVERRIDE, ownerType.toString()));
         } else {
-        if (sameInput) {
-          // private access is always allowed in the same file.
-          return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
-            return;
-          }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+           // Case: Sub.prototype.privateProp = ... (different file) -> Test 6
+           // Case: var x = obj.privateProp; (different file)
+           // Report BAD_PRIVATE_PROPERTY_ACCESS error.
            compiler.report(
                t.makeError(getprop,
                    BAD_PRIVATE_PROPERTY_ACCESS,
                    propertyName,
+                   // Report the type name of the object being accessed.
                    validator.getReadableJSTypeName(
                        getprop.getFirstChild(), true)));
-        } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+        }
+        return; // Access denied.
+      }
+    }
+
+    // Check 2: Prototype override visibility mismatch
+    // Only check this if the private access check didn't fail (i.e., same file or not private).
+    if (isPrototypeOverride) {
+      // Check if overriding JSDoc specifies a visibility.
+      JSDocInfo overridingInfo = parent.getJSDocInfo();
+      if (overridingInfo != null) {
+        Visibility overridingVisibility = overridingInfo.getVisibility();
+        // Check for mismatch if overriding visibility is specified and different from original.
+        // Note: Overriding a private property in the same file is allowed,
+        // but the new visibility must be private or inherited/unspecified.
+        if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {
+          compiler.report(
+              t.makeError(getprop, VISIBILITY_MISMATCH,
+                  visibility.name(), ownerType.toString(), // ownerType is where original prop defined
+                  overridingVisibility.name()));
+          return; // Exit.
+        }
+      }
+      // If we are here, the prototype override is allowed.
+    }
+    // Check 3: Protected visibility violations (for non-prototype-override access)
+    // Only check this if the private access check didn't fail.
+    else if (visibility == Visibility.PROTECTED && !sameInput) {
+      // Protected properties accessible only in defining file (handled by sameInput check)
+      // or from within a subclass. Check if current context is in a subclass.
+      // 'currentClass' should be the JSType of the class containing the access site.
+      // It is updated by the visit method.
+      // Ensure ownerType is not null before checking subtype relationship.
+       if (currentClass == null || ownerType == null || !currentClass.isSubtype(ownerType)) {
          compiler.report(
              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                  propertyName,
                  validator.getReadableJSTypeName(
                      getprop.getFirstChild(), true)));
+         return; // Access denied.
        }
+      // Allowed: Accessing protected member from subclass in different file.
     }
-      }
-    }
+
+    // If none of the checks above failed, the access is allowed.
   }
\ No newline at end of file
