diff --git a/tmp/fc782aca-e0dc-4494-9556-308144fdf3d8_buggy.java b/tmp/9518e70c-808c-4b3a-ad46-2ab0b08a1859_fixed.java
index 6f24eb6..a103cdf 100644
--- a/tmp/fc782aca-e0dc-4494-9556-308144fdf3d8_buggy.java
+++ b/tmp/9518e70c-808c-4b3a-ad46-2ab0b08a1859_fixed.java
@@ -1,99 +1,182 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
+   * @param parent The parent of the getprop node.
    */
-  private void checkPropertyVisibility(NodeTraversal t,
-      Node getprop, Node parent) {
-    ObjectType objectType =
-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
-    String propertyName = getprop.getLastChild().getString();
+  private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {
+    // We only check property access on GETPROP nodes.
+    if (!getprop.isGetProp()) {
+      return;
+    }
+
+    Node objectNode = getprop.getFirstChild();
+    Node propertyNode = getprop.getLastChild();
 
-    if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
-          parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
+    // We only handle string property names.
+    if (!propertyNode.isString()) {
+      return;
+    }
+    String propertyName = propertyNode.getString();
 
-      // Find the lowest property defined on a class with visibility
-      // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
+    // Get the type of the object whose property is being accessed.
+    JSType objectNodeType = objectNode.getJSType();
+    if (objectNodeType == null) {
+      // Fallback for assignments like Foo.prototype.bar = function() {};
+      // Use the type of the assignment expression itself.
+       if (parent.isAssign() && getprop == parent.getFirstChild()) {
+         objectNodeType = parent.getJSType();
        }
-      JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-        if (docInfo != null &&
-            docInfo.getVisibility() != Visibility.INHERITED) {
-          break;
+       if (objectNodeType == null) {
+           // Cannot determine the type; potentially a coding error or complex case.
+           return;
        }
     }
 
+    // Ensure we are working with an ObjectType.
+    ObjectType objectType = ObjectType.cast(dereference(objectNodeType));
     if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+      return; // Not an object type we can check visibility on.
+    }
+
+    // Determine if the GETPROP is the left-hand side of an assignment.
+    boolean isLhs = parent.isAssign() && parent.getFirstChild() == getprop;
+
+    // Determine the start type for searching the property definition.
+    // If LHS (assignment): We're checking override rules against the superclass/prototype property.
+    // If RHS (access): We're checking access rules for the property found starting from the object's type.
+    ObjectType searchStartType = objectType;
+    if (isLhs) {
+        // Note: getImplicitPrototype() handles navigating up the type hierarchy.
+        searchStartType = objectType.getImplicitPrototype();
+    }
+
+    // Find the first definition of the property up the prototype chain
+    // that has explicit visibility information.
+    JSDocInfo definedDocInfo = null;
+    ObjectType definedType = null; // The ObjectType where the defining property was found.
+    for (ObjectType currentSearchType = searchStartType;
+         currentSearchType != null;
+         currentSearchType = currentSearchType.getImplicitPrototype()) {
+
+        definedDocInfo = currentSearchType.getOwnPropertyJSDocInfo(propertyName);
+        if (definedDocInfo != null &&
+            definedDocInfo.getVisibility() != Visibility.INHERITED) {
+            definedType = currentSearchType;
+            break; // Found the relevant definition.
+        }
+    }
+
+    // If no definition with explicit visibility was found, assume public access is allowed.
+    if (definedType == null) {
         return;
     }
 
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
-      Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
-      if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
-        JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
-
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
+    // Extract information from the property definition found.
+    Visibility definedVisibility = definedDocInfo.getVisibility();
+    String definedSource = definedDocInfo.getSourceName();
+    // Ensure definedSource is not null before comparing
+    boolean definedInSameInput = definedSource != null && definedSource.equals(t.getInput().getName());
+
+    // Get the class/interface type that owns the property definition.
+    JSType ownerType = normalizeClassType(definedType);
+    if (ownerType == null) {
+       // Could not determine owner, possibly an issue with normalizeClassType or the type system.
+       // Cannot perform visibility checks reliably.
+       return;
+    }
+
+
+    if (isLhs) {
+        // --- Check rules for LHS (Assignments / Overrides) ---
+
+        // Get the JSDoc associated with the assignment itself, if any.
+        JSDocInfo assigningDocInfo = parent.getJSDocInfo();
+        if (assigningDocInfo == null) {
+           // JSDoc might be attached to the GETPROP node in assignments like:
+           // /** @override */ this.prop = ...
+           assigningDocInfo = getprop.getJSDocInfo();
+        }
+        Visibility assigningVisibility = assigningDocInfo == null ?
+            Visibility.INHERITED : assigningDocInfo.getVisibility();
+
+        // Check 1: Cannot override a private property defined in another file.
+        if (definedVisibility == Visibility.PRIVATE && !definedInSameInput) {
             compiler.report(
                 t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
+                    propertyName, // Property name {0}
+                    ownerType.toString())); // Type name {1}
+            return;
+        }
+
+        // Check 2: Visibility of the override must match the original property,
+        // if the override specifies an explicit visibility.
+        if (assigningVisibility != Visibility.INHERITED &&
+            assigningVisibility != definedVisibility) {
             compiler.report(
                 t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
-                  overridingVisibility.name()));
+                    propertyName,           // Property name {0}
+                    definedVisibility.name(), // Original visibility {1}
+                    ownerType.toString(),     // Type where original is defined {2}
+                    assigningVisibility.name())); // Visibility in the override/assignment {3}
+            return;
         }
+
+        // Check 3: Is override of protected property allowed?
+        // Check if the defining class is related to the current class context
+        // This mirrors the read access check but applies during override attempt.
+        if (definedVisibility == Visibility.PROTECTED && !definedInSameInput) {
+          // We must be in a subclass of the owner type to override a protected property from another file.
+          // We use 'objectType' (the type being assigned to, e.g., SubClass.prototype)
+          // to check the subclass relationship against 'ownerType'.
+          JSType currentAssigningClass = normalizeClassType(objectType);
+          if (currentAssigningClass == null || !currentAssigningClass.isSubtype(ownerType)) {
+                compiler.report(
+                    t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
+                        propertyName,
+                        validator.getReadableJSTypeName(objectNode, true)));
+                 return;
+            }
+        }
+
     } else {
-        if (sameInput) {
-          // private access is always allowed in the same file.
+        // --- Check rules for RHS (Read Access) ---
+
+        // Access is always allowed if the definition is in the same file.
+        if (definedInSameInput) {
             return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
+        }
+
+        // Access from a different file.
+        if (definedVisibility == Visibility.PRIVATE) {
+            // Allow access to private constructors via helper function if valid.
+            if (definedDocInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {
                  return;
             }
 
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+            // Otherwise, private access is restricted to the defining class.
+            // currentClass is the class context of the access location.
+            if (currentClass == null || ownerType.differsFrom(currentClass)) {
                  compiler.report(
                     t.makeError(getprop,
                         BAD_PRIVATE_PROPERTY_ACCESS,
-                  propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
-        } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
+                        propertyName, // Property name {0}
+                        // Type where property is accessed {1}
+                        validator.getReadableJSTypeName(objectNode, true)));
+                 return;
+            }
+        } else if (definedVisibility == Visibility.PROTECTED) {
+            // Protected access is allowed only from subclasses.
+            // Check if the current class context is a subtype of the defining class.
             if (currentClass == null || !currentClass.isSubtype(ownerType)) {
                  compiler.report(
                     t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
-                    propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
-          }
+                        propertyName, // Property name {0}
+                        // Type where property is accessed {1}
+                        validator.getReadableJSTypeName(objectNode, true)));
+                 return;
             }
         }
+        // Public access is implicitly allowed if none of the above restrictions apply.
     }
   }
\ No newline at end of file
