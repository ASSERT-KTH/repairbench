diff --git a/tmp/6601240c-b943-4ae3-94e9-a7dd3afdaa8e_buggy.java b/tmp/9138bbea-1f4d-48bf-a101-0d8dee27af3e_fixed.java
index 08093b4..c062983 100644
--- a/tmp/6601240c-b943-4ae3-94e9-a7dd3afdaa8e_buggy.java
+++ b/tmp/9138bbea-1f4d-48bf-a101-0d8dee27af3e_fixed.java
@@ -1,42 +1,65 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
+        // POSIX reserves paths that start with ././ for implementation variants
+        // and we use PaxHeaders.X for PAX headers.
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+        // TarArchiveEntry constructor treats names ending with "/" as directories
+        // and ignores the typeflag given in the constructor.
+        // Just removing the trailing slash may not be enough, see
+        // https://issues.apache.org/jira/browse/COMPRESS-191
+        //
+        // Clearing the size is not enough, the constructor explicitely
+        // sets it to 0 for directories and archives created by
+        // GNU TAR prior to version 1.26 have problems reading
+        // archives containing PAX headers for directories that have
+        // the size field set.
+
+        // If the original entry name was a directory, we must strip the trailing slash
+        // for the PAX header name. PAX headers are files, not directories.
+        if (entryName.endsWith("/")) {
+            name = name.substring(0, name.length() - 1);
+        }
+
+        // Truncate the name if it's too long.
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
+        // Rationale for the type flag is unclear. This is what GNU tar uses.
+        // May be potentially-buggy implementations that expect pax headers to be
+        // of type 'x' rather than 'g'. Compromise on 'X'.
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
+        // Must be constructed using the UTF-8 Charset. PAX headers are UTF-8.
+        // Reference: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_03
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
-        pex.setSize(data.length);
+        pex.setSize(data.length); // Correct size must be set BEFORE putArchiveEntry
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
\ No newline at end of file
