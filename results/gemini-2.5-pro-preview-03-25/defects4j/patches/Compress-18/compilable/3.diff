diff --git a/tmp/8c4f7d47-3c05-4491-911c-46b4e53bbd9f_buggy.java b/tmp/e059c866-ae22-42e5-9b8d-0f6b3c462c65_fixed.java
index 08093b4..c7ef01b 100644
--- a/tmp/8c4f7d47-3c05-4491-911c-46b4e53bbd9f_buggy.java
+++ b/tmp/e059c866-ae22-42e5-9b8d-0f6b3c462c65_fixed.java
@@ -1,42 +1,73 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
+        // PAX header names are formatted as ./PaxHeaders.X/<filename>
+        // where <filename> is a version of the original filename stripped of
+        // any non-7bit ASCII characters. It should not end in "/".
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+        // Ensure the name doesn't end with a slash, as PAX header entries are
+        // regular files, not directories. This can happen if the original
+        // entryName was a directory.
+        if (name.endsWith("/")) {
+            name = name.substring(0, name.length() - 1);
+        }
+
+        // Ensure the name fits within the TAR header limits.
+        // Truncate from the end if necessary.
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
+        // It's unlikely, but truncation might leave a trailing slash. Remove it if present.
+        if (name.endsWith("/")) {
+             name = name.substring(0, name.length() - 1);
+        }
+
+        // Create the TarArchiveEntry for the PAX header.
+        // Using the specific type 'x' for PAX headers.
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+        // Use a StringWriter to build the PAX header content.
         StringWriter w = new StringWriter();
+        // Iterate through the headers map to format each entry according to PAX standard.
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
+            // Calculate the initial guess for the length of the entry line.
+            // Format: <length> <key>=<value>\n
+            // The length field specifies the total number of bytes in the line,
+            // including the length field itself, the space, key, '=', value, and newline.
             int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+                + 3 /* space, equals and newline */
+                + 2 /* initial guess for the length field itself (e.g., "99") */;
             String line = len + " " + key + "=" + value + "\n";
+            // Calculate the actual byte length using UTF-8 encoding.
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            // Loop until the calculated length ('len') matches the actual byte length.
+            // This handles cases where the number of digits in the length field changes,
+            // or when UTF-8 encoding results in a byte length different from the char length.
             while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
+                // Update the length field value based on the previous calculation.
                 len = actualLength;
+                // Re-create the line with the updated length.
                 line = len + " " + key + "=" + value + "\n";
+                // Recalculate the actual byte length.
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
+            // Write the correctly formatted PAX header line.
             w.write(line);
         }
+        // Get the complete PAX header content as UTF-8 bytes.
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+        // Set the size of the PAX header entry. This is crucial.
         pex.setSize(data.length);
+        // Write the TAR header for the PAX entry to the output stream.
         putArchiveEntry(pex);
+        // Write the actual PAX header data.
         write(data);
+        // Close the PAX header entry.
         closeArchiveEntry();
     }
\ No newline at end of file
