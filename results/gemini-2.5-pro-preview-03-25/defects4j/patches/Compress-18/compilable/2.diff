diff --git a/tmp/ba1e169f-eee0-47bc-b034-1c4b8490b49b_buggy.java b/tmp/e4984683-0de4-4b9c-aab3-cf7cb5d2fad0_fixed.java
index 08093b4..b8464ba 100644
--- a/tmp/ba1e169f-eee0-47bc-b034-1c4b8490b49b_buggy.java
+++ b/tmp/e4984683-0de4-4b9c-aab3-cf7cb5d2fad0_fixed.java
@@ -1,42 +1,65 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
+        // PAX headers should not contain directory names, and directories
+        // must not contain data.
+        // If the original entry was a directory, the PAX header name derived
+        // from it might also end in "/". TarArchiveEntry constructor would
+        // treat this as a directory and force the size to 0, causing issues
+        // when we try to write the actual PAX header data.
+        // So, explicitly remove any trailing slash from the PAX header name.
+        if (name.endsWith("/")) {
+            name = name.substring(0, name.length() - 1);
+        }
         // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+        // and not allow any data to be written - This comment is slightly misleading,
+        // the constructor does allow size modification later, but writeEntryHeader
+        // might force size to 0 if isDirectory() is true based on the name/linkflag.
+        // Removing the trailing slash prevents this for PAX headers.
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
+            // Check for overflow, otherwise the loop might loop infinitely
+            // See https://issues.apache.org/jira/browse/COMPRESS-417
+            if (len < 0) {
+                throw new IOException("Paxheader length overflow");
+            }
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
+                // Check for overflow, otherwise the loop might loop infinitely
+                // See https://issues.apache.org/jira/browse/COMPRESS-417
+                if (len < 0) {
+                    throw new IOException("Paxheader length overflow");
+                }
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
\ No newline at end of file
