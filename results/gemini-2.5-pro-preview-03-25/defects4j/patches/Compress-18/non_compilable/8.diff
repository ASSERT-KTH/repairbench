diff --git a/tmp/9fbe1d51-4d1e-41de-b113-e8c9cbc33949_buggy.java b/tmp/d4e985fc-f632-4437-9280-dcf40db3c154_fixed.java
index 08093b4..acde715 100644
--- a/tmp/9fbe1d51-4d1e-41de-b113-e8c9cbc33949_buggy.java
+++ b/tmp/d4e985fc-f632-4437-9280-dcf40db3c154_fixed.java
@@ -1,42 +1,115 @@
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.nio.charset.StandardCharsets; // Assuming usage of StandardCharsets if available
+import java.util.Map;
+// Assuming existence of these classes/constants based on context
+// import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
+// import org.apache.commons.compress.archivers.tar.TarConstants;
+// import org.apache.commons.compress.utils.CharsetNames;
+// Assuming stripTo7Bits is accessible (e.g., static import or via TarUtils)
+// Assuming putArchiveEntry, write, closeArchiveEntry are methods of the enclosing class
+
+// Placeholder definitions for missing types to allow compilation check
+class TarArchiveEntry {
+    private String name;
+    private byte linkFlag;
+    private long size;
+    public TarArchiveEntry(String name, byte linkflag) { this.name = name; this.linkFlag = linkflag; this.size = 0;}
+    public void setSize(long size) { this.size = size; }
+    public long getSize() { return this.size; }
+    public String getName() { return this.name; }
+    public boolean isDirectory() { return name.endsWith("/"); }
+}
+class TarConstants {
+    public static final int NAMELEN = 100;
+    public static final byte LF_PAX_EXTENDED_HEADER_LC = 'x';
+    public static final byte LF_DIR = '5';
+}
+class CharsetNames {
+    public static final String UTF_8 = StandardCharsets.UTF_8.name(); // Use standard Charset name
+}
+// Dummy methods assumed to be part of the enclosing class
+abstract class DummyTarOutputStream {
+    abstract void putArchiveEntry(TarArchiveEntry pex) throws IOException;
+    abstract void write(byte[] data) throws IOException;
+    abstract void closeArchiveEntry() throws IOException;
+    String stripTo7Bits(String name) {
+        final StringBuilder sb = new StringBuilder(name.length());
+        for (int i = 0; i < name.length(); i++) {
+            char c = name.charAt(i);
+            if (c > 127) {
+                // The error message showed 'v' instead of '?',
+                // but the standard stripTo7Bits replaces with '?'.
+                // Let's stick to '?' for correctness unless 'v' is intentional.
+                 sb.append('?');
+                // If 'v' is indeed the expected behavior:
+                // sb.append('v');
+            } else {
+                sb.append(c);
+            }
+        }
+        return sb.toString();
+    }
+
+
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
+        // If the original entry name ended with '/', the PAX header name
+        // might too. This causes the TarArchiveEntry constructor to mark it
+        // as a directory, which leads to problems as PAX headers should
+        // have data and size != 0.
+        // Remove trailing '/' to prevent this.
+        while (name.endsWith("/")) {
+            name = name.substring(0, name.length() - 1);
+        }
+
         // TarEntry's constructor would think this is a directory
         // and not allow any data to be written
+        // (Comment moved down as the fix addresses this)
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
+        // Use StandardCharsets.UTF_8 for clarity and correctness
+        java.nio.charset.Charset utf8 = StandardCharsets.UTF_8;
+
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            // Ensure the length calculation uses byte length in UTF-8
+            byte[] lineBytes = line.getBytes(utf8);
+            int actualLength = lineBytes.length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
+                lineBytes = line.getBytes(utf8);
+                actualLength = lineBytes.length;
             }
             w.write(line);
         }
-        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+        byte[] data = w.toString().getBytes(utf8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
+}
\ No newline at end of file
