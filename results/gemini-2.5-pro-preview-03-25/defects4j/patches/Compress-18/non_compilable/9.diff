diff --git a/tmp/69632ca7-6489-4f55-9823-3b72a3b6ed8e_buggy.java b/tmp/c80d69bd-7be6-456e-b60f-fe966c5ffc84_fixed.java
index 08093b4..10b98c2 100644
--- a/tmp/69632ca7-6489-4f55-9823-3b72a3b6ed8e_buggy.java
+++ b/tmp/c80d69bd-7be6-456e-b60f-fe966c5ffc84_fixed.java
@@ -1,42 +1,107 @@
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.commons.compress.archivers.ArchiveEntry;
+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
+import org.apache.commons.compress.archivers.tar.TarConstants;
+import org.apache.commons.compress.utils.CharsetNames;
+
+// Dummy classes and variables needed to make the function compilable standalone
+class DummyTarArchiveOutputStream extends TarArchiveOutputStream {
+    public DummyTarArchiveOutputStream() { super(new ByteArrayOutputStream()); }
+    @Override
+    public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {}
+    @Override
+    public void closeArchiveEntry() throws IOException {}
+    @Override
+    public void write(byte[] b) throws IOException {}
+}
+
+class DummyHost {
+    TarArchiveOutputStream stream = new DummyTarArchiveOutputStream();
+
+    // Dummy implementation matching the original class's method signature
+    void putArchiveEntry(ArchiveEntry pex) throws IOException {
+        stream.putArchiveEntry(pex);
+    }
+
+    // Dummy implementation matching the original class's method signature
+    void write(byte[] data) throws IOException {
+        stream.write(data);
+    }
+
+     // Dummy implementation matching the original class's method signature
+    void closeArchiveEntry() throws IOException {
+         stream.closeArchiveEntry();
+    }
+
+    // Dummy implementation for stripTo7Bits for testing
+    private String stripTo7Bits(String name) {
+        final int length = name.length();
+        StringBuilder result = new StringBuilder(length);
+        for (int i = 0; i < length; ++i) {
+            char c = name.charAt(i);
+            if (c <= 127) { // Check if ASCII
+                result.append(c);
+            }
+            // If not ASCII, it's simply omitted.
+        }
+        return result.toString();
+    }
+
+
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
+        // If the original entry was a directory, stripTo7Bits may keep the trailing '/'
+        // This confuses TarArchiveEntry into thinking the PAX header is a directory,
+        // causing problems in putArchiveEntry/write where it expects zero size.
+        // Tar headers are always type 'x' (or 'g') and are regular files, so the
+        // name ending '/' is incorrect for them.
+        if (name.endsWith("/")) {
+            name = name.substring(0, name.length() - 1);
+        }
             // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+            // and not allow any data to be written <-- This comment is slightly inaccurate;
+            // the issue arises later when setting expected size based on isDirectory().
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
-            String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            // Ensure length refers to the UTF-8 byte count of the record string
+            String record = len + " " + key + "=" + value + "\n";
+            int actualLength = record.getBytes(CharsetNames.UTF_8).length;
+            // If the byte length differs from the calculated length, recalculate
             while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
                 len = actualLength;
-                line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
+                record = len + " " + key + "=" + value + "\n";
+                actualLength = record.getBytes(CharsetNames.UTF_8).length;
             }
-            w.write(line);
+            w.write(record);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
+} // End of DummyHost
\ No newline at end of file
