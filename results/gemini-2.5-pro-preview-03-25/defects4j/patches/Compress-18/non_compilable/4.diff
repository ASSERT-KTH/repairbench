diff --git a/tmp/5f4fdf03-662d-48d5-89ea-93841787fae4_buggy.java b/tmp/7cc94ed7-2461-453d-a116-aa3a44c3c968_fixed.java
index 08093b4..8a48033 100644
--- a/tmp/5f4fdf03-662d-48d5-89ea-93841787fae4_buggy.java
+++ b/tmp/7cc94ed7-2461-453d-a116-aa3a44c3c968_fixed.java
@@ -1,42 +1,79 @@
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.Map;
+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
+import org.apache.commons.compress.archivers.tar.TarConstants;
+import org.apache.commons.compress.utils.CharsetNames;
+
+// Assuming other necessary imports and the surrounding class structure exist.
+// The fix is applied only within the writePaxHeaders function.
+
+class TarArchiveOutputStream { // Keep original class name context if needed
+
+    // Dummy fields/methods assumed to exist for context
+    protected void putArchiveEntry(TarArchiveEntry entry) throws IOException { /* underlying implementation */ }
+    protected void write(byte[] b) throws IOException { /* underlying implementation */ }
+    protected void closeArchiveEntry() throws IOException { /* underlying implementation */ }
+    protected String stripTo7Bits(String name) { /* underlying implementation */ return name; } // Placeholder
+
+
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+        // PAX header names should correspond to the entries they describe,
+        // but the header entry itself is a file, not a directory.
+        // Ensure the generated PAX header name does not end with a slash,
+        // even if the original entry name did (was a directory).
+        String name = entryName;
+        if (name.endsWith("/")) {
+            // Remove trailing slash for directory entries to form the base name
+            name = name.substring(0, name.length() - 1);
+        }
+        // Sanitize the base name for the PAX header file name structure
+        name = "./PaxHeaders.X/" + stripTo7Bits(name);
+
+        // Truncate name if needed, similar to regular entries
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
+
+        // Create the PAX header entry as a file ('x' type)
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
+            // Calculate initial length guess for the PAX record line
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
+            // Get the actual byte length in UTF-8
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            // Adjust the length field (`len`) until it matches the actual byte length
             while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
+                // Recalculate the line with the updated length field
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
+            // Write the correctly formatted line to the StringWriter
             w.write(line);
         }
+        // Get the complete PAX header content as bytes
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+        // Set the size of the PAX header entry based on its content length
         pex.setSize(data.length);
+        // Write the PAX header entry's metadata (including size)
         putArchiveEntry(pex);
+        // Write the PAX header entry's content
         write(data);
+        // Close the PAX header entry
         closeArchiveEntry();
     }
+} // End of class context
\ No newline at end of file
