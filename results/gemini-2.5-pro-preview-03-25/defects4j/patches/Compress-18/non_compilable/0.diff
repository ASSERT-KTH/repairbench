diff --git a/tmp/eb91e14b-d32f-45e8-a7eb-c1811053ee93_buggy.java b/tmp/8a355ba3-31a3-4873-b4be-8f62265572c1_fixed.java
index 08093b4..ff17d3a 100644
--- a/tmp/eb91e14b-d32f-45e8-a7eb-c1811053ee93_buggy.java
+++ b/tmp/8a355ba3-31a3-4873-b4be-8f62265572c1_fixed.java
@@ -1,42 +1,133 @@
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.commons.compress.archivers.ArchiveEntry;
+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
+import org.apache.commons.compress.archivers.tar.TarConstants;
+import org.apache.commons.compress.utils.CharsetNames;
+
+// Wrapper class to provide context for the method
+class TarArchiveOutputStreamHelper {
+    // Dummy fields and methods to allow the function to compile
+    private TarArchiveOutputStream outputStream; // Assume this exists and is used by putArchiveEntry, write, closeArchiveEntry
+    private TarBuffer buffer; // Assume this exists if needed by other methods called internally
+    private String encoding = CharsetNames.UTF_8; // Assume default encoding
+    private long currBytes = 0;
+    private long currSize = 0;
+    private TarArchiveEntry currEntry = null;
+    private boolean finished = false;
+
+    // Dummy implementations of methods called by writePaxHeaders
+    void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
+        // Simulate setting current entry and size, considering the directory bug
+        TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
+        this.currEntry = entry;
+        if (entry.isDirectory()) { // This was the problematic part
+            this.currSize = 0;
+        } else {
+             this.currSize = entry.getSize();
+        }
+        this.currBytes = 0;
+        // Simulate writing header (not strictly needed for fixing the logic)
+        System.out.println("Simulating putArchiveEntry for: " + entry.getName() + " with size in header: " + entry.getSize() + ", setting currSize to: " + this.currSize);
+    }
+
+    void write(byte[] b) throws IOException {
+        write(b, 0, b.length);
+    }
+
+    void write(byte[] b, int off, int len) throws IOException {
+         // Simulate write check
+        System.out.println("Simulating write: trying to write " + len + " bytes. Current pos: " + this.currBytes + ", Expected size: " + this.currSize);
+        if (this.currBytes + len > this.currSize) {
+            throw new IOException("request to write '" + len
+                                  + "' bytes exceeds size in header of '"
+                                  + this.currSize + "' bytes for entry '"
+                                  + this.currEntry.getName() + "'");
+        }
+        this.currBytes += len;
+        System.out.println("Simulating write: success. New pos: " + this.currBytes);
+    }
+
+    void closeArchiveEntry() throws IOException {
+        // Simulate closing entry
+        System.out.println("Simulating closeArchiveEntry for: " + (currEntry != null ? currEntry.getName() : "null"));
+        if (currEntry != null && !currEntry.isDirectory() && currBytes < currSize) {
+             System.err.println("Warning: Entry closed before expected size was reached.");
+        }
+        this.currEntry = null;
+        this.currBytes = 0;
+        this.currSize = 0;
+    }
+
+    // Helper method needed by the function (dummy implementation)
+    private String stripTo7Bits(String name) {
+        // Simple replacement for the sake of the example
+        return name.replace("\u00f6", "v");
+    }
+
+
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+        // Truncate if name is too long
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
+        // Remove trailing slash if present, as PAX headers are not directories
+        // and TarArchiveEntry#isDirectory checks for trailing slashes.
+        // If the original entry was a directory, the PAX header name generated
+        // might end with a slash, incorrectly flagging it as a directory
+        // which leads to putArchiveEntry setting the expected size to 0.
+        if (name.endsWith("/")) {
+            name = name.substring(0, name.length() - 1);
+        }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            // Use UTF-8 for PAX headers as specified by POSIX.1-2001
+            byte[] lineBytes = line.getBytes(CharsetNames.UTF_8);
+            int actualLength = lineBytes.length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
+                // first pass so we'd need a second pass.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
+                lineBytes = line.getBytes(CharsetNames.UTF_8);
+                actualLength = lineBytes.length;
             }
             w.write(line);
         }
+        // Use UTF-8 for PAX headers as specified by POSIX.1-2001
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
-        putArchiveEntry(pex);
+        putArchiveEntry(pex); // This should now use the correct size (data.length) because pex.isDirectory() is false
         write(data);
         closeArchiveEntry();
     }
+    // Dummy TarBuffer class if needed
+    private static class TarBuffer {
+        void writeRecord(byte[] record) throws IOException {}
+    }
+}
\ No newline at end of file
