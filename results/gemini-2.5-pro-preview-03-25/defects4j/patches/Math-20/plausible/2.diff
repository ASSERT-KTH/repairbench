diff --git a/tmp/1d91f16e-a572-4793-8b0b-aefbbc5bc14a_buggy.java b/tmp/5caa06ad-f1cf-474a-9257-cf1f7b423c33_fixed.java
index 46799da..3d55907 100644
--- a/tmp/1d91f16e-a572-4793-8b0b-aefbbc5bc14a_buggy.java
+++ b/tmp/5caa06ad-f1cf-474a-9257-cf1f7b423c33_fixed.java
@@ -1,8 +1,29 @@
         /**
          * @param x Normalized objective variables.
          * @return the original objective variables, possibly repaired.
          */
         public double[] repairAndDecode(final double[] x) {
-            return
-                decode(x);
+            // Decode the normalized variables 'x' into the original problem space.
+            double[] repaired = decode(x);
+
+            // Check if boundaries have been set for this optimization problem.
+            // 'boundaries' is a field in CMAESOptimizer, storing [lower[], upper[]].
+            if (boundaries != null) {
+                // Get the lower and upper bounds.
+                final double[] lower = boundaries[0];
+                final double[] upper = boundaries[1];
+
+                // Iterate through each dimension of the decoded vector.
+                for (int i = 0; i < repaired.length; i++) {
+                    // If the decoded value is below the lower bound, clamp it to the lower bound.
+                    if (repaired[i] < lower[i]) {
+                        repaired[i] = lower[i];
+                    // If the decoded value is above the upper bound, clamp it to the upper bound.
+                    } else if (repaired[i] > upper[i]) {
+                        repaired[i] = upper[i];
+                    }
+                }
+            }
+            // Return the (potentially) repaired and decoded variables.
+            return repaired;
         }
\ No newline at end of file
