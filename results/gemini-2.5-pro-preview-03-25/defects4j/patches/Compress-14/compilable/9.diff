diff --git a/tmp/4c0a647f-245e-4be2-af96-216f4828aeb0_buggy.java b/tmp/01627805-cb84-424a-9c39-88eed4ed3657_fixed.java
index b81eeca..f884d4d 100644
--- a/tmp/4c0a647f-245e-4be2-af96-216f4828aeb0_buggy.java
+++ b/tmp/01627805-cb84-424a-9c39-88eed4ed3657_fixed.java
@@ -1,78 +1,100 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+     * and may contain additional trailing spaces or NULs.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
+     * after any leading spaces since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
-        int     end = offset + length;
         int     start = offset;
+        int     end = offset + length;
+        // Store the original end index for exception messages, and check if trimming occurred
+        final int originalEnd = end;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Scan for all NULs
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' '){
             start++;
-            } else {
-                break;
-            }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
+        // Trim trailing NULs and spaces.
+        // After this loop, 'end' points to the index *after* the last valid octal digit.
+        while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
             end--;
-        } else {
+        }
+
+        // If the field is now empty (all spaces/NULs or empty after trimming), return 0.
+        // This also handles fields like " \0" which weren't covered by allNUL check.
+        if (start == end) {
+             return 0L;
+        }
+
+        // Check if any trimming occurred. If not, the last character wasn't NUL/space.
+        // This enforces the requirement of at least one trailing NUL or space.
+        if (end == originalEnd) {
+             // Note: The original code used a helper 'exceptionMessage'.
+             // If that helper is available, it should be used here.
+             // Providing a more informative message directly:
              throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                    "Invalid octal entry. Must end with space or NUL. " +
+                    "Found byte " + buffer[originalEnd - 1] + " at offset " +
+                    (originalEnd - 1) + ". Buffer length: " + length + ", Starting offset: " + offset + ".");
         }
-        // May have additional NUL or space
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+
+
+        // WORKAROUND: Check for leading NUL after spaces (commons-compress 1.4)
+        // If the first non-space character is NUL, return 0
+        // This handles cases like " \0123 " which some tar implementations produce.
+        if (buffer[start] == 0) {
+            return 0L;
         }
 
+
+        // Parse octal digits from 'start' up to 'end - 1'
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+
             if (currentByte < '0' || currentByte > '7'){
+                // Note: The original code used a helper 'exceptionMessage'.
+                // If that helper is available, it should be used here.
                  throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        "Invalid octal digit '" + (char)currentByte + "' (code " + currentByte + ") at offset " +
+                        start + ". Buffer length: " + length + ", Starting offset: " + offset + ".");
             }
+            // CheckStyle:MagicNumber OFF
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
