diff --git a/tmp/7e859f8d-5440-4e14-ae34-83e2ea5b1473_buggy.java b/tmp/7b856a30-8fb3-497d-aec4-bbf7d1c9fd15_fixed.java
index b81eeca..cd23be7 100644
--- a/tmp/7e859f8d-5440-4e14-ae34-83e2ea5b1473_buggy.java
+++ b/tmp/7b856a30-8fb3-497d-aec4-bbf7d1c9fd15_fixed.java
@@ -1,78 +1,124 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
+     * *after skipping leading spaces* since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
+        // COMPRESS-171: Check for leading NUL and return 0 if found.
+        // This needs to be done after skipping spaces but before checking/stripping trailers.
+        if (start < end && buffer[start] == 0) {
+            return 0L;
+        }
+
         // Must have trailing NUL or space
         byte trailer;
+        // Ensure we are not checking beyond the valid part of the buffer if all were spaces
+        if (start >= end) {
+             // If we got here, the buffer was all spaces (or empty after offset).
+             // The loop below won't run, result is 0.
+             // However, the original code would have failed accessing buffer[end-1]
+             // or thrown in the trailer check if end > offset.
+             // Let's handle this cleanly: if start >= end, it means no digits, return 0.
+             // But first, we need to ensure the original ending byte was a valid terminator.
+             // The original code implicitly checked buffer[offset+length-1].
+             // If the field was just "  ", length=2. start=2, end=2. The check buffer[end-1]
+             // would access buffer[1] (' '). It would pass, end becomes 1.
+             // Second check: end=1 > start=2 is false. Loop start=2<end=1 is false. Returns 0.
+             // So the original logic implicitly handled "all spaces" correctly by returning 0.
+             // Let's stick to the original structure for trailer checks.
+        }
+
+        // Check and strip trailing NUL/space
+        // A NUL or Space must exist at the end.
         trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
-            end--;
+            end--; // Strip trailing NUL or space
         } else {
+            // If the last byte is not NUL or space, it's an error according to the original code.
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NUL or space
+
+        // May have additional NUL or space. Only check if needed and valid.
+        // This check should happen only if the first stripping occurred and end is still > start.
+        if (end > start) {
             trailer = buffer[end - 1];
             if (trailer == 0 || trailer == ' ') {
-            end--;
+                end--; // Strip second trailing NUL or space
             }
+        }
+
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
+            // Ensure the byte is an octal digit
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
+            // Note: This calculation might overflow for large octal numbers/lengths.
+            // Standard tar fields (size, mtime, uid, gid) are typically <= 12 bytes.
+            // A 12-byte octal number can represent up to 8^11 * 7 which fits in a long.
+            // 8^11 = 8,589,934,592. Max value ~ 60 * 10^9. Long.MAX_VALUE is ~9 * 10^18.
+            // If length were much larger, overflow checks might be needed.
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist from the original class context
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {
+        // Provide a meaningful error message, similar to what the original code likely did
+        String M_NULL = Character.toString((char) 0); // For NUL character representation
+        String s = new String(buffer, offset, length); // Use platform default charset; maybe risky? UTF-8 better? Original likely used default.
+        s = s.replace(M_NULL, "{NUL}"); // Make NULs visible
+        return "Invalid byte " + currentByte + " at offset " + (current - offset)
+             + " in '" + s + "' len " + length;
+    }
\ No newline at end of file
