diff --git a/tmp/7590eb23-2842-471d-8b3d-c61498e3aebe_buggy.java b/tmp/ae8159c1-a0da-41da-ad4b-c7763cb4b6a8_fixed.java
index b81eeca..de0b254 100644
--- a/tmp/7590eb23-2842-471d-8b3d-c61498e3aebe_buggy.java
+++ b/tmp/ae8159c1-a0da-41da-ad4b-c7763cb4b6a8_fixed.java
@@ -1,78 +1,103 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
-        int     start = offset;
+        int     current = offset; // Use 'current' as the parsing cursor
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Check for all NULs first (optimization and handling of empty fields)
         boolean allNUL = true;
-        for (int i = start; i < end; i++){
+        for (int i = current; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
-                break;
+        while (current < end && buffer[current] == ' '){
+            current++;
         }
+
+        // Check for leading NUL directly after spaces (commons-compress 1.4 workaround)
+        // This check must come *before* the trailer removal logic.
+        // If the first non-space character is NUL, return 0.
+        if (current < end && buffer[current] == 0) {
+             return 0L;
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        // Trim trailing NUL or space.
+        // The buffer must contain a trailing space or NUL.
+        byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
-            end--;
+            end--; // Consume one trailer
         } else {
+            // No required trailer found. Throw exception using the original buffer info.
+            // Use a helper or inline the message creation logic if exceptionMessage is not available/desired.
+            // For now, assuming a helper method `exceptionMessage` exists as in the original snippet context.
              throw new IllegalArgumentException(
                      exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NUL or space
+
+        // It may contain an additional trailing space or NUL.
+        // Check only if there are bytes remaining between current and the new end.
+        // This prevents IndexOutOfBoundsException for short fields like "1 ".
+        if (current < end) {
              trailer = buffer[end - 1];
              if (trailer == 0 || trailer == ' ') {
-            end--;
+                 end--; // Consume second trailer
              }
+        }
+        // At this point, 'current' points to the first potential digit (after spaces),
+        // and 'end' points past the last potential digit (before trailers).
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
+        // Parse digits
+        for ( ;current < end; current++) {
+            final byte currentByte = buffer[current];
             // CheckStyle:MagicNumber OFF
+            // Check if the current byte is an octal digit.
             if (currentByte < '0' || currentByte > '7'){
+                 // If not, it's an error (could be NUL inside the number, or other non-octal char).
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, current, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            // Convert ASCII octal digit to numeric value and add to result.
+            result = (result << 3) + (currentByte - '0');
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Dummy helper method to allow compilation if the original context is missing.
+    // In the actual Commons Compress code, a real helper method exists.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+        // This should ideally provide more context from the buffer like the original did.
+        return "Invalid byte " + currentByte + " at index " + idx + " in buffer segment (offset: " + offset + ", length: " + length + ")";
+    }
\ No newline at end of file
