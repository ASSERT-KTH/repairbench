diff --git a/tmp/5a7edae0-1140-473a-9083-2ae8310baf37_buggy.java b/tmp/ccea7d28-cf19-4c9e-b749-f976daf113d4_fixed.java
index b81eeca..d58816b 100644
--- a/tmp/5a7edae0-1140-473a-9083-2ae8310baf37_buggy.java
+++ b/tmp/ccea7d28-cf19-4c9e-b749-f976daf113d4_fixed.java
@@ -1,78 +1,132 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
-        int     end = offset + length;
+        // Use offset+length for boundary checks, calculations relative to buffer start
+        final int limit = offset + length;
         int     start = offset;
+        // Effective end of octal digits, reduced by trailers
+        int     effectiveEnd = limit;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Check for all NULs first - special case returns 0.
         boolean allNUL = true;
-        for (int i = start; i < end; i++){
+        // Use limit for the boundary
+        for (int i = start; i < limit; i++){
+            // Check buffer bounds to prevent IndexOutOfBoundsException
+            if (i >= buffer.length) {
+                 throw new IllegalArgumentException("Attempt to read past end of buffer: offset " + offset
+                     + ", length " + length + ", buffer size " + buffer.length);
+            }
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        // Use limit here, ensure start stays within buffer bounds implicitly via loop condition
+        while (start < limit && buffer[start] == ' '){
             start++;
-            } else {
-                break;
         }
+
+        // Check for leading NUL after spaces - special case returns 0 (commons-compress 1.4 behavior)
+        // This needs to be after skipping spaces but before trailer checks.
+        // (If buffer is all spaces, start == limit, this check is skipped, returns 0 later)
+        // Ensure start is still a valid index before checking buffer[start]
+        if (start < limit && buffer[start] == 0) {
+             return 0L;
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        // Check mandatory trailer: last byte must be NUL or space.
+        // Ensure index limit - 1 is valid relative to buffer bounds and offset.
+        if (limit - 1 < offset || limit - 1 >= buffer.length) {
+             throw new IllegalArgumentException(
+                     "Invalid length/offset for mandatory trailer check: length=" + length + ", offset=" + offset + ", buffer size=" + buffer.length);
+        }
+        final byte trailer1 = buffer[limit - 1];
+        if (trailer1 == 0 || trailer1 == ' '){
+            effectiveEnd--; // Reduce effective end index by one, excluding the trailer
         } else {
+            // As per documentation "The buffer must contain a trailing space or NUL"
+            // if the last byte is not one of these, it's an error.
              throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                     exceptionMessage(buffer, offset, length, limit - 1, trailer1));
+        }
+
+        // Check optional second trailer: byte before mandatory trailer (space/NUL)
+        // The index to check is effectiveEnd - 1 (original index limit - 2).
+        // Only check if there's still data potentially before this second trailer
+        // i.e., effectiveEnd - 1 is a valid index and it's at or after start.
+        // Also ensure effectiveEnd - 1 is within buffer bounds.
+        // Note: effectiveEnd was already decremented if trailer1 was valid.
+        if (effectiveEnd - 1 >= start && effectiveEnd - 1 < buffer.length) {
+             final byte trailer2 = buffer[effectiveEnd - 1];
+             if (trailer2 == 0 || trailer2 == ' ') {
+                 effectiveEnd--; // Reduce effective end index again
              }
-        // May have additional NUL or space
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
         }
+        // If start == effectiveEnd now, it implies the portion between leading spaces
+        // and trailer(s) was empty. Loop won't run, returns 0.
 
-        for ( ;start < end; start++) {
+        // Parse octal digits between start and the calculated effectiveEnd
+        for ( ;start < effectiveEnd; start++) {
+            // Ensure start index remains within buffer bounds
+             if (start >= buffer.length) {
+                 throw new IllegalArgumentException("Attempt to parse past end of buffer: offset " + offset
+                     + ", length " + length + ", buffer size " + buffer.length + ", current index " + start);
+            }
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // Any non-octal digit (including NUL, handled above for leading NUL) in this section is an error.
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method needed for the exception message generation.
+    // Assuming it exists elsewhere in the original class (e.g., TarUtils).
+    // Provide a minimal stub if needed for compilation context, or assume it's available.
+    private static String exceptionMessage(byte[] buffer, final int offset,
+            final int length, int error_offset, byte currentByte) {
+         // In a real environment, this would call the existing TarUtils.exceptionMessage
+         // For repair purposes, we focus on the parseOctal logic.
+         // Minimal placeholder:
+         String dataSnippet = "[buffer data unavailable]"; // Or implement fully if needed
+         try {
+              dataSnippet = new String(buffer, offset, Math.min(length, buffer.length - offset), "ISO-8859-1").replaceAll("\u0000", "{NUL}");
+         } catch (Exception e) { /* ignore */ }
+
+        return "Invalid byte " + currentByte + " at offset " + (error_offset - offset) + " in '" + dataSnippet + "' len " + length;
+    }
\ No newline at end of file
