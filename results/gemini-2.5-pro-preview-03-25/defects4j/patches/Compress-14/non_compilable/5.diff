diff --git a/tmp/16e674dd-832f-41ef-ac0c-af303844aa8f_buggy.java b/tmp/b4923248-110a-44f6-8118-c9e569500f52_fixed.java
index b81eeca..5ebc085 100644
--- a/tmp/16e674dd-832f-41ef-ac0c-af303844aa8f_buggy.java
+++ b/tmp/b4923248-110a-44f6-8118-c9e569500f52_fixed.java
@@ -1,78 +1,122 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
-        int     end = offset + length;
+        int     originalEnd = offset + length; // Use a variable for the original end index (exclusive)
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Scan for all NULs
         boolean allNUL = true;
-        for (int i = start; i < end; i++){
+        for (int i = start; i < originalEnd; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
+        // No need to check length here since length >= 2 is enforced
+        while (start < originalEnd){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
+        // COMPRESS-171: Check for leading NUL after skipping spaces.
+        // This indicates an empty field or the start of NUL padding.
+        // Per Javadoc, treat this as 0. Handles cases like " NUL..." or "NUL...".
+        // Ensure we don't parse if start reached the end (e.g., all spaces).
+        if (start < originalEnd && buffer[start] == 0) {
+            return 0L;
+        }
+
+        // Find the end of the octal digits by working backwards from the original end,
+        // skipping trailing NULs and spaces. This identifies the mandatory trailer
+        // and any optional ones.
+        int end = originalEnd;
+        while (end > start) {
+            final byte currentByte = buffer[end - 1];
+            if (currentByte == 0 || currentByte == ' ') {
                 end--;
             } else {
+                break; // Found the last character that is not NUL or space
+            }
+        }
+
+        // If, after skipping leading spaces and trailing NUL/space,
+        // start equals end, it means the field contained only spaces and/or NULs.
+        // This case should have been mostly handled by the allNUL check or the
+        // leading NUL check, but this catches remaining scenarios like "  \0\0".
+        if (end == start) {
+            return 0L;
+        }
+
+        // Check if the sequence ended with anything other than NUL or space.
+        // This implies the mandatory trailing NUL/space is missing.
+        // 'end' now points right after the last potential octal digit.
+        // If 'end' is still the original end, no NUL/space trailer was found.
+        if (end == originalEnd) {
              throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        // May have additional NUL or space
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+                     exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
         }
 
+        // Parse the octal digits found between start and the adjusted end.
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist, providing context for exceptions.
+    // Implementation is not part of the fix but needed for compilation.
+    private static String exceptionMessage(byte[] buffer, final int offset,
+                                           final int length, int currentBlkIdx, byte currentByte) {
+        String fieldContent;
+        try {
+            // Attempt to decode assuming ASCII/ISO-8859-1 common for TAR
+            fieldContent = new String(buffer, offset, length, "ISO-8859-1");
+        } catch (java.io.UnsupportedEncodingException e) {
+            // Fallback to platform default if necessary
+            fieldContent = new String(buffer, offset, length);
+        }
+        // Replace NUL characters for clearer display
+        fieldContent = fieldContent.replaceAll("\0", "{NUL}");
+        return "Invalid byte " + String.format("%#04x", currentByte) + " at offset " + (currentBlkIdx - offset)
+                + " in '" + fieldContent + "' len " + length;
+    }
\ No newline at end of file
