diff --git a/tmp/5227ee64-4721-4f42-838a-0951cf95cddb_buggy.java b/tmp/20bbc7a6-cdea-4254-b6a3-1a63760e095e_fixed.java
index b81eeca..ecaa43c 100644
--- a/tmp/5227ee64-4721-4f42-838a-0951cf95cddb_buggy.java
+++ b/tmp/20bbc7a6-cdea-4254-b6a3-1a63760e095e_fixed.java
@@ -1,78 +1,126 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Must have trailing NUL or space
         byte trailer;
+        // Correctness check: end must be greater than start to access end-1
+        if (start >= end) {
+             // If we skipped all chars or length was < 2 originally adjusted
+             // This path might occur if input is " " with length 2. start becomes offset+1, end offset+2.
+             // First trailer check reads buffer[offset+1] (' '). end becomes offset+1.
+             // Second trailer check reads buffer[offset] (' '). Needs end-1 > start check.
+             // However, if the loop condition start < end handles this, we might be ok.
+             // Let's proceed assuming valid inputs reach here with end > start.
+             // If end == start after skipping spaces, the loop below won't run, returns 0. Fine.
+             // If end == start + 1, the trailer checks might index buffer[start].
+             if (start == end) { // If all were spaces
+                 // This case implies input like "  " or just spaces,
+                 // allNUL was false, spaces skipped, start == end. Loop won't run.
+                 // It might need a check here or rely on trailer checks + loop condition.
+                 // Let's trust the original structure handled this and focus on the loop bug.
+             }
+             // Ensure we have a valid index for trailer check
+             if (end <= start) {
+                 // This situation implies an issue possibly before this point,
+                 // or an input like " ". Let's assume the structure intends
+                 // to throw if no valid trailer is found eventually.
+                 // The first trailer check might throw if end-1 is invalid, but length >= 2 guards this.
+                 // If end-1 is valid:
+                 trailer = buffer[end-1];
+                 // If it's NUL/space, end--. Now end might equal start.
+             }
+        }
+
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
+
         // May have additional NUL or space
+        // Add check to prevent end becoming <= start, which causes issues in loop/indexing
+        if (end - 1 >= start) { // Ensure index end-1 is valid and distinct from start after previous end--
             trailer = buffer[end-1];
             if (trailer == 0 || trailer == ' '){
                 end--;
             }
+        }
+
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
+
             // CheckStyle:MagicNumber OFF
+            // Allow NUL (0) or space (' ') to terminate the octal number
+            // This handles cases like "123\0" or "123 " encountered in some TARs
+            if (currentByte == 0 || currentByte == ' ') {
+                 break; // Stop parsing at the first terminator
+            }
+
+            // Check if the byte is a valid octal digit
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist for the exception message
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {
+        return "Invalid byte " + currentByte + " at offset " + (current - offset) + " in '"
+               + new String(buffer, offset, length).replaceAll("\0", "{NUL}") // Visualize NULs
+               + "' len " + length;
+    }
\ No newline at end of file
