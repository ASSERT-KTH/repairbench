diff --git a/tmp/8d681a89-80b6-43e3-bd87-0fd370c8f918_buggy.java b/tmp/0086ab04-b239-4859-ab42-4f8b25f83607_fixed.java
index b81eeca..cb1545d 100644
--- a/tmp/8d681a89-80b6-43e3-bd87-0fd370c8f918_buggy.java
+++ b/tmp/0086ab04-b239-4859-ab42-4f8b25f83607_fixed.java
@@ -1,78 +1,105 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
+        // Handle leading NUL workaround AFTER skipping spaces
+        // If the first non-space character is NUL, return 0.
+        // This addresses the issue identified in COMPRESS-171 and COMPRESS-199.
+        if (start < end && buffer[start] == 0) {
+            return 0L;
+        }
+
         // Must have trailing NUL or space
         byte trailer;
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
+
         // May have additional NUL or space
+        // This check needs to happen against the potentially adjusted end index.
+        // It should also only happen if 'end' is still greater than 'start'
+        // However, the original code performed this check unconditionally.
+        // To minimize changes and stick to the apparent original logic (which handles
+        // cases like [" ", " "] correctly by returning 0), we keep it unconditional.
+        // If end <= start here, accessing buffer[end-1] might seem problematic,
+        // but in those cases (like all spaces), the final loop condition start < end
+        // will prevent parsing anyway, and 0 will be returned.
+        if (end > start) { // Check only needed if there might be content left
              trailer = buffer[end-1];
              if (trailer == 0 || trailer == ' '){
                  end--;
              }
+        }
+
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method to generate exception message (assumed to exist in the original class)
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {
+        // This is a plausible implementation for debugging purposes.
+        // The actual implementation in the original codebase might differ.
+        String val = new String(buffer, offset, length).replaceAll("\u0000", "{NUL}");
+        return "Invalid byte " + currentByte + " at offset " + current + " in octal entry '" + val + "'";
+    }
\ No newline at end of file
