diff --git a/tmp/e92c6eea-0174-4464-996d-a67159e35909_buggy.java b/tmp/d0eb1c1b-0024-4a60-a780-868e714437a5_fixed.java
index b81eeca..01b40f2 100644
--- a/tmp/e92c6eea-0174-4464-996d-a67159e35909_buggy.java
+++ b/tmp/d0eb1c1b-0024-4a60-a780-868e714437a5_fixed.java
@@ -1,78 +1,121 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Check for all NULs first (means empty field)
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
+        // CheckStyle:MagicNumber OFF
+        // Work-around for some tar implementations that insert a leading NUL
+        // (and consequently, Poynting Tar implementation that runs on an old C library).
+        // This needs to be detected after skipping leading spaces.
+        if (start < end && buffer[start] == 0) {
+            return 0L;
+        }
+        // CheckStyle:MagicNumber ON
+
         // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        // Get the original last byte traitÃ©s before potential end-- modifications
+        final byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
-            end--;
+            end--; // Decrement end to exclude the trailer
         } else {
+            // If the last byte is not a NUL or space, the format is invalid
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NUL or space
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+
+        // May have additional NUL or space character. Should only be checked
+        // if the buffer has not been exhausted by trimming the first NUL/space.
+        if (end > start) { // Ensure start < end before accessing buffer[end - 1]
+            final byte secondTrailer = buffer[end - 1];
+            if (secondTrailer == 0 || secondTrailer == ' ') {
+                end--; // Decrement end again
+            }
         }
 
+        // Trim additional spaces from the start of the octal digits.
+        // Although the initial space skip handled leading spaces for the field,
+        // there might be spaces between the skipped leading spaces and the actual number,
+        // or between the number and the trailing NUL/space.
+        // The previous loop ensures the last char is not NUL/space, but middle chars might be spaces.
+        // Example: " 123 NUL" -> start=1, end=4 -> parse ' ', '1', '2', '3' -> fail
+        // Example: "123  NUL" -> start=0, end=5 -> parse '1','2','3',' ' -> fail
+        // The original code did not explicitly handle spaces *within* the number part,
+        // relying on the digit check to fail them. Let's keep that behavior.
+        // The parsing loop below will throw if it encounters a space.
+
+        // Parse the octal digits
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // Includes check for NUL byte within the number part
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method to format exception message (implementation assumed to exist elsewhere)
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+        String fieldContent;
+        try {
+            // Attempt to decode assuming ASCII or compatible
+            fieldContent = new String(buffer, offset, length, java.nio.charset.StandardCharsets.US_ASCII);
+        } catch(Exception e) {
+            fieldContent = "[cannot decode byte array]";
+        }
+        // Make NUL characters visible
+        fieldContent = fieldContent.replace("\0", "{NUL}");
+        return "Invalid byte " + currentByte + " at offset " + (idx - offset)
+                + " in '" + fieldContent + "' len " + length;
+    }
\ No newline at end of file
