diff --git a/tmp/1ec3ec2c-534a-4ee3-964a-c76b77c5f1b8_buggy.java b/tmp/35fd34a8-460a-4a2e-aa99-109757b3887c_fixed.java
index b81eeca..8cb5dd2 100644
--- a/tmp/1ec3ec2c-534a-4ee3-964a-c76b77c5f1b8_buggy.java
+++ b/tmp/35fd34a8-460a-4a2e-aa99-109757b3887c_fixed.java
@@ -1,78 +1,116 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
+     * (potentially after {@code start} has been advanced past leading spaces)
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Scan for all-NULs first
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        // CheckStyle:MagicNumber OFF
+
+        // Trim trailing NUL or space. The buffer must contain one.
+        byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
             end--;
         } else {
+            // If the trailing character is not NUL or space, it's potentially invalid.
+            // However, tar archives can contain fields terminated only by digits
+            // if the field is full (e.g., "777777").
+            // The original code threw an exception here, but this might be too strict
+            // for some valid tar formats if the last char is a digit.
+            // Let's relax this slightly: if it's not NUL/space, proceed,
+            // the parsing loop will validate digits. If it's an invalid char,
+            // the loop will throw. If it's a digit, it will be parsed.
+            // This matches behavior observed in some other tar parsers.
+            // --> NO, the TAR specification requires a NUL or space terminator.
+            // Stick to the original check for correctness according to the spec.
              throw new IllegalArgumentException(
                      exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NUL or space
+
+        // Trim second trailing NUL or space. The buffer may contain one.
+        // Ensure we don't trim past the start offset
+        // Check that end is still greater than start before accessing buffer[end-1]
+        if (end > start) {
             trailer = buffer[end - 1];
             if (trailer == 0 || trailer == ' ') {
                 end--;
             }
+        }
 
+        // After trimming spaces and trailers, handle the NUL workaround.
+        // This checks if the first significant character is a NUL.
+        // It also handles cases where trimming resulted in an empty range (start >= end).
+        if (start >= end) {
+            return 0L;
+        }
+        // Apply the leading NUL workaround: If the first character after spaces
+        // is a NUL, return 0.
+        if (buffer[start] == 0) {
+            return 0L;
+        }
+
+        // Parse octal digits from start to end
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
+        }
         // CheckStyle:MagicNumber ON
-        }
 
         return result;
     }
+
+    // Helper function to create exception messages (implementation assumed present)
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byteسبب) {
+        String field = new String(buffer, offset, length).replace("\0", "{NUL}");
+        return "Invalid byte " + سبب + " at index " + (idx - offset) + " in '" + field + "' octal entry.";
+    }
\ No newline at end of file
