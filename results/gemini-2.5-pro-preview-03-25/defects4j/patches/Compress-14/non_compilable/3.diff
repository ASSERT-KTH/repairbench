diff --git a/tmp/d07fbf96-a889-4e37-8a53-1ffef68836f0_buggy.java b/tmp/4936b708-96ff-40ca-b846-eb18e4aef32c_fixed.java
index b81eeca..bd75beb 100644
--- a/tmp/d07fbf96-a889-4e37-8a53-1ffef68836f0_buggy.java
+++ b/tmp/4936b708-96ff-40ca-b846-eb18e4aef32c_fixed.java
@@ -1,78 +1,122 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Check for all NULs first, as per documentation.
+        // This handles cases where the field is entirely NULs.
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
+        // CheckStyle:MagicNumber OFF
+        // Handle cases like GnuTar putting NULs in octal fields (COMPRESS-199)
+        // Returns 0 if the first non-space char is NUL.
+        // This implements the documented workaround for leading NULs.
+        if (start < end && buffer[start] == 0) {
+             return 0L;
+        }
+        // CheckStyle:MagicNumber ON
+
+        // Must have trailing NUL or space.
         byte trailer;
-        trailer = buffer[end-1];
+        // Check the last byte: Must be NUL or space.
+        // Ensure we do not check invalid index if start >= end after skipping spaces
+        // Although length >= 2 implies end > offset initially, start could reach end.
+        // If start == end here (all spaces), accessing buffer[end-1] is safe
+        // because end = offset + length, and length >= 2, so end-1 >= offset+1.
+        // The original code implicitly handled the "all spaces" case by letting the parse loop
+        // become empty and returning 0. Let's preserve that, but ensure trailer check is valid.
+        if (start >= end) {
+             // Should not happen if length >= 2 and not all NULs, unless all spaces?
+             // If all spaces, start == end. Let the logic proceed.
+        }
+
+        trailer = buffer[end - 1]; // Check last byte
         if (trailer == 0 || trailer == ' ') {
-            end--;
+            end--; // Found mandatory trailer; trim it.
         } else {
+            // The mandatory trailer was missing.
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
-        // May have additional NUL or space
-        trailer = buffer[end-1];
+
+        // May have *additional* NUL or space. Check the new last byte.
+        // Add check 'end > start' to prevent reading buffer[start - 1] if only one char left
+        // after trimming the first trailer (e.g., "1\0" length 2 -> start=0, end=1 after trim).
+        if (end > start) {
+            trailer = buffer[end - 1]; // Check byte before mandatory trailer
             if (trailer == 0 || trailer == ' ') {
-            end--;
+                end--; // Found optional second trailer; trim it.
+            }
         }
 
+        // Parse octal digits from 'start' up to (but not including) the adjusted 'end'.
         for (; start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+            if (currentByte < '0' || currentByte > '7') { // Validate octal digit
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            result = (result << 3) + (currentByte - '0'); // standard base-8 conversion (result = result * 8 + digit)
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed present (needed for the exception message)
+    // It's not part of the fix, but required for compilation and context.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte bayte) {
+        String content;
+        try {
+            // Attempt to decode assuming ASCII or compatible, replace NUL for visibility
+            content = new String(buffer, offset, length, "ASCII").replaceAll("\u0000", "{NUL}");
+        } catch (java.io.UnsupportedEncodingException e) {
+            // Fallback if ASCII is somehow not supported
+            content = Arrays.toString(Arrays.copyOfRange(buffer, offset, offset + length));
+        }
+        return "Invalid byte " + bayte + " at offset " + (idx - offset) + " in '" + content + "' len=" + length;
+    }
\ No newline at end of file
