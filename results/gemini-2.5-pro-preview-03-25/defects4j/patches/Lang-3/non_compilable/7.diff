diff --git a/tmp/673ac57e-ac04-4561-b039-2e16f71d5d68_buggy.java b/tmp/49489cc2-a926-40ca-bafd-bdc0f43bc39d_fixed.java
index b09cd82..3d1b089 100644
--- a/tmp/673ac57e-ac04-4561-b039-2e16f71d5d68_buggy.java
+++ b/tmp/49489cc2-a926-40ca-bafd-bdc0f43bc39d_fixed.java
@@ -1,192 +1,360 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Assume this class is org.apache.commons.lang3.math.NumberUtils
+// Assume necessary helper methods (createFloat, createDouble, etc.) and StringUtils are available.
+public class NumberUtilsFixed {
+
+    // Place dummy helper methods here for context if needed, or assume they exist in the actual NumberUtils class.
+    // e.g.
+    private static Float createFloat(String str) { return Float.valueOf(str); }
+    private static Double createDouble(String str) { return Double.valueOf(str); }
+    private static Integer createInteger(String str) { return Integer.decode(str); } // Use decode for hex/octal
+    private static Long createLong(String str) { return Long.decode(str); } // Use decode for hex/octal
+    private static BigInteger createBigInteger(String str) {
+        int radix = 10;
+        int pfxLen = 0;
+        boolean isNegative = str.startsWith("-");
+        if (isNegative) pfxLen++;
+
+        if (str.substring(pfxLen).startsWith("0x") || str.substring(pfxLen).startsWith("0X")) {
+            radix = 16; pfxLen += 2;
+        } else if (str.substring(pfxLen).startsWith("#")) {
+            radix = 16; pfxLen += 1;
+        } else if (str.substring(pfxLen).startsWith("0") && str.length() > pfxLen + 1) {
+            // Check next char isn't '.' for octal interpretation
+            char nextChar = str.charAt(pfxLen + 1);
+            if (nextChar != '.' && Character.isDigit(nextChar)) {
+                radix = 8; // No prefix length increase needed for octal '0'
+            }
+        }
+        // Use BigInteger constructor that handles radix and sign separately for robustness
+        BigInteger val = new BigInteger(str.substring(pfxLen), radix);
+        return isNegative ? val.negate() : val;
+    }
+    private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+    private static boolean isDigits(String str) {
+        if (org.apache.commons.lang3.StringUtils.isEmpty(str)) return false;
+        for (char c : str.toCharArray()) { if (!Character.isDigit(c)) return false; }
+        return true;
+    }
+    private static boolean isAllZeros(String str) {
+        if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
+            return true; // Treat null/empty mantissa/exponent as zeros
+        }
+        for (int i = 0; i < str.length(); i++) {
+            char c = str.charAt(i);
+            // Allow sign character at the start
+            if (i == 0 && (c == '-' || c == '+')) {
+                if (str.length() == 1) return false; // String contains only sign
+                continue;
+            }
+            if (c != '0') {
+                return false;
+            }
+        }
+        return true; // Found only zeros (and potentially a sign)
+    }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
+     * <code>BigDecimal</code>, returning the smallest type that can represent
+     * the value accurately (this checks for precision loss in addition to magnitude).
+     * </p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * be Integer, Long or BigInteger as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
-        if (StringUtils.isBlank(str)) {
+        // lang-3 requirement below requires StringUtils dependency
+        if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+             // Hex parsing needs careful handling of length limits for Integer/Long
+             // Let createX methods handle range checks. Rely on length as a rough guide.
+            char firstSigDigit = 0; // Check first significant digit after prefix and sign
+            int hexDigits = 0;
+            boolean nonZeroDigitFound = false;
+             for(int i = pfxLen; i < str.length(); i++) {
+                 char c = str.charAt(i);
+                 if (Character.digit(c, 16) == -1) { // Make sure rest is hex digits
+                     throw new NumberFormatException(str + " is not a valid hexadecimal number.");
+                 }
+                 if (c != '0' && !nonZeroDigitFound) {
+                     firstSigDigit = c;
+                     nonZeroDigitFound = true;
+                 }
+                 if (nonZeroDigitFound) {
+                     hexDigits++;
+                 }
+             }
+             // If only zeros were found after prefix (e.g., "0x000"), hexDigits is 0. Treat as 1 digit ('0').
+             if (!nonZeroDigitFound && str.length() > pfxLen) {
+                 hexDigits = 1; // Represents the number 0
+                 firstSigDigit = '0';
+             }
+
+
+            if (hexDigits > 16) {
                 return createBigInteger(str);
             }
-            if (hexDigits > 8) { // too many for an int
+            if (hexDigits > 8) {
+                try { // Try Long first
                     return createLong(str);
+                } catch (final NumberFormatException e) { // NOPMD If Long fails (e.g. exactly Long.MAX_VALUE + 1 as hex)
+                    return createBigInteger(str); // Fallback to BigInteger
                 }
+            }
+            // Can be Integer, Long, or BigInteger
+            try {
                 return createInteger(str);
+            } catch (final NumberFormatException e) { // NOPMD
+                 // Fallback below
             }
+             try {
+                 return createLong(str);
+             } catch (final NumberFormatException e) { // NOPMD
+                  // Fallback below
+             }
+            // Safest fallback for hex is BigInteger if others fail range checks
+            return createBigInteger(str);
+        }
+
+        // Non-hex handling
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        int numDecimals = 0; // Check required precision (LANG-693)
+        // Validate exponent presence and format
+        if (expPos > -1) {
+             if (expPos > str.length()) { // Prevent IOOBE
+                 throw new NumberFormatException(str + " is not a valid number.");
+             }
+             if (expPos + 1 >= str.length()) { // Exponent 'e'/'E' cannot be the last character
+                 throw new NumberFormatException(str + " is not a valid number.");
+             }
+             char charAfterExp = str.charAt(expPos + 1);
+              // Character after 'e'/'E' must be sign or digit, unless it's the type suffix at the very end
+             if (charAfterExp != '+' && charAfterExp != '-' && !Character.isDigit(charAfterExp)) {
+                  // If it's a letter, it must be the type suffix and only appear at the end
+                  if (!Character.isLetter(charAfterExp) || expPos != str.length() - 2) {
+                       throw new NumberFormatException(str + " is not a valid number.");
+                   }
+             }
+        }
+
+        // Parse mantissa, decimal, and exponent parts
         if (decPos > -1) { // there is a decimal point
-
             if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+                if (expPos < decPos || expPos >= str.length()) { // Check order and bounds
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+            } else { // No exponent
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+        } else { // No decimal point
+            if (expPos > -1) { // There is an exponent
+                if (expPos >= str.length()) { // Already checked above
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+            } else { // No decimal, no exponent
+                mant = str; // Complete string is mantissa (potentially with suffix)
             }
-            dec = null;
+            dec = null; // No decimal part found
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
+
+        // Check for type suffix L,l, F,f, D,d
+        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {
+             // Extract exponent string correctly, excluding the suffix
              if (expPos > -1 && expPos < str.length() - 1) {
                  exp = str.substring(expPos + 1, str.length() - 1);
              } else {
                  exp = null;
              }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
+
+            final String numeric = str.substring(0, str.length() - 1); // String without suffix
+            // Adjust mantissa if it inadvertently included the suffix (no dec, no exp case)
+            if (decPos == -1 && expPos == -1) {
+                mant = numeric;
+            }
+             // Determine if the numeric part was effectively zero
             final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Valid only if the original string structure (before suffix removal) looked like an integer
+                    if (dec == null && exp == null &&
+                        (numeric.isEmpty() || // Allow "-L"? No, blank handled earlier. isDigits handles empty check.
+                         numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                            // Fallback for values outside Long range
                             return createBigInteger(numeric);
-
                         }
+                    }
+                    // Invalid format like "1.2L" or "1e5L"
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        final Float f = createFloat(numeric);
+                        // Check magnitude only for suffixed types (infinity or underflow to zero)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
+                             return f; // Return Float as requested if magnitude is okay
                         }
-
+                        // Fall through if check fails, try larger types per Javadoc
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                         // Fall through if parsing 'numeric' as Float fails
                     }
                     // $FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                      try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
+                         final Double d = createDouble(numeric);
+                         // Check magnitude only for suffixed types
+                         if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                             return d; // Return Double as requested (or from F fallback) if magnitude okay
                          }
+                         // Fall through if check fails
                      } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                          // Fall through if parsing 'numeric' as Double fails
                      }
+                    // $FALL-THROUGH$
+                 default : // Handles fall-through from F/f and D/d, and invalid suffixes
                      try {
+                         // Try BigDecimal on the 'numeric' string as last resort for F/D or if suffix was invalid
                          return createBigDecimal(numeric);
                      } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
+                         // Invalid suffix or numeric part not parseable by BigDecimal
                          throw new NumberFormatException(str + " is not a valid number.");
+                     }
+            }
+        } // End of suffix handling
 
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
+        // No suffix case:
+        // Extract exponent string using full string length
+        if (expPos > -1 && expPos < str.length()) {
+            exp = str.substring(expPos + 1);
         } else {
             exp = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+
+        if (dec == null && exp == null) { // No decimal, no exponent -> Integer types
+            // Handle octal prefix '0' (but not '0.' or just '0')
+            if (str.charAt(0) == '0' && str.length() > 1) {
+                 char secondChar = str.charAt(1);
+                 // Check if it looks like octal (digit 0-7)
+                 if (Character.digit(secondChar, 8) != -1) {
+                      try {
+                          // Use Long.decode for octal, check range for Integer
+                          Long val = Long.decode(str);
+                          if (val.longValue() >= Integer.MIN_VALUE && val.longValue() <= Integer.MAX_VALUE) {
+                              return Integer.valueOf(val.intValue());
+                          }
+                          return val;
+                      } catch (NumberFormatException nfe) { // NOPMD
+                           // Invalid octal ("09") or too big for Long. Fallback to BigInteger.
+                      }
+                 }
+                 // If not octal-like ('0.', '0x' handled earlier), treat as decimal Integer/Long/BigInteger below.
+            }
+
+             // Default to standard Integer/Long/BigInteger parsing
             try {
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
                 return createLong(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
+             // Handles decimal, failed octal (e.g. "09"), large numbers
             return createBigInteger(str);
-        }
 
-        //Must be a Float, Double, BigDecimal
+        } else { // Has decimal or exponent -> Floating point types (no suffix)
             final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             try {
+                // Try Float first
                 final Float f = createFloat(str);
+                 // Check magnitude AND precision
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                    // Use BigDecimal comparison to verify precision.
+                    // Compare BigDecimal value of Float's string representation with BigDecimal value of original string.
+                    if (new BigDecimal(f.toString()).compareTo(new BigDecimal(str)) == 0) {
+                    // Using f.toString() reflects standard Float representation, which is often desired.
                         return f;
                     }
+                }
             } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                 // Can be from createFloat or new BigDecimal(str)
             }
             try {
+                // Try Double if Float failed or lost precision
                 final Double d = createDouble(str);
+                 // Check magnitude AND precision
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                     // Use BigDecimal comparison to verify precision
+                     if (new BigDecimal(d.toString()).compareTo(new BigDecimal(str)) == 0) {
                         return d;
                      }
+                }
             } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                // Can be from createDouble or new BigDecimal(str)
             }
 
+            // Fallback to BigDecimal if Float/Double lose precision or magnitude
             return createBigDecimal(str);
         }
+    }
+}
\ No newline at end of file
