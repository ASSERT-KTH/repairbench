diff --git a/tmp/120fe9a8-54db-4b52-a4d9-a1e0f014712a_buggy.java b/tmp/d82d2100-6981-4030-bdb1-948999237f4c_fixed.java
index b09cd82..0ec7db3 100644
--- a/tmp/120fe9a8-54db-4b52-a4d9-a1e0f014712a_buggy.java
+++ b/tmp/d82d2100-6981-4030-bdb1-948999237f4c_fixed.java
@@ -1,192 +1,370 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils; // Assuming this import is available
+
+// Add import for NumberUtilsTest context if needed, or assume helpers are within NumberUtils class.
+
+
+// Wrapper class added for context, replace with actual class structure.
+class NumberUtils {
+
+    // Assume helper methods like isBlank, isDigits, isAllZeros, createFloat, createDouble, etc. exist.
+    // Placeholders for required helper methods if not part of the actual NumberUtils class provided.
+    private static boolean isDigits(String str) {
+        if (StringUtils.isEmpty(str)) {
+            return false;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (!Character.isDigit(str.charAt(i))) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private static boolean isAllZeros(String str) {
+        if (str == null) {
+            return true; // Treat null as all zeros for this check
+        }
+        for (int i = 0; i < str.length(); i++) {
+             // Ignore sign characters for zero check
+            if (str.charAt(i) == '+' || str.charAt(i) == '-') {
+                 if (i > 0) return false; // Sign not at the start is invalid for simple zero check
+                 continue;
+            }
+            if (str.charAt(i) != '0') {
+                return false;
+            }
+        }
+        // Check if it contains at least one digit '0' if not blank/just sign
+        return str.length() > 0 && (str.contains("0") || str.equals("+") || str.equals("-") || StringUtils.isBlank(str.replace("+","").replace("-","")) );
+    }
+
+    // Assume createFloat, createDouble, createInteger, createLong, createBigInteger, createBigDecimal
+    // are available as static methods in this class or imported.
+    // Example stubs based on standard behavior:
+    public static Float createFloat(String str) { return Float.valueOf(str); }
+    public static Double createDouble(String str) { return Double.valueOf(str); }
+    public static Integer createInteger(String str) { return Integer.decode(str); }
+    public static Long createLong(String str) { return Long.decode(str); }
+    public static BigInteger createBigInteger(String str) {
+        int radix = 10;
+        int index = 0;
+        boolean negative = false;
+
+        if (str.startsWith("-")) {
+            negative = true;
+            index = 1;
+        } else if (str.startsWith("+")) {
+             index = 1;
+        }
+
+
+        if (str.startsWith("0x", index) || str.startsWith("0X", index)) {
+            radix = 16;
+            index += 2;
+        } else if (str.startsWith("#", index)) {
+            radix = 16;
+            index += 1;
+        } else if (str.startsWith("0", index) && str.length() > index + 1) {
+            // Check if it's potentially octal (and not just "0")
+            // BigInteger(str, radix) handles this check internally if radix is 8 or 16?
+            // Let's be explicit: check if it looks octal before setting radix 8
+            boolean looksOctal = true;
+            for(int i = index + 1; i < str.length(); i++){
+                if(str.charAt(i) < '0' || str.charAt(i) > '7'){
+                    looksOctal = false;
+                    break;
+                }
+            }
+            if(looksOctal) {
+                 radix = 8;
+                 index += 1; // Skip the leading '0' for octal parsing
+            }
+             // else remain radix 10, index stays same (BigInteger parses "0" or "0decimal" as decimal)
+        }
+
+
+        if (index == 0 && (str.startsWith("0x") || str.startsWith("0X"))) {
+             radix = 16; index = 2; // Handle 0x prefix without sign
+        } else if (index == 0 && str.startsWith("#")) {
+            radix = 16; index = 1; // Handle # prefix without sign
+        } else if (index == 0 && str.startsWith("0") && str.length() > 1 && radix == 10) {
+            // Check octal without sign again, if not handled above.
+             boolean looksOctal = true;
+             for(int i = 1; i < str.length(); i++){
+                 if(str.charAt(i) < '0' || str.charAt(i) > '7'){
+                    looksOctal = false;
+                    break;
+                 }
+             }
+             if(looksOctal) {
+                 radix = 8; index = 1;
+             }
+        }
+
+        String numberPart = str.substring(index);
+        if (numberPart.isEmpty()) {
+            // Handle cases like "-", "+", "0x", "-0x" which result in empty numberPart
+            throw new NumberFormatException("Cannot parse empty input after prefix/sign: \"" + str + "\"");
+        }
+
+
+        BigInteger bi = new BigInteger(numberPart, radix);
+        return negative ? bi.negate() : bi;
+    }
+
+    public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
+     * or exponent. If found, it tries Float, then Double, then BigDecimal, returning
+     * the smallest type that represents the value accurately (without precision loss
+     * compared to the string representation and without overflow/underflow issues).
+     * If no decimal point or exponent is found, it tries Integer, then Long, then
+     * BigInteger (handling hex and octal prefixes).</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * be Integer, Long or BigInteger as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
-        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
-        int pfxLen = 0;
-        for(final String pfx : hex_prefixes) {
-            if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
-                break;
-            }
-        }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
-            }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
-            }
+
+        // Check for hex prefix using createBigInteger's logic (which handles prefixes)
+        boolean isHex = (str.startsWith("0x") || str.startsWith("0X") || str.startsWith("-0x") || str.startsWith("-0X") || str.startsWith("#") || str.startsWith("-#"));
+
+        if (isHex) {
+            // Use helper methods assumed to handle hex decode correctly
+             try {
+                // Try integer first, then long, then big integer for hex
+                // Length check is only a heuristic, actual value matters
                  return createInteger(str);
+             } catch (NumberFormatException nfe1) {
+                 try {
+                     return createLong(str);
+                 } catch (NumberFormatException nfe2) {
+                     // Use createBigInteger which should robustly handle hex
+                     return createBigInteger(str);
                  }
+             }
+        }
+
+        // Not hex, proceed with standard parsing
         final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Original calculation +1 is wrong.
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
+        // Correct calculation for expPos (position of 'e' or 'E')
+        int expIndicatorPos = str.indexOf('e');
+        if (expIndicatorPos == -1) {
+            expIndicatorPos = str.indexOf('E');
+        }
+
+        String mant; // Mantissa part (before decimal or exponent)
+        String decPart; // Decimal part (after '.')
+        String expPart; // Exponent part (after 'e'/'E')
 
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+        if (decPos > -1) { // Contains decimal point
+            if (expIndicatorPos > -1) { // Contains exponent indicator
+                if (expIndicatorPos < decPos || expIndicatorPos >= str.length() - 1) { // Invalid exponent position or no digits after E
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
                 mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+                decPart = str.substring(decPos + 1, expIndicatorPos);
+                expPart = str.substring(expIndicatorPos + 1);
+            } else { // Contains decimal, no exponent
+                mant = str.substring(0, decPos);
+                decPart = str.substring(decPos + 1);
+                expPart = null;
+            }
+        } else { // No decimal point
+            if (expIndicatorPos > -1) { // Contains exponent indicator
+                 if (expIndicatorPos == 0 || expIndicatorPos >= str.length() - 1) { // exponent invalid position or no digits after E
+                     // Check for sign before exponent: "-e1", "+e1", "e1" are invalid.
+                     if (expIndicatorPos == 0 || (expIndicatorPos == 1 && (str.charAt(0) == '+' || str.charAt(0) == '-'))) {
+                          throw new NumberFormatException(str + " is not a valid number.");
+                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                  }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+                mant = str.substring(0, expIndicatorPos);
+                decPart = null;
+                expPart = str.substring(expIndicatorPos + 1);
+            } else { // No decimal, no exponent -> Integer type
+                mant = str; // The whole string is the mantissa for integer types
+                decPart = null;
+                expPart = null;
             }
-            dec = null;
         }
+
+        // Check for type suffix if the number is not an integer type
         if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+            String numeric; // The part of the string excluding the suffix
+            String exponentToCheck; // The exponent part excluding the suffix
+
+            // Determine numeric part and adjust exponentToCheck if suffix was part of it
+            if (expPart != null && !expPart.isEmpty() && expPart.endsWith(String.valueOf(lastChar))) {
+                numeric = str.substring(0, str.length() - 1);
+                exponentToCheck = expPart.substring(0, expPart.length() - 1);
+                 // Check if exponent became empty or just sign after removing suffix
+                 if (exponentToCheck.isEmpty() || exponentToCheck.equals("+") || exponentToCheck.equals("-")) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
+            } else if (expPart == null && (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L')) {
+                // Suffix is present, but there's no exponent part.
+                numeric = str.substring(0, str.length() - 1);
+                exponentToCheck = null; // No exponent
             } else {
-                exp = null;
+                // Last char is not a digit or '.', and not a valid suffix in a valid position
+                 throw new NumberFormatException(str + " is not a valid number.");
             }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+            // isAllZeros check based on original mantissa and the exponent part without the suffix
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(exponentToCheck);
+
             switch (lastChar) {
                 case 'l':
                 case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Check if valid integer format before suffix
+                    if (decPart == null && exponentToCheck == null) {
+                         // isDigits check now applies to 'numeric' part (mantissa)
+                         // Need robust check for integer format (sign + digits)
+                         if (numeric.isEmpty() || (numeric.charAt(0) == '-' && !isDigits(numeric.substring(1))) || (numeric.charAt(0) == '+') || (numeric.charAt(0) != '-' && !isDigits(numeric))) {
+                              // Handle sign correctly, allow only digits after sign
+                              if(numeric.length() > 1 && (numeric.charAt(0) == '+' || numeric.charAt(0) == '-') && !isDigits(numeric.substring(1))){
+                                   throw new NumberFormatException(str + " is not a valid number.");
+                              } else if (numeric.length() == 1 && (numeric.charAt(0) == '+' || numeric.charAt(0) == '-')) {
+                                   throw new NumberFormatException(str + " is not a valid number."); // Only sign is invalid
+                              } else if (numeric.length() > 0 && numeric.charAt(0) != '+' && numeric.charAt(0) != '-' && !isDigits(numeric)) {
+                                   throw new NumberFormatException(str + " is not a valid number.");
+                              }
+                         }
                         try {
+                            // Use createLong assumed to handle octal/hex prefixes in 'numeric'
                             return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                        } catch (final NumberFormatException nfe) {
+                            // Use createBigInteger assumed to handle octal/hex prefixes in 'numeric'
                             return createBigInteger(numeric);
+                        }
+                    }
+                    throw new NumberFormatException(str + " is not a valid number."); // Invalid format for L
 
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
                 case 'f':
                 case 'F':
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        final Float f = createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
+                        // Float failed (infinite or zero issue), fall through to try Double
+                    } catch (final NumberFormatException nfe) { /* Fall through */ }
+                     // Fall through intended for F -> D -> BigDecimal
 
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
                 case 'd':
                 case 'D':
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
-                        }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    try {
-                        return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
-                    throw new NumberFormatException(str + " is not a valid number.");
-
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
-        }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
-            try {
-                return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            try {
-                return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            return createBigInteger(str);
-        }
-
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-        try {
-                final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
-                }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
-        try {
-                final Double d = createDouble(str);
+                        final Double d = createDouble(numeric);
                         if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                        // Double failed (infinite or zero issue), fall through to try BigDecimal
+                    } catch (final NumberFormatException nfe) { /* Fall through */ }
+                    // Fall through intended for D -> BigDecimal
+                    try {
+                        // Final attempt with BigDecimal for F/D suffixes
+                        return createBigDecimal(numeric);
+                    } catch (final NumberFormatException e) {
+                        throw new NumberFormatException(str + " is not a valid number.");
+                    }
+                // Default case is covered by the checks before the switch
+            }
+        } else {
+            // No type suffix. Determine type: Integer or Floating point.
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(expPart); // Use original parsed parts
+
+            if (decPart == null && expPart == null) { // Integer type
+                 // Hex was handled earlier. Octal is handled by createInteger/Long/BigInteger.
+                 try {
+                     return createInteger(str);
+                 } catch (final NumberFormatException nfe1) {
+                     try {
+                         return createLong(str);
+                     } catch (final NumberFormatException nfe2) {
+                         // Must be BigInteger or invalid format. createBigInteger handles octal/hex.
+                         return createBigInteger(str);
+                     }
+                 }
+            } else { // Floating point type (has decimal or exponent)
+                 // Try Float -> Double -> BigDecimal, ensuring precision and range.
+                 Float f = null;
+                 try { f = createFloat(str); } catch (NumberFormatException ignore) {}
+
+                 if (f != null && !f.isInfinite()) {
+                     try {
+                         // Compare BigDecimal representations to check for precision loss
+                         if (new BigDecimal(f.toString()).compareTo(new BigDecimal(str)) == 0) {
+                              // Additional check for underflow to zero from non-zero input
+                             if (!(f.floatValue() == 0.0F && !allZeros)) {
+                                 return f; // Float is suitable
+                             }
+                         }
+                         // Use f.toString() instead of String.valueOf(f) as BigDecimal(String.valueOf(f)) might fail for NaN/Infinity strings.
+                         // isInfinite check already handles NaN/Infinity floats.
+                     } catch (NumberFormatException ignore) { /* BigDecimal creation failed */ }
+                 }
+
+                 Double d = null;
+                 try { d = createDouble(str); } catch (NumberFormatException ignore) {}
+
+                 if (d != null && !d.isInfinite()) {
+                      try {
+                         // Compare BigDecimal representations
+                         if (new BigDecimal(d.toString()).compareTo(new BigDecimal(str)) == 0) {
+                             // Check zero condition
+                             if (!(d.doubleValue() == 0.0D && !allZeros)) {
+                                 return d; // Double is suitable
+                             }
+                         }
+                      } catch (NumberFormatException ignore) { /* BigDecimal creation failed */ }
                  }
 
+                 // If neither Float nor Double were suitable, return BigDecimal
+                 try {
                      return createBigDecimal(str);
+                 } catch (NumberFormatException e) {
+                     // If even BigDecimal fails, the format is fundamentally invalid.
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
+            }
+        }
+        // Should not be reachable if logic is correct
+        throw new NumberFormatException(str + " is not a valid number.");
+    }
 }
\ No newline at end of file
