diff --git a/tmp/86527ec2-637b-46c1-a447-a896c44d8e53_buggy.java b/tmp/3505bbfc-a1b6-48b3-902f-2600bc2d8c39_fixed.java
index b09cd82..600b73f 100644
--- a/tmp/86527ec2-637b-46c1-a447-a896c44d8e53_buggy.java
+++ b/tmp/3505bbfc-a1b6-48b3-902f-2600bc2d8c39_fixed.java
@@ -1,192 +1,371 @@
+import org.apache.commons.lang3.StringUtils; // Required import
+import java.math.BigDecimal; // Required import
+import java.math.BigInteger; // Required import
+
+// Assume NumberUtils class context and presence/correctness of helper methods:
+// isDigits(String), isAllZeros(String)
+// createInteger(String), createLong(String), createBigInteger(String), createBigDecimal(String)
+// Specifically, createInteger/Long/BigInteger must handle decode ("0x", "#", "0" prefixes) correctly.
+
+public class NumberUtils { // Renamed class for context, should be the original class name
+
+    // --- Helper Method Placeholders (Implementations Assumed) ---
+    private static boolean isDigits(final String str) {
+        if (StringUtils.isEmpty(str)) {
+            return false;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (!Character.isDigit(str.charAt(i))) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private static boolean isAllZeros(final String str) {
+        if (StringUtils.isEmpty(str)) {
+            return true; // Treat empty as zero for this check
+        }
+        for (int i = str.length() - 1; i >= 0; i--) {
+            char c = str.charAt(i);
+            // Allow 0, sign, and decimal point
+            if (c != '0' && c != '.' && c != '+' && c != '-') {
+                return false;
+            }
+        }
+        // Check that it's not just a sign or just a decimal point
+        if (str.equals(".") || str.equals("+") || str.equals("-")) {
+            return false;
+        }
+        return true;
+    }
+
+     private static Integer createInteger(final String str) throws NumberFormatException {
+         // Assumes Integer.decode logic or equivalent prefix handling
+         if (str == null) return null;
+         try { return Integer.decode(str); } catch (NumberFormatException e) { throw new NumberFormatException(str + " is not a valid number."); }
+     }
+
+     private static Long createLong(final String str) throws NumberFormatException {
+         // Assumes Long.decode logic or equivalent prefix handling
+         if (str == null) return null;
+         try { return Long.decode(str); } catch (NumberFormatException e) { throw new NumberFormatException(str + " is not a valid number."); }
+     }
+
+     private static BigInteger createBigInteger(final String str) throws NumberFormatException {
+         // Assumes handles hex ("0x", "#") and sign correctly
+         if (str == null) return null;
+         int index = 0;
+         int radix = 10;
+         boolean negative = false;
+         if (str.startsWith("-")) {
+             negative = true;
+             index = 1;
+         }
+         if (str.startsWith("0x", index) || str.startsWith("0X", index)) {
+             radix = 16;
+             index += 2;
+         } else if (str.startsWith("#", index)) {
+             radix = 16;
+             index++;
+         } else if (str.startsWith("0", index) && str.length() > index + 1) {
+            // Check if remaining digits are octal
+            boolean isOctal = true;
+            for (int i = index + 1; i < str.length(); i++) {
+                if (str.charAt(i) < '0' || str.charAt(i) > '7') {
+                    isOctal = false;
+                    break;
+                }
+            }
+            if (isOctal) {
+               radix = 8;
+               // Keep index pointing to the '0' as BigInteger(String, radix) expects it.
+               // Or, strip the '0' if the constructor doesn't expect it? Let's assume standard constructor needs only digits.
+               // index++; // Let's assume we strip leading 0 for octal parse
+            } // else, starts with 0 but not octal, treat as decimal (radix 10)
+         }
+
+         if (index >= str.length()) { // Just prefix/sign
+             throw new NumberFormatException(str + " is not a valid number.");
+         }
+
+         String numberPart = str.substring(index);
+         try {
+            BigInteger result;
+            if (radix == 8 && numberPart.startsWith("0") && numberPart.length() > 1) {
+                 // Re-check: BigInteger constructor might not handle leading '0' for octal correctly.
+                 // Let's parse assuming it needs digits only.
+                 result = new BigInteger(numberPart, radix);
+            } else {
+                 result = new BigInteger(numberPart, radix);
+            }
+
+            return negative ? result.negate() : result;
+         } catch (NumberFormatException e) {
+             throw new NumberFormatException(str + " is not a valid number.");
+         }
+     }
+
+
+    private static BigDecimal createBigDecimal(final String str) throws NumberFormatException {
+        if (str == null) {
+            return null;
+        }
+        // BigDecimal constructor handles decimal format with exponents.
+        // It does not handle hex/octal prefixes. This method should only
+        // be called with valid decimal number strings.
+        try {
+            return new BigDecimal(str);
+        } catch (NumberFormatException e) {
+            // Improve error message?
+            throw new NumberFormatException(str + " is not a valid number.");
+        }
+    }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
+
+        // Handle hex format first
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for (final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
+
+        if (pfxLen > 0) {
+             // Ensure there are digits after the prefix
+            if (pfxLen == str.length()) {
+                throw new NumberFormatException(str + " is not a valid number."); // e.g., "0x", "#"
+            }
+            // Use createX methods which are assumed to handle hex prefixes
             final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+            if (hexDigits > 16) {
                 return createBigInteger(str);
             }
-            if (hexDigits > 8) { // too many for an int
+            if (hexDigits > 8) {
                 return createLong(str);
             }
             return createInteger(str);
         }
+
+        // Not hex. Check for suffix.
         final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
-
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                dec = str.substring(decPos + 1, expPos);
+        final String numeric; // String part without suffix
+        final char typeSuffix; // The suffix char (L, F, D) or 0 if none
+
+        // Check if the last character is a valid type suffix and is preceded by a digit or '.'
+        if ((lastChar == 'l' || lastChar == 'L' || lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D')
+                && str.length() > 1) {
+            char beforeSuffix = str.charAt(str.length() - 2);
+            if (Character.isDigit(beforeSuffix) || beforeSuffix == '.') {
+                 numeric = str.substring(0, str.length() - 1);
+                 typeSuffix = lastChar;
             } else {
-                dec = str.substring(decPos + 1);
+                 // Suffix in invalid position (e.g., "1eL", "-F"), treat string as having no suffix
+                 numeric = str;
+                 typeSuffix = 0;
             }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
         } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+            numeric = str;
+            typeSuffix = 0;
+        }
+
+        // Now parse the 'numeric' string structure to determine format and validate
+        final int decPos = numeric.indexOf('.');
+        int expPos = numeric.indexOf('e');
+        if (expPos == -1) {
+            expPos = numeric.indexOf('E');
+        }
+
+        // Check for floating point format (presence of decimal or exponent)
+        boolean isFloatingPointFormat = (decPos > -1) || (expPos > -1);
+        String mantPart = numeric; // Part before decimal or exponent
+        String decPart = null;     // Part after decimal, before exponent
+        String expPart = null;     // Part after exponent
+
+        // Basic structural validation and parsing of parts for 'allZeros' check
+        if (isFloatingPointFormat) {
+            if (expPos > -1) { // Has exponent
+                if (expPos < decPos /* exponent before decimal */ ||
+                    expPos == 0 /* starts with exponent */ ||
+                    expPos == numeric.length() - 1 /* exponent has no digits */) {
                      throw new NumberFormatException(str + " is not a valid number.");
                 }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+                expPart = numeric.substring(expPos + 1);
+                // Check exponent digits
+                char firstCharExp = expPart.charAt(0);
+                String expDigits = (firstCharExp == '+' || firstCharExp == '-') ? expPart.substring(1) : expPart;
+                if (!isDigits(expDigits) || expDigits.isEmpty()) {
+                     throw new NumberFormatException(str + " is not a valid number.");
                 }
-            dec = null;
             }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+
+            if (decPos > -1) { // Has decimal
+                 if (numeric.equals(".")) { // String is just "."
+                      throw new NumberFormatException(str + " is not a valid number.");
+                 }
+                 mantPart = numeric.substring(0, decPos);
+                 decPart = (expPos > -1) ? numeric.substring(decPos + 1, expPos) : numeric.substring(decPos + 1);
+
+                 // Check ".e1" case (mantissa is empty before exponent)
+                 if (mantPart.isEmpty() && expPos == decPos + 1) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
+            } else { // No decimal, but has exponent
+                 mantPart = numeric.substring(0, expPos);
+            }
         } else {
-                exp = null;
+             // Not floating point format (integral). Validate it's not just a sign.
+             if (numeric.length() == 1 && (numeric.charAt(0) == '-' || numeric.charAt(0) == '+')) {
+                 throw new NumberFormatException(str + " is not a valid number.");
              }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
+             // Further validation handled by createInteger/Long/BigInteger (e.g., non-digits)
+        }
+
+        // Calculate allZeros check based on parsed parts if needed for F/D suffix or non-suffixed float path
+        boolean allZeros = false;
+        if (typeSuffix == 'f' || typeSuffix == 'F' || typeSuffix == 'd' || typeSuffix == 'D' || (typeSuffix == 0 && isFloatingPointFormat)) {
+            allZeros = isAllZeros(mantPart) && isAllZeros(decPart) && isAllZeros(expPart);
+        }
+
+
+        // --- Suffix Logic ---
+        if (typeSuffix != 0) {
+            switch (typeSuffix) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    if (isFloatingPointFormat) { // L suffix requires integral format
+                        throw new NumberFormatException(str + " is not a valid number.");
+                    }
+                    // 'numeric' should be a valid integer string (possibly with '0' prefix)
+                    // Let createLong handle range and decode, then fallback to BigInteger
                     try {
                         return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                    } catch (final NumberFormatException nfe) {
+                         try {
                              return createBigInteger(numeric);
+                         } catch (NumberFormatException nfe2) {
+                             throw new NumberFormatException(str + " is not a valid number."); // Rethrow original if both fail
+                         }
+                    }
 
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        // Use standard Float conversion for 'F' behavior
+                        final Float f = Float.valueOf(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
+                            return f; // Precision loss acceptable with 'f' suffix
                         }
+                        // Fall through if Float is infinite or underflowed to zero (per docs: try larger types)
+                    } catch (final NumberFormatException nfe) { /* Fall through if parsing fails */ }
+                    //$FALL-THROUGH$ // Intentional fall-through
 
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
-                        }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // Use standard Double conversion for 'D' behavior
+                        final Double d = Double.valueOf(numeric);
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                            return d; // Precision loss acceptable with 'd' suffix
                         }
+                         // Fall through if Double is infinite or underflowed to zero (per docs: try larger types)
+                    } catch (final NumberFormatException nfe) { /* Fall through if parsing fails */ }
                     try {
+                        // Final attempt with BigDecimal (handles large numbers)
                         return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
+                    } catch (final NumberFormatException e) {
+                        // If all attempts fail for suffixed number
                         throw new NumberFormatException(str + " is not a valid number.");
-
-            }
                     }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
+                 default: // Should not happen
+                    throw new NumberFormatException(str + " is not a valid number.");
             }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+
+        } // --- End Suffix Logic ---
+
+
+        // --- No Suffix Logic ---
+        if (!isFloatingPointFormat) { // Integral number string
+            // Let createX methods handle potential octal ('0' prefix) via decode
             try {
-                return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+                return createInteger(str); // Use original string
+            } catch (final NumberFormatException nfe) { /* Ignore, try larger type */ }
             try {
-                return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            return createBigInteger(str);
+                return createLong(str); // Use original string
+            } catch (final NumberFormatException nfe) { /* Ignore, try larger type */ }
+             // Final attempt for integral types
+             try {
+                return createBigInteger(str); // Use original string
+             } catch (NumberFormatException nfe_bi) {
+                 throw new NumberFormatException(str + " is not a valid number."); // Rethrow if BigInt fails
              }
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        } else { // Floating point format (has '.' or 'e'/'E') without suffix
+             // Try Float -> Double -> BigDecimal, using original checks
              try {
-                final Float f = createFloat(str);
+                 final Float f = Float.valueOf(str); // Use original string for parsing
+                 // Check for infinity or zero-from-non-zero
                  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
-                }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                     return f; // Return Float if it seems suitable
                  }
+             } catch (final NumberFormatException nfe) { /* Ignore, try larger type */ }
+
              try {
-                final Double d = createDouble(str);
+                 final Double d = Double.valueOf(str); // Use original string for parsing
+                  // Check for infinity or zero-from-non-zero
                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                    return d;
-                }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                     return d; // Return Double if it seems suitable
                  }
+             } catch (final NumberFormatException nfe) { /* Ignore, try larger type */ }
 
-        return createBigDecimal(str);
+             // Fallback to BigDecimal for precision or range issues
+             try {
+                 return createBigDecimal(str); // Use original string
+             } catch (final NumberFormatException e){
+                 // If even BigDecimal parsing fails for the original string
+                 throw new NumberFormatException(str + " is not a valid number.");
+             }
+        }
+    }
 }
\ No newline at end of file
