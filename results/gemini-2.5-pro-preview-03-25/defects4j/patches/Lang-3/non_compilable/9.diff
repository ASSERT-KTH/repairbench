diff --git a/tmp/ae6b02a6-715a-462d-869b-baa9df5abd50_buggy.java b/tmp/999a17ad-841b-4110-888e-c638849c0c95_fixed.java
index b09cd82..a252626 100644
--- a/tmp/ae6b02a6-715a-462d-869b-baa9df5abd50_buggy.java
+++ b/tmp/999a17ad-841b-4110-888e-c638849c0c95_fixed.java
@@ -1,192 +1,234 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils; // Assuming this import exists
+
+// Class definition added for context, replace with actual NumberUtils class structure if needed.
+class NumberUtils {
+    // Helper methods assumed to exist in the actual NumberUtils class or its dependencies.
+    // Implementations below are simplified placeholders for context.
+    private static boolean isDigits(final String str) {
+        if (StringUtils.isEmpty(str)) {
+            return false;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (!Character.isDigit(str.charAt(i))) {
+                return false;
+            }
+        }
+        return true;
+    }
+    private static boolean isEmpty(final String str) { // Helper for isDigits
+        return str == null || str.length() == 0;
+    }
+    private static Float createFloat(String s) { return Float.valueOf(s); }
+    private static Double createDouble(String s) { return Double.valueOf(s); }
+    private static Integer createInteger(String s) { return Integer.decode(s); }
+    private static Long createLong(String s) { return Long.decode(s); }
+    private static BigInteger createBigInteger(String s) {
+        int pfxLen = 0;
+        boolean negative = false;
+        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
+        for(final String pfx : hex_prefixes) {
+            if (s.startsWith(pfx)) {
+                pfxLen = pfx.length();
+                negative = pfx.startsWith("-");
+                break;
+            }
+        }
+        if (pfxLen > 0) {
+            String digits = s.substring(pfxLen);
+             try {
+                 BigInteger bi = new BigInteger(digits, 16);
+                 return negative ? bi.negate() : bi;
+             } catch (NumberFormatException nfe) {
+                 // Throw specific message similar to BigInteger constructor
+                 throw new NumberFormatException("For input string: \"" + s + "\"");
+             }
+        }
+        // Integer/Long.decode should have handled octal prefixes for smaller numbers.
+        // If we reach here, it's either decimal or octal too large for Long.
+        // BigInteger constructor handles decimal and sign. It doesn't handle octal prefix '0'.
+        // However, if Long.decode failed, it was likely due to size, not the octal format itself.
+        // So, BigInteger(String) should generally work for valid large integers (decimal or octal).
+        return new BigInteger(s);
+    }
+    private static BigDecimal createBigDecimal(String s) { return new BigDecimal(s); }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
+        // Handle hex numbers explicity first as BigInteger/BigDecimal don't parse prefixes
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for (final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+        if (pfxLen > 0) {
+            // Try Integer -> Long -> BigInteger for hex numbers
+             try {
+                 return createInteger(str); // Delegates to Integer.decode
+             } catch (final NumberFormatException nfe) { /* Ignore */ }
+             try {
+                 return createLong(str); // Delegates to Long.decode
+             } catch (final NumberFormatException nfe) { /* Ignore */ }
+             // Use createBigInteger helper which handles hex prefixes.
              return createBigInteger(str);
         }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
-            }
-            return createInteger(str);
-        }
+
         final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Combined check for 'e' or 'E'
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                mant = str.substring(0, expPos);
+        // Identify the numeric part (string excluding type suffix)
+        String numeric;
+        boolean hasSuffix = false;
+        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {
+             numeric = str.substring(0, str.length() - 1);
+             hasSuffix = true;
         } else {
-                mant = str;
-            }
-            dec = null;
+             numeric = str;
+             hasSuffix = false;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
+
+        // Handle potential floating point types (have decimal or exponent)
+        if (decPos > -1 || expPos > -1) {
+            boolean trulyZero = false;
+            try {
+                // Use BigDecimal to reliably check if the numeric string represents zero
+                // Use 'numeric' part which excludes suffix, as BigDecimal constructor fails on suffixes.
+                trulyZero = new BigDecimal(numeric).signum() == 0;
+            } catch (final NumberFormatException e) {
+                // Ignore. If numeric is invalid, subsequent parsing will fail anyway.
             }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+            if (hasSuffix) {
                 switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
-                        try {
-                            return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
-                        return createBigInteger(numeric);
-
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
                     case 'f':
                     case 'F':
                         try {
-                        final Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                            final Float f = createFloat(numeric);
+                            // Check suitability: not infinite, and not zero unless original was zero.
+                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !trulyZero))) {
                                 return f;
                             }
-
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
+                        } catch (final NumberFormatException nfe) { /* Ignore */ }
+                        // Fall through to Double/BigDecimal if Float is unsuitable
+                        // $FALL-THROUGH$ intentional
                     case 'd':
                     case 'D':
                         try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                            final Double d = createDouble(numeric);
+                            // Check suitability: not infinite, and not zero unless original was zero.
+                            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !trulyZero))) {
                                 return d;
                             }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
+                        } catch (final NumberFormatException nfe) { /* Ignore */ }
+                        // Fall through to BigDecimal if Double is unsuitable
+                        // $FALL-THROUGH$ intentional
                         try {
                              return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                         } catch (final NumberFormatException e) {
+                             // If BigDecimal fails, throw exception based on original string
+                             throw new NumberFormatException(str + " is not a valid number.");
                          }
-                    //$FALL-THROUGH$
+                    case 'l':
+                    case 'L':
+                        // Invalid suffix 'L' for a number with decimal point or exponent.
+                        throw new NumberFormatException(str + " is not a valid number.");
                     default:
+                        // Any other letter suffix is invalid.
                         throw new NumberFormatException(str + " is not a valid number.");
-
                 }
+            } else {
+                // No suffix, but has decimal point or exponent: Try Float -> Double -> BigDecimal
+                 try {
+                     final Float f = createFloat(str); // Use original string 'str'
+                     // Check suitability (using 'trulyZero' check based on numeric part)
+                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !trulyZero))) {
+                         return f;
+                     }
+                 } catch (final NumberFormatException nfe) { /* Ignore */ }
+                 try {
+                     final Double d = createDouble(str); // Use original string 'str'
+                     // Check suitability (using 'trulyZero' check based on numeric part)
+                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !trulyZero))) {
+                         return d;
+                     }
+                 } catch (final NumberFormatException nfe) { /* Ignore */ }
+
+                 return createBigDecimal(str); // Use original string 'str'
             }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
         } else {
-            exp = null;
+             // No decimal point, no exponent: Must be Integer/Long/BigInteger (or invalid)
+
+            if (hasSuffix) {
+                if (lastChar == 'l' || lastChar == 'L') {
+                    // numeric = str.substring(0, str.length() - 1); // already calculated
+                    // Basic format check for integer string
+                    if (numeric.isEmpty() || (numeric.charAt(0) == '-' && numeric.length() == 1) || !isDigits(numeric.startsWith("-") ? numeric.substring(1) : numeric)) {
+                        throw new NumberFormatException(str + " is not a valid number.");
+                    }
+                    // Try Long -> BigInteger for 'L' suffix
+                     try {
+                         return createLong(numeric);
+                     } catch (final NumberFormatException nfe) { /* Ignore, try BigInteger */ }
+                     return createBigInteger(numeric); // Use helper that handles sign correctly
                  }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+                 // Any other suffix (f, F, d, D) without decimal/exponent is invalid.
+                 throw new NumberFormatException(str + " is not a valid number.");
+
+            } else {
+                // No suffix, no decimal, no exponent: Try Integer -> Long -> BigInteger
+                // Rely on decode() to handle octal/hex prefixes for Integer/Long.
                  try {
                      return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+                 } catch (final NumberFormatException nfe) { /* Ignore */ }
                  try {
                      return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+                 } catch (final NumberFormatException nfe) { /* Ignore */ }
+                 // BigInteger constructor doesn't handle prefixes, but hex was checked earlier.
+                 // createBigInteger helper should handle potential large octal/decimal correctly.
                  return createBigInteger(str);
             }
-
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-        try {
-                final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
         }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
     }
-        try {
-                final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                    return d;
-                }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
-
-        return createBigDecimal(str);
 }
\ No newline at end of file
