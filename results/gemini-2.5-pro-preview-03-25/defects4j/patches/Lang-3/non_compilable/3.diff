diff --git a/tmp/ddf29944-1682-4805-8a8f-8ce6aa7be94f_buggy.java b/tmp/2b889606-4437-4973-9cb2-b4533aa0145d_fixed.java
index b09cd82..f44c670 100644
--- a/tmp/ddf29944-1682-4805-8a8f-8ce6aa7be94f_buggy.java
+++ b/tmp/2b889606-4437-4973-9cb2-b4533aa0145d_fixed.java
@@ -1,192 +1,324 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
+            char firstNonPrefixChar = '\0'; // Check first non-prefix character after potential sign
+            int signAdjust = (str.charAt(0) == '-') ? 1 : 0;
+            if (pfxLen + signAdjust < str.length()) {
+                 firstNonPrefixChar = str.charAt(pfxLen + signAdjust);
+            } else {
+                 // String ends after prefix (e.g. "0x", "-#")
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+
             final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+             if (hexDigits > 16 || (hexDigits == 16 && firstNonPrefixChar > '7')) { // Rough check - BigInteger handles actual overflow
+                return createBigInteger(str); // Assumes helper handles prefixes like #/-# and 0x/-0x
             }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+            if (hexDigits > 8 || (hexDigits == 8 && firstNonPrefixChar > '7')) { // Rough check - Long handles actual overflow
+                return createLong(str); // Assumes helper handles prefixes
             }
-            return createInteger(str);
+            return createInteger(str); // Assumes helper handles prefixes
         }
+
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        // Find the first exponent separator ('e' or 'E'), ensuring it's valid
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
+        // Validate exponent position
+        if (expPos > -1) {
+            // Exponent cannot be the last char
+            if (expPos == str.length() - 1) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+            // Exponent cannot appear before a decimal point (if one exists)
+            if (decPos != -1 && expPos < decPos) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+            // Check for multiple exponent characters
+            if (str.indexOf('e', expPos + 1) != -1 || str.indexOf('E', expPos + 1) != -1) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
 
-        int numDecimals = 0; // Check required precision (LANG-693)
         if (decPos > -1) { // there is a decimal point
-
             if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
+        } else { // No decimal point
             if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
+                 if (expPos == 0 && !str.startsWith("+") && !str.startsWith("-")) { // Handle "e1", "E1" as having empty mantissa
+                    mant = "";
+                 } else {
                     mant = str.substring(0, expPos);
+                 }
             } else {
                 mant = str;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
+
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // Ends with a potential type qualifier
+            // Determine exponent string part, excluding the qualifier
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
+            // The numeric part excludes the type qualifier
             final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Check for valid long format: no decimal point, no exponent part found in 'numeric'
+                    if (dec == null && exp == null && StringUtils.isNotEmpty(numeric) &&
+                        (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
+                            // Use createLong, assuming it handles hex/octal prefixes correctly (e.g., via Long.decode)
                             return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                        } catch (final NumberFormatException nfe) {
+                            // Fallback to BigInteger if Long parsing fails (e.g., overflow)
+                            try {
                                 return createBigInteger(numeric);
+                            } catch (final NumberFormatException nfe2) {
+                                // Propagate if BigInteger also fails
+                                throw new NumberFormatException(str + " is not a valid number.");
+                            }
+                        }
+                    }
+                    // Invalid format for 'L' suffix (e.g., has decimal or exponent)
+                    throw new NumberFormatException(str + " is not a valid number.");
 
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
+                        final Float f = createFloat(numeric);
+                        // Check validity: not infinite, and not zero unless the original numeric string was zero
+                        boolean isSpuriousZeroF = false;
+                        // Check for 0.0f result, ignoring NaN and Infinity
+                        if (f.floatValue() == 0.0f && !f.isInfinite()) {
+                            boolean originalIsZero = false;
+                            try {
+                                // Use BigDecimal to reliably check if the numeric part is zero
+                                originalIsZero = createBigDecimal(numeric).signum() == 0;
+                            } catch (final NumberFormatException nfe_bd) {
+                                // If BigDecimal parsing fails, assume it wasn't zero
                             }
+                            isSpuriousZeroF = !originalIsZero;
+                        }
+
+                        if (!(f.isInfinite() || isSpuriousZeroF)) {
+                            return f; // Float is valid and represents the number adequately
+                        }
+                        // Javadoc implies for 'f'/'F', if Float is not adequate (Infinite/spurious zero), it's an error
+                        throw new NumberFormatException(str + " is not a valid number.");
 
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (final NumberFormatException nfe) {
+                        // Catch NFE from createFloat or our checks, rethrow indicating invalid format
+                        throw new NumberFormatException(str + " is not a valid number.");
                     }
-                    //$FALL-THROUGH$
+
                 case 'd' :
                 case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
+                        final Double d = createDouble(numeric);
+                        // Check validity: not infinite, not spurious zero
+                        boolean isSpuriousZeroD = false;
+                        if (d.doubleValue() == 0.0d && !d.isInfinite()) {
+                            boolean originalIsZero = false;
+                            try {
+                                originalIsZero = createBigDecimal(numeric).signum() == 0;
+                            } catch (final NumberFormatException nfe_bd) {
+                                // Assume non-zero if BigDecimal fails
                             }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                            isSpuriousZeroD = !originalIsZero;
                         }
+
+                        if (!(d.isInfinite() || isSpuriousZeroD)) {
+                            return d; // Double is valid
+                        }
+                        // If Double is infinite or spurious zero, fall through to BigDecimal as per Javadoc
+
+                    } catch (final NumberFormatException nfe) {
+                        // Ignore NFE from createDouble, allow fallback to BigDecimal
+                    }
+                    // Fallback for 'd'/'D' if Double was unsuitable or failed parsing
                     try {
                         return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                    } catch (final NumberFormatException e) {
+                        // If BigDecimal also fails for the numeric part
+                        throw new NumberFormatException(str + " is not a valid number.");
                     }
-                    //$FALL-THROUGH$
+                    break; // Break after successfully handling 'd'/'D' or throwing
+
                 default :
+                    // The last character is not a digit, '.', or a valid type qualifier
                     throw new NumberFormatException(str + " is not a valid number.");
+            }
+        } // End of type qualifier handling
 
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
-        }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+        // No type qualifier: Determine type based on presence of decimal/exponent
+        if (expPos == -1 && decPos == -1) { // Integral number (no decimal, no exponent)
+            // Try Integer -> Long -> BigInteger. Assumes helpers handle prefixes (octal/hex).
             try {
                 return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+            } catch (final NumberFormatException nfe) { /* ignore */ }
             try {
                 return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            return createBigInteger(str);
+            } catch (final NumberFormatException nfe) { /* ignore */ }
+            // Fallback to BigInteger for large integers or if other parsers fail
+            return createBigInteger(str); // Let BigInteger handle range and prefixes
+
         }
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Non-integral number (has decimal point or exponent): Try Float -> Double -> BigDecimal
+        // Try Float
         try {
             final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+            boolean isSpuriousZeroF = false;
+            if (f.floatValue() == 0.0f && !f.isInfinite()) {
+                boolean originalIsZero = false;
+                try {
+                    originalIsZero = createBigDecimal(str).signum() == 0;
+                } catch (final NumberFormatException nfe_bd) { /* assume non-zero */ }
+                isSpuriousZeroF = !originalIsZero;
+            }
+
+            // Return Float if it's finite and not a spurious zero
+            if (!(f.isInfinite() || isSpuriousZeroF)) {
                 return f;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+        } catch (final NumberFormatException nfe) { /* ignore */ }
+
+        // Try Double
         try {
             final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+            boolean isSpuriousZeroD = false;
+            if (d.doubleValue() == 0.0d && !d.isInfinite()) {
+                boolean originalIsZero = false;
+                try {
+                    originalIsZero = createBigDecimal(str).signum() == 0;
+                } catch (final NumberFormatException nfe_bd) { /* assume non-zero */ }
+                isSpuriousZeroD = !originalIsZero;
+            }
+
+            // Return Double if it's finite and not a spurious zero
+            if (!(d.isInfinite() || isSpuriousZeroD)) {
                 return d;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+        } catch (final NumberFormatException nfe) { /* ignore */ }
+
+        // Fallback to BigDecimal if Float and Double were unsuitable or failed
+        return createBigDecimal(str); // Let BigDecimal handle it, possibly throwing NFE if invalid
+    }
+
+    // Helper methods assumed to exist (stubs for context):
+    private static boolean isDigits(final String str) {
+        // Checks if the string contains only Unicode digits.
+        // Implementation details omitted for brevity. Assumed correct.
+        if (StringUtils.isEmpty(str)) return false;
+        for (char c : str.toCharArray()) if (!Character.isDigit(c)) return false;
+        return true;
+    }
+
+    private static Integer createInteger(final String str) {
+        // Assumed to use Integer.decode(str) to handle hex/octal prefixes
+        return Integer.decode(str);
+    }
+
+    private static Long createLong(final String str) {
+        // Assumed to use Long.decode(str) to handle hex/octal prefixes
+        return Long.decode(str);
+    }
+
+    private static BigInteger createBigInteger(final String str) {
+        // Needs to handle # hex prefix manually if not using a custom parser.
+        String parseStr = str;
+        int radix = 10;
+        if (str.startsWith("#")) {
+            parseStr = str.substring(1);
+            radix = 16;
+        } else if (str.startsWith("-#")) {
+            parseStr = "-" + str.substring(2); // Keep sign separate? No, BigInteger handles it.
+            radix = 16;
+        } else if (str.startsWith("0x") || str.startsWith("0X")) {
+             // BigInteger(String) handles "0x" prefix but not "#"
+             // Let BigInteger handle these standard cases
+        } else if (str.startsWith("0") && str.length() > 1 && !str.contains(".")) { // Check for octal prefix, avoid decimals like "0.5"
+             // BigInteger handles leading 0 as octal if no radix specified
+        }
+         // Use constructor that handles signs and standard prefixes (0x, 0)
+         // or specific radix for #
+        if (radix == 16) {
+             return new BigInteger(parseStr, 16);
+        }
+        return new BigInteger(parseStr); // Handles decimal, "0x", and octal "0"
+    }
+
+
+    private static Float createFloat(final String str) {
+        return Float.valueOf(str);
+    }
+
+    private static Double createDouble(final String str) {
+        return Double.valueOf(str);
     }
 
-        return createBigDecimal(str);
+    private static java.math.BigDecimal createBigDecimal(final String str) {
+        // Basic implementation, might need more robust handling for edge cases if necessary
+        return new java.math.BigDecimal(str);
     }
\ No newline at end of file
