diff --git a/tmp/0f930b5a-57d8-40b7-b920-638bf4803dd2_buggy.java b/tmp/af9fadfe-0d0f-4627-bf11-96f7de23264a_fixed.java
index b09cd82..ec7dad8 100644
--- a/tmp/0f930b5a-57d8-40b7-b920-638bf4803dd2_buggy.java
+++ b/tmp/af9fadfe-0d0f-4627-bf11-96f7de23264a_fixed.java
@@ -1,192 +1,319 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+import org.apache.commons.lang3.StringUtils;
+
+// Assume necessary helper classes like StringUtils and the createX, isDigits, isAllZeros methods exist and are correct.
+// We only provide the fixed createNumber method.
+
+public class FixedNumberUtils {
+
+    // Dummy helper methods required by the fixed code (implementations assumed to be correct and available)
+    private static Float createFloat(String s) throws NumberFormatException { return Float.valueOf(s); }
+    private static Double createDouble(String s) throws NumberFormatException { return Double.valueOf(s); }
+    // Note: createInteger/Long/BigInteger need to handle decimal, octal ('0' prefix), and hex ('0x', '#') formats correctly.
+    // Using decode() is a common way for Integer/Long. BigInteger needs explicit radix handling.
+    private static Integer createInteger(String s) throws NumberFormatException { return Integer.decode(s.replace("#", "0x")); } // Simplistic example
+    private static Long createLong(String s) throws NumberFormatException { return Long.decode(s.replace("#", "0x")); } // Simplistic example
+    private static BigInteger createBigInteger(String s) throws NumberFormatException {
+         int radix = 10; boolean negate = false; int pfxLen = 0;
+         String numPart = s;
+         if (s.startsWith("-")) { negate = true; numPart = s.substring(1); }
+         else if (s.startsWith("+")) { numPart = s.substring(1); } // Handle optional plus sign
+
+         if (numPart.startsWith("0x") || numPart.startsWith("0X")) { radix = 16; pfxLen = 2; }
+         else if (numPart.startsWith("#")) { radix = 16; pfxLen = 1; }
+         // Important: check for octal only if not hex and has leading zero
+         else if (numPart.startsWith("0") && numPart.length() > 1) { radix = 8; pfxLen = 1;}
+
+         if (pfxLen > 0) numPart = numPart.substring(pfxLen);
+         if (numPart.isEmpty()) throw new NumberFormatException("Cannot parse empty number"); // Check after removing prefix
+
+         BigInteger bi = new BigInteger(numPart, radix);
+         return negate ? bi.negate() : bi;
+    }
+    private static BigDecimal createBigDecimal(String s) throws NumberFormatException { return new BigDecimal(s); }
+    private static boolean isDigits(final String str) {
+        if (StringUtils.isEmpty(str)) return false;
+        for (char c : str.toCharArray()) if (!Character.isDigit(c)) return false;
+        return true;
+    }
+   private static boolean isAllZeros(String str) {
+        if (str == null) return true; // Maintain original behavior for null check in Float/Double path
+        // Handle optional sign for exponent part (mantissa sign handled elsewhere if needed)
+        if (str.startsWith("+") || str.startsWith("-")) str = str.substring(1);
+        // An empty string or "." should not be considered all zeros
+        if (StringUtils.isEmpty(str) || ".".equals(str)) return false;
+        for (char c : str.toCharArray()) {
+            // Allow decimal point? No, it should be stripped before calling for mantissa/exponent parts.
+            if (c != '0') return false;
+        }
+        return true; // All non-sign chars were '0'
+   }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
+     * or exponent and then try successively larger types from <code>Float</code> to
+     * <code>BigDecimal</code> to find the smallest type that accurately represents the value.
+     * If the string has no decimal point or exponent, it will be treated as an integer type, trying
+     * <code>Integer</code>, <code>Long</code>, and <code>BigInteger</code>.</p>
      *
      * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * Integral values with a leading {@code 0} (but not {@code 0x}) will be interpreted as octal; the returned number will
+     * be Integer, Long or BigInteger as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
-        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
-        int pfxLen = 0;
-        for(final String pfx : hex_prefixes) {
-            if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
-                break;
-            }
-        }
-        if (pfxLen > 0) { // we have a hex number
+
+        // Simplified hex check first, rely on createX for full parsing/validation
+        if (str.startsWith("0x") || str.startsWith("0X") || str.startsWith("-0x") || str.startsWith("-0X") || str.startsWith("#") || str.startsWith("-#")) {
+            // Determine prefix length
+            int pfxLen = (str.charAt(0) == '-') ? ((str.charAt(1) == '#') ? 2 : 3) : ((str.charAt(0) == '#') ? 1 : 2);
+            // Rough check based on hex digit count (original logic)
             final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+            if (hexDigits <= 0) { // Prefix only or invalid format
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+            // Note: Digit count doesn't guarantee value fits range (e.g., 0xFFFFFFFF > Integer.MAX_VALUE)
+            // Relying on createX to throw NFE if out of range for Integer/Long.
+            if (hexDigits > 16) { // Possibly BigInteger
                 return createBigInteger(str);
             }
-            if (hexDigits > 8) { // too many for an int
+            if (hexDigits > 8) { // Possibly Long
                 return createLong(str);
             }
-            return createInteger(str);
+            return createInteger(str); // Possibly Integer
         }
-        final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
+        // Suffix handling
+        char lastChar = str.charAt(str.length() - 1);
+        String numeric; // Number part without suffix
+        boolean hasSuffix = false;
 
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
+        // Check for valid suffix placement (preceded by digit or dot, ensure length > 1)
+        if (str.length() > 1) {
+            char beforeLast = str.charAt(str.length() - 2);
+            if (Character.isDigit(beforeLast) || beforeLast == '.') {
+                if (lastChar == 'L' || lastChar == 'l' || lastChar == 'F' || lastChar == 'f' || lastChar == 'D' || lastChar == 'd') {
+                    numeric = str.substring(0, str.length() - 1);
+                    hasSuffix = true;
+                } else {
+                    numeric = str; // Last char is not a valid suffix type
                 }
-                dec = str.substring(decPos + 1, expPos);
             } else {
-                dec = str.substring(decPos + 1);
+                 numeric = str; // Char before last is not digit or dot, so last char isn't a suffix
             }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
         } else {
+             numeric = str; // Single character string cannot have suffix
+        }
+
+
+        if (hasSuffix) {
+            // Determine parts for 'allZeros' check
+            String mantForZeroCheck = numeric;
+            String expForZeroCheck = null;
+            final int ePos = numeric.indexOf('e');
+            final int EPos = numeric.indexOf('E');
+            int expPos = (ePos > -1) ? ePos : EPos; // Allow only one exponent marker
+            if (ePos > -1 && EPos > -1) throw new NumberFormatException(str + " is not a valid number.");
+
             if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+                 // Basic validation of exponent position
+                if (expPos == 0 || expPos + 1 >= numeric.length()) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+                mantForZeroCheck = numeric.substring(0, expPos);
+                expForZeroCheck = numeric.substring(expPos + 1);
             }
-            dec = null;
+             // Remove decimal point for zero check on mantissa (if exists)
+             final int decPos = mantForZeroCheck.indexOf('.');
+             if (decPos > -1) {
+                 mantForZeroCheck = mantForZeroCheck.substring(0, decPos) + mantForZeroCheck.substring(decPos + 1);
              }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
-            }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            final boolean allZeros = isAllZeros(mantForZeroCheck) && isAllZeros(expForZeroCheck);
+
             switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                case 'l' : case 'L' :
+                    // L suffix requires integer format (no decimal, no exponent)
+                    if (numeric.indexOf('.') == -1 && expPos == -1) {
+                        // Let createLong/BigInteger handle detailed validation (digits, sign, range, octal)
                          try {
+                             // Use createLong assuming it handles octal correctly if applicable
                              return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                         } catch (final NumberFormatException nfe) {
+                             // If createLong fails (e.g., too large, invalid format), fallback to BigInteger
                              return createBigInteger(numeric);
-
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
-                    try {
-                        final Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
                          }
-
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
-                    try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
-                        }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    try {
-                        return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
                     }
-                    //$FALL-THROUGH$
-                default :
+                    // If format is wrong for L (e.g., has '.', 'e', 'E'), throw NFE
                     throw new NumberFormatException(str + " is not a valid number.");
 
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
-        }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+                case 'f' : case 'F' :
                     try {
-                return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            try {
-                return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            return createBigInteger(str);
-        }
-
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-        try {
-                final Float f = createFloat(str);
+                        final Float f = createFloat(numeric);
+                        // Check for infinity and incorrect zero representation
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
-                }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                            return f; // Return Float if valid and representable
                         }
+                        // Fall through if Float is Inf or zero when it shouldn't be
+                    } catch (final NumberFormatException nfe) { /* Fall through if parsing fails */ }
+                    // $FALL-THROUGH$ to Double attempt as per javadoc ("successively larger types")
+
+                case 'd' : case 'D' :
                     try {
-                final Double d = createDouble(str);
+                        final Double d = createDouble(numeric);
+                        // Check for infinity and incorrect zero representation
                         if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                    return d;
+                            return d; // Return Double if valid and representable
+                        }
+                        // Fall through if Double is Inf or zero when it shouldn't be
+                    } catch (final NumberFormatException nfe) { /* Fall through if parsing fails */ }
+                    // $FALL-THROUGH$ to BigDecimal attempt
+
+                default : // Fall through for F/f, D/d needing BigDecimal
+                    try {
+                        // Use the numeric part (without suffix) for BigDecimal creation
+                        return createBigDecimal(numeric);
+                    } catch (final NumberFormatException e) {
+                        // If createBigDecimal fails after falling through, the original string is invalid
+                        throw new NumberFormatException(str + " is not a valid number.");
+                    }
+            }
+        } // End of suffix handling
+
+        // No suffix: Process as Integer/Long/BigInt or Float/Double/BigDecimal
+        final int decPos = numeric.indexOf('.'); // numeric == str here
+        final int ePos = numeric.indexOf('e');
+        final int EPos = numeric.indexOf('E');
+        final int expPos = (ePos > -1) ? ePos : EPos; // Allow only one exponent marker
+        if (ePos > -1 && EPos > -1) throw new NumberFormatException(numeric + " is not a valid number.");
+
+        // Validate exponent/decimal placement relative to each other and string end
+        if (expPos > -1) {
+             if (decPos > -1 && expPos < decPos) { throw new NumberFormatException(numeric + " is not a valid number."); } // Exp before dec
+             if (expPos == 0 || expPos + 1 >= numeric.length()) { throw new NumberFormatException(numeric + " is not a valid number."); } // Dangling exp or exp at start
+        }
+        // Check for multiple decimal points
+        if (decPos > -1 && numeric.indexOf('.', decPos + 1) > -1) {
+            throw new NumberFormatException(numeric + " is not a valid number.");
+        }
+
+
+        if (decPos == -1 && expPos == -1) { // Treat as Integer/Long/BigInteger
+            // Let createX handle octal/decimal/sign validation and range checks
+            try {
+                return createInteger(numeric);
+            } catch (final NumberFormatException nfe) { /* ignore, try larger type */ }
+            try {
+                return createLong(numeric);
+            } catch (final NumberFormatException nfe) { /* ignore, try larger type */ }
+            // Final fallback for integer types
+            return createBigInteger(numeric);
+
+        } else { // Treat as Float/Double/BigDecimal (has decimal or exponent)
+            // Determine parts for 'allZeros' check
+            String mantForZeroCheck = numeric;
+            String expForZeroCheck = null;
+            if (expPos > -1) {
+                 mantForZeroCheck = numeric.substring(0, expPos);
+                 expForZeroCheck = numeric.substring(expPos + 1);
+            }
+            // Remove decimal point for zero check on mantissa (if exists)
+            final int decPosForZeroCheck = mantForZeroCheck.indexOf('.');
+            if (decPosForZeroCheck > -1) {
+                 mantForZeroCheck = mantForZeroCheck.substring(0, decPosForZeroCheck) + mantForZeroCheck.substring(decPosForZeroCheck + 1);
+            }
+            final boolean allZeros = isAllZeros(mantForZeroCheck) && isAllZeros(expForZeroCheck);
+
+            BigDecimal bigDecimal = null;
+            boolean bigDecimalCreationAttempted = false;
+
+            // Try Float if it's precise enough
+            try {
+                final Float f = createFloat(numeric);
+                 // Check for Inf/bad zero first
+                if (!f.isInfinite() && (f.floatValue() != 0.0F || allZeros)) {
+                    // Lazily create BigDecimal for precision check
+                    if (!bigDecimalCreationAttempted) {
+                        try { bigDecimal = createBigDecimal(numeric); }
+                        catch (NumberFormatException e) { /* ignore, cannot check precision */ }
+                        finally { bigDecimalCreationAttempted = true; }
+                    }
+                     // Perform precision check only if BigDecimal could be created
+                    if (bigDecimal != null) {
+                        try {
+                            // Compare value represented by Float's standard string representation with BigDecimal value
+                            if (new BigDecimal(f.toString()).compareTo(bigDecimal) == 0) {
+                                return f; // Float is precise
+                            }
+                         } catch (NumberFormatException | ArithmeticException e) {
+                             // Handle potential issues with BigDecimal(f.toString()) or comparison
+                              /* ignore comparison errors, fall through to Double */
                          }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
                     }
+                    // If BigDecimal creation failed or comparison showed loss of precision, fall through
+                }
+                // If Float is Inf, bad zero, or loses precision, fall through
+            } catch (final NumberFormatException nfe) { /* ignore createFloat failure, try Double */ }
 
-        return createBigDecimal(str);
+             // Try Double if it's precise enough
+            try {
+                final Double d = createDouble(numeric);
+                // Check for Inf/bad zero first
+                if (!d.isInfinite() && (d.doubleValue() != 0.0D || allZeros)) {
+                    // Lazily create BigDecimal for precision check
+                     if (!bigDecimalCreationAttempted) {
+                        try { bigDecimal = createBigDecimal(numeric); }
+                        catch (NumberFormatException e) { /* ignore, cannot check precision */ }
+                        finally { bigDecimalCreationAttempted = true; }
+                    }
+                     // Perform precision check only if BigDecimal could be created
+                    if (bigDecimal != null) {
+                         try {
+                             // Compare value represented by Double's standard string representation with BigDecimal value
+                             if (new BigDecimal(d.toString()).compareTo(bigDecimal) == 0) {
+                                 return d; // Double is precise
+                             }
+                         } catch (NumberFormatException | ArithmeticException e) {
+                             // Handle potential issues with BigDecimal(d.toString()) or comparison
+                             /* ignore comparison errors, fall through to BigDecimal */
+                         }
+                    }
+                    // If BigDecimal creation failed or comparison showed loss of precision, fall through
+                }
+                 // If Double is Inf, bad zero, or loses precision, fall through
+            } catch (final NumberFormatException nfe) { /* ignore createDouble failure, try BigDecimal */ }
+
+            // Final fallback for float/double/bigdecimal path is BigDecimal
+            // Create it again if needed (safer than reusing potentially stale 'bigDecimal' if checks had issues)
+            return createBigDecimal(numeric);
+        }
+    }
 }
\ No newline at end of file
