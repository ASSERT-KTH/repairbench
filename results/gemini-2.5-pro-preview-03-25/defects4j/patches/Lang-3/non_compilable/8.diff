diff --git a/tmp/ee8e8c33-d14b-492f-a850-bebd14102775_buggy.java b/tmp/882e0623-28ba-4f93-a28b-9097c41218fe_fixed.java
index b09cd82..500316c 100644
--- a/tmp/ee8e8c33-d14b-492f-a850-bebd14102775_buggy.java
+++ b/tmp/882e0623-28ba-4f93-a28b-9097c41218fe_fixed.java
@@ -1,192 +1,314 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+import org.apache.commons.lang3.StringUtils;
+
+// Added missing imports and helper stubs if needed for context, actual fix is within the function.
+// Assumed helper methods like createFloat, createDouble, createBigDecimal, createInteger, createLong, createBigInteger, isDigits, isAllZeros exist and function correctly based on their names.
+
+public class NumberUtils {
+
+    // Stubs for dependencies - Actual implementations are in Apache Commons Lang
+    private static Float createFloat(String s) { return Float.valueOf(s); }
+    private static Double createDouble(String s) { return Double.valueOf(s); }
+    private static Integer createInteger(String s) { return Integer.decode(s); }
+    private static Long createLong(String s) { return Long.decode(s); }
+    private static BigInteger createBigInteger(String s) {
+        // Simplified stub: Real impl needs proper hex/octal handling
+        int radix = 10;
+        int pfxLen = 0;
+        if (s.startsWith("0x") || s.startsWith("0X")) { radix = 16; pfxLen=2; }
+        else if (s.startsWith("#")) { radix = 16; pfxLen=1; }
+        else if (s.startsWith("0") && s.length() > 1) { radix = 8; pfxLen=1; } // Basic octal detection
+
+        if (pfxLen > 0) s = s.substring(pfxLen);
+
+        // Handle negative sign if present after prefix removal (e.g. "-#abc")
+        boolean negative = false;
+        if (s.startsWith("-")) {
+           negative = true;
+           s = s.substring(1);
+           if (s.startsWith("0x") || s.startsWith("0X")) { radix = 16; pfxLen=2; }
+           else if (s.startsWith("#")) { radix = 16; pfxLen=1; }
+           else if (s.startsWith("0") && s.length() > 1 && radix == 10) { radix = 8; pfxLen=1; } // Handle -0... as octal? Standard might not. Let's assume decimal unless 0x/#
+
+           if (pfxLen > 0) s = s.substring(pfxLen);
+        }
+
+        BigInteger val = new BigInteger(s, radix);
+        return negative ? val.negate() : val;
+    }
+    private static BigDecimal createBigDecimal(String s) { return new BigDecimal(s); }
+    private static boolean isDigits(final String str) {
+        if (StringUtils.isEmpty(str)) return false;
+        for (char c : str.toCharArray()) { if (!Character.isDigit(c)) return false; } return true;
+    }
+    private static boolean isAllZeros(final String str) {
+        if (str == null) return true;
+        for (char c : str.toCharArray()) { if (c != '0') return false; } return str.length() > 0;
+    }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * be Integer, Long or BigInteger as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
+        // Hex Handling - Simplified using Long.decode / BigInteger parsing logic
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
-        int pfxLen = 0;
+        boolean isHex = false;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                isHex = true;
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+        if (isHex) {
+             // Long.decode handles "0x", "0X", "#" prefixes, signs, and range up to Long.MAX_VALUE
+             try {
+                 return Long.decode(str);
+             } catch (final NumberFormatException nfe) {
+                 // If value is too large for Long, Long.decode throws NFE.
+                 // Fallback to BigInteger for hex. Assumes createBigInteger handles hex.
                  return createBigInteger(str);
              }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
         }
-            return createInteger(str);
+
+        // Octal Handling (added based on JavaDoc)
+        if (str.startsWith("0") && str.length() > 1) {
+            char char1 = str.charAt(1);
+            if (char1 >= '0' && char1 <= '7') { // Possible octal integer
+                 boolean isOctal = true;
+                 // Check if it's purely octal digits and doesn't contain decimal/exponent
+                 for(int i = 1; i < str.length(); i++) {
+                     char c = str.charAt(i);
+                     if (c == '.' || c == 'e' || c == 'E') {
+                         isOctal = false; // Contains decimal/exponent, treat as float below
+                         break;
+                     }
+                     if (c < '0' || c > '7') {
+                         isOctal = false; // Contains non-octal digit (e.g., "09"), treat as decimal/float below
+                         break;
+                     }
+                 }
+                 if (isOctal) {
+                     try {
+                         // Long.decode handles octal prefixed with 0 and range up to Long.MAX_VALUE
+                         return Long.decode(str);
+                     } catch (NumberFormatException nfe) {
+                         // If value is too large for Long, fall back to BigInteger.
+                         // Assumes createBigInteger handles octal based on leading 0.
+                         return createBigInteger(str);
+                     }
+                 }
+            } else if (char1 == 'x' || char1 == 'X') {
+                // Should have been caught by hex check above. Defensive check.
+                throw new NumberFormatException(str + " is not a valid number."); // Invalid state
+            }
+            // If starts with "0" but not octal (e.g. "0.", "0e", "09"), treat as decimal/float below.
         }
+
+        // General number parsing
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        // Corrected exponent position finding
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+        // Split string into parts
+        if (decPos > -1) { // has decimal
+            if (expPos > -1) { // has exponent
+                if (expPos < decPos || expPos >= str.length()) { // Invalid exponent position
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
+                mant = str.substring(0, decPos);
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+            } else { // no exponent
+                mant = str.substring(0, decPos);
                 dec = str.substring(decPos + 1);
             }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+        } else { // no decimal
+            if (expPos > -1) { // has exponent
+                if (expPos == 0 || expPos >= str.length()) { // Invalid exponent position
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
-            } else {
+            } else { // no decimal, no exponent
                 mant = str;
             }
-            dec = null;
+            dec = null; // No decimal part
         }
+
+        // Check for type qualifier suffix
         if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
+            // Determine exponent string if qualifier exists
+            if (expPos > -1 && expPos < str.length() - 1) { // Exponent exists before qualifier
                 exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
+            } else if (expPos > -1) { // Exponent indicator right before qualifier (invalid)
+                 throw new NumberFormatException(str + " is not a valid number.");
+            } else { // No exponent
                 exp = null;
             }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+            final String numeric = str.substring(0, str.length() - 1); // String without qualifier
+            // Corrected allZeros check to include decimal part
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // L/l suffix requires an integer-like format (no decimal, no exponent part)
+                    if (dec == null && exp == null &&
+                        !numeric.isEmpty() && (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric)) ) {
                         try {
+                            // Assumes createLong/BigInteger can handle potential hex/octal prefixes within `numeric` string
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                            // If Long parsing fails, try BigInteger
                              return createBigInteger(numeric);
-
                         }
+                    }
+                    // Invalid format for L/l suffix
                     throw new NumberFormatException(str + " is not a valid number.");
+
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        final Float f = createFloat(numeric);
+                        // Check prevents returning 0.0f if numeric string has non-zeros
                          if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
+                         // Allow returning Inf/-Inf or 0.0f if the string truly represents them
+                         if (f.isInfinite() && !allZeros) return f; // Allow Inf if not all zeros
+                         if (f.floatValue() == 0.0F && allZeros) return f; // Allow 0.0f if all zeros
 
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // If createFloat fails, the numeric part is invalid for float
                     }
-                    //$FALL-THROUGH$
+                    // If createFloat failed or produced an unexpected result (like 0.0f for non-zero)
+                    throw new NumberFormatException(str + " is not a valid number.");
+
                 case 'd' :
                 case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = createDouble(numeric);
+                         // Check prevents returning 0.0d if numeric string has non-zeros
+                         if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
+                         // Allow returning Inf/-Inf or 0.0d if the string truly represents them
+                         if (d.isInfinite() && !allZeros) return d; // Allow Inf if not all zeros
+                         if (d.doubleValue() == 0.0D && allZeros) return d; // Allow 0.0d if all zeros
+
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                         // If createDouble fails, the numeric part is invalid for double
                     }
-                    try {
-                        return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
+                     // If createDouble failed or produced an unexpected result
                      throw new NumberFormatException(str + " is not a valid number.");
 
+                default : // Character is not a valid number part or known qualifier
+                    throw new NumberFormatException(str + " is not a valid number.");
             }
+        } else { // No type qualifier (ends with digit or '.')
+            // Determine exponent string
+            if (expPos > -1 && expPos < str.length() - 1) { // Exponent exists and is not the last char
+                 exp = str.substring(expPos + 1);
+                 // Validate exponent part has valid digits (and optional sign)
+                 char firstExp = exp.charAt(0);
+                 String expDigits = (firstExp == '+' || firstExp == '-') ? exp.substring(1) : exp;
+                 if (expDigits.isEmpty() || !isDigits(expDigits)) {
+                     throw new NumberFormatException(str + " has invalid exponent.");
                  }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
+            } else if (expPos > -1) { // Exponent indicator 'e'/'E' is last char or has no digits after it
+                throw new NumberFormatException(str + " has incomplete exponent.");
+            } else { // No exponent
                 exp = null;
             }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
-            try {
-                return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            try {
-                return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            return createBigInteger(str);
-        }
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Determine type: Integral vs Floating Point
+            if (dec == null && exp == null) { // Integral number (no decimal, no exponent)
+                // Try Integer -> Long -> BigInteger
+                try { return createInteger(str); } catch (NumberFormatException nfe) { /* ignore */ }
+                try { return createLong(str); } catch (NumberFormatException nfe) { /* ignore */ }
+                return createBigInteger(str); // Final fallback for integrals
+
+            } else { // Floating point number (has decimal or exponent)
+                final boolean checkZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);
+
+                // Try Float -> Double -> BigDecimal, checking for precision loss
                 try {
                     final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
+                     // Check basic validity (not Inf/NaN, not 0.0 for non-zero string)
+                     if (!(f.isInfinite() || Float.isNaN(f.floatValue()) || (f.floatValue() == 0.0F && !checkZeros))) {
+                         // ** FIX: Check if Float representation is exact **
+                         // Compare BigDecimal created from string with BigDecimal created from Float's string representation
+                         try {
+                             final BigDecimal bd = createBigDecimal(str);
+                             // Use compareTo for numerical comparison, ignoring trailing zeros difference
+                             if (bd.compareTo(new BigDecimal(f.toString())) == 0) {
+                                 return f; // Return Float if it's an exact representation
                              }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                         } catch (NumberFormatException nfe_bd) { /* ignore NFE from BigDecimal creation */ }
                      }
+                } catch (NumberFormatException nfe_float) { /* ignore NFE from createFloat */ }
+
                 try {
                     final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                    return d;
+                    // Check basic validity (not Inf/NaN, not 0.0 for non-zero string)
+                     if (!(d.isInfinite() || Double.isNaN(d.doubleValue()) || (d.doubleValue() == 0.0D && !checkZeros))) {
+                         // ** FIX: Check if Double representation is exact **
+                         // Compare BigDecimal created from string with BigDecimal created from Double's string representation
+                          try {
+                             final BigDecimal bd = createBigDecimal(str);
+                             if (bd.compareTo(new BigDecimal(d.toString())) == 0) {
+                                 return d; // Return Double if it's an exact representation
                              }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                         } catch (NumberFormatException nfe_bd) { /* ignore NFE from BigDecimal creation */ }
                      }
+                } catch (NumberFormatException nfe_double) { /* ignore NFE from createDouble */ }
 
+                // Final fallback for floating point numbers if Float/Double lost precision or failed
                 return createBigDecimal(str);
             }
+        }
+    }
+}
\ No newline at end of file
