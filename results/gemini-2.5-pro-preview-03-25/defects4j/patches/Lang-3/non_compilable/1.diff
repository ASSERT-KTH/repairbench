diff --git a/tmp/7cb697a9-0952-4b5d-b9a8-e0ee17f8b842_buggy.java b/tmp/137433e8-a912-4330-8044-e71143ad84a3_fixed.java
index b09cd82..d2ef815 100644
--- a/tmp/7cb697a9-0952-4b5d-b9a8-e0ee17f8b842_buggy.java
+++ b/tmp/137433e8-a912-4330-8044-e71143ad84a3_fixed.java
@@ -1,192 +1,417 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+import org.apache.commons.lang3.StringUtils; // Assuming this import is available
+
+// Add import for NumberUtils if createFloat/Double/etc. are static methods of the same class
+// import static org.apache.commons.lang3.math.NumberUtils.*; // Example if they are in NumberUtils
+
+/**
+ * Contains the fixed createNumber method.
+ * Assuming helper methods like isAllZeros, isDigits, createFloat, createDouble,
+ * createInteger, createLong, createBigInteger are available and function correctly
+ * (especially handling hex/octal for integral types).
+ * The implementation below assumes these helpers are accessible, potentially
+ * as static methods of the same class or another utility class.
+ */
+public class NumberUtilsFixed {
+
+    // Dummy helper methods for context - replace with actual implementations from NumberUtils
+    private static Float createFloat(String str) throws NumberFormatException { return Float.valueOf(str); }
+    private static Double createDouble(String str) throws NumberFormatException { return Double.valueOf(str); }
+    private static Integer createInteger(String str) throws NumberFormatException { return Integer.decode(str); }
+    private static Long createLong(String str) throws NumberFormatException { return Long.decode(str); }
+    private static BigInteger createBigInteger(String str) throws NumberFormatException {
+        if (str == null) {
+             throw new NumberFormatException("Input string is null"); // Or return null based on contract? Method doc says throws NFE for blank.
+         }
+        int index = 0;
+        int sign = 1;
+        if (str.startsWith("-")) {
+            sign = -1;
+            index++;
+        }
+
+        int radix = 10;
+        boolean stripPrefix = true; // Flag to indicate if prefix needs stripping for BigInteger constructor
+
+        if (str.startsWith("0x", index) || str.startsWith("0X", index)) {
+            radix = 16;
+            index += 2;
+        } else if (str.startsWith("#", index)) {
+            radix = 16;
+            index++;
+        } else if (str.startsWith("0", index) && str.length() > index + 1) {
+            // Check for explicit octal (0 followed by 0-7 digits)
+            boolean allOctal = true;
+            for (int i = index + 1; i < str.length(); i++) {
+                if (str.charAt(i) < '0' || str.charAt(i) > '7') {
+                    allOctal = false;
+                    break;
+                }
+            }
+            if (allOctal) {
+                 radix = 8;
+                 index++; // Skip the '0' prefix
+            } else {
+                 // Starts with 0 but not octal (e.g. "09"), treat as decimal. BigInteger constructor handles this.
+                 radix = 10;
+                 stripPrefix = false; // Let BigInteger constructor parse the whole string as decimal
+                 index = 0; // Reset index, don't strip prefix
+                 sign = 1; // Sign handled by BigInteger constructor
+            }
+
+        } else {
+             // Standard decimal
+             radix = 10;
+             stripPrefix = false; // Let BigInteger constructor parse the whole string
+             index = 0; // Reset index
+             sign = 1; // Sign handled by BigInteger constructor
+        }
+
+        String numberPart = stripPrefix ? str.substring(index) : str;
+
+        if (numberPart.isEmpty()) {
+            throw new NumberFormatException("\"" + str + "\" is not a valid number.");
+        }
+
+        try {
+             BigInteger bi;
+             if (stripPrefix) {
+                 // We manually handle sign and prefix, parse the rest with radix
+                 bi = new BigInteger(numberPart, radix);
+                 if (sign == -1) {
+                     bi = bi.negate();
+                 }
+             } else {
+                 // Let BigInteger constructor handle sign and potential octal/decimal interpretation
+                 bi = new BigInteger(numberPart, radix); // Radix is 10 or 8 here based on previous logic
+             }
+             return bi;
+        } catch (NumberFormatException e) {
+             // Add context to the exception
+             throw new NumberFormatException("For input string: \"" + str + "\"");
+        }
+    }
+    private static BigDecimal createBigDecimal(String str) throws NumberFormatException { return new BigDecimal(str); }
+    // A more robust isAllZeros check needed? This handles basic cases.
+    // It should probably check mantissa and exponent parts identified earlier.
+    private static boolean isAllZeros(String s) {
+        if (s == null) return true;
+        for (int i = 0; i < s.length(); i++) {
+            char c = s.charAt(i);
+            if (c == '0' || c == '.' || c == '+' || c == '-') continue;
+            return false;
+        }
+        return true;
+    }
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
+     * prefix is more than 8 - or BigInteger if there are more than 16 digits. Hex numbers can be followed optionally by L or l.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * Integral values with a leading {@code 0} followed by octal digits will be interpreted as octal;
+     * the returned number will be Integer, Long or BigInteger as appropriate.
+     * A single '0' will be interpreted as decimal Integer 0. Strings like "09" will be treated as decimal.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
+
+        // Hex processing
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for (final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+
+        if (pfxLen > 0) { // Hex number
+            String hexNum = str;
+            char lastChar = str.charAt(str.length() - 1);
+            boolean hadL = false;
+
+            if (lastChar == 'l' || lastChar == 'L') {
+                hadL = true;
+                hexNum = str.substring(0, str.length() - 1); // String without 'L'
             }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+
+            String hexDigitsStr = hexNum.substring(pfxLen);
+            if (hexDigitsStr.isEmpty() || !hexDigitsStr.matches("[0-9a-fA-F]+")) {
+                 throw new NumberFormatException("\"" + str + "\" is not a valid hexadecimal number.");
              }
-            return createInteger(str);
+            final int hexDigits = hexDigitsStr.length();
+
+            if (hadL) {
+                // With 'L', must be Long or BigInteger
+                if (hexDigits > 16) {
+                    return createBigInteger(hexNum); // Assumes handles hex prefix
                 }
+                try {
+                     return createLong(hexNum); // Assumes handles hex prefix
+                 } catch (NumberFormatException nfe) {
+                      // Value might be too large for Long (e.g., unsigned > Long.MAX_VALUE)
+                      return createBigInteger(hexNum);
+                 }
+            } else {
+                // No 'L', can be Integer, Long, or BigInteger
+                if (hexDigits > 16) {
+                    return createBigInteger(hexNum); // Assumes handles hex prefix
+                }
+                try {
+                     // Try Long first, as it covers Integer range too
+                     Long val = createLong(hexNum); // Assumes handles hex prefix
+                     // Check if it fits within Integer range without loss
+                     if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {
+                         return Integer.valueOf(val.intValue());
+                     }
+                     return val;
+                 } catch (NumberFormatException nfe) {
+                      // If createLong fails (e.g., too large), fall back to BigInteger
+                      return createBigInteger(hexNum);
+                 }
+            }
+        } // End hex processing
+
+
+        // Not hex. Process qualifiers, decimal points, exponents.
         final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
+        String mant;
+        String dec = null; // Initialize dec to null
+        String exp = null; // Initialize exp to null
 
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
+        // Split string into parts based on decimal and exponent
+        if (decPos > -1) { // Has decimal point
+            if (expPos > -1) { // Has exponent
+                if (expPos < decPos || expPos >= str.length() - 1) { // Invalid exponent position or format
+                    throw new NumberFormatException("\"" + str + "\" is not a valid number.");
                 }
+                mant = str.substring(0, decPos);
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+                exp = str.substring(expPos + 1);
+            } else { // No exponent
+                mant = str.substring(0, decPos);
                 dec = str.substring(decPos + 1);
             }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
+        } else { // No decimal point
+            if (expPos > -1) { // Has exponent
+                 if (expPos >= str.length() - 1) { // Invalid exponent position or format
+                     throw new NumberFormatException("\"" + str + "\" is not a valid number.");
                  }
                 mant = str.substring(0, expPos);
-            } else {
+                exp = str.substring(expPos + 1);
+            } else { // No decimal, no exponent -> integral
                 mant = str;
+                // dec and exp remain null
             }
-            dec = null;
         }
+
+        // Check for type qualifiers (f, F, d, D, l, L)
         if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
+            final String numeric = str.substring(0, str.length() - 1); // Numeric part before qualifier
+
+            // Check if the numeric part is non-empty and potentially valid
+            if (numeric.isEmpty() || (numeric.length() == 1 && (numeric.charAt(0) == '-' || numeric.charAt(0) == '+'))) {
+                 throw new NumberFormatException("\"" + str + "\" is not a valid number.");
              }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+             // Recalculate mantissa and exponent based on 'numeric' for allZeros check
+             String qualMant = numeric; // Default if no dec/exp in numeric
+             String qualExp = null;
+             final int qualDecPos = numeric.indexOf('.');
+             int qualExpPos = numeric.indexOf('e');
+             if (qualExpPos == -1) { qualExpPos = numeric.indexOf('E'); }
+
+             if(qualDecPos > -1) {
+                 qualMant = numeric.substring(0, qualDecPos);
+                 if(qualExpPos > -1) {
+                      if(qualExpPos < qualDecPos || qualExpPos >= numeric.length() - 1) throw new NumberFormatException("\"" + str + "\" is not a valid number.");
+                     qualExp = numeric.substring(qualExpPos + 1);
+                 }
+             } else if (qualExpPos > -1) {
+                 if(qualExpPos >= numeric.length() - 1) throw new NumberFormatException("\"" + str + "\" is not a valid number.");
+                 qualMant = numeric.substring(0, qualExpPos);
+                 qualExp = numeric.substring(qualExpPos + 1);
+             }
+            // Use qualMant and qualExp for allZeros check
+            final boolean allZeros = isAllZeros(qualMant) && isAllZeros(qualExp);
+
             switch (lastChar) {
                 case 'l':
                 case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // L/l only valid for integer types (no decimal, no exponent in original string structure)
+                    if (dec == null && exp == null && numeric.matches("-?(\\d+)")) {
                          try {
+                             // Use createLong which handles octal/sign if needed (hex handled earlier)
                              return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                         } catch (final NumberFormatException nfe) {
+                             // Fall through to BigInteger for overflow
                          }
-                        return createBigInteger(numeric);
+                         return createBigInteger(numeric); // Handles octal/sign if needed
+                    }
+                    throw new NumberFormatException("\"" + str + "\" is not a valid number.");
 
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
                 case 'f':
                 case 'F':
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                        final Float f = createFloat(numeric);
+                        // Original behavior check: prevent returning 0.0f for tiny non-zero values if !allZeros
+                        if (f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)) {
+                             // Match original behavior: if Float representation is zero or infinite (and input wasn't all zeros),
+                             // it might indicate precision/range issue for Float. Fall through (implicitly handled by throwing NFE below).
+                             // Throw NFE because Float type was explicitly requested but resulted in value loss/range issue.
+                             throw new NumberFormatException("\"" + str + "\" is not a valid number.");
+                        }
+                        // If it parses to a non-infinite, non-zero (or zero if input was zero) float, return it.
                         return f;
+                    } catch (final NumberFormatException nfe) {
+                         throw new NumberFormatException("\"" + str + "\" is not a valid number.");
                     }
+                    // No fall-through
 
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
                 case 'd':
                 case 'D':
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = createDouble(numeric);
+                         // Original behavior check (similar to Float)
+                        if (d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)) { // Fixed: use doubleValue
+                            throw new NumberFormatException("\"" + str + "\" is not a valid number.");
+                        }
                          return d;
+                    } catch (final NumberFormatException nfe) {
+                         throw new NumberFormatException("\"" + str + "\" is not a valid number.");
                     }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    try {
-                        return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
+                    // No fall-through
+
                 default:
-                    throw new NumberFormatException(str + " is not a valid number.");
-
+                    throw new NumberFormatException("\"" + str + "\" is not a valid number.");
             }
+        } // End type qualifier processing
+
+
+        // No type qualifier: Auto-detect best type
+
+        // Case 1: Integral number (no decimal, no exponent)
+        if (decPos == -1 && expPos == -1) {
+             // Check for octal: starts with '0', length > 1, all digits 0-7
+             // Special case: "0" is Integer 0, not octal.
+            if (str.charAt(0) == '0' && str.length() > 1) {
+                boolean allOctalDigits = true;
+                for (int i = 1; i < str.length(); i++) {
+                    if (str.charAt(i) < '0' || str.charAt(i) > '7') {
+                        allOctalDigits = false;
+                        break;
                     }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
                 }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+                if (allOctalDigits) {
+                    // Try parsing as octal Integer -> Long -> BigInteger
                      try {
+                         // Use decode for octal handling
                          return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+                     } catch (final NumberFormatException nfe1) {
                           try {
                               return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+                          } catch (final NumberFormatException nfe2) {
+                               // BigInteger helper must handle octal prefix
                                return createBigInteger(str);
                           }
+                     }
+                }
+                // If starts with '0' but not valid octal (e.g., "09"), treat as decimal below.
+            }
+
+            // Treat as decimal Integer -> Long -> BigInteger
+             try {
+                 return createInteger(str); // Assumes handles decimal/sign
+             } catch (final NumberFormatException nfe1) {
+                 try {
+                     return createLong(str); // Assumes handles decimal/sign
+                 } catch (final NumberFormatException nfe2) {
+                      return createBigInteger(str); // Assumes handles decimal/sign
+                 }
+             }
+        } // End integral auto-detect
+
+
+        // Case 2: Floating point number (has decimal and/or exponent)
+        // Auto-detect Float -> Double -> BigDecimal, checking precision.
+        final boolean checkAllZeros = isAllZeros(mant) && isAllZeros(exp);
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         try {
             final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
+            // Check for range issues and spurious zero compared to original string
+            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !checkAllZeros))) {
+                // Float is in range and not spuriously zero. Check precision.
+                // Compare its BigDecimal value to the original string's BigDecimal value.
+                // Use try-with-resources or careful NFE handling for BigDecimal creation.
+                 try {
+                     final BigDecimal bd = createBigDecimal(str);
+                    if (BigDecimal.valueOf(f.floatValue()).compareTo(bd) == 0) {
+                        return f; // Float is precise enough
                     }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                 } catch (NumberFormatException nfeIgnore) {
+                      // Ignore NFE from createBigDecimal, proceed to Double check
                  }
+            }
+        } catch (final NumberFormatException nfeIgnore) {
+            // Ignore NFE from createFloat, proceed to Double check
+        }
+
         try {
             final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                    return d;
+            // Check for range issues and spurious zero (fixed: use doubleValue)
+            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !checkAllZeros))) {
+                 // Double is in range. Check precision.
+                 try {
+                    final BigDecimal bd = createBigDecimal(str);
+                    if (BigDecimal.valueOf(d.doubleValue()).compareTo(bd) == 0) {
+                         return d; // Double is precise enough
                     }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+                 } catch (NumberFormatException nfeIgnore) {
+                     // Ignore NFE from createBigDecimal, proceed to final BigDecimal fallback
+                 }
+            }
+        } catch (final NumberFormatException nfeIgnore) {
+             // Ignore NFE from createDouble, proceed to final BigDecimal fallback
         }
 
+        // Fallback for floating point numbers: Create and return BigDecimal
         return createBigDecimal(str);
     }
+}
\ No newline at end of file
