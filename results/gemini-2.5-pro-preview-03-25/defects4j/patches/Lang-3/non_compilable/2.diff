diff --git a/tmp/ced6fd30-6712-464b-856d-2e81e7e10431_buggy.java b/tmp/42ffcc55-5766-47c4-bf92-5195f0f69356_fixed.java
index b09cd82..1cedab5 100644
--- a/tmp/ced6fd30-6712-464b-856d-2e81e7e10431_buggy.java
+++ b/tmp/42ffcc55-5766-47c4-bf92-5195f0f69356_fixed.java
@@ -1,192 +1,295 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
-     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
-     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Assumes the following are imported or available in the same class:
+// import org.apache.commons.lang3.StringUtils;
+// Helper methods: createFloat, createDouble, createBigDecimal, createInteger, createLong, createBigInteger
+// Helper method: isDigits (implementation provided below if needed)
+
+
 public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
-        // Need to deal with all possible hex prefixes here
-        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
-        int pfxLen = 0;
+
+    // Simplified handling of hex prefixes. Let decode/BigInteger handle parsing.
+    final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X"}; // Standard prefixes
+    int pfxLen = 0; // Detect if string starts with a standard hex prefix.
     for(final String pfx : hex_prefixes) {
         if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+            pfxLen = pfx.length();
             break;
         }
     }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+
+    if (pfxLen > 0 && pfxLen < str.length()) { // Standard hex format (0x/0X/-0x/-0X) followed by digits
+         // Try parsing using decode for Integer/Long, then fallback to BigInteger
+         try {
+             // Integer.decode handles 0x/0X and sign
+             return Integer.decode(str);
+         } catch (final NumberFormatException nfe1) {
+             try {
+                 // Long.decode handles 0x/0X and sign
+                 return Long.decode(str);
+             } catch (final NumberFormatException nfe2) {
+                 // Decode failed, likely too large for Long. Use BigInteger.
+                 String hexStr = str;
+                 boolean isNegative = false;
+                 if (str.startsWith("-")) {
+                     isNegative = true;
+                     hexStr = str.substring(3); // Skip "-0x" or "-0X"
+                 } else {
+                     hexStr = str.substring(2); // Skip "0x" or "0X"
                  }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+                 try {
+                     BigInteger result = new BigInteger(hexStr, 16);
+                     if (isNegative) {
+                         result = result.negate();
                      }
-            return createInteger(str);
+                     return result;
+                 } catch (final NumberFormatException nfe3) {
+                      // If BigInteger parsing fails, the format is invalid
+                      throw new NumberFormatException(str + " is not a valid number.");
                  }
+             }
+         }
+    }
+
+    // Handle '#' hex format (less common, decode doesn't support)
+    if (str.startsWith("#") && str.length() > 1) {
+        try {
+             return new BigInteger(str.substring(1), 16);
+         } catch (final NumberFormatException nfe) {
+              // BigInteger parsing failed
+              throw new NumberFormatException(str + " is not a valid number.");
+         }
+    }
+    if (str.startsWith("-#") && str.length() > 2) {
+         try {
+             return new BigInteger(str.substring(2), 16).negate();
+         } catch (final NumberFormatException nfe) {
+             // BigInteger parsing failed
+             throw new NumberFormatException(str + " is not a valid number.");
+         }
+    }
+    // At this point, str is not null, blank, or a recognized hex format.
+
     final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+    final String numeric; // Numeric part without qualifier
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
+    boolean hasQualifier = (lastChar == 'l' || lastChar == 'L' ||
+                          lastChar == 'f' || lastChar == 'F' ||
+                          lastChar == 'd' || lastChar == 'D');
 
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
+    if (hasQualifier && str.length() > 1) { // Ensure qualifier is not the only char
+        numeric = str.substring(0, str.length() - 1);
     } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
+        numeric = str; // No qualifier or qualifier is the only char (invalid)
+        hasQualifier = false; // Treat single char qualifiers as part of the number if not hex/octal
     }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+
+    final int decPos = numeric.indexOf('.');
+    int expPos = numeric.indexOf('e');
+    if (expPos == -1) {
+        expPos = numeric.indexOf('E');
     }
-            dec = null;
+    boolean isDecimals = decPos > -1;
+    boolean hasExp = expPos > -1;
+
+    // Handle L/l qualifier
+    if (hasQualifier && (lastChar == 'l' || lastChar == 'L')) {
+        // Check for invalid characters or format for Long/BigInteger
+        if (isDecimals || hasExp || StringUtils.isEmpty(numeric) || (numeric.charAt(0) == '-' && numeric.length() == 1)) {
+            throw new NumberFormatException(str + " is not a valid number.");
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
+        // Check if numeric part contains only digits (optional leading '-')
+        boolean isValidInteger = (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric));
+        if (!isValidInteger) {
+             throw new NumberFormatException(str + " is not a valid number.");
         }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+        // Try Long first, then BigInteger
         try {
+            // Assumes createLong uses Long.valueOf/parseLong which handle decimal strings
             return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+        } catch (final NumberFormatException nfe) {
+            // Assumes createBigInteger uses new BigInteger() which handles decimal strings
             return createBigInteger(numeric);
+        }
+    }
 
+    // Validate exponent part if present (relevant for F/D and non-qualified)
+    if (hasExp) {
+         if (expPos + 1 >= numeric.length()) { // No digits after 'e'/'E'
+             throw new NumberFormatException(str + " is not a valid number.");
          }
+         String expPart = numeric.substring(expPos + 1);
+         // Check exponent is valid integer (allow leading sign, must have digits)
+         boolean isValidExp = (expPart.charAt(0) == '+' || expPart.charAt(0) == '-') ? isDigits(expPart.substring(1)) : isDigits(expPart);
+         // Also check that it's not just a sign
+         if (!isValidExp || (expPart.length() == 1 && (expPart.charAt(0) == '+' || expPart.charAt(0) == '-'))) {
              throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+         }
+    }
+
+    // Handle F/f qualifier
+    if (hasQualifier && (lastChar == 'f' || lastChar == 'F')) {
+        try {
+            // Assumes createFloat uses Float.valueOf which parses standard float strings
+            final Float f = createFloat(numeric);
+            // Check for Inf/Zero using BigDecimal signum for robustness against underflow to 0
+            boolean checkZero = f.floatValue() == 0.0F;
+            boolean nonZeroInput = true; // Assume true unless BigDecimal parsing fails or confirms zero
+            if (checkZero) {
                 try {
-                        final Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                     nonZeroInput = new BigDecimal(numeric).signum() != 0;
+                } catch (NumberFormatException ignore) { /* Invalid format handled below */ }
+            }
+
+            // Return Float if not Inf and not zero unless input was non-zero
+            if (!(f.isInfinite() || (checkZero && nonZeroInput))) {
                 return f;
             }
+            // If Float is Inf/Zero or NFE, fall through to try Double/BigDecimal as per Javadoc intent
+        } catch (final NumberFormatException nfe) { /* Fall through */ }
+        // Fall through to Double/BigDecimal logic
+    }
 
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+    // Handle D/d qualifier or F/f fallthrough
+    if (hasQualifier && (lastChar == 'd' || lastChar == 'D' || lastChar == 'f' || lastChar == 'F')) {
+         try {
+            // Assumes createDouble uses Double.valueOf
+            final Double d = createDouble(numeric);
+            boolean checkZero = d.doubleValue() == 0.0D;
+            boolean nonZeroInput = true;
+            if (checkZero) {
+                 try {
+                      nonZeroInput = new BigDecimal(numeric).signum() != 0;
+                 } catch (NumberFormatException ignore) { /* Invalid format handled below */ }
             }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
-                    try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+            // Return Double if not Inf and not zero unless input was non-zero
+            if (!(d.isInfinite() || (checkZero && nonZeroInput))) {
                 return d;
             }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
+             // If Double is Inf/Zero or NFE, fall through to try BigDecimal
+        } catch (final NumberFormatException nfe) { /* Fall through */ }
+         // Try BigDecimal as a last resort for qualified D/d/F/f
          try {
+             // Assumes createBigDecimal uses new BigDecimal()
              return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
+         } catch (final NumberFormatException e) {
+             // If even BigDecimal fails for an explicitly qualified number, it's invalid.
              throw new NumberFormatException(str + " is not a valid number.");
+         }
+    }
 
+    // No qualifier: Infer type based on presence of '.', 'e'/'E' and magnitude
+    if (!isDecimals && !hasExp) { // Potential integer type
+        // Check for octal '0' prefix (ensure not '0' alone, not hex)
+        if (str.startsWith("0") && str.length() > 1) {
+            boolean isOctal = true;
+            for (int i = 1; i < str.length(); i++) {
+                char c = str.charAt(i);
+                if (c < '0' || c > '7') {
+                    isOctal = false;
+                    break;
                 }
             }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
+             if (isOctal) {
+                 try {
+                     // Use decode for octal interpretation (handles sign and range)
+                      try {
+                         return Integer.decode(str);
+                     } catch (NumberFormatException nfe1) {
+                          try {
+                             return Long.decode(str);
+                         } catch (NumberFormatException nfe2) {
+                              // decode failed (likely too large), try BigInteger octal parsing
+                             if (str.startsWith("-"))
+                                 // Handle negative octal like "-0123"
+                                 return new BigInteger("-" + str.substring(2), 8);
+                             else
+                                 return new BigInteger(str.substring(1), 8); // Handle positive octal like "0123"
+                         }
+                     }
+                 } catch (final NumberFormatException ex) {
+                      // Javadoc: "Integral values with a leading 0 will be interpreted as octal"
+                      // This implies failure if it looks octal but isn't valid.
+                      throw new NumberFormatException("Cannot parse " + str + " as octal");
+                 }
+             }
+             // If not valid octal (e.g., "09"), treat as decimal below.
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+        // Standard decimal integer parsing: try Integer -> Long -> BigInteger
         try {
+            // Assumes createInteger uses Integer.valueOf/parseInt for decimal
             return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+        } catch (final NumberFormatException nfe) { /* ignore */ }
         try {
+            // Assumes createLong uses Long.valueOf/parseLong for decimal
             return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            return createBigInteger(str);
-        }
+        } catch (final NumberFormatException nfe) { /* ignore */ }
+        // Assumes createBigInteger uses new BigInteger() for decimal
+        return createBigInteger(str); // Let BigInteger throw NFE if invalid format
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+    } else { // Potential floating point type (has '.' or 'e'/'E')
+         // Try Float -> Double -> BigDecimal using the Inf/Zero check
          try {
+             // Use full original string 'str' for floating point types
              final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+             boolean checkZero = f.floatValue() == 0.0F;
+             boolean nonZeroInput = true;
+             if (checkZero) {
+                  try {
+                       nonZeroInput = new BigDecimal(str).signum() != 0;
+                  } catch (NumberFormatException ignore) { /* Invalid format handled by createBigDecimal below */ }
+             }
+             // Return Float if valid (not Inf, not zero unless input was zero)
+             if (!(f.isInfinite() || (checkZero && nonZeroInput))) {
                  return f;
              }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+         } catch (final NumberFormatException nfe) { /* ignore, try Double */ }
+
          try {
              final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+             boolean checkZero = d.doubleValue() == 0.0D;
+             boolean nonZeroInput = true;
+             if (checkZero) {
+                  try {
+                       nonZeroInput = new BigDecimal(str).signum() != 0;
+                  } catch (NumberFormatException ignore) { /* Invalid format handled by createBigDecimal below */ }
+             }
+             // Return Double if valid (not Inf, not zero unless input was zero)
+             if (!(d.isInfinite() || (checkZero && nonZeroInput))) {
                 return d;
              }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+         } catch (final NumberFormatException nfe) { /* ignore, try BigDecimal */ }
+
+         // Fallback to BigDecimal for implicit floating point numbers
+         return createBigDecimal(str); // Let BigDecimal throw NFE if invalid format
+    }
 }
 
-        return createBigDecimal(str);
+/**
+ * Checks if the String contains only digit characters.
+ * Null or empty Strings return false.
+ * Assumes Character.isDigit handles Unicode digits appropriately if required.
+ * @param str the String to check
+ * @return true if str contains only digit characters
+ */
+private static boolean isDigits(final String str) {
+    if (StringUtils.isEmpty(str)) {
+        return false;
+    }
+    for (int i = 0; i < str.length(); i++) {
+        if (!Character.isDigit(str.charAt(i))) {
+            return false;
         }
+    }
+    return true;
+}
+
+// Assume necessary helper methods like createFloat, createDouble, etc., exist elsewhere in NumberUtils.
+// Assume StringUtils is available.
\ No newline at end of file
