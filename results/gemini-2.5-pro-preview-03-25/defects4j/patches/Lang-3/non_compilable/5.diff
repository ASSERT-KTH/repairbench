diff --git a/tmp/cbc0b1a1-e32e-4247-a2d2-52b6a8b8b9d3_buggy.java b/tmp/34909877-9bb8-4420-afc0-b2cd5e3233e2_fixed.java
index b09cd82..adc7031 100644
--- a/tmp/cbc0b1a1-e32e-4247-a2d2-52b6a8b8b9d3_buggy.java
+++ b/tmp/34909877-9bb8-4420-afc0-b2cd5e3233e2_fixed.java
@@ -1,192 +1,253 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
-     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
-     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
+import org.apache.commons.lang3.StringUtils;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// The user requested only the fixed function. Assume necessary imports and helper methods exist.
+// We also assume the existence and correctness of isDigits, createFloat, createDouble,
+// createInteger, createLong, createBigInteger, createBigDecimal as per Apache Commons Lang context.
+
 public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
     // Need to deal with all possible hex prefixes here
     final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
     int pfxLen = 0;
     for(final String pfx : hex_prefixes) {
         if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+            pfxLen = pfx.length();
             break;
         }
     }
     if (pfxLen > 0) { // we have a hex number
+        // Potentially check for sign character if prefix is just '#' or '-#'?
+        // The current check seems fine if createX methods handle prefixes.
         final int hexDigits = str.length() - pfxLen;
         if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+            return createBigInteger(str); // Let createBigInteger handle hex parsing
         }
         if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+            return createLong(str); // Let createLong handle hex parsing
         }
-            return createInteger(str);
+        return createInteger(str); // Let createInteger handle hex parsing
     }
+
+    // Standard number parsing
     final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
+    final String mant;
+    final String dec;
+    // final String exp; // Not needed directly, only its presence (expPos) and value for isAllZeros check?
     final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+    int expPos = str.indexOf('e'); // Find first 'e' or 'E'
+    if (expPos == -1) {
+        expPos = str.indexOf('E');
+    }
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+    // Parse mantissa and decimal part based on '.' and 'e'/'E' positions
+    // This logic seems generally okay, relies on downstream parsing to catch subtle errors like "1.e"
+    if (decPos > -1) { // contains decimal point '.'
+        if (expPos > -1) { // also contains 'e' or 'E'
+            if (expPos < decPos) { // 'e'/'E' cannot appear before '.'
                 throw new NumberFormatException(str + " is not a valid number.");
             }
+            mant = str.substring(0, decPos);
             dec = str.substring(decPos + 1, expPos);
-            } else {
+        } else { // contains '.' but no 'e'/'E'
+            mant = str.substring(0, decPos);
             dec = str.substring(decPos + 1);
         }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
+    } else { // no decimal point '.'
+        if (expPos > -1) { // contains 'e' or 'E' but no '.'
             mant = str.substring(0, expPos);
-            } else {
+            dec = null; // No decimal part
+        } else { // no '.' and no 'e'/'E' (integer format potentially)
             mant = str;
-            }
             dec = null;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
-            }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+    }
+
+    // Calculate allZeros flag: true if mantissa and decimal part are all zeros (ignoring sign)
+    // This is used to prevent returning Float/Double if they underflow to 0.0 from a non-zero input.
+    boolean allZeros = true;
+    int mantStart = 0;
+    if (mant != null && !mant.isEmpty() && (mant.charAt(0) == '-' || mant.charAt(0) == '+')) {
+        mantStart = 1; // Skip sign character if present
+    }
+    if (mant != null) {
+        for (int i = mant.length() - 1; i >= mantStart; i--) {
+            if (mant.charAt(i) >= '1' && mant.charAt(i) <= '9') {
+                allZeros = false;
+                break;
+            }
+        }
+    }
+    // Check decimal part only if mantissa was all zeros
+    if (allZeros && dec != null) {
+        for (int i = dec.length() - 1; i >= 0; i--) {
+            if (dec.charAt(i) >= '1' && dec.charAt(i) <= '9') {
+                allZeros = false;
+                break;
+            }
+        }
+    }
+
+
+    // Handle type qualifiers (L, F, D) or general number parsing
+    if (!Character.isDigit(lastChar) && lastChar != '.') { // Potential type qualifier
+        final String numeric = str.substring(0, str.length() - 1); // String without suffix
+
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                // Valid Long format: no decimal, no exponent before suffix. Check digits.
+                if (dec == null && expPos == -1
+                    && (numeric.isEmpty() || numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                     try {
+                        // Assume createLong handles octal prefix '0' if needed.
                         return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                    } catch (final NumberFormatException nfe) {
+                        // Fallback to BigInteger for overflow. Assume createBigInteger handles octal.
                         return createBigInteger(numeric);
-
                     }
-                    throw new NumberFormatException(str + " is not a valid number.");
+                }
+                throw new NumberFormatException(str + " is not a valid number."); // Invalid format for L/l suffix
             case 'f':
             case 'F':
                 try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                    final Float f = createFloat(numeric);
+                    // Use calculated allZeros flag
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
+                        return f; // Return Float if not infinite and not an underflow-to-zero case
                     }
-
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    // Otherwise (Infinite or zero-underflow), fall through to try larger types
+                } catch (final NumberFormatException nfe) {
+                    // Ignore NFE (e.g., invalid format) and fall through, potentially trying Double/BigDecimal
                 }
-                    //$FALL-THROUGH$
+                //$FALL-THROUGH$ intended for overflow/underflow cases, consistent with original code structure
             case 'd':
             case 'D':
                 try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
+                    final Double d = createDouble(numeric);
+                    // FIX: Use d.doubleValue() instead of d.floatValue()
+                    // Use calculated allZeros flag
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                        return d; // Return Double if not infinite and not an underflow-to-zero case
                     }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                     // Otherwise (Infinite or zero-underflow), fall through to try BigDecimal
+                } catch (final NumberFormatException nfe) {
+                    // Ignore NFE (e.g., invalid format) and fall through to try BigDecimal
                 }
+                // Fall through for D/d suffix if Double failed or resulted in Inf/underflow
+                // Also fall through for F/f suffix here
                 try {
+                    // Use createBigDecimal on the numeric part (without suffix)
                     return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                } catch (final NumberFormatException e) {
+                    // If createBigDecimal also fails, the original string with suffix is invalid
+                    // Let this NFE propagate? Or throw the generic one? Original fell through to default.
+                    // Throwing here might be clearer if BD fails after F/D request.
+                    // throw new NumberFormatException(str + " is not a valid number.");
+                    // Let's match original code's behavior: fall through if BD fails too.
                 }
                 //$FALL-THROUGH$
             default:
+                // Invalid suffix character
                 throw new NumberFormatException(str + " is not a valid number.");
-
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+
+    } else { // No type qualifier (or ends in '.')
+        // Handle integer types (no '.', no 'e'/'E') vs float types
+
+        if (expPos == -1 && decPos == -1) { // Looks like an Integer/Long/BigInteger
+            // Check for octal '0' prefix. Assume createInteger/Long/BigInteger handle it correctly.
+            // (Java standard decode/valueOf methods handle hex "0x" and octal "0" prefixes)
             try {
                 return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+            } catch (final NumberFormatException nfe) { /* Ignore, try next larger type */ }
             try {
                 return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+            } catch (final NumberFormatException nfe) { /* Ignore, try next larger type */ }
+            // Final fallback for integer types. Assumes createBigInteger handles decimal/octal.
             return createBigInteger(str);
         }
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Looks like a Float/Double/BigDecimal (has '.' or 'e'/'E')
         try {
             final Float f = createFloat(str);
+            // Use calculated allZeros flag
             if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                 return f;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+        } catch (final NumberFormatException nfe) { /* Ignore, try next larger type */ }
         try {
             final Double d = createDouble(str);
+             // FIX: Use d.doubleValue() instead of d.floatValue()
+             // Use calculated allZeros flag
             if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                 return d;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+        } catch (final NumberFormatException nfe) { /* Ignore, try next larger type */ }
 
+        // Final fallback for float types
         return createBigDecimal(str);
     }
+}
+
+// Dummy helper methods assumed to exist in the original class
+// These are needed for the provided code snippet to be complete in isolation.
+// In the actual Apache Commons Lang library, these would be the real implementations.
+private static boolean isDigits(String cs) {
+    if (StringUtils.isEmpty(cs)) {
+        return false;
+    }
+    for (int i = 0; i < cs.length(); i++) {
+        if (!Character.isDigit(cs.charAt(i))) {
+            return false;
+        }
+    }
+    return true;
+}
+public static Float createFloat(final String str) { return Float.valueOf(str); }
+public static Double createDouble(final String str) { return Double.valueOf(str); }
+public static Integer createInteger(final String str) { return Integer.decode(str); }
+public static Long createLong(final String str) { return Long.decode(str); }
+public static BigInteger createBigInteger(final String str) {
+    int pfxLen = 0;
+    int radix = 10;
+    if (str.startsWith("0x") || str.startsWith("0X")) {
+        pfxLen = 2; radix = 16;
+    } else if (str.startsWith("#")) {
+        pfxLen = 1; radix = 16;
+    } else if (str.startsWith("-0x") || str.startsWith("-0X")) {
+        pfxLen = 3; radix = 16;
+    } else if (str.startsWith("-#")) {
+        pfxLen = 2; radix = 16;
+    } else if (str.startsWith("0") && !str.equals("0") && !str.contains(".")) { // Check for octal
+         // Check if it's really octal (only 0-7 digits after leading 0)
+         boolean isOctal = true;
+         int start = str.startsWith("-") ? 2 : 1;
+         for(int i=start; i<str.length(); ++i) {
+             if (str.charAt(i) < '0' || str.charAt(i) > '7') {
+                 isOctal = false;
+                 break;
+             }
+         }
+         if (isOctal) {
+             pfxLen = str.startsWith("-") ? 1 : 0; // Keep sign if present
+             radix = 8;
+         } else {
+            pfxLen = 0; radix = 10; // Treat as decimal if not valid octal like "09"
+         }
+    }
+
+    if (pfxLen > 0) {
+        String num = str.substring(pfxLen);
+        BigInteger val = new BigInteger(num, radix);
+        return (str.charAt(0) == '-') ? val.negate() : val;
+    }
+    return new BigInteger(str, radix);
+}
+public static BigDecimal createBigDecimal(final String str) { return new BigDecimal(str); }
\ No newline at end of file
