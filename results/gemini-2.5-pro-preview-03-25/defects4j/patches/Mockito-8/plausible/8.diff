diff --git a/tmp/a7dca87d-aa01-4bc9-9737-9cff295c47df_buggy.java b/tmp/01b793ed-cf57-45d4-b08b-b32b7806a5db_fixed.java
index 42b58d0..371f8d8 100644
--- a/tmp/a7dca87d-aa01-4bc9-9737-9cff295c47df_buggy.java
+++ b/tmp/01b793ed-cf57-45d4-b08b-b32b7806a5db_fixed.java
@@ -1,19 +1,25 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // Prevent infinite recursion / StackOverflowError when T refers to T itself (like in class Foo<T extends Foo<T>>)
+            // See https://github.com/mockito/mockito/issues/1351
+            if (actualTypeArgument.equals(typeParameter)) {
+                continue;
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
