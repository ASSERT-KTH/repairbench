diff --git a/tmp/705650c9-21fa-4576-a51e-d743e391c7c1_buggy.java b/tmp/1fd4e159-67d6-435d-bb82-027933803f31_fixed.java
index 42b58d0..387040d 100644
--- a/tmp/705650c9-21fa-4576-a51e-d743e391c7c1_buggy.java
+++ b/tmp/1fd4e159-67d6-435d-bb82-027933803f31_fixed.java
@@ -1,19 +1,45 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        Type rawType = parameterizedType.getRawType();
+
+        // The raw type of a ParameterizedType is expected to be Class<?>.
+        // If it's not a Class, it cannot have type parameters in the way Class.getTypeParameters() expects.
+        if (!(rawType instanceof Class<?>)) {
+            return;
+        }
+
+        TypeVariable<?>[] typeParameters = ((Class<?>) rawType).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+        // Basic sanity check, though ParameterizedType should ensure this.
+        if (typeParameters.length != actualTypeArguments.length) {
+           // Inconsistent state, return to avoid potential errors.
+           return;
+        }
+
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // Fix for StackOverflowError:
+            // Avoid mapping a type variable to itself (e.g., T -> T).
+            // This occurs in recursive type definitions like class X<T extends X<T>>
+            // when processing the bound X<T>. Such a mapping is unhelpful for resolution
+            // and can lead to infinite recursion if the resolution algorithm follows the mapping.
+            if (actualTypeArgument.equals(typeParameter)) {
+                continue; // Skip self-mapping
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
+                // Register the mapping from the type variable (e.g., T in List<T>)
+                // to the actual type argument (e.g., String in List<String>).
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
