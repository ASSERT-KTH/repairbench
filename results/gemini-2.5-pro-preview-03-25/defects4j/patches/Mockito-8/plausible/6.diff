diff --git a/tmp/bb2cb2dd-93d5-4d58-9a21-21ab441dcf6a_buggy.java b/tmp/769b275c-4e0e-4941-ba1b-50206b5d31bc_fixed.java
index 42b58d0..0eb77b9 100644
--- a/tmp/bb2cb2dd-93d5-4d58-9a21-21ab441dcf6a_buggy.java
+++ b/tmp/769b275c-4e0e-4941-ba1b-50206b5d31bc_fixed.java
@@ -1,19 +1,27 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        // TypeVariable is declared by GenericDeclaration, which is Class, Method or Constructor.
+        // In this context, we are only dealing with Class<T> types, hence the cast is safe
+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // Prevent recursive mapping like T -> T which can cause StackOverflowError
+            // See https://github.com/mockito/mockito/issues/1467
+            if (actualTypeArgument.equals(typeParameter)) {
+                continue;
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
