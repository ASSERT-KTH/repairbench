diff --git a/tmp/50c915c8-6a26-45a8-a9c9-1e54c1ccaf7b_buggy.java b/tmp/ffd8203c-43f6-4b6f-b7e4-3f9f8312868a_fixed.java
index 42b58d0..fdf0563 100644
--- a/tmp/50c915c8-6a26-45a8-a9c9-1e54c1ccaf7b_buggy.java
+++ b/tmp/ffd8203c-43f6-4b6f-b7e4-3f9f8312868a_fixed.java
@@ -1,19 +1,50 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        Type rawType = parameterizedType.getRawType();
+
+        // Type parameters are defined on classes/interfaces
+        if (!(rawType instanceof Class<?>)) {
+            // If the raw type is not a Class (e.g., a TypeVariable), it cannot declare type parameters.
+             return;
+        }
+        Class<?> rawClass = (Class<?>) rawType;
+
+        TypeVariable<?>[] typeParameters = rawClass.getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+        // According to the ParameterizedType contract, the number of actual type arguments
+        // must match the number of formal type parameters. We rely on this contract here.
+        // An explicit check could be added for robustness if needed:
+        // if (typeParameters.length != actualTypeArguments.length) { /* handle error */ }
+
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            // Check index bounds defensively, although lengths should match by contract.
+            if (i >= typeParameters.length) {
+                // This case should technically not happen for valid ParameterizedTypes.
+                break; 
+            }
+            
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // FIX: Prevent recursive mapping like T -> T for the same TypeVariable.
+            // This occurs when resolving types involving self-references (e.g., bounds like
+            // <T extends Comparable<T>> or types like Enum<E extends Enum<E>>).
+            // Registering T -> T in the context map can lead to infinite recursion
+            // during subsequent type resolution lookups, causing StackOverflowError.
+            if (typeParameter.equals(actualTypeArgument)) {
+                continue; // Skip registration if type variable maps to itself.
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
+                // Assuming boundsOf method correctly resolves the bounds of the wildcard.
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
