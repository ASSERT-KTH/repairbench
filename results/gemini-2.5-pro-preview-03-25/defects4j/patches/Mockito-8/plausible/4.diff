diff --git a/tmp/9f9390d6-1f83-4794-a009-c3494d609295_buggy.java b/tmp/8ab7a3cd-faef-459a-9130-35eccd59e36f_fixed.java
index 42b58d0..e3e0e1f 100644
--- a/tmp/9f9390d6-1f83-4794-a009-c3494d609295_buggy.java
+++ b/tmp/8ab7a3cd-faef-459a-9130-35eccd59e36f_fixed.java
@@ -1,19 +1,47 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+        // Defensive check for length mismatch, though theoretically shouldn't happen with valid types.
+        if (actualTypeArguments.length != typeParameters.length) {
+            // Log or handle inconsistency if necessary, but for basic fix, proceed cautiously.
+            // To prevent potential IndexOutOfBoundsException, use the minimum length.
+             int length = Math.min(actualTypeArguments.length, typeParameters.length);
+             // Consider logging a warning here if such state is possible and problematic.
+             // logger.warn("Mismatch between type parameters and actual arguments: " + parameterizedType);
+             // If proceeding is unsafe, could return here or throw an exception.
+             // For now, let's proceed with the minimum length to avoid crashing,
+             // although this might lead to incomplete type information.
+             // A safer alternative might be to return if lengths don't match.
+             // Let's stick to the original loop length assuming valid inputs,
+             // as the core issue is recursion, not length mismatch.
+        }
+
+
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // Prevent infinite recursion in cases like Enum<T extends Enum<T>>
+            // where the actual type argument is the type variable itself.
+            // This avoids adding a mapping like T -> T in the context map,
+            // which can cause StackOverflowError during resolution if T is looked up
+            // and the resolution attempts to resolve the mapped value recursively.
+            if (actualTypeArgument.equals(typeParameter)) {
+                continue;
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
+                // This includes ParameterizedType, GenericArrayType, Class, and potentially TypeVariable
+                // (if the actual argument is a type variable from an outer scope, different from typeParameter).
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
