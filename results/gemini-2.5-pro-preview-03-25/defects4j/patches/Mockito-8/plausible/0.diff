diff --git a/tmp/0290dbf9-040c-44dc-98fe-f5510a4fc203_buggy.java b/tmp/df90cbe6-8315-4c59-b61f-91863da96b0b_fixed.java
index 42b58d0..95c2a5e 100644
--- a/tmp/0290dbf9-040c-44dc-98fe-f5510a4fc203_buggy.java
+++ b/tmp/df90cbe6-8315-4c59-b61f-91863da96b0b_fixed.java
@@ -1,19 +1,37 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        // Using TypeVariable<?> is cleaner and avoids raw type warnings if applicable elsewhere.
+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+        // Basic check for argument length mismatch. While ParameterizedType should guarantee this,
+        // adding a check might prevent potential ArrayOutOfBoundsException in edge cases or malformed types.
+        if (typeParameters.length != actualTypeArguments.length) {
+            // Consider logging a warning or throwing an exception for unexpected state
+            // For now, just return to avoid potential errors.
+            return;
+        }
+
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // THE FIX: Avoid registering a mapping from a TypeVariable to itself,
+            // as this can cause infinite recursion (StackOverflowError) during type resolution,
+            // especially with recursive type bounds like <T extends自身の型<T>>.
+            if (!actualTypeArgument.equals(typeParameter)) {
                 if (actualTypeArgument instanceof WildcardType) {
+                    // Existing logic for WildcardType
                     contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
                 } else {
+                    // Existing logic for other types
                     contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                 }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+                // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(actualTypeArgument) + ")" + "' }");
+            }
+            // If actualTypeArgument.equals(typeParameter), we skip the put operation to prevent recursion.
         }
     }
\ No newline at end of file
