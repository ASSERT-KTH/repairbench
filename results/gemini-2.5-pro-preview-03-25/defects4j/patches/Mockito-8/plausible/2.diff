diff --git a/tmp/8502f223-1e58-4e7d-9db2-66f9da01cdf4_buggy.java b/tmp/eca0e9fe-9a56-4d5b-a14a-05aabaf89a8a_fixed.java
index 42b58d0..ba5428a 100644
--- a/tmp/8502f223-1e58-4e7d-9db2-66f9da01cdf4_buggy.java
+++ b/tmp/eca0e9fe-9a56-4d5b-a14a-05aabaf89a8a_fixed.java
@@ -1,19 +1,41 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        Type rawType = parameterizedType.getRawType();
+        // Ensure the raw type is a Class before getting type parameters
+        if (!(rawType instanceof Class)) {
+            return;
+        }
+        TypeVariable<?>[] typeParameters = ((Class<?>) rawType).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+        // Add basic sanity check for length mismatch, although this shouldn't happen with valid types
+        if (actualTypeArguments.length != typeParameters.length) {
+             // This might indicate an inconsistent type structure. Silently returning might be
+             // reasonable if the caller handles missing type information gracefully.
+             // Alternatively, logging a warning or throwing an exception could be considered.
+            return;
+        }
+
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // Prevent mapping a type variable to itself (e.g., T -> T in class Foo<T extends Foo<T>>)
+            // Such mappings don't provide new resolution information and can lead to
+            // infinite recursion when resolving types like T in the example.
+            if (actualTypeArgument.equals(typeParameter)) {
+                continue;
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
+                // Assuming boundsOf correctly extracts the bound(s) of the wildcard
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
