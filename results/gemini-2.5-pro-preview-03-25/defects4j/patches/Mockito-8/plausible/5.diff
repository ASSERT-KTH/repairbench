diff --git a/tmp/2f6c8aca-41bb-4646-b796-5bc4e39c087c_buggy.java b/tmp/3cf9b289-8af9-4085-ad80-0637653a040f_fixed.java
index 42b58d0..124549a 100644
--- a/tmp/2f6c8aca-41bb-4646-b796-5bc4e39c087c_buggy.java
+++ b/tmp/3cf9b289-8af9-4085-ad80-0637653a040f_fixed.java
@@ -1,19 +1,45 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        // Ensure the raw type is a Class before casting and accessing type parameters
+        // This guards against potential issues with non-Class raw types (e.g., TypeVariable, WildcardType),
+        // although ParameterizedType should technically always have a Class as raw type.
+        if (!(parameterizedType.getRawType() instanceof Class)) {
+           return;
+        }
+        Class<?> rawType = (Class<?>) parameterizedType.getRawType();
+        TypeVariable<?>[] typeParameters = rawType.getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+        // Basic check for length mismatch, though ParameterizedType contract usually guarantees matching lengths.
+        if (typeParameters.length != actualTypeArguments.length) {
+            // Mismatched arguments/parameters indicate an inconsistency.
+            // It's safer to return than proceed with potentially wrong indices.
+             return;
+        }
+
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // Fix for StackOverflowError: Avoid infinite recursion in self-referential types.
+            // If a type variable (e.g., T) is mapped to itself in the context
+            // (e.g., processing the bound T extends Class<T>),
+            // registering T -> T can cause resolution algorithms to loop indefinitely.
+            // We skip registering the mapping in this specific case.
+            if (actualTypeArgument.equals(typeParameter)) {
+                continue;
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
+                // Assuming boundsOf extracts the relevant bound(s) from the wildcard
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
+                // Map the type parameter to its actual type argument in the current context.
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(parameterizedType) + ")" + "' }");
         }
     }
\ No newline at end of file
