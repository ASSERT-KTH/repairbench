diff --git a/tmp/8ea72951-4fe8-403d-b994-43d4f9373b2a_buggy.java b/tmp/0a43e6ba-e755-4103-ba13-9fabd45348d0_fixed.java
index 42b58d0..0b51f1b 100644
--- a/tmp/8ea72951-4fe8-403d-b994-43d4f9373b2a_buggy.java
+++ b/tmp/0a43e6ba-e755-4103-ba13-9fabd45348d0_fixed.java
@@ -1,19 +1,38 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        // Using TypeVariable<?> is cleaner
+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+        // Add defensiveness against potentially invalid generic signatures (e.g. F-bounds, raw types)
+        // that might lead to arrays of different sizes. See Mockito issue #1795.
+        if (typeParameters.length != actualTypeArguments.length) {
+            // Mismatch indicates an unusual type definition; logging could be useful here.
+            // Return early to prevent potential ArrayIndexOutOfBoundsException.
+            return;
+        }
+
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // Prevent mapping a type variable to itself (e.g., T -> T in the context of Class<T>).
+            // This scenario arises with self-referential generic types (like Enum<E extends Enum<E>>)
+            // and causes StackOverflowError if T is resolved by looking up itself in the map.
+            // If typeParameter equals actualTypeArgument, it means we are resolving T in the context of T itself,
+            // providing no new information. We skip adding this mapping.
+            if (typeParameter.equals(actualTypeArgument)) {
+                continue;
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
