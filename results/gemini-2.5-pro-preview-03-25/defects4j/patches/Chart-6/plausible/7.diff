diff --git a/tmp/5ae87b79-5a1b-463b-b9d3-5a55cf0ce87a_buggy.java b/tmp/97b3ade5-12a1-4f6e-b673-1f406a7c0ff2_fixed.java
index 351a97a..a9ba269 100644
--- a/tmp/5ae87b79-5a1b-463b-b9d3-5a55cf0ce87a_buggy.java
+++ b/tmp/97b3ade5-12a1-4f6e-b673-1f406a7c0ff2_fixed.java
@@ -1,18 +1,38 @@
     /**
      * Tests the list for equality with another object (typically also a list).
+     * Two lists are equal if they are the same size, and contain equal
+     * shapes in the same order.  Note that 'equal' shapes are compared using
+     * {@link ShapeUtilities#equal(Shape, Shape)}.
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public boolean equals(Object obj) {
 
         if (obj == this) {
             return true;
         }
+        // we know obj isn't null or this, so safe to test class
         if (!(obj instanceof ShapeList)) {
             return false;
         }
-        return super.equals(obj);
+        ShapeList other = (ShapeList) obj;
+        int size = size();
+        if (size != other.size()) {
+            return false;
+        }
+        for (int i = 0; i < size; i++) {
+            // fetch the shapes (could be null) - AbstractObjectList returns
+            // Object, so we need to cast
+            java.awt.Shape s1 = (java.awt.Shape) get(i);
+            java.awt.Shape s2 = (java.awt.Shape) other.get(i);
+            // ShapeUtilities handles null arguments safely...
+            if (!org.jfree.chart.util.ShapeUtilities.equal(s1, s2)) {
+                return false;
+            }
+        }
+        // if we get to here, the lists are equal
+        return true;
 
     }
\ No newline at end of file
