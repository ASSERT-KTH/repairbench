diff --git a/tmp/2aa629b4-755e-4246-ae6d-f4d3ea8891d0_buggy.java b/tmp/8669b8bd-810d-4fb0-9d74-65583334484d_fixed.java
index 351a97a..42b33ae 100644
--- a/tmp/2aa629b4-755e-4246-ae6d-f4d3ea8891d0_buggy.java
+++ b/tmp/8669b8bd-810d-4fb0-9d74-65583334484d_fixed.java
@@ -1,18 +1,41 @@
+import java.awt.Shape;
+import org.jfree.chart.util.ShapeUtilities;
+
     /**
      * Tests the list for equality with another object (typically also a list).
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
+    @Override
     public boolean equals(Object obj) {
 
         if (obj == this) {
             return true;
         }
+        // Check if obj is the same specific type. While List contract suggests
+        // checking instanceof List, many JFreeChart classes compare against
+        // the specific type or a common abstract parent. Checking ShapeList
+        // maintains consistency with the original code's intent and typical patterns.
         if (!(obj instanceof ShapeList)) {
             return false;
         }
-        return super.equals(obj);
+        ShapeList other = (ShapeList) obj;
+        int size = size();
+        // Check size equality
+        if (size != other.size()) {
+            return false;
+        }
+        // Compare elements using ShapeUtilities.equal for robust shape comparison
+        for (int i = 0; i < size; i++) {
+            Shape s1 = this.getShape(i); // Use the specific getter
+            Shape s2 = other.getShape(i); // Use the specific getter
+            if (!ShapeUtilities.equal(s1, s2)) {
+                return false;
+            }
+        }
+        // If all checks pass, the lists are equal
+        return true;
 
     }
\ No newline at end of file
