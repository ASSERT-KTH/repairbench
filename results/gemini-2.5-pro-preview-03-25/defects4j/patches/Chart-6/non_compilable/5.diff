diff --git a/tmp/7e2b0452-59bd-42c2-9fda-04880505e4dd_buggy.java b/tmp/71e025ce-64b9-449f-beef-f6d93496f982_fixed.java
index 351a97a..bd26e17 100644
--- a/tmp/7e2b0452-59bd-42c2-9fda-04880505e4dd_buggy.java
+++ b/tmp/71e025ce-64b9-449f-beef-f6d93496f982_fixed.java
@@ -1,18 +1,41 @@
+import java.awt.Shape;
+import org.jfree.chart.util.ShapeUtilities;
+
     /**
      * Tests the list for equality with another object (typically also a list).
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
+    @Override
     public boolean equals(Object obj) {
 
         if (obj == this) {
             return true;
         }
+        // Note: ShapeList extends AbstractObjectList which extends AbstractList.
+        // AbstractObjectList overrides equals incorrectly (simply obj == this).
+        // AbstractList provides a correct list comparison based on Object.equals().
+        // We need to reimplement the logic here, using ShapeUtilities.equal()
+        // for comparing the Shape elements, as Shape.equals() is not reliable.
+
         if (!(obj instanceof ShapeList)) {
             return false;
         }
-        return super.equals(obj);
+        ShapeList other = (ShapeList) obj;
+        int size = size();
+        if (other.size() != size) {
+            return false;
+        }
+        for (int i = 0; i < size; i++) {
+            Shape s1 = (Shape) get(i); // get() is from AbstractList
+            Shape s2 = (Shape) other.get(i);
+            // ShapeUtilities.equal handles null arguments correctly
+            if (!ShapeUtilities.equal(s1, s2)) {
+                return false;
+            }
+        }
+        return true;
 
     }
\ No newline at end of file
