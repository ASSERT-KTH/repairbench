diff --git a/tmp/5df60875-86ec-44cd-8670-98b3819dbe67_buggy.java b/tmp/4be22617-f0d1-47e1-932c-bf5c7b90791e_fixed.java
index d357c7e..04b28d8 100644
--- a/tmp/5df60875-86ec-44cd-8670-98b3819dbe67_buggy.java
+++ b/tmp/4be22617-f0d1-47e1-932c-bf5c7b90791e_fixed.java
@@ -1,16 +1,37 @@
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import org.apache.commons.compress.utils.IOUtils;
+
+// Assuming 'currentEntry' is an accessible field of type SevenZArchiveEntry 
+// holding the entry returned by the last call to getNextEntry().
+// Also assuming 'deferredBlockStreams' is a List<InputStream>.
+
     private InputStream getCurrentStream() throws IOException {
         if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+            // If the list is empty, check if the current entry is valid and has size 0.
+            // This might happen if getNextEntry() decided not to add a stream for an empty entry,
+            // or if the stream was prematurely consumed/closed elsewhere.
+            // Provide an empty stream for zero-size entries in this case.
+            // Check for currentEntry is necessary as this method should only be called
+            // after getNextEntry() returned a valid entry.
+            if (currentEntry != null && currentEntry.hasStream() && currentEntry.getSize() == 0) {
+                return new ByteArrayInputStream(new byte[0]);
+            }
+            // Otherwise, the state is unexpected.
+            throw new IllegalStateException("No current 7z entry stream available (call getNextEntry() first).");
         }
 
         while (deferredBlockStreams.size() > 1) {
             // In solid compression mode we need to decompress all leading folder'
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
+            // We MUST exhaust the stream completely, otherwise the GZIPInputStream may not be ready for the next entry
+            // Using IOUtils.skip fully reads and discards the stream's content.
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
 
         return deferredBlockStreams.get(0);
     }
\ No newline at end of file
