diff --git a/tmp/0d99bfb8-608f-4412-a066-4faec25d4e4c_buggy.java b/tmp/7c446818-5ebb-4ff5-8c40-b943f6b25287_fixed.java
index d357c7e..9608150 100644
--- a/tmp/0d99bfb8-608f-4412-a066-4faec25d4e4c_buggy.java
+++ b/tmp/7c446818-5ebb-4ff5-8c40-b943f6b25287_fixed.java
@@ -1,16 +1,38 @@
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List; // Assuming deferredBlockStreams is a List
+import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry; // Assuming currentEntry field exists
+import org.apache.commons.compress.utils.IOUtils; // For IOUtils.skip
+
+// Assume the following fields exist within the class containing the method:
+// private SevenZArchiveEntry currentEntry;
+// private List<InputStream> deferredBlockStreams;
+
     private InputStream getCurrentStream() throws IOException {
         if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+            // If the stream list is empty, check if it's because the current entry
+            // has size 0. getNextEntry() might not add streams for 0-byte entries
+            // to the deferred list in some scenarios.
+            if (currentEntry != null && currentEntry.getSize() == 0) {
+                // Return an empty stream, which is correct for a 0-byte entry.
+                // Subsequent read() calls on this will return -1 (EOF).
+                return new ByteArrayInputStream(new byte[0]);
+            }
+            // Otherwise, if the list is empty and the entry is not 0-sized or null,
+            // it indicates an invalid state (stream expected but not found).
+            throw new IllegalStateException("No current 7z entry or no stream for current entry (call getNextEntry() first).");
         }
 
         while (deferredBlockStreams.size() > 1) {
             // In solid compression mode we need to decompress all leading folder'
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
 
+        // The remaining stream in the list is the one for the current entry.
         return deferredBlockStreams.get(0);
     }
