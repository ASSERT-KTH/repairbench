diff --git a/tmp/31908e28-d262-42b4-9434-99ac45c827d1_buggy.java b/tmp/b50ef537-ff9e-4ce2-a255-0e99ea1298fb_fixed.java
index d357c7e..852081a 100644
--- a/tmp/31908e28-d262-42b4-9434-99ac45c827d1_buggy.java
+++ b/tmp/b50ef537-ff9e-4ce2-a255-0e99ea1298fb_fixed.java
@@ -1,16 +1,47 @@
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import org.apache.commons.compress.utils.IOUtils; // Assume IOUtils is available
+
     private InputStream getCurrentStream() throws IOException {
-        if (deferredBlockStreams.isEmpty()) {
+        // Field currentEntry should be updated by getNextEntry()
+        // Assuming currentEntry field of type SevenZArchiveEntry exists in the class
+        if (currentEntry == null) {
             throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
         }
 
+        // Entries that genuinely have no stream (e.g., directories marked via hasStream=false) or
+        // zero-size files where the deferredBlockStreams list might be empty due to an upstream issue.
+        // Return an empty stream for these cases, allowing read() on the SevenZFile to return -1 immediately.
+        // Assuming deferredBlockStreams field of type List<InputStream> exists in the class
+        // Assuming currentEntry has methods hasStream() and getSize()
+        if (!currentEntry.hasStream() || (currentEntry.getSize() == 0 && deferredBlockStreams.isEmpty())) {
+             // Return a stream that will report EOS immediately.
+             return new ByteArrayInputStream(new byte[0]);
+        }
+
+        // If the stream list is empty at this point, but we expect content (hasStream=true, size>0),
+        // it indicates an inconsistent state or internal error.
+        if (deferredBlockStreams.isEmpty()) {
+             throw new IllegalStateException("No InputStream found for current entry "
+                                             + currentEntry.getName() + " (size " + currentEntry.getSize() + ")");
+        }
+
+        // Process intermediate streams in solid blocks: skip data of preceding entries within the same block.
         while (deferredBlockStreams.size() > 1) {
             // In solid compression mode we need to decompress all leading folder'
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
+            try {
+                // Skip the entire content of the intermediate stream.
                 IOUtils.skip(stream, Long.MAX_VALUE);
+            } finally {
+                // Ensure the intermediate stream is closed to release resources.
                 stream.close();
             }
+        }
 
+        // The last remaining stream in the list corresponds to the current entry.
         return deferredBlockStreams.get(0);
     }
\ No newline at end of file
