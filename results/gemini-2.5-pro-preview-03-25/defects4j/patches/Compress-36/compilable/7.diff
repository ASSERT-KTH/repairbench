diff --git a/tmp/81d350cb-d584-4ebb-a4e5-cd2e1ad5f389_buggy.java b/tmp/559de1cc-de71-4f1c-9644-2a6a8b069ebe_fixed.java
index d357c7e..44f185c 100644
--- a/tmp/81d350cb-d584-4ebb-a4e5-cd2e1ad5f389_buggy.java
+++ b/tmp/559de1cc-de71-4f1c-9644-2a6a8b069ebe_fixed.java
@@ -1,16 +1,33 @@
     private InputStream getCurrentStream() throws IOException {
         if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+            // Bug fix: Instead of throwing IllegalStateException, return null.
+            // This indicates that no stream is currently available, potentially
+            // because the end of the archive was reached or the current entry
+            // has already been fully read or is a directory/zero-byte file.
+            // The caller (like read() or skip()) must handle this null value,
+            // typically by treating it as EOF for the current entry (returning -1).
+            return null;
+            // Original buggy code:
+            // throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
         }
         
-        while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
-            // streams to get access to an entry. We defer this until really needed
+        // In solid compression mode we need to decompress all leading streams 
+        // (belonging to previous entries in the same solid block) to get 
+        // access to the current entry's stream. We defer this until really needed
         // so that entire blocks can be skipped without wasting time for decompression.
+        while (deferredBlockStreams.size() > 1) {
+            // Remove the stream for the previous entry from the head of the list.
             final InputStream stream = deferredBlockStreams.remove(0);
+            try {
+                // Skip its contents entirely.
                 IOUtils.skip(stream, Long.MAX_VALUE);
+            } finally {
+                // Ensure the stream is closed even if skipping fails.
                 stream.close();
             }
+        }
 
+        // After the loop, the only stream left in the list is the one
+        // corresponding to the current entry. Return it without removing it.
         return deferredBlockStreams.get(0);
     }
\ No newline at end of file
