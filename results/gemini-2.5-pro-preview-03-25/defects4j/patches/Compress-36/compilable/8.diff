diff --git a/tmp/483cbab3-77e8-4bdf-ac4f-fef4ec275255_buggy.java b/tmp/f1a60843-b835-44ca-af4f-0a71db22c69e_fixed.java
index d357c7e..1efb96a 100644
--- a/tmp/483cbab3-77e8-4bdf-ac4f-fef4ec275255_buggy.java
+++ b/tmp/f1a60843-b835-44ca-af4f-0a71db22c69e_fixed.java
@@ -1,16 +1,33 @@
     private InputStream getCurrentStream() throws IOException {
         if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+            // If the list is empty, it means the current entry has no content stream
+            // (e.g., it's a directory or a 0-byte file). Return null so the caller
+            // (getNextEntry) can handle it appropriately.
+            // The IllegalStateException previously thrown here caused issues with 0-byte entries.
+            return null;
         }
         
+        // If the archive uses solid compression and the current entry is not the first
+        // entry in a solid block, we might have deferred streams from previous entries
+        // in the same block. We need to consume (skip) these streams now to reach
+        // the stream for the current entry.
         while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
-            // streams to get access to an entry. We defer this until really needed
-            // so that entire blocks can be skipped without wasting time for decompression.
+            // The stream at index 0 represents data for a previous entry that needed
+            // to be logically processed (e.g., for CRC checks) but whose content wasn't
+            // requested by the user calling read(). We must now fully consume it
+            // before accessing the next stream in the list which might depend on the
+            // state left by the previous stream.
             final InputStream stream = deferredBlockStreams.remove(0);
-            IOUtils.skip(stream, Long.MAX_VALUE);
+            try {
+                // Fully consume the stream's content.
+                // IOUtils.skip ensures all bytes are read or skipped.
+                org.apache.commons.compress.utils.IOUtils.skip(stream, Long.MAX_VALUE);
+            } finally {
+                // Close the stream for the previous entry.
                 stream.close();
             }
+        }
 
+        // The stream remaining at index 0 is the one for the current entry.
         return deferredBlockStreams.get(0);
     }
\ No newline at end of file
