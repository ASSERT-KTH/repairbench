diff --git a/tmp/a8f1f3f9-6856-4dea-9af1-4a0332f333cf_buggy.java b/tmp/16e851b4-aeee-4dca-92da-5f7d5d7d04d7_fixed.java
index 1478ee1..ce35b40 100644
--- a/tmp/a8f1f3f9-6856-4dea-9af1-4a0332f333cf_buggy.java
+++ b/tmp/16e851b4-aeee-4dca-92da-5f7d5d7d04d7_fixed.java
@@ -1,24 +1,61 @@
+import org.apache.commons.math.util.FastMath; // Assuming Vector3D uses this or similar math utilities
+// Assuming Vector3D class has methods like getX(), getY(), getZ(), getNormSq(), getNorm(), scalarMultiply()
+// and a constructor Vector3D(double x, double y, double z), and a constant Vector3D.ZERO.
+
   /** Compute the cross-product of two vectors.
+   * Implements the robust algorithm from Kahan's paper "Computing Cross-Products and Rotations
+   * in 2- and 3-Dimensional Euclidean Spaces" combining normalization and orthogonalization
+   * to improve handling of scaling issues and cases with nearly parallel vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Get the norms squared
+      double norm1Sq = v1.getNormSq();
+      double norm2Sq = v2.getNormSq();
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // Get the norms
+      double norm1 = FastMath.sqrt(norm1Sq);
+      double norm2 = FastMath.sqrt(norm2Sq);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Handle zero vectors
+      // Use a tolerance to avoid issues with tiny norms leading to large inverse norms
+      final double epsilon = 1e-10; // A small tolerance for checking zero norm
+      if (norm1 < epsilon || norm2 < epsilon) {
+          return Vector3D.ZERO;
+      }
+
+      // Normalize the vectors
+      double invNorm1 = 1.0 / norm1;
+      double invNorm2 = 1.0 / norm2;
+      double u1x = v1.getX() * invNorm1;
+      double u1y = v1.getY() * invNorm1;
+      double u1z = v1.getZ() * invNorm1;
+      double u2x = v2.getX() * invNorm2;
+      double u2y = v2.getY() * invNorm2;
+      double u2z = v2.getZ() * invNorm2;
+
+      // Compute rho = u1 . u2 (cosine of angle between vectors)
+      double rho = u1x * u2x + u1y * u2y + u1z * u2z;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Compute p = u1 - rho * u2 (component of u1 orthogonal to u2)
+      // This calculation is more stable when u1 and u2 are nearly parallel
+      double pX = u1x - rho * u2x;
+      double pY = u1y - rho * u2y;
+      double pZ = u1z - rho * u2z;
 
+      // Compute cross product q = p x u2
+      // Since p is orthogonal to u2, this cross product is well-behaved.
+      double qX = pY * u2z - pZ * u2y;
+      double qY = pZ * u2x - pX * u2z;
+      double qZ = pX * u2y - pY * u2x;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Final result is scaled by the original norms: (norm1 * norm2) * q
+      // Compute scale factor carefully to avoid intermediate overflow/underflow if possible,
+      // though standard multiplication is usually sufficient here.
+      double scale = norm1 * norm2;
 
+      return new Vector3D(scale * qX, scale * qY, scale * qZ);
   }
\ No newline at end of file
