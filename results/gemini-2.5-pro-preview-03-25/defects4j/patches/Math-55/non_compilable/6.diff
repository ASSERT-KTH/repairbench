diff --git a/tmp/95a368c4-b06f-4d8b-be26-ebda23ef859d_buggy.java b/tmp/21224a37-1afb-4255-99d8-b606da60171d_fixed.java
index 1478ee1..3f42490 100644
--- a/tmp/95a368c4-b06f-4d8b-be26-ebda23ef859d_buggy.java
+++ b/tmp/21224a37-1afb-4255-99d8-b606da60171d_fixed.java
@@ -1,24 +1,89 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Reference: Kahan, W. (2006). Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces.
+      // University of California, Berkeley. http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // The implementation follows the spirit of Kahan's algorithm to mitigate cancellation errors
+      // when vectors are nearly parallel, as suggested by the code comments in the original buggy version.
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // Assumes Vector3D class has isNaN() and isInfinite() methods.
+      // Check for NaN components first, as they propagate.
+      if (v1.isNaN() || v2.isNaN()) {
+          // Returning Vector3D.NaN requires the class to define such a constant.
+          // If not available, use new Vector3D(Double.NaN, Double.NaN, Double.NaN).
+          return new Vector3D(Double.NaN, Double.NaN, Double.NaN);
+      }
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Check for infinite components. Result is often NaN for cross product involving infinity.
+      if (v1.isInfinite() || v2.isInfinite()) {
+          // Policy for cross product involving infinity can vary. NaN is a common choice.
+          // Returning Vector3D.NaN requires the class to define such a constant.
+          return new Vector3D(Double.NaN, Double.NaN, Double.NaN);
+      }
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Calculate squared norms
+      // Assumes Vector3D class has getNormSq() method.
+      double norm1Sq = v1.getNormSq();
+      double norm2Sq = v2.getNormSq();
 
+      // Check for zero vectors. Cross product with zero vector is zero.
+      if (norm1Sq == 0 || norm2Sq == 0) {
+          // Returning Vector3D.ZERO requires the class to define such a constant.
+          // If not available, use new Vector3D(0, 0, 0).
+          return new Vector3D(0, 0, 0);
+      }
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Select vectors u and v such that v has the larger norm squared.
+      // u will be the vector with the smaller norm squared.
+      final Vector3D u, v;
+      final boolean swapped;
+      final double vNormSq; // Store the squared norm of v for efficiency
+
+      if (norm1Sq > norm2Sq) {
+          u = v2;
+          v = v1;
+          vNormSq = norm1Sq;
+          swapped = true;
+      } else {
+          u = v1;
+          v = v2;
+          vNormSq = norm2Sq;
+          swapped = false;
+      }
 
+      // Compute rho = (u . v) / (v . v)
+      // vNormSq is the squared norm of the vector with the larger magnitude,
+      // which improves numerical stability of the division.
+      // vNormSq is guaranteed to be positive finite here due to earlier checks.
+      // Assumes Vector3D class has dotProduct() method.
+      double uv = u.dotProduct(v);
+      double rho = uv / vNormSq;
+
+      // Compute w = u - rho * v
+      // This step computes the component of u orthogonal to v.
+      // It can still suffer cancellation, but often less severely than the naive cross product.
+      // Assumes Vector3D class has getX(), getY(), getZ() methods.
+      double wx = u.getX() - rho * v.getX();
+      double wy = u.getY() - rho * v.getY();
+      double wz = u.getZ() - rho * v.getZ();
+
+      // Compute cross product c = w x v
+      // Since w is (approximately) orthogonal to v, this cross product calculation
+      // is generally more numerically stable than the direct v1 x v2.
+      double resX = wy * v.getZ() - wz * v.getY();
+      double resY = wz * v.getX() - wx * v.getZ();
+      double resZ = wx * v.getY() - wy * v.getX();
+
+      // If u and v were swapped, the result 'res' is u x v = v2 x v1.
+      // We need to return v1 x v2 = - (v2 x v1).
+      if (swapped) {
+          return new Vector3D(-resX, -resY, -resZ);
+      } else {
+          // Result 'res' is u x v = v1 x v2.
+          return new Vector3D(resX, resY, resZ);
+      }
   }
\ No newline at end of file
