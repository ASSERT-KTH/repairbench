diff --git a/tmp/7dad4a7b-c02e-417e-8519-6f23bf27c87e_buggy.java b/tmp/026151c9-e496-42dd-b9cf-d6fe9f3b36e5_fixed.java
index 1478ee1..e4bd193 100644
--- a/tmp/7dad4a7b-c02e-417e-8519-6f23bf27c87e_buggy.java
+++ b/tmp/026151c9-e496-42dd-b9cf-d6fe9f3b36e5_fixed.java
@@ -1,24 +1,63 @@
+import org.apache.commons.math.geometry.Vector3D; // Assuming Vector3D class is available
+// Make sure necessary fields/methods like getX(), getY(), getZ(), dotProduct(), getNormSq(), ZERO exist.
+
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Use Kahan's algorithm for robust cross product computation
+    // to mitigate cancellation errors with nearly parallel vectors.
+    // As described in the original comments, we compute v3 = v1 - rho * v2,
+    // where rho = (v1 . v2) / (v2 . v2), and then the cross product is v3 x v2.
+    // See Kahan paper "Computing Cross-Products and Rotations..." p. 15
+    // http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Components of v1
+    double x1 = v1.getX();
+    double y1 = v1.getY();
+    double z1 = v1.getZ();
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Components of v2
+    double x2 = v2.getX();
+    double y2 = v2.getY();
+    double z2 = v2.getZ();
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // Calculate dot products
+    // Using instance methods for potentially better precision/handling if they exist
+    double dot12 = v1.dotProduct(v2);
+    double dot22 = v2.getNormSq();
 
+    // If v2 is the zero vector, the cross product is the zero vector.
+    // Handles division by zero for rho calculation.
+    // Comparing floating point with == 0 can be tricky, but NormSq should be non-negative.
+    // If dot22 is extremely small but non-zero, rho could become very large.
+    // The subsequent calculations involving v3 are designed to handle this.
+    if (dot22 == 0) {
+        // Consider using a small tolerance epsilon instead of == 0 if needed,
+        // but for norm squared, == 0 is usually sufficient to check for zero vector.
+        return Vector3D.ZERO; // Assuming Vector3D.ZERO is (0,0,0) constant
+    }
+
+    // Calculate rho = (v1 . v2) / (v2 . v2)
+    double rho = dot12 / dot22;
+
+    // Compute components of v3 = v1 - rho * v2
+    // This step subtracts the projection of v1 onto v2 from v1,
+    // effectively making v3 orthogonal to v2 in calculation, reducing cancellation.
+    double x3 = x1 - rho * x2;
+    double y3 = y1 - rho * y2;
+    double z3 = z1 - rho * z2;
+
+    // Compute cross product v3 x v2
+    // Mathematically equivalent to v1 x v2, but often numerically more stable
+    // when v1 and v2 are nearly collinear.
+    double cx = y3 * z2 - z3 * y2;
+    double cy = z3 * x2 - x3 * z2;
+    double cz = x3 * y2 - y3 * x2;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    return new Vector3D(cx, cy, cz);
 
 }
\ No newline at end of file
