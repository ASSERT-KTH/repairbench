diff --git a/tmp/adaf98d5-3768-431b-bb57-714bfb92a64c_buggy.java b/tmp/c7d74ee5-148d-44ba-979f-93a40d2dc8dd_fixed.java
index 1478ee1..a87b3e1 100644
--- a/tmp/adaf98d5-3768-431b-bb57-714bfb92a64c_buggy.java
+++ b/tmp/c7d74ee5-148d-44ba-979f-93a40d2dc8dd_fixed.java
@@ -1,24 +1,66 @@
+import org.apache.commons.math.util.FastMath; // Assuming FastMath is available for potential use like fma, though not strictly required for the fix logic itself
+
 /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Implementation based on Kahan's paper "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
+      // to reduce cancellation errors, especially when vectors are nearly parallel.
+      // The idea is to compute v3 = v1 - rho * v2, where rho = (v1 . v2) / (v2 . v2),
+      // and then calculate v1 x v2 = v3 x v2. This avoids subtracting nearly equal large numbers
+      // in the final cross product calculation when v1 and v2 are almost aligned.
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      double x1 = v1.getX(); double y1 = v1.getY(); double z1 = v1.getZ(); // Use getters assuming private fields
+      double x2 = v2.getX(); double y2 = v2.getY(); double z2 = v2.getZ();
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Compute dot product v1 . v2
+      // Using FastMath.fma for potentially better accuracy if available and needed,
+      // but standard sum of products is usually sufficient for the dot product itself.
+      double dot = Vector3D.dotProduct(v1, v2); // Use existing dotProduct method if available for clarity/consistency
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Compute squared norm of v2
+      double normSq2 = v2.getNormSq(); // Use existing getNormSq method if available
+
+      // If v2 is the zero vector, the cross product is the zero vector.
+      // Handle potential division by zero if normSq2 is zero.
+      if (normSq2 == 0.0) {
+           // Naive calculation results in (0,0,0) correctly when v2 is zero vector.
+           // Return Vector3D.ZERO for consistency if it exists.
+           // return new Vector3D(0, 0, 0);
+           return Vector3D.ZERO; // Assuming Vector3D.ZERO constant exists
+      }
+
+      // Compute rho = (v1 . v2) / (v2 . v2)
+      double rho = dot / normSq2;
+
+      // Compute v3 = v1 - rho * v2 components.
+      // This subtraction step can suffer cancellation if v1 and rho*v2 are close.
+      // Using FMA (fused multiply-add) can improve accuracy here.
+      // double v3x = FastMath.fma(-rho, x2, x1); // Requires Java 8+ and FastMath import
+      // double v3y = FastMath.fma(-rho, y2, y1);
+      // double v3z = FastMath.fma(-rho, z2, z1);
+      // Using standard arithmetic as FMA might not be available/intended
+      double v3x = x1 - rho * x2;
+      double v3y = y1 - rho * y2;
+      double v3z = z1 - rho * z2;
+
+
+      // Compute cross product v3 x v2 using the components of v3 and v2.
+      // This step is more numerically stable when v1, v2 were nearly parallel,
+      // because v3 is constructed to be more orthogonal to v2.
+      // Again, FMA could be used for potentially better accuracy.
+      // double res_x = FastMath.fma(v3y, z2, -v3z * y2);
+      // double res_y = FastMath.fma(v3z, x2, -v3x * z2);
+      // double res_z = FastMath.fma(v3x, y2, -v3y * x2);
+      // Using standard arithmetic:
+      double res_x = v3y * z2 - v3z * y2;
+      double res_y = v3z * x2 - v3x * z2;
+      double res_z = v3x * y2 - v3y * x2;
 
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(res_x, res_y, res_z);
 
   }
\ No newline at end of file
