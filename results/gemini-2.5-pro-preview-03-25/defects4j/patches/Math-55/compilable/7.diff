diff --git a/tmp/0d75dfe9-96a7-47ba-8108-41eff4473575_buggy.java b/tmp/d2b6f8e7-42b2-4270-acc7-65cb59fa6814_fixed.java
index 1478ee1..b9772e3 100644
--- a/tmp/0d75dfe9-96a7-47ba-8108-41eff4473575_buggy.java
+++ b/tmp/d2b6f8e7-42b2-4270-acc7-65cb59fa6814_fixed.java
@@ -1,24 +1,31 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Use the alternative formula: v1 ^ v2 = 0.5 * ((v1 - v2) ^ (v1 + v2))
+      // This formulation is more accurate in case of nearly parallel vectors or vectors with large differences in magnitude.
+      // See Kahan lecture "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
+      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf (Section 10)
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // Calculate v1 - v2 components
+      double dX = v1.x - v2.x;
+      double dY = v1.y - v2.y;
+      double dZ = v1.z - v2.z;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Calculate v1 + v2 components
+      double sX = v1.x + v2.x;
+      double sY = v1.y + v2.y;
+      double sZ = v1.z + v2.z;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Calculate (v1 - v2) ^ (v1 + v2) components
+      double cX = dY * sZ - dZ * sY;
+      double cY = dZ * sX - dX * sZ;
+      double cZ = dX * sY - dY * sX;
 
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Apply the 0.5 factor -> v1 ^ v2 = 0.5 * cross product of difference and sum
+      return new Vector3D(0.5 * cX, 0.5 * cY, 0.5 * cZ);
 
   }
\ No newline at end of file
