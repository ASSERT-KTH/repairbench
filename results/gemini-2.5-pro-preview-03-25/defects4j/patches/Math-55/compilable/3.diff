diff --git a/tmp/66650cad-96e9-4c4c-b088-d8377ef05708_buggy.java b/tmp/04cc0de2-069d-46ae-a882-fd69790532d1_fixed.java
index 1478ee1..ec4ecf4 100644
--- a/tmp/66650cad-96e9-4c4c-b088-d8377ef05708_buggy.java
+++ b/tmp/04cc0de2-069d-46ae-a882-fd69790532d1_fixed.java
@@ -1,24 +1,51 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
+   * @return the cross product v1 ^ v2 as a new Vector3D
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Kahan's algorithm to compute cross product v1 x v2 with improved precision.
+      // This method aims to reduce cancellation errors that occur when vectors are nearly parallel.
+      // See Kahan lecture "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
+      // http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // The algorithm computes v3 = v1 - rho * v2, where rho = (v1 . v2) / (v2 . v2)
+      // and then the cross product is c = v3 x v2.
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // Using getters assuming Vector3D provides them (e.g., getX(), getY(), getZ())
+      // If fields x, y, z are directly accessible, use v1.x, v1.y, v1.z instead.
+      double x1 = v1.getX();
+      double y1 = v1.getY();
+      double z1 = v1.getZ();
+      double x2 = v2.getX();
+      double y2 = v2.getY();
+      double z2 = v2.getZ();
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      double normSq2 = x2 * x2 + y2 * y2 + z2 * z2;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Check if v2 is the zero vector.
+      if (normSq2 == 0) {
+          // The cross product of any vector with the zero vector is the zero vector.
+          // Assuming Vector3D has a constructor for (0,0,0) or a ZERO constant.
+          return new Vector3D(0, 0, 0);
+      }
+
+      double dot = x1 * x2 + y1 * y2 + z1 * z2;
+      double rho = dot / normSq2;
+
+      // Compute components of v3 = v1 - rho * v2
+      // This intermediate vector v3 is orthogonal to v2, or close to it numerically.
+      double x3 = x1 - rho * x2;
+      double y3 = y1 - rho * y2;
+      double z3 = z1 - rho * z2;
 
+      // Compute components of the cross product c = v3 x v2
+      // This calculation is potentially more stable when v1 and v2 are nearly parallel,
+      // as v3's components are smaller in that case, reducing cancellation in the final step.
+      double cx = y3 * z2 - z3 * y2;
+      double cy = z3 * x2 - x3 * z2;
+      double cz = x3 * y2 - y3 * x2;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(cx, cy, cz);
 
   }
\ No newline at end of file
