diff --git a/tmp/545177dd-e12c-4111-8bc0-f203532255fb_buggy.java b/tmp/bc4f390d-83e5-427b-ad7f-a07fe8a617cb_fixed.java
index 1478ee1..e1801fd 100644
--- a/tmp/545177dd-e12c-4111-8bc0-f203532255fb_buggy.java
+++ b/tmp/bc4f390d-83e5-427b-ad7f-a07fe8a617cb_fixed.java
@@ -1,24 +1,59 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
+   * @return the cross product v1 ^ v2 as a new Vector3D
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Compute the cross product using the standard formula initially.
+      // This is prone to cancellation errors if v1 and v2 are nearly parallel
+      // or have vastly different magnitudes.
+      double Px = v1.y * v2.z - v1.z * v2.y;
+      double Py = v1.z * v2.x - v1.x * v2.z;
+      double Pz = v1.x * v2.y - v1.y * v2.x;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
+      // Use Kahan's algorithm (computing v3 = v1 - rho v2) to improve accuracy.
+      // This helps avoid cancellation errors in problematic cases.
+      // See Kahan lecture "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Store vector components for clarity and potentially minor performance
+      final double v1x = v1.x;
+      final double v1y = v1.y;
+      final double v1z = v1.z;
+      final double v2x = v2.x;
+      final double v2y = v2.y;
+      final double v2z = v2.z;
 
+      // Compute v2 . v2 (norm squared of v2)
+      final double dot22 = v2x * v2x + v2y * v2y + v2z * v2z;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // If v2 is the zero vector, the cross product is the zero vector.
+      // The standard calculation (Px, Py, Pz) correctly results in zero.
+      // We check this condition to avoid division by zero when calculating rho.
+      if (dot22 == 0.0) {
+          return new Vector3D(Px, Py, Pz); // Return the standard result which is (0,0,0)
+      }
+
+      // Compute v1 . v2 (dot product)
+      final double dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
+
+      // Compute rho = (v1 . v2) / (v2 . v2)
+      // This rho is chosen such that v3 = v1 - rho * v2 is orthogonal to v2.
+      final double rho = dot12 / dot22;
+
+      // Compute v3 = v1 - rho * v2
+      // Mathematically, v1 x v2 = (v3 + rho * v2) x v2 = v3 x v2 + rho * (v2 x v2) = v3 x v2.
+      // Computing v3 x v2 is generally more numerically stable.
+      final double v3x = v1x - rho * v2x;
+      final double v3y = v1y - rho * v2y;
+      final double v3z = v1z - rho * v2z;
+
+      // Compute the cross product P' = v3 x v2 using the standard formula structure
+      final double PprimeX = v3y * v2z - v3z * v2y;
+      final double PprimeY = v3z * v2x - v3x * v2z;
+      final double PprimeZ = v3x * v2y - v3y * v2x;
 
+      // Return the result computed using Kahan's method
+      return new Vector3D(PprimeX, PprimeY, PprimeZ);
   }
\ No newline at end of file
