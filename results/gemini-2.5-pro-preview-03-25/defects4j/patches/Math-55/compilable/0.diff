diff --git a/tmp/08bba2b6-dad4-426b-bb73-af23ac2c31a5_buggy.java b/tmp/1103098a-6841-4ad2-b8f1-c0ff1841541c_fixed.java
index 1478ee1..c5dc0b0 100644
--- a/tmp/08bba2b6-dad4-426b-bb73-af23ac2c31a5_buggy.java
+++ b/tmp/1103098a-6841-4ad2-b8f1-c0ff1841541c_fixed.java
@@ -1,24 +1,52 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Use Kahan's algorithm (or similar preconditioning) hinted at in the original comments
+      // to improve accuracy for nearly parallel vectors.
+      // The idea is to compute v3 = v1 - rho * v2, where rho = (v1 . v2) / (v2 . v2),
+      // and then compute the cross product as v3 x v2.
+      // This helps mitigate cancellation errors in the final cross product calculation.
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      double v1x = v1.getX(); double v1y = v1.getY(); double v1z = v1.getZ();
+      double v2x = v2.getX(); double v2y = v2.getY(); double v2z = v2.getZ();
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Calculate rho = (v1 . v2) / (v2 . v2)
+      // Use dot product and norm squared for calculation
+      double dot = v1x * v2x + v1y * v2y + v1z * v2z;
+      double v2NormSq = v2x * v2x + v2y * v2y + v2z * v2z;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Check if v2 is the zero vector to avoid division by zero and handle trivial case
+      // Use a small tolerance for floating point comparison
+      final double epsilon = 1.0e-12; // A small tolerance for zero check
+      if (v2NormSq < epsilon) {
+          // If v2 is effectively zero, the cross product is the zero vector.
+          // Check v1 norm as well? Technically v1 x 0 = 0 regardless of v1.
+          return Vector3D.ZERO;
+      }
+
+      double rho = dot / v2NormSq;
+
+      // Calculate v3 = v1 - rho * v2 component-wise
+      // This step aims to create a vector v3 that is orthogonal to v2,
+      // or at least closer to orthogonal than v1 was.
+      double v3x = v1x - rho * v2x;
+      double v3y = v1y - rho * v2y;
+      double v3z = v1z - rho * v2z;
+
+      // Calculate the cross product w = v3 x v2 using the standard formula
+      // Using v3 instead of v1 reduces the risk of cancellation when v1 and v2 are nearly parallel.
+      double wx = v3y * v2z - v3z * v2y;
+      double wy = v3z * v2x - v3x * v2z;
+      double wz = v3x * v2y - v3y * v2x;
 
+      // Mathematically, v3 x v2 = (v1 - rho*v2) x v2 = v1 x v2 - rho*(v2 x v2) = v1 x v2
+      // The numerical advantage comes from potentially smaller magnitudes in v3 components
+      // or better relative precision in the intermediate subtractions.
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(wx, wy, wz);
 
   }
\ No newline at end of file
