diff --git a/tmp/209e5966-8e13-4572-aada-9409c7c0a74c_buggy.java b/tmp/7e63bfec-fc0e-4c8b-ad4f-c438fbc178bd_fixed.java
index c6cb157..895c046 100644
--- a/tmp/209e5966-8e13-4572-aada-9409c7c0a74c_buggy.java
+++ b/tmp/7e63bfec-fc0e-4c8b-ad4f-c438fbc178bd_fixed.java
@@ -1,14 +1,35 @@
+import java.util.Arrays;
+
+// Added import and assuming MAX_SEGMENT_LEN is a defined constant in the class, like:
+// private final static int MAX_SEGMENT_LEN = 1 << 18; // 262144
+
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+
+        // Let's grow by 50% for smaller chunks; slower (25%) for larger one
+        // Also: only grow up to MAX_SEGMENT_LEN, if we are under that limit
+        int newLen;
+        // Increase by 50% up to MAX_SEGMENT_LEN
+        if (len < MAX_SEGMENT_LEN) { // below max?
+            newLen = Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        } else {
+            // Otherwise, grow by 25% (or at least by 1 segment, i.e. 1 char)
+            // As per [core#152] let's allow exceeding max segment length
+            int increment = len >> 2; // 25% growth
+            newLen = len + Math.max(increment, 1); // Make sure we grow by at least 1 char
+        }
+        // Check for potential overflow (if newLen > Integer.MAX_VALUE)
+        if (newLen < len) { // integer overflow?
+            // This is very unlikely to happen given MAX_SEGMENT_LEN,
+            // but let's add a safeguard anyway
+            throw new IllegalStateException("Maximum segment size ("+Integer.MAX_VALUE+") exceeded");
+        }
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
