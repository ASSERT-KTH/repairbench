diff --git a/tmp/dee91539-c476-477b-8441-1c1568a07491_buggy.java b/tmp/5fbc190a-1deb-4224-9b8b-2ddf8e59c2fd_fixed.java
index c6cb157..a5a70c5 100644
--- a/tmp/dee91539-c476-477b-8441-1c1568a07491_buggy.java
+++ b/tmp/5fbc190a-1deb-4224-9b8b-2ddf8e59c2fd_fixed.java
@@ -1,14 +1,55 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+
+        // Determine new length using strategy based on current length
+        int newLen;
+        if (len == 0) {
+            // Segment length 0 is possible if buffer is initialized, but not used;
+            // unlikely path, but just in case let's grow by minimum possible, 1
+             newLen = 1;
+        } else if (len < MAX_SEGMENT_LEN) {
+            // Below max, grow by 50%, but cap at MAX_SEGMENT_LEN
+            newLen = len + (len >> 1);
+            // Check for potential overflow:
+            if (newLen < 0) {
+                 throw new IllegalStateException("Maximum Java array size ("+Integer.MAX_VALUE+") exceeded by `TextBuffer` expansion request");
+            }
+            // Ensure it does not exceed max segment length
+            if (newLen > MAX_SEGMENT_LEN) {
+                newLen = MAX_SEGMENT_LEN;
+            }
+        } else if (len == MAX_SEGMENT_LEN) {
+            // Exactly at max, grow by just 1
+            newLen = MAX_SEGMENT_LEN + 1;
+             // Check for potential overflow (if MAX_SEGMENT_LEN = Integer.MAX_VALUE)
+             if (newLen < 0) {
+                  throw new IllegalStateException("Maximum Java array size ("+Integer.MAX_VALUE+") exceeded by `TextBuffer` expansion request");
+             }
+        } else { // len > MAX_SEGMENT_LEN
+            // Already above max, grow by 25% (slower growth)
+            newLen = len + (len >> 2);
+            // Check for potential overflow:
+            if (newLen < 0) {
+                 throw new IllegalStateException("Maximum Java array size ("+Integer.MAX_VALUE+") exceeded by `TextBuffer` expansion request");
+            }
+        }
+
+        // Sanity check: Must grow, minimum growth is by one
+        // (handles cases like len=1 where len>>1 is 0)
+        if (newLen <= len) {
+            newLen = len + 1;
+            // Check for overflow one last time
+             if (newLen < 0) {
+                  throw new IllegalStateException("Maximum Java array size ("+Integer.MAX_VALUE+") exceeded by `TextBuffer` expansion request");
+             }
+        }
+
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
