diff --git a/tmp/0c2d5222-03d6-49c3-ac7c-8e5c1cfdb4bf_buggy.java b/tmp/85de65ad-918a-4a93-a1c4-127b491a29ce_fixed.java
index c6cb157..c7c02c8 100644
--- a/tmp/0c2d5222-03d6-49c3-ac7c-8e5c1cfdb4bf_buggy.java
+++ b/tmp/85de65ad-918a-4a93-a1c4-127b491a29ce_fixed.java
@@ -1,14 +1,30 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+
+        // Determine new length:
+        int newLen;
+
+        if (len < MAX_SEGMENT_LEN) { // Below max, grow by 50%, capped at max
+            int proposed = len + (len >> 1);
+            newLen = Math.min(MAX_SEGMENT_LEN, proposed);
+            // Also, minimum growth needs to be enforced, specifically needed for len=0
+            // (but good check to have regardless)
+            if (newLen <= len) { // Should only be true for len=0
+                newLen = len + 1;
+            }
+        } else if (len == MAX_SEGMENT_LEN) { // At max, grow by 1 -- needed to avoid shrinking in next round
+            newLen = len + 1;
+        } else { // Beyond max: minimal growth
+            // This case fixes the bug where original code could shrink the buffer.
+            newLen = len + 1;
+        }
+
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
