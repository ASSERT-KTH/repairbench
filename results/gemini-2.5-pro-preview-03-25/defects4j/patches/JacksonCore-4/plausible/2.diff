diff --git a/tmp/2b3e021d-f080-440c-9ecf-65c1333801b4_buggy.java b/tmp/c6085673-63b6-4b9a-be61-4025671ebbd3_fixed.java
index c6cb157..7e410d5 100644
--- a/tmp/2b3e021d-f080-440c-9ecf-65c1333801b4_buggy.java
+++ b/tmp/c6085673-63b6-4b9a-be61-4025671ebbd3_fixed.java
@@ -1,14 +1,47 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        // Determine new length: grow by 50% up to MAX_SEGMENT_LEN, then slower (25%)
+        // Also: let's assume the ultimate maximum length is 2^30 slices (~1 GB)
+        // (and let's assume argument validation has been done by caller, or will fail with OOME)
+        int newLen;
+
+        // If length is less than MAX_SEGMENT_LEN, grow by 50%, but capped at MAX_SEGMENT_LEN
+        if (len < MAX_SEGMENT_LEN) { // Below max segment len?
+            int proposedLen;
+            // For very small arrays (0, 1), need to grow by at least 1
+            if (len <= 1) {
+                 proposedLen = len + 1;
+            } else {
+                 proposedLen = len + (len >> 1); // Calculate 50% increase
+            }
+            // Cap at MAX_SEGMENT_LEN
+            newLen = Math.min(MAX_SEGMENT_LEN, proposedLen);
+        } else { // Otherwise, already max segment len or more: grow slower (25%)
+            // Check for potential overflow if len is close to Integer.MAX_VALUE
+            // Although extremely unlikely for char[] segments
+            if (len == Integer.MAX_VALUE) {
+                // Cannot grow further
+                throw new IllegalStateException("Maximum segment length ("+len+") reached");
+            }
+            int increment = len >> 2; // 25% increase
+            // Ensure minimum growth of 1
+            newLen = len + Math.max(increment, 1);
+            // Also check for potential overflow from addition
+            if (newLen < 0) { // integer overflow
+                 newLen = Integer.MAX_VALUE;
+            }
+        }
+        // Sanity check: Ensure that the new length is strictly greater than the old length.
+        // This should be guaranteed by the logic above, but as a safeguard:
+        if (newLen <= len) {
+             newLen = len + 1;
+        }
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
