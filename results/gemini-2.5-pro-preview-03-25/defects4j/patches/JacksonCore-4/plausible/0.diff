diff --git a/tmp/e5b62b98-6caf-4704-b860-c19e5bcc93cf_buggy.java b/tmp/48e29f34-c555-4f92-80c6-113508ad7a10_fixed.java
index c6cb157..f5d4652 100644
--- a/tmp/e5b62b98-6caf-4704-b860-c19e5bcc93cf_buggy.java
+++ b/tmp/48e29f34-c555-4f92-80c6-113508ad7a10_fixed.java
@@ -1,14 +1,24 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // If we're already at or over the minimal threshold, grow only by minimum
+        // (by 1 - leaving it up to caller to perhaps need to call again)
+        // (or MAX_SEGMENT_LEN, if that's somehow smaller - let's assume non-negative length)
+        if (len >= MAX_SEGMENT_LEN) { // MAX_SEGMENT_LEN is the biggest normal segment size
+            // Cannot grow by 50% any more, do minimal expansion
+            newLen = len + 1;
+        } else {
+            // Otherwise, grow by 50%, but capped at MAX_SEGMENT_LEN.
+            // Also must ensure that we grow by at least one char
+            newLen = Math.min(MAX_SEGMENT_LEN, Math.max(len + 1, len + (len >> 1)));
+        }
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
