diff --git a/tmp/47d88d96-5161-4ad8-8081-acfda3f54005_buggy.java b/tmp/39422d3b-ad18-47c9-a620-9c27efd2f399_fixed.java
index c6cb157..ae8ff65 100644
--- a/tmp/47d88d96-5161-4ad8-8081-acfda3f54005_buggy.java
+++ b/tmp/39422d3b-ad18-47c9-a620-9c27efd2f399_fixed.java
@@ -1,14 +1,35 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // Let's grow by 50% by default
+        // but above intended maximum, slow to increase by 25% (comment appears outdated)
+        // Also: if we are at the max, grow just by one
+
+        if (len == MAX_SEGMENT_LEN) {
+            // Special case: can grow by one past MAX
+            newLen = MAX_SEGMENT_LEN + 1;
+        } else if (len > MAX_SEGMENT_LEN) {
+            // Already exceeded max: append tiny bit (1 char), don't overflow growth calculation
+            // This prevents shrinking observed in the bug.
+            newLen = len + 1;
+        } else {
+            // Otherwise, grow by 50%, but capped at MAX_SEGMENT_LEN
+            newLen = len + (len >> 1);
+            if (newLen > MAX_SEGMENT_LEN) {
+                 newLen = MAX_SEGMENT_LEN;
+            }
+            // Also must ensure we grow by at least one (handles len=0, len=1 cases)
+            if (newLen == len) {
+                 newLen = len + 1;
+            }
+        }
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
