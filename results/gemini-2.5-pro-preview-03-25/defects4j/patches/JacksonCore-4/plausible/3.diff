diff --git a/tmp/54b466a7-8a86-4c49-bd5b-3febbc4f1714_buggy.java b/tmp/5b80c5fb-5389-49c3-9ac4-b3664f3b9d4e_fixed.java
index c6cb157..df0f2fc 100644
--- a/tmp/54b466a7-8a86-4c49-bd5b-3febbc4f1714_buggy.java
+++ b/tmp/5b80c5fb-5389-49c3-9ac4-b3664f3b9d4e_fixed.java
@@ -1,14 +1,28 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // Determine new length: grow by 50% normally,
+        // but no more than max segment length. However, beyond max segment len,
+        // slow down growth to 25%
+        if (len < MAX_SEGMENT_LEN) { // MAX_SEGMENT_LEN is 256k == 262144
+            newLen = Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        } else {
+            // Otherwise, grow by 25% (slower growth past max segment)
+            // Need to make sure it grows by at least one char
+            newLen = len + (len >> 2);
+        }
+        // Let's ensure we always grow at least by one char:
+        // (should not be needed with the logic above, but as safeguard)
+        if (newLen <= len) {
+            newLen = len + 1;
+        }
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
