diff --git a/tmp/57cbeeee-72a6-40c8-b480-a51abaff3f47_buggy.java b/tmp/622b7850-981e-4d06-8aa9-db695fc434e6_fixed.java
index c6cb157..90dcb12 100644
--- a/tmp/57cbeeee-72a6-40c8-b480-a51abaff3f47_buggy.java
+++ b/tmp/622b7850-981e-4d06-8aa9-db695fc434e6_fixed.java
@@ -1,14 +1,31 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+
+        // [Core#152]: prevent shrinking or no-growth
+        int newLen;
+        // Growth logic: if segment is smaller than maximum, grow by 50%, capped at maximum.
+        // If segment is already at maximum or larger, grow by 25%.
+        if (len < MAX_SEGMENT_LEN) { // MAX_SEGMENT_LEN = 262144 by default
+            // Normal growth, by 50% (except if len is 1, grow by 1)
+            int incr = Math.max(1, len >> 1);
+            newLen = Math.min(MAX_SEGMENT_LEN, len + incr);
+        } else {
+            // Above intended maximum: slower growth by 25% -- but always grow by at least 1
+            // (25% is always > 0 for len >= MAX_SEGMENT_LEN)
+            int incr = len >> 2; // 25% growth
+            newLen = len + incr;
+            // Also check against integer overflow
+            if (newLen < len) { // integer overflow?
+                 // As fallback, just throw exception...
+                 throw new IllegalStateException("Maximum TextBuffer size exceeded");
+            }
+        }
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
