diff --git a/tmp/bdbfcd3c-3e04-4033-8188-0d7fb990c246_buggy.java b/tmp/4c1ac723-8357-45c8-9429-9734bfae8662_fixed.java
index c6cb157..bbf9cd6 100644
--- a/tmp/bdbfcd3c-3e04-4033-8188-0d7fb990c246_buggy.java
+++ b/tmp/4c1ac723-8357-45c8-9429-9734bfae8662_fixed.java
@@ -1,14 +1,31 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+
+        // Determine increment direction based on current size: 50% for small, 25% for large
+        // (but ensure minimum increment is 1, not 0, for len=0)
+        int increment = (len < MAX_SEGMENT_LEN) ? (len >> 1) : (len >> 2);
+        // Ensure minimum increment is 1, crucial for len=0
+        if (increment < 1) {
+            increment = 1;
+        }
+        int newLen = len + increment;
+
+        // Check for integer overflow (should not happen with reasonable segment sizes)
+        if (newLen < 0) {
+             // As per [jackson-core#1017], indicates we have already exceeded maximum addressable
+             // array size and should not try to expand further
+            throw new IllegalStateException("Maximum segment size ("+len+") reached, cannot expand");
+        }
+
+        // Need to check reasonableness of size? For now, let's assume ok
+        // Also: must be strictly bigger. Increased minimum from 0 to 1 handles that.
+
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
