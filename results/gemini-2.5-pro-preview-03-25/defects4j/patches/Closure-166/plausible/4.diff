diff --git a/tmp/624c2330-1488-4424-a9d8-a9e23d4bdaad_buggy.java b/tmp/a8e69d70-ea18-49fa-a393-aaa6dd0d7125_fixed.java
index 5f96616..8f82ab0 100644
--- a/tmp/624c2330-1488-4424-a9d8-a9e23d4bdaad_buggy.java
+++ b/tmp/a8e69d70-ea18-49fa-a393-aaa6dd0d7125_fixed.java
@@ -1,20 +1,29 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
+    // Handle the case where the constraint object is a record type or
+    // a union type containing record types.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      // If the constraint is a union, try to match any alternates
+      // that are record types.
+      for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
     }
   }
\ No newline at end of file
