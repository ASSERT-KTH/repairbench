diff --git a/tmp/e5013e5f-3c6e-4840-a07b-4ff7a9a1652d_buggy.java b/tmp/e0135193-4153-4d99-ab5b-93143c404a5f_fixed.java
index 5f96616..da0d586 100644
--- a/tmp/e5013e5f-3c6e-4840-a07b-4ff7a9a1652d_buggy.java
+++ b/tmp/e0135193-4153-4d99-ab5b-93143c404a5f_fixed.java
@@ -1,20 +1,34 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      // Handle the case where the constraint is a union type.
+      // We want to iterate over the alternates and match any record types.
+      //
+      // /** @param {{a: number}|{b: string}} constraint */
+      // function f(constraint) {}
+      // f({});
+      //
+      // We want the object literal to become {a: number, b: string}.
+      for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
     }
   }
\ No newline at end of file
