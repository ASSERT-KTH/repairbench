diff --git a/tmp/cee7c9a6-6834-46f8-adbb-d4822f8d5d79_buggy.java b/tmp/7833a23b-b0b4-4117-87eb-bbefae357bfc_fixed.java
index 5f96616..65b1595 100644
--- a/tmp/cee7c9a6-6834-46f8-adbb-d4822f8d5d79_buggy.java
+++ b/tmp/7833a23b-b0b4-4117-87eb-bbefae357bfc_fixed.java
@@ -1,20 +1,32 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
+    // Handle the case where the constraint object is a record type or a
+    // union type containing record types.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
-    //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    //
+    // param constraint {{prop: (number|undefined)} | {prop2: (string|undefined)}}
+    // function f(constraint) {}
+    // f({});
+    // We want to modify the object literal to match the constraint properties
+    // from all record types in the union.
+    if (constraint.isUnionType()) {
+      for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
