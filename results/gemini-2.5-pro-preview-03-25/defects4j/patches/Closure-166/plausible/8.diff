diff --git a/tmp/ceca3400-509b-46b8-9ddc-da1637c1109d_buggy.java b/tmp/0afbaf50-899e-4361-a750-8b8331f1c9b5_fixed.java
index 5f96616..f0ee686 100644
--- a/tmp/ceca3400-509b-46b8-9ddc-da1637c1109d_buggy.java
+++ b/tmp/0afbaf50-899e-4361-a750-8b8331f1c9b5_fixed.java
@@ -1,20 +1,36 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
+    // Handle the case where the constraint object is a record type or
+    // a union type containing record types.
     //
+    // Example 1: Direct record type
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // Example 2: Union containing record types
+    // param constraint {{a: (boolean|undefined)}|{b: (string|undefined)}} x
+    // function f(x) {}
+    // var out = {};
+    // f(out);
+    //
+    // We want to modify the object literal (this) to match the constraint, by
+    // taking each property on the record type(s) and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    if (constraint.isUnionType()) {
+      // If it's a union, check each alternative.
+      for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
+      // If it's a direct record type.
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
