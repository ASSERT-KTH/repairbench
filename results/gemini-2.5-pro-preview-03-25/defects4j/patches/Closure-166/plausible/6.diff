diff --git a/tmp/133e9350-5016-412d-8072-7fe2e9843cee_buggy.java b/tmp/a0f3e9a3-b578-4501-999e-d8f0f9c04e45_fixed.java
index 5f96616..b2e5b81 100644
--- a/tmp/133e9350-5016-412d-8072-7fe2e9843cee_buggy.java
+++ b/tmp/a0f3e9a3-b578-4501-999e-d8f0f9c04e45_fixed.java
@@ -1,20 +1,28 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    //
+    // Also handle the case where the constraint is a union of record types.
+    if (constraint.isUnionType()) {
+      for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+        if (alt.isRecordType()) {
+          matchRecordTypeConstraint(alt.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
