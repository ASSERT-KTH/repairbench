diff --git a/tmp/f6d415f1-4c46-4ec7-9dc2-55441341aaae_buggy.java b/tmp/7f3d8f80-d171-44b5-ac13-3d761b18a9e8_fixed.java
index 5f96616..19600c9 100644
--- a/tmp/f6d415f1-4c46-4ec7-9dc2-55441341aaae_buggy.java
+++ b/tmp/7f3d8f80-d171-44b5-ac13-3d761b18a9e8_fixed.java
@@ -1,20 +1,30 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    // Handle the case where the constraint is a union type.
+    // We check each alternative of the union. If it's a record type,
+    // we use it for matching properties.
+    if (constraint.isUnionType()) {
+      UnionType unionType = constraint.toUnionType();
+      for (JSType alternate : unionType.getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
       // Handle the case where the constraint object is a record type.
       //
       // param constraint {{prop: (number|undefined)}}
       // function f(constraint) {}
       // f({});
       //
       // We want to modify the object literal to match the constraint, by
       // taking any each property on the record and trying to match
       // properties on this object.
-    if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
