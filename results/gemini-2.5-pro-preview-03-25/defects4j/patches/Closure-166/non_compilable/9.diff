diff --git a/tmp/a43918e3-d37d-4eab-9c09-6b9961ccd3d6_buggy.java b/tmp/18d95ee6-1d4a-4fae-8e6d-742e92849cd9_fixed.java
index 5f96616..d22e2c1 100644
--- a/tmp/a43918e3-d37d-4eab-9c09-6b9961ccd3d6_buggy.java
+++ b/tmp/18d95ee6-1d4a-4fae-8e6d-742e92849cd9_fixed.java
@@ -1,20 +1,40 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    // Handle the case where the constraint is a union type.
+    // Try to match *all* the record types in the union.
+    //
+    // /**
+    //  * @param {{a: boolean}|{b: string}} constraint
+    //  */
+    // function f(constraint) {}
+    // f({});
+    //
+    // We want the object literal to match the union constraint, by
+    // ensuring that it has all properties of all record types
+    // in the union.
+    if (constraint.isUnionType()) {
+      for (JSType alternate : constraint.toUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
+    }
+
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    else if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
