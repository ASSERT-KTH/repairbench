diff --git a/tmp/ccf27c33-22ad-4749-b0f9-a3ba79fe1a2f_buggy.java b/tmp/6173fb1c-dc69-4471-9689-6d68168ea8d9_fixed.java
index 5f96616..7377e42 100644
--- a/tmp/ccf27c33-22ad-4749-b0f9-a3ba79fe1a2f_buggy.java
+++ b/tmp/6173fb1c-dc69-4471-9689-6d68168ea8d9_fixed.java
@@ -1,20 +1,28 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      // If the constraint is a union type, try to match properties from
+      // any record types in the union. (See testRecordInference)
+      for (JSType alternate : constraint.toUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
     }
   }
\ No newline at end of file
