diff --git a/tmp/be89113c-12b6-4fb6-86da-c33e5f57018f_buggy.java b/tmp/a660073f-d1d1-44e1-805e-9803a15b53b0_fixed.java
index 939f49b..87c0267 100644
--- a/tmp/be89113c-12b6-4fb6-86da-c33e5f57018f_buggy.java
+++ b/tmp/a660073f-d1d1-44e1-805e-9803a15b53b0_fixed.java
@@ -1,21 +1,38 @@
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      // Ensure assign is an ASSIGN node
+      if (!assign.isAssign()) {
+        return false;
+      }
+
+      Node n = assign.getFirstChild(); // The LHS of the assignment
+
+      // Check if LHS is GETPROP (obj.prop) or GETELEM (obj['prop'])
+      if (n != null && (n.isGetProp() || n.isGetElem())) {
+          // Check if it's a valid, simple assignment LHS using NodeUtil utility.
+          if (!NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+             return false;
+          }
+
+          // n represents 'Something.prototype.propertyName' or 'Something.prototype['propertyName']'
+          // n.getFirstChild() should represent 'Something.prototype'
+          Node base = n.getFirstChild();
+
+          // Check if 'Something.prototype' is represented by a GETPROP node.
+          // Accessing .prototype is expected to be via GETPROP.
+          if (base.isGetProp()) {
+              // Check if the property name of 'base' is 'prototype'.
+              // The second child of a GETPROP node is the property name string.
+              Node prototypeNode = base.getLastChild();
+
+              // Check if it's the string literal "prototype"
+              if (prototypeNode.isString() && prototypeNode.getString().equals("prototype")) {
+                  // Matches the pattern Something.prototype.propertyName = ...
+                  // or Something.prototype['propertyName'] = ...
                   return true;
               }
           }
       }
 
+      // Did not match the expected prototype assignment pattern
       return false;
     }
\ No newline at end of file
