diff --git a/tmp/c2152bf8-7cf6-4465-9e22-3e8a9d185fb6_buggy.java b/tmp/3256432a-e278-4a47-b2f7-e46792daeb09_fixed.java
index 939f49b..3b739f3 100644
--- a/tmp/c2152bf8-7cf6-4465-9e22-3e8a9d185fb6_buggy.java
+++ b/tmp/3256432a-e278-4a47-b2f7-e46792daeb09_fixed.java
@@ -1,21 +1,30 @@
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      Node lhs = assign.getFirstChild();
+      // Check if LHS is non-null and a valid assignment target
+      if (lhs != null && NodeUtil.isVarOrSimpleAssignLhs(lhs, assign)) {
+        // Check if the LHS is a property access (GETPROP or GETELEM)
+        // Example: Foo.prototype.bar or Foo.prototype['bar']
+        if (lhs.isGetProp() || lhs.isGetElem()) {
+          // Get the object being accessed (the part before '.' or '[')
+          // Example: Foo.prototype
+          Node objectNode = lhs.getFirstChild();
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+          // Check if this object part is itself a GETPROP (must be something like *.prototype)
+          if (objectNode != null && objectNode.isGetProp()) {
+            // Get the property name node of the object part
+            // Example: the "prototype" part of Foo.prototype
+            Node propertyNameNode = objectNode.getSecondChild();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+            // Check if the property name is the string "prototype"
+            if (propertyNameNode != null && propertyNameNode.isString() &&
+                propertyNameNode.getString().equals("prototype")) {
+              // It's an assignment to a prototype property like:
+              // x.prototype.y = ...
+              // x.prototype['y'] = ...
               return true;
             }
           }
         }
-
-      return false;
+      }
+      return false; // Not a prototype property assignment
     }
\ No newline at end of file
