diff --git a/tmp/f1d76de4-3e2d-4623-85dd-3e7601e36368_buggy.java b/tmp/27a7d220-4dd0-44b5-be18-83dd487d087f_fixed.java
index 939f49b..6a8a65d 100644
--- a/tmp/f1d76de4-3e2d-4623-85dd-3e7601e36368_buggy.java
+++ b/tmp/27a7d220-4dd0-44b5-be18-83dd487d087f_fixed.java
@@ -1,21 +1,31 @@
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
+      Node n = assign.getFirstChild(); // LHS of the assignment
+
+      // Check if LHS is a valid assignment target and is a property/element access
+      // e.g., a.b.prototype.c = ... or a.b.prototype['c'] = ...
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && (n.isGetProp() || n.isGetElem()) // Allow GETPROP (like . ) or GETELEM (like [] )
          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+        // n.getFirstChild() is the object part being accessed, e.g., a.b.prototype
+        Node objectNode = n.getFirstChild();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Check if the object part is specifically a GETPROP node ending in ".prototype"
+        // e.g., objectNode represents "a.b.prototype"
+        if (objectNode != null && objectNode.isGetProp()) {
+          // objectNode = GETPROP(..., 'prototype')
+
+          // Get the property name node from the objectNode (the ".prototype" part)
+          Node propertyNameNode = objectNode.getLastChild();
+
+          // Check if the property name is the string "prototype"
+          if (propertyNameNode != null && propertyNameNode.isString() &&
+              propertyNameNode.getString().equals("prototype")) {
+            // We have confirmed the structure is (...).prototype.PROPERTY or (...).prototype[PROPERTY]
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
