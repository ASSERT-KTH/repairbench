diff --git a/tmp/e8438e62-92ec-4e91-8851-bc62db455493_buggy.java b/tmp/aa0e9cce-d9a6-4adb-9f47-932c3f235bef_fixed.java
index 939f49b..eec99a6 100644
--- a/tmp/e8438e62-92ec-4e91-8851-bc62db455493_buggy.java
+++ b/tmp/aa0e9cce-d9a6-4adb-9f47-932c3f235bef_fixed.java
@@ -1,21 +1,32 @@
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      Node n = assign.getFirstChild(); // LHS node
+      // Check if LHS is a property assignment like obj.prop = ... or obj['prop'] = ...
+      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+          // Check if LHS is a property access using dot notation (GETPROP)
+          // or bracket notation (GETELEM)
+          if (n.isGetProp() || n.isGetElem()) {
+              // Get the object part (e.g., "someConstructor.prototype" in
+              // "someConstructor.prototype.property = ..." or
+              // "someConstructor.prototype['property'] = ...")
+              Node objectNode = n.getFirstChild();
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+              // Check if the object part itself is a property access
+              // using dot notation (e.g., "someConstructor.prototype")
+              if (objectNode.isGetProp()) {
+                  // Get the name of the property being accessed on the base object.
+                  // For GETPROP, the second child is the property name string.
+                  Node propertyNameNode = objectNode.getSecondChild();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+                  // Check if the property name is the string "prototype"
+                  if (propertyNameNode.isString() &&
+                      propertyNameNode.getString().equals("prototype")) {
+                      // This identifies assignments like:
+                      // someConstructor.prototype.someProperty = ...
+                      // someConstructor.prototype['someProperty'] = ...
                       return true;
                   }
               }
           }
-
+      }
       return false;
     }
\ No newline at end of file
