diff --git a/tmp/0d418bac-ecbf-483a-8253-cac303c48c42_buggy.java b/tmp/3e6ca5d6-e849-4c80-a3ac-573a63f17f08_fixed.java
index 939f49b..298405f 100644
--- a/tmp/0d418bac-ecbf-483a-8253-cac303c48c42_buggy.java
+++ b/tmp/3e6ca5d6-e849-4c80-a3ac-573a63f17f08_fixed.java
@@ -1,21 +1,23 @@
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
+      Node n = assign.getFirstChild(); // The LHS of the assignment
+      // Check if the LHS is a qualified name access (GETPROP or GETELEM)
+      // and is a valid LHS.
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+          && (n.isGetProp() || n.isGetElem())) {
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Now check that the object being assigned to is a prototype.
+        // e.g. for x.y = foo, check that x is *.prototype
+        // e.g. for x['y'] = foo, check that x is *.prototype
+        Node objectNode = n.getFirstChild(); // The object part (e.g., x)
+        if (objectNode.isGetProp()) {
+          // Check if it's of the form <something>.prototype
+          Node propertyNameNode = objectNode.getLastChild();
+          if (propertyNameNode != null && propertyNameNode.isString() &&
+              propertyNameNode.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
