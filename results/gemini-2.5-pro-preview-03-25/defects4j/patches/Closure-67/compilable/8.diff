diff --git a/tmp/b3bdc8ee-8149-45bb-b30b-f26182fa591d_buggy.java b/tmp/e383d011-e6db-404d-a041-f1b5f4b69de7_fixed.java
index 939f49b..da8f3e5 100644
--- a/tmp/b3bdc8ee-8149-45bb-b30b-f26182fa591d_buggy.java
+++ b/tmp/e383d011-e6db-404d-a041-f1b5f4b69de7_fixed.java
@@ -1,21 +1,27 @@
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      Node lhs = assign.getFirstChild(); // Get the LHS of the assignment
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+      // Check if it's a property assignment (a.b = ...) or element assignment (a['b'] = ...)
+      // and ensure it's a valid assignment target.
+      if (lhs != null &&
+          (lhs.getType() == Token.GETPROP || lhs.getType() == Token.GETELEM) &&
+          NodeUtil.isVarOrSimpleAssignLhs(lhs, assign)) {
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Get the object being accessed (e.g., 'Something.prototype'
+        // in Something.prototype.method = ... or Something.prototype['method'] = ...)
+        Node objectNode = lhs.getFirstChild();
+
+        // Check if this objectNode represents 'Something.prototype'
+        // This means objectNode should be a GETPROP node accessing the 'prototype' property.
+        if (objectNode != null && objectNode.getType() == Token.GETPROP) {
+            Node propertyNameNode = objectNode.getLastChild(); // Should be the 'prototype' string node
+            if (propertyNameNode != null &&
+                propertyNameNode.getType() == Token.STRING &&
+                "prototype".equals(propertyNameNode.getString())) {
+                // It matches the pattern Something.prototype.property or Something.prototype['property']
                 return true;
             }
         }
       }
-
       return false;
     }
\ No newline at end of file
