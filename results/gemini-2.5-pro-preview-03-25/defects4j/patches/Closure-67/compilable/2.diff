diff --git a/tmp/41412f8b-a1fe-4a0e-8fcf-69466bca3ef3_buggy.java b/tmp/764cc622-22bf-4431-afa0-d3c232d1c773_fixed.java
index 939f49b..3ff7b5a 100644
--- a/tmp/41412f8b-a1fe-4a0e-8fcf-69466bca3ef3_buggy.java
+++ b/tmp/764cc622-22bf-4431-afa0-d3c232d1c773_fixed.java
@@ -1,21 +1,28 @@
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
+      Node n = assign.getFirstChild(); // LHS node
+      // Check if LHS is GETPROP or GETELEM and is a valid LHS
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM) // Allow GETELEM for bracket notation
          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        // Get the base object (e.g., 'a.b' from 'a.b.c' or 'a.b["c"]')
+        Node baseObject = n.getFirstChild();
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+        // Check if the base object itself is a GETPROP node (e.g., 'a.b')
+        // This ensures we are dealing with something like Class.prototype
+        if (baseObject != null && baseObject.getType() == Token.GETPROP) {
+           // Get the property name of the base object (e.g., 'b' from 'a.b')
+           // It should be the second child of the GETPROP node.
+           Node prototypeProperty = baseObject.getLastChild(); // Property name node
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+           // Check if the property name is the string "prototype"
+           if (prototypeProperty != null &&
+               prototypeProperty.getType() == Token.STRING &&
+               prototypeProperty.getString().equals("prototype")) {
+             // Matches Class.prototype.something = ... or Class.prototype['something'] = ...
              return true;
            }
         }
       }
 
       return false;
     }
\ No newline at end of file
