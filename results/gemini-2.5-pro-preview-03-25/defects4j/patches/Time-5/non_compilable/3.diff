diff --git a/tmp/62156609-ce8d-4f21-9320-265189d78d64_buggy.java b/tmp/f01e5ae6-095b-4a2d-b703-9f118f336174_fixed.java
index dbda381..a17809d 100644
--- a/tmp/62156609-ce8d-4f21-9320-265189d78d64_buggy.java
+++ b/tmp/f01e5ae6-095b-4a2d-b703-9f118f336174_fixed.java
@@ -1,54 +1,101 @@
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.DurationFieldType;
+import org.joda.time.Period;
+import org.joda.time.PeriodType;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.field.FieldUtils;
+
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
+        // Calculate total milliseconds from weeks down to millis.
+        // Overflow is handled by using longs for intermediate calculations.
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        
+        // Create a preliminary result period with the time fields normalized
+        // according to the specified PeriodType. This constructor handles the
+        // distribution of millis into weeks, days, hours, etc. based on the type.
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+        
+        // Normalize the year and month fields separately and add them to the result,
+        // respecting the limitations of the specified PeriodType.
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            // Calculate the total number of months represented by the years and months fields.
+            long totalMonths = FieldUtils.safeAdd((long) years * 12, months);
+            
+            // Distribute totalMonths into the result period's year/month fields
+            // based on the PeriodType's supported fields.
+            if (type.isSupported(DurationFieldType.years())) {
+                int normYears = FieldUtils.safeToInt(totalMonths / 12);
+                result = result.withYears(normYears); // Set years field if supported
+                // The remaining months are the modulus.
+                int normMonths = FieldUtils.safeToInt(totalMonths % 12);
+                // Check if the PeriodType also supports months before setting.
+                if (type.isSupported(DurationFieldType.months())) {
+                     result = result.withMonths(normMonths); // Set months field if supported
+                } else {
+                    // If months field is not supported, the remaining months cannot be represented.
+                    // If normMonths is non-zero, this implies loss of information according to the type.
+                    if (normMonths != 0) {
+                        // This situation (years supported, months not, but normMonths != 0) might warrant
+                        // an exception depending on desired behavior for custom types, but currently
+                        // we adhere strictly to the type's supported fields.
                     }
-            if (months != 0) {
-                result = result.withMonths(months);
                 }
+            } else if (type.isSupported(DurationFieldType.months())) {
+                // If years are not supported, but months are, convert the entire year/month
+                // duration (totalMonths) into the months field.
+                int normMonths = FieldUtils.safeToInt(totalMonths);
+                result = result.withMonths(normMonths);
+            } else {
+                // If neither years nor months are supported by the target type,
+                // and the original period had non-zero years or months (totalMonths != 0),
+                // then the period cannot be represented in the requested type.
+                if (totalMonths != 0) {
+                    throw new UnsupportedOperationException(
+                        "Cannot convert to PeriodType that does not support Years or Months");
                 }
+                // If totalMonths is zero, no changes needed for year/month fields.
+            }
+        }
+        
         return result;
     }
\ No newline at end of file
