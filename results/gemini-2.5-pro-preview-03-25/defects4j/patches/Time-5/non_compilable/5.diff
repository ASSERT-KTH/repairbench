diff --git a/tmp/d1f56b76-5490-4603-be34-72a22276dc27_buggy.java b/tmp/55386ab8-097f-419f-b6b0-64f85ee60552_fixed.java
index dbda381..fff1045 100644
--- a/tmp/d1f56b76-5490-4603-be34-72a22276dc27_buggy.java
+++ b/tmp/55386ab8-097f-419f-b6b0-64f85ee60552_fixed.java
@@ -1,54 +1,109 @@
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.DurationFieldType;
+import org.joda.time.PeriodType;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.field.FieldUtils;
+
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      *
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+        // Capture original values
+        int iYears = getYears();
+        int iMonths = getMonths();
+        int iWeeks = getWeeks();
+        int iDays = getDays();
+        int iHours = getHours();
+        int iMinutes = getMinutes();
+        int iSeconds = getSeconds();
+        int iMillis = getMillis();
+
+        // Calculate total millis from lower fields (weeks to millis) using safe arithmetic
+        long totalMillis = iMillis;
+        // FieldUtils potentially throws ArithmeticException, which is declared
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) iSeconds, DateTimeConstants.MILLIS_PER_SECOND));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) iMinutes, DateTimeConstants.MILLIS_PER_MINUTE));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) iHours, DateTimeConstants.MILLIS_PER_HOUR));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) iDays, DateTimeConstants.MILLIS_PER_DAY));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) iWeeks, DateTimeConstants.MILLIS_PER_WEEK));
+
+        // Create intermediate period with normalized time fields based on type and totalMillis
+        // This constructor distributes totalMillis across supported time fields (weeks down to millis)
+        // according to ISOChronology UTC rules.
+        Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+
+        // Normalize and add year/month fields if present in the original period
+        // and supported by the target type
+        if (iYears != 0 || iMonths != 0) {
+            // FieldUtils potentially throws ArithmeticException, which is declared
+            long totalMonths = FieldUtils.safeAdd(iMonths, FieldUtils.safeMultiply(iYears, 12));
+            boolean yearSupported = type.isSupported(DurationFieldType.years());
+            boolean monthSupported = type.isSupported(DurationFieldType.months());
+
+            if (yearSupported) {
+                // FieldUtils potentially throws ArithmeticException, which is declared
+                int finalYears = FieldUtils.safeToInt(totalMonths / 12);
+                result = result.withYears(finalYears); // Safe: year field is supported by type
+                
+                // If months are also supported, set the remainder months field
+                if (monthSupported) {
+                    // FieldUtils potentially throws ArithmeticException, which is declared
+                    int finalMonths = FieldUtils.safeToInt(totalMonths % 12);
+                    result = result.withMonths(finalMonths); // Safe: month field is supported by type
+                } else {
+                    // If months not supported, the remainder (totalMonths % 12) is effectively discarded
+                    // as per the PeriodType contract (omitting unsupported fields).
+                    // We must check if this discard operation is valid according to the spec.
+                    // The spec says "throws UnsupportedOperationException if this period contains non-zero
+                    // years or months but the specified period type does not support them".
+                    // Here, years are supported, so we don't throw, even if months have a remainder.
                 }
-            if (months != 0) {
-                result = result.withMonths(months);
+            } else if (monthSupported) { // Years not supported, but months is
+                // FieldUtils potentially throws ArithmeticException, which is declared
+                int finalMonths = FieldUtils.safeToInt(totalMonths);
+                result = result.withMonths(finalMonths); // Safe: month field is supported by type
+            } else { // Neither years nor months supported by the type
+                // As per Javadoc, throw if original period had non-zero years/months
+                // (resulting in non-zero totalMonths) but type doesn't support them.
+                if (totalMonths != 0) {
+                    throw new UnsupportedOperationException(
+                        "Cannot normalize years or months because period type does not support either field");
                 }
+                // If totalMonths is 0, nothing to do, result already has 0 years/months (or fields are absent)
             }
+        }
+        // result now contains normalized weeks down to millis based on totalMillis,
+        // and normalized years/months based on totalMonths, respecting the PeriodType.
         return result;
     }
\ No newline at end of file
