diff --git a/tmp/84b9a3d1-0b30-416e-8573-0cd75d94934f_buggy.java b/tmp/31838f8c-97b3-4eef-a6c0-4ae8ea295445_fixed.java
index dbda381..396df0f 100644
--- a/tmp/84b9a3d1-0b30-416e-8573-0cd75d94934f_buggy.java
+++ b/tmp/31838f8c-97b3-4eef-a6c0-4ae8ea295445_fixed.java
@@ -1,54 +1,109 @@
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.DurationFieldType;
+import org.joda.time.PeriodType;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.field.FieldUtils;
+
+// NOTE: The containing class Period and other methods are omitted for brevity.
+// Assume necessary imports and class structure exist.
+
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
+     * normalized based on a 12 month year. The days field and below will be
+     * normalized independently based on fixed durations (e.g., 1 day = 24 hours).
+     * The normalization of days and below will not overflow into the months field.
+     * For example, a period of 1 year 15 months will normalize to 2 years 3 months
+     * if the period type supports years and months. If the period type only supports
+     * months, it will normalize to 27 months.
+     * A period of 1 month 40 days will normalize to 1 month, 5 weeks, 5 days if
+     * the period type supports months, weeks and days. It remains 1 month 40 days if
+     * only months and days (but not weeks) are supported.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
+     * If the period contains non-zero values for fields (like years or months)
+     * that are NOT supported by the specified PeriodType, an exception is thrown.
+     * However, if the unsupported field's value can be entirely represented
+     * by a supported field (e.g., years converted to months when only months
+     * is supported), the conversion happens without an exception.
      * 
      * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
+     * @return a normalized period equivalent to this period, with the specified type
+     * @throws ArithmeticException if any field calculates to a value too large
+     *         or small to be represented by an int.
      * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
+     *  years or months but the specified period type does not support years or months.
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
-        type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+        type = DateTimeUtils.getPeriodType(type); // Ensure type is not null
+
+        // Calculate total millis from weeks downwards. Check for overflow using FieldUtils.
+        long totalMillis = getMillis(); // Assign initial value first
+        // Use safeAdd and safeMultiply to prevent overflow
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));
+
+        // Calculate total months from years and months. Check for overflow using FieldUtils.
+        long totalMonths = 0; // Use long to avoid intermediate overflow
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            // Calculate total months, ensuring overflow is checked
+            totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply((long)years, 12), (long)months);
         }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+        // Determine normalized year and month values based on totalMonths and the target type
+        int normYears = 0;
+        int normMonths = 0;
+        if (totalMonths != 0) {
+            boolean periodHasYears = type.isSupported(DurationFieldType.years());
+            boolean periodHasMonths = type.isSupported(DurationFieldType.months());
+
+            if (periodHasYears) {
+                // If type supports years, distribute totalMonths into years and months
+                normYears = FieldUtils.safeToInt(totalMonths / 12); // Use integer division
+                normMonths = FieldUtils.safeToInt(totalMonths % 12); // Use remainder
+            } else if (periodHasMonths) {
+                // If type only supports months (not years), put all into months
+                normMonths = FieldUtils.safeToInt(totalMonths);
+            } else {
+                // Original period had non-zero years/months, but the target type supports neither.
+                // Throw exception as per Javadoc.
+                throw new UnsupportedOperationException("Field is not supported");
             }
         }
-        return result;
+
+        // Create a temporary period using the calculated totalMillis and the target type.
+        // This constructor correctly distributes the milliseconds into the time fields
+        // (weeks, days, hours, minutes, seconds, millis) supported by the type,
+        // using standard durations (e.g., 1 day = 24 hours).
+        Period timePeriod = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+
+        // Construct the final period using the determined year/month values
+        // and the time field values extracted from the temporary timePeriod.
+        // The Period constructor ensures that only fields supported by the type are stored.
+        return new Period(normYears, normMonths,
+                          timePeriod.getWeeks(), timePeriod.getDays(),
+                          timePeriod.getHours(), timePeriod.getMinutes(),
+                          timePeriod.getSeconds(), timePeriod.getMillis(),
+                          type);
     }
\ No newline at end of file
