diff --git a/tmp/ca63c78c-b455-401e-a134-32fa57ad5bdd_buggy.java b/tmp/12cda635-eef6-418b-9af7-75b80cce5c4f_fixed.java
index dbda381..8ecbc26 100644
--- a/tmp/ca63c78c-b455-401e-a134-32fa57ad5bdd_buggy.java
+++ b/tmp/12cda635-eef6-418b-9af7-75b80cce5c4f_fixed.java
@@ -1,54 +1,91 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
-        type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        type = DateTimeUtils.getPeriodType(type); // Ensure type is not null
+
+        // Calculate total millis from time fields (ms to weeks) using safe arithmetic
+        long millis = getMillis();
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));
+
+        // Create base result period with normalized time fields.
+        // Unsupported fields (including years/months if not in type) are initialized to 0.
+        // Use UTC chronology to avoid potential daylight saving issues with time fields.
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Cache original year/month values
         int years = getYears();
         int months = getMonths();
+
+        // Only process years/months if the original period had non-zero values in them.
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            // Calculate total months using safe arithmetic
+            long totalMonths = FieldUtils.safeMultiply((long) years, 12);
+            totalMonths = FieldUtils.safeAdd(totalMonths, (long) months);
+
+            // Check if type supports the fields needed to represent the non-zero year/month part.
+            boolean yearsSupported = type.isSupported(DurationFieldType.years());
+            boolean monthsSupported = type.isSupported(DurationFieldType.months());
+
+            if (!yearsSupported && !monthsSupported) {
+                // As per Javadoc, throw if original had non-zero years/months but type supports neither.
+                throw new UnsupportedOperationException("Period contains years or months but PeriodType does not support them");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+            // Distribute totalMonths into the result period based on supported fields
+            if (yearsSupported) {
+                int normYears = FieldUtils.safeToInt(totalMonths / 12);
+                result = result.withYears(normYears); // Update year field
+                
+                // If months are also supported, set the remainder months
+                if (monthsSupported) {
+                    int normMonths = FieldUtils.safeToInt(totalMonths % 12);
+                    result = result.withMonths(normMonths); // Update month field
                 }
+                // If months are not supported, they remain 0 (set by constructor)
+            } else if (monthsSupported) { // Years not supported, but months are
+                // Assign the entire total months value to the months field
+                int normMonthsTotal = FieldUtils.safeToInt(totalMonths);
+                result = result.withMonths(normMonthsTotal); // Update month field with total months
+                // Years remain 0 (set by constructor as type doesn't support years)
             }
+            // else case (neither year nor month supported) is handled by the exception above
+        }
+        // If original years and months were both zero, the result period created
+        // by new Period(millis, type, chrono) already has year/month fields correctly
+        // initialized (likely to 0), so no further action is needed in that case.
+        
         return result;
     }
\ No newline at end of file
