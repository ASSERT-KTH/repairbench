diff --git a/tmp/4f460d39-ceef-4772-b244-42b511d11068_buggy.java b/tmp/1c483d77-13a8-4b55-a366-dac6e32d23d7_fixed.java
index dbda381..1a6c014 100644
--- a/tmp/4f460d39-ceef-4772-b244-42b511d11068_buggy.java
+++ b/tmp/1c483d77-13a8-4b55-a366-dac6e32d23d7_fixed.java
@@ -1,54 +1,92 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
+     * <p>
+     * If the specified period type does not support years or months, and this period
+     * contains years or months, an exception is thrown. If the period type
+     * supports years, but not months, the months will be normalized into the years
+     * and the remaining month value discarded. If the period type supports months,
+     * but not years, the years will be normalized into the months.
      *
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+        // Calculate total millis from lower fields (weeks down)
+        long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+        totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+
+        // Create a period with these millis, using the specified type and UTC chrono
+        // This distributes the millis correctly amongst the supported fields (weeks down)
+        // We use a temporary period object to get the normalized lower field values
+        Period tempMillisPeriod = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+
+        // Get original years and months
+        int origYears = getYears();
+        int origMonths = getMonths();
+        int finalYears = origYears;
+        int finalMonths = origMonths;
+
+        // Normalize years and months based on the target type
+        if (origYears != 0 || origMonths != 0) {
+            boolean hasYears = type.isSupported(DurationFieldType.years());
+            boolean hasMonths = type.isSupported(DurationFieldType.months());
+            if (!hasYears && !hasMonths) {
+                // As per Javadoc: throw if type doesn't support Y/M but period has them
+                throw new UnsupportedOperationException("PeriodType does not support years or months");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+            if (hasYears) {
+                // Normalize months into years if years are supported
+                finalYears = FieldUtils.safeAdd(origYears, origMonths / 12);
+                finalMonths = origMonths % 12;
+                // If months are not supported by the type, the finalMonths value will be ignored by the constructor later
+            } else { // hasMonths must be true here
+                // Convert years to months if only months are supported
+                finalMonths = FieldUtils.safeAdd(origMonths, FieldUtils.safeMultiply(origYears, 12));
+                finalYears = 0; // Years field is not supported
             }
         }
-        return result;
+
+        // Get the weeks/days/time fields from the millis-based temporary period
+        int weeks = tempMillisPeriod.getWeeks();
+        int days = tempMillisPeriod.getDays();
+        int hours = tempMillisPeriod.getHours();
+        int minutes = tempMillisPeriod.getMinutes();
+        int seconds = tempMillisPeriod.getSeconds();
+        int millis = tempMillisPeriod.getMillis();
+
+        // Construct the final period with the calculated/normalized year/month
+        // and the distributed lower fields. The constructor will only store values
+        // for fields supported by the PeriodType 'type'.
+        return new Period(finalYears, finalMonths, weeks, days, hours, minutes, seconds, millis, type);
     }
\ No newline at end of file
