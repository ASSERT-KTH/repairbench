diff --git a/tmp/0bfa87a2-7851-4ffb-8c0c-96ddec6f5850_buggy.java b/tmp/ab74101c-13b3-4727-b4d5-84c71ea2280c_fixed.java
index dbda381..3f5c5dd 100644
--- a/tmp/0bfa87a2-7851-4ffb-8c0c-96ddec6f5850_buggy.java
+++ b/tmp/ab74101c-13b3-4727-b4d5-84c71ea2280c_fixed.java
@@ -1,54 +1,92 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
+     * normalized to be between 0 and 11 if the result supports years.
+     * The days field and below will be normalized as necessary, however this
+     * will not overflow into the months field. Thus a period of 1 year 15 months
+     * will normally normalize to 2 years 3 months. However, if the period type
+     * does not support years (eg. `PeriodType.months()`) then 1 year 15 months
+     * will normalize to 27 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+        
+        // Calculate total milliseconds from weeks downwards.
+        // Use long to prevent intermediate overflow.
+        long totalMillis = getMillis();  // Start with millis field
+        // SafeAdd ensures no intermediate overflow, but final totalMillis can still exceed Long.MAX_VALUE
+        // However, the Period constructor below handles this by calculating fields from the totalMillis.
+        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        
+        // Create a base period with the normalized time fields distributed according to the target type.
+        // ISOChronology.getInstanceUTC() provides the standard definitions for day, hour, etc.
+        Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+
+        // Normalize years and months and add them to the result, respecting the target type.
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            // Calculate total months, using long to prevent potential overflow before normalization
+            long totalMonthsLong = FieldUtils.safeAdd(((long) years) * 12L, (long) months);
+
+            boolean hasYears = type.isSupported(DurationFieldType.years());
+            boolean hasMonths = type.isSupported(DurationFieldType.months());
+
+            // Check if the type supports the fields needed to store the year/month part.
+            // As per Javadoc, throw if input has Y/M but type supports neither.
+            if (!hasYears && !hasMonths) {
+                 throw new UnsupportedOperationException("Cannot convert period to PeriodType that does not support years or months");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+            if (hasYears) {
+                // Normalize into years and months if the type supports years
+                int normYears = FieldUtils.safeToInt(totalMonthsLong / 12);
+                // Add the normalized years to the result (potentially overwriting value from millis)
+                result = result.withYears(normYears); 
+                
+                // If months are also supported, set the remainder months
+                if (hasMonths) {
+                    int normMonths = FieldUtils.safeToInt(totalMonthsLong % 12);
+                     // Add the normalized months to the result (potentially overwriting value from millis)
+                    result = result.withMonths(normMonths);
                 }
+                // If months are not supported by the type, the remainder (totalMonthsLong % 12) is discarded.
+            } else { 
+                // Years field is not supported, but months field is (due to earlier check).
+                // Put the entire value into months.
+                int normMonths = FieldUtils.safeToInt(totalMonthsLong);
+                 // Add the total months to the result (potentially overwriting value from millis)
+                result = result.withMonths(normMonths);
             }
+        }
+        
         return result;
     }
\ No newline at end of file
