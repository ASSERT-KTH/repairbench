diff --git a/tmp/e27d6aa2-dab6-40fd-9861-a659d5e6b876_buggy.java b/tmp/26aa7201-6372-4427-ab9b-f782b4ef75d6_fixed.java
index dbda381..e3764db 100644
--- a/tmp/e27d6aa2-dab6-40fd-9861-a659d5e6b876_buggy.java
+++ b/tmp/26aa7201-6372-4427-ab9b-f782b4ef75d6_fixed.java
@@ -1,54 +1,103 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
+     * normalized to be between 0 and 11 *if the period type supports years*.
+     * The fields lower than months (weeks, days, hours, minutes, seconds, millis)
+     * will be normalized as necessary, but the normalization will not overflow
+     * into the months field. For example, a period of 1 year 15 months normalized
+     * using {@code PeriodType.standard()} will return 2 years 3 months.
+     * A period of 1 month 40 days will remain 1 month 40 days.
+     * <p>
+     * If the period type does not support years (eg. {@code PeriodType.months()}),
+     * then years will be converted to months. For example, a period of
+     * 1 year 15 months normalized using {@code PeriodType.months()} will return 27 months.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
+     * in {@code PeriodType.yearMonthDayTime()}. If the normalization
+     * results in a non-zero value for a field that is not supported by the
+     * specified period type, then an exception is thrown, *unless* the field
+     * is years and the type supports months, in which case the years are
+     * converted to months.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
+     *  years or months but the specified period type supports neither field,
+     *  or if the normalization calculation results in a field value that
+     *  cannot be represented by the period type.
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
-        type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        type = DateTimeUtils.getPeriodType(type); // Get the effective type
+        
+        // Calculate total millis from lower fields (weeks down) using long arithmetic
+        // Start with millis field, then add contributions from other fields safely
+        long millis = getMillis();
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));
+        
+        // Create an initial period to normalize the millis part based on the target type.
+        // Using UTC avoids DST issues and aligns with the "standard" normalization rules.
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+        // Calculate total months from upper fields (years, months) using long arithmetic
+        long totalMonths = getMonths();
+        // Add years converted to months safely
+        totalMonths = FieldUtils.safeAdd(totalMonths, FieldUtils.safeMultiply((long)getYears(), 12));
+
+        // If there are months/years to handle, process them based on type support
+        if (totalMonths != 0) {
+            boolean hasYears = type.isSupported(DurationFieldType.years());
+            boolean hasMonths = type.isSupported(DurationFieldType.months());
+            
+            // Check if the type can handle years or months at all
+            if (!hasYears && !hasMonths) {
+                 // As per Javadoc @throws, throw if type supports neither years nor months
+                 throw new UnsupportedOperationException("Cannot normalize years or months if period type does not support either field");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+            
+            // If the type supports years, normalize into years and months
+            if (hasYears) {
+                // Use long division/modulo before converting to int
+                int normYears = FieldUtils.safeToInt(totalMonths / 12L); 
+                int normMonths = FieldUtils.safeToInt(totalMonths % 12L);
+                
+                // Add normalized years to the result if non-zero
+                if (normYears != 0) {
+                    result = result.withYears(normYears);
                 }
+                // Add normalized months if non-zero AND the type supports months
+                if (normMonths != 0 && hasMonths) { 
+                    result = result.withMonths(normMonths);
                 }
+                // Note: If normMonths != 0 but type doesn't support months, the value is effectively dropped,
+                // as standard normalization does not overflow months into days here.
+            } else { 
+                 // Type does not support years, but supports months (checked above)
+                 // Convert the total months (including original years) into the months field
+                 int totalMonthsInt = FieldUtils.safeToInt(totalMonths);
+                 // Add total months to the result (which already has the correct type)
+                 result = result.withMonths(totalMonthsInt);
+            }
+        }
+        // If totalMonths was 0, no changes needed for years/months fields in the result
+
         return result;
     }
\ No newline at end of file
