diff --git a/tmp/9d647d9c-e517-4d9d-9a1a-d75b9f6ecf51_buggy.java b/tmp/f645a264-47b1-4220-8433-930e88efef62_fixed.java
index dbda381..4d8778f 100644
--- a/tmp/9d647d9c-e517-4d9d-9a1a-d75b9f6ecf51_buggy.java
+++ b/tmp/f645a264-47b1-4220-8433-930e88efef62_fixed.java
@@ -1,54 +1,92 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        // Calculate total millis from lower fields (weeks down)
+        // Use long to avoid intermediate overflow.
+        long millis = getMillis();  // Max value is Integer.MAX_VALUE, fits in long
+        // Use safeAdd to prevent overflow during calculation
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));
+        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));
+
+        // The constructor correctly normalizes and distributes millis
+        // across the fields supported by the type, using standard assumptions.
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Normalize years and months
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            // Calculate total months, ensuring safety against overflow
+            long totalMonths = FieldUtils.safeMultiply((long)years, 12);
+            totalMonths = FieldUtils.safeAdd(totalMonths, months);
+
+            boolean yearSupported = type.isSupported(DurationFieldType.years());
+            boolean monthSupported = type.isSupported(DurationFieldType.months());
+
+            if (!yearSupported && !monthSupported && totalMonths != 0) {
+                 // As per Javadoc, throw if type doesn't support years/months but the period has them.
+                throw new UnsupportedOperationException("PeriodType does not support fields: years and months");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+            // Determine normalized years and months based on type support
+            int normYears = 0;
+            int normMonths = 0;
+
+            if (yearSupported) {
+                normYears = FieldUtils.safeToInt(totalMonths / 12);
+                normMonths = FieldUtils.safeToInt(totalMonths % 12);
+            } else {
+                // Years not supported, keep total months together
+                normYears = 0; // Years field is conceptually zero
+                // All goes into months field conceptually, check for overflow
+                normMonths = FieldUtils.safeToInt(totalMonths);
             }
+
+            // Update the result period, respecting the type
+            // Note: result.withXxx() will throw if the field is not supported,
+            // so we must check support before calling.
+            if (yearSupported) {
+                 result = result.withYears(normYears);
+            }
+            if (monthSupported) {
+                 result = result.withMonths(normMonths);
+            }
+            // If a field (years or months) was calculated to be non-zero but is not supported
+            // by the type, its value is effectively dropped, as per type constraints.
+            // The exception is only thrown if *both* are unsupported AND the original period had non-zero years/months.
         }
         return result;
     }
\ No newline at end of file
