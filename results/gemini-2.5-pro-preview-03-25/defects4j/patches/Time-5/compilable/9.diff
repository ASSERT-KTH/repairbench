diff --git a/tmp/d92dbf51-7cd7-4e06-b1b3-4514cf753db1_buggy.java b/tmp/4d3f537a-124d-4d62-a00b-73f9ac39e8f2_fixed.java
index dbda381..f633596 100644
--- a/tmp/d92dbf51-7cd7-4e06-b1b3-4514cf753db1_buggy.java
+++ b/tmp/4d3f537a-124d-4d62-a00b-73f9ac39e8f2_fixed.java
@@ -1,54 +1,107 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
+     * <p>
+     * When normalizing based on a PeriodType, the years and months are normalized
+     * within themselves. The weeks, days, hours, minutes, seconds and milliseconds
+     * are normalized based on millisecond conversions. If the specified period type
+     * does not support years, and the period contains years, the years will be
+     * converted to months. If the period type does not support months either,
+     * an exception will be thrown if the period contains non-zero years or months.
+     * If the period type supports years but not months, the months will be normalized
+     * into the years field and any remainder discarded.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        
+        // Calculate total millis from weeks downwards. Use long to avoid intermediate overflow.
+        long millis = getMillis();
+        millis = FieldUtils.safeAdd(millis, ((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        millis = FieldUtils.safeAdd(millis, ((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        millis = FieldUtils.safeAdd(millis, ((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        millis = FieldUtils.safeAdd(millis, ((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        
+        // Create a base period with the normalized time fields based on the target type.
+        // Use ISOChronology.getInstanceUTC() to ensure consistent normalization independent of default Chronology.
+        // This constructor distributes the milliseconds across the supported time fields (weeks to millis).
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+        
+        // Normalize the year/month fields separately.
         int years = getYears();
         int months = getMonths();
+        
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            // Calculate total months, using long to avoid intermediate overflow.
+            long totalMonths = FieldUtils.safeAdd(((long) years) * 12L, months);
+
+            boolean hasY = type.isSupported(DurationFieldType.years());
+            boolean hasM = type.isSupported(DurationFieldType.months());
+            
+            // Check if the target type can hold the year/month value.
+            if (!hasY && !hasM && totalMonths != 0) {
+                 // Throw if period has years/months, but the target type supports neither.
+                 throw new UnsupportedOperationException("Cannot normalize a period containing years or months to a type that doesn't support either field");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+            // If we reach here, normalization is possible or totalMonths is 0.
+
+            if (hasY) {
+                // Type supports years. Calculate normalized years.
+                int normYears = FieldUtils.safeToInt(totalMonths / 12);
+                // Update the result period with the normalized years.
+                result = result.withYears(normYears); 
+
+                // Calculate the remaining months after extracting whole years.
+                int normMonths = FieldUtils.safeToInt(totalMonths % 12);
+                if (hasM) {
+                    // Type also supports months, set the remainder months.
+                    result = result.withMonths(normMonths);
+                } else {
+                    // Type supports years but not months. The remainder months (normMonths)
+                    // are discarded, as per observed behavior in tests like testNormalizedStandard_periodType_years.
+                    // The years field is already set, nothing more needed for months.
                 }
+                
+            } else if (hasM) {
+                // Type supports months but not years (hasY is false).
+                // Convert the entire year/month duration into months.
+                int normMonths = FieldUtils.safeToInt(totalMonths);
+                // Update the result period with the total months.
+                result = result.withMonths(normMonths); 
             }
+            // else: !hasY && !hasM case was handled by the exception check or totalMonths == 0.
+            // If totalMonths is 0, no update is needed as result starts with 0 years/months.
+        }
+        // If the original period had years = 0 and months = 0, the 'result' created
+        // from the millis part is sufficient, as it correctly initializes fields based on 'type'.
+
         return result;
     }
\ No newline at end of file
