diff --git a/tmp/e18e98ff-39e7-4f41-ae4b-33385d22210a_buggy.java b/tmp/f69634c5-5f32-4f7b-97df-fecb854f019b_fixed.java
index 3652aad..6270a29 100644
--- a/tmp/e18e98ff-39e7-4f41-ae4b-33385d22210a_buggy.java
+++ b/tmp/f69634c5-5f32-4f7b-97df-fecb854f019b_fixed.java
@@ -1,86 +1,115 @@
     /**
      * Defines a typed variable. The defining node will be annotated with the
      * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
      * inferred.
      *
      * Slots may be any variable or any qualified name in the global scope.
      *
      * @param n the defining NAME or GETPROP node.
      * @param parent the {@code n}'s parent.
      * @param type the variable's type. It may be {@code null} if
      *     {@code inferred} is {@code true}.
      */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
       Preconditions.checkArgument(inferred || type != null);
 
       // Only allow declarations of NAMEs and qualfied names.
-      boolean shouldDeclareOnGlobalThis = false;
+      boolean isGlobalDeclaration = false;
       if (n.getType() == Token.NAME) {
         Preconditions.checkArgument(
             parent.getType() == Token.FUNCTION ||
             parent.getType() == Token.VAR ||
             parent.getType() == Token.LP ||
             parent.getType() == Token.CATCH);
-        shouldDeclareOnGlobalThis = scope.isGlobal() &&
+        isGlobalDeclaration = scope.isGlobal() &&
             (parent.getType() == Token.VAR ||
              parent.getType() == Token.FUNCTION);
       } else {
         Preconditions.checkArgument(
             n.getType() == Token.GETPROP &&
             (parent.getType() == Token.ASSIGN ||
              parent.getType() == Token.EXPR_RESULT));
       }
       String variableName = n.getQualifiedName();
       Preconditions.checkArgument(!variableName.isEmpty());
 
       // If n is a property, then we should really declare it in the
       // scope where the root object appears. This helps out people
       // who declare "global" names in an anonymous namespace.
       Scope scopeToDeclareIn = scope;
+      boolean isQualifiedNameRootedGlobal = false;
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
+      if (n.getType() == Token.GETPROP) {
+        Node rootNode = NodeUtil.getRootOfQualifiedName(n);
+        if (rootNode.getType() == Token.NAME) {
+          String rootName = rootNode.getString();
+          // This should lookup in the current scope chain.
+          Var rootVar = scope.getVar(rootName);
+          // If the root is declared in the global scope, declare the property
+          // in the global scope.
+          if (rootVar != null && rootVar.isGlobal()) {
+             // Make sure the rootVar is defined in the global scope before
+             // trying to declare the property in the global scope.
+             if (rootVar.getScope().isGlobal()) {
+                scopeToDeclareIn = rootVar.getScope();
+                isQualifiedNameRootedGlobal = true;
+             }
+          }
+        }
+      }
 
-      // declared in closest scope?
+      // A definition implies assignment or declaration, so it should affect the global 'this'
+      // object type if either the variable name itself is global (var x = ...) or if it's
+      // a property access whose root object is global (ns.foo = ...).
+      boolean shouldDeclareOnGlobalThis = isGlobalDeclaration || isQualifiedNameRootedGlobal;
+
+      // Check for redeclaration in the chosen scope.
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);
         validator.expectUndeclaredVariable(
             sourceName, n, parent, oldVar, variableName, type);
       } else {
+        // If the type is null, use UNKNOWN_TYPE for the declaration.
+        // This can happen if inferred is true.
+        JSType declaredType = type;
+        if (declaredType == null) {
+          declaredType = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+        }
+
         if (!inferred) {
-          setDeferredType(n, type);
+          setDeferredType(n, declaredType);
         }
         CompilerInput input = compiler.getInput(sourceName);
-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);
+        scopeToDeclareIn.declare(variableName, n, declaredType, input, inferred);
 
         if (shouldDeclareOnGlobalThis) {
           ObjectType globalThis =
               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
           boolean isExtern = input.isExtern();
+          // Use the declaredType (which handles the null case) when defining
+          // on the global this object.
           if (inferred) {
-            globalThis.defineInferredProperty(variableName,
-                type == null ?
-                    getNativeType(JSTypeNative.NO_TYPE) :
-                    type,
-                isExtern);
+            globalThis.defineInferredProperty(variableName, declaredType, isExtern);
           } else {
-            globalThis.defineDeclaredProperty(variableName, type, isExtern);
+            // If !inferred, type was non-null initially, so declaredType == type.
+            globalThis.defineDeclaredProperty(variableName, declaredType, isExtern);
           }
         }
 
         // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
+        // in the scope chain. Use the original 'type' here, because
+        // functions have prototypes, but UNKNOWN_TYPE doesn't.
         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
           FunctionType fnType = (FunctionType) type;
           if (fnType.isConstructor() || fnType.isInterface()) {
             FunctionType superClassCtor = fnType.getSuperClassConstructor();
             scopeToDeclareIn.declare(variableName + ".prototype", n,
                 fnType.getPrototype(), compiler.getInput(sourceName),
                 /* declared iff there's an explicit supertype */
                 superClassCtor == null ||
                 superClassCtor.getInstanceType().equals(
                     getNativeType(OBJECT_TYPE)));
           }
         }
       }
     }
\ No newline at end of file
