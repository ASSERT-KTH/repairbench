diff --git a/tmp/9687878f-4e24-4b4d-bdfb-8619159e35be_buggy.java b/tmp/add891f6-f4fa-41ee-895d-ba14e0f96ea1_fixed.java
index 3652aad..a89576d 100644
--- a/tmp/9687878f-4e24-4b4d-bdfb-8619159e35be_buggy.java
+++ b/tmp/add891f6-f4fa-41ee-895d-ba14e0f96ea1_fixed.java
@@ -1,86 +1,120 @@
     /**
      * Defines a typed variable. The defining node will be annotated with the
      * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
      * inferred.
      *
      * Slots may be any variable or any qualified name in the global scope.
      *
      * @param n the defining NAME or GETPROP node.
      * @param parent the {@code n}'s parent.
      * @param type the variable's type. It may be {@code null} if
      *     {@code inferred} is {@code true}.
      */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
       Preconditions.checkArgument(inferred || type != null);
 
       // Only allow declarations of NAMEs and qualfied names.
       boolean shouldDeclareOnGlobalThis = false;
       if (n.getType() == Token.NAME) {
         Preconditions.checkArgument(
             parent.getType() == Token.FUNCTION ||
             parent.getType() == Token.VAR ||
             parent.getType() == Token.LP ||
             parent.getType() == Token.CATCH);
         shouldDeclareOnGlobalThis = scope.isGlobal() &&
             (parent.getType() == Token.VAR ||
              parent.getType() == Token.FUNCTION);
       } else {
         Preconditions.checkArgument(
             n.getType() == Token.GETPROP &&
             (parent.getType() == Token.ASSIGN ||
              parent.getType() == Token.EXPR_RESULT));
       }
       String variableName = n.getQualifiedName();
       Preconditions.checkArgument(!variableName.isEmpty());
 
-      // If n is a property, then we should really declare it in the
-      // scope where the root object appears. This helps out people
-      // who declare "global" names in an anonymous namespace.
-      Scope scopeToDeclareIn = scope;
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
+      // Determine the scope to declare the variable in.
+      Scope scopeToDeclareIn = scope; // Default to the current scope.
 
-      // declared in closest scope?
+      // If n is a property (e.g., ns.foo), we want to declare it in the scope
+      // where the root object (e.g., ns) is defined. This allows qualified names
+      // defined in local scopes (like IIFEs) to be properly associated with
+      // the scope of their root object (often the global scope).
+      if (n.getType() == Token.GETPROP) {
+        Node root = n;
+        while (root.isGetProp()) {
+          root = root.getFirstChild();
+        }
+
+        // We only handle qualified names where the root is a NAME.
+        // Other roots like THIS or function calls aren't handled here.
+        if (root.isName()) {
+          String rootVarName = root.getString();
+          // Find the variable in the current scope or its ancestors.
+          Var rootVar = scope.getVar(rootVarName);
+          if (rootVar != null && rootVar.getScope() != null) {
+            // Declare the qualified name (e.g., "ns.foo") in the same scope
+            // where the root variable (e.g., "ns") was declared.
+            scopeToDeclareIn = rootVar.getScope();
+          }
+          // If rootVar is not found, it might be an undeclared var error,
+          // or potentially a property on the global 'window' object not explicitly declared.
+          // In such cases, falling back to the current scope (original behavior)
+          // or potentially the global scope might be considered. For now, we use
+          // the root var's scope if found, otherwise the current scope. This matches
+          // the behavior for the test cases.
+        }
+      }
+
+      // Check if the variable is already declared in the chosen scope.
+      // Use isDeclared(..., false) to check only the specific scope, not ancestors.
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
+        // If it is already declared, check for potential redeclaration issues.
         Var oldVar = scopeToDeclareIn.getVar(variableName);
         validator.expectUndeclaredVariable(
             sourceName, n, parent, oldVar, variableName, type);
       } else {
+        // If not declared in the target scope, proceed with the declaration.
         if (!inferred) {
+          // Set the type if it's explicitly provided (not inferred).
           setDeferredType(n, type);
         }
         CompilerInput input = compiler.getInput(sourceName);
+        // Declare the variable in the determined scope.
         scopeToDeclareIn.declare(variableName, n, type, input, inferred);
 
+        // Additional handling for global variables and properties on global 'this'.
         if (shouldDeclareOnGlobalThis) {
           ObjectType globalThis =
               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
           boolean isExtern = input.isExtern();
+          // Define the property on the global 'this' object type.
           if (inferred) {
             globalThis.defineInferredProperty(variableName,
-                type == null ?
-                    getNativeType(JSTypeNative.NO_TYPE) :
-                    type,
+                // If type is null during inference, use NO_TYPE
+                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,
                 isExtern);
           } else {
             globalThis.defineDeclaredProperty(variableName, type, isExtern);
           }
         }
 
-        // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
+        // If we're declaring a constructor or interface in the global scope,
+        // also declare its prototype property. This check should use scopeToDeclareIn
+        // as the variable might be a qualified name declared globally from a local scope.
         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
           FunctionType fnType = (FunctionType) type;
           if (fnType.isConstructor() || fnType.isInterface()) {
             FunctionType superClassCtor = fnType.getSuperClassConstructor();
+            // Declare "FunctionName.prototype" in the global scope.
             scopeToDeclareIn.declare(variableName + ".prototype", n,
                 fnType.getPrototype(), compiler.getInput(sourceName),
-                /* declared iff there's an explicit supertype */
+                /* declared iff there's an explicit supertype, and it's not Object */
                 superClassCtor == null ||
                 superClassCtor.getInstanceType().equals(
                     getNativeType(OBJECT_TYPE)));
           }
         }
       }
     }
\ No newline at end of file
