diff --git a/tmp/29cca601-74ef-48c1-b370-950ecf7b8246_buggy.java b/tmp/64b881da-4984-4784-980b-b1e31430320a_fixed.java
index 3652aad..11702f7 100644
--- a/tmp/29cca601-74ef-48c1-b370-950ecf7b8246_buggy.java
+++ b/tmp/64b881da-4984-4784-980b-b1e31430320a_fixed.java
@@ -1,86 +1,112 @@
     /**
      * Defines a typed variable. The defining node will be annotated with the
      * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
      * inferred.
      *
      * Slots may be any variable or any qualified name in the global scope.
      *
      * @param n the defining NAME or GETPROP node.
      * @param parent the {@code n}'s parent.
      * @param type the variable's type. It may be {@code null} if
      *     {@code inferred} is {@code true}.
      */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
       Preconditions.checkArgument(inferred || type != null);
 
       // Only allow declarations of NAMEs and qualfied names.
-      boolean shouldDeclareOnGlobalThis = false;
-      if (n.getType() == Token.NAME) {
+      boolean isName = n.getType() == Token.NAME;
+      boolean isGetProp = n.getType() == Token.GETPROP;
+      if (isName) {
         Preconditions.checkArgument(
             parent.getType() == Token.FUNCTION ||
             parent.getType() == Token.VAR ||
             parent.getType() == Token.LP ||
             parent.getType() == Token.CATCH);
-        shouldDeclareOnGlobalThis = scope.isGlobal() &&
-            (parent.getType() == Token.VAR ||
-             parent.getType() == Token.FUNCTION);
       } else {
         Preconditions.checkArgument(
-            n.getType() == Token.GETPROP &&
+            isGetProp &&
             (parent.getType() == Token.ASSIGN ||
              parent.getType() == Token.EXPR_RESULT));
       }
       String variableName = n.getQualifiedName();
       Preconditions.checkArgument(!variableName.isEmpty());
 
       // If n is a property, then we should really declare it in the
       // scope where the root object appears. This helps out people
       // who declare "global" names in an anonymous namespace.
       Scope scopeToDeclareIn = scope;
+      if (isGetProp) {
+          String rootName = NodeUtil.getRootOfQualifiedName(n);
+          if (!rootName.isEmpty()) {
+              Var rootVar = scope.getVar(rootName); // Find the scope of the first name (e.g., 'a' in a.b.c)
+              if (rootVar != null) {
+                  scopeToDeclareIn = rootVar.getScope();
+              } else {
+                  // Root not defined locally. Assume global.
+                  if (!scope.isGlobal()) {
+                     scopeToDeclareIn = scope.getGlobalScope();
+                  } // else, already global (scopeToDeclareIn remains 'scope')
+              }
+          }
+          // If rootName is empty (e.g. this.prop or (expr).prop), declare in the current scope.
+          // This is the default because scopeToDeclareIn was initialized to 'scope'.
+      }
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
+      // Handle externs: externs always go in the global scope.
+      CompilerInput input = compiler.getInput(sourceName);
+      boolean isExtern = input.isExtern();
+      if (isExtern && !scopeToDeclareIn.isGlobal()) {
+          scopeToDeclareIn = scope.getGlobalScope();
+      }
 
-      // declared in closest scope?
+      // Check for redeclaration in the *target* scope.
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);
         validator.expectUndeclaredVariable(
             sourceName, n, parent, oldVar, variableName, type);
       } else {
         if (!inferred) {
           setDeferredType(n, type);
         }
-        CompilerInput input = compiler.getInput(sourceName);
+
+        // Declare the variable ('x' or 'a.b.c') in the determined scope.
         scopeToDeclareIn.declare(variableName, n, type, input, inferred);
 
-        if (shouldDeclareOnGlobalThis) {
+        // Define properties on the global this object, BUT only for simple names (NAME)
+        // declared globally.
+        if (isName && scopeToDeclareIn.isGlobal()) {
+             boolean isFunction = parent.getType() == Token.FUNCTION;
+             boolean isVar = parent.getType() == Token.VAR;
+             // Catch clauses are handled differently. A NAME in a catch clause
+             // isn't a global property, even if the catch is in global scope.
+             if ((isFunction || isVar)) {
                 ObjectType globalThis =
                     typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
-          boolean isExtern = input.isExtern();
                 if (inferred) {
                   globalThis.defineInferredProperty(variableName,
                       type == null ?
                           getNativeType(JSTypeNative.NO_TYPE) :
                           type,
                       isExtern);
                 } else {
                   globalThis.defineDeclaredProperty(variableName, type, isExtern);
                 }
              }
+        }
 
         // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
+        // in the scope chain, but only for NAMEs.
+        if (scopeToDeclareIn.isGlobal() && isName && type instanceof FunctionType) {
           FunctionType fnType = (FunctionType) type;
           if (fnType.isConstructor() || fnType.isInterface()) {
             FunctionType superClassCtor = fnType.getSuperClassConstructor();
             scopeToDeclareIn.declare(variableName + ".prototype", n,
-                fnType.getPrototype(), compiler.getInput(sourceName),
+                fnType.getPrototype(), input,
                 /* declared iff there's an explicit supertype */
                 superClassCtor == null ||
                 superClassCtor.getInstanceType().equals(
                     getNativeType(OBJECT_TYPE)));
           }
         }
       }
     }
\ No newline at end of file
