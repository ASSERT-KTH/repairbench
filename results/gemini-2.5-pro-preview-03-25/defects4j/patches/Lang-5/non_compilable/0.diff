diff --git a/tmp/fd42b114-dcb4-42c8-abc0-bba1a8f9442b_buggy.java b/tmp/947f5935-71e0-42e0-a5fa-07b780c6a053_fixed.java
index f843d29..2894bd0 100644
--- a/tmp/fd42b114-dcb4-42c8-abc0-bba1a8f9442b_buggy.java
+++ b/tmp/947f5935-71e0-42e0-a5fa-07b780c6a053_fixed.java
@@ -1,68 +1,159 @@
+import java.util.Locale;
+
+// The surrounding class structure is omitted as per the request.
+// Assume necessary imports like java.util.Locale are present.
+
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB", "")
+     *   LocaleUtils.toLocale("_GB_POSIX")  = new Locale("", "GB", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
+     * The language code must be lowercase letters. The language code must be exactly two letters.
+     * The country code must be uppercase letters. The country code must be exactly two letters.
      * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
+     * The length must be correct. Format examples: {@code ll}, {@code ll_CC}, {@code ll_CC_variant},
+     * {@code ll__variant}, {@code _CC}, {@code _CC_variant}.</p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+        // Ensure specific length constraints are met later, but prevent IndexOutOfBounds early.
+        if (len == 0) {
+             // An empty string is not a valid locale format.
+             throw new IllegalArgumentException("Invalid locale format: \"\"");
+        }
+
+        // Handle formats starting with '_' like _CC or _CC_variant (LANG-865)
+        if (str.charAt(0) == '_') {
+            if (len < 3) { // Must be at least _CC ("_GB")
+                // This covers "_" (len 1) and "_G" (len 2) failing cases from the test.
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Check country code: 2 uppercase letters (as specified by tests _Gb, _gB, _1B, _G1)
+            if (!Character.isLetter(ch1) || !Character.isUpperCase(ch1) ||
+                !Character.isLetter(ch2) || !Character.isUpperCase(ch2)) {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) { // Format _CC ("_GB")
+                return new Locale("", str.substring(1)); // language="", country="GB"
+            }
+            // Check for variant part _CC_variant ("_GB_POSIX")
+            // It needs to be at least 5 chars long ("_CC_v") and have an underscore at index 3.
+            // Test cases "_GB_" (len 4), "_GBAP" (len 5, wrong separator) fail here.
+            // Test case "_G" (len 2) failed above. Test case "_GB" (len 3) is handled above.
+            // Test case "_GB_P" (len 5) is handled below. Test case "_GB_POSIX" (len 9) is handled below.
+            if (len < 5 || str.charAt(3) != '_') {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Check variant is not empty - Test case "_GB_" (len 5 with valid separator but empty variant) fails here.
+            final String variant = str.substring(4);
+            if (variant.isEmpty()) {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Format _CC_variant ("_GB_POSIX")
+            return new Locale("", str.substring(1, 3), variant); // language="", country="GB", variant="POSIX"
+        }
+
+        // Original logic for ll, ll_CC, ll_CC_variant, plus ll__variant fix
+
+        // Format: ll... ("en...")
+        // Language code check requires minimum length 2.
         if (len < 2) {
+             // This case should not be reachable due to the len == 0 check above
+             // and the fact that strings starting with '_' are handled separately.
+             // Any string reaching here must have len >= 1 and not start with '_'.
+             // If len == 1, it fails the language check below.
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Check language: 2 lowercase letters.
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
+        // The Javadoc says "lowercase letters", isLowerCase() should suffice.
+        // It implicitly checks they are letters too for standard alphabets.
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 2) {
-                return new Locale(str);
+
+        if (len == 2) { // Format ll ("en")
+            return new Locale(str); // language="en", country="", variant=""
         }
+
+        // Format: ll_... ("en_...")
+        // Needs separator and country/variant part. Minimum length 5 (ll_CC or ll__v).
         if (len < 5) {
+            // This covers "en_", "en_G" which are invalid.
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Check separator after language.
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch3 = str.charAt(3);
+        // Check for format ll__variant ("en__POSIX")
         if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+            // Minimum length 6 ("ll__v").
+            if(len < 6) { // Handles "en___" invalid case
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            final String variant = str.substring(5);
+            // Check variant is not empty ("en__").
+            if (variant.isEmpty()) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Format ll__variant ("en__POSIX")
+            return new Locale(str.substring(0, 2), "", variant); // language="en", country="", variant="POSIX"
+        }
+
+        // Format ll_CC... ("en_GB...")
         final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+        // Check country code: 2 uppercase letters (similar to _CC check).
+        if (!Character.isLetter(ch3) || !Character.isUpperCase(ch3) ||
+            !Character.isLetter(ch4) || !Character.isUpperCase(ch4)) {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+
+        if (len == 5) { // Format ll_CC ("en_GB")
+            return new Locale(str.substring(0, 2), str.substring(3, 5)); // language="en", country="GB", variant=""
         }
-            if (len < 7) {
+
+        // Format ll_CC_variant ("en_GB_POSIX")
+        // Minimum length 7 ("ll_CC_v").
+        if (len < 7) { // Handles "en_GB_" invalid case
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Check separator after country.
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        final String variant = str.substring(6);
+        // Check variant is not empty ("en_GB_").
+        if (variant.isEmpty()) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        // Format ll_CC_variant ("en_GB_POSIX")
+        return new Locale(str.substring(0, 2), str.substring(3, 5), variant); // language="en", country="GB", variant="POSIX"
     }
\ No newline at end of file
