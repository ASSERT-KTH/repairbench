diff --git a/tmp/91914f56-67ee-4cd4-b524-21caf8d4e805_buggy.java b/tmp/f5f1c9a0-62c3-4258-9104-d3abd056ede1_fixed.java
index f843d29..9cbc903 100644
--- a/tmp/91914f56-67ee-4cd4-b524-21caf8d4e805_buggy.java
+++ b/tmp/f5f1c9a0-62c3-4258-9104-d3abd056ede1_fixed.java
@@ -1,68 +1,115 @@
+import java.util.Locale;
+
+// Class definition added for context, replace with actual class if needed.
+class LocaleUtils {
+
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB", "")
+     *   LocaleUtils.toLocale("_GB_POSIX")  = new Locale("", "GB", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
+     * The language code must be lowercase letters.
+     * The country code must be uppercase letters.
      * The separator must be an underscore.
-     * The length must be correct.
+     * The length must be correct for the format.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+        // Validate basic structure lengths: ll (2), _CC (3), ll_CC (5), ll__V (>=5), _CC_V (>=5), ll_CC_V (>=7)
+        if (len != 2 && len != 3 && len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch0 = str.charAt(0);
+        if (ch0 == '_') {
+            // Format: _CC or _CC_VVV
+            if (len < 3) { // Need _CC
+                throw new IllegalArgumentException("Invalid locale format: " + str); // Rejects "_" and "_G"
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                // Test cases explicitly require uppercase letters for country code.
+                throw new IllegalArgumentException("Invalid locale format: " + str); // Rejects "_Gb", "_gB", "_1B", "_G1"
+            }
+            if (len == 3) { // Format _CC
+                return new Locale("", str.substring(1, 3)); // Accepts "_GB"
+            }
+            // Format _CC_VVV expected
+            if (len < 5) { // Need _CC_V, rejects "_GB_" (len 4)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (str.charAt(3) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str); // Rejects "_GBAP"
+            }
+            // Format _CC_VVV, variant VVV must not be empty (len >= 5 ensures this)
+            return new Locale("", str.substring(1, 3), str.substring(4)); // Accepts "_GB_P", "_GB_POSIX"
+        } else {
+            // Format: ll, ll_CC, ll__VVV, ll_CC_VVV
+            // Validate language code: ll
+            // Length check `len < 2` is covered by initial check.
             final char ch1 = str.charAt(1);
             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                 throw new IllegalArgumentException("Invalid locale format: " + str); // Rejects "EN", "eN", "1n"
             }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            if (len == 2) { // Format ll
+                return new Locale(str); // Accepts "en"
             }
+            // Length must be >= 5 now
+            // Check `len < 5` is covered by initial check. Rejects "en_", "en_G" etc.
             if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                 throw new IllegalArgumentException("Invalid locale format: " + str); // Rejects "enGB", "en G"
             }
             final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+            if (ch3 == '_') { // Format ll__VVV
+                // Variant VVV must not be empty (len >= 5 ensures this)
+                if (len < 5) { // Should be covered by initial checks, but protects against "ll__" (len 4)
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
+                return new Locale(str.substring(0, 2), "", str.substring(4)); // Accepts "en__P", "en__POSIX"
+            } else { // Format ll_CC or ll_CC_VVV
+                // Validate country code: CC
                 final char ch4 = str.charAt(4);
                 if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                     // Test cases explicitly require uppercase letters for country code.
+                     throw new IllegalArgumentException("Invalid locale format: " + str); // Rejects "en_gB", "en_Gb", "en_1G"
                 }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+                if (len == 5) { // Format ll_CC
+                    return new Locale(str.substring(0, 2), str.substring(3, 5)); // Accepts "en_GB"
                 }
-            if (len < 7) {
+                // Format ll_CC_VVV expected
+                if (len < 7) { // Need ll_CC_V, rejects "en_GB_" (len 6)
                      throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
                 if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                     throw new IllegalArgumentException("Invalid locale format: " + str); // Rejects "en_GBAP"
+                }
+                // Format ll_CC_VVV, variant VVV must not be empty (len >= 7 ensures this)
+                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); // Accepts "en_GB_P", "en_GB_xxx"
+            }
+        }
     }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
 }
\ No newline at end of file
