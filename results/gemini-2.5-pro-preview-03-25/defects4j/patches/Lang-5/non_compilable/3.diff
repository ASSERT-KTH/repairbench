diff --git a/tmp/88653aea-a891-4882-9725-7ead952dbd33_buggy.java b/tmp/ba16e2b4-4737-4800-8f9f-c8f40b385985_fixed.java
index f843d29..ca91dc7 100644
--- a/tmp/88653aea-a891-4882-9725-7ead952dbd33_buggy.java
+++ b/tmp/ba16e2b4-4737-4800-8f9f-c8f40b385985_fixed.java
@@ -1,68 +1,123 @@
+import java.util.Locale;
+
+/**
+ * Test class for automated program repair.
+ * This class is not part of the solution but needed for compilation.
+ */
+class LocaleUtils { // Wrapper class for the provided method
+
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB", "")
+     *   LocaleUtils.toLocale("_GB_POSIX")  = new Locale("", "GB", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
+     * <p>This method validates the input strictly according to the following format rules:
+     * <ul>
+     *  <li>Locale strings must be non-null.</li>
+     *  <li>Format ll: Language code (2 lowercase letters). Length is 2.</li>
+     *  <li>Format ll_CC: Language code (2 lowercase letters), Country code (2 uppercase letters), separated by underscore. Length is 5.</li>
+     *  <li>Format ll_CC_variant: Language code (2 lowercase letters), Country code (2 uppercase letters), Variant (any characters), separated by underscores. Length is >= 7.</li>
+     *  <li>Format ll__variant: Language code (2 lowercase letters), empty Country code, Variant (any characters), separated by underscores. Length is >= 5.</li>
+     *  <li>Format _CC: Empty language code, Country code (2 uppercase letters). String must start with an underscore. Length is 3.</li>
+     *  <li>Format _CC_variant: Empty language code, Country code (2 uppercase letters), Variant (any characters), separated by underscores. String must start with an underscore. Length is >= 5.</li>
+     * </ul>
+     * The country code must consist of exactly two uppercase letters.
+     * The language code must consist of exactly two lowercase letters.
+     * The separator must be an underscore where expected.
+     * The length must be correct for the detected format. Any other format throws IllegalArgumentException.</p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+        // Validate general length constraints: minimum 2, cannot be 4
+        if (len < 2 || len == 4) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch0 = str.charAt(0);
+        if (ch0 == '_') {
+            // Handle formats: _CC, _CC_variant
+            // Check length: must be 3 (_CC) or >= 5 (_CC_variant)
+            if (len < 3) { // Catches len=2 cases like "_G" which passed the initial check
+                throw new IllegalArgumentException("Invalid locale format: " + str + " (must be _CC or _CC_variant format)");
+            }
             final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Validate country code: must be 2 uppercase letters
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str + " (invalid country code in _CC.. format)");
+            }
+
+            if (len == 3) { // Format: _CC
+                return new Locale("", str.substring(1, 3));
+            }
+            // Format: _CC_variant (len >= 5)
+            if (str.charAt(3) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str + " (missing underscore after country in _CC_variant format)");
+            }
+            // Variant part must exist, length check len >= 5 is implicit here
+            return new Locale("", str.substring(1, 3), str.substring(4));
+
+        } else {
+            // Handle formats: ll, ll_CC, ll__variant, ll_CC_variant
+            // Length must be 2 or >= 5
+            final char ch1 = str.charAt(1);
+            // Validate language code: must be 2 lowercase letters
             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str + " (invalid language code in ll.. format)");
             }
-            if (len == 2) {
+
+            if (len == 2) { // Format: ll
                 return new Locale(str);
             }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
+
+            // Format: ll_... (len >= 5)
             if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str + " (missing underscore after language in ll_.. format)");
             }
+
             final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
+            if (ch3 == '_') { // Format: ll__variant (len >= 5)
+                // Variant part must exist, length check len >= 5 is implicit
                 return new Locale(str.substring(0, 2), "", str.substring(4));
             }
+
+            // Format: ll_CC or ll_CC_variant (len >= 5)
             final char ch4 = str.charAt(4);
+            // Validate country code: must be 2 uppercase letters
             if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str + " (invalid country code in ll_CC.. format)");
             }
-            if (len == 5) {
+
+            if (len == 5) { // Format: ll_CC
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+
+            // Format: ll_CC_variant (len >= 7 required)
+            if (len < 7 || str.charAt(5) != '_') { // Check for separator and minimum length for variant part
+                throw new IllegalArgumentException("Invalid locale format: " + str + " (requires format ll_CC_variant with length >= 7 and correct separators)");
             }
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+    }
+} // End of wrapper class
\ No newline at end of file
