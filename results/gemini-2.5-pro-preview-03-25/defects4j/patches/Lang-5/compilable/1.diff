diff --git a/tmp/547845ca-6a4d-48fd-bee7-9158e75e9663_buggy.java b/tmp/fc6579f5-dbaa-45f7-9aa7-8bd353440fc8_fixed.java
index f843d29..43f6d39 100644
--- a/tmp/547845ca-6a4d-48fd-bee7-9158e75e9663_buggy.java
+++ b/tmp/fc6579f5-dbaa-45f7-9aa7-8bd353440fc8_fixed.java
@@ -1,68 +1,104 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_xxx")    = new Locale("", "GB", "xxx")     (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+        // Check for invalid lengths (1, 4, 6) explicitly. Lengths 2, 3, 5, 7+ are potentially valid.
+        if (len != 2 && len != 3 && len < 5) {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
+        if (ch0 == '_') {
+            // Format: _CC or _CC_variant
+            if (len < 3) { // Must be at least _CC
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Check country code: must be uppercase letters
+            // Note: Locale constructor checks if country is valid ISO code, but this method requires uppercase letters.
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) { // Format: _CC
+                return new Locale("", str.substring(1, 3));
+            }
+            // Must be _CC_variant format now (len >= 5)
+            if (len < 5) { // Cannot be length 4: _CCX
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (str.charAt(3) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Format: _CC_variant
+            return new Locale("", str.substring(1, 3), str.substring(4));
+
+        } else { // Starts with language code: ll or ll_CC or ll_CC_variant
+            // Check language code: must be lowercase letters
+            // Note: Locale constructor checks if language is valid ISO code, but this method requires lowercase letters.
+            if (len < 2) { // Should have been caught by initial length check, but included for robustness
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
             final char ch1 = str.charAt(1);
             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
+            if (len == 2) { // Format: ll
                 return new Locale(str);
             }
-            if (len < 5) {
+            // Must be ll_CC or ll_CC_variant (len >= 5)
+            if (len < 5) { // Cannot be length 3 or 4: llX or ll_X
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            // Check country code: must be uppercase letters
             final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
             final char ch4 = str.charAt(4);
             if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
+            if (len == 5) { // Format: ll_CC
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
-            if (len < 7) {
+            // Must be ll_CC_variant format now (len >= 7)
+            if (len < 7) { // Cannot be length 6: ll_CC_X
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (str.charAt(5) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            // Format: ll_CC_variant
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+    }
\ No newline at end of file
