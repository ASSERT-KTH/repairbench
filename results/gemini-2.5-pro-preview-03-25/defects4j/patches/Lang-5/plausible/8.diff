diff --git a/tmp/4e8d3158-5128-48c2-8efc-1902df0dd878_buggy.java b/tmp/6ac7d016-736d-48a8-a2d5-d255bc491a97_fixed.java
index f843d29..d8e951c 100644
--- a/tmp/4e8d3158-5128-48c2-8efc-1902df0dd878_buggy.java
+++ b/tmp/6ac7d016-736d-48a8-a2d5-d255bc491a97_fixed.java
@@ -1,68 +1,109 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_POSIX")  = new Locale("", "GB", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+
+        // Handle formats starting with '_' (e.g., "_GB", "_GB_POSIX")
+        if (str.startsWith("_")) {
+            if (len < 3) { // Need at least _CC
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) { // Format: _CC
+                return new Locale("", str.substring(1, 3));
+            }
+            // Need at least _CC_V for variant format
+            if (len < 5 || str.charAt(3) != '_') {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Format: _CC_variant
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+
+        // Handle standard formats (e.g., "en", "en_GB", "en_GB_POSIX", "en__POSIX")
+
+        // Validate basic structure and minimum length for language-based locales
         if (len < 2) {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Validate language code (first 2 chars must be lowercase letters)
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Handle language-only format (e.g., "en")
         if (len == 2) {
-                return new Locale(str);
+            return new Locale(str); // Equivalent to new Locale(str, "")
         }
-            if (len < 5) {
+
+        // Validate structure for formats with country or variant (must be length >= 5 and have '_' at index 2)
+        if (len < 5 || str.charAt(2) != '_') {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
+
+        // Handle language__variant format (e.g., "en__POSIX")
+        if (str.charAt(3) == '_') {
+            // Variant must exist (checked by len >= 5)
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
+
+        // Handle language_Country... formats (e.g., "en_GB", "en_GB_POSIX")
+
+        // Validate country code (chars 3 and 4 must be uppercase letters)
+        final char ch3 = str.charAt(3);
         final char ch4 = str.charAt(4);
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Handle language_Country format (e.g., "en_GB")
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(5) != '_') {
+
+        // Validate structure for language_Country_Variant format (must be length >= 7 and have '_' at index 5)
+        if (len < 7 || str.charAt(5) != '_') {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Handle language_Country_Variant format (e.g., "en_GB_POSIX")
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
