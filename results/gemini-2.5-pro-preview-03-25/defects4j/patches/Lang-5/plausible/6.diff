diff --git a/tmp/1da4a868-0444-4299-a9da-f3f8750f46bb_buggy.java b/tmp/b0ced6a3-d97e-49a3-9193-f207192392e5_fixed.java
index f843d29..9246bd3 100644
--- a/tmp/1da4a868-0444-4299-a9da-f3f8750f46bb_buggy.java
+++ b/tmp/b0ced6a3-d97e-49a3-9193-f207192392e5_fixed.java
@@ -1,68 +1,139 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB", "")
+     *   LocaleUtils.toLocale("_GB_POSIX")  = new Locale("", "GB", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
+     * The language code must be lowercase letters.
+     * The country code must be uppercase letters.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+        // Check for minimum length requirements
+        if (len == 0 || (str.charAt(0) == '_' && len < 3) || len < 2) {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch0 = str.charAt(0);
+        if (ch0 == '_') {
+            // Format: _CC or _CC_variant
+            if (len < 3) {
+                throw new IllegalArgumentException("Invalid locale format: " + str + " - must be at least 3 characters if starting with underscore");
+            }
             final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Country code must be uppercase letters
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str + " - second and third characters must be uppercase letters");
+            }
+            if (len == 3) {
+                // Format: _CC
+                return new Locale("", str.substring(1, 3));
+            }
+            // Must be _CC_variant now
+            if (len < 5) { // Need at least _CC_v
+                throw new IllegalArgumentException("Invalid locale format: " + str + " - expected format _CC or _CC_variant");
+            }
+            if (str.charAt(3) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str + " - expected underscore after country code");
+            }
+            // Variant cannot be empty if underscore is present
+            if (len == 4) { // Handles _CC_
+                 throw new IllegalArgumentException("Invalid locale format: " + str + " - variant cannot be empty when underscore is present");
+            }
+            // Format: _CC_variant
+            return new Locale("", str.substring(1, 3), str.substring(4));
+
+        } else {
+            // Format: ll or ll_CC or ll_CC_variant or ll__variant
+            final char ch1 = str.charAt(1);
+            // Language code must be lowercase letters
             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str + " - language code must be lowercase letters");
             }
             if (len == 2) {
+                // Format: ll
                 return new Locale(str);
             }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            // Must have underscore separator beyond ll
+            if (len < 5) { // Need at least ll_CC or ll__v
+                // Check for languages with invalid format like "abc" or "ab_c"
+                 if (len == 3 && str.charAt(2) == '_') {
+                     // Allows ll_ but Locale constructor doesn't seem to support this directly without country/variant.
+                     // Strict validation rejects this.
+                     throw new IllegalArgumentException("Invalid locale format: " + str + " - expected country code or variant after underscore");
+                 }
+                 if (len == 4 && str.charAt(2) == '_') {
+                    // Allows ll_C but country code must be 2 letters.
+                     throw new IllegalArgumentException("Invalid locale format: " + str + " - country code must be two uppercase letters");
+                 }
+                throw new IllegalArgumentException("Invalid locale format: " + str + " - expected format ll, ll_CC, ll__variant or ll_CC_variant");
             }
             if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                 throw new IllegalArgumentException("Invalid locale format: " + str + " - expected underscore after language code");
             }
+
             final char ch3 = str.charAt(3);
             if (ch3 == '_') {
+                // Format: ll__variant
+                if (len < 5) { // Need at least ll__v
+                    throw new IllegalArgumentException("Invalid locale format: " + str + " - variant cannot be empty when double underscore is present");
+                }
+                // Format: ll__variant
                 return new Locale(str.substring(0, 2), "", str.substring(4));
             }
+
+            // Format: ll_CC or ll_CC_variant
             final char ch4 = str.charAt(4);
+            // Country code must be uppercase letters
             if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                 throw new IllegalArgumentException("Invalid locale format: " + str + " - country code must be two uppercase letters");
             }
             if (len == 5) {
+                // Format: ll_CC
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            // Must be ll_CC_variant now
+            if (len < 7) { // Need at least ll_CC_v
+                // Check for formats like en_GBAP
+                if(str.charAt(5) != '_') {
+                    throw new IllegalArgumentException("Invalid locale format: " + str + " - expected underscore after country code for variant");
+                }
+                // Handles ll_CC_ but variant must not be empty
+                throw new IllegalArgumentException("Invalid locale format: " + str + " - variant cannot be empty when underscore is present");
             }
             if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                throw new IllegalArgumentException("Invalid locale format: " + str + " - expected underscore after country code");
+            }
+            // Variant cannot be empty if underscore is present after country
+            if (len == 6) { // Handles ll_CC_
+                 throw new IllegalArgumentException("Invalid locale format: " + str + " - variant cannot be empty when underscore is present");
             }
+            // Format: ll_CC_variant
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+    }
\ No newline at end of file
