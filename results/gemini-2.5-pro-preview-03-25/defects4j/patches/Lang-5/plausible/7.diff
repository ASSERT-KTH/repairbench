diff --git a/tmp/acc27fa5-edec-4568-92fb-597070abf147_buggy.java b/tmp/600de4eb-adc2-462e-bc2c-f91fc2f6c888_fixed.java
index f843d29..b74915f 100644
--- a/tmp/acc27fa5-edec-4568-92fb-597070abf147_buggy.java
+++ b/tmp/600de4eb-adc2-462e-bc2c-f91fc2f6c888_fixed.java
@@ -1,68 +1,149 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_POSIX")  = new Locale("", "GB", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
+     * The language code must be lowercase letters.
+     * The country code must be uppercase letters.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+        if (len == 0) {
+             throw new IllegalArgumentException("Invalid locale format: []");
+        }
+
+        // Handle the _CC_VVV and _CC cases first (country, variant only)
+        if (str.charAt(0) == '_') {
+            if (len < 3) { // Must be at least _CC
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Check country code: 2 uppercase letters
+            if (!Character.isLetter(ch1) || !Character.isLetter(ch2) ||
+                !Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+
+            if (len == 3) { // Format: _CC
+                return new Locale("", str.substring(1, 3));
+            }
+            // Format must be _CC_VVV...
+            if (len < 5) { // Must be at least _CC_V
+                 // This catches "_GBA" (invalid) and also "_GB_" (invalid length 4)
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (str.charAt(3) != '_') { // Must have underscore separator after country
+                 // This catches "_GBAP"
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Variant is everything after _CC_
+            if (str.substring(4).isEmpty()) { // Check specifically for empty variant like "_GB_"
+                 // Note: Locale("", "GB", "") is represented as "_GB", not "_GB_"
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale("", str.substring(1, 3), str.substring(4)); // _CC_VVV...
+        }
+
+        // Now handle the ll, ll_CC, ll__VVV, ll_CC_VVV cases
+
+        // Language code: first 2 chars, lowercase letters
+        if (len < 2) { // e.g., "e" is invalid length
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+        if (!Character.isLetter(ch0) || !Character.isLetter(ch1) ||
+            !Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+            // Check language: 2 lowercase letters
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+
+        if (len == 2) { // Format: ll
+            return new Locale(str.substring(0, 2));
         }
+
+        // Must have an underscore separator after language (for lengths > 2)
         if (str.charAt(2) != '_') {
+            // Handles "enX", "eng" (invalid length/format) etc.
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Now we have ll_...
+
+        // Check for ll__VVV format (empty country)
+        if (len == 3) { // Handles "en_" (invalid format)
+             throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (str.charAt(3) == '_') { // Format: ll__VVV...
+             if (len < 5) { // Must be at least ll__V
+                  throw new IllegalArgumentException("Invalid locale format: " + str); // Handles "en__"
+             }
+             // Variant is everything after ll__
+             if (str.substring(4).isEmpty()) { // Ensure variant is not empty e.g. "en__"
+                 // This should technically be caught by len < 5 check, but good to be explicit
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+             }
+             return new Locale(str.substring(0, 2), "", str.substring(4)); // ll__VVV...
+        }
+
+
+        // Format must be ll_CC... or ll_CC_VVV... (non-empty country)
+        if (len < 5) { // Must be at least ll_CC
+            // Handles "en_G", "en_G_" etc.
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        // Country code: 2 uppercase letters at index 3, 4
         final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
         final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+        if (!Character.isLetter(ch3) || !Character.isLetter(ch4) ||
+            !Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            // Check country: 2 uppercase letters
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
+
+        if (len == 5) { // Format: ll_CC
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
+
+        // Format must be ll_CC_VVV...
+        if (len < 7) { // Must be at least ll_CC_V
+            // Handles "en_GBX" (invalid format) and "en_GB_" (invalid length 6)
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(5) != '_') {
+        if (str.charAt(5) != '_') { // Must have underscore separator after country
+            // Handles "en_GBX..."
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        // Variant is everything after ll_CC_
+        if (str.substring(6).isEmpty()) { // Check for empty variant after underscore ("en_GB_")
+             // Note: Locale("en", "GB", "") is represented as "en_GB", not "en_GB_"
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); // ll_CC_VVV...
     }
\ No newline at end of file
