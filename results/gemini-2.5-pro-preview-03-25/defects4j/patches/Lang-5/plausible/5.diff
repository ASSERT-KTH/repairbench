diff --git a/tmp/b89138d4-5461-4fca-977e-ff0a9ddfaffc_buggy.java b/tmp/a904abeb-6337-473e-80e6-fc837ae60051_fixed.java
index f843d29..9fa9735 100644
--- a/tmp/b89138d4-5461-4fca-977e-ff0a9ddfaffc_buggy.java
+++ b/tmp/a904abeb-6337-473e-80e6-fc837ae60051_fixed.java
@@ -1,68 +1,117 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_POSIX")  = new Locale("", "GB", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+        if (len == 0) {
+             throw new IllegalArgumentException("Invalid locale format: Empty string");
+        }
+
+        // Handle formats starting with _
+        // Format: _CC or _CC_VVV
+        if (str.charAt(0) == '_') {
+            if (len < 3) { // Needs to be at least _CC
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // LANG-941: Also allow digits for country code, required for UN M.49
+            // But the tests require uppercase letters based on testLang865.
+            // Assuming uppercase letters required based on tests and Javadoc.
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: Country code must be uppercase - " + str);
+            }
+            if (len == 3) { // _CC
+                return new Locale("", str.substring(1, 3));
+            }
+            if (len < 5) { // Needs to be _CC_VVV requires len >= 5
+                 throw new IllegalArgumentException("Invalid locale format: Expected underscore after country code - " + str);
+            }
+            if (str.charAt(3) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: Expected underscore after country code - " + str);
+            }
+            // Variant can be any length >= 1 (_CC_V)
+            return new Locale("", str.substring(1, 3), str.substring(4)); // _CC_VVV
+        }
+
+        // Handle formats starting with language code ll
+        // Format: ll or ll_CC or ll_CC_VVV or ll__VVV
+
+        // Must check length >= 2 first
         if (len < 2) {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+             throw new IllegalArgumentException("Invalid locale format: Language code must be lowercase - " + str);
         }
-            if (len == 2) {
-                return new Locale(str);
+        if (len == 2) { // ll
+             return new Locale(str); // Use Locale(language) constructor
         }
+
+        // Format must be ll_CC, ll_CC_VVV, or ll__VVV now. Minimum length is 5.
         if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+             throw new IllegalArgumentException("Invalid locale format: Length must be 2 or >= 5 - " + str);
         }
         if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+             throw new IllegalArgumentException("Invalid locale format: Expecting underscore after language code - " + str);
         }
+
         final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
+        if (ch3 == '_') { // ll__VVV format
+            // Variant must exist, requires len >= 5 (ll__V)
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
+
+        // Format must be ll_CC or ll_CC_VVV
         final char ch4 = str.charAt(4);
+        // LANG-941: Allow digits for country code? Tests require uppercase letters. Sticking to letters.
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+             throw new IllegalArgumentException("Invalid locale format: Country code must be uppercase - " + str);
         }
-            if (len == 5) {
+        if (len == 5) { // ll_CC
              return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+
+        // Format must be ll_CC_VVV
+        if (len < 7) { // Requires ll_CC_V minimum
+             throw new IllegalArgumentException("Invalid locale format: Length must be 5 or >= 7 for language_country locale - " + str);
         }
         if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+             throw new IllegalArgumentException("Invalid locale format: Expecting underscore after country code - " + str);
         }
+        // Variant must exist, requires len >= 7 (ll_CC_V)
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
