diff --git a/tmp/55a8a7e4-d9d0-452e-8d85-77418c5ed52c_buggy.java b/tmp/571b1620-7909-4171-aaf1-8c92da00ff39_fixed.java
index f843d29..cffa174 100644
--- a/tmp/55a8a7e4-d9d0-452e-8d85-77418c5ed52c_buggy.java
+++ b/tmp/571b1620-7909-4171-aaf1-8c92da00ff39_fixed.java
@@ -1,68 +1,117 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_xxx")    = new Locale("", "GB", "xxx")     (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
+     * The language code must be lowercase letters.
+     * The country code must be uppercase letters.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+
+        // Handle NLS locales starting with an underscore (_CC or _CC_VVV)
+        if (str.startsWith("_")) {
+            if (len < 3) { // Must be at least _CC
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Validate country code: uppercase letters
+            if (!Character.isLetter(ch1) || !Character.isLetter(ch2) ||
+                !Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) { // _CC format
+                return new Locale("", str.substring(1, 3));
+            }
+            if (len < 5) { // Must be at least _CC_V
+                 // This catches formats like _CC_ which has an empty variant
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (str.charAt(3) != '_') { // Separator missing before variant
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // _CC_VVV format: The variant (substring(4)) can be anything and must not be empty (checked by len < 5).
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+
+        // Standard locales (ll, ll_CC, ll__V, ll_CC_VVV)
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+        // Validate language code: lowercase letters
+        if (!Character.isLetter(ch0) || !Character.isLetter(ch1) ||
+            !Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 2) {
-                return new Locale(str);
+
+        if (len == 2) { // ll format
+            return new Locale(str.substring(0, 2)); // Using substring for consistency
         }
+
+        // Must have an underscore component now (Country or Variant)
         if (len < 5) {
+             // Needs to be at least ll_CC or ll__V
+             // This catches formats like ll_, ll_C, ll__, etc.
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(2) != '_') {
+        if (str.charAt(2) != '_') { // Separator missing after language
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
+        if (ch3 == '_') { // ll__V format (language and variant)
+            // Format is ll__VVV..., length must be >= 5
+            // The check "len < 5" above ensures the variant part (substring(4)) is not empty.
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
+
+        // ll_CC... format
         final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+        // Validate country code: uppercase letters
+        if (!Character.isLetter(ch3) || !Character.isLetter(ch4) ||
+            !Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
+
+        if (len == 5) { // ll_CC format
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
+
+        // ll_CC_VVV format
+        if (len < 7) { // Must be at least ll_CC_V
+            // This catches formats like ll_CC_ which has an empty variant
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(5) != '_') {
+        if (str.charAt(5) != '_') { // Separator missing before variant
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // ll_CC_VVV format: The variant (substring(6)) can be anything and must not be empty (checked by len < 7).
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
