diff --git a/tmp/fd885c77-6f69-4773-9da2-88a92d033d50_buggy.java b/tmp/7faa8ac2-07b7-4b50-bbc8-d03d06926148_fixed.java
index f843d29..1f7bdb3 100644
--- a/tmp/fd885c77-6f69-4773-9da2-88a92d033d50_buggy.java
+++ b/tmp/7faa8ac2-07b7-4b50-bbc8-d03d06926148_fixed.java
@@ -1,68 +1,126 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("_GB")        = new Locale("", "GB")
+     *   LocaleUtils.toLocale("_GB_xxx")    = new Locale("", "GB", "xxx")      (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
+     * The language code must be lowercase letters.
+     * The country code must be uppercase letters.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+        if (len == 0) {
+            throw new IllegalArgumentException("Invalid locale format: []");
+        }
+
+        // Handle the _CC format and _CC_variant format
+        if (str.charAt(0) == '_') {
+            if (len < 3) { // Must be at least _CC
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            // Check if country code chars are uppercase letters
+            if (!Character.isLetter(ch1) || !Character.isUpperCase(ch1) ||
+                !Character.isLetter(ch2) || !Character.isUpperCase(ch2)) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) {
+                // _CC format
+                return new Locale("", str.substring(1, 3));
+            }
+            if (len < 5) { // Must be at least _CC_V
+                 throw new IllegalArgumentException("Invalid locale format: " + str); // Handles _CCX
+            }
+            if (str.charAt(3) != '_') { // Must have underscore after country
+                 throw new IllegalArgumentException("Invalid locale format: " + str); // Handles _CCXX...
+            }
+            // _CC_variant format
+            return new Locale("", str.substring(1, 3), str.substring(4));
+        }
+
+        // Handle the ll, ll_CC, ll__variant, ll_CC_variant formats
+
+        // Validate language code: ll
         if (len < 2) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
+            throw new IllegalArgumentException("Invalid locale format: " + str); // Handles single char like "e"
         }
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+        // Check if language code chars are lowercase letters
+        if (!Character.isLetter(ch0) || !Character.isLowerCase(ch0) ||
+            !Character.isLetter(ch1) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         if (len == 2) {
+            // ll format
             return new Locale(str);
         }
+
+        // Format must be ll_??...
         if (len < 5) {
+            // Covers llX, ll_X, ll_XX where XX is not valid country/variant separator
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            throw new IllegalArgumentException("Invalid locale format: " + str); // Covers llXXX...
         }
+
         final char ch3 = str.charAt(3);
         if (ch3 == '_') {
+            // Format ll__variant (Language and Variant only)
+             if (len < 5) { // Should be len >= 5: ll__V requires length 5 minimum
+                 // This check is slightly redundant as len < 5 was checked before,
+                 // but clarifies the minimum length for this specific format.
+                 throw new IllegalArgumentException("Invalid locale format: " + str); // Handles ll__
+             }
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
+
+        // Format ll_CC... (Language and Country)
         final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+        // Validate country code: CC
+        if (!Character.isLetter(ch3) || !Character.isUpperCase(ch3) ||
+            !Character.isLetter(ch4) || !Character.isUpperCase(ch4)) {
+             throw new IllegalArgumentException("Invalid locale format: " + str); // Handles ll_c? or ll_Cc etc.
         }
+
         if (len == 5) {
+            // Format ll_CC
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+
+        // Format must be ll_CC_variant
+        if (len < 7) { // Must be at least ll_CC_V
+             throw new IllegalArgumentException("Invalid locale format: " + str); // Handles ll_CCX
         }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+        if (str.charAt(5) != '_') { // Must have underscore after country
+             throw new IllegalArgumentException("Invalid locale format: " + str); // Handles ll_CCXXX...
         }
+        // Format ll_CC_variant
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
