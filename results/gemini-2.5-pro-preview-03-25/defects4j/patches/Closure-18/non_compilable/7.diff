diff --git a/tmp/4d119b28-6f12-460a-87a4-b75e788c0dcd_buggy.java b/tmp/f28eb2b4-4562-492d-b5e4-f492e59b0b1b_fixed.java
index 20123a4..a2baa80 100644
--- a/tmp/4d119b28-6f12-460a-87a4-b75e788c0dcd_buggy.java
+++ b/tmp/f28eb2b4-4562-492d-b5e4-f492e59b0b1b_fixed.java
@@ -1,129 +1,151 @@
   /**
    * Parses the externs and main inputs.
    *
    * @return A synthetic root node whose two children are the externs root
    *     and the main root
    */
   Node parseInputs() {
     boolean devMode = options.devMode != DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
     if (externsRoot != null) {
       externsRoot.detachChildren();
     }
     if (jsRoot != null) {
       jsRoot.detachChildren();
     }
 
     // Parse main JS sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
 
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
 
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
 
+    // Initialize the performance tracker.
     if (options.tracer.isOn()) {
       tracker = new PerformanceTracker(jsRoot, options.tracer);
       addChangeHandler(tracker.getCodeChangeHandler());
     }
 
     Tracer tracer = newTracer("parseInputs");
 
     try {
       // Parse externs sources.
       for (CompilerInput input : externs) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
           return null;
         }
+        if (n == null) {
+          // If an extern file is empty, we should not error,
+          // but we should not add it to the AST.
+          continue;
+        }
         externsRoot.addChildToBack(n);
       }
 
       // Modules inferred in ProcessCommonJS pass.
       if (options.transformAMDToCJSModules || options.processCommonJSModules) {
         processAMDAndCommonJSModules();
       }
 
       hoistExterns(externsRoot);
 
       // Check if the sources need to be re-ordered.
       boolean staleInputs = false;
       if (options.dependencyOptions.needsManagement() && options.closurePass) {
         for (CompilerInput input : inputs) {
           // Forward-declare all the provided types, so that they
           // are not flagged even if they are dropped from the process.
+          //
+          // Input PROVIDES must be processed before REQUIREs.
           for (String provide : input.getProvides()) {
             getTypeRegistry().forwardDeclareType(provide);
           }
         }
 
         try {
           inputs =
               (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
               .manageDependencies(options.dependencyOptions, inputs);
-          staleInputs = true;
+          staleInputs = true; // Indicate that the inputs list may have changed.
         } catch (CircularDependencyException e) {
           report(JSError.make(
               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
           // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         } catch (MissingProvideException e) {
           report(JSError.make(
               MISSING_ENTRY_ERROR, e.getMessage()));
-
           // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
+        } catch (MissingModuleException e) {
+          // Should not happen, graph would be null if there were no modules.
+          throw new RuntimeException(e);
         }
       }
 
-      hoistNoCompileFiles();
-
+      // If the inputs were sorted, we may need to rebuild the input list
+      // to reflect new modules or metadata. Repartition the inputs now.
+      // This must happen before hoisting, as hoisting may remove inputs
+      // entirely.
       if (staleInputs) {
         repartitionInputs();
       }
 
+      // Hoist @nocompile files. This must happen after dependency management
+      // and partitioning, because we need the final list of inputs to process.
+      hoistNoCompileFiles();
+
       // Build the AST.
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
+        // input.getAstRoot() may return null if there was a parse error,
+        // or if the input is empty. This error should have already
+        // been reported.
         if (n == null) {
           continue;
         }
 
         if (devMode) {
+          // Don't run the sanity check if there are errors,
+          // because the error might break the sanity check.
           runSanityCheck();
           if (hasErrors()) {
             return null;
           }
         }
 
         if (options.sourceMapOutputPath != null ||
             options.nameReferenceReportPath != null) {
 
           // Annotate the nodes in the tree with information from the
           // input file. This information is used to construct the SourceMap.
           SourceInformationAnnotator sia =
               new SourceInformationAnnotator(
                   input.getName(), options.devMode != DevMode.OFF);
           NodeTraversal.traverse(this, n, sia);
         }
 
         jsRoot.addChildToBack(n);
       }
 
+      // Check for errors again, because modules can introduce orderings
+      // that can cause errors.
       if (hasErrors()) {
         return null;
       }
       return externAndJsRoot;
     } finally {
       stopTracer(tracer, "parseInputs");
     }
   }
\ No newline at end of file
