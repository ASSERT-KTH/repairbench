diff --git a/tmp/792aaf62-92a5-4f2d-a756-b687f5cd2b52_buggy.java b/tmp/f3ec1acb-d6df-47b5-9d77-cecbdf5c1c48_fixed.java
index 6cfa79b..a630fef 100644
--- a/tmp/792aaf62-92a5-4f2d-a756-b687f5cd2b52_buggy.java
+++ b/tmp/f3ec1acb-d6df-47b5-9d77-cecbdf5c1c48_fixed.java
@@ -1,12 +1,34 @@
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.special.Erf;
+
+// Assuming the context of a class like NormalDistributionImpl
+// where 'mean' and 'standardDeviation' are accessible fields.
+
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>.
-     * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
+     * @throws MathException if the algorithm fails to converge for values
+     * within 20 standard deviations from the mean. For values further than
+     * 20 standard deviations, 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
+        final double dev = x - mean;
+        // Check if x is more than 20 standard deviations from the mean.
+        // The constant 20 is somewhat arbitrary, but aligns with the Javadoc
+        // and prevents potential convergence issues in Erf.erf for extreme values.
+        if (Math.abs(dev / standardDeviation) > 20) {
+            // Return 0 or 1 directly for extreme values.
+            if (dev < 0) {
+                return 0.0d;
+            } else {
+                return 1.0d;
+            }
+        } else {
+            // For values closer to the mean, calculate the CDF using the error function.
+            // Erf.erf might throw a MathException (e.g., MaxIterationsExceededException)
+            // if it fails to converge, which will be propagated as per the method signature.
+            return 0.5 * (1.0 + Erf.erf(dev /
                     (standardDeviation * Math.sqrt(2.0))));
         }
+    }
\ No newline at end of file
