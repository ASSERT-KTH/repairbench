diff --git a/tmp/25ab97b3-845b-4e9d-89d4-bfdc552d2f66_buggy.java b/tmp/5e9af055-8503-4a00-a031-7c710620ef04_fixed.java
index 6cfa79b..91f6140 100644
--- a/tmp/25ab97b3-845b-4e9d-89d4-bfdc552d2f66_buggy.java
+++ b/tmp/5e9af055-8503-4a00-a031-7c710620ef04_fixed.java
@@ -1,12 +1,45 @@
+import org.apache.commons.math.special.Erf;
+import org.apache.commons.math.MathException;
+
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        final double dev = x - mean;
+        // Handle case where standardDeviation is very small or zero properly?
+        // Current implementation assumes standardDeviation is positive,
+        // which is enforced by the constructor.
+        
+        // Calculate the standardized score (z-score)
+        final double z = dev / standardDeviation;
+
+        // As per the javadoc, handle cases where x is far from the mean.
+        // The threshold of 20 standard deviations is mentioned. For values
+        // beyond this threshold, the CDF is effectively 0 or 1.
+        // This also avoids potential convergence issues in the Erf.erf function
+        // for very large inputs, which caused the test failure.
+        // Note: A threshold like 8 might be sufficient as erf(z/sqrt(2)) is
+        // extremely close to +/-1 for |z| > 8 * sqrt(2) ~ 11.3, but using the
+        // documented value of 20 is safer and adheres to the description.
+        // The test fails for z=40, so a threshold of 20 correctly handles this.
+        final double Z_THRESHOLD = 20.0; 
+
+        if (Math.abs(z) > Z_THRESHOLD) {
+            if (z > 0) {
+                return 1.0; // If x is far above the mean, CDF is 1
+            } else {
+                return 0.0; // If x is far below the mean, CDF is 0
+            }
+        } else {
+            // If x is within Z_THRESHOLD standard deviations of the mean,
+            // calculate the CDF using the error function.
+            // The relationship is CDF(x) = 0.5 * (1 + erf((x - mean) / (stdDev * sqrt(2))))
+            // which is equivalent to 0.5 * (1 + erf(z / sqrt(2)))
+            return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));
+        }
     }
\ No newline at end of file
