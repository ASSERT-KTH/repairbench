diff --git a/tmp/b6cb90f7-edef-4345-b6af-3c4c6f7540df_buggy.java b/tmp/74561488-8bf8-4a82-bd77-a8cc5baa781f_fixed.java
index 6cfa79b..41f605b 100644
--- a/tmp/b6cb90f7-edef-4345-b6af-3c4c6f7540df_buggy.java
+++ b/tmp/74561488-8bf8-4a82-bd77-a8cc5baa781f_fixed.java
@@ -1,12 +1,20 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>.
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        final double dev = x - mean;
+        // Handle extreme values directly. Referencing Javadoc discussion:
+        // x is more than 20 standard deviations from the mean.
+        // MATH-167: Check was previously evaluating erf((x-mean)/stdDev)
+        // which could be +/- Infinity for extreme values of x.
+        if (Math.abs(dev / standardDeviation) > 20) {
+             return dev < 0 ? 0.0d : 1.0d;
+        }
+        // Standard case: Use erf function
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));
     }
\ No newline at end of file
