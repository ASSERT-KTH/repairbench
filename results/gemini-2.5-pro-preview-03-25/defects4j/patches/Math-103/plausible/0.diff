diff --git a/tmp/86c8d0fe-a750-486d-9535-da187edae93b_buggy.java b/tmp/97c5ffbe-b9b4-42d4-8d34-87381b50f148_fixed.java
index 6cfa79b..0e435ce 100644
--- a/tmp/86c8d0fe-a750-486d-9535-da187edae93b_buggy.java
+++ b/tmp/97c5ffbe-b9b4-42d4-8d34-87381b50f148_fixed.java
@@ -1,12 +1,28 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        final double dev = x - mean;
+        // Handle potential division by zero or invalid standard deviation
+        if (standardDeviation == 0) {
+             return x < mean ? 0.0 : (x > mean ? 1.0 : 0.5); // Consistent with Z-score interpretation
+        }
+        try {
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));
+        } catch (MaxIterationsExceededException e) {
+            // Check if x is far from the mean (more than 20 standard deviations)
+            // as described in the Javadoc.
+            if (Math.abs(dev) > 20 * standardDeviation) {
+                 // Return 0 or 1 based on which side of the mean x is.
+                 return dev < 0 ? 0.0d : 1.0d;
+            } else {
+                // If convergence fails for non-extreme values, rethrow wrapped as MathException.
+                throw new MathException(e);
+            }
+        }
     }
\ No newline at end of file
