diff --git a/tmp/d19f4560-ae34-44b6-bc02-3d215d647a95_buggy.java b/tmp/58410395-fe65-434d-87d5-44cf79138c44_fixed.java
index 6cfa79b..dc542ad 100644
--- a/tmp/d19f4560-ae34-44b6-bc02-3d215d647a95_buggy.java
+++ b/tmp/58410395-fe65-434d-87d5-44cf79138c44_fixed.java
@@ -1,12 +1,23 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>.
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        final double dev = x - mean;
+        // Handle extreme values explicitly to avoid potential convergence issues
+        // in Erf.erf and honor the Javadoc note.
+        // Calculate the standardized score z = dev / standardDeviation
+        // Check if |z| > 20
+        if (Math.abs(dev) > 20 * standardDeviation) {
+             return dev < 0 ? 0.0 : 1.0;
+        } else {
+            // For values within 20 standard deviations, use the error function.
+            // The Erf.erf method might still throw a MathException if convergence fails
+            // for arguments within this range, as per the method signature.
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));
+        }
     }
\ No newline at end of file
