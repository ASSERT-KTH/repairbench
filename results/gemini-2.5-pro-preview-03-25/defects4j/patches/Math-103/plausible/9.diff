diff --git a/tmp/1ac4398b-5498-4c08-84fa-cab27837ac24_buggy.java b/tmp/c1ebbdc6-0f58-47c0-9d1f-8dc8f656acf0_fixed.java
index 6cfa79b..71ee9dc 100644
--- a/tmp/1ac4398b-5498-4c08-84fa-cab27837ac24_buggy.java
+++ b/tmp/c1ebbdc6-0f58-47c0-9d1f-8dc8f656acf0_fixed.java
@@ -1,12 +1,21 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>.
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        final double dev = x - mean;
+        // Check if x is more than 20 standard deviations from the mean
+        if (Math.abs(dev) / standardDeviation > 20) {
+             // Avoid calling Erf.erf which can fail to converge for extreme values.
+             // Return 0 or 1 directly as the probability is extremely close.
+             return dev < 0 ? 0.0d : 1.0d;
+        } else {
+            // Standard case: calculate CDF using the error function
+            // This might still throw MathException if Erf.erf fails for non-extreme values
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));
+        }
     }
\ No newline at end of file
