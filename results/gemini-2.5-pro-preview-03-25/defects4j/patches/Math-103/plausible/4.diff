diff --git a/tmp/3cb4c791-ded1-4c1a-9bf2-7e8ce7d78188_buggy.java b/tmp/baeed5ec-9b28-4e0b-8139-53d342fe9067_fixed.java
index 6cfa79b..7e7d724 100644
--- a/tmp/3cb4c791-ded1-4c1a-9bf2-7e8ce7d78188_buggy.java
+++ b/tmp/baeed5ec-9b28-4e0b-8139-53d342fe9067_fixed.java
@@ -1,12 +1,26 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        final double dev = x - mean;
+        if (Math.abs(dev) / standardDeviation > 40) { // Avoid convergence issues around +/- 40 std dev
+             return dev < 0 ? 0.0d : 1.0d;
+        }
+        try {
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));
+        } catch (org.apache.commons.math.MaxIterationsExceededException ex) {
+            // Check if x is more than 20 standard deviations from the mean.
+            // The 20 limit is per the Javadoc comment. Re-check the deviation using division to avoid potential overflow.
+            if (Math.abs(dev) / standardDeviation > 20) { 
+                 return dev < 0 ? 0.0d : 1.0d;
+            } else {
+                // Re-throw the exception if it's not an extreme value case.
+                throw ex;
+            }
+        }
     }
\ No newline at end of file
