diff --git a/tmp/6b68cbeb-bd9c-464f-9d2f-10752876e8b8_buggy.java b/tmp/487c3f87-2c9f-4e4e-b7ea-01b62dd9110e_fixed.java
index 6cfa79b..0985ad9 100644
--- a/tmp/6b68cbeb-bd9c-464f-9d2f-10752876e8b8_buggy.java
+++ b/tmp/487c3f87-2c9f-4e4e-b7ea-01b62dd9110e_fixed.java
@@ -1,12 +1,24 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        final double dev = x - mean;
+        final double z = dev / standardDeviation; // Standardized value
+        try {
+            return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));
+        } catch (org.apache.commons.math.MaxIterationsExceededException ex) {
+            // As per Javadoc, catch convergence exception for extreme values.
+            // Use the documented threshold of 20 standard deviations.
+            if (Math.abs(z) > 20) { 
+                return (z < 0) ? 0.0d : 1.0d;
+            } else {
+                // If convergence failed for non-extreme values, rethrow.
+                throw ex;
+            }
+        }
     }
\ No newline at end of file
