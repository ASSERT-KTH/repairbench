diff --git a/tmp/8f8ba53f-4482-44b8-833b-efb703d6ca6d_buggy.java b/tmp/69631541-7535-4ec0-aabb-bc52b970d9f4_fixed.java
index 6cfa79b..d921465 100644
--- a/tmp/8f8ba53f-4482-44b8-833b-efb703d6ca6d_buggy.java
+++ b/tmp/69631541-7535-4ec0-aabb-bc52b970d9f4_fixed.java
@@ -1,12 +1,21 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
+     * x is more than 40 standard deviations from the mean, in which case 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        final double dev = x - mean;
+        // Avoid ArithmeticException fromErf.erf logic for large deviations.
+        // See JIRA MATH-167. The threshold value 40 is somewhat arbitrary
+        // and was chosen based on testing results observed in MATH-167. It
+        // could possibly be lowered, but this value has been used previous
+        // versions and proven stable.
+        final double Z_MAX = 40.0; 
+        if (Math.abs(dev) > Z_MAX * standardDeviation) {
+            return dev < 0 ? 0.0d : 1.0d;
+        }
+        // Standard calculation using the error function for non-extreme values.
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));
     }
\ No newline at end of file
