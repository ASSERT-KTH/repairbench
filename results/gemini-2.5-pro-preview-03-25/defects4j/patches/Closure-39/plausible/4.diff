diff --git a/tmp/b7ec3e69-9d07-421c-bfc3-60ab3c21bd81_buggy.java b/tmp/8b729ce4-5aea-442e-8083-2a09b72ef4a1_fixed.java
index e4d90e7..6d7265e 100644
--- a/tmp/b7ec3e69-9d07-421c-bfc3-60ab3c21bd81_buggy.java
+++ b/tmp/8b729ce4-5aea-442e-8083-2a09b72ef4a1_fixed.java
@@ -1,45 +1,56 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
+      // If it has a reference name, use that unconditionally.
+      // This is important for recursive types represented by ProxyObjectType.
       return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
+      // Prevent recursive pretty printing.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
+      // Collect all properties from the prototype chain, except for native object types.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType(); // Collect all needed properties
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
+        // Apply the property limit only if not printing for annotations.
+        // Check before printing the property.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
+          sb.append("...");
+          break; // Stop printing further properties.
+        }
+
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        JSType propType = getPropertyType(property);
+        // Recursively call toStringHelper, passing the forAnnotations flag.
+        // Handle null property types, although getPropertyType typically shouldn't return null.
+        sb.append(propType == null ? "null" : propType.toStringHelper(forAnnotations));
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
-        }
       }
 
       sb.append("}");
 
+      // Restore prettyPrint state.
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // We are in a recursive toString call.
+      // Return "?" for annotations, "{...}" otherwise.
+      return forAnnotations ? "?" : "{...}";
     }
   }
\ No newline at end of file
