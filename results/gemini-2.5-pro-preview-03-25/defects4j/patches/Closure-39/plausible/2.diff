diff --git a/tmp/08fb7b8e-0822-42a0-8b71-80ac356926ed_buggy.java b/tmp/8e67d225-33c7-494c-8205-22983f7fa7f0_fixed.java
index e4d90e7..51ce99d 100644
--- a/tmp/08fb7b8e-0822-42a0-8b71-80ac356926ed_buggy.java
+++ b/tmp/8e67d225-33c7-494c-8205-22983f7fa7f0_fixed.java
@@ -1,45 +1,66 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
+      // If the type has a name, give that.
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    }
+
+    // The 'prettyPrint' flag is used to detect recursive calls during toString() generation.
+    // It's assumed to be true upon initial entry for a non-recursive call.
+    if (prettyPrint) {
+      // Set flag to false temporarily to detect recursive calls to this specific object.
       prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
+      // Use a tree set so that the properties are sorted alphabetically.
       Set<String> propertyNames = Sets.newTreeSet();
+      // Collect all properties from the object and its prototype chain.
+      // Do not limit the collection here; limiting is done during printing.
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        JSType propertyType = getPropertyType(property);
+        // Delegate to the appropriate string representation method (toString or toAnnotationString)
+        // for the property's type, preserving the 'forAnnotations' context.
+        // This ensures that recursive calls correctly use "?" or "{...}" based on the context.
+        if (forAnnotations) {
+            sb.append(propertyType.toAnnotationString());
+        } else {
+            sb.append(propertyType.toString());
+        }
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        i++;
+
+        // Add ellipsis and break if this is NOT for annotations (i.e., standard toString),
+        // we have reached the property display limit, AND there are more properties remaining.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > i) {
             sb.append(", ...");
-          break;
+            break; // Stop adding properties
         }
       }
 
       sb.append("}");
 
+      // Reset the flag after finishing generation for this object.
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // A recursive call to toStringHelper for this object was detected (prettyPrint was false).
+      // Return "?" if generating an annotation string, otherwise return "{...}".
+      // This matches the expected behavior shown in testRecursiveRecord.
+      return forAnnotations ? "?" : "{...}";
     }
   }
\ No newline at end of file
