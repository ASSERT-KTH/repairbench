diff --git a/tmp/00bb09da-80f9-496e-b37c-e292c1fc03b6_buggy.java b/tmp/f8643809-3425-4a80-a2d1-50de372e962f_fixed.java
index e4d90e7..e14a945 100644
--- a/tmp/00bb09da-80f9-496e-b37c-e292c1fc03b6_buggy.java
+++ b/tmp/f8643809-3425-4a80-a2d1-50de372e962f_fixed.java
@@ -1,45 +1,64 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
+      // If the type has a reference name, prefer that.
       return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
+      // Prevent infinite recursion in case of recursive types.
+      // Temporarily disable pretty printing for nested calls within this type's string representation.
       prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
+      // Use a TreeSet to ensure properties are sorted alphabetically.
       Set<String> propertyNames = Sets.newTreeSet();
+      // Collect all own property names from this object type and its implicit prototypes.
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
+      // Iterate over the sorted property names.
       for (String property : propertyNames) {
+        // Check if the maximum number of properties to print has been reached,
+        // but only apply this limit if we are not generating the string for annotations.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
+          // Ensure we only add "..." if there were actually more properties than the limit.
+          if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+            sb.append(", ...");
+          }
+          break; // Stop appending properties
+        }
+
+        // Add a comma and space separator before the second property onwards.
         if (i > 0) {
           sb.append(", ");
         }
 
+        // Append the property name.
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        // Append the string representation of the property's type.
+        // Recursively call toStringHelper, passing the forAnnotations flag.
+        JSType propertyType = getPropertyType(property);
+        // Handle cases where property type might be null (though less common for record types).
+        sb.append(propertyType != null ? propertyType.toStringHelper(forAnnotations) : "<?>" );
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
-        }
+        // Increment the count of properties processed.
+        i++;
       }
 
       sb.append("}");
 
+      // Restore the prettyPrint flag state for subsequent calls at the same level.
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // If prettyPrint is false, this indicates a recursive call trying to print the same type again.
+      // Return "?" when generating for annotations, and "{...}" otherwise, to break the recursion.
+      return forAnnotations ? "?" : "{...}";
     }
   }
\ No newline at end of file
