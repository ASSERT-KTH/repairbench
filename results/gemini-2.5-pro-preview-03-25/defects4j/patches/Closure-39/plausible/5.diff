diff --git a/tmp/9e46eb4f-a7ee-4129-ad3b-8d13cbe0e95f_buggy.java b/tmp/def0aea1-ac5d-4b8b-862c-e107d388c049_fixed.java
index e4d90e7..cd70f55 100644
--- a/tmp/9e46eb4f-a7ee-4129-ad3b-8d13cbe0e95f_buggy.java
+++ b/tmp/def0aea1-ac5d-4b8b-862c-e107d388c049_fixed.java
@@ -1,45 +1,53 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
+           // Collect all properties, restriction is handled during printing.
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        // Use the correct toString method based on forAnnotations.
+        JSType propertyType = getPropertyType(property);
+        sb.append(forAnnotations ? propertyType.toAnnotationString() : propertyType.toString());
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        // Only apply MAX_PRETTY_PRINTED_PROPERTIES limit if not for annotations
+        // and if there are more properties than the limit.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES &&
+            propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
+      // Restore pretty print state.
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // Abbreviated output for recursive types or when pretty printing is off.
+      // JSDoc uses "?" for recursive types in annotations.
+      return forAnnotations ? "?" : "{...}";
     }
   }
\ No newline at end of file
