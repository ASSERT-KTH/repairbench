diff --git a/tmp/0b82ab4d-c36f-424a-bb00-2c479e5f2038_buggy.java b/tmp/b2459363-fd89-418e-b7e5-612077f3cfb1_fixed.java
index e4d90e7..164e2b5 100644
--- a/tmp/0b82ab4d-c36f-424a-bb00-2c479e5f2038_buggy.java
+++ b/tmp/b2459363-fd89-418e-b7e5-612077f3cfb1_fixed.java
@@ -1,45 +1,71 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
+      // TODO(nicksantos): Add recursion detection for ReferenceTypes. Programs
+      // like this:
+      // var x = {}; x.y = x; x.toString();
+      // will currently infinite loop.
+      // This likely requires passing a set of visited JSType objects.
       return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
+      // Temporarily disable pretty printing for recursive calls within this
+      // object's properties. This is the original mechanism for recursion detection.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
+           // Collect all properties from the prototype chain first.
+           // The limit is applied during printing, not collection.
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
+      boolean first = true;
       for (String property : propertyNames) {
-        if (i > 0) {
+          // Check truncation limit *before* processing the property,
+          // only if not for annotations.
+          if (!forAnnotations && i >= MAX_PRETTY_PRINTED_PROPERTIES) {
+              // Append "..." only if we have already added properties.
+              if (!first) {
+                 sb.append(", ...");
+              }
+              break;
+          }
+
+          if (!first) {
             sb.append(", ");
+          } else {
+            first = false;
           }
 
           sb.append(property);
           sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
+          JSType propertyType = getPropertyType(property);
+          if (propertyType == null) {
+               // Should not happen, but safeguard.
+               sb.append("null");
+          } else {
+               // Use toStringHelper and pass the 'forAnnotations' flag to handle
+               // recursion representation ("{...}" vs "?") and nested formatting correctly.
+               sb.append(propertyType.toStringHelper(forAnnotations));
           }
+          i++;
       }
 
       sb.append("}");
 
+      // Restore the flag.
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // prettyPrint was false, indicating recursion detected by the original mechanism.
+      // Return "{...}" for normal toString, "?" for annotation string.
+      return forAnnotations ? "?" : "{...}";
     }
   }
\ No newline at end of file
