diff --git a/tmp/940a9ca9-c4af-45ec-bf47-7186608a6ac3_buggy.java b/tmp/ef5398b2-9e6d-4dc5-b577-81539d527f79_fixed.java
index e4d90e7..26c16be 100644
--- a/tmp/940a9ca9-c4af-45ec-bf47-7186608a6ac3_buggy.java
+++ b/tmp/ef5398b2-9e6d-4dc5-b577-81539d527f79_fixed.java
@@ -1,45 +1,62 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
-    if (hasReferenceName()) {
+    // Don't use the reference name for annotations, show the structure.
+    if (hasReferenceName() && !forAnnotations) {
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    }
+
+    // Prevent infinite loops with recursive types. If prettyPrint is false,
+    // it means we are already printing this object higher up the stack.
+    if (!prettyPrint) {
+      return forAnnotations ? "?" : "{...}";
+    }
+
     prettyPrint = false;
-
+    try {
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
+      // Collect all properties from the prototype chain.
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
+        // Apply truncation limit only for regular toString(), not for annotations.
+        // Check before appending the property, if the limit is reached.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
+          // Ensure we only add "..." if there are more properties than the limit.
+          if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+              sb.append("...");
+          }
+          break;
+        }
+
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        JSType propertyType = getPropertyType(property);
+        // Delegate toStringHelper call, passing the forAnnotations flag.
+        // Ensure propertyType is not null before calling methods on it.
+        // Although getPropertyType is unlikely to return null for owned properties,
+        // it's safer. If null, use a placeholder.
+        sb.append(propertyType != null ? propertyType.toStringHelper(forAnnotations) : "<??");
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
-        }
+        i++; // Increment property count *after* processing it.
       }
 
       sb.append("}");
-
-      prettyPrint = true;
       return sb.toString();
-    } else {
-      return "{...}";
+    } finally {
+      // Restore prettyPrint state.
+      prettyPrint = true;
     }
   }
\ No newline at end of file
