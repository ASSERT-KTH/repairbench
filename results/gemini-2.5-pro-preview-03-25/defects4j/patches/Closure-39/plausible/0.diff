diff --git a/tmp/dd1c637d-44e3-4311-8aaa-aef058b41b52_buggy.java b/tmp/0ce46370-d555-435c-a8d0-f8c191bc249e_fixed.java
index e4d90e7..6faa797 100644
--- a/tmp/dd1c637d-44e3-4311-8aaa-aef058b41b52_buggy.java
+++ b/tmp/0ce46370-d555-435c-a8d0-f8c191bc249e_fixed.java
@@ -1,45 +1,66 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
+      // If forAnnotations is true, we should use the reference name.
+      // If forAnnotations is false, we might want to use the reference name
+      // or we might want to print the structural type. The old code always
+      // returned the reference name, so we keep that behavior.
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    } else if (prettyPrint) { // Check if pretty printing is allowed for this level
+      // Prevent infinite recursion:
+      // Set prettyPrint to false only for the duration of this call.
+      // Use try-finally to ensure it's always restored.
       prettyPrint = false;
-
+      try {
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
+        // Collect properties from this type and its prototypes
         for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             current != null && !current.isNativeObjectType();
              current = current.getImplicitPrototype()) {
           propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
-      int i = 0;
+        int count = 0;
+        boolean truncated = false;
+        // Iterate through sorted property names
         for (String property : propertyNames) {
-        if (i > 0) {
+           // Check if we have already printed the maximum allowed properties.
+           // This limit only applies if forAnnotations is false.
+           if (!forAnnotations && count >= MAX_PRETTY_PRINTED_PROPERTIES) {
+               truncated = true;
+               break; // Stop processing further properties
+           }
+
+           if (count > 0) {
              sb.append(", ");
            }
 
            sb.append(property);
            sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
+           JSType propType = getPropertyType(property);
+           // Recursively get the string representation of the property type,
+           // passing the forAnnotations flag down. Handle null defensively.
+           sb.append(propType == null ? "null" : propType.toStringHelper(forAnnotations));
+           count++;
         }
+
+        if (truncated) {
+            sb.append(", ..."); // Append ellipsis if properties were truncated
         }
 
         sb.append("}");
-
-      prettyPrint = true;
         return sb.toString();
-    } else {
-      return "{...}";
+
+      } finally {
+        // Restore prettyPrint flag regardless of exceptions during property processing
+        prettyPrint = true;
+      }
+    } else { // Not pretty printing (likely due to recursion detected by prettyPrint == false)
+      // Return "?" if for annotations (representing recursive type), otherwise "{...}"
+      return forAnnotations ? "?" : "{...}";
     }
   }
\ No newline at end of file
