diff --git a/tmp/39f327e6-68b3-41a1-a6dd-fce1ab8ad8b6_buggy.java b/tmp/7e434069-5289-4bbb-bcbc-d3b66120d568_fixed.java
index e4d90e7..ba9b049 100644
--- a/tmp/39f327e6-68b3-41a1-a6dd-fce1ab8ad8b6_buggy.java
+++ b/tmp/7e434069-5289-4bbb-bcbc-d3b66120d568_fixed.java
@@ -1,45 +1,77 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
+      // If it has a reference name, use that.
+      // We don't want to potentially start an infinite loop for recursive
+      // object types. This is potentially imperfect, as we might be hiding
+      // types like {Object} or {Array}, but it's the best we can do.
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    }
+
+    // The 'prettyPrint' flag is used to prevent infinite loops for recursive
+    // types. It's thread-unsafe, but we're currently single-threaded.
+    // When prettyPrint is false, it means we're in a recursive call.
+    if (!prettyPrint) {
+      // Return "?" for annotations and "{...}" for regular toString to match
+      // expected behavior in recursive scenarios.
+      return forAnnotations ? "?" : "{...}";
+    }
+
+    // Temporarily disable pretty printing to break recursion in nested calls.
     prettyPrint = false;
-
+    try {
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
+      // Collect all property names from the type and its prototypes.
+      // Truncation will be handled during string building if necessary.
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
+      boolean truncated = false;
       for (String property : propertyNames) {
+        // Check if we need to truncate based on MAX_PRETTY_PRINTED_PROPERTIES.
+        // Truncation only applies if forAnnotations is false.
+        if (!forAnnotations && i >= MAX_PRETTY_PRINTED_PROPERTIES) {
+          truncated = true;
+          break;
+        }
+
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        JSType propType = getPropertyType(property);
+        // Recursively call the appropriate string representation method
+        // based on the 'forAnnotations' flag.
+        sb.append(forAnnotations ? propType.toAnnotationString() : propType.toString());
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        i++;
+      }
+
+      if (truncated) {
+        // Append ellipsis if the output was truncated.
+        // Ensure we add it only if at least one property was added.
+        if (i > 0) {
            sb.append(", ...");
-          break;
+        } else {
+           // Handle edge case where MAX_PRETTY_PRINTED_PROPERTIES might be 0
+           sb.append("...");
         }
       }
 
       sb.append("}");
-
-      prettyPrint = true;
       return sb.toString();
-    } else {
-      return "{...}";
+    } finally {
+      // Ensure the prettyPrint flag is reset.
+      prettyPrint = true;
     }
   }
\ No newline at end of file
