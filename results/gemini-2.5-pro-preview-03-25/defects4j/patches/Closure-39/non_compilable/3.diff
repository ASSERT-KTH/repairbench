diff --git a/tmp/9c1b6628-57b9-4762-89b6-d2c9d5d1d048_buggy.java b/tmp/fa5fdb8a-385c-48d3-ba7a-41f7be51cf12_fixed.java
index e4d90e7..ac29d4f 100644
--- a/tmp/9c1b6628-57b9-4762-89b6-d2c9d5d1d048_buggy.java
+++ b/tmp/fa5fdb8a-385c-48d3-ba7a-41f7be51cf12_fixed.java
@@ -1,45 +1,102 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
+      // If the type has a reference name (e.g., named type or proxy):
+      if (forAnnotations) {
+        // For annotations, delegate to the referenced type's annotation string.
+        // JSType#toAnnotationString handles nulls and recursion detection (returning "?").
+        JSType referenced = getReferencedTypeInternal();
+        return referenced == null ? "?" : referenced.toAnnotationString();
+      } else {
+        // For regular toString(), just return the name. This avoids infinite loops
+        // for recursive types by not expanding the definition.
         return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+      }
+    }
+
+    // Handle types without a reference name (like anonymous records/objects).
+    if (forAnnotations) {
+      // Annotation strings should be complete and not truncated.
+      // Recursion is handled by JSType#toAnnotationString calls on property types.
+      Set<String> propertyNames = Sets.newTreeSet(); // Sorted properties
+      for (ObjectType current = this;
+           current != null && !current.isNativeObjectType();
+           current = current.getImplicitPrototype()) {
+        propertyNames.addAll(current.getOwnPropertyNames());
+      }
+
+      StringBuilder sb = new StringBuilder();
+      sb.append("{");
+      int i = 0;
+      for (String property : propertyNames) {
+        if (i > 0) {
+          sb.append(", ");
+        }
+        sb.append(property);
+        sb.append(": ");
+        JSType propType = getPropertyType(property);
+        // Use toAnnotationString for property types.
+        sb.append(propType.toAnnotationString());
+        ++i;
+        // No truncation for annotations.
+      }
+      sb.append("}");
+      return sb.toString();
+
+    } else {
+      // Handle regular toString(). Use prettyPrint flag for recursion detection
+      // and apply truncation limit.
+      if (prettyPrint) {
+        // Set flag to false to detect recursive calls to toString().
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             current != null && !current.isNativeObjectType();
              current = current.getImplicitPrototype()) {
+          // Collect all properties to correctly determine if truncation is needed.
           propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
+        boolean truncated = false;
         for (String property : propertyNames) {
-        if (i > 0) {
-          sb.append(", ");
-        }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
+          // Check limit *before* appending the property.
           if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+            truncated = true;
+            break; // Stop processing properties
+          }
+
+          if (i > 0) {
+            sb.append(", ");
+          }
+
+          sb.append(property);
+          sb.append(": ");
+          JSType propType = getPropertyType(property);
+          // Use toString() for property types (will return "{...}" on recursion).
+          sb.append(propType.toString());
+
+          ++i;
+        }
+
+        // Append "..." only if we stopped early *and* there were more properties than the limit.
+        if (truncated && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
-          break;
-        }
         }
 
         sb.append("}");
 
+        // Restore flag state.
         prettyPrint = true;
         return sb.toString();
       } else {
+        // We are in a recursive toString() call (prettyPrint was false).
         return "{...}";
       }
     }
+  }
\ No newline at end of file
