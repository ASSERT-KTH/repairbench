diff --git a/tmp/489034cb-8602-4b20-85ee-c618693f4d0f_buggy.java b/tmp/16147176-cfa6-451f-83e5-327d6d7d45a4_fixed.java
index e4d90e7..3bf566c 100644
--- a/tmp/489034cb-8602-4b20-85ee-c618693f4d0f_buggy.java
+++ b/tmp/16147176-cfa6-451f-83e5-327d6d7d45a4_fixed.java
@@ -1,45 +1,62 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
+    // Check for recursion first using the registry.
+    // Assumes JSType.toStringRegistry is a ThreadLocal<Set<JSType>>.
+    if (com.google.javascript.rhino.jstype.JSType.toStringRegistry.get().contains(this)) {
+      return forAnnotations ? "?" : "{...}";
+    }
+
+    // Use reference name if present. Proxy types handle their own recursion display.
     if (hasReferenceName()) {
+      // Assuming ProxyObjectType's toString/toStringHelper correctly uses
+      // forAnnotations and handles recursion.
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
-      prettyPrint = false;
+    }
 
+    // Add to registry before processing properties or calling recursively.
+    com.google.javascript.rhino.jstype.JSType.toStringRegistry.get().add(this);
+
+    try {
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
+      // Collect properties from the entire prototype chain.
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
+      // MAX_PRETTY_PRINTED_PROPERTIES defines the max number of properties
+      // to show *before* appending "...".
+      // It's assumed to be a static final int constant accessible here.
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
+        // Handle truncation only if forAnnotations is false and limit is reached.
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
+          sb.append("...");
+          break; // Stop adding properties
+        }
+
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        JSType propertyType = getPropertyType(property);
+        // Propagate the 'forAnnotations' flag in recursive calls.
+        sb.append(propertyType == null ? "null" : propertyType.toStringHelper(forAnnotations));
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
-        }
+        i++;
       }
 
       sb.append("}");
-
-      prettyPrint = true;
       return sb.toString();
-    } else {
-      return "{...}";
+    } finally {
+      // Ensure removal from the registry happens even if exceptions occur.
+      com.google.javascript.rhino.jstype.JSType.toStringRegistry.get().remove(this);
     }
   }
\ No newline at end of file
