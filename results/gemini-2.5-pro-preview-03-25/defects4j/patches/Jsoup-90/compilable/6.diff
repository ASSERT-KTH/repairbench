diff --git a/tmp/2604a74f-7b26-49fa-8fbb-3e69bac566a2_buggy.java b/tmp/a607ab93-400c-4032-8dcc-35e929320c94_fixed.java
index 373b1e8..0daa11c 100644
--- a/tmp/2604a74f-7b26-49fa-8fbb-3e69bac566a2_buggy.java
+++ b/tmp/a607ab93-400c-4032-8dcc-35e929320c94_fixed.java
@@ -1,37 +1,57 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
-            // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+            int length = input.length;
+
+            // BOM: EF BB BF
+            if (length >= 3 && (input[0] & 0xFF) == 0xEF
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) { // Use &&, not &
                 i = 3;
             }
 
             int end;
-            for (int j = input.length; i < j; ++i) {
+            for (; i < length; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
-                    continue; // ASCII
+                    continue; // ASCII 0xxxxxxx
                 }
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
+                // Check for valid UTF-8 multi-byte lead byte
+                if ((o & 0xE0) == 0xC0) { // 110xxxxx (2 bytes)
                     end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
+                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx (3 bytes)
                     end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
+                } else if ((o & 0xF8) == 0xF0) { // 11110xxx (4 bytes)
                     end = i + 3;
                 } else {
+                    // Invalid starting byte (e.g., 10xxxxxx or 11111xxx)
                     return false;
                 }
 
+                // Check if the sequence is truncated (i.e., not enough bytes left for the continuation bytes)
+                // 'end' is the index of the last expected continuation byte. It must be < length.
+                if (end >= length) {
+                    return false;
+                }
 
-                while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                // Check validity of continuation bytes (must be 10xxxxxx)
+                // This inner loop iterates through the expected continuation bytes
+                // starting from index i + 1 up to 'end'.
+                int check_i = i; // Use a separate index for checking continuation bytes
+                                 // The outer loop's 'i' should remain at the lead byte for now.
+                while (check_i < end) {
+                    check_i++; // Move to the next byte position
+                    int continuationByte = input[check_i];
+                    if ((continuationByte & 0xC0) != 0x80) {
+                        // Does not have the form 10xxxxxx
                         return false;
                     }
                 }
+                // If all continuation bytes are valid, advance the outer loop's 'i'
+                // past the entire multi-byte sequence.
+                i = end; // Set 'i' to the index of the last byte of the sequence.
+                         // The outer loop's ++i will then advance it to the start of the next char.
             }
+
+            // If the loop completes without returning false, the byte array appears to be valid UTF-8
             return true;
         }
\ No newline at end of file
