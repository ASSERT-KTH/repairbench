diff --git a/tmp/1beb071d-fa9b-4e4a-a743-3ba000cb8c66_buggy.java b/tmp/4980f10c-c554-4b80-81b8-cb820b50b83d_fixed.java
index 373b1e8..b22e159 100644
--- a/tmp/1beb071d-fa9b-4e4a-a743-3ba000cb8c66_buggy.java
+++ b/tmp/4980f10c-c554-4b80-81b8-cb820b50b83d_fixed.java
@@ -1,37 +1,46 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
+            // Corrected BOM check operator precedence: use && instead of mixing & and &&
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
             int end;
-            for (int j = input.length; i < j; ++i) {
+            int j = input.length; // Cache length
+            for (; i < j; ++i) { // Use cached length j
                 int o = input[i];
                 if ((o & 0x80) == 0) {
-                    continue; // ASCII
+                    continue; // ASCII (0xxxxxxx)
                 }
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
+                // UTF-8 leading byte check
+                if ((o & 0xE0) == 0xC0) { // 110xxxxx
                     end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
+                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx
                     end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
+                } else if ((o & 0xF8) == 0xF0) { // 11110xxx
                     end = i + 3;
                 } else {
-                    return false;
+                    return false; // Invalid leading byte (e.g., 10xxxxxx or 11111xxx)
                 }
 
+                // Check if the sequence extends beyond the bounds of the input array
+                if (end >= j) { // Use cached length j
+                    return false; // Truncated sequence
+                }
 
+                // Check validity of continuation bytes (10xxxxxx)
                 while (i < end) {
-                    i++;
+                    i++; // Move to the next byte index
+                    // No need to check bounds again here, as the check 'end >= j' above ensures we have enough bytes
                     o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
+                    if ((o & 0xC0) != 0x80) { // Check for 10xxxxxx pattern
+                        return false; // Invalid continuation byte
                     }
                 }
+                // Note: The outer loop's ++i will increment i past the last byte of the sequence
             }
-            return true;
+            return true; // All bytes/sequences processed successfully
         }
\ No newline at end of file
