diff --git a/tmp/37c268ee-31d3-4ce1-97c1-f166154e13dd_buggy.java b/tmp/15bedb9a-fd00-4f59-ae6e-c1199a9e9e4a_fixed.java
index 373b1e8..3e4522f 100644
--- a/tmp/37c268ee-31d3-4ce1-97c1-f166154e13dd_buggy.java
+++ b/tmp/15bedb9a-fd00-4f59-ae6e-c1199a9e9e4a_fixed.java
@@ -1,37 +1,55 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
+            int length = input.length;
+
             // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+            if (length >= 3 && (input[0] & 0xFF) == 0xEF
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
             int end;
-            for (int j = input.length; i < j; ++i) {
+            // Use length instead of input.length in loop condition
+            for (; i < length; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
-                    continue; // ASCII
+                    continue; // ASCII (0xxxxxxx)
                 }
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+                // Determine the number of continuation bytes expected
+                int requiredBytes;
+                if ((o & 0xE0) == 0xC0) { // 110xxxxx (2 bytes)
+                    requiredBytes = 1;
+                    end = i + requiredBytes;
+                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx (3 bytes)
+                    requiredBytes = 2;
+                    end = i + requiredBytes;
+                } else if ((o & 0xF8) == 0xF0) { // 11110xxx (4 bytes)
+                    requiredBytes = 3;
+                    end = i + requiredBytes;
                 } else {
+                    // Invalid UTF-8 leading byte (e.g., 10xxxxxx or 11111xxx)
                     return false;
                 }
 
+                // Check if there are enough bytes left in the input for the sequence.
+                // The required continuation bytes are at indices i+1, ..., end.
+                // So, the last required index 'end' must be less than 'length'.
+                if (end >= length) {
+                    return false; // Sequence extends beyond input length
+                }
 
+                // Check that the required number of continuation bytes follow (10xxxxxx)
                 while (i < end) {
-                    i++;
+                    i++; // Move to the next byte index
+                    // No need to check i < length here because we already checked end < length
                     o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
+                    if ((o & 0xC0) != 0x80) { // Check for 10xxxxxx pattern
+                        return false; // Invalid continuation byte
                     }
                 }
+                // The outer loop's ++i will advance 'i' past the last byte of the validated sequence
             }
+            // If the loop completes without returning false, it looks like UTF-8
             return true;
         }
\ No newline at end of file
