diff --git a/tmp/194b4215-7afa-42b4-ba20-cd2fc6c15c2c_buggy.java b/tmp/48f3da16-a7cc-4e3d-a9b8-d1f0b1a42c8d_fixed.java
index 373b1e8..369bc4d 100644
--- a/tmp/194b4215-7afa-42b4-ba20-cd2fc6c15c2c_buggy.java
+++ b/tmp/48f3da16-a7cc-4e3d-a9b8-d1f0b1a42c8d_fixed.java
@@ -1,37 +1,54 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
-            // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
-                i = 3;
-            }
-
-            int end;
-            for (int j = input.length; i < j; ++i) {
-                int o = input[i];
-                if ((o & 0x80) == 0) {
-                    continue; // ASCII
-                }
+            final int length = input.length;
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
-                } else {
-                    return false;
+            // Check for optional BOM (Byte Order Mark)
+            if (length >= 3 && (input[0] & 0xFF) == 0xEF
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
+                i = 3; // Skip BOM
             }
 
+            int nBytes; // Number of bytes in the current UTF-8 sequence
+            while (i < length) {
+                int currentByte = input[i] & 0xFF; // Treat byte as unsigned value
 
-                while (i < end) {
+                if ((currentByte & 0x80) == 0) {
+                    // 0xxxxxxx : ASCII character
                     i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                    continue; // Move to the next byte
+                }
+
+                // Determine the expected number of bytes in the sequence based on the leading byte
+                if ((currentByte & 0xE0) == 0xC0) {      // 110xxxxx : 2-byte sequence
+                    nBytes = 2;
+                } else if ((currentByte & 0xF0) == 0xE0) { // 1110xxxx : 3-byte sequence
+                    nBytes = 3;
+                } else if ((currentByte & 0xF8) == 0xF0) { // 11110xxx : 4-byte sequence
+                    nBytes = 4;
+                } else {
+                    // Invalid UTF-8 start byte (e.g., 10xxxxxx or 11111xxx)
+                    return false;
+                }
+
+                // Check if the declared sequence length extends beyond the input array
+                if (i + nBytes > length) {
+                    // Incomplete sequence at the end of the input
+                    return false;
+                }
+
+                // Check that the following bytes are valid continuation bytes (10xxxxxx)
+                for (int k = 1; k < nBytes; k++) {
+                    int nextByte = input[i + k] & 0xFF; // Treat byte as unsigned
+                    if ((nextByte & 0xC0) != 0x80) {
+                        // Invalid continuation byte
                         return false;
                     }
                 }
+
+                // Move the index past the validated UTF-8 sequence
+                i += nBytes;
             }
+
+            // If the loop completes without returning false, the input looks like valid UTF-8
             return true;
         }
\ No newline at end of file
