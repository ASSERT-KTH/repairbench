diff --git a/tmp/8b20023b-4e9d-44de-b7c3-ef9a350f8e1f_buggy.java b/tmp/10895f4c-2ed6-4c7e-afa7-32c6bb1bf644_fixed.java
index 373b1e8..f47f9a4 100644
--- a/tmp/8b20023b-4e9d-44de-b7c3-ef9a350f8e1f_buggy.java
+++ b/tmp/10895f4c-2ed6-4c7e-afa7-32c6bb1bf644_fixed.java
@@ -1,37 +1,69 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
-            // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
-                i = 3;
+            int length = input.length; // Use a variable for length for clarity and potentially minor optimization
+
+            // BOM: Check for UTF-8 Byte Order Mark (EF BB BF)
+            // Fixed the potential typo '&' which should be '&&' for logical AND.
+            // Although bitwise '&' on booleans works in Java, '&&' is standard and short-circuiting.
+            if (length >= 3 && (input[0] & 0xFF) == 0xEF
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
+                i = 3; // Skip BOM
             }
 
             int end;
-            for (int j = input.length; i < j; ++i) {
+            // Iterate through the byte array
+            for (int j = length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
-                    continue; // ASCII
+                    // Single-byte sequence (ASCII 00-7F): 0xxxxxxx
+                    continue; // Byte is valid ASCII, move to next byte
                 }
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
+                // Multi-byte sequence lead byte check
+                // Determine the number of bytes in the sequence based on the lead byte pattern
+                // and calculate the index 'end' of the last byte in the sequence.
+                if ((o & 0xE0) == 0xC0) { // 2-byte sequence lead byte (C2-DF): 110xxxxx
                     end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
+                    // Note: C0, C1 are invalid starts for 2-byte sequences (overlong)
+                    // This check doesn't explicitly reject them but proceeds. A stricter check could add `&& o <= 0xDF && o >= 0xC2`
+                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence lead byte (E0-EF): 1110xxxx
                     end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
+                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence lead byte (F0-F7): 11110xxx
                     end = i + 3;
+                    // Note: F5-FF are invalid starts for 4-byte sequences.
+                    // This check doesn't explicitly reject them but proceeds. A stricter check could add `&& o <= 0xF4` (or F7 if allowing higher planes)
                 } else {
+                    // Invalid lead byte (e.g., 80-BF, F8-FF)
                     return false;
                 }
 
+                // Check if the sequence extends beyond the input array boundary
+                // 'end' is the index of the last byte. It must be less than 'j' (length).
+                if (end >= j) {
+                    return false; // Sequence is truncated
+                }
 
+                // Check continuation bytes (must start with 10xxxxxx)
+                // The inner loop variable 'i' is incremented *before* checking the continuation byte.
                 while (i < end) {
-                    i++;
+                    i++; // Move to the next byte (potential continuation byte)
+                    // Although the 'end < j' check before the loop should guarantee 'i < j',
+                    // the ArrayIndexOutOfBoundsException suggests a potential edge case or issue.
+                    // Adding an explicit check here prevents the exception reported.
+                    // It ensures we don't try to access input[i] if i somehow reached or exceeded j.
+                    if (i >= j) {
+                       // This condition should theoretically be caught by the "end >= j" check earlier,
+                       // but we add it defensively to prevent the specific AIOOBE reported.
+                       return false;
+                    }
                     o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
+                    if ((o & 0xC0) != 0x80) { // Check if bits 7 and 6 are '10'
+                        return false; // Invalid continuation byte
                     }
                 }
+                // The outer loop's ++i will advance 'i' past the end of the successfully checked multi-byte sequence.
             }
+
+            // If the loop completes without finding invalid sequences, it looks like UTF-8.
             return true;
         }
\ No newline at end of file
