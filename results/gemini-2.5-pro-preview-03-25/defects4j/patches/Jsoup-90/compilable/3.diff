diff --git a/tmp/11b8fc10-30c3-4655-b44a-0f3e553e6fb0_buggy.java b/tmp/51b9c93e-6737-443a-8332-120834174eef_fixed.java
index 373b1e8..3c14856 100644
--- a/tmp/11b8fc10-30c3-4655-b44a-0f3e553e6fb0_buggy.java
+++ b/tmp/51b9c93e-6737-443a-8332-120834174eef_fixed.java
@@ -1,37 +1,56 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
+            // Corrected the logical AND operator for the last condition (&& instead of &)
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
+            int len = input.length;
+            for (/* i initialized above */; i < len; /* i incremented below */) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
-                    continue; // ASCII
-                }
-
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
-                } else {
-                    return false;
-                }
-
-
-                while (i < end) {
+                    // ASCII character (0xxxxxxx)
                     i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                    continue;
+                }
+
+                // Check for valid UTF-8 start byte and determine sequence length
+                int remainingBytes;
+                if ((o & 0xE0) == 0xC0) { // 2-byte sequence start (110xxxxx)
+                    remainingBytes = 1;
+                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence start (1110xxxx)
+                    remainingBytes = 2;
+                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence start (11110xxx)
+                    remainingBytes = 3;
+                } else {
+                    // Invalid UTF-8 start byte (must be 0xxxxxxx, 110xxxxx, 1110xxxx, or 11110xxx)
+                    // This handles cases like 10xxxxxx or 11111xxx
+                    return false;
+                }
+
+                // Check if there are enough bytes left for the sequence
+                // Need 'remainingBytes' more bytes, so the last index to check is i + remainingBytes
+                // This index must be less than 'len'. So, i + remainingBytes < len, or i + remainingBytes >= len is an error.
+                if (i + remainingBytes >= len) {
+                    // Sequence is truncated
+                    return false;
+                }
+
+                // Check the validity of the continuation bytes (must be 10xxxxxx)
+                for (int k = 1; k <= remainingBytes; k++) {
+                    int contByte = input[i + k];
+                    if ((contByte & 0xC0) != 0x80) {
+                        // Invalid continuation byte
                         return false;
                     }
                 }
+
+                // Move index past the current multi-byte character (start byte + remainingBytes)
+                i += (remainingBytes + 1);
             }
+
+            // If loop completes without returning false, it looks like UTF-8
             return true;
         }
\ No newline at end of file
