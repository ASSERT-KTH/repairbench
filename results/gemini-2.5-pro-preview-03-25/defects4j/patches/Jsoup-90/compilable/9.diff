diff --git a/tmp/6b0a3cc3-1aaa-4552-873f-5a5cbe3ca9f6_buggy.java b/tmp/3cff269f-5d01-4b99-9974-7db1f2dc523b_fixed.java
index 373b1e8..bbdf253 100644
--- a/tmp/6b0a3cc3-1aaa-4552-873f-5a5cbe3ca9f6_buggy.java
+++ b/tmp/3cff269f-5d01-4b99-9974-7db1f2dc523b_fixed.java
@@ -1,37 +1,53 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
+            int j = input.length; // Use 'j' for length for brevity
             // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+            // Use && for logical AND, not & (bitwise AND) although it works here due to implicit conversion
+            if (j >= 3 && (input[0] & 0xFF) == 0xEF
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
             int end;
-            for (int j = input.length; i < j; ++i) {
+            // Iterate through the bytes starting from index 'i'
+            for (; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
-                    continue; // ASCII
+                    continue; // ASCII character (0xxxxxxx), move to next byte
                 }
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+                // Check for UTF-8 leading byte patterns
+                if ((o & 0xE0) == 0xC0) {        // 110xxxxx (2-byte sequence)
+                    end = i + 1; // Expect 1 continuation byte
+                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx (3-byte sequence)
+                    end = i + 2; // Expect 2 continuation bytes
+                } else if ((o & 0xF8) == 0xF0) { // 11110xxx (4-byte sequence)
+                    end = i + 3; // Expect 3 continuation bytes
                 } else {
+                    // Not a valid UTF-8 start byte (could be 10xxxxxx or 11111xxx)
                     return false;
                 }
 
+                // Crucial check: Ensure the sequence doesn't extend beyond the array bounds.
+                // 'end' is the index of the last byte expected in the sequence.
+                // The indices to be checked are i+1 up to end.
+                // Therefore, the index 'end' must be less than the length 'j'.
+                if (end >= j) {
+                    return false; // Sequence truncated
+                }
 
+                // Check continuation bytes (must be 10xxxxxx)
+                // This loop advances 'i' to check each expected continuation byte
                 while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
+                    i++; // Move to the next byte index
+                    o = input[i]; // Get the continuation byte
+                    if ((o & 0xC0) != 0x80) { // Check if it has the 10xxxxxx pattern
+                        return false; // Invalid continuation byte
                     }
                 }
+                // After the while loop, 'i' points to the last byte of the sequence.
+                // The outer loop's ++i will correctly move 'i' to the start of the next character.
             }
+            // If loop completes without returning false, the byte array looks like valid UTF-8
             return true;
         }
\ No newline at end of file
