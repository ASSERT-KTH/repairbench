diff --git a/tmp/553b918a-f6a5-4da3-9ca9-277be9d1082e_buggy.java b/tmp/f359e77d-d7d5-486d-a29e-72f4e4a4e138_fixed.java
index 373b1e8..8f96eed 100644
--- a/tmp/553b918a-f6a5-4da3-9ca9-277be9d1082e_buggy.java
+++ b/tmp/f359e77d-d7d5-486d-a29e-72f4e4a4e138_fixed.java
@@ -1,37 +1,43 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) { // Note: Bug in original & vs &&, fixed here for correctness, though not the main issue
                 i = 3;
             }
 
             int end;
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
                 // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
+                if ((o & 0xE0) == 0xC0) { // 2 bytes
                     end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
+                } else if ((o & 0xF0) == 0xE0) { // 3 bytes
                     end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
+                } else if ((o & 0xF8) == 0xF0) { // 4 bytes
                     end = i + 3;
                 } else {
-                    return false;
+                    return false; // Does not match UTF-8 leading byte pattern
                 }
 
+                // Check if the declared sequence length fits within the array bounds
+                if (end >= j) { // Fix: check if 'end' goes beyond the input length 'j'
+                    return false; // Truncated sequence
+                }
 
+                // Check validity of continuation bytes
                 while (i < end) {
-                    i++;
+                    i++; // Move to the next byte, which should be a continuation byte
                     o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
+                    if ((o & 0xC0) != 0x80) { // Check if it has the 10xxxxxx pattern
+                        return false; // Invalid continuation byte
                     }
                 }
+                // At this point, i == end, and the outer loop's ++i will move to the start of the next character
             }
             return true;
         }
\ No newline at end of file
