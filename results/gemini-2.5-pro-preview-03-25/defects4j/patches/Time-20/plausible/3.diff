diff --git a/tmp/b1673386-04a1-4312-87cc-f2b1c1750a3b_buggy.java b/tmp/da9ed464-3a8a-4dbb-986c-21ecc91b2a34_fixed.java
index ae6c2b1..60c915d 100644
--- a/tmp/b1673386-04a1-4312-87cc-f2b1c1750a3b_buggy.java
+++ b/tmp/da9ed464-3a8a-4dbb-986c-21ecc91b2a34_fixed.java
@@ -1,10 +1,37 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
+            String bestMatchId = null;
+            int bestMatchLength = 0;
+
+            // Iterate through all known IDs to find the best match.
+            // We need to find the longest match (e.g., "America/Dawson_Creek"
+            // should be chosen over "America/Dawson").
             for (String id : ALL_IDS) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
+                    int idLen = id.length();
+                    // Check if this match is longer than the current best match.
+                    // Also check if this match extends to a word boundary,
+                    // unless it's the end of the string. This handles cases
+                    // where one ID is a prefix of another but not meant to match.
+                    // Example: parsing "CEST" shouldn't match "CET".
+                    // However, the original code didn't have this check, and
+                    // fixing the prefix issue ("America/Dawson" vs "America/Dawson_Creek")
+                    // is the primary goal based on the failing test. The longest match
+                    // logic solves the reported problem. A boundary check might be
+                    // needed for robustness but wasn't indicated by the failing test.
+                    if (idLen > bestMatchLength) {
+                        bestMatchId = id;
+                        bestMatchLength = idLen;
                     }
                 }
+            }
+
+            // If a match was found, set the zone and return the new position.
+            if (bestMatchId != null) {
+                bucket.setZone(DateTimeZone.forID(bestMatchId));
+                return position + bestMatchLength;
+            }
+
+            // If no match was found, return the inverted position.
             return ~position;
         }
\ No newline at end of file
