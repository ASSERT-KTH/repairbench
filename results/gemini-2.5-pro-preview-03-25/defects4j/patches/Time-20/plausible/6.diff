diff --git a/tmp/b8be3c82-443a-4ef1-b52c-8abf20ee8304_buggy.java b/tmp/35d4e35e-66df-4b76-857d-8c8285dd1fa7_fixed.java
index ae6c2b1..f12ee19 100644
--- a/tmp/b8be3c82-443a-4ef1-b52c-8abf20ee8304_buggy.java
+++ b/tmp/35d4e35e-66df-4b76-857d-8c8285dd1fa7_fixed.java
@@ -1,10 +1,27 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
+            String bestMatchId = null;
+            int bestMatchLength = 0;
+
+            // Iterate through all known IDs to find the best match.
+            // Need to find the longest match (e.g. "America/Dawson_Creek" vs "America/Dawson")
             for (String id : ALL_IDS) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
+                    int idLength = id.length();
+                    // If this match is longer than the current best match, update the best match.
+                    if (idLength > bestMatchLength) {
+                        bestMatchId = id;
+                        bestMatchLength = idLength;
                     }
                 }
+            }
+
+            // If a best match was found, set the zone and return the new position.
+            if (bestMatchId != null) {
+                bucket.setZone(DateTimeZone.forID(bestMatchId));
+                return position + bestMatchLength;
+            }
+            
+            // If no match was found, return the inverted position.
             return ~position;
         }
\ No newline at end of file
