diff --git a/tmp/dc1e38d1-ef81-493a-9fcd-9a0f6cdbf888_buggy.java b/tmp/b1064494-bef3-44b0-800c-107a8081e809_fixed.java
index ae6c2b1..7a79f3c 100644
--- a/tmp/dc1e38d1-ef81-493a-9fcd-9a0f6cdbf888_buggy.java
+++ b/tmp/b1064494-bef3-44b0-800c-107a8081e809_fixed.java
@@ -1,10 +1,30 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
-            String str = text.substring(position);
+            // Find the longest match
+            String bestMatchId = null;
+            int bestMatchLength = 0;
+
+            // Iterate through all available timezone IDs.
+            // Assumes ALL_IDS is accessible in this scope and contains all valid IDs.
+            // It should be populated, for example, from DateTimeZone.getAvailableIDs().
             for (String id : ALL_IDS) {
-                if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
+                // Check if the text starts with the id at the given position.
+                // Timezone IDs are case-sensitive, hence the 'false' argument.
+                if (text.regionMatches(false, position, id, 0, id.length())) {
+                    // If this match is longer than the current best match, update.
+                    if (id.length() > bestMatchLength) {
+                        bestMatchId = id;
+                        bestMatchLength = id.length();
                     }
                 }
+            }
+
+            if (bestMatchId != null) {
+                // Found the longest match, set the zone in the bucket.
+                bucket.setZone(DateTimeZone.forID(bestMatchId));
+                // Return the position after the matched ID.
+                return position + bestMatchLength;
+            }
+
+            // No match found, return error indicator.
             return ~position;
         }
\ No newline at end of file
