diff --git a/tmp/823dcfd6-610d-47b9-8bbf-e2980cb89b7b_buggy.java b/tmp/6fe0006d-e637-4184-aed7-3d3a201bd34f_fixed.java
index ae6c2b1..575b3ea 100644
--- a/tmp/823dcfd6-610d-47b9-8bbf-e2980cb89b7b_buggy.java
+++ b/tmp/6fe0006d-e637-4184-aed7-3d3a201bd34f_fixed.java
@@ -1,10 +1,28 @@
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
+            String bestMatchId = null;
+            int bestMatchLength = 0;
+
+            // Iterate through all known IDs to find the longest match.
+            // This is necessary because some IDs are prefixes of others (e.g., "America/Dawson" and "America/Dawson_Creek").
             for (String id : ALL_IDS) {
-                if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
+                // Check length first for a potential optimization, avoiding startsWith if the id is shorter than the current best match.
+                // Then check if the substring starts with the current ID.
+                if (id.length() > bestMatchLength && str.startsWith(id)) {
+                    // If this ID is longer than the previous best match, update the best match.
+                    bestMatchId = id;
+                    bestMatchLength = id.length();
                 }
             }
+
+            // If a best match was found...
+            if (bestMatchId != null) {
+                // Set the zone in the bucket using the longest matching ID found.
+                bucket.setZone(DateTimeZone.forID(bestMatchId));
+                // Return the position after the parsed ID.
+                return position + bestMatchLength;
+            }
+            
+            // If no match was found, return the inverted position as per the API contract.
             return ~position;
         }
\ No newline at end of file
