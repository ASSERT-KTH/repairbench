diff --git a/tmp/6c288e3e-ed80-46b7-8e9e-5f798bc2cd04_buggy.java b/tmp/696dcc04-68a5-48e5-81c2-95e36eb9a80b_fixed.java
index 574b43c..1ebfec9 100644
--- a/tmp/6c288e3e-ed80-46b7-8e9e-5f798bc2cd04_buggy.java
+++ b/tmp/696dcc04-68a5-48e5-81c2-95e36eb9a80b_fixed.java
@@ -1,57 +1,84 @@
     /**
      * Method that will construct a regular bean property setter using
      * the given setter method.
      *
      * @return Property constructed, if any; or null to indicate that
      *   there should be no property based on given definitions.
      */
     protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanPropertyDefinition propDef,
             JavaType propType0)
         throws JsonMappingException
     {
         // need to ensure method is callable (for non-public)
         AnnotatedMember mutator = propDef.getNonConstructorMutator();
 
-        if (ctxt.canOverrideAccessModifiers()) {
         // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
         // never needed and attempts may cause problems on some platforms.
-            // !!! NOTE: should be handled better for 2.8 and later
+        if (ctxt.canOverrideAccessModifiers()) {
+            // 14-Jan-2016, tatu: Let's implement explicit check for Throwable.cause, see
+            //    [databind#1089] for details.
+            // 28-Jul-2017, tatu: As per [databind#1706], need to check for AnnotatedField,
+            //    not just AnnotatedMethod
+            Class<?> rawSettingType = beanDesc.getBeanClass();
+            if (mutator == null) {
+                 // 14-Mar-2017, tatu: Ideally should not happen... but maybe if certain mix-ins added?
+                ctxt.reportBadPropertyDefinition(beanDesc, propDef,
+                        "No non-constructor mutator available");
+                 // ... but should we throw exception or just ignore? Seems like latter is better
+                 return null; // or throw exception?
+            }
+
+            // 18-Nov-2017, tatu: Wait. Let's check `propDef.getName()` instead of `mutator.getName()`;
+            //   latter may differ.
+            // 01-Mar-2021, tatu: And actually let's use declaring class of field/method, not `beanDesc`
+            if (propDef.getName().equals("cause") && mutator instanceof AnnotatedField) {
+                if (Throwable.class == mutator.getDeclaringClass()) {
+                    // cannot and should not try to force access to Throwable.cause
+                } else {
+                    // otherwise fine to try forcing access
                     mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                 }
+            } else {
+                // otherwise fine to try forcing access
+                mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
+            }
+        }
         // note: this works since we know there's exactly one argument for methods
         BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
                 propType0, propDef.getWrapperName(),
                 beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
         JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
         // did type change?
         if (type != propType0) {
             property = property.withType(type);
         }
 
         // First: does the Method specify the deserializer to use? If so, let's use it.
         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
         type = modifyTypeByAnnotation(ctxt, mutator, type);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop;
+        // 28-Jul-2017, tatu: As per [databind#1706], need to check for AnnotatedField, not just Method
         if (mutator instanceof AnnotatedMethod) {
             prop = new MethodProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
         } else {
+            // Must be a field. Note check above for null mutator
             prop = new FieldProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
         }
         if (propDeser != null) {
             prop = prop.withValueDeserializer(propDeser);
         }
         // need to retain name of managed forward references:
         AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
         if (ref != null && ref.isManagedReference()) {
             prop.setManagedReferenceName(ref.getName());
         }
         ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
         if(objectIdInfo != null){
             prop.setObjectIdInfo(objectIdInfo);
         }
         return prop;
     }
\ No newline at end of file
