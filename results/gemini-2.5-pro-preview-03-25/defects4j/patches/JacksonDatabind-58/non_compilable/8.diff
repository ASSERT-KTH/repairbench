diff --git a/tmp/0d4cc3d3-ae5a-4d83-8ca6-2918b3764c48_buggy.java b/tmp/8c6a9059-785d-4d4b-bc3e-a83468322e13_fixed.java
index 574b43c..2479973 100644
--- a/tmp/0d4cc3d3-ae5a-4d83-8ca6-2918b3764c48_buggy.java
+++ b/tmp/8c6a9059-785d-4d4b-bc3e-a83468322e13_fixed.java
@@ -1,57 +1,69 @@
     /**
      * Method that will construct a regular bean property setter using
      * the given setter method.
      *
      * @return Property constructed, if any; or null to indicate that
      *   there should be no property based on given definitions.
      */
     protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanPropertyDefinition propDef,
             JavaType propType0)
         throws JsonMappingException
     {
         // need to ensure method is callable (for non-public)
         AnnotatedMember mutator = propDef.getNonConstructorMutator();
 
-        if (ctxt.canOverrideAccessModifiers()) {
         // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
         // never needed and attempts may cause problems on some platforms.
-            // !!! NOTE: should be handled better for 2.8 and later
+        if (ctxt.canOverrideAccessModifiers()) {
+            // 18-Dec-2015, tatu: Related to [databind#877], let's block handling of
+            //      `Throwable.cause` altogether, for now. May be needed in future?
+            if (Throwable.class.isAssignableFrom(beanDesc.getBeanClass())
+                    && "cause".equals(propDef.getName())) {
+                 // 03-Aug-2018, tatu: Needs to be ignored, if it's deduced as property
+                 return null;
+            }
+            // 13-Oct-2016, tatu: As per [databind#1395], need to skip for fields, when
+            //    requested. Ideally would be handled earlier (by `BeanIntrospector`?),
+            //    but this'll have to do for now.
+            // Also: fixAccess() call is ONLY needed for non-public members
+            if (!mutator.isAccessible()) {
                  mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
             }
+        }
         // note: this works since we know there's exactly one argument for methods
         BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
                 propType0, propDef.getWrapperName(),
                 beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
         JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
         // did type change?
         if (type != propType0) {
             property = property.withType(type);
         }
 
         // First: does the Method specify the deserializer to use? If so, let's use it.
         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
         type = modifyTypeByAnnotation(ctxt, mutator, type);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop;
         if (mutator instanceof AnnotatedMethod) {
             prop = new MethodProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
         } else {
             prop = new FieldProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
         }
         if (propDeser != null) {
             prop = prop.withValueDeserializer(propDeser);
         }
         // need to retain name of managed forward references:
         AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
         if (ref != null && ref.isManagedReference()) {
             prop.setManagedReferenceName(ref.getName());
         }
         ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
         if(objectIdInfo != null){
             prop.setObjectIdInfo(objectIdInfo);
         }
         return prop;
     }
\ No newline at end of file
