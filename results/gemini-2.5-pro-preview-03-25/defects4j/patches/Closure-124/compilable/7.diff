diff --git a/tmp/914e5473-154e-45bb-91fd-21f7737c1996_buggy.java b/tmp/513e656b-ca55-4c31-a0bf-0d0dcaa542fa_fixed.java
index 2573d30..dc391e5 100644
--- a/tmp/914e5473-154e-45bb-91fd-21f7737c1996_buggy.java
+++ b/tmp/513e656b-ca55-4c31-a0bf-0d0dcaa542fa_fixed.java
@@ -1,20 +1,34 @@
   /**
-   * Checks name referenced in node to determine if it might have
-   * changed.
-   * @return Whether the replacement can be made.
+   * Checks names referenced within 'node' to determine if any might have
+   * their meaning changed by assignments related to 'replacement'.
+   * Used to determine if a value ('replacement') can be safely substituted
+   * elsewhere. The common case is checking the RHS of an assignment `lhs = rhs`
+   * by calling `isSafeReplacement(rhs, rhs)`.
+   * @param node The node to recursively check for possibly-aliased names.
+   * @param replacement The context expression, usually the same as 'node'.
+   * @return Whether the replacement seems safe w.r.t. name changes.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+    // Check recursively for names or qualified names within the node.
     if (node.isName()) {
-      return true;
+      // Base case: If 'node' is a name, check if that specific name might be
+      // reassigned in a way related to 'replacement'. If it is potentially
+      // reassigned (isNameAssignedTo returns true), the replacement is unsafe.
+      return !isNameAssignedTo(node.getString(), replacement);
     }
-    Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // For non-Name nodes, recursively check all children.
+    // If any child contains a name that makes the replacement unsafe,
+    // the whole node is considered unsafe.
+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+      if (!isSafeReplacement(child, replacement)) {
         return false;
       }
+    }
 
+    // If the node itself is not a Name and all children are safe,
+    // then this node is considered safe for replacement in this context.
+    // This covers literals, operators, GETPROP/GETELEM objects/indices etc.,
+    // assuming their children have been verified.
     return true;
   }
\ No newline at end of file
