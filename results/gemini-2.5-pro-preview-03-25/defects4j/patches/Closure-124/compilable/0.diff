diff --git a/tmp/0a2e56ef-8e20-4f64-b3f2-b0d1e7a1f8c7_buggy.java b/tmp/89add811-73ac-4f9b-8d3b-81fc9b605fbf_fixed.java
index 2573d30..1d5b029 100644
--- a/tmp/0a2e56ef-8e20-4f64-b3f2-b0d1e7a1f8c7_buggy.java
+++ b/tmp/89add811-73ac-4f9b-8d3b-81fc9b605fbf_fixed.java
@@ -1,20 +1,41 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+    // Base case: Simple names are considered safe by themselves in this context.
+    // Assignment checks happen when they are part of a GETPROP chain.
     if (node.isName()) {
       return true;
     }
-    Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Handle GETPROP: Recursively check the object part of the property access.
+    if (node.isGetProp()) {
+      Node objectNode = node.getFirstChild();
+
+      // Check recursively down the chain (e.g., `a.b` in `a.b.c`).
+      if (!isSafeReplacement(objectNode, replacement)) {
+        return false;
+      }
+
+      // After the recursive check returns true (meaning the chain itself is safe),
+      // we specifically check if the immediate base object (`objectNode`),
+      // if it's a NAME, is reassigned. This catches cases like `a.b` where `a`
+      // might be reassigned, invalidating the structure.
+      if (objectNode.isName() && isNameAssignedTo(objectNode.getString(), replacement)) {
         return false;
       }
 
+      // If all checks passed, the GETPROP structure is safe for replacement.
       return true;
     }
+
+    // Conservatively assume other structures are unsafe.
+    // The original code implied only NAME or GETPROP would be passed,
+    // but handling other cases defensively is safer.
+    // Or potentially check for other safe structures like THIS.
+    // For now, returning false aligns with a conservative approach.
+    // If this function is only ever called with NAME or GETPROP, this path is unreachable.
+    return false;
+  }
\ No newline at end of file
