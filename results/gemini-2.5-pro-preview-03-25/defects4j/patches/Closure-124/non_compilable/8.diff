diff --git a/tmp/be398dcd-b83a-4b56-ac71-8b65a75837d9_buggy.java b/tmp/adaa9465-f644-4f06-b3e6-fd469a1d7b7f_fixed.java
index 2573d30..f2b6794 100644
--- a/tmp/be398dcd-b83a-4b56-ac71-8b65a75837d9_buggy.java
+++ b/tmp/adaa9465-f644-4f06-b3e6-fd469a1d7b7f_fixed.java
@@ -1,20 +1,70 @@
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.NodeUtil;
+import com.google.common.base.Preconditions;
+import com.google.common.base.Predicate;
+
+// ... other imports and class context ...
+
   /**
    * Checks name referenced in node to determine if it might have
-   * changed.
-   * @return Whether the replacement can be made.
+   * changed. The primary concern is when a variable is assigned a value
+   * that depends on the variable itself. For example:
+   * x = x.parentNode;
+   * y = x.parentNode; // Replacing x.parentNode with x here is unsafe.
+   *
+   * x = y;
+   * z = y; // Replacing y with x here is safe.
+   *
+   * x = x;
+   * y = x; // Replacing x with x here is safe.
+   *
+   * @param node The expression that might be replaced.
+   * @param replacement The variable that was assigned the value of 'node'
+   *                    in a preceding assignment, and which would replace 'node'.
+   *                    This is expected to be a NAME node.
+   * @return Whether the replacement can be made safely.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
-    }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // If replacement is not a simple name, bail.
+    // This is conservative and likely indicates an issue upstream or an unexpected state.
+    if (!replacement.isName()) {
       return false;
     }
+    final String replacementName = replacement.getString();
 
+    // If node itself is the variable being assigned, the replacement is trivial and safe.
+    // Example: x = x; y = x; // Replacing y's rhs (x) with x is safe.
+    if (node.isName() && node.getString().equals(replacementName)) {
         return true;
     }
+
+    // The replacement is unsafe if the expression 'node' contains a reference
+    // to the variable 'replacementName'. This is because the assignment that
+    // gives 'replacement' its value (replacement = node) would have changed
+    // the meaning of 'replacementName' within the expression 'node'.
+    // Example: x = x.parentNode; y = x.parentNode;
+    // Here 'node' is x.parentNode, 'replacement' is x. 'node' contains 'x'. Unsafe.
+
+    Predicate<Node> nameMatch =
+        new Predicate<Node>() {
+          @Override
+          public boolean apply(Node input) {
+            return input.isName() && input.getString().equals(replacementName);
+          }
+        };
+
+    // Avoid traversing into function scopes, as variable names might be shadowed.
+    Predicate<Node> descend =
+        new Predicate<Node>() {
+          @Override
+          public boolean apply(Node input) {
+             return !input.isFunction();
+          }
+        };
+
+    boolean contains = NodeUtil.has(node, nameMatch, descend);
+
+    // Replacement is safe if 'node' does NOT contain 'replacementName'.
+    // The case where node is identical to replacementName was handled earlier.
+    return !contains;
+  }
\ No newline at end of file
