diff --git a/tmp/423dd846-fd49-4488-a295-b5cfbac93f12_buggy.java b/tmp/05c83e7e-d18f-4e7d-aa63-3f2601bf029c_fixed.java
index 2573d30..092544c 100644
--- a/tmp/423dd846-fd49-4488-a295-b5cfbac93f12_buggy.java
+++ b/tmp/05c83e7e-d18f-4e7d-aa63-3f2601bf029c_fixed.java
@@ -1,20 +1,74 @@
+import com.google.common.base.Predicate;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.jscomp.NodeUtil;
+import com.google.common.base.Preconditions;
+
+// NOTE: Assumes isNameAssignedTo(String, Node) is defined elsewhere in the class.
+
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
     if (node.isName()) {
-      return true;
+      // Replacing name 'v' with 'replacement'.
+      // It's unsafe if 'replacement' contains 'v' itself, as this can lead to
+      // incorrect results when 'v' is reassigned between the definition and use,
+      // or if the replacement happens within an assignment to 'v'.
+      // Example: x = x.a; x = x.a; is problematic because the second 'x.a' would
+      // refer to the x modified by the first assignment if naively substituted.
+      // Example: x = x.a; y = x; is problematic if x changes between the two statements.
+      // Checking if the replacement references the assigned variable captures this risk.
+      final String name = node.getString();
+      // Check if 'name' is used anywhere in 'replacement'. Traverse into all nodes
+      // except function definitions, as replacements across function boundaries
+      // have different safety considerations (handled elsewhere).
+      if (NodeUtil.has(
+          replacement,
+          new Predicate<Node>() {
+            @Override
+            public boolean apply(Node input) {
+              // Check if input is a NAME node with the specified name.
+              return input.isName() && input.getString().equals(name);
             }
+          },
+          new Predicate<Node>() {
+            @Override
+            public boolean apply(Node node) {
+              // Traverse into all nodes except function definitions.
+              return !node.isFunction();
+            }
+          })) {
+        return false; // Unsafe: replacement uses the variable being replaced.
+      }
+      return true; // Safe otherwise (from this function's perspective).
+    }
+
+    // If not a NAME, the original code assumed it must be a GETPROP.
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Replacing 'base.prop...' with 'replacement'.
+    // Find the ultimate base of the property access chain (e.g., 'a' in 'a.b.c').
+    Node base = node.getFirstChild();
+    while (base.isGetProp()) {
+      base = base.getFirstChild();
+    }
+
+    // If the base is a name (e.g., 'a' in a.b.c), check if that name ('a')
+    // is assigned to anywhere within the 'replacement' expression.
+    // If the base object ('a') could be modified by evaluating the replacement,
+    // then substituting the replacement for 'a.b.c' is unsafe.
+    // Example: a.p = b; use(a.p); => use(b); is unsafe if 'b' is 'a = null'.
+    if (base.isName()) {
+        if (isNameAssignedTo(base.getString(), replacement)) {
+             // Unsafe: replacement assigns to the base name of the original GETPROP.
              return false;
         }
+    }
 
+    // If the checks pass, the replacement is considered safe regarding variable changes
+    // and base object modifications checked here. Other checks (like general side
+    // effects of replacement) are likely handled elsewhere by the calling pass.
     return true;
   }
\ No newline at end of file
