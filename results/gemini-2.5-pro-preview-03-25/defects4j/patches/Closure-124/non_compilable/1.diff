diff --git a/tmp/06907133-d45a-4096-a3ef-671c059941e8_buggy.java b/tmp/8677e487-89f2-4079-8151-99569e003acb_fixed.java
index 2573d30..1c1d441 100644
--- a/tmp/06907133-d45a-4096-a3ef-671c059941e8_buggy.java
+++ b/tmp/8677e487-89f2-4079-8151-99569e003acb_fixed.java
@@ -1,20 +1,53 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
-   * @return Whether the replacement can be made.
+   * @param node The node containing the name reference (e.g., NAME, GETPROP).
+   * @param replacement The expression that would replace the name.
+   * @return Whether the replacement can be made without the replacement
+   *     expression changing the referenced name's value before the reference.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+    // If the node where the replacement happens is just a name,
+    // check if the replacement expression modifies that name.
     if (node.isName()) {
+      // Original code returned true here unconditionally. Fixed.
+      if (NodeUtil.isNameAssignedTo(node.getString(), replacement)) {
+          return false; // Unsafe if replacement modifies the name itself.
+      }
+      return true; // Safe if replacement doesn't modify the name.
+    }
+
+    // If the node is a property access, check the base name.
+    if (node.isGetProp()) {
+      Node base = node.getFirstChild();
+      // Check if the base is a name and the replacement modifies that name.
+      if (base.isName() &&
+          NodeUtil.isNameAssignedTo(base.getString(), replacement)) {
+        return false; // Unsafe if replacement modifies the base object name.
+      }
+      // If base isn't a name, or replacement doesn't modify it, assume safe for GETPROP.
+      // We don't need to recursively check deeper, as `isNameAssignedTo` checks
+      // the entire replacement expression.
       return true;
     }
-    Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
+    // Add handling for GETELEM similar to GETPROP
+    if (node.isGetElem()) {
+        Node base = node.getFirstChild();
+        // Check if the base is a name and the replacement modifies that name.
+        if (base.isName() &&
+            NodeUtil.isNameAssignedTo(base.getString(), replacement)) {
+            return false; // Unsafe if replacement modifies the base object name.
+        }
+        return true; // Assume safe for GETELEM otherwise.
     }
 
+
+    // Default assumption for other node types:
+    // If the usage node isn't a direct name or a property/element access
+    // based on a name, we assume the replacement is safe with respect to
+    // modifying the name being replaced (as there's no clear single name target).
+    // This matches the behavior of the original code which implicitly returned true
+    // or crashed for unexpected node types after the NAME check.
     return true;
   }
\ No newline at end of file
