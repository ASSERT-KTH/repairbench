diff --git a/tmp/d067b313-7d1d-4dbe-a019-054ffd27ade4_buggy.java b/tmp/a82e91f0-9a5d-439a-ba9c-9ff44674ca97_fixed.java
index 2573d30..d44d3fe 100644
--- a/tmp/d067b313-7d1d-4dbe-a019-054ffd27ade4_buggy.java
+++ b/tmp/a82e91f0-9a5d-439a-ba9c-9ff44674ca97_fixed.java
@@ -1,20 +1,50 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Check the full chain of GETPROPs e.g. x.y.z
+    // We are looking for a potential alias of the replacement.
+    // Example:
+    //   x = x.parentNode.parentNode;
+    //   x = x.parentNode.parentNode; // Cannot be replaced by 'x'.
+    // node is the second "x.parentNode.parentNode"
+    // replacement is the first "x"
+    // Check "x.parentNode.parentNode", then "x.parentNode", then "x"
+    // When we get down to "x", we see that replacement "x" is assigned to "x",
+    // so it is not safe.
+    if (node.isGetProp()) {
+      Node query = node;
+      while (query.isGetProp()) {
+          Node lhs = query.getFirstChild();
+          if (lhs.isName()) {
+              // Check the name component. If it's reassigned, it's not safe.
+              if (isNameAssignedTo(lhs.getString(), replacement)) {
                   return false;
               }
+              // If the name is not reassigned, this part of the chain is stable
+              // with respect to the replacement node. Further checks aren't needed.
+              break;
+          } else if (lhs.isGetProp()) {
+               // Continue checking down the chain.
+              query = lhs;
+          } else {
+              // If the base is not a name or GETPROP (e.g., a function call or
+              // array access), we assume it's safe as the aliasing check based on
+              // name assignment doesn't apply directly in the same way.
+               break;
+          }
+      }
+      // If the loop completes without finding an unsafe name reassignment,
+      // it's considered safe.
+      return true;
+    }
 
+    // For other node types, assume it's safe for now.
     return true;
   }
\ No newline at end of file
