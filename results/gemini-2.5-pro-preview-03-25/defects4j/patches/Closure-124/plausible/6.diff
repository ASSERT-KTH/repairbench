diff --git a/tmp/f83515df-49cc-4b39-8341-14f44dfd7f96_buggy.java b/tmp/3c6c0903-157b-423a-b888-87fda47c9426_fixed.java
index 2573d30..a9c1e40 100644
--- a/tmp/f83515df-49cc-4b39-8341-14f44dfd7f96_buggy.java
+++ b/tmp/3c6c0903-157b-423a-b888-87fda47c9426_fixed.java
@@ -1,20 +1,36 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
-    Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Check for expressions like a.b.c or a[b][c]. We need to find the
+    // base name (e.g., 'a') and see if it's assigned within the replacement.
+    if (node.isGetProp() || node.isGetElem()) {
+      Node current = node;
+      // Traverse down the left side of the property/element access chain.
+      while (current.isGetProp() || current.isGetElem()) {
+        current = current.getFirstChild();
+      }
+
+      // If the base of the expression is a name, check if it's assigned to
+      // within the replacement expression.
+      if (current.isName()) {
+        if (isNameAssignedTo(current.getString(), replacement)) {
+          // The base name is reassigned in the replacement, making it unsafe.
           return false;
         }
+      }
+      // TODO(moz): Handle cases where the base is not a simple name,
+      // e.g., function calls like foo().bar or complex expressions.
+      // For now, assume safety like the original code if the base isn't a name.
+    }
 
+    // Default to safe if no potential conflict is found.
     return true;
   }
\ No newline at end of file
