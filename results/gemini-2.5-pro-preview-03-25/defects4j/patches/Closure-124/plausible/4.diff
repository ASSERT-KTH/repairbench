diff --git a/tmp/c4538672-ce51-4420-ac14-c2c248ac830d_buggy.java b/tmp/3a2bdef9-f683-4c00-aed3-1cb69dbe71e3_fixed.java
index 2573d30..51d1363 100644
--- a/tmp/c4538672-ce51-4420-ac14-c2c248ac830d_buggy.java
+++ b/tmp/3a2bdef9-f683-4c00-aed3-1cb69dbe71e3_fixed.java
@@ -1,20 +1,41 @@
   /**
    * Checks name referenced in node to determine if it might have
-   * changed.
-   * @return Whether the replacement can be made.
+   * changed due to the evaluation of the replacement expression.
+   * Specifically, checks if any base name in a property access chain
+   * (e.g., 'a' in 'a.b.c') is assigned to within the replacement.
+   * @return Whether the replacement can be made safely.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+    // If node is a simple name, it doesn't have a base object path to check.
     if (node.isName()) {
       return true;
     }
-    Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // We only perform checks for property access chains (GETPROP).
+    // The original code implicitly assumed GETPROP if not NAME.
+    if (!node.isGetProp()) {
+      return true;
+    }
+
+    // Iterate down the property access chain (e.g., a.b.c -> a.b -> a)
+    Node current = node;
+    while (current.isGetProp()) {
+      Node base = current.getFirstChild();
+      // If the base of the property access is a simple name (like 'a' in 'a.b')...
+      if (base.isName()) {
+        // ...check if that name is assigned to within the replacement expression.
+        if (isNameAssignedTo(base.getString(), replacement)) {
+          // If the base name is modified, the replacement is unsafe because
+          // the property access path might resolve differently.
           return false;
         }
+      }
+      // Move down the chain by setting current to the base for the next iteration.
+      current = base;
+    }
 
+    // If we reached the end of the chain (current is no longer GETPROP)
+    // and found no assignments to base names within the replacement,
+    // then the replacement is considered safe with respect to this specific check.
     return true;
   }
\ No newline at end of file
