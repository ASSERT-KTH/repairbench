diff --git a/tmp/aa025b6b-9bf5-43fb-8983-121396078bb4_buggy.java b/tmp/3e034423-d18a-46bb-9bd2-13f170f8849e_fixed.java
index 2573d30..3d22e55 100644
--- a/tmp/aa025b6b-9bf5-43fb-8983-121396078bb4_buggy.java
+++ b/tmp/3e034423-d18a-46bb-9bd2-13f170f8849e_fixed.java
@@ -1,20 +1,32 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
-    Preconditions.checkArgument(node.isGetProp());
+    // Check the base name for GETPROPs
+    if (node.isGetProp()) {
+      Node base = node;
+      // Roll up the GETPROP chain to find the base object.
+      while (base.isGetProp()) {
+        base = base.getFirstChild();
+      }
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+      // If the base object is a name, check if it's assigned to in the
+      // replacement expression.
+      if (base.isName()
+          && isNameAssignedTo(base.getString(), replacement)) {
+        // e.g. a = b.c; a = foo();
+        // It is not safe to replace "a" with "b.c" in the second assignment,
+        // because foo() might modify "b".
         return false;
       }
+    }
 
+    // Otherwise, it's safe.
     return true;
   }
\ No newline at end of file
