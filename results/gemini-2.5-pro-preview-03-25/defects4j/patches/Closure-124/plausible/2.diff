diff --git a/tmp/3c8ea344-eefe-4201-8a5e-90c6e774053d_buggy.java b/tmp/0845564a-4b0a-4dc3-aa8e-ab8c60c04691_fixed.java
index 2573d30..1a73a1c 100644
--- a/tmp/3c8ea344-eefe-4201-8a5e-90c6e774053d_buggy.java
+++ b/tmp/0845564a-4b0a-4dc3-aa8e-ab8c60c04691_fixed.java
@@ -1,20 +1,42 @@
   /**
    * Checks name referenced in node to determine if it might have
-   * changed.
+   * changed by the evaluation of {@code replacement}.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
-    Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Check the base name for GETPROP chains.
+    // This logic specifically handles chains like a.b.c
+    if (node.isGetProp()) {
+        Node base = node.getFirstChild();
+        // Traverse down the left side of GETPROP accesses to find the base object.
+        while (base.isGetProp()) {
+            base = base.getFirstChild();
+        }
+
+        // If the base is a name, check if it's potentially assigned to
+        // within the replacement expression.
+        if (base.isName()) {
+            if (isNameAssignedTo(base.getString(), replacement)) {
+                // Evaluating replacement might change the base object of node. Unsafe.
                 return false;
             }
+        }
+        // If the base is not a name (e.g., (func()).prop or this.prop),
+        // assume it's safe for now, mirroring the original code's
+        // limited check. A more comprehensive check might recursively
+        // analyze the base expression.
+    }
+    // Note: The original code included Preconditions.checkArgument(node.isGetProp()),
+    // implying this function might only be called for NAME or GETPROP nodes.
+    // If called with other node types (e.g., GETELEM, CALL), this function
+    // currently assumes they are safe by default. This might need refinement
+    // depending on caller guarantees.
 
+    // If no potential modification is found according to the checks above.
     return true;
   }
\ No newline at end of file
