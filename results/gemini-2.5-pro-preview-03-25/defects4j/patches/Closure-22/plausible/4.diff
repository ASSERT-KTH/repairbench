diff --git a/tmp/e3279e34-cae2-43d1-92cc-79fcd98e9543_buggy.java b/tmp/04c787b8-e74e-43a0-9dd8-dd11c0b651b9_fixed.java
index 7f61a8c..a46a5c9 100644
--- a/tmp/e3279e34-cae2-43d1-92cc-79fcd98e9543_buggy.java
+++ b/tmp/04c787b8-e74e-43a0-9dd8-dd11c0b651b9_fixed.java
@@ -1,73 +1,94 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
-        n.isComma()) {
+        n.isComma()) { // Don't check COMMA nodes directly, check their children.
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (parent.getType() == Token.COMMA) {
       Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+      // Special case: eval(x, global) is used to eval in the global scope.
+      // Don't warn on the possibly-useless first argument.
+      if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild() &&
+          n == parent.getFirstChild() && // n is first child of comma
+          n.getNext() != null && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+          // This is the eval(firstExpr, 'eval') pattern.
           return;
       }
-    }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
-        }
+      // If n is the last child of a comma expression, the comma result is n's result.
+      // Only check n if the comma expression's result itself is unused.
+      if (n == parent.getLastChild() && NodeUtil.isExpressionResultUsed(parent)) {
+            return; // The result of the comma expression (n) is used.
       }
+      // If n is not the last child, or it is the last child but the comma
+      // expression's result is not used, fall through to the main check.
+
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
+      // Only check expressions whose results are likely unused.
+      // This includes FOR loop initializers and increment expressions.
+      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {
+          // Fall through to the main check for FOR initializer/increment.
       } else {
+          // Otherwise, the expression is in a context where its result is likely used
+          // (e.g., condition, function call argument, assignment RHS), so don't check.
           return;
       }
     }
+    // Fall through to the main check if the parent is EXPR_RESULT, BLOCK,
+    // FOR (init/incr), or COMMA (and conditions above allow).
 
+
+    // Check for code that produces no side effects.
+    // NodeUtil.isExpressionResultUsed(n) is the primary check.
+    // If the value is used, it doesn't matter if it has side effects.
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+
+    // If the result of the expression is not used, check for side effects.
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+      // Allow certain types of expressions regardless.
+
       if (n.isQualifiedName() && n.getJSDocInfo() != null) {
+        // Allow `/** @type {foo} */ ns.bar;` This is used for type documentation.
         return;
       } else if (n.isExprResult()) {
+        // This is the wrapper node (EXPR_RESULT). The actual expression is the child.
+        // Visiting the child will trigger the check. Avoid warning on the wrapper itself.
         return;
       }
+
+      // Report the useless code error.
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
+
+      // Track the node if it's not a statement itself, for potential removal by other passes.
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
