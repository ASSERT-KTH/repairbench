diff --git a/tmp/95327bc1-dfce-4d15-ba48-d6ae2a1c17bd_buggy.java b/tmp/70614df8-8ce5-40af-804c-4fe312b6d005_fixed.java
index 7f61a8c..ac68365 100644
--- a/tmp/95327bc1-dfce-4d15-ba48-d6ae2a1c17bd_buggy.java
+++ b/tmp/70614df8-8ce5-40af-804c-4fe312b6d005_fixed.java
@@ -1,73 +1,98 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    // Allow these.
+    if (n.isEmpty()) {
       return;
     }
-
     if (parent == null) {
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (parent.getType() == Token.COMMA) {
-      Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
-      return;
+    // Determine if the result of 'n' is effectively unused in the program.
+    boolean isResultUnused = false;
+
+    // 1. Check standard expression statement contexts:
+    //    expr;
+    if (parent.isExprResult() || parent.isBlock()) {
+      isResultUnused = true;
     }
+    // 2. Check FOR loop initializers and increments:
+    //    for(init; cond; iter) {}
+    else if (parent.isFor()) {
+        Node init = parent.getFirstChild();
+        // Check if 'n' is the initializer or iterator expression node.
+        // The condition expression's result is used by the loop.
+        // The body is obviously used.
+        if (n == init || n == init.getNext().getNext()) {
+             isResultUnused = true;
         }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
-      } else {
-      return;
+    }
+    // 3. Check non-last children of COMMA operator:
+    //    a, b, c; (a and b's results are unused by the comma itself)
+    else if (parent.isComma() && n != parent.getLastChild()) {
+      isResultUnused = true;
+    }
+    // 4. If the standard checks didn't mark it as unused, check if 'n' is the
+    //    last child of a comma chain that is ultimately unused.
+    //    e.g., for((a,b); ... ) where b's result is used by comma, but comma's result is unused by FOR.
+    //    e.g., (a,b); where b's result is used by comma, but comma's result is unused by EXPR_RESULT.
+    else if (parent.isComma()) { // && n == parent.getLastChild() is implied here
+      Node curNode = parent; // Start with the parent comma node
+      Node curParent = curNode.getParent();
+      // Find the top-most comma in a chain of commas
+      while (curParent != null && curParent.isComma()) {
+        curNode = curParent;
+        curParent = curNode.getParent();
+      }
+      // Check the context of the top-most comma (curNode)
+      if (curParent != null) {
+        // Is the comma chain itself in a context where its result is unused?
+        if (curParent.isExprResult() || curParent.isBlock()) {
+          isResultUnused = true;
+        } else if (curParent.isFor()) {
+            Node init = curParent.getFirstChild();
+            Node iter = init.getNext().getNext(); // Get iter expression node
+            if (curNode == init || curNode == iter) {
+                isResultUnused = true; // Comma chain is FOR init or iter
+            }
+        }
+        // If the top comma's context isn't one of these (e.g., ASSIGN, CALL, RETURN), the result is used.
       }
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+    // If the result is determined to be unused, check for lack of side effects.
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
+    if (isResultUnused &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+      // Allow certain patterns that lack side effects but are common/intentional.
       if (n.isQualifiedName() && n.getJSDocInfo() != null) {
+        // Allow names with JSDoc attached (often used for type declarations).
         return;
-      } else if (n.isExprResult()) {
+      }
+      if (n.isString() && "use strict".equals(n.getString())) {
+         // Allow "use strict"; directives.
          return;
       }
+
+      // Report the useless code warning.
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
          msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
+        // Use a more specific message for simple operators like +, ==, etc.
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+
+      // Add to problemNodes if it's not a statement node itself.
+      // This list is potentially used by the RemoveSideEffectFreeCode pass.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
