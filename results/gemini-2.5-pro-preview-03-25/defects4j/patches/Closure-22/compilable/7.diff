diff --git a/tmp/e4932f5e-2c92-494d-8802-a1b550b006c6_buggy.java b/tmp/c0d8f7b8-6a9d-481f-b8b6-c87fdf68cce6_fixed.java
index 7f61a8c..77379fc 100644
--- a/tmp/e4932f5e-2c92-494d-8802-a1b550b006c6_buggy.java
+++ b/tmp/c0d8f7b8-6a9d-481f-b8b6-c87fdf68cce6_fixed.java
@@ -1,73 +1,56 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    // Allow them. Also EXPR_RESULT and BLOCK nodes are handled via their
+    // children, and the determination of whether their value is used is
+    // complex, so don't check themselves.
+    if (n.isEmpty() || n.isExprResult() || n.isBlock()) {
       return;
     }
 
+    // Don't reported parent-less nodes.
     if (parent == null) {
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (parent.getType() == Token.COMMA) {
-      Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
-      return;
-        }
-    }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
-      } else {
-      return;
-      }
-    }
-
+    // Check if the result of the expression is used. This function accurately
+    // determines if the value computed by `n` is used by its parent context.
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+
+    // If the node is a qualified name with JSDoc and its result isn't used,
+    // don't report it as useless code. This allows constructs like:
+    // /** @type {foo} */ bar.baz; for type annotation.
+    if (!isResultUsed && n.isQualifiedName() && n.getJSDocInfo() != null) {
+      return;
+    }
+
+    // Now, check for useless code:
+    // The result must not be used, and EITHER
+    // 1) The node represents a simple operator (e.g. +, ==, !, typeof) OR
+    // 2) The node has no side effects.
+    // Simple operators are flagged even if their operands might have side
+    // effects (like getters) because the operation itself is useless if the
+    // result isn't used (e.g., "a + b;").
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {
-        return;
-      } else if (n.isExprResult()) {
-        return;
-      }
+
+      // If we get here, the code is potentially useless. Report it.
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
-      t.getCompiler().report(
-          t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+      compiler.report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
+
+      // Add to list for potential removal later by optimization passes
+      // if it's not a statement node itself. Expressions within statements
+      // (like EQ in EXPR_RESULT or 5 in (5,6)) are not statements.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
