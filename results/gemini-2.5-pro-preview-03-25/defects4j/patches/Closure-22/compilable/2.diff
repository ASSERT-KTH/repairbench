diff --git a/tmp/e6301fc1-9d34-4454-a60b-f7d6b58b0ba7_buggy.java b/tmp/b137f5ee-3eda-4bb9-91d4-b823fcf4f812_fixed.java
index 7f61a8c..5e883ae 100644
--- a/tmp/e6301fc1-9d34-4454-a60b-f7d6b58b0ba7_buggy.java
+++ b/tmp/b137f5ee-3eda-4bb9-91d4-b823fcf4f812_fixed.java
@@ -1,73 +1,107 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (parent.getType() == Token.COMMA) {
       Node gramps = parent.getParent();
+      // Don't warn about eval('foo');
       if (gramps.isCall() && parent == gramps.getFirstChild()) {
         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
            return;
         }
       }
 
       // This no-op statement was there so that JSDoc information could
       // be attached to the name. This check should not complain about it.
+      // This check only applies to the last child of a comma expression.
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA)
             continue;
+          // If the COMMA's result is used (i.e. not in EXPR_RESULT/BLOCK),
+          // then the last child is used, so return.
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
             return;
           else
-            break;
+            break; // Result is not used, continue to main check.
         }
       }
+      // Non-last children of COMMA fall through to the main check.
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
+      // If the parent uses the result (e.g., ASSIGN, IF condition), return,
+      // unless it's a FOR loop's init or incr.
+      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() ||
            n == parent.getFirstChild().getNext().getNext())) {
+         // Allow check for useless init/incr.
       } else {
+         // Parent uses the result.
          return;
       }
     }
+    // Parent is EXPR_RESULT, BLOCK, FOR (init/incr), or COMMA (where check needed).
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // Check if the result is unused AND
+    // (the operator is simple OR the node type itself has no side effects).
+    // Previously, this used NodeUtil.mayHaveSideEffects, which checks children.
+    // This was incorrect because operators like '==' have no side effect
+    // *themselves*, even if their children do (e.g., `foo() == bar()`).
+    // We want to warn if the result of '==' is unused, regardless of child
+    // side effects. NodeUtil.nodeTypeMayHaveSideEffects checks only the node itself.
     if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+        (isSimpleOp || !NodeUtil.nodeTypeMayHaveSideEffects(n))) { // Fix: Use nodeTypeMayHaveSideEffects
+
+      // Don't warn about qualified names with JSDoc. e.g. /** @type {foo} */ ns.Foo;
       if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
-      } else if (n.isExprResult()) {
+      }
+      // Don't warn for ExprResult nodes directly. Check their children.
+      // When the visitor visits the child of EXPR_RESULT, the parent will be
+      // EXPR_RESULT, and the check will proceed.
+      if (n.isExprResult()) {
         return;
       }
+
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
+      // Optionally, provide a more specific message for other common operator types
+      // whose results are often discarded unintentionally (e.g., comparison ops).
+      // else if (NodeUtil.isComparisonOp(n) || n.isTypeOf() || ... ) {
+      //   msg = "The result of the '...' operator is not being used.";
+      // }
+
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
+        // TODO(johnlenz): Make PeepholeRemoveUselessCode work on nodes
+        // other than EXPR_RESULT.
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
