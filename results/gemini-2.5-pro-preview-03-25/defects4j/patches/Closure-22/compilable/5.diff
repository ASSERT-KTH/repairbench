diff --git a/tmp/ed84e242-9608-451e-8d4f-0b687671bd7a_buggy.java b/tmp/f9dfb7e6-4b13-427b-b770-ec825ec5790c_fixed.java
index 7f61a8c..8577737 100644
--- a/tmp/ed84e242-9608-451e-8d4f-0b687671bd7a_buggy.java
+++ b/tmp/f9dfb7e6-4b13-427b-b770-ec825ec5790c_fixed.java
@@ -1,73 +1,120 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
-        n.isComma()) {
+        n.isComma()) { // Don't check COMMA nodes directly, check their children
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
-    if (parent.getType() == Token.COMMA) {
+    if (parent.isComma()) { // Use isComma() for clarity
       Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+      // This is meant to protect explicit calls to eval. Example:
+      // (x, eval)('...');
+      // This pattern is surprising and probably does not occur in practice,
+      // but we need to preserve it.
+      if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {
+        if (n == parent.getFirstChild() &&
+            parent.getChildCount() == 2 &&
+            n.getNext().isName() &&
+            "eval".equals(n.getNext().getString())) {
           return;
         }
       }
 
       // This no-op statement was there so that JSDoc information could
       // be attached to the name. This check should not complain about it.
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA)
             continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+            // If the COMMA is part of a larger expression, don't report
+            // a warning. The value might be used in the larger expression.
             return;
           else
+            // Found EXPR_RESULT or BLOCK ancestor, break and proceed to check below.
             break;
         }
       }
+      // Note: For non-last children of COMMA, execution falls through to the check below.
+      // Also for last children whose ancestors leads to EXPR_RESULT or BLOCK.
+
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
+      // Don't warn about values left in FOR initializer/increment
+      // eg. FOR(i=0; i<10; i++); // no warning for i++
+      // FOR(INIT; COND; INC);
+      // We allow an empty FOR init or update section.
+      // Check the original structure: FOR(child1; child2; child3; child4)
+      // child1=INIT, child2=COND, child3=INC, child4=BODY
+      // n == getFirstChild() => n is INIT
+      // n == getFirstChild().getNext().getNext() => n is INC
+      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() || // Allow empty INIT
+           n == parent.getFirstChild().getNext().getNext())) { // Allow empty INC
+           // Fall through to the general check below. An empty expression node
+           // (e.g. EMPTY or just a constant) will be caught by the check.
       } else {
+         // If the parent is not an EXPR_RESULT, BLOCK, or COMMA (handled above),
+         // or a FOR init/increment, then the expression's result is likely used.
+         // Examples: conditions (IF, WHILE), switch discriminant, return value,
+         // operands (ASSIGN, NAME initializer, operators like +, -, etc.).
          return;
       }
     }
 
+    // Check for unused results ////////////////////////////////////////////////
+
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+
+    // If 'n' is a child of a COMMA node, and it is not the *last* child,
+    // then its result is discarded. NodeUtil.isExpressionResultUsed() might
+    // report true if the COMMA's result is used by the parent expression,
+    // so we explicitly override it to false here to ensure the check catches it.
+    // Example: var x = (5, 6); // 5 is side-effect free and unused.
+    // Example: foo(bar(), (baz(), 7)); // baz() is side-effect free and unused if foo is defined.
+    if (parent.isComma() && n != parent.getLastChild()) {
+       isResultUsed = false;
+    }
+
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       if (n.isQualifiedName() && n.getJSDocInfo() != null) {
+        // Qualified names with JSDoc comments are usually type definitions
+        // or markers for optimizations, so we don't want to report these.
         return;
       } else if (n.isExprResult()) {
+        // This is reported when the EXPR_RESULT's child is visited.
+        // An EXPR_RESULT node indicates the expression result is unused.
         return;
       }
+
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
+      // Track the node for potential removal by PeepholeRemoveUselessCode
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
