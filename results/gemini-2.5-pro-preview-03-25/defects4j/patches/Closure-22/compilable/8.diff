diff --git a/tmp/cb261312-f707-4748-8d18-26b915c79cb2_buggy.java b/tmp/99b80ddb-451c-48e4-8f7a-8f6cf6f6f25a_fixed.java
index 7f61a8c..567dfde 100644
--- a/tmp/cb261312-f707-4748-8d18-26b915c79cb2_buggy.java
+++ b/tmp/99b80ddb-451c-48e4-8f7a-8f6cf6f6f25a_fixed.java
@@ -1,73 +1,131 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
+
+    // Handle COMMAs operands differently.
     if (parent.getType() == Token.COMMA) {
       Node gramps = parent.getParent();
+      // Prevent report warning on calls to eval. We are unable to evaluate
+      // the safety of the arguments String value.
       if (gramps.isCall() && parent == gramps.getFirstChild()) {
         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
           return;
         }
       }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
+      // The result of the non-last child of a comma is ignored. Check if it
+      // has side effects.
+      if (n != parent.getLastChild()) {
+        if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+          // Exceptions: Check for JSDoc on names which implies the no-op
+          // statement is there intentionally.
+          if (n.isQualifiedName() && n.getJSDocInfo() != null) {
+             // Suppress warning.
+          } else if (n.isExprResult()) {
+            // This indicates an error in the AST structure.
+            // Ignore EXPR_RESULT node itself.
+          } else {
+            boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+            String msg = "This code lacks side-effects. Is there a bug?";
+            if (n.isString()) {
+              msg = "Is there a missing '+' on the previous line?";
+            } else if (isSimpleOp) {
+              msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
+                  "' operator is not being used.";
+            }
+            // Use the DiagnosticGroup defined in CheckSideEffects
+            t.getCompiler().report(
+                t.makeError(n, level, USELESS_CODE_ERROR, msg));
+            // Record the node for potential removal.
+            // Use the same condition as in the original code's final block.
+            if (!NodeUtil.isStatement(n)) {
+              problemNodes.add(n);
+            }
+          }
+        }
+        // We have handled the non-last child of the comma. Stop processing.
+        return;
+      } else {
+        // For the last child of the comma, its value may be used.
+        // Check the context of the comma expression. If the value is used,
+        // don't report a warning.
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA)
             continue;
+          // If the comma expression is not part of a EXPR_RESULT or BLOCK,
+          // its value is likely used. Example: return (a(), b);
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
+            return; // Result is used, suppress warning.
           else
+            // Found EXPR_RESULT or BLOCK. Result might be unused.
+            // Stop searching and fall through to the final check.
             break;
         }
+        // Fall through to the final check if the result might be unused.
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
+      // If the parent is not an EXPR_RESULT or BLOCK, the expression's
+      // result is likely used.
+      // An exception: The initializer and increment parts of a FOR loop.
+      // These are not used expressions *in the sense that their result matters*,
+      // but they are allowed locations for expressions with side effects.
+      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+           (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {
+          // Allow expressions in FOR initializer and increment.
+          // The final check below will verify if they lack side effects.
+          // Fall through.
       } else {
+        // The expression's result is used in other contexts (assignments, conditions, etc.).
         return;
       }
     }
 
+    // If we reach here, 'n' is typically a child of EXPR_RESULT or BLOCK,
+    // or it's the initializer/increment of a FOR loop,
+    // or it's the last child of a COMMA whose result is potentially unused.
+
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
       } else if (n.isExprResult()) {
+        // This node type is already handled by visiting its children.
+        // An EXPR_RESULT node indicates a statement-level expression;
+        // its child is the actual expression node we'd want to check.
         return;
       }
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
