diff --git a/tmp/3f417a5c-ef18-431f-947a-086b9893074f_buggy.java b/tmp/662e1a3d-5660-480b-bc2a-615cc8f6d25c_fixed.java
index 7f61a8c..4a8fbdc 100644
--- a/tmp/3f417a5c-ef18-431f-947a-086b9893074f_buggy.java
+++ b/tmp/662e1a3d-5660-480b-bc2a-615cc8f6d25c_fixed.java
@@ -1,73 +1,122 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    // Initial skips for nodes that don't represent expressions requiring checks
+    // or are handled by visiting their children.
+    // We also skip checking COMMA nodes directly, but check their children.
+    if (n.isEmpty() || n.isComma() || n.isExprResult() || n.isBlock() || n.isScript()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (parent.getType() == Token.COMMA) {
+    boolean maybeUseless = false;
+
+    // Determine if the node 'n' is in a context where its result is possibly unused.
+    // We check these contexts specifically. Assume result is used in all other contexts.
+    if (parent.isExprResult() || parent.isBlock() || parent.isScript()) {
+      // Case 1: Direct statement context (EXPR_RESULT / SCRIPT / BLOCK)
+      // The result of 'n' is not used by the statement structure.
+      maybeUseless = true;
+    } else if (parent.isFor() && !NodeUtil.isForIn(parent) && !NodeUtil.isForOf(parent) && parent.getChildCount() == 4) {
+      // Case 2: Standard FOR loop: for(init; condition; increment) body
+      Node first = parent.getFirstChild();
+      Node third = first.getNext().getNext();
+      if (n == first || n == third) { // init or increment part
+        // The result of the initializer or increment expression is not used by FOR structure.
+        maybeUseless = true;
+      }
+      // Note: Condition expression's result *is* used. Body is handled like BLOCK.
+    } else if (parent.isComma()) {
+      // Case 3: Comma operator operands
+
+      // Special case for "eval": eval("foo", "bar") --> eval("bar")
+      // In IE, this implies an indirect eval, preserving the first arg matters.
       Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
+      if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {
+         // Check structure corresponding to eval("...", "eval") based on original code comment
          if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
-      return;
+           return; // indirect eval in IE. Don't warn.
          }
       }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
+      if (n != parent.getLastChild()) {
+        // Intermediate comma operand: result is never used. Check side effects.
+        maybeUseless = true;
       } else {
-      return;
+        // Last child of comma. Need to check context of the comma expression itself.
+        // Traverse up comma ancestors to find the effective context where the comma expression resides.
+        Node ancestor = parent;
+        Node ancestorParent = parent.getParent();
+        while (ancestorParent != null && ancestorParent.isComma()) {
+            ancestor = ancestorParent;
+            ancestorParent = ancestorParent.getParent();
         }
+
+        // Check if the ancestor context uses the result of the comma expression.
+        boolean commaResultUsed = true; // Assume used by default
+        if (ancestorParent == null) {
+            // Should not happen in valid AST? Assume top-level comma is unused.
+            commaResultUsed = false;
+        } else if (ancestorParent.isExprResult() || ancestorParent.isBlock() || ancestorParent.isScript()) {
+            // Comma expression is a statement, result unused.
+            commaResultUsed = false;
+        } else if (ancestorParent.isFor() && !NodeUtil.isForIn(ancestorParent) && !NodeUtil.isForOf(ancestorParent) && ancestorParent.getChildCount() == 4) {
+            // Comma expression is in a FOR loop header.
+            Node first = ancestorParent.getFirstChild();
+            Node third = first.getNext().getNext();
+            if (ancestor == first || ancestor == third) { // FOR init or increment part
+                commaResultUsed = false;
+            }
+            // If in condition, result is used.
+        }
+        // In other contexts (ASSIGN, CALL args, RETURN value, IF condition, etc.), the result is used.
+
+        if (!commaResultUsed) {
+            // The overall comma expression's result is unused, so check this last operand.
+            maybeUseless = true;
         }
+      }
+    }
+
+    // If the context indicates the result is potentially unused ('maybeUseless' is true),
+    // then perform the side-effect check on node 'n'.
+    if (maybeUseless) {
+        boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());
+        // Check if it's a simple operator (e.g., comparison, typeof) whose
+        // main purpose is the value, or if the node lacks side effects entirely.
+        boolean isSimpleOperator = NodeUtil.isSimpleOperatorType(n.getType());
+
+        // Report if it's a simple operator (whose value isn't used) OR if it lacks side effects.
+        if (isSimpleOperator || !hasSideEffects) {
+            // Potentially useless code found.
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+            // Exception: Allow JSDoc comments on qualified names used as statements.
+            // Example: /** @type {Foo} */ bar.baz;
             if (n.isQualifiedName() && n.getJSDocInfo() != null) {
-        return;
-      } else if (n.isExprResult()) {
-        return;
-      }
+                // Don't report a warning, this is a recognized pattern for type annotation.
+            } else {
+                // Report the useless code error.
                 String msg = "This code lacks side-effects. Is there a bug?";
                 if (n.isString()) {
                     msg = "Is there a missing '+' on the previous line?";
-      } else if (isSimpleOp) {
+                } else if (isSimpleOperator) {
                     msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                           "' operator is not being used.";
                 }
 
                 t.getCompiler().report(
                     t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+
+                // Mark node for potential removal if it's not a statement node itself.
+                // (Actual removal logic is handled elsewhere based on 'problemNodes').
                 if (!NodeUtil.isStatement(n)) {
                     problemNodes.add(n);
                 }
             }
         }
+    }
+    // If maybeUseless was false (result is used by context), or if the node had side effects,
+    // or if it matched an exception (JSDoc), we simply return without reporting a warning.
+  }
\ No newline at end of file
