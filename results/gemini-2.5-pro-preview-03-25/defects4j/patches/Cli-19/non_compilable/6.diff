diff --git a/tmp/4884b44b-f120-41e5-9942-821522bf8415_buggy.java b/tmp/46881f2b-ec5a-49eb-80b4-f1402921f1a1_fixed.java
index 62e8ec8..353cc33 100644
--- a/tmp/4884b44b-f120-41e5-9942-821522bf8415_buggy.java
+++ b/tmp/46881f2b-ec5a-49eb-80b4-f1402921f1a1_fixed.java
@@ -1,26 +1,55 @@
+import org.apache.commons.cli.Option;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.UnrecognizedOptionException;
+import java.util.Iterator;
+import java.util.List;
+
+// Assume the following context variables exist within the class
+// private Options options;
+// private Option currentOption;
+// private Iterator<String> tokens; // Or potentially a List<String> depending on actual implementation context
+// private boolean eatTheRest;
+// Method provided for context, assuming it's part of a class like PosixParser
+
     /**
      * <p>If an {@link Option} exists for <code>token</code> then
      * set the current option and add the token to the processed
      * list.</p>
      *
      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
      * is set then ignore the current token and add the remaining tokens
      * to the processed tokens list directly.</p>
      *
+     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
+     * is not set, then throw an {@link UnrecognizedOptionException}.</p>
+     *
      * @param token The current option token
      * @param stopAtNonOption Specifies whether flattening should halt
      * at the first non option.
+     * @throws UnrecognizedOptionException if token is unrecognized and stopAtNonOption is false.
      */
     private void processOptionToken(String token, boolean stopAtNonOption)
+        throws UnrecognizedOptionException // Added throws declaration
     {
         if (options.hasOption(token))
         {
             currentOption = options.getOption(token);
+            // The original code added the token to a list named 'tokens'.
+            // This might be incorrect depending on the context (e.g., if 'tokens' is the input iterator).
+            // However, fixing the specific test failure requires addressing the missing exception.
+            // We keep the original line assuming it serves a purpose in the actual surrounding code.
             tokens.add(token);
         }
         else if (stopAtNonOption)
         {
             eatTheRest = true;
+            // Similarly, keeping the original line here.
             tokens.add(token);
         }
+        else
+        {
+            // This is the missing case: token is not an option and we should not stop processing.
+            // Throw an exception as required by the test case.
+            throw new UnrecognizedOptionException("Unrecognized option: " + token, token);
+        }
     }
\ No newline at end of file
