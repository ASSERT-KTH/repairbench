diff --git a/tmp/37376aa1-583d-4bd9-8f6c-8c222001e3c1_buggy.java b/tmp/326fe76c-f061-4e7a-a18d-7065fb69f3ea_fixed.java
index 62e8ec8..1531acb 100644
--- a/tmp/37376aa1-583d-4bd9-8f6c-8c222001e3c1_buggy.java
+++ b/tmp/326fe76c-f061-4e7a-a18d-7065fb69f3ea_fixed.java
@@ -1,26 +1,53 @@
+import org.apache.commons.cli.Option;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.UnrecognizedOptionException;
+import java.util.List;
+
+// Assuming the necessary imports and class structure exist.
+// The fix focuses solely on the provided method.
+
     /**
      * <p>If an {@link Option} exists for <code>token</code> then
      * set the current option and add the token to the processed
      * list.</p>
      *
      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
      * is set then ignore the current token and add the remaining tokens
      * to the processed tokens list directly.</p>
      *
+     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
+     * is false, throw an {@link UnrecognizedOptionException}.</p>
+     *
      * @param token The current option token
      * @param stopAtNonOption Specifies whether flattening should halt
      * at the first non option.
+     * @throws UnrecognizedOptionException if the token is not a recognized option and stopAtNonOption is false.
      */
-    private void processOptionToken(String token, boolean stopAtNonOption)
+    private void processOptionToken(String token, boolean stopAtNonOption) throws UnrecognizedOptionException // Added throws declaration
     {
         if (options.hasOption(token))
         {
             currentOption = options.getOption(token);
+            // Note: In some parsers (like GnuParser), adding the token here might depend
+            // on whether it expects an argument. However, the original code added it,
+            // so keeping that behavior unless further context suggests otherwise.
             tokens.add(token);
         }
         else if (stopAtNonOption)
         {
+            // Treat this token as a non-option argument and stop processing options
             eatTheRest = true;
             tokens.add(token);
         }
+        else // Token is not a recognized option, and we should fail.
+        {
+            throw new UnrecognizedOptionException("Unrecognized option: " + token);
         }
+    }
+
+    // Placeholder fields and methods assumed to exist in the surrounding class for context
+    private Options options;
+    private List<String> tokens;
+    private Option currentOption;
+    private boolean eatTheRest;
+    // Constructor or other methods to initialize these fields would exist in the full class.
