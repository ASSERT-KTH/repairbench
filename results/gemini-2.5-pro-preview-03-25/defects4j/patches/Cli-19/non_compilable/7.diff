diff --git a/tmp/3ff5cfe0-1492-4e19-86c5-b14b7d3771bd_buggy.java b/tmp/685869c4-c584-416e-917f-5501b2069bd7_fixed.java
index 62e8ec8..de7318d 100644
--- a/tmp/3ff5cfe0-1492-4e19-86c5-b14b7d3771bd_buggy.java
+++ b/tmp/685869c4-c584-416e-917f-5501b2069bd7_fixed.java
@@ -1,26 +1,44 @@
+import org.apache.commons.cli.UnrecognizedOptionException;
+
     /**
      * <p>If an {@link Option} exists for <code>token</code> then
      * set the current option and add the token to the processed
      * list.</p>
      *
      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
-     * is set then ignore the current token and add the remaining tokens
-     * to the processed tokens list directly.</p>
+     * is set then treat the token as a non-option, add it to the processed 
+     * list, and set the flag to stop processing options.</p>
+     *
+     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
+     * is false, then throw an {@link UnrecognizedOptionException}.</p>
      *
      * @param token The current option token
      * @param stopAtNonOption Specifies whether flattening should halt
      * at the first non option.
+     * @throws UnrecognizedOptionException If the token is not a recognized option
+     * and stopAtNonOption is false.
      */
     private void processOptionToken(String token, boolean stopAtNonOption)
+        throws UnrecognizedOptionException // Added throws clause
     {
         if (options.hasOption(token))
         {
             currentOption = options.getOption(token);
+            // Note: Depending on the parser's overall logic, adding the token here
+            // might be correct or incorrect. We retain it based on the provided buggy code's structure.
             tokens.add(token); 
         }
         else if (stopAtNonOption)
         {
+            // If stopAtNonOption is true, we treat this unrecognized token
+            // like a non-option argument.
             eatTheRest = true; 
-            tokens.add(token);
+            tokens.add(token); // Add the token as an argument
+        }
+        else
+        {
+            // If the token is not recognized and we're not stopping at non-options,
+            // it's an error according to Posix behavior.
+            throw new UnrecognizedOptionException("Unrecognized option: " + token, token);
         }
     }
\ No newline at end of file
