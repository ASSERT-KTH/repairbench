diff --git a/tmp/232b694d-acc2-4407-a9f5-69263761784d_buggy.java b/tmp/449c1463-8901-4dc2-a1ee-70016dd0cb5c_fixed.java
index 62e8ec8..79965f7 100644
--- a/tmp/232b694d-acc2-4407-a9f5-69263761784d_buggy.java
+++ b/tmp/449c1463-8901-4dc2-a1ee-70016dd0cb5c_fixed.java
@@ -1,26 +1,56 @@
+import org.apache.commons.cli.Option;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.ParseException;
+import org.apache.commons.cli.UnrecognizedOptionException;
+import java.util.ArrayList;
+import java.util.List;
+
+// Assume necessary imports and class structure exist
+// The fix is applied only to the processOptionToken method
+
     /**
      * <p>If an {@link Option} exists for <code>token</code> then
      * set the current option and add the token to the processed
      * list.</p>
      *
      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
      * is set then ignore the current token and add the remaining tokens
      * to the processed tokens list directly.</p>
      *
+     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
+     * is not set then throw an {@link UnrecognizedOptionException}.</p>
+     *
      * @param token The current option token
      * @param stopAtNonOption Specifies whether flattening should halt
      * at the first non option.
+     * @throws ParseException if the token is not a recognized option and
+     * stopAtNonOption is false.
      */
-    private void processOptionToken(String token, boolean stopAtNonOption)
+    private void processOptionToken(String token, boolean stopAtNonOption) throws ParseException
     {
         if (options.hasOption(token))
         {
             currentOption = options.getOption(token);
+            // Add the token to the processed list (corrected: should add the token itself)
             tokens.add(token);
         }
         else if (stopAtNonOption)
         {
             eatTheRest = true;
+            // Add the token to the processed list as a non-option argument
             tokens.add(token);
         }
+        else
+        {
+            // If the token is not recognized and we're not stopping at non-options,
+            // it's an error.
+            throw new UnrecognizedOptionException("Unrecognized option: " + token, token);
         }
+    }
+
+    // Dummy fields and methods to make the snippet compileable for verification,
+    // assuming they exist in the original class.
+    private Options options;
+    private Option currentOption;
+    private List<String> tokens = new ArrayList<>();
+    private boolean eatTheRest;
