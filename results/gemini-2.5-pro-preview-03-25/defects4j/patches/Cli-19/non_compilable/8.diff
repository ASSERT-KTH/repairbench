diff --git a/tmp/c1acf1de-d4d1-41ef-aa45-5b35d9745b99_buggy.java b/tmp/84d46f70-9095-4faf-acec-3970086a9100_fixed.java
index 62e8ec8..23205d7 100644
--- a/tmp/c1acf1de-d4d1-41ef-aa45-5b35d9745b99_buggy.java
+++ b/tmp/84d46f70-9095-4faf-acec-3970086a9100_fixed.java
@@ -1,26 +1,39 @@
+import org.apache.commons.cli.UnrecognizedOptionException;
+import org.apache.commons.cli.ParseException;
+
     /**
      * <p>If an {@link Option} exists for <code>token</code> then
      * set the current option and add the token to the processed
      * list.</p>
      *
      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
      * is set then ignore the current token and add the remaining tokens
      * to the processed tokens list directly.</p>
      *
      * @param token The current option token
      * @param stopAtNonOption Specifies whether flattening should halt
      * at the first non option.
+     * @throws ParseException if an unrecognized option is found.
      */
-    private void processOptionToken(String token, boolean stopAtNonOption)
+    private void processOptionToken(String token, boolean stopAtNonOption) throws ParseException
     {
         if (options.hasOption(token))
         {
             currentOption = options.getOption(token);
             tokens.add(token);
         }
         else if (stopAtNonOption)
         {
             eatTheRest = true;
+            // Note: Original comment says "ignore the current token", but existing
+            // behavior (and potentially other tests) might rely on adding it here
+            // as the first non-option argument encountered.
             tokens.add(token);
         }
+        else
+        {
+            // If the token is not an option and we're not stopping at non-options,
+            // it's an unrecognized option.
+            throw new UnrecognizedOptionException("Unrecognized option: " + token, token);
+        }
     }
\ No newline at end of file
