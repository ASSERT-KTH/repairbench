diff --git a/tmp/a40c7adc-c850-4ee3-ac55-6ad197546817_buggy.java b/tmp/88fdaaaa-a904-4b1d-8c5a-46bd88494caa_fixed.java
index 875b31b..30e5ff6 100644
--- a/tmp/a40c7adc-c850-4ee3-ac55-6ad197546817_buggy.java
+++ b/tmp/88fdaaaa-a904-4b1d-8c5a-46bd88494caa_fixed.java
@@ -1,54 +1,62 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // Correct potential issues with excessive indentation causing loops.
+        // If nextLineTabStop is too large, reduce it to ensure padding < width.
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
-            nextLineTabStop = width - 1;
+            nextLineTabStop = width > 1 ? width - 1 : 0; // Ensure nextLineTabStop is less than width, handle width=1 edge case
         }
 
         // all following lines must be padded with nextLineTabStop space
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
+            // Prepare the text for the next line: take the remainder after the previous wrap position,
+            // trim leading/trailing whitespace from the remainder, and prepend the padding.
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            pos = findWrapPos(text, width, 0); // Find the wrap position in the padded text.
 
             if (pos == -1)
             {
+                // No more wrapping needed for the remaining text. Append it.
                 sb.append(text);
-
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
+            // The original code had a condition here that could cause incorrect wrapping or infinite loops:
+            // if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; }
+            // This condition is removed as per the fix for CLI-162.
+            // The logic now relies on findWrapPos and the loop structure to handle wrapping correctly,
+            // including cases where the wrap position might be within the padding area (assuming findWrapPos handles this).
 
+            // Append the currently wrapped line (up to the found position 'pos').
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+            // The loop continues, using the new 'pos' to determine the start of the text for the next line.
         }
     }
\ No newline at end of file
