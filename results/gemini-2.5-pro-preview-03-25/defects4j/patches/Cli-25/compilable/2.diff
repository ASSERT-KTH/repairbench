diff --git a/tmp/a2cd9daf-5d71-4693-96b4-d28ff3b80736_buggy.java b/tmp/d06d7290-1d1f-4cce-a709-bafe1f188469_fixed.java
index 875b31b..c79f5b8 100644
--- a/tmp/a2cd9daf-5d71-4693-96b4-d28ff3b80736_buggy.java
+++ b/tmp/d06d7290-1d1f-4cce-a709-bafe1f188469_fixed.java
@@ -1,54 +1,76 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // Handle the first line (no padding)
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        // Process subsequent lines using iterative approach
+        // Get the initial remaining text, trim it for the first padded line
+        String GWT_BUG_WORKAROUND = text.substring(pos).trim(); // GWT temporary variable bug workaround
+        text = padding + GWT_BUG_WORKAROUND; // Prepend padding for the second line onwards
+
+        // Loop while the current text line is longer than the allowed width
+        while (text.length() > width)
         {
-            text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
-
             if (pos == -1)
             {
+                // Should not happen based on loop condition, but safety break
+                break;
+            }
+
+            // Check if the calculated wrap position falls into the padding area
+            if (pos <= nextLineTabStop)
+            {
+                // If it does, find the next wrap position searching *after* the current one.
+                // This handles cases where the first word after padding is shorter than
+                // the padding itself, or findWrapPos initially finds a space within the padding.
+                int nextPos = findWrapPos(text, width, pos + 1);
+                if (nextPos != -1)
+                {
+                    pos = nextPos; // Use the next wrap position
+                }
+                else
+                {
+                    // No further wrap point found in the line. This means the remaining
+                    // text (likely a single long word after padding) exceeds the width.
+                    // Break the loop; the rest of the line will be appended outside the loop.
+                    break;
+                }
+            }
+
+            // Append the wrapped portion of the line
+            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+            // Prepare the text for the next iteration:
+            // Get the remainder, trim leading whitespace, and prepend padding
+            GWT_BUG_WORKAROUND = text.substring(pos).trim(); // GWT temporary variable bug workaround
+            text = padding + GWT_BUG_WORKAROUND;
+        }
+
+        // Append the final remaining chunk of text (which might be shorter than width)
         sb.append(text);
 
         return sb;
     }
\ No newline at end of file
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
