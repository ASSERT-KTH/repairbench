diff --git a/tmp/af5f091a-431b-4a5f-b6cb-6105afb3b191_buggy.java b/tmp/bb0f9de9-8136-41a9-afd1-dc8048391af5_fixed.java
index 875b31b..db8d8cc 100644
--- a/tmp/af5f091a-431b-4a5f-b6cb-6105afb3b191_buggy.java
+++ b/tmp/bb0f9de9-8136-41a9-afd1-dc8048391af5_fixed.java
@@ -1,54 +1,69 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Calculate padding once for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
+        // Process subsequent lines
         while (true)
         {
-            text = padding + text.substring(pos).trim();
+            // Get the remainder of the text
+            String remainder = text.substring(pos);
+
+            // Left-trim the remainder to remove leading whitespace from wrapping
+            // Note: Using a simple loop for ltrim instead of String.trim()
+            // which removes both leading and trailing whitespace.
+            int ltrimIdx = 0;
+            while (ltrimIdx < remainder.length() && Character.isWhitespace(remainder.charAt(ltrimIdx)))
+            {
+                ltrimIdx++;
+            }
+            remainder = remainder.substring(ltrimIdx);
+
+            // Prepend the calculated padding to the l-trimmed remainder
+            text = padding + remainder;
+
+            // Find the next wrap position in the padded text
             pos = findWrapPos(text, width, 0);
 
+            // If no further wrapping is needed
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(text); // Append the final padded line
                 return sb;
             }
 
+            // Handle edge case CLI-134: Avoid wrapping just before the padding ends
+            // which might lead to printing only the padding.
+            // If the calculated wrap position 'pos' lands exactly at the padding boundary
+            // (nextLineTabStop - 1, because findWrapPos returns index + 1 for space),
+            // and the line still exceeds the width, force the wrap to the maximum width.
              if ( (text.length() > width) && (pos == nextLineTabStop - 1) )
             {
                  pos = width;
             }
 
+            // Append the wrapped line (rtrimmed) and a newline
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
