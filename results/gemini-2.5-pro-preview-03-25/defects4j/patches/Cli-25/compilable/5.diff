diff --git a/tmp/ee3633d5-d655-4355-8f63-553c014156a7_buggy.java b/tmp/c4bf85d5-5fa3-4bee-b8e2-caf3af6a66f3_fixed.java
index 875b31b..154626d 100644
--- a/tmp/ee3633d5-d655-4355-8f63-553c014156a7_buggy.java
+++ b/tmp/c4bf85d5-5fa3-4bee-b8e2-caf3af6a66f3_fixed.java
@@ -1,54 +1,61 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
 
         // all following lines must be padded with nextLineTabStop space
         // characters
         final String padding = createPadding(nextLineTabStop);
 
+        // use currentPos instead of pos, calculation involves String manipulation under the loop
+        int currentPos = pos;
+        String currentLine = text; // re-assign text in the loop
+
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            currentLine = padding + currentLine.substring(currentPos).trim();
+            currentPos = findWrapPos(currentLine, width, 0);
 
-            if (pos == -1)
+            if (currentPos == -1)
             {
-                sb.append(text);
+                sb.append(currentLine);
 
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // Sometimes the wrap position is calculated although we are well over the width,
+            // so we check if the current text is longer than the width
+            // fix for CLI-162
+            if (currentLine.length() > width && currentPos <= nextLineTabStop) // check if wrap point is within padding
             {
-                pos = width;
+                currentPos = width; // force break at width
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(rtrim(currentLine.substring(0, currentPos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
