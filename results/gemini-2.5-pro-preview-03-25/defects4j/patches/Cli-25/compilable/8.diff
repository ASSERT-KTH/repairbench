diff --git a/tmp/a20488ca-cb43-4a6c-9394-ee0a54424116_buggy.java b/tmp/f977c35e-3e48-477d-b6c7-6aedd6acae26_fixed.java
index 875b31b..a655f8c 100644
--- a/tmp/a20488ca-cb43-4a6c-9394-ee0a54424116_buggy.java
+++ b/tmp/f977c35e-3e48-477d-b6c7-6aedd6acae26_fixed.java
@@ -1,54 +1,62 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // the adjusted nextLineTabStop shouldn't be greater than width
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
+            // re-calculate the starting position index based on the previous wrap point
+            // then trim the text, and prepend the padding for the next line
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
             
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
+            // REMOVED: This condition caused incorrect wrapping and potentially split words
+            // incorrectly when the only wrap point found was within the padding (CLI-162).
+            // Removing it allows the normal wrapping logic to handle the text, relying on 
+            // findWrapPos and the loop structure to correctly process subsequent lines.
+            // if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // {
+            //     pos = width;
+            // }
 
+            // append the current line segment (trimmed) and a newline character
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
