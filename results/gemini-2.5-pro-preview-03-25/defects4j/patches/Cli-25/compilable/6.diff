diff --git a/tmp/d17b2522-4819-42e3-98db-aaa88f9ed972_buggy.java b/tmp/70216b8d-b8f1-4a24-be4a-c288549bea3c_fixed.java
index 875b31b..1b32e90 100644
--- a/tmp/d17b2522-4819-42e3-98db-aaa88f9ed972_buggy.java
+++ b/tmp/70216b8d-b8f1-4a24-be4a-c288549bea3c_fixed.java
@@ -1,54 +1,74 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
+            // Text fits on one line
             sb.append(rtrim(text));
-
             return sb;
         }
+        
+        // Append the first line
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+        // Adjust nextLineTabStop if necessary before creating padding
+        if (nextLineTabStop >= width && width > 0) {
+            // Indent must be less than width, otherwise infinite loop / logic error
             nextLineTabStop = width - 1;
         }
+        // Ensure padding is not negative
+        if (nextLineTabStop < 0) {
+            nextLineTabStop = 0;
+        }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+
+        // Prepare padding string for subsequent lines
         final String padding = createPadding(nextLineTabStop);
+        // Start with the remaining text, trimmed
+        String currentLine = text.substring(pos).trim();
 
-        while (true)
+        // Loop wrapping remaining lines
+        while (currentLine.length() > 0)
         {
-            text = padding + text.substring(pos).trim();
+            // Prepend padding to the remaining text for the current line
+            text = padding + currentLine;
+            // Find wrap position in the padded line
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
-
-                return sb;
+                // Remaining text fits on the last line
+                sb.append(rtrim(text));
+                // No more text to process, exit loop
+                currentLine = ""; 
             }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            else
             {
-                pos = width;
-            }
+                // Removed the problematic condition from the original code:
+                // if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+                // {
+                //     pos = width; // This could force breaks mid-word incorrectly
+                // }
 
+                // Append the wrapped line segment
                 sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+                // Update remaining text for the next iteration
+                currentLine = text.substring(pos).trim();
             }
         }
+        
+        return sb;
+    }
\ No newline at end of file
