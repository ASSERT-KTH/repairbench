diff --git a/tmp/d4a34017-96d0-42b5-94e5-877ca2c28807_buggy.java b/tmp/7a430797-8515-4876-9030-d130d3a69f2b_fixed.java
index 875b31b..7c76f2c 100644
--- a/tmp/d4a34017-96d0-42b5-94e5-877ca2c28807_buggy.java
+++ b/tmp/7a430797-8515-4876-9030-d130d3a69f2b_fixed.java
@@ -1,54 +1,75 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
+            // No wrapping needed, append the whole text (trimmed)
             sb.append(rtrim(text));
-
             return sb;
         }
+        
+        // Append the first line (trimmed)
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // Adjust nextLineTabStop if it's too large to prevent errors
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
+            // This should not happen with realistic inputs, but safeguard anyway.
             nextLineTabStop = width - 1;
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare padding string for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
+        // Loop wrapping remaining lines
         while (true)
         {
-            text = padding + text.substring(pos).trim();
+            // Get the remaining text, trimming leading whitespace that might be
+            // left over from the previous line's wrap point.
+            String remainingText = text.substring(pos).trim();
+            
+            // Prepend padding to the remaining text
+            text = padding + remainingText;
+            
+            // Find the wrap position for the current padded line
             pos = findWrapPos(text, width, 0);
 
+            // If the remaining text fits on the current line (with padding)
             if (pos == -1)
             {
-                sb.append(text);
-
-                return sb;
+                // Append the final line (trimmed)
+                sb.append(rtrim(text));
+                return sb; // We are done
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // Handle the case where the wrap position calculated by findWrapPos
+            // falls within the padding area (pos <= nextLineTabStop).
+            // This typically happens when the first word after the padding
+            // is too long to fit in the remaining space (width - nextLineTabStop).
+            // In this situation, we must break the long word at the line width.
+            if (pos <= nextLineTabStop && text.length() > width)
             {
+                 // Force the break position to the maximum width
                  pos = width;
             }
             
+            // Append the wrapped portion of the current line (trimmed)
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            
+            // The loop continues, 'pos' now holds the starting index
+            // for the next line's substring operation relative to the current 'text'.
         }
     }
\ No newline at end of file
