diff --git a/tmp/e8720b27-f610-49a2-a10a-003e6fbd90ab_buggy.java b/tmp/989e11bb-f887-4d5d-ad90-4abf9893f88c_fixed.java
index 875b31b..7598df9 100644
--- a/tmp/e8720b27-f610-49a2-a10a-003e6fbd90ab_buggy.java
+++ b/tmp/989e11bb-f887-4d5d-ad90-4abf9893f88c_fixed.java
@@ -1,54 +1,75 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // If the current indent is greater than the width, we need to bring it back
+        // We need to preserve the current indent setting
+        int currentTabStop = nextLineTabStop;
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
-            nextLineTabStop = width - 1;
+            currentTabStop = width - 1;
         }
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
-        final String padding = createPadding(nextLineTabStop);
+        final String padding = createPadding(currentTabStop); // Use adjustedTabStop for padding calculation
 
         while (true)
         {
+            // Add padding and the rest of the text trimmed
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Calculate the wrap position, starting the search honours the padding indentation
+            // Use the original nextLineTabStop for the wrap calculation logic, 
+            // but ensure the start position isn't negative if nextLineTabStop is 0
+            pos = findWrapPos(text, width, nextLineTabStop > 0 ? nextLineTabStop : 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
             
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // Correction for CLI-162: When the wrap position coincides with the end of the padding
+            // (pos == nextLineTabStop - 1 might be problematic if nextLineTabStop is 0 or 1)
+            // and the line is too long, we might need to force break at width.
+            // Let's refine the condition slightly for robustness, although the original check might cover most cases.
+            // The original check seems okay, let's primarily focus on the findWrapPos change.
+            // Re-evaluating the problematic condition from the original code:
+            // if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // This condition seems fragile. Let's reconsider if it's needed with the patched findWrapPos.
+            // If findWrapPos starts searching after the padding (at nextLineTabStop), 
+            // pos should typically be >= nextLineTabStop unless the only break point is within the padding itself (which findWrapPos should handle).
+            // Let's test the original condition with the patched findWrapPos logic. If findWrapPos correctly returns -1 or a position >= nextLineTabStop, this condition might not be hit often.
+            // However, the original CLI-162 patch only changed findWrapPos argument.
+            
+            // Reinstating the original condition check that was present in the buggy code, as the main fix is the findWrapPos argument.
+            if ( (text.length() > width) && (pos == currentTabStop - 1) ) // Check against the effective tab stop used for padding
             {
-                pos = width;
+                 pos = width; // Force break at width
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
