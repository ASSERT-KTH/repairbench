diff --git a/tmp/a8948ac8-1495-4d36-a892-43accc8080aa_buggy.java b/tmp/8e1bef14-1630-4eee-8d5c-2d8112735624_fixed.java
index 875b31b..df0829a 100644
--- a/tmp/a8948ac8-1495-4d36-a892-43accc8080aa_buggy.java
+++ b/tmp/8e1bef14-1630-4eee-8d5c-2d8112735624_fixed.java
@@ -1,54 +1,68 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // Fix for infinite loop when nextLineTabStop is too large CLI-154 / CLI-162 investigation
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
+            // Prevent padding from being wider than the line
             nextLineTabStop = width - 1;
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
+        // Use a variable for the remainder text processing
+        String remainder = text.substring(pos).trim();
 
-        while (true)
+        // Loop while there is remaining text
+        while (remainder.length() > 0)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Pad the remainder for processing for the current line
+            text = padding + remainder; // Reuse text variable for current line processing
+            pos = findWrapPos(text, width, 0); // Find wrap position in the padded text
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                // Append the final padded line (trimmed) and exit
+                sb.append(rtrim(text));
+                // Exit the loop and function
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
+            // The following condition forced the wrap position to the line width
+            // if the wrap position was calculated to be the last char of padding.
+            // This could cause words to be split incorrectly or unnecessarily.
+            // Removed as part of fix for CLI-162.
+            // if ( (text.length() > width) && (pos == nextLineTabStop - 1) )
+            // {
+            //     pos = width;
+            // }
 
+            // Append the wrapped chunk of the padded line
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+            // Update remainder for the next iteration
+            remainder = text.substring(pos).trim();
         }
+        // This return statement should be logically unreachable if the loop terminates correctly via returns.
+        return sb;
     }
\ No newline at end of file
