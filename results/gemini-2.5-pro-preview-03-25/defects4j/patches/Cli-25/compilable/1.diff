diff --git a/tmp/9c64a44f-5570-4cbd-8992-475d90db9d60_buggy.java b/tmp/c4be6f9e-e7bb-4026-a352-d0860889af38_fixed.java
index 875b31b..ef7f9bf 100644
--- a/tmp/9c64a44f-5570-4cbd-8992-475d90db9d60_buggy.java
+++ b/tmp/c4be6f9e-e7bb-4026-a352-d0860889af38_fixed.java
@@ -1,54 +1,93 @@
     /**
      * Render the specified text and return the rendered Options
-     * in a StringBuffer.
+     * in a StringBuffer. All output lines are padded with the specified
+     * amount of spaces.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
+     * @param nextLineTabStop The position on the next line for the first tab. This is used
+     *                   as the padding amount for all lines.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+                                             int nextLineTabStop, String text) {
+        // Sanitize nextLineTabStop
+        if (nextLineTabStop < 0) {
+            nextLineTabStop = 0;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
+        // Ensure width is usable
+        if (width <= 0) {
+            // Cannot wrap, append text as is (potentially overflowing width)
+            // Append padding? Let's be consistent and pad.
+            if (text != null && text.length() > 0) {
+                 sb.append(createPadding(nextLineTabStop)).append(rtrim(text)).append(defaultNewLine);
+            }
+            return sb; // Exit early if width is not positive.
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
+        // Calculate the width available for actual text content on each line.
+        int effectiveWidth = width - padding.length();
 
+        // If padding consumes all width or more, we cannot fit content reasonably.
+        if (effectiveWidth <= 0) {
+             // Append padding and the entire text on one line (will overflow width).
+             if (text != null && text.length() > 0) { // Only add if text exists
+                  sb.append(padding).append(rtrim(text)).append(defaultNewLine);
+             }
              return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
+        int currentPos = 0;
+        while (currentPos < text.length()) {
+            // Skip leading whitespace from the chunk start position.
+            int start = currentPos;
+            while (start < text.length() && Character.isWhitespace(text.charAt(start))) {
+                start++;
+            }
+            // If only whitespace remains, we are done.
+            if (start >= text.length()) {
+                break;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Find wrap position in the remaining text (from 'start') to fit 'effectiveWidth'.
+            // findWrapPos searches for the last whitespace index 'idx' such that
+            // text.substring(start, idx) fits within the width parameter (here, effectiveWidth).
+            // It returns idx + 1 (the position after the space).
+            // It returns -1 if the remainder from 'start' fits entirely.
+            // It returns 'start' if the first word from 'start' is longer than the width parameter.
+            int wrapPos = findWrapPos(text, effectiveWidth, start);
+
+            String lineText;
+            if (wrapPos == -1) {
+                // No wrap point found within effectiveWidth for the remainder.
+                // The rest of the text fits on this line.
+                lineText = text.substring(start);
+                currentPos = text.length(); // Mark as done.
+            } else if (wrapPos == start) {
+                 // Word starting at 'start' is longer than effectiveWidth.
+                 // Break the word at effectiveWidth to make progress.
+                 int breakPoint = start + effectiveWidth;
+                 if (breakPoint > text.length()) { // Avoid StringIndexOutOfBounds
+                     breakPoint = text.length();
+                 }
+                 lineText = text.substring(start, breakPoint);
+                 currentPos = breakPoint; // Advance past the broken part for next iteration.
+            } else {
+                 // Normal wrap at whitespace. wrapPos is index after the space.
+                 lineText = text.substring(start, wrapPos);
+                 currentPos = wrapPos; // Next iteration starts after the space found.
             }
+
+            // Append the padded line with the extracted text chunk.
+            sb.append(padding); // Add padding
+            sb.append(rtrim(lineText)); // Add trimmed text chunk
+            sb.append(defaultNewLine); // Add newline
+        }
+
+        return sb;
     }
\ No newline at end of file
