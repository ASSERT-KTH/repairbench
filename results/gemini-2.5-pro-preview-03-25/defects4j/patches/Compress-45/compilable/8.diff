diff --git a/tmp/94ba89a4-facf-4e6e-a966-9b033152c80b_buggy.java b/tmp/11a32ac7-a9ed-49f8-921c-290199fd281a_fixed.java
index 1bbc082..490a376 100644
--- a/tmp/94ba89a4-facf-4e6e-a966-9b033152c80b_buggy.java
+++ b/tmp/11a32ac7-a9ed-49f8-921c-290199fd281a_fixed.java
@@ -1,36 +1,77 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      *
-     * Uses {@link #formatUnsignedOctalString} to format
+     * Uses {@link #formatLongOctalBytes} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
+     * <p>
+     * If the value does not fit as an octal string, it will be written
+     * as a binary number (base-256) according to the POSIX pax standard.
+     * This format uses the highest bit of the first byte as a marker
+     * and encodes the value in the remaining bits using two's complement
+     * representation over the entire field length.
+     * </p>
      *
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
+     * @param length The length of the buffer field. Must be at least 2.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
+     * will not fit in the buffer, or if length is less than 2.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
-        // Check whether we are dealing with UID/GID or SIZE field
+        // Check whether we are dealing with UID/GID or SIZE field for octal limits
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+        // Try to format as octal if positive and within octal limits
+        if (!negative && value <= maxAsOctalChar) {
+            try {
+                // formatLongOctalBytes should handle padding and termination
                 return formatLongOctalBytes(value, buf, offset, length);
+            } catch (IllegalArgumentException e) {
+                // This happens if the value, despite being <= maxAsOctalChar,
+                // doesn't fit with the required padding/termination in formatLongOctalBytes.
+                // Fall-through to binary formatting is the correct behavior.
+            }
+        }
+
+        // POSIX pax base-256 binary format requires a minimum length
+        if (length < 2) {
+             // Ensures we have at least one bit for the marker and one for the value.
+             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+        // Check if the value fits in the binary representation.
+        // The range is [-2^(L*8-1), 2^(L*8-1)-1]
+        // This check is only strictly necessary if length < 8, as for length >= 8
+        // the range covers all possible long values.
+        if (length < 8) {
+            final int signBitIndex = length * 8 - 1;
+            // Calculate the power of 2 safely. 1L << signBitIndex is 2^signBitIndex.
+            final long limit = 1L << signBitIndex;
+            final long maxPositive = limit - 1; // 2^(signBitIndex) - 1
+            final long minNegative = -limit;    // -2^(signBitIndex)
+            if (value > maxPositive || value < minNegative) {
+                 throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+            }
         }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
+        // No check needed for length >= 8 as any long fits within 64 bits or more.
+
+        // Write the value as two's complement bytes (Big Endian) into the buffer
+        long val = value;
+        for (int i = offset + length - 1; i >= offset; i--) {
+            buf[i] = (byte) val;
+            val >>= 8; // Use signed right shift for correct two's complement propagation
+        }
+
+        // Set the marker bit (high bit of the first byte) according to POSIX pax standard
+        buf[offset] |= (byte) 0x80;
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
\ No newline at end of file
