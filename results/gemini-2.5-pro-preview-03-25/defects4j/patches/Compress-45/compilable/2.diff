diff --git a/tmp/b0dbdfda-6da6-4f0e-89c8-72ca73835899_buggy.java b/tmp/f04ee7e6-5440-40a0-a518-41710185ed63_fixed.java
index 1bbc082..21e8dbc 100644
--- a/tmp/b0dbdfda-6da6-4f0e-89c8-72ca73835899_buggy.java
+++ b/tmp/f04ee7e6-5440-40a0-a518-41710185ed63_fixed.java
@@ -1,36 +1,64 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      *
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      *
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
+        // Handle binary formatting using GNU TAR extension.
+        // The format uses the full 'length' bytes to store the number in two's complement,
+        // with the most significant bit of the first byte set to indicate binary format.
+        // For negative numbers, the first byte is explicitly set to 0xFF.
+        // For positive numbers, the first byte has its high bit set (|= 0x80).
+
+        // Check if the value fits in the binary representation field.
+        // While checks could be added here for length < 8, the existing helper methods
+        // (formatLongBinary, formatBigIntegerBinary) should handle writing the correct
+        // two's complement representation within the given length. The primary bug
+        // was the fallthrough leading to incorrect calls and potential exceptions.
+
         if (length < 9) {
+            // Use formatLongBinary for fields up to 8 bytes.
+            // It writes the standard two's complement representation.
             formatLongBinary(value, buf, offset, length, negative);
-        }
+        } else {
+            // Use formatBigIntegerBinary for fields 9 bytes or longer.
+            // It handles potential BigInteger nuances and two's complement.
             formatBigIntegerBinary(value, buf, offset, length, negative);
+        }
+
+        // Apply the binary flag marker to the first byte, according to GNU tar spec.
+        if (negative) {
+            // Ensure the first byte is 0xFF for negative values.
+            // This might overwrite the most significant byte written by the formatter,
+            // which is correct behavior for the format.
+            buf[offset] = (byte) 0xff;
+        } else {
+            // Ensure the high bit is set for positive values.
+            // This modifies the most significant byte written by the formatter.
+            buf[offset] |= (byte) 0x80;
+        }
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
\ No newline at end of file
