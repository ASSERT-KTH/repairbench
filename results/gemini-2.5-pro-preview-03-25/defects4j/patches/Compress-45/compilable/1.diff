diff --git a/tmp/d1fcd95c-5163-4440-8f8a-5e7becc7cbaa_buggy.java b/tmp/5cbe480c-cea9-4a5d-8def-2480e48e2230_fixed.java
index 1bbc082..9fbc6cb 100644
--- a/tmp/d1fcd95c-5163-4440-8f8a-5e7becc7cbaa_buggy.java
+++ b/tmp/5cbe480c-cea9-4a5d-8def-2480e48e2230_fixed.java
@@ -1,36 +1,50 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      *
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      *
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+        // --- START FIX ---
+        // Handle binary formatting.
+        // The original code incorrectly called formatLongBinary (if length < 9)
+        // *and* formatBigIntegerBinary unconditionally, then manually set the
+        // marker byte, potentially overwriting the first byte written by the formatters.
+        // Assuming formatBigIntegerBinary is the intended general method for
+        // binary formatting (handling range checks, marker byte, and data),
+        // we should call only that method for the binary case.
+        // The range check inside formatBigIntegerBinary seems to be working correctly
+        // based on the exception message for the out-of-range value.
+
+        if (length < 2) {
+             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
         formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+        // The marker byte (0x80 or 0xFF) is assumed to be set by formatBigIntegerBinary.
+        // buf[offset] = (byte) (negative ? 0xff : 0x80); // REMOVED
+
         return offset + length;
+        // --- END FIX ---
     }
\ No newline at end of file
