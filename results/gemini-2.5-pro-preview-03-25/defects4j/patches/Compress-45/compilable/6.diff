diff --git a/tmp/e4255e98-9b52-49c6-997d-e3a29860bf42_buggy.java b/tmp/c17a5421-d82d-417b-932c-4fed94571f7e_fixed.java
index 1bbc082..128caa9 100644
--- a/tmp/e4255e98-9b52-49c6-997d-e3a29860bf42_buggy.java
+++ b/tmp/c17a5421-d82d-417b-932c-4fed94571f7e_fixed.java
@@ -1,36 +1,59 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      *
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      *
+     * The binary format is the Base-256 format defined in the
+     * POSIX.1-2001 standard: The highest bit of the first byte is
+     * set to indicate a binary number. The number itself is stored
+     * in the remaining bits of the field using two's complement
+     * representation.
+     *
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
+     * will not fit in the buffer, either using octal or binary format.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
+        // Try octal first
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+            // formatLongOctalBytes includes the trailing space/NUL
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+        // Octal failed, use POSIX Base-256 binary format.
+        // Check if the value fits using standard two's complement representation
+        // within the available length bytes. The MSB of the whole field determines the sign.
+        final long max = (1L << (length * 8 - 1)) - 1; // Max positive value for length bytes (using two's complement)
+        final long min = -(1L << (length * 8 - 1));    // Min negative value for length bytes (using two's complement)
+
+        if (value < min || value > max) {
+             throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
         }
+
+        // Write the value in two's complement representation into the buffer.
+        // formatBigIntegerBinary handles the conversion.
+        // It must write exactly 'length' bytes.
         formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+        // Mark the field as binary by setting the high-order bit of the first byte.
+        // This is consistent with the POSIX standard for pax interchange format.
+        // For negative numbers, the MSB is already 1, so |= 0x80 is a no-op.
+        // For positive numbers, the MSB is 0, so |= 0x80 sets the binary flag.
+        buf[offset] |= (byte) 0x80;
+
         return offset + length;
     }
\ No newline at end of file
