diff --git a/tmp/fccdea9b-6550-4ae9-9f24-51222700f5e0_buggy.java b/tmp/c1097506-a618-48c4-a273-e207534c0aa5_fixed.java
index 1bbc082..1261650 100644
--- a/tmp/fccdea9b-6550-4ae9-9f24-51222700f5e0_buggy.java
+++ b/tmp/c1097506-a618-48c4-a273-e207534c0aa5_fixed.java
@@ -1,36 +1,112 @@
+import org.apache.commons.compress.archivers.tar.TarConstants;
+import java.math.BigInteger;
+import java.util.Arrays;
+
+// NOTE: The surrounding class and necessary helper methods (like formatLongOctalBytes, formatBigIntegerBinary, TarConstants)
+// are assumed to exist and function correctly based on Apache Commons Compress TarUtils.
+
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      *
-     * Uses {@link #formatUnsignedOctalString} to format
+     * Uses {@link #formatLongOctalBytes} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      *
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
-        // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+        // Determine maximum value that fits in octal format for the given field length.
+        final long maxAsOctalChar;
+        // Typically, UID/GID fields are 8 bytes, size fields are 12 bytes.
+        // TarConstants.MAXID is for 8-byte fields (07777777L).
+        // TarConstants.MAXSIZE is for 12-byte fields (077777777777L).
+        // This logic assumes fields other than UIDLEN use MAXSIZE limit.
+        if (length == TarConstants.UIDLEN) {
+             maxAsOctalChar = TarConstants.MAXID;
+        } else {
+             maxAsOctalChar = TarConstants.MAXSIZE;
+        }
 
         final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+
+        // Try formatting as octal if possible (non-negative and fits within the determined limit)
+        if (!negative && value <= maxAsOctalChar) {
+            // formatLongOctalBytes handles octal conversion, padding, and termination.
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
-        }
+        // If octal is not suitable (value is negative or too large), use binary format.
+        // This uses the PAX standard binary format which stores the value as a
+        // two's complement, big-endian integer within the entire 'length' bytes.
+        // formatBigIntegerBinary handles the conversion and writing to the buffer.
+        // It throws IllegalArgumentException if the value cannot fit in 'length' bytes.
         formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+        // Mark the field as binary using the PAX standard marker (high bit of the first byte set to 1).
+        // formatBigIntegerBinary writes the correct two's complement value (including the sign bit),
+        // so we just need to ensure the high bit of the first byte is set. ORing with 0x80 achieves this
+        // without corrupting the value (if negative, MSB is already 1; if positive, MSB becomes 1).
+        buf[offset] |= (byte) 0x80;
+
+        // Return the updated offset after writing the field.
+        return offset + length;
+    }
+
+    // Dummy helper methods assumed to exist, based on Apache Commons Compress TarUtils.
+    // These are needed for the fixed method to compile and understand its dependencies.
+    // In a real environment, these would be provided by the TarUtils class.
+
+    /** Dummy implementation based on TarUtils */
+    private static void formatBigIntegerBinary(final long value, final byte[] buf, final int offset,
+                                               final int length, final boolean negative) {
+        final byte[] temp = BigInteger.valueOf(value).toByteArray();
+        final int len = temp.length;
+        if (len > length) {
+            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+        }
+        // Pad with sign extension bits if BigInteger representation is shorter than 'length'
+        final byte sign = negative ? (byte) 0xff : 0;
+        Arrays.fill(buf, offset, offset + length - len, sign); // Fill prefix with sign bits
+        System.arraycopy(temp, 0, buf, offset + length - len, len); // Copy actual bytes to the end
+    }
+
+    /** Dummy implementation based on TarUtils */
+    private static int formatLongOctalBytes(final long value, final byte[] buf, final int offset, final int length) {
+        // Actual implementation involves formatting 'value' into 'buf' as an octal string
+        // with leading zeros, ending with a NUL or space, within 'length' bytes.
+        // Returns offset + length.
+        int idx = length - 1;
+        buf[offset + idx] = 0; // NUL terminate
+        idx--;
+        buf[offset + idx] = (byte) ' '; // space before NUL
+        idx--;
+        if (value == 0) {
+            buf[offset + idx] = (byte) '0';
+            idx--;
+        } else {
+            long v = value;
+            while (idx >= 0 && v > 0) {
+                buf[offset + idx] = (byte) ('0' + (byte) (v & 7));
+                v >>>= 3;
+                idx--;
+            }
+        }
+        while (idx >= 0) { // Pad with leading zeros
+            buf[offset + idx] = (byte) '0';
+            idx--;
+        }
+        if (buf[offset] != ' ' && buf[offset] != '0' && buf[offset] != (byte)0) { // Check for overflow - simplified
+             throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte octal field.");
+        }
         return offset + length;
     }
\ No newline at end of file
