diff --git a/tmp/1c0928b0-9e5e-4bf5-8468-3697c134aba5_buggy.java b/tmp/b6c18251-8ec0-43fb-9d86-e29784f80171_fixed.java
index 1bbc082..476da4b 100644
--- a/tmp/1c0928b0-9e5e-4bf5-8468-3697c134aba5_buggy.java
+++ b/tmp/b6c18251-8ec0-43fb-9d86-e29784f80171_fixed.java
@@ -1,36 +1,52 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+            // formatLongOctalBytes calls formatOctalBytes which handles the trailing space/NUL
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
+        // If value is negative or too large for octal, use binary representation.
+        // Binary representation in TAR uses two's complement with the highest bit of the first byte set.
         if (length < 9) {
+            // Handles standard fields like size, mtime, uid, gid (typically 8 bytes)
+            // Writes the two's complement representation to buf[offset..offset+length-1]
             formatLongBinary(value, buf, offset, length, negative);
-        }
+        } else {
+            // Handles potentially larger fields (e.g., PAX extended headers)
+            // Writes the two's complement representation to buf[offset..offset+length-1]
             formatBigIntegerBinary(value, buf, offset, length, negative);
+        }
 
+        // Mark the field as binary:
+        // Set the high bit of the first byte (buf[offset]) to 1.
+        // For negative numbers, the standard TAR format (GNU and PAX) uses two's complement,
+        // where the first byte will already have the high bit set (often 0xFF).
+        // For positive numbers, the first byte needs the high bit set explicitly (0x80).
+        // The original code uses a specific logic: 0xFF for negative, 0x80 for positive.
+        // This overwrites the first byte written by the format*Binary methods but ensures
+        // compatibility with the corresponding parse method.
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
\ No newline at end of file
