diff --git a/tmp/2d837cda-6af3-4b18-8a23-1361b8f14e8a_buggy.java b/tmp/e5d31892-0463-48d3-8504-63965b7a3f48_fixed.java
index 1bbc082..de7917e 100644
--- a/tmp/2d837cda-6af3-4b18-8a23-1361b8f14e8a_buggy.java
+++ b/tmp/e5d31892-0463-48d3-8504-63965b7a3f48_fixed.java
@@ -1,36 +1,56 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      *
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      *
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
+        // Handle non-negative values fitting in standard octal representation.
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
+        // Handle binary representation for values that don't fit in octal or are negative.
+        // This format uses a marker byte (0x80 for positive, 0xFF for negative)
+        // followed by the magnitude of the value in the remaining bytes.
+        // Assumes formatLongBinary and formatBigIntegerBinary handle writing the
+        // marker byte and the value magnitude, and throw IllegalArgumentException if
+        // the magnitude doesn't fit in length-1 bytes.
+
         if (length < 9) {
+            // Use formatLongBinary for lengths typically used for UID/GID (e.g., 8).
+            // It should handle the marker and magnitude encoding for 64-bit longs.
             formatLongBinary(value, buf, offset, length, negative);
-        }
+        } else {
+            // Use formatBigIntegerBinary for larger lengths (e.g., 12 for size).
+            // It handles values that might exceed Long.MAX_VALUE magnitude using BigInteger logic.
             formatBigIntegerBinary(value, buf, offset, length, negative);
+        }
 
+        // Mark the buffer segment as containing binary data by setting the high bit of the first byte.
+        // Note: formatLongBinary/formatBigIntegerBinary are expected to write the correct
+        // marker (0x80 or 0xFF) based on negativity. However, the original code
+        // unconditionally overwrote buf[offset] here. We keep this original behavior
+        // for safety, although it might be redundant if the helper methods already set it correctly.
+        // If helper methods set 0x80/0xFF, this sets 0x80 for positive and 0xFF for negative, matching them.
+        // If helper methods only set the value part (offset+1 onwards), this correctly sets the marker.
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
\ No newline at end of file
