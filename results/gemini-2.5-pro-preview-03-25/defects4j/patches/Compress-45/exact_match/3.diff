diff --git a/tmp/ce25aed2-15ea-4244-b90a-cd52835205e8_buggy.java b/tmp/affa6e40-6592-4be8-80cf-ec9ecac246a0_fixed.java
index 1bbc082..166a389 100644
--- a/tmp/ce25aed2-15ea-4244-b90a-cd52835205e8_buggy.java
+++ b/tmp/affa6e40-6592-4be8-80cf-ec9ecac246a0_fixed.java
@@ -1,36 +1,52 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      *
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      *
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
+     * will not fit in the buffer according to the TAR conventions.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+            // Use default octal representation
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
+        // If value is negative or too large for octal, use binary representation.
+        // Binary representations are signaled by setting the high bit of the first byte.
+        // Negative values are stored in standard two's complement representation.
+
         if (length < 9) {
+            // Handle binary conversion for standard lengths (like 8 bytes for size)
+            // This might throw an exception if the value doesn't fit according
+            // to its internal checks (which might differ from standard two's complement).
             formatLongBinary(value, buf, offset, length, negative);
-        }
+        } else {
+            // Handle binary conversion for potentially larger fields (e.g., pax headers)
+            // This might also throw an exception based on its internal checks.
             formatBigIntegerBinary(value, buf, offset, length, negative);
+        }
 
+        // Mark the number as binary by setting the high bit of the first byte.
+        // For negative numbers in two's complement, the high bit will usually
+        // already be set. Setting it to 0xFF ensures compatibility with formats
+        // that might expect this specific marker for negative binary values.
+        // For positive numbers, explicitly setting the high bit to 1 (0x80) marks it as binary.
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
\ No newline at end of file
