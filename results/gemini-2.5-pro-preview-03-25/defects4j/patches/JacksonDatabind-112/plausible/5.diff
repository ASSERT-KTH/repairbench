diff --git a/tmp/fe15c39a-7e71-42a7-8047-a06fb060862b_buggy.java b/tmp/7362ad8c-9f5b-4dc8-93c1-78195ce33bde_fixed.java
index 4ebe4f9..1ce7d51 100644
--- a/tmp/fe15c39a-7e71-42a7-8047-a06fb060862b_buggy.java
+++ b/tmp/7362ad8c-9f5b-4dc8-93c1-78195ce33bde_fixed.java
@@ -1,41 +1,64 @@
     /*
     /**********************************************************
     /* Validation, post-processing
     /**********************************************************
      */
     @Override
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegate = null;
-        if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        final ValueInstantiator valueInstantiator = _valueInstantiator;
+        AnnotatedWithParams delegateCreator = null;
+        JavaType delegateType = null;
+
+        if (valueInstantiator != null) {
+            if (valueInstantiator.canCreateUsingDelegate()) {
+                delegateType = valueInstantiator.getDelegateType(ctxt.getConfig());
+                if (delegateType == null) {
+                    ctxt.reportBadDefinition(_containerType, String.format(
+"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'",
+                            _containerType, valueInstantiator.getClass().getName()));
+                }
+                delegateCreator = valueInstantiator.getDelegateCreator();
+                // [databind#2324]: make sure we allow conversion AND check parameters
+            } else if (valueInstantiator.canCreateUsingArrayDelegate()) {
+                delegateType = valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+                if (delegateType == null) {
+                    ctxt.reportBadDefinition(_containerType, String.format(
+"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'",
+                            _containerType, valueInstantiator.getClass().getName()));
+                }
+                // Unlike with regular delegate, here selection of creator implies
+                // that we do NOT care about parameters; at least for now
+                delegateCreator = valueInstantiator.getArrayDelegateCreator();
+            }
+        }
+        // regardless of creator, find delegate deserializer:
+        if (delegateType != null) {
             delegate = findDeserializer(ctxt, delegateType, property);
         }
-        }
+
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         final JavaType valueType = _containerType.getContentType();
         if (valueDeser == null) {
             // [databind#125]: May have a content converter
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
             if (valueDeser == null) {
             // And we may also need to get deserializer for String
                 valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
             }
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
         }
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
         if (isDefaultDeserializer(valueDeser)) {
             valueDeser = null;
         }
         return withResolved(delegate, valueDeser, nuller, unwrapSingle);
     }
\ No newline at end of file
