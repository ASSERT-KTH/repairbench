diff --git a/tmp/d2a179b8-cbc3-437c-a69d-bdfbfcca6efe_buggy.java b/tmp/9732438f-3671-4957-8c7a-d5b49b786493_fixed.java
index 4ebe4f9..9eed76a 100644
--- a/tmp/d2a179b8-cbc3-437c-a69d-bdfbfcca6efe_buggy.java
+++ b/tmp/9732438f-3671-4957-8c7a-d5b49b786493_fixed.java
@@ -1,41 +1,58 @@
     /*
     /**********************************************************
     /* Validation, post-processing
     /**********************************************************
      */
     @Override
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegate = null;
         if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+            JavaType delegateType = null;
+            // [databind#2324]: Check array-delegate BEFORE standard delegate
+            if (_valueInstantiator.canCreateUsingArrayDelegate()) {
+                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+                // We may also need the creator metadata, but I don't think
+                // contextualization requires it? If it did, would need:
+                 // AnnotatedWithParams delegateCreator = _valueInstantiator.getArrayDelegateCreator();
+            } else if (_valueInstantiator.canCreateUsingDelegate()) {
+                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+                 // AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
+            }
+
+            if (delegateType != null) {
+                 // Living dangerously, for a moment:
+                 // (note: property is null if called by collection?)
                  delegate = findDeserializer(ctxt, delegateType, property);
             }
         }
+
+        // Ok, then possibly resolve content deserializer:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         final JavaType valueType = _containerType.getContentType();
         if (valueDeser == null) {
             // [databind#125]: May have a content converter
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
             if (valueDeser == null) {
             // And we may also need to get deserializer for String
                 valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
             }
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
         }
+        // [databind#104]: Support single-element arrays from scalar values
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+        // [databind#2023] Need to make sure ValueNullProvider is contextualized here
         NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
         if (isDefaultDeserializer(valueDeser)) {
             valueDeser = null;
         }
+        // Note: we do not actually check that delegate == null if valueDeser == null.
+        // Perhaps we should? Seems strange if both are null?
         return withResolved(delegate, valueDeser, nuller, unwrapSingle);
     }
\ No newline at end of file
