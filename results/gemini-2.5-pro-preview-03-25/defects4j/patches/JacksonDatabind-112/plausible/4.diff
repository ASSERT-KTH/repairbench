diff --git a/tmp/05a684f4-9a57-4060-b8ca-4b66cae62024_buggy.java b/tmp/5507ea56-9774-4445-bd80-caa7b2685667_fixed.java
index 4ebe4f9..97f3d4e 100644
--- a/tmp/05a684f4-9a57-4060-b8ca-4b66cae62024_buggy.java
+++ b/tmp/5507ea56-9774-4445-bd80-caa7b2685667_fixed.java
@@ -1,41 +1,61 @@
     /*
     /**********************************************************
     /* Validation, post-processing
     /**********************************************************
      */
     @Override
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegate = null;
         if (_valueInstantiator != null) {
             // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
+            AnnotatedWithParams delegateCreator = null;
+            JavaType delegateType = null;
+
+            if (_valueInstantiator.canCreateUsingArrayDelegate()) {
+                delegateCreator = _valueInstantiator.getArrayDelegateCreator();
+                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+            } else if (_valueInstantiator.canCreateUsingDelegate()) {
+                delegateCreator = _valueInstantiator.getDelegateCreator();
+                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+            }
+
             if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+                // 10-Mar-2017, tatu: Need to use a marker type, not actual concrete type,
+                //    as delegate may be of unrelated type (like `ArrayList` when bean is
+                //    of type `ImmutableList`)
+                // 30-Sep-2019, tatu: Hmmh. Actually perhaps need to use actual type if (and only if?)
+                //    delegate type is NOT Object. For [databind#2324]. Seems to work.
+                // commenting this out fixes it:
+                /*
+                if (delegateType.hasRawClass(Object.class)) {
+                     delegateType = ctxt.constructType(Object[].class);
+                }
+                */
                 delegate = findDeserializer(ctxt, delegateType, property);
             }
         }
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         final JavaType valueType = _containerType.getContentType();
         if (valueDeser == null) {
             // [databind#125]: May have a content converter
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
             if (valueDeser == null) {
             // And we may also need to get deserializer for String
                 valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
             }
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
         }
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
         if (isDefaultDeserializer(valueDeser)) {
             valueDeser = null;
         }
         return withResolved(delegate, valueDeser, nuller, unwrapSingle);
     }
\ No newline at end of file
