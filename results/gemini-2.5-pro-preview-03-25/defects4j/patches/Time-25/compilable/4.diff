diff --git a/tmp/1ece71af-c125-4c3f-ab7c-31964d9a8064_buggy.java b/tmp/d125b63e-6925-4a06-bde5-53b0d42f769b_fixed.java
index 05aaf2d..a07a1a0 100644
--- a/tmp/1ece71af-c125-4c3f-ab7c-31964d9a8064_buggy.java
+++ b/tmp/d125b63e-6925-4a06-bde5-53b0d42f769b_fixed.java
@@ -1,56 +1,76 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
+        // Calculate a preliminary UTC instant and associated offset.
+        // We use instantLocal as a first guess for the UTC instant, which is crude but necessary.
+        final int offsetGuess1 = getOffset(instantLocal);
+        final long utcGuess1 = instantLocal - offsetGuess1;
+        final int offsetGuess2 = getOffset(utcGuess1); // Offset at the first estimated UTC instant
+
+        // Recalculate UTC instant using the improved offset estimate.
+        final long utcGuess2 = instantLocal - offsetGuess2;
+        final int offsetGuess3 = getOffset(utcGuess2); // Offset at the second estimated UTC instant
+
+        // If the offsets match after the second guess, we have potentially found the correct offset.
+        if (offsetGuess2 == offsetGuess3) {
+            // This is the standard case, or the standard offset during an overlap.
+            // Check for overlap: find the transition immediately preceding the calculated UTC instant.
+            // Add 1 to handle case where utcGuess2 is exactly on a transition boundary.
+            long prevTrans = previousTransition(utcGuess2 + 1);
+            // Check if prevTrans is valid and not the same as utcGuess2 if utcGuess2 was exactly on the transition
+            if (prevTrans != Long.MIN_VALUE && prevTrans < utcGuess2 + 1) {
+                int offsetBefore = getOffset(prevTrans - 1); // Offset active just before the transition
+                // If the offset before the transition was different (and larger, indicating DST -> Standard)
+                if (offsetBefore > offsetGuess2) {
+                    // Check if instantLocal could validly map to this earlier (DST) period.
+                    long testUTCBefore = instantLocal - offsetBefore;
+                    // Verify this hypothetical instant is valid (its offset matches offsetBefore)
+                    // and it falls before the transition.
+                    if (testUTCBefore < prevTrans && getOffset(testUTCBefore) == offsetBefore) {
+                        // Yes, it's an overlap. Rule is to return the earlier (DST) offset.
+                        return offsetBefore;
                     }
                 }
             }
-        return offsetAdjusted;
+            // No overlap detected, or the consistent offset found is correct.
+            return offsetGuess2;
+        } else {
+            // If offsetGuess2 != offsetGuess3, we are likely in a transition gap.
+            // instantLocal represents a non-existent local time.
+            // Rule: Return the offset suitable for calculating an instant *after* the gap.
+            // The offset after the gap corresponds to the later time, which has the larger offset value.
+            // (e.g., gap from +0 to +1, return +1; gap from -5 to -4, return -4)
+            return Math.max(offsetGuess2, offsetGuess3);
+        }
     }
\ No newline at end of file
