diff --git a/tmp/60713f8a-6b2b-43cd-a47e-5439eef23455_buggy.java b/tmp/a8394262-ea5c-4f63-80a3-ea0cc034407c_fixed.java
index 05aaf2d..ef155ac 100644
--- a/tmp/60713f8a-6b2b-43cd-a47e-5439eef23455_buggy.java
+++ b/tmp/a8394262-ea5c-4f63-80a3-ea0cc034407c_fixed.java
@@ -1,56 +1,100 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+        // Calculate an initial guess of the offset, by treating the local instant
+        // as a UTC instant. This estimate will be corrected later.
         final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
+
+        // Calculate the UTC instant based on the initial guess of the offset.
         final long instantAdjusted = instantLocal - offsetLocal;
+        // Get the offset for the estimated UTC instant. This is often the correct offset.
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
+        // Calculate the UTC instant based on the second offset guess.
+        final long instantBasedOnAdjusted = instantLocal - offsetAdjusted;
+        // Get the offset for this potentially more accurate UTC instant.
+        final int finalOffset = getOffset(instantBasedOnAdjusted);
+
+        // Check if the second offset guess (offsetAdjusted) is consistent.
+        // If finalOffset is the same as offsetAdjusted, it means that
+        // instantLocal - offsetAdjusted maps to a UTC instant that has offsetAdjusted.
+        if (finalOffset == offsetAdjusted) {
+            // The offsetAdjusted is consistent. Now, check for overlaps.
+            // An overlap occurs if the initial offset guess (offsetLocal) is *also* consistent.
+            long instantBasedOnLocal = instantLocal - offsetLocal;
+            if (getOffset(instantBasedOnLocal) == offsetLocal) {
+                 // Both offsetLocal and offsetAdjusted could be consistent mappings for instantLocal.
                  if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
+                     // The offsets are different, confirming an overlap based on the initial estimates.
+                     // Rule for overlaps: Favor DST/Summer time. Assume this corresponds to the maximum offset.
+                     return Math.max(offsetLocal, offsetAdjusted);
                  }
+                 // If offsetLocal == offsetAdjusted, it might still be an overlap if the
+                 // initial guess landed on the standard time during an overlap.
+                 // Perform a more robust check using the transition history near the estimated UTC instant.
+                 // Use instantBasedOnAdjusted as it's our best estimate of the UTC instant.
+                 // Add 1 millisecond to avoid potential issues if the instant is exactly on a transition.
+                 long transition = previousTransition(instantBasedOnAdjusted + 1);
+                 // Ensure the transition is strictly before the estimated UTC instant.
+                 if (transition < instantBasedOnAdjusted) {
+                     int offsetBefore = getOffset(transition - 1); // Offset effective right before the transition
+                     if (offsetBefore != offsetAdjusted) { // Check if the offset actually changed across this transition
+                         // Verify if this offsetBefore is also a consistent mapping for instantLocal
+                         long instantBeforeUTC = instantLocal - offsetBefore;
+                         if (getOffset(instantBeforeUTC) == offsetBefore) {
+                             // The offsetBefore is also consistent. Overlap confirmed.
+                             // Rule for overlaps: Favor DST/Summer time (max offset).
+                             return Math.max(offsetBefore, offsetAdjusted);
                          }
                      }
+                 }
+                 // No overlap detected through the transition check, or initial offsets were same.
+                 // Return the consistent offsetAdjusted.
+                 return offsetAdjusted;
+            } else {
+                 // Only offsetAdjusted was consistent based on the initial checks. Return it.
+                 // This handles normal time or edge cases near transitions where only one offset maps correctly.
                  return offsetAdjusted;
             }
+        } else {
+            // finalOffset != offsetAdjusted. This indicates inconsistency, typically meaning instantLocal
+            // falls within a DST gap where neither offset works perfectly backwards.
+            // Rule for gaps: Return the offset suitable for calculating the instant *after* the gap.
+            // The calculation chain offsetLocal -> instantAdjusted -> offsetAdjusted -> instantBasedOnAdjusted -> finalOffset
+            // effectively probes the offsets around the transition. When they differ, finalOffset
+            // represents the offset calculated using the offset from the other side of the transition,
+            // which corresponds to the offset *after* the gap.
+            return finalOffset;
+        }
+    }
\ No newline at end of file
