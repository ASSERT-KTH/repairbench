diff --git a/tmp/70715961-e133-4686-9e7f-52d951b206f5_buggy.java b/tmp/995b0c02-2749-4db4-ad0e-c60384420fed_fixed.java
index 05aaf2d..fcff298 100644
--- a/tmp/70715961-e133-4686-9e7f-52d951b206f5_buggy.java
+++ b/tmp/995b0c02-2749-4db4-ad0e-c60384420fed_fixed.java
@@ -1,56 +1,71 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
+
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+            // Check if we are in a gap period (offset increases), where
+            // offsetAdjusted is typically the larger offset corresponding to the later time.
+            if (offsetLocal < offsetAdjusted) {
+                // Check if the calculated instant using the later offset
+                // would fall before the transition compared to the initial estimate.
+                // This happens if instantLocal is within the gap.
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
+                    // instantLocal is in the gap. Return the offset before the gap (offsetLocal)
+                    // to avoid calculating a time before the gap. The Javadoc examples
+                    // indicate preference for the later period, but this check prevents
+                    // inconsistent state if the calculated UTC falls before the transition.
                     return offsetLocal;
                 }
+                // Otherwise (transitions are same), offsetAdjusted is suitable
+                // (this is handled by the final return).
+            } else {
+                // We are in an overlap period (offset decreases), where
+                // offsetLocal is typically the larger offset corresponding to the earlier time (DST).
+                // For overlaps, favour the earlier instant / DST offset.
+                // The earlier instant corresponds to the larger offset, which is offsetLocal.
+                return offsetLocal;
             }
         }
+        // If offsets are equal OR
+        // if in a gap and the transition check determined offsetAdjusted is suitable.
         return offsetAdjusted;
     }
\ No newline at end of file
