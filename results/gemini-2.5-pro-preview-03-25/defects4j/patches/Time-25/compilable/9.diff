diff --git a/tmp/98213d55-1a3e-4d59-83bc-94af5a6bf6f2_buggy.java b/tmp/686a76d0-fd34-4ecf-9e34-8c18c106b721_fixed.java
index 05aaf2d..5d8d432 100644
--- a/tmp/98213d55-1a3e-4d59-83bc-94af5a6bf6f2_buggy.java
+++ b/tmp/686a76d0-fd34-4ecf-9e34-8c18c106b721_fixed.java
@@ -1,56 +1,90 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
+        // If the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+            // If the offsets differ, this indicates a transition point.
+
+            // Check if we are in a gap interval. This happens if
+            // instantAdjusted (calculated using the initial offset guess)
+            // is before the transition, but the 'real' instant is after.
+            // If getOffset(instantLocal - offsetAdjusted) == offsetLocal,
+            // it implies that offsetLocal is the offset before the transition
+            // and offsetAdjusted is the offset after the transition.
+            if (getOffset(instantLocal - offsetAdjusted) == offsetLocal) {
+                // Gap: offsetLocal is before, offsetAdjusted is after. Return offsetAdjusted.
+                // Overlap: offsetLocal is before (DST), offsetAdjusted is after (STD). Return offsetLocal (DST).
+                // Determine if it's a gap or overlap based on which offset is larger.
+                 if (offsetLocal < offsetAdjusted) {
+                    // Gap (Standard -> DST): offsetLocal is Standard, offsetAdjusted is DST.
+                    // Return the offset after the gap (DST).
+                    return offsetAdjusted;
+                 } else {
+                    // Overlap (DST -> Standard): offsetLocal is DST, offsetAdjusted is Standard.
+                    // Return the offset for the earlier instant (DST).
                     return offsetLocal;
                  }
             }
+             // If getOffset(instantLocal - offsetAdjusted) != offsetLocal,
+             // it implies offsetAdjusted is the offset before the transition
+             // and offsetLocal is the offset after the transition.
+             else {
+                 // Gap: offsetAdjusted is before, offsetLocal is after. Return offsetLocal.
+                 // Overlap: offsetAdjusted is before (DST), offsetLocal is after (STD). Return offsetAdjusted (DST).
+                 // Determine if it's a gap or overlap based on which offset is larger.
+                 if (offsetAdjusted < offsetLocal) {
+                     // Gap (Standard -> DST): offsetAdjusted is Standard, offsetLocal is DST.
+                     // Return the offset after the gap (DST).
+                     return offsetLocal;
+                 } else {
+                     // Overlap (DST -> Standard): offsetAdjusted is DST, offsetLocal is Standard.
+                     // Return the offset for the earlier instant (DST).
+                     return offsetAdjusted;
+                 }
+             }
+             // Simplified logic based on documentation for v2.0 onwards:
+             // For gaps, return offset after gap (larger offset).
+             // For overlaps, return offset of earlier instant (DST/larger offset).
+             // Thus, always return the larger offset.
+             // return Math.max(offsetLocal, offsetAdjusted); // Potential simplification
         }
+        // If offsets are the same, the adjusted offset is correct.
         return offsetAdjusted;
     }
\ No newline at end of file
