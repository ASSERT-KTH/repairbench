diff --git a/tmp/6b9dc222-6db7-4f6b-ba4f-e10c8a6141d0_buggy.java b/tmp/a2f818e1-e524-42cc-b091-08aa1bf764f9_fixed.java
index 05aaf2d..3e5e782 100644
--- a/tmp/6b9dc222-6db7-4f6b-ba4f-e10c8a6141d0_buggy.java
+++ b/tmp/a2f818e1-e524-42cc-b091-08aa1bf764f9_fixed.java
@@ -1,56 +1,96 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
+
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
+            // We are clearly in a transition period where the initial guess was wrong.
+            // Check if we are in a gap transition (e.g. spring forward)
+            // Gap: offsetLocal is offset before gap, offsetAdjusted is offset after gap. offsetLocal < offsetAdjusted.
             if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+                // Javadoc: "return an offset suitable for calculating an instant after any DST gap" -> offsetAdjusted
+                // However, the original code included this check. It implies that offsetLocal should be
+                // returned if the transition that instantAdjusted maps forward to is different from the transition
+                // that (instantLocal - offsetAdjusted) maps forward to. This indicates that instantLocal falls
+                // around another transition just after the gap. Let's retain this logic from the original code.
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
+                    return offsetLocal; // Return offset before gap
                 }
+                // Otherwise fall through to return offsetAdjusted (offset after gap).
+            } else {
+                // Overlap transition (e.g. fall back). offsetLocal > offsetAdjusted.
+                // Javadoc: "During a DST overlap... return the earlier instant... favour daylight time".
+                // The earlier instant corresponds to the offset *before* the transition, which is offsetLocal (the daylight offset).
+                return offsetLocal; // Return the daylight offset (offset before transition)
             }
+        } else {
+            // If offsetLocal == offsetAdjusted, it might be correct,
+            // OR it might be an overlap where the initial guess resolved incorrectly to the standard offset.
+            // Check for this specific overlap case where the initial calculation stabilized on the 'later' (standard) offset.
+            long instantUTC = instantAdjusted; // Best estimate of UTC = instantLocal - offsetAdjusted
+            long prevTrans = previousTransition(instantUTC);
+            // Ensure the previous transition is valid and occurred before our estimated UTC.
+            if (prevTrans < instantUTC) {
+                int offsetBefore = getOffset(prevTrans - 1);
+                int offsetAfter = getOffset(prevTrans); // This should be equal to offsetAdjusted
+                // Check if it was an overlap transition (offset decreases, DST -> Standard)
+                if (offsetBefore > offsetAfter) {
+                    // Calculate the local time range of the overlap.
+                    // The overlap period starts locally at the transition time + the *later* offset (standard).
+                    long overlapStartLocal = prevTrans + offsetAfter;
+                    // The overlap period ends locally at the transition time + the *earlier* offset (daylight).
+                    long overlapEndLocal = prevTrans + offsetBefore;
+                    // If the input local time falls within this ambiguous range...
+                    if (instantLocal >= overlapStartLocal && instantLocal < overlapEndLocal) {
+                        // ...then we should have returned the earlier offset (DST offset).
+                        return offsetBefore;
                     }
+                }
+            }
+        }
+        // Default case: return the calculated offsetAdjusted.
+        // This covers:
+        // - Non-transition times.
+        // - Gaps (where the nextTransition check passes).
+        // - Overlaps where the initial guess correctly identified the DST offset,
+        //   or where the explicit check above didn't trigger.
         return offsetAdjusted;
     }
\ No newline at end of file
