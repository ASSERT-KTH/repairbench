diff --git a/tmp/3598a09b-c461-42c0-a425-1aaccaadc5af_buggy.java b/tmp/40ed95a2-5a9d-4153-8787-93aedfe99be8_fixed.java
index 05aaf2d..69ff181 100644
--- a/tmp/3598a09b-c461-42c0-a425-1aaccaadc5af_buggy.java
+++ b/tmp/40ed95a2-5a9d-4153-8787-93aedfe99be8_fixed.java
@@ -1,56 +1,102 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
+     * the offset corresponding to the daylight savings time instance.
+     * The combination of these two rules (gap and overlap) is to always favour
+     * daylight (summer) time over standard (winter) time. This is achieved by
+     * returning the larger potential offset (less negative or more positive).
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
+        // Calculate offset based on an estimate using local instant as UTC (first iteration)
+        // This provides a starting point but is not intrinsically correct for offset calculation.
+        final int offsetGuess = getOffset(instantLocal);
+        final long utcGuess1 = instantLocal - offsetGuess;
+        final int offsetResult1 = getOffset(utcGuess1); // Offset for first estimated UTC
+
+        // Calculate offset based on the previous estimate (second iteration)
+        final long utcGuess2 = instantLocal - offsetResult1;
+        final int offsetResult2 = getOffset(utcGuess2); // Offset for second estimated UTC
+
+        // Check if iteration converged
+        if (offsetResult1 == offsetResult2) {
+            // Iteration converged. Check if instantLocal falls into a gap or overlap.
+            // Find the transition relevant to the estimated UTC time utcGuess2.
+            // Add 1 to handle cases where utcGuess2 is exactly the transition time.
+            long trans = previousTransition(utcGuess2 + 1);
+            
+            // Get the offsets around this transition.
+            int offsetBefore = getOffset(trans - 1);
+            int offsetAfter = getOffset(trans);
+
+            // If the converged offset isn't one of the transition offsets, something is unusual
+            // (e.g., zone has fixed offset, or instant is far from transition).
+            // Return the converged offset as the best guess.
+            if (offsetResult2 != offsetBefore && offsetResult2 != offsetAfter) {
+                 return offsetResult2;
             }
+
+            // Determine the alternative offset involved in the transition.
+            int offsetAlt = (offsetResult2 == offsetBefore) ? offsetAfter : offsetBefore;
+
+             // If the alternative offset is the same (transition has zero duration or zone has fixed offset),
+             // there is no ambiguity.
+             if (offsetAlt == offsetResult2) {
+                 return offsetResult2;
              }
+
+            // Check if the alternative offset is also a valid mapping for instantLocal.
+            // A valid mapping means that `local - offset` yields a UTC instant
+            // whose offset *is* `offset`.
+            boolean isValidAlt = (getOffset(instantLocal - offsetAlt) == offsetAlt);
+
+            if (isValidAlt) {
+                // Ambiguous overlap: Both offsetResult2 and offsetAlt are valid mappings.
+                // Rule: Favour DST (return the larger offset).
+                return Math.max(offsetResult2, offsetAlt);
+            } else {
+                // Not an overlap. Check if the converged offset mapping is valid.
+                boolean isValidConverged = (getOffset(instantLocal - offsetResult2) == offsetResult2);
+                if (isValidConverged) {
+                    // Unique mapping for converged offset. Return it.
+                    return offsetResult2;
+                } else {
+                     // Gap: Neither offset mapping is valid for this instantLocal.
+                     // Rule: Favour DST (return the larger offset).
+                     return Math.max(offsetResult2, offsetAlt);
+                }
+            }
+        } else {
+            // Iteration did not converge (offsetResult1 != offsetResult2).
+            // This typically indicates ambiguity near a transition (gap or overlap).
+            // Rule: Favour DST (return the larger offset).
+            // The two different offsets should be the ones defining the transition.
+            return Math.max(offsetResult1, offsetResult2);
         }
-        return offsetAdjusted;
     }
\ No newline at end of file
