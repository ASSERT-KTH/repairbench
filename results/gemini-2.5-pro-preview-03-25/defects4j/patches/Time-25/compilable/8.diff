diff --git a/tmp/e9de7673-afc1-4be0-9e2f-7974038b062c_buggy.java b/tmp/d2766ca9-6f91-4dbc-8329-d665f7031b26_fixed.java
index 05aaf2d..036b164 100644
--- a/tmp/e9de7673-afc1-4be0-9e2f-7974038b062c_buggy.java
+++ b/tmp/d2766ca9-6f91-4dbc-8329-d665f7031b26_fixed.java
@@ -1,56 +1,88 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+        // get the offset guess at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
-                }
-            }
-        }
+
+        // If the offsets match, we are not near a transition or the guess was correct.
+        if (offsetLocal == offsetAdjusted) {
             return offsetAdjusted;
         }
+
+        // We are near a transition. Check if both offsets can produce the same local time.
+        // utc1 = instantLocal - offsetLocal
+        // local1 = utc1 + getOffset(utc1)
+        long utc1 = instantLocal - offsetLocal;
+        // Recheck offset at utc1 as it might differ from offsetAdjusted if zone rules changed near instantLocal
+        int offsetAtUtc1 = getOffset(utc1);
+        boolean localWorks = (utc1 + offsetAtUtc1 == instantLocal);
+
+        // utc2 = instantLocal - offsetAdjusted
+        // local2 = utc2 + getOffset(utc2)
+        long utc2 = instantLocal - offsetAdjusted;
+        // Recheck offset at utc2 as it might differ from offsetAdjusted if zone rules changed near instantLocal - offsetLocal
+        int offsetAtUtc2 = getOffset(utc2);
+        boolean adjustedWorks = (utc2 + offsetAtUtc2 == instantLocal);
+
+        if (localWorks && adjustedWorks) {
+            // Overlap detected: Both offsets produce the given local time.
+            // Return the earlier instant's offset (Daylight Saving Time).
+            // DST offset is the larger offset (less negative or more positive).
+            return Math.max(offsetLocal, offsetAdjusted);
+        } else if (localWorks) {
+             // Gap detected: Only offsetLocal works. offsetAdjusted implies the instant is in the gap.
+             // Return the offset for the time *before* the gap (Standard Time).
+             // Standard offset is the smaller offset (more negative or less positive).
+            return offsetLocal; // offsetLocal is the one that worked. Return it. (it implies standard time for a gap)
+        } else if (adjustedWorks) {
+             // Gap detected: Only offsetAdjusted works. offsetLocal implies the instant is in the gap.
+             // Return the offset for the time *before* the gap (Standard Time).
+             // Standard offset is the smaller offset (more negative or less positive).
+             // Since adjustedWorks=true, utc2 is a valid instant. offsetAtUtc2 is its offset.
+             // We need the offset that corresponds to standard time across the transition.
+             // If offsetAdjusted > offsetLocal, offsetLocal is the standard offset.
+             // If offsetAdjusted < offsetLocal, offsetAdjusted is the standard offset? No, DST->STD overlap, not gap.
+             // For a gap (STD->DST), offsetLocal will be the standard offset.
+             // So return offsetLocal which is std offset.
+             return offsetLocal;
+        } else {
+            // Neither offset combination works. This case is theoretically impossible for valid zones and instants,
+            // but as a fallback, favour DST, which corresponds to the largest offset.
+            // This matches the overlap behaviour.
+            return Math.max(offsetLocal, offsetAdjusted);
+        }
+    }
\ No newline at end of file
