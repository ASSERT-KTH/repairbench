diff --git a/tmp/0267735b-15c3-4e3c-b07a-12be6b3be21a_buggy.java b/tmp/05d085d7-7a4d-4c66-893f-fe9e1a32fec1_fixed.java
index 05aaf2d..bab7703 100644
--- a/tmp/0267735b-15c3-4e3c-b07a-12be6b3be21a_buggy.java
+++ b/tmp/05d085d7-7a4d-4c66-893f-fe9e1a32fec1_fixed.java
@@ -1,56 +1,96 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
+
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
             // we need to ensure that time is always after the DST gap
             // this happens naturally for positive offsets, but not for negative
             if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+                // Gap scenario. offsetLocal is offset before gap, offsetAdjusted is offset after gap.
+                // Check if recalculating the instant using offsetAdjusted causes a shift
+                // in the next transition time. If so, assume offsetAdjusted is incorrect
+                // for this local time and return offsetLocal instead (original logic).
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
+                // Otherwise fall through to return offsetAdjusted (offset after gap)
+            } else {
+                // Overlap scenario identified by offsetLocal > offsetAdjusted.
+                // offsetLocal is the offset before transition (DST),
+                // offsetAdjusted is the offset after transition (STD).
+                // Return offsetLocal as per Javadoc (favour earlier instant / DST).
+                return offsetLocal;
             }
         }
+        
+        // If offsetLocal == offsetAdjusted, or if gap logic fell through.
+        // We must still check for an overlap ambiguity where the initial guess
+        // using instantLocal as UTC might have coincidentally picked the standard time offset.
+        
+        // Calculate the UTC instant based on the consistent offset 'offsetAdjusted'.
+        long instantUTC = instantLocal - offsetAdjusted;
+        // Find the timestamp of the last transition strictly before this UTC instant.
+        // Use 'true' for strictly previous, ensuring we don't get the transition instant itself.
+        long trans = previousTransition(instantUTC, true);
+        if (trans != Long.MIN_VALUE) { // Check if a previous transition exists.
+            // Get the offset that was active right before this transition.
+            int offsetBefore = getOffset(trans - 1);
+            // Check if the offset actually changed at this transition.
+            if (offsetBefore != offsetAdjusted) {
+                // If the offset changed, check if the local time 'instantLocal'
+                // could also have occurred validly with this 'offsetBefore'.
+                long instantUTCAlt = instantLocal - offsetBefore;
+                // Verify that this alternative UTC instant has the correct offset ('offsetBefore')
+                // AND that it occurred before the transition time 'trans'. This ensures it's the first occurrence.
+                if (getOffset(instantUTCAlt) == offsetBefore && instantUTCAlt < trans) {
+                    // Ambiguous local time (overlap) confirmed.
+                    // Return the offset associated with the earlier instant (DST).
+                    return offsetBefore;
+                }
+            }
+        }
+
+        // Default case: Return the consistent offset 'offsetAdjusted'.
+        // This applies if it's not near a transition, after a gap (where next transitions matched),
+        // or the second occurrence in an overlap (where the alternative check failed).
         return offsetAdjusted;
     }
\ No newline at end of file
