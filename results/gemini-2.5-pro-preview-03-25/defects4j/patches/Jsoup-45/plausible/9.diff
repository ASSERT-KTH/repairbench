diff --git a/tmp/602f46dd-5af0-496b-9b52-9ba8983340f3_buggy.java b/tmp/0c17a437-aa61-4eb2-923d-44c1fd9ff8da_fixed.java
index 135fc63..20253d0 100644
--- a/tmp/602f46dd-5af0-496b-9b52-9ba8983340f3_buggy.java
+++ b/tmp/0c17a437-aa61-4eb2-923d-44c1fd9ff8da_fixed.java
@@ -1,48 +1,71 @@
     void resetInsertionMode() {
         boolean last = false;
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element node = stack.get(pos);
             if (pos == 0) {
                 last = true;
+                // Ensure contextElement is used if it exists, especially for fragment parsing.
+                if (contextElement != null) {
                     node = contextElement;
                 }
+            }
+            
+            // The node might be null if contextElement is null and pos is 0.
+            // This shouldn't happen in typical scenarios but guard against NullPointerException.
+            if (node == null) { 
+                 // Or handle appropriately, e.g., default to InBody or throw an error
+                 transition(HtmlTreeBuilderState.InBody); // Default or safe fallback
+                 break;
+            }
+
             String name = node.nodeName();
             if ("select".equals(name)) {
                 transition(HtmlTreeBuilderState.InSelect);
                 break; // frag
-            } else if (("td".equals(name) || "td".equals(name) && !last)) {
+            } else if (("td".equals(name) || "th".equals(name)) && !last) { // ** FIX: Corrected condition to include "th" **
                 transition(HtmlTreeBuilderState.InCell);
                 break;
             } else if ("tr".equals(name)) {
                 transition(HtmlTreeBuilderState.InRow);
                 break;
             } else if ("tbody".equals(name) || "thead".equals(name) || "tfoot".equals(name)) {
                 transition(HtmlTreeBuilderState.InTableBody);
                 break;
             } else if ("caption".equals(name)) {
                 transition(HtmlTreeBuilderState.InCaption);
                 break;
             } else if ("colgroup".equals(name)) {
                 transition(HtmlTreeBuilderState.InColumnGroup);
                 break; // frag
             } else if ("table".equals(name)) {
                 transition(HtmlTreeBuilderState.InTable);
                 break;
             } else if ("head".equals(name)) {
-                transition(HtmlTreeBuilderState.InBody);
-                break; // frag
+                 // Per spec: if last is false, transition to InHead. Otherwise fall through.
+                 // However, jsoup's behavior might rely on transitioning to InBody here.
+                 // Keeping original behavior unless further tests indicate otherwise.
+                transition(HtmlTreeBuilderState.InBody); // frag - Note: Spec says InHead if !last
+                break;
             } else if ("body".equals(name)) {
                 transition(HtmlTreeBuilderState.InBody);
                 break;
             } else if ("frameset".equals(name)) {
                 transition(HtmlTreeBuilderState.InFrameset);
                 break; // frag
             } else if ("html".equals(name)) {
-                transition(HtmlTreeBuilderState.BeforeHead);
-                break; // frag
+                 // Per spec: depends on head element pointer. Simplified in jsoup.
+                 // Keeping original behavior.
+                transition(HtmlTreeBuilderState.BeforeHead); // frag
+                break;
             } else if (last) {
-                transition(HtmlTreeBuilderState.InBody);
-                break; // frag
+                // Reached the top of the stack or context element without matching specific container
+                transition(HtmlTreeBuilderState.InBody); // frag
+                break;
             }
         }
+        // If the loop completes without breaking (e.g., empty stack), what should happen?
+        // The current code does nothing, leaving the state unchanged. This might be intended
+        // or could be a potential issue if the stack is unexpectedly empty. However,
+        // given the loop condition `pos >= 0` and `stack.size() - 1`, it won't run for an empty stack.
+        // If stack has elements, `last=true` case ensures a break.
     }
\ No newline at end of file
