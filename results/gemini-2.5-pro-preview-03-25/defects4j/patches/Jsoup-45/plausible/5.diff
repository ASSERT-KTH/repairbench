diff --git a/tmp/ab2f4d7f-eb1a-4a2e-94a1-1c02a9d5e4e2_buggy.java b/tmp/d7d01196-e294-4f05-bb7f-4a22d602a67f_fixed.java
index 135fc63..5cbfbe0 100644
--- a/tmp/ab2f4d7f-eb1a-4a2e-94a1-1c02a9d5e4e2_buggy.java
+++ b/tmp/d7d01196-e294-4f05-bb7f-4a22d602a67f_fixed.java
@@ -1,48 +1,64 @@
     void resetInsertionMode() {
         boolean last = false;
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element node = stack.get(pos);
             if (pos == 0) {
                 last = true;
+                // If stack is empty, use contextElement. If stack not empty,
+                // the loop bottom is element 0, but contextElement should only be used
+                // in fragment parsing case where stack might not logically start with <html>.
+                // Assuming contextElement is set correctly for fragment parsing.
+                // Original code used contextElement unconditionally at pos 0.
                 node = contextElement;
             }
+
+            // node could be null if contextElement is null and pos is 0.
+            if (node == null) {
+                continue; // Or break, but continuing iteration seems less likely to cause issues.
+            }
+
             String name = node.nodeName();
             if ("select".equals(name)) {
                 transition(HtmlTreeBuilderState.InSelect);
                 break; // frag
-            } else if (("td".equals(name) || "td".equals(name) && !last)) {
+            } else if (("td".equals(name) || "th".equals(name)) && !last) { // FIXED: corrected logic to check for "td" or "th" and respect !last flag per HTML5 spec.
                 transition(HtmlTreeBuilderState.InCell);
                 break;
             } else if ("tr".equals(name)) {
                 transition(HtmlTreeBuilderState.InRow);
                 break;
             } else if ("tbody".equals(name) || "thead".equals(name) || "tfoot".equals(name)) {
                 transition(HtmlTreeBuilderState.InTableBody);
                 break;
             } else if ("caption".equals(name)) {
                 transition(HtmlTreeBuilderState.InCaption);
                 break;
             } else if ("colgroup".equals(name)) {
                 transition(HtmlTreeBuilderState.InColumnGroup);
                 break; // frag
             } else if ("table".equals(name)) {
                 transition(HtmlTreeBuilderState.InTable);
                 break;
             } else if ("head".equals(name)) {
+                // According to spec, should be InHead unless !last is false.
+                // However, Jsoup historically transitions to InBody here, possibly related to foster parenting.
+                // Keep InBody transition as it might be intentional for Jsoup's behavior.
                 transition(HtmlTreeBuilderState.InBody);
                 break; // frag
             } else if ("body".equals(name)) {
                 transition(HtmlTreeBuilderState.InBody);
                 break;
             } else if ("frameset".equals(name)) {
                 transition(HtmlTreeBuilderState.InFrameset);
                 break; // frag
             } else if ("html".equals(name)) {
+                // Spec says BeforeHead or AfterHead depending on head element pointer. Jsoup uses BeforeHead.
                 transition(HtmlTreeBuilderState.BeforeHead);
                 break; // frag
             } else if (last) {
+                // Reached end of stack or context node in fragment case.
                 transition(HtmlTreeBuilderState.InBody);
                 break; // frag
             }
         }
     }
\ No newline at end of file
