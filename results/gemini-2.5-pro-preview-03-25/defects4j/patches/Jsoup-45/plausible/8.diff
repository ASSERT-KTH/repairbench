diff --git a/tmp/53496a45-0059-4cd1-983c-fc8344ce0eef_buggy.java b/tmp/4058aa55-f7de-4f44-9008-405e8f91e035_fixed.java
index 135fc63..87ea339 100644
--- a/tmp/53496a45-0059-4cd1-983c-fc8344ce0eef_buggy.java
+++ b/tmp/4058aa55-f7de-4f44-9008-405e8f91e035_fixed.java
@@ -1,48 +1,61 @@
     void resetInsertionMode() {
         boolean last = false;
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element node = stack.get(pos);
             if (pos == 0) {
                 last = true;
+                // If fragment parsing, use the context element.
+                // Check using contextElement != null as a proxy for "fragment parsing algorithm".
+                if (contextElement != null) {
                     node = contextElement;
                 }
+                // If not fragment parsing (contextElement is null), node remains stack.get(0) (the html element).
+            }
+
+            // Ensure node is not null before proceeding. Should not happen in normal operation
+            // as stack(0) should exist and contextElement is checked for null.
+            if (node == null) continue; // Defensively continue loop if node is somehow null
+
             String name = node.nodeName();
             if ("select".equals(name)) {
                 transition(HtmlTreeBuilderState.InSelect);
                 break; // frag
-            } else if (("td".equals(name) || "td".equals(name) && !last)) {
+            } else if (("td".equals(name) || "th".equals(name)) && !last) { // Fixed: check for th, not td twice
                 transition(HtmlTreeBuilderState.InCell);
                 break;
             } else if ("tr".equals(name)) {
                 transition(HtmlTreeBuilderState.InRow);
                 break;
             } else if ("tbody".equals(name) || "thead".equals(name) || "tfoot".equals(name)) {
                 transition(HtmlTreeBuilderState.InTableBody);
                 break;
             } else if ("caption".equals(name)) {
                 transition(HtmlTreeBuilderState.InCaption);
                 break;
             } else if ("colgroup".equals(name)) {
                 transition(HtmlTreeBuilderState.InColumnGroup);
                 break; // frag
             } else if ("table".equals(name)) {
                 transition(HtmlTreeBuilderState.InTable);
                 break;
             } else if ("head".equals(name)) {
+                // Note: spec says InHead, Jsoup uses InBody - may differ for fragments. Keep existing logic.
                 transition(HtmlTreeBuilderState.InBody);
                 break; // frag
             } else if ("body".equals(name)) {
                 transition(HtmlTreeBuilderState.InBody);
                 break;
             } else if ("frameset".equals(name)) {
                 transition(HtmlTreeBuilderState.InFrameset);
                 break; // frag
             } else if ("html".equals(name)) {
+                // Note: spec logic depends on head element pointer; Jsoup uses BeforeHead. Keep existing logic.
                 transition(HtmlTreeBuilderState.BeforeHead);
                 break; // frag
             } else if (last) {
+                // Fragment parsing fallback
                 transition(HtmlTreeBuilderState.InBody);
                 break; // frag
             }
         }
     }
\ No newline at end of file
