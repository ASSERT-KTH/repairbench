diff --git a/tmp/02ab25f5-6a94-42a8-b252-4af0145c2a91_buggy.java b/tmp/e378df7d-c94f-48ba-b9e3-798579cae62d_fixed.java
index d5b3da9..08fb28c 100644
--- a/tmp/02ab25f5-6a94-42a8-b252-4af0145c2a91_buggy.java
+++ b/tmp/e378df7d-c94f-48ba-b9e3-798579cae62d_fixed.java
@@ -1,7 +1,25 @@
-        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
-            for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-                String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
+        private void copyAttributes(org.jsoup.nodes.Node source, org.w3c.dom.Element el) {
+            // Using a pre-compiled pattern is generally more efficient if this method is called often.
+            // Consider making XML_NAME_PATTERN a static final member of the surrounding class.
+            // Pattern for valid XML attribute names (simplified).
+            // XML spec: https://www.w3.org/TR/xml/#NT-Name
+            // Checks if name starts with letter, underscore, or colon,
+            // followed by letters, digits, hyphen, underscore, colon, or period.
+            final java.util.regex.Pattern XML_NAME_PATTERN = java.util.regex.Pattern.compile("[a-zA-Z_:][-a-zA-Z0-9_:.]*");
+
+            for (org.jsoup.nodes.Attribute attribute : source.attributes()) {
+                String key = attribute.getKey();
+
+                // Check if the attribute key is a valid XML name.
+                // Jsoup's HTML parser permits attribute names that are invalid in XML (e.g., containing quotes).
+                // W3C DOM `setAttribute` requires valid XML names, otherwise it throws a DOMException.
+                if (XML_NAME_PATTERN.matcher(key).matches()) {
+                    // If the key is a valid XML name, set the attribute.
                     el.setAttribute(key, attribute.getValue());
                 }
+                // else: If the key is not a valid XML name, skip this attribute to avoid the DOMException.
+                // The original code attempted to sanitize the key, but the sanitization was
+                // insufficient and could still lead to invalid names (e.g., empty string, starting with digit).
+                // Skipping is a safer approach to prevent errors during conversion.
+            }
         }
\ No newline at end of file
