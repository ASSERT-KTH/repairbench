diff --git a/tmp/32b14d03-3357-4a50-898f-8571da18dbbd_buggy.java b/tmp/785faa2c-71a8-454d-97d5-cb9456fdea15_fixed.java
index d5b3da9..1e5942f 100644
--- a/tmp/32b14d03-3357-4a50-898f-8571da18dbbd_buggy.java
+++ b/tmp/785faa2c-71a8-454d-97d5-cb9456fdea15_fixed.java
@@ -1,7 +1,43 @@
         private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
             for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
+                // Attempt to sanitize the attribute key by removing characters invalid in XML names
+                // XML name constraints: Must start with letter, '_', or ':', subsequent chars can be letter, digit, '.', '-', '_', ':'
+                // Simplified rule used here: remove chars not in [-a-zA-Z0-9_:.]
                 String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
+
+                // Check if the sanitized key is a valid XML Name.
+                // Must not be empty, must start with a letter, '_', or ':',
+                // and subsequent characters must be letters, digits, '-', '.', '_', or ':'.
+                if (key.isEmpty()) {
+                    continue; // Skip if the key becomes empty after sanitization
+                }
+                char start = key.charAt(0);
+                boolean valid = true;
+                if (!Character.isLetter(start) && start != '_' && start != ':') {
+                    valid = false; // Invalid start character
+                } else {
+                    // Check subsequent characters
+                    for (int i = 1; i < key.length(); i++) {
+                        char c = key.charAt(i);
+                        if (!Character.isLetterOrDigit(c) && c != '-' && c != '.' && c != '_' && c != ':') {
+                            valid = false; // Invalid subsequent character
+                            break;
+                        }
+                    }
+                }
+
+                // Only set the attribute if the sanitized key is a valid XML name.
+                if (valid) {
+                    try {
                         el.setAttribute(key, attribute.getValue());
+                    } catch (org.w3c.dom.DOMException e) {
+                        // While the check above covers most cases, the XML spec is complex.
+                        // Catching the exception provides a fallback for edge cases not covered
+                        // by the simplified validation logic. For instance, names starting with "xml" (case-insensitive)
+                        // are reserved. Instead of adding complex checks, we catch the exception if the DOM impl rejects it.
+                        // Log or handle the exception if necessary, but for repair, we skip the attribute.
+                    }
+                }
+                // else: skip the attribute if the sanitized key is not a valid XML name.
             }
         }
\ No newline at end of file
