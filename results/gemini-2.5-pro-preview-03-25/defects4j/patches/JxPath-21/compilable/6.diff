diff --git a/tmp/12a1e3ba-59be-4791-b376-76be785561e5_buggy.java b/tmp/a967806a-24b2-437f-a8a8-814d998fa6be_fixed.java
index 516fad7..f0f4031 100644
--- a/tmp/12a1e3ba-59be-4791-b376-76be785561e5_buggy.java
+++ b/tmp/a967806a-24b2-437f-a8a8-814d998fa6be_fixed.java
@@ -1,8 +1,25 @@
     /**
      * If the property contains a collection, then the length of that
      * collection, otherwise - 1.
      * @return int length
      */
     public int getLength() {
-        return ValueUtils.getLength(getBaseValue());
+        Object baseValue = getBaseValue();
+        // According to test JXPath151Test and MixedModelTest#testNull,
+        // a null property value should behave like a collection of size 1
+        // containing null, allowing indexed access like property[1] to yield null.
+        if (baseValue == null) {
+            return 1;
+        }
+        // Check if the base value is a Collection, Array, or JXPath Container
+        // Use fully qualified name to avoid assuming imports.
+        if (org.apache.commons.jxpath.util.ValueUtils.isCollection(baseValue)) {
+             // For actual collections/arrays, return their size using ValueUtils.getLength
+             // ValueUtils.getLength handles Collections, Arrays, and Containers correctly.
+             return org.apache.commons.jxpath.util.ValueUtils.getLength(baseValue);
+        }
+        // For non-null, non-collection objects (scalars like String, Number, Boolean),
+        // return -1 as specified in the Javadoc comment ("otherwise - 1").
+        // This distinguishes scalar properties from collections of size 1.
+        return -1;
     }
\ No newline at end of file
