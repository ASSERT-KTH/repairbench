diff --git a/tmp/be90657c-ea5b-495e-86d8-51f6bc7e5c9d_buggy.java b/tmp/d6c1531b-6d10-42d8-b295-85aabf09ddaf_fixed.java
index 516fad7..54d00b8 100644
--- a/tmp/be90657c-ea5b-495e-86d8-51f6bc7e5c9d_buggy.java
+++ b/tmp/d6c1531b-6d10-42d8-b295-85aabf09ddaf_fixed.java
@@ -1,8 +1,21 @@
     /**
      * If the property contains a collection, then the length of that
      * collection, otherwise - 1.
      * @return int length
      */
     public int getLength() {
-        return ValueUtils.getLength(getBaseValue());
+        // Fix for JXPATH-151: A null value should not be treated as a collection of size 0.
+        // According to the Javadoc, if the property does not contain a collection (which null doesn't),
+        // the method should return -1. The original call ValueUtils.getLength(null) returned 0,
+        // causing JXPath to treat null properties as empty collections, failing predicates like [1].
+        Object baseValue = getBaseValue();
+        if (baseValue == null) {
+            return -1; // Treat null as a single value, not an empty collection.
+        }
+        // For non-null values, delegate to ValueUtils.
+        // Note: ValueUtils.getLength might return 1 for non-collection scalar values,
+        // which seems to be the expected behavior in JXPath for such cases,
+        // differing slightly from the "otherwise -1" in the Javadoc.
+        // We preserve this behavior for non-null values.
+        return ValueUtils.getLength(baseValue);
     }
\ No newline at end of file
