diff --git a/tmp/3c48d829-bcd2-4261-b193-01fd7d56eafa_buggy.java b/tmp/f695e011-3174-4026-94f9-2de774559420_fixed.java
index 516fad7..27aaa52 100644
--- a/tmp/3c48d829-bcd2-4261-b193-01fd7d56eafa_buggy.java
+++ b/tmp/f695e011-3174-4026-94f9-2de774559420_fixed.java
@@ -1,8 +1,25 @@
     /**
      * If the property contains a collection, then the length of that
      * collection, otherwise - 1.
      * @return int length
      */
     public int getLength() {
-        return ValueUtils.getLength(getBaseValue());
+        // Get the base value of the property this pointer points to.
+        Object baseValue = getBaseValue();
+
+        // Check if the base value is considered a collection by ValueUtils.
+        // ValueUtils.isCollection returns true for arrays, Collections, and NodeSets.
+        // It returns false for null and other object types.
+        if (ValueUtils.isCollection(baseValue)) {
+            // If it is a collection, return its length using ValueUtils.getLength.
+            // ValueUtils.getLength correctly handles arrays, Collections, NodeSets.
+            // For empty collections, ValueUtils.getLength returns 0.
+            return ValueUtils.getLength(baseValue);
+        }
+        else {
+            // If the base value is not a collection (including the case where baseValue is null),
+            // return -1 as specified by the method's Javadoc contract.
+            // This indicates that the property does not represent a collection.
+            return -1;
+        }
     }
\ No newline at end of file
