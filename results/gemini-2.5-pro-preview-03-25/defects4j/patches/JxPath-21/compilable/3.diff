diff --git a/tmp/a2b97a63-2dc1-47da-92ef-cb6db2ad1299_buggy.java b/tmp/0637e429-07b2-450d-81d9-fa361cf58d4e_fixed.java
index 516fad7..68e397c 100644
--- a/tmp/a2b97a63-2dc1-47da-92ef-cb6db2ad1299_buggy.java
+++ b/tmp/0637e429-07b2-450d-81d9-fa361cf58d4e_fixed.java
@@ -1,8 +1,23 @@
     /**
-     * If the property contains a collection, then the length of that
-     * collection, otherwise - 1.
+     * Returns the number of elements represented by this property.
+     * Returns the collection/array size if the value is a collection/array.
+     * Returns 1 for scalar values.
+     * Returns 0 if the value is null.
+     * The original Javadoc ("If the property contains a collection, then the length of that collection, otherwise - 1.")
+     * appears to be incorrect/outdated compared to the typical behavior expected and implemented in ValueUtils (which returned 1 for null).
+     * Returning 0 for null aligns better with the observed test failures where accessing index [1] of a null property fails.
      * @return int length
      */
     public int getLength() {
-        return ValueUtils.getLength(getBaseValue());
+        Object value = getBaseValue();
+        // Handle null explicitly: treat as length 0.
+        // This deviates from ValueUtils.getLength(null) which returns 1,
+        // but seems necessary to address failures where index [1] on null yields empty instead of [null].
+        // By returning 0, we indicate there are no accessible elements via index.
+        if (value == null) {
+            return 0;
+        }
+        // For non-null values, delegate to ValueUtils which correctly handles
+        // collections, arrays, and scalars (returning 1 for scalars).
+        return ValueUtils.getLength(value);
     }
\ No newline at end of file
