diff --git a/tmp/702a06cf-16cb-4f2f-a1d7-5fd8ecd1fb20_buggy.java b/tmp/84c5eba8-ac05-4b1e-92af-877b9321f185_fixed.java
index ef65dd9..eaa0957 100644
--- a/tmp/702a06cf-16cb-4f2f-a1d7-5fd8ecd1fb20_buggy.java
+++ b/tmp/84c5eba8-ac05-4b1e-92af-877b9321f185_fixed.java
@@ -1,92 +1,166 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
+    // Ensure the structure is <array>.join(<separator>)
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+    // Check if it's an array literal and the function is "join"
+    if (arrayNode.getToken() != Token.ARRAYLIT ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
+    // getStringValue returns "null" for null, "undefined" for undefined.
+    // Per JS spec, null separator is treated as "null", undefined is ",".
+    // This optimization currently uses the string value, so join(null) becomes
+    // join("null") and join(undefined) becomes join("undefined").
+    // This differs from spec for undefined separator. Handling this precisely
+    // would require checking right for VOID token specifically.
+    // For now, proceed with the getStringValue result for the separator.
+    if (joinString == null) {
+       // Should not happen due to isImmutableValue check.
+       return;
+    }
+
+
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
-    int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    Node lastConstant = null; // Track node for position info for the combined string node
+
+    // Merges adjacent constant elements.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
+          // Append separator if this is not the first piece of the constant block
           sb.append(joinString);
         }
+        // Array.prototype.join treats null and undefined elements as empty strings.
+        if (!elem.isNull() && !elem.isVoid()) {
           sb.append(NodeUtil.getStringValue(elem));
+        }
+        lastConstant = elem;
       } else {
+        // Hit a non-constant element
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+          // Add the accumulated string literal node
+          Node newNode = Node.newString(sb.toString());
+          // Try to preserve position info. Use last constant node's info.
+          if (lastConstant != null) {
+            newNode.copyInformationFrom(lastConstant);
           }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+          arrayFoldedChildren.add(newNode);
+          sb = new StringBuilder(); // Reset
+        }
+        arrayFoldedChildren.add(elem.cloneTree()); // Add clone of non-constant
+        lastConstant = null; // Reset
       }
       elem = elem.getNext();
     }
 
+    // Add any remaining accumulated string node
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+      Node newNode = Node.newString(sb.toString());
+      // Try to preserve position info
+      if (lastConstant != null) {
+        newNode.copyInformationFrom(lastConstant);
       }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+      arrayFoldedChildren.add(newNode);
+    }
+
+    // Check if the folding resulted in any change. If the result is identical
+    // to the original array literal's children, don't do anything.
+    // Exception: If the number of children is 1 and it's a string, we always fold.
+    if (arrayFoldedChildren.size() != 1 || !arrayFoldedChildren.get(0).isString()) {
+      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+        boolean identical = true;
+        Node cur = arrayNode.getFirstChild();
+        for (Node folded : arrayFoldedChildren) {
+          // Simple check: if node instances differ, assume change.
+          // This works because non-constants are cloned and constants are replaced by new string nodes.
+          if (folded != cur) {
+            identical = false;
+            break;
+          }
+          cur = cur.getNext();
+        }
+        if (identical) {
+          return; // No change occurred.
+        }
+      }
+    }
+
 
     int originalSize = InlineCostEstimator.getCost(n);
+    int foldedSize = -1; // Calculated when needed
+
     switch (arrayFoldedChildren.size()) {
-      case 0:
+      case 0: // All elements folded to empty strings or original array was empty
         Node emptyStringNode = Node.newString("");
+        foldedSize = InlineCostEstimator.getCost(emptyStringNode);
+        // Prevent increase in code size, e.g. [].join() -> "" is fine.
+        if (foldedSize <= originalSize) {
+          emptyStringNode.copyInformationFromForTree(n);
           parent.replaceChild(n, emptyStringNode);
-        break;
+          t.getCompiler().reportCodeChange();
+        }
+        break; // Added break
 
       case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
+        Node foldedNode = arrayFoldedChildren.get(0);
+        if (foldedNode.isString()) {
+          // Folded to a single string literal. Always replace.
+          // No size check, assuming the folded constant is simpler/better.
+          foldedNode.copyInformationFromForTree(n);
+          parent.replaceChild(n, foldedNode);
+          t.getCompiler().reportCodeChange();
+        } else {
+          // Single non-string element left e.g. [foo].join(',') -> "" + foo
+          // Coercion to string is implicit in join, explicit with "" + foo.
+          // Check if "" + foo is smaller than original join call.
+          Node replacement = new Node(Token.ADD, Node.newString(""), foldedNode);
+          foldedSize = InlineCostEstimator.getCost(replacement);
+          if (foldedSize <= originalSize) {
+            replacement.copyInformationFromForTree(n);
+            parent.replaceChild(n, replacement);
+            t.getCompiler().reportCodeChange();
           }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
         }
-        parent.replaceChild(n, foldedStringNode);
-        break;
+        break; // Added break
 
       default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
+        // Array partially folded. Modify the array node in place if smaller.
+
+        // Estimate cost of the new expression: [folded1, folded2, ...].join(right)
+        int kJoinOverhead = "[].join()".length(); // Rough estimate
+        int newArraySizeCost = 0;
+        for(Node node : arrayFoldedChildren) {
+            newArraySizeCost += InlineCostEstimator.getCost(node);
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
+        if (arrayFoldedChildren.size() > 1) {
+            newArraySizeCost += arrayFoldedChildren.size() -1; // Commas
         }
+        foldedSize = newArraySizeCost + kJoinOverhead + InlineCostEstimator.getCost(right);
+
+        if (foldedSize <= originalSize) {
             arrayNode.detachChildren();
             for (Node node : arrayFoldedChildren) {
+              // Nodes in list are either new strings or clones. Safe to add directly.
               arrayNode.addChildToBack(node);
             }
-        break;
-    }
+            // Propagate source info? Modifying in place might be okay.
+            n.copyInformationFromForTree(n); // Update source info on call node?
             t.getCompiler().reportCodeChange();
         }
+        break; // Added break
+    }
+    // Note: No general reportCodeChange() at the end anymore. It's reported in each case.
+  }
\ No newline at end of file
