diff --git a/tmp/f46cdf76-9107-421b-a557-c31a7c0f66e3_buggy.java b/tmp/8514e6a3-193b-41d8-87e3-7614141e3427_fixed.java
index ef65dd9..8a34813 100644
--- a/tmp/f46cdf76-9107-421b-a557-c31a7c0f66e3_buggy.java
+++ b/tmp/8514e6a3-193b-41d8-87e3-7614141e3427_fixed.java
@@ -1,92 +1,214 @@
+import com.google.common.collect.Lists;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+
+import java.util.List;
+
+// NOTE: This code snippet assumes the existence of NodeUtil, InlineCostEstimator, NodeTraversal,
+// AbstractCompiler, and Lists classes/methods with expected functionalities from the Closure Compiler codebase.
+
+class FixFoldStringJoin { // Helper class to contain the fixed method
+
+  // Assume these are accessible from the context where the method is used.
+  // static class NodeUtil { ... }
+  // static class InlineCostEstimator { ... }
+  // static class Lists { ... }
+  // static class NodeTraversal { AbstractCompiler getCompiler(); ... }
+  // static class AbstractCompiler { void reportCodeChange(); ... }
+
+
+  /** Helper to get string value for join, treating null/undefined/hole as empty string. */
+  private String getStringValueForJoin(Node n) {
+    // According to JS .join spec, null and undefined elements are treated as empty strings.
+    // Array holes are also treated similarly.
+    if (n == null || n.isNull() || n.isVoid() || n.isEmpty()) {
+        return "";
+    }
+    // For other immutable types (string, number, boolean), rely on NodeUtil.getStringValue.
+    // Assumes NodeUtil.getStringValue correctly converts numbers and booleans to strings.
+    return NodeUtil.getStringValue(n);
+  }
+
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
+    // Structure must be call(getprop(potentialArray, "join"), joiner)
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
-    Node functionName = arrayNode.getNext();
+    Node functionName = arrayNode.getNext(); // Should be the "join" string node
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+    // Check array literal and function name
+    if (arrayNode == null || !arrayNode.isArrayLit() ||
+        functionName == null || !functionName.isString() ||
         !functionName.getString().equals("join")) {
       return;
     }
 
+    // getStringValue handles null/undefined joiner returning "", number/boolean conversion.
+    // JS default for null/undefined joiner is ",", this fold might be incorrect if 'right'
+    // is explicitly null/undefined. We proceed assuming common literal joiners.
     String joinString = NodeUtil.getStringValue(right);
+
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
-    int foldedSize = 0;
+    boolean lastElemWasImmutable = false;
+    // Track if any non-string immutable values were folded, which might
+    // require converting the joiner node to a string node later.
+    boolean needsJoinerStringified = !right.isString();
+
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+      // Handle array holes [, , elem] - treated as empty strings
+      if (elem.isEmpty()) {
+        if (lastElemWasImmutable) {
           sb.append(joinString);
         }
-        sb.append(NodeUtil.getStringValue(elem));
-      } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+        // No need to append "", just track that we processed an immutable empty slot.
+        lastElemWasImmutable = true;
+        needsJoinerStringified = true; // Joining implies string context
+      } else if (NodeUtil.isImmutableValue(elem)) {
+        // Append joiner if concatenating immutable values
+        if (lastElemWasImmutable) {
+          sb.append(joinString);
+        }
+        sb.append(getStringValueForJoin(elem)); // Handles null/undefined as ""
+        lastElemWasImmutable = true;
+        if (!elem.isString()) {
+            needsJoinerStringified = true; // Number/bool/null/void require string context
+        }
+      } else { // Non-immutable element
+        // Flush the accumulated string if any immutable elements preceded this one.
+        if (lastElemWasImmutable) {
           arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+          sb = new StringBuilder(); // Reset builder
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
+        // Add the non-immutable element directly.
         arrayFoldedChildren.add(elem);
+        lastElemWasImmutable = false; // Reset flag
+        needsJoinerStringified = true; // Non-immutable element requires string context for join
       }
       elem = elem.getNext();
     }
 
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+    // After the loop, add the final accumulated string if the last elements were immutable.
+    if (lastElemWasImmutable) {
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
+    int foldedElementCount = arrayFoldedChildren.size();
+
+    switch (foldedElementCount) {
+      case 0: { // e.g., [].join(), [,].join() -> ""
         Node emptyStringNode = Node.newString("");
+        int estimatedFoldedCost = InlineCostEstimator.getCost(emptyStringNode);
+        // Only replace if cost is lower/equal, but always fold empty or hole-only arrays.
+        if (estimatedFoldedCost > originalSize && arrayNode.hasChildren() && !arrayNode.getFirstChild().isEmpty()) {
+           // Avoid replacing non-empty original with larger "" node, unless original was like [,]
+           return;
+        }
+        emptyStringNode.copyInformationFromForTree(n);
         parent.replaceChild(n, emptyStringNode);
+        t.getCompiler().reportCodeChange();
         break;
+      }
 
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
+      case 1: {
+        Node foldedElement = arrayFoldedChildren.get(0);
+        Node replacementNode;
+        int estimatedFoldedCost;
+
+        // Handle special case: [null].join() or [undefined].join() or [,].join() -> ""
+        Node originalFirstChild = arrayNode.hasChildren() ? arrayNode.getFirstChild() : null;
+        boolean isSingleNullUndefinedOrHole = foldedElementCount == 1 &&
+             (arrayNode.getChildCount() == 1 || (arrayNode.getChildCount() > 0 && originalFirstChild.getNext() == null)) && // check original structure had effectively one element
+             originalFirstChild != null && (originalFirstChild.isNull() || originalFirstChild.isVoid() || originalFirstChild.isEmpty());
+
+        if (isSingleNullUndefinedOrHole) {
+            replacementNode = Node.newString("");
+            estimatedFoldedCost = InlineCostEstimator.getCost(replacementNode);
+        } else if (foldedElement.isString()) {
+            // If the single element is already a string, result is that string. Clone it.
+            replacementNode = foldedElement.cloneTree();
+            estimatedFoldedCost = InlineCostEstimator.getCost(replacementNode);
+        } else {
+          // Otherwise, coerce to string: "" + element
+          replacementNode = new Node(Token.ADD, Node.newString(""), foldedElement.cloneTree());
+          // Estimate cost: cost("") + cost(+) + cost(element)
+          estimatedFoldedCost = InlineCostEstimator.getCost(Node.newString("")) + 1
+              + InlineCostEstimator.getCost(foldedElement);
         }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
+        replacementNode.copyInformationFromForTree(n);
+
+        if (estimatedFoldedCost > originalSize) {
+          return; // Fold didn't reduce size
         }
-        parent.replaceChild(n, foldedStringNode);
+
+        parent.replaceChild(n, replacementNode);
+        t.getCompiler().reportCodeChange();
         break;
+      }
 
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+      default: { // foldedElementCount > 1
+        // If the array structure hasn't changed meaningfully, bail.
+        // Simple check: if count is the same and joiner was already string, assume no benefit.
+        // A more complex check could compare elements, but count is a decent heuristic.
+        if (foldedElementCount == arrayNode.getChildCount() && !needsJoinerStringified) {
            return;
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
+
+        // Estimate cost of the new structure: [elem1, elem2, ...].join(joiner)
+        Node joinerNodeForCost = right;
+        // If joiner needs stringification (e.g., was number, or elements forced string context)
+        if (needsJoinerStringified && !right.isString()) {
+            // Use a temporary string node for cost estimation
+            joinerNodeForCost = Node.newString(joinString);
+        }
+        int joinerCost = InlineCostEstimator.getCost(joinerNodeForCost);
+        int kCallOverhead = 7; // Cost of ".join()" parts
+
+        // Calculate cost of the new array literal elements + commas + brackets
+        int arrayLiteralCost = 2; // Start with cost of []
+        boolean first = true;
+        for (Node elemNode : arrayFoldedChildren) {
+          if (!first) {
+            arrayLiteralCost += 1; // cost of comma
+          }
+          arrayLiteralCost += InlineCostEstimator.getCost(elemNode);
+          first = false;
         }
+
+        int estimatedFoldedCost = arrayLiteralCost + joinerCost + kCallOverhead;
+
+        if (estimatedFoldedCost > originalSize) {
+          return; // Fold didn't reduce size
+        }
+
+        // Modify the original array node in place
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+          // Clone nodes when adding them to the modified array
+          arrayNode.addChildToBack(node.cloneTree());
         }
-        break;
+        arrayNode.copyInformationFrom(arrayNode); // Update info on modified node
+
+        // Ensure the joiner ('right') node is a string if needed
+        if (needsJoinerStringified && !right.isString()) {
+            Node replacementJoiner = Node.newString(joinString);
+            replacementJoiner.copyInformationFrom(right);
+            // Replace the original joiner node in the CALL structure
+            n.replaceChild(right, replacementJoiner);
         }
+
+        // Report change as the array node (and possibly joiner) was modified.
         t.getCompiler().reportCodeChange();
+        break; // Break from switch
+      }
+    } // end switch
+  }
 }
\ No newline at end of file
