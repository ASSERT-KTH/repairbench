diff --git a/tmp/9bae7b7b-7aa9-408e-9d9f-b5deb39e3a70_buggy.java b/tmp/645f1272-d52c-49d4-a1a0-26dbeb5ac826_fixed.java
index 072c672..6e8bed3 100644
--- a/tmp/9bae7b7b-7aa9-408e-9d9f-b5deb39e3a70_buggy.java
+++ b/tmp/645f1272-d52c-49d4-a1a0-26dbeb5ac826_fixed.java
@@ -1,20 +1,46 @@
+import org.kohsuke.args4j.CmdLineException;
+import org.kohsuke.args4j.spi.Parameters;
+import org.kohsuke.args4j.spi.Setter;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+// Add necessary context/imports if they were missing from the original snippet
+// Assuming TRUES, FALSES, and setter are defined and accessible in the class context.
+// e.g.:
+// private static final Set<String> TRUES = new HashSet<>(Arrays.asList("true", "on", "yes", "1"));
+// private static final Set<String> FALSES = new HashSet<>(Arrays.asList("false", "off", "no", "0"));
+// private final Setter<Boolean> setter; // assuming setter is of type Setter<Boolean> or compatible
+
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
         String param = params.getParameter(0);
 
         if (param == null) {
+          // No argument followed the option (e.g., --flag). Default to true.
           setter.addValue(true);
+          // Consume 0 arguments *after* the option.
           return 0;
         } else {
           String lowerParam = param.toLowerCase();
           if (TRUES.contains(lowerParam)) {
             setter.addValue(true);
           } else if (FALSES.contains(lowerParam)) {
             setter.addValue(false);
           } else {
-            setter.addValue(true);
-            return 0;
+            // An argument was provided (e.g., --flag value), but it's not recognized
+            // as 'true' or 'false'. This is an error.
+            // The original code incorrectly defaulted the value to true AND returned 0,
+            // leaving the invalid 'param' unconsumed, leading to parsing errors later.
+            // Throw an exception indicating the invalid value.
+            // NOTE: Ideally, the exception message would include the option name,
+            // but we might not have easy access to it here.
+            throw new CmdLineException("\"" + param + "\" is not a valid boolean value");
+            // If an exception wasn't thrown, we should have consumed the argument.
+            // return 1; // This line is unreachable because of the throw statement.
           }
+          // If we reached here, a valid boolean ('true' or 'false') argument was provided.
+          // Consume 1 argument *after* the option.
           return 1;
         }
       }
\ No newline at end of file
