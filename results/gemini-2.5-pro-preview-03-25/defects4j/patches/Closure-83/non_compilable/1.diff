diff --git a/tmp/c22300ae-371d-45a8-a867-b93e8ac3af80_buggy.java b/tmp/70007cde-6f7c-4020-9b1e-7797c921bf8f_fixed.java
index 072c672..27d1f3a 100644
--- a/tmp/c22300ae-371d-45a8-a867-b93e8ac3af80_buggy.java
+++ b/tmp/70007cde-6f7c-4020-9b1e-7797c921bf8f_fixed.java
@@ -1,20 +1,44 @@
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
         String param = params.getParameter(0);
 
         if (param == null) {
+          // If the flag is present without any parameter, default to true.
+          // This handles cases like "--verbose" or "--version".
           setter.addValue(true);
+          // Return 0 because the flag itself consumes no additional parameters.
           return 0;
         } else {
           String lowerParam = param.toLowerCase();
           if (TRUES.contains(lowerParam)) {
+            // Handles "--booleanFlag true"
             setter.addValue(true);
+            // Return 1 because we consumed the "true" parameter.
+            return 1;
           } else if (FALSES.contains(lowerParam)) {
+            // Handles "--booleanFlag false"
             setter.addValue(false);
-          } else {
-            setter.addValue(true);
-            return 0;
-          }
+            // Return 1 because we consumed the "false" parameter.
             return 1;
+          } else {
+            // The parameter exists but is not recognized as "true" or "false".
+            // The original code assumed this meant the flag was present (set to true)
+            // and the parameter was unrelated (returned 0). This is standard for
+            // simple boolean switches that don't take arguments.
+            // However, if this handler is intended for flags where a following
+            // argument *must* be boolean if present, this case should be an error.
+            // Given the test failure (though indirect), let's assume the stricter
+            // contract: if a parameter is present, it must be a valid boolean string.
+            // Throw an exception for invalid values like "foo" in "--booleanFlag foo".
+            // Note: Need owner object, assuming setter provides access or it's a field.
+            // Assuming 'setter.getOwner()' gives the CmdLineParser object and
+            // Messages.ILLEGAL_BOOLEAN provides a standard error format string.
+            // If these are not available, a simpler generic message can be used.
+             throw new CmdLineException(setter.getOwner(),
+                 String.format("Invalid value '%s' for boolean option.", param));
+            // Original code was:
+            // setter.addValue(true);
+            // return 0;
+          }
         }
       }
\ No newline at end of file
