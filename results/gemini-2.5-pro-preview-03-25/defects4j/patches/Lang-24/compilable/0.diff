diff --git a/tmp/bf5d23fe-fb11-4cc3-84e1-ddbb0fc910c7_buggy.java b/tmp/eef7e750-a948-4f43-a99d-2b8c38378621_fixed.java
index 33b47bc..1219b12 100644
--- a/tmp/bf5d23fe-fb11-4cc3-84e1-ddbb0fc910c7_buggy.java
+++ b/tmp/eef7e750-a948-4f43-a99d-2b8c38378621_fixed.java
@@ -1,116 +1,119 @@
     /**
      * <p>Checks whether the String a valid Java number.</p>
      *
      * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
      * qualifier, scientific notation and numbers marked with a type
      * qualifier (e.g. 123L).</p>
      *
      * <p><code>Null</code> and empty String will return
      * <code>false</code>.</p>
      *
      * @param str  the <code>String</code> to check
      * @return <code>true</code> if the string is a correctly formatted number
      */
     public static boolean isNumber(String str) {
         if (StringUtils.isEmpty(str)) {
             return false;
         }
         char[] chars = str.toCharArray();
         int sz = chars.length;
         boolean hasExp = false;
         boolean hasDecPoint = false;
         boolean allowSigns = false;
         boolean foundDigit = false;
         // deal with any possible sign up front
         int start = (chars[0] == '-') ? 1 : 0;
-        if (sz > start + 1) {
-            if (chars[start] == '0' && chars[start + 1] == 'x') {
+        if (sz > start + 1 && chars[start] == '0' && (chars[start + 1] == 'x' || chars[start + 1] == 'X')) { // Updated hex check for 'X'
             int i = start + 2;
             if (i == sz) {
-                    return false; // str == "0x"
+                return false; // str == "0x" or "0X"
             }
             // checking hex (it can't be anything else)
             for (; i < chars.length; i++) {
                 if ((chars[i] < '0' || chars[i] > '9')
                     && (chars[i] < 'a' || chars[i] > 'f')
                     && (chars[i] < 'A' || chars[i] > 'F')) {
                     return false;
                 }
             }
             return true;
         }
-        }
         sz--; // don't want to loop to the last char, check it afterwords
               // for type qualifiers
         int i = start;
         // loop to the next to last char or to the last char if we need another digit to
         // make a valid number (e.g. chars[0..5] = "1234E")
         while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
             if (chars[i] >= '0' && chars[i] <= '9') {
                 foundDigit = true;
                 allowSigns = false;
 
             } else if (chars[i] == '.') {
                 if (hasDecPoint || hasExp) {
                     // two decimal points or dec in exponent
                     return false;
                 }
                 hasDecPoint = true;
             } else if (chars[i] == 'e' || chars[i] == 'E') {
                 // we've already taken care of hex.
                 if (hasExp) {
                     // two E's
                     return false;
                 }
                 if (!foundDigit) {
                     return false;
                 }
                 hasExp = true;
                 allowSigns = true;
             } else if (chars[i] == '+' || chars[i] == '-') {
                 if (!allowSigns) {
                     return false;
                 }
                 allowSigns = false;
                 foundDigit = false; // we need a digit after the E
             } else {
                 return false;
             }
             i++;
         }
         if (i < chars.length) {
             if (chars[i] >= '0' && chars[i] <= '9') {
-                // no type qualifier, OK
-                return true;
+                 // Check for +/-, e/E or ., ensure we have seen digits before this point
+                 if (hasExp && !allowSigns && !foundDigit) return false; // e.g. 1E+
+                 if (hasDecPoint && !foundDigit) return false; // e.g. -.
+                 foundDigit = true; // A digit is found at the end, ensure the number is valid overall.
+                 // Check if the loop finished because it needed a digit following an exponent sign
+                 return !allowSigns || foundDigit; // Allow ending with digit if expecting sign followed by digit
             }
             if (chars[i] == 'e' || chars[i] == 'E') {
                 // can't have an E at the last byte
                 return false;
             }
             if (chars[i] == '.') {
                 if (hasDecPoint || hasExp) {
                     // two decimal points or dec in exponent
                     return false;
                 }
-                // single trailing decimal point after non-exponent is ok
+                // single trailing decimal point after non-exponent is ok (e.g. "1." is ok) if we have found digits.
                 return foundDigit;
             }
-            if (!allowSigns
+            if (!allowSigns // allowed type qualifiers are only allowed when sign is not expected, i.e. not immediately after 'e' or 'E'.
                 && (chars[i] == 'd'
                     || chars[i] == 'D'
                     || chars[i] == 'f'
                     || chars[i] == 'F')) {
                 return foundDigit;
             }
             if (chars[i] == 'l'
                 || chars[i] == 'L') {
                 // not allowing L with an exponent or decimal point
-                return foundDigit && !hasExp;
+                // Fix for LANG-664: Added check for !hasDecPoint
+                return foundDigit && !hasExp && !hasDecPoint;
             }
             // last character is illegal
             return false;
         }
-        // allowSigns is true iff the val ends in 'E'
-        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
+        // allowSigns is true iff the val ends in E/e or +/- immediately after E/e.
+        // foundDigit it to make sure weird stuff like '.' and '1E-' doesn't pass
         return !allowSigns && foundDigit;
     }
\ No newline at end of file
