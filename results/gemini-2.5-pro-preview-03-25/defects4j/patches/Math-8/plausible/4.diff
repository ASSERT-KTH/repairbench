diff --git a/tmp/76af2a30-f5c3-452b-8590-93904341ad7b_buggy.java b/tmp/58972909-5937-40cb-93be-71e12d386168_fixed.java
index bfa2423..a9f61f3 100644
--- a/tmp/76af2a30-f5c3-452b-8590-93904341ad7b_buggy.java
+++ b/tmp/58972909-5937-40cb-93be-71e12d386168_fixed.java
@@ -1,23 +1,34 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // Create an Object array to hold the samples.
+        // This is necessary because the exact class of T might not be known
+        // or the distribution might contain items of different subtypes of T.
+        // Using Object[] ensures that any T returned by sample() can be stored.
+        final Object[] out = new Object[sampleSize];
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
-        return out;
+        // Cast the Object[] array to T[].
+        // This is a standard way to handle generic array creation in Java,
+        // though it results in an unchecked cast warning.
+        // We suppress the warning as the array is guaranteed to contain
+        // objects of type T (or subtypes) returned by the sample() method.
+        @SuppressWarnings("unchecked")
+        final T[] result = (T[]) out;
+        return result;
 
     }
\ No newline at end of file
