diff --git a/tmp/dbf5ddbd-2e1c-455c-8af2-37062b8663e6_buggy.java b/tmp/79a1319b-dc27-452d-96bf-fa81f0fc26af_fixed.java
index bfa2423..35cdf3a 100644
--- a/tmp/dbf5ddbd-2e1c-455c-8af2-37062b8663e6_buggy.java
+++ b/tmp/79a1319b-dc27-452d-96bf-fa81f0fc26af_fixed.java
@@ -1,23 +1,72 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // singletons is guaranteed by the constructor to be non-empty.
+        final Class<?> firstClass = singletons.get(0).getClass();
+        boolean allSameClass = true;
+        // Check if all singletons are of the same exact class.
+        // Using getClass() comparison is intentional here to detect cases like the
+        // bug report where different anonymous classes implementing the same interface
+        // or extending the same class are used.
+        for (int j = 1; j < singletons.size(); j++) {
+            if (singletons.get(j).getClass() != firstClass) {
+                allSameClass = false;
+                break;
+            }
+        }
 
+        final T[] out;
+
+        if (allSameClass) {
+            // All singletons have the same class C. Create an array of type C[]
+            // and cast it to T[]. This cast is safe because C must be assignable to T.
+            // The ArrayStoreException is avoided because all samples will be instances
+            // of C (or subclasses), which are assignable to the array component type C.
+            out = (T[]) java.lang.reflect.Array.newInstance(firstClass, sampleSize);
+        } else {
+            // Singletons have different concrete classes (e.g., Integer and Double for T=Number,
+            // or different anonymous classes for T=Object).
+            // Creating an array based on the first element's class (like the original code)
+            // would lead to ArrayStoreException when storing an element of a different class.
+            // The only common array type that can safely hold *all* potential samples
+            // without ArrayStoreExceptions during filling is Object[].
+            // Create Object[], fill it, and then cast to T[].
+            // Note: This final cast (T[]) objOut will only succeed if T is Object.
+            // If T is a more specific type (e.g., Number), this cast will throw a
+            // ClassCastException at runtime. This reflects the inherent difficulty of
+            // creating generic arrays in Java when the component type T is not known
+            // or when the actual elements have diverse runtime types inconsistent with T[].
+            final Object[] objOut = new Object[sampleSize];
+            for (int i = 0; i < sampleSize; i++) {
+                objOut[i] = sample(); // sample() returns T, assignable to Object.
+            }
+            // This cast allows the method to fulfill the T[] return type contract,
+            // albeit with a potential ClassCastException if T isn't Object,
+            // shifting the error from a potential ArrayStoreException during filling
+            // to a ClassCastException at the end in heterogeneous non-Object cases.
+            return (T[]) objOut;
+        }
+
+        // Fill the array (only reached if allSameClass was true).
         for (int i = 0; i < sampleSize; i++) {
+            // sample() returns T. The actual object will be one of the singletons.
+            // Since all singletons are of type firstClass (C), sample() returns
+            // an instance of C (or potentially a subclass if singletons could hold subclasses,
+            // though typically they hold the exact items).
+            // Assigning an instance of C (or subclass) to an array of C[] is safe.
             out[i] = sample();
         }
 
         return out;
-
     }
\ No newline at end of file
