diff --git a/tmp/e8140d31-a523-4491-804f-185d30b880d8_buggy.java b/tmp/aa428787-f5c9-435e-844b-b754ab285b35_fixed.java
index bfa2423..55e3fbd 100644
--- a/tmp/e8140d31-a523-4491-804f-185d30b880d8_buggy.java
+++ b/tmp/aa428787-f5c9-435e-844b-b754ab285b35_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // The ArrayStoreException occurs when the array created has a component
+        // type derived from the first element (singletons.get(0).getClass()),
+        // but the sample() method later returns an object of an incompatible type
+        // (but still compatible with T). Creating an Object[] array ensures
+        // compatibility with any type T returned by sample(), then casting to T[].
+        // This might generate an unchecked cast warning, which is acceptable here
+        // due to type erasure.
+        @SuppressWarnings("unchecked") // OK because T is guaranteed to be a subtype of Object
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);
+
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
\ No newline at end of file
