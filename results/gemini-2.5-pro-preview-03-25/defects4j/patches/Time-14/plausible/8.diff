diff --git a/tmp/6bce19a2-830f-442b-b6bc-a67a3e03a3da_buggy.java b/tmp/ed6770ed-7a0d-4226-a6ec-907b8845c589_fixed.java
index 10616db..8a3706c 100644
--- a/tmp/6bce19a2-830f-442b-b6bc-a67a3e03a3da_buggy.java
+++ b/tmp/ed6770ed-7a0d-4226-a6ec-907b8845c589_fixed.java
@@ -1,19 +1,31 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+        // This method is typically called when the field is the largest in the partial,
+        // or when it is computed based on larger fields (like dayOfYear based on year).
+        // The calculation relies on having a full date context for accuracy,
+        // especially around leap years.
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // Use a known leap year (e.g., 2004) as the base instant context
+            // for calculations involving partial dates like MonthDay or DayOfYear
+            // to ensure correct handling of Feb 29th and end-of-month adjustments.
+            // Epoch (1970) is not a leap year, leading to errors.
+            long instant = iChronology.getDateTimeMillis(2004, 1, 1, 0); // Base instant in a leap year
             for (int i = 0, isize = partial.size(); i < isize; i++) {
+                // Reconstruct the date fields onto the base instant
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            // Perform the addition using the DateTimeField's add method
             instant = add(instant, valueToAdd);
+            // Extract the updated values from the resulting instant
             return iChronology.get(partial, instant);
         } else {
+            // If the partial is not contiguous (e.g., YearMonth), the superclass
+            // algorithm might be sufficient, or a different approach is needed.
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
