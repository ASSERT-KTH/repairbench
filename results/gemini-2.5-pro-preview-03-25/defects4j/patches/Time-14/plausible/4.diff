diff --git a/tmp/03c1b4c4-4860-413d-ae87-e0f1cd1bdc68_buggy.java b/tmp/30cb18cd-331a-4e89-94b3-708832eaf73d_fixed.java
index 10616db..a39861d 100644
--- a/tmp/03c1b4c4-4860-413d-ae87-e0f1cd1bdc68_buggy.java
+++ b/tmp/30cb18cd-331a-4e89-94b3-708832eaf73d_fixed.java
@@ -1,19 +1,33 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+        // Logic requires contiguous fields, implicitly handles MonthDay logic.
+        // It specifically needs to handle MonthDay where the date adjustment
+        // happens around Feb 29th in a leap year. The base instant calculation
+        // must use a leap year to ensure Feb 29th is valid.
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // Use a fixed known leap year (e.g., 2004) to properly handle Feb 29.
+            // Calculate the instant based on the partial fields set into the reference leap year.
+            // Use 2004-01-01 as the base. Note: This assumes the chronology is year-based.
+            // This choice is somewhat arbitrary but resolves Feb 29 issues encountered with epoch base (1970).
+            long instant = iChronology.getDateTimeMillis(2004, 1, 1, 0); // Start of a known leap year
+
+            // Set the partial fields onto this base instant.
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
+
+            // Add the value to the specified field.
+            instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);
+
+            // Extract the new field values from the resulting instant.
             return iChronology.get(partial, instant);
         } else {
+            // Fallback to superclass logic if fields are not contiguous.
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
