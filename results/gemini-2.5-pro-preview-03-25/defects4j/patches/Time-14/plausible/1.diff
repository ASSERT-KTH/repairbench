diff --git a/tmp/1efd8471-a2ef-4a35-8d46-0a05033f8935_buggy.java b/tmp/51ca04cf-79b4-4f85-9c55-09391ca72f32_fixed.java
index 10616db..123f1d7 100644
--- a/tmp/1efd8471-a2ef-4a35-8d46-0a05033f8935_buggy.java
+++ b/tmp/51ca04cf-79b4-4f85-9c55-09391ca72f32_fixed.java
@@ -1,19 +1,34 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
+        // Hendle MonthDay logic by using a fixed leap year for calculation
+        // Fixes bugs relating to partial dates, leap years and day of month variations
+        
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+        
         if (DateTimeUtils.isContiguous(partial)) {
+            // Use a reference point basis for calculation based on a leap year.
+            // Using the partial date values, calculate the millis of the partial
+            // from 1970-01-01. Then add the months/days field from that.
+            // Finally, extract the partial fields from the result millis.
+            // Need to use a leap year base for calculation, cannot use 1970.
+            // Use 2004-01-01 as it is a leap year.
             long instant = 0L;
+            // Find a suitable base instant avoiding issues with non-leap years
+            // Set the date component fields first from the partial
+            // Use a known leap year (2004) for safety
+            instant = iChronology.getDateTimeMillis(2004, 1, 1, 0); // Set to jan 1st
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                  instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            // Perform the addition using the field's logic on the reference instant
             instant = add(instant, valueToAdd);
+            // Extract the partial fields from the resulting instant
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
