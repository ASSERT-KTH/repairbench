diff --git a/tmp/2245c62c-1432-49ef-917a-2397c5ec62a7_buggy.java b/tmp/4854c50b-5a76-466a-900a-3718122b7db9_fixed.java
index 10616db..529b5a5 100644
--- a/tmp/2245c62c-1432-49ef-917a-2397c5ec62a7_buggy.java
+++ b/tmp/4854c50b-5a76-466a-900a-3718122b7db9_fixed.java
@@ -1,19 +1,31 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
+        // month-day calculations properly, especially around leap years
+        // The strategy is to map the partial to a full instant in a leap year,
+        // perform the addition, and map back.
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+            // This optimization is specific to contiguous partials
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // Use a representative instant in a leap year to perform calculations.
+            // Choose year 2004 as it is a leap year. Using a leap year ensures
+            // that February 29th can be represented during the calculation.
+            // Using 1st day of year avoids potential month length issues.
+            long instant = iChronology.getDateTimeMillis(2004, 1, 1, 0);
+            // Set the partial fields onto this base instant.
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            // Add the value using the chronology's field addition logic for instants.
+            // This assumes the 'add(long, int)' method correctly delegates
+            // to the appropriate DurationField based on the context (e.g., month or day).
             instant = add(instant, valueToAdd);
+            // Convert the resulting instant back to the partial's field values.
             return iChronology.get(partial, instant);
         } else {
+            // Fallback for non-contiguous partials.
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
