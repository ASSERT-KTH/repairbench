diff --git a/tmp/9ee8a777-66b7-456a-8469-b87ae2bcc8d2_buggy.java b/tmp/7113a474-2b3f-4a71-8642-d483b20d3119_fixed.java
index 10616db..44fe4fc 100644
--- a/tmp/9ee8a777-66b7-456a-8469-b87ae2bcc8d2_buggy.java
+++ b/tmp/7113a474-2b3f-4a71-8642-d483b20d3119_fixed.java
@@ -1,19 +1,39 @@
+import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.ReadablePartial;
+
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+        // Need to handle contiguous partials using a fixed base year,
+        // notably MonthDay requires leap year handling.
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // Use a base instant in a leap year for calculations.
+            // Choose a year like 2004 to handle Feb 29th correctly.
+            // Get the start of the year (might be slightly different from 0L if chronology differs).
+            long instant = iChronology.year().roundFloor(0L); 
+            instant = iChronology.year().set(instant, 2004); // Set year to 2004
+
+            // Set the partial's fields onto this base instant.
+            // Ensure the fields are set in order (e.g., month then day).
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
+
+            // Get the field to add to from the partial based on fieldIndex.
+            DateTimeField field = partial.getFieldType(fieldIndex).getField(iChronology);
+            // Perform the addition using the field's logic.
+            instant = field.add(instant, valueToAdd);
+
+            // Extract the updated field values from the resulting instant.
             return iChronology.get(partial, instant);
         } else {
+            // Delegate to superclass for non-contiguous partials.
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
