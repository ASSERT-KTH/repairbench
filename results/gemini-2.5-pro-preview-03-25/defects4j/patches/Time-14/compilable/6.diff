diff --git a/tmp/f97295c9-3f03-4ad2-a76b-f7fb8cd32aa5_buggy.java b/tmp/f9318651-7194-4411-892e-d36c03f57594_fixed.java
index 10616db..09d0860 100644
--- a/tmp/f97295c9-3f03-4ad2-a76b-f7fb8cd32aa5_buggy.java
+++ b/tmp/f9318651-7194-4411-892e-d36c03f57594_fixed.java
@@ -1,19 +1,39 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+        // Use the partial logic if the partial is contiguous, like MonthDay.
+        // This ensures that the fields are sensible to represent on a timeline.
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
-            for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
-            }
+            // Use a known leap year (e.g., 2004) as a base instant for calculations.
+            // This ensures that operations involving Feb 29 are handled correctly,
+            // regardless of the chronology's default reference year (often 1970).
+            // Get the millis for 2004-01-01T00:00:00.000 in the specific chronology.
+            // Note: Joda-Time uses 1-based month (1=Jan).
+            long instant = iChronology.getDateTimeMillis(2004, 1, 1, 0, 0, 0, 0);
+            
+            // Set the month and day from the partial onto the base instant.
+            // This creates an instant like 2004-MM-DD. Using set(ReadablePartial)
+            // handles chronology-specific field setting, including potential validation
+            // if the partial itself was invalid (though values[] are assumed valid here).
+            // This step effectively places the MonthDay into a leap year context.
+            instant = iChronology.set(partial, instant);
+            
+            // Add the specified value (months or days) to the instant.
+            // This delegates to the specific DateTimeField's add logic,
+            // which handles calendar rules like month lengths and leap years based
+            // on the instant's context (e.g., 2004 +/- valueToAdd).
             instant = add(instant, valueToAdd);
+            
+            // Extract the resulting field values (month, day) from the final instant.
+            // This gives the MonthDay component of the resulting date.
             return iChronology.get(partial, instant);
         } else {
+            // Fallback to the superclass implementation for non-contiguous partials
+            // or potentially other partial types where this logic might not apply.
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
