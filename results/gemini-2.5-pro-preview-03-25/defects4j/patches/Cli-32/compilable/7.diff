diff --git a/tmp/0194d0b4-c5bd-44c1-aeea-3e47a82105a5_buggy.java b/tmp/10581476-0a93-406c-87a3-0468626563cf_fixed.java
index 14b78fb..456aa8f 100644
--- a/tmp/0194d0b4-c5bd-44c1-aeea-3e47a82105a5_buggy.java
+++ b/tmp/10581476-0a93-406c-87a3-0468626563cf_fixed.java
@@ -1,56 +1,69 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
+     * <p>
+     * This method returns the index of the first character of the next line.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
+     * @return position on which the text must be wrapped (the start index of the
+     * next line) or -1 if the wrap position is at the end of the text.
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int limit = startPos + width;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // 1. Check for forced breaks (\n, \t) first
+        int pos = -1;
+        int newlinePos = text.indexOf('\n', startPos);
+        int tabPos = text.indexOf('\t', startPos);
+
+        // Find the earliest forced break
+        if (newlinePos != -1 && (tabPos == -1 || newlinePos < tabPos))
+        {
+            pos = newlinePos;
+        }
+        else
+        {
+            pos = tabPos;
+        }
+
+        // If a forced break exists and occurs before the desired limit
+        if (pos != -1 && pos < limit)
         {
+            // Wrap position is after the forced break character
             return pos + 1;
         }
-        else if (startPos + width >= text.length())
+
+        // 2. Check if we have effectively reached the end of the text
+        // within the limit. Return -1 to signal no further wrapping is needed.
+        if (limit >= text.length())
         {
             return -1;
         }
 
-
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+        // 3. Search backwards for a whitespace character within [startPos, limit)
+        // The wrap position is the index *after* the whitespace.
+        int currentIdx = limit; // Start searching backward from index limit-1 down to startPos
+        while (currentIdx > startPos)
         {
-            --pos;
-        }
+            currentIdx--; // index to check: limit-1, limit-2, ..., startPos
+            char c = text.charAt(currentIdx);
 
-        // if we found it - just return
-        if (pos > startPos)
+            if (c == ' ' || c == '\n' || c == '\r')
             {
-            return pos;
+                // Found whitespace. Wrap position is after this character.
+                return currentIdx + 1;
             }
-        
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
         }
-        return pos == text.length() ? -1 : pos;
+        // Loop finished without finding whitespace between startPos and limit-1.
+
+        // 4. No whitespace found in [startPos, limit).
+        // We have to cut the word at the width limit. The next line starts at limit.
+        return limit;
     }
\ No newline at end of file
