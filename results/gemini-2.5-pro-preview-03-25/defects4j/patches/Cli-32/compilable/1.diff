diff --git a/tmp/e305757b-ffae-447b-8edc-8287a00ba247_buggy.java b/tmp/0fb6de21-b266-4383-a11e-12cb855df673_fixed.java
index 14b78fb..f9b2e3d 100644
--- a/tmp/e305757b-ffae-447b-8edc-8287a00ba247_buggy.java
+++ b/tmp/0fb6de21-b266-4383-a11e-12cb855df673_fixed.java
@@ -1,56 +1,73 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
+     * Newlines and tabs characters found before startPos+width will also cause
+     * wrapping, returning the position after the newline/tab.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
+     * position is at the end of the text (meaning the rest fits)
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int length = text.length();
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
+        // Check for forced wrap characters (newline, tab) within the window [startPos, startPos + width)
+        int earliestSpecialCharPos = -1;
+        int newlinePos = text.indexOf('\n', startPos);
+        int tabPos = text.indexOf('\t', startPos);
+
+        // Find the first occurring newline or tab
+        if (newlinePos != -1 && (tabPos == -1 || newlinePos < tabPos)) {
+            earliestSpecialCharPos = newlinePos;
+        } else {
+            earliestSpecialCharPos = tabPos;
+        }
+
+        // If a special character forces an early wrap within the desired width
+        if (earliestSpecialCharPos != -1 && earliestSpecialCharPos < startPos + width) {
+            // Return position immediately following the special character
+            return earliestSpecialCharPos + 1;
         }
-        else if (startPos + width >= text.length())
-        {
+
+        // If the potential wrap position (startPos + width) is at or beyond the end of the text,
+        // it means the rest of the text fits on the current line. Return -1 to indicate this.
+        if (startPos + width >= length) {
             return -1;
         }
 
+        // Look for the last whitespace character (space, \n, \r) in the range [startPos, startPos + width - 1]
+        // The position where we cut if no whitespace is found.
+        int potentialCutPos = startPos + width;
+        int lastWhitespaceIndex = -1;
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+        // Search backwards from index startPos + width - 1 down to startPos
+        // Note: We check down to startPos (inclusive) because whitespace at startPos itself
+        // (like leading space in the substring) is not a wrap point according to the logic,
+        // but finding it helps determine if any *other* whitespace exists later in the range.
+        for (int i = potentialCutPos - 1; i >= startPos; --i) {
+            char c = text.charAt(i);
+            if (c == ' ' || c == '\n' || c == '\r') {
+                lastWhitespaceIndex = i; // Found the last whitespace in the relevant range
+                break;
             }
-
-        // if we found it - just return
-        if (pos > startPos)
-        {
-            return pos;
         }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
+        // If we found a whitespace at an index strictly greater than startPos
+        // (we don't wrap right at the beginning of the segment unless it was \n or \t handled above)
+        if (lastWhitespaceIndex > startPos) {
+            // The wrap position is immediately after the whitespace
+            return lastWhitespaceIndex + 1;
         }
-        return pos == text.length() ? -1 : pos;
+        
+        // Otherwise, no suitable whitespace was found in (startPos, startPos + width - 1].
+        // We must wrap by cutting the word at the width limit.
+        // We already know potentialCutPos < length from the check above.
+        return potentialCutPos;
     }
\ No newline at end of file
