diff --git a/tmp/3c388698-7dca-4774-9a7e-2160c6efb9a5_buggy.java b/tmp/cc2bb285-33f3-4694-a69b-9b9242c22c4d_fixed.java
index 14b78fb..7417c5d 100644
--- a/tmp/3c388698-7dca-4774-9a7e-2160c6efb9a5_buggy.java
+++ b/tmp/cc2bb285-33f3-4694-a69b-9b9242c22c4d_fixed.java
@@ -1,56 +1,77 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
+     * whitespace character (space, \n, \r, \t). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
+     * <p>
+     * The wrap position is the index where the line should be broken. The character
+     * at the wrap position is the first character of the next line. If the wrap
+     * position is determined by a whitespace character, the whitespace character
+     * itself is skipped (it's not the first character of the next line).
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
+     * @return position where the text wraps (first character of the next line)
+     * or -1 if the wrap position is at the end of the text.
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int limit = startPos + width;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
-        }
-        else if (startPos + width >= text.length())
+        // Handle case where wrap position is potentially beyond the end of text
+        // or the available text is shorter than the width starting from startPos
+        if (limit >= text.length())
         {
+            // No wrap needed, we are at the end.
             return -1;
         }
 
+        // Check for the earliest significant whitespace (newline or tab)
+        // within the wrap range [startPos, limit). These force an early wrap.
+        int earliestForceWrapPos = -1;
+        int nlPos = text.indexOf('\n', startPos);
+        int tabPos = text.indexOf('\t', startPos);
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        // Check if newline is within the limit [startPos, limit)
+        if (nlPos != -1 && nlPos < limit) {
+            earliestForceWrapPos = nlPos;
+        }
 
-        char c;
+        // Check if tab is within the limit [startPos, limit) and is earlier than any found newline
+        if (tabPos != -1 && tabPos < limit) {
+            // If tab is earlier, or if no newline was found (-1)
+            if (earliestForceWrapPos == -1 || tabPos < earliestForceWrapPos) {
+                 earliestForceWrapPos = tabPos;
+            }
+        }
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+        // If an explicit newline or tab forces a wrap before the width limit
+        if (earliestForceWrapPos != -1) {
+            return earliestForceWrapPos + 1; // Wrap position is after the newline/tab
         }
 
-        // if we found it - just return
-        if (pos > startPos)
+        // Look backwards for the last whitespace (' ', '\n', '\r')
+        // in the range [startPos, limit). Note limit is exclusive.
+        // Start search from limit-1 down to startPos.
+        int searchPos = limit; 
+        while (searchPos > startPos)
         {
-            return pos;
-        }
+            // Check character at index searchPos - 1
+            searchPos--; 
+            char c = text.charAt(searchPos);
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
+            // Check if the character is one of the whitespace types specified in original doc (' ', '\n', '\r')
+            if (c == ' ' || c == '\n' || c == '\r')
             {
-            ++pos;
+                // Found a whitespace character. Wrap after this character.
+                return searchPos + 1; 
+            }
         }
-        return pos == text.length() ? -1 : pos;
+
+        // No whitespace found in the range [startPos, limit).
+        // We must cut the word at the limit (startPos + width).
+        return limit;
     }
\ No newline at end of file
