diff --git a/tmp/a1ae67bc-aae7-47ba-866a-25fdfa325155_buggy.java b/tmp/1a1200f0-8ae3-4645-9de9-a54eaf676c98_fixed.java
index 14b78fb..88a8587 100644
--- a/tmp/a1ae67bc-aae7-47ba-866a-25fdfa325155_buggy.java
+++ b/tmp/1a1200f0-8ae3-4645-9de9-a54eaf676c98_fixed.java
@@ -1,56 +1,62 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
+     * @return position on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int endPos = startPos + width; // The potential wrap position if we have to cut the word
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
+        // Check if the potential wrap position is at or beyond the end of the text
+        if (endPos >= text.length()) {
+            return -1; // Indicates end of text, no wrap needed.
         }
-        else if (startPos + width >= text.length())
-        {
-            return -1;
-        }
-
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        // Check for the first explicit newline or tab within the wrap width [startPos, endPos].
+        // If found, we must wrap just after it.
+        int explicitBreakPos = -1;
+        int LFlowPos = text.indexOf('\n', startPos);
+        int tabPos   = text.indexOf('\t', startPos);
 
-        char c;
+        if ( LFlowPos != -1 && ( tabPos == -1 || LFlowPos < tabPos ) ) {
+            explicitBreakPos = LFlowPos;
+        } else {
+            explicitBreakPos = tabPos;
+        }
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+        // If an explicit break is found within the line segment [startPos, endPos]
+        if ( explicitBreakPos != -1 && explicitBreakPos <= endPos ) {
+            return explicitBreakPos + 1; // Wrap position is after the break char
         }
 
-        // if we found it - just return
-        if (pos > startPos)
-        {
+        // Look for the last whitespace character (space, newline, carriage return)
+        // in the range ]startPos, endPos]. Search backwards from endPos.
+        // Note: \t was handled above as an explicit break.
+        int pos = endPos;
+
+        // Search backwards for the last whitespace character at or before endPos
+        while (pos > startPos) {
+             // Check boundary charAt(pos) - position pos is guaranteed to be < text.length()
+             // due to the initial check (endPos < text.length()) and pos <= endPos.
+             char c = text.charAt(pos);
+             if (c == ' ' || c == '\n' || c == '\r') {
+                 // Found whitespace. As per tests, return the position *of* the whitespace.
+                 // This implies the line break occurs *before* this character.
                  return pos;
              }
+             pos--;
+        }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // No whitespace found between startPos + 1 and endPos.
+        // We must cut the word at endPos.
+        return endPos;
     }
\ No newline at end of file
