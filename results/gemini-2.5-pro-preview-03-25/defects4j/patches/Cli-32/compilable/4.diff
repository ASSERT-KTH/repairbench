diff --git a/tmp/b1c3a668-6705-4ab2-910d-3b21ea63843b_buggy.java b/tmp/63da151b-6e5e-40ce-9a57-a61614df475b_fixed.java
index 14b78fb..2ae1dcf 100644
--- a/tmp/b1c3a668-6705-4ab2-910d-3b21ea63843b_buggy.java
+++ b/tmp/63da151b-6e5e-40ce-9a57-a61614df475b_fixed.java
@@ -1,56 +1,48 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
+     * @return position on which the text must be wrapped or -1 if the wrap
+     * position is at the end of the text. This is the index of the whitespace
+     * character or startPos + width if no whitespace was found.
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int limit = startPos + width;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
-        }
-        else if (startPos + width >= text.length())
+        // Check if the wrap position is beyond the text length or
+        // if the remaining text is shorter than the width
+        if (limit >= text.length())
         {
+            // End of text is within the width, so no wrap needed
             return -1;
         }
 
-
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+        // Search backward from the character just before the limit
+        // for the last whitespace character (space, newline, carriage return).
+        // Start searching from limit index backwards. The first check will be limit - 1.
+        int pos = limit; 
+        while (--pos >= startPos) // Check indices from limit - 1 down to startPos
         {
-            --pos;
-        }
-
-        // if we found it - just return
-        if (pos > startPos)
+            char c = text.charAt(pos);
+            if (c == ' ' || c == '\n' || c == '\r')
             {
+                // Found the last whitespace character within the range [startPos, limit).
+                // Return its index. The caller (renderWrappedText) should handle
+                // advancing past this character (e.g., start next line at pos + 1).
                 return pos;
             }
+        }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // No whitespace character found within the range [startPos, limit).
+        // The word must be split/cut at the limit.
+        // Return the limit position (startPos + width).
+        return limit;
     }
\ No newline at end of file
