diff --git a/tmp/657b753a-84bc-48f9-99e3-8c085fe4d900_buggy.java b/tmp/02747ecd-6a4c-44b2-addf-8c2e00cf6826_fixed.java
index 14b78fb..dc25ef0 100644
--- a/tmp/657b753a-84bc-48f9-99e3-8c085fe4d900_buggy.java
+++ b/tmp/02747ecd-6a4c-44b2-addf-8c2e00cf6826_fixed.java
@@ -1,56 +1,70 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
+     * The wrap point is the last position within the wrap width (i.e. 
+     * <code>[startPos, startPos + width)</code>) having a whitespace character 
+     * (space, \n, \r, \t). If such a position is found, the wrap point is the 
+     * position immediately after the whitespace.
+     * If no whitespace character is found within the wrap width, the wrap point 
+     * is <code>startPos + width</code>.
+     * If <code>startPos + width</code> is beyond the end of the text, returns -1.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
+     * @return position on which the text must be wrapped or -1 if the wrap
+     * position is at the end of the text.
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // Look for a newline or tab marker within the wrap width first.
+        // If found, wrap explicitly after it. Note: index is compared to startPos + width.
+        // Check specifically for \n or \t as these are sometimes handled differently
+        // (e.g., forcing a break) compared to spaces.
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos < startPos + width) ||
+            ((pos = text.indexOf('\t', startPos)) != -1 && pos < startPos + width))
         {
+            // Wrap after the newline or tab
             return pos + 1;
         }
-        else if (startPos + width >= text.length())
+
+        // Calculate the maximum potential end position on the current line.
+        int endPos = startPos + width;
+
+        // If the potential end position is at or past the end of the text,
+        // this indicates we are processing the last part of the text. Return -1 
+        // to signal no further wrapping is needed based on width.
+        if (endPos >= text.length())
         {
             return -1;
         }
 
+        // Search backwards for the last whitespace character (' ', \n, \r - tab already handled)
+        // within the range [startPos, endPos - 1].
+        // Start searching from the character at index endPos - 1, as endPos is the first
+        // character of the next potential line.
+        pos = endPos - 1; 
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+        while (pos >= startPos)
         {
-            --pos;
-        }
-
-        // if we found it - just return
-        if (pos > startPos)
+            char c = text.charAt(pos);
+            // Check for common whitespace characters (space, newline, carriage return).
+            if (c == ' ' || c == '\n' || c == '\r')
             {
-            return pos;
+                // Found a whitespace character. Return the position immediately after it
+                // as the wrap position.
+                return pos + 1;
             }
-        
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
+            pos--;
         }
-        return pos == text.length() ? -1 : pos;
+
+        // No whitespace character found in the range [startPos, endPos - 1].
+        // This means either the segment starts with a long word that exceeds the width,
+        // or the entire segment within the width contains no whitespace.
+        // In this case, we must break the word at the width limit (endPos).
+        // Return the calculated end position as the wrap point.
+        return endPos;
     }
\ No newline at end of file
