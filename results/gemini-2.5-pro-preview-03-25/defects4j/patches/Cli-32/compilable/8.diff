diff --git a/tmp/b37096d4-6164-4853-bbe0-f9e7ee0b9c59_buggy.java b/tmp/b9d95e20-99c4-4241-b000-9ce1f37ef810_fixed.java
index 14b78fb..17c8273 100644
--- a/tmp/b37096d4-6164-4853-bbe0-f9e7ee0b9c59_buggy.java
+++ b/tmp/b9d95e20-99c4-4241-b000-9ce1f37ef810_fixed.java
@@ -1,56 +1,76 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int limit = startPos + width;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
-        }
-        else if (startPos + width >= text.length())
+        // Check if the potential wrap position is at or beyond the end of the text.
+        if (limit >= text.length())
         {
+            // No wrap needed, the rest fits.
             return -1;
         }
 
+        // Check for the first newline or tab character occurring before the limit.
+        // This behavior is preserved from the original code.
+        int EOLpos = text.indexOf('\n', startPos);
+        int TABpos = text.indexOf('\t', startPos);
+        int breakPos = -1;
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
+        if (EOLpos != -1 && (TABpos == -1 || EOLpos < TABpos)) {
+            breakPos = EOLpos;
+        } else {
+            // breakPos will be TABpos value, including -1 if not found
+            breakPos = TABpos; 
+        }
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+        // If a newline/tab is found before the width limit, wrap after it.
+        if (breakPos != -1 && breakPos < limit) {
+             // Return position AFTER the newline/tab, consistent with original behavior
+             // for these characters and required by how renderWrappedText uses the result.
+            return breakPos + 1;
         }
 
-        // if we found it - just return
-        if (pos > startPos)
+        // Look for the last whitespace character strictly BEFORE the calculated limit.
+        // Search backwards from limit - 1 down to startPos.
+        int wsPos = -1;
+        // Start search from one character before the limit
+        int searchFrom = limit - 1; 
+        for (int i = searchFrom; i >= startPos; i--)
         {
-            return pos;
+            char c = text.charAt(i);
+            // Use Character.isWhitespace() for robustness (covers space, \n, \r, \t, etc.)
+            // Original code checked for ' ', '\n', '\r' explicitly here.
+            if (Character.isWhitespace(c))
+            {
+                wsPos = i;
+                break;
+            }
         }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
+        // If we found a whitespace character strictly after startPos
+        if (wsPos > startPos)
         {
-            ++pos;
+            // Return the position of the whitespace character found.
+            // The tests expect the index *of* the whitespace (e.g., 7 for "This is a test.").
+            // The calling method (renderWrappedText) handles trimming the space.
+            return wsPos;
         }
-        return pos == text.length() ? -1 : pos;
+        
+        // No whitespace found in (startPos, limit-1]. We have to cut the word.
+        // Return the calculated limit (startPos + width) as the cut position.
+        // This matches test expectation "wrap position 3 expected:<3>" when width is 3.
+        return limit;
     }
\ No newline at end of file
