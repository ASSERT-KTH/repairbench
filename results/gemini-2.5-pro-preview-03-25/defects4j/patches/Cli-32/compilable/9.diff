diff --git a/tmp/19e78d5c-30c1-45db-991e-d8395a78c89b_buggy.java b/tmp/b3759fad-d4e2-43a5-9eb7-8393a10a1622_fixed.java
index 14b78fb..f375d8a 100644
--- a/tmp/19e78d5c-30c1-45db-991e-d8395a78c89b_buggy.java
+++ b/tmp/b3759fad-d4e2-43a5-9eb7-8393a10a1622_fixed.java
@@ -1,56 +1,70 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
+     * before startPos+width, it will return startPos+width. If a newline character
+     * is found before startPos+width, the wrap point is the position after the
+     * newline character.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
+     * @return position on which the text must be wrapped or -1 if the wrap
+     * position would be past the end of the text.
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // Look for a newline character within the wrap width
+        pos = text.indexOf('\n', startPos);
+        // If found and it's strictly within the range [startPos, startPos + width)
+        if (pos != -1 && pos < startPos + width)
         {
+            // Wrap on the character after the newline
             return pos + 1;
         }
-        else if (startPos + width >= text.length())
+
+        // The potential wrap position if we have to cut a word
+        int potentialWrapPos = startPos + width;
+
+        // If the potential wrap position is at or beyond the end of the text,
+        // it means the rest of the text fits, return -1 to signal the end.
+        if (potentialWrapPos >= text.length())
         {
             return -1;
         }
 
+        // Search backwards for the last whitespace character in the range
+        // [startPos, startPos + width - 1].
+        // Start searching from the character *before* the potential wrap position
+        // or the end of the string, whichever comes first.
+        int searchStart = Math.min(text.length() - 1, potentialWrapPos - 1);
+        int whitespacePos = -1; // Index of the last whitespace found
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+        // Scan backwards from searchStart down to startPos inclusive
+        for (int currentPos = searchStart; currentPos >= startPos; --currentPos)
         {
-            --pos;
-        }
-
-        // if we found it - just return
-        if (pos > startPos)
+            char c = text.charAt(currentPos);
+            // Check for space, newline, or carriage return
+            if (c == ' ' || c == '\n' || c == '\r')
             {
-            return pos;
+                whitespacePos = currentPos;
+                break; // Found the last whitespace in the viable range
+            }
         }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
+        // If a whitespace character was found (whitespacePos will be >= startPos)
+        if (whitespacePos >= startPos)
         {
-            ++pos;
+            // Wrap on the character *after* the whitespace
+            return whitespacePos + 1;
         }
-        return pos == text.length() ? -1 : pos;
+        
+        // No whitespace found in the range [startPos, startPos + width - 1].
+        // We have to cut the word at the width limit.
+        // Return the position startPos + width.
+        return potentialWrapPos;
     }
\ No newline at end of file
