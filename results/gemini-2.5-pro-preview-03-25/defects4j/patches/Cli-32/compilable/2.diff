diff --git a/tmp/9c799303-7512-468b-a411-b8a9d3f0b20e_buggy.java b/tmp/7c64ede9-dbd1-45c0-b324-03bd239920f5_fixed.java
index 14b78fb..2d642c0 100644
--- a/tmp/9c799303-7512-468b-a411-b8a9d3f0b20e_buggy.java
+++ b/tmp/7c64ede9-dbd1-45c0-b324-03bd239920f5_fixed.java
@@ -1,56 +1,68 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
+     * @return position on which the text must be wrapped or -1 if the wrap
+     * position is at the end of the text. The returned position is the index
+     * into the text string.
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int limit = startPos + width;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
+        // Check if the rest of the text fits within the width.
+        // Also handles cases where startPos is already at or beyond the text length.
+        if (limit >= text.length()) {
+            return -1; // No wrap needed, indicates end of text.
         }
-        else if (startPos + width >= text.length())
-        {
-            return -1;
+
+        // Check for the first explicit newline or tab occurring strictly before the limit.
+        int pos_n = text.indexOf('\n', startPos);
+        int pos_t = text.indexOf('\t', startPos);
+        int explicitBreakPos = -1;
+
+        // Determine the position of the earliest explicit break character (\n or \t).
+        if (pos_n != -1 && (pos_t == -1 || pos_n < pos_t)) {
+            explicitBreakPos = pos_n;
+        } else {
+            explicitBreakPos = pos_t; // Assigns pos_t, which might be -1.
         }
 
+        // If an explicit break character was found before the width limit,
+        // return the position immediately following it as the wrap point.
+        if (explicitBreakPos != -1 && explicitBreakPos < limit) {
+            return explicitBreakPos + 1;
+        }
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        // Look for the last whitespace character (' ', '\n', '\r') 
+        // in the range [startPos, limit - 1]. Search backwards from limit - 1.
+        int searchPos = limit; // Initialize search position relative to the limit.
+        while (searchPos > startPos) {
+            // Decrement first to check indices from limit - 1 down to startPos.
+            searchPos--; 
 
-        char c;
+            // Get the character at the current search position.
+            char c = text.charAt(searchPos);
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+            // If a whitespace character is found
+            if (c == ' ' || c == '\n' || c == '\r') {
+                // Found the last whitespace position before the limit.
+                // Return its index as the wrap position. This matches test expectations where
+                // for "This is a test.", width=8, startPos=0, the space at index 7 is found,
+                // and 7 is returned.
+                return searchPos;
             }
-
-        // if we found it - just return
-        if (pos > startPos)
-        {
-            return pos;
         }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // No whitespace found within the range [startPos, limit - 1].
+        // This means a word is longer than the allowed width or runs up to the limit.
+        // Force a wrap at the width limit.
+        return limit;
     }
\ No newline at end of file
