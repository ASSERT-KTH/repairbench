diff --git a/tmp/da98ed07-14b7-474a-8bfe-086a003c619d_buggy.java b/tmp/1e4c4362-ffc7-489c-8ac6-297d1de2c387_fixed.java
index fd32990..043d9b8 100644
--- a/tmp/da98ed07-14b7-474a-8bfe-086a003c619d_buggy.java
+++ b/tmp/1e4c4362-ffc7-489c-8ac6-297d1de2c387_fixed.java
@@ -1,20 +1,32 @@
     /**
      * Returns a value by name.
      *
      * @param name
      *            the name of the column to be retrieved.
      * @return the column value, or {@code null} if the column name is not found
      * @throws IllegalStateException
      *             if no header mapping was provided
      * @throws IllegalArgumentException
-     *             if the record is inconsistent
+     *             if the record is inconsistent, e.g. the header mapping is referencing a column index which is out of bounds
      * @see #isConsistent()
+     * @see #values
      */
     public String get(final String name) {
         if (mapping == null) {
             throw new IllegalStateException(
                     "No header mapping was specified, the record values can't be accessed by name");
         }
         final Integer index = mapping.get(name);
-            return index != null ? values[index.intValue()] : null;
+        if (index == null) {
+            return null; // Column name not found in the header map
+        }
+        // Check if the fetched index is within the bounds of the values array.
+        // This check is necessary for inconsistent records where the header map might
+        // indicate more columns than the record actually contains.
+        if (index.intValue() >= values.length) {
+            throw new IllegalArgumentException(String.format(
+                    "Index for header '%s' is %d but CSVRecord only has %d values!",
+                    name, index.intValue(), values.length));
+        }
+        return values[index.intValue()];
     }
\ No newline at end of file
