diff --git a/tmp/b5f8b3cd-9559-4fd2-a876-e3ac94925386_buggy.java b/tmp/6ed9fd1a-43e1-41d1-b3ff-4683b043c51a_fixed.java
index fd32990..9b87300 100644
--- a/tmp/b5f8b3cd-9559-4fd2-a876-e3ac94925386_buggy.java
+++ b/tmp/6ed9fd1a-43e1-41d1-b3ff-4683b043c51a_fixed.java
@@ -1,20 +1,32 @@
     /**
      * Returns a value by name.
      *
      * @param name
      *            the name of the column to be retrieved.
      * @return the column value, or {@code null} if the column name is not found
      * @throws IllegalStateException
      *             if no header mapping was provided
      * @throws IllegalArgumentException
-     *             if the record is inconsistent
+     *             if the record is inconsistent (header map references an index not present in this record)
      * @see #isConsistent()
      */
     public String get(final String name) {
         if (mapping == null) {
             throw new IllegalStateException(
                     "No header mapping was specified, the record values can't be accessed by name");
         }
         final Integer index = mapping.get(name);
-            return index != null ? values[index.intValue()] : null;
+        if (index == null) {
+            // Header name not found
+            return null;
+        }
+        // Check if the fetched index is valid for the current record's values array
+        // This handles cases where the record is shorter than expected by the header.
+        final int i = index.intValue();
+        if (i >= values.length) {
+            throw new IllegalArgumentException(
+                String.format("Index for header '%s' is %d but CSVRecord only has %d values!",
+                              name, index, values.length));
+        }
+        return values[i];
     }
\ No newline at end of file
