diff --git a/tmp/f712a924-ce67-4b33-8020-1ea49e5643df_buggy.java b/tmp/40e6630f-6f5b-488f-aaba-b8261cce583e_fixed.java
index b36c3f0..90d2fe9 100644
--- a/tmp/f712a924-ce67-4b33-8020-1ea49e5643df_buggy.java
+++ b/tmp/40e6630f-6f5b-488f-aaba-b8261cce583e_fixed.java
@@ -1,58 +1,82 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
+      // Functions in the "Math" namespace have no side effects.
+      if (nameNode.getFirstChild().isName() &&
+          nameNode.getFirstChild().getString().equals("Math")) {
+        return false;
+      }
+
+      // Check for known side-effect free methods of immutable objects.
+      // TODO(johnlenz): We might need more information than just the
+      // object type to make this determination (e.g. is the object an
+      // immutable literal like "a", 1, true).
+      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
+        // If the object expression itself has no side effects, then the method call
+        // doesn't have side effects.
+        // This isn't true for things like .sort() or .reverse() on an Array
+        // literal.
+        if (!NodeUtil.nodeTypeMayHaveSideEffects(nameNode.getFirstChild(), compiler)) {
            return false;
         }
+      }
+
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
+      // Check for RegExp and String methods that don't have side effects,
+      // but only if the RegExp object is not global.
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+        Node objectNode = nameNode.getFirstChild();
+        String methodName = nameNode.getLastChild().getString();
+
+        // Methods applied to RegExp literals have no side effects.
+        if (objectNode.getType() == Token.REGEXP
+            && REGEXP_METHODS.contains(methodName)) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+        } else if (objectNode.getType() == Token.STRING
+            && STRING_REGEXP_METHODS.contains(methodName)) {
+          // Methods applied to String literals have no side effects if the
+          // argument has no side effect.
+          Node firstArg = nameNode.getNext();
+          if (firstArg == null || !NodeUtil.nodeTypeMayHaveSideEffects(firstArg, compiler)) {
             return false;
           }
         }
       }
+    }
+
+    // TODO(johnlenz): Add some mechanism for determining known functions that
+    // have side effects. Functions like alert() have side effects. Functions
+    // like parseInt() are problematic because they have toString() side effects.
 
     return true;
   }
\ No newline at end of file
