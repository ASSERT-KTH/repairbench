diff --git a/tmp/8ec43528-66f0-46e8-822a-727fea7d109f_buggy.java b/tmp/64b173e2-f23c-46cf-ba10-036d217ea4e8_fixed.java
index b36c3f0..ead7af8 100644
--- a/tmp/8ec43528-66f0-46e8-822a-727fea7d109f_buggy.java
+++ b/tmp/64b173e2-f23c-46cf-ba10-036d217ea4e8_fixed.java
@@ -1,58 +1,73 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
+      // Functions in the "Math" namespace have no side effects.
+      if (nameNode.getFirstChild().isName() &&
+          "Math".equals(nameNode.getFirstChild().getString())) {
+        return false;
+      }
+
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
+        // TODO(nicksantos): This is not technically correct. For example,
+        // o.toString() is not side-effect free if o has a weird toString
+        // method. But this seems to happen rarely in practice.
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
 
+      // Check for RegExp and String method calls with no side-effects.
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+        Node obj = nameNode.getFirstChild();
+        String method = nameNode.getLastChild().getString();
+        if (obj.getType() == Token.REGEXP && REGEXP_METHODS.contains(method)) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+        } else if (obj.getType() == Token.STRING && STRING_REGEXP_METHODS.contains(method)) {
           Node param = nameNode.getNext();
+          // Most String methods are not side-effect free, but methods that take
+          // a RegExp are not currently modeled in the externs. Assume that
+          // if the RegExp object has no global properties, these methods are
+          // side effect free. Note: This check still incorrectly assumes that
+          // String.prototype.search is side-effect free, because it does not
+          // check the properties of the RegExp object.
           if (param != null &&
               (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+                  || param.getType() == Token.REGEXP)) {
             return false;
           }
         }
       }
+    }
 
     return true;
   }
\ No newline at end of file
