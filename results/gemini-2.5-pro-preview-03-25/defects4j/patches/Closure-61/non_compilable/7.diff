diff --git a/tmp/44572de4-c56e-404a-a978-f57711f447ca_buggy.java b/tmp/8efa745a-37c1-4c30-a47e-ab58cb097a00_fixed.java
index b36c3f0..7edf5c9 100644
--- a/tmp/44572de4-c56e-404a-a978-f57711f447ca_buggy.java
+++ b/tmp/8efa745a-37c1-4c30-a47e-ab58cb097a00_fixed.java
@@ -1,58 +1,74 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
+      // Object methods that have no side effects.
+      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
               nameNode.getLastChild().getString())) {
+         // TODO(johnlenz): Generally, extern methods that don't change
+         // state are reasonable candidates but they are not currently
+         // modeled.
+
+         // Handle methods of String, Number, Boolean, RegExp, Math explicitly
+         // here. For the moment ignore all others.
+         Node lhs = nameNode.getFirstChild();
+         if (NodeUtil.isImmutableValue(lhs)) {
+           // Immutable types known to have no side effects on their methods.
+           return false;
+         } else if (lhs.getType() == Token.NAME && lhs.getString().equals("Math")) {
+           // Math functions have no side effects.
            return false;
          }
+      }
 
+      // Modifies this on a known local value is fine.
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
+      // RegExp methods have no side effects if the RegExp object is not global.
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
+        } else if (NodeUtil.isImmutableValue(nameNode.getFirstChild()) // string literal
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
+          // Methods like replace that take a function argument can not be
+          // safely removed. Assume the function expression is side-effect
+          // free as this is verified later.
           if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+              (NodeUtil.isImmutableValue(param) || param.isRegExp())) {
             return false;
           }
         }
       }
+    }
 
     return true;
   }
\ No newline at end of file
