diff --git a/tmp/09002837-3d07-49ae-9d1d-1f272b817eed_buggy.java b/tmp/f338275c-f6ee-4217-aef6-8377905782c9_fixed.java
index b36c3f0..cf6af8e 100644
--- a/tmp/09002837-3d07-49ae-9d1d-1f272b817eed_buggy.java
+++ b/tmp/f338275c-f6ee-4217-aef6-8377905782c9_fixed.java
@@ -1,58 +1,68 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
+      // GETPROP nodes are nameNode.getRhs() or nameNode.getLastChild()
+      // nameNode.getFirstChild() is the object.
+
+      // Functions in the "Math" namespace have no side effects.
+      if (nameNode.getFirstChild().isName() &&
+          nameNode.getFirstChild().getString().equals("Math")) {
+        return false;
+      }
+
+      if (callNode.hasOneChild() // No arguments
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+          && NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
+      // RegExp methods have no side effects if the RegExp object is unmodified.
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+        Node recv = nameNode.getFirstChild();
+        String methodName = nameNode.getLastChild().getString();
+        if (recv.getType() == Token.REGEXP
+            && REGEXP_METHODS.contains(methodName)) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+        } else if (recv.getType() == Token.STRING
+            && STRING_REGEXP_METHODS.contains(methodName)) {
           Node param = nameNode.getNext();
+          // Check for RegExp object literal.
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
