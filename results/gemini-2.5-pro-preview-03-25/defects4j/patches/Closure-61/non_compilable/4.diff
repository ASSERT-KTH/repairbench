diff --git a/tmp/0187eaaa-b897-4d70-8bec-e81ae7efa8db_buggy.java b/tmp/677f433f-1482-48cb-9ac0-eb07e93fc058_fixed.java
index b36c3f0..43b969a 100644
--- a/tmp/0187eaaa-b897-4d70-8bec-e81ae7efa8db_buggy.java
+++ b/tmp/677f433f-1482-48cb-9ac0-eb07e93fc058_fixed.java
@@ -1,58 +1,71 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
+      // Functions in the "Math" namespace have no side effects.
+      if (nameNode.getFirstChild().isName() &&
+          "Math".equals(nameNode.getFirstChild().getString())) {
+        return false;
+      }
+
+      // Object methods with no side effects, e.g. toString, valueOf.
+      if (callNode.hasOneChild() // No arguments? Check this logic...
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
 
+      // Methods annotated @modifies {this} that are called on a local object
+      // are assumed to not modify global state.
       if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+          && NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
+      // RegExp and String methods with no side effects IF the RegExp object
+      // has no global flag.
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
+          // Some String methods like search take a RegExp object or string
+          // as the first parameter. We assume that if the parameter is
+          // a literal RegExp or string, then the method has no side effects.
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
+    // We assume all other functions have side effects.
     return true;
   }
\ No newline at end of file
