diff --git a/tmp/e52fce3b-a4de-4cd7-86da-3d3d3ccc36cf_buggy.java b/tmp/d24b3c22-30b2-4264-b9fe-d5cea29284ed_fixed.java
index b36c3f0..3f80716 100644
--- a/tmp/e52fce3b-a4de-4cd7-86da-3d3d3ccc36cf_buggy.java
+++ b/tmp/d24b3c22-30b2-4264-b9fe-d5cea29284ed_fixed.java
@@ -1,58 +1,73 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
+      // Object methods that don't have side effects.
+      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
+        // The method is side-effect free, but we need to check the receiver
+        // has no side effects either. If the receiver doesn't, then the
+        // call doesn't have side effects.
+        if (!NodeUtil.mayHaveSideEffects(nameNode.getFirstChild(), compiler)) {
+            return false;
+        }
+      }
+
+      // Functions in the "Math" namespace have no side effects.
+      Node objectNode = nameNode.getFirstChild();
+      if (objectNode.getType() == Token.NAME && objectNode.getString().equals("Math")) {
         return false;
       }
 
+      // Modifies this calls are known to be side effect free if the
+      // receiver has no side effects.
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
+      // RegExp methods that don't have side effects.
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
+          // Methods like replace behave differently if the first argument is
+          // not a string or regex. But if the first argument is a string or
+          // regex, then these methods have no side effects.
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
