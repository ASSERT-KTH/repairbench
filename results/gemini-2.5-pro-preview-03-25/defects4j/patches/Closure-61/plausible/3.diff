diff --git a/tmp/696ad2d2-d8ce-4981-a1cd-46e6b2eedbb4_buggy.java b/tmp/29ad45b0-592f-4c75-a709-eb09f0043c27_fixed.java
index b36c3f0..64044b4 100644
--- a/tmp/696ad2d2-d8ce-4981-a1cd-46e6b2eedbb4_buggy.java
+++ b/tmp/29ad45b0-592f-4c75-a709-eb09f0043c27_fixed.java
@@ -1,58 +1,71 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
+      // Functions in the "Math" namespace have no side effects.
+      if (nameNode.getFirstChild().getType() == Token.NAME &&
+          nameNode.getFirstChild().getString().equals("Math")) {
+        return false;
+      }
+
+      // Object methods without side effects e.g. toString, valueOf
+      if (callNode.hasOneChild() // No arguments passed.
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
 
+      // Methods on locals that only modify `this` are IE specific
+      // and handled elsewhere. Check for 'this'.
       if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+          && NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
+      // Regexp and String methods
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
+        // Methods on Regexp objects have no side effects.
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
+        }
+        // Some methods on String objects have no side effects if the argument
+        // is a literal.
+        else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
+          Node param = nameNode.getNext(); // Get first argument
+          // Check for literal Regexp or String argument.
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
