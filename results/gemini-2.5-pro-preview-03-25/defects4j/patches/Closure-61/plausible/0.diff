diff --git a/tmp/54e58178-d9e0-4c9b-8724-929f966cebb0_buggy.java b/tmp/355431fd-beb8-4825-ab35-94e6110af137_fixed.java
index b36c3f0..418bd5e 100644
--- a/tmp/54e58178-d9e0-4c9b-8724-929f966cebb0_buggy.java
+++ b/tmp/355431fd-beb8-4825-ab35-94e6110af137_fixed.java
@@ -1,58 +1,66 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
+      // Functions in the "Math" namespace have no side effects.
+      if (nameNode.getFirstChild().getType() == Token.NAME &&
+          nameNode.getFirstChild().getString().equals("Math")) {
+        return false;
+      }
+
+      if (callNode.hasOneChild() // obj.method() -- no arguments
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
+        // TODO(johnlenz): Determine if this is necessary. Seems dubious.
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
 
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
+          // TODO(johnlenz): Should we be concerned about the type of the
+          // second parameter? Or can we assume that the user isn't stupid.
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
