diff --git a/tmp/e66e999c-4951-4627-8262-812b26b23217_buggy.java b/tmp/b7c114cc-5135-41c1-83fa-1b3df2cc9603_fixed.java
index 8e93a5e..641e0b4 100644
--- a/tmp/e66e999c-4951-4627-8262-812b26b23217_buggy.java
+++ b/tmp/b7c114cc-5135-41c1-83fa-1b3df2cc9603_fixed.java
@@ -1,43 +1,56 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        int pos = findWrapPos(text, width, 0); // Find initial wrap point
 
         if (pos == -1)
         {
+            // Text fits on one line
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line (up to wrap point)
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
+        // Loop for subsequent lines
         while (true)
         {
+            // Prepare the text for the next line: padding + remaining trimmed text
+            // The remaining text starts from the wrap position 'pos' found in the previous iteration
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+
+            // Find the wrap position for this new (padded) line
+            // FIX: Use 0 instead of nextLineTabStop for the start position in the loop.
+            // The start position for searching the wrap point should always be 0 for the current line text.
+            pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                // Remainder fits on the last line
+                // Apply rtrim to the last line for consistency, like other appended lines.
+                sb.append(rtrim(text));
                 return sb;
             }
 
+            // Append the wrapped part of the current line
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+            // The loop continues. 'text' is updated at the start of the loop
+            // using the 'pos' found in this iteration to determine the remaining text.
         }
     }
\ No newline at end of file
