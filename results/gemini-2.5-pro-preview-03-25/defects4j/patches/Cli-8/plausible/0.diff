diff --git a/tmp/0c81f720-d699-4b91-bc88-afef34eb34d9_buggy.java b/tmp/7f015215-b17a-43f9-bdbd-581e4c221ac5_fixed.java
index 8e93a5e..2807a13 100644
--- a/tmp/0c81f720-d699-4b91-bc88-afef34eb34d9_buggy.java
+++ b/tmp/7f015215-b17a-43f9-bdbd-581e4c221ac5_fixed.java
@@ -1,43 +1,58 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // Find the first potential wrap position, searching from index 0.
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
+            // No wrap needed, append the entire text (right-trimmed)
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line (substring up to the wrap position, right-trimmed)
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare the padding string for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
+        // Loop through the remaining text
         while (true)
         {
+            // Get the remaining text from the previous wrap position,
+            // trim leading/trailing whitespace, and prepend the padding.
+            // This forms the text for the next line.
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+
+            // Find the wrap position within the current potentially padded line.
+            // The search for the wrap position should start from the beginning (index 0)
+            // of this new 'text' string.
+            pos = findWrapPos(text, width, 0); // FIX: Changed startPos from nextLineTabStop to 0
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                // The rest of the text fits on the current line.
+                // Append it (right-trimmed) and we are done.
+                sb.append(rtrim(text));
                 return sb;
             }
 
+            // Append the wrapped line (substring up to the new wrap position, right-trimmed)
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+            // Continue the loop with the text remaining after the current wrap position 'pos'.
+            // 'text' will be reconstructed in the next iteration based on this new 'pos'.
         }
     }
\ No newline at end of file
