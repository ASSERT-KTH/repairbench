diff --git a/tmp/947cd330-8ae2-4a7e-86f7-ed9dda256a9f_buggy.java b/tmp/456c45db-115a-432e-8b12-353dcf52ffae_fixed.java
index 8e93a5e..b7cddd2 100644
--- a/tmp/947cd330-8ae2-4a7e-86f7-ed9dda256a9f_buggy.java
+++ b/tmp/456c45db-115a-432e-8b12-353dcf52ffae_fixed.java
@@ -1,43 +1,62 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Find the initial wrap position in the original text
         int pos = findWrapPos(text, width, 0);
 
+        // If the text doesn't need wrapping, append it (trimmed) and return
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line (trimmed)
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        // Start processing the rest of the text
+        String remainingText = text.substring(pos).trim();
+
+        // Loop while there's remaining text to process
+        while (remainingText.length() > 0) // Use remainingText.length() > 0 as loop condition
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // Construct the text for the current line (including padding)
+            String currentLineText = padding + remainingText;
 
+            // Find the wrap position within this padded line
+            pos = findWrapPos(currentLineText, width, 0);
+
+            // If the current padded line fits completely
             if (pos == -1)
             {
-                sb.append(text);
+                sb.append(currentLineText); // Append the final padded line
+                return sb; // We are done
+            }
 
+            // Append the part of the current padded line that fits (trimmed)
+            sb.append(rtrim(currentLineText.substring(0, pos))).append(defaultNewLine);
+
+            // Update remainingText for the next iteration.
+            // It's the part of the current padded line after the wrap point, trimmed.
+            remainingText = currentLineText.substring(pos).trim();
+        }
+        
+        // This return statement should theoretically not be reached if the logic is correct,
+        // as the loop should end with appending the last line and returning.
+        // However, it's needed to satisfy the compiler.
         return sb;
     }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
