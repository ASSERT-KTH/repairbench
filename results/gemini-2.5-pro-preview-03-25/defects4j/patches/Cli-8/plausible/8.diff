diff --git a/tmp/bc19818b-0984-4d9e-aece-b97d8a7d669f_buggy.java b/tmp/4a9a5d94-a0bb-41b2-b208-b4bd054ed80d_fixed.java
index 8e93a5e..5e37b03 100644
--- a/tmp/bc19818b-0984-4d9e-aece-b97d8a7d669f_buggy.java
+++ b/tmp/4a9a5d94-a0bb-41b2-b208-b4bd054ed80d_fixed.java
@@ -1,43 +1,56 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // FIX: Pass 0 as startPos to findWrapPos for subsequent lines,
+            // as the text already includes the padding. Passing nextLineTabStop
+            // caused findWrapPos to potentially miss valid wrap points or
+            // wrap incorrectly when the wrap point was within the padding space.
+            pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
 
+            // Fix for CLI-215: prevents formatting issues when the only wrap point
+            // found is the space concluding the padding, and the line overflows.
+            // In this situation, force a break at the width limit instead.
+            if (text.length() > width && pos == nextLineTabStop - 1)
+            {
+                 pos = width;
+            }
+
+
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
