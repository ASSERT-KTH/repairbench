diff --git a/tmp/cb818819-a90b-4ed6-9c0a-f45fc0f49f82_buggy.java b/tmp/d4049621-3f8f-4d26-8e7a-76196d85a35b_fixed.java
index 8e93a5e..342fe6d 100644
--- a/tmp/cb818819-a90b-4ed6-9c0a-f45fc0f49f82_buggy.java
+++ b/tmp/d4049621-3f8f-4d26-8e7a-76196d85a35b_fixed.java
@@ -1,43 +1,69 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
+        // Handle null text
+        if (text == null || text.length() == 0) 
         {
-            sb.append(rtrim(text));
-
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Split by newline. Use limit=-1 to preserve trailing empty strings,
+        // which might be relevant for intentional blank lines.
+        // Use '\n' directly as the splitter, assuming findWrapPos handles '\n' appropriately
+        // and defaultNewLine might be '\r\n'. Using a simple split and then handling
+        // padding logic seems robust across platforms.
+        String[] lines = text.split("\n", -1);
+
         final String padding = createPadding(nextLineTabStop);
+        boolean firstLineProcessed = true; // Flag for controlling inter-line newlines in output
 
-        while (true)
+        for (int i = 0; i < lines.length; i++)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            String line = lines[i];
 
-            if (pos == -1)
-            {
-                sb.append(text);
+            // Add newline separator between original lines, except before the first one
+            if (!firstLineProcessed) {
+                sb.append(defaultNewLine);
+            } else {
+                firstLineProcessed = false; // Mark first line as processed
+            }
+
+            // Handle wrapping for the current line
+            int pos = findWrapPos(line, width, 0);
+            if (pos == -1) { // Line fits entirely
+                sb.append(rtrim(line));
+            } else {
+                // Append first segment
+                sb.append(rtrim(line.substring(0, pos)));
+                // Process remainder with padding
+                String remainder = line.substring(pos).trim();
+                while (remainder.length() > 0) {
+                     sb.append(defaultNewLine); // Newline before each subsequent wrapped segment
+                     String currentPaddedLine = padding + remainder;
+                     pos = findWrapPos(currentPaddedLine, width, 0);
 
+                     if (pos == -1) { // Remainder fits on one padded line
+                         sb.append(rtrim(currentPaddedLine));
+                         remainder = ""; // Done
+                     } else {
+                         // Append wrapped segment
+                         sb.append(rtrim(currentPaddedLine.substring(0, pos)));
+                         // Update remainder for next iteration
+                         remainder = currentPaddedLine.substring(pos).trim();
+                     }
+                }
+            }
+        }
         return sb;
     }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
