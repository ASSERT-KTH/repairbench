diff --git a/tmp/daa8bbe2-bdfc-46f7-bf0c-65132ee308b5_buggy.java b/tmp/7114ea46-9394-497f-b82c-c140851f5e5b_fixed.java
index 8e93a5e..1ace33b 100644
--- a/tmp/daa8bbe2-bdfc-46f7-bf0c-65132ee308b5_buggy.java
+++ b/tmp/7114ea46-9394-497f-b82c-c140851f5e5b_fixed.java
@@ -1,43 +1,66 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // Handle the first line (no padding, startPos 0)
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
+            // Text does not need wrapping
             sb.append(rtrim(text));
-
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Append the first line (substring before wrap pos)
+        // findWrapPos returns index + 1 of the wrap point (char AFTER the break),
+        // so substring must end at pos - 1.
+        sb.append(rtrim(text.substring(0, pos - 1))).append(defaultNewLine);
+
+        // Get the remaining text, trimming leading/trailing whitespace
+        // The text starts AFTER the wrap pos.
+        String remainingText = text.substring(pos).trim();
+
+        // Prepare padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        // Loop while there is remaining text to process
+        while (true) // Use while(true) and break/return
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // Construct the text for the current line (padded)
+            String currentLine = padding + remainingText;
 
+            // Find wrap position for the current padded line
+            // Use nextLineTabStop as startPos for findWrapPos
+            pos = findWrapPos(currentLine, width, nextLineTabStop);
+
+            // If the current line fits without wrapping
             if (pos == -1)
             {
-                sb.append(text);
-
-                return sb;
+                // Append the whole (padded) line and exit
+                // Do not rtrim the final line, append as is.
+                sb.append(currentLine);
+                return sb; // Exit loop and function
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Wrap occurs, append the part of the line before the wrap point
+            // findWrapPos returns index + 1, so substring ends at pos - 1
+            sb.append(rtrim(currentLine.substring(0, pos - 1))).append(defaultNewLine);
+
+            // Update remaining text for the next iteration
+            // The next part starts AFTER the wrap pos.
+            remainingText = currentLine.substring(pos).trim();
         }
+        // Note: Original code had while(true) structure with returns inside.
+        // This section is unreachable if logic is correct.
     }
\ No newline at end of file
