diff --git a/tmp/3ac1390f-8b25-411f-b84d-3e8c0efd38d7_buggy.java b/tmp/016b73e3-0b92-4117-99e7-f8b28598742e_fixed.java
index 8e93a5e..caed6ef 100644
--- a/tmp/3ac1390f-8b25-411f-b84d-3e8c0efd38d7_buggy.java
+++ b/tmp/016b73e3-0b92-4117-99e7-f8b28598742e_fixed.java
@@ -1,43 +1,97 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        // Calculate padding string once. Handles potential negative tab stop.
+        final String padding = (nextLineTabStop >= 0) ? createPadding(nextLineTabStop) : ""; 
         
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+        int currentPos = 0;
+        final int textLength = text.length();
+        boolean firstLine = true; // Tracks if we are processing the first line
 
-            return sb;
+        while (currentPos < textLength) {
+            // Determine where the current line should break.
+            // It breaks at the earliest of the next newline character in the text,
+            // or the wrap position calculated by findWrapPos based on the width.
+
+            // Find the index of the next newline character starting from currentPos.
+            int nextNewline = text.indexOf('\n', currentPos);
+            
+            // Find the wrapping position based on spaces and width. 
+            // findWrapPos returns the index where the *next* line should start, or -1 if no wrap needed/possible.
+            int wrapPos = findWrapPos(text, width, currentPos); 
+
+            // Determine the starting position index for the next line (breakPos).
+            // This will be the minimum of (nextNewline + 1) or wrapPos, 
+            // handling cases where one or both are not found (-1).
+            int breakPos; 
+            if (nextNewline != -1 && (wrapPos == -1 || nextNewline + 1 < wrapPos)) {
+                // Newline occurs first, break after the newline character.
+                breakPos = nextNewline + 1; 
+            } else if (wrapPos != -1 && wrapPos > currentPos) {
+                 // Wrapping position occurs first (or no newline).
+                 // Break at the position returned by findWrapPos (start of the next line).
+                breakPos = wrapPos; 
+            } else {
+                 // No newline and no wrap position found within the constraints; 
+                 // this is the last segment of the text.
+                breakPos = textLength; 
             }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+            // Determine the exclusive end index for the substring forming the current line content.
+            int segmentEndExclusive;
+             if (nextNewline != -1 && breakPos == nextNewline + 1) {
+                 // If we broke because of a newline, the content ends just before the newline.
+                 segmentEndExclusive = breakPos - 1; 
+             } else {
+                 // If we broke due to wrapping or reached the end of the text, 
+                 // the content ends at the break position. Trailing spaces will be handled by rtrim.
+                 segmentEndExclusive = breakPos;
+             }
             
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // Ensure start index is not greater than end index (can happen with empty lines).
+            if (segmentEndExclusive < currentPos) {
+                segmentEndExclusive = currentPos;
+            }
 
-            if (pos == -1)
-            {
-                sb.append(text);
+            // Extract the line content for this iteration.
+            String lineText = text.substring(currentPos, segmentEndExclusive);
 
-                return sb;
+            // Add padding for lines after the first one.
+            if (!firstLine) {
+                sb.append(padding);
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the trimmed line content. rtrim handles trailing whitespace from original text or wrapping.
+            sb.append(rtrim(lineText));
+
+            // Update the current position to the calculated start of the next line.
+            currentPos = breakPos;
+
+            // Add a newline character if this is not the last segment of the text.
+            if (currentPos < textLength) {
+                sb.append(defaultNewLine);
             }
+            
+            // Mark that we are no longer on the first line (for padding purposes).
+            firstLine = false;
+
+            // Optimization: Skip leading whitespace characters at the start of the next line.
+            // This prevents unintended extra indentation if the original text
+            // had leading spaces after a wrap point or newline.
+             while (currentPos < textLength && Character.isWhitespace(text.charAt(currentPos))) {
+                 currentPos++;
+             }
+        }
+        return sb;
     }
\ No newline at end of file
