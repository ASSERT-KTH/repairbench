diff --git a/tmp/a2e09435-9ad9-447d-84e1-57afe3cd8667_buggy.java b/tmp/b4edefdb-e022-4c1b-8e56-a3533f7a4a00_fixed.java
index 31f58d4..61b8f70 100644
--- a/tmp/a2e09435-9ad9-447d-84e1-57afe3cd8667_buggy.java
+++ b/tmp/b4edefdb-e022-4c1b-8e56-a3533f7a4a00_fixed.java
@@ -1,101 +1,182 @@
+import java.util.Arrays;
+import java.util.Iterator;
+
+// Assuming the class context provides these members/methods:
+// - protected List tokens; (Initialized by init)
+// - protected Options options;
+// - private boolean stopParsing; (Initialized to false by init)
+// - protected void init();
+// - protected void processOptionToken(String token, boolean stopAtNonOption);
+// - protected void burstToken(String token, boolean stopAtNonOption);
+// - protected void gobble(Iterator iter);
+// - class Options { boolean hasOption(String opt); }
+
+
     /**
      * <p>An implementation of {@link Parser}'s abstract
      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
      *
      * <p>The following are the rules used by this flatten method.
      * <ol>
      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
      *  burst anymore of <code>arguments</code> entries, just add each
      *  successive entry without further processing.  Otherwise, ignore
      *  <code>stopAtNonOption</code>.</li>
      *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is two characters
      *  in length and the first character is "<b>-</b>" then check if this
      *  is a valid {@link Option} id.  If it is a valid id, then add the
      *  entry to the list of processed tokens and set the current {@link Option}
      *  member.  If it is not a valid id and <code>stopAtNonOption</code>
      *  is true, then the remaining entries are copied to the list of
      *  processed tokens.  Otherwise, the current entry is ignored.</li>
      *  <li>if the current <code>arguments</code> entry is more than two
      *  characters in length and the first character is "<b>-</b>" then
      *  we need to burst the entry to determine its constituents.  For more
      *  information on the bursting algorithm see
      *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
      *  <li>if the current <code>arguments</code> entry is not handled
      *  by any of the previous rules, then the entry is added to the list
      *  of processed tokens.</li>
      * </ol>
      * </p>
      *
      * @param options The command line {@link Options}
      * @param arguments The command line arguments to be parsed
      * @param stopAtNonOption Specifies whether to stop flattening
      * when an non option is found.
      * @return The flattened <code>arguments</code> String array.
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        init();
+        init(); // Resets 'tokens' list and internal states like 'stopParsing'.
         this.options = options;
+        // Assume 'this.stopParsing' is a boolean member variable initialized to false by init().
 
         // an iterator for the command line tokens
         Iterator iter = Arrays.asList(arguments).iterator();
 
         // process each command line token
         while (iter.hasNext())
         {
             // get the next command line token
             String token = (String) iter.next();
 
-            // handle long option --foo or --foo=bar
-            if (token.startsWith("--"))
+            // If stopParsing flag is set, add token directly without processing.
+            // This flag is set by '--', or by encountering an unrecognized token
+            // or a non-option token when stopAtNonOption is true.
+            // It might also be set by burstToken internally.
+            if (this.stopParsing)
             {
-                if (token.indexOf('=') != -1)
-                {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                tokens.add(token);
             }
-                else
+            else // Otherwise parse the token
+            {
+                // handle "--" stop token
+                if ("--".equals(token))
                 {
                     tokens.add(token);
+                    this.stopParsing = true; // Set flag to stop processing subsequent tokens as options
                 }
-            }
-
-            // single hyphen
+                // handle "-" standalone token
                 else if ("-".equals(token))
                 {
                     tokens.add(token);
                 }
+                // handle long option --foo or --foo=bar
+                else if (token.startsWith("--"))
+                {
+                    int eq = token.indexOf('=');
+                    String opt = eq == -1 ? token : token.substring(0, eq);
+
+                    if (!options.hasOption(opt)) // Unrecognized long option
+                    {
+                        if (stopAtNonOption)
+                        {
+                            // Treat as a non-option argument, add it, and stop option processing
+                            tokens.add(token);
+                            this.stopParsing = true;
+                        }
+                        else
+                        {
+                            // Not stopping: Add token(s) potentially splitting on '=', mimicking original behavior.
+                            if (eq != -1)
+                            {
+                                tokens.add(opt); // Add "--unrecognized"
+                                tokens.add(token.substring(eq + 1)); // Add "value"
+                            }
+                            else
+                            {
+                                tokens.add(token); // Add "--unrecognized"
+                            }
+                        }
+                    }
+                    else // Recognized long option
+                    {
+                        // Add the option token, splitting if '=' exists
+                        tokens.add(opt);
+                        if (eq != -1)
+                        {
+                            tokens.add(token.substring(eq + 1));
+                        }
+                        // Future parsing stages or gobble will handle argument requirements.
+                    }
+                }
+                // handle short option -X or -XYZ...
                 else if (token.startsWith("-"))
                 {
-                if (token.length() == 2)
+                    if (token.length() == 2) // Handles -X
                     {
+                        if (options.hasOption(token))
+                        {
+                            // Valid option: process it (adds token, sets currentOption for gobble)
                             processOptionToken(token, stopAtNonOption);
                         }
-                else if (options.hasOption(token))
+                        else // Unrecognized short option -X
                         {
+                            if (stopAtNonOption)
+                            {
+                                // Treat as a non-option argument, add it, and stop option processing
                                 tokens.add(token);
+                                this.stopParsing = true;
+                            }
+                            // else: ignore token (Rule 4 when stopAtNonOption is false)
+                        }
                     }
                     // requires bursting
-                else
+                    else // Handles -XYZ... (length > 2)
                     {
+                        // Burst the token.
+                        // Assume burstToken respects stopAtNonOption. It should handle bursting
+                        // and add the appropriate tokens. If stopAtNonOption is true and
+                        // bursting stops prematurely due to a non-option character,
+                        // burstToken is assumed to add the remaining part as a single token
+                        // and set 'this.stopParsing = true'.
                         burstToken(token, stopAtNonOption);
                     }
                 }
-            else if (stopAtNonOption)
-            {
-                process(token);
-            }
+                // handle non-option token
                 else
                 {
                     tokens.add(token);
+                    if (stopAtNonOption)
+                    {
+                        // First non-option encountered, stop processing subsequent tokens as options
+                        this.stopParsing = true;
                     }
+                }
+            } // End of parsing block for the current token
 
+            // Gobble the next token only if we haven't stopped parsing
+            // and the last processed token represented an option expecting an argument.
+            if (!this.stopParsing)
+            {
                  gobble(iter);
             }
+        } // End while loop
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
