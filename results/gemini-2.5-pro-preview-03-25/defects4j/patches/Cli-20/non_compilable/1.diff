diff --git a/tmp/2e021724-89c4-4d13-90b5-f9edddfc2c43_buggy.java b/tmp/3f7ac344-6760-41ec-ac9b-e2ed0a5e0827_fixed.java
index 31f58d4..7b13221 100644
--- a/tmp/2e021724-89c4-4d13-90b5-f9edddfc2c43_buggy.java
+++ b/tmp/3f7ac344-6760-41ec-ac9b-e2ed0a5e0827_fixed.java
@@ -1,101 +1,181 @@
     /**
      * <p>An implementation of {@link Parser}'s abstract
      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
      *
      * <p>The following are the rules used by this flatten method.
      * <ol>
      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
      *  burst anymore of <code>arguments</code> entries, just add each
      *  successive entry without further processing.  Otherwise, ignore
      *  <code>stopAtNonOption</code>.</li>
      *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is two characters
      *  in length and the first character is "<b>-</b>" then check if this
      *  is a valid {@link Option} id.  If it is a valid id, then add the
      *  entry to the list of processed tokens and set the current {@link Option}
      *  member.  If it is not a valid id and <code>stopAtNonOption</code>
      *  is true, then the remaining entries are copied to the list of
      *  processed tokens.  Otherwise, the current entry is ignored.</li>
      *  <li>if the current <code>arguments</code> entry is more than two
      *  characters in length and the first character is "<b>-</b>" then
      *  we need to burst the entry to determine its constituents.  For more
      *  information on the bursting algorithm see
      *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
      *  <li>if the current <code>arguments</code> entry is not handled
      *  by any of the previous rules, then the entry is added to the list
      *  of processed tokens.</li>
      * </ol>
      * </p>
      *
      * @param options The command line {@link Options}
      * @param arguments The command line arguments to be parsed
      * @param stopAtNonOption Specifies whether to stop flattening
      * when an non option is found.
      * @return The flattened <code>arguments</code> String array.
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        init();
+        init(); // Clears this.tokens
         this.options = options;
 
-        // an iterator for the command line tokens
-        Iterator iter = Arrays.asList(arguments).iterator();
+        // An iterator for the command line tokens
+        // Use Java 5 generics for safety
+        Iterator<String> iter = Arrays.asList(arguments).iterator();
 
-        // process each command line token
+        // A flag to remember if we need to stop processing options
+        boolean eatTheRest = false;
+
+        // Process each command line token
         while (iter.hasNext())
         {
-            // get the next command line token
-            String token = (String) iter.next();
+            // Get the next command line token
+            String token = iter.next();
 
-            // handle long option --foo or --foo=bar
-            if (token.startsWith("--"))
+            // If stopAtNonOption is enabled and we must eat the rest
+            if (eatTheRest)
             {
-                if (token.indexOf('=') != -1)
-                {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                this.tokens.add(token); // Add token directly
             }
-                else
+            // Handle the special token "--"
+            else if ("--".equals(token))
             {
-                    tokens.add(token);
-                }
+                this.tokens.add(token);
+                eatTheRest = true; // Stop processing options
             }
-
-            // single hyphen
+            // Handle the special token "-"
             else if ("-".equals(token))
             {
-                tokens.add(token);
+                this.tokens.add(token);
             }
+            // Handle options starting with "--"
+            else if (token.startsWith("--"))
+            {
+                int eq = token.indexOf('=');
+                String opt = eq == -1 ? token : token.substring(0, eq);
+
+                // Check if the option (the part before =) is recognized
+                if (!options.hasOption(opt)) // Option NOT recognized
+                {
+                    if (stopAtNonOption)
+                    {
+                        // If stopping, add the original token as an argument and stop
+                        this.tokens.add(token);
+                        eatTheRest = true;
+                    }
+                    else
+                    {
+                        // If not stopping, add as an argument (Rule 6)
+                        this.tokens.add(token);
+                    }
+                }
+                else // Option recognized
+                {
+                    if (eq != -1) // Contains =
+                    {
+                        this.tokens.add(opt); // Add "--opt" part
+                        // Fix: Add value part without "="
+                        this.tokens.add(token.substring(eq + 1));
+                    }
+                    else
+                    {
+                        this.tokens.add(token); // Add "--opt"
+                    }
+                }
+            }
+            // Handle options starting with "-"
             else if (token.startsWith("-"))
             {
-                if (token.length() == 2)
+                if (token.length() == 2) // Like -X
                 {
+                     // Check if the option -X is recognized
+                    if (!options.hasOption(token)) // Option -X NOT recognized
+                    {
+                        if (stopAtNonOption)
+                        {
+                            // If stopping, add the original token as an argument and stop
+                            this.tokens.add(token);
+                            eatTheRest = true;
+                        }
+                        else
+                        {
+                            // If not stopping, add as argument (Rule 6)
+                            this.tokens.add(token);
+                        }
+                    }
+                    else // Option -X recognized
+                    {
+                        // processOptionToken adds the token to this.tokens and sets currentOption
                         processOptionToken(token, stopAtNonOption);
                     }
-                else if (options.hasOption(token))
+                }
+                // Potential cluster (-abc) or long opt (-longopt), length > 2
+                else if (options.hasOption(token)) // Check if token as a whole is registered (e.g. -longopt)
+                {
+                     this.tokens.add(token);
+                }
+                // Requires bursting OR is unrecognized -abc type token
+                else
+                {
+                    // If stopAtNonOption is true, don't burst, just add token as argument and stop
+                    if (stopAtNonOption)
                     {
-                    tokens.add(token);
+                        this.tokens.add(token);
+                        eatTheRest = true;
                     }
-                // requires bursting
                     else
                     {
-                    burstToken(token, stopAtNonOption);
+                        // Otherwise (stopAtNonOption is false), burst the token
+                        // Pass false, as stopAtNonOption=true case is handled above.
+                        // burstToken should add to this.tokens
+                        burstToken(token, false);
                     }
                 }
-            else if (stopAtNonOption)
+            }
+            // Handle non-option arguments
+            else
             {
-                process(token);
+                // If stopping, add the original token as an argument and stop
+                if (stopAtNonOption)
+                {
+                    this.tokens.add(token);
+                    eatTheRest = true;
                 }
                 else
                 {
-                tokens.add(token);
+                     this.tokens.add(token);
+                }
             }
 
+            // Gobble arguments for the current option ONLY if we are NOT stopping
+            if (!eatTheRest)
+            {
                 gobble(iter);
             }
+        }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        // Use String[] generics for type safety
+        return this.tokens.toArray(new String[this.tokens.size()]);
     }
\ No newline at end of file
