diff --git a/tmp/112dd933-562a-4443-a0bc-445e82b0027a_buggy.java b/tmp/b15600ab-dadc-4fdc-9711-afbde040e372_fixed.java
index 31f58d4..7da4aad 100644
--- a/tmp/112dd933-562a-4443-a0bc-445e82b0027a_buggy.java
+++ b/tmp/b15600ab-dadc-4fdc-9711-afbde040e372_fixed.java
@@ -1,101 +1,178 @@
     /**
      * <p>An implementation of {@link Parser}'s abstract
      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
      *
      * <p>The following are the rules used by this flatten method.
      * <ol>
      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
      *  burst anymore of <code>arguments</code> entries, just add each
      *  successive entry without further processing.  Otherwise, ignore
      *  <code>stopAtNonOption</code>.</li>
      *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is two characters
      *  in length and the first character is "<b>-</b>" then check if this
      *  is a valid {@link Option} id.  If it is a valid id, then add the
      *  entry to the list of processed tokens and set the current {@link Option}
      *  member.  If it is not a valid id and <code>stopAtNonOption</code>
      *  is true, then the remaining entries are copied to the list of
      *  processed tokens.  Otherwise, the current entry is ignored.</li>
      *  <li>if the current <code>arguments</code> entry is more than two
      *  characters in length and the first character is "<b>-</b>" then
      *  we need to burst the entry to determine its constituents.  For more
      *  information on the bursting algorithm see
      *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
      *  <li>if the current <code>arguments</code> entry is not handled
      *  by any of the previous rules, then the entry is added to the list
      *  of processed tokens.</li>
      * </ol>
      * </p>
      *
      * @param options The command line {@link Options}
      * @param arguments The command line arguments to be parsed
      * @param stopAtNonOption Specifies whether to stop flattening
      * when an non option is found.
      * @return The flattened <code>arguments</code> String array.
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        init();
+        init(); // Resets 'tokens' list member
         this.options = options;
 
-        // an iterator for the command line tokens
-        Iterator iter = Arrays.asList(arguments).iterator();
+        // Flag to indicate that following tokens are non-options
+        boolean eatTheRest = false;
+
+        List<String> Earguments = Arrays.asList(arguments); // Use List for iterator access
+        Iterator<String> iter = Earguments.iterator();
 
         // process each command line token
         while (iter.hasNext())
         {
             // get the next command line token
-            String token = (String) iter.next();
+            String token = iter.next();
 
-            // handle long option --foo or --foo=bar
-            if (token.startsWith("--"))
+            // If stopAtNonOption is enabled and a previous token caused a stop,
+            // just add the token and continue.
+            if (eatTheRest)
             {
-                if (token.indexOf('=') != -1)
-                {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                this.tokens.add(token);
             }
             else
             {
-                    tokens.add(token);
+                // Special token "--" : doesn't cause stop, just passes through.
+                // The parser loop will handle "--" and potential stop logic.
+                if ("--".equals(token))
+                {
+                    this.tokens.add(token);
+                    // If stopAtNonOption is true, subsequent tokens should be added as is.
+                    // However, "--" itself signals the end of options regardless. Let the parser handle it.
                 }
-            }
-
-            // single hyphen
+                // Special token "-" : passes through.
                 else if ("-".equals(token))
                 {
-                tokens.add(token);
+                    this.tokens.add(token);
                 }
+                // Long option (--foo or --foo=bar)
+                else if (token.startsWith("--"))
+                {
+                    int pos = token.indexOf('=');
+                    String opt = pos == -1 ? token : token.substring(0, pos);
+
+                    // Check if it is a recognized long option
+                    if (options.hasOption(opt))
+                    {
+                        // Recognized, add accordingly
+                        this.tokens.add(opt);
+                        if (pos != -1)
+                        {
+                            this.tokens.add(token.substring(pos + 1));
+                        }
+                    }
+                    // Not a recognized long option
+                    else if (stopAtNonOption)
+                    {
+                        // Trigger stop, add the original token unmodified
+                        eatTheRest = true;
+                        this.tokens.add(token);
+                    }
+                    else
+                    {
+                        // Not stopping, add the token(s) for the parser to handle.
+                        // The original code split token like --foo=bar even if not recognized.
+                        // Maintain this behavior for compatibility, although adding the original token might be safer.
+                        this.tokens.add(opt); // Add the potential option part
+                        if (pos != -1) {
+                           this.tokens.add(token.substring(pos + 1)); // Add the value part
+                        }
+                    }
+                }
+                // Short option (-X) or cluster (-XYZ)
                 else if (token.startsWith("-"))
                 {
+                    // Single short option (-X)
                     if (token.length() == 2)
                     {
-                    processOptionToken(token, stopAtNonOption);
+                        // Check if it is a recognized option
+                        if (options.hasOption(token))
+                        {
+                            // Recognized, add it
+                            this.tokens.add(token);
                         }
+                        // Not recognized
+                        else if (stopAtNonOption)
+                        {
+                            // Trigger stop, add original token
+                            eatTheRest = true;
+                            this.tokens.add(token);
+                        }
+                        // else: Not recognized and not stopping -> ignore (Rule 4)
+                        // No token is added.
+                    }
+                    // Cluster (-XYZ) or potentially longer option (-foo)
                     else if (options.hasOption(token))
                     {
-                    tokens.add(token);
-                }
-                // requires bursting
-                else
-                {
-                    burstToken(token, stopAtNonOption);
-                }
+                        // Whole token is a single known option
+                        this.tokens.add(token);
                     }
+                    // Not a single known option, potentially requires bursting
                     else if (stopAtNonOption)
                     {
-                process(token);
+                        // Rule 1: "do not burst anymore". Treat as non-option, trigger stop.
+                        eatTheRest = true;
+                        this.tokens.add(token);
                     }
                     else
                     {
-                tokens.add(token);
+                        // Not stopping, requires bursting
+                        // Delegate to burstToken (assuming it exists and works correctly for the !stopAtNonOption case)
+                        // burstToken should add the results to this.tokens
+                        burstToken(token, false); // stopAtNonOption is false here
                     }
-
-            gobble(iter);
+                }
+                // Non-option argument
+                else
+                {
+                    if (stopAtNonOption)
+                    {
+                        // First non-option, trigger stop
+                        eatTheRest = true;
+                        this.tokens.add(token);
+                    }
+                    else
+                    {
+                        // Not stopping, just add the argument
+                        this.tokens.add(token);
+                    }
+                }
+            }
+            // The original code called gobble(iter) here.
+            // Gobbling arguments should be handled by the main parser loop,
+            // not during flattening, especially with stopAtNonOption logic.
+            // Removing gobble(iter) call.
+            // gobble(iter);
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return (String[]) this.tokens.toArray(new String[this.tokens.size()]);
     }
\ No newline at end of file
