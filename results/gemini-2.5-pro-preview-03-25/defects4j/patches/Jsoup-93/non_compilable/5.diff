diff --git a/tmp/38b4ee67-b1aa-4677-8742-91d9d54c4d0f_buggy.java b/tmp/cae6e9e8-88b9-4eb5-bff8-39d35b23fe15_fixed.java
index aa351ad..96f1300 100644
--- a/tmp/38b4ee67-b1aa-4677-8742-91d9d54c4d0f_buggy.java
+++ b/tmp/cae6e9e8-88b9-4eb5-bff8-39d35b23fe15_fixed.java
@@ -1,41 +1,75 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.HttpConnection;
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+// Assume this class exists and 'elements' is a field or accessible variable containing the form elements
+// public class FormElement extends Element { ...
+//     private final Elements elements = new Elements(); ...
+// }
+
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
-        for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
-            if (el.hasAttr("disabled")) continue; // skip disabled form inputs
+        for (Element el: elements) { // Assuming 'elements' is the list of form control elements
+            // filters for valid controls
+            if (!el.tag().isFormSubmittable()) continue; // Element must be submittable
+            if (el.hasAttr("disabled")) continue; // Can't be disabled
             String name = el.attr("name");
-            if (name.length() == 0) continue;
-            String type = el.attr("type");
+            if (name.length() == 0) continue; // Must have a name
 
+            String tagName = el.normalName();
 
-            if ("select".equals(el.normalName())) {
+            if ("select".equals(tagName)) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
+                // When multiple=false, browsers select the first option if none is selected.
+                // Otherwise no value is submitted. For jsoup, default to first if none selected.
                 if (!set) {
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
+            } else if ("input".equals(tagName)) {
+                String type = el.hasAttr("type") ? el.attr("type") : "text"; // Default type is "text"
+                 // If checkbox or radio, only add if checked.
+                if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                     if (el.hasAttr("checked")) {
+                        // Use value=on if not present, per HTML spec
                         final String val = el.val().length() >  0 ? el.val() : "on";
                         data.add(HttpConnection.KeyVal.create(name, val));
                     }
                  } else {
+                    // All other input types (text, password, hidden, etc.), excluding buttons
+                    // Per HTML spec, buttons shouldn't be submitted as form data unless clicked.
+                    // input types button, submit, reset, image are excluded.
+                     boolean excludedType = "button".equalsIgnoreCase(type) ||
+                                            "submit".equalsIgnoreCase(type) ||
+                                            "reset".equalsIgnoreCase(type) ||
+                                            "image".equalsIgnoreCase(type);
+                     if (!excludedType) {
                         data.add(HttpConnection.KeyVal.create(name, el.val()));
                      }
                  }
+            } else if ("textarea".equals(tagName)) {
+                 // Simple value
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+            // Other form submittable elements (like button, keygen, object) are implicitly ignored here,
+            // which aligns with standard successful control submission (except for clicked buttons).
+        }
         return data;
     }
\ No newline at end of file
