diff --git a/tmp/05ceb396-f759-46bc-9449-8cc34ab14286_buggy.java b/tmp/bb503c4f-b505-443e-96bd-a822a9bb492c_fixed.java
index aa351ad..f59fe19 100644
--- a/tmp/05ceb396-f759-46bc-9449-8cc34ab14286_buggy.java
+++ b/tmp/bb503c4f-b505-443e-96bd-a822a9bb492c_fixed.java
@@ -1,41 +1,64 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
             if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
             if (name.length() == 0) continue;
             String type = el.attr("type");
 
 
+            // Special handling for <input> types per HTML spec: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#constructing-the-form-data-set
+            if ("input".equals(el.normalName())) {
+                String lowerType = type.toLowerCase();
+                // ignore any button types, reset, image, file
+                // checkboxes and radios are handled below)
+                if (lowerType.equals("button") || lowerType.equals("submit") || lowerType.equals("reset") || lowerType.equals("image") || lowerType.equals("file")) {
+                    continue;
+                }
+                // radios and checkboxes only submit if checked:
+                 else if (lowerType.equals("checkbox") || lowerType.equals("radio")) {
+                    if (el.hasAttr("checked")) {
+                        final String val = el.val().length() > 0 ? el.val() : "on";
+                        data.add(HttpConnection.KeyVal.create(name, val));
+                    }
+                    continue; // Already handled above, don't re-add below
+                }
+                // else fall through to add default input value
+            }
+
+
             if ("select".equals(el.normalName())) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
                 if (!set) {
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // This branch is actually unreachable now for <input type=radio|checkbox> due to the input-specific logic above
+                // Kept for parallel structure and potential future refactoring or handling of non-input checkboxes/radios if any exist
                 // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
                     final String val = el.val().length() >  0 ? el.val() : "on";
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {
+                // General inputs (text, hidden, password etc), textarea
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
