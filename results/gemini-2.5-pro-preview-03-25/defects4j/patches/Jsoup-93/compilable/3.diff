diff --git a/tmp/c2ce3e77-32a6-4a88-9f66-24feafc07367_buggy.java b/tmp/85ea54c9-47d3-4ac5-8832-ca71e57f9050_fixed.java
index aa351ad..856a970 100644
--- a/tmp/c2ce3e77-32a6-4a88-9f66-24feafc07367_buggy.java
+++ b/tmp/85ea54c9-47d3-4ac5-8832-ca71e57f9050_fixed.java
@@ -1,41 +1,53 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
-        for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
+        for (Element el: elements) { // elements are form-associated
+            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable - correct filter depends on Tag.isFormSubmittable definition
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
-            if (name.length() == 0) continue;
-            String type = el.attr("type");
+            if (name.length() == 0) continue; // skip elements without name
+            String type = el.attr("type").toLowerCase(); // get type, lowercase for easy compare
+
+
+            // Special handling for inputs that should not be submitted
+            if ("input".equals(el.normalName())) {
+                // According to HTML spec, don't submit button/submit/reset/image inputs
+               if ("button".equals(type) || "submit".equals(type) || "reset".equals(type) || "image".equals(type)) {
+                   continue;
+               }
+           }
 
 
             if ("select".equals(el.normalName())) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
                 if (!set) {
+                    // If no options selected, browser behavior varies. jsoup submits the first option.
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                 // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
+                    // Use value attribute if present, otherwise default value "on"
                     final String val = el.val().length() >  0 ? el.val() : "on";
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {
+                // All other submittable types (e.g., <input type="text">, <textarea>)
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
