diff --git a/tmp/55225ab1-5625-4724-8701-89b2bb3bac75_buggy.java b/tmp/ef9514eb-7b98-4af4-9290-14650ee9e634_fixed.java
index aa351ad..dca6904 100644
--- a/tmp/55225ab1-5625-4724-8701-89b2bb3bac75_buggy.java
+++ b/tmp/ef9514eb-7b98-4af4-9290-14650ee9e634_fixed.java
@@ -1,41 +1,61 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
-        for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
+        for (Element el: elements) { // elements is assumed to be a list of form controls associated with this form
+            if (!el.tag().isFormSubmittable()) continue; // skip non-submittable tags (e.g., <p>)
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
-            if (name.length() == 0) continue;
-            String type = el.attr("type");
+            if (name.length() == 0) continue; // skip elements without a name
+            String tagName = el.normalName();
 
-
-            if ("select".equals(el.normalName())) {
+            if ("select".equals(tagName)) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
+                // Browsers default to the first option if nothing explicitly selected
                 if (!set) {
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+            } else if ("input".equals(tagName)) {
+                String type = el.attr("type"); // Keep original case for equalsIgnoreCase
+                if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                     // only add checkbox or radio if they have the checked attribute
                     if (el.hasAttr("checked")) {
+                        // Use "on" as default value for checked checkbox/radio inputs if value attribute is not set
                         final String val = el.val().length() > 0 ? el.val() : "on";
                         data.add(HttpConnection.KeyVal.create(name, val));
                     }
                 } else {
+                    // Add all other input types except the explicitly excluded ones
+                    // Based on HTML spec: button, reset, file, image inputs' value attribute is not submitted this way.
+                    boolean excluded = "button".equalsIgnoreCase(type) ||
+                                       "reset".equalsIgnoreCase(type) ||
+                                       "file".equalsIgnoreCase(type) ||
+                                       "image".equalsIgnoreCase(type);
+                    if (!excluded) {
                         data.add(HttpConnection.KeyVal.create(name, el.val()));
                     }
+                    // input types like submit are included here - representing potential data.
+                }
+            } else if ("textarea".equals(tagName)) {
+                // Textareas submit their text content
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            } else if ("button".equals(tagName)) {
+                 // Button elements submit their value attribute if they have a name
+                 data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+            // Other submittable tags (like keygen, object) are currently ignored by this logic.
         }
         return data;
     }
\ No newline at end of file
