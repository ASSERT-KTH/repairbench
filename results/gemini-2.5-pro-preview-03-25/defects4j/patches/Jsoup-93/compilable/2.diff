diff --git a/tmp/1d0e1abc-0a19-4ac4-b8cd-62c95658117a_buggy.java b/tmp/9dc347a6-a372-4591-874c-6690537a2a09_fixed.java
index aa351ad..7856847 100644
--- a/tmp/1d0e1abc-0a19-4ac4-b8cd-62c95658117a_buggy.java
+++ b/tmp/9dc347a6-a372-4591-874c-6690537a2a09_fixed.java
@@ -1,41 +1,60 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
+            if (!el.tag().isFormSubmittable()) continue; // e.g. <fieldset> is not submittable
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
-            if (name.length() == 0) continue;
-            String type = el.attr("type");
+            if (name.length() == 0) continue; // control name required for submission
+            String tagName = el.normalName();
+            String type = "";
+            if (tagName.equals("input")) // Check input type vs other tags
+                 type = el.attr("type").toLowerCase(); // Use lower case for comparisons
 
+            // --- Start of Fix ---
+            // Skip elements that should not be submitted as part of formData
+            // Includes button tags, and input types button, submit, reset, image, file
+            if (tagName.equals("button")) {
+                 continue; // Skip <button> elements
+            }
+            // input types that are not submitted: button, submit, reset, image, file
+            // Rationale: file data handled separately, image maps are not form data values, others don't submit data.
+            if (tagName.equals("input") && (type.equals("button") || type.equals("submit") || type.equals("reset") || type.equals("image") || type.equals("file"))) {
+                 continue; // Skip unsuitable <input> types
+            }
+            // --- End of Fix ---
 
-            if ("select".equals(el.normalName())) {
+            if ("select".equals(tagName)) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
                 if (!set) {
+                    // If no option selected, browser behaviour is divergent.
+                    // Simplification: Pick the first available option. W3C says the first non-disabled one.
                     Element option = el.select("option").first();
-                    if (option != null)
+                    if (option != null && !option.hasAttr("disabled")) // Check if the first option is disabled
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) { // type check is relevant for input elements
                 // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
+                    // HTML5 specifies default value is "on" if attribute value is missing
                     final String val = el.val().length() >  0 ? el.val() : "on";
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {
+                 // All other submittable types e.g. input[text], input[password], input[hidden], textarea
                  data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
