diff --git a/tmp/063e6db0-60c9-4ffb-9dc6-c270eafeeff1_buggy.java b/tmp/8340a9f6-8098-4d96-adf4-6bf49dd4eba7_fixed.java
index aa351ad..87c7a07 100644
--- a/tmp/063e6db0-60c9-4ffb-9dc6-c270eafeeff1_buggy.java
+++ b/tmp/8340a9f6-8098-4d96-adf4-6bf49dd4eba7_fixed.java
@@ -1,41 +1,53 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
             if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
-            if (name.length() == 0) continue;
-            String type = el.attr("type");
+            if (name.length() == 0) continue; // Every submitted element has a name.
+            String type = el.attr("type").toLowerCase(); // Use lowercase type for consistency
+            String tagName = el.normalName();
 
-
-            if ("select".equals(el.normalName())) {
+            if (tagName.equals("select")) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
-                if (!set) {
+                if (!set) { // A select without any options selected submits the first option
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+            } else if (tagName.equals("input")) {
+                // Handle input types
+                if (type.equals("checkbox") || type.equals("radio")) {
                     // only add checkbox or radio if they have the checked attribute
                     if (el.hasAttr("checked")) {
+                        // Use "on" as value if value attribute not specified, per HTML spec
                         final String val = el.val().length() > 0 ? el.val() : "on";
                         data.add(HttpConnection.KeyVal.create(name, val));
                     }
-            } else {
+                } else if (!type.equals("button") && !type.equals("reset") && !type.equals("submit") && !type.equals("image")) {
+                    // Add all other submittable input types (text, password, hidden, date, color, file, etc.)
+                    // NB: file inputs ship filename, but not file contents. Value is appropriate.
                     data.add(HttpConnection.KeyVal.create(name, el.val()));
                 }
+                // Otherwise, input type is not submitted (button, reset, submit, image)
+            } else if (tagName.equals("textarea")) {
+                // Textareas are simpler
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+            // Future improvement: handle <button> elements if needed (similar to submit inputs)
+            // Future improvement: handle <input type="image"> coordinates submission if needed
         }
         return data;
     }
\ No newline at end of file
