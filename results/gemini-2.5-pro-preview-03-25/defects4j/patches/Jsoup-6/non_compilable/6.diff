diff --git a/tmp/b1a7bcbb-3dcc-4650-a44c-d884b0e61f3b_buggy.java b/tmp/9d067f7c-0fcc-4443-9677-16e1a5ad9c66_fixed.java
index 99141e0..a9b32f0 100644
--- a/tmp/b1a7bcbb-3dcc-4650-a44c-d884b0e61f3b_buggy.java
+++ b/tmp/9d067f7c-0fcc-4443-9677-16e1a5ad9c66_fixed.java
@@ -1,33 +1,85 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+// Assuming 'full' map and 'unescapePattern' are defined elsewhere as static members of the class
+// E.g.: import static org.jsoup.nodes.Entities.full;
+// E.g.: import static org.jsoup.parser.Parser.unescapePattern;
+// Also assuming 'full' is a Map<String, Integer> storing entity names to codepoints.
+
+class FixedEntities { // Helper class name for wrapping the method
+
+    // Assume 'full' map and 'unescapePattern' pattern are accessible static members.
+    // These would be defined in the actual class (e.g., org.jsoup.nodes.Entities)
+    // static java.util.Map<String, Integer> full = ...;
+    // static Pattern unescapePattern = Pattern.compile(...);
+
     static String unescape(String string) {
-        if (!string.contains("&"))
+        if (string == null || !string.contains("&")) // Added null check for robustness
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Assuming unescapePattern is defined elsewhere as:
+        // Pattern.compile("&(#(?:x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+        Matcher m = unescapePattern.matcher(string);
+        StringBuffer accum = new StringBuffer(string.length()); // Using StringBuffer as in original code
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
-            if (num != null) {
+            String wholeEntity = m.group(0); // The entire matched entity, e.g., "&amp;", "&#123;", "&#xabc;"
+            String nameOrNumber = m.group(1); // The part after '&', e.g., "amp", "#123", "#xabc"
+            String numericValue = m.group(3); // The numeric part if present, e.g., "123", "abc"
+
+            if (numericValue != null) {
+                // Numeric entity: &#123; or &#xabc;
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
-                } catch (NumberFormatException e) {
-                } // skip
-            } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+                    int base = m.group(2) != null ? 16 : 10; // group(2) is 'x' or 'X' for hex
+                    charval = Integer.parseInt(numericValue, base);
+                    // Additional validation could be added here for HTML5 compliance
+                    // (e.g., handling null bytes, surrogates, non-characters)
+                    // but we stick to basic unescaping + validity check for now.
+                } catch (NumberFormatException | IllegalArgumentException e) {
+                    // Invalid number format or value outside int range.
+                    // charval remains -1, entity will be appended as is.
                 }
+            } else if (nameOrNumber != null) {
+                // Named entity: &amp; (Check it's not a malformed numeric like "&#abc;")
+                 if (!nameOrNumber.startsWith("#") && full.containsKey(nameOrNumber)) {
+                    // Assume 'full' is Map<String, Integer> mapping name to codepoint
+                    charval = full.get(nameOrNumber);
+                 }
+                 // If name not found in 'full', or if it was malformed numeric, charval remains -1.
+            }
+            // If neither numericValue nor nameOrNumber matched (e.g., "&;"), charval remains -1.
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) { // A valid codepoint was determined
+                // Check if the codepoint is valid according to Unicode standard
+                if (Character.isValidCodePoint(charval)) {
+                    String replacement;
+                    if (charval > Character.MAX_VALUE) { // Outside BMP, handle as supplementary character
+                        replacement = new String(Character.toChars(charval));
+                    } else { // BMP character
+                        replacement = Character.toString((char) charval);
+                    }
+                    // Use Matcher.quoteReplacement to escape special characters like '$' and '\'
+                    // in the replacement string, preventing IllegalArgumentException.
+                    m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
                 } else {
-                m.appendReplacement(accum, m.group(0));
+                    // The parsed codepoint is invalid (e.g., > 0x10FFFF), treat as unrecognized.
+                    m.appendReplacement(accum, wholeEntity); // Append original entity text
+                }
+            } else {
+                // Entity was not recognized or invalid (charval == -1).
+                m.appendReplacement(accum, wholeEntity); // Append original entity text
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
+
+    // Dummy fields needed if compiling this snippet standalone
+    // In the actual context, these would be provided by the surrounding class.
+    private static final java.util.Map<String, Integer> full = new java.util.HashMap<>();
+    static {
+        full.put("amp", 38); full.put("lt", 60); full.put("gt", 62); full.put("quot", 34);
+        // ... etc, load all entities needed
+    }
+    private static final Pattern unescapePattern = Pattern.compile("&(#(?:x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+}
\ No newline at end of file
