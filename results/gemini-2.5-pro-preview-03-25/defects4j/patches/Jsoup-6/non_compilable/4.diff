diff --git a/tmp/1e9ecdf3-c42e-4356-b3cf-a71db31b0c88_buggy.java b/tmp/9adc751e-da96-4137-b26d-55b397d613c4_fixed.java
index 99141e0..f47098e 100644
--- a/tmp/1e9ecdf3-c42e-4356-b3cf-a71db31b0c88_buggy.java
+++ b/tmp/9adc751e-da96-4137-b26d-55b397d613c4_fixed.java
@@ -1,33 +1,62 @@
+import java.util.Map; // Assuming 'full' is a Map, add import if needed
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+// Assuming 'unescapePattern' (Pattern) and 'full' (Map<String, Integer>) are defined elsewhere as static members
+
     static String unescape(String string) {
+        // Quick check to avoid regex allocation and processing for strings without entities
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Pattern should match HTML entities: &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
+        // Example: &amp; &#123; &#xabc;
+        Matcher m = unescapePattern.matcher(string);
+        // StringBuffer is required by Matcher.appendReplacement API
+        StringBuffer accum = new StringBuffer(string.length());
 
         while (m.find()) {
-            int charval = -1;
-            String num = m.group(3);
-            if (num != null) {
+            int charval = -1; // Decoded character value, or -1 if not decoded
+            String num = m.group(3); // Group 3 captures the numeric digits if it's a numeric entity
+
+            if (num != null) { // It's a numeric entity (e.g., &#123;, &#xabc;)
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    int base = m.group(2) != null ? 16 : 10; // Group 2 captures 'x' or 'X' for hex base
+                    charval = Integer.parseInt(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
-            } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
+                    // Ignore parse error; charval remains -1
+                    // This handles cases like &#invalid;
+                }
+            } else { // It's potentially a named entity (e.g., &amp;)
+                String name = m.group(1); // Group 1 captures the name if it's a named entity
+                // The regex design ensures that if group 3 (num) is null, group 1 holds the name.
+                if (name != null && full.containsKey(name)) { // Check if the name is a known entity
                     charval = full.get(name);
                 }
+                // If name is null (e.g. lone '&') or not in the map, charval remains -1
+            }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) { // Successfully decoded a numeric or named entity to a codepoint
+                // Check if the decoded codepoint is a valid Unicode character
+                // (prevents values > 0x10FFFF)
+                if (Character.isValidCodePoint(charval)) {
+                    // Convert codepoint to String, handling supplementary characters correctly
+                    String replacement = new String(Character.toChars(charval));
+                    // Use Matcher.quoteReplacement to escape special characters (like $ or \)
+                    // in the replacement string, which are otherwise interpreted by appendReplacement.
+                    m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
                 } else {
-                m.appendReplacement(accum, m.group(0));
+                    // The decoded number is not a valid Unicode code point.
+                    // Append the original matched sequence (e.g., &#xfffffff;) without replacement.
+                    // Still quote it in case the original sequence contains $ or \.
+                    m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
+                }
+            } else {
+                // Failed to decode the entity (e.g., unknown name &foo;, malformed numeric &#;, empty &#;)
+                // Append the original matched sequence (e.g., &foo;) without replacement.
+                // Still quote it in case the original sequence contains $ or \.
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
-        m.appendTail(accum);
+        m.appendTail(accum); // Append the rest of the input string that didn't contain any matches
         return accum.toString();
     }
\ No newline at end of file
