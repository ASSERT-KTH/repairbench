diff --git a/tmp/4c641f11-6db4-4d73-bf77-4927ca4de233_buggy.java b/tmp/549f7f12-59ac-49c3-bacc-7e661207afba_fixed.java
index 99141e0..58afb0a 100644
--- a/tmp/4c641f11-6db4-4d73-bf77-4927ca4de233_buggy.java
+++ b/tmp/549f7f12-59ac-49c3-bacc-7e661207afba_fixed.java
@@ -1,33 +1,66 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+// Assuming 'full' map and 'unescapePattern' are accessible static members of the containing class.
+// e.g. static Map<String, Integer> full;
+// e.g. static Pattern unescapePattern = Pattern.compile("&(#(?:x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Note: The original code had a comment indicating 'unescapePattern' is:
+        // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
+        // Group 1: (#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+) -> Either the numeric structure starting with # OR the name
+        // Group 2: (x|X)?                             -> Captures 'x' or 'X' if present (numeric hex)
+        // Group 3: ([0-9a-fA-F]+)                    -> Captures the digits/hex digits (numeric)
+        Matcher m = unescapePattern.matcher(string);
+
+        // Use StringBuilder for efficiency as synchronization is not required.
+        StringBuilder accum = new StringBuilder(string.length());
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
-            if (num != null) {
+            String entityMatch = m.group(0); // The full matched entity text e.g., "&amp;" or "&#123;"
+            String numValStr = m.group(3);   // The numeric value string (digits/hex), or null for named entities
+            String hexIndicator = m.group(2); // "x" or "X" if present, indicating hex
+
+            if (numValStr != null) {
+                // Numeric entity: &#...; or &#x...;
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    int base = (hexIndicator != null) ? 16 : 10;
+                    charval = Integer.parseInt(numValStr, base);
+                    // Check if the parsed codepoint is valid. Integer.parseInt doesn't throw for invalid codepoints.
+                    if (!Character.isValidCodePoint(charval)) {
+                        charval = -1; // Treat invalid codepoints as unrecognized entities
+                    }
                 } catch (NumberFormatException e) {
-                } // skip
+                    // Malformed numeric entity (e.g., "&#xG;"), treat as unrecognized
+                    // charval remains -1
+                }
             } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
+                // Named entity: &...;
+                String name = m.group(1); // Group 1 contains the name if numValStr (group 3) is null
+                if (full.containsKey(name)) { // Assuming 'full' is the Map<String, Integer> of named entities
                     charval = full.get(name);
+                    // No need to check isValidCodePoint here if we trust the 'full' map contents
+                }
+                // else: Unknown named entity - charval remains -1
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) {
+                // Successfully decoded a known entity to a valid codepoint
+                // Convert codepoint to String (handles BMP and supplementary characters)
+                String decodedChar = new String(Character.toChars(charval));
+                // CRITICAL FIX: Use Matcher.quoteReplacement to escape special characters (like \ and $)
+                // in the replacement string, preventing IllegalArgumentException.
+                m.appendReplacement(accum, Matcher.quoteReplacement(decodedChar));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // Unrecognized entity (malformed numeric, unknown name, or invalid codepoint)
+                // Append the original matched entity text verbatim.
+                // Use quoteReplacement here too for safety, in case the original text contained $ or \.
+                m.appendReplacement(accum, Matcher.quoteReplacement(entityMatch));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
