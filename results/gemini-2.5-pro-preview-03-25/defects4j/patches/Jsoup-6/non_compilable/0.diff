diff --git a/tmp/438a0274-a2ed-48ba-9159-8d5ac1c58c18_buggy.java b/tmp/546f7ab4-d92e-40fc-b5fc-c022a7e2963f_fixed.java
index 99141e0..5310670 100644
--- a/tmp/438a0274-a2ed-48ba-9159-8d5ac1c58c18_buggy.java
+++ b/tmp/546f7ab4-d92e-40fc-b5fc-c022a7e2963f_fixed.java
@@ -1,33 +1,72 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+// Assume Entities.full (Map<String, Integer>) and Entities.unescapePattern (Pattern) are defined and accessible statically.
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // The pattern matches entities like &amp; &#123; &#x41;
+        // Group 1: The whole content between & and ; (e.g., "#123", "#x41", "amp")
+        // Group 2: Hex indicator (x or X) for numeric entities
+        // Group 3: Numeric value (decimal or hex)
+        Matcher m = Entities.unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z0-9]+);? - adjusted pattern to include digits in names
+        StringBuffer accum = new StringBuffer(string.length());
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
+            String num = m.group(3); // Numeric value group
             if (num != null) {
+                // Numeric entity
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    int base = m.group(2) != null ? 16 : 10; // group(2) is hex indicator
+                    charval = Integer.parseInt(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
+                    // ignore, leave charval as -1
+                }
             } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+                // Named entity
+                String name = m.group(1); // This captures the name when group 3 is null
+                // Note: The original pattern [a-zA-Z]+ might be too restrictive.
+                // HTML5 allows digits, e.g., &pi; &Pi; &delta;
+                // Assuming the pattern used is actually something like &(#...|([a-zA-Z0-9]+));?
+                // Let's assume `Entities.full` contains the mapping for valid names.
+                if (Entities.full.containsKey(name)) {
+                    charval = Entities.full.get(name);
+                }
+                // If name not in map, charval remains -1
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            // Now replace the found entity:
+            if (charval != -1) { // if valid entity found (numeric or named)
+                String replacement;
+                if (charval > 0xFFFF) { // handle supplementary characters (outside BMP)
+                    replacement = new String(Character.toChars(charval));
+                } else { // handle BMP characters
+                    replacement = String.valueOf((char) charval);
+                }
+                // *** FIX: Use Matcher.quoteReplacement to escape special characters like $ and \ ***
+                m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // If charval is -1 (e.g., invalid numeric like &#;, unknown name like &foo;),
+                // then keep the original matched string. Use quoteReplacement for safety.
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
+
+    // Dummy definitions for compilation context, assuming these exist in the actual Entities class
+    private static class Entities {
+        static final Pattern unescapePattern = Pattern.compile("&(?:#(?:(x|X)?([0-9a-fA-F]+))|([a-zA-Z0-9]+));?"); // Adjusted pattern with non-capturing group and digits in name
+        static final java.util.Map<String, Integer> full = new java.util.HashMap<>();
+        static {
+            // Populate map with some examples for context
+            full.put("amp", 38);
+            full.put("lt", 60);
+            full.put("gt", 62);
+            full.put("quot", 34);
+            // ... etc
+        }
+    }
\ No newline at end of file
