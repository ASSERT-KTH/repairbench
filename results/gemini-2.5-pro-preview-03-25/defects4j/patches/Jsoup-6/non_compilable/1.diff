diff --git a/tmp/ce66a8a6-18ee-4374-85ae-b503ce9a08c0_buggy.java b/tmp/f025a798-bac0-4637-ad88-8202f2ab3dde_fixed.java
index 99141e0..dcf3568 100644
--- a/tmp/ce66a8a6-18ee-4374-85ae-b503ce9a08c0_buggy.java
+++ b/tmp/f025a798-bac0-4637-ad88-8202f2ab3dde_fixed.java
@@ -1,33 +1,83 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.Map; // Assuming 'full' map is of type Map<String, Integer>
+
+// Assume 'full' map and 'unescapePattern' pattern are defined and accessible in the surrounding class.
+// Example definitions (based on typical usage in libraries like Jsoup):
+// static final Map<String, Integer> full = Entities.full; // Assuming Entities class provides the map
+// static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|([a-zA-Z]+));?");
+// Note: The original code's group index usage (group 1 for name, 3 for num, 2 for hex) suggests a different pattern was potentially used or the indices were confused.
+// The fix below uses the group indices as per the original code's logic (1=name, 3=num, 2=hex).
+// If the actual 'unescapePattern' uses different group indices (like the common pattern above where 4=name, 3=num, 2=hex),
+// the group indices (1, 2, 3) in the code below would need adjustment to match the pattern.
+
+/**
+ * Unescapes HTML entities in a string.
+ *
+ * @param string input string containing potentially escaped entities.
+ * @return string with entities unescaped.
+ */
 static String unescape(String string) {
-        if (!string.contains("&"))
+    // Assume unescapePattern is defined elsewhere and matches the logic below:
+    // Group 2: Optional hex indicator (x|X)
+    // Group 3: Numeric value ([0-9a-fA-F]+)
+    // Group 1: Named entity ([a-zA-Z]+) <-- This assignment implies a specific regex structure was intended or used.
+
+    if (string == null || !string.contains("&")) // Added null check for robustness
         return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    // This pattern reflects the group indices used in the original buggy code (1=name, 2=hex, 3=num).
+    // If the actual `unescapePattern` has different groups, this might need adjustment.
+    // Example pattern matching the code's group usage: Pattern.compile("&(?:([a-zA-Z]+)|#(x|X)?([0-9a-fA-F]+));?");
+    Matcher m = unescapePattern.matcher(string);
+    // Using StringBuffer because Matcher.appendReplacement requires it (pre-Java 9).
+    StringBuffer accum = new StringBuffer(string.length());
 
     while (m.find()) {
         int charval = -1;
-            String num = m.group(3);
-            if (num != null) {
+        String num = m.group(3); // Numeric value (Group 3)
+
+        if (num != null) { // If it's a numeric entity (Group 3 matched)
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                String hexIndicator = m.group(2); // Hex indicator (Group 2)
+                int base = hexIndicator != null ? 16 : 10;
+                charval = Integer.parseInt(num, base);
             } catch (NumberFormatException e) {
-                } // skip
-            } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
+                // skip, charval remains -1 (malformed numeric entity)
+            }
+        } else { // Otherwise, try matching as a named entity
+            String name = m.group(1); // Named entity (Group 1, as per original code logic)
+            // Assuming 'full' is the map from entity name to character value
+            if (name != null && full.containsKey(name)) {
                charval = full.get(name);
             }
+            // If name was null or not in map, charval remains -1
+        }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        // Now, decide what to append based on whether a valid charval was found
+        if (charval != -1) { // If a valid entity was found and parsed (charval >= 0)
+            String replacement;
+            // Correctly handle supplementary Unicode characters (codepoints > 0xFFFF)
+            // Character.MAX_VALUE is 0xFFFF
+            if (charval > Character.MAX_VALUE) {
+                replacement = new String(Character.toChars(charval));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // Handle BMP characters (codepoints <= 0xFFFF)
+                replacement = Character.toString((char) charval);
+            }
+            // *** FIX: Use Matcher.quoteReplacement ***
+            // This escapes special characters ('$' and '\') in the replacement string,
+            // preventing IllegalArgumentException.
+            m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
+        } else {
+            // Entity was not recognized (numeric parse failed or named entity unknown)
+            // Append the original matched sequence (e.g., "&unknown;", "&#invalid;") literally.
+            // *** FIX: Use Matcher.quoteReplacement ***
+            // Applied here for safety, although m.group(0) (the original entity like "&amp;")
+            // is less likely to contain problematic '$' or '\' characters.
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
