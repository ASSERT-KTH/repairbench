diff --git a/tmp/18300c26-3422-4f5b-9120-106cdf45fb35_buggy.java b/tmp/98fd6eac-83ce-435c-a751-baedd7eb8a42_fixed.java
index 99141e0..bffcc64 100644
--- a/tmp/18300c26-3422-4f5b-9120-106cdf45fb35_buggy.java
+++ b/tmp/98fd6eac-83ce-435c-a751-baedd7eb8a42_fixed.java
@@ -1,33 +1,69 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.Map; // Assuming 'full' is a Map defined elsewhere
+
+class Entities {
+    // Assume unescapePattern and full map are defined elsewhere, e.g.:
+    // private static final Pattern unescapePattern = Pattern.compile("&(?:#(x|X)?([0-9a-fA-F]+)|([a-zA-Z]+));?");
+    // private static final Map<String, Integer> full = loadEntities(); // some method to load HTML entities
+
+    private static final Pattern unescapePattern = Pattern.compile("&(?:#(x|X)?([0-9a-fA-F]+)|([a-zA-Z]+));?");
+    // Example map, replace with actual entity map used by Jsoup
+    private static final Map<String, Integer> full = Map.of("amp", 38, "lt", 60, "gt", 62, "quot", 34, "nbsp", 160);
+
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Assuming pattern is: & (?: #(x|X)? ([0-9a-fA-F]+) | ([a-zA-Z]+) );?
+        // Group 1: (x|X)? hex indicator
+        // Group 2: ([0-9a-fA-F]+) numeric value
+        // Group 3: ([a-zA-Z]+) name
+        Matcher m = unescapePattern.matcher(string);
+        // Using StringBuffer as in the original code, though StringBuilder is generally preferred.
+        StringBuffer accum = new StringBuffer(string.length());
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
-            if (num != null) {
+            String num = m.group(2); // Numeric value group
+            String name = m.group(3); // Named entity group
+
+            if (num != null) { // Numeric entity: &#DDDD; or &#xHHHH;
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    String hexIndicator = m.group(1); // Hex indicator group 'x' or 'X'
+                    int base = (hexIndicator != null) ? 16 : 10;
+                    charval = Integer.parseInt(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
-            } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
+                    // num matched regex but failed parse? Should be rare.
+                    // Keep charval = -1 to append original text.
+                }
+            } else if (name != null) { // Named entity: &NAME;
+                if (full.containsKey(name)) {
                     charval = full.get(name);
                 }
+                // If name not in map, charval remains -1.
+            }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) { // If a valid entity was found and decoded to a codepoint
+                // Check if the codepoint is valid Unicode.
+                if (Character.isValidCodePoint(charval)) {
+                    // Convert codepoint to String (handles supplementary characters correctly)
+                    String decoded = new String(Character.toChars(charval));
+                    // *** FIX: Use Matcher.quoteReplacement to handle special replacement chars like $ and \ ***
+                    m.appendReplacement(accum, Matcher.quoteReplacement(decoded));
                 } else {
-                m.appendReplacement(accum, m.group(0));
+                    // If charval from map or parsing is invalid, treat as unrecognized. Append original.
+                    // Use quoteReplacement here too for consistency, although m.group(0) is less likely to need it.
+                    m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
+                }
+            } else { // Entity not recognized (numeric parse failed, name not in map, or malformed entity matched)
+                // Append the original matched text.
+                // Use quoteReplacement here too for consistency.
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
+}
\ No newline at end of file
