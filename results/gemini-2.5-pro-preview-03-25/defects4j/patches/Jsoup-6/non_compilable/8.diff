diff --git a/tmp/453f4801-ee21-4f21-b239-e5174706e7d7_buggy.java b/tmp/51ffb0e4-7722-429c-9ec5-96fc85219509_fixed.java
index 99141e0..841b395 100644
--- a/tmp/453f4801-ee21-4f21-b239-e5174706e7d7_buggy.java
+++ b/tmp/51ffb0e4-7722-429c-9ec5-96fc85219509_fixed.java
@@ -1,33 +1,74 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.Map;
+// Assuming 'full' map and 'unescapePattern' are accessible static members of the enclosing class (e.g., Entities)
+// e.g. static Map<String, Character> full = loadEntities("entities-full.properties");
+// e.g. static Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Use StringBuffer as required by Matcher's appendReplacement method
+        StringBuffer accum = new StringBuffer(string.length());
 
         while (m.find()) {
-            int charval = -1;
-            String num = m.group(3);
+            int charval = -1; // Initialize with -1 indicating not found or invalid
+            String entityContent = m.group(1); // The content between '&' and ';', e.g., "amp", "#36", "#x20AC"
+
+            if (entityContent.startsWith("#")) { // Numeric entity: &#...; or &#x...;
+                String num = m.group(3); // The numeric part, e.g., "36", "20AC"
                 if (num != null) {
                     try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                        int base = m.group(2) != null ? 16 : 10; // group(2) is 'x' or 'X' for hex
+                        charval = Integer.parseInt(num, base);
+                        // Note: HTML5 has specific handling for invalid numeric codes (e.g., 0, C1 controls)
+                        // which might differ from this simple conversion.
+                        // For this fix, we stick to direct conversion.
                     } catch (NumberFormatException e) {
-                } // skip
-            } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+                        // num was not parsable, charval remains -1
+                    }
+                }
+            } else { // Named entity: &...;
+                // Assumes 'full' is a Map<String, Integer> containing named entities.
+                // The original code used Map<String, Character>, implying only BMP characters.
+                // If 'full' needs to support supplementary characters, its type should be Map<String, Integer>.
+                // For now, assuming the existing 'full' map structure is sufficient or correctly typed.
+                if (full.containsKey(entityContent)) {
+                    // If using Map<String, Character>, this might truncate supplementary chars if they were stored.
+                    // If using Map<String, Integer>, this correctly retrieves the codepoint.
+                     Object value = full.get(entityContent);
+                     if (value instanceof Character) {
+                         charval = ((Character) value).charValue();
+                     } else if (value instanceof Integer) {
+                         charval = ((Integer) value).intValue();
+                     } // else charval remains -1 if map value type is unexpected
+                }
+                // If entityContent is not in the map, charval remains -1
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            // Perform the replacement
+            if (charval != -1) { // If a valid character value was found
+                String replacement;
+                if (charval > Character.MAX_VALUE) {
+                    // Handle supplementary characters (outside BMP) correctly
+                    replacement = new String(Character.toChars(charval));
                 } else {
+                    // Handle BMP characters (including null char for &#0;)
+                    replacement = Character.toString((char) charval);
+                }
+                // IMPORTANT: Quote the replacement string to handle special characters
+                // like '$' and '\' which have special meaning in appendReplacement.
+                m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
+            } else {
+                // If charval is -1 (entity not recognized or invalid),
+                // append the original matched sequence (e.g., "&unknown;", "&#invalid;")
+                // No need to quote m.group(0) as it's the literal input string.
                 m.appendReplacement(accum, m.group(0));
             }
         }
-        m.appendTail(accum);
+        m.appendTail(accum); // Append the remainder of the input string
         return accum.toString();
     }
