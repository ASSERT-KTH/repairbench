diff --git a/tmp/b0319cda-1795-4ccf-8f6f-cec5b81e5e4f_buggy.java b/tmp/52214978-ba64-4675-a416-b40e897ca5a3_fixed.java
index 99141e0..41c4544 100644
--- a/tmp/b0319cda-1795-4ccf-8f6f-cec5b81e5e4f_buggy.java
+++ b/tmp/52214978-ba64-4675-a416-b40e897ca5a3_fixed.java
@@ -1,33 +1,58 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+// Assume Entities.full map and Entities.unescapePattern pattern exist and are accessible static members of the enclosing class.
+// Assume Entities.unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|([a-zA-Z]+));?");
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Use the pattern assumed in the original code's comments and logic structure
+        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|([a-zA-Z]+));?
+        // Use StringBuilder for performance as hinted by original code comment, avoids unnecessary synchronization.
+        StringBuilder accum = new StringBuilder(string.length());
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
+            String entity = m.group(0); // The full matched entity string (e.g., "&#123;", "&amp;")
+            String num = m.group(3);   // Group 3 captures the numeric value part
+            String name = m.group(4);  // Group 4 captures the named entity name part (Fix: Original code used group 1 incorrectly)
+
             if (num != null) {
+                // Numeric entity &#[xX]?<NUM>;
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    String hexIndicator = m.group(2); // Group 2 captures the hex indicator 'x' or 'X'
+                    int base = hexIndicator != null ? 16 : 10;
+                    // Use parseInt instead of valueOf for potentially better performance (avoids object creation)
+                    charval = Integer.parseInt(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
-            } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
+                    // Malformed numeric entity (e.g., "&#xFG;"). Keep charval = -1.
+                }
+            } else if (name != null) {
+                // Named entity &<NAME>;
+                if (full.containsKey(name)) { // Assuming 'full' is the map of named entities
                     charval = full.get(name);
                 }
+                // If name is not in the map, charval remains -1 (unrecognized named entity).
+            }
+            // else: The pattern matched, but neither group 3 nor group 4 was captured.
+            // This shouldn't happen with the assumed pattern structure but check handles it defensively. Keep charval = -1.
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) {
+                // Successfully decoded a valid entity codepoint.
+                // Convert codepoint to String. Character.toChars correctly handles supplementary characters (codepoints > 0xFFFF).
+                String replacement = new String(Character.toChars(charval));
+
+                // CRITICAL FIX: Use Matcher.quoteReplacement to escape special characters ('$' and '\')
+                // in the replacement string. This prevents the IllegalArgumentException.
+                m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // The entity was malformed or unrecognized (charval remained -1).
+                // Append the original matched text back to the accumulator.
+                // Use quoteReplacement here too for robustness, although m.group(0) is less likely to contain problematic chars.
+                m.appendReplacement(accum, Matcher.quoteReplacement(entity));
             }
         }
-        m.appendTail(accum);
+        m.appendTail(accum); // Append the remainder of the input string after the last match.
         return accum.toString();
     }
\ No newline at end of file
