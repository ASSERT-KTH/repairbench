diff --git a/tmp/accdce9f-43a8-469c-886d-647df4d790f7_buggy.java b/tmp/b2bd7951-5dfb-41e1-b402-57fb8a78044d_fixed.java
index 99141e0..ea2ec14 100644
--- a/tmp/accdce9f-43a8-469c-886d-647df4d790f7_buggy.java
+++ b/tmp/b2bd7951-5dfb-41e1-b402-57fb8a78044d_fixed.java
@@ -1,33 +1,57 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.Map;
+// Assume necessary imports and that 'unescapePattern' and 'full' map exist and are correctly defined elsewhere.
+// For context, typical definitions might be:
+// private static final Pattern unescapePattern = Pattern.compile("&(#(?:x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+// private static final Map<String, Integer> full = Entities.fullMap; // Or equivalent map
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Assume unescapePattern is defined elsewhere, e.g.:
+        // Pattern.compile("&(#(?:x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+        Matcher m = unescapePattern.matcher(string);
+        StringBuffer accum = new StringBuffer(string.length());
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
+            String num = m.group(3); // Numeric value group
             if (num != null) {
+                // Numeric entity
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    int base = m.group(2) != null ? 16 : 10; // group(2) is hex indicator 'x' or 'X'
+                    charval = Integer.parseInt(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
+                    // Keep charval = -1; invalid numeric entity format
+                }
             } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
+                // Named entity
+                String name = m.group(1); // group(1) holds the name if num is null
+                // Assume 'full' is the map of named entities to codepoints, defined elsewhere
+                if (full.containsKey(name)) {
                     charval = full.get(name);
                 }
+                // else keep charval = -1; unknown named entity
+            }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) {
+                // Valid entity found, convert codepoint to string
+                // Handle supplementary characters (codepoint > 0xFFFF) correctly using Character.toChars
+                String replacement = new String(Character.toChars(charval));
+                // Quote the replacement string for appendReplacement,
+                // as it might contain literal '$' or '\' characters.
+                m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
             } else {
+                // Invalid or unknown entity, append the original matched sequence.
+                // No need to quote m.group(0) as it's the original literal string.
                 m.appendReplacement(accum, m.group(0));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
+
+// Assume 'full' map is available in the scope, e.g., as a static member of the class.
+// private static final Map<String, Integer> full = // ... initialize map ...;
\ No newline at end of file
