diff --git a/tmp/1273cb45-abbd-4619-b8b4-79e381a2bfd8_buggy.java b/tmp/a9522489-dcf4-460d-b15f-7a80f66a9efc_fixed.java
index 99141e0..bd440de 100644
--- a/tmp/1273cb45-abbd-4619-b8b4-79e381a2bfd8_buggy.java
+++ b/tmp/a9522489-dcf4-460d-b15f-7a80f66a9efc_fixed.java
@@ -1,33 +1,68 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.Map; // Assuming Entities.full is a Map accessible in the context
+import org.jsoup.nodes.Entities; // Assuming Entities.full and Entities.unescapePattern are static members here
+
+// The static members Entities.unescapePattern and Entities.full are assumed to be defined
+// in the surrounding class, typically org.jsoup.nodes.Entities.
+
+class BuggyClass { // Wrapper class for context, replace with actual class if needed
+    // Assume Entities.unescapePattern and Entities.full are defined and accessible statics
+    private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+    private static final Map<String, Integer> full = Entities.getFullEntities(); // Example: Obtain the map
+
+    /**
+     * Unescape the input string.
+     *
+     * @param string to unescape.
+     * @return unescaped string.
+     */
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Use StringBuffer as required by Matcher.appendReplacement
+        StringBuffer accum = new StringBuffer(string.length());
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
+            String num = m.group(3); // Captured numeric value group
             if (num != null) {
+                // Numeric entity
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    int base = m.group(2) != null ? 16 : 10; // group(2) is hex indicator 'x' or 'X'
+                    charval = Integer.parseInt(num, base); // Use parseInt for primitive int
                 } catch (NumberFormatException e) {
-                } // skip
+                    // charval remains -1 => keep original string
+                }
             } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
+                // Named entity
+                String name = m.group(1); // Captured entity name group
+                if (full.containsKey(name)) {
                     charval = full.get(name);
                 }
+            }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) {
+                // Valid entity found, replace it.
+                String replacement;
+                // Check if the character is outside the Basic Multilingual Plane (BMP)
+                if (charval > Character.MAX_VALUE) { // Use Character.MAX_VALUE ('\uFFFF') for check
+                    replacement = new String(Character.toChars(charval));
                 } else {
+                    replacement = Character.toString((char) charval);
+                }
+                // *** FIX: Use Matcher.quoteReplacement to escape special characters like '\' and '$' ***
+                m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
+            } else {
+                // Invalid entity (numeric parse error or named entity not found).
+                // Append the original matched sequence.
+                // No need for quoteReplacement here as m.group(0) is the original literal string.
                 m.appendReplacement(accum, m.group(0));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
+}
\ No newline at end of file
