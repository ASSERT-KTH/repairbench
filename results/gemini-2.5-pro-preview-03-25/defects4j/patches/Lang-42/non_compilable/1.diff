diff --git a/tmp/c4bb63e6-f5e1-4510-8f6a-aa64f6d58621_buggy.java b/tmp/ad5b6edb-4901-40f8-b4d2-f2bf6cc4f5dd_fixed.java
index 822447c..4926f14 100644
--- a/tmp/c4bb63e6-f5e1-4510-8f6a-aa64f6d58621_buggy.java
+++ b/tmp/ad5b6edb-4901-40f8-b4d2-f2bf6cc4f5dd_fixed.java
@@ -1,37 +1,96 @@
+import java.io.IOException;
+import java.io.Writer;
+
+// Assuming this method is part of a class that has access to an entity lookup mechanism
+// via a method like `this.entityName(int codepoint)` or `this.entityName(char c)`.
+// The fix below adapts the original structure to handle Unicode supplementary characters
+// correctly by iterating through codepoints instead of chars.
+
+public class StringEscapeUtils { // Placeholder class for context
+
+    // Assuming this method exists and looks up entity names for characters.
+    // It might accept char or int codepoint based on the actual implementation.
+    // The fix below assumes it exists and is named `entityName`.
+    // If it only accepts `char`, the logic handles that case.
+    // If it accepts `int`, the logic can be slightly simplified but the one below works too.
+    private String entityName(int codepoint) {
+        // In a real scenario, this would look up the entity name from a map.
+        // Example for demonstration:
+        if (codepoint == '<') return "lt";
+        if (codepoint == '>') return "gt";
+        if (codepoint == '&') return "amp";
+        if (codepoint == '"') return "quot";
+        // ... etc.
+        // Return null if no specific entity name exists for the codepoint.
+        // This placeholder assumes it can handle int codepoints, but the logic
+        // inside the escape method adapts if it only handles char.
+        if (codepoint > 0xFFFF) { // Supplementary characters rarely have named entities
+             return null;
+        }
+        return entityName((char)codepoint); // Delegate to a hypothetical char version if needed
+    }
+     private String entityName(char c) {
+        // Hypothetical char version for lookup
+        if (c == '<') return "lt";
+        if (c == '>') return "gt";
+        if (c == '&') return "amp";
+        if (c == '"') return "quot";
+         // ... etc. for BMP characters
+         return null;
+     }
+
+
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) {
+            int codePoint = str.codePointAt(i);
+            String entityName = null;
+
+            // Check for named entities only for BMP characters for safety,
+            // assuming entityName might only handle char or basic int codepoints.
+            // Supplementary characters are unlikely to have named entities anyway.
+            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                entityName = this.entityName(codePoint); // Try lookup using codepoint (might delegate to char version)
+            }
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // No named entity, check if numeric escaping is needed.
+                // Escape characters > 0x7F (non-ASCII)
+                // Also escape supplementary characters (which are > 0x7F anyway)
+                if (codePoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // ASCII character (0-127) without a named entity, write directly.
+                    writer.write(codePoint);
                 }
             } else {
+                // Found a named entity
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+
+            // Advance index by 1 for BMP characters, 2 for supplementary characters
+            i += Character.charCount(codePoint);
+        }
     }
 }
\ No newline at end of file
