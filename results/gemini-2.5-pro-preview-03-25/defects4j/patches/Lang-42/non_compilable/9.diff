diff --git a/tmp/1603363b-3127-4f6d-a87d-ac12e4f8d0b4_buggy.java b/tmp/4b56e815-ce5a-4e58-9ace-c1f284984052_fixed.java
index 822447c..a0cdc20 100644
--- a/tmp/1603363b-3127-4f6d-a87d-ac12e4f8d0b4_buggy.java
+++ b/tmp/4b56e815-ce5a-4e58-9ace-c1f284984052_fixed.java
@@ -1,37 +1,64 @@
+import java.io.IOException;
+import java.io.Writer;
+
+// This is a placeholder for the context. The actual class would have the
+// entityName method or access to it.
+abstract class EscapeContext {
+    // Assume this method exists and correctly maps a Unicode codepoint to its HTML entity name
+    abstract String entityName(int codepoint);
+
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
+     *             or {@link Writer#write(String)} methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        // Use codePointAt to iterate through Unicode codepoints correctly,
+        // handling supplementary characters (those outside the BMP).
+        for (int i = 0; i < len; ) {
+            int codepoint = str.codePointAt(i);
+            // Check if the codepoint has a known entity name.
+            // Assuming entityName takes an int codepoint.
+            String entityName = this.entityName(codepoint);
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // No specific entity name found.
+                // Escape non-ASCII characters numerically.
+                // This includes supplementary characters and characters > 127
+                // that don't have a named entity.
+                if (codepoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codepoint, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // Write ASCII characters (<= 0x7F) directly.
+                    // Writer.write(int) handles single chars correctly.
+                    writer.write(codepoint);
                 }
             } else {
+                // Write the named entity.
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+
+            // Advance the index by the number of characters (UTF-16 code units)
+            // consumed by the current codepoint. This will be 1 for BMP characters
+            // and 2 for supplementary characters (forming a surrogate pair).
+            i += Character.charCount(codepoint);
+        }
     }
 }
\ No newline at end of file
