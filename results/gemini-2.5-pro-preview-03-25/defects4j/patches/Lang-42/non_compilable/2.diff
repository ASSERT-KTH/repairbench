diff --git a/tmp/82a7a577-6cca-4fef-af43-d55e7dd3bd3d_buggy.java b/tmp/c078c05f-f020-4a08-99de-223b95bb2c95_fixed.java
index 822447c..61fb082 100644
--- a/tmp/82a7a577-6cca-4fef-af43-d55e7dd3bd3d_buggy.java
+++ b/tmp/c078c05f-f020-4a08-99de-223b95bb2c95_fixed.java
@@ -1,37 +1,68 @@
+import java.io.IOException;
+import java.io.Writer;
+
+// The fixed method assumes it's part of a class that has access to an `entityName(int codepoint)` method
+// similar to the original `entityName(char c)`. This lookup method needs to handle integer codepoints.
+public class FixedClass { // Helper class to contain the method
+
+    // Placeholder for the actual entity lookup logic.
+    // This method needs to exist in the actual class containing the escape method.
+    private String entityName(int codepoint) {
+        // In a real scenario, this would look up the entity name for the given codepoint.
+        // Returning null indicates no specific named entity exists.
+        return null; // Default placeholder behavior
+    }
+
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+            // Use codePointAt to handle potentially supplementary characters (surrogate pairs)
+            int codepoint = str.codePointAt(i);
+
+            // If the codepoint is supplementary, it occupies two char positions in the String.
+            // Increment i to skip the low surrogate.
+            if (Character.isSupplementaryCodePoint(codepoint)) {
+                i++;
+            }
+
+            // Check if there's a named entity for this codepoint
+            String entityName = this.entityName(codepoint); // Assumes entityName handles int codepoints
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // No named entity - escape numerically if character is outside ASCII range
+                // or keep as is if it's ASCII (and not needing escaping like &, <, >, ")
+                // Note: The check codepoint > 0x7F handles both non-ASCII BMP and supplementary characters.
+                if (codepoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codepoint, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // Write ASCII characters directly (if they don't have a named entity)
+                    writer.write(codepoint);
                 }
             } else {
+                // Write the named entity
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
+}
\ No newline at end of file
