diff --git a/tmp/2fd97db0-1577-4ed0-830c-fedca831aa02_buggy.java b/tmp/865f5562-dbea-446b-9766-089e8d9c7f26_fixed.java
index 822447c..a8bb0b6 100644
--- a/tmp/2fd97db0-1577-4ed0-830c-fedca831aa02_buggy.java
+++ b/tmp/865f5562-dbea-446b-9766-089e8d9c7f26_fixed.java
@@ -1,37 +1,73 @@
+import java.io.IOException;
+import java.io.Writer;
+
+// Assuming this is part of a class with an entityName(int) method
+// e.g. abstract class Entities { abstract String entityName(int codepoint); ... }
+public class EscapeFix { // Helper class for context, replace with actual class name if known
+
+    // Assume this method exists and correctly handles lookup for any codepoint
+    // For the fix, we don't need its implementation, just its assumed signature/behavior.
+    private String entityName(int codepoint) {
+        // Dummy implementation for compilation, replace with actual context
+        if (codepoint == '<') return "lt";
+        if (codepoint == '>') return "gt";
+        if (codepoint == '&') return "amp";
+        if (codepoint == '"') return "quot";
+        // ... potentially many more ...
+        return null; // Default: no specific entity name
+    }
+
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+            // Use codePointAt to handle supplementary characters (code points > 0xFFFF)
+            int codepoint = str.codePointAt(i);
+
+            // If the code point is supplementary, it consumes two char positions in the string.
+            // Advance the loop index accordingly.
+            if (Character.isSupplementaryCodePoint(codepoint)) {
+                i++;
+            }
+
+            // Check if there's a named entity for this code point
+            String entityName = this.entityName(codepoint); // Pass the full code point
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // No named entity found.
+                // Escape non-ASCII characters (codepoint > 0x7F) using numeric entities.
+                // This now correctly handles supplementary characters as well.
+                if (codepoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codepoint, 10)); // Use the full code point value
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // It's an ASCII character (<= 0x7F) and doesn't have a named entity.
+                    // Write it directly. Writer.write(int) handles this correctly.
+                    writer.write(codepoint);
                 }
             } else {
+                // Found a named entity (e.g., &amp;, &lt;, &gt;, &quot;). Write it.
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
+}
\ No newline at end of file
