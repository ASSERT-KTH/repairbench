diff --git a/tmp/76885a3b-09c3-4ee5-a3f3-2b4320b30093_buggy.java b/tmp/e7845420-2b8d-4019-a12b-d8aca09d0812_fixed.java
index 822447c..b0a4057 100644
--- a/tmp/76885a3b-09c3-4ee5-a3f3-2b4320b30093_buggy.java
+++ b/tmp/e7845420-2b8d-4019-a12b-d8aca09d0812_fixed.java
@@ -1,37 +1,79 @@
+import java.io.IOException;
+import java.io.Writer;
+
+// Stub for compilation if Entities is not available in this context
+class Entities {
+    public String entityName(int c) { return null; } // Assume this method exists or adapt as needed
+}
+
+public class StringEscapeUtils { // Assuming the method is within a class like this
+
+    // Assume 'this' refers to an instance containing the entity mappings, e.g., an Entities instance
+    // For standalone context, we might need to pass Entities or make it static.
+    // Let's assume 'this' has the entityName method for now, mirroring the original code structure.
+    // In a real scenario, this would likely delegate to an Entities instance.
+    // Example stub:
+    private Entities entities = new Entities(); // Placeholder
+    protected String entityName(int c) { return entities.entityName(c); } // Delegate
+
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      *
-     * @see #escape(String)
+     * @see #escape(String) // Assuming this method exists elsewhere
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+            int codepoint = str.codePointAt(i); // Use codePointAt to handle supplementary characters
+
+            // Check if it's a supplementary character (requires two Java chars)
+            if (codepoint > 0xFFFF) {
+                // Supplementary characters are encoded numerically
+                writer.write("&#");
+                writer.write(Integer.toString(codepoint, 10));
+                writer.write(';');
+                i++; // Increment i again because codePointAt consumed two chars
+            } else {
+                // It's a BMP character (single Java char)
+                char c = (char) codepoint;
+                // Check for named entity for this BMP character
+                String entityName = this.entityName(c); // entityName likely takes char or int BMP value
                 if (entityName == null) {
+                    // No named entity found
                     if (c > 0x7F) {
+                        // Escape non-ASCII BMP characters numerically
                         writer.write("&#");
                         writer.write(Integer.toString(c, 10));
                         writer.write(';');
                     } else {
+                        // Write ASCII characters directly (0-127)
                         writer.write(c);
                     }
                 } else {
+                    // Write the named entity
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
                 }
             }
         }
+    }
+
+    // Dummy escape(String) method for @see link
+    public String escape(String str) {
+        // Implementation not relevant for the fix
+        return str;
+    }
+}
\ No newline at end of file
