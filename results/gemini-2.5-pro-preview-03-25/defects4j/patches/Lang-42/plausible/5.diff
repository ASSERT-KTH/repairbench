diff --git a/tmp/4cf95e3b-8b6f-48bc-a192-1817395fda69_buggy.java b/tmp/d13213e0-13a8-4089-8f86-00f5511d698b_fixed.java
index 822447c..5a2d443 100644
--- a/tmp/4cf95e3b-8b6f-48bc-a192-1817395fda69_buggy.java
+++ b/tmp/d13213e0-13a8-4089-8f86-00f5511d698b_fixed.java
@@ -1,37 +1,54 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+            int codepoint = str.codePointAt(i); // Get the codepoint at index i
+
+            // Check if the codepoint is supplementary (requires two chars)
+            if (codepoint > 0xFFFF) {
+                // It's a supplementary character (like U+1D362).
+                // Escape it numerically. Named entities are not typically used for supplementary characters.
+                writer.write("&#");
+                writer.write(Integer.toString(codepoint, 10));
+                writer.write(';');
+                i++; // Increment i because codePointAt() consumed two chars (high and low surrogate)
+            } else {
+                // It's a BMP character (fits in a single char)
+                char c = (char) codepoint; // Cast codepoint to char
+                String entityName = this.entityName(c); // Check for named entity
                 if (entityName == null) {
+                    // No named entity found. Check if the character needs escaping.
+                    // The original code escaped characters > 0x7F numerically.
                     if (c > 0x7F) {
                         writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                        writer.write(Integer.toString(c, 10)); // Use the char value (codepoint for BMP)
                         writer.write(';');
                     } else {
+                        // ASCII character (<= 0x7F), write directly
                         writer.write(c);
                     }
                 } else {
+                    // Found a named entity, write it
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
                 }
             }
         }
+    }
\ No newline at end of file
