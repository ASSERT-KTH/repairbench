diff --git a/tmp/374877e5-b878-4db5-9688-e0c5d1b7ada5_buggy.java b/tmp/1b5a7a3b-fc69-44fb-8bdd-3e970ec52788_fixed.java
index 822447c..d977901 100644
--- a/tmp/374877e5-b878-4db5-9688-e0c5d1b7ada5_buggy.java
+++ b/tmp/1b5a7a3b-fc69-44fb-8bdd-3e970ec52788_fixed.java
@@ -1,37 +1,85 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
+     *             or {@link Writer#write(String)} methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) {
+            int codepoint = str.codePointAt(i);
+            // Assuming entityName(int) exists or the underlying lookup mechanism handles int codepoints.
+            // In Apache Commons Lang Entities, the lookup map typically uses Integer codepoints.
+            // If entityName specifically requires a char, this might need adjustment based on the
+            // specific implementation of entityName and the Entities class structure.
+            // However, standard HTML entity definitions include codepoints beyond the BMP,
+            // so handling int codepoints is expected.
+            String entityName;
+            // Check if the codepoint is within the BMP range where entityName(char) might be applicable
+            // or if it's supplementary. A robust entityName should handle int codepoints directly.
+            // We call a hypothetical entityName(int) for clarity. If the actual method signature
+            // is entityName(char), it implies supplementary characters cannot have named entities
+            // in this specific implementation, which is unlikely for a general HTML escaper.
+            // Let's stick to the assumption that the lookup handles int codepoints.
+            // We use a hypothetical method lookupEntityName(int) to represent this lookup.
+            // If the actual class has `entityName(int)`, use that. If it only has `entityName(char)`,
+            // then supplementary characters won't get named entities.
+
+            // Based on the context of Apache Commons Lang Entities, the lookup map uses Integer keys.
+            // Let's assume `this.entityName(codepoint)` works correctly by looking up the integer codepoint.
+            // (The original method `entityName(char)` would implicitly cast char to int for lookup if needed,
+            // but wouldn't handle supplementary characters correctly).
+            // Let's proceed assuming `this.entityName(int)` or equivalent capability exists.
+            // Note: The actual implementation in Entities.java might have different internal methods.
+            // The key is to look up the *codepoint* for a named entity.
+
+            // Simulate lookup based on codepoint (assuming internal map uses Integer keys)
+            // This requires access to the internal map or a method that takes an int codepoint.
+            // If we strictly adhere to the original `entityName(char)` signature, we need to check
+            // if the codepoint is BMP first.
+            if (codepoint <= 0xFFFF) {
+                 entityName = this.entityName((char)codepoint); // Use existing method for BMP
+            } else {
+                 // No named entities for supplementary characters if entityName only takes char.
+                 // However, a proper HTML escaper should support this via an int-based lookup.
+                 // Assuming the class has a mechanism (e.g., internal map lookup) for int codepoints:
+                 entityName = null; // Placeholder: Replace with actual lookup if available, e.g., entities.getName(codepoint)
+                 // If relying *only* on the provided `entityName(char)` method, this branch implies no named entities > 0xFFFF.
+            }
+
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // Check if the codepoint is outside the basic ASCII range (0-127)
+                // or needs escaping for other reasons (e.g. '<', '>', '&', '"')
+                // The original code escaped > 0x7F. HTML escaping also typically escapes <, >, &, ".
+                // Assuming this simplified logic is sufficient for the specific context (or that
+                // named entities cover < > & "). If not, add checks for those characters.
+                if (codepoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codepoint, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // Codepoint is <= 0x7F (ASCII) and not a named entity
+                    writer.write(codepoint); // Writes the character corresponding to the codepoint
                 }
             } else {
+                // Found a named entity for the codepoint
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+            // Advance the index by the number of char units used by the codepoint
+            i += Character.charCount(codepoint);
         }
     }
\ No newline at end of file
