diff --git a/tmp/0104acff-415d-47fe-8ee3-be263626bdaf_buggy.java b/tmp/b0c6ee19-81dc-4e0c-8694-6940989e6057_fixed.java
index 822447c..bd7da39 100644
--- a/tmp/0104acff-415d-47fe-8ee3-be263626bdaf_buggy.java
+++ b/tmp/b0c6ee19-81dc-4e0c-8694-6940989e6057_fixed.java
@@ -1,37 +1,57 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
+        for (int i = 0; i < len; ) { // Iterate by code point, not char
+            int codePoint = str.codePointAt(i);
+
+            // Handle supplementary characters (those outside the Basic Multilingual Plane)
+            if (Character.isSupplementaryCodePoint(codePoint)) {
+                // Always escape supplementary characters numerically using their code point value
+                writer.write("&#");
+                writer.write(Integer.toString(codePoint, 10));
+                writer.write(';');
+            } else {
+                // Handle BMP characters (like the original logic)
+                char c = (char) codePoint;
+                // Try to find a named entity for the character
                 String entityName = this.entityName(c);
                 if (entityName == null) {
+                    // No named entity found
+                    // If the character is outside ASCII range (0-127), escape it numerically
                     if (c > 0x7F) {
                         writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                        writer.write(Integer.toString(c, 10)); // Use the char value (same as codePoint for BMP)
                         writer.write(';');
                     } else {
+                        // If the character is within ASCII range and has no entity name, write it directly
                         writer.write(c);
                     }
                 } else {
+                    // Found a named entity, write it
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
                 }
             }
+            
+            // Advance the index by the number of characters (char units) used by the current code point
+            // This will be 1 for BMP characters and 2 for supplementary characters
+            i += Character.charCount(codePoint);
+        }
     }
