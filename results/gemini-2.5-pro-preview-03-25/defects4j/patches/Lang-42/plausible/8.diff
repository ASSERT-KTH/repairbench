diff --git a/tmp/9c518998-99a3-4676-89b9-0a94bef15d3f_buggy.java b/tmp/9bec6c45-284f-4f1f-a6b1-0b40c8402a06_fixed.java
index 822447c..57d852a 100644
--- a/tmp/9c518998-99a3-4676-89b9-0a94bef15d3f_buggy.java
+++ b/tmp/9bec6c45-284f-4f1f-a6b1-0b40c8402a06_fixed.java
@@ -1,37 +1,59 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
             char c = str.charAt(i);
             String entityName = this.entityName(c);
             if (entityName == null) {
+                // Check for supplementary characters (outside BMP)
+                if (Character.isHighSurrogate(c) && i + 1 < len) {
+                    char low = str.charAt(i + 1);
+                    if (Character.isLowSurrogate(low)) {
+                        int codePoint = Character.toCodePoint(c, low);
+                        writer.write("&#");
+                        writer.write(Integer.toString(codePoint, 10));
+                        writer.write(';');
+                        i++; // Skip the low surrogate character
+                    } else {
+                        // Edge case: Unmatched high surrogate, treat as individual char
+                        if (c > 0x7F) {
+                             writer.write("&#");
+                             writer.write(Integer.toString(c, 10));
+                             writer.write(';');
+                        } else {
+                             writer.write(c);
+                        }
+                    }
+                } else {
+                    // Character is in BMP or is an unmatched low surrogate
                     if (c > 0x7F) {
                         writer.write("&#");
                         writer.write(Integer.toString(c, 10));
                         writer.write(';');
                     } else {
                         writer.write(c);
                     }
+                }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
\ No newline at end of file
