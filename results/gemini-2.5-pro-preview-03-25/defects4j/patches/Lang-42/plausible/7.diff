diff --git a/tmp/e93c562c-b52c-4b89-8d1a-37c888bda4c1_buggy.java b/tmp/d19e92ff-5e44-4f8c-86bc-15eb6776209b_fixed.java
index 822447c..192fa78 100644
--- a/tmp/e93c562c-b52c-4b89-8d1a-37c888bda4c1_buggy.java
+++ b/tmp/d19e92ff-5e44-4f8c-86bc-15eb6776209b_fixed.java
@@ -1,37 +1,74 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
             char c = str.charAt(i);
             String entityName = this.entityName(c);
             if (entityName == null) {
+                // Check for surrogate pairs first
+                if (Character.isHighSurrogate(c)) {
+                    // Ensure we have a next character and it's a low surrogate
+                    if (i + 1 < len) {
+                        char nextChar = str.charAt(i + 1);
+                        if (Character.isLowSurrogate(nextChar)) {
+                            // Combine the pair to get the supplementary code point
+                            int codePoint = Character.toCodePoint(c, nextChar);
+                            writer.write("&#");
+                            writer.write(Integer.toString(codePoint, 10));
+                            writer.write(';');
+                            // Skip the next character as it's part of the surrogate pair
+                            i++;
+                        } else {
+                            // High surrogate not followed by low surrogate.
+                            // Output the high surrogate numerically (which is > 0x7f)
+                            writer.write("&#");
+                            writer.write(Integer.toString(c, 10));
+                            writer.write(';');
+                        }
+                    } else {
+                        // High surrogate at the end of the string.
+                        // Output the high surrogate numerically (which is > 0x7f)
+                        writer.write("&#");
+                        writer.write(Integer.toString(c, 10));
+                        writer.write(';');
+                    }
+                } else if (Character.isLowSurrogate(c)) {
+                    // Low surrogate without a preceding high surrogate.
+                    // Output the low surrogate numerically (which is > 0x7f)
+                    writer.write("&#");
+                    writer.write(Integer.toString(c, 10));
+                    writer.write(';');
+                } else {
+                    // Character is not part of a surrogate pair
                     if (c > 0x7F) {
                         writer.write("&#");
                         writer.write(Integer.toString(c, 10));
                         writer.write(';');
                     } else {
                         writer.write(c);
                     }
+                }
             } else {
+                // Character is a known entity
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
\ No newline at end of file
