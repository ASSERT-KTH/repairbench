diff --git a/tmp/c16e1198-266c-419f-a92a-a2a3c7d01347_buggy.java b/tmp/97cd8c32-9f03-47d9-88b1-681a50400698_fixed.java
index 0dbce00..79514d0 100644
--- a/tmp/c16e1198-266c-419f-a92a-a2a3c7d01347_buggy.java
+++ b/tmp/97cd8c32-9f03-47d9-88b1-681a50400698_fixed.java
@@ -1,33 +1,65 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property != null) {
-            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
+            // Use the original method for finding format annotations
+            // Assume property.getMember() is the correct source for annotations
+            AnnotatedMember member = property.getMember();
+            JsonFormat.Value format = null;
+            // Check if member is null just in case
+            if (member != null) {
+                // findFormat takes Annotated; AnnotatedMember implements Annotated.
+                 format = serializers.getAnnotationIntrospector().findFormat(member);
+            }
+
             if (format != null) {
-
-            	// Simple case first: serialize as numeric timestamp?
                 JsonFormat.Shape shape = format.getShape();
+
+                // Simple case first: serialize as numeric timestamp?
                 if (shape.isNumeric()) {
                     return withFormat(Boolean.TRUE, null);
                 }
 
-                if (format.getShape() == JsonFormat.Shape.STRING) {
+                // Check if the shape implies String format. This is the case if:
+                // - Shape is explicitly Shape.STRING
+                // - Shape is Shape.ANY (or unspecified/default) AND pattern/locale/timezone is set
+                //   (implies String format that overrides global timestamp setting)
+                boolean asString = (shape == JsonFormat.Shape.STRING) ||
+                                   (shape == JsonFormat.Shape.ANY &&
+                                       (format.hasPattern() || format.hasLocale() || format.hasTimeZone()));
+
+                if (asString) {
+                    // If timezone not specified in @JsonFormat, use SerializerProvider's default.
+                    // Note: format.getTimeZone() returns null if not specified
                     TimeZone tz = format.getTimeZone();
                     final String pattern = format.hasPattern()
                                     ? format.getPattern()
+                                    // Jackson's default format string if pattern not specified:
                                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                     final Locale loc = format.hasLocale()
                                     ? format.getLocale()
-                                    : serializers.getLocale();
+                                    : serializers.getLocale(); // Use SerializerProvider's locale if not specified
+
+                    // Important: create a new SimpleDateFormat instance, do not reuse.
                     SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+
+                    // If timezone was not specified via @JsonFormat, use the one from provider
                     if (tz == null) {
                         tz = serializers.getTimeZone();
                     }
                     df.setTimeZone(tz);
+                    // Return a new serializer instance configured with specified format
+                    // Boolean.FALSE indicates do not use timestamp; df is the custom DateFormat
                     return withFormat(Boolean.FALSE, df);
                 }
+                // If not numeric and not explicitly/implicitly string (e.g., Shape.ANY without
+                // pattern/locale/timezone), fall through to return 'this'.
             }
         }
+        // If no property, or no JsonFormat annotation found, or it doesn't specify
+        // numeric/string format (e.g. Shape.ANY without pattern etc.),
+        // return the default serializer instance (`this`). This instance will respect the
+        // global configuration (like WRITE_DATES_AS_TIMESTAMPS).
         return this;
     }
\ No newline at end of file
