diff --git a/tmp/7fa5ee86-8dac-4956-8462-41f3fa23a5d3_buggy.java b/tmp/68e9e6fb-9ecf-4c86-a08c-a2be9250ca1e_fixed.java
index 0dbce00..255e023 100644
--- a/tmp/7fa5ee86-8dac-4956-8462-41f3fa23a5d3_buggy.java
+++ b/tmp/68e9e6fb-9ecf-4c86-a08c-a2be9250ca1e_fixed.java
@@ -1,33 +1,72 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
-        if (property != null) {
-            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
-            if (format != null) {
+        if (property == null) {
+            return this;
+        }
+        // Use the standard method for finding format overrides, considering annotations and type defaults
+        // (This part assumes findFormatOverrides is available as in later Jackson versions,
+        // replacing the older findFormat call)
+        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
+        if (format == null) {
+             return this;
+        }
 
-            	// Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
+
+        // Simple case first: serialize as numeric timestamp?
         if (shape.isNumeric()) {
+            // Ensure this is mutually exclusive with string formatting based on pattern/locale/tz
             return withFormat(Boolean.TRUE, null);
         }
 
-                if (format.getShape() == JsonFormat.Shape.STRING) {
+        // Check if shape implies string format.
+        // This is true if shape is explicitly STRING or SCALAR.
+        // Also, if shape is ANY, check if format settings (pattern, locale, timezone) are present,
+        // which also implies string format should be used.
+        boolean treatAsString = (shape == JsonFormat.Shape.STRING) || (shape == JsonFormat.Shape.SCALAR);
+
+        if (!treatAsString && shape == JsonFormat.Shape.ANY) {
+            // For Shape.ANY, presence of pattern, locale or timezone indicates String format.
+            if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
+                treatAsString = true;
+            }
+        }
+
+        // If it needs to be treated as String based on the checks above:
+        if (treatAsString) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                             ? format.getPattern()
+                            // If no pattern is specified, fall back to the default ISO-8601 format string
                             : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
+                            // If no locale specified, use the default locale from serializer provider
                             : serializers.getLocale();
+
+            // Create a SimpleDateFormat instance with the determined pattern and locale.
+            // Note: For some date/time types, custom formatters might be needed,
+            // but SimpleDateFormat is the standard for java.util.Date.
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+
             if (tz == null) {
+                // If no explicit timezone is set in the format annotation,
+                // use the default timezone from the serializer provider.
                 tz = serializers.getTimeZone();
             }
+            // Apply the determined timezone to the date format.
             df.setTimeZone(tz);
+
+            // Return a new serializer instance configured with Boolean.FALSE (-> not timestamp)
+            // and the configured DateFormat.
             return withFormat(Boolean.FALSE, df);
         }
-            }
-        }
+
+        // If the shape is not numeric, and does not imply String format
+        // (e.g., Shape.ANY without pattern/locale/timezone, or other shapes like BOOLEAN),
+        // return the default serializer instance ('this'). This instance will respect
+        // global serialization features like WRITE_DATES_AS_TIMESTAMPS.
         return this;
     }
\ No newline at end of file
