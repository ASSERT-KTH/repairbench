diff --git a/tmp/804c4585-53f1-4908-ab9b-bf8432516fd6_buggy.java b/tmp/267eac07-152b-43f3-9f7a-56669f593dc2_fixed.java
index 01967cc..2c77d8b 100644
--- a/tmp/804c4585-53f1-4908-ab9b-bf8432516fd6_buggy.java
+++ b/tmp/267eac07-152b-43f3-9f7a-56669f593dc2_fixed.java
@@ -1,35 +1,48 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
+            // Need to skip primitives, basic wrappers too
+            // NOTE: JsonNode needs special handling here too...
+            /* 12-Jun-2015, tatu: How about checking for interfaces? Need to handle, possibly?
+             *   Question is which mode applies: NON_CONCRETE seems logical.
+             */
+            // 01-Aug-2016, tatu: Let's also consider check for abstract types here...
+            //  relevant for some specific JsonNode subtypes?
+            // 13-Aug-2018, tatu: [databind#793]; prevent ALL JsonNode subtypes from using
+            
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                // Overrides Object.class, non-concrete types, but specifically excludes JsonNode:
+                // [databind#793] / [databind#88] Should not apply to JSON tree models:
+                if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+                    return false;
+                }
+                return (t.getRawClass() == Object.class) || !t.isConcrete();
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+                // [databind#88] Should not apply to JSON tree models:
+                if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+                    return false;
+                }
+                // will always include interfaces and abstract classes (but NOT Object.class)
+                return !t.isFinal();
             default:
             //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
\ No newline at end of file
