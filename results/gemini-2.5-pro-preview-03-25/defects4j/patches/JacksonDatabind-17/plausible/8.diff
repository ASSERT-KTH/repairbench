diff --git a/tmp/fcf38a12-6011-453d-bd61-ef6658c8b974_buggy.java b/tmp/4397e307-1c94-436f-be6c-af054b51e79e_fixed.java
index 01967cc..9d77e80 100644
--- a/tmp/fcf38a12-6011-453d-bd61-ef6658c8b974_buggy.java
+++ b/tmp/4397e307-1c94-436f-be6c-af054b51e79e_fixed.java
@@ -1,35 +1,44 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                 // First check for Object.class
+                 if (t.getRawClass() == Object.class) {
+                     return true;
+                 }
+                 // Then non-concrete types, but NOT TreeNode implementations (databind#88, databind#793)
+                 return (!t.isConcrete()
+                         && !TreeNode.class.isAssignableFrom(t.getRawClass()));
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+                // Minor optimization: let's not call isFinal() twice
+                if (t.isFinal()) {
+                    return false;
+                }
+                // Maybe exclude primitive types too?
+//                if (t.isPrimitive()) { return false; }
+                
+                // And finally, exclude TreeNode implementations
+                return !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
\ No newline at end of file
