diff --git a/tmp/932d3b70-961a-4b92-8f5f-0fa69ff198e4_buggy.java b/tmp/83d0e496-06db-4119-9b95-8ce2b696a436_fixed.java
index 01967cc..27e8f30 100644
--- a/tmp/932d3b70-961a-4b92-8f5f-0fa69ff198e4_buggy.java
+++ b/tmp/83d0e496-06db-4119-9b95-8ce2b696a436_fixed.java
@@ -1,35 +1,34 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
                 // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                return (t.getRawClass() == Object.class) || // explicit request
+                        (!t.isConcrete() // or non-concrete
+                        // and not TreeNode (JsonNode is handled specially)
+                          && !TreeNode.class.isAssignableFrom(t.getRawClass()));
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
-                // [Issue#88] Should not apply to JSON tree models:
+                // [databind#88] Should not apply to JSON tree models:
                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
\ No newline at end of file
