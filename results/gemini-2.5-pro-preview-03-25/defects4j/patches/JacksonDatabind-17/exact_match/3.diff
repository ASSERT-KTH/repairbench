diff --git a/tmp/88ff2079-f916-4ce5-9947-6436a778c8bd_buggy.java b/tmp/8f06bad2-481a-478a-8f44-6085e2a78b73_fixed.java
index 01967cc..2020294 100644
--- a/tmp/88ff2079-f916-4ce5-9947-6436a778c8bd_buggy.java
+++ b/tmp/8f06bad2-481a-478a-8f44-6085e2a78b73_fixed.java
@@ -1,35 +1,35 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+                // N B: [databind#88] should not apply to JSON tree models:
                 return (t.getRawClass() == Object.class)
                         || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                                && !TreeNode.class.isAssignableFrom(t.getRawClass()));
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
-                // [Issue#88] Should not apply to JSON tree models:
+                // [databind#88] Should not apply to JSON tree models:
+                // [databind#1762] Also, should not apply to Collection- / Map-like
+                //   types if they are not expected to be polymorphic
                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
\ No newline at end of file
