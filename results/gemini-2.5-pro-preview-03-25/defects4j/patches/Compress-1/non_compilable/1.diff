diff --git a/tmp/6bc4468b-172b-4a5b-a4a2-23277d8bdf9a_buggy.java b/tmp/b0c27f5d-0c88-44ff-9df3-274c8029975e_fixed.java
index c3986cc..6ac7ce3 100644
--- a/tmp/6bc4468b-172b-4a5b-a4a2-23277d8bdf9a_buggy.java
+++ b/tmp/b0c27f5d-0c88-44ff-9df3-274c8029975e_fixed.java
@@ -1,13 +1,44 @@
     /**
      * Closes the CPIO output stream as well as the stream being filtered.
+     * This method MUST be called when all entries have been written and the
+     * stream should be finished. If the stream is already closed, this method
+     * does nothing.
      *
      * @throws IOException
      *             if an I/O error has occurred or if a CPIO file error has
      *             occurred
      */
+    @Override
     public void close() throws IOException {
+        // Ensure close() calls finish() only once, even if close() is called multiple times.
+        // The 'closed' flag handles idempotency for the entire close operation.
         if (!this.closed) {
+            try {
+                // finish() is responsible for writing the CPIO trailer record,
+                // which marks the end of the archive. Without the trailer,
+                // CPIO readers might encounter EOFExceptions or other errors.
+                // It should also handle any necessary padding.
+                // We assume finish() exists and correctly finalizes the CPIO stream structure.
+                // In Apache Commons Compress CpioOutputStream, finish() handles this.
+                // If an entry is still open when finish() is called, it should ideally throw an error.
+                finish();
+            } finally {
+                // Ensure the underlying stream is closed and the closed flag is set
+                // even if finish() throws an exception (though finish() shouldn't ideally
+                // throw if used correctly, i.e., after all entries are closed).
+                // However, standard practice is to let exceptions propagate.
+                // If finish() completes successfully, we close the underlying stream.
+                // If finish() throws, closing the underlying stream might still be desired,
+                // hence the finally block might seem appropriate, but standard library
+                // close() methods usually propagate the first exception.
+                // Let's stick to sequential execution: finish first, then super.close().
+                // If finish() throws, the stream might be left in an inconsistent state,
+                // but the exception indicates the primary problem.
+
+                // Close the underlying output stream.
                 super.close();
+                // Mark this stream as closed.
                 this.closed = true;
             }
         }
+    }
\ No newline at end of file
