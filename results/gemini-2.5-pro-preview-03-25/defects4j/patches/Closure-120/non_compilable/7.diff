diff --git a/tmp/147d4242-c282-48f6-8812-890868a3541b_buggy.java b/tmp/b8447575-6d84-4a2f-a835-43fb52f7d029_fixed.java
index 07b0792..95d4d16 100644
--- a/tmp/147d4242-c282-48f6-8812-890868a3541b_buggy.java
+++ b/tmp/b8447575-6d84-4a2f-a835-43fb52f7d029_fixed.java
@@ -1,22 +1,69 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
+      // Assuming 'this' is the Var object for the variable in question.
+      Var v = this;
+
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // No single assignment found.
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
+      // Find the function containing the assignment statement.
+      // ref.getNode() is the NAME node. ref.getParentNode() is the expression (e.g. ASSIGN).
+      // We need the function containing the statement where assignment happens.
+      Node assignmentNode = ref.getNode();
+      // Get the statement node that contains the assignment expression.
+      Node assignmentStatement = NodeUtil.getEnclosingStatement(assignmentNode.getParent());
+      Node enclosingFunction = NodeUtil.getEnclosingFunction(assignmentStatement);
+
+      // Make sure this assignment is not inside a loop construct.
+      // We walk up the basic block graph from the assignment's block.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
+
+        // If we reach the entry block of the function containing the assignment,
+        // stop checking for loops within this function.
         if (block.isFunction) {
+            if (enclosingFunction != null && block.getRoot() == enclosingFunction) {
                 break;
-        } else if (block.isLoop) {
+            }
+            // If checking a global assignment, stop if we hit any function boundary.
+            // The global check below handles assignments inside functions.
+            if (enclosingFunction == null) {
+               break;
+            }
+        }
+
+        // If any block in the chain up to the function/global boundary is a loop,
+        // then the assignment occurs within a loop.
+        if (block.isLoop) {
           return false;
         }
       }
 
+      // Additional Check: If the variable is global, the assignment must
+      // also be in the global scope (not inside any function).
+      // An assignment to a global variable inside a function can happen multiple
+      // times if the function is called multiple times or recursively.
+      if (v.getScope().isGlobal() && enclosingFunction != null) {
+          return false;
+      }
+
+      // If the variable is local to a function F, this check currently assumes
+      // that if the assignment is not inside a loop construct *within* F,
+      // it's assigned once per execution of F. For the variable to be truly
+      // assigned once in its lifetime, F itself must execute only once.
+      // This implementation does not explicitly check if the enclosing function
+      // runs multiple times (e.g., via recursion or multiple callsites),
+      // which could lead to false positives for local variables in such functions.
+      // However, the added check for global variables fixes the specific issue
+      // highlighted by the failing test case.
+
+      // If the assignment is not in a loop and satisfies the global variable check,
+      // return true.
       return true;
     }
\ No newline at end of file
