diff --git a/tmp/ca7a75f5-d862-4e72-8a59-3a77c3189cbb_buggy.java b/tmp/878004cb-2aa9-4932-b156-6aae448112cf_fixed.java
index 07b0792..ce09014 100644
--- a/tmp/ca7a75f5-d862-4e72-8a59-3a77c3189cbb_buggy.java
+++ b/tmp/878004cb-2aa9-4932-b156-6aae448112cf_fixed.java
@@ -1,22 +1,40 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // No assignment or multiple syntactic assignments
         return false;
       }
 
       // Make sure this assignment is not in a loop.
+      // Traverse the basic block graph upwards from the assignment block.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
+          // Reached the function boundary without finding a loop within the function.
           break;
         } else if (block.isLoop) {
+          // Assignment is syntactically inside a loop construct.
           return false;
         }
       }
 
+      // Make sure this assignment is not inside a function scope.
+      // An assignment within a function might be executed multiple times if the
+      // function is called multiple times (e.g., recursion, called in loops,
+      // multiple call sites). This is a conservative check to prevent incorrect
+      // inlining like in the case of recursion (see issue 1053).
+      Scope scope = ref.getScope();
+      if (scope.isFunctionScope()) {
+        // Assignment occurs within a function. Conservatively assume it might
+        // execute more than once in the program's lifetime.
+        return false;
+      }
+
+      // If the assignment is not in a loop and is in the global scope,
+      // it's considered assigned once in its lifetime based on this check.
       return true;
     }
\ No newline at end of file
