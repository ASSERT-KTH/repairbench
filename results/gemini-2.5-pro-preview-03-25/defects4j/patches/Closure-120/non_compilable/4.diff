diff --git a/tmp/34af918f-c887-4cab-ae14-368429e97b4a_buggy.java b/tmp/d4238afd-983f-4cc4-95d2-b37d009a4534_fixed.java
index 07b0792..c14334e 100644
--- a/tmp/34af918f-c887-4cab-ae14-368429e97b4a_buggy.java
+++ b/tmp/d4238afd-983f-4cc4-95d2-b37d009a4534_fixed.java
@@ -1,22 +1,47 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // 0 or multiple assignments
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
-      for (BasicBlock block = ref.getBasicBlock();
+      // Check if the assignment occurs in a scope that can be executed multiple
+      // times.
+
+      // First, check if the assignment is inside a function definition that is
+      // not the global scope. If so, the function might be called multiple times
+      // or recursively, leading to multiple executions of the assignment.
+      Node assignmentNode = ref.getNode();
+      Node enclosingFunction = NodeUtil.getEnclosingFunction(assignmentNode);
+      if (enclosingFunction != null && !NodeUtil.isGlobalFunction(enclosingFunction)) {
+        // Assignment is inside a non-global function; assume it can run multiple times.
+        return false;
+      }
+
+      // Second, check if the assignment is inside a loop structure in the
+      // control flow graph. This handles assignments in loops, even if they
+      // are in the global scope.
+      BasicBlock assignmentBlock = ref.getBasicBlock();
+      // Traverse up the basic block hierarchy from the assignment's block.
+      for (BasicBlock block = assignmentBlock;
            block != null; block = block.getParent()) {
+        // If we hit the function block (which must be the global block based on
+        // the previous check) before finding a loop, then the assignment is not
+        // in a loop within this scope.
         if (block.isFunction) {
           break;
-        } else if (block.isLoop) {
+        }
+        // If we find a loop block, the assignment is inside a loop.
+        if (block.isLoop) {
           return false;
         }
       }
 
+      // If we reach here, there's exactly one assignment, it's not in a
+      // non-global function, and it's not inside a loop structure.
       return true;
     }
\ No newline at end of file
