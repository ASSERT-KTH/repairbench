diff --git a/tmp/0e2ff142-a4c5-4ac9-a6c3-ba839a4b314e_buggy.java b/tmp/c92e6041-0c17-455b-ad86-c32babe5a8d0_fixed.java
index 07b0792..cc4c6e0 100644
--- a/tmp/0e2ff142-a4c5-4ac9-a6c3-ba839a4b314e_buggy.java
+++ b/tmp/c92e6041-0c17-455b-ad86-c32babe5a8d0_fixed.java
@@ -1,22 +1,101 @@
+import com.google.common.base.Predicate;
+import com.google.javascript.jscomp.NodeUtil;
+import com.google.javascript.rhino.Node;
+
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // No single assignment found.
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
-      for (BasicBlock block = ref.getBasicBlock();
-           block != null; block = block.getParent()) {
+      Node statementNode = ref.getStatement();
+      if (statementNode == null) {
+          // Cannot determine the context of the assignment, assume it might not be assigned once.
+          // This might happen for variables assigned in complex ways or synthetic code.
+          return false;
+      }
+
+      // Check 1: Assignment must not be lexically inside a standard loop structure (for, while, do).
+      for (Node ancestor = statementNode.getParent();
+           ancestor != null && !ancestor.isFunction(); // Stop searching at the enclosing function boundary
+           ancestor = ancestor.getParent()) {
+        if (NodeUtil.isLoopStructure(ancestor)) {
+          // Assignment is definitely inside a loop.
+          return false;
+        }
+      }
+
+      // Check 2: Assignment must not be inside a function that directly calls itself recursively by name.
+      // This helps catch cases where an assignment seems unique lexically but runs multiple times due to recursion.
+      Node enclosingFunction = NodeUtil.getEnclosingFunction(statementNode);
+      if (enclosingFunction != null) {
+        final String functionName = NodeUtil.getName(enclosingFunction);
+        // Only perform the check if the function is named. Handles simple direct recursion cases.
+        // Does not handle anonymous function recursion (e.g., via arguments.callee) or mutual recursion.
+        if (functionName != null && !functionName.isEmpty()) {
+          Predicate<Node> isRecursiveCall =
+              new Predicate<Node>() {
+                @Override
+                public boolean apply(Node input) {
+                  // Check if the node is a CALL node
+                  if (input.isCall()) {
+                    Node callee = input.getFirstChild();
+                    // Check if the target of the call is a NAME node matching the function's name.
+                    // Note: This is a heuristic and doesn't perform full scope resolution.
+                    // It assumes a name match implies a recursive call here.
+                    if (callee.isName() && functionName.equals(callee.getString())) {
+                      return true; // Found a potential recursive call.
+                    }
+                  }
+                  return false;
+                }
+              };
+
+          // Search within the function's body for any node satisfying the isRecursiveCall predicate.
+          // The search should not descend into nested function definitions.
+          if (NodeUtil.has(
+              enclosingFunction.getLastChild(), // The function body block
+              isRecursiveCall,
+              new Predicate<Node>() { // Traversal predicate: stop عند nested functions
+                @Override
+                public boolean apply(Node node) {
+                  // Continue traversal as long as the node is not a function definition.
+                  return !node.isFunction();
+                }
+              })) {
+            // A recursive call was found within the function.
+            return false;
+          }
+        }
+      }
+
+      // Check 3: Use the original BasicBlock based check.
+      // This check might rely on CFG analysis results (e.g., detecting loops from goto or complex flow)
+      // potentially captured by the isLoop flag on BasicBlocks.
+      BasicBlock assignmentBlock = ref.getBasicBlock();
+      if (assignmentBlock != null) {
+        // Traverse up the BasicBlock hierarchy associated with the assignment.
+        // The meaning of getParent() depends on how BasicBlocks are structured (e.g., dominance, nesting).
+        for (BasicBlock block = assignmentBlock; block != null; block = block.getParent()) {
           if (block.isFunction) {
+            // Reached the function boundary in the block hierarchy.
             break;
           } else if (block.isLoop) {
+            // The BasicBlock analysis indicates this assignment is within a loop context.
             return false;
           }
         }
+      }
+      // Note: If assignmentBlock is null, we proceed. This might mean CFG info is unavailable.
+      // The AST based checks above provide some safety net.
 
+
+      // If none of the checks determined that the assignment can happen multiple times,
+      // assume it is assigned once in its lifetime for the purpose of this check.
       return true;
     }
\ No newline at end of file
