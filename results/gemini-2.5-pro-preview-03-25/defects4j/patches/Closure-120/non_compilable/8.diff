diff --git a/tmp/86dc7732-ddb3-434f-b2c6-18dc55422a2e_buggy.java b/tmp/a7bb01fb-f56e-4c3f-8d51-4cc8323cf863_fixed.java
index 07b0792..cbfa12b 100644
--- a/tmp/86dc7732-ddb3-434f-b2c6-18dc55422a2e_buggy.java
+++ b/tmp/a7bb01fb-f56e-4c3f-8d51-4cc8323cf863_fixed.java
@@ -1,22 +1,83 @@
+import com.google.javascript.rhino.Node;
+import com.google.javascript.jscomp.Scope;
+import com.google.javascript.jscomp.NodeUtil;
+import com.google.javascript.jscomp.Var;
+// Assuming BasicBlock class is defined elsewhere and has getParent(), isFunction(), isLoop() methods.
+// Assuming Reference class is defined elsewhere and has getSymbol(), getNode(), getBasicBlock() methods.
+// Assuming getOneAndOnlyAssignment() is a method available in the context (e.g., part of the surrounding class).
+
     /**
      * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+     *     lifetime. This means the variable is assigned statically once, and
+     *     that assignment isn't inside a loop or a function that modifies
+     *     an outer-scoped variable (which could lead to multiple assignments
+     *     at runtime if the function is called multiple times).
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // 0 or >1 static assignments
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
+      Var symbol = ref.getSymbol();
+      // We need the variable symbol to check its scope. If it's missing, we can't perform the check.
+      if (symbol == null) {
+         // This case seems unlikely if ref is a valid assignment reference. Return false conservatively.
+         return false;
+      }
+      Scope varScope = symbol.getScope();
+       // Scope might be null for undeclared variables used in externs.
+      if (varScope == null) {
+          return false;
+      }
+      Node varScopeRoot = varScope.getRootNode();
+
+      Node assignmentNode = ref.getNode();
+      // Find the function immediately enclosing the assignment statement.
+      // This can be null if the assignment occurs in the global scope.
+      Node assigningFunctionNode = NodeUtil.getEnclosingFunction(assignmentNode);
+
+      // Traverse the basic block hierarchy upwards from the assignment's block.
+      // Check if the assignment occurs within a loop construct or
+      // inside a function that modifies an outer-scoped variable.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
+
+        // Check 1: Is the assignment inside a loop?
+        // If the block represents a loop structure, the assignment might occur multiple times.
+        if (block.isLoop) {
+          return false;
+        }
+
+        // Check 2: Have we reached a block representing a function scope?
         if (block.isFunction) {
+          // If the variable's defining scope is different from the function where the assignment occurs,
+          // then the assignment might happen multiple times if the function is called multiple times
+          // (e.g., recursion, called from a loop). This modifies an outer-scoped or global variable.
+          // Note: assigningFunctionNode can be null if assignment is in global scope,
+          // varScopeRoot holds the root node (often a SCRIPT or FUNCTION node) of the scope where the var was defined.
+          if (varScopeRoot != assigningFunctionNode) {
+             // Var is defined in scope S1 (global or an outer function).
+             // Assignment is inside function S2 (represented by assigningFunctionNode). S1 != S2.
+             // Function S2 might be called multiple times, causing reassignment of the variable in S1.
+             return false;
+          } else {
+             // Var is local to the function where the assignment occurs (varScopeRoot == assigningFunctionNode).
+             // We have already checked that the assignment is not inside a loop *within* this function.
+             // Any recursive call or multiple calls create new instances of this local variable.
+             // From the perspective of a single instance/activation, it's assigned once.
+             // We can stop traversing upwards within this function as further checks are irrelevant
+             // for this variable's lifetime related to *this* function's scope.
              break;
-        } else if (block.isLoop) {
-          return false;
           }
         }
+        // Continue traversing up the parent chain.
+      }
 
+      // If we exit the loop without returning false, it means the assignment is safe:
+      // 1. It's in the global scope and not within any loop structure.
+      // 2. It's within a function, the variable is local to that function, and the assignment
+      //    is not within any loop structure inside that function.
       return true;
     }
\ No newline at end of file
