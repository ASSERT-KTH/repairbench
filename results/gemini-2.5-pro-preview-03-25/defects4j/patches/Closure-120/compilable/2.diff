diff --git a/tmp/a64780c2-07e2-49c6-a3b1-701de143c79e_buggy.java b/tmp/9f02b6e6-6009-40b0-a959-1290f8cb13d4_fixed.java
index 07b0792..b5165a9 100644
--- a/tmp/a64780c2-07e2-49c6-a3b1-701de143c79e_buggy.java
+++ b/tmp/9f02b6e6-6009-40b0-a959-1290f8cb13d4_fixed.java
@@ -1,22 +1,46 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // The variable is never assigned or assigned multiple times.
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
+      // Make sure this assignment is not executed multiple times.
+      // This can happen if the assignment is part of a loop structure
+      // (syntactic loop, goto loop, or recursion) or if the function containing
+      // the assignment is called multiple times (e.g., from an outer loop).
+      // We check this by walking up the basic block nesting hierarchy.
+      // If any containing block is marked as part of a loop structure,
+      // the assignment might occur multiple times.
+      // Note: getParent() gives the block lexically containing this block, it
+      // does not correspond to the control flow graph's predecessor list.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
-        if (block.isFunction) {
-          break;
-        } else if (block.isLoop) {
+        // block.isLoop checks if the block is part of a loop structure
+        // in the control flow graph. This handles syntactic loops.
+        // If the CFG analysis correctly marks blocks in recursive cycles
+        // or functions called from loops as 'isLoop', this check might
+        // cover those cases too.
+        // By removing the early termination condition `else if (block.isFunction) { break; }`,
+        // we allow the check to continue potentially finding loops that contain
+        // the function definition itself. This correctly handles cases like
+        // functions defined and called within a loop, and potentially
+        // recursive functions or functions called from loops if `isLoop`
+        // is set based on CFG cycles detected by the analysis (e.g., SCCs).
+        if (block.isLoop) {
           return false;
         }
       }
 
+      // If the assignment is not contained within any loop structure up to the
+      // root of the control flow graph based on lexical nesting,
+      // we assume it's assigned once in its lifetime for the purpose of this check.
+      // This might be insufficient for complex control flow like recursion not marked
+      // by isLoop or functions called multiple times from different locations, but
+      // it addresses the issue of stopping the check prematurely at function boundaries.
       return true;
     }
\ No newline at end of file
