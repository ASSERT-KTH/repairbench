diff --git a/tmp/1a4736e6-f108-4976-8875-72b7a46d718a_buggy.java b/tmp/26205d1d-20d3-44c0-bc16-5896efb792a3_fixed.java
index 07b0792..3ac94ea 100644
--- a/tmp/1a4736e6-f108-4976-8875-72b7a46d718a_buggy.java
+++ b/tmp/26205d1d-20d3-44c0-bc16-5896efb792a3_fixed.java
@@ -1,22 +1,33 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
+        // The variable is never assigned or assigned multiple times.
         return false;
       }
 
-      // Make sure this assignment is not in a loop.
+      // Traverse the basic block graph starting from the assignment's block.
+      // We are looking for loops or function boundaries.
+      boolean inFunction = false;
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
-          break;
+          // The assignment is located inside a function.
+          // Conservatively assume the function can be called multiple times.
+          inFunction = true;
+          break; // Stop traversing up the graph.
         } else if (block.isLoop) {
+          // The assignment is located inside a loop structure (for, while, do).
+          // It will likely be assigned multiple times.
           return false;
         }
       }
 
-      return true;
+      // If the assignment is in the global scope (not in a function) and not
+      // inside a loop, it's assigned once in its lifetime. If it's inside a
+      // function, we conservatively assume it might be assigned multiple times.
+      return !inFunction;
     }
\ No newline at end of file
