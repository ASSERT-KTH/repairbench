diff --git a/tmp/b33d9e2c-6fec-46a0-8c3d-ff19d7f57ac4_buggy.java b/tmp/288ec1a7-d464-47f5-a043-a0eaa7a07233_fixed.java
index 42d4174..938d57b 100644
--- a/tmp/b33d9e2c-6fec-46a0-8c3d-ff19d7f57ac4_buggy.java
+++ b/tmp/288ec1a7-d464-47f5-a043-a0eaa7a07233_fixed.java
@@ -1,7 +1,24 @@
   /**
-   * Returns the remainder of the line.
+   * Returns the remainder of the line, starting form the current position.
+   * This function is extracted from the JsDocStream, because the JsDocStream
+   * version tries to read the entire rest of the stream, not just the line.
    */
   private String getRemainingJSDocLine() {
-    String result = stream.getRemainingJSDocLine();
-    return result;
+    StringBuilder builder = new StringBuilder();
+    while (true) {
+      // Peek the next character. We don't want to consume the EOL character,
+      // because the parser handles it separately.
+      int c = stream.peek();
+
+      // Check for end of line or end of stream.
+      // JsDocStream.EOF is typically -1.
+      if (c == '\n' || c == '\r' || c == JsDocStream.EOF) {
+        break;
+      }
+
+      // Consume the character and append it to the result.
+      builder.append((char) stream.getChar());
+    }
+    // We do not consume the EOL character(s) here. The parser advances past them.
+    return builder.toString();
   }
\ No newline at end of file
