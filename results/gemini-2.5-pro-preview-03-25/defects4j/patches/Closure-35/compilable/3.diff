diff --git a/tmp/8593cfef-e7e2-4dc8-bded-122b4ca711b4_buggy.java b/tmp/7a38e153-17e3-4611-a60e-e7c0eb46c0f8_fixed.java
index d57736b..85b75c1 100644
--- a/tmp/8593cfef-e7e2-4dc8-bded-122b4ca711b4_buggy.java
+++ b/tmp/7a38e153-17e3-4611-a60e-e7c0eb46c0f8_fixed.java
@@ -1,39 +1,58 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
+   *
+   * This function may modify {@code objType} by adding inferred properties.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+
+    // We only infer properties on object types, and only if the constraint
+    // is a record type.
+    if (objType != null && constraintObj != null && constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+        JSType propType = constraintObj.getPropertyType(prop); // The type required by the constraint.
+        // We only infer properties that aren't explicitly declared.
         if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+          JSType existingType = objType.getPropertyType(prop); // The current type on the object (possibly null).
+
           if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+            // Case 1: Property is missing on the object type.
+            // Infer the property type as potentially missing (constraint type | undefined).
+            // This allows {} to satisfy {{prop: (number|undefined)}} by inferring
+            // prop to be (number|undefined).
+            JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            objType.defineInferredProperty(prop, typeToInfer, null);
+          } else if (existingType != null && !existingType.isSubtype(propType)) {
+            // Case 2: Property exists and is inferred, but its type is not a subtype
+            // of the constraint type.
+            // Widen the inferred property type to the least supertype (LUB) of the
+            // existing type and the constraint type.
+            // Example: objType has {prop: number}, constraint requires {prop: string}.
+            // We widen {prop: number} to {prop: (number|string)}.
+            JSType typeToInfer = existingType.getLeastSupertype(propType);
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
+          // Case 3: Property exists, is inferred, and its type is already a subtype
+          // of the constraint type. Do nothing, the existing inferred type is sufficient.
         }
       }
     }
   }
\ No newline at end of file
