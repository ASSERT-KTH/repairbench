diff --git a/tmp/1b4d7ae6-2dda-4289-8475-c0dd69baad98_buggy.java b/tmp/fb1bd42b-45ea-4cc5-b62b-0dbf1e9ca127_fixed.java
index d57736b..e7390ca 100644
--- a/tmp/1b4d7ae6-2dda-4289-8475-c0dd69baad98_buggy.java
+++ b/tmp/fb1bd42b-45ea-4cc5-b62b-0dbf1e9ca127_fixed.java
@@ -1,39 +1,50 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
+   *
+   * This function should only add properties to object literals that start
+   * empty (like {}). It shouldn't add properties to object literals that
+   * already have properties (like {a: 1}).
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+
+      // Check if objType is known to be an object literal that was initially empty.
+      // An object literal ({}) starts with no properties defined.
+      // We also don't want to add properties to instance types (like new Foo()).
+      // This prevents incorrectly adding missing properties to objects that already
+      // have properties, like in the case of `{prop2: 3}` which shouldn't be
+      // automatically upgraded to match `{{prop1: (Object|undefined)}}`.
+      if (objType != null && objType.getOwnPropertyNames().isEmpty()
+          && !objType.isInstanceType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
+          // We only add the property if it's not already declared or present.
+          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {
+            // Make the inferred property optional by unioning with void.
+            JSType typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
-            objType.defineInferredProperty(prop, typeToInfer, null);
+            objType.defineInferredProperty(prop, typeToInfer, /* node= */ null);
           }
         }
       }
     }
   }
\ No newline at end of file
