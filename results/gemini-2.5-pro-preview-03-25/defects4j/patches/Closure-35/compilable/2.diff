diff --git a/tmp/371a6981-ce32-49f5-a577-aa135100176a_buggy.java b/tmp/337e5fc3-2979-4220-a346-2cf8830d853f_fixed.java
index d57736b..1c94116 100644
--- a/tmp/371a6981-ce32-49f5-a577-aa135100176a_buggy.java
+++ b/tmp/337e5fc3-2979-4220-a346-2cf8830d853f_fixed.java
@@ -1,39 +1,68 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
+   *
+   * This function is also responsible for handling structural matching
+   * of object literal types defined in unions. For example,
+   * ({prop1: 1}|{prop2: 2}) assigned to {prop1: (number|undefined)}
+   * requires prop1 to be added to the {prop2: 2} branch.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
+    // Handle union types by looking at each branch of the union recursively.
+    // This is necessary for cases like Issue 669 where a union of object
+    // literals needs to be matched against a record type constraint.
+    if (type.isUnionType()) {
+      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {
+        inferPropertyTypesToMatchConstraint(alternate, constraint);
+      }
+      return;
+    }
+
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+    // We only need to infer properties for record types constraints.
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      // If the type being checked is an object type, try to infer missing properties.
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+
+          // If the constraint has a property that's not explicitly declared
+          // on the object type, and the object type doesn't already have
+          // this property (either declared or inferred), then infer it.
+          // We check !isPropertyTypeDeclared to ensure we don't override
+          // explicitly declared properties (e.g., from superclasses).
+          // We check !hasProperty to ensure we only add truly missing properties.
+          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {
+            // Infer the property type using the constraint's property type,
+            // widened by undefined. This makes the object structurally
+            // compatible with the constraint, assuming the property is optional.
+            JSType typeToInfer =
+                registry.getNativeType(VOID_TYPE).getLeastSupertype(propType);
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
+          // NOTE: The original code had logic to potentially redefine existing inferred
+          // properties (!isPropertyTypeDeclared && hasProperty). This logic was removed
+          // as it seemed to overwrite existing types rather than widening them,
+          // potentially leading to incorrect type information or errors.
+          // Compatibility of existing properties is handled by standard subtyping checks.
         }
       }
     }
   }
\ No newline at end of file
