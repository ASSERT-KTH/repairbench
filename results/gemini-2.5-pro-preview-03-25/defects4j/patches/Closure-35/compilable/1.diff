diff --git a/tmp/77d63e90-83a7-4ba0-8546-089569ff243f_buggy.java b/tmp/7bb7339c-152c-43af-8b4f-b79368f341fb_fixed.java
index d57736b..79b82fd 100644
--- a/tmp/77d63e90-83a7-4ba0-8546-089569ff243f_buggy.java
+++ b/tmp/7bb7339c-152c-43af-8b4f-b79368f341fb_fixed.java
@@ -1,39 +1,60 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+          JSType propType = constraintObj.getPropertyType(prop); // Type T from constraint {prop: T}
+          if (!objType.isPropertyTypeDeclared(prop)) { // Only modify undeclared properties
+            JSType typeToInfer = null; // The type we will infer for the property
+            JSType existingType = objType.getPropertyType(prop); // Existing inferred type E
+
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              // Property is missing on the object type.
+              // Infer it as T | undefined.
+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            } else {
+              // Property exists and is inferred (since !isPropertyTypeDeclared is true).
+              // Widen the existing type E to accommodate the constraint type T.
+              // The widened type should be the least supertype of E and T.
+              if (existingType != null && !existingType.isUnknownType()) {
+                 typeToInfer = existingType.getLeastSupertype(propType);
+              } else {
+                 // If existing type is null or unknown, just use the constraint type T.
+                 typeToInfer = propType;
               }
+            }
+
+            // Define or update the inferred property if we determined a type
+            // and the new type is actually different from the existing one.
+            if (typeToInfer != null) {
+               if (existingType == null || existingType.isUnknownType() ||
+                   !typeToInfer.isEquivalentTo(existingType)) {
                   objType.defineInferredProperty(prop, typeToInfer, null);
                }
             }
           }
         }
       }
+    }
+  }
\ No newline at end of file
