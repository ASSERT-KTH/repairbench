diff --git a/tmp/20ffe06a-6acc-45e5-bf97-b42dc4da9cd9_buggy.java b/tmp/6bf3f37b-40d0-479b-b587-65e686512527_fixed.java
index d57736b..4dbcaa7 100644
--- a/tmp/20ffe06a-6acc-45e5-bf97-b42dc4da9cd9_buggy.java
+++ b/tmp/6bf3f37b-40d0-479b-b587-65e686512527_fixed.java
@@ -1,39 +1,60 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+      // Don't infer properties on prototypes or classes, because it leads to
+      // confusing behavior.
+      // Don't infer properties on unresolved objects, because we might infer
+      // the wrong thing. see testIssue801
+      if (objType != null && objType.getConstructor() == null && !objType.isUnknownType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
+          if (objType.isPropertyTypeDeclared(prop)) {
+            // Property is declared, don't infer or widen.
+            continue;
+          }
+
+          if (objType.hasProperty(prop)) {
+            // Property exists and is inferred. Check if widening is needed.
+            JSType existingType = objType.getPropertyType(prop);
+            // Widen only if the existing inferred type isn't a subtype of the constraint.
+            if (!existingType.isSubtype(propType)) {
+              // Use the constraint's type for widening.
+              // Check to prevent infinite recursion for recursive types.
+               if (!propType.equals(existingType)) {
+                 objType.defineInferredProperty(prop, propType, null);
+               }
+            }
+            // If existingType IS a subtype of propType, do nothing. It's already compatible.
+          } else {
+            // Property does not exist on objType. Infer it.
+            // The inferred type should account for the possibility of absence (undefined)
+            // plus what the constraint expects.
+            JSType typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
