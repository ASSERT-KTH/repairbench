diff --git a/tmp/da409047-d967-47f6-973e-a0e25526b460_buggy.java b/tmp/b43c2975-607a-47f5-807d-180fb76a7113_fixed.java
index d57736b..734dfdd 100644
--- a/tmp/da409047-d967-47f6-973e-a0e25526b460_buggy.java
+++ b/tmp/b43c2975-607a-47f5-807d-180fb76a7113_fixed.java
@@ -1,39 +1,45 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
+          // We only want to infer properties that are not declared and are missing.
+          // If a property is present (even if inferred) or declared,
+          // the normal subtyping check should handle it.
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
+              // Property is missing, so infer it.
+              // We widen the inferred type with void/undefined.
+              JSType typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
               objType.defineInferredProperty(prop, typeToInfer, null);
             }
+            // If the property exists but is not declared (i.e., inferred previously),
+            // do nothing here. Let the sub-typing check verify compatibility.
+          }
         }
       }
     }
   }
\ No newline at end of file
