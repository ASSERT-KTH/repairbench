diff --git a/tmp/86adcb97-cb81-4045-8229-71ec2aa44f02_buggy.java b/tmp/ec00df3c-1d55-4651-991d-d7e1b5f85c1b_fixed.java
index d57736b..349b468 100644
--- a/tmp/86adcb97-cb81-4045-8229-71ec2aa44f02_buggy.java
+++ b/tmp/ec00df3c-1d55-4651-991d-d7e1b5f85c1b_fixed.java
@@ -1,39 +1,44 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
+            // If the property doesn't exist on the object, or if the property
+            // has type ?, then assume that the property needs to be optional.
+            // Fall back to the constraint's property type otherwise.
+            // TODO(nicksantos): This isn't quite right for constrained types,
+            // but it's an improvement.
+            if (!objType.hasProperty(prop) || objType.getPropertyType(prop).isUnknownType()) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
