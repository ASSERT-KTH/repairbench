diff --git a/tmp/0a095d6a-f52e-4d11-9bc4-1f2ff5249ccc_buggy.java b/tmp/6b9120f1-fcb7-47c1-8bdd-278bf759331c_fixed.java
index d57736b..7e19112 100644
--- a/tmp/0a095d6a-f52e-4d11-9bc4-1f2ff5249ccc_buggy.java
+++ b/tmp/6b9120f1-fcb7-47c1-8bdd-278bf759331c_fixed.java
@@ -1,39 +1,70 @@
+import com.google.javascript.rhino.jstype.JSType;
+import com.google.javascript.rhino.jstype.JSTypeNative;
+import com.google.javascript.rhino.jstype.ObjectType;
+// NOTE: Assumes 'registry' is an instance variable of type JSTypeRegistry in the enclosing class.
+
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
+  // Handle Union Types recursively. If the type is a union, we apply the
+  // inference logic to each alternate type in the union.
+  if (type.isUnionType()) {
+    for (JSType alternate : type.toMaybeUnionType().getAlternates()) {
+      inferPropertyTypesToMatchConstraint(alternate, constraint);
+    }
+    return; // Done processing the union
+  }
+
+  // Original logic for non-union types (now applied to each alternate if type was a union)
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
+    // Restrict the type being checked to its object form (excluding null/undefined).
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
+      // Iterate over properties defined in the constraint record type.
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
+        // We only infer properties that are not explicitly declared on the object type.
         if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+          JSType typeToInfer;
           if (!objType.hasProperty(prop)) {
+            // If the object type doesn't have the property at all,
+            // infer it as T | undefined, where T is the property type from the constraint.
+            // This allows {} to match {prop: (T|undefined)}.
             typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                registry.getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
+          } else {
+            // If the object type already has the property (likely inferred),
+            // we use the property type from the constraint. This might implicitly widen
+            // the existing property type if defineInferredProperty handles it.
+            // Example: objType has prop:number, constraint has prop:Object.
+            // We define prop:Object.
+            typeToInfer = propType;
           }
+          // Define the inferred property on the object type. This mutates the type,
+          // potentially adding the property or widening an existing inferred one.
+          // The 'null' indicates this property definition comes from inference, not source code.
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
