diff --git a/tmp/a062691e-2c8a-4c5c-9851-b88396e6e57a_buggy.java b/tmp/7133ffd7-5cb2-43a8-a4e2-e5ee8df3a717_fixed.java
index d57736b..9a60ad5 100644
--- a/tmp/a062691e-2c8a-4c5c-9851-b88396e6e57a_buggy.java
+++ b/tmp/7133ffd7-5cb2-43a8-a4e2-e5ee8df3a717_fixed.java
@@ -1,39 +1,56 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      // Handle the case where 'type' might be a union type.
+      // We need to ensure that each object alternate in the union
+      // satisfies the constraint by potentially inferring properties.
+      JSType typeRestricted = type.restrictByNotNullOrUndefined();
+      for (JSType typeAlternate : typeRestricted.getUnionMembers()) {
+        ObjectType objType = ObjectType.cast(typeAlternate);
         if (objType != null) {
           for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
+            // If the property is not explicitly declared on the object type,
+            // we may need to infer it based on the constraint.
             if (!objType.isPropertyTypeDeclared(prop)) {
               JSType typeToInfer = propType;
+              // If the object type doesn't even have the property implicitly,
+              // it means the property is missing. In this case, the constraint
+              // implies it could be void (undefined).
               if (!objType.hasProperty(prop)) {
+                // We need access to JSTypeRegistry to get VOID_TYPE.
+                // Assuming 'registry' is an accessible field/method providing it.
                 typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                    registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE)
+                        .getLeastSupertype(propType);
+              }
+              // Define the inferred property on this object type alternate.
+              // This helps satisfy the constraint for this branch of the union.
+              // The 'null' indicates this is an inferred property without a specific AST node.
+              objType.defineInferredProperty(prop, typeToInfer, /* node= */ null);
             }
-            objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
