diff --git a/tmp/76320eed-bd76-4a55-811c-cd57e908f77a_buggy.java b/tmp/7cfbda72-c150-4ad0-9ffd-32ba8b34f6cb_fixed.java
index d57736b..24a193a 100644
--- a/tmp/76320eed-bd76-4a55-811c-cd57e908f77a_buggy.java
+++ b/tmp/7cfbda72-c150-4ad0-9ffd-32ba8b34f6cb_fixed.java
@@ -1,39 +1,59 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+          // Check if objType has this property declared. If so, do nothing.
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+            JSType constraintPropType = constraintObj.getPropertyType(prop); // Non-nullable constraint type
+
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+              // Property is missing on objType, infer it as undefined union constraint type.
+              // Use the non-nullable constraint type from constraintObj for the union.
+              JSType typeToInfer =
+                  getNativeType(VOID_TYPE).getLeastSupertype(constraintPropType);
               objType.defineInferredProperty(prop, typeToInfer, null);
+            } else {
+              // Property exists on objType and is inferred.
+              // Check if the existing type is compatible with the full constraint type.
+              JSType existingPropType = objType.getPropertyType(prop);
+              // Get the full constraint type, possibly including |undefined.
+              JSType fullConstraintPropType = constraint.getPropertyType(prop);
+
+              if (existingPropType.isSubtype(fullConstraintPropType)) {
+                // If compatible, potentially widen objType's inferred property
+                // to match the base type from the constraint (constraintPropType is non-nullable).
+                // This handles cases like objType.prop = SPECIFIC_OBJECT being widened
+                // to objType.prop = OBJECT based on the constraint.
+                // It avoids incorrectly changing an incompatible type (e.g., number to string).
+                objType.defineInferredProperty(prop, constraintPropType, null);
+              }
+              // If not compatible, do nothing. Let the type checker catch the error during
+              // the main subtype check.
+            }
           }
         }
       }
     }
   }
\ No newline at end of file
