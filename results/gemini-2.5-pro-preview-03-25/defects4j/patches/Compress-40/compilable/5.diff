diff --git a/tmp/16cf91d4-7d4d-46ba-b556-3d26ff39245c_buggy.java b/tmp/f6676c4e-86b8-4dfd-b55f-27129905e50f_fixed.java
index 7116384..d11f23e 100644
--- a/tmp/16cf91d4-7d4d-46ba-b556-3d26ff39245c_buggy.java
+++ b/tmp/f6676c4e-86b8-4dfd-b55f-27129905e50f_fixed.java
@@ -1,39 +1,80 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        if (count == 0) {
+             return 0L;
+        }
+
+        // Ensure we have enough bits cached to satisfy the request
         while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+            // Read the next byte from the input stream
+            final long nextByte = in.read(); // Returns int (0-255), or -1 for EOF
             if (nextByte < 0) {
-                return nextByte;
+                // If EOF is reached before accumulating enough bits, return -1
+                return -1;
             }
+
+            // Incorporate the bits from the new byte into the cache based on byte order
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                // For Little Endian, new byte's bits are added conceptually at the MSB end.
+                // Implementation: Place bits manually starting at index bitsCachedSize.
+                // This avoids potential data loss from 'nextByte << bitsCachedSize'
+                // if bitsCachedSize is large (>= 57), where the byte's MSBs could be shifted out.
+                for (int i = 0; i < 8; i++) {
+                    final int targetBitIndex = bitsCachedSize + i;
+                    // Only add bits that fit within the 64-bit cache
+                    if (targetBitIndex >= 64) {
+                        break;
                     }
+                    // If the i-th bit of nextByte is set, set the corresponding bit in the cache
+                    if ((nextByte & (1L << i)) != 0) {
+                        bitsCached |= (1L << targetBitIndex);
+                    }
+                }
+                // Increment the logical size of cached bits
                 bitsCachedSize += 8;
+            } else { // BIG_ENDIAN
+                // For Big Endian, new byte's bits are added conceptually at the LSB end.
+                // Implementation: Keep the most recent bits at the MSB end of the 'bitsCached' long.
+                // Shift existing cache content right (unsigned) to discard the oldest byte.
+                bitsCached >>>= 8;
+                // Place the new byte in the most significant 8 bits (bits 63..56).
+                // This avoids the overflow issue of 'bitsCached <<= 8' when bitsCachedSize > 56.
+                bitsCached |= (nextByte << 56);
+                // Increment the logical size of cached bits
+                bitsCachedSize += 8;
+            }
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
+        // Extract the requested number of bits from the cache
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // Extract 'count' LSBs from the cache
             bitsOut = (bitsCached & MASKS[count]);
+            // Remove the extracted bits from the LSB end of the cache (unsigned shift)
             bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        } else { // BIG_ENDIAN
+            // Extract 'count' MSBs from the cache.
+            // The required bits are at the MSB end due to the accumulation logic.
+            // Shift right by (64 - count) to align the top 'count' bits at the LSB end for masking.
+            bitsOut = (bitsCached >>> (64 - count)) & MASKS[count];
+            // Remove the extracted bits from the MSB end of the cache by shifting left.
+            bitsCached <<= count;
         }
+
+        // Update the count of valid bits remaining in the cache
         bitsCachedSize -= count;
+
         return bitsOut;
     }
\ No newline at end of file
