diff --git a/tmp/2dd1ff40-e4c6-40fb-9447-be0d18fcfe4a_buggy.java b/tmp/13669142-8259-4115-a5ac-fc47684cb6b9_fixed.java
index 7116384..9c29ccf 100644
--- a/tmp/2dd1ff40-e4c6-40fb-9447-be0d18fcfe4a_buggy.java
+++ b/tmp/13669142-8259-4115-a5ac-fc47684cb6b9_fixed.java
@@ -1,39 +1,79 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
+     * @throws IllegalArgumentException if count is not positive or exceeds 63
      */
     public long readBits(final int count) throws IOException {
+        // Validate input count
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        // If no bits are requested, return 0
+        if (count == 0) {
+            return 0L;
+        }
+
+        // Ensure enough bits are available in the cache
         while (bitsCachedSize < count) {
+            // Read the next byte from the input stream
             final long nextByte = in.read();
+            // Check for end of stream
             if (nextByte < 0) {
+                // Return -1 if end of stream is reached before reading requested number of bits
                 return nextByte;
             }
+
+            // Incorporate the new byte into the cache based on byte order
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // Little Endian: New byte bits are added starting from the current bit offset (bitsCachedSize).
+                // The cache grows towards the most significant bit (MSB).
+                // Cast nextByte to long *before* shifting. This is crucial when bitsCachedSize >= 32
+                // to prevent the shift operation from being performed on an int, which could lead
+                // to incorrect results due to truncation or sign extension before the bits
+                // are OR'ed into the long bitsCached.
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
+                // Big Endian: New byte bits are added at the least significant bit (LSB) end.
+                // Existing cache bits are shifted left by 8 to make space.
+                // Note: If bitsCachedSize >= 57, this left shift (bitsCached <<= 8)
+                // will lose the most significant bits currently in the cache, as 'long' is 64 bits.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
+            // Increment the number of cached bits
             bitsCachedSize += 8;
         }
+            // By this point, bitsCachedSize >= count
+            // Note: The comment below referring to potential overflow is slightly misplaced,
+            // as the overflow check/handling implicitly happens within the loop logic now.
             // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
+        // Extract the requested 'count' bits from the cache
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // Little Endian: The requested bits are the 'count' least significant bits in the cache.
             bitsOut = (bitsCached & MASKS[count]);
+            // Remove the extracted bits from the cache by shifting right (unsigned).
             bitsCached >>>= count;
         } else {
+            // Big Endian: The requested bits are the 'count' most significant bits currently available
+            // within the potentially 64-bit limited cache.
+            // Shift the cache right so these bits align at the LSB end.
+            // The shift amount is (bitsCachedSize - count).
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            // Note: For BE, the consumed bits are not explicitly cleared from 'bitsCached' by masking.
+            // The subsequent left shifts in the next read cycle effectively handle this.
         }
+
+        // Update the number of valid bits remaining in the cache
         bitsCachedSize -= count;
+
+        // Return the extracted bits
         return bitsOut;
     }
\ No newline at end of file
