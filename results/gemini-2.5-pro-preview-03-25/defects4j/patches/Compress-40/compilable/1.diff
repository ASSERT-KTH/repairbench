diff --git a/tmp/50634b08-6045-4e5e-adf6-d554d0f82988_buggy.java b/tmp/f7f74894-1d0d-459d-8acd-f1a5aad1155b_fixed.java
index 7116384..a2d0859 100644
--- a/tmp/50634b08-6045-4e5e-adf6-d554d0f82988_buggy.java
+++ b/tmp/f7f74894-1d0d-459d-8acd-f1a5aad1155b_fixed.java
@@ -1,39 +1,57 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        // Ensure we have enough bits in the cache
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                // EOF reached before accumulating enough bits
+                return nextByte; // Return -1
             }
+
+            // Treat the byte read as an unsigned long value
+            final long nextByteAsLong = nextByte & 0xffL;
+
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+                // Append bits to the high-order side of the cache
+                bitsCached |= (nextByteAsLong << bitsCachedSize);
+            } else { // BIG_ENDIAN
+                // Shift existing cache bits left, append new byte to low-order side
+                // Note: Potential overflow if bitsCachedSize > 56, losing high bits
                 bitsCached <<= 8;
-                bitsCached |= nextByte;
+                bitsCached |= nextByteAsLong;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+            // By this point, bitsCachedSize >= count
 
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // Extract 'count' low-order bits
                 bitsOut = (bitsCached & MASKS[count]);
+                // Remove extracted bits by right-shifting the cache (unsigned)
                 bitsCached >>>= count;
-            } else {
+            } else { // BIG_ENDIAN
+                // Extract 'count' high-order bits
+                // Shift the desired bits to the low-order positions using signed shift >>
                 bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                // Remove extracted bits by clearing the top 'count' bits from the cache
+                // (Keep the lower 'bitsCachedSize - count' bits)
+                // MASKS[0] is 0, so this works even if bitsCachedSize == count
+                bitsCached &= MASKS[bitsCachedSize - count];
             }
+            // Update the number of valid bits remaining in the cache
             bitsCachedSize -= count;
         return bitsOut;
     }
