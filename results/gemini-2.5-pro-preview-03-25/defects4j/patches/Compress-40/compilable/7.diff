diff --git a/tmp/b1211823-b52b-4cb8-9ade-cadeda6c72b8_buggy.java b/tmp/8861b3b4-c396-4ac1-a0b3-a77dcf4f3a03_fixed.java
index 7116384..43491a2 100644
--- a/tmp/b1211823-b52b-4cb8-9ade-cadeda6c72b8_buggy.java
+++ b/tmp/8861b3b4-c396-4ac1-a0b3-a77dcf4f3a03_fixed.java
@@ -1,39 +1,84 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+            // MAXIMUM_CACHE_SIZE is 63 bits
+            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE + " (" + count + ")");
         }
+        // Optimization: If count is 0, return 0
+        if (count == 0) {
+            return 0L;
+        }
+
         while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+            // Attempt to read the next byte from the input stream.
+            final long nextByte = in.read(); // Reads a byte as an int (0-255), or -1 for EOF. Promoted to long.
+            
+            // Check if EOF was reached.
             if (nextByte < 0) {
-                return nextByte;
+                // We failed to read enough bits to satisfy the request.
+                // Return -1 to indicate EOF or insufficient data.
+                return -1;
             }
+
+            // Incorporate the byte into the cache based on the specified byte order.
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // LITTLE_ENDIAN: New byte's bits are considered more significant.
+                // They are shifted left by the current cache size and ORed.
+                // Example: cache=...c1 c0, byte=B -> new cache = ...B c1 c0
+                // This operation might overflow if (nextByte << bitsCachedSize) exceeds 64 bits,
+                // but Java's << on long handles this by discarding high bits, effectively
+                // calculating the result modulo 2^64, which is correct for the lower 64 bits.
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+            } else { // BIG_ENDIAN
+                // BIG_ENDIAN: New byte's bits are considered less significant.
+                // Existing cache bits are shifted left by 8, and the new byte is ORed in at the LSB position.
+                // Example: cache=c1 c0..., byte=B -> new cache = c1 c0... B
+                // This operation might overflow if bitsCachedSize > 56, causing the most
+                // significant bits of the existing cache to be lost. This is the core bug
+                // for Big Endian overflow cases.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
+            // Increment the count of bits available in the cache.
             bitsCachedSize += 8;
         }
+            // At this point, bitsCachedSize >= count, meaning we have enough bits in the cache.
+            // Note: The comment below seems misplaced from its original context.
             // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
         
         final long bitsOut;
+        // Extract the requested number of bits ('count') from the cache.
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            // Extract 'count' bits from the Least Significant Bit (LSB) end.
+            bitsOut = (bitsCached & MASKS[count]); // MASKS[count] likely provides a mask like (1L << count) - 1.
+            // Remove the extracted bits from the cache by shifting right.
+            bitsCached >>>= count; // Use unsigned right shift (>>>) for correctness.
+        } else { // BIG_ENDIAN
+            // Extract 'count' bits from the Most Significant Bit (MSB) end of the logical bit sequence.
+            // The shift amount determines which bits to take from the top.
+            final int shiftAmount = bitsCachedSize - count;
+            
+            // Use logical right shift (>>>) instead of arithmetic right shift (>>)
+            // to prevent potential sign extension issues if bitsCached were negative.
+            // Note: This change addresses potential sign issues but does NOT fix the
+            // underlying data loss caused by the overflow in the Big Endian update logic
+            // (`bitsCached <<= 8;`). A proper fix requires either preventing the data loss
+            // during update or compensating for it during extraction, which is more complex.
+            // However, using >>> is generally safer for bit manipulation.
+            bitsOut = (bitsCached >>> shiftAmount) & MASKS[count];
         }
+        
+        // Update the number of bits remaining in the cache.
         bitsCachedSize -= count;
+            
         return bitsOut;
     }
\ No newline at end of file
