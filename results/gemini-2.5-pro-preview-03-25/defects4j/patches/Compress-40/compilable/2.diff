diff --git a/tmp/e36c1b78-5e1b-4f1c-b5e3-7c4ffd9150fa_buggy.java b/tmp/f1ef774b-1c44-40b0-9dd9-dd4060cd5056_fixed.java
index 7116384..fe01b43 100644
--- a/tmp/e36c1b78-5e1b-4f1c-b5e3-7c4ffd9150fa_buggy.java
+++ b/tmp/f1ef774b-1c44-40b0-9dd9-dd4060cd5056_fixed.java
@@ -1,39 +1,59 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        // Handle count == 0 early. Although MAXIMUM_CACHE_SIZE is 63, a 0 might be passed.
+        if (count == 0) {
+             return 0L;
+        }
+
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                return nextByte; // Return -1 on EOF
             }
+
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // LE: Add new bits after existing bits. Shift handles overflow by discarding high bits.
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
+                // BE: Shift existing bits left, add new bits at bottom. Shift handles overflow by discarding high bits.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
+            // bitsCachedSize can exceed 64 here, reflecting the conceptual number of bits processed.
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+            // bitsCachedSize >= count
 
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // LE: Take bottom count bits
                 bitsOut = (bitsCached & MASKS[count]);
+                // LE: Remove bottom count bits using unsigned right shift
                 bitsCached >>>= count;
             } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                // BE: Take top count bits.
+                // Shift cache left so the (bitsCachedSize) conceptual bits are aligned with MSB.
+                // Need to handle bitsCachedSize potentially > 64.
+                // The effective shift needs to bring the bit that was originally at position (bitsCachedSize - 1)
+                // to position 63. This requires a left shift by (64 - bitsCachedSize).
+                // Java handles negative shifts by using the lower 6 bits of the shift count for longs.
+                // Then, shift right (unsigned) to bring the top 'count' bits to the LSB positions.
+                bitsOut = (bitsCached << (64 - bitsCachedSize)) >>> (64 - count);
             }
+            // Update cache size. This is essential for the subsequent reads, especially for BE.
             bitsCachedSize -= count;
+
         return bitsOut;
     }
