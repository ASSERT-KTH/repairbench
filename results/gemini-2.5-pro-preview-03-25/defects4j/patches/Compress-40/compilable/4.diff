diff --git a/tmp/761297bd-8a8a-4c99-b9cf-7451c83be84a_buggy.java b/tmp/3fc1c76b-1a82-4dee-9c98-5664eaf27872_fixed.java
index 7116384..35eff11 100644
--- a/tmp/761297bd-8a8a-4c99-b9cf-7451c83be84a_buggy.java
+++ b/tmp/3fc1c76b-1a82-4dee-9c98-5664eaf27872_fixed.java
@@ -1,39 +1,91 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        // Handle easy case of reading 0 bits
+        if (count == 0) {
+             return 0L;
+        }
+
+        // Keep reading bytes from the input stream until we have enough bits in the cache
         while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+            final long nextByte = in.read(); // Reads a byte as int 0-255, or -1 for EOF
             if (nextByte < 0) {
-                return nextByte;
+                // EOF reached. Break loop and check if we have enough bits below.
+                break;
             }
+
+            // Add the byte to the cache based on the specified byte order
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // For Little Endian: Add byte bits to the more significant end of the cache.
+                // Conceptually: [new byte] [existing cache]
+                // Achieved by: bitsCached |= (nextByte << current_cache_size)
+                // Potential issue: If bitsCachedSize >= 57, the left shift (nextByte << bitsCachedSize)
+                // might lose the most significant bits of nextByte due to the 64-bit limit of 'long'.
+                // This fix does not address this potential Little Endian issue, focuses on Big Endian.
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+            } else { // BIG_ENDIAN
+                // For Big Endian: Add byte bits to the least significant end, shifting existing bits left.
+                // Conceptually: [existing cache] [new byte]
+                // Achieved by: bitsCached = (bitsCached << 8) | nextByte
+                if (bitsCachedSize <= 56) {
+                    // If the cache size is 56 bits or less, we can safely shift left by 8
+                    // without losing any existing cached bits, and then OR the new byte.
                     bitsCached <<= 8;
                     bitsCached |= nextByte;
+                } else {
+                    // Handle cache overflow for Big Endian when bitsCachedSize is 57 to 63.
+                    // Shifting 'bitsCached' left by 8 would lose the most significant (bitsCachedSize - 56) bits.
+                    // To prevent this loss (addressing COMPRESS-363):
+                    int space = 64 - bitsCachedSize; // Calculate available space at the LSB end (1 to 7 bits).
+                    // Shift existing bits left only by the available space, preserving the high bits.
+                    bitsCached <<= space;
+                    // Add the most significant 'space' bits of the new byte into the vacated space.
+                    // Example: if space=5, add bits 7..3 of nextByte via (nextByte >> 3).
+                    bitsCached |= (nextByte >> (8 - space));
+                    // Note: The lower (8 - space) bits of 'nextByte' are deliberately discarded here
+                    // because they cannot fit into the 64-bit 'bitsCached' without causing the loss
+                    // of the most significant bits of the original cache content.
                 }
+            }
+            // Increment the logical size of the cache, reflecting 8 bits consumed from input stream.
             bitsCachedSize += 8;
+        } // End while loop for filling cache
+
+        // After trying to fill the cache, check if we actually accumulated enough bits.
+        if (bitsCachedSize < count) {
+            return -1; // Not enough bits available, likely due to EOF.
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
+        // Extract the required 'count' bits from the cache.
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // Extract 'count' bits from the least significant end.
             bitsOut = (bitsCached & MASKS[count]);
+            // Remove extracted bits from the cache by shifting right. Use unsigned shift '>>>'.
             bitsCached >>>= count;
-            } else {
+        } else { // BIG_ENDIAN
+            // Extract 'count' bits from the most significant end of the logical cache sequence.
+            // Shift right based on the logical size to align the desired bits at the LSB end.
+            // Maintain the original signed shift '>>' as it correctly handles sign extension if needed,
+            // although the subsequent mask usually makes >>> and >> equivalent here.
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            // For Big Endian, removing bits is done implicitly by reducing bitsCachedSize.
+            // The actual bits remain in 'bitsCached' but are ignored by future operations.
         }
+
+        // Update the cache size by subtracting the number of bits extracted.
         bitsCachedSize -= count;
+
         return bitsOut;
     }
\ No newline at end of file
