diff --git a/tmp/66ead0e5-911f-4472-be7d-978c93f31a95_buggy.java b/tmp/36f3d8d7-fcb3-476f-86dd-7ea857f7971b_fixed.java
index 7116384..c97868a 100644
--- a/tmp/66ead0e5-911f-4472-be7d-978c93f31a95_buggy.java
+++ b/tmp/36f3d8d7-fcb3-476f-86dd-7ea857f7971b_fixed.java
@@ -1,39 +1,60 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        // Ensure we have enough bits in the cache
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                // If EOF is reached, return -1. Note: The cache might contain
+                // some bits, but not enough to fulfill the request.
+                return -1L;
             }
+
+            // Incorporate the byte into the cache based on byte order
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // Add new byte's bits to the more significant end of the cache
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+            } else { // BIG_ENDIAN
+                // Shift cache left and add new byte's bits to the less significant end
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
-            bitsCachedSize += 8;
+            bitsCachedSize += 8; // Increment the number of bits available in the cache
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+        // bitsCachedSize >= count
 
+        // Extract the required number of bits
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // For Little Endian, the first bits read are the least significant bits.
+            // Extract the 'count' least significant bits from the cache.
             bitsOut = (bitsCached & MASKS[count]);
+            // Remove the extracted bits from the cache using logical right shift.
             bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        } else { // BIG_ENDIAN
+            // For Big Endian, the first bits read are the most significant bits.
+            // Extract the 'count' most significant bits from the relevant portion of the cache.
+            // Use logical right shift (>>>) to avoid sign extension issues if the cache value became negative
+            // due to overflow during accumulation, although the result should fit in a positive long.
+            // The shift amount positions the most significant 'count' bits at the LSB end.
+            bitsOut = (bitsCached >>> (bitsCachedSize - count)) & MASKS[count];
+            // For Big Endian, the cache implicitly keeps the most recent bits due to the left shift
+            // accumulation; consumed MSBs don't need explicit removal beyond updating the size.
         }
+
+        // Update the number of valid bits remaining in the cache
         bitsCachedSize -= count;
+
         return bitsOut;
     }
