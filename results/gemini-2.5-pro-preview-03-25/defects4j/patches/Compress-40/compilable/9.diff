diff --git a/tmp/3f2b594b-881b-4f88-9a1e-44ec3b51f018_buggy.java b/tmp/b06d8b00-a972-4fda-9e3f-a1a3d4e8911f_fixed.java
index 7116384..0838c36 100644
--- a/tmp/3f2b594b-881b-4f88-9a1e-44ec3b51f018_buggy.java
+++ b/tmp/b06d8b00-a972-4fda-9e3f-a1a3d4e8911f_fixed.java
@@ -1,39 +1,67 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        // Handle count=0 edge case cleanly
+        if (count == 0) {
+            return 0L;
+        }
+
+        // Accumulate bits until we have enough in the cache
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
+            // Check for EOF *before* modifying cache state
             if (nextByte < 0) {
-                return nextByte;
+                return nextByte; // Return -1 indicating EOF
             }
+
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // Place the new byte's bits after the existing bits in the cache.
+                // Note: If bitsCachedSize is >= 64, the shift amount (bitsCachedSize % 64)
+                // will be incorrect for placing bits beyond the 64th position.
+                // However, since count <= 63, we only extract from the lower 63 bits,
+                // so this overflow might not affect the result *if* enough valid bits
+                // were already cached correctly in the lower positions.
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+            } else { // BIG_ENDIAN
+                // Shift cache left, add new byte at the LSB side.
+                // Note: If bitsCachedSize > 56, bitsCached <<= 8 will lose the
+                // most significant (bitsCachedSize - 56) bits from the cache.
+                // This is a potential data loss for reads requiring > 56 bits.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
-            bitsCachedSize += 8;
+            bitsCachedSize += 8; // Increment the number of available bits
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+            // At this point, bitsCachedSize >= count
 
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // Extract the lowest 'count' bits.
             bitsOut = (bitsCached & MASKS[count]);
+            // Remove the extracted bits by shifting right (unsigned).
             bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        } else { // BIG_ENDIAN
+            // Extract the most significant 'count' bits from the available 'bitsCachedSize' bits.
+            // Shift right (unsigned) to align the desired bits to the LSB side, then mask.
+            bitsOut = (bitsCached >>> (bitsCachedSize - count)) & MASKS[count];
+            // FIX: Remove the extracted bits from the cache.
+            // The remaining bits are the lower (bitsCachedSize - count) bits. Mask them.
+            bitsCached &= MASKS[bitsCachedSize - count];
         }
+
+        // Update the count of bits remaining in the cache.
         bitsCachedSize -= count;
+
         return bitsOut;
     }
\ No newline at end of file
