diff --git a/tmp/f29515b4-6276-41a8-b9d7-943f695f6786_buggy.java b/tmp/0fa4fb8f-5274-45c1-99b5-a2e7ca537945_fixed.java
index 7116384..3399f51 100644
--- a/tmp/f29515b4-6276-41a8-b9d7-943f695f6786_buggy.java
+++ b/tmp/0fa4fb8f-5274-45c1-99b5-a2e7ca537945_fixed.java
@@ -1,39 +1,76 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        // Optimization: Handle count=0 early.
+        if (count == 0) {
+             return 0L;
+        }
+
+        // Fill the cache with enough bits.
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                // EOF reached. If we have enough bits accumulated, proceed. Otherwise, signal EOF.
+                 if (bitsCachedSize >= count) {
+                     break;
                  }
+                 return -1;
+            }
+
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // Place the new byte at the MSB side of the conceptual bit cache.
+                // bitsCached |= (nextByte << bitsCachedSize);
+                // If nextByte << bitsCachedSize would overflow, the high bits of nextByte are lost.
+                // This correctly reflects that the cache holds the LSB side of the stream.
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
+                // Place the new byte at the LSB side of the conceptual bit cache.
+                // bitsCached <<= 8;
+                // bitsCached |= nextByte;
+                // Shifting bitsCached left by 8 might overflow, losing the MSBs (oldest bits).
+                // This correctly reflects that the cache holds the LSB side (most recent bits) of the stream.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+
+        // At this point, we should have bitsCachedSize >= count, unless EOF was hit prematurely.
+        // The case where EOF is hit but bitsCachedSize >= count is handled by the loop break.
+        // The case where EOF is hit and bitsCachedSize < count is handled by return -1 in the loop.
 
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // Extract the 'count' least significant bits.
             bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
+            // Remove the extracted bits from the LSB side of the cache.
+            bitsCached >>>= count; // Use unsigned shift
+            // Update the number of bits remaining in the cache.
             bitsCachedSize -= count;
+        } else { // BIG_ENDIAN
+            // Calculate how many bits are in the cache beyond the desired 'count'.
+            // These are the LSBs in 'bitsCached' that should remain after extraction.
+            final int shift = bitsCachedSize - count;
+            // Extract the 'count' most significant bits from the cache.
+            // Shift 'bitsCached' right arithmetic ('>>') so the desired MSBs align to the right.
+            // Mask with MASKS[count] to isolate the 'count' bits.
+            bitsOut = (bitsCached >> shift) & MASKS[count];
+            // Update the cache: Remove the extracted MSBs.
+            // Keep only the 'shift' LSBs which were not extracted.
+            bitsCached &= MASKS[shift];
+            // Update the number of bits remaining in the cache.
+            bitsCachedSize = shift;
+        }
         return bitsOut;
     }
\ No newline at end of file
