diff --git a/tmp/06993c22-2ab0-41d2-a142-cdb7dc82e0b9_buggy.java b/tmp/cb006612-951f-4012-bc73-2aa27a763b74_fixed.java
index 7116384..fd70a38 100644
--- a/tmp/06993c22-2ab0-41d2-a142-cdb7dc82e0b9_buggy.java
+++ b/tmp/cb006612-951f-4012-bc73-2aa27a763b74_fixed.java
@@ -1,39 +1,114 @@
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.ByteOrder;
+
+// Assuming the following context within a class:
+// private final InputStream in;
+// private final ByteOrder byteOrder;
+// private long bitsCached = 0;
+// private int bitsCachedSize = 0;
+// private static final int MAXIMUM_CACHE_SIZE = 63;
+// // MASKS[i] = (1L << i) - 1 for i from 0 to MAXIMUM_CACHE_SIZE
+// private static final long[] MASKS = /* initialized somewhere */;
+
+
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
+        // Validate input count
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        // Handle trivial case: read 0 bits
+        if (count == 0) {
+            return 0L;
+        }
+
+        // Ensure enough bits are cached, reading bytes as needed
         while (bitsCachedSize < count) {
+            // Try to read the next byte
             final long nextByte = in.read();
+            // Check for end of stream
             if (nextByte < 0) {
-                return nextByte;
+                 // If EOF is hit, and we still haven't cached enough bits, return -1.
+                 // If we have enough bits cached already (bitsCachedSize >= count),
+                 // we can proceed to extract them outside the loop.
+                 if (bitsCachedSize < count) {
+                    return -1L; // Indicate EOF before reading required bits
                  }
+                 break; // EOF hit, but we have enough bits cached. Exit loop.
+            }
+
+            // Promote the byte to a long, treating it as unsigned
+            final long nextByteAsLong = nextByte & 0xffL;
+
+            // Calculate remaining space in the 64-bit cache (long size)
+            final int space = 64 - bitsCachedSize;
+
+            // If cache is full, we cannot add more bits. Break the loop.
+            // This condition should ideally not be strictly necessary if count <= 63,
+            // but acts as a safeguard against unexpected states.
+            if (space <= 0) {
+                 break;
+            }
+
+            // Determine how many bits from the current byte can actually be added
+            // without exceeding the 64-bit cache capacity.
+            final int bitsToAddCount = Math.min(8, space);
+
+            // Add bits based on byte order, carefully handling potential overflow
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                // Get the lowest 'bitsToAddCount' bits from the byte
+                // (these are the bits that will fit into the remaining space)
+                final long bitsToAdd = nextByteAsLong & MASKS[bitsToAddCount];
+                // Shift them into position starting at the current bitsCachedSize
+                bitsCached |= (bitsToAdd << bitsCachedSize);
+            } else { // BIG_ENDIAN
+                // Shift the existing cache left by 'bitsToAddCount' to make space
+                // at the lower end. This prevents losing high bits if bitsCachedSize is large.
+                bitsCached <<= bitsToAddCount;
+                // Get the highest 'bitsToAddCount' bits from the new byte
+                final long bitsToAdd = nextByteAsLong >> (8 - bitsToAddCount);
+                // OR these bits into the space created at the lower end
+                bitsCached |= bitsToAdd;
             }
-            bitsCachedSize += 8;
+            // Update the cache size, reflecting the added bits
+            bitsCachedSize += bitsToAddCount;
+        } // End while loop: bitsCachedSize >= count OR EOF reached OR cache full
+
+        // After loop, check if we acquired enough bits for the request
+        if (bitsCachedSize < count) {
+             // This can happen if EOF was hit earlier or the cache filled up
+             // before 'count' bits were accumulated.
+             return -1L;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
+        // Extract the requested number of bits
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // Get the lowest 'count' bits from the cache
             bitsOut = (bitsCached & MASKS[count]);
+            // Remove the extracted bits from the cache using unsigned right shift
             bitsCached >>>= count;
-            } else {
+        } else { // BIG_ENDIAN
+            // Get the highest 'count' bits from the top 'bitsCachedSize' bits in the cache
+            // Shift right so the desired bits are at the lowest positions, then mask
+            // bitsCachedSize is guaranteed to be >= count here.
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            // Masking bitsCached after shift is not necessary, the size update handles it.
+            // High bits that were shifted out are implicitly discarded.
         }
+
+        // Update the cache size by subtracting the number of bits extracted
         bitsCachedSize -= count;
+
         return bitsOut;
     }
\ No newline at end of file
