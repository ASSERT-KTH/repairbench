diff --git a/tmp/6d110574-cbbb-4601-92c1-4d1887cba84d_buggy.java b/tmp/588ba827-44cd-4fe8-b26d-874b5b51bd2f_fixed.java
index e1fc51f..40f8b36 100644
--- a/tmp/6d110574-cbbb-4601-92c1-4d1887cba84d_buggy.java
+++ b/tmp/588ba827-44cd-4fe8-b26d-874b5b51bd2f_fixed.java
@@ -1,9 +1,31 @@
+import java.lang.reflect.Method;
+import java.util.Arrays;
+// Assuming Invocation is a class that has a getMethod() method returning java.lang.reflect.Method
+// import org.mockito.invocation.Invocation; 
+
+// ... other imports may be necessary depending on the context of Invocation ...
+
     public boolean hasSameMethod(Invocation candidate) {
         // not using method.equals() for 1 good reason:
         // sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Check for nulls, though unlikely with valid Invocations
+        if (m1 == null || m2 == null) {
+            return m1 == m2;
+        }
+
+        // Optimization: check for object identity and then strict equality first.
+        // If Method.equals() returns true, they are definitely the same.
+        if (m1 == m2 || m1.equals(m2)) {
+            return true;
+        }
+
+        // If not strictly equal, compare methods based on name and parameter types.
+        // This looser comparison handles bridge methods and generic type erasure issues,
+        // where the Method objects might differ in return type or declaring class
+        // but represent the same logical method call.
+        return m1.getName().equals(m2.getName())
+               && Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes());
     }
\ No newline at end of file
