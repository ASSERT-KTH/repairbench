diff --git a/tmp/dd98c703-e4a5-48a1-8bb3-916a01f151a0_buggy.java b/tmp/f843663a-0280-44a0-8816-9d4bd15175fc_fixed.java
index e1fc51f..67ad5fd 100644
--- a/tmp/dd98c703-e4a5-48a1-8bb3-916a01f151a0_buggy.java
+++ b/tmp/f843663a-0280-44a0-8816-9d4bd15175fc_fixed.java
@@ -1,9 +1,53 @@
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import org.mockito.invocation.Invocation; // Assuming Invocation comes from here or a similar package
+
+// Assume this method is part of a class that has access to an 'invocation' field/variable of type Invocation.
+// For example:
+// class SomeMatcher {
+//     private final Invocation invocation;
+//     public SomeMatcher(Invocation invocation) { this.invocation = invocation; }
+//     ...
+// }
+
     public boolean hasSameMethod(Invocation candidate) {
         // not using method.equals() for 1 good reason:
         // sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+        // The original code below contradicts this comment and was the source of the bug.
+        // return m1.equals(m2); // Original buggy line
+
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Shortcut for identical Method objects
+        if (m1 == m2) {
+            return true;
+        }
+
+        // Standard equality check (based on declaring class, name, parameter types)
+        if (m1.equals(m2)) {
+            return true;
+        }
+
+        // Handle bridge methods / generic forwarding:
+        // Check if methods have the same name and same erased parameter types.
+        // Method.getParameterTypes() returns erased types, which is suitable for comparison
+        // across potential bridge methods generated due to type erasure.
+        if (!m1.getName().equals(m2.getName())
+                || !Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {
+            // If names or erased parameter types differ, they cannot be the same method
+            // in the context of bridge methods/overrides.
+            return false;
+        }
+
+        // If names and erased params match, but m1.equals(m2) is false,
+        // it might be due to bridge methods or methods declared in different
+        // classes within an inheritance hierarchy (e.g., interface method vs implementation method).
+        // Check if the declaring classes are related (one assignable from the other).
+        // This considers one method potentially overriding the other, possibly via a bridge method.
+        Class<?> declaringClass1 = m1.getDeclaringClass();
+        Class<?> declaringClass2 = m2.getDeclaringClass();
+
+        return declaringClass1.isAssignableFrom(declaringClass2)
+                || declaringClass2.isAssignableFrom(declaringClass1);
     }
\ No newline at end of file
