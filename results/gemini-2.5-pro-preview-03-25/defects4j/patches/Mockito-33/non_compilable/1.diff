diff --git a/tmp/5df70521-708a-4c61-bc91-e2634bd8cf28_buggy.java b/tmp/ea11a58e-74d2-408c-839c-ebcfd97d0b7e_fixed.java
index e1fc51f..2db1961 100644
--- a/tmp/5df70521-708a-4c61-bc91-e2634bd8cf28_buggy.java
+++ b/tmp/ea11a58e-74d2-408c-839c-ebcfd97d0b7e_fixed.java
@@ -1,9 +1,29 @@
+import org.mockito.internal.invocation.Invocation;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+
+// ... other imports if necessary ...
+
     public boolean hasSameMethod(Invocation candidate) {        
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Quick check for identity
+        if (m1 == m2) {
+            return true;
+        }
+
+        // Check names are the same
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // Check parameter types are the same
+        // Method.equals() also checks return type, but we don't want that
+        // because bridge methods might have different return types (e.g., Object vs specific type).
+        // We also don't want to check the declaring class, which is the main reason
+        // Method.equals() fails in the presence of bridge methods.
+        return Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes());
     }
\ No newline at end of file
