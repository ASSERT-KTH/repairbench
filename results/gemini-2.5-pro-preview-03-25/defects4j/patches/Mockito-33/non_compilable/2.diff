diff --git a/tmp/fac16536-8075-453f-a1a8-c18da5d2e833_buggy.java b/tmp/048b7c89-6d61-40ce-8ada-cfacd8d1f804_fixed.java
index e1fc51f..974a834 100644
--- a/tmp/fac16536-8075-453f-a1a8-c18da5d2e833_buggy.java
+++ b/tmp/048b7c89-6d61-40ce-8ada-cfacd8d1f804_fixed.java
@@ -1,9 +1,39 @@
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import org.mockito.invocation.Invocation;
+
+// Assume the class containing this method has access to 'invocation' field/variable of type Invocation
+// Also assume Invocation class has getMethod() returning java.lang.reflect.Method
+
+public class FixedClass { // Replace FixedClass with the actual class name
+
+    private Invocation invocation; // Assuming this field exists from the context
+
     public boolean hasSameMethod(Invocation candidate) {
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        /* Avoid unnecessary cloning - This comment seems unrelated to the logic below */
+
+        // Fix: Implement robust comparison considering bridge methods as hinted by the comment
+        if (m1 == null && m2 == null) {
+            return true;
+        } else if (m1 == null || m2 == null) {
+            return false; // One is null, the other is not
+        }
+
+        // Check standard equality first (fast path and handles identical methods)
+        if (m1.equals(m2)) {
+            return true;
+        }
+
+        // Check for potential bridge methods or overriding methods with same signature
+        // Compare name and parameter types
+        // Note: Parameter types comparison relies on erasure, which is usually
+        // what's needed for matching at runtime due to type erasure in Java generics.
+        return m1.getName().equals(m2.getName())
+                && Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes());
+    }
 }
\ No newline at end of file
