diff --git a/tmp/38636fc7-390e-4510-9bb8-a507be414e24_buggy.java b/tmp/727d4f5e-0d4d-4f40-a015-24ce8461d867_fixed.java
index e1fc51f..b463e53 100644
--- a/tmp/38636fc7-390e-4510-9bb8-a507be414e24_buggy.java
+++ b/tmp/727d4f5e-0d4d-4f40-a015-24ce8461d867_fixed.java
@@ -1,9 +1,47 @@
+import java.lang.reflect.Method;
+import org.mockito.invocation.Invocation; // Assuming this import exists based on the input type
+
+// Inside the class that contains the hasSameMethod function.
+// Assuming 'invocation' is a field or accessible variable representing the base invocation (e.g., from stubbing or verification).
+
+    /**
+     * Checks if the candidate invocation has the same *logical* method as this invocation.
+     * This comparison handles situations involving bridge methods and generics, where
+     * simple {@code Method.equals()} might fail because the Method objects could differ
+     * (e.g., one generic, one bridge; one from interface, one from implementation).
+     * Two methods are considered the same if they share the same name and parameter count.
+     *
+     * @param candidate The candidate invocation to compare against.
+     * @return {@code true} if the methods are considered logically the same, {@code false} otherwise.
+     */
     public boolean hasSameMethod(Invocation candidate) {
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // 1. Check for identity or strict equality (fast path).
+        // Method.equals() compares declaring class, name, and parameter types.
+        if (m1 == m2 || m1.equals(m2)) {
+            return true;
+        }
+
+        // 2. Check if names match. If not, they can't be the same logical method.
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // 3. Check if parameter counts match. If counts differ, they represent different methods (overloads).
+        // We don't compare parameter types directly using Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())
+        // because bridge methods might have different (erased) parameter types than the method they bridge to,
+        // or a method resolved via an interface might have different generic types than the implementation.
+        // Comparing only name and parameter count handles these cases. Differences between overloads
+        // with the same name and parameter count (if possible, e.g., varargs vs array) are rare,
+        // and argument matchers should further distinguish invocations.
+        if (m1.getParameterCount() != m2.getParameterCount()) {
+            return false;
+        }
+
+        // 4. If names and parameter counts match, consider them the same logical method.
+        // This addresses the issue with bridge methods and generic type erasure highlighted
+        // in the original comment and failing tests.
+        return true;
     }
\ No newline at end of file
