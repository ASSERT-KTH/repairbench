diff --git a/tmp/cb29bbca-39c7-4787-a462-d95a0b4aa78b_buggy.java b/tmp/5b89c52f-b5a7-49ef-be8a-1d1866e78804_fixed.java
index e1fc51f..c614546 100644
--- a/tmp/cb29bbca-39c7-4787-a462-d95a0b4aa78b_buggy.java
+++ b/tmp/5b89c52f-b5a7-49ef-be8a-1d1866e78804_fixed.java
@@ -1,9 +1,38 @@
     public boolean hasSameMethod(Invocation candidate) {
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Check identity for performance
+        if (m1 == m2) {
+            return true;
+        }
+
+        // Method.equals() is too strict as it compares return types and declaring classes.
+        // We need to match methods based on name and parameter types only (signature)
+        // to account for bridge methods and covariant return types.
+
+        // Check method names
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // Check parameter count first for quick check
+        if (m1.getParameterCount() != m2.getParameterCount()) {
+            return false;
+        }
+
+        // Check parameter types
+        // Need to compare using Arrays.equals as getParameterTypes returns a new array.
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+        if (!java.util.Arrays.equals(params1, params2)) {
+            return false;
+        }
+
+        // Methods have the same name and parameter types, consider them equivalent
+        // for the purpose of matching invocations, even if return types or
+        // declaring classes differ (e.g., due to bridge methods or covariant returns).
+        return true;
     }
\ No newline at end of file
