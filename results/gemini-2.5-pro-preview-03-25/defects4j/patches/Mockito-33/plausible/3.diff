diff --git a/tmp/c9a80ffc-14cf-4153-b5fc-76dd42754266_buggy.java b/tmp/86531086-bd3a-4b3c-bc50-2518a9f744b0_fixed.java
index e1fc51f..118a476 100644
--- a/tmp/c9a80ffc-14cf-4153-b5fc-76dd42754266_buggy.java
+++ b/tmp/86531086-bd3a-4b3c-bc50-2518a9f744b0_fixed.java
@@ -1,9 +1,37 @@
     public boolean hasSameMethod(Invocation candidate) {
         // not using method.equals() for 1 good reason:
         // sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Check for direct equality first (performance optimization)
+        if (m1.equals(m2)) {
+            return true;
+        }
+
+        // Bridge methods have the same name and parameter types (after erasure)
+        // but potentially different declaring class or return type.
+        // We need to compare the methods based on their signature relevant for invocation matching.
+
+        // Compare method names
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // Compare parameter types (erased types)
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+        if (params1.length != params2.length) {
+            return false;
+        }
+        for (int i = 0; i < params1.length; i++) {
+            if (!params1[i].equals(params2[i])) {
+                return false;
+            }
+        }
+
+        // If name and parameter types match, consider them the same for mocking purposes.
+        // This handles scenarios with bridge methods where Method.equals() would return false
+        // due to differing declaring classes or return types (due to covariance).
+        return true;
     }
\ No newline at end of file
