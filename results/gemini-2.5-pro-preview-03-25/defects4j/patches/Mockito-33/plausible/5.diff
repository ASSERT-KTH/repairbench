diff --git a/tmp/17f339c2-d26e-45da-9939-f641a3010feb_buggy.java b/tmp/e8749e89-c65f-45c6-9fbc-62201a9a2713_fixed.java
index e1fc51f..2bba3e9 100644
--- a/tmp/17f339c2-d26e-45da-9939-f641a3010feb_buggy.java
+++ b/tmp/e8749e89-c65f-45c6-9fbc-62201a9a2713_fixed.java
@@ -1,9 +1,30 @@
     public boolean hasSameMethod(Invocation candidate) {        
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Check for identity or standard equality first (optimization)
+        // Issue #176: Mockito cannot handle parameterised return types for non-generic interface methods
+        // This handles the case where the method objects are actually the same or equal.
+        if (m1 == m2 || m1.equals(m2)) {
+            return true;
+        }
+
+        // Robust comparison for bridge methods: check name and parameter types.
+        // This addresses the issue where Method.equals() returns false due to bridge methods
+        // generated by the compiler for generic types, even though the methods are semantically equivalent
+        // from the user's perspective.
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+        if (!java.util.Arrays.equals(params1, params2)) {
+            return false;
+        }
+        
+        // If name and parameters match, they represent the same method call signature for mocking purposes.
+        return true;
     }
\ No newline at end of file
