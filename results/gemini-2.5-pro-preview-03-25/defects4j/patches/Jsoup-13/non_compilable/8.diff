diff --git a/tmp/d7b7903a-a628-435a-8441-45b68126a56e_buggy.java b/tmp/9b5be940-1a5f-4857-8487-5b653ec2714d_fixed.java
index a7cb64f..dbdeb24 100644
--- a/tmp/d7b7903a-a628-435a-8441-45b68126a56e_buggy.java
+++ b/tmp/9b5be940-1a5f-4857-8487-5b653ec2714d_fixed.java
@@ -1,10 +1,33 @@
+import org.jsoup.internal.StringUtil;
+import org.jsoup.internal.Validate;
+import org.jsoup.nodes.Attributes; // Assuming Attributes is accessible
+import org.jsoup.nodes.Node; // Assuming Node is accessible and defines absUrlKeyPrefix
+
+// Imports added for context, assume they exist in the original file.
+// The following is the corrected function:
+
     /**
      * Test if this element has an attribute.
      * @param attributeKey The attribute key to check.
-     * @return true if the attribute exists, false if not.
+     * @return true if the attribute exists, false if not. Case-insensitive.
      */
     public boolean hasAttr(String attributeKey) {
         Validate.notNull(attributeKey);
 
-        return attributes.hasKey(attributeKey);
+        // Check for the 'abs:' prefix first, as attr() handles this special case
+        if (attributeKey.startsWith(Node.absUrlKeyPrefix)) {
+            String key = attributeKey.substring(Node.absUrlKeyPrefix.length());
+            // Check if the underlying attribute exists (case-insensitively) and has a non-empty absolute URL
+            // The key must also be valid (e.g. not just "abs:")
+            if (key.length() > 0 && attributes.hasKeyIgnoreCase(key) && !absUrl(key).isEmpty()) {
+                return true;
+            }
+            // if attributeKey starts with abs:, but the conditions above are not met,
+            // it means the attribute, when resolved absolutely, is not present or empty.
+            // We should return false, not fall through to check for a literal "abs:key" attribute.
+            return false;
+        } else {
+            // For standard attributes, check existence case-insensitively for consistency with attr() and HTML.
+            return attributes.hasKeyIgnoreCase(attributeKey);
+        }
     }
