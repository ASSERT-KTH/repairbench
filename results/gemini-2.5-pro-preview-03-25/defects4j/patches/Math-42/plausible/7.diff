diff --git a/tmp/2d6e0fac-6f6a-4b8a-8e15-fb93d7d55c30_buggy.java b/tmp/a39ae5b6-8e44-42a3-9afc-d60796b7922d_fixed.java
index efa499e..311be62 100644
--- a/tmp/2d6e0fac-6f6a-4b8a-8e15-fb93d7d55c30_buggy.java
+++ b/tmp/a39ae5b6-8e44-42a3-9afc-d60796b7922d_fixed.java
@@ -1,35 +1,49 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+      // find the column corresponding to the negative variable marker
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+      Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;
+      double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
+
+      // Assume objective function is in row 0
+      final int objectiveFunctionRowIndex = 0; 
+
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
-            coefficients[i] = 0;
+            coefficients[i] = 0; // Variable not in tableau (e.g., removed)
             continue;
           }
+
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+          double value = 0; // Default value is 0 (non-basic variable)
+
+          // Check if the variable is basic in a *constraint* row (not objective row)
+          // and if that row hasn't been claimed by another basic variable yet.
+          // A variable should not be basic in the objective function row (row 0)
+          // in the context of determining the solution vector.
+          if (basicRow != null &&
+              basicRow != objectiveFunctionRowIndex && // Exclude objective function row
+              !basicRows.contains(basicRow)) {
+
+              value = getEntry(basicRow, getRhsOffset());
+              basicRows.add(basicRow); // Mark this row as used
           }
+
+          // For unrestricted variables (restrictToNonNegative = false), 
+          // subtract the 'mostNegative' offset value derived from the artificial variable.
+          if (!restrictToNonNegative) {
+              value -= mostNegative;
+          }
+
+          coefficients[i] = value;
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
