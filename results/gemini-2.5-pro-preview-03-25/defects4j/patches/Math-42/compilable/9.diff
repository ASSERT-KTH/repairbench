diff --git a/tmp/a6ce68ff-aaee-4dfa-80e1-9ff92c4d2155_buggy.java b/tmp/2cf58536-de35-4c72-a5ff-6e0595cf0e72_fixed.java
index efa499e..9569942 100644
--- a/tmp/a6ce68ff-aaee-4dfa-80e1-9ff92c4d2155_buggy.java
+++ b/tmp/2cf58536-de35-4c72-a5ff-6e0595cf0e72_fixed.java
@@ -1,35 +1,46 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+      // Determine the value of the artificial variable used for negative values, if any.
+      // This is needed when restrictToNonNegative is false.
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+      // The check should be >= 0, as column index 0 is valid. Original check was > 0.
+      Integer negativeVarBasicRow = (negativeVarColumn >= 0) ? getBasicRow(negativeVarColumn) : null;
+      // Get the value of this artificial variable from the RHS if it's basic.
+      double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+      // Initialize coefficients array for the original decision variables.
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
+      // Iterate through each original decision variable (x0, x1, ...).
       for (int i = 0; i < coefficients.length; i++) {
+          // Find the column index in the tableau corresponding to the variable "xi".
           int colIndex = columnLabels.indexOf("x" + i);
+
           if (colIndex < 0) {
+            // Variable "xi" is not present in the tableau (e.g., eliminated or constant).
+            // Its value in the solution is 0 (before potential adjustment).
             coefficients[i] = 0;
-            continue;
-          }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
           } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              // Find the row index where this variable is basic. Returns null if non-basic.
+              Integer basicRow = getBasicRow(colIndex);
+
+              // If the variable is basic (basicRow is not null), its value is the
+              // entry in the RHS column of its basic row.
+              // If the variable is non-basic (basicRow is null), its value is 0.
+              coefficients[i] = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset());
           }
+
+          // If the problem allows variables to be negative (restrictToNonNegative is false),
+          // adjust the coefficient. This accounts for the variable transformation used
+          // to handle potentially negative variables (e.g., xi = xi' - x_neg), where
+          // coefficients[i] currently holds xi' and mostNegative holds the value of x_neg.
+          if (!restrictToNonNegative) {
+              coefficients[i] -= mostNegative;
           }
+      }
+      // Return the calculated solution point (coefficients) and the objective function value at that point.
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
