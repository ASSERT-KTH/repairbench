diff --git a/tmp/0ae96681-0eb0-4d56-9f2c-8e4396caf9dd_buggy.java b/tmp/369a23a8-d749-42b8-87b4-f99126ff878a_fixed.java
index efa499e..a54a87b 100644
--- a/tmp/0ae96681-0eb0-4d56-9f2c-8e4396caf9dd_buggy.java
+++ b/tmp/369a23a8-d749-42b8-87b4-f99126ff878a_fixed.java
@@ -1,35 +1,48 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+      // If artificial variables are used, find the value of the negative variable marker
+      // For unrestricted variables N = max(x_i^-)
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+      Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;
+      double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+      // Values of the original decision variables
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
+              // Variable not found in the tableau - assume 0.
+              // This might happen if the variable was fixed or removed during preprocessing.
               coefficients[i] = 0;
               continue;
           }
+
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          if (basicRow != null) {
+              // Variable is basic - its value is the RHS of the corresponding row
+              // Check if the basic row corresponds to the objective function row (should not happen for decision variables)
+              // or another special row. In those cases, the variable value might effectively be 0.
+              // However, the most straightforward interpretation is reading the RHS value.
+              coefficients[i] = getEntry(basicRow, getRhsOffset());
           } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              // Variable is non-basic - its value is 0
+              coefficients[i] = 0;
+          }
+
+          // Adjust for unrestricted variables if necessary.
+          // If the variable is modeled as x = x' - N, where N = mostNegative,
+          // the value read above is for x'. Subtract N to get x.
+          if (!restrictToNonNegative) {
+               // Safety check: Ensure the value doesn't become unnecessarily negative
+               // if the variable was non-basic (value 0) but mostNegative is positive.
+               // This depends on the exact modeling of unrestricted variables.
+               // Assuming the direct subtraction is the intended logic based on the original code.
+               coefficients[i] -= mostNegative;
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
