diff --git a/tmp/cc262f7f-5db5-4f8c-83d1-54aeb4a03316_buggy.java b/tmp/ebf12d11-5495-4b44-94d0-30f7e032e5c0_fixed.java
index efa499e..dc67843 100644
--- a/tmp/cc262f7f-5db5-4f8c-83d1-54aeb4a03316_buggy.java
+++ b/tmp/ebf12d11-5495-4b44-94d0-30f7e032e5c0_fixed.java
@@ -1,35 +1,42 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+      // Determine the offset for handling non-negative restrictions
+      // If restrictToNonNegative is false, variables are expressed as x = x+ - x-,
+      // and 'mostNegative' represents the value of x- which needs to be subtracted.
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+      Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+      final double valueOffset = restrictToNonNegative ? 0 : mostNegative;
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+      // Initialize coefficients array for original decision variables
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
+      
+      // Iterate through each original decision variable to find its value
       for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
+          String label = "x" + i;
+          int colIndex = columnLabels.indexOf(label);
+          
           if (colIndex < 0) {
+              // Variable not found in the tableau (likely means it was constrained to 0 or removed)
               coefficients[i] = 0; 
               continue;
           }
+
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          if (basicRow != null) {
+              // Variable is basic: value is RHS of its row (minus offset if applicable)
+              // Assume getBasicRow returns the correct row index for basic variables (non-objective rows).
+              coefficients[i] = getEntry(basicRow, getRhsOffset()) - valueOffset;
           } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              // Variable is non-basic: value is 0 (minus offset if applicable)
+              coefficients[i] = 0 - valueOffset;
           }
       }
+      
+      // Return the solution point and the objective function value at that point
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
