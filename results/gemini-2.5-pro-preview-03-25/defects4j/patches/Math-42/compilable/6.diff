diff --git a/tmp/cf54360a-c8f8-4eaa-8aae-97a00dd2bb4c_buggy.java b/tmp/1f0756cc-9259-4a52-accd-5184de951240_fixed.java
index efa499e..e387c3d 100644
--- a/tmp/cf54360a-c8f8-4eaa-8aae-97a00dd2bb4c_buggy.java
+++ b/tmp/1f0756cc-9259-4a52-accd-5184de951240_fixed.java
@@ -1,35 +1,57 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+      // Fix: Check index >= 0 instead of > 0
+      Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
+            // Variable not in the tableau - assume coefficient is 0
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
               // if the basic row is found to be the objective function row
               // set the coefficient to 0 -> this case handles unconstrained
               // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+
+          // Fix: Add basicRow != null check to the condition.
+          // This prevents the 'if' block from executing just because basicRow is null
+          // and null has already been added to basicRows (by a previous non-basic variable).
+          // It ensures this block only handles cases where the same non-null basic row
+          // is potentially returned for multiple variables.
+          if (basicRow != null && basicRows.contains(basicRow)) {
               // if multiple variables can take a given value
               // then we choose the first and set the rest equal to 0
               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
           } else {
+              // Add the basic row to the set (can be null for non-basic variables)
               basicRows.add(basicRow);
+              // Calculate coefficient:
+              // If basicRow is null (non-basic variable), base value is 0.
+              // If basicRow is not null (basic variable), base value is RHS entry.
+              // Subtract 'mostNegative' offset if variables are not restricted to non-negative.
               coefficients[i] =
                   (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                   (restrictToNonNegative ? 0 : mostNegative);
           }
+           // The non-negativity assertion failure in the test suggests that either
+           // getEntry() returned a negative value for a basic variable when restrictToNonNegative
+           // was true (which indicates a problem in the solver state before getSolution()),
+           // or the original logic involving basicRows.contains(null) led to an incorrect
+           // value assignment. The fix applied (adding basicRow != null) corrects the latter
+           // potential issue, aligning with historical fixes for similar problems (e.g., MATH-713).
+           // If small negative values due to precision persist when restrictToNonNegative is true,
+           // clamping might be considered, but the primary fix here addresses the logic flow.
+           // E.g., add clamping: if (restrictToNonNegative) { coefficients[i] = Math.max(0, coefficients[i]); }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
