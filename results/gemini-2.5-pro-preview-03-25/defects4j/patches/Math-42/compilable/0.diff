diff --git a/tmp/9c65e6a6-68d2-4e9d-96e6-a12ad40ceee2_buggy.java b/tmp/142aabe2-840d-48dd-8239-7b6d816618fb_fixed.java
index efa499e..94624b2 100644
--- a/tmp/9c65e6a6-68d2-4e9d-96e6-a12ad40ceee2_buggy.java
+++ b/tmp/142aabe2-840d-48dd-8239-7b6d816618fb_fixed.java
@@ -1,35 +1,49 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
+      // Use a set to track referenced basic rows.
+      // This prevents multiple variables from being assigned the value of the same basic row.
+      // This can happen in degenerate cases where a basic variable has value 0.
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
+            // Variable not in the tableau, coefficient is 0
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
+
+          // If basicRow is not null and has already been used (degenerate case):
+          // Assign 0 (or adjusted value if unrestricted) to this variable.
+          // Note: Check contains() only if basicRow is not null.
+          if (basicRow != null && basicRows.contains(basicRow)) {
+              // Degenerate case: Choose first variable and set others to 0
               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
           } else {
+              // If basicRow is not null, mark it as used.
+              if (basicRow != null) {
                   basicRows.add(basicRow);
+              }
+              // Assign coefficient value:
+              // If basic (basicRow != null): RHS value from tableau.
+              // If non-basic (basicRow == null): 0.
+              // Adjust by mostNegative if variables are unrestricted.
               coefficients[i] =
                   (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                   (restrictToNonNegative ? 0 : mostNegative);
           }
       }
+      // Calculate the objective function value using the computed coefficients.
+      // This is preferred over reading the value directly from the tableau's objective row
+      // as the coefficient calculation logic handles potential adjustments (e.g., mostNegative).
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
