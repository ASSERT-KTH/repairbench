diff --git a/tmp/3e6725cd-1cd9-4461-8c15-d23d8d61a250_buggy.java b/tmp/3507fbc7-d3d8-4626-9a8f-4a3b30bd3d5e_fixed.java
index efa499e..15a4be8 100644
--- a/tmp/3e6725cd-1cd9-4461-8c15-d23d8d61a250_buggy.java
+++ b/tmp/3507fbc7-d3d8-4626-9a8f-4a3b30bd3d5e_fixed.java
@@ -1,35 +1,63 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+      // find the column corresponding to the negative variableMinimized
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+      // retrieve the row in which the negative variable is basic
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+      // retrieve the value of the negative variable
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
+      // Sets to store the basic rows/columns already processed
       Set<Integer> basicRows = new HashSet<Integer>();
+      // array to store the coefficients of the solution vector
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
+
+      // iterate through the decision variables
       for (int i = 0; i < coefficients.length; i++) {
+          // find the column corresponding to the current variable
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
+            // if the variable is not found in the tableau (e.g., eliminated), set coefficient to 0
             coefficients[i] = 0;
             continue;
           }
+          // find the row in which the current variable is basic
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+
+          // Check if the row is already assigned to another basic variable (degeneracy, etc.)
+          // Note: The original contains check could potentially accept null if basicRow is null.
+          // The fix focuses on the calculation of the coefficient value, not altering this check structure.
           if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
+              // if multiple variables map to the same basic row, set subsequent ones to 0
+              // The subtraction logic here remains as in the original code, as the commit didn't change this branch's assignment.
               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
           } else {
+              // Add the row (even if null for non-basic vars) to the set of processed rows
               basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              // Set the coefficient:
+              // If the variable is basic (basicRow != null), use the RHS value from its row.
+              // If the variable is non-basic (basicRow == null), use 0.
+              // *** FIX START ***
+              // The original code subtracted 'mostNegative' here if !restrictToNonNegative.
+              // The fix removes that subtraction from this line.
+              coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
+              // *** FIX END ***
           }
+
+          // *** FIX START ***
+          // Conditionally subtract 'mostNegative' only under specific conditions:
+          // 1. The variable is basic (basicRow != null).
+          // 2. Variables are allowed to be negative (!restrictToNonNegative).
+          // This block was added by the fix for MATH-713.
+          if (basicRow != null && !restrictToNonNegative) {
+               coefficients[i] -= mostNegative;
           }
+          // *** FIX END ***
+      }
+      // Return the solution point and its value calculated using the objective function f
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
