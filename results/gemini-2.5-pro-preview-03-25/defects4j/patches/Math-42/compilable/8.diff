diff --git a/tmp/8d0bcd49-3ca6-42e0-9893-dc702d4b9d1a_buggy.java b/tmp/235f2aeb-625f-4a70-bea6-12b630675d4d_fixed.java
index efa499e..6d27956 100644
--- a/tmp/8d0bcd49-3ca6-42e0-9893-dc702d4b9d1a_buggy.java
+++ b/tmp/235f2aeb-625f-4a70-bea6-12b630675d4d_fixed.java
@@ -1,35 +1,51 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+      // Find the value of the "- P" variable (if it exists and is basic)
+      // This value is used as an offset for non-restricted variables.
+      double negativeVarOffset = 0.0; // Renamed 'mostNegative' for clarity
+      if (!restrictToNonNegative) {
           int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+          // Check if the special variable column exists in the tableau
+          if (negativeVarColumn >= 0) {
+              Integer negativeVarBasicRow = getBasicRow(negativeVarColumn);
+              if (negativeVarBasicRow != null) {
+                  // If the special variable is basic, get its value from RHS
+                  negativeVarOffset = getEntry(negativeVarBasicRow, getRhsOffset());
+              }
+          }
+          // Note: If NEGATIVE_VAR_COLUMN_LABEL is not found or is non-basic, offset remains 0.
+      }
 
-      Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
+
+          double value = 0.0; // Default value (for non-basic or missing variables)
+
+          if (colIndex >= 0) { // Check if variable "xi" exists in the tableau
               Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              if (basicRow != null) {
+                  // Variable "xi" is basic
+                  // Check if the basic row index is valid (sometimes it might be the objective function row 0)
+                  // However, standard simplex basic variables correspond to constraint rows (> 0).
+                  // If getBasicRow returns 0, it might indicate an issue or a specific convention.
+                  // Assuming basicRow > 0 for actual variable values.
+                  if (basicRow >= getNumObjectiveFunctions()) { // Check if it's a constraint row
+                    value = getEntry(basicRow, getRhsOffset());
                   }
+                  // If basicRow refers to the objective function row (e.g., 0), treat as non-basic (value 0).
+              }
+              // else: Variable "xi" exists but is non-basic, value remains 0.0
+          }
+          // else: Variable "xi" not found in tableau (colIndex < 0), value remains 0.0
+
+          // Apply the offset adjustment (subtracting the value of the "-P" variable)
+          // This correctly adjusts variables that were transformed for non-negativity constraints.
+          coefficients[i] = value - negativeVarOffset;
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
