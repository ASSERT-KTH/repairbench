diff --git a/tmp/178aa663-b6ee-4791-bc25-c1fc464c1caa_buggy.java b/tmp/0515a7ad-927e-4ce5-a79f-cc3b56084fb3_fixed.java
index efa499e..775e358 100644
--- a/tmp/178aa663-b6ee-4791-bc25-c1fc464c1caa_buggy.java
+++ b/tmp/0515a7ad-927e-4ce5-a79f-cc3b56084fb3_fixed.java
@@ -1,35 +1,51 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+      // Calculate the value of the negative variable marker (-)
+      // The value is non-zero only if we relaxed the non-negativity constraint
+      // and the marker variable is basic in the final tableau.
+      double mostNegative = 0;
+      if (!restrictToNonNegative) {
           int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+          if (negativeVarColumn >= 0) { // Check if the column exists
+              Integer negativeVarBasicRow = getBasicRow(negativeVarColumn);
+              if (negativeVarBasicRow != null) { // Check if the variable is basic
+                  mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());
+              }
+          }
+      }
 
-      Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
+            // Variable might have been optimized out (e.g., fixed value constraint)
+            // Default to 0, or potentially derive value from constraints if needed
+            // For now, assuming 0 is appropriate if not in the tableau's variable set.
             coefficients[i] = 0;
             continue;
           }
+
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          // Read the value from the RHS column if the variable is basic, otherwise it's 0
+          double value = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset());
+
+          // Adjust the value if non-negativity constraints were relaxed
+          // The actual value of the variable is (value_from_tableau - mostNegative)
+          if (!restrictToNonNegative) {
+              coefficients[i] = value - mostNegative;
           } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              coefficients[i] = value;
+              // Sanity check for the restricted case (optional):
+              // The value should be non-negative in a feasible solution.
+              // If it's slightly negative due to precision, it might be acceptable.
+              // If it's significantly negative, it indicates an issue elsewhere.
+              // An assertion or clamping could be added here if needed.
+              // e.g., if (coefficients[i] < 0) { coefficients[i] = 0; }
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
