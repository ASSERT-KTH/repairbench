diff --git a/tmp/2ade29ab-9c3a-4a01-81b4-03b758398162_buggy.java b/tmp/2cb7bb2f-3b12-41a5-b98c-16afea429ad6_fixed.java
index e69de29..cda0697 100644
--- a/tmp/2ade29ab-9c3a-4a01-81b4-03b758398162_buggy.java
+++ b/tmp/2cb7bb2f-3b12-41a5-b98c-16afea429ad6_fixed.java
@@ -0,0 +1,75 @@
+    /**
+     * Balances the tree after a deletion.
+     *
+     * @param node the node to balance
+     */
+    private void fixAfterDeletion(final TrieEntry<String, V> node) {
+        TrieEntry<String, V> current = node;
+
+        while (current != root && isBlack(current)) {
+            final TrieEntry<String, V> parent = current.parent; // Current is not root, so parent should exist.
+
+            if (current == leftOf(parent)) { // If current is left child
+                TrieEntry<String, V> sibling = rightOf(parent); // Get sibling
+
+                if (isRed(sibling)) { // Case 1: Sibling is red
+                    setBlack(sibling);
+                    setRed(parent);
+                    rotateLeft(parent);
+                    sibling = rightOf(parent); // New sibling after rotation
+                }
+
+                // After Case 1, sibling is black. Proceed to Cases 2, 3, 4.
+                // Note: Null checks for sibling's children are handled by isBlack/isRed helpers.
+                if (isBlack(leftOf(sibling)) && isBlack(rightOf(sibling))) { // Case 2: Sibling's children are both black
+                    setRed(sibling);
+                    current = parent; // Move up the tree
+                } else {
+                    if (isBlack(rightOf(sibling))) { // Case 3: Sibling's right child is black (and left is red)
+                        setBlack(leftOf(sibling));
+                        setRed(sibling);
+                        rotateRight(sibling);
+                        sibling = rightOf(parent); // New sibling
+                    }
+                    // Case 4: Sibling's right child is red (and left can be any color)
+                    // Safely handle colorOf(parent) which might be null for root's parent conceptually
+                    setColor(sibling, colorOf(parent));
+                    setBlack(parent);
+                    setBlack(rightOf(sibling)); // setBlack handles null argument safely
+                    rotateLeft(parent);
+                    current = root; // Finished
+                }
+            } else { // If current is right child
+                TrieEntry<String, V> sibling = leftOf(parent); // Get sibling
+
+                if (isRed(sibling)) { // Case 1: Sibling is red
+                    setBlack(sibling);
+                    setRed(parent);
+                    rotateRight(parent);
+                    sibling = leftOf(parent); // New sibling after rotation
+                }
+
+                // After Case 1, sibling is black. Proceed to Cases 2, 3, 4.
+                if (isBlack(leftOf(sibling)) && isBlack(rightOf(sibling))) { // Case 2: Sibling's children are both black
+                    setRed(sibling);
+                    current = parent; // Move up the tree
+                } else {
+                    if (isBlack(leftOf(sibling))) { // Case 3: Sibling's left child is black (and right is red)
+                        setBlack(rightOf(sibling)); // setBlack handles null argument safely
+                        setRed(sibling);
+                        rotateLeft(sibling);
+                        sibling = leftOf(parent); // New sibling
+                    }
+                    // Case 4: Sibling's left child is red (and right can be any color)
+                    setColor(sibling, colorOf(parent));
+                    setBlack(parent);
+                    setBlack(leftOf(sibling)); // setBlack handles null argument safely
+                    rotateRight(parent);
+                    current = root; // Finished
+                }
+            }
+        }
+
+        setBlack(current); // Ensure the node we possibly terminated on, or the root, is black.
+                           // setBlack handles null argument safely (if current is null somehow, though unlikely here).
+    }
\ No newline at end of file
