diff --git a/tmp/21a51254-ab26-42cf-8cdb-e5567cdd2bc4_buggy.java b/tmp/088a00bc-e7a3-4516-ac7c-4e60b92e0a0b_fixed.java
index e69de29..cbe0ab5 100644
--- a/tmp/21a51254-ab26-42cf-8cdb-e5567cdd2bc4_buggy.java
+++ b/tmp/088a00bc-e7a3-4516-ac7c-4e60b92e0a0b_fixed.java
@@ -0,0 +1,65 @@
+/**
+ * Fixes the structure of the trie after deleting an entry.
+ * <p>
+ * {@code p} is the parent of the node that was deleted or replaced.
+ * {@code c} is the child that replaced the node deleted/replaced.
+ * <p>
+ * If {@code p} is now an internal node with no value and has only
+ * one child {@code c}, then we need to bypass {@code p}.
+ * This is done by making {@code p}'s parent point directly to {@code c}.
+ * We then recurse up the tree to see if {@code p}'s parent also needs fixing.
+ * <p>
+ * Crucially, this method must update the {@code parent} pointer of {@code c}
+ * when {@code p} is bypassed to ensure that iterators traversing upwards
+ * (e.g., using {@code findNext}) do not encounter the removed node {@code p}.
+ *
+ * @param p the parent of the node that was deleted / replaced
+ * @param c the child node that replaced the deleted / replaced node
+ */
+private void fixUp(TrieEntry<K, V> p, TrieEntry<K, V> c) {
+    // Check if parent P needs removal/adjustment.
+    // This happens if P is internal, has no value, and its bit index
+    // is now redundant because it only has one significant child path (via c).
+    // The condition 'other == p' checks if the other child pointer is a self-reference,
+    // meaning P has effectively only one child path descending from it.
+    if (p != root && p.value == null && p.isInternalNode()) {
+        TrieEntry<K, V> other = (p.left == c) ? p.right : p.left;
+
+        if (other == p) { // p has only one real child path (via c).
+            TrieEntry<K, V> grandparent = p.parent;
+            if (grandparent != null) { // p is not a direct child of root.
+                // Bypass P: link grandparent directly to c.
+                if (grandparent.left == p) {
+                    grandparent.left = c;
+                } else { // grandparent.right == p
+                    grandparent.right = c;
+                }
+
+                // Update c's parent pointer to grandparent.
+                // This is the critical fix for potential NPEs in iterators
+                // that navigate upwards using parent pointers.
+                if (c != p) { // Only update if c is a real node, not a self-reference.
+                    c.parent = grandparent;
+                }
+
+                // Recurse up the tree to fix grandparent as well if needed.
+                // The exact condition for recursion might vary, but the essential part
+                // for fixing the NPE is the parent pointer update above.
+                // We check grandparent properties similar to how we checked 'p'.
+                // A simple recursive call covers necessary cases, though optimizations exist.
+                fixUp(grandparent, c);
+
+            } else { // p was a direct child of the root.
+                // p is being bypassed. c effectively becomes the new child of root,
+                // or potentially the new root if root itself becomes redundant.
+                // Update c's parent to null as it's now directly under root or is the root.
+                if (c != p) { // If c is a real node.
+                    c.parent = null; // c's parent is now root (represented as null).
+                }
+                // The root update itself (e.g., root = c) is typically handled
+                // in the calling method (removeEntry) based on root's state.
+                // fixUp primarily ensures the parent pointers below root are correct.
+            }
+        }
+    }
+}
\ No newline at end of file
