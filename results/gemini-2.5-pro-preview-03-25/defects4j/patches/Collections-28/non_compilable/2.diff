diff --git a/tmp/2455e864-f1eb-4bd5-b35e-5221a550b133_buggy.java b/tmp/4377623c-3d70-45f7-b882-6130f71a51be_fixed.java
index e69de29..bcb3e14 100644
--- a/tmp/2455e864-f1eb-4bd5-b35e-5221a550b133_buggy.java
+++ b/tmp/4377623c-3d70-45f7-b882-6130f71a51be_fixed.java
@@ -0,0 +1,139 @@
+        /**
+         * Removes the last returned element.
+         * <p>
+         * This method can be called only once per call to {@link #next()}.
+         *
+         * @throws IllegalStateException if {@link #next()} has not yet been called,
+         * or {@link #remove()} has already been called after the last call to {@link #next()}.
+         * @throws ConcurrentModificationException if the Trie was modified during iteration.
+         * @throws UnsupportedOperationException if the removed node was an internal node.
+         */
+        @Override
+        public void remove() {
+            // Check modification count from PatriciaTrie.this.modCount
+            if (modCountExpected != PatriciaTrie.this.modCount) {
+                throw new ConcurrentModificationException();
+            }
+
+            // Check if next() has been called (current should be non-null)
+            if (current == null) {
+                throw new IllegalStateException("next() has not been called");
+            }
+
+            // Check if remove() was already called
+            if (!canRemove) {
+                throw new IllegalStateException("remove() already called for this element");
+            }
+
+            final TrieEntry<K, V> nodeToRemove = current; // Node to remove
+
+            modCountExpected = ++PatriciaTrie.this.modCount; // Increment mod count
+
+            TrieEntry<K, V> parent = findParent(nodeToRemove);
+
+            if (parent == null) { // Removing the root
+                if (!nodeToRemove.isExternalNode()) {
+                    // Cannot remove internal root entries (original behavior)
+                    // Note: PatriciaTrie doesn't allow storing values in internal nodes,
+                    // so this case might imply removing the structural root node, which is invalid.
+                    throw new UnsupportedOperationException("Cannot remove internal entry!");
+                }
+                // Root is external, removing it clears the trie
+                PatriciaTrie.this.clear(); // This handles size and root=null
+                // Size is handled by clear(), no decrement needed here.
+            } else { // Removing a non-root node
+                if (!nodeToRemove.isExternalNode()) {
+                    // Cannot remove internal non-root entries (original behavior)
+                    throw new UnsupportedOperationException("Cannot remove internal entry!");
+                }
+
+                // nodeToRemove is external and not root.
+                // Find the original sibling before modifying parent's links
+                TrieEntry<K, V> originalSibling = (parent.left == nodeToRemove) ?
+                                                  parent.right : parent.left;
+
+                // Original logic: Replace child pointer in parent with nodeToRemove.predecessor
+                // This predecessor link is crucial for PATRICIA structure but might be involved in bugs.
+                if (parent.left == nodeToRemove) {
+                    parent.left = nodeToRemove.predecessor;
+                } else if (parent.right == nodeToRemove) {
+                    parent.right = nodeToRemove.predecessor;
+                } else {
+                    // Should not happen if findParent worked correctly
+                    throw new IllegalStateException("Cannot determine parent relation for removal");
+                }
+
+                // If the parent remains internal after update (needs uplifting)
+                // An internal node has bitIndex >= 0
+                if (parent.isInternalNode()) {
+                    // Find grandparent
+                    TrieEntry<K, V> grandParent = findParent(parent);
+
+                    // Find the actual child node to uplift (the one that's not the back-pointer)
+                    // The child to uplift is the original sibling found earlier.
+                    TrieEntry<K, V> childToUplift = originalSibling;
+
+                    // Check if childToUplift is consistent (should not be null if parent was internal)
+                    if (childToUplift == null) {
+                         throw new IllegalStateException("Child to uplift is null for an internal parent");
+                    }
+
+
+                    // Update grandparent's link
+                    if (grandParent == null) { // Parent was root
+                        PatriciaTrie.this.root = childToUplift;
+                        // Update new root's predecessor
+                        if (PatriciaTrie.this.root != null) {
+                            PatriciaTrie.this.root.predecessor = PatriciaTrie.this.root;
+                        }
+                    } else {
+                        if (grandParent.left == parent) {
+                            grandParent.left = childToUplift;
+                        } else { // grandParent.right == parent
+                            grandParent.right = childToUplift;
+                        }
+                        // Update child's predecessor to point past the removed parent
+                        childToUplift.predecessor = parent.predecessor;
+                    }
+
+                    // Parent node is bypassed, effectively removed. Decrement size again.
+                    --PatriciaTrie.this.size;
+
+                } else { // Parent becomes external node (bitIndex is now -1 conceptually)
+                    // Parent now has only back-pointers (or null). It should adopt the key/value of the sibling.
+
+                    // *** THE FIX ***
+                    // The sibling is the 'originalSibling' found before modifying parent's links.
+                    TrieEntry<K, V> sibling = originalSibling;
+
+                    // Check if sibling is null (shouldn't happen if parent was internal originally)
+                    if (sibling == null) {
+                        throw new IllegalStateException("Sibling node is unexpectedly null when parent becomes external");
+                    }
+
+                    // Parent adopts the key/value of the sibling.
+                    parent.key = sibling.getKeyOrNull();
+                    parent.value = sibling.getValue();
+                    parent.left = null;  // Now external
+                    parent.right = null; // Now external
+                    parent.bitIndex = -1; // Mark as external
+
+                    // Update parent's predecessor
+                    // If parent became external, its predecessor should point back up correctly.
+                    // Re-calculating seems safest given the structural change.
+                    if (parent != PatriciaTrie.this.root) {
+                        parent.predecessor = findPredecessor(parent.getKeyOrNull());
+                    } else {
+                        // Root's predecessor is itself
+                        parent.predecessor = parent;
+                    }
+                }
+
+                // Decrement size for the removed nodeToRemove
+                --PatriciaTrie.this.size;
+            }
+
+            // Mark that remove() was called, invalidate current
+            canRemove = false;
+            current = null;
+        }
\ No newline at end of file
