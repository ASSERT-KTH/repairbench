diff --git a/tmp/b5274a7e-7106-40cf-9161-d336e2c999ae_buggy.java b/tmp/a5a295ba-0105-44e4-b663-ed8cd4b87aa1_fixed.java
index e69de29..cb3031b 100644
--- a/tmp/b5274a7e-7106-40cf-9161-d336e2c999ae_buggy.java
+++ b/tmp/a5a295ba-0105-44e4-b663-ed8cd4b87aa1_fixed.java
@@ -0,0 +1,91 @@
+    /**
+     * Fixes the Trie Structure after remove()
+     *
+     * @param parent The parent of the Entry {@code entry}
+     * @param entry The Entry that has been removed.
+     */
+    private void fixup(TrieEntry<K, V> parent, TrieEntry<K, V> entry) {
+        // This method walks up the tree from the removed node's parent,
+        // cleaning up empty nodes and potentially merging nodes if the
+        // structure allows after the removal.
+
+        // Loop while we are moving upwards (entry's bitIndex is greater than parent's),
+        // the current node ('entry') is internal, empty, and we haven't reached the top.
+        while (parent != null && !entry.isExternalNode() && entry.isEmpty() && entry.bitIndex > parent.bitIndex) {
+
+            // Find the sibling of the current node ('entry').
+            // In a valid Patricia Trie, internal nodes always have two children.
+            final TrieEntry<K, V> sibling = getSibling(parent, entry);
+            // A null sibling would indicate a corrupted trie structure.
+
+            // Case 1: The parent node is also empty (has no key/value).
+            // This means the parent was purely a structural node for branching.
+            // We can potentially remove the parent and merge the sibling upwards.
+            if (parent.isEmpty()) {
+                final TrieEntry<K, V> grandparent = parent.parent;
+
+                if (grandparent != null) {
+                    // If the parent is not the root, update the grandparent's
+                    // child pointer to bypass the parent and point directly to the sibling.
+                    if (grandparent.left == parent) {
+                        grandparent.left = sibling;
+                    } else { // grandparent.right == parent
+                        grandparent.right = sibling;
+                    }
+
+                    // Update the sibling's parent pointer to the grandparent.
+                    // External nodes might use self-references or null for parent, handle carefully.
+                    if (!sibling.isExternalNode()) {
+                       sibling.parent = grandparent;
+                    }
+
+                } else { // The parent was the root node.
+                    // The sibling becomes the new root of the trie.
+                    if (!sibling.isExternalNode()) {
+                       sibling.parent = null; // Root's parent is null.
+                    }
+                    // Update the trie's root reference.
+                    root = sibling;
+                }
+
+                // After merging the sibling up, the loop continues by moving
+                // up the tree. No recursive call needed here as the loop handles iteration.
+                // The logic here was simplified/corrected in COLLECTIONS-584 fix.
+
+            } else { // Case 2: The parent node is not empty (it holds a key/value).
+                // We cannot remove the parent node itself.
+                // Instead, we replace the now-empty 'entry' node with its 'sibling'
+                // as the child of the parent.
+                if (parent.left == entry) {
+                    parent.left = sibling;
+                } else { // parent.right == entry
+                    parent.right = sibling;
+                }
+
+                // Update the sibling's parent pointer to be the original 'parent'.
+                if (!sibling.isExternalNode()) {
+                    sibling.parent = parent;
+                }
+
+                // Check if the sibling node itself might need merging with the parent.
+                // This occurs if the sibling's bit index suggests it should be
+                // structurally merged with the parent (path compression).
+                if (!sibling.isExternalNode()
+                        && sibling.bitIndex <= parent.bitIndex) {
+                    // Recursively call fixup to handle potential merging at the parent level.
+                    // This handles cases where replacing the child might enable further optimization.
+                    fixup(parent, sibling);
+                }
+
+                // Since the parent was not empty, the structural change is localized.
+                // We don't need to continue fixing up further up the tree from here.
+                break; // Exit the while loop.
+            }
+
+            // Move up the tree for the next iteration.
+            // The current 'parent' becomes the 'entry' for the next level up.
+            entry = parent;
+            // The new 'parent' is the grandparent from the current level.
+            parent = parent.parent;
+        }
+    }
\ No newline at end of file
