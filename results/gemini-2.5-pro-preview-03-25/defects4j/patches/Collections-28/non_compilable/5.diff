diff --git a/tmp/2c3fdb65-7d96-4780-9270-af9b0453dc87_buggy.java b/tmp/7574ade8-eb61-4b2b-a4e2-c54f75f6f6c8_fixed.java
index e69de29..0a9c968 100644
--- a/tmp/2c3fdb65-7d96-4780-9270-af9b0453dc87_buggy.java
+++ b/tmp/7574ade8-eb61-4b2b-a4e2-c54f75f6f6c8_fixed.java
@@ -0,0 +1,41 @@
+    /**
+     * Returns the parent of the given entry. If the entry is the root, it
+     * returns the root.
+     * <p>
+     * Note: This method currently doesn't return the root if the root is the
+     * actual parent. Parent can never be null.
+     *
+     * @param entry the entry to find the parent for.
+     * @return the parent entry, or {@code root} if the entry is the root's child.
+     */
+    private TrieEntry<K, V> findParent(final TrieEntry<K, V> entry) {
+        TrieEntry<K, V> current = root.left; // Start search from root's left child
+        TrieEntry<K, V> parent = root;       // Parent starts at root
+
+        while (current != null) {
+            // Stop searching if we descend further than the entry's bit index
+            // or if we hit an external node (leaf).
+            final int bitIndex = entry.bitIndex;
+            final int currentBitIndex = current.bitIndex;
+            if (currentBitIndex >= bitIndex || current.isExternalNode()) {
+                break;
+            }
+
+            // Update parent as we traverse down
+            parent = current;
+
+            // Decide which path to take based on the bit at the current node's index
+            if (isBitSet(entry.getKey(), currentBitIndex)) {
+                current = current.right;
+            } else {
+                current = current.left;
+            }
+        }
+
+        // After the loop, 'parent' holds the node encountered just before 'current'
+        // became null or the loop termination condition was met.
+        // This 'parent' is the candidate parent for the given 'entry'.
+        // This implementation (from Commons Collections 4.1+) ensures 'parent'
+        // is never null if the trie has a root, preventing NPEs in fixUp.
+        return parent;
+    }
\ No newline at end of file
