diff --git a/tmp/f3eadbf0-fc25-4de5-840a-ff1eb69b72be_buggy.java b/tmp/f58121c6-172a-4b08-890d-fe881f2a161a_fixed.java
index e69de29..9dc6891 100644
--- a/tmp/f3eadbf0-fc25-4de5-840a-ff1eb69b72be_buggy.java
+++ b/tmp/f58121c6-172a-4b08-890d-fe881f2a161a_fixed.java
@@ -0,0 +1,122 @@
+    /**
+     * Removes a single entry from the Trie.
+     *
+     * If the entry is an internal entry, it will be removed iff
+     * it does not have children. If it does have children, it will
+     * be replaced by an uplink node.
+     *
+     * Note: This method is modeled after the removeEntry logic from Apache Commons Collections 4.x
+     * PatriciaTrie, incorporating the fix for COLLECTIONS-351 which addressed a NullPointerException
+     * during removal, particularly relevant when clearing prefix maps.
+     *
+     * @param entry the entry to remove
+     */
+    private void removeEntry(final TrieEntry<K, V> entry) {
+        TrieEntry<K, V> current = entry.predecessor;
+        TrieEntry<K, V> node = entry; // the node to potentially delete or modify
+
+        // If the entry passed is not the actual node holding the key/value
+        // (e.g., it's an internal structural node whose key matches but isn't stored there),
+        // find the real node associated with the key.
+        // This check ensures 'node' refers to the actual entry to be logically removed.
+        // The condition `current.left == entry || current.right == entry` checks if 'entry'
+        // is a direct child of its predecessor. If not, 'entry' might be an uplink
+        // and we need the actual node.
+        // Original PatriciaTrie logic might differ slightly in how it identifies the 'node'
+        // vs 'entry', but the goal is to operate on the correct node.
+        if (current.left != entry && current.right != entry) {
+            // find the real node to delete.
+            node = getEntry(entry.getKey());
+            // If it wasn't found (should not happen for a valid entry), return.
+            if (node == null) {
+                return;
+            }
+            // Update 'current' to be the predecessor of the actual node.
+            current = node.predecessor;
+        }
+
+
+        // Increment modification count and decrement size for the removal operation.
+        modCount++;
+        size--;
+
+        final TrieEntry<K, V> parent = node.parent;
+
+        // Determine if the node to be removed is the left child of its parent.
+        // This is needed to know which pointer (left or right) in the parent to update.
+        // It will be false if parent is null (i.e., node is the root).
+        final boolean isLeftChild = parent != null && parent.left == node;
+
+        // Case 1: The node to be removed ('node') is an internal node used for
+        // branching, and its bitIndex indicates it's distinguishing between its children
+        // ('current' and another child 'child'). We need to promote 'child'.
+        if (node.isInternalNode() && node.bitIndex > current.bitIndex) {
+            TrieEntry<K, V> child = null; // The child to promote
+            if (node.left == current) { // 'current' is the predecessor/sibling
+                child = node.right; // Promote the right child
+            } else { // node.right == current
+                child = node.left; // Promote the left child
+            }
+
+            // Update the parent's child pointer to point to the promoted child.
+            if (parent != null) {
+                if (isLeftChild) {
+                    parent.left = child;
+                } else {
+                    parent.right = child;
+                }
+            } else {
+                // If parent is null, 'node' was the root. The promoted 'child' becomes the new root.
+                root = child;
+            }
+
+            // Update the promoted child's parent pointer to the original parent.
+            if (child != null) { // Defensive check, child should exist here.
+                child.parent = parent;
+            }
+
+            // Update the predecessor link of the sibling node ('current').
+            // This node ('current') previously had 'node' as its predecessor.
+            // Its new predecessor should be the promoted child ('child').
+            // This is the fix from COLLECTIONS-351: Look up the node 'p' for 'current.key'
+            // again before updating its predecessor, as 'current' might be stale or
+            // direct update could cause issues in complex removal scenarios.
+            // 'current' here must be an external node if 'node' is internal.
+            final TrieEntry<K, V> p = getNearestEntryForKey(current.getKey(), current.bitIndex);
+            if (p != null) { // Check if lookup returned a valid node.
+                p.predecessor = child; // Update the predecessor link.
+            }
+
+        } else {
+            // Case 2: The node to be removed ('node') is an external node (leaf) or an
+            // internal node that structurally acts like one in this removal context
+            // (e.g., a node on a path with only one child below it).
+            // 'current' is the sibling or uplink node that will replace 'node' in the structure.
+            if (parent != null) {
+                if (isLeftChild) {
+                    parent.left = current; // Replace 'node' with 'current'
+                } else {
+                    parent.right = current; // Replace 'node' with 'current'
+                }
+            } else {
+                // If parent is null, 'node' was the root. 'current' becomes the new root.
+                root = current;
+            }
+
+            // Update 'current's predecessor link to point back to the original parent.
+            if (current != null) { // Defensive check, current should exist.
+                current.predecessor = parent;
+            }
+        }
+
+        // Help GC by nulling out fields of the removed node.
+        // A helper method like 'clean()' might exist in the actual class.
+        node.key = null;
+        node.value = null;
+        node.parent = null;
+        node.left = null;
+        node.right = null;
+        node.predecessor = null;
+        node.bitIndex = -1; // Mark as invalid.
+        node.isEmpty = true; // Mark as logically removed/empty.
+    }
\ No newline at end of file
