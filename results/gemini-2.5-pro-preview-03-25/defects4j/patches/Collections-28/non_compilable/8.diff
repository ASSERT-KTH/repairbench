diff --git a/tmp/14ab90b6-9493-4a22-9c2e-993f425d2311_buggy.java b/tmp/de6a3f0f-88e2-405b-aec2-da5f11aa0d11_fixed.java
index e69de29..73f50d4 100644
--- a/tmp/14ab90b6-9493-4a22-9c2e-993f425d2311_buggy.java
+++ b/tmp/de6a3f0f-88e2-405b-aec2-da5f11aa0d11_fixed.java
@@ -0,0 +1,146 @@
+    /**
+     * Removes the given {@link TrieEntry} from the Trie.
+     * <p>
+     * This is based on the analysis of Commons Collections 4.4 source code,
+     * applying a fix to correctly update the predecessor pointer when a parent node
+     * is bypassed during removal.
+     * </p>
+     * @param h the entry to remove, should be non-null and exist in the trie
+     * @return the value of the removed entry
+     */
+    @Override
+    V removeEntry(final TrieEntry<String, V> h) {
+        // Find the node 'p' to be removed structurally.
+        // If 'h' is internal, swap its data with its successor 's', then 'p' becomes 's'.
+        // Otherwise, 'p' is 'h'.
+        TrieEntry<String, V> p = h;
+        V originalValue = p.value; // Store value before potential swap
+
+        if (!p.isExternalNode()) {
+            TrieEntry<String, V> s = nextEntryInOrder(p, p);
+            if (s == null) {
+                // This should not happen in a valid trie for an internal node
+                throw new IllegalStateException("Cannot find successor for internal node: " + p);
+            }
+            // Swap data between p (original h) and s (successor)
+            p.key = s.key;
+            // originalValue already holds h.value
+            p.value = s.value;       // p now has s's value
+            p = s; // p now points to the successor node 's' to be removed structurally
+        }
+
+        // 'p' is the node to be removed structurally, guaranteed to be external.
+        // 'originalValue' holds the value associated with the key of the initial 'h'.
+
+        // If the trie is empty after removing the root's child, handle specially
+        if (p == root.left && size() == 1) {
+             root.left = root; // Point root back to itself signifies empty trie
+             p.value = null; // Clear value (already done below but safe)
+             size = 0;
+             incrementModCount();
+             return originalValue;
+        }
+
+
+        final TrieEntry<String, V> parent = p.parent;
+        // This should not happen if size > 0 and p is not root.left being removed alone
+        if (parent == null) {
+             throw new IllegalStateException("parent is null for node " + p + ", size=" + size());
+        }
+
+        // Get the sibling 'c' of 'p'
+        final TrieEntry<String, V> c = (parent.left == p) ? parent.right : parent.left;
+
+        // Determine if the parent 'parent' is structurally required or can be bypassed.
+        // isExternalOrGreater checks if node is external OR node.bitIndex >= compare.bitIndex
+        boolean parentIsStructurallyRequired = !isExternalOrGreater(c, parent);
+
+        if (!parentIsStructurallyRequired) { // Parent node is NOT structurally required, bypass it.
+            TrieEntry<String, V> g = parent.parent; // Grandparent of 'p'
+
+            // Update grandparent's child pointer (which pointed to 'parent') to point to 'c'.
+            if (g == null) { // If parent's parent is null, parent must be root.left
+                // Defensive check based on structure
+                if (parent != root.left) {
+                    throw new IllegalStateException("parent has null parent, but is not root.left: " + parent);
+                }
+                root.left = c; // Update root's main child pointer
+            } else if (g.left == parent) {
+                g.left = c;
+            } else { // g.right == parent
+                g.right = c;
+            }
+
+            // Update parent pointer of 'c' to point to the grandparent 'g'.
+            // Null check for c might be needed if the trie could become invalid somehow
+            if (c != null) {
+                c.parent = g;
+            }
+
+            // Update the predecessor pointer of the node 'f' that follows 'parent' in order.
+            TrieEntry<String, V> f = followRight(parent);
+            // FIX: Original code had 'f != null && f != c'. This misses updating predecessor if f == c.
+            if (f != null) { // Check only if f exists
+                // 'f' needs its predecessor updated from 'parent' to 'parent.predecessor'.
+                f.predecessor = parent.predecessor;
+            }
+
+        } else { // Parent node IS structurally required.
+            // Just replace 'p' with 'c' as the child of 'parent'.
+            if (parent.left == p) {
+                parent.left = c;
+            } else { // parent.right == p
+                parent.right = c;
+            }
+
+            // Update parent pointer of 'c' to point back to 'parent'.
+            if (c != null) {
+                c.parent = parent;
+            }
+
+            // Update the predecessor pointer of the node 'f' that follows 'p' in order.
+            TrieEntry<String, V> f = followRight(p); // Returns null as p is external
+            // The check 'if (f != null)' correctly handles the case where p has no successor.
+            if (f != null) {
+                 // 'f' needs its predecessor updated from 'p' to 'p.predecessor'.
+                f.predecessor = p.predecessor;
+            }
+        }
+
+        // Nullify fields of the removed node 'p' to help GC and potentially prevent issues
+        // if the node object is still referenced elsewhere (e.g., iterator's lastReturned).
+        p.key = null;
+        p.value = null;
+        p.parent = null;
+        p.left = null;
+        p.right = null;
+        p.predecessor = null;
+        p.bitIndex = -1; // Mark as invalid
+
+        size--;
+        incrementModCount();
+
+        return originalValue;
+    }
+
+    /**
+     * Helper method needed by the fixed removeEntry. Checks if a node is
+     * external or represents an uplink relative to a comparison node.
+     * Based on Commons Collections 4.4.
+     */
+    private boolean isExternalOrGreater(TrieEntry<String, V> node, TrieEntry<String, V> compare) {
+         if (node == null) {
+             // Consider null as representing a boundary or uplink.
+             return true;
+         }
+         if (node.isExternalNode()) {
+             return true;
+         }
+         // Handles compare == root correctly as root.bitIndex is -1.
+         return node.bitIndex >= compare.bitIndex;
+    }
+
+    // NOTE: This fix assumes the presence and correctness of other helper methods
+    // like nextEntryInOrder(node, start), followRight(node), isExternalNode(),
+    // and fields like root, size, modCount within the AbstractPatriciaTrie/PatriciaTrie class.
+    // Only the removeEntry method and its direct helper isExternalOrGreater are provided.
\ No newline at end of file
