diff --git a/tmp/d0b8a145-2487-4ea0-a911-6ff0f07dca41_buggy.java b/tmp/1f5c7c8d-739b-4d73-9520-bc288381ade9_fixed.java
index e69de29..61bab49 100644
--- a/tmp/d0b8a145-2487-4ea0-a911-6ff0f07dca41_buggy.java
+++ b/tmp/1f5c7c8d-739b-4d73-9520-bc288381ade9_fixed.java
@@ -0,0 +1,63 @@
+    /**
+     * Removes an external entry from the Trie.
+     * <p>
+     * If {@code h} is an external node, we replace its parent {@code p} with
+     * {@code h}'s sibling {@code s}. We then update the bitIndex of {@code s}
+     * and the uplink of the node on the other side of the uplink.
+     *
+     * @param h the external entry to remove.
+     * @throws IllegalArgumentException if {@code h} is not an external node.
+     */
+    private void removeExternalEntry(final TrieEntry<K, V> h) {
+        if (h == root) {
+            root = null;
+            return;
+        }
+
+        if (!h.isExternalNode()) {
+            throw new IllegalArgumentException(h + " is not an external Entry!");
+        }
+
+        final TrieEntry<K, V> p = h.parent;
+        final TrieEntry<K, V> sibling = p.left == h ? p.right : p.left;
+
+        if (p.parent == null) { // If 'p' was the root.
+            sibling.parent = null; // Sibling is the new root.
+            root = sibling;
+            // Fix uplink of the sibling if it is internal.
+            if (root != null && root.isInternalNode()) {
+                fixUplink(sibling.left == null ? sibling.right : sibling.left);
+            }
+        } else { // If 'p' was not the root.
+            final TrieEntry<K, V> grandParent = p.parent;
+            // Update the grandparent's child pointer.
+            if (grandParent.left == p) {
+                grandParent.left = sibling;
+            } else {
+                // If it wasn't left, it must be right.
+                grandParent.right = sibling;
+            }
+            // Update the sibling's parent pointer.
+            // This was the location of the bug fixed in COLLECTIONS-511 / r1595741 & r1595979
+            // The parent pointer must always be updated.
+            sibling.parent = grandParent;
+
+            // Fix uplink of the sibling if it is internal.
+            if (sibling.isInternalNode()) {
+                fixUplink(sibling.left == null ? sibling.right : sibling.left);
+            }
+            // If sibling is external, check if its uplink needs fixing
+            // because 'p' was removed.
+            else if (sibling.uplink == p) {
+                // The sibling's uplink was pointing to the node 'p' being removed.
+                // It should now point to the node that 'p' was pointing to.
+                // This doesn't seem right based on Patricia Trie structure.
+                // Re-evaluating fixUplink's role: It traverses *up* from an external node.
+                // When 'p' is removed and replaced by 'sibling', if 'sibling' is external,
+                // we need to ensure nodes *below* grandparent that pointed to 'p' are updated.
+                // The fixUplink call when sibling is internal handles subtrees.
+                // If sibling is external, we might need to fix uplinks starting from sibling itself.
+                 fixUplink(sibling); // Call fixUplink starting from the external sibling node.
+            }
+        }
+    }
\ No newline at end of file
