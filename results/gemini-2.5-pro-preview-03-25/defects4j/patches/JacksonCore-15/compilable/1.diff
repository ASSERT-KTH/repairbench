diff --git a/tmp/66c6530e-ec9c-42a4-94b7-bac1427fc954_buggy.java b/tmp/672d38ae-43a2-4361-bace-7e2605f82150_fixed.java
index 82cd856..3fe91bd 100644
--- a/tmp/66c6530e-ec9c-42a4-94b7-bac1427fc954_buggy.java
+++ b/tmp/672d38ae-43a2-4361-bace-7e2605f82150_fixed.java
@@ -1,213 +1,243 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
-    	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-    	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
-        // Anything buffered?
+        // First, check if we have buffered tokens:
         TokenFilterContext ctxt = _exposedContext;
-
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
-                    if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
-                        _currToken = t;
-                        return t;
-                    }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
+                    // If context is now null, break to potentially check allowMultipleMatches
+                    // or read next token normally.
+                    // We must NOT check delegate's current token, as it may be anything
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
+        // Added check for allowMultipleMatches: if disabled and match found, stop.
+        // Must be done after exhausting buffer, before fetching next token.
+        if (!_allowMultipleMatches && _matchCount > 0) {
+             // Simple check: if we already had a match, and are not allowing multiple,
+             // we are done.
+             return (_currToken = null);
+        }
+
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             return (_currToken = t);
         }
 
         // otherwise... to include or not?
         TokenFilter f;
 
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
+                if (_includePath) {
+                    _matchCount++;
+                }
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
+                if (_includePath) {
+                    _matchCount++;
+                }
                 return (_currToken = t);
             }
+            // If filter is not INCLUDE_ALL, array needs filtering
             _headContext = _headContext.createChildArrayContext(f, false);
 
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
+                    // If buffering returns a token, assume it's a match handled within?
+                    // Or should match count be incremented here? Let's assume _nextTokenWithBuffering handles it.
                     _currToken = t;
                     return t;
                 }
             }
+            // If !_includePath, or buffering yielded nothing yet, START_ARRAY is not returned;
+            // need to proceed to find first element etc.
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                 if (_includePath) {
+                    _matchCount++;
+                }
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                 if (_includePath) {
+                    _matchCount++;
+                }
                 return (_currToken = t);
             }
+            // If filter is not INCLUDE_ALL, object needs filtering
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
+                    // Assume _nextTokenWithBuffering handles match count
                     _currToken = t;
                     return t;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
+            // If !_includePath, or buffering yielded nothing yet, START_OBJECT is not returned;
+            // need to proceed to find first field etc.
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
+                    f.filterFinishArray(); // Or object
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
+                // Only return END token if START was returned
                 if (returnEnd) {
+                    // Does END token count towards match? Assume no.
                     return (_currToken = t);
                 }
             }
+            // If START not handled, END is implicitly skipped, find next token
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
-                if (f == TokenFilter.INCLUDE_ALL) {
+                if (f == TokenFilter.INCLUDE_ALL) { // Field name itself matches filter context
                     _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
+                    if (_includePath) {
+                        _matchCount++; // Count match if path included
+                        return (_currToken = t);
+                    }
+                    // If !_includePath: FIELD_NAME is not returned, but its value might be.
+                    // Check for START_OBJECT injection if needed for non-path-included parent.
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                        _exposedContext = _headContext;
+                       // Does START_OBJECT count as a match? Assume not if !_includePath.
+                       return (_currToken = t); // Return START_OBJECT injected token
                     }
+                    // If no injection, just proceed to fetch the value. Match count handled by value.
+                    break; // Break switch, loop via _nextToken2() to fetch value
                 }
-                    return (_currToken = t);
-                }
-                if (f == null) {
+                if (f == null) { // Property excluded entirely
                     delegate.nextToken();
                     delegate.skipChildren();
-                    break;
+                    break; // Break switch, loop via _nextToken2()
                 }
+                // Field name didn't match context, but check property filter
                 f = f.includeProperty(name);
-                if (f == null) {
+                if (f == null) { // Property value excluded by filter
                     delegate.nextToken();
                     delegate.skipChildren();
-                    break;
+                    break; // Break switch, loop via _nextToken2()
                 }
+                // Property value *might* be included. Set item filter for value.
                 _itemFilter = f;
-                if (f == TokenFilter.INCLUDE_ALL) {
+                if (f == TokenFilter.INCLUDE_ALL) { // Value filter is INCLUDE_ALL (match definite)
                     if (_includePath) {
+                        // Return FIELD_NAME now as part of the match path
+                        _matchCount++; // Count match
                         return (_currToken = t);
                     }
+                    // If !_includePath: FIELD_NAME not returned, proceed to value. Match count handled by value.
                 }
+                // If value filter is specific (f != INCLUDE_ALL), or if !_includePath:
                 if (_includePath) {
+                    // Need buffering to filter value, FIELD_NAME might be returned first by buffering logic
+                    // _nextTokenWithBuffering should handle match count internally for buffered tokens.
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
+                    // If buffering doesn't yield token now, fall through to fetch value normally?
+                    // This seems complex. Let's assume for now that if _includePath is true
+                    // and filter is specific, the FIELD_NAME itself isn't the "match" token yet.
                 }
-                break;
+                // If !_includePath, or if value filter is specific:
+                // Proceed to fetch the value token. The value handler below will check _itemFilter.
+                 break; // Break switch, loop via _nextToken2() to fetch value
             }
 
         default: // scalar value
             f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
+            if (f == TokenFilter.INCLUDE_ALL) { // Value context (field or array element) was INCLUDE_ALL
+                _matchCount++; // Scalar value is the match result
                 return (_currToken = t);
             }
-            if (f != null) {
-                f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
+            if (f != null) { // Specific filter for item/field
+                f = _headContext.checkValue(f); // Check filter in current context (array/object value)
+                if ((f == TokenFilter.INCLUDE_ALL) // CheckValue filter becomes generic include
+                        || ((f != null) && f.includeValue(delegate))) { // Or specific filter includes value
+                    _matchCount++; // Scalar value is the match result
                     return (_currToken = t);
                 }
             }
-            // Otherwise not included (leaves must be explicitly included)
-            break;
-        }
+            // Otherwise scalar value not included
+            break; // Break switch, loop via _nextToken2()
+        } // switch
 
-        // We get here if token was not yet found; offlined handling
+        // We get here if token was filtered out / skipped, or requires further processing
+        // like reading value after field name. Tail recursion (implemented as loop):
         return _nextToken2();
     }
\ No newline at end of file
