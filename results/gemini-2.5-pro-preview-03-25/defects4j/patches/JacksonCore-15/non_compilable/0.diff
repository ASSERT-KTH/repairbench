diff --git a/tmp/80ceabd1-322d-47a5-b6cf-9a30d3e560d6_buggy.java b/tmp/680146f9-5a67-4524-8f59-7024f5385e02_fixed.java
index 82cd856..7d882ba 100644
--- a/tmp/80ceabd1-322d-47a5-b6cf-9a30d3e560d6_buggy.java
+++ b/tmp/680146f9-5a67-4524-8f59-7024f5385e02_fixed.java
@@ -1,213 +1,260 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
-    	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-    	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
+        // Major check: need to ensure we are handling possibly filters passed through context
+        // Also: if distribution disabled, need to stop processing.
+        if (!_allowMultipleMatches && _matchFound) {
+            // If previously matched, and multiple matches not allowed, just return null
+            return (_currToken = null);
+        }
+
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
+                    // If not in array (and not root), must be object, FIELD_NAME should be current
+                    // token, so need to skip that name
+                    // 13-Dec-2015, tatu: Does this ever happen? Seems like it shouldn't
                     /*
-                    t = delegate.getCurrentToken();
+                    JsonToken t = delegate.getCurrentToken();
                     if (t != JsonToken.FIELD_NAME) {
                         _currToken = t;
                         return t;
                     }
                     */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
+            // Except: must clear context object filter states? For now, nope
+            /*
+            if (_headContext != null) {
+                _headContext.ensureNotStuck();
+            }
+            */
             return (_currToken = t);
         }
 
         // otherwise... to include or not?
         TokenFilter f;
 
         switch (t.id()) {
-        case ID_START_ARRAY:
+        case ID_START_ARRAY: // START_ARRAY == 3
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
+                if (!_allowMultipleMatches) { _matchFound = true; }
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
+                if (!_allowMultipleMatches) { _matchFound = true; }
                 return (_currToken = t);
             }
+            // Still need to create context, may need filtering paths
             _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
+                    // Also needs to be considered a match right away if Path is included
+                    if (!_allowMultipleMatches) { _matchFound = true; }
                     _currToken = t;
                     return t;
                 }
             }
+            // If it wasn't returned, need to proceed to find the first included token
             break;
 
-        case ID_START_OBJECT:
+        case ID_START_OBJECT: // START_OBJECT == 1
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                if (!_allowMultipleMatches) { _matchFound = true; }
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                if (!_allowMultipleMatches) { _matchFound = true; }
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
+                    // Also needs to be considered a match right away if Path is included
+                    if (!_allowMultipleMatches) { _matchFound = true; }
                     _currToken = t;
                     return t;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
+            // note: inclusion of surrounding Object handled separately via FIELD_NAME
             break;
 
-        case ID_END_ARRAY:
-        case ID_END_OBJECT:
+        case ID_END_ARRAY: // END_ARRAY == 4
+        case ID_END_OBJECT: // END_OBJECT == 2
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+                    // We don't normally call filter methods ProcessingContext has ended;
+                    // but for now let's assume this is ok
+                    // 17-Jan-2017, tatu: Filter completion method was missing for arrays it seems?
+                    if (t == JsonToken.END_ARRAY) {
                         f.filterFinishArray();
+                    } else {
+                        // Filter does not know about FIELD_NAMEs, needs to know it is finishing Object
+                        // TODO: Verify what needs to be called here, potentially `filterFinishObject`
+                        //   which does not exist. Or, perhaps, nothing?
+//                        f.filterFinishObject();
+                    }
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
+                    // This is not a new match, just the end of a previously started structure
                     return (_currToken = t);
                 }
             }
             break;
 
-        case ID_FIELD_NAME:
+        case ID_FIELD_NAME: // FIELD_NAME == 5
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
-                if (f == TokenFilter.INCLUDE_ALL) {
+                if (f == TokenFilter.INCLUDE_ALL) { // Field name criteria matched (e.g. PathPropertyFilter)
                     _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                    // If path is included, it means FIELD_NAME is needed as well
+                    // Also: may need to start buffering START_OBJECT too
+                    if (!_includePath && _includeImmediateParent && !_headContext.isStartHandled()) {
                         t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                         _exposedContext = _headContext;
+                        // Do not set match found yet, FIELD_NAME is the trigger, not START_OBJECT
+                         _currToken = t;
+                         return t; // return START_OBJECT
                     }
-                    }
+                    // Ok: FIELD_NAME is included, and potentially its value(s?)
+                    if (!_allowMultipleMatches) { _matchFound = true; }
                     return (_currToken = t);
                 }
-                if (f == null) {
+                if (f == null) { // Filter indicated FIELD_NAME and value are to be skipped
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
+                // Filter needs to check the value associated with FIELD_NAME
                 f = f.includeProperty(name);
-                if (f == null) {
+                if (f == null) { // Filter indicated value is to be skipped
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
-                _itemFilter = f;
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
+                _itemFilter = f; // Filter to apply to the value
+                if (f == TokenFilter.INCLUDE_ALL) { // Value is to be included
+                    if (_includePath) { // If path included, return FIELD_NAME now
+                        if (!_allowMultipleMatches) { _matchFound = true; }
                         return (_currToken = t);
                     }
+                    // If path not included, FIELD_NAME is skipped.
+                    // We need to check if START_OBJECT needs buffering/output first
+                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                         t = _headContext.nextTokenToRead(); // returns START_OBJECT
+                         _exposedContext = _headContext;
+                         _currToken = t;
+                          // Do not set match found yet, value token will trigger it
+                          return t; // Return START_OBJECT
                       }
-                if (_includePath) {
+                    // Otherwise, proceed to read the value token in the next iteration (_nextToken2)
+                } else { // A specific filter `f` applies to the value
+                    if (_includePath) { // If path included, buffer and possibly return FIELD_NAME
                         t = _nextTokenWithBuffering(_headContext);
                         if (t != null) {
+                            // Got FIELD_NAME via buffering: considered match indicating path inclusion
+                            if (!_allowMultipleMatches) { _matchFound = true; }
                              _currToken = t;
                             return t;
                         }
                     }
+                    // If path not included or buffering didn't yield FIELD_NAME,
+                    // proceed to read value token, filter `f` is active.
+                }
+                // We get here if FIELD_NAME is not returned; indicates need to fetch value token next
+                // which will be handled by the default processing loop
                 break;
             }
 
-        default: // scalar value
+        default: // scalar value token
             f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
+            if (f == TokenFilter.INCLUDE_ALL) { // Value included due to filter context
+                 if (!_allowMultipleMatches) { _matchFound = true; }
                 return (_currToken = t);
             }
-            if (f != null) {
+            if (f != null) { // Must check specific filter
                 f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
+                if ((f == TokenFilter.INCLUDE_ALL) // checkValue might return INCLUDE_ALL
+                        || ((f != null) && f.includeValue(delegate))) { // Filter includes this value
+                     if (!_allowMultipleMatches) { _matchFound = true; }
                     return (_currToken = t);
                 }
             }
-            // Otherwise not included (leaves must be explicitly included)
+            // Otherwise value not included
             break;
         }
 
-        // We get here if token was not yet found; offlined handling
+        // We get here if token was not yet found; delegate to recursive call
+        // which heads to the top of the loop or reads more tokens via delegate
         return _nextToken2();
     }
\ No newline at end of file
