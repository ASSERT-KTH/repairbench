diff --git a/tmp/61997c6c-0567-4332-b9fd-22e7d41a9940_buggy.java b/tmp/24fd4b3a-e52a-4e7c-8d80-c77336be4d56_fixed.java
index 82cd856..2c9757e 100644
--- a/tmp/61997c6c-0567-4332-b9fd-22e7d41a9940_buggy.java
+++ b/tmp/24fd4b3a-e52a-4e7c-8d80-c77336be4d56_fixed.java
@@ -1,213 +1,271 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
+        // Add this check at the beginning
+        // If we don't allow multiple matches, and the first match was completed
+        // (which implies includePath was false), return null.
+        if (!_allowMultipleMatches && _matchComplete) {
+            return null;
+        }
+
+        // [Original comment block - retained for context]
         //Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
         // check for no buffered context _exposedContext - null
         //If all the conditions matches then check for scalar / non-scalar property
             //if not scalar and ended successfully, then return null
             //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
             // then return null
+
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
+// Is this guaranteed to work without further checks? Or maybe it should be current token of delegate?
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
-                    break;
+                    // Context fully processed.
+                    break; // Break loop to read next token from delegate
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
-        // If not, need to read more. If we got any:
+        // If not buffered, need to read more.
         JsonToken t = delegate.nextToken();
         if (t == null) {
-            // no strict need to close, since we have no state here
+            // reached end-of-input
             return (_currToken = t);
         }
 
-        // otherwise... to include or not?
+        // otherwise... apply filter logic
         TokenFilter f;
 
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // filter indicates skip
                 delegate.skipChildren();
-                break;
+                break; // Need to fetch next token
             }
-            // Otherwise still iffy, need to check
+            // Filter defined, apply it to the context
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // context filter indicates skip
                 delegate.skipChildren();
-                break;
+                break; // Need to fetch next token
             }
+            // Check specific filter for START_ARRAY
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
-            _itemFilter = f;
+            _itemFilter = f; // Update filter for items within this array
             if (f == TokenFilter.INCLUDE_ALL) {
+                // Array included, create context and return START_ARRAY
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
-            _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
+            if (f == null) { // filterStartArray decided to exclude
+                delegate.skipChildren();
+                break; // Need to fetch next token
+            }
+            // Array possibly included (f != null), but needs filtering
+            _headContext = _headContext.createChildArrayContext(f, false); // Not fully included yet
             if (_includePath) {
+                // If path included, try buffering this START_ARRAY
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
+            // If !_includePath or buffering skipped START_ARRAY, break loop to fetch next token (first element or END_ARRAY)
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // filter indicates skip
                 delegate.skipChildren();
-                break;
+                break; // Need to fetch next token
             }
-            // Otherwise still iffy, need to check
+            // Filter defined, apply it to the context
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // context filter indicates skip
                 delegate.skipChildren();
-                break;
+                break; // Need to fetch next token
             }
+            // Check specific filter for START_OBJECT
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
-            _itemFilter = f;
+            _itemFilter = f; // Update filter for items within this object
             if (f == TokenFilter.INCLUDE_ALL) {
+                 // Object included, create context and return START_OBJECT
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
-            _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
+            if (f == null) { // filterStartObject decided to exclude
+                delegate.skipChildren();
+                break; // Need to fetch next token
+            }
+            // Object possibly included (f != null), but needs filtering
+            _headContext = _headContext.createChildObjectContext(f, false); // Not fully included yet
             if (_includePath) {
+                 // If path included, try buffering this START_OBJECT
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
+             // If !_includePath or buffering skipped START_OBJECT, break loop to fetch next token (first field or END_OBJECT)
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+                    // Fixed: call correct finish method based on context
+                    if (_headContext.inArray()) {
                         f.filterFinishArray();
+                    } else {
+                        f.filterFinishObject();
+                    }
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
+                    // Return END token only if corresponding START was returned
                     return (_currToken = t);
                 }
             }
+            // If START wasn't returned, END shouldn't be either. Break to fetch next token.
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
-                f = _headContext.setFieldName(name);
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
-                            _exposedContext = _headContext;
-                        }
+                f = _headContext.setFieldName(name); // Get filter from context for this field name
+                if (f == TokenFilter.INCLUDE_ALL) { // Context includes all fields
+                    _itemFilter = f; // Value filter is also INCLUDE_ALL
+                    if (_includePath) {
+                        // Return FIELD_NAME, value will be handled by subsequent calls
+                        return (_currToken = t);
                     }
+                    // If !_includePath, skip FIELD_NAME, fall through to handle value
+                    // (need to advance delegate below)
+                } else if (f == null) { // Context filter excludes this field name
+                    delegate.nextToken(); // Consume field name from delegate
+                    delegate.skipChildren(); // Skip value
+                    break; // Fetch next token
+                } else { // Context provides a specific filter 'f'
+                    TokenFilter valueFilter = f.includeProperty(name); // Check if this specific property is included
+                    if (valueFilter == null) { // Property explicitly excluded
+                        delegate.nextToken(); // Consume field name
+                        delegate.skipChildren(); // Skip value
+                        break; // Fetch next token
+                    }
+                    // Property included, 'valueFilter' applies to the value
+                    _itemFilter = valueFilter;
+                    if (valueFilter == TokenFilter.INCLUDE_ALL) { // Value to be fully included
+                        if (_includePath) {
+                            // Return FIELD_NAME now, value handled later
                             return (_currToken = t);
                         }
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
-                    break;
+                        // If !_includePath, skip FIELD_NAME, fall through to handle value
+                    } else { // Value needs filtering based on 'valueFilter'
+                        if (_includePath) {
+                            // Try buffering, may return FIELD_NAME or START_OBJECT/ARRAY for value
+                            JsonToken buffered = _nextTokenWithBuffering(_headContext);
+                            if (buffered != null) {
+                                _currToken = buffered;
+                                return buffered;
                             }
-                f = f.includeProperty(name);
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
+                            // Buffering indicates value is fully filtered out, break to fetch next token
                             break;
                         }
-                _itemFilter = f;
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
-                        return (_currToken = t);
-                    }
+                        // If !_includePath, skip FIELD_NAME, fall through to handle value
                     }
-                if (_includePath) {
-                    t = _nextTokenWithBuffering(_headContext);
-                    if (t != null) {
-                        _currToken = t;
-                        return t;
                 }
+                // Fall-through for cases where !includePath:
+                // Need to advance delegate past FIELD_NAME to get value token for 'default' case
+                t = delegate.nextToken();
+                if (t == null) { // Should not happen normally unless invalid JSON
+                    return (_currToken = t);
                 }
-                break;
+                // Now 't' holds the value token, fall through to 'default'
             }
+            // FALL THROUGH intended
 
-        default: // scalar value
-            f = _itemFilter;
+        default: // scalar value, or START/END token for the value after FIELD_NAME when !includePath
+            f = _itemFilter; // Get the filter determined by context or FIELD_NAME match
             if (f == TokenFilter.INCLUDE_ALL) {
+                // Value is included without further checks
                 return (_currToken = t);
             }
             if (f != null) {
-                f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
+                // Check if the current token 't' should be included based on filter 'f'
+                f = _headContext.checkValue(f); // Apply context check too
+                boolean include = false;
+                if (f == TokenFilter.INCLUDE_ALL) {
+                    include = true;
+                } else if (f != null) {
+                    // Check based on token type (scalar or structure start)
+                    if (t.isScalarValue()) {
+                        include = f.includeValue(delegate); // Use delegate for value access
+                    } else if (t == JsonToken.START_ARRAY) {
+                         include = (f.filterStartArray() != null);
+                    } else if (t == JsonToken.START_OBJECT) {
+                         include = (f.filterStartObject() != null);
+                    }
+                    // Other tokens (END_ARRAY, END_OBJECT, FIELD_NAME) shouldn't normally be checked here
+                    // due to logic in other cases.
+                }
+
+                if (include) {
+                    // Value token 't' is included.
+                    // Add this logic for _allowMultipleMatches=false and _includePath=false
+                    if (!_allowMultipleMatches && !_includePath && t.isScalarValue()) {
+                        // If this is a scalar value, it's the only token for this match.
+                        // The check at the beginning of the method ensures this only happens once.
+                        _matchComplete = true;
+                    }
+                    // End of added logic
                     return (_currToken = t);
                 }
             }
-            // Otherwise not included (leaves must be explicitly included)
+            // Value token 't' is not included, break to fetch next token
             break;
-        }
+        } // end switch
 
-        // We get here if token was not yet found; offlined handling
+        // If we reach here, the token 't' was filtered out or was a structural token
+        // that required further processing (like START_ARRAY/OBJECT without includePath).
+        // Need to fetch the next token from the delegate by looping.
+        // Calling _nextToken2() is assumed to handle this looping or recursion.
         return _nextToken2();
     }
\ No newline at end of file
