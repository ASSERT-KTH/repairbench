diff --git a/tmp/16d3d9aa-9bbe-4352-8344-183b40c089a4_buggy.java b/tmp/2ba2078a-8338-457c-ade3-e58b7e6242ce_fixed.java
index 82cd856..20ecd6b 100644
--- a/tmp/16d3d9aa-9bbe-4352-8344-183b40c089a4_buggy.java
+++ b/tmp/2ba2078a-8338-457c-ade3-e58b7e6242ce_fixed.java
@@ -1,213 +1,257 @@
+    // Add this field to the class FilteringParserDelegate:
+    protected boolean _matchFound = false;
+
     @Override
     public JsonToken nextToken() throws IOException
     {
-    	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-    	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
-        // Anything buffered?
+        // I. Handle any buffered tokens first
         TokenFilterContext ctxt = _exposedContext;
-
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
-                    return t;
+                    return t; // Return buffered token, don't change state here
                 }
-                // all done with buffered stuff?
+                // If buffer ended for this context, try moving up
                 if (ctxt == _headContext) {
                     _exposedContext = null;
+                    // Need to check delegate's current token? Original code had this for arrays.
+                    // This part seems potentially fragile, but let's keep original logic.
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
+                        // Maybe JsonToken.END_ARRAY? Let's trust original.
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
-                    break;
+                    // Original code also had a commented out check for FIELD_NAME.
+                    // Let's assume breaking out handles object end correctly.
+                    break; // Buffer drained for this level
                 }
-                // If not, traverse down the context chain
+                // Eager-pop context? Seems required for nested buffered matches.
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
+                if (ctxt == null) { // Should not happen
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
-        // If not, need to read more. If we got any:
+        // II. Check if filtering is already complete
+        // (if multiple matches disallowed, and we already found one)
+        if (!_allowMultipleMatches && _matchFound) {
+            // No more tokens to be filtered, buffer is empty
+            return null;
+        }
+
+        // III. No buffered tokens, need to read from delegate
         JsonToken t = delegate.nextToken();
         if (t == null) {
-            // no strict need to close, since we have no state here
-            return (_currToken = t);
+            // End-of-input
+            _currToken = t;
+            return t;
         }
 
-        // otherwise... to include or not?
+        // IV. Apply filter logic
         TokenFilter f;
 
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
+                // Included because parent is included. Propagate inclusion.
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // Excluded by parent filter. Skip.
                 delegate.skipChildren();
-                break;
+                break; // Continue filtering via _nextToken2
             }
-            // Otherwise still iffy, need to check
+            // Parent filter active, check value itself.
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // Excluded by value check (index etc)
                 delegate.skipChildren();
-                break;
+                break; // Continue filtering via _nextToken2
             }
+            // Filter wants to check contents. Apply specific filter method.
             if (f != TokenFilter.INCLUDE_ALL) {
+                // Let filter decide if array itself is included
                 f = f.filterStartArray();
             }
-            _itemFilter = f;
+            _itemFilter = f; // Filter for elements
+
             if (f == TokenFilter.INCLUDE_ALL) {
+                // Array included by filter rule. This is a match.
                 _headContext = _headContext.createChildArrayContext(f, true);
+                if (!_allowMultipleMatches) {
+                     _matchFound = true; // Mark match found
+                }
                 return (_currToken = t);
             }
+            if (f == null) { // Filter excluded array starting from here.
+                delegate.skipChildren();
+                break; // Continue filtering via _nextToken2
+            }
+            // Filter is specific, create context but don't fully include yet.
             _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
+            // Need buffering if path included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
-                    return t;
+                    return t; // Return buffered START_ARRAY
                 }
+                // If buffering yielded null, _nextToken2 will handle subsequent tokens
             }
+            // If no buffering or buffer empty now, let _nextToken2 handle content
             break;
 
         case ID_START_OBJECT:
+            // Symmetric logic to START_ARRAY
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) {
                 delegate.skipChildren();
                 break;
             }
-            // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartObject();
+                 f = f.filterStartObject(); // Let filter decide if object itself is included
             }
-            _itemFilter = f;
+            _itemFilter = f; // Filter for properties
+
             if (f == TokenFilter.INCLUDE_ALL) {
+                // Object included by filter rule. This is a match.
                 _headContext = _headContext.createChildObjectContext(f, true);
+                if (!_allowMultipleMatches) {
+                    _matchFound = true; // Mark match found
+                }
                 return (_currToken = t);
             }
+            if (f == null) { // Filter excluded object starting from here.
+                delegate.skipChildren();
+                break;
+            }
+            // Filter is specific, create context.
             _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
-                    return t;
+                    return t; // Return buffered START_OBJECT
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+                     // Call finish method based on context type
+                     if (_headContext.inArray()) {
                          f.filterFinishArray();
+                     } else if (_headContext.inObject()) { // More robust check
+                         f.filterFinishObject();
+                     }
                 }
                 _headContext = _headContext.getParent();
-                _itemFilter = _headContext.getFilter();
+                // Update filter based on parent context; use _rootFilter if back at top level
+                _itemFilter = (_headContext == null) ? _rootFilter : _headContext.getFilter();
                 if (returnEnd) {
+                    // Return END token; does not affect match status.
                     return (_currToken = t);
                 }
+                // If START was skipped, END is also skipped.
             }
-            break;
+            break; // Continue filtering via _nextToken2
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
-                f = _headContext.setFieldName(name);
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
+                // Determine filter for the value pointed to by this field
+                TokenFilter valueFilter = _headContext.setFieldName(name);
+                _itemFilter = valueFilter; // Update item filter for subsequent value
+
+                if (valueFilter == null) { // Value is definitely excluded
+                    delegate.nextToken(); // Consume value token(s) from delegate
+                    delegate.skipChildren();
+                    break; // Continue filtering via _nextToken2
+                }
+
+                // Value might be included (filter is INCLUDE_ALL or specific filter)
+                if (valueFilter == TokenFilter.INCLUDE_ALL) {
+                    if (_includePath) {
+                        // Path included, return FIELD_NAME token
+                        return (_currToken = t); // Not a core match trigger itself
+                    }
+                    // Path not included, do not return FIELD_NAME token.
+                    // Handle optional immediate parent buffering.
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
-                            _exposedContext = _headContext;
-                        }
+                        // This requires buffering START_OBJECT first
+                        t = _nextTokenWithBuffering(_headContext);
+                        if (t != null) {
+                            _currToken = t;
+                            return t; // Return START_OBJECT
                         }
-                    return (_currToken = t);
+                        // If buffering yields null, fall through to _nextToken2
                     }
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
+                    // Otherwise just continue; value token will be handled by next call or _nextToken2
                     break;
                 }
-                f = f.includeProperty(name);
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
-                    break;
-                }
-                _itemFilter = f;
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
-                        return (_currToken = t);
-                    }
-                }
+                // Value has a specific filter.
                 if (_includePath) {
+                    // Path included, value has specific filter => need buffering.
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
-                        return t;
+                        return t; // Return buffered FIELD_NAME (or START_OBJECT)
                     }
+                    // If buffering yields null, fall through to _nextToken2
                 }
+                // Path not included, do not return FIELD_NAME token.
+                // Value token will be handled by next call or _nextToken2
                 break;
             }
 
-        default: // scalar value
+        default: // Scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
+                // Included due to parent context/filter. This is a match.
+                if (!_allowMultipleMatches) {
+                    _matchFound = true; // Mark match found
+                }
                 return (_currToken = t);
             }
             if (f != null) {
-                f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
+                f = _headContext.checkValue(f); // Apply context check first
+                // Check if filter includes the scalar value
+                if ((f == TokenFilter.INCLUDE_ALL) // checkValue might return INCLUDE_ALL
+                        || ((f != null) && f.includeValue(delegate)))
+                {
+                     // Included by specific filter rule. This is a match.
+                     if (!_allowMultipleMatches) {
+                         _matchFound = true; // Mark match found
+                     }
                     return (_currToken = t);
                 }
+                // Excluded by filter
             }
-            // Otherwise not included (leaves must be explicitly included)
-            break;
-        }
+            // Value excluded (f=null initially, or filter rejected it)
+            break; // Continue filtering via _nextToken2
+        } // End switch
 
-        // We get here if token was not yet found; offlined handling
+        // V. If break was hit, delegate to _nextToken2 to skip or find next token
+        // _nextToken2 presumably starts its loop again, eventually calling nextToken()
+        // on the delegate, and the check II at the top of this method will catch
+        // the _matchFound state if applicable.
         return _nextToken2();
     }
\ No newline at end of file
