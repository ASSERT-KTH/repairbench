diff --git a/tmp/297cfce5-0b46-4d90-9fc2-4cbcf13906c0_buggy.java b/tmp/5d21c611-fc3d-4a8a-b952-4af159eec9fe_fixed.java
index 82cd856..412f552 100644
--- a/tmp/297cfce5-0b46-4d90-9fc2-4cbcf13906c0_buggy.java
+++ b/tmp/5d21c611-fc3d-4a8a-b952-4af159eec9fe_fixed.java
@@ -1,213 +1,280 @@
+    // NOTE: Requires adding the field to the class:
+    // protected boolean _matchFound = false;
+
     @Override
     public JsonToken nextToken() throws IOException
     {
-    	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-    	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
-
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
+                        // Minor tweak: reset _currToken? Or is it fine? Let's trust original logic.
+                        // Also: note that we may have returned START_ARRAY previously...
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
+                    // [JACKSON-1 Filtering]: Was missing check for Object context? Added in 2.10
+                    if (ctxt.inObject()) {
                          t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
+                         // We likely just returned FIELD_NAME, delegate is pointing at it.
+                         // Let's see if original code had anything here... it didn't.
+                         // Rely on delegate.nextToken() advancing past value.
                     }
-                    */
-                    break;
+                    break; // Break while loop
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
-        // If not, need to read more. If we got any:
+        // If not, need to read more.
         JsonToken t = delegate.nextToken();
         if (t == null) {
-            // no strict need to close, since we have no state here
+            // End of input
+            // Need to check if possibly END_OBJECT/ARRAY needs to be returned?
+            // Context should be root context, still active?
+            /*
+            if (_headContext != null && !_headContext.isRoot()) {
+                // Error? Or auto-close? Let's assume caller handles it?
+            }
+            */
             return (_currToken = t);
         }
 
         // otherwise... to include or not?
         TokenFilter f;
 
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
+                // Check multiple matches constraint
+                if (!_allowMultipleMatches || !_matchFound) {
+                    _matchFound = true; // Mark first match found (or multiple allowed)
                     return (_currToken = t);
                 }
-            if (f == null) { // does this occur?
+                // Skip - already matched, multiple not allowed
+                delegate.skipChildren(); // Skip the array content from delegate
+                // Do not return START_ARRAY, proceed to find next token after array
+                break; // Break switch, will go to _nextToken2() to find next token
+            }
+            if (f == null) { // skip
                 delegate.skipChildren();
                 break;
             }
-            // Otherwise still iffy, need to check
+            // Check filter with context
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // skip
                 delegate.skipChildren();
                 break;
             }
+            // Apply array filtering if needed
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
-            _itemFilter = f;
-            if (f == TokenFilter.INCLUDE_ALL) {
+            _itemFilter = f; // Item filter for elements
+            if (f == TokenFilter.INCLUDE_ALL) { // Filter chain resulted in INCLUDE_ALL
                 _headContext = _headContext.createChildArrayContext(f, true);
+                // Check multiple matches constraint
+                if (!_allowMultipleMatches || !_matchFound) {
+                    _matchFound = true; // Mark match found
                     return (_currToken = t);
                 }
+                // Skip
+                delegate.skipChildren();
+                break;
+            }
+             // Filter resulted in specific filter, create context
              _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
+            // Buffering only needed if path included (usually for START_OBJECT)
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
+                    // NOTE: Buffering logic might need _matchFound updates too
                     _currToken = t;
                     return t;
                 }
             }
+            // Proceed to find first element via _nextToken2()
             break;
 
         case ID_START_OBJECT:
              f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                 // Check multiple matches constraint
+                if (!_allowMultipleMatches || !_matchFound) {
+                    _matchFound = true;
                     return (_currToken = t);
                 }
-            if (f == null) { // does this occur?
+                // Skip
+                delegate.skipChildren();
+                break;
+            }
+            if (f == null) { // skip
                 delegate.skipChildren();
                 break;
             }
-            // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // skip
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                // Check multiple matches constraint
+                if (!_allowMultipleMatches || !_matchFound) {
+                    _matchFound = true;
                     return (_currToken = t);
+                }
+                // Skip
+                delegate.skipChildren();
+                break;
             }
              _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
+                    // NOTE: Buffering logic might need _matchFound updates too
                     _currToken = t;
                     return t;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
+             // Proceed to find first field via _nextToken2()
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
+                     if (t == JsonToken.END_ARRAY) { f.filterFinishArray(); } else { f.filterFinishObject(); }
                 }
                 _headContext = _headContext.getParent();
-                _itemFilter = _headContext.getFilter();
+                // Reset item filter based on the new parent context
+                _itemFilter = (_headContext == null) ? null : _headContext.getFilter();
                 if (returnEnd) {
+                    // Return END token only if START was handled
+                    // Do not check _matchFound here, END does not constitute a value match
                     return (_currToken = t);
                 }
+                // If corresponding START was skipped, skip END as well.
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
-                f = _headContext.setFieldName(name);
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
+                // Ask head context for filter appropriate for this field's value
+                TokenFilter valueFilter = _headContext.setFieldName(name);
+
+                // Property itself excluded?
+                if (valueFilter == null) {
+                    delegate.nextToken(); // consume field name from delegate
+                    delegate.skipChildren(); // skip value
+                    break;
+                }
+                // Property included fully?
+                if (valueFilter == TokenFilter.INCLUDE_ALL) {
+                    _itemFilter = valueFilter; // Value is included
+                    // Check multiple matches constraint before potentially returning FIELD_NAME or START_OBJECT
+                    if (!_allowMultipleMatches || !_matchFound) {
+                        // OK to proceed (first match or multiple allowed)
+                        if (_includePath) {
+                            _matchFound = true; // Mark match found as FIELD_NAME is returned
+                            return (_currToken = t);
+                        }
+                        // If !_includePath, FIELD_NAME not returned, but maybe START_OBJECT needs to be?
                          if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                             // Expose START_OBJECT of parent, do not mark match yet.
+                             // Let _matchFound be set when value token(s) are returned.
+                            t = _headContext.nextTokenToRead();
                             _exposedContext = _headContext;
+                             if (t != null) { // Should be START_OBJECT
+                                 _currToken = t;
+                                 return t;
                               }
                          }
-                    return (_currToken = t);
+                         // If neither of above, just break. Value will be handled by next call.
+                         // _matchFound is NOT set here yet; value will trigger it.
+                    } else {
+                        // Skip property - already matched, multiple not allowed
+                        delegate.nextToken(); // Consume value node
+                        delegate.skipChildren(); // Skip children
                     }
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
+                    // Break whether we returned, skipped or are just proceeding to value
                     break;
                 }
-                f = f.includeProperty(name);
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
-                    break;
-                }
-                _itemFilter = f;
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
-                        return (_currToken = t);
-                    }
-                }
+
+                // Property included with a specific filter
+                _itemFilter = valueFilter;
+
                 if (_includePath) {
+                     // Check multiple matches constraint before potentially returning/buffering
+                     if (!_allowMultipleMatches || !_matchFound) {
+                         // OK to proceed
+                         _matchFound = true; // Mark match found as FIELD_NAME/START is returned/buffered
                          t = _nextTokenWithBuffering(_headContext);
                          if (t != null) {
                              _currToken = t;
                              return t;
                          }
+                         // If buffering didn't yield token, break. Value handled next.
+                     } else {
+                         // Skip property - already matched, multiple not allowed
+                         delegate.nextToken();
+                         delegate.skipChildren();
+                         // Break switch to proceed scan after skipped value
                      }
+                }
+                // If !_includePath, or match skipped, break. Value handled next (_itemFilter is set).
+                // _matchFound only set above if _includePath was true and match was allowed.
                 break;
             }
 
-        default: // scalar value
+        default: // scalar value (VALUE_STRING, VALUE_NUMBER_INT, etc.)
             f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                return (_currToken = t);
-            }
-            if (f != null) {
-                f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
+            if (f == null) { break; } // Skip if item filter is null
+
+            // Check filter in context (for array index etc)
+            TokenFilter fctxt = _headContext.checkValue(f);
+            if (fctxt == null) { break; } // Skip if context check yields null
+
+            // Include if context check yields INCLUDE_ALL or specific filter includes the value
+            if (fctxt == TokenFilter.INCLUDE_ALL || fctxt.includeValue(delegate)) {
+                // Value is included. Check multiple matches constraint.
+                if (!_allowMultipleMatches || !_matchFound) {
+                    // OK to return (first match or multiple allowed)
+                    _matchFound = true; // Mark match found
                     return (_currToken = t);
                 }
+                // else: Skip value - already matched, multiple not allowed
             }
-            // Otherwise not included (leaves must be explicitly included)
+            // If not included, or skipped, break to continue scan.
             break;
         }
 
-        // We get here if token was not yet found; offlined handling
+        // We get here if token was filtered out, skipped, or requires further context (buffering empty)
+        // Need ensure state (like _itemFilter, _headContext) is correct for the next call.
         return _nextToken2();
     }
\ No newline at end of file
