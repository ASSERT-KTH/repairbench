diff --git a/tmp/411e1a55-fbd0-4777-bfac-8fe654988c57_buggy.java b/tmp/9810497a-8a17-4053-8d39-9fe836eed69c_fixed.java
index cae0024..689fd4a 100644
--- a/tmp/411e1a55-fbd0-4777-bfac-8fe654988c57_buggy.java
+++ b/tmp/9810497a-8a17-4053-8d39-9fe836eed69c_fixed.java
@@ -1,103 +1,136 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+        // Calendar methods if the target field is HOUR or larger.
+        // This prevents issues during DST transitions where Calendar.set() on lower
+        // fields might trigger unnecessary recalculations and change the DST offset.
+        if (field == Calendar.HOUR_OF_DAY || field == Calendar.HOUR || field == Calendar.AM_PM
+                || field == Calendar.DATE || field == Calendar.DAY_OF_YEAR || field == DateUtils.SEMI_MONTH
+                || field == Calendar.MONTH || field == Calendar.YEAR) {
+            // reset time Milliseconds, Seconds and Minutes
+            val.set(Calendar.MILLISECOND, 0);
+            val.set(Calendar.SECOND, 0);
+            val.set(Calendar.MINUTE, 0);
+        }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
+        // fields is expected to be an array like:
+        // {{Calendar.MILLISECOND}, {Calendar.SECOND}, {Calendar.MINUTE}, {Calendar.HOUR_OF_DAY, Calendar.HOUR}, ...}
+        // It iterates from smaller fields to larger fields.
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
                     //This is our field... we stop looping
                     if (round && roundUp) {
                         if (field == DateUtils.SEMI_MONTH) {
                             //This is a special case that's hard to generalize
                             //If the date is 1, we round up to 16, otherwise
                             //  we subtract 15 days and add 1 month
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
+                        // } else if (field == Calendar.AM_PM) { // Original code didn't handle AM_PM rounding explicitly here
+                        //     // If AM/PM is to be rounded, midnight becomes noon, noon becomes midnight
+                        //     // val.add(Calendar.HOUR_OF_DAY, 12); // This might be the logic
                         } else {
-                            //We need at add one to this field since the
+                            //We need to add one to this field since the
                             //  last number causes us to round up
+                            // Add to the primary field of the group (fields[i][0])
                             val.add(fields[i][0], 1);
                         }
                     }
-                    return;
+                    return; // Found the target field, modification complete.
                 }
             }
-            //We have various fields that are not easy roundings
+            
+            // Current field group fields[i] is smaller than the target field.
+            // We need to truncate this field group and determine if rounding affects the next level.
             int offset = 0;
             boolean offsetSet = false;
+            int currentField = fields[i][0]; // The primary field to truncate in this group.
+
             // These are special types of fields that require different rounding rules
+            // The switch is on the TARGET field ('field'), affecting how the CURRENT field ('currentField') is handled.
             switch (field) {
                 case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
+                    // When truncating/rounding to SEMI_MONTH, DATE handling is special.
+                    if (currentField == Calendar.DATE) {
+                        // If we're processing the DATE field group before reaching SEMI_MONTH:
+                        // Calculate offset within the 1-15 or 16-end range.
+                        offset = val.get(Calendar.DATE) - 1; // Offset from day 1
                         if (offset >= 15) {
-                            offset -= 15;
+                            offset -= 15; // Offset within the second half (0-15 range approx)
                         }
-                        //Record whether we're in the top or bottom half of that range
+                        // roundUp if day is 8-15 or 23-31
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
+                    // When truncating/rounding to AM_PM, HOUR_OF_DAY handling is special.
+                    if (currentField == Calendar.HOUR_OF_DAY) {
+                         // If we're processing the HOUR_OF_DAY field group before reaching AM_PM:
+                        // Calculate offset within the AM or PM block (0-11).
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
-                            offset -= 12;
+                            offset -= 12; // hours past noon (0-11)
                         }
+                        // roundUp if hour is 7-11 or 19-23. Original code had > 6.
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
+
+            // If not a special case handled above, calculate offset and roundUp based on standard field range.
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
+                int min = val.getActualMinimum(currentField);
+                int max = val.getActualMaximum(currentField);
                 // Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
+                offset = val.get(currentField) - min;
                 // Set roundUp if this is more than half way between the minimum and maximum
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+            
+            // Truncate the current field value.
+            // We need to remove the calculated offset from the current value.
+            if (currentField == Calendar.MILLISECOND) {
+                 // Specific fix for LANG-59 related test failure: avoid Calendar.set(MILLISECOND, 0)
+                 // which can cause DST issues. Use setTimeInMillis instead.
+                 // Offset for MILLISECOND is val.get(MILLISECOND) since min is 0.
+                 long T = val.getTimeInMillis();
+                 val.setTimeInMillis(T - offset); // Equivalent to T - (T % 1000)
+            } else {
+                 // For other fields (SECOND, MINUTE, HOUR_OF_DAY, etc.):
+                 // Truncate by setting the field to its minimum value.
+                 // The original calculation val.get(currentField) - offset achieves this:
+                 // val.get(currentField) - (val.get(currentField) - min) = min
+                 // This set call might still be problematic for SECOND/MINUTE near DST, but
+                 // it's handled by the preemptive LANG-59 fix if the target field is >= HOUR.
+                 // If the target field is MINUTE or SECOND, this set is called for smaller fields.
+                 val.set(currentField, val.get(currentField) - offset);
             }
+        }
+        // Should not happen if 'field' is valid and present in 'fields' array.
         throw new IllegalArgumentException("The field " + field + " is not supported");
 
     }
\ No newline at end of file
