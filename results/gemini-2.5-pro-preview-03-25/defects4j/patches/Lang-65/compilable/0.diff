diff --git a/tmp/246d1964-0904-4a1c-89ca-5a2a597ca03d_buggy.java b/tmp/dabd07e4-6f06-486a-a651-8251bbbba4f1_fixed.java
index cae0024..3deab6e 100644
--- a/tmp/246d1964-0904-4a1c-89ca-5a2a597ca03d_buggy.java
+++ b/tmp/dabd07e4-6f06-486a-a651-8251bbbba4f1_fixed.java
@@ -1,103 +1,126 @@
     /**
      * <p>Internal calculation method.</p>
      *
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
 
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+        // The logic for LANG-59 is integrated into the main loop below.
+        // Setting individual fields (especially MILLISECOND, SECOND, MINUTE)
+        // can cause Calendar to recalculatesaved state fields triggering bad
+        // behaviour around DST jumps. Following the set sets the time field
+        // which can be reset without this issue.
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
                     //This is our field... we stop looping
                     if (round && roundUp) {
                         if (field == DateUtils.SEMI_MONTH) {
                             //This is a special case that's hard to generalize
                             //If the date is 1, we round up to 16, otherwise
                             //  we subtract 15 days and add 1 month
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
+                        // ----------------- Fix for LANG-440 ---------------------- START ---------------
+                        // LANG-440: Improve rounding support for hour fields
+                        } else if (field == Calendar.AM_PM) {
+                            // This is a special case that's hard to generalize
+                            // If the time is 0, we round up to 12, otherwise
+                            //  we subtract 12 hours and add 1 day
+                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {
+                                val.add(Calendar.HOUR_OF_DAY, 12);
+                            } else {
+                                val.add(Calendar.HOUR_OF_DAY, -12);
+                                val.add(Calendar.DATE, 1);
+                            }
+                        // ----------------- Fix for LANG-440 ---------------------- END ---------------
                         } else {
                             //We need at add one to this field since the
                             //  last number causes us to round up
                             val.add(fields[i][0], 1);
                         }
                     }
                     return;
                 }
             }
             //We have various fields that are not easy roundings
             int offset = 0;
             boolean offsetSet = false;
             //These are special types of fields that require different rounding rules
+            int currentField = fields[i][0]; // The primary field for this level
             switch (field) {
                 case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
+                    if (currentField == Calendar.DATE) {
                         //If we're going to drop the DATE field's value,
                         //  we want to do this our own way.
                         //We need to subtrace 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
                         //If we're above 15 days adjustment, that means we're in the
                         //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
                         //Record whether we're in the top or bottom half of that range
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
+                    if (currentField == Calendar.HOUR_OF_DAY) {
                         //If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
+                int min = val.getActualMinimum(currentField);
+                int max = val.getActualMaximum(currentField);
                 //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
+                offset = val.get(currentField) - min;
                 //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
+                // Using multiplication avoids integer division potential issues
+                roundUp = offset * 2 > (max - min);
             }
             //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+            if (offset != 0) { // Only modify if the field is not already at its minimum
+                // Set the field to the minimum value for truncation
+                val.set(currentField, val.getActualMinimum(currentField));
+
+                // --- LANG-59 Fix ---
+                // For these fields, setting them affects the millisecond value
+                // of the calendar and may cause problems with DST. Reset the millisecond
+                // value by calling setTimeInMillis after the set. See LANG-59.
+                if (currentField == Calendar.MILLISECOND
+                 || currentField == Calendar.SECOND
+                 || currentField == Calendar.MINUTE) {
+                    val.setTimeInMillis(val.getTimeInMillis());
+                }
+                // --- End LANG-59 Fix ---
+            }
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
 
     }
\ No newline at end of file
