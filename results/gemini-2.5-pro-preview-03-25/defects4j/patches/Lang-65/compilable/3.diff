diff --git a/tmp/3b0c177a-899a-429a-9d00-205819086615_buggy.java b/tmp/d8b3a0bf-80db-40dc-98d3-cd81ce614d74_fixed.java
index cae0024..8ef98a6 100644
--- a/tmp/3b0c177a-899a-429a-9d00-205819086615_buggy.java
+++ b/tmp/d8b3a0bf-80db-40dc-98d3-cd81ce614d74_fixed.java
@@ -1,103 +1,133 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
+        // Check if year is too large for accurate calculations
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+        // Use Calendar.add() to modify fields smaller than the target field instead of Calendar.set().
+        // This avoids issues where set() recalculates DST incorrectly, particularly for
+        // MILLISECOND, SECOND, and MINUTE fields near DST transitions.
+        // See http://issues.apache.org/jira/browse/LANG-59
+        // Assumes the 'fields' array (static member, not shown) is ordered from smallest time unit (MILLISECOND) to largest (YEAR).
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
-        boolean roundUp = false;
+        boolean roundUp = false; // Stores whether the previous (smaller) field's value indicated rounding up.
+
+        // Iterate through the field levels defined in the 'fields' array (expected smallest to largest).
         for (int i = 0; i < fields.length; i++) {
+
+            // Check if the target field 'field' exists at the current level fields[i]
+            boolean fieldFound = false;
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                    fieldFound = true;
+                    break; // Target field found in this group
+                }
+            }
+
+            // If the target field was found at the current level:
+            if (fieldFound) {
+                // Apply rounding if requested ('round' is true) and if the previous, smaller field
+                // calculation determined we should round up ('roundUp' is true).
                 if (round && roundUp) {
+                    // Special handling for SEMI_MONTH field rounding
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // If date is 1, round to 16th; otherwise (it's 16), round to next month 1st.
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
+                    // General rounding: add 1 unit to the primary field of the current level.
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // Add 1 to the primary field of this level (e.g., add 1 hour if field is HOUR)
                         val.add(fields[i][0], 1);
                     }
                 }
+                // Modification stops once the target field level is processed.
                 return;
             }
-            }
-            //We have various fields that are not easy roundings
-            int offset = 0;
-            boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
-            switch (field) {
+
+            // If the target field was NOT found at level i:
+            // This means the fields at level 'i' are smaller than the target field.
+            // These fields need to be truncated (set to their minimum value),
+            // and we need to determine if their original value warrants rounding up
+            // the next higher field (which might be the target field in the next iteration).
+
+            int currentField = fields[i][0]; // The primary field for this level to be modified.
+            int offset = 0;           // The amount this field is above its minimum value.
+            boolean offsetSet = false; // Flag for special offset calculation.
+
+            // Special calculation for offset and roundUp decision for specific target fields (SEMI_MONTH, AM_PM)
+            // when processing smaller, contributing fields (DATE, HOUR_OF_DAY).
+            switch (field) { // Switch on the *target* field
                 case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                    // This case applies only if the target field is SEMI_MONTH.
+                    // We are processing a smaller field level 'i'. Check if it's DATE level.
+                    if (currentField == Calendar.DATE) {
+                        // Calculate offset from the start of the semi-month (1st or 16th)
                         offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
-                        //Record whether we're in the top or bottom half of that range
+                        // Determine roundUp based on midpoint (7) of the 15-day half
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
+                     // This case applies only if the target field is AM_PM.
+                     // We are processing a smaller field level 'i'. Check if it's HOUR_OF_DAY level.
+                    if (currentField == Calendar.HOUR_OF_DAY) {
+                        // Calculate offset from the start of the AM/PM period (0 or 12)
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
+                        // Determine roundUp based on midpoint (6) of the 12-hour half
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
+
+            // If offset wasn't determined by special rules, calculate it generally.
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
+                int min = val.getActualMinimum(currentField);
+                int max = val.getActualMaximum(currentField);
+                // Offset is the value relative to the minimum for this field.
+                offset = val.get(currentField) - min;
+                // Determine if rounding is needed based on whether the value is past the midpoint.
+                // Check against (max - min) / 2. Using multiplication avoids potential floating point issues and integer division truncation.
+                roundUp = offset * 2 > (max - min);
             }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+
+            // If the field is not already at its minimum value (offset > 0), truncate it
+            // by subtracting the calculated offset using add().
+            if (offset != 0) {
+                // *** THE FIX for LANG-59: Use add() instead of set() ***
+                // Subtracting the offset using add() effectively resets the field to its minimum value
+                // (e.g., add(MILLISECOND, -millis), add(SECOND, -seconds), add(DATE, -(day-1)) )
+                // while avoiding the DST recalculation issues associated with set().
+                val.add(currentField, -offset); // Use add() to adjust the field value
             }
+            // The 'roundUp' value calculated here is carried to the next loop iteration,
+            // potentially affecting the rounding of the next larger field group.
+        }
+
+        // If the loop finishes without finding the target field, it's unsupported.
+        // This implies 'field' was not a value present in the 'fields' array structure.
         throw new IllegalArgumentException("The field " + field + " is not supported");
 
     }
\ No newline at end of file
