diff --git a/tmp/18156686-45c8-4087-9673-8aae22b0793e_buggy.java b/tmp/0b0d9dfe-6629-48f3-9fc6-5f19acb85b2c_fixed.java
index cae0024..ffec3c4 100644
--- a/tmp/18156686-45c8-4087-9673-8aae22b0793e_buggy.java
+++ b/tmp/0b0d9dfe-6629-48f3-9fc6-5f19acb85b2c_fixed.java
@@ -1,103 +1,133 @@
     /**
      * <p>Internal calculation method.</p>
      *
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
+        // Note: fields is ordered from smaller units (MILLI..) to larger (YEAR, ERA)
+        // {MILLISECOND}, {SECOND}, {MINUTE}, {HOUR_OF_DAY, HOUR}, {DATE, DAY_OF_MONTH, AM_PM}, ...
+
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
 
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
+        // Calendar methods. The fix below uses val.add() instead of val.set()
+        // for time fields to avoid potential bugs, particularly related to DST transitions.
 
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+        // truncate milliseconds (handled by loop unless target is MILLISECOND)
+        // truncate seconds (handled by loop unless target is SECOND)
+        // truncate minutes (handled by loop unless target is MINUTE)
+        // reset time (partially handled by loop for HOUR fields)
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
+        // Iterate through field groups from smaller units (milliseconds) to larger ones
         for (int i = 0; i < fields.length; i++) {
+            int currentFieldGroupPrimary = fields[i][0]; // The primary field for this group (e.g., MILLISECOND, SECOND, ...)
+
+            // Check if the target field is part of the current field group
+            boolean fieldFound = false;
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                    fieldFound = true;
+                    break;
+                }
+            }
+
+            // If the target field is found in the current group
+            if (fieldFound) {
+                // Apply rounding if requested and roundUp flag is set from previous smaller field processing
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special case rounding for SEMI_MONTH
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
-                            val.add(fields[i][0], 1);
+                        // General rounding: add 1 to the primary field of the target group
+                        val.add(currentFieldGroupPrimary, 1);
                     }
                 }
+                // Modifications complete, exit the method
                 return;
             }
-            }
-            //We have various fields that are not easy roundings
+
+            // --- Truncation Logic ---
+            // If the target field hasn't been found yet, this group represents a field
+            // smaller than the target field. Truncate its value.
             int offset = 0;
             boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
+
+            // Special handling for SEMI_MONTH and AM_PM targets influences how
+            // rounding is determined for smaller fields like DATE or HOUR_OF_DAY.
             switch (field) {
                 case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
+                    // Use DATE value to determine rounding for SEMI_MONTH target
+                    if (currentFieldGroupPrimary == Calendar.DATE) {
+                        offset = val.get(Calendar.DATE) - 1; // Offset from day 1
                         if (offset >= 15) {
-                            offset -= 15;
+                            offset -= 15; // Offset within the second half of the month
                         }
-                        //Record whether we're in the top or bottom half of that range
+                        // Round up if past day 7/22 (roughly half of 15 days)
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
+                    // Use HOUR_OF_DAY value to determine rounding for AM_PM target
+                     if (currentFieldGroupPrimary == Calendar.HOUR_OF_DAY) {
+                        offset = val.get(Calendar.HOUR_OF_DAY); // Raw hour value
                         if (offset >= 12) {
-                            offset -= 12;
+                            offset -= 12; // Offset within the AM/PM half
                         }
+                        // Round up if past 6 hours (half of 12 hours)
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
+
+            // Default calculation for offset and rounding flag if not set by special case
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
+                int min = val.getActualMinimum(currentFieldGroupPrimary);
+                int max = val.getActualMaximum(currentFieldGroupPrimary);
+                // Offset is the value relative to the minimum for this field
+                offset = val.get(currentFieldGroupPrimary) - min;
+                // Determine rounding based on whether the value is past the midpoint
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+
+            // Truncate the current field group: Set the field to its minimum value.
+            // This is achieved by subtracting the calculated offset.
+            if (offset != 0) {
+                // LANG-59 fix: Use add() for time fields (MILLISECOND, SECOND, MINUTE, HOUR_OF_DAY)
+                // as set() can cause issues with DST.
+                if (currentFieldGroupPrimary == Calendar.MILLISECOND ||
+                    currentFieldGroupPrimary == Calendar.SECOND ||
+                    currentFieldGroupPrimary == Calendar.MINUTE ||
+                    currentFieldGroupPrimary == Calendar.HOUR_OF_DAY) // HOUR_OF_DAY is primary for the hour group
+                {
+                    val.add(currentFieldGroupPrimary, -offset);
+                } else {
+                    // For non-time fields (DATE, MONTH, YEAR), using set() to the minimum value is generally safe.
+                    // Calculate minimum value: currentValue - offset
+                    val.set(currentFieldGroupPrimary, val.get(currentFieldGroupPrimary) - offset);
                 }
+            }
+            // The roundUp flag determined here will be used when the target field group is processed.
+        }
+
+        // This part should not be reached if the field is supported
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
\ No newline at end of file
