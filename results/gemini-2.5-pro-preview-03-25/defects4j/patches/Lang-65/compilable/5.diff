diff --git a/tmp/926819a3-482c-4e31-99a5-3ee756bba885_buggy.java b/tmp/873a9215-3ff3-45ab-956a-3f842e776954_fixed.java
index cae0024..dc5eca3 100644
--- a/tmp/926819a3-482c-4e31-99a5-3ee756bba885_buggy.java
+++ b/tmp/873a9215-3ff3-45ab-956a-3f842e776954_fixed.java
@@ -1,103 +1,121 @@
     /**
      * <p>Internal calculation method.</p>
+     * Uses `add` instead of `set` for truncating time fields to mitigate LANG-59 DST issue.
      *
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
 
-
-        // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
-        // ----------------- Fix for LANG-59 ----------------------- END ----------------
+        // Store original hour & date for special AM/PM and SEMI_MONTH truncation logic
+        // Note: DateUtils.SEMI_MONTH is handled DIRECTLY in DateUtils trunc/round/ceiling methods
+        // It shouldn't be passed into modify. However, AM_PM is passed.
+        int originalHour = val.get(Calendar.HOUR_OF_DAY);
+        // int originalDate = val.get(Calendar.DATE); // Removed as SEMI_MONTH handled upstream
 
         boolean roundUp = false;
+        // fields is ordered from smaller units to larger units. e.g. MS -> SECOND -> MINUTE ...
         for (int i = 0; i < fields.length; i++) {
+
+            boolean fieldFound = false;
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                    fieldFound = true;
+                    break;
+                }
+            }
+
+            // If target field is found, handle rounding or specific truncation.
+            if (fieldFound) {
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // This case should not be reachable anymore, as SEMI_MONTH handled upstream
+                        // If it were reachable:
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // General rounding: Add 1 to the primary field of this group.
                         val.add(fields[i][0], 1);
                     }
-                    }
-                    return;
-                }
-            }
-            //We have various fields that are not easy roundings
-            int offset = 0;
-            boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
-            switch (field) {
-                case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
-                        if (offset >= 15) {
-                            offset -= 15;
-                        }
-                        //Record whether we're in the top or bottom half of that range
-                        roundUp = offset > 7;
-                        offsetSet = true;
-                    }
-                    break;
-                case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
-                        if (offset >= 12) {
-                            offset -= 12;
-                        }
-                        roundUp = offset > 6;
+                } else if (!round) {
+                    // Special truncation logic for specific fields when truncating
+                    // SEMI_MONTH is handled upstream.
+                    if (field == Calendar.AM_PM) {
+                         // Use original hour to decide truncation target (0 or 12)
+                         if (originalHour >= 12) { val.set(Calendar.HOUR_OF_DAY, 12); } else { val.set(Calendar.HOUR_OF_DAY, 0); }
+                         // Assuming set(HOUR_OF_DAY) is safe enough here for the final step.
+                    }
+                    // For other fields, truncation is complete based on loop processing.
+                }
+                return; // Done processing
+            }
+
+            // Target field not yet found. Process finer fields.
+            int currentField = fields[i][0]; // Primary field of the current group
+            int offset = 0; // Used for roundUp calculation offset logic
+            boolean offsetSet = false; // Flag for special AM_PM roundUp logic
+
+            int value = val.get(currentField); // Current value before truncation of this field
+
+             // Calculate roundUp flag based on current value
+             // Only AM_PM requires special rounding logic based on a finer field (HOUR_OF_DAY)
+             if (field == Calendar.AM_PM) {
+                 if (currentField == Calendar.HOUR_OF_DAY) {
+                     offset = value; // Hour value
+                     if (offset >= 12) { offset -= 12; } // Hour offset within AM/PM block
+                     roundUp = offset > 6; // Round up if hour is 7-11 or 19-23
                      offsetSet = true;
                  }
-                    break;
              }
+             // SEMI_MONTH rounding logic removed as it's handled upstream.
+
+            // Calculate standard roundUp if not special case
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
+                int min = val.getActualMinimum(currentField);
+                int max = val.getActualMaximum(currentField);
+                 // Protect against divide by zero or negative range
+                 if (max == min) {
+                    roundUp = false; // Cannot round if range is zero
+                 } else {
+                    offset = value - min; // Offset from minimum
+                    // Using multiply avoids double division and potential truncation
+                    roundUp = (offset * 2) > (max - min); // Round up if strictly greater than half way
                  }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
+
+            // Calculate offset from minimum for truncation amount
+            // Need the current value again as 'offset' might have been recalculated for rounding
+            value = val.get(currentField); // Refresh value before truncation calculation
+            int minTrunc = val.getActualMinimum(currentField);
+            int offsetTrunc = value - minTrunc;
+
+
+            // Truncate the current field group 'i'.
+            if (offsetTrunc != 0) { // Only modify if not already at minimum
+                // LANG-59 Fix: Use add() not set() for time fields to avoid DST issues
+                if (currentField == Calendar.MILLISECOND ||
+                    currentField == Calendar.SECOND ||
+                    currentField == Calendar.MINUTE ||
+                    currentField == Calendar.HOUR_OF_DAY) // Using HOUR_OF_DAY implies HOUR is also handled
+                {
+                    val.add(currentField, -offsetTrunc);
+                } else {
+                    // For non-time fields (DATE, MONTH, YEAR, etc.) set to minimum is definition of truncate
+                    // Using set() for these fields is assumed safer than for time fields regarding DST ambiguity
+                    val.set(currentField, minTrunc);
+                }
+            }
+        } // End of loop through field groups
+
+        // This should not normally be reached if fields array covers all supported fields
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
\ No newline at end of file
