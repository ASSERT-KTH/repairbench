diff --git a/tmp/3df29c73-2736-43f1-ba87-6d35f3404173_buggy.java b/tmp/5af61f67-e087-4dbd-823a-7752ee4e9869_fixed.java
index cae0024..1c84c8d 100644
--- a/tmp/3df29c73-2736-43f1-ba87-6d35f3404173_buggy.java
+++ b/tmp/5af61f67-e087-4dbd-823a-7752ee4e9869_fixed.java
@@ -1,103 +1,152 @@
     /**
      * <p>Internal calculation method.</p>
      *
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
+        // Note: fields array must be ordered from smallest to largest time unit
+        // eg. {{Calendar.MILLISECOND}, {Calendar.SECOND}, {Calendar.MINUTE}, {Calendar.HOUR_OF_DAY, Calendar.HOUR}, ... }
+
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
 
-
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+        // Using Calendar.add(), as done below, is thought to be potentially safer
+        // than Calendar.set() around DST transitions based on the discussion in LANG-59.
+        // No separate handling block is implemented here; the change is integrated into the main loop.
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
+        boolean roundUpSet = false; // Tracks if roundUp has been determined by the first modified field
+
         for (int i = 0; i < fields.length; i++) {
-            for (int j = 0; j < fields[i].length; j++) {
-                if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+            int[] currentFieldGroup = fields[i];
+            int primaryField = currentFieldGroup[0]; // The primary field representative of the group
+
+            // Check if the target field 'field' is part of the current field group
+            boolean fieldFound = false;
+            for (int currentField : currentFieldGroup) {
+                if (currentField == field) {
+                    fieldFound = true;
+                    break;
+                }
+            }
+
+            if (fieldFound) {
+                // Target field found. Stop processing smaller units.
+                // Apply rounding if needed, based on the roundUp flag from the first smaller field modified.
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special case: SEMI_MONTH rounding
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
+                    } else if (field == Calendar.AM_PM) {
+                        // Special case: AM_PM rounding adds 12 hours
+                        val.add(Calendar.HOUR_OF_DAY, 12);
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
-                            val.add(fields[i][0], 1);
+                        // General case: Add 1 to the primary field of the target group
+                        val.add(primaryField, 1);
                     }
                 }
-                    return;
+                return; // Modification complete
             }
-            }
-            //We have various fields that are not easy roundings
+
+            // We are processing a field group smaller than the target field (e.g., processing minutes when target is hours).
+            // We need to truncate this field group and determine if its value requires rounding up the target field.
             int offset = 0;
-            boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
+            boolean offsetSet = false; // Indicates if offset/currentRoundUp is handled by special logic
+            boolean currentRoundUp = false; // Rounding decision based *only* on this field group's value
+
+            // Handle special truncation/rounding logic based on the *target* field 'field'
+            // This logic applies when modifying a *smaller* field (primaryField) in preparation for the target field.
             switch (field) {
                 case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
+                    // Rules apply when modifying the DATE field (primaryField) because the target is SEMI_MONTH
+                    if (primaryField == Calendar.DATE) {
+                        int date = val.get(Calendar.DATE);
+                        offset = date - 1; // Offset from day 1
                         if (offset >= 15) {
-                            offset -= 15;
+                            offset -= 15; // Offset within the second half (0-15 approx)
                         }
-                        //Record whether we're in the top or bottom half of that range
-                        roundUp = offset > 7;
+                        // Round up if more than halfway through the semi-month period (7 days)
+                        currentRoundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
-                        if (offset >= 12) {
-                            offset -= 12;
+                    // Rules apply when modifying HOUR_OF_DAY (primaryField) because the target is AM_PM
+                    if (primaryField == Calendar.HOUR_OF_DAY) { // Assuming HOUR_OF_DAY is the primary field for its group
+                        int hourOfDay = val.get(Calendar.HOUR_OF_DAY);
+                        // Determine roundUp based on hour within the current 12-hour cycle (AM or PM)
+                        int hourInCycle = hourOfDay % 12; // Hour 0-11
+                        currentRoundUp = hourInCycle >= 6; // Round up if hour is 6 or more in the cycle
+
+                        // Determine offset for truncation: truncate to 0 for AM, 12 for PM
+                        offset = hourOfDay; // Default offset for AM (truncate to 0)
+                        if (hourOfDay >= 12) { // If PM
+                            offset = hourOfDay - 12; // Offset from 12 PM
                         }
-                        roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
+
+            // Default truncation/rounding logic if not handled by special cases
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
+                int min = val.getActualMinimum(primaryField);
+                int max = val.getActualMaximum(primaryField);
+                offset = val.get(primaryField) - min; // Offset from the minimum value
+                // Round up if value is more than halfway through the range
+                currentRoundUp = offset * 2 > (max - min);
             }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+
+            // Determine the overall roundUp decision based on the *first* field group modified.
+            // If a field is already at its minimum (offset == 0), it doesn't contribute to rounding up.
+            if (!roundUpSet && offset != 0) {
+                roundUp = currentRoundUp;
+                roundUpSet = true;
             }
+
+            // Truncate the current field group by removing the calculated offset.
+            if (offset != 0) {
+                // Use Calendar.add() instead of Calendar.set() to subtract the offset.
+                // This is hypothesized to be safer regarding DST issues per LANG-59.
+                val.add(primaryField, -offset);
+            }
+        }
+
+        // If the loop completes without finding the field, it's unsupported.
         throw new IllegalArgumentException("The field " + field + " is not supported");
+    }
+
+    // --- Helper fields/constants assumed to exist (replace with actual definitions) ---
 
+    /** Represents the middle of the month or the start of the second half. Placeholder value. */
+    private static class DateUtils { // Dummy class for context
+        public static final int SEMI_MONTH = 1001; // Example value
     }
+
+    /**
+     * Field groups, ordered smallest unit to largest. The first field in each group
+     * is considered the primary field for modification.
+     */
+    private static final int[][] fields = {
+        {Calendar.MILLISECOND},
+        {Calendar.SECOND},
+        {Calendar.MINUTE},
+        {Calendar.HOUR_OF_DAY, Calendar.HOUR}, // HOUR_OF_DAY is primary
+        {Calendar.AM_PM}, // Governed by HOUR_OF_DAY modification
+        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.DAY_OF_YEAR}, // DATE is primary
+        {DateUtils.SEMI_MONTH}, // Special handling based on DATE
+        {Calendar.MONTH},
+        {Calendar.YEAR}
+    };
\ No newline at end of file
