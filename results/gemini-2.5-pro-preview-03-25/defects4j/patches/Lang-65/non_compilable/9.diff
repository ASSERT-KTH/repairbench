diff --git a/tmp/e916e1e3-3713-4469-ac2c-790dc426d72c_buggy.java b/tmp/b11a225c-323e-40bf-b474-e7a415168c52_fixed.java
index cae0024..635baa3 100644
--- a/tmp/e916e1e3-3713-4469-ac2c-790dc426d72c_buggy.java
+++ b/tmp/b11a225c-323e-40bf-b474-e7a415168c52_fixed.java
@@ -1,103 +1,197 @@
     /**
      * <p>Internal calculation method.</p>
      *
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
+     * @throws IllegalArgumentException if the field is unsupported
      */
     private static void modify(Calendar val, int field, boolean round) {
+        // Ensure the Calendar is not excessively large to avoid calculation errors
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
 
-
-        // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
-        // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
-        boolean roundUp = false;
+        // If the target field is the smallest unit, no lower fields exist to modify.
+        // Rounding might still apply, handled below. Truncation is a no-op.
+        if (field == Calendar.MILLISECOND) {
+             // If rounding, the loop needs to run to potentially add 1ms if roundUp is true
+             // If truncating, nothing happens, so we could return early, but loop handles it.
+        }
+
+        boolean roundUp = false; // Stores whether the next higher field should be rounded up
+        boolean fieldFound = false; // Tracks if the specified 'field' is supported
+
+        // Step 1: Determine if rounding is needed.
+        // Iterate through the defined field levels (e.g., MILLISECOND, SECOND, MINUTE...).
+        // This loop calculates 'roundUp' based on the value of fields less significant
+        // than the target 'field'. It does *not* modify the calendar instance 'val' yet
+        // to avoid side effects (LANG-59).
         for (int i = 0; i < fields.length; i++) {
+            boolean isTargetLevel = false; // Is this level the one specified by 'field'?
+            // Check if any field constant in the current level matches the target 'field'
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                    isTargetLevel = true;
+                    fieldFound = true; // Mark the target field as supported and found
+                    break; // Found the target field in this level
+                }
+            }
+
+            // If this level IS the target level specified by 'field'
+            if (isTargetLevel) {
+                // Apply rounding *if* requested ('round' is true) and if the calculation
+                // based on the *previous*, less significant field indicated rounding ('roundUp' is true).
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // Special rounding logic for SEMI_MONTH field
                         if (val.get(Calendar.DATE) == 1) {
+                            // If date is 1, round up to 16 by adding 15 days
                             val.add(Calendar.DATE, 15);
                         } else {
+                            // If date is > 1 (must be in 16-end range), subtract 15 days
+                            // to get to 1st of month, then add 1 month to round up.
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                        // General rounding: Add 1 unit to the primary field of this level.
+                        // fields[i][0] is the main field constant for this level (e.g., Calendar.HOUR_OF_DAY).
                         val.add(fields[i][0], 1);
                     }
                 }
-                    return;
+                // We've processed the target level (including potential rounding).
+                // No need to examine further, more significant fields.
+                break; // Exit the 'fields' loop.
             }
-            }
-            //We have various fields that are not easy roundings
+
+            // If this level is *below* the target level:
+            // Calculate the offset of the current field value from its minimum.
+            // Use this offset to determine if the *next* higher field should be rounded up.
+            int primaryFieldOfLevel = fields[i][0]; // The main field constant for this level
             int offset = 0;
-            boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
-            switch (field) {
-                case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
-                        if (offset >= 15) {
-                            offset -= 15;
+            boolean offsetSet = false; // Flag for special calculation cases below
+
+            // Special calculation for SEMI_MONTH target field:
+            // If we are examining the DATE field level for a SEMI_MONTH target.
+            if (field == DateUtils.SEMI_MONTH && primaryFieldOfLevel == Calendar.DATE) {
+                // Offset from the start of the relevant half-month (1 or 16)
+                offset = val.get(Calendar.DATE) - 1; // 0-based day index
+                if (offset >= 15) { // Is the date in the second half (16+)?
+                    offset -= 15; // Offset relative to the 16th
                 }
-                        //Record whether we're in the top or bottom half of that range
+                // Round up if date is past the midpoint of the half-month (> 7 days offset)
                 roundUp = offset > 7;
-                        offsetSet = true;
+                offsetSet = true; // Mark that 'roundUp' was set by special logic
             }
-                    break;
-                case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
-                        if (offset >= 12) {
-                            offset -= 12;
+            // Special calculation for AM_PM target field:
+            // If we are examining the HOUR_OF_DAY field level for an AM_PM target.
+            else if (field == Calendar.AM_PM && primaryFieldOfLevel == Calendar.HOUR_OF_DAY) {
+                // Offset from the start of the AM/PM period (0 or 12)
+                offset = val.get(Calendar.HOUR_OF_DAY); // 0-23 hour
+                if (offset >= 12) { // Is the hour in the PM period?
+                    offset -= 12; // Offset relative to 12:00
                 }
+                // Round up if hour is past the midpoint of the half-day (> 6 hours offset)
                 roundUp = offset > 6;
-                        offsetSet = true;
-                    }
-                    break;
+                offsetSet = true; // Mark that 'roundUp' was set by special logic
             }
+
+            // General calculation for 'roundUp':
+            // If 'roundUp' wasn't set by special logic above.
             if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
+                int min = val.getActualMinimum(primaryFieldOfLevel); // Min value for this field (e.g., 0 for SECOND)
+                int max = val.getActualMaximum(primaryFieldOfLevel); // Max value for this field (e.g., 59 for SECOND)
+                // Offset from the minimum value
+                offset = val.get(primaryFieldOfLevel) - min;
+                // Round up if the value is strictly greater than the midpoint of the range.
+                // Check for max == min to avoid division by zero
+                if (max == min) {
+                    roundUp = false; // Cannot round up if range is zero
+                } else {
                     roundUp = offset > ((max - min) / 2);
                 }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
+            // Note: We do *not* modify 'val' here. 'roundUp' is carried to the next iteration or used by the target level.
+
+        } // End of loop for determining rounding
+
+        // If the loop completed without finding the field, it's unsupported.
+        if (!fieldFound) {
             throw new IllegalArgumentException("The field " + field + " is not supported");
+        }
+
+        // Step 2: Truncate fields less significant than the target field. (LANG-59 Fix)
+        // This is done *after* potential rounding adjustments.
+        // We set these fields to their minimum value (usually 0).
+        // The order of setting fields is important: start with the smallest unit (MILLISECOND)
+        // and move up to HOUR_OF_DAY. This minimizes potential side effects with Calendar calculations.
+
+        boolean troncMillisecond = false; // Should MILLISECOND be truncated?
+        boolean troncSecond = false;      // Should SECOND be truncated?
+        boolean troncMinute = false;      // Should MINUTE be truncated?
+        boolean troncHour = false;        // Should HOUR_OF_DAY be truncated?
+
+        // Determine which fields to truncate based on the target 'field' using fall-through logic
+        switch (field) {
+            // Cases for fields Calendar.DATE and above require truncating hours, minutes, seconds, milliseconds
+            case Calendar.YEAR:
+            case Calendar.MONTH:
+            case DateUtils.SEMI_MONTH:
+            // Assuming DAY_OF_*, WEEK_OF_* fields imply truncation to the start of the day
+            case Calendar.DATE:
+            case Calendar.DAY_OF_MONTH:
+            case Calendar.DAY_OF_YEAR:
+            case Calendar.WEEK_OF_MONTH:
+            case Calendar.WEEK_OF_YEAR:
+                troncHour = true; // Need to truncate HOUR_OF_DAY
+                // Fallthrough intended
+
+            // Cases for fields Calendar.HOUR* and AM/PM require truncating minutes, seconds, milliseconds
+            // NOTE: Truncating AM/PM means truncating to the start of the AM/PM period (00:00 or 12:00).
+            // The rounding logic already handles the jump to the next AM/PM period.
+            // For truncation (round=false), setting HOUR_OF_DAY to 0 handles the AM case correctly.
+            // For PM truncation, the HOUR_OF_DAY field is handled by the general logic based on levels.
+            // Setting troncHour = true correctly zeros out H,M,S,MS when field is DATE or higher.
+            // When field is AM_PM, HOUR*, MINUTE, SECOND, only fields below it are truncated by this switch.
+            // The rounding loop already determined if AM/PM rounding needs to happen.
+            // This truncation part zeros out fields *below* the target field.
+            case Calendar.AM_PM:
+            case Calendar.HOUR_OF_DAY:
+            case Calendar.HOUR:
+                troncMinute = true; // Need to truncate MINUTE
+                // Fallthrough intended
+
+            // Case for Calendar.MINUTE requires truncating seconds, milliseconds
+            case Calendar.MINUTE:
+                troncSecond = true; // Need to truncate SECOND
+                // Fallthrough intended
+
+            // Case for Calendar.SECOND requires truncating milliseconds
+            case Calendar.SECOND:
+                troncMillisecond = true; // Need to truncate MILLISECOND
+                // Fallthrough intended
 
+            // Base case: No truncation needed below MILLISECOND
+            case Calendar.MILLISECOND:
+                break; // Stop fallthrough
+
+            // If 'field' was not matched above, it would have thrown IllegalArgumentException earlier
+        }
+
+        // Apply truncation by setting fields to their minimum value (0) in the correct order
+        if (troncMillisecond) {
+            val.set(Calendar.MILLISECOND, 0);
+        }
+        if (troncSecond) {
+            val.set(Calendar.SECOND, 0);
+        }
+        if (troncMinute) {
+            val.set(Calendar.MINUTE, 0);
+        }
+        if (troncHour) {
+            // Using HOUR_OF_DAY ensures the hour is set to 0 (midnight) regardless of AM/PM
+            val.set(Calendar.HOUR_OF_DAY, 0);
+        }
     }
\ No newline at end of file
