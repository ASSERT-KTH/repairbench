diff --git a/tmp/5d98c946-0785-46de-9e77-b64d275846f7_buggy.java b/tmp/a9a31a0b-96e8-4998-a0a8-269b7d1ec0ba_fixed.java
index 562001a..00032e9 100644
--- a/tmp/5d98c946-0785-46de-9e77-b64d275846f7_buggy.java
+++ b/tmp/a9a31a0b-96e8-4998-a0a8-269b7d1ec0ba_fixed.java
@@ -1,29 +1,50 @@
     /**
      * <p>Checks if String contains a search String irrespective of case,
      * handling <code>null</code>. Case-insensitivity is defined as by
      * {@link String#equalsIgnoreCase(String)}.
      *
      * <p>A <code>null</code> String will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.contains(null, *) = false
      * StringUtils.contains(*, null) = false
      * StringUtils.contains("", "") = true
      * StringUtils.contains("abc", "") = true
      * StringUtils.contains("abc", "a") = true
      * StringUtils.contains("abc", "z") = false
      * StringUtils.contains("abc", "A") = true
      * StringUtils.contains("abc", "Z") = false
      * </pre>
      *
      * @param str  the String to check, may be null
      * @param searchStr  the String to find, may be null
      * @return true if the String contains the search String irrespective of
      * case or false if not or <code>null</code> string input
+     * @since 3.0 Changed signature from containsIgnoreCase(String, String) to containsIgnoreCase(CharSequence, CharSequence)
      */
     public static boolean containsIgnoreCase(String str, String searchStr) {
         if (str == null || searchStr == null) {
             return false;
         }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+        final int len1 = str.length();
+        final int len2 = searchStr.length();
+        if (len2 == 0) {
+             // An empty search string is always contained.
+             return true;
+         }
+        if (len1 < len2) {
+            // The search string cannot be contained if it is longer than the string to check.
+            return false;
+        }
+        // Iterate through the string 'str' to find potential starting points for 'searchStr'.
+        // The loop limit ensures that there's enough space left in 'str' for 'searchStr'.
+        for (int i = 0; i <= len1 - len2; i++) {
+            // Use regionMatches with ignoreCase set to true to compare the substring.
+            // regionMatches(ignoreCase, thisOffset, otherString, otherOffset, length)
+            if (str.regionMatches(true, i, searchStr, 0, len2)) {
+                return true; // Found a case-insensitive match.
+            }
+        }
+        // No match found after checking all possible positions.
+        return false;
     }
\ No newline at end of file
