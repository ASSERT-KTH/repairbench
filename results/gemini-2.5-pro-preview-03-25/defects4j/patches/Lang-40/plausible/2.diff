diff --git a/tmp/65e8cc86-1e09-4c24-bb43-392db2f27b12_buggy.java b/tmp/01b5d8b9-78bc-41d5-a377-f5eba5f3671e_fixed.java
index 562001a..8ff65d1 100644
--- a/tmp/65e8cc86-1e09-4c24-bb43-392db2f27b12_buggy.java
+++ b/tmp/01b5d8b9-78bc-41d5-a377-f5eba5f3671e_fixed.java
@@ -1,29 +1,49 @@
     /**
      * <p>Checks if String contains a search String irrespective of case,
      * handling <code>null</code>. Case-insensitivity is defined as by
      * {@link String#equalsIgnoreCase(String)}.
      *
      * <p>A <code>null</code> String will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.contains(null, *) = false
      * StringUtils.contains(*, null) = false
      * StringUtils.contains("", "") = true
      * StringUtils.contains("abc", "") = true
      * StringUtils.contains("abc", "a") = true
      * StringUtils.contains("abc", "z") = false
      * StringUtils.contains("abc", "A") = true
      * StringUtils.contains("abc", "Z") = false
      * </pre>
      *
      * @param str  the String to check, may be null
      * @param searchStr  the String to find, may be null
      * @return true if the String contains the search String irrespective of
      * case or false if not or <code>null</code> string input
      */
     public static boolean containsIgnoreCase(String str, String searchStr) {
         if (str == null || searchStr == null) {
             return false;
         }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+        // Check if searchStr is empty, consistent with String#contains("")
+        if (searchStr.isEmpty()) {
+             // An empty String is contained in any String, including empty
+            return true;
+        }
+        final int len1 = str.length();
+        final int len2 = searchStr.length();
+        // If searchStr is longer than str, it cannot be contained
+        if (len2 > len1) {
+            return false;
+        }
+        // Iterate through the main string (str) comparing regions
+        // to the search string (searchStr) ignoring case.
+        for (int i = 0; i <= len1 - len2; i++) {
+            // regionMatches(ignoreCase, thisOffset, otherString, otherOffset, length)
+            if (str.regionMatches(true, i, searchStr, 0, len2)) {
+                return true; // Found a match
+            }
+        }
+        // No match found after checking all possible starting positions
+        return false;
     }
\ No newline at end of file
