diff --git a/tmp/8380c357-11b2-4941-b227-7cbed9b0f6f8_buggy.java b/tmp/0eda11c7-04cd-4ad1-be41-d3661e00a796_fixed.java
index d8b0158..db64386 100644
--- a/tmp/8380c357-11b2-4941-b227-7cbed9b0f6f8_buggy.java
+++ b/tmp/0eda11c7-04cd-4ad1-be41-d3661e00a796_fixed.java
@@ -1,113 +1,173 @@
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+import com.google.javascript.jscomp.AbstractCompiler; // Added for reportCodeChange signature context
+import com.google.javascript.jscomp.InlineCostEstimator;
+import com.google.javascript.jscomp.NodeUtil;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+import java.util.List;
+
+// Assuming the context of a class that has access to reportCodeChange()
+// and potentially an AbstractCompiler instance.
+// The user requested only the function, so helper methods/fields are omitted in the final block.
+
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
+    // Ensure the node is a CALL node
+    if (!n.isCall()) {
+      return n;
+    }
+
     Node callTarget = n.getFirstChild();
-
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
-        return n;
-      }
-    }
-
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+    // Check if it's Array.prototype.join on an ARRAYLIT
+    if (arrayNode.getType() != Token.ARRAYLIT ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
+    // Check arguments: join() or join(separator)
+    Node separatorNode = callTarget.getNext(); // First argument (separator)
+    Node secondArg = (separatorNode == null) ? null : separatorNode.getNext(); // Beyond first argument
+    if (secondArg != null) {
+      // Array.prototype.join takes at most one argument.
+      return n;
+    }
+
+    // If separator is specified, it must be immutable for folding.
+    if (separatorNode != null && !NodeUtil.isImmutableValue(separatorNode)) {
+      return n; // Separator must be constant
+    }
+
+    // Determine the separator string. Default is ",".
+    // NodeUtil.getStringValue handles null, undefined, boolean, number -> string.
+    String joinString = (separatorNode == null) ? "," : NodeUtil.getStringValue(separatorNode);
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
+    Node prev = null; // Keep track of the last node processed for source info
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
+    // Iterate through elements, merging adjacent constants
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
+      // EMPTY nodes are treated as "" by Array.join
+      if (NodeUtil.isImmutableValue(elem) || elem.isEmpty()) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
+          // Append the separator if this isn't the first element in the current sequence
           sb.append(joinString);
         }
+        // Append the string value of the element. Handles null/undefined/empty correctly.
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
+        // Non-constant element found
         if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          // Add the accumulated string node before the non-constant element
+          Preconditions.checkNotNull(prev, "StringBuilder should not be active before first element");
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+          sb = null; // Reset StringBuilder
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+        // Add the non-constant element itself, cloned to avoid modifying the original tree
+        // before we commit to the change.
+        arrayFoldedChildren.add(elem.cloneTree());
       }
-      prev = elem;
+      prev = elem; // Update prev to the original node for source info propagation
       elem = elem.getNext();
     }
 
+    // Add any remaining accumulated string at the end
     if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      // If sb != null, it means we processed at least one foldable element,
+      // so prev cannot be null here (unless the array was empty, but then sb would be null).
+      Preconditions.checkNotNull(prev, "prev cannot be null if sb is set");
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
+    // Original size for comparison
     int originalSize = InlineCostEstimator.getCost(n);
+    Node replacementNode = null; // The node that will replace 'n' if optimization is beneficial
+    Node newCall = null; // Define here for scope if needed in default case
+
     switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
+      case 0: // Original array was empty e.g., [].join() -> ""
+        replacementNode = Node.newString("").copyInformationFrom(n);
+        break;
+
+      case 1: // Result is a single element (either fully folded string or single non-constant element)
+        Node foldedElement = arrayFoldedChildren.get(0);
+        if (foldedElement.isString()) {
+             // Result is already a string literal (e.g., "a,b,c" or from ['a', 'b'].join(','))
+             replacementNode = foldedElement;
+        } else {
+            // Result is a single non-string element (e.g. [foo].join() -> foo)
+            // The result of JS join is String(element). Represent as "" + element for compiler.
+            replacementNode = new Node(Token.ADD,
                 Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
+                foldedElement); // foldedElement is already a clone or new node
+            replacementNode.copyInformationFrom(n); // Copy info to the ADD node
         }
-        n.getParent().replaceChild(n, foldedStringNode);
-        reportCodeChange();
-        return foldedStringNode;
-      default:
-        // No folding could actually be performed.
+        // Ensure top-level node has the original source info
+        replacementNode.copyInformationFrom(n);
+        break;
+
+      default: // Result is multiple elements (partial folding occurred)
+        // Check if the number of elements changed. If not, no structural folding occurred.
+        // However, elements might have changed (e.g. 'a', 'b' became "a,b").
+        // We rely on the cost comparison below to decide if the change is worthwhile.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
+            // If element count is same, check if nodes actually changed.
+            // This check might be complex/costly. Let's rely on cost comparison.
+            // If cost isn't lower, we won't replace anyway.
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
+
+        // Create the potential new array literal node
+        Node newArray = new Node(Token.ARRAYLIT).copyInformationFrom(arrayNode);
         for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+          // Nodes in arrayFoldedChildren are either new strings or clones of original non-constants
+          newArray.addChildToBack(node);
         }
-        reportCodeChange();
+
+        // Create the new call structure: newArray.join(separator)
+        Node newGetProp = new Node(Token.GETPROP, newArray, functionName.cloneNode());
+        newCall = new Node(Token.CALL, newGetProp); // Assign to newCall defined outside switch
+        if (separatorNode != null) {
+          // Clone the original separator node to keep attributes and source info
+          newCall.addChildToBack(separatorNode.cloneTree());
+        }
+        newCall.copyInformationFrom(n); // Copy source info from original call
+
+        // This new call structure is the potential replacement node
+        replacementNode = newCall;
         break;
     }
 
+    // Check cost ONLY if a replacement is proposed
+    if (replacementNode != null) {
+      int newSize = InlineCostEstimator.getCost(replacementNode);
+      // Only replace if the new node is strictly smaller. ">=" means no change or worse.
+      // Test case `testStringJoinAdd` with long separator implies stability if size >= original.
+      if (newSize >= originalSize) {
+         return n; // Not smaller, bail out, return original node.
+      }
+
+      // Perform the replacement in the AST
+      n.getParent().replaceChild(n, replacementNode);
+      reportCodeChange(); // Report modification
+      return replacementNode; // Return the new node
+    }
+
+    // No replacement was suitable (e.g., cost wasn't lower or no case matched for replacement)
     return n;
   }
+} // End of dummy class context
\ No newline at end of file
