diff --git a/tmp/b78896f2-2729-4959-b1df-d2c987b3047c_buggy.java b/tmp/cf843c18-c1fa-453e-8efe-b7a32d01b801_fixed.java
index d8b0158..fac02ec 100644
--- a/tmp/b78896f2-2729-4959-b1df-d2c987b3047c_buggy.java
+++ b/tmp/cf843c18-c1fa-453e-8efe-b7a32d01b801_fixed.java
@@ -1,113 +1,266 @@
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+import com.google.javascript.jscomp.NodeUtil;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+
+import java.util.List;
+
+/**
+ * Contains the fixed function tryFoldArrayJoin.
+ * Dependencies like PeepholeReplaceKnownMethods, InlineCostEstimator, reportCodeChange are assumed to exist.
+ */
+class FixedPeepholeReplaceKnownMethods {
+
+    // Assume InlineCostEstimator exists and provides getCost(Node)
+    static class InlineCostEstimator {
+        static int getCost(Node n) {
+            // In a real scenario, this would estimate code size/complexity.
+            // Returning 1 for simplicity in this context.
+            if (n == null) return 0;
+            // Crude approximation based on Closure Compiler's implementation hints
+            switch (n.getToken()) {
+              case STRING:
+                return n.getString().length() + 2; // Account for quotes
+              case NAME:
+                return n.getString().length();
+              case NUMBER:
+                return String.valueOf(n.getDouble()).length();
+              case TRUE:
+                return 4;
+              case FALSE:
+                return 5;
+              case NULL:
+                return 4;
+              case VOID:
+                return InlineCostEstimator.getCost(n.getFirstChild()) + "void ".length();
+              case ARRAYLIT:
+              case OBJECTLIT:
+                 int cost = 2; // for [] or {}
+                 for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+                     cost += InlineCostEstimator.getCost(child) + 1; // Element + comma
+                 }
+                 if (n.hasChildren()) cost--; // Remove last comma cost
+                 return cost;
+              case GETPROP:
+                return InlineCostEstimator.getCost(n.getFirstChild()) + InlineCostEstimator.getCost(n.getLastChild()) + 1; // receiver + prop + dot
+              case CALL:
+                 cost = InlineCostEstimator.getCost(n.getFirstChild()) + 2; // target + ()
+                 for (Node child = n.getSecondChild(); child != null; child = child.getNext()) {
+                     cost += InlineCostEstimator.getCost(child) + 1; // arg + comma
+                 }
+                 if (n.getSecondChild() != null) cost--; // Remove last comma cost
+                 return cost;
+              case ADD:
+                 return InlineCostEstimator.getCost(n.getFirstChild()) + InlineCostEstimator.getCost(n.getSecondChild()) + 1; // left + right + op
+              default:
+                return 1; // Default fallback
+            }
+        }
+    }
+
+    // Placeholder for the reporting mechanism
+    private void reportCodeChange() {
+        // In a real compiler, this marks the AST as changed.
+    }
+
+
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
+    // Ensure n is a CALL node before proceeding.
+    if (!n.isCall()) {
+      return n;
+    }
+
     Node callTarget = n.getFirstChild();
-
+    // The target of the call must be a GETPROP (like xxx.join).
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
-        return n;
-      }
-    }
-
     Node arrayNode = callTarget.getFirstChild();
-    Node functionName = arrayNode.getNext();
+    Node functionName = callTarget.getLastChild(); // In GETPROP, the property name is the last child
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+    // Check for ARRAYLIT.join pattern:
+    // The object must be an ARRAYLIT, and the property name must be the string "join".
+    if (arrayNode == null || !arrayNode.isArrayLit() ||
+        functionName == null || !functionName.isString() ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
+    // Check argument count: join() or join(separator).
+    Node separatorArg = callTarget.getNext();
+    if (separatorArg != null && separatorArg.getNext() != null) {
+      // More than one argument passed to join (e.g., arr.join(sep, extra)) - don't optimize.
+      return n;
+    }
+
+    // Check separator argument validity (if present): must be an immutable value (string, number, boolean, null, undefined).
+    if (separatorArg != null && !NodeUtil.isImmutableValue(separatorArg)) {
+      // e.g., arr.join(variableSeparator) - cannot fold reliably.
+      return n;
+    }
+
+    // Determine the join string separator. Defaults to "," if no argument is provided.
+    String joinString = (separatorArg == null) ? "," : NodeUtil.getStringValue(separatorArg);
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
+    StringBuilder sb = null; // Used to accumulate adjacent string parts.
+    Node prev = null; // Keep track of the previous node for copying source info.
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    boolean changed = false; // Track if any folding (merging of immutable parts) actually occurred.
+
+    // Iterate through array elements, folding adjacent immutable values.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
+      // Fold elements that are immutable values (literals) or empty slots (which join as "").
+      if (NodeUtil.isImmutableValue(elem) || elem.isEmpty()) {
         if (sb == null) {
+          // Start accumulating a new string segment.
           sb = new StringBuilder();
         } else {
+          // Append the separator if we are concatenating with a previous part.
           sb.append(joinString);
         }
+        // Append the string representation of the current element.
         sb.append(NodeUtil.getArrayElementStringValue(elem));
+        // Mark as changed if we merged with a previous immutable element.
+        if (prev != null && (NodeUtil.isImmutableValue(prev) || prev.isEmpty())) {
+           changed = true;
+        }
       } else {
+        // Non-immutable element encountered (e.g., a variable).
+        // First, flush any accumulated string segment to the results list.
         if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+          Preconditions.checkNotNull(prev, "Previous node should not be null when folding elements");
+          String foldedString = sb.toString();
+          // Create a new STRING node for the folded part.
+          Node newStringNode = Node.newString(foldedString).copyInformationFrom(prev);
+          arrayFoldedChildren.add(newStringNode);
+          sb = null; // Reset the StringBuilder for the next segment.
+          changed = true; // Mark that a fold happened.
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
+        // Add the non-immutable element itself to the list of children.
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
 
+    // Handle any trailing accumulated string after the loop finishes.
     if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+      Preconditions.checkNotNull(prev, "Previous node should not be null when handling trailing string");
+      String foldedString = sb.toString();
+      Node newStringNode = Node.newString(foldedString).copyInformationFrom(prev);
+      arrayFoldedChildren.add(newStringNode);
+      changed = true; // Mark that a fold happened.
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
+    // Get the estimated cost (e.g., code size) of the original expression node.
     int originalSize = InlineCostEstimator.getCost(n);
+    Node parent = n.getParent(); // Needed for replacing the node in the AST.
+    // Cannot replace the node if it has no parent in the AST.
+    if (parent == null) {
+        return n;
+    }
+
+    // Decide how to modify the AST based on the result of folding.
     switch (arrayFoldedChildren.size()) {
       case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
+        // Original array was empty, e.g., [].join(',') => ""
+        // Replace the entire call node with an empty string node.
+        Node emptyStringNode = Node.newString("").copyInformationFrom(n);
+        parent.replaceChild(n, emptyStringNode);
         reportCodeChange();
-        return emptyStringNode;
+        return emptyStringNode; // Return the new node.
+
       case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
+        // Array folded into a single element (or started with one).
+        // e.g., ['a','b'].join('') => "ab"
+        // e.g., [foo].join(',') => needs coercion '' + foo
+        Node singleResultNode = arrayFoldedChildren.remove(0);
+        Node replacementNode;
+        int foldedCost;
+
+        // Determine the node to replace 'n' with and estimate its cost.
+        if (singleResultNode.isString()) {
+          // Result is already a string literal (e.g., "abc").
+          replacementNode = singleResultNode;
+          foldedCost = InlineCostEstimator.getCost(replacementNode);
+        } else {
+          // Result is not a string (e.g., a variable 'foo').
+          // JS join semantics require coercion to string. Represent this as '' + node.
+          replacementNode = new Node(Token.ADD,
+              Node.newString("").copyInformationFrom(n), // Empty string for coercion
+              singleResultNode); // The non-string node
+          replacementNode.copyInformationFrom(n); // Copy source info to the new ADD node
+          foldedCost = InlineCostEstimator.getCost(replacementNode);
         }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
+
+        // Only perform replacement if the new node is smaller or equal in cost.
+        if (foldedCost > originalSize) {
+          return n; // Optimization doesn't reduce size.
         }
-        n.getParent().replaceChild(n, foldedStringNode);
+
+        // Perform the replacement in the AST.
+        parent.replaceChild(n, replacementNode);
         reportCodeChange();
-        return foldedStringNode;
+        return replacementNode; // Return the new node.
+
       default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+        // Partial folding: >1 element remains in the array.
+        // e.g. ['a', foo, 'b', 'c'].join(',') => ["a", foo, "b,c"].join(',')
+        // We need to check if this partial folding is still beneficial (reduces cost).
+
+        // If no actual merging/folding occurred (changed==false) AND the number
+        // of elements is the same as the original, then no change is needed.
+        // This avoids unnecessary modifications for cases like [a, b].join().
+        if (!changed && arrayFoldedChildren.size() == arrayNode.getChildCount()) {
             return n;
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
+
+        // Estimate the cost of the new expression:
+        // Cost([newElem1, newElem2, ...]) + Cost(.join()) + Cost(separator)
+        // Cloning nodes to build a temporary structure for accurate cost estimation.
+        Node newArrayLit = new Node(Token.ARRAYLIT);
+        for(Node node : arrayFoldedChildren) {
+            newArrayLit.addChildToBack(node.cloneTree());
+        }
+        newArrayLit.copyInformationFrom(arrayNode); // Copy source info
+
+        Node newGetProp = new Node(Token.GETPROP, newArrayLit, functionName.cloneTree());
+        newGetProp.copyInformationFrom(callTarget); // Copy source info
+
+        Node newCall = new Node(Token.CALL, newGetProp);
+        if (separatorArg != null) {
+            // If there was a separator argument, keep it in the estimated cost.
+            newCall.addChildToBack(separatorArg.cloneTree());
+        }
+        newCall.copyInformationFrom(n); // Copy source info
+
+        // Calculate the estimated cost of this potentially smaller call expression.
+        int newCost = InlineCostEstimator.getCost(newCall);
+
+        // Only perform replacement if the new structure is smaller or equal in cost.
+        if (newCost > originalSize) {
+          return n; // Optimization doesn't reduce size.
         }
-        arrayNode.detachChildren();
+
+        // Apply the changes to the original array node in place.
+        arrayNode.detachChildren(); // Clear existing children
         for (Node node : arrayFoldedChildren) {
+          // Add the actual folded/unmodified nodes back to the original array node.
           arrayNode.addChildToBack(node);
         }
+        // The CALL node (n) and its GETPROP child (callTarget) remain,
+        // but the ARRAYLIT child of the GETPROP has been modified in place.
         reportCodeChange();
-        break;
+        break; // Break from switch, return n (which has been modified internally)
     }
 
+    // Return the potentially modified node 'n' (for the default case where n's child array is modified).
     return n;
   }
+}
