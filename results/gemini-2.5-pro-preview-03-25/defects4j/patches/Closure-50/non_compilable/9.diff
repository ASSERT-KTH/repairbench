diff --git a/tmp/56601977-30d3-4a9c-ae7e-2596b513ef88_buggy.java b/tmp/35df45a0-d029-4f37-a566-bb40bc0213d9_fixed.java
index d8b0158..f0a405e 100644
--- a/tmp/56601977-30d3-4a9c-ae7e-2596b513ef88_buggy.java
+++ b/tmp/35df45a0-d029-4f37-a566-bb40bc0213d9_fixed.java
@@ -1,113 +1,239 @@
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+import com.google.javascript.jscomp.NodeUtil;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+
+import java.util.List;
+
+// Assumes the context of a class that has reportCodeChange() and InlineCostEstimator available.
+abstract class ContainingClass {
+  abstract void reportCodeChange();
+  // Placeholder for the actual estimator
+  static class InlineCostEstimator {
+      static int getCost(Node n) { return 10; } // Dummy cost implementation
+  }
+
+
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
+    // Structure check: n must be a CALL node.
+    if (!n.isCall()) {
+        return n;
+    }
+
     Node callTarget = n.getFirstChild();
-
+    // The target of the call must be a GETPROP node (like ... .join).
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
-        return n;
-      }
-    }
-
+    // Structure check: The GETPROP node must have the structure ARRAYLIT.join.
     Node arrayNode = callTarget.getFirstChild();
-    Node functionName = arrayNode.getNext();
+    Node functionName = callTarget.getLastChild(); // Property name is the last child of GETPROP
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+    // Use isArrayLit() for type checking.
+    if (arrayNode == null || !arrayNode.isArrayLit() ||
+        functionName == null || !functionName.isString() ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
+    // Check arguments to join: should be 0 or 1.
+    Node separatorNode = callTarget.getNext(); // First argument
+    if (separatorNode != null) {
+        // If a separator argument exists, it must be an immutable value.
+        if (!NodeUtil.isImmutableValue(separatorNode)) {
+            return n;
+        }
+        // Check for extra arguments after the separator.
+        if (separatorNode.getNext() != null) {
+            // join() should not have more than one argument.
+            return n;
+        }
+    }
+
+    // All checks passed, proceed with folding attempt.
+
+    // Determine the separator string. Defaults to "," if no argument is provided.
+    String joinString = (separatorNode == null) ? "," : NodeUtil.getStringValue(separatorNode);
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    StringBuilder sb = null; // Used to accumulate adjacent foldable elements.
+    Node prev = null; // Keep track of the last node processed for copying source info.
+    Node elem = arrayNode.getFirstChild(); // Start iterating through array elements.
+
+    // Iterate through the elements of the array literal.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
+      // Check if the element is foldable: an immutable value (string, number,
+      // boolean, null, undefined) or an EMPTY node.
+      // NodeUtil.isImmutableValue handles null/undefined correctly.
+      if (NodeUtil.isImmutableValue(elem) || elem.isEmpty()) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
+          // Add the join separator if this isn't the first foldable element in the sequence.
           sb.append(joinString);
         }
+        // Append the string value of the element. Handles null/undefined/empty correctly.
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
+        // Found a non-foldable element (e.g., a variable).
+        // First, add any accumulated string from the preceding foldable elements.
         if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+          Preconditions.checkNotNull(prev, "Previous node should not be null when sb is not null");
+          // Create a new string node for the folded part.
+          Node foldedString = Node.newString(sb.toString());
+          // Copy source info from the last node contributing to the string
+          foldedString.copyInformationFrom(prev);
+          arrayFoldedChildren.add(foldedString);
+          sb = null; // Reset the StringBuilder.
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
+        // Add the non-foldable element itself to the list of new children.
+        // We keep the original node instance.
         arrayFoldedChildren.add(elem);
       }
+      // Update prev to the current element before moving next.
       prev = elem;
       elem = elem.getNext();
     }
 
+    // After the loop, add any remaining accumulated string.
     if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+      Preconditions.checkNotNull(prev, "Previous node should not be null when sb is not null after loop");
+      Node finalFoldedString = Node.newString(sb.toString());
+      // Copy source info from the last node contributing to the string
+      finalFoldedString.copyInformationFrom(prev);
+      arrayFoldedChildren.add(finalFoldedString);
+    }
+
+    // ---- Replacement Logic ----
+
+    Node parent = n.getParent();
+    if (parent == null) {
+      // Cannot replace the node if it has no parent.
+      return n;
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
+    Node replacementNode = null;
+
     switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
+      case 0: // Array folded completely to an empty result, e.g., [].join() or [null].join()
+        // Result is always "". This is generally smaller/simpler than [].join(), etc.
+        replacementNode = Node.newString("").copyInformationFrom(n);
+        parent.replaceChild(n, replacementNode);
         reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
+        return replacementNode;
+
+      case 1: // Array folded into a single element.
+        Node onlyChild = arrayFoldedChildren.get(0);
+        int costCase1;
+
+        // Detach the child from the temporary list, as it will be re-parented.
+        onlyChild.detach();
+
+        if (onlyChild.isString()) {
+           // Result is a single string literal "abc".
+           replacementNode = onlyChild;
+           costCase1 = InlineCostEstimator.getCost(replacementNode);
+        } else {
+           // Result is a non-string value (e.g., number, variable). Needs coercion ("" + node).
+           replacementNode = new Node(Token.ADD,
+              Node.newString("").copyInformationFrom(n), // Add empty string for coercion
+              onlyChild);
+           replacementNode.copyInformationFrom(n); // Copy overall source info
+           costCase1 = InlineCostEstimator.getCost(replacementNode);
+        }
+
+        // Only replace if the folded version is smaller or equal in size estimate.
+        if (costCase1 > originalSize) {
+          // Restore detached child if not replacing? No, onlyChild is local ref.
           return n;
         }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        n.getParent().replaceChild(n, foldedStringNode);
+
+        parent.replaceChild(n, replacementNode);
         reportCodeChange();
-        return foldedStringNode;
-      default:
-        // No folding could actually be performed.
+        return replacementNode;
+
+      default: // Partial folding: >1 element remaining in arrayFoldedChildren.
+        // Check if the folding actually changed the array elements meaningfully.
+        // If the new list of children has the same size and elements as the original,
+        // it implies no strings were merged adjacent to non-literals.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+           boolean nodesChanged = false;
+           Node curOrig = arrayNode.getFirstChild();
+           int i = 0;
+           while (curOrig != null && i < arrayFoldedChildren.size()) {
+               // If a node in the folded list is not the same instance as the original,
+               // it implies either a string was folded or structure changed.
+               if (arrayFoldedChildren.get(i) != curOrig) {
+                   nodesChanged = true;
+                   break;
+               }
+               curOrig = curOrig.getNext();
+               i++;
+           }
+           // If counts match and no node instances changed, return original node.
+           if (!nodesChanged) {
                return n;
            }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
+        }
+
+        // Optimization: If the original separator was explicitly ",", make it implicit (remove arg).
+        boolean removeSeparator = (separatorNode != null && separatorNode.isString()
+                                    && separatorNode.getString().equals(","));
+
+        // Calculate the cost of the potentially modified expression.
+        int foldedCost = calculatePartialFoldCost(arrayFoldedChildren, separatorNode, removeSeparator);
+
+        // Only perform the modification if it reduces code size estimate.
+        if (foldedCost > originalSize) {
           return n;
         }
-        arrayNode.detachChildren();
+
+        // Perform the modification: Update the array node's children.
+        arrayNode.detachChildren(); // Clear existing children
         for (Node node : arrayFoldedChildren) {
+          // Detach node from its potential previous parent (if it's an original non-folded element)
+          // before adding it to the modified arrayNode.
+          node.detach();
           arrayNode.addChildToBack(node);
         }
+
+        // Remove the separator argument from the CALL node if it was explicitly ",".
+        if (removeSeparator) {
+           n.removeChild(separatorNode);
+        }
+
+        // Report the change and return the modified original node 'n'.
         reportCodeChange();
-        break;
-    }
-
         return n;
     }
+  }
+
+  /** Helper function to estimate the cost of the partially folded expression. */
+  private int calculatePartialFoldCost(List<Node> foldedChildren, Node separatorNode, boolean removingSeparator) {
+      // Create a temporary new array node with the folded children for cost estimation.
+      // We need to clone children as getCost might traverse them or modify them.
+      Node newArray = new Node(Token.ARRAYLIT);
+      for (Node node : foldedChildren) {
+          newArray.addChildToBack(node.cloneNode());
+      }
+      int arrayCost = InlineCostEstimator.getCost(newArray);
+
+      // Estimate the cost of the ".join()" part. Using a fixed length is approximate.
+      // A more accurate approach might involve estimating GETPROP + CALL costs.
+      int joinOverhead = ".join()".length(); // Rough estimate: dot, name, parens
+
+      // Cost of the separator argument, if it remains.
+      int separatorCost = 0;
+      if (separatorNode != null && !removingSeparator) {
+          separatorCost = InlineCostEstimator.getCost(separatorNode);
+      }
+
+      return arrayCost + joinOverhead + separatorCost;
+  }
+}
\ No newline at end of file
