diff --git a/tmp/d231f631-2de5-4e7a-8c51-d3c23bd21eee_buggy.java b/tmp/afcfb93a-36ad-4178-80f0-3d4b2ecbdf07_fixed.java
index b86c1ea..3deca36 100644
--- a/tmp/d231f631-2de5-4e7a-8c51-d3c23bd21eee_buggy.java
+++ b/tmp/afcfb93a-36ad-4178-80f0-3d4b2ecbdf07_fixed.java
@@ -1,38 +1,37 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
-    public final void translate(CharSequence input, Writer out) throws IOException {
+    public final void translate(final CharSequence input, final Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        final int len = input.length(); // Use character length for iteration index
         while (pos < len) {
-            int consumed = translate(input, pos, out);
+            // Call the abstract translate method which is responsible for complex translation logic
+            final int consumed = translate(input, pos, out); 
+            
+            // If consume is 0, means the character/codepoint at 'pos' was not handled by the specific translator.
+            // In this case, we should write the raw character/codepoint.
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                // Get the codepoint at the current position. Handles supplementary characters (surrogate pairs).
+                final int codePoint = Character.codePointAt(input, pos);
+                // Write the character(s) corresponding to the codepoint.
+                out.write(Character.toChars(codePoint));
+                // Advance the position by the number of chars used by the codepoint (1 for BMP, 2 for supplementary).
+                pos += Character.charCount(codePoint); 
             } else {
-                        pos++;
+                // If consumed is > 0, the translate method handled 'consumed' characters starting at 'pos'.
+                // Advance the position by the number of characters consumed by the translator.
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
