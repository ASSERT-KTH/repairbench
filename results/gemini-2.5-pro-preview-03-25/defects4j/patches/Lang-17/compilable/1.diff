diff --git a/tmp/468e16bc-24cc-4ef2-a376-a24b5da92112_buggy.java b/tmp/3736fe4e-11a4-4fac-beb7-86b6761bc771_fixed.java
index b86c1ea..17cf8dd 100644
--- a/tmp/468e16bc-24cc-4ef2-a376-a24b5da92112_buggy.java
+++ b/tmp/3736fe4e-11a4-4fac-beb7-86b6761bc771_fixed.java
@@ -1,38 +1,39 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+        int pos = 0; // Current position (char index) in the input sequence
+        int sz = input.length();
+        while (pos < sz) {
+            // Call the abstract translate method, passing the current char index.
+            // Assume it returns the number of chars consumed.
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // If the translate method consumed zero chars, it means the code point
+                // starting at 'pos' should be handled literally.
+                // We need to read the code point, which might be a surrogate pair.
+                int codePoint = Character.codePointAt(input, pos);
+                // Write the character(s) representing this code point to the output.
+                out.write(Character.toChars(codePoint));
+                // Advance the position by the number of chars constituting this code point.
+                pos += Character.charCount(codePoint);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // If the translate method consumed one or more characters,
+                // simply advance the position by the number of chars consumed.
+                // The translate method itself is responsible for writing to 'out'.
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
