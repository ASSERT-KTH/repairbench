diff --git a/tmp/09f870f9-d80e-47aa-ae79-fcecf1a39b6d_buggy.java b/tmp/1152af68-e5e1-4dea-9516-17e4009c6785_fixed.java
index b86c1ea..f294ec4 100644
--- a/tmp/09f870f9-d80e-47aa-ae79-fcecf1a39b6d_buggy.java
+++ b/tmp/1152af68-e5e1-4dea-9516-17e4009c6785_fixed.java
@@ -1,38 +1,44 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
+        int idx = 0; // Use character index, not code point index
+        int len = input.length(); // Use character length
+        while (idx < len) {
+            // Pass the character index to the abstract translate method.
+            // Abstract method's contract is:
+            // - Check input starting at index 'idx'.
+            // - If translation occurs: write result to 'out', return # of chars consumed from input.
+            // - If no translation: return 0.
+            int consumed = translate(input, idx, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // No translation occurred by the abstract method.
+                // We need to write the original character(s) corresponding to the
+                // code point starting at the current index 'idx'.
+                // This handles supplementary characters (surrogate pairs) correctly.
+                int codepoint = Character.codePointAt(input, idx);
+                out.write(Character.toChars(codepoint));
+                // Advance the index by the number of characters (UTF-16 code units)
+                // occupied by this code point (1 for BMP, 2 for supplementary).
+                idx += Character.charCount(codepoint);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // Translation occurred. The abstract translate(input, idx, out)
+                // method wrote the translated output to 'out' and returned the
+                // number of input characters consumed.
+                // Advance our character index by the number of characters consumed.
+                idx += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
