diff --git a/tmp/3942d9c1-60ed-4d9f-86a0-f3407c82f56f_buggy.java b/tmp/93849fa6-df47-4de4-a1c4-2422f98e6870_fixed.java
index b86c1ea..3fbfa99 100644
--- a/tmp/3942d9c1-60ed-4d9f-86a0-f3407c82f56f_buggy.java
+++ b/tmp/93849fa6-df47-4de4-a1c4-2422f98e6870_fixed.java
@@ -1,38 +1,38 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int pos = 0; // char index in input
+        int len = input.length(); // char length
         while (pos < len) {
+            // Call the abstract method which expects a char index
+            // It returns the number of chars consumed
             int consumed = translate(input, pos, out);
+
+            // If no characters were consumed, this means translation did not occur
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // Grab the code point at the current char index
+                int codePoint = Character.codePointAt(input, pos);
+                // Write the characters for this code point verbatim
+                out.write(Character.toChars(codePoint));
+                // Advance the position by the number of chars used by the code point
+                pos += Character.charCount(codePoint);
             }
+            // If characters were consumed (i.e., translation occurred)
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // Advance the position by the number of chars consumed by the translator
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
