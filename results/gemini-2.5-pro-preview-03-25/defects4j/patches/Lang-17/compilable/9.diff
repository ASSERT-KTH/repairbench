diff --git a/tmp/f5e19ab5-41e2-465c-9fd5-97f89ac95917_buggy.java b/tmp/29654ca9-d5bb-422a-bc7d-3a706929c2f7_fixed.java
index b86c1ea..69360e2 100644
--- a/tmp/f5e19ab5-41e2-465c-9fd5-97f89ac95917_buggy.java
+++ b/tmp/29654ca9-d5bb-422a-bc7d-3a706929c2f7_fixed.java
@@ -1,38 +1,41 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int pos = 0; // char index
+        int len = input.length(); // char length
         while (pos < len) {
+            // Call the abstract translate method.
+            // It should return the number of char units consumed.
             int consumed = translate(input, pos, out);
+            // If no chars were consumed, this means translation did not occur
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // Grab the code point at the current position
+                int codepoint = Character.codePointAt(input, pos);
+                // Convert the code point to its char representation
+                // This handles supplementary characters correctly (returning 2 chars)
+                char[] c = Character.toChars(codepoint);
+                // Write the chars to the output writer
                 out.write(c);
+                // Advance the position by the number of chars consumed by this code point
+                pos += Character.charCount(codepoint);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // If chars were consumed, advance the position by the number reported.
+                // The contract with the abstract translate method is that it must
+                // consume characters corresponding to whole code points.
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
