diff --git a/tmp/ef17a4d5-4271-410b-90b5-edf602be5be3_buggy.java b/tmp/47fbead8-5e4a-4fe3-b0ee-c68708d962f2_fixed.java
index b86c1ea..2d400c3 100644
--- a/tmp/ef17a4d5-4271-410b-90b5-edf602be5be3_buggy.java
+++ b/tmp/47fbead8-5e4a-4fe3-b0ee-c68708d962f2_fixed.java
@@ -1,38 +1,40 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int pos = 0; // position in the input string, based on char index
+        int len = input.length();
         while (pos < len) {
+            // Call the abstract method to translate character(s) starting at 'pos'
+            // It returns the number of characters consumed by the translation.
             int consumed = translate(input, pos, out);
+
+            // If no characters were consumed, it means the character(s) at 'pos'
+            // were not translated and should be written out verbatim.
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // Identify the full Unicode code point starting at 'pos'.
+                // This handles supplementary characters (surrogate pairs) correctly.
+                int codepoint = Character.codePointAt(input, pos);
+                // Write the code point as its char representation(s).
+                out.write(Character.toChars(codepoint));
+                // Advance the position by the number of chars this code point occupies.
+                pos += Character.charCount(codepoint);
             }
+            // If characters were consumed (i.e., translation occurred),
+            // advance the position by the number of chars consumed.
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
