diff --git a/tmp/8dce592f-b205-4151-b80b-b67dd387a6ff_buggy.java b/tmp/a1576922-6157-43d2-899b-e3aac5e02840_fixed.java
index b86c1ea..270d64f 100644
--- a/tmp/8dce592f-b205-4151-b80b-b67dd387a6ff_buggy.java
+++ b/tmp/a1576922-6157-43d2-899b-e3aac5e02840_fixed.java
@@ -1,38 +1,44 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int len = input.length(); // Use the character length, not code point count
         while (pos < len) {
+            // Call the abstract method to translate character(s) at index pos
+            // This method should return the number of characters consumed from input
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // If consume is 0, means no translation was performed
+                // Get the code point at the current character index
+                // Note: charAt(pos) is insufficient for supplementary characters
+                int codepoint = Character.codePointAt(input, pos);
+                // Write the characters corresponding to the code point to the output
+                out.write(Character.toChars(codepoint));
+                // Advance the position by the number of characters composing the code point
+                pos += Character.charCount(codepoint);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // If consumed is > 0, the translate method handled writing to 'out'
+                // and consumed 'consumed' characters.
+                // Advance the position by the number of characters consumed.
+                pos += consumed;
+                // Note: This logic assumes the contract that 'translate(input, pos, out)'
+                // returns the number of characters consumed. This contradicts the
+                // previous implementation's apparent assumption based on its loop structure
+                // but aligns with observed behavior of subclasses like LookupTranslator
+                // and fixes the reported bug.
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
