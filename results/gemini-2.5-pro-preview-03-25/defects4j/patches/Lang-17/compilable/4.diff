diff --git a/tmp/affd3f80-9b89-4236-8698-f108cc217a55_buggy.java b/tmp/87f9f0cc-271d-4067-a067-0c99b2d6b38c_fixed.java
index b86c1ea..d341ffe 100644
--- a/tmp/affd3f80-9b89-4236-8698-f108cc217a55_buggy.java
+++ b/tmp/87f9f0cc-271d-4067-a067-0c99b2d6b38c_fixed.java
@@ -1,38 +1,39 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        // Use the char length of the input sequence for iteration control
+        int len = input.length(); 
         while (pos < len) {
+            // Call the abstract translate method which returns the number of *chars* consumed
             int consumed = translate(input, pos, out); 
+            // If no characters were consumed, this means the character at pos was not translated.
+            // We need to write the character as-is and advance the position.
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // Get the code point at the current position. Handles supplementary characters correctly.
+                int codepoint = Character.codePointAt(input, pos);
+                // Write the character(s) for this code point to the output writer.
+                out.write(Character.toChars(codepoint));
+                // Advance the position by the number of char units used by this code point.
+                pos += Character.charCount(codepoint);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // If characters were consumed, the translate method handled the translation
+                // and writing to the output writer. We simply need to advance the position
+                // by the number of characters consumed by the translator.
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
