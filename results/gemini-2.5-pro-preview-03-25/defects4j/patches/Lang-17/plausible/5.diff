diff --git a/tmp/7130ee56-6fe8-4ed3-a595-6351fd7c3017_buggy.java b/tmp/f890d36d-4b69-4e7e-aef8-833aa04addb7_fixed.java
index b86c1ea..4bfda7a 100644
--- a/tmp/7130ee56-6fe8-4ed3-a595-6351fd7c3017_buggy.java
+++ b/tmp/f890d36d-4b69-4e7e-aef8-833aa04addb7_fixed.java
@@ -1,38 +1,53 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int pos = 0; // Character index
+        int len = input.length(); // Character length
         while (pos < len) {
+            // Call the abstract translate method which should handle consuming code points
             int consumed = translate(input, pos, out);
+
+            // If consumed is 0, the code point at 'pos' was not translated and should be copied verbatim
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // Get the code point starting at the current character index 'pos'.
+                // Character.codePointAt handles surrogate pairs correctly.
+                int codepoint = Character.codePointAt(input, pos);
+                // Write the character(s) for this code point to the output.
+                out.write(Character.toChars(codepoint));
+                // Advance the character index by the number of chars used by the code point (1 for BMP, 2 for surrogate pair).
+                pos += Character.charCount(codepoint);
             }
+            // If consumed is > 0, the translator handled writing the translation for 'consumed' code points.
+            // We need to advance 'pos' by the number of characters corresponding to these consumed code points.
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                // The contract is that 'translate' consumes 'consumed' number of code points starting at 'pos'.
+                // Advance 'pos' past these code points by examining each one.
+                for (int i = 0; i < consumed; i++) {
+                    // Check we don't go past the input length - needed for potentially malformed input
+                    // handled by the translator or incorrect 'consumed' value.
+                    if (pos < len) {
+                        // Determine the number of chars for the code point at the current position.
+                        int codepoint = Character.codePointAt(input, pos);
+                        // Advance position by the number of chars for this code point.
+                        pos += Character.charCount(codepoint);
                     } else {
-                        pos++;
+                        // Should ideally not happen with valid input and correct translator implementation.
+                        // Break defensively to avoid issues. The outer loop condition will terminate.
+                        break;
                     }
                 }
-                pos--;
             }
-            pos++;
         }
     }
