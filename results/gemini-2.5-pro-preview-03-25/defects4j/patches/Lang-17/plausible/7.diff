diff --git a/tmp/0b0f8e21-6307-49f7-9198-53053e015be4_buggy.java b/tmp/d9d459ab-08fa-402e-a6c1-7abf44b592e7_fixed.java
index b86c1ea..a1a23f6 100644
--- a/tmp/0b0f8e21-6307-49f7-9198-53053e015be4_buggy.java
+++ b/tmp/d9d459ab-08fa-402e-a6c1-7abf44b592e7_fixed.java
@@ -1,38 +1,48 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int pos = 0; // char index
+        int len = input.length(); // char length
         while (pos < len) {
+            // Call the abstract translate method with the current char index
             int consumed = translate(input, pos, out);
+
+            // If consumed is 0, the code point at pos was not translated
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // Find the code point starting at the current character index 'pos'
+                // This handles supplementary characters (surrogate pairs) correctly
+                int codePoint = Character.codePointAt(input, pos);
+
+                // Write the character(s) corresponding to the code point to the output
+                out.write(Character.toChars(codePoint));
+
+                // Advance the position by the number of chars used by this code point (1 for BMP, 2 for supplementary)
+                pos += Character.charCount(codePoint);
             }
+            // If consumed > 0, the translator handled 'consumed' code points starting at char index 'pos'
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // The translator is responsible for writing the translated output to 'out'.
+                // We need to advance the position ('pos') by the total number of characters
+                // covered by the 'consumed' code points.
+                for (int i = 0; i < consumed; i++) {
+                    // Advance 'pos' over the i-th consumed code point.
+                    // We find the code point starting at the current 'pos' and advance 'pos'
+                    // by the number of characters it occupies.
+                    int codePoint = Character.codePointAt(input, pos);
+                    pos += Character.charCount(codePoint);
                 }
             }
-                pos--;
-            }
-            pos++;
         }
     }
\ No newline at end of file
