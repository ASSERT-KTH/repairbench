diff --git a/tmp/e5c24d70-7599-4def-bc4d-325a7162781e_buggy.java b/tmp/732a58bb-283d-47f7-97cf-a69fa9b5a743_fixed.java
index fe2e012..6455f45 100644
--- a/tmp/e5c24d70-7599-4def-bc4d-325a7162781e_buggy.java
+++ b/tmp/732a58bb-283d-47f7-97cf-a69fa9b5a743_fixed.java
@@ -1,140 +1,154 @@
   /** {@inheritDoc} */
   @Override
   public void integrate(final ExpandableStatefulODE equations, final double t)
       throws MathIllegalStateException, MathIllegalArgumentException {
 
     sanityChecks(equations, t);
     setEquations(equations);
     final boolean forward = t > equations.getTime();
 
     // create some internal working arrays
     final double[] y0  = equations.getCompleteState();
     final double[] y = y0.clone();
     final int stages = c.length + 1;
     final double[][] yDotK = new double[stages][y.length];
     final double[] yTmp    = y0.clone();
     final double[] yDotTmp = new double[y.length];
 
     // set up an interpolator sharing the integrator arrays
     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
     interpolator.reinitialize(this, yTmp, yDotK, forward,
                               equations.getPrimaryMapper(), equations.getSecondaryMappers());
     interpolator.storeTime(equations.getTime());
 
     // set up integration control objects
     stepStart         = equations.getTime();
     double  hNew      = 0;
     boolean firstTime = true;
     initIntegration(equations.getTime(), y0, t);
 
     // main integration loop
     isLastStep = false;
     do {
 
       interpolator.shift();
 
       // iterate over step size, ensuring local normalized error is smaller than 1
       double error = 10;
       while (error >= 1.0) {
 
         if (firstTime || !fsal) {
           // first stage
           computeDerivatives(stepStart, y, yDotK[0]);
         }
 
         if (firstTime) {
           final double[] scale = new double[mainSetDimension];
           if (vecAbsoluteTolerance == null) {
               for (int i = 0; i < scale.length; ++i) {
                 scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
               }
           } else {
               for (int i = 0; i < scale.length; ++i) {
                 scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
               }
           }
+          // Initialize the step size proposal
           hNew = initializeStep(forward, getOrder(), scale,
                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);
           firstTime = false;
         }
+        // else: hNew has been computed in the previous iteration after a rejection
 
-        stepSize = hNew;
+        // Filter the proposed step size for the current attempt.
+        // This ensures the step size respects the final time t, min/max step bounds.
+        final boolean isLastStepAttempt = forward ? (stepStart + hNew >= t) : (stepStart + hNew <= t);
+        stepSize = filterStep(hNew, forward, isLastStepAttempt);
 
-        // next stages
+
+        // next stages: compute derivatives using the filtered stepSize
         for (int k = 1; k < stages; ++k) {
 
           for (int j = 0; j < y0.length; ++j) {
             double sum = a[k-1][0] * yDotK[0][j];
             for (int l = 1; l < k; ++l) {
               sum += a[k-1][l] * yDotK[l][j];
             }
             yTmp[j] = y[j] + stepSize * sum;
           }
 
           computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
 
         }
 
-        // estimate the state at the end of the step
+        // estimate the state at the end of the step using the filtered stepSize
         for (int j = 0; j < y0.length; ++j) {
           double sum    = b[0] * yDotK[0][j];
           for (int l = 1; l < stages; ++l) {
             sum    += b[l] * yDotK[l][j];
           }
           yTmp[j] = y[j] + stepSize * sum;
         }
 
-        // estimate the error at the end of the step
+        // estimate the error at the end of the step using the filtered stepSize
         error = estimateError(yDotK, y, yTmp, stepSize);
         if (error >= 1.0) {
-          // reject the step and attempt to reduce error by stepsize control
+          // reject the step and propose a new step size for the next attempt
           final double factor =
               FastMath.min(maxGrowth,
                            FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
-          hNew = filterStep(stepSize * factor, forward, false);
+          // Propose the step size for the next attempt based on the current rejected stepSize.
+          // Do not filter here; filtering happens at the top of the loop.
+          hNew = stepSize * factor;
         }
+        // else: error < 1.0, the loop will exit, step accepted.
 
-      }
+      } // End of while (error >= 1.0)
 
       // local error is small enough: accept the step, trigger events and step handlers
+      // The accepted step size is the value of 'stepSize' from the last iteration.
       interpolator.storeTime(stepStart + stepSize);
       System.arraycopy(yTmp, 0, y, 0, y0.length);
       System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
-      stepStart = acceptStep(interpolator, y, yDotTmp, t);
-      System.arraycopy(y, 0, yTmp, 0, y.length);
+      stepStart = acceptStep(interpolator, y, yDotTmp, t); // updates stepStart, isLastStep
+      System.arraycopy(y, 0, yTmp, 0, y.length); // Update yTmp for interpolator internal state?
 
       if (!isLastStep) {
 
           // prepare next step
           interpolator.storeTime(stepStart);
 
           if (fsal) {
               // save the last evaluation for the next step
               System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
           }
 
           // stepsize control for next step
+          // Propose the step size for the *next* integration step based on the accepted stepSize and error
           final double factor =
-              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp))); // error is < 1.0 here
           final double scaledH = stepSize * factor;
-          final double  nextT      = stepStart + scaledH;
+          final double nextT = stepStart + scaledH; // stepStart has been updated by acceptStep
           final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
+          // Filter the proposal for the next integration step.
+          // This value 'hNew' will be used in the next iteration of the do-while loop.
           hNew = filterStep(scaledH, forward, nextIsLast);
 
-          final double  filteredNextT      = stepStart + hNew;
-          final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
-          if (filteredNextIsLast) {
-              hNew = t - stepStart;
-          }
+          // Removed the potentially problematic final adjustment block, filterStep should handle it.
+          // final double  filteredNextT      = stepStart + hNew;
+          // final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
+          // if (filteredNextIsLast) {
+          //     hNew = t - stepStart;
+          // }
 
       }
 
     } while (!isLastStep);
 
     // dispatch results
     equations.setTime(stepStart);
     equations.setCompleteState(y);
 
     resetInternalState();
 
   }
\ No newline at end of file
