diff --git a/tmp/be9dafe4-9e40-4217-bc0e-534579999603_buggy.java b/tmp/3588351d-95cf-4932-b910-631ce90394d1_fixed.java
index fe2e012..e5374ac 100644
--- a/tmp/be9dafe4-9e40-4217-bc0e-534579999603_buggy.java
+++ b/tmp/3588351d-95cf-4932-b910-631ce90394d1_fixed.java
@@ -1,140 +1,155 @@
   /** {@inheritDoc} */
   @Override
   public void integrate(final ExpandableStatefulODE equations, final double t)
       throws MathIllegalStateException, MathIllegalArgumentException {
 
     sanityChecks(equations, t);
     setEquations(equations);
     final boolean forward = t > equations.getTime();
 
     // create some internal working arrays
     final double[] y0  = equations.getCompleteState();
     final double[] y = y0.clone();
     final int stages = c.length + 1;
     final double[][] yDotK = new double[stages][y.length];
     final double[] yTmp    = y0.clone();
     final double[] yDotTmp = new double[y.length];
 
     // set up an interpolator sharing the integrator arrays
     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
     interpolator.reinitialize(this, yTmp, yDotK, forward,
                               equations.getPrimaryMapper(), equations.getSecondaryMappers());
     interpolator.storeTime(equations.getTime());
 
     // set up integration control objects
     stepStart         = equations.getTime();
     double  hNew      = 0;
     boolean firstTime = true;
     initIntegration(equations.getTime(), y0, t);
 
     // main integration loop
     isLastStep = false;
     do {
 
       interpolator.shift();
 
       // iterate over step size, ensuring local normalized error is smaller than 1
       double error = 10;
       while (error >= 1.0) {
 
         if (firstTime || !fsal) {
           // first stage
           computeDerivatives(stepStart, y, yDotK[0]);
         }
 
         if (firstTime) {
           final double[] scale = new double[mainSetDimension];
           if (vecAbsoluteTolerance == null) {
               for (int i = 0; i < scale.length; ++i) {
                 scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
               }
           } else {
               for (int i = 0; i < scale.length; ++i) {
                 scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
               }
           }
           hNew = initializeStep(forward, getOrder(), scale,
                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);
           firstTime = false;
         }
 
+        // Proposed step size for this iteration attempt
         stepSize = hNew;
 
-        // next stages
+        // Filter the step size for this attempt to avoid overstepping the final time t.
+        // Check if this step will be the last one based on the proposed stepSize.
+        final double currentT = stepStart + stepSize;
+        final boolean isLastIteration = forward ? (currentT >= t) : (currentT <= t);
+        // Apply filtering (min/max step, and clamp to t if it's the last step)
+        stepSize = filterStep(stepSize, forward, isLastIteration);
+
+
+        // next stages: Compute using the filtered stepSize
         for (int k = 1; k < stages; ++k) {
 
           for (int j = 0; j < y0.length; ++j) {
             double sum = a[k-1][0] * yDotK[0][j];
             for (int l = 1; l < k; ++l) {
               sum += a[k-1][l] * yDotK[l][j];
             }
             yTmp[j] = y[j] + stepSize * sum;
           }
 
-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
+          // The evaluation time should now be safe as stepSize is filtered.
+          final double evalTime = stepStart + c[k-1] * stepSize;
+          computeDerivatives(evalTime, yTmp, yDotK[k]);
 
         }
 
-        // estimate the state at the end of the step
+        // estimate the state at the end of the step using the filtered stepSize
         for (int j = 0; j < y0.length; ++j) {
           double sum    = b[0] * yDotK[0][j];
           for (int l = 1; l < stages; ++l) {
             sum    += b[l] * yDotK[l][j];
           }
           yTmp[j] = y[j] + stepSize * sum;
         }
 
-        // estimate the error at the end of the step
+        // estimate the error at the end of the step using the filtered stepSize
         error = estimateError(yDotK, y, yTmp, stepSize);
         if (error >= 1.0) {
           // reject the step and attempt to reduce error by stepsize control
           final double factor =
               FastMath.min(maxGrowth,
                            FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
-          hNew = filterStep(stepSize * factor, forward, false);
+          // Calculate the next proposal hNew based on the step size that failed (the filtered one)
+          hNew = filterStep(stepSize * factor, forward, false); // filterStep applies min/max, but not t clamping here (false)
         }
 
       }
 
       // local error is small enough: accept the step, trigger events and step handlers
+      // stepSize is the filtered value from the last successful iteration of the while loop
       interpolator.storeTime(stepStart + stepSize);
       System.arraycopy(yTmp, 0, y, 0, y0.length);
       System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
       stepStart = acceptStep(interpolator, y, yDotTmp, t);
+      // synchronize the internal yTmp array with the potentially updated state y after acceptStep
       System.arraycopy(y, 0, yTmp, 0, y.length);
 
       if (!isLastStep) {
 
           // prepare next step
           interpolator.storeTime(stepStart);
 
           if (fsal) {
               // save the last evaluation for the next step
               System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
           }
 
           // stepsize control for next step
           final double factor =
               FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
-          final double  scaledH    = stepSize * factor;
-          final double  nextT      = stepStart + scaledH;
+          final double  scaledH    = stepSize * factor; // stepSize is the accepted step size
+          final double  nextT      = stepStart + scaledH; // stepStart is the new step start time
           final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
-          hNew = filterStep(scaledH, forward, nextIsLast);
+          hNew = filterStep(scaledH, forward, nextIsLast); // Filter the proposal for the next step
 
+          // Adjust step size if filtered step exactly reaches t
           final double  filteredNextT      = stepStart + hNew;
           final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
           if (filteredNextIsLast) {
               hNew = t - stepStart;
           }
 
       }
 
     } while (!isLastStep);
 
     // dispatch results
     equations.setTime(stepStart);
     equations.setCompleteState(y);
 
     resetInternalState();
 
   }
\ No newline at end of file
