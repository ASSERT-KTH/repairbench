diff --git a/tmp/6141f199-a8e2-4dc3-b5dc-f57d7f5610fa_buggy.java b/tmp/7b5731a0-4321-45ec-be01-4b02a5acfff6_fixed.java
index 5f8ac1a..fbf3a5c 100644
--- a/tmp/6141f199-a8e2-4dc3-b5dc-f57d7f5610fa_buggy.java
+++ b/tmp/7b5731a0-4321-45ec-be01-4b02a5acfff6_fixed.java
@@ -1,34 +1,110 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
+        // Handle cases where pointers become null during recursion up the parent chain
+        // (e.g., if one path is shorter or getParent() returns null)
+        if (p1 == null && p2 == null) {
+            // Both paths ended simultaneously, treat as equal
+            return 0;
+        }
+        if (p1 == null) {
+            // p1's path ended first (null), p2 is non-null; null comes first
+            return -1;
+        }
+        if (p2 == null) {
+            // p2's path ended first (null), p1 is non-null; null comes first
+            return 1;
+        }
+
+        // Equalize depths by moving up the deeper pointer's parent chain
         if (depth1 < depth2) {
+            // Recurse with p2's parent. If p2.parent is null, the initial null checks
+            // in the recursive call will handle it.
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If parents compare equal (r == 0), the pointer with the greater depth (p2)
+            // comes after the pointer with the lesser depth (p1).
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
+            // Recurse with p1's parent.
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If parents compare equal (r == 0), the pointer with the greater depth (p1)
+            // comes after the pointer with the lesser depth (p2).
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Depths are now equal (depth1 == depth2), and p1 and p2 are non-null.
+
+        // Optimization: if pointers are logically equal, they are equal in order.
+        // Using equals is generally safer than == for objects like NodePointer
+        if (p1.equals(p2)) {
             return 0;
         }
 
+        // Check if we have reached the root level (depth 1)
         if (depth1 == 1) {
+            // We are comparing roots (or variable pointers which usually have depth 1).
+            // p1 and p2 are different (checked by equals above).
+
+            boolean p1IsVar = p1.isVariable(); // Assumes NodePointer has isVariable()
+            boolean p2IsVar = p2.isVariable();
+
+            if (p1IsVar != p2IsVar) {
+                // One is a variable, the other is not (a document root).
+                // Define order: Variables come before document roots.
+                return p1IsVar ? -1 : 1;
+            }
+            else {
+                // Both are variables OR both are non-variable roots.
+                if (p1IsVar) {
+                    // Both are variables (e.g., comparing $var1 and $var2).
+                    // Compare them based on their path representation (e.g., "$varName").
+                    // We assume asPath() provides a suitable comparable string.
+                    return p1.asPath().compareTo(p2.asPath());
+                }
+                else {
+                    // Both are non-variable roots (e.g., roots of different documents),
+                    // but they are not equal. JXPath considers pointers from different
+                    // trees incomparable in the standard document order.
+                    // Keep the original behavior of throwing an exception here.
                     throw new JXPathException(
                             "Cannot compare pointers that do not belong to the same tree: '"
                                     + p1 + "' and '" + p2 + "'");
                 }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+            }
+        }
+
+        // Depths are equal, not at the root (depth1 > 1), pointers are different.
+        // Move up one level and compare their parents recursively.
+        NodePointer p1parent = p1.parent; // Assumes parent field is accessible
+        NodePointer p2parent = p2.parent; // Assumes parent field is accessible
+
+        int r = compareNodePointers(p1parent, depth1 - 1, p2parent, depth2 - 1);
+
         if (r != 0) {
+            // Parents are different or one path ended; the order is determined by the parents.
             return r;
         }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+        // Parents compare as equal (r == 0).
+        // This means p1 and p2 are siblings under the same logical parent node.
+        // The recursive call returning 0 implies that p1parent and p2parent
+        // led to an equal comparison result (most likely, they point to the same common ancestor).
+        // Since depth1 > 1, this common ancestor (p1parent) should be non-null.
+
+        // We must use the parent pointer to compare the children (p1, p2)
+        // according to the rules specific to that parent type (e.g., DOM element order).
+        if (p1parent == null) {
+             // This state should theoretically not be reached if depth1 > 1 and the
+             // recursive call returned r = 0 based on finding a common ancestor.
+             // Throw an error indicating an unexpected internal state.
+             throw new IllegalStateException(
+                 "Cannot compare sibling pointers: parent is null unexpectedly. Pointers: " + p1 + ", " + p2);
+        }
+
+        // Use the common parent's method to determine the order of its children p1 and p2.
+        return p1parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
