diff --git a/tmp/9c789020-9d82-482d-a0a9-551ae5af697a_buggy.java b/tmp/bc3b2e89-2775-4410-8cce-036aff6317ed_fixed.java
index 5f8ac1a..b6d0103 100644
--- a/tmp/9c789020-9d82-482d-a0a9-551ae5af697a_buggy.java
+++ b/tmp/bc3b2e89-2775-4410-8cce-036aff6317ed_fixed.java
@@ -1,34 +1,112 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
         if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            NodePointer p2Parent = p2.parent;
+            // If r == 0, it means p1 and p2's parent path match up to depth1.
+            // Since p2 is deeper, p1 must be an ancestor or on a path "before" p2's deeper path.
+            // Returning -1 indicates p1 comes before p2.
+            int r = compareNodePointers(p1, depth1, p2Parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            NodePointer p1Parent = p1.parent;
+            // Symmetrical argument: if r == 0, p2 is ancestor or on path "before" p1.
+            // p1 comes after p2. Returning 1 indicates p1 comes after p2.
+            int r = compareNodePointers(p1Parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
+
+        // Depths are equal (depth1 == depth2)
+
+        // Base case: check object identity first
+        if (p1 == p2) {
             return 0;
         }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Base case: handle nulls (important for recursion termination)
+        // If one is null and the other isn't, they are different. Define order.
+        if (p1 == null) {
+            // If p2 is also null, they are equal (handled by p1==p2). So p2 is non-null here.
+            return -1; // Define null < non-null
+        }
+        if (p2 == null) {
+            // p1 is non-null, p2 is null.
+            return 1; // Define non-null > null
+        }
+
+        // Both p1 and p2 are non-null NodePointers at the same depth.
+        // Check logical equality using the pointer's equals method.
+        if (p1.equals(p2)) {
             return 0;
         }
 
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // The original code threw an exception here if depth1 == 1,
+        // assuming unequal pointers at the root level meant different trees.
+        // We remove this exception to allow comparing pointers from different
+        // conceptual trees (like VariablePointer vs NodePointer).
+
+        // Recursively compare parents.
+        NodePointer parent1 = p1.parent;
+        NodePointer parent2 = p2.parent;
+
+        // The current depth must be >= 1 for non-null p1/p2, so depth1 - 1 >= 0.
+        int r = compareNodePointers(parent1, depth1 - 1, parent2, depth1 - 1);
+
+        if (r == 0) {
+            // Parent paths are equivalent (e.g., both null, or same path up to root).
+            // Now compare p1 and p2 themselves.
+
+            // Check if they share the *same* non-null parent instance.
+            // Use instance equality (==) because compareChildNodePointers assumes
+            // it's called on the actual parent instance shared by both children.
+            if (parent1 != null && parent1 == parent2) {
+                 // Common parent instance exists, delegate sibling comparison to it.
+                 return parent1.compareChildNodePointers(p1, p2);
+            } else {
+                 // No common parent instance (e.g., comparing roots, variables, nodes in
+                 // different subtrees whose parent paths resolved to equal via recursion,
+                 // or one/both parents are null).
+                 // Need a fallback comparison mechanism.
+
+                 // 1. Compare by type: Variable vs Non-Variable.
+                 // Use the isVariable() method from the Pointer interface.
+                 boolean p1IsVar = p1.isVariable();
+                 boolean p2IsVar = p2.isVariable();
+
+                 if (p1IsVar != p2IsVar) {
+                     // One is a variable, the other is not.
+                     // Define an order: Variables come before non-variables.
+                     return p1IsVar ? -1 : 1;
+                 }
+
+                 // 2. Both are variables OR both are non-variables.
+                 // They don't share a parent capable of comparing them, or are roots.
+                 // Fallback to using identity hash code for a consistent, arbitrary order.
+                 // This handles cases like comparing root nodes of different documents,
+                 // or comparing two distinct variables.
+                 int h1 = System.identityHashCode(p1);
+                 int h2 = System.identityHashCode(p2);
+
+                 if (h1 < h2) {
+                    return -1;
+                 } else if (h1 > h2) {
+                    return 1;
+                 } else {
+                    // Extremely unlikely hash collision for distinct objects p1 and p2
+                    // (we already know p1 != p2 and !p1.equals(p2)).
+                    // If it happens, return an arbitrary but consistent result (e.g., 1)
+                    // to enforce a total order, satisfying comparator contracts
+                    // which often require compare(a,b) == 0 iff a.equals(b).
+                    return 1;
+                 }
             }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
-        if (r != 0) {
+        } else {
+            // Parents compare differently based on the recursive call (r != 0).
+            // This establishes the order based on ancestor paths.
             return r;
         }
-
-        return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
