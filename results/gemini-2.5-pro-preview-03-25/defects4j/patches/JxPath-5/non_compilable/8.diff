diff --git a/tmp/2ecda3f3-b5cd-44f1-a976-3a498dad6f06_buggy.java b/tmp/36d6b3bf-195b-4cdc-bfe8-8db0cc63a58f_fixed.java
index 5f8ac1a..f2382ed 100644
--- a/tmp/2ecda3f3-b5cd-44f1-a976-3a498dad6f06_buggy.java
+++ b/tmp/36d6b3bf-195b-4cdc-bfe8-8db0cc63a58f_fixed.java
@@ -1,34 +1,135 @@
+import org.apache.commons.jxpath.JXPathException; // Keep import for context
+import org.apache.commons.jxpath.ri.QName;
+import org.apache.commons.jxpath.ri.model.NodePointer;
+// Assuming VariablePointer is subclass or identifiable via isVariable()
+// Assuming NodePointer has fields/methods: parent, isVariable(), getName(), equals(), compareChildNodePointers()
+
+    /**
+     * Compares two NodePointer objects based on their position in the document order.
+     * Handles pointers from different trees (e.g., variables vs nodes).
+     * @param p1 pointer 1
+     * @param depth1 depth of pointer 1
+     * @param p2 pointer 2
+     * @param depth2 depth of pointer 2
+     * @return -1 if p1 precedes p2, 1 if p1 follows p2, 0 if equal.
+     */
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
         if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If p2 is null, behavior is potentially undefined depending on caller context,
+            // but usually null results from parent traversal of a root.
+            NodePointer p2Parent = p2 == null ? null : p2.parent;
+            // If p2's parent is null, we compare p1 to null at depth depth2-1.
+            int r = compareNodePointers(p1, depth1, p2Parent, depth2 - 1);
+            // If ancestors match (r==0), p1 is considered "higher" in the hierarchy
+            // relative to p2's original position, or they share ancestors up to depth1 but p2 is deeper.
+            // In document order, the node higher up (or its descendants) comes first.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            NodePointer p1Parent = p1 == null ? null : p1.parent;
+            int r = compareNodePointers(p1Parent, depth1 - 1, p2, depth2);
+            // If ancestors match (r==0), p2 is "higher". p1 comes second.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
+
+        // Depths are equal: depth1 == depth2
+        if (p1 == p2) { // Handles identical objects, including null==null
             return 0;
         }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Handle null vs non-null case now that depths are equal.
+        // If p1 != p2, only one can be null.
+        if (p1 == null) {
+            return -1; // Define null < non-null
+        }
+        if (p2 == null) {
+            return 1;  // Define non-null > null
+        }
+
+        // Both p1 and p2 are non-null, non-identical NodePointers at the same depth.
+        // Check for logical equality using equals().
+        if (p1.equals(p2)) {
             return 0;
         }
 
+        // Original code threw an exception if depth1 == 1 here, preventing comparison
+        // of root-level nodes from potentially different trees (like variables vs document root).
+        // We remove the exception and proceed to compare based on parent context.
+
+        // Compare parents recursively, unless at depth 1 where parents are conceptually null.
+        int parentComparisonResult;
         if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+             // We are comparing root-level entities (depth 1). Their parents are conceptually null.
+             // Treat conceptually null parents as equal for comparison purposes.
+             parentComparisonResult = 0;
+        } else {
+             // Compare actual parents recursively. It's safe to access p1.parent and p2.parent
+             // because p1 and p2 are verified non-null above, and depth1 > 1.
+             parentComparisonResult = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth1 - 1);
         }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
-        if (r != 0) {
-            return r;
+
+        // If the recursive comparison of parents yields a non-zero result,
+        // the order is determined by the parent comparison.
+        if (parentComparisonResult != 0) {
+            return parentComparisonResult;
+        }
+
+        // Parents compare as equal (parentComparisonResult == 0).
+        // This means either they are the same node, or they are logically equivalent
+        // (e.g., both conceptually null because depth1 == 1, or both actually null if roots were deeper).
+        // Now we need to compare p1 and p2 as siblings under that common parent context.
+
+        NodePointer p1Parent = p1.parent; // Safe, p1 is non-null.
+
+        if (p1Parent == null) {
+             // Parent context is null. This happens if depth1 was 1, or if parents recursively compared to null.
+             // This means p1 and p2 are root-level entities in their respective trees/contexts.
+             // We need to define an order between them.
+
+             // Check if one is a variable pointer and the other is not.
+             boolean p1Var = p1.isVariable();
+             boolean p2Var = p2.isVariable();
+             if (p1Var != p2Var) {
+                 // Define order: Variables come before Nodes in the document order.
+                 return p1Var ? -1 : 1;
              }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+             // If both are variables OR both are nodes (e.g., roots of different documents).
+             // Compare them by name (QName). QName should be comparable.
+             QName name1 = p1.getName();
+             QName name2 = p2.getName();
+             int nameComp = 0;
+             // Compare names, handling nulls safely.
+             if (name1 == name2) { // Handles both null
+                 nameComp = 0;
+             } else if (name1 == null) {
+                 nameComp = -1; // Consider null name first
+             } else if (name2 == null) {
+                 nameComp = 1;  // Consider non-null name after null
+             } else {
+                 // Both names non-null, use QName's comparison.
+                 nameComp = name1.compareTo(name2);
+             }
+
+             if (nameComp != 0) {
+                 return nameComp;
+             }
+
+             // Fallback if names are the same or both null.
+             // E.g., comparing root nodes of two different documents that might not have names,
+             // or two variables with the same name (if possible in context?).
+             // Use identity hash code for an arbitrary but consistent order within this run.
+             // Note: This order is not guaranteed stable across different JVM runs.
+             return System.identityHashCode(p1) < System.identityHashCode(p2) ? -1 : 1;
+        }
+        else {
+             // Common non-null parent context exists (p1Parent should logically equal p2.parent).
+             // Delegate the sibling comparison to the parent node pointer's method.
+             return p1Parent.compareChildNodePointers(p1, p2);
+        }
     }
\ No newline at end of file
