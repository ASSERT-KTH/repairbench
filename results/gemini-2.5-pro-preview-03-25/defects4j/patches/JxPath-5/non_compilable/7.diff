diff --git a/tmp/9cd04136-ed09-496a-9fbf-e6edd61002d9_buggy.java b/tmp/f9b3c08d-827d-4b42-bcb9-51aff26ee956_fixed.java
index 5f8ac1a..569663f 100644
--- a/tmp/9cd04136-ed09-496a-9fbf-e6edd61002d9_buggy.java
+++ b/tmp/f9b3c08d-827d-4b42-bcb9-51aff26ee956_fixed.java
@@ -1,34 +1,86 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
+
+        // Depths are equal
         if (p1 == null && p2 == null) {
             return 0;
         }
+        // If pointers are identical, they are equal
+        // We check identity because equals() might be too expensive.
+        if (p1 == p2) {
+            return 0;
+        }
+        // If p1 is null, p1 < p2, otherwise fall through
+        // After this, p1 is never null
+        if (p1 == null) {
+            return -1;
+        }
+        // If p2 is null, p1 > p2, otherwise fall through
+        // After this, p2 is never null
+        if (p2 == null) {
+            return 1;
+        }
 
-        if (p1 != null && p1.equals(p2)) {
+        // This handles the case p1 == p2 for non-null pointers
+        // Use equals for potentially different pointer implementations that are logically equal
+        if (p1.equals(p2)) {
             return 0;
         }
 
+        // If we are at the root level (depth == 1) and pointers are different,
+        // we need to handle comparisons between potentially different types of roots
+        // (like VariablePointer vs. Document root).
         if (depth1 == 1) {
+            boolean p1IsVar = p1 instanceof VariablePointer;
+            boolean p2IsVar = p2 instanceof VariablePointer;
+
+            if (p1IsVar && p2IsVar) {
+                // Both are variables, compare their QNames
+                // QName implements Comparable
+                return ((VariablePointer) p1).getName().compareTo(
+                           ((VariablePointer) p2).getName());
+            }
+            else if (p1IsVar) { // p1 is variable, p2 is not
+                // Define an order: variables come before non-variables
+                return -1;
+            }
+            else if (p2IsVar) { // p2 is variable, p1 is not
+                // Define an order: non-variables come after variables
+                return 1;
+            }
+            else {
+                // Neither is a variable pointer, but they are different root pointers
+                // (e.g., roots of different documents). Comparing them is problematic
+                // as they don't belong to the same tree structure.
+                // Throwing an exception here indicates this unsupported comparison.
                 throw new JXPathException(
                         "Cannot compare pointers that do not belong to the same tree: '"
                                 + p1 + "' and '" + p2 + "'");
             }
+        }
+
+        // If depths are equal (> 1) and pointers are different,
+        // recursively compare their parents.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
+            // If parents (or ancestors) have a defined order, use that order.
             return r;
         }
 
+        // If parents are the same (r == 0), it means p1 and p2 are siblings.
+        // Compare them based on their relative position under the common parent.
+        // We should have p1.parent != null because depth1 > 1
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
