diff --git a/tmp/c830304b-e07d-4a98-a15e-a6ac980fa50e_buggy.java b/tmp/0431b5e9-0e09-4a9b-b227-a81b9b397dda_fixed.java
index 5f8ac1a..3ca623a 100644
--- a/tmp/c830304b-e07d-4a98-a15e-a6ac980fa50e_buggy.java
+++ b/tmp/0431b5e9-0e09-4a9b-b227-a81b9b397dda_fixed.java
@@ -1,34 +1,127 @@
+    /**
+     * Recursive comparison of two NodePointers based on depth and ancestry.
+     * Handles comparisons between pointers in the same tree, and defines
+     * an order for comparing VariablePointers vs NodePointers at the root level.
+     * Throws JXPathException if comparing NodePointers from different trees.
+     */
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
+        // Ensure pointers are at the same depth by traversing up the shallower pointer's ancestry
         if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            NodePointer p2Parent = p2 == null ? null : p2.getParent();
+            // If parents compare equal (r=0), it means p1 is an ancestor or sibling of p2Parent.
+            // Since p1 is shallower, it must come first in document order.
+            int r = compareNodePointers(p1, depth1, p2Parent, depth2 - 1);
+            // If parents are the same (r==0), the shallower pointer (p1) comes first.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            NodePointer p1Parent = p1 == null ? null : p1.getParent();
+            // If parents compare equal (r=0), p2 is an ancestor or sibling of p1Parent.
+            // Since p2 is shallower, p1 must come after p2 in document order.
+            int r = compareNodePointers(p1Parent, depth1 - 1, p2, depth2);
+            // If parents are the same (r==0), the deeper pointer (p1) comes second.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
+
+        // Depths are equal from here
+
+        if (p1 == p2) { // Identical pointers
             return 0;
         }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Handle nulls after ensuring depths are equal
+        // If pointers have same depth, but one is null, order nulls first.
+        if (p1 == null) {
+            return -1; // null < non-null
+        }
+        if (p2 == null) {
+            return 1; // non-null > null
+        }
+
+        // Use the NodePointer's equals method for value equality
+        if (p1.equals(p2)) {
             return 0;
         }
 
+        // Pointers are different, non-null, and at the same depth.
+
+        // Special handling for root-level comparison (depth = 1)
+        // This is reached when comparing roots, or after adjusting depths.
         if (depth1 == 1) {
+            // Check if we are comparing a VariablePointer with a non-VariablePointer.
+            // Use FQN for VariablePointer to avoid direct dependency if possible,
+            // but direct instanceof is clearer and likely necessary here.
+            boolean p1IsVar = p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer;
+            boolean p2IsVar = p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer;
+
+            if (p1IsVar != p2IsVar) {
+                // Define an order between Variable roots and Node roots: Variables first.
+                // This allows unions of variables and nodes to be sorted consistently.
+                return p1IsVar ? -1 : 1;
+            }
+            else if (!p1IsVar /* && !p2IsVar */) {
+                 // Both are NodePointers at depth 1 and different (checked by equals).
+                 // They must belong to different trees (e.g., different documents).
+                 // Comparison is not possible based on document order.
+                 // Keep the original behavior of throwing an exception.
                  throw new JXPathException(
                          "Cannot compare pointers that do not belong to the same tree: '"
                                  + p1 + "' and '" + p2 + "'");
             }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+            // If both are VariablePointers at depth 1, we fall through.
+            // The logic below will compare their parents (likely the same RootPointer
+            // for the JXPathContext's variables). If parents compare equal (r=0),
+            // it will proceed to compare the variables themselves via the null parent check.
+        }
+
+        // Recursively compare parents to find the first differing ancestor.
+        NodePointer parent1 = p1.getParent();
+        NodePointer parent2 = p2.getParent();
+
+        // This recursive call compares the parents. It will eventually bottom out
+        // when depths are 0 or parents are null or equal.
+        int r = compareNodePointers(parent1, depth1 - 1, parent2, depth2 - 1);
+
         if (r != 0) {
+            // Parents differ at some level, the order is determined by the parent comparison.
             return r;
         }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+        // If r == 0, the parents at this level are considered equal.
+        // This implies p1 and p2 are siblings or have equivalent ancestor paths.
+
+        // If the common parent is null, it means p1 and p2 are roots whose parents (null)
+        // compared equal (e.g., compareNodePointers(null, 0, null, 0) returned 0).
+        if (parent1 == null) {
+            // This case should only be reachable if p1 and p2 are roots (depth1 was 1).
+            // We handled Var vs Node and Node vs Node roots above in the depth1==1 block.
+            // The only remaining possibility is Var vs Var roots.
+            if (p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer
+                && p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer) {
+                 // Compare the variable names for a consistent order.
+                 org.apache.commons.jxpath.ri.QName name1 = p1.getName();
+                 org.apache.commons.jxpath.ri.QName name2 = p2.getName();
+                 // Perform null-safe comparison of name strings
+                 String s1 = name1 == null ? null : name1.toString();
+                 String s2 = name2 == null ? null : name2.toString();
+                 if (s1 == s2) return 0; // Handles both null or same string
+                 if (s1 == null) return -1; // Null name first
+                 if (s2 == null) return 1;
+                 return s1.compareTo(s2);
+            }
+            // If not variables, reaching here indicates an internal inconsistency,
+            // as Node vs Node roots should have thrown an exception earlier.
+             throw new JXPathException(
+                    "Internal error: Cannot compare pointers with null parent: '"
+                     + p1 + "' and '" + p2 + "'");
+        }
+
+        // Parents are the same (r=0) and non-null.
+        // Ask the common parent to compare its children p1 and p2 using its specific logic.
+        return parent1.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
