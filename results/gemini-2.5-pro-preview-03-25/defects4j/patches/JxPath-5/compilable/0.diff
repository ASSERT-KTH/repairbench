diff --git a/tmp/3f1657f8-f5e1-4c24-8d6a-249d1c273035_buggy.java b/tmp/ec163c89-f690-4ef2-a064-46d324e211c4_fixed.java
index 5f8ac1a..d7b2bb0 100644
--- a/tmp/3f1657f8-f5e1-4c24-8d6a-249d1c273035_buggy.java
+++ b/tmp/ec163c89-f690-4ef2-a064-46d324e211c4_fixed.java
@@ -1,34 +1,123 @@
+    /**
+     * Recursively compares two node pointers based on their depth and ancestry.
+     * Handles comparisons between standard NodePointers and VariablePointers.
+     * @param p1 pointer 1
+     * @param depth1 depth of pointer 1
+     * @param p2 pointer 2
+     * @param depth2 depth of pointer 2
+     * @return -1, 0, or 1 according to the comparison result
+     */
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
         if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If p1 is shallower, get p2's parent and compare p1 with p2's parent at depth - 1.
+            // Need to handle potential null pointer for p2 if logic allows.
+            NodePointer p2Parent = p2 == null ? null : p2.getParent();
+            int r = compareNodePointers(p1, depth1, p2Parent, depth2 - 1);
+            // If the comparison of p1 and p2's parent yields 0 (meaning p1 is an ancestor of p2 or they share the same parent at this level),
+            // then the shallower node p1 comes first.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If p2 is shallower, get p1's parent and compare p1's parent with p2 at depth - 1.
+            // Need to handle potential null pointer for p1 if logic allows.
+            NodePointer p1Parent = p1 == null ? null : p1.getParent();
+            int r = compareNodePointers(p1Parent, depth1 - 1, p2, depth2);
+            // If the comparison of p1's parent and p2 yields 0 (meaning p2 is an ancestor of p1 or they share the same parent at this level),
+            // then the shallower node p2 comes first, so p1 comes after p2.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
+
+        // Depths are equal (depth = depth1 = depth2)
+
+        // Check for identity or equality using NodePointer.equals()
+        // This also correctly handles the case where both p1 and p2 are null.
+        if (p1 == p2 || (p1 != null && p1.equals(p2))) {
             return 0;
         }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
+        // If depths are equal but pointers are not identical/equal, handle cases where one is null.
+        // This logic assumes NodePointer.equals(null) returns false or throws exception,
+        // and relies on the previous check for p1 == p2 == null case.
+        if (p1 == null) {
+            return -1; // Define null < non-null when depths are considered equal
         }
+        if (p2 == null) {
+            return 1; // Define non-null > null when depths are considered equal
+        }
+
+        // Both pointers are non-null, not equal, and at the same depth.
+        // Get their parents to compare ancestry.
+        NodePointer p1Parent = p1.getParent();
+        NodePointer p2Parent = p2.getParent();
 
+        // Special handling for depth 1: comparing roots or variables.
         if (depth1 == 1) {
-            throw new JXPathException(
+            // Recursively compare their parents (which should be null or represent the ultimate root context).
+            // This call compares nodes at depth 0.
+            int r = compareNodePointers(p1Parent, 0, p2Parent, 0);
+
+            if (r == 0) {
+                // The comparison of parents at depth 0 returned 0. This typically means both parents are null
+                // or represent equivalent root contexts. We need to differentiate between NodePointers and
+                // VariablePointers, as they might wrongly appear to be in the same "null parent" tree.
+
+                boolean p1IsVar = p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer;
+                boolean p2IsVar = p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer;
+
+                if (p1IsVar != p2IsVar) {
+                     // If one is a Variable and the other is a Node, they belong to different conceptual trees.
+                     // Define an arbitrary but consistent order: Variables < Nodes.
+                     return p1IsVar ? -1 : 1;
+                }
+                else if (p1IsVar) { // Both are Variables (p1IsVar && p2IsVar)
+                    // They are different variables (since p1.equals(p2) was false).
+                    // Order them consistently using their canonical path representation (e.g., "$varName").
+                    // Using asPath() is a robust way to get a comparable string.
+                    return p1.asPath().compareTo(p2.asPath());
+                }
+                else { // Both are NodePointers (and not Variables)
+                    // They are different node pointers at the root level (depth 1) whose parents compared equal (r=0).
+                    // This implies they are roots of different documents or trees. JXPath cannot compare across trees.
+                    throw new org.apache.commons.jxpath.JXPathException(
                         "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+                            + p1.asPath() + "' and '" + p2.asPath() + "'");
                 }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+            }
+            else {
+                // The parents (at depth 0) compared differently (r != 0).
+                // This might happen if comparing e.g., a variable (null parent) vs a node whose root context is non-null.
+                // Return the result of the parent comparison.
+                return r;
+            }
+        }
+
+        // General case: Depths are equal and > 1.
+        // Recursively compare the parents at depth - 1.
+        int r = compareNodePointers(p1Parent, depth1 - 1, p2Parent, depth1 - 1);
         if (r != 0) {
+            // The parents (or ancestors) differ at some level. The order is determined by the first differing ancestor.
             return r;
         }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+        // If r == 0, it means the parents compare as equal through recursion.
+        // This implies p1 and p2 are siblings under the same parent node (or conceptually under the same null parent).
+
+        // If the common parent resolved to null (can happen for variables, detached nodes, etc.),
+        // we cannot call compareChildNodePointers on the parent.
+        if (p1Parent == null) {
+             // Fallback to comparing the pointers themselves using their path representation.
+             // Since p1 and p2 are siblings (implied by r=0) but not equal, their paths should ideally differ
+             // or provide a consistent ordering basis.
+             return p1.asPath().compareTo(p2.asPath());
+        }
+
+        // If the common parent is non-null, ask it to compare its children p1 and p2.
+        // This relies on the parent node's implementation of compareChildNodePointers
+        // to determine the order of its children (e.g., document order).
+        return p1Parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
