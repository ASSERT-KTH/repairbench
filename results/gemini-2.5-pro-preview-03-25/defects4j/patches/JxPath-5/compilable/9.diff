diff --git a/tmp/27681b03-9219-4cca-803c-f21dcdb08259_buggy.java b/tmp/2267c3be-932e-4a0d-9c27-cd8b3bd10cc2_fixed.java
index 5f8ac1a..3b7922a 100644
--- a/tmp/27681b03-9219-4cca-803c-f21dcdb08259_buggy.java
+++ b/tmp/2267c3be-932e-4a0d-9c27-cd8b3bd10cc2_fixed.java
@@ -1,34 +1,135 @@
+    /**
+     * Compare two node pointers based on their depth and position.
+     * This is a recursive helper method for comparing nodes that might
+     * not have an immediate common parent. It traverses up the tree
+     * until depths are equal or a common ancestor is found.
+     * Handles comparison between different types of pointers (like NodePointer and VariablePointer)
+     * by defining an arbitrary but consistent order when they don't share a common tree structure.
+     *
+     * @param p1     First node pointer
+     * @param depth1 Depth of the first pointer
+     * @param p2     Second node pointer
+     * @param depth2 Depth of the second pointer
+     * @return -1 if p1 < p2, 0 if p1 == p2, 1 if p1 > p2
+     */
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
+        // 1. Align depths by moving up the tree for the deeper node
         if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            NodePointer p2parent = p2.getParent();
+            // If p2 has no parent but depth suggests it should, we might be comparing
+            // pointers from fundamentally different structures (e.g., node vs variable).
+            // Define an order: p1 comes before p2 (arbitrary, but consistent).
+            if (p2parent == null) {
+                 // If p1 is also null, they are equal in this context.
+                 // Otherwise, p1 comes first.
+                 return p1 == null ? 0 : -1;
+            }
+            int r = compareNodePointers(p1, depth1, p2parent, depth2 - 1);
+            // If the recursive call returns 0, it means p1 is equal to or an ancestor of p2.parent.
+            // Since p2 is a child of p2.parent, p1 must come before p2 in document order.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            NodePointer p1parent = p1.getParent();
+            // Symmetrical case to the above.
+            if (p1parent == null) {
+                 // If p2 is also null, equal. Otherwise, p1 comes after p2.
+                 return p2 == null ? 0 : 1;
+            }
+            int r = compareNodePointers(p1parent, depth1 - 1, p2, depth2);
+            // If the recursive call returns 0, p2 is equal to or an ancestor of p1.parent.
+            // Since p1 is a child of p1.parent, p1 must come after p2 in document order.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
+
+        // 2. Depths are equal (depth1 == depth2 == d)
+        if (p1 == p2 || (p1 != null && p1.equals(p2))) {
+            // Pointers are identical or logically equal.
             return 0;
         }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
+        // Pointers are different, but at the same depth 'd'.
+        // We need to find a common ancestor or determine order if none exists.
+
+        // Handle cases where one or both pointers might be null at equal depth,
+        // although depth calculation should ideally mean non-null pointers have depth >= 1.
+        if (p1 == null) {
+            return p2 == null ? 0 : -1; // null comes before non-null
         }
+        if (p2 == null) {
+            return 1; // non-null comes after null
+        }
+
+        NodePointer parent1 = p1.getParent();
+        NodePointer parent2 = p2.getParent();
+
+        // 3. Check if parents are the same non-null node.
+        if (parent1 != null && parent1.equals(parent2)) {
+            // Common parent found. Compare p1 and p2 as siblings using the parent's method.
+            // This delegates to type-specific sibling comparison (e.g., DOM order).
+            try {
+                 return parent1.compareChildNodePointers(p1, p2);
+            } catch (UnsupportedOperationException ex) {
+                 // Fallback if parent type doesn't support child comparison (e.g., VariableScopePointer)
+                 // Use the root-level arbitrary comparison logic (see step 5 below).
+                 return compareRootPointers(p1, p2);
+            }
+        }
+
+        // 4. Parents are different, or at least one is null. Recurse on parents.
+        // The depth parameter 'd' (depth1) is decremented.
+        int d = depth1;
+        // Avoid infinite recursion or errors if depth calculation leads to d=0 unexpectedly.
+        // A depth of 0 should ideally correspond to null pointers already handled.
+        if (d == 0) {
+            // This state suggests roots that are not equal. Use root comparison logic.
+            return compareRootPointers(p1, p2);
+        }
+
+        int r = compareNodePointers(parent1, d - 1, parent2, d - 1);
 
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // 5. Handle result of parent comparison.
+        if (r == 0) {
+            // Parents compared equal. This implies p1 and p2 are siblings relative to
+            // that common parent context (which could be null if they are roots).
+            // If parent1 was non-null, step 3 should have handled it.
+            // So, r=0 here likely means parents were both null or compared equal recursively
+            // up to a null root. We need to compare p1 and p2 as roots/top-level items.
+            return compareRootPointers(p1, p2);
         }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
-        if (r != 0) {
+        else {
+            // Parents compared non-equal (r != 0). The order is determined by the parent order.
             return r;
         }
+    }
+
+    /**
+     * Helper method to compare two pointers assumed to be roots or top-level items
+     * without a common structural parent (e.g., VariablePointer vs RootPointer).
+     * Defines an arbitrary but consistent order.
+     */
+    private int compareRootPointers(NodePointer p1, NodePointer p2) {
+        // Handle nulls just in case they reach here
+        if (p1 == null) return p2 == null ? 0 : -1;
+        if (p2 == null) return 1;
+
+        // Define order based on pointer type: Variables first.
+        boolean var1 = p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer;
+        boolean var2 = p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer;
+        if (var1 != var2) {
+            return var1 ? -1 : 1; // Variables come before non-variables
+        }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+        // Fallback for comparing two pointers of the same category (e.g., two nodes from
+        // different documents, or two variables) where standard parent traversal failed.
+        // Using identity hash code is not ideal as it's not stable across runs/JVMs,
+        // but provides *some* consistent order within a single execution context
+        // when no other structural comparison is possible.
+        // A more robust solution might involve context-specific IDs if available.
+        return System.identityHashCode(p1) < System.identityHashCode(p2) ? -1 : 1;
     }
\ No newline at end of file
