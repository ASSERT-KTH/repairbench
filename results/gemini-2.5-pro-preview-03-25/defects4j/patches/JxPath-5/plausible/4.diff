diff --git a/tmp/10e67c01-9d78-453e-aa70-265b499b9911_buggy.java b/tmp/fe9a6ac8-f684-4c77-9b6a-0b206177dfe3_fixed.java
index 5f8ac1a..15322c0 100644
--- a/tmp/10e67c01-9d78-453e-aa70-265b499b9911_buggy.java
+++ b/tmp/fe9a6ac8-f684-4c77-9b6a-0b206177dfe3_fixed.java
@@ -1,34 +1,99 @@
+    /**
+     * Compare two node pointers based on their depth and position.
+     * This method is used for sorting pointers within a NodeSet.
+     * Handles pointers from potentially different trees (e.g., variable vs. node).
+     *
+     * @param p1     First node pointer.
+     * @param depth1 Depth of the first pointer.
+     * @param p2     Second node pointer.
+     * @param depth2 Depth of the second pointer.
+     * @return -1 if p1 precedes p2, 1 if p1 follows p2, 0 if equal.
+     */
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
+        // 1. Equalize depths by moving up the tree for the deeper pointer
         if (depth1 < depth2) {
+            // If p2 has no parent, we cannot equalize further by moving p2 up.
+            // The recursive call will handle the case where p2.parent is null.
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If parents end up being equal (r=0), p1 is shallower, so it comes first (-1).
+            // Otherwise, the order is determined by the parent comparison (r).
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
+            // If p1 has no parent, we cannot equalize further by moving p1 up.
+            // The recursive call will handle the case where p1.parent is null.
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If parents end up being equal (r=0), p2 is shallower, so p1 comes after p2 (1).
+            // Otherwise, the order is determined by the parent comparison (r).
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
+
+        // 2. Depths are equal (depth1 == depth2)
+
+        // Handle null pointers first for safety and consistency (nulls first)
+        if (p1 == p2) { // Identity check
             return 0;
         }
+        if (p1 == null) {
+            return p2 == null ? 0 : -1; // null < non-null
+        }
+        if (p2 == null) {
+            return 1; // non-null > null
+        }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Now p1 and p2 are guaranteed non-null. Check for semantic equality.
+        if (p1.equals(p2)) {
             return 0;
         }
 
+        // If pointers represent roots (depth=1) but are different,
+        // they might be from different conceptual trees (e.g., a variable vs a document node).
+        // The original code threw an exception here, preventing comparison across trees (like in unions).
+        // FIX: Replace the exception with a fallback comparison based on path strings.
         if (depth1 == 1) {
+            /* Original buggy code:
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
+            */
+            // Compare paths to establish a consistent, albeit arbitrary, order for root nodes.
+            String path1 = p1.asPath();
+            String path2 = p2.asPath();
+            // asPath() should return non-null strings like "$var", "/", "", etc.
+            return path1.compareTo(path2);
         }
+
+        // 3. Depths > 1 and pointers are different. Compare parents recursively.
+        // We assume that if depth > 1, the parent pointers used for recursion are meaningful,
+        // even if they might be null in some edge cases (handled by recursive calls).
+        // The original code used direct field access (.parent).
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
+            // Parents are different or have a defined order, which determines the order of p1 and p2.
             return r;
         }
 
+        // 4. Parents are the same (r == 0). Compare siblings using the parent's method.
+        // If r == 0, it means the recursive call determined the parents to be "equal".
+        // Since depth > 1, this implies they share a common, non-null parent object according
+        // to the comparison logic (unless the parent comparison itself used a fallback like path).
+        // Assume p1.parent is the correct, non-null parent object here based on original logic.
+        // A null parent at this stage would indicate an inconsistency, potentially if parents were
+        // compared equal based on path fallback but were not the same object instance.
+        if (p1.parent == null) {
+             // This state should ideally not be reached if depth > 1 implies a non-null parent
+             // capable of comparing children after the parent comparison returned 0.
+             // Log a warning and provide a fallback comparison based on path.
+             // Consider logging this potential issue if it occurs in practice.
+             // System.err.println("JXPath: Warning - comparing node pointers with equal null parents at depth > 1.");
+             return p1.asPath().compareTo(p2.asPath()); // Fallback comparison
+        }
+        
+        // Delegate comparison to the common parent node.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
