diff --git a/tmp/00e20c02-24ec-4ba2-a3d7-2fc4b19dcd94_buggy.java b/tmp/4d882288-a626-4fd9-818b-b670ce90352b_fixed.java
index 5f8ac1a..36b992c 100644
--- a/tmp/00e20c02-24ec-4ba2-a3d7-2fc4b19dcd94_buggy.java
+++ b/tmp/4d882288-a626-4fd9-818b-b670ce90352b_fixed.java
@@ -1,34 +1,94 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
         if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            NodePointer p2Parent = p2.parent;
+            // If p2 is root (depth 1), parent is null. Depth comparison implies depth1 < 1, assume impossible.
+            // If p2Parent is null and depth2 > 1, it's unexpected. Define an order arbitrarily.
+            if (p2Parent == null) {
+                 return -1; // Define an order: p1 comes before p2 if p2's parent is null unexpectedly
+            }
+            int r = compareNodePointers(p1, depth1, p2Parent, depth2 - 1);
+            // If r == 0, it means p1 is equal to p2's ancestor at the same depth.
+            // This implies p1 is an ancestor of p2 (or p1==p2Parent).
+            // In document order, ancestor comes first.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            NodePointer p1Parent = p1.parent;
+             // Symmetric case for p1 being root or having null parent unexpectedly.
+            if (p1Parent == null) {
+                 return 1; // Define an order: p1 comes after p2 if p1's parent is null unexpectedly
+            }
+            int r = compareNodePointers(p1Parent, depth1 - 1, p2, depth2);
+            // If r == 0, it means p2 is equal to p1's ancestor at the same depth.
+            // This implies p2 is an ancestor of p1 (or p2==p1Parent).
+            // In document order, ancestor comes first.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
+
+        // Depths are equal (depth1 == depth2)
+        if (p1 == p2) { // Handles null == null and same object identity
             return 0;
         }
+        // Handle cases where one pointer might be null (e.g., if called recursively with null parent)
+        if (p1 == null) { // p2 is not null (due to p1 == p2 check)
+             return -1; // Define order: null comes before non-null
+        }
+        if (p2 == null) { // p1 is not null
+             return 1; // Define order: non-null comes after null
+        }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Both p1 and p2 are non-null. Check equality using the equals method.
+        if (p1.equals(p2)) {
             return 0;
         }
 
+        // Both p1 and p2 are non-null, not equal, and at the same depth.
+
+        // If depth is 1, they are root nodes or top-level nodes under the context.
+        // This is where the original code threw an exception.
+        // Instead, provide an arbitrary but consistent comparison for nodes
+        // that might belong to different trees (like VariablePointer vs DOMNodePointer).
         if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+            // Compare based on class name first.
+            int classComp = p1.getClass().getName().compareTo(p2.getClass().getName());
+            if (classComp != 0) {
+                return classComp;
             }
+            // If same class, compare using toString(), which might provide meaningful order
+            // (e.g., variable names, node paths). Fallback to identity hash code if needed.
+            // Using toString() assumes it provides a reasonably stable and comparable representation.
+            int stringComp = p1.toString().compareTo(p2.toString());
+             if (stringComp != 0) {
+                 return stringComp;
+             }
+            // As a last resort for same class and same toString(), use identity hash code.
+            // This provides consistency within a single execution.
+            return Integer.compare(System.identityHashCode(p1), System.identityHashCode(p2));
+        }
+
+        // Depths > 1. Recursively compare parents.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
+            // Parents are different, return the order determined by parent comparison.
             return r;
         }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+        // Parents are the same (r == 0).
+        // Since depth1 > 1, the common parent (p1.parent) must be non-null.
+        // (If parent were null, depth would be 1).
+        NodePointer parent = p1.parent;
+        if (parent == null) {
+             // This state should logically not be reached if depth1 > 1 implies a non-null parent.
+             // Include a safeguard exception for unexpected conditions.
+             throw new IllegalStateException(
+                 "Internal error: Parent is null node during comparison, but depth is > 1. Pointers: '"
+                         + p1 + "' and '" + p2 + "'");
+        }
+        // Ask the common parent to compare its children p1 and p2.
+        return parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
