diff --git a/tmp/104c1bef-91f7-49e5-b9d8-ab80651b2a68_buggy.java b/tmp/07e50ec9-4e30-4ef4-bc3c-674efaeec3da_fixed.java
index 5f8ac1a..0eeb14d 100644
--- a/tmp/104c1bef-91f7-49e5-b9d8-ab80651b2a68_buggy.java
+++ b/tmp/07e50ec9-4e30-4ef4-bc3c-674efaeec3da_fixed.java
@@ -1,34 +1,119 @@
+    /**
+     * Compare two node pointers based on their depth and position.
+     * Handles comparisons involving variable pointers and node pointers.
+     *
+     * @param p1     the first node pointer
+     * @param depth1 the depth of the first node pointer
+     * @param p2     the second node pointer
+     * @param depth2 the depth of the second node pointer
+     * @return -1 if p1 precedes p2, 1 if p1 follows p2, 0 if they are equal
+     */
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
+        if (p1 == p2) { // Identity check, also handles p1 == null && p2 == null
+            return 0;
+        }
+
+        // Handle VariablePointer vs non-VariablePointer comparison
+        // Check for null first before using instanceof
+        boolean p1IsVar = p1 != null && p1 instanceof VariablePointer;
+        boolean p2IsVar = p2 != null && p2 instanceof VariablePointer;
+
+        // If types differ (and both are non-null), define order: Variables come first.
+        if (p1 != null && p2 != null && p1IsVar != p2IsVar) {
+            // Variables sort before nodes
+            return p1IsVar ? -1 : 1;
+        }
+        // Now, either both are variables, both are nodes, or at least one is null.
+
+        // Depth adjustment (recursive calls)
+        // Bring the deeper pointer up to the level of the shallower one.
         if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If p2 is null, but depth2 > depth1, this suggests an inconsistency,
+            // but we handle nulls later. Assume p2 is non-null if depth logic is consistent.
+            // Getting p2.parent might yield null if p2 is a root/variable.
+            NodePointer p2parent = (p2 == null) ? null : p2.parent;
+            int r = compareNodePointers(p1, depth1, p2parent, depth2 - 1);
+            // If parents are equivalent (r=0), p1 represents an ancestor of p2.
+            // In document order, ancestor comes first. Return -1.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+             // Assume p1 is non-null here for parent access.
+            NodePointer p1parent = (p1 == null) ? null : p1.parent;
+            int r = compareNodePointers(p1parent, depth1 - 1, p2, depth2);
+            // If parents are equivalent (r=0), p2 represents an ancestor of p1.
+            // In document order, ancestor (p2) comes first. p1 comes after p2. Return 1.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
+
+        // Depths are equal (depth = depth1 = depth2)
+
+        // We already checked p1 == p2. Handle remaining null cases at this level.
+        if (p1 == null) { // p2 must be non-null (due to p1==p2 check)
+            return -1; // Use nulls-first convention
+        }
+        if (p2 == null) { // p1 must be non-null
+            return 1;  // Use nulls-first convention
         }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Both p1 and p2 are non-null and at the same depth.
+        // Check equality using the object's equals method (might differ from identity)
+        if (p1.equals(p2)) {
             return 0;
         }
 
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
-        }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+        // Compare parents recursively to find the common ancestor or determine order based on ancestors.
+        NodePointer parent1 = p1.parent;
+        NodePointer parent2 = p2.parent;
+        int depth = depth1; // Current depth
+
+        // Recursive call to compare parents
+        int r = compareNodePointers(parent1, depth - 1, parent2, depth - 1);
+
         if (r != 0) {
-            return r;
+            return r; // Parent order determines node order
         }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+        // If parents compare as equal (r == 0), the nodes are siblings relative to that comparison level.
+        // We need to compare them based on their order under the common parent.
+        // The 'common parent' is represented by parent1 (or parent2, as they compared equal).
+        // This common parent pointer could be null if we have reached the top (e.g., comparing root nodes or variables).
+
+        // The original code threw an exception here if depth == 1. This check is removed.
+
+        if (parent1 == null) { // implies parent2 == null because r == 0
+            // Both nodes are roots, or variables, or otherwise lack a common JXPath parent object
+            // capable of comparing children.
+            // Use NodePointer.compareTo() for final ordering determination.
+            // This relies on NodePointer subclasses implementing compareTo consistently.
+            try {
+                 return p1.compareTo(p2);
+            } catch (UnsupportedOperationException e) {
+                 // Fallback if compareTo is not supported between these types?
+                 // This might indicate pointers from truly different contexts.
+                 // Returning 0 might merge them unexpectedly, throwing might be better,
+                 // but let's try a consistent arbitrary order based on class name?
+                 // Or revert to the original exception? The original exception check was
+                 // specifically at depth 1, which was too restrictive. A general exception
+                 // here might be acceptable if compareTo fails and parent is null.
+                 // Let's stick to compareTo and assume it works or throws appropriately.
+                 // If compareTo itself throws, let it propagate. If it's specifically
+                 // UnsupportedOperationException, maybe throw the JXPathException?
+                 // For now, let's assume compareTo handles it or throws.
+                 // Re-throwing the original specific exception seems wrong as the condition is different.
+                 // Let compareTo's exception propagate, or return an arbitrary order.
+                 // Defaulting to 0 is dangerous. Let's use hash codes for arbitrary but consistent order?
+                 return Integer.compare(System.identityHashCode(p1), System.identityHashCode(p2));
+            }
+        } else {
+            // There is a common non-null parent object (parent1).
+            // Use the parent's method to compare its children (p1 and p2).
+            // This assumes parent1 implements compareChildNodePointers correctly.
+            return parent1.compareChildNodePointers(p1, p2);
+        }
     }
\ No newline at end of file
