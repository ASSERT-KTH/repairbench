diff --git a/tmp/c8b7ecd6-7a37-40e9-bc97-98c92367733a_buggy.java b/tmp/9960f58a-7b7a-4781-8cdf-091b6e75a812_fixed.java
index 70ac98c..96b28fd 100644
--- a/tmp/c8b7ecd6-7a37-40e9-bc97-98c92367733a_buggy.java
+++ b/tmp/9960f58a-7b7a-4781-8cdf-091b6e75a812_fixed.java
@@ -1,95 +1,150 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or overflowed.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
+        long overflow = Integer.MAX_VALUE; // Positive limit for int numerator/denominator
+        long minflow = Integer.MIN_VALUE; // Negative limit for int numerator
+
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+
+        // Initial check: If the integer part itself overflows int, throw exception.
+        // Use || instead of && for check a0 < minflow vs a0 > overflow
+        if (a0 > overflow || a0 < minflow) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
-        // check for (almost) integer arguments, which should not go
-        // to iterations.
+        // Handle the case of 'almost integer' values.
         if (FastMath.abs(a0 - value) < epsilon) {
+            // Value is close enough to the integer part a0.
+            // a0 is already checked to be within int limits.
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
-        long p0 = 1;
-        long q0 = 0;
-        long p1 = a0;
-        long q1 = 1;
+        // Initialization: p1/q1 is the previous convergent, p2/q2 is the current one.
+        long p0 = 1; // Represents p_{k-2}
+        long q0 = 0; // Represents q_{k-2}
+        long p1 = a0; // Represents p_{k-1} (starts with k=1, so p0 / convergent 0)
+        long q1 = 1; // Represents q_{k-1} (starts with k=1, so q0 / convergent 0)
+        long p2 = 0; // Represents p_k (convergent for iteration k)
+        long q2 = 1; // Represents q_k (convergent for iteration k)
 
-        long p2 = 0;
-        long q2 = 1;
+        int n = 0; // Iteration counter
+        boolean stop = false; // Loop control flag
+        boolean overflowed = false; // Flag for overflow in the calculation of p2/q2
 
-        int n = 0;
-        boolean stop = false;
         do {
             ++n;
-            double r1 = 1.0 / (r0 - a0);
+            // Calculate next term a_n
+            // Handle potential division by zero or very small denominator
+            double r0_a0_diff = r0 - a0;
+            // A check like `if (r0_a0_diff == 0.0)` might be needed if not handled by `almost integer` check
+            // Or check for very small values that might lead to infinity/NaN
+            if (r0_a0_diff == 0.0) { // Should be caught by initial 'almost integer' check, but safeguard
+                 break; // Stop if value was exact integer after all
+            }
+            double r1 = 1.0 / r0_a0_diff;
             long a1 = (long)FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
-                throw new FractionConversionException(value, p2, q2);
-            }
 
+            // Calculate next convergent p_n / q_n
+            // Need to check for potential overflow in the intermediate multiplication a1 * p1 or a1 * q1
+            // Using BigInteger or checking intermediate results might be more robust,
+            // but sticking to long arithmetic requires checking the final result carefully.
+            long p2_next = (a1 * p1) + p0;
+            long q2_next = (a1 * q1) + q0;
+
+            // Check for overflow against int limits for the result p2_next, q2_next
+            if (p2_next > overflow || p2_next < minflow || q2_next > overflow || q2_next <= 0) {
+                // According to MATH-181, on overflow, we should use the previous convergent.
+                overflowed = true;
+                stop = true; // Stop iteration, p1/q1 holds the last valid convergent
+            } else {
+                // No overflow, current convergent p2/q2 is potentially valid
+                p2 = p2_next;
+                q2 = q2_next;
+
+                // Check termination conditions using the current convergent p2/q2
                 double convergent = (double)p2 / (double)q2;
-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
-                p0 = p1;
-                p1 = p2;
-                q0 = q1;
-                q1 = q2;
+
+                // Stop if max iterations reached OR convergent is close enough OR denominator exceeds limit
+                if (n >= maxIterations || FastMath.abs(convergent - value) <= epsilon || q2 >= maxDenominator) {
+                    stop = true;
+                }
+
+                // If not stopping, update history (p0, q0, p1, q1, a0, r0) for the next iteration
+                if (!stop) {
+                    p0 = p1; p1 = p2;
+                    q0 = q1; q1 = q2;
                     a0 = a1;
                     r0 = r1;
-            } else {
-                stop = true;
+                }
             }
         } while (!stop);
 
-        if (n >= maxIterations) {
+        // Handle results after loop termination
+
+        // If max iterations reached without converging sufficiently (and without overflow causing stop earlier)
+        // Match original behavior: throw exception if n >= maxIterations caused the loop to stop.
+        if (n >= maxIterations && !overflowed) {
+            // Check if the loop truly stopped because n hit maxIterations,
+            // rather than achieving convergence on the last iteration.
+            // The original code threw unconditionally if n >= maxIterations. We match this.
             throw new FractionConversionException(value, maxIterations);
         }
 
-        if (q2 < maxDenominator) {
-            this.numerator = (int) p2;
-            this.denominator = (int) q2;
-        } else {
+        // Decide which convergent to return: (p1, q1) or (p2, q2).
+        // Use previous convergent (p1, q1) if:
+        // - an overflow occurred calculating p2/q2 (overflowed = true)
+        // - the denominator q2 of the current convergent meets or exceeds maxDenominator
+        //   (Note: this means we prefer p1/q1 even if q2 == maxDenominator)
+        if (overflowed || q2 >= maxDenominator) {
+            // Sanity check p1, q1 (they should be the last valid ones calculated)
+            // Check against int limits before casting.
+            if (p1 > overflow || p1 < minflow || q1 > overflow || q1 <= 0) {
+                // If the supposedly "safe" previous convergent is also out of bounds, throw overflow.
+                throw new FractionConversionException(value, p1, q1);
+            }
             this.numerator = (int) p1;
             this.denominator = (int) q1;
+        } else {
+            // Use current convergent (p2, q2).
+            // We know it's within int limits (overflowed is false)
+            // and q2 < maxDenominator.
+            // And either error <= epsilon or n < maxIterations.
+            // p2/q2 were checked for overflow before being assigned, safe to cast.
+            this.numerator = (int) p2;
+            this.denominator = (int) q2;
         }
-
     }
\ No newline at end of file
