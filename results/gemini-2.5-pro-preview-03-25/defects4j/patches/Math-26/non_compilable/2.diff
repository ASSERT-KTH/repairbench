diff --git a/tmp/88df5511-a876-452b-b781-0677274d33a6_buggy.java b/tmp/0614084c-2e5c-4ce2-a635-06daa943e545_fixed.java
index 70ac98c..060362a 100644
--- a/tmp/88df5511-a876-452b-b781-0677274d33a6_buggy.java
+++ b/tmp/0614084c-2e5c-4ce2-a635-06daa943e545_fixed.java
@@ -1,95 +1,173 @@
+import org.apache.commons.math3.exception.MathArithmeticException; // Assuming this might be used elsewhere or by the exception
+import org.apache.commons.math3.exception.util.LocalizedFormats; // Assuming this might be used elsewhere or by the exception
+import org.apache.commons.math3.util.FastMath; // Assuming this is the intended FastMath class
+
+// Added dummy Exception class definition for context, assuming similar structure
+class FractionConversionException extends Exception {
+    public FractionConversionException(double value, int maxIterations) {
+        super("Failed to converge for value: " + value + " within " + maxIterations + " iterations");
+    }
+    public FractionConversionException(double value, long p, long q) {
+        super("Overflow trying to convert " + value + " to fraction (" + p + "/" + q + ")");
+    }
+}
+
+// Added dummy Fraction class definition for context
+class Fraction {
+    private int numerator;
+    private int denominator;
+
+    // Constructor signature matches the provided buggy code
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or overflowed.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+
+        // Check initial integer part for overflow using magnitude.
+        // Use comparisons to avoid Long.MIN_VALUE issue with FastMath.abs()
+        if (a0 > overflow || a0 < -overflow) {
+            throw new FractionConversionException(value, a0, 1L);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
+             // Ensure the integer value fits in int. Check magnitude.
+             // Redundant due to the check above, but ensures safety.
+             if (a0 > overflow || a0 < -overflow) {
+                 throw new FractionConversionException(value, a0, 1L);
+             }
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
-        long p1 = a0;
+        long p1 = a0; // p1 is safe due to checks above
         long q1 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
+        long p2 = 0; // Will be updated in loop before use
+        long q2 = 1; // Will be updated in loop before use
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
+            // Handle potential infinite results (e.g., if value is exact fraction)
+            if (Double.isNaN(r1)) {
+                 throw new FractionConversionException(value, Long.MAX_VALUE, Long.MAX_VALUE); // Indicate failure for NaN/unexpected state
+            }
+            // If r1 is infinite, floor(r1) gives Long.MAX_VALUE
             long a1 = (long)FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
-                throw new FractionConversionException(value, p2, q2);
+
+            // Calculate next convergent candidates p2/q2 using standard long arithmetic
+            long p2_candidate = (a1 * p1) + p0;
+            long q2_candidate = (a1 * q1) + q0;
+
+            // Check for Long overflow resulting in non-positive q2.
+            // Mathematically, q_n must be positive for n >= 1.
+            // A non-positive value indicates long overflow during calculation.
+            if (q2_candidate <= 0) {
+                // Signal overflow, indicating q2 became too large or wrapped around.
+                // Use the potentially corrupted p2_candidate and signal q2 overflowed.
+                throw new FractionConversionException(value, p2_candidate, Long.MAX_VALUE);
+            }
+
+            // Check if the calculated candidates exceed Integer range (int overflow)
+            // Use comparisons for magnitude check to handle Long.MIN_VALUE correctly.
+            boolean p2_intOverflow = p2_candidate > overflow || p2_candidate < -overflow;
+            // q2_candidate is known to be > 0 here.
+            boolean q2_intOverflow = q2_candidate > overflow;
+
+            if (p2_intOverflow || q2_intOverflow) {
+                // This convergent exceeds Integer limits, throw exception
+                throw new FractionConversionException(value, p2_candidate, q2_candidate);
             }
 
+            // No overflows detected for this convergent, assign candidates to p2, q2
+            p2 = p2_candidate;
+            q2 = q2_candidate;
+
+            // Check termination conditions using the valid p2, q2
             double convergent = (double)p2 / (double)q2;
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                // Not stopping: update history for next iteration
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
+                // Stop condition met (maxIterations, epsilon proximity, or q2 >= maxDenominator)
                 stop = true;
             }
         } while (!stop);
 
+        // After loop execution
+
         if (n >= maxIterations) {
+            // Stopped due to maximum iterations limit
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Stopped due to epsilon or maxDenominator.
+        // Determine which convergent to return.
+        // The check inside the loop ensures that p2/q2 never exceeds Integer limits unless an exception is thrown.
+        // The check inside the loop uses q2 < maxDenominator to continue.
+        // If the loop terminates, it's either because n >= maxIterations (handled above),
+        // OR FastMath.abs(convergent - value) <= epsilon (epsilon met),
+        // OR q2 >= maxDenominator (denominator limit met).
+
         if (q2 < maxDenominator) {
+            // If q2 is still less than maxDenominator, it means the loop stopped because the epsilon
+            // condition was met (or maxIterations was reached just before this check, but that's handled above).
+            // In this case, p2/q2 is the convergent that satisfied the condition.
+            // p2 and q2 have already passed the overflow checks.
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
+            // If q2 >= maxDenominator, the loop stopped because the denominator limit was reached.
+            // Per the algorithm's behavior, we should return the *previous* convergent (p1/q1)
+            // as it was the last one whose denominator was below the limit.
+            // p1 and q1 hold values that passed the overflow check in the previous iteration.
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
+    }
 }
\ No newline at end of file
