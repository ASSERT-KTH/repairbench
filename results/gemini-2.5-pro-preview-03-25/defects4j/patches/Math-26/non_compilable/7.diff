diff --git a/tmp/62d9d80a-6eda-4b82-ae17-a38844d95cc7_buggy.java b/tmp/65dfb320-c236-425b-9e9e-fd6a8f264e9f_fixed.java
index 70ac98c..292e206 100644
--- a/tmp/62d9d80a-6eda-4b82-ae17-a38844d95cc7_buggy.java
+++ b/tmp/65dfb320-c236-425b-9e9e-fd6a8f264e9f_fixed.java
@@ -1,95 +1,180 @@
+import org.apache.commons.math3.util.FastMath;
+import java.lang.ArithmeticException; // Ensure this is imported if not implicitly available
+
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or overflowed.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+        // Handle early overflow condition where integer part is too large for int.
+        // Use FastMath.abs to handle Long.MIN_VALUE correctly. Cast overflow to double for comparison.
+        if (FastMath.abs((double)a0) > (double)overflow) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
+            // Ensure the integer value fits in the int type
+            if (a0 > overflow || a0 < Integer.MIN_VALUE) {
+                 throw new FractionConversionException(value, a0, 1l);
+            }
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
+        long p2 = 0; // Convergent numerator
+        long q2 = 1; // Convergent denominator (initialize to 1 to avoid issues)
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
-            double r1 = 1.0 / (r0 - a0);
+            double r0MinusA0 = r0 - a0;
+            // Check for zero difference, implies exact convergence in previous step.
+            // This case should ideally be caught by epsilon check, but handle defensively.
+            if (r0MinusA0 == 0.0) {
+                // Avoid division by zero. Stop iteration, p1/q1 is the exact fraction.
+                // The post-loop logic will handle using p1/q1 or p2/q2 correctly.
+                // Let the loop termination condition decide. We set stop=true later based on conditions.
+                // If we stop here, p2/q2 might not be updated.
+                // Alternative: r1 will be infinite, caught by isFinite check below.
+            }
+            double r1 = 1.0 / r0MinusA0;
+
+            // Check for non-finite intermediate result (indicates division by zero or potential overflow).
+            if (!Double.isFinite(r1)) {
+                 // If r1 is infinite, value was likely exactly p1/q1. Loop should terminate.
+                 // If NaN, there was an issue.
+                 // Treat both as potential overflow/failure to converge further. Use last valid convergent p1/q1.
+                 throw new FractionConversionException(value, p1, q1);
+            }
+
+            // Check if floor(r1) exceeds Long limits before casting.
+            if (r1 > (double) Long.MAX_VALUE) {
+                 // a1 would overflow long. Use last valid convergent p1/q1.
+                throw new FractionConversionException(value, p1, q1);
+            }
             long a1 = (long)FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
-                throw new FractionConversionException(value, p2, q2);
+
+            // Calculate next convergent numerator p2 = (a1 * p1) + p0
+            long p2_hat; // Use temporary variable for check
+            try {
+                // Use exact arithmetic (Java 8+) to detect long overflow.
+                long safeMul = Math.multiplyExact(a1, p1);
+                p2_hat = Math.addExact(safeMul, p0);
+            } catch (ArithmeticException e) {
+                // Long overflow detected during p2 calculation. Use last valid convergent p1/q1.
+                throw new FractionConversionException(value, p1, q1);
+            }
+
+            // Calculate next convergent denominator q2 = (a1 * q1) + q0
+            long q2_hat; // Use temporary variable for check
+            try {
+                // Use exact arithmetic (Java 8+) to detect long overflow.
+                long safeMul = Math.multiplyExact(a1, q1);
+                q2_hat = Math.addExact(safeMul, q0);
+             } catch (ArithmeticException e) {
+                 // Long overflow detected during q2 calculation. Use last valid convergent p1/q1.
+                 throw new FractionConversionException(value, p1, q1);
+             }
+
+            // Check if the calculated convergent numerator/denominator exceed Integer limits
+            // Note: overflow = Integer.MAX_VALUE
+            if ((p2_hat > overflow) || (p2_hat < Integer.MIN_VALUE) || (q2_hat > overflow)) {
+                // Denominator q2_hat should be positive based on algorithm, so no < MIN_VALUE check needed for it.
+                // Throw exception reporting the values (p2_hat, q2_hat) that exceed int limits.
+                throw new FractionConversionException(value, p2_hat, q2_hat);
+            }
+
+            // If all checks passed, update p2 and q2
+            p2 = p2_hat;
+            q2 = q2_hat;
+
+            // Denominator q2 must be positive. If not, it indicates an error in the algorithm logic.
+            if (q2 <= 0) {
+                 throw new FractionConversionException("Denominator non-positive", value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
+
+            // Check convergence criteria: Continue ONLY IF:
+            // - Iteration limit not reached AND
+            // - Error is still greater than epsilon AND
+            // - Denominator is strictly less than maxDenominator limit
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                // Convergent is not yet satisfactory. Continue iteration.
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
+                // Stop iteration criteria met (max iterations reached, or epsilon satisfied, or max denominator reached/exceeded).
                 stop = true;
             }
         } while (!stop);
 
+        // Check if iteration stopped specifically due to reaching max iterations limit.
         if (n >= maxIterations) {
+            // If max iterations reached, throw exception regardless of other conditions.
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // If loop finished normally (n < maxIterations), determine the result fraction.
+        // The loop stops when epsilon is met OR q2 >= maxDenominator.
+
+        // If the denominator q2 of the last calculated convergent (p2, q2)
+        // meets or exceeds maxDenominator, we must use the previous convergent (p1, q1).
         if (q2 < maxDenominator) {
+            // The last calculated convergent (p2, q2) is acceptable and within denominator limit.
+            // It has already been checked to fit within Integer range inside the loop.
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
+            // Denominator limit was met or exceeded by q2. Use previous convergent (p1, q1).
+            // p1 and q1 represent the state before the last iteration and were implicitly
+            // checked against Integer limits in the prior loop iteration's check.
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
