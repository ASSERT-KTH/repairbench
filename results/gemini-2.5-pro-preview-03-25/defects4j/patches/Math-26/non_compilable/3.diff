diff --git a/tmp/c99f16ea-7dd4-44fe-a34b-9caf1a86252a_buggy.java b/tmp/5974abb5-2ffd-47af-9389-1dc178cfcc61_fixed.java
index 70ac98c..f2171e2 100644
--- a/tmp/c99f16ea-7dd4-44fe-a34b-9caf1a86252a_buggy.java
+++ b/tmp/5974abb5-2ffd-47af-9389-1dc178cfcc61_fixed.java
@@ -1,95 +1,168 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or overflowed.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+        // Check if initial integer part overflows int limits (magnitude check)
+        // Use FastMath.abs(double) to handle Long.MIN_VALUE correctly
+        if (FastMath.abs((double)a0) > overflow) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
+            // Ensure a0 fits in int before assigning (magnitude check)
+            // This check is slightly redundant due to the check above, but safe.
+            if (a0 < Integer.MIN_VALUE || a0 > Integer.MAX_VALUE) {
+                 throw new FractionConversionException(value, a0, 1l);
+            }
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
+        // Initializing p2/q2 here is not strictly necessary as they are calculated first in loop
+        // But set them to a valid state (e.g. p1/q1) in case loop terminates immediately
+        long p2 = p1;
+        long q2 = q1;
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
-            double r1 = 1.0 / (r0 - a0);
+            double rk = r0 - a0; // Remainder
+
+            // Check if remainder is negligible, indicating exact convergence at p1/q1
+            // Using a threshold smaller than machine epsilon for doubles might be appropriate
+            // Using Double.MIN_NORMAL ensures we don't divide by zero or subnormal numbers near zero.
+            if (FastMath.abs(rk) < Double.MIN_NORMAL) {
+                 stop = true;
+                 // Keep p1/q1 as the result; ensure p2/q2 don't override this if loop breaks.
+                 // Setting p2/q2 = p1/q1 ensures the post-loop logic correctly selects p1/q1 if needed.
+                 p2 = p1;
+                 q2 = q1;
+                 break; // Exit loop as we've reached the exact fraction p1/q1
+            }
+
+            double r1 = 1.0 / rk;
             long a1 = (long)FastMath.floor(r1);
+
+            // Calculate the next convergent p2/q2
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
-                throw new FractionConversionException(value, p2, q2);
+
+            // Check for potential overflow in long intermediate calculations (signed)
+            // A simpler check is to verify the result against int limits.
+            // Check if calculated p2 or q2 overflow int limits (magnitude check)
+            // q2 should always be positive and increasing in this algorithm.
+            // Check for negative q2 first, which indicates long overflow during calculation.
+            if (q2 < 0) {
+                 throw new FractionConversionException("Denominator negative overflow", value, p2, q2);
+            }
+            // Check if p2 or q2 magnitude exceeds Integer.MAX_VALUE
+            if (FastMath.abs((double)p2) > overflow || q2 > overflow) {
+                // This convergent p2/q2 exceeds int limits.
+                // The algorithm must stop. The previous convergent p1/q1 is the best candidate
+                // if it's within maxDenominator. If we throw here, we lose p1/q1.
+                // Let's set stop = true, and let the logic after loop decide.
+                // The check `q2 < maxDenominator` after the loop will fail, selecting p1/q1.
+                 stop = true;
+                 // Avoid throwing exception here, let post-loop logic handle selection.
+                 // Set p2/q2 values to indicate overflow occurred? Not necessary.
             }
 
+            if (!stop) {
+                // Check termination conditions using the valid convergent p2/q2
                 double convergent = (double)p2 / (double)q2;
                 if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                    // Convergent is valid and does not meet stop criteria, continue
                     p0 = p1;
                     p1 = p2;
                     q0 = q1;
                     q1 = q2;
                     a0 = a1;
                     r0 = r1;
                 } else {
+                    // Stop: maxIterations reached, OR epsilon condition met, OR q2 >= maxDenominator
                     stop = true;
                 }
+            }
         } while (!stop);
 
+        // Check if maxIterations was reached as the primary reason for stopping
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Loop finished before maxIterations. Decide result.
         if (q2 < maxDenominator) {
+            // Use p2/q2 if it's within denominator limit.
+            // Need to ensure p2/q2 didn't overflow int limits.
+            // The check inside the loop handles the overflow condition by setting stop = true.
+            // If stop was set due to overflow, q2 would likely be > overflow, leading to the else branch.
+            // But if p2 overflowed while q2 was still small, this branch might be taken. Check again.
+            if (FastMath.abs((double)p2) > overflow || q2 > overflow) {
+                 // Overflow occurred for p2/q2, fall back to p1/q1
+                 // This implies the overflow check inside loop should perhaps have thrown directly?
+                 // Let's trust the logic flow for now: if overflow stopped loop, use p1/q1 via else branch.
+                 // If we reach here, p2/q2 should be valid.
+            } else {
+                // p2/q2 is the candidate result (met epsilon or loop broke early) and fits int limits.
                  this.numerator = (int) p2;
                  this.denominator = (int) q2;
-        } else {
+                 return; // Added return here
+            }
+        }
+
+        // If q2 >= maxDenominator OR if p2/q2 overflowed (and caused loop to stop), use p1/q1.
+        // Safety checks for p1/q1 overflow (should be redundant but safe).
+        if (q1 == 0) { // Should be impossible here as q1 starts at 1 and grows
+             throw new FractionConversionException("Internal error: q1 is zero", value, p1, q1);
+        }
+        // Check magnitude of p1/q1 against int limits.
+        if (FastMath.abs((double)p1) > overflow || q1 > overflow) {
+             // If the previous convergent p1/q1 itself overflows, throw exception.
+             throw new FractionConversionException("Overflow trying to return previous convergent", value, p1, q1);
+        }
         this.numerator = (int) p1;
         this.denominator = (int) q1;
-        }
 
     }
\ No newline at end of file
