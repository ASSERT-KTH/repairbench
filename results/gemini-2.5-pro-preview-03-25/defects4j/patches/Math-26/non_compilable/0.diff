diff --git a/tmp/42dda5f1-4384-4671-be40-d378754b2a0a_buggy.java b/tmp/3a4da4dc-e785-455a-8a02-1643ef9138a2_fixed.java
index 70ac98c..21281bc 100644
--- a/tmp/42dda5f1-4384-4671-be40-d378754b2a0a_buggy.java
+++ b/tmp/3a4da4dc-e785-455a-8a02-1643ef9138a2_fixed.java
@@ -1,95 +1,200 @@
+import org.apache.commons.math3.util.FastMath;
+import java.math.BigInteger; // Import BigInteger
+
+// Fraction class and other methods are assumed to be present
+
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or overflowed.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
+        // Use Integer.MAX_VALUE as the overflow limit since numerator/denominator are int
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+
+        // Handle potential overflow of the integer part early
+        // Use FastMath.abs(a0) because a0 can be negative. Check against Integer limits.
+        if (FastMath.abs(a0) > overflow) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
-        // check for (almost) integer arguments, which should not go
-        // to iterations.
+        // Check for (almost) integer arguments, which should not go to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
+            // The check above ensures a0 fits within Integer bounds if it passes
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
+        long p2 = 0; // Convergent numerator
+        long q2 = 1; // Convergent denominator, initialized to 1
 
         int n = 0;
         boolean stop = false;
+        double convergent = Double.NaN; // Stores the double value of p2/q2
+
         do {
             ++n;
+            // Calculate the next term in the continued fraction
             double r1 = 1.0 / (r0 - a0);
+            // Check for potential division by zero or infinite result
+            if (Double.isInfinite(r1)) {
+                 // This typically happens when r0 is very close to a0 (the integer part).
+                 // The initial check `FastMath.abs(a0 - value) < epsilon` should handle cases
+                 // where the value is truly close to an integer within the allowed epsilon.
+                 // If reached here, it might be due to floating-point precision limits suggesting
+                 // the previous convergent p1/q1 is the best representation.
+                 stop = true;
+                 // Set p2/q2 to the last valid state (p1/q1) to ensure the final logic uses it.
+                 p2 = p1;
+                 q2 = q1;
+                 // The loop will terminate, and the final assignment logic will handle selection.
+                 break;
+            }
+
             long a1 = (long)FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
-                throw new FractionConversionException(value, p2, q2);
+
+            // Check for theoretical inconsistency: a1 should be non-negative.
+            // In standard continued fractions for positive numbers, a_i >= 1 for i >= 1.
+            // For negative numbers or due to FP issues, a1 might be 0 or negative.
+            // A negative a1 indicates a breakdown in the algorithm's expected behavior.
+            if (a1 < 0L) {
+                 // Throw an exception as the process is not converging correctly.
+                 throw new FractionConversionException("Continued fraction convergents failed to converge (negative quotient).", value, p1, q1);
             }
 
-            double convergent = (double)p2 / (double)q2;
+            // Safely calculate the next convergent numerator p2 = a1 * p1 + p0
+            // and denominator q2 = a1 * q1 + q0 using BigInteger. This avoids potential
+            // long overflow during the multiplication (a1 * p1 or a1 * q1) and allows
+            // accurate checking against Integer.MAX_VALUE / Integer.MIN_VALUE limits.
+            BigInteger bigA1 = BigInteger.valueOf(a1);
+            BigInteger bigP0 = BigInteger.valueOf(p0);
+            BigInteger bigP1 = BigInteger.valueOf(p1);
+            BigInteger bigQ0 = BigInteger.valueOf(q0);
+            BigInteger bigQ1 = BigInteger.valueOf(q1);
+
+            // Calculate potential p2 and q2 using BigInteger
+            BigInteger bigP2 = bigA1.multiply(bigP1).add(bigP0);
+            BigInteger bigQ2 = bigA1.multiply(bigQ1).add(bigQ0);
+
+            // Check if the calculated numerator or denominator exceeds the limits of an Integer.
+            // Denominator (q2) must be positive and <= Integer.MAX_VALUE.
+            // Numerator (p2) must be within [Integer.MIN_VALUE, Integer.MAX_VALUE].
+            if (bigP2.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) > 0 ||
+                bigP2.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) < 0 ||
+                bigQ2.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) > 0) {
+
+                // If overflow is detected, throw FractionConversionException.
+                // Report the potentially overflowing values (p2, q2) in the exception.
+                // Clip the reported values to the Long range as the exception constructor expects longs.
+                long reportP2 = bigP2.max(BigInteger.valueOf(Long.MIN_VALUE))
+                                     .min(BigInteger.valueOf(Long.MAX_VALUE))
+                                     .longValue();
+                // Ensure reported q2 is positive and clipped to Long range.
+                long reportQ2 = bigQ2.max(BigInteger.ZERO) // Should be positive anyway
+                                     .min(BigInteger.valueOf(Long.MAX_VALUE))
+                                     .longValue();
+
+                throw new FractionConversionException(value, reportP2, reportQ2);
+            }
+
+            // If the checks pass, the calculated values fit within Integer limits.
+            // Convert them back to long for use in the algorithm.
+            p2 = bigP2.longValue();
+            q2 = bigQ2.longValue();
+
+            // Sanity check: denominator should always be positive.
+            if (q2 <= 0) {
+                 // This should not happen if the algorithm proceeds correctly.
+                 throw new FractionConversionException("Continued fraction algorithm failed (non-positive denominator).", value, p2, q2);
+            }
+
+            // Calculate the double value of the current convergent p2/q2 for error checking.
+            convergent = (double)p2 / (double)q2;
+
+            // Check the stopping conditions based on the original logic:
+            // - Max iterations reached? (n < maxIterations)
+            // - Error within epsilon? (FastMath.abs(convergent - value) > epsilon)
+            // - Denominator within limit? (q2 < maxDenominator)
+            // If all these conditions for *continuing* are true, proceed. Otherwise, stop.
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                // Conditions met to continue the loop: update variables for the next iteration.
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
-                a0 = a1;
-                r0 = r1;
+                a0 = a1; // a0 is reused to store the next integer part a_i
+                r0 = r1; // r0 is reused to store the next remainder r_i
             } else {
+                // One of the stopping conditions is met, terminate the loop.
                 stop = true;
             }
         } while (!stop);
 
+        // After the loop terminates:
+
+        // Check if termination was due to reaching the maximum number of iterations.
         if (n >= maxIterations) {
+            // If maxIterations was reached, it implies that the convergence criteria
+            // (epsilon accuracy or max denominator) were not met within the iteration limit.
+            // Throw an exception indicating failure to converge sufficiently quickly.
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Determine the final fraction to represent the value.
+        // The loop terminates if:
+        // 1. Epsilon is met: |p2/q2 - value| <= epsilon
+        // 2. Denominator limit is reached: q2 >= maxDenominator
+        // 3. Max iterations is reached (handled above).
+        // 4. Floating point issue (handled by break).
+        //
+        // Use the previous convergent (p1/q1) if the current denominator (q2)
+        // exceeds the maximum allowed denominator. Otherwise, use the last
+        // computed convergent (p2/q2).
         if (q2 < maxDenominator) {
+             // If q2 is within the limit, use the last calculated convergent p2/q2.
+             // This case covers convergence by epsilon or hitting FP limits before maxDenominator.
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
+            // If q2 reached or exceeded maxDenominator, the loop stopped.
+            // Use the previous convergent p1/q1, as its denominator q1 was < maxDenominator.
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
