diff --git a/tmp/7a4419a2-2efd-46bd-a972-b38c8145ea9c_buggy.java b/tmp/715021b2-84ba-45ff-9c5f-5ce27f325d9b_fixed.java
index 70ac98c..2df887e 100644
--- a/tmp/7a4419a2-2efd-46bd-a972-b38c8145ea9c_buggy.java
+++ b/tmp/715021b2-84ba-45ff-9c5f-5ce27f325d9b_fixed.java
@@ -1,95 +1,163 @@
+import org.apache.commons.math3.exception.MathIllegalStateException; // Assuming this or similar is the base class
+import org.apache.commons.math3.exception.util.LocalizedFormats; // Assuming used by FractionConversionException
+import org.apache.commons.math3.util.FastMath;
+
+// Note: The FractionConversionException class is assumed to be defined elsewhere
+// and capable of handling the constructor calls used below.
+// The fields this.numerator and this.denominator are assumed to exist in the enclosing class.
+
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or calculation resulted in integer overflow.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
+        // Define integer limits for clarity and use in checks
+        final long minInt = Integer.MIN_VALUE;
+        final long maxInt = Integer.MAX_VALUE;
+
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+
+        // Check if the initial integer part of the value falls outside the range of a standard Java int.
+        // If it does, it cannot be represented as the numerator of a Fraction with denominator 1.
+        if (a0 < minInt || a0 > maxInt) {
+            // Throw an exception indicating overflow for the initial integer approximation.
             throw new FractionConversionException(value, a0, 1l);
         }
 
-        // check for (almost) integer arguments, which should not go
-        // to iterations.
+        // Handle the case where the value is very close to an integer.
+        // If the absolute difference between the value and its floor is less than epsilon,
+        // consider it an integer and avoid the continued fraction iteration.
         if (FastMath.abs(a0 - value) < epsilon) {
+            // The initial check ensures a0 fits within int range.
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
+        // Initialize the state for the continued fraction algorithm.
+        // The convergents p_n/q_n are generated iteratively.
+        // p0/q0 represents p_(-1)/q_(-1) = 1/0 (by convention)
         long p0 = 1;
         long q0 = 0;
+        // p1/q1 represents p_0/q_0 = a_0/1
+        // a0 was already checked to be within the int range.
         long p1 = a0;
         long q1 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
+        // Variables to store the next convergent p_n/q_n (p2/q2 in the code)
+        long p2 = 0; // Initialized, will be calculated in the first iteration
+        long q2 = 1; // Initialized, will be calculated in the first iteration (denominator should always be positive)
 
-        int n = 0;
-        boolean stop = false;
+        int n = 0; // Iteration counter
+        boolean stop = false; // Flag to control the loop termination
         do {
-            ++n;
+            ++n; // Increment iteration count
+
+            // Calculate the next term a_n (represented by a1 in the code)
+            // r0 represents r_{n-1}, a0 represents a_{n-1}
+            // r_n = 1.0 / (r_{n-1} - a_{n-1})
             double r1 = 1.0 / (r0 - a0);
+            // Check for potential infinity, which might occur due to precision issues if r0 is extremely close to a0.
+             if (Double.isInfinite(r1)) {
+                // This scenario indicates a problem, possibly that the value could not be represented further.
+                // The original code didn't explicitly handle this. Throwing an exception seems appropriate.
+                // Using the p1/q1 values represents the last valid state.
+                 // Note: FractionConversionException might need a specific constructor or message for this.
+                 // Using the p2/q2 signature might align better with the other overflow check,
+                 // but p2/q2 were not successfully computed. Let's use p1/q1.
+                throw new FractionConversionException(value, p1, q1); // Indicate failure based on last good convergent.
+            }
+
+            // a_n = floor(r_n)
             long a1 = (long)FastMath.floor(r1);
+
+            // Calculate the next convergent p_n/q_n using the recurrence relations:
+            // p_n = a_n * p_{n-1} + p_{n-2}
+            // q_n = a_n * q_{n-1} + q_{n-2}
+            // (Here, p2/q2 corresponds to p_n/q_n, p1/q1 to p_{n-1}/q_{n-1}, p0/q0 to p_{n-2}/q_{n-2})
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            // Check if the calculated numerator (p2) or denominator (q2) exceeds the Integer limits.
+            // If they do, the resulting fraction cannot be stored in int fields.
+            if (p2 < minInt || p2 > maxInt || q2 < minInt || q2 > maxInt) {
+                 // Throw an exception indicating overflow, using the values that caused it.
+                 // This mimics the original code's intent for overflow conditions.
                 throw new FractionConversionException(value, p2, q2);
             }
 
+            // Calculate the double value of the current convergent p2/q2 to check against epsilon.
             double convergent = (double)p2 / (double)q2;
+
+            // Check the stopping conditions for the loop:
+            // - Have we reached the maximum allowed iterations? (Checked after the loop exits)
+            // - Is the current convergent close enough to the target value (within epsilon)?
+            // - Has the denominator q2 grown larger than or equal to maxDenominator?
+            // The loop continues ONLY if maxIterations is not reached AND the approximation is not good enough AND the denominator is still below the limit.
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                // None of the stopping conditions met, update the state for the next iteration.
+                // Shift the convergents: (p0, q0) takes values of (p1, q1); (p1, q1) takes values of (p2, q2)
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
-                a0 = a1;
+                // Update r and a for the next term calculation: r_{n} becomes r0, a_{n} becomes a0 for the next loop start.
                 r0 = r1;
+                a0 = a1;
             } else {
+                // A stopping condition is met (epsilon reached, q2 limit reached, or maxIterations will be checked post-loop).
                 stop = true;
             }
         } while (!stop);
 
+        // After the loop terminates, check if it was due to reaching the maximum iteration count.
         if (n >= maxIterations) {
+            // If so, convergence failed within the allowed iterations.
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // The loop stopped either because the epsilon condition was met or because q2 >= maxDenominator.
+        // Now, decide which convergent represents the best result according to the rules:
+        // Use the last computed convergent (p2/q2) if its denominator (q2) is strictly less than maxDenominator.
+        // Otherwise, fall back to the previous convergent (p1/q1).
         if (q2 < maxDenominator) {
+            // The check inside the loop ensures p2 and q2 are within the int range. Casting is safe.
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
+            // Use the previous convergent p1/q1 because q2 >= maxDenominator.
+            // p1 and q1 were validated in the previous iteration (or initially for a0/1). Casting is safe.
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
