diff --git a/tmp/bb2a1a38-256e-424f-9f63-69c85318d18b_buggy.java b/tmp/455cf829-bc53-443c-bff1-a728d574135e_fixed.java
index 70ac98c..d7b3d66 100644
--- a/tmp/bb2a1a38-256e-424f-9f63-69c85318d18b_buggy.java
+++ b/tmp/455cf829-bc53-443c-bff1-a728d574135e_fixed.java
@@ -1,95 +1,127 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or constructed a fraction that would overflow.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+        // Check if a0 fits in int range
+        if (a0 > Integer.MAX_VALUE || a0 < Integer.MIN_VALUE) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
+            // a0 is guaranteed to be within int range here
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
         long p2 = 0;
-        long q2 = 1;
+        long q2 = 1; // q2 must be initialized
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
+
+            // Calculate next convergent
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            // Check if p2 or q2 overflow int limits.
+            // q2 is guaranteed non-negative. p2 can be negative.
+            if (p2 > Integer.MAX_VALUE || q2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE) {
+                 // If overflow occurs, the fraction cannot be represented as int/int.
+                 // Throw exception with the overflowing values (p2, q2).
                  throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
+
+            // Check termination conditions:
+            // We should stop if:
+            // - Convergence failed (too many iterations). Handled after loop.
+            // - Accuracy is met: |convergent - value| <= epsilon
+            // - Denominator is too large: q2 >= maxDenominator
+            // The loop continues if:
+            // - Iteration limit not reached (n < maxIterations)
+            // - Accuracy is not met (error > epsilon)
+            // - Denominator is within limit (q2 < maxDenominator)
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                // Not stopping criteria met, update variables for next iteration
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
+                // Met a stopping condition (accuracy, denominator limit, or iteration limit during check)
                 stop = true;
             }
         } while (!stop);
 
+        // Check if loop terminated due to reaching max iterations
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Loop stopped due to accuracy or denominator limit.
+        // Determine which convergent to use.
+        // If the denominator limit q2 >= maxDenominator caused the stop,
+        // we must use the previous convergent (p1/q1).
+        // We know q1 < maxDenominator (or loop would have stopped earlier).
+        // We also know p1 and q1 fit in int range because they were checked
+        // as p2/q2 in the previous iteration.
+        // If the loop stopped for accuracy (|convergent - value| <= epsilon),
+        // then q2 must be < maxDenominator, and p2/q2 fit in int range (checked in last iteration).
+        // So we use p2/q2.
         if (q2 < maxDenominator) {
+            // Use the last calculated convergent p2/q2
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
+            // Use the previous convergent p1/q1
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
