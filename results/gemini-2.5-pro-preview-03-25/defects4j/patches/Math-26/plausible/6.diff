diff --git a/tmp/8d0eeb5f-19b0-4ebc-adcd-e7618ebe3b14_buggy.java b/tmp/bb82259e-203c-488f-9e7e-e33abebe6120_fixed.java
index 70ac98c..368fdd6 100644
--- a/tmp/8d0eeb5f-19b0-4ebc-adcd-e7618ebe3b14_buggy.java
+++ b/tmp/bb82259e-203c-488f-9e7e-e33abebe6120_fixed.java
@@ -1,95 +1,120 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or overflowed.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+        // Check for overflow condition on integer part (positive or negative)
+        if (a0 > overflow || a0 < Integer.MIN_VALUE) { // Fixed check for MIN_VALUE
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
+            // a0 is checked for overflow above
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
         long p2 = 0;
-        long q2 = 1;
+        long q2 = 1; // q values are always positive after initialization
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
+
+            // Calculate next convergent using long arithmetic
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            // Check for overflow condition on convergent components before casting to int
+            // Numerator p2 must be within [Integer.MIN_VALUE, Integer.MAX_VALUE]
+            // Denominator q2 must be within [1, Integer.MAX_VALUE] (always positive)
+            if ((p2 > overflow) || (p2 < Integer.MIN_VALUE) || (q2 > overflow)) { // Fixed check for MIN_VALUE
+                // If overflow occurs, throw exception using the overflowing convergent's components
                 throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
+            // Check convergence criteria:
+            // Must be within max iterations AND error > epsilon AND denominator < maxDenominator
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                // Not converged or denominator too small yet, update state and continue
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
+                // Stop condition met:
+                // - Max iterations reached (handled below) OR
+                // - Error is small enough (converged within epsilon) OR
+                // - Denominator limit reached (q2 >= maxDenominator)
                 stop = true;
             }
         } while (!stop);
 
+        // Check if max iterations were reached before convergence criteria met
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Decide which convergent to return based on the stopping condition
         if (q2 < maxDenominator) {
+            // Loop stopped because error <= epsilon (and n < maxIterations).
+            // Use the last calculated convergent p2/q2.
+            // p2/q2 passed the overflow check in the last loop iteration.
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
+            // Loop stopped because q2 >= maxDenominator.
+            // Use the previous convergent p1/q1.
+            // p1/q1 were checked for overflow when they were p2/q2 in the previous iteration.
+            // Therefore, they are safe to cast to int.
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
 
     }
\ No newline at end of file
