diff --git a/tmp/52ec1d2d-9515-4b9e-8b5c-30f08d640a1d_buggy.java b/tmp/2c2ce0d7-d580-44f4-8a60-d5847aa46469_fixed.java
index 70ac98c..214bf56 100644
--- a/tmp/52ec1d2d-9515-4b9e-8b5c-30f08d640a1d_buggy.java
+++ b/tmp/2c2ce0d7-d580-44f4-8a60-d5847aa46469_fixed.java
@@ -1,95 +1,130 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+     *         converge or overflowed.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+        // Check for overflow in the integer part
+        // Ensure a0 is within the range [Integer.MIN_VALUE, Integer.MAX_VALUE]
+        if (a0 < -overflow - 1 || a0 > overflow) { // Changed condition
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
+            // a0 is within integer range, safe to cast.
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
         long p2 = 0;
         long q2 = 1;
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
+            // Handle potential infinity case if r0 - a0 is zero due to precision loss
+            if (Double.isInfinite(r1)) {
+                 // Cannot compute best convergent, throw exception or return previous?
+                 // Existing code would lead to a large a1, potential overflow later.
+                 // Let's check if this case leads to an issue. If a1 becomes Long.MAX_VALUE.
+                 // If value is very close to an integer, the initial check should handle it.
+                 // If value is very close to a rational, r0-a0 might become tiny.
+                 // Let the calculation proceed, overflow check should handle it.
+                if (Double.isNaN(r1)) {
+                    // Avoid NaN values propagating. Should not happen normally.
+                    throw new FractionConversionException(value, p1, q1); // Use last valid convergent
+                }
+            }
             long a1 = (long)FastMath.floor(r1);
+
+            // Compute next numerator and denominator using long arithmetic
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            // Check for potential overflow storing p2 or q2 in int.
+            // Check if p2 or q2 exceeds the bounds of Integer.
+            // Denominator q2 should remain positive.
+            if ((p2 > overflow) || (p2 < -overflow - 1) || (q2 > overflow)) { // Added check for p2 < Integer.MIN_VALUE
+                // Detect overflow in numerator or denominator.
+                // Note: This check assumes the long calculation itself did not overflow
+                // in a way that masks this condition (e.g., wrap-around into int range).
+                // However, this covers more cases than the original check.
                 throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
+            // Check convergence criteria
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                // Continue iterations: update convergents
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
+                // Met stopping condition (max iterations, epsilon tolerance, or max denominator)
                 stop = true;
             }
         } while (!stop);
 
         if (n >= maxIterations) {
+            // Failed to converge within maxIterations
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Decide which convergent to use based on why the loop stopped.
+        // If stopped due to q2 >= maxDenominator, use previous convergent (p1, q1).
+        // Otherwise, use the last calculated convergent (p2, q2).
         if (q2 < maxDenominator) {
+            // p2 and q2 passed the overflow check inside the loop, safe to cast.
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
+            // p1 and q1 were the results from the previous iteration (or initial state),
+            // and must have passed the overflow check then. Safe to cast.
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
