diff --git a/tmp/85757bc7-9a76-4547-8d7a-5e739dbb118c_buggy.java b/tmp/7bfb8560-e079-44d5-ba83-74089eaa654f_fixed.java
index 9d42346..6086fb2 100644
--- a/tmp/85757bc7-9a76-4547-8d7a-5e739dbb118c_buggy.java
+++ b/tmp/7bfb8560-e079-44d5-ba83-74089eaa654f_fixed.java
@@ -1,37 +1,55 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
+      // User specified an adapter; use it.
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
+    final boolean jsonAdapterPresent = mapped != null; // true if '@JsonAdapter' specified an adapter
+    if (mapped == null) {
+      // No adapter specified by annotation, get the default one for the field type
+      mapped = context.getAdapter(fieldType);
+    }
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        // Use the adapter specified by @JsonAdapter directly if present.
+        // Otherwise, use the runtime type wrapper for polymorphism.
+        TypeAdapter t;
+        if (jsonAdapterPresent) {
+          // The user explicitly specified an adapter using @JsonAdapter.
+          // We must use exactly this adapter. Cast is safe because Field reflects the T of TypeAdapter<T>
+          // Using the specified adapter directly prevents the TypeAdapterRuntimeTypeWrapper 
+          // from choosing a different adapter based on the runtime type, which is crucial
+          // for honoring the @JsonAdapter annotation, especially for primitives.
+          t = (TypeAdapter) typeAdapter;
+        } else {
+          // Use a runtime type adapter wrapper for the default adapter case.
+          // This handles cases like List<Object> containing different runtime types
+          // using the default adapters obtained from context.getAdapter.
+          t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        }
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
