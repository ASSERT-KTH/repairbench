diff --git a/tmp/6312d4aa-5ab8-4354-aa22-336e4c21204b_buggy.java b/tmp/6ba06485-4137-428f-84d8-51c5837eed29_fixed.java
index 9d42346..13e0c53 100644
--- a/tmp/6312d4aa-5ab8-4354-aa22-336e4c21204b_buggy.java
+++ b/tmp/6ba06485-4137-428f-84d8-51c5837eed29_fixed.java
@@ -1,37 +1,52 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
+      // User specified an adapter; use it.
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
+    final boolean jsonAdapterPresent = mapped != null; // Check if annotation specified an adapter.
+    if (mapped == null) {
+      // No specified adapter? Ask Gson for the default.
+      mapped = context.getAdapter(fieldType);
+    }
+
+    final TypeAdapter<?> typeAdapter = mapped; // This is the adapter for the field type.
 
-    final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
+      // Determine the adapter to use for writing.
+      // If the user specified an adapter (@JsonAdapter), use it directly.
+      // Otherwise, wrap the default adapter with TypeAdapterRuntimeTypeWrapper
+      // to handle polymorphism (writing the value's actual runtime type).
+      final TypeAdapter<?> writeTypeAdapter = jsonAdapterPresent ? typeAdapter
+          : new TypeAdapterRuntimeTypeWrapper<>(context, typeAdapter, fieldType.getType());
+
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
+        // Use the pre-determined adapter for writing. This respects @JsonAdapter if present.
+        ((TypeAdapter) writeTypeAdapter).write(writer, fieldValue);
       }
+
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
+        // Reading uses the field's declared type adapter (`typeAdapter`).
+        // This correctly uses the @JsonAdapter adapter if present.
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
+
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
