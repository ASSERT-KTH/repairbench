diff --git a/tmp/7237e5a3-6eba-4190-ada3-1201df13d852_buggy.java b/tmp/79739edf-1c47-4b43-9dfa-30c9df8954ba_fixed.java
index 9d42346..d76d08a 100644
--- a/tmp/7237e5a3-6eba-4190-ada3-1201df13d852_buggy.java
+++ b/tmp/79739edf-1c47-4b43-9dfa-30c9df8954ba_fixed.java
@@ -1,37 +1,43 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
+    final boolean jsonAdapterPresent = mapped != null; // True if @JsonAdapter provided an adapter
+    if (mapped == null) {
+      mapped = context.getAdapter(fieldType); // Otherwise, get the default adapter
+    }
+
+    final TypeAdapter<?> typeAdapter = mapped; // This is the adapter determined either by annotation or context lookup
 
-    final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        // Use the TypeAdapterRuntimeTypeWrapper only if the adapter wasn't specified via @JsonAdapter.
+        // If @JsonAdapter is used, the user explicitly selected the adapter, so we shouldn't deviate based on runtime type.
+        TypeAdapter t = jsonAdapterPresent
+            ? typeAdapter // Use the adapter from @JsonAdapter directly
+            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType()); // Wrap for runtime type detection
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
-        Object fieldValue = typeAdapter.read(reader);
+        Object fieldValue = typeAdapter.read(reader); // Use the determined adapter for reading
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
