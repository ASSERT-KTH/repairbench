diff --git a/tmp/c6c7cc74-22d5-410c-9e42-139bd65ca29e_buggy.java b/tmp/c29424ca-849c-45e1-a452-2dd462a06d82_fixed.java
index 6ea5795..568410d 100644
--- a/tmp/c6c7cc74-22d5-410c-9e42-139bd65ca29e_buggy.java
+++ b/tmp/c29424ca-849c-45e1-a452-2dd462a06d82_fixed.java
@@ -1,37 +1,100 @@
     /**
      * Appends the usage clause for an Option to a StringBuffer.
      *
      * @param buff the StringBuffer to append to
      * @param option the Option to append
      * @param required whether the Option is required or not
      */
     private static void appendOption(final StringBuffer buff,
                                      final Option option,
                                      final boolean required)
     {
         if (!required)
         {
             buff.append("[");
         }
 
         if (option.getOpt() != null)
         {
             buff.append("-").append(option.getOpt());
         }
         else
         {
             buff.append("--").append(option.getLongOpt());
         }
 
-        // if the Option has a value
-        if (option.hasArg() && (option.getArgName() != null))
+        // if the Option has a value and a non-empty arg name
+        if (option.hasArg() && option.getArgName() != null && option.getArgName().length() > 0)
         {
             buff.append(" <").append(option.getArgName()).append(">");
         }
+        // Detect cases like CLI-18 where we have an option with an optional arg
+        // and an empty arg name (represented by null).
+        // Option.builder("f").hasArg(true).optionalArg(true).argName(null).create()
+        // should be represented as "-f [<arg>]" instead of "-f".
+        // However, if the option is required, like Option.builder("f").hasArg(true).required(true).argName("").create(),
+        // it should be represented as "-f <>". This case seems unlikely and might need review.
+        // The original check only considered hasArg() && getArgName() != null.
+        // The fix is to add a check for the length of the arg name.
+        // This avoids appending " <>" when the arg name is explicitly set to "".
+        // However, let's consider the case where hasArg is true but getArgName is null.
+        // Before the fix, if hasArg() is true and getArgName() is null, the block was skipped.
+        // With the fix, it's still skipped because getArgName() != null is false.
+        // Let's reconsider the original logic and the failing test.
+        // The test expects "-f" when hasArg is true, required is true, and argName is "".
+        // The code produced "-f <>".
+        // The fix `option.getArgName().length() > 0` achieves the desired outcome for the test.
+
+        // What if hasArg is true, argName is null? Should print something like <arg>?
+        // The HelpFormatter usually defaults argName to "arg" if hasArg is true and argName is null.
+        // Let's check the Option class or HelpFormatter usage. The getArgName() method itself returns the set name or "arg" if hasArg is true and no name is set.
+        // Let's re-read Option#getArgName:
+        // /**
+        // * Returns the display name for the argument value.
+        // *
+        // * @return the display name for the argument value.
+        // */
+        // public String getArgName()
+        // {
+        //     return this.argName;
+        // }
+        // Hmm, it seems it just returns the internal field `argName`.
+        // Let's check where it might be defaulted. Maybe in HelpFormatter itself before calling appendOption?
+        // Looking at `renderOptions`:
+        // ...
+        // if (opt.hasArg())
+        // {
+        //     String argName = opt.getArgName();
+        //     if (argName == null || argName.length() == 0) // This seems relevant for display
+        //     {
+        //          // if the option has an optional arg, display "[ <ARG> ]"
+        //          if (opt.hasOptionalArg()) { ... } else { ...} // Not directly relevant here
+        //     } else {
+        //          // prints " <argName>"
+        //     }
+        // }
+        // ...
+        // The usage string generation (`printUsage`) calls `renderOptions` internally via `renderWrappedText`.
+        // No, `printUsage` calls `renderUsage` which calls `appendOption`.
+        // The logic seems directly inside `appendOption`.
+
+        // Let's stick to the fix based on the failing test. The test clearly expects the `<>` part to be omitted when the arg name is explicitly empty ("").
+        // The modified condition `option.hasArg() && option.getArgName() != null && option.getArgName().length() > 0` correctly handles this.
+
+        // If `hasArg` is true and `getArgName` returns null (meaning it wasn't set), the condition `option.getArgName() != null` becomes false, and the block is skipped. This might be slightly incorrect if the desired output is "-f <arg>" in that case.
+        // However, the `Option` class documentation mentions a default name "arg". Let's re-check `hasArg()`:
+        // public boolean hasArg() { return this.numberOfArgs > 0 || this.numberOfArgs == UNINITIALIZED; }
+        // And the constructor `Option(String opt, boolean hasArg, String description)` sets `this.numberOfArgs = hasArg ? 1 : UNINITIALIZED;`.
+        // So `hasArg()` returns true in the test.
+        // The `argName` field is initially null.
+        // `option.setArgName("")` sets `this.argName = ""`.
+        // So `getArgName()` returns `""`.
+
+        // The core issue is handling the empty string `""` for the argument name. The fix `option.getArgName().length() > 0` correctly addresses the specific test case failure by not appending `<>` when the name is empty.
 
         // if the Option is not a required option
         if (!required)
         {
             buff.append("]");
         }
     }
\ No newline at end of file
