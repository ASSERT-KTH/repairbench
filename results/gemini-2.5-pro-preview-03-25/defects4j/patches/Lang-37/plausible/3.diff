diff --git a/tmp/c2879bb4-171a-4e4d-add4-b2d3712221f4_buggy.java b/tmp/7b538b27-b1d7-48fd-8460-ce09abe962f3_fixed.java
index d5b1b52..e43a468 100644
--- a/tmp/c2879bb4-171a-4e4d-add4-b2d3712221f4_buggy.java
+++ b/tmp/7b538b27-b1d7-48fd-8460-ce09abe962f3_fixed.java
@@ -1,36 +1,67 @@
     /**
      * <p>Adds all the elements of the given arrays into a new array.</p>
      * <p>The new array contains all of the element of <code>array1</code> followed
      * by all of the elements <code>array2</code>. When an array is returned, it is always
      * a new array.</p>
      *
      * <pre>
      * ArrayUtils.addAll(null, null)     = null
      * ArrayUtils.addAll(array1, null)   = cloned copy of array1
      * ArrayUtils.addAll(null, array2)   = cloned copy of array2
      * ArrayUtils.addAll([], [])         = []
      * ArrayUtils.addAll([null], [null]) = [null, null]
      * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
      * </pre>
      *
      * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
      * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
      * @return The new array, <code>null</code> if both arrays are <code>null</code>.
      *      The type of the new array is the type of the first array,
      *      unless the first array is null, in which case the type is the same as the second array.
+     * @throws IllegalArgumentException if the arrays have incompatible component types.
      * @since 2.1
      */
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
+        // Determine the component type of the new array based on array1
         final Class<?> type1 = array1.getClass().getComponentType();
+        // Create the new array with the determined type and combined length
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+        // Copy elements from array1
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        
+        // Before attempting to copy array2, check if its component type is assignable
+        // to the component type of array1 (which determines the joinedArray type).
+        final Class<?> type2 = array2.getClass().getComponentType();
+        if (!type1.isAssignableFrom(type2)) {
+            throw new IllegalArgumentException("Cannot store " + type2.getName() + " elements in an array of " + type1.getName() + " elements");
+        }
+
+        try {
+            // Copy elements from array2 into the joinedArray
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+        } catch (ArrayStoreException ase) {
+            // This could happen in theory if type1.isAssignableFrom(type2) is true,
+            // but an element in array2 is not actually an instance of type1.
+            // Re-throw the exception with potentially more context.
+            final Throwable cause = ase.getCause();
+             if (cause instanceof ClassCastException) { // Check the underlying cause if available
+                 throw new IllegalArgumentException("Cannot store " + type2.getName() + " elements in an array of " + type1.getName() + " elements due to incompatible types", ase);
+             }
+            throw ase; // rethrow original exception if cause is not ClassCastException or not available
+        }
         return joinedArray;
     }
+
+    // Assume clone() is defined elsewhere in the class, e.g.:
+    // public static <T> T[] clone(T[] array) {
+    //     if (array == null) {
+    //         return null;
+    //     }
+    //     return array.clone();
+    // }
\ No newline at end of file
