diff --git a/tmp/7ea61ff0-0ab0-48c5-9c9c-c471725c9392_buggy.java b/tmp/0cfca1b1-2a56-4e6e-b9f8-b817641426f0_fixed.java
index d5b1b52..6d50ff7 100644
--- a/tmp/7ea61ff0-0ab0-48c5-9c9c-c471725c9392_buggy.java
+++ b/tmp/0cfca1b1-2a56-4e6e-b9f8-b817641426f0_fixed.java
@@ -1,36 +1,64 @@
     /**
      * <p>Adds all the elements of the given arrays into a new array.</p>
      * <p>The new array contains all of the element of <code>array1</code> followed
      * by all of the elements <code>array2</code>. When an array is returned, it is always
      * a new array.</p>
      *
      * <pre>
      * ArrayUtils.addAll(null, null)     = null
      * ArrayUtils.addAll(array1, null)   = cloned copy of array1
      * ArrayUtils.addAll(null, array2)   = cloned copy of array2
      * ArrayUtils.addAll([], [])         = []
      * ArrayUtils.addAll([null], [null]) = [null, null]
      * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
      * </pre>
      *
      * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
      * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
      * @return The new array, <code>null</code> if both arrays are <code>null</code>.
      *      The type of the new array is the type of the first array,
      *      unless the first array is null, in which case the type is the same as the second array.
      * @since 2.1
      */
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
         final Class<?> type1 = array1.getClass().getComponentType();
+        // Create a new array of the same type as array1
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+        // Copy array1 elements
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        try {
+            // Copy array2 elements into the new array
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+        } catch (ArrayStoreException ase) {
+            // This exception occurs if elements in array2 are not compatible
+            // with the component type of array1 (which determines the joinedArray type).
+            final Class<?> type2 = array2.getClass().getComponentType();
+            // Check if the component types are assignable
+            if (!type1.isAssignableFrom(type2)){
+                // If not assignable, throw IllegalArgumentException as per test requirement
+                throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName(), ase);
+            }
+            // If the types are technically assignable, but the exception still occurred
+            // (e.g., due to specific element types or other runtime issues), rethrow the original exception.
+            throw ase;
+        }
         return joinedArray;
     }
+
+    // Helper clone method assumed to exist based on usage in the original code
+    @SuppressWarnings("unchecked")
+    private static <T> T[] clone(T[] array) {
+        if (array == null) {
+            return null;
+        }
+        return (T[]) array.clone();
+    }
+
+    // Helper Array.newInstance method used in the original code (part of java.lang.reflect.Array)
+    // No need to include its definition here, just noting its usage.
\ No newline at end of file
