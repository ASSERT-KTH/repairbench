diff --git a/tmp/76649a68-dc3e-4ed4-ae37-c9d1ff8f30f2_buggy.java b/tmp/dce7c59c-63d6-4bbd-8018-c9bb844bb20f_fixed.java
index d5b1b52..ee4c3d3 100644
--- a/tmp/76649a68-dc3e-4ed4-ae37-c9d1ff8f30f2_buggy.java
+++ b/tmp/dce7c59c-63d6-4bbd-8018-c9bb844bb20f_fixed.java
@@ -1,36 +1,66 @@
+import java.lang.reflect.Array;
+
 /**
  * <p>Adds all the elements of the given arrays into a new array.</p>
  * <p>The new array contains all of the element of <code>array1</code> followed
  * by all of the elements <code>array2</code>. When an array is returned, it is always
  * a new array.</p>
  *
  * <pre>
  * ArrayUtils.addAll(null, null)     = null
  * ArrayUtils.addAll(array1, null)   = cloned copy of array1
  * ArrayUtils.addAll(null, array2)   = cloned copy of array2
  * ArrayUtils.addAll([], [])         = []
  * ArrayUtils.addAll([null], [null]) = [null, null]
  * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
  * </pre>
  *
  * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
  * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
  * @return The new array, <code>null</code> if both arrays are <code>null</code>.
  *      The type of the new array is the type of the first array,
  *      unless the first array is null, in which case the type is the same as the second array.
+ * @throws IllegalArgumentException if the component types of the arrays are incompatible.
  * @since 2.1
  */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
     if (array1 == null) {
-            return clone(array2);
+        return clone(array2); // Assuming clone is available in the same class
     } else if (array2 == null) {
-            return clone(array1);
+        return clone(array1); // Assuming clone is available in the same class
     }
+
+    // Both arrays are non-null
     final Class<?> type1 = array1.getClass().getComponentType();
+    final Class<?> type2 = array2.getClass().getComponentType();
+
+    // Check for compatibility before creating the array.
+    // Can elements of type type2 be stored in an array of type type1?
+    // This condition is needed to prevent ArrayStoreException and throw IllegalArgumentException instead,
+    // as required by tests like testJira567.
+    if (!type1.isAssignableFrom(type2)){
+        throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName());
+    }
+
+    // Create the new array with component type of array1
     T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+
+    // Copy elements
     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+    // An ArrayStoreException can still theoretically occur at runtime during the second copy
+    // if array2 contains individual elements incompatible with type1, even if type2 is assignable to type1.
+    // This is the expected behavior of System.arraycopy in such edge cases.
+
     return joinedArray;
 }
+
+// Helper method assumed to exist in the same class (e.g., ArrayUtils)
+// Kept private/package-private for illustration if needed, but not part of the required output.
+// private static <T> T[] clone(T[] array) {
+//     if (array == null) {
+//         return null;
+//     }
+//     return array.clone();
+// }
