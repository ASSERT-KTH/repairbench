diff --git a/tmp/a2d957d5-6d78-415d-91ea-01d2dfe87e74_buggy.java b/tmp/23c0c4e1-5f08-49fc-aeb3-75034364f33f_fixed.java
index 1b29465..7d8ed55 100644
--- a/tmp/a2d957d5-6d78-415d-91ea-01d2dfe87e74_buggy.java
+++ b/tmp/23c0c4e1-5f08-49fc-aeb3-75034364f33f_fixed.java
@@ -1,50 +1,66 @@
     private void parseStartTag() {
         tq.consume("<");
         String tagName = tq.consumeWord();
 
         if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
             tq.addFirst("&lt;");
+            // We need to ensure the parser transitions back to the Text state to handle this '<' as text.
+            // Simply calling parseTextNode() might not be sufficient depending on the caller's logic.
+            // However, assuming parseTextNode is the correct action or that the caller handles the state:
             parseTextNode();
             return;
         }
 
         Attributes attributes = new Attributes();
         while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {
             Attribute attribute = parseAttribute();
             if (attribute != null)
                 attributes.put(attribute);
         }
 
         Tag tag = Tag.valueOf(tagName);
         Element child = new Element(tag, baseUri, attributes);
 
-        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
-        if (tq.matchChomp("/>")) { // close empty element or tag
+        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img)
+        if (tq.matchChomp("/>")) { // Check for self-closing '/ >'
             isEmptyElement = true;
         } else {
-            tq.matchChomp(">");
+            tq.matchChomp(">"); // Consume the closing '>' of the start tag e.g., <p>
         }
+        // Add child to parent, and push onto stack if it's not an empty element
         addChildToParent(child, isEmptyElement);
 
-        // pc data only tags (textarea, script): chomp to end tag, add content as text node
-        if (tag.isData()) {
-            String data = tq.chompTo("</" + tagName);
-            tq.chompTo(">");
+        // Handle data tags (script, textarea, title) which expect raw text content.
+        // This needs to happen only if the tag is NOT considered empty (e.g., not <script/> or <img>)
+        if (tag.isData() && !isEmptyElement) {
+            // Consume the data content up to the end tag </tagName>
+            // Importantly, use consumeTo, not chompTo. consumeTo reads *up to* the sequence,
+            // leaving the sequence itself (the end tag) in the queue to be handled by the parser's state machine.
+            String data = tq.consumeTo("</" + tagName);
 
+            // Create the appropriate node for the data.
             Node dataNode;
-            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
+            if (tag.equals(titleTag) || tag.equals(textareaTag))
+                // Title and textarea data are treated like text, entities should be decoded.
                 dataNode = TextNode.createFromEncoded(data, baseUri);
             else
-                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for " in script)
+                // Script data is raw; entities (like &lt;) should not be decoded.
+                dataNode = new DataNode(data, baseUri);
             child.appendChild(dataNode);
+
+            // DO NOT consume the end tag here (e.g., </script>).
+            // The parser's main loop, likely transitioning to a specific state like ScriptDataState,
+            // is responsible for finding and consuming the end tag, popping the stack,
+            // and returning to the previous state. The original code's tq.chompTo(">");
+            // after the data chomp was incorrect and caused the bug.
         }
 
-        // <base href>: update the base uri
+        // Special handling for <base href> tags to update the base URI.
         if (child.tagName().equals("base")) {
             String href = child.absUrl("href");
             if (href.length() != 0) { // ignore <base target> etc
                 baseUri = href;
                 doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
             }
         }
     }
\ No newline at end of file
