diff --git a/tmp/cf56396e-c477-4c0e-bf3b-452c4920ee05_buggy.java b/tmp/e49ead19-c444-4f4d-9ee9-138bc1af07d9_fixed.java
index 1b29465..e3f89c5 100644
--- a/tmp/cf56396e-c477-4c0e-bf3b-452c4920ee05_buggy.java
+++ b/tmp/e49ead19-c444-4f4d-9ee9-138bc1af07d9_fixed.java
@@ -1,50 +1,58 @@
     private void parseStartTag() {
         tq.consume("<");
         String tagName = tq.consumeWord();
 
         if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
             tq.addFirst("&lt;");
+            // Note: Jsoup's actual parser uses state transitions. This simulates handling as text.
             parseTextNode();
             return;
         }
 
         Attributes attributes = new Attributes();
         while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {
             Attribute attribute = parseAttribute();
             if (attribute != null)
                 attributes.put(attribute);
         }
 
         Tag tag = Tag.valueOf(tagName);
         Element child = new Element(tag, baseUri, attributes);
 
         boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
         if (tq.matchChomp("/>")) { // close empty element or tag
             isEmptyElement = true;
         } else {
-            tq.matchChomp(">");
+            tq.matchChomp(">"); // Consume the closing ">" of the start tag
         }
+        
+        // Add child to parent / stack before processing data, unless it's an empty element
         addChildToParent(child, isEmptyElement);
 
-        // pc data only tags (textarea, script): chomp to end tag, add content as text node
-        if (tag.isData()) {
-            String data = tq.chompTo("</" + tagName);
-            tq.chompTo(">");
+        // pc data only tags (textarea, script): read data up to end tag, add content as text node
+        // Only process data if the tag is not treated as empty (e.g. not <script />)
+        if (tag.isData() && !isEmptyElement) {
+            // Consume the data up to the specified end tag. Do not consume the end tag itself.
+            String data = tq.consumeTo("</" + tagName);
+            
+            // The end tag (e.g., </script>) remains on the queue and will be handled by the main parser loop.
 
             Node dataNode;
-            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
+            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, entities decoded
                 dataNode = TextNode.createFromEncoded(data, baseUri);
-            else
-                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for " in script)
+            else // script/style, data is raw (for " in script etc)
+                dataNode = new DataNode(data, baseUri); 
             child.appendChild(dataNode);   
         }
 
         // <base href>: update the base uri
         if (child.tagName().equals("base")) {
             String href = child.absUrl("href");
             if (href.length() != 0) { // ignore <base target> etc
                 baseUri = href;
                 doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
             }
         }
+        // After processing the start tag (and potentially its data), the function returns.
+        // If it was a data tag, the corresponding end tag is still in the queue to be processed next.
     }
\ No newline at end of file
