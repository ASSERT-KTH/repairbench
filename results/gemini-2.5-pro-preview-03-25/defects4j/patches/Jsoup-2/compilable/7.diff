diff --git a/tmp/cf2cd847-a2b7-4ec5-bc67-3c495a0cb5b8_buggy.java b/tmp/7687527d-2365-444b-9c27-57a17c19570f_fixed.java
index 1b29465..7193315 100644
--- a/tmp/cf2cd847-a2b7-4ec5-bc67-3c495a0cb5b8_buggy.java
+++ b/tmp/7687527d-2365-444b-9c27-57a17c19570f_fixed.java
@@ -1,50 +1,73 @@
     private void parseStartTag() {
         tq.consume("<");
         String tagName = tq.consumeWord();
 
         if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
             tq.addFirst("&lt;");
-            parseTextNode();
+            parseTextNode(); // Assumes parseTextNode exists and handles appending text
             return;
         }
 
         Attributes attributes = new Attributes();
         while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {
+            // Assuming parseAttribute() is defined elsewhere and returns Attribute or null
             Attribute attribute = parseAttribute();
             if (attribute != null)
                 attributes.put(attribute);
         }
 
+        // Assuming Tag, Element, Attributes, Node, TextNode, DataNode are available from imports
         Tag tag = Tag.valueOf(tagName);
+        // Assuming baseUri is accessible (e.g., member variable)
         Element child = new Element(tag, baseUri, attributes);
 
         boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
         if (tq.matchChomp("/>")) { // close empty element or tag
             isEmptyElement = true;
         } else {
             tq.matchChomp(">");
         }
+        // Assuming addChildToParent adds the child to the current parent element
+        // and pushes 'child' onto the 'stack' if it's not an empty element.
         addChildToParent(child, isEmptyElement);
 
         // pc data only tags (textarea, script): chomp to end tag, add content as text node
         if (tag.isData()) {
             String data = tq.chompTo("</" + tagName);
-            tq.chompTo(">");
+            // Consume the end tag robustly. Replaces original tq.chompTo(">").
+            // This ensures that the correct end tag is consumed.
+            tq.matchChomp("</" + tagName + ">");
 
             Node dataNode;
-            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
+            // Assuming titleTag and textareaTag are defined Tag constants accessible here
+            if (tag.equals(titleTag) || tag.equals(textareaTag)) // RCDATA handling
                 dataNode = TextNode.createFromEncoded(data, baseUri);
-            else
+            else // RAWTEXT handling (script, style)
                 dataNode = new DataNode(data, baseUri); // data not encoded but raw (for " in script)
             child.appendChild(dataNode);
+
+            // FIX: Pop the element from the stack.
+            // This assumes 'stack' (likely a LinkedList<Element> or ArrayList<Element>)
+            // is accessible and holds the current tree path (list of open elements).
+            // This step is necessary because this block consumed the start tag, data,
+            // and end tag, effectively closing the element implicitly. Without popping,
+            // subsequent text nodes would be incorrectly added to this element.
+            if (!stack.isEmpty() && stack.getLast().tagName().equals(tagName)) {
+                stack.removeLast(); // Pop the element represented by 'child'
+            }
+            // Note: The exact method names for stack access (e.g., getLast(), removeLast())
+            // depend on the actual type and implementation of 'stack' in the surrounding class.
+            // This logic assumes a LIFO structure like LinkedList or ArrayList used as a stack.
         }
 
         // <base href>: update the base uri
         if (child.tagName().equals("base")) {
             String href = child.absUrl("href");
             if (href.length() != 0) { // ignore <base target> etc
                 baseUri = href;
-                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
+                // Assuming 'doc' is the Document being built and is accessible
+                // The check for doc != null might be necessary depending on context.
+                if (doc != null) doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
             }
         }
     }
\ No newline at end of file
