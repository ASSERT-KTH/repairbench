diff --git a/tmp/011b5670-0722-410d-87d3-eb95aac0034f_buggy.java b/tmp/88acab1c-26ad-4ca9-9764-23746dc5361e_fixed.java
index 1b29465..e37c906 100644
--- a/tmp/011b5670-0722-410d-87d3-eb95aac0034f_buggy.java
+++ b/tmp/88acab1c-26ad-4ca9-9764-23746dc5361e_fixed.java
@@ -1,50 +1,66 @@
     private void parseStartTag() {
         tq.consume("<");
         String tagName = tq.consumeWord();
 
         if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
             tq.addFirst("&lt;");
             parseTextNode();
             return;
         }
 
         Attributes attributes = new Attributes();
         while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {
             Attribute attribute = parseAttribute();
             if (attribute != null)
                 attributes.put(attribute);
         }
 
         Tag tag = Tag.valueOf(tagName);
         Element child = new Element(tag, baseUri, attributes);
 
-        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
+        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>)
         if (tq.matchChomp("/>")) { // close empty element or tag
             isEmptyElement = true;
         } else {
             tq.matchChomp(">");
         }
+
+        // If it's a data tag (like script, style), it means the content doesn't need parsing,
+        // and we consume the content + closing tag right here.
+        // For stack management (handled by addChildToParent), treat this tag as implicitly "empty"
+        // because we are handling its entire scope (start tag, content, end tag) within this method.
+        // This prevents the parser from expecting further children of this tag.
+        if (tag.isData()) {
+            isEmptyElement = true;
+        }
+
         addChildToParent(child, isEmptyElement);
 
         // pc data only tags (textarea, script): chomp to end tag, add content as text node
         if (tag.isData()) {
             String data = tq.chompTo("</" + tagName);
-            tq.chompTo(">");
+            // Correctly consume the end tag. The previous tq.chompTo(">") was incorrect as it
+            // only consumed up to the '>' of the end tag, potentially leaving parts of the tag unconsumed
+            // or consuming additional content incorrectly.
+            tq.consume("</" + tagName + ">");
 
             Node dataNode;
-            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
+            // title and textarea are parsed as RCData, but always have TextNodes, not DataNodes
+            // This is because the content should be modelled as encoded text, versus the DataNode used for
+            // script/style which holds raw encoded data.
+            if (tag.equals(titleTag) || tag.equals(textareaTag))
                 dataNode = TextNode.createFromEncoded(data, baseUri);
-            else
+            else // script, style
                 dataNode = new DataNode(data, baseUri); // data not encoded but raw (for " in script)
             child.appendChild(dataNode);
         }
 
         // <base href>: update the base uri
         if (child.tagName().equals("base")) {
             String href = child.absUrl("href");
             if (href.length() != 0) { // ignore <base target> etc
                 baseUri = href;
                 doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
             }
         }
     }
\ No newline at end of file
