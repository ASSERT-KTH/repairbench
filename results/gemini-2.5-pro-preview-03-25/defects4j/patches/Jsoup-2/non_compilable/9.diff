diff --git a/tmp/27c3cb6d-b0c0-4d75-90c4-b311af3797ff_buggy.java b/tmp/23e84d8e-d625-41c7-85b3-031da079af32_fixed.java
index 1b29465..0dee90c 100644
--- a/tmp/27c3cb6d-b0c0-4d75-90c4-b311af3797ff_buggy.java
+++ b/tmp/23e84d8e-d625-41c7-85b3-031da079af32_fixed.java
@@ -1,50 +1,68 @@
     private void parseStartTag() {
         tq.consume("<");
         String tagName = tq.consumeWord();
 
         if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
             tq.addFirst("&lt;");
+            // We need to switch back to Data state to parse the text
+            // This might require returning a specific token or adjusting the calling logic
+            // However, the immediate fix is focused on the data tag parsing below.
+            // Assuming parseTextNode handles the transition correctly for now.
             parseTextNode();
             return;
         }
 
         Attributes attributes = new Attributes();
         while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {
             Attribute attribute = parseAttribute();
             if (attribute != null)
                 attributes.put(attribute);
         }
 
-        Tag tag = Tag.valueOf(tagName);
+        Tag tag = Tag.valueOf(tagName); // returns normalized (lowercase) tag
         Element child = new Element(tag, baseUri, attributes);
 
         boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
         if (tq.matchChomp("/>")) { // close empty element or tag
             isEmptyElement = true;
         } else {
-            tq.matchChomp(">");
+            tq.matchChomp(">"); // Consume the closing > of the start tag
         }
+        // Add child to parent *before* parsing data content for data tags.
+        // This matches jsoup's behavior but differs from some parsers.
         addChildToParent(child, isEmptyElement);
 
         // pc data only tags (textarea, script): chomp to end tag, add content as text node
         if (tag.isData()) {
-            String data = tq.chompTo("</" + tagName);
-            tq.chompTo(">");
+            // Original buggy code:
+            // String data = tq.chompTo("</" + tagName); // Used original potentially mixed-case tagName
+            // tq.chompTo(">"); // Incorrectly consumed up to the *next* >
+
+            // Fixed code:
+            String endTag = "</" + tag.getName(); // Use normalized (lowercase) tag name for matching end tag
+            // Consume data up to the end tag sequence </tagname>, case-insensitive as per HTML spec for script/style
+            String data = tq.consumeToIgnoreCase(endTag);
+            // Consume the matched end tag sequence itself (e.g., </script>, </SCRIPT>, etc.)
+            tq.matchChompIgnoreCase(endTag);
+            // Consume the closing '>' character of the end tag
+            tq.matchChomp(">");
 
             Node dataNode;
-            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
+            // Use tag object comparison
+            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, encoded
                 dataNode = TextNode.createFromEncoded(data, baseUri);
-            else
+            else // script, style etc - data is raw / CDATA
                 dataNode = new DataNode(data, baseUri); // data not encoded but raw (for " in script)
             child.appendChild(dataNode);
         }
 
         // <base href>: update the base uri
-        if (child.tagName().equals("base")) {
+        // Use tag's normalized name for comparison
+        if (tag.getName().equals("base")) {
             String href = child.absUrl("href");
             if (href.length() != 0) { // ignore <base target> etc
                 baseUri = href;
                 doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
             }
         }
     }
\ No newline at end of file
