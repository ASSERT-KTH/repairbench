diff --git a/tmp/5e89d87a-5f37-4ca0-a639-79e14dcaa032_buggy.java b/tmp/fe161343-d26e-4fa4-8313-423af9506dd0_fixed.java
index ce55b5f..502f22b 100644
--- a/tmp/5e89d87a-5f37-4ca0-a639-79e14dcaa032_buggy.java
+++ b/tmp/fe161343-d26e-4fa4-8313-423af9506dd0_fixed.java
@@ -1,63 +1,103 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
+     * Special cases:
+     * <ul>
+     *  <li>The invocations {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},
+     *      {@code gcd(Integer.MIN_VALUE, 0)} and {@code gcd(0, Integer.MIN_VALUE)}
+     *      throw an {@code ArithmeticException}, because the result would be 2^31, which
+     *      is too large for an int value.</li>
+     *  <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and {@code gcd(x, 0)} is the
+     *      absolute value of {@code x}, except for the special cases above.</li>
+     *  <li>The invocation {@code gcd(0, 0)} is the only one which returns
+     *      {@code 0}.</li>
+     * </ul>
      *
-     * @param u a non-zero number
-     * @param v a non-zero number
-     * @return the greatest common divisor, never zero
-     * @since 1.1
+     * @param p a number
+     * @param q a number
+     * @return the greatest common divisor, never negative
+     * @throws ArithmeticException if the result cannot be represented as a non-negative int value.
+     * @since 1.1 (modified in 3.?)
      */
-    public static int gcd(int u, int v) {
-        if (u * v == 0) {
+    public static int gcd(int p, int q) throws ArithmeticException {
+        int u = p;
+        int v = q;
+        // Handle special cases involving 0 or Integer.MIN_VALUE
+        if (u == 0 || v == 0) {
+            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                // GCD(MIN_VALUE, 0) or GCD(0, MIN_VALUE) is 2^31, which overflows int.
+                throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            // If neither is MIN_VALUE, Math.abs is safe and returns the non-zero value or 0.
             return (Math.abs(u) + Math.abs(v));
         }
-        // keep u and v negative, as negative integers range down to
+
+        // From here, u != 0 and v != 0
+        // Keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         /* assert u!=0 && v!=0; */
         if (u > 0) {
             u = -u;
         } // make u negative
         if (v > 0) {
             v = -v;
         } // make v negative
+
         // B1. [Find power of 2]
         int k = 0;
+        // The loop condition k < 31 is necessary because handling MIN_VALUE can lead to k = 31
+        // if u = v = MIN_VALUE. If k = 31, the gcd is 2^31 which overflows.
         while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                             // both even...
             u /= 2;
             v /= 2;
             k++; // cast out twos.
         }
         if (k == 31) {
+            // Occurs only if u = v = Integer.MIN_VALUE
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
+
         // B2. Initialize: u and v have been divided by 2^k and at least
         // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+        // u and v are negative here.
+        int t = ((u & 1) == 1) ? v : -(u / 2); // B3: t<-u/2 if u is even.
+        // t negative: u was odd, v may be even (t replaces v later in B5)
+        // t positive: u was even, v is odd (t replaces u later in B5)
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0; */ // At start of loop, u and v are negative.
             // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
+            // While t is even.. This is equivalent to Knuth's B3 and B4 steps combined.
+            while ((t & 1) == 0) { 
                 t /= 2; // cast out twos
             }
+
             // B5 [reset max(u,v)]
+            // Now t is odd. If t>0, replace u with -t (negative odd). If t<0, replace v with t (negative odd).
             if (t > 0) {
                 u = -t;
             } else {
                 v = t;
             }
-            // B6/B3. at this point both u and v should be odd.
+            
+            // B6/B3. At this point both u and v should be odd and negative.
+            // Calculate t = (v - u) / 2; which corresponds to Knuth's B6 (u-v) -> B3 (/2).
+            // Since u and v are both odd, v-u is even, so division by 2 is exact.
             t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
+            // |u| larger: t positive (replace u in next B5)
+            // |v| larger: t negative (replace v in next B5)
         } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+        
+        // gcd is |u| * 2^k. Since u is negative, this is -u * 2^k.
+        // The result must be non-negative.
+        // -u is positive, as the loop terminates when u == v, and u is negative.
+        // The case u = Integer.MIN_VALUE requires k=31 and is handled above.
+        // The final multiplication -u * (1 << k) will not overflow if k < 31.
+        return -u * (1 << k);
     }
\ No newline at end of file
