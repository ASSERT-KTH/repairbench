diff --git a/tmp/3988a186-a9db-4175-972c-1ffd95e6fa4a_buggy.java b/tmp/c018094a-1820-4ab0-86e0-465cd6a315a9_fixed.java
index ce55b5f..ceb103f 100644
--- a/tmp/3988a186-a9db-4175-972c-1ffd95e6fa4a_buggy.java
+++ b/tmp/c018094a-1820-4ab0-86e0-465cd6a315a9_fixed.java
@@ -1,63 +1,101 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
      *
-     * @param u a non-zero number
-     * @param v a non-zero number
-     * @return the greatest common divisor, never zero
+     * @param u an integer
+     * @param v an integer
+     * @return the greatest common divisor, never negative. {@code gcd(0,0) = 0}.
+     * @throws ArithmeticException if the gcd is {@code Integer.MIN_VALUE},
+     * which occurs for {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},
+     * {@code gcd(Integer.MIN_VALUE, 0)} and {@code gcd(0, Integer.MIN_VALUE)}
      * @since 1.1
      */
     public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+        // Handle 0 inputs correctly
+        // gcd(x, 0) == gcd(0, x) == |x|
+        if (u == 0) {
+            // gcd(0, v) == |v|
+            // Handle potential overflow at Integer.MIN_VALUE
+            if (v == Integer.MIN_VALUE) {
+                 // Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE, which is negative
+                 // The gcd should be 2^31, which does not fit in an int.
+                 throw new ArithmeticException("overflow: gcd is 2^31");
             }
-        // keep u and v negative, as negative integers range down to
+            return Math.abs(v);
+        }
+        if (v == 0) {
+            // gcd(u, 0) == |u|
+            // Handle potential overflow at Integer.MIN_VALUE
+             if (u == Integer.MIN_VALUE) {
+                 // Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE, which is negative
+                 // The gcd should be 2^31, which does not fit in an int.
+                 throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            return Math.abs(u);
+        }
+
+        // Ensure u and v are negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
+        // (i.e. we can't necessarily negate a negative number without overflow)
         if (u > 0) {
             u = -u;
         } // make u negative
         if (v > 0) {
             v = -v;
         } // make v negative
+
         // B1. [Find power of 2]
         int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+        // The loop condition ensures k < 31, preventing overflow issues with (1 << k)
+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...
             u /= 2;
             v /= 2;
             k++; // cast out twos.
         }
+         // Handle overflow condition: gcd is 2^31
+         // This can happen if u == Integer.MIN_VALUE and v == Integer.MIN_VALUE
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
+
+        // B2. Initialize: u and v have been divided by 2^k and at least one is odd.
+        // Use the variant initialization from the original code:
+        // if u is odd, t = v; if u is even, t = -u/2 = |u|/2
+        int t = ((u & 1) == 1) ? v : -(u / 2);
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
+
         do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
+            /* assert u<0 && v<0; */ // u and v should remain negative
+            // B3/B4: cast out twos from t.
             while ((t & 1) == 0) { // while t is even..
                 t /= 2; // cast out twos
             }
+
             // B5 [reset max(u,v)]
+            // If t is positive, replace u with -t (making u negative and odd).
+            // If t is negative, replace v with t (making v negative and odd).
             if (t > 0) {
                 u = -t;
             } else {
                 v = t;
             }
-            // B6/B3. at this point both u and v should be odd.
+
+            // B6/B3. At this point both u and v should be odd and negative.
+            // Calculate new t = (v - u) / 2; v-u is even.
             t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
+            // If |u| > |v|, u = -max(|u|,|v|), v = -min(|u|,|v|). Then v-u = -min - (-max) = max - min > 0. t > 0.
+            // If |v| > |u|, u = -min(|u|,|v|), v = -max(|u|,|v|). Then v-u = -max - (-min) = min - max < 0. t < 0.
+            // So: t positive implies |u| was larger. Next B5 replaces u.
+            //     t negative implies |v| was larger. Next B5 replaces v.
         } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+
+        // The gcd is |u| * 2^k; since u is negative, this is -u * 2^k
+        // The result is guaranteed not to overflow if k<31, because gcd(|a|,|b|) <= min(|a|,|b|)
+        // and the potential overflow cases (gcd=2^31) were handled earlier.
+        return -u * (1 << k); // gcd is |u|*2^k where u is the negative odd component
     }
\ No newline at end of file
