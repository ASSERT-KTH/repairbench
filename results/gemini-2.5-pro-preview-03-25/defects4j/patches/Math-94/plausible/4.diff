diff --git a/tmp/0a6c97e8-1ac2-482e-bea5-ba5ce49ae746_buggy.java b/tmp/f74f273f-aa5a-4f58-a0e0-e8c7e7f5de2f_fixed.java
index ce55b5f..7bd7151 100644
--- a/tmp/0a6c97e8-1ac2-482e-bea5-ba5ce49ae746_buggy.java
+++ b/tmp/f74f273f-aa5a-4f58-a0e0-e8c7e7f5de2f_fixed.java
@@ -1,63 +1,126 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
+     * <p>
+     * Special cases:
+     * <ul>
+     *  <li>The invocations {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},
+     *      {@code gcd(Integer.MIN_VALUE, 0)} and {@code gcd(0, Integer.MIN_VALUE)}
+     *      throw an {@code ArithmeticException}, because the result would be
+     *      2^31, which is too large for an int value.</li>
+     *  <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and
+     *      {@code gcd(x, 0)} is the absolute value of {@code x}, except
+     *      for the special cases above.</li>
+     *  <li>The invocation {@code gcd(0, 0)} is the only one which returns
+     *      {@code 0}.</li>
+     * </ul>
+     * </p>
      *
-     * @param u a non-zero number
-     * @param v a non-zero number
-     * @return the greatest common divisor, never zero
+     * @param u a number
+     * @param v a number
+     * @return the greatest common divisor, never negative
+     * @throws ArithmeticException if the result cannot be represented as a
+     * non-negative int value.
      * @since 1.1
      */
     public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+        // Handle gcd(0,v) == |v|, gcd(u,0) == |u|, gcd(0,0) == 0
+        if (u == 0) {
+             if (v == Integer.MIN_VALUE) {
+                 // Result is 2^31, which overflows int. Upstream code checks for this.
+                 throw new ArithmeticException("overflow: gcd is 2^31");
              }
+             return Math.abs(v);
+        }
+        if (v == 0) {
+            if (u == Integer.MIN_VALUE) {
+                // Result is 2^31, which overflows int. Upstream code checks for this.
+                throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            return Math.abs(u);
+        }
+
+        // Now u != 0 and v != 0.
+        // Handle special case gcd(MIN_VALUE, MIN_VALUE) -> 2^31
+        if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {
+             throw new ArithmeticException("overflow: gcd is 2^31");
+        }
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
-        /* assert u!=0 && v!=0; */
-        if (u > 0) {
+        // Handling MIN_VALUE from here is safe since we handle the cases
+        // where the result would be 2^31 above. Other MIN_VALUE cases
+        // like gcd(MIN_VALUE, x) where x != 0 and x != MIN_VALUE are handled
+        // correctly by the algorithm due to use of negative numbers.
+        long uLong = u;
+        long vLong = v;
+        boolean uMin = (u == Integer.MIN_VALUE);
+        boolean vMin = (v == Integer.MIN_VALUE);
+
+        if (!uMin && u > 0) {
             u = -u;
         } // make u negative
-        if (v > 0) {
+        if (!vMin && v > 0) {
             v = -v;
         } // make v negative
+
         // B1. [Find power of 2]
         int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+        // Use long comparison for MIN_VALUE case potential early exit
+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...
             u /= 2;
             v /= 2;
             k++; // cast out twos.
         }
+        // If k = 31, the gcd is 2^31, handled initially.
         if (k == 31) {
            throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
+        int t = ((u & 1) == 1) ? v : -(u / 2);
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
             while ((t & 1) == 0) { // while t is even..
+                 // Avoid division by 2 of MIN_VALUE / 2 = MIN_VALUE / 2
+                 // It should be MIN_VALUE >> 1 = MAX_VALUE / 2 + 1
+                 // But this case is unlikely given prior checks & logic
                 t /= 2; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t > 0) {
                 u = -t;
             } else {
                 v = t;
             }
             // B6/B3. at this point both u and v should be odd.
+            // Compute (v - u) / 2, replacing t
+            // Check for potential overflow in (v-u) - should not happen bc u,v negative
             t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
         } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+
+        // gcd is -u*2^k
+        // Check for MIN_VALUE before potentially calculating 1 << 31
+        if (u == Integer.MIN_VALUE) { // This can happen if original inputs had gcd = 2^31
+             throw new ArithmeticException("overflow: gcd is 2^31");
+        }
+        // Final result is -u * (1 << k).
+        // -u is positive since u is negative.
+        // If -u * (1 << k) = 2^31, it should have been caught by k == 31 check?
+        // Let's check: if gcd = 2^31, then k must be 31, or k<31 and -u is power of 2.
+        // If k=31, exception thrown. If k<31 and -u=2^(31-k), then u= -2^(31-k).
+        // The result calculation itself could overflow if the result is 2^31.
+        // The check 'if (k == 31)' handles the main overflow case.
+        // Are there other cases? gcd(MIN_VALUE, MIN_VALUE/2)? -> k=0, u=MIN_VALUE, v=MIN_VALUE/2 ...
+        // The initial checks for MIN_VALUE cases cover the results of 2^31.
+        return -u * (1 << k);
     }
\ No newline at end of file
