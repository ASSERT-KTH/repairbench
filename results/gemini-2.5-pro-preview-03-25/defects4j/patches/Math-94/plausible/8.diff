diff --git a/tmp/131d4048-ca87-4cf6-94a2-5f31942b6b05_buggy.java b/tmp/61f553b2-a8fe-4497-b7db-6f6433c30dbb_fixed.java
index ce55b5f..2523880 100644
--- a/tmp/131d4048-ca87-4cf6-94a2-5f31942b6b05_buggy.java
+++ b/tmp/61f553b2-a8fe-4497-b7db-6f6433c30dbb_fixed.java
@@ -1,63 +1,93 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
      * 
      * @param u a non-zero number
      * @param v a non-zero number
      * @return the greatest common divisor, never zero
+     * @throws ArithmeticException if the gcd is 2^31, which cannot be represented as a positive int
      * @since 1.1
      */
     public static int gcd(int u, int v) {
-        if (u * v == 0) {
+        // Check for zero inputs, handling potential overflow with Integer.MIN_VALUE
+        if (u == 0 || v == 0) {
+            // Ensure that the result fits in a positive int. If one argument is MIN_VALUE,
+            // the absolute value is 2^31, which is representable as MIN_VALUE only.
+            // The gcd(MIN_VALUE, 0) or gcd(0, MIN_VALUE) is 2^31.
+            // gcd(MIN_VALUE, MIN_VALUE) is also 2^31. Throw overflow exception for these cases.
+            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: gcd is 2^31");
+             }
+             // If neither argument is MIN_VALUE, the sum of absolute values is correct.
+             // Math.abs(MIN_VALUE) returns MIN_VALUE, but this case is handled above.
             return (Math.abs(u) + Math.abs(v));
         }
-        // keep u and v negative, as negative integers range down to
+        
+        // Keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         /* assert u!=0 && v!=0; */
+        // Make u and v negative, if they are positive
+        // Also check for MIN_VALUE which cannot be safely negated
         if (u > 0) {
             u = -u;
         } // make u negative
         if (v > 0) {
             v = -v;
         } // make v negative
+        
         // B1. [Find power of 2]
         int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+        // While u and v are both even...
+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { 
             u /= 2;
             v /= 2;
             k++; // cast out twos.
         }
+        // If k reached 31, it means the gcd is >= 2^31 which overflows int
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
+        
         // B2. Initialize: u and v have been divided by 2^k and at least
         // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
+        // Use the formula t = -(u / 2) if u is even, t = v if u is odd.
+        // Knuth's original algorithm uses t = u if u is even, t = -v if u is odd.
+        // This variation using negative numbers handles MIN_VALUE correctly.
+        int t = ((u & 1) == 1) ? v : -(u / 2);
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
+        
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0; */ // u and v should remain negative
             // B4/B3: cast out twos from t.
             while ((t & 1) == 0) { // while t is even..
                 t /= 2; // cast out twos
             }
+            
             // B5 [reset max(u,v)]
+            // Knuth: if t > 0 then u = t else v = -t
+            // With negative u,v: if t > 0 then u = -t else v = t
             if (t > 0) {
                 u = -t;
             } else {
                 v = t;
             }
+            
             // B6/B3. at this point both u and v should be odd.
+            // Calculate difference: t = (v - u) / 2
+            // Knuth: t = u - v. Here (v-u)/2 = (-V - (-U))/2 = (U - V)/2
             t = (v - u) / 2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
-        } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+        } while (t != 0); // Loop until t is zero (i.e., u == v)
+        
+        // gcd is |u| * 2^k. Since u is negative, |u| = -u.
+        // The result must fit in int, checked indirectly by k < 31 check.
+        return -u * (1 << k); 
     }
\ No newline at end of file
