diff --git a/tmp/1335f60c-62c8-4d75-8307-b2cdd4f74ab1_buggy.java b/tmp/97635787-6931-41c9-849f-198cb3b4d0e4_fixed.java
index ce55b5f..c4fa831 100644
--- a/tmp/1335f60c-62c8-4d75-8307-b2cdd4f74ab1_buggy.java
+++ b/tmp/97635787-6931-41c9-849f-198cb3b4d0e4_fixed.java
@@ -1,63 +1,100 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
      *
      * @param u a non-zero number
      * @param v a non-zero number
      * @return the greatest common divisor, never zero
+     * @throws ArithmeticException if the gcd is equal to 2^31,
+     *         as it cannot be represented as a positive int
      * @since 1.1
      */
     public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+        // Handle cases involving zero or Integer.MIN_VALUE
+        if (u == 0 || v == 0) {
+            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                // gcd(MIN_VALUE, 0) = 2^31
+                // gcd(MIN_VALUE, MIN_VALUE) = 2^31
+                // The result 2^31 cannot be represented as a positive int
+                throw new ArithmeticException("overflow: gcd is 2^31");
             }
-        // keep u and v negative, as negative integers range down to
+            // gcd(x, 0) = |x|
+            return Math.abs(u) + Math.abs(v); // |u| or |v|
+        }
+
+        // If u or v is MIN_VALUE, proceed since the algorithm uses negative numbers.
+        // The case gcd(MIN_VALUE, MIN_VALUE) is handled implicitly by the k=31 check later.
+
+        // Keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
-        /* assert u!=0 && v!=0; */
         if (u > 0) {
             u = -u;
         } // make u negative
         if (v > 0) {
             v = -v;
         } // make v negative
+
         // B1. [Find power of 2]
         int k = 0;
         while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                             // both even...
             u /= 2;
             v /= 2;
             k++; // cast out twos.
         }
+        // If k=31, it means the gcd is 2^31 (can happen only if u=MIN_VALUE, v=MIN_VALUE)
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
+
         // B2. Initialize: u and v have been divided by 2^k and at least
         // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+        // t = (u is odd) ? v : -u/2
+        // The initial value of t; depends on parity of u
+        // If u is odd, t = v (t is negative). Loop will halve t if v is even.
+        // If u is even, v is odd, t = -u/2 (t is positive). Loop will halve t if -u/2 is even.
+        int t = ((u & 1) == 1) ? v : -(u / 2);
+
+        // Loop invariant: At the start of the loop, t is the value to be processed.
+        // |u| and |v| may be updated inside the loop.
+        // The gcd(|u|, |v|) * 2^k remains the same.
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0; */ // This assertion might fail in the first iteration
+                                    // if u or v were replaced by -t where t>0.
+
             // B4/B3: cast out twos from t.
+            // Make t odd by dividing by 2 repeatedly.
             while ((t & 1) == 0) { // while t is even..
                 t /= 2; // cast out twos
             }
+
             // B5 [reset max(u,v)]
+            // Replace the value with the larger absolute value with t (or -t).
+            // If t is positive, it replaces u (which was even). u = -t makes u negative odd.
+            // If t is negative, it replaces v (which was odd or even). v = t makes v negative odd.
             if (t > 0) {
                 u = -t;
-            } else {
+            } else { // t < 0 (t cannot be 0 here)
                 v = t;
             }
-            // B6/B3. at this point both u and v should be odd.
+
+            // B6/B3. At this point both u and v should be odd and negative.
+            // Calculate the next difference / 2.
+            // t = (v - u) / 2 = (-|v| - (-|u|)) / 2 = (|u| - |v|) / 2
+            // This difference is even because u and v are both odd.
             t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+            // If |u| > |v|, t is positive. Next iteration B5 will set u = -t.
+            // If |v| > |u|, t is negative. Next iteration B5 will set v = t.
+        } while (t != 0); // Loop until difference is 0, meaning |u| = |v|
+
+        // The gcd is |u| * 2^k (or |v| * 2^k). Since u is negative, it's -u * 2^k.
+        // The result must be positive.
+        // The only overflow case (gcd = 2^31) was handled earlier.
+        return -u * (1 << k);
     }
\ No newline at end of file
