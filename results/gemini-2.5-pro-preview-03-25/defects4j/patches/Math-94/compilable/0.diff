diff --git a/tmp/8c556876-0bc3-41e8-b4cb-66a77f614ceb_buggy.java b/tmp/69e210e1-da62-40ca-abc9-b87e8d8d7169_fixed.java
index ce55b5f..95468f2 100644
--- a/tmp/8c556876-0bc3-41e8-b4cb-66a77f614ceb_buggy.java
+++ b/tmp/69e210e1-da62-40ca-abc9-b87e8d8d7169_fixed.java
@@ -1,63 +1,99 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
      *
-     * @param u a non-zero number
-     * @param v a non-zero number
-     * @return the greatest common divisor, never zero
-     * @since 1.1
+     * @param u an integer
+     * @param v an integer
+     * @return the greatest common divisor, never zero (unless u=v=0)
+     * @throws ArithmeticException if the gcd calculation results in an overflow
+     *                             (typically when the result would be {@code 2^31})
+     * @since 1.1 (Modified based on Commons Math 2.0 logic for bug fix MATH-201)
      */
     public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+        // Handle 0 inputs and Integer.MIN_VALUE corners
+        // Note: gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) = 2^31, which overflows int.
+        // gcd(Integer.MIN_VALUE, 0) = 2^31, which overflows int.
+        // gcd(Integer.MIN_VALUE, x) where x is representable as -x in int.
+        if (u == 0 || v == 0) {
+            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: gcd is 2^31");
             }
-        // keep u and v negative, as negative integers range down to
+            return Math.abs(u) + Math.abs(v);
+        }
+
+        // Keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
-        // overflow)
+        // overflow).
         /* assert u!=0 && v!=0; */
         if (u > 0) {
             u = -u;
         } // make u negative
         if (v > 0) {
             v = -v;
         } // make v negative
+
         // B1. [Find power of 2]
         int k = 0;
         while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                             // both even...
             u /= 2;
             v /= 2;
             k++; // cast out twos.
         }
         if (k == 31) {
+            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) = 2^31
+            // gcd(Integer.MIN_VALUE, 0) handled above.
+            // gcd(Integer.MIN_VALUE, x) if x!=0 and x is MIN_VALUE/2^k will reach here.
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
-        do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
+
+        // B2. Initialize: u or v is odd at this point.
+        // Use the initialization from Commons Math 2.0 fix (MATH-201)
+        // If u is odd, t = v; otherwise t = u.
+        int t = ((u & 1) == 1) ? v : u;
+
+        // B3/B4: Initial cast out twos from t. From here on, t is always odd.
         while ((t & 1) == 0) { // while t is even..
             t /= 2; // cast out twos
         }
+
+        // B5/B6/B3/B4 loop (from Commons Math 2.0 fix)
+        do {
+            /* assert u<0 && v<0; */
             // B5 [reset max(u,v)]
-            if (t > 0) {
-                u = -t;
-            } else {
-                v = t;
+            // Now t is odd. Assign it back to u or v.
+            // Also, note that (-t) must be representable as a positive int
+            // unless t is Integer.MIN_VALUE; however, t starts as u or v,
+            // and then becomes (v-u)/2 after reduction. Since u and v are
+            // not MIN_VALUE here (checked earlier), t cannot be MIN_VALUE.
+            if (t > 0) { // corresponds to |v| > |u|
+                u = -t; // u is now negative odd.
+            } else {     // corresponds to |u| >= |v|
+                v = t;  // v is now negative odd.
             }
-            // B6/B3. at this point both u and v should be odd.
+
+            // B6/B3. At this point both u and v should be odd.
+            // t = (|u| - |v|) / 2; using v-u or u-v gives same abs value.
+            // The difference v-u is now guaranteed to be even.
             t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+
+            // B3/B4: Cast out twos from the new t.
+            while ((t & 1) == 0) {
+                t /= 2;
+            }
+        } while (t != 0); // B6: Repeat until t is 0.
+
+        // gcd is -u*2^k where u is the negative number representing the odd part of the gcd.
+        // The result must be returned as a positive integer.
+        // Since -u is the odd part, -u cannot be Integer.MIN_VALUE.
+        // The final result is -u * 2^k. Check for overflow.
+        if (k > 0 && -u == (1 << (31-k))) { // Check if -u * 2^k would be 2^31
+             throw new ArithmeticException("overflow: gcd is 2^31");
+        }
+        return -u * (1 << k); // gcd is |u|*2^k
     }
\ No newline at end of file
