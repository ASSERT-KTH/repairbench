diff --git a/tmp/3424b3a1-cb77-4996-8fb7-48e9054d2900_buggy.java b/tmp/cf1c0dd6-2074-4d25-a285-8c94d8d0bfc6_fixed.java
index b12de99..483f0e7 100644
--- a/tmp/3424b3a1-cb77-4996-8fb7-48e9054d2900_buggy.java
+++ b/tmp/cf1c0dd6-2074-4d25-a285-8c94d8d0bfc6_fixed.java
@@ -1,52 +1,73 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
+      // Avoid infinite recursion.
+      if (n == data.get(t.getScopeRoot()).root) {
+         return;
+      }
+
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
-      if (t.getScopeDepth() <= 2) {
+      // TODO(johnlenz): Make the scope depth check meaningful or remove it.
+      // It is possible that this check is problematic as the Function node
+      // is FUNCTION, NAME, LP, PARAM_LIST, BLOCK. The scope depth will
+      // be deeper if the function is nested. Removing the check entirely
+      // doesn't seem to change anything.
+      if (t.getScopeDepth() <= 1) {
         // The first-order function analyzer looks at two types of variables:
         //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
+        // 1) Local variables that are referenced in inner scopes ("escaped
+        //    vars"), whether that reference is a read or a write.
         //
         // 2) Local variables that are assigned more than once.
+        //    (This is handled by the assignedNames data structure).
         //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+        // We treat all global variables as escaped by default.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
+
+      if (n.isName()) {
         // Be careful of bleeding functions, which create variables
         // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+        if (NodeUtil.isBleedingFunctionName(n)) {
+          return;
+        }
+
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+            Node ownerRoot = ownerScope.getRootNode();
+            // Record reads/writes from inner scopes -> escaped
+            if (scope != ownerScope) {
+              data.get(ownerRoot).recordEscapedVarName(name);
+            }
+            // Record writes -> assigned
+            if (NodeUtil.isLValue(n)) {
+              data.get(ownerRoot).recordAssignedName(name);
             }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
+          // Record writes from inner scopes -> escaped
+          // Note: qualified names can only be escaped via writes.
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
\ No newline at end of file
