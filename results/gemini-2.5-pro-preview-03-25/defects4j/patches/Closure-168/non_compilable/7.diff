diff --git a/tmp/c4c74806-0f86-41c9-a79f-f3294bb7c39b_buggy.java b/tmp/beaf08ea-5d4e-45ad-90de-9df84c75b104_fixed.java
index b12de99..ecb228d 100644
--- a/tmp/c4c74806-0f86-41c9-a79f-f3294bb7c39b_buggy.java
+++ b/tmp/beaf08ea-5d4e-45ad-90de-9df84c75b104_fixed.java
@@ -1,52 +1,78 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
+      // Initial checks
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
+      // Skip global scope (depth 1) and top-level functions/scripts (depth 2)
+      // This analysis focuses on inner functions and closures.
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
+        // 1) Local variables that are assigned OR REFERENCED in inner scopes
+        //    ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
+      // Try to find the variable and its defining scope if the node refers to one.
+      Var var = null;
+      Scope scope = t.getScope(); // The current scope where the node 'n' resides
+      Scope ownerScope = null;   // The scope where the variable is defined
+      Node function = null;     // The root node of the function where the variable is defined
+      String varName = null;    // The simple name of the base variable, if applicable
+
+      if (n.isName()) {
+        varName = n.getString();
+        var = scope.getVar(varName);
+      } else if (n.isGetProp() && n.isUnscopedQualifiedName()) {
+        // Check if the base of the qualified name is a variable
+        Node root = NodeUtil.getRootOfQualifiedName(n);
+        if (root.isName()) {
+           varName = root.getString();
+           var = scope.getVar(varName);
+        }
+      }
+
+      // If we found a variable and it's defined in a local scope...
+      if (var != null && var.getScope().isLocal()) {
+        ownerScope = var.getScope();
+        function = ownerScope.getRootNode();
+        // Ensure we have analysis data for the function where the var is defined
+        if (function == null || !data.containsKey(function)) {
+            // This can happen if the owner scope's root node isn't a function,
+            // e.g., a catch block. We aren't analyzing variables from such scopes here.
+             return;
+        }
+        FunctionAnalysisData functionData = data.get(function);
+
+        // Check for assignment to a simple name (e.g., x = 1)
+        // Note: Bleeding functions (function fn(){}) declare 'fn' in the inner scope.
         if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
             !NodeUtil.isBleedingFunctionName(n)) {
-        String name = n.getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+           functionData.recordAssignedName(varName);
         }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
-          }
-        }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+        // Check for escaping: variable used in a scope different from its definition scope.
+        // This includes both reads (RValues) and writes (LValues) in the inner scope.
+        if (scope != ownerScope) {
+           // Record that the base variable escapes
+           functionData.recordEscapedVarName(varName);
+
+           // If it's an assignment to a qualified name (e.g., localVar.prop = 1),
+           // record the escaped qualified name as well.
+           if (n.isGetProp() && NodeUtil.isLValue(n)) {
+              // We already checked isUnscopedQualifiedName and root.isName() above
+              functionData.recordEscapedQualifiedName(n.getQualifiedName());
            }
         }
       }
     }
\ No newline at end of file
