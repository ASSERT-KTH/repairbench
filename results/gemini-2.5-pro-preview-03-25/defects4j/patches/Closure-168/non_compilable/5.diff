diff --git a/tmp/861acaec-0a32-4395-9f3a-c9a03570ff4a_buggy.java b/tmp/24003bbe-cb6e-48c4-bc03-64498d429d68_fixed.java
index b12de99..267d271 100644
--- a/tmp/861acaec-0a32-4395-9f3a-c9a03570ff4a_buggy.java
+++ b/tmp/24003bbe-cb6e-48c4-bc03-64498d429d68_fixed.java
@@ -1,52 +1,91 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
+      // Record non-empty returns for the function being traversed.
       if (n.isReturn() && n.getFirstChild() != null) {
-        data.get(t.getScopeRoot()).recordNonEmptyReturn();
+        FunctionAnalysisData functionData = data.get(t.getScopeRoot());
+        // functionData might be null if this function is defined in the global scope
+        // or within a function that itself is not analyzed (e.g., depth <= 2 filter below).
+        if (functionData != null) {
+            functionData.recordNonEmptyReturn();
+        }
       }
 
+      // This analysis is specifically interested in variable usage within
+      // scopes deeper than the immediate function scope (e.g., inner functions, depth >= 3).
+      // It analyzes how variables defined in outer scopes (like depth 2) are used.
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
+        // We also skip the top-level function scope (depth 2) itself, focusing on
+        // nodes *within* deeper scopes.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+      // Handle NAME nodes (variable access or assignment) in inner scopes (depth >= 3)
+      if (n.isName()) {
         String name = n.getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+        Scope currentScope = t.getScope(); // The inner scope (depth >= 3)
+        Var var = currentScope.getVar(name);
+
+        // Ensure the name resolves to a variable in the scope chain.
         if (var != null) {
-          Scope ownerScope = var.getScope();
+          Scope ownerScope = var.getScope(); // The scope where 'var' was declared.
+
+          // We only care about variables declared in local scopes (not global/extern).
           if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+            Node ownerRoot = ownerScope.getRootNode();
+            FunctionAnalysisData ownerData = data.get(ownerRoot);
+
+            // ownerData would be null if the ownerScope corresponds to a function
+            // that isn't being analyzed (e.g., global scope functions if the pass
+            // only runs on specific functions, or potentially very deeply nested scopes
+            // depending on pass configuration). Assume relevant ownerData exists.
+            if (ownerData != null) {
+                // Record assignment if it's an L-value assignment to a local variable.
+                // This helps track variables that are assigned multiple times.
+                // We check !isBleedingFunctionName because function declarations create
+                // variables in their containing scope, not the current scope.
+                if (NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
+                   ownerData.recordAssignedName(name);
                 }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+                // Record variable escape if a local variable defined in an outer scope
+                // is accessed (read or written) within the current inner scope.
+                if (currentScope != ownerScope) {
+                   ownerData.recordEscapedVarName(name);
+                }
             }
           }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+        }
+      // Handle assignments to qualified names (e.g., obj.prop = ...) where the base object
+      // might be an escaped local variable.
+      } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
+        // Check assignments like localVar.property = value; inside an inner function
+        String rootName = NodeUtil.getRootOfQualifiedName(n).getString();
+        Scope currentScope = t.getScope(); // The inner scope (depth >= 3)
+        Var var = currentScope.getVar(rootName);
+
+        // Ensure the base name resolves to a variable.
         if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+          Scope ownerScope = var.getScope(); // Scope where the base variable was declared.
+
+          // Check if the base variable is local and the assignment occurs in a different scope.
+          if (ownerScope.isLocal() && currentScope != ownerScope) {
+            Node ownerRoot = ownerScope.getRootNode();
+            FunctionAnalysisData ownerData = data.get(ownerRoot);
+             // Record the qualified name escape if the owner scope's data exists.
+            if (ownerData != null) {
+                ownerData.recordEscapedQualifiedName(n.getQualifiedName());
+            }
           }
         }
       }
     }
\ No newline at end of file
