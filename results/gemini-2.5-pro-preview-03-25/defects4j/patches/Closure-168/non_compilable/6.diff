diff --git a/tmp/23b3ef5b-b592-4631-bcf7-9357ec1c6694_buggy.java b/tmp/669c7799-aaf8-4b8b-bd54-20ea34a6bb6d_fixed.java
index b12de99..fb6fd6d 100644
--- a/tmp/23b3ef5b-b592-4631-bcf7-9357ec1c6694_buggy.java
+++ b/tmp/669c7799-aaf8-4b8b-bd54-20ea34a6bb6d_fixed.java
@@ -1,52 +1,96 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (t.inGlobalScope()) {
+      // Skip global scope
+      if (t.inGlobalScope()) { // depth 0
         return;
       }
 
+      // Record non-empty returns for the function represented by the scope root
       if (n.isReturn() && n.getFirstChild() != null) {
-        data.get(t.getScopeRoot()).recordNonEmptyReturn();
+        FunctionInformation fnInfo = data.get(t.getScopeRoot());
+        // Ensure fnInfo is not null, might happen for non-function scope roots?
+        if (fnInfo != null) {
+           fnInfo.recordNonEmptyReturn();
+        }
       }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+      // Skip analysis for top-level functions/scopes (depth 1).
+      // We only care about accesses within nested scopes (depth 2+).
+      // The original check t.getScopeDepth() <= 2 skipped depth 2, where
+      // escaped variable access typically occurs in the first level of nesting.
+      if (t.getScopeDepth() < 2) {
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+      // Analyze local variable accesses (reads and writes)
+      if (n.isName()) {
         String name = n.getString();
-        Scope scope = t.getScope();
+        Scope scope = t.getScope(); // The current scope where 'n' is accessed
         Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+
+        // Check if 'name' resolves to a variable and it's declared in a local scope
+        if (var != null && var.isLocal()) {
+          Scope ownerScope = var.getScope(); // The scope where 'var' is declared
+          // Bleeding functions can have a null scope.
+          if (ownerScope == null) {
+              return;
+          }
+          Node ownerRoot = ownerScope.getRootNode();
+          // Scope root could be null if scope is detached
+          if (ownerRoot == null) {
+              return;
+          }
+          FunctionInformation fnInfo = data.get(ownerRoot);
+
+          // Should not be null if ownerScope.isLocal() is true and ownerRoot is valid,
+          // but check defensively
+          if (fnInfo != null) {
+            // Record assignment if it's an LValue assigned within its declaring scope
+            // or an inner scope, and not a bleeding function name.
+            if (NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
+               fnInfo.recordAssignedName(name);
             }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+            // Record escape if 'name' is accessed (read or write) in a scope
+            // different from (and nested within) its declaring scope.
+            // The original code only checked for LValues here. Reads must also
+            // be considered for escaped variables.
+            if (scope != ownerScope && scope.isDescendantOf(ownerScope)) {
+               fnInfo.recordEscapedVarName(name);
+            }
+          }
         }
       }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
+      // Analyze assignments to qualified names based on local variables
+      else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
+        Node root = NodeUtil.getRootOfQualifiedName(n);
+        // Ensure root is a NAME node before getting string
+        if (root.isName()) {
+            String name = root.getString();
+            Scope scope = t.getScope(); // Current scope where assignment occurs
             Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+
+            // Check if the base 'name' is a local variable
+            if (var != null && var.isLocal()) {
+              Scope ownerScope = var.getScope(); // Scope where base var is declared
+              // Bleeding functions can have a null scope.
+              if (ownerScope == null) {
+                  return;
+              }
+              Node ownerRoot = ownerScope.getRootNode();
+              // Scope root could be null if scope is detached
+              if (ownerRoot == null) {
+                  return;
+              }
+              FunctionInformation fnInfo = data.get(ownerRoot);
+
+              if (fnInfo != null) {
+                // Record escape of the qualified name if assignment happens in a
+                // scope different from (and nested within) the base variable's scope.
+                if (scope != ownerScope && scope.isDescendantOf(ownerScope)) {
+                  fnInfo.recordEscapedQualifiedName(n.getQualifiedName());
+                }
+              }
             }
         }
       }
     }
\ No newline at end of file
