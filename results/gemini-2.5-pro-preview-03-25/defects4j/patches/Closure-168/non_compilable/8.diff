diff --git a/tmp/d57d2484-cd2b-48b1-a8c2-ab437859fff8_buggy.java b/tmp/779f4d85-24cf-4d93-9a0a-841ba7d91592_fixed.java
index b12de99..4d26577 100644
--- a/tmp/d57d2484-cd2b-48b1-a8c2-ab437859fff8_buggy.java
+++ b/tmp/779f4d85-24cf-4d93-9a0a-841ba7d91592_fixed.java
@@ -1,52 +1,76 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
+      // Skip global scope - variables there are treated as escaped by default.
       if (t.inGlobalScope()) {
         return;
       }
 
+      // Record non-empty returns for the function being analyzed.
+      Node scopeRoot = t.getScopeRoot();
+      // Ensure we are inside a function scope before recording return info.
+      // Data map is keyed by function root node.
+      if (scopeRoot != null && scopeRoot.isFunction()) {
           if (n.isReturn() && n.getFirstChild() != null) {
-        data.get(t.getScopeRoot()).recordNonEmptyReturn();
+            // Get or create FunctionData for the current function scope.
+            // Using computeIfAbsent ensures the entry exists.
+            data.computeIfAbsent(scopeRoot, k -> new FunctionData()).recordNonEmptyReturn();
           }
+      }
+
+      // Original check skipped analysis in top-level function scopes (depth 1 & 2).
+      // This prevented analysis of assignments like 'var self = this' and
+      // detection of escapes originating from these scopes (like 'self' used
+      // in an inner function). Removing the check allows this analysis.
+      // if (t.getScopeDepth() <= 2) {
+      //  return;
+      // }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+      if (n.isName()) {
+        // Skip bleeding function names; they declare vars in the inner scope
+        // where the function definition occurs, not where the name appears.
+        if (NodeUtil.isBleedingFunctionName(n)) {
            return;
         }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
-        if (var != null) {
+
+        // Process only if var exists and is function-local (not global or extern).
+        if (var != null && var.getScope().isLocal()) {
           Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+          Node ownerRoot = ownerScope.getRootNode(); // Root node of the function where 'var' is defined
+          // Get or create FunctionData for the function where the var is defined.
+          FunctionData functionData = data.computeIfAbsent(ownerRoot, k -> new FunctionData());
+
+          // Record assignment if the name is being assigned to (LHS).
+          if (NodeUtil.isLValue(n)) {
+            functionData.recordAssignedName(name);
           }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+          // Record escape if the variable is accessed (read or write via NAME)
+          // in a scope different from (and typically nested within) its defining scope.
+          // This correctly flags captured variables like 'self' in the test case.
+          if (scope != ownerScope) {
+            functionData.recordEscapedVarName(name);
           }
         }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+      } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
+        // Handles assignment to potentially escaped qualified names like 'localVar.prop = ...'.
+        // We only care about cases where the root variable is local.
+        String rootName = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
+        Var var = scope.getVar(rootName);
+
+        // Process only if the root var exists and is function-local.
+        if (var != null && var.getScope().isLocal()) {
           Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+          // Record escape only if the assignment occurs in a scope different from
+          // (and typically nested within) the defining scope of the root variable.
+          if (scope != ownerScope) {
+             Node ownerRoot = ownerScope.getRootNode(); // Root node of the function where 'var' (rootName) is defined
+             FunctionData functionData = data.computeIfAbsent(ownerRoot, k -> new FunctionData());
+             functionData.recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
\ No newline at end of file
