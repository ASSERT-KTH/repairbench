diff --git a/tmp/dcf8d7a3-64c0-4c43-9725-2d8204c93906_buggy.java b/tmp/a112e64a-2480-4b18-a8e9-995133ec48cf_fixed.java
index b12de99..cd50944 100644
--- a/tmp/dcf8d7a3-64c0-4c43-9725-2d8204c93906_buggy.java
+++ b/tmp/a112e64a-2480-4b18-a8e9-995133ec48cf_fixed.java
@@ -1,52 +1,85 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
+      // 1. Initial checks and non-empty return recording
       if (t.inGlobalScope()) {
         return;
       }
-
       if (n.isReturn() && n.getFirstChild() != null) {
+        // Note: t.getScopeRoot() should be used carefully. If 'n' is inside
+        // a nested function, this might record the return for the outer function.
+        // However, assuming this pass analyzes one function at a time,
+        // t.getScopeRoot() would correspond to the function being analyzed.
+        // Let's trust the existing logic here for now.
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
+      // 2. Scope depth check (Only analyze escapes into inner functions)
+      // Scope depth 1 = global, 2 = top-level function/script
+      // Inner functions start at depth 3. We care about refs in depth 3+
+      // to variables declared at depth 2 or outer function scopes.
       if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+        // The comment mentions "first-order function analyzer". This pass might be
+        // specifically looking for variables from the immediate outer scope (depth 2)
+        // being used in the first level of inner scopes (depth 3).
+        // Regardless, the logic for detecting escapes needs to consider reads.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
-        String name = n.getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
-          }
+      // 3. Analyze NAME and GETPROP nodes for escapes
+      Var var = null;
+      Scope scope = t.getScope(); // Scope of the reference/assignment
+      Scope ownerScope = null;    // Scope where the variable is defined
+      String varName = null;
+      boolean isLValue = NodeUtil.isLValue(n);
+      Node ownerRoot = null; // Cache the owner scope's root node
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+      // Check NAME nodes
+      if (n.isName()) {
+        // Bleeding functions are declared in the *inner* scope, skip.
+        if (NodeUtil.isBleedingFunctionName(n)) {
+            return;
         }
+        varName = n.getString();
+        var = scope.getVar(varName);
+        if (var != null) {
+            ownerScope = var.getScope();
         }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+      }
+      // Check GETPROP nodes (base must be a NAME)
+      else if (n.isGetProp() && n.isUnscopedQualifiedName()) {
+        Node root = NodeUtil.getRootOfQualifiedName(n);
+        // Ensure the base of the qualified name is a simple variable name
+        if (root != null && root.isName()) {
+          varName = root.getString();
+          var = scope.getVar(varName);
           if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
+              ownerScope = var.getScope();
+          }
+        }
+      }
+
+      // 4. If we identified a variable reference (var != null) defined in a local scope...
+      if (var != null && ownerScope != null && ownerScope.isLocal()) {
+        ownerRoot = ownerScope.getRootNode();
+
+        // Record assignment if it's a NAME node being assigned to
+        if (n.isName() && isLValue) {
+          // Record that the variable was assigned somewhere in the function.
+          data.get(ownerRoot).recordAssignedName(varName);
+        }
+
+        // If the reference/assignment scope is different from the owner scope,
+        // it means the variable is potentially escaping its original scope.
+        if (scope != ownerScope) {
+          // Mark the variable as escaped because it's referenced from an inner scope.
+          // This applies to both reads and writes in the inner scope.
+          data.get(ownerRoot).recordEscapedVarName(varName);
+
+          // Additionally, if assigning to an escaped qualified name (e.g., outerVar.prop = ...)
+          // record the qualified name specifically. This was in the original code.
+          if (n.isGetProp() && isLValue) {
+             data.get(ownerRoot)
                  .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
\ No newline at end of file
