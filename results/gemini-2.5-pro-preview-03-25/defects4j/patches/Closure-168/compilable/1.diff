diff --git a/tmp/d90c3c33-480f-4c52-b353-310e2d0acfa4_buggy.java b/tmp/7d28c06d-04dc-4789-80b0-e4bb3ffaaea2_fixed.java
index b12de99..2b15cc4 100644
--- a/tmp/d90c3c33-480f-4c52-b353-310e2d0acfa4_buggy.java
+++ b/tmp/7d28c06d-04dc-4789-80b0-e4bb3ffaaea2_fixed.java
@@ -1,52 +1,70 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
+      // Skip global scope
       if (t.inGlobalScope()) {
         return;
       }
 
+      // Record non-empty returns for the function
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
+      // Skip analysis for scopes too close to global
+      // (Assumes analysis is about inner functions accessing outer vars)
+      // This pass focuses on locals accessed potentially outside their definition scope.
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
+        // 1) Local variables that are assigned OR READ in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+      Scope scope = t.getScope();
+
+      // Case 1: Simple Name (e.g., x)
+      if (n.isName() && !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
-        Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
+          // Record assignment if it's a local var and an LValue
+          if (ownerScope.isLocal() && NodeUtil.isLValue(n)) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
+          // Record escape if it's a local var accessed from an inner scope
+          // This should happen for both reads and writes (LValues and RValues)
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
+      }
+      // Case 2: Qualified Name (e.g., a.b)
+      else if (n.isGetProp() && n.isUnscopedQualifiedName()) {
+        Node root = NodeUtil.getRootOfQualifiedName(n);
+        // Only interested if the base of the qualified name is a simple variable name
+        if (root.isName()) {
+          String name = root.getString();
           Var var = scope.getVar(name);
           if (var != null) {
             Scope ownerScope = var.getScope();
+            // Check if the root variable is local and accessed from an inner scope
             if (scope != ownerScope && ownerScope.isLocal()) {
+              // Record the root variable as escaped (handles reads like 'obj.prop')
+              data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+
+              // If it's an LValue assignment, also record the qualified name (original behavior)
+              if (NodeUtil.isLValue(n)) {
                  data.get(ownerScope.getRootNode())
                    .recordEscapedQualifiedName(n.getQualifiedName());
               }
             }
           }
         }
+      }
+    }
\ No newline at end of file
