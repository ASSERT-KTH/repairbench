diff --git a/tmp/4cc4b6b2-ee2f-4a65-b2d5-5c025af74d09_buggy.java b/tmp/63146d86-9623-45f6-9ae3-1b0aadda7e8e_fixed.java
index b12de99..57d78c2 100644
--- a/tmp/4cc4b6b2-ee2f-4a65-b2d5-5c025af74d09_buggy.java
+++ b/tmp/63146d86-9623-45f6-9ae3-1b0aadda7e8e_fixed.java
@@ -1,52 +1,86 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (t.inGlobalScope()) {
-        return;
-      }
-
-      if (n.isReturn() && n.getFirstChild() != null) {
-        data.get(t.getScopeRoot()).recordNonEmptyReturn();
-      }
-
-      if (t.getScopeDepth() <= 2) {
+      // CHANGE 1: Only skip global scope (depth 1). The original check
+      // (t.getScopeDepth() <= 2) prevented analysis in top-level functions,
+      // potentially missing escape information needed for type checking nested
+      // functions, as seen in testIssue726.
+      if (t.getScopeDepth() <= 1) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
+      if (n.isReturn() && n.getFirstChild() != null) {
+        data.get(t.getScopeRoot()).recordNonEmptyReturn();
+      }
+
+      // No early exit for depth 2 anymore
+
+      // Handle NAME nodes
+      if (n.isName()) {
+        // LValue case (Assignment)
+        if (NodeUtil.isLValue(n) &&
             // Be careful of bleeding functions, which create variables
             // in the inner scope, not the scope where the name appears.
             !NodeUtil.isBleedingFunctionName(n)) {
           String name = n.getString();
           Scope scope = t.getScope();
           Var var = scope.getVar(name);
           if (var != null) {
             Scope ownerScope = var.getScope();
+            // Record assignment only if the variable is local to some function scope.
             if (ownerScope.isLocal()) {
               data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
-
+            // If assignment happens in a scope different from the declaration scope,
+            // and the variable is local, record it as escaped.
             if (scope != ownerScope && ownerScope.isLocal()) {
               data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
           }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+        } else { // RValue case (Use)
+          // CHANGE 2: Record escape if a local variable is *used* (read)
+          // in a scope different from its declaration scope. This is crucial
+          // for tracking variables like 'self' in testIssue726 that alias 'this'
+          // and are used in inner functions.
+          String name = n.getString();
           Scope scope = t.getScope();
           Var var = scope.getVar(name);
           if (var != null) {
             Scope ownerScope = var.getScope();
+            // If used in a scope different from its definition and is local, mark as escaped.
             if (scope != ownerScope && ownerScope.isLocal()) {
+               data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+            }
+          }
+        }
+      }
+      // Handle GETPROP nodes (Assignments like obj.prop = x and Uses like obj.prop())
+      else if (n.isGetProp() && n.isUnscopedQualifiedName()) {
+          String rootName = NodeUtil.getRootOfQualifiedName(n).getString();
+          Scope scope = t.getScope();
+          Var var = scope.getVar(rootName);
+          if (var != null) {
+              Scope ownerScope = var.getScope();
+              // Check if the root variable is local and the property access/assignment
+              // occurs in a different scope than the variable's declaration.
+              if (scope != ownerScope && ownerScope.isLocal()) {
+                  // LValue case (Assignment like a.b = 1)
+                  if (NodeUtil.isLValue(n)) {
+                      // Record the qualified name itself as being assigned externally.
                       data.get(ownerScope.getRootNode())
                           .recordEscapedQualifiedName(n.getQualifiedName());
+                  } else { // RValue case (Use like a.b())
+                      // CHANGE 3: Record the root variable as escaped if its property
+                      // is *used* (read/called) in a scope different from declaration.
+                      data.get(ownerScope.getRootNode()).recordEscapedVarName(rootName);
+                  }
               }
           }
       }
     }
\ No newline at end of file
