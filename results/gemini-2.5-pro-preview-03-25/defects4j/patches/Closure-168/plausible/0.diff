diff --git a/tmp/c0125dd5-ca1f-4304-8f38-1e1c0c75bb91_buggy.java b/tmp/31263b19-0e46-47e1-a726-004c8e156ff6_fixed.java
index b12de99..930141f 100644
--- a/tmp/c0125dd5-ca1f-4304-8f38-1e1c0c75bb91_buggy.java
+++ b/tmp/31263b19-0e46-47e1-a726-004c8e156ff6_fixed.java
@@ -1,52 +1,69 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (t.inGlobalScope()) {
+      // Only skip global scope.
+      if (t.inGlobalScope()) { // t.getScopeDepth() == 1
         return;
       }
 
+      // Process return statements regardless of depth.
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
-        return;
+      // Analyze local scopes (depth >= 2)
+      Scope scope = t.getScope();
+      Var var = null;
+      Scope ownerScope = null;
+      String varName = null; // Base variable name if qualified
+      boolean isBasedOnLocalVar = false; // Is the node related to a local variable?
+
+      // Determine if n represents a local variable or property access thereof
+      if (n.isName()) {
+        varName = n.getString();
+        var = scope.getVar(varName);
+        if (var != null) {
+          ownerScope = var.getScope();
+          // Ensure we are dealing with a variable declared in a local scope.
+          // We treat global variables as always escaped by default.
+          isBasedOnLocalVar = ownerScope.isLocal();
+        }
+      } else if (n.isGetProp() && n.isUnscopedQualifiedName()) {
+        Node root = NodeUtil.getRootOfQualifiedName(n);
+        // Check if the base of the qualified name is a simple name
+        if (root.isName()) {
+          varName = root.getString();
+          var = scope.getVar(varName);
+          if (var != null) {
+            ownerScope = var.getScope();
+            // Ensure the base variable is declared in a local scope.
+            isBasedOnLocalVar = ownerScope.isLocal();
+          }
         }
+      }
+
+      // If it's related to a variable declared in a local scope
+      if (isBasedOnLocalVar) {
+          Node ownerRoot = ownerScope.getRootNode();
 
+          // Record assignment if it's an LValue NAME node
+          // Be careful of bleeding functions (like function declarations) which create
+          // variables in the *inner* scope, not the scope where the name appears.
           if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
               !NodeUtil.isBleedingFunctionName(n)) {
-        String name = n.getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+            // Record that this specific name was assigned in its owner scope's function.
+             data.get(ownerRoot).recordAssignedName(n.getString());
           }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
-          }
-        }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+          // Record escape if accessed (read or write) in a different scope than declared
+          if (scope != ownerScope) {
+            // This variable is used in a scope different from its declaration scope,
+            // hence it has escaped its declaring scope.
+            if (n.isName()) {
+               // Record the simple name variable as escaped.
+               data.get(ownerRoot).recordEscapedVarName(n.getString());
+            } else { // Must be the GETPROP case checked above
+               // Record the full qualified name as escaped.
+               data.get(ownerRoot).recordEscapedQualifiedName(n.getQualifiedName());
             }
           }
       }
     }
\ No newline at end of file
