diff --git a/tmp/5aef2e1d-3a7f-4d44-a0d5-f6a5fe7c1d6f_buggy.java b/tmp/4b26f85f-0ff9-4767-8971-a1a897bbd692_fixed.java
index e69de29..927665f 100644
--- a/tmp/5aef2e1d-3a7f-4d44-a0d5-f6a5fe7c1d6f_buggy.java
+++ b/tmp/4b26f85f-0ff9-4767-8971-a1a897bbd692_fixed.java
@@ -0,0 +1,83 @@
+    /**
+     * Helper method called to determine required {@link CoercionAction}
+     * for input that is String, for target ("logical") type.
+     * If {@link CoercionAction#FAIL} is returned, an exception is thrown.
+     *
+     * @param ctxt Deserialization context
+     * @param value String value to coerce
+     * @param logicalType Logical target type
+     * @param targetType Physical target type
+     *
+     * @return Coercion action configured for specified input shape and target type
+     *    combination; never {@code null} or {@link CoercionAction#FAIL}.
+     *
+     * @throws JsonMappingException If configured action is {@link CoercionAction#FAIL}
+     *
+     * @since 2.12
+     */
+    protected CoercionAction _checkFromStringCoercion(DeserializationContext ctxt, String value,
+            LogicalType logicalType, Class<?> targetType)
+        throws IOException
+    {
+        // Special handling for possible `null` representation
+        // 13-Oct-2016, tatu: Let's allow "null" string for scalars, related to [databind#1398]
+        // 28-Oct-2020, tatu: ... although should perhaps not Naked nulls? Seems less optimal
+        //    workaround but has to do for now
+        if (value.equals("null")) {
+            // 19-Sep-2020, tatu: Is this potentially problematic for some types?
+            //    Seems like it should be ok for most/all standard types?
+            return CoercionAction.AS_NULL;
+        }
+
+        // Then empty String:
+        if (value.length() == 0) {
+            final boolean isPrimitive = targetType.isPrimitive();
+            final CoercionAction act = ctxt.findCoercionAction(logicalType, targetType,
+                    CoercionInputShape.EmptyString);
+
+            // Regardless of configuration, `null` is NOT allowed for primitives,
+            // so AS_NULL for primitive target is just not possible.
+            if (isPrimitive && act == CoercionAction.AS_NULL) {
+                 _reportFailedCoercion(ctxt, act, targetType, value,
+                         "Cannot coerce empty String (\"\") to `null` value for primitive type ("+targetType.getName()+")");
+            }
+
+            // If action is FAIL, need to verify we can report it:
+            _checkCoercionFail(ctxt, act, targetType, value, "empty String (\"\")");
+            // Otherwise, it's fine: AS_EMPTY maps to primitive zero, TryConvert handled by caller;
+            // and AS_NULL was checked above for primitive targets. Wrappers/Objects are fine with nulls.
+            return act;
+        }
+        // Then blank String:
+        else if (StringUtil.isBlank(value)) {
+             final boolean isPrimitive = targetType.isPrimitive();
+             final CoercionAction act = ctxt.findCoercionFromBlankAction(logicalType, targetType,
+                     CoercionAction.FAIL); // default to FAIL
+
+             // Regardless of configuration, `null` is NOT allowed for primitives,
+             // so AS_NULL for primitive target is just not possible.
+             if (isPrimitive && act == CoercionAction.AS_NULL) {
+                  _reportFailedCoercion(ctxt, act, targetType, value,
+                          "Cannot coerce blank String (all whitespace) to `null` value for primitive type ("+targetType.getName()+")");
+             }
+
+             // If action is FAIL, need to verify we can report it:
+             _checkCoercionFail(ctxt, act, targetType, value, "blank String (all whitespace)");
+            // Either FAIL (already checked), or AS_NULL, AS_EMPTY:
+             return act;
+        }
+        // 02-Nov-2020, tatu: How about "arbitrary" Strings? Maybe should have check
+        //   like above? For now assume caller can handle
+
+        // 11-Sep-2020, tatu: For [databind#2854], consider possibility of JSON specification
+        //   violation for non-quoted textual values ("naked booleans"). For now just
+        //   add context, maybe improve later
+        if (ctxt.isEnabled(StreamReadCapability.JSON_READ_CAPABILITY_UNTYPED_SCALARS)
+                && _isScalarType(targetType)) {
+            // Nothing specific but indicates we may be getting non-standard input
+            ;
+        }
+
+        // Action is `TryConvert`, return as is, to be handled by caller
+        return CoercionAction.TRY_CONVERT;
+    }
\ No newline at end of file
