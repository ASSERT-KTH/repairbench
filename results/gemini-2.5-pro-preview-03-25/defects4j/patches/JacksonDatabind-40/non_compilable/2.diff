diff --git a/tmp/47934fbd-a14c-422f-8317-c9b6dccdd2b3_buggy.java b/tmp/09d190e7-92e1-4890-b753-8d4405acdbf6_fixed.java
index e69de29..f0aef26 100644
--- a/tmp/47934fbd-a14c-422f-8317-c9b6dccdd2b3_buggy.java
+++ b/tmp/09d190e7-92e1-4890-b753-8d4405acdbf6_fixed.java
@@ -0,0 +1,34 @@
+    /**
+     * Helper method called in case where {@link CoercionAction#Fail} is indicated.
+     * Default implementation simply calls {@link DeserializationContext#reportInputMismatch}
+     * with specified arguments; this is expected to throw {@link com.fasterxml.jackson.databind.exc.MismatchedInputException}.
+     *
+     * @param ctxt Context for accessing configuration, getting problem handler
+     * @param act Action caller determined that failed (currently assumed to be {@code CoercionAction#Fail})
+     * @param targetType Specific type caller is trying to deserialize into
+     * @param valueToConvert Actual input value trying to coerce (like empty String)
+     * @param desc Description of input type (like "empty String")
+     *
+     * @return Dummy value returned (throwing exception is expected)
+     *
+     * @throws IOException If reporting failure via {@link DeserializationContext#reportInputMismatch} throws
+     *   exception
+     *
+     * @since 2.12
+     */
+    protected Object _checkCoercionFail(DeserializationContext ctxt, CoercionAction act,
+            Class<?> targetType, Object valueToConvert, String desc) throws IOException
+    {
+        // NOTE: In 2.12.0, this method incorrectly re-checked configuration via
+        // `ctxt.findCoercionAction()`, which prevented failures from propagating
+        // correctly if the originating configuration was not `Fail` (e.g. `AsNull`
+        // forced to `Fail` by caller). See [databind#3055]
+        // The correct logic is to simply check the 'act' passed by the caller.
+        if (act == CoercionAction.Fail) {
+            ctxt.reportInputMismatch(this, // Use 'this' (deserializer instance) for context
+                    "Cannot coerce %s to %s (but could if enabling corresponding CoercionConfig)",
+                    desc, _coercedTypeDesc());
+        }
+        // Unreachable if exception thrown, otherwise return null as marker.
+        return null;
+    }
\ No newline at end of file
