diff --git a/tmp/dce3bd20-ef9e-4cd1-ab40-fe45c4950f1d_buggy.java b/tmp/a8ac8e2d-c5fe-4acd-995b-bdc27acac681_fixed.java
index e69de29..4d8a4db 100644
--- a/tmp/dce3bd20-ef9e-4cd1-ab40-fe45c4950f1d_buggy.java
+++ b/tmp/a8ac8e2d-c5fe-4acd-995b-bdc27acac681_fixed.java
@@ -0,0 +1,86 @@
+// Located in: com.fasterxml.jackson.databind.deser.std.StdDeserializer
+// Fixed version ensures that CoercionAction.Fail results in an exception when deserializing
+// an empty string ("") to a primitive type if the ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
+// feature is disabled, unless a DeserializationProblemHandler successfully handles it.
+
+    /**
+     * Helper method called: verification of coercion from String is needed.
+     * Various {@link CoercionAction}s are possible, based on configuration.
+     *
+     * @param ctxt Context for accessing configuration, handling
+     * @param action Coercion action configured
+     * @param targetType Logical target type used for coercion
+     * @param inputValue Actual input value to coerce
+     * @param inputDesc Description of input type (like "empty String")
+     *
+     * @return Value to return (null or empty value) if coercion is allowed;
+     *    never returns if failure results in an exception
+     *
+     * @throws IOException If coercion fails and is not allowed (based on configuration)
+     *
+     * @since 2.12
+     */
+    protected Object _checkCoercionFail(DeserializationContext ctxt,
+            CoercionAction action, Class<?> targetType, Object inputValue,
+            String inputDesc)
+        throws IOException
+    {
+        switch (action) {
+        case TryConvert:
+            // 28-Sep-2021, tatu: Need to indicate impossibility to coerce; standard
+            //   mechanism is to throw exception (but note that we are in "check"
+            //   method, not "do-convert"; however, there's no fallback)
+            // So fall through to fail:
+        case Fail:
+            _reportFailedCoercion(ctxt, action, targetType, inputValue, inputDesc);
+            // above method should not return
+            return null; // unreachable
+        case AsNull:
+            // Cannot return `null` for primitive types; need special handling
+            // ... unless `FAIL_ON_NULL_FOR_PRIMITIVES` disabled?
+            if (targetType.isPrimitive()) {
+                 // Behavior changed in 2.9, must respect feature setting; previously called
+                 // _verifyNullForPrimitive(ctxt) which threw exception if feature enabled.
+                 if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
+                     // apparently target is primitive, does not allow nulls, but feature
+                     // allows passing default value
+                     return getNullValue(ctxt); // should be primitive default value (0, false)
+                 }
+                 // If feature enabled, fall through to failure reporting
+                 _reportFailedNullCoerce(ctxt, true, _coercedTypeDesc(), "empty String (\"\") as null");
+                 return null; // unreachable
+            }
+            // wrapper types, etc are nullable ok
+            return getNullValue(ctxt);
+        case AsEmpty:
+            // May also need to consider if specific target type allows empty:
+            // for now assume generally ok (?)
+            return getEmptyValue(ctxt);
+        }
+        // Unknown CoercionAction? Should not occur
+        // ... but maybe should be reported? For now, fallback to null/empty seems reasonable
+        return getNullValue(ctxt);
+    }
+
+    // NOTE: Depending on the exact version, the following helper method might also need adjustment
+    // or might be part of the fix. Including it for completeness based on later versions
+    // where this logic was extracted. The core fix is ensuring the Fail path reports the mismatch.
+    /**
+     * @since 2.13.1
+     */
+    private void _reportFailedCoercion(DeserializationContext ctxt,
+            CoercionAction action, Class<?> targetType, Object inputValue,
+            String inputDesc) throws IOException
+    {
+        String msg = String.format(
+"Cannot coerce %s to %s (but could if coercion was enabled using `CoercionConfig`)",                inputDesc, _coercedTypeDesc());
+        // Allow possibility of custom handler
+        Object result = ctxt.handleWeirdStringValue(targetType, String.valueOf(inputValue), msg);
+        // if ProblemHandler returns non-null (or, for 2.13, NOT_HANDLED), it has handled it, otherwise need to throw
+        // Note: Changed in 2.13 to check for specific NOT_HANDLED marker
+        if (result == DeserializationProblemHandler.NOT_HANDLED) {
+             ctxt.reportInputMismatch(this, msg);
+        }
+        // If handler returned something else, we assume it has been handled, suppress exception
+        // (caller needs to determine what to do with result)
+    }
\ No newline at end of file
