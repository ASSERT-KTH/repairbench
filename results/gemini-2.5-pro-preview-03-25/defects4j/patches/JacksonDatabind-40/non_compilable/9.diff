diff --git a/tmp/738dca79-94f6-4f36-85a5-350b90cd1986_buggy.java b/tmp/d6d02744-491f-48e9-9b68-843ebd5769e2_fixed.java
index e69de29..577901d 100644
--- a/tmp/738dca79-94f6-4f36-85a5-350b90cd1986_buggy.java
+++ b/tmp/d6d02744-491f-48e9-9b68-843ebd5769e2_fixed.java
@@ -0,0 +1,113 @@
+package com.fasterxml.jackson.databind.deser.std;
+
+import java.io.IOException;
+
+import com.fasterxml.jackson.core.*;
+
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer;
+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
+import com.fasterxml.jackson.databind.util.AccessPattern;
+import com.fasterxml.jackson.databind.util.NumberInput;
+
+// This is one of the functions likely containing the bug pattern.
+// The fix needs to be applied similarly to LongDeserializer, FloatDeserializer, DoubleDeserializer.
+// Located in: com.fasterxml.jackson.databind.deser.std.NumberDeserializers.IntDeserializer
+// Note: The exact surrounding class structure and imports might vary slightly depending on the specific Jackson version.
+
+public final class IntDeserializer extends PrimitiveOrWrapperDeserializer<Integer>
+{
+    // ... other fields and methods ...
+
+    /**
+     * Variant needed for primitive values.
+     */
+    @Override
+    protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException
+    {
+        switch (p.currentTokenId()) {
+            case JsonTokenId.ID_NUMBER_INT:
+                return p.getIntValue();
+            case JsonTokenId.ID_NUMBER_FLOAT: // coercing may work too
+                if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {
+                    _failDoubleToIntCoercion(p, ctxt, "int");
+                }
+                return p.getValueAsInt();
+            case JsonTokenId.ID_NULL: {
+                // 26-Oct-2017, tatu: Need to honor CoercionConfig, explicit basic check first:
+                 CoercionAction act = _checkNullCoercion(ctxt, true); // true -> primitive
+                 if (act == CoercionAction.FAIL) {
+                     _verifyNullForPrimitive(ctxt); // should throw
+                 }
+                 // else `return 0` comes next
+                return 0;
+            }
+            case JsonTokenId.ID_STRING:
+                String text = p.getText().trim();
+
+                // validator check is done in caller
+                // 10-Mar-2017, tatu: Empty String can be ok; but need to check feature acceptability
+                if (text.isEmpty()) {
+                    // [databind#1998] Can not coerce empty strings to primitives unless feature enabled
+                    if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                        // Throw exception? Or use new Coercion mechanism?
+                        // Try Coercion first (shared method checks feature)
+                        CoercionAction act = _checkEmptyStringCoercion(ctxt, true); // true -> primitive
+                        if (act == CoercionAction.FAIL) {
+                            // This method handles the exception generation
+                           _verifyNullForPrimitiveCoercion(ctxt, text); // text = ""
+                        }
+                    }
+                    // Whether feature enabled or not, result is 0 for primitive `int`
+                    return 0;
+                 }
+                 // Null text handling differs a bit
+                 if (_hasTextualNull(text)) {
+                     // 26-Oct-2017, tatu: Need to honor CoercionConfig, explicit basic check first:
+                     CoercionAction act = _checkTextualNullCoercion(ctxt, true); // true -> primitive
+                     if (act == CoercionAction.FAIL) {
+                         _verifyNullForPrimitiveCoercion(ctxt, text);
+                     }
+                     // else `return 0` comes next
+                      return 0;
+                 }
+                 // let's allow Strings to be forced into primitives...
+                try {
+                    return NumberInput.parseInt(text);
+                } catch (IllegalArgumentException iae) {
+                    // If not integer, perhaps is double? But does not support Nan for ints...
+                    // 10-Nov-2019, tatu: As per [databind#2478], should possibly allow? No, not for `int`
+                    /*
+                    if (_isNaN(text)) {
+                         if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {
+                              _failDoubleToIntCoercion(p, ctxt, "int");
+                         }
+                         return 0;
+                    }
+                    */
+                    return ctxt.handleWeirdStringValue(_valueClass, text,
+                            "not a valid int value");
+                }
+            case JsonTokenId.ID_START_ARRAY: // unwrapping?
+                // 12-Jun-2020, tatu: Start with optimized path for common case
+                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
+                    p.nextToken();
+                    final int value = _parseIntPrimitive(p, ctxt);
+                    _verifyEndArrayForSingle(p, ctxt);
+                    return value;
+                }
+                // but fail if not enabled
+                break;
+            default:
+        }
+        // Otherwise, bad format, fail
+        // 18-Nov-2017, tatu: Say, FIELD_NAME -> 0? Uh, probably not. Let's instead
+        //     call method that indicates problem, which might translate to `0` if need be
+        return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).intValue();
+    }
+
+    // NOTE: Helper methods like _checkEmptyStringCoercion, _verifyNullForPrimitiveCoercion, _hasTextualNull
+    // are assumed to exist and function correctly based on newer Jackson versions that refined coercion handling.
+    // The core fix logic is the check for DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
+    // (or equivalent CoercionConfig check) before allowing "" -> 0.
+}
\ No newline at end of file
