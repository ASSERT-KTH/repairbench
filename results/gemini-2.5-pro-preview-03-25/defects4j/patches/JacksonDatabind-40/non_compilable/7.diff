diff --git a/tmp/de59e107-ea84-4b11-92cc-a9307e7c0d64_buggy.java b/tmp/465d7003-1fde-4e09-adb3-8b3fc31a2205_fixed.java
index e69de29..1464e4f 100644
--- a/tmp/de59e107-ea84-4b11-92cc-a9307e7c0d64_buggy.java
+++ b/tmp/465d7003-1fde-4e09-adb3-8b3fc31a2205_fixed.java
@@ -0,0 +1,326 @@
+package com.fasterxml.jackson.databind.deser.std;
+
+import java.io.IOException;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.Set;
+
+import com.fasterxml.jackson.core.*;
+
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
+import com.fasterxml.jackson.databind.cfg.CoercionAction;
+import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
+import com.fasterxml.jackson.databind.type.LogicalType;
+import com.fasterxml.jackson.databind.util.AccessPattern;
+import com.fasterxml.jackson.databind.util.ClassUtil;
+import com.fasterxml.jackson.databind.util.Converter;
+
+// NOTE: Although this class is abstract, its concrete implementations are defined
+// as static inner classes. This is regrettable design choice (would be better to use
+// separate files) but has to do with legacy code structure.
+
+
+/**
+ * Container class for deserializers that handle core JDK primitive (and matching wrapper) types,
+ * as well as standard related number types like {@link java.math.BigInteger} and
+ * {@link java.math.BigDecimal}.
+ */
+public class NumberDeserializers
+{
+    // // // Special handling for floating-point numbers
+
+    /**
+     * Helper method for encapsulating calls to low-level parsing method that requires
+     * passing context. Behavior is specified by {@link DeserializationFeature#ACCEPT_EMPTY_STRING_AS_NULL_OBJECT}
+     * and coercion configs.
+     * This value is returned if empty string is allowed.
+     *
+     * @param ctxt Deserialization context
+     * @param isPrimitive Whether target type is primitive (true) or wrapper (false)
+     *
+     * @return Value to return for empty String input, if allowed; otherwise exception thrown
+     *
+     * @throws JsonMappingException if empty string is not allowed
+     *
+     * @since 2.12 -- mostly to streamline handling between primitive/wrapper types
+     */
+    protected final int _coerceEmptyStringToInt(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException
+    {
+        // 01-Nov-2020, tatu: Need to determine action, handle failure, return default value otherwise
+        CoercionAction act = _findCoercionFromEmptyString(ctxt);
+        // For primitives, `AsNull` and `AsEmpty` are synonymous with "default value"
+        // which is 0 for `int`. `Fail` is failure, and `TryConvert` means "ask deserializer"
+        // which in this case cannot lead to success.
+        if (act != CoercionAction.AsEmpty && act != CoercionAction.AsNull) {
+            // 25-Nov-2020, tatu: Need to handle `TryConvert` as failure here, explicitly
+            //    (note: `_verifyActionForEmptyStringCoercion()` won't do that)
+            _reportFailedNullCoerce(ctxt, act, "Integer", "empty String (\"\")");
+        }
+        return 0;
+    }
+
+    // // // Then primitive/wrapper types
+
+    // @since 2.12
+    private final static class PrimitiveOrWrapperDeserializer<T>
+        extends StdScalarDeserializer<T>
+    {
+        private static final long serialVersionUID = 1L;
+
+        protected final LogicalType _logicalType;
+        protected final T _nullValue;
+        protected final T _emptyValue; // since 2.12
+
+        /**
+         * Tells whether target type is primitive type (true), or wrapper
+         * type (false). Needed for error reporting purposes.
+         */
+        protected final boolean _primitive;
+
+        public PrimitiveOrWrapperDeserializer(Class<T> vc, LogicalType logicalType,
+                T nvl, T empty) {
+            super(vc);
+            _logicalType = logicalType;
+            _nullValue = nvl;
+            _emptyValue = empty;
+            _primitive = vc.isPrimitive();
+        }
+
+        @Override
+        public AccessPattern getNullAccessPattern() {
+            // 16-Nov-2017, tatu: For primitives we must use default value; probably most
+            //   optimal to see as Dynamic value, different on call basis
+            if (_primitive) {
+                return AccessPattern.DYNAMIC;
+            }
+            // wrappers may be fine (unless custom null value specified?)
+            if (_nullValue == null) {
+                return AccessPattern.ALWAYS_NULL;
+            }
+            return AccessPattern.CONSTANT;
+        }
+
+        @Override
+        public AccessPattern getEmptyAccessPattern() {
+            // As with nulls, primitives should be dynamic, wrappers constant
+            if (_primitive) {
+                return AccessPattern.DYNAMIC;
+            }
+            // wrappers may be fine (unless custom empty value specified?)
+            if (_emptyValue == null) {
+                 // 14-Jul-2020, tatu: Not sure if this should be DYNAMIC or not;
+                 //    but let's default toDYNAMIC for now
+                return AccessPattern.DYNAMIC;
+//                return AccessPattern.ALWAYS_NULL;
+            }
+            return AccessPattern.CONSTANT;
+        }
+
+        @Override // since 2.9
+        public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException {
+            // For primitives, need to use the default value
+            if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
+                ctxt.reportInputMismatch(this,
+                        "Cannot map `null` into type %s (set DeserializationConfig.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
+                        handledType().toString());
+            }
+            return _nullValue;
+        }
+
+        @Override // since 2.12
+        public T getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {
+            return _emptyValue;
+        }
+
+        @Override
+        public LogicalType logicalType() {
+            return _logicalType;
+        }
+
+        // @since 2.12
+        protected void _verifyNullForPrimitive(DeserializationContext ctxt) throws JsonMappingException
+        {
+            if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
+                 ctxt.reportInputMismatch(this,
+ "Cannot map `null` into type %s (set DeserializationConfig.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
+ handledType().toString());
+            }
+        }
+
+        // @since 2.12
+        protected void _verifyNullForPrimitiveCoercion(DeserializationContext ctxt, String str) throws JsonMappingException
+        {
+            // note: `str` MUST be trimmed already
+            CoercionAction act;
+
+            // Empty String requires specific check:
+            if (str.isEmpty()) {
+                act = _findCoercionFromEmptyString(ctxt);
+                // Must map: Fail -> error; AsNull/AsEmpty -> default value (0); TryConvert -> error
+                // 24-Nov-2020, tatu: Must treat `TryConvert` as fail, since it cannot succeed
+                if (act == CoercionAction.Fail || act == CoercionAction.TryConvert) {
+                    _reportFailedNullCoerce(ctxt, act, logicalType().name(), "empty String (\"\")");
+                }
+                return;
+            }
+
+            // Other non-numeric Strings fail completely so
+            if (str.equals("null")) {
+                act = _findCoercionFromNullString(ctxt);
+                // Must map: Fail -> error; AsNull/AsEmpty -> default value (0); TryConvert -> error
+                if (act == CoercionAction.Fail || act == CoercionAction.TryConvert) {
+                    _reportFailedNullCoerce(ctxt, act, logicalType().name(), "`null` keyword");
+                }
+                return;
+            }
+
+            // Otherwise needs to fail regardless of settings
+            ctxt.reportInputMismatch(this,
+"Cannot coerce String \"%s\" to %s (but might if coercion using corresponding `CoercionConfig` was enabled)",
+str, _coercedTypeDesc());
+        }
+
+        // @since 2.12 -- used for floating-point Wrappers
+        protected T _deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException
+        {
+            CoercionAction act = _findCoercionFromEmptyArray(ctxt);
+            boolean unwrap = ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);
+
+            // 24-Nov-2020, tatu: Note that `TryConvert` not accepted for empty Array
+            if (unwrap || (act != CoercionAction.Fail)) {
+                if (p.nextToken() == JsonToken.END_ARRAY) {
+                    switch (act) {
+                    case AsEmpty:
+                        return getEmptyValue(ctxt);
+                    case AsNull:
+                        return getNullValue(ctxt);
+                    case Fail:
+                    default: // or TryConvert
+                        // If unwrapping, empty array is null; otherwise fail
+                        if (unwrap) {
+                             // TODO: Is it possible to verify whether null is acceptable value?
+                             return getNullValue(ctxt);
+                        }
+                        ctxt.reportInputMismatch(this,
+"Cannot deserialize instance of %s out of empty Array", // Show physical type not logical
+                                _coercedTypeDesc());
+                    }
+                } else if (unwrap) {
+                    // If single value array feature enabled, and member is not END_ARRAY, means we have a single element array.
+                    // Consume that element.
+                    // Important: for primitives, this requires String coercion:
+                    final T parsed = _deserializeWrappedValue(p, ctxt);
+                    // But then need to verify that we get END_ARRAY
+                    if (p.nextToken() != JsonToken.END_ARRAY) {
+                        handleMissingEndArrayForSingle(p, ctxt);
+                    }
+                    return parsed;
+                }
+            }
+            // Either regular Fail, or `TryConvert` that ends up failing due to multiple values
+            return (T) ctxt.handleUnexpectedToken(getValueType(ctxt), JsonToken.START_ARRAY, p, null);
+        }
+
+        /**
+         * Main method for deserializing values when the specific token type is not known
+         * (for example, when contained as generic Object).
+         * Will basically dispatch to specific {@code deserializeXxx()} method based on current
+         * token type.
+         *
+         * @since 2.12
+         */
+        protected T _deserializeWrappedValue(JsonParser p, DeserializationContext ctxt) throws IOException
+        {
+            // May be ok to coerce from string, float
+            switch (p.currentTokenId()) {
+            case JsonToken.ID_STRING:
+                // 28-Oct-2020, tatu: Should not allow coercion from empty string here,
+                //   as that is controlled by `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` / coercion config.
+                //   Need to determine actual path... This was added in 2.11.1 for [databind#2644];
+                //   removed from 2.12.
+                // 28-Oct-2020, tatu: Reverted, fixed path to use existing empty/blank handling
+                String text = p.getText();
+                // 25-Nov-2020, tatu: Need to trim() before further checks, always
+                text = text.trim();
+                if (text.isEmpty()) {
+                    // May need coercion, get defaults...
+                    CoercionAction act = _checkFromStringCoercion(ctxt, text,
+                            _logicalType, _valueClass);
+                    if (act == CoercionAction.AsNull) {
+                        return getNullValue(ctxt);
+                    }
+                    if (act == CoercionAction.AsEmpty) {
+                        return getEmptyValue(ctxt);
+                    }
+                    // 24-Nov-2020, tatu: Cannot treat `TryConvert` as success here
+                    // (note: `_checkFromStringCoercion()` won't report failure for `TryConvert`)
+                    _reportFailedNullCoerce(ctxt, act, logicalType().name(), "empty String (\"\")");
+                    return null;
+                }
+                if (_hasTextualNull(text)) {
+                    // note: `_checkFromStringCoercion` ensures Feature check or custom settings passed
+                    CoercionAction act = _checkTextualNull(ctxt, text);
+                    if (act == CoercionAction.AsNull) {
+                        return getNullValue(ctxt);
+                    }
+                    if (act == CoercionAction.AsEmpty) {
+                        return getEmptyValue(ctxt);
+                    }
+                    // 24-Nov-2020, tatu: Cannot treat `TryConvert` as success here
+                    _reportFailedNullCoerce(ctxt, act, logicalType().name(), String.format("String \"%s\"", text));
+                    return null;
+                }
+                // default handling will throw exception if there is issue
+                return _parseString(p, ctxt, text);
+            case JsonToken.ID_NUMBER_INT:
+                return _parseInteger(p, ctxt);
+            case JsonToken.ID_NUMBER_FLOAT:
+                return _parseFloat(p, ctxt);
+            case JsonToken.ID_START_ARRAY:
+                // Let's allow 'unwrap single element arrays' by default,
+                // although ideally maybe make it configurable?
+                return _deserializeFromArray(p, ctxt);
+            case JsonToken.ID_NULL:
+                return getNullValue(ctxt);
+            // lots of things not acceptable...
+            case JsonToken.ID_START_OBJECT: // can we actually map Object to Number?
+                return _deserializeFromObject(p, ctxt);
+            case JsonToken.ID_BINARY: // How about converting from base64 encoded data?
+                // 21-May-2020, tatu: With 2.12, can allow but by default do not:
+                return _deserializeFromOther(p, ctxt, p.currentToken());
+            case JsonToken.ID_END_ARRAY: // This is generally unexpected... means code error?
+            default:
+            }
+            return (T) ctxt.handleUnexpectedToken(getValueType(ctxt), p);
+        }
+
+        /**
+         * @param text Trimmed text to parse
+         */
+        protected T _parseString(JsonParser p, DeserializationContext ctxt, String text) throws IOException {
+            return (T) ctxt.handleMissingInstantiator(handledType(), // ValueInstantiator?
+                    p, "Cannot deserialize value of type %s from String \"%s\": not a valid representation",
+                    handledType().getName(), text);
+        }
+
+        protected T _parseInteger(JsonParser p, DeserializationContext ctxt) throws IOException {
+             return (T) ctxt.handleUnexpectedToken(getValueType(ctxt), p);
+        }
+
+        protected T _parseFloat(JsonParser p, DeserializationContext ctxt) throws IOException {
+            return (T) ctxt.handleUnexpectedToken(getValueType(ctxt), p);
+        }
+
+        // @since 2.12
+        protected T _deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException {
+            return (T) ctxt.handleUnexpectedToken(getValueType(ctxt), p);
+        }
+
+        // @since 2.12
+        protected T _deserializeFromOther(JsonParser p, DeserializationContext ctxt, JsonToken token) throws IOException {
+            return (T) ctxt.handleUnexpectedToken(getValueType(ctxt), p);
+        }
+    }
+}
\ No newline at end of file
