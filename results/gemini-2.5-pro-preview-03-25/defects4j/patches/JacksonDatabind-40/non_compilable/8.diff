diff --git a/tmp/25ca0474-eb06-413e-b6b3-852435782513_buggy.java b/tmp/7ca9e4c7-4335-449f-996a-cd32a61196e4_fixed.java
index e69de29..d5a0324 100644
--- a/tmp/25ca0474-eb06-413e-b6b3-852435782513_buggy.java
+++ b/tmp/7ca9e4c7-4335-449f-996a-cd32a61196e4_fixed.java
@@ -0,0 +1,85 @@
+    // Located in NumberDeserializers.PrimitiveOrWrapperDeserializer or NumberDeserializers.IntDeserializer
+    protected final int _deserializeInt(JsonParser p, DeserializationContext ctxt) throws IOException
+    {
+        switch (p.currentTokenId()) {
+        case JsonTokenId.ID_NUMBER_INT:
+        case JsonTokenId.ID_NUMBER_FLOAT: // coercing may work
+            return p.getIntValue();
+        case JsonTokenId.ID_STRING:
+            String text = p.getText().trim();
+
+            // 16-Nov-2017, tatu: Moved actual handling to `_parseEmptyString`...
+            // Fallback here needs to coordinate, however. Let's see:
+            if (text.isEmpty()) {
+                // 05-May-2020, tatu: Need to call `_checkFromStringCoercion` to see if implicit coercion is ok
+                CoercionAction act = _checkFromStringCoercion(ctxt, text);
+                if (act == CoercionAction.AsNull || act == CoercionAction.AsEmpty) {
+                    // note: `getNullValue()` returns `null` for primitives... so use primitive default
+                    return _emptyValue.intValue(); // Should be 0
+                }
+                // Fail means failure, and for primitives, TryConvert is same as Fail
+                // since empty String cannot be parsed as a number
+                if (act == CoercionAction.Fail || act == CoercionAction.TryConvert) { // FIX: Added || act == CoercionAction.TryConvert
+                    _checkCoercionFail(ctxt, act, _valueClass, text, "empty String (\"\")");
+                    // above call throws exception, we should not get here
+                    return 0; // Default value (unreachable)
+                }
+                // Removed the original fallthrough 'return _emptyValue.intValue();' which caused the bug for TryConvert
+            }
+            // 31-Jul-2020, tatu: Also need to handle "null" String coercions:
+            if (_hasTextualNull(text)) {
+                // note: `getNullValue()` returns `null` for primitives... so use primitive default
+                CoercionAction act = _checkNullCoercion(ctxt, _primitive);
+                if (act == CoercionAction.AsNull || act == CoercionAction.AsEmpty) {
+                    return _emptyValue.intValue(); // Should be 0
+                }
+                if (act == CoercionAction.Fail) {
+                    _checkCoercionFail(ctxt, act, _valueClass, text, "String \"null\"");
+                    return 0; // Default value (unreachable)
+                }
+                // Otherwise (TryConvert?), return default
+                return _emptyValue.intValue();
+            }
+             // If not empty or null, must be ok to coerce
+             _verifyStringForScalarCoercion(ctxt, text);
+             try {
+                 // For possible overflow, Check range
+                 long l = Long.parseLong(text);
+                 if (!_isIntRange(l)) {
+                     // 13-Nov-2020, tatu: Need to use `handleInvalidFormatException` for primitive target
+                     Number n = ctxt.handleWeirdStringValue(_valueClass, text,
+                             "Overflow: numeric value (%s) out of range of int (%d - %d)",
+                             text, Integer.MIN_VALUE, Integer.MAX_VALUE);
+                     // 18-Nov-2020, tatu: As per [databind#2983], should delegate back for coercion attempt
+                     //                     (except for NaN)
+                     return _nonNullNumber(n).intValue();
+                 }
+                 return (int) l;
+             } catch (IllegalArgumentException iae) {
+                 // 13-Nov-2020, tatu: Need to use `handleInvalidFormatException` for primitive target
+                 return ctxt.handleInvalidFormatException(_valueClass, text,
+                         "not a valid int value").intValue();
+             }
+         case JsonTokenId.ID_START_ARRAY:
+             // For primitive, need to return default value on failure
+             // 13-Nov-2020, tatu: Let's use the same `_deserializeFromArray` variant as wrapper
+             return _deserializeFromArray(p, ctxt).intValue();
+         case JsonTokenId.ID_NULL: // should mostly be caught by caller (if wrapping)
+             {
+                 CoercionAction act = _checkNullCoercion(ctxt, _primitive);
+                 if (act == CoercionAction.AsNull || act == CoercionAction.AsEmpty) {
+                     return _emptyValue.intValue(); // Should be 0
+                 }
+                 if (act == CoercionAction.Fail) {
+                     _checkCoercionFail(ctxt, act, _valueClass, null, "Cannot coerce `null` to `int` value");
+                     return 0; // unreachable
+                 }
+                 // Otherwise (TryConvert?), return default value
+                 return _emptyValue.intValue();
+             }
+         default:
+             // For primitive, must return default value on failure
+             // 13-Nov-2020, tatu: Let's use the same `handleUnexpectedToken` variant as wrapper
+             return ctxt.handleUnexpectedToken(_valueClass, p).intValue();
+         }
+    }
\ No newline at end of file
