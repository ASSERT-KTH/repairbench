diff --git a/tmp/f498bfe3-97cd-478c-8fa7-d19c6d125357_buggy.java b/tmp/c2d85dbe-5d6e-4509-bbc8-40edd2d75e41_fixed.java
index e69de29..165ed00 100644
--- a/tmp/f498bfe3-97cd-478c-8fa7-d19c6d125357_buggy.java
+++ b/tmp/c2d85dbe-5d6e-4509-bbc8-40edd2d75e41_fixed.java
@@ -0,0 +1,78 @@
+    protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException
+    {
+        switch (p.currentTokenId()) {
+            case JsonTokenId.ID_NUMBER_INT:
+                return p.getIntValue();
+            case JsonTokenId.ID_NUMBER_FLOAT: // coercing may work too
+                if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {
+                    _failDoubleToIntCoercion(p, ctxt, "int");
+                }
+                return p.getValueAsInt();
+            case JsonTokenId.ID_STRING:
+                // allow empty Strings if allowed; fallback checks below
+                String text = p.getText().trim();
+
+                // 29-Nov-2016, tatu: Need special handling for empty String unless
+                //    coercion feature is explicitly enabled.
+                if (text.isEmpty()) {
+                    // 14-Mar-2017, tatu: As per [databind#1503] this should actually FAIL for primitives
+                    //    by default, possibly configurable. Most importantly, should not return 0.
+                    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                        // Throw exception directly, cannot coerce empty string to primitive int
+                        _reportFailedNullCoerce(ctxt, true, "empty String", "Cannot coerce empty String to Null value for primitive type `int`");
+                    } else {
+                        // More general fail message if feature not enabled
+                        _reportMissingContent(ctxt, "Cannot coerce empty String ('') to int (but could if enabling `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`)");
+                    }
+                    // either way, we are done with this token
+                    return 0; // never gets here
+                }
+                // [databind#109]: allow converting "null" String into 'null' integer value?
+                // 12-Jun-2015, tatu: Let's separate handling: separate feature for primitives?
+                // Should we? Could also be handled by `CoercionConfigs`... How about this:
+                // If specific feature enabled, OR coercion happens, use default?
+                if (_hasTextualNull(text)) {
+                    // 11-Jun-2015, tatu: Used to claim "empty String not allowed"; but should
+                    // be ok, depending on Features
+                    // 03-Jan-2016, tatu: Let's add explicit check for `FAIL_ON_NULL_FOR_PRIMITIVES`
+                    _verifyNullForPrimitive(ctxt);
+                    return 0; // primitive default
+                }
+                // let's allow Strings to be forced to numbers (if features allow)
+                _verifyStringForScalarCoercion(ctxt, text);
+                try {
+                    int len = text.length();
+                    // avoid parsing exceptions for simple single-character "-"
+                    if (len > 9) {
+                        long l = Long.parseLong(text);
+                        if (_intOverflow(l)) {
+                            return _primitiveOverflow(ctxt, text, handledType());
+                        }
+                        return (int) l;
+                    }
+                    if (len == 0) {
+                       // Should have been handled earlier: here, indicates `text.trim()` was empty
+                       // String. Should not happen?
+                       // 14-Mar-2017, tatu: This used to return 0; but as per [databind#1503] seems wrong.
+                       // Let's delegate to method that reports error or allows via config
+                       return _coerceEmptyString(ctxt, _primitive);
+                    }
+                    return NumberInput.parseInt(text);
+                } catch (IllegalArgumentException iae) {
+                    return _handleInvalidNumberFormat(ctxt, p, handledType(), text, iae);
+                }
+            case JsonTokenId.ID_NULL:
+                _verifyNullForPrimitive(ctxt);
+                return 0; // primitive default
+            case JsonTokenId.ID_START_ARRAY: // need to skip, then?
+                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
+                    p.nextToken();
+                    final int parsed = _parseIntPrimitive(p, ctxt);
+                    _verifyEndArrayForSingle(p, ctxt);
+                    return parsed;            
+                }
+                break;
+        }
+        // otherwise, error
+        return _handleUnexpectedToken(ctxt, p, JsonToken.VALUE_NUMBER_INT);
+    }
\ No newline at end of file
