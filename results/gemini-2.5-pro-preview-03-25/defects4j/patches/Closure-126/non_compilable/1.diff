diff --git a/tmp/026054ac-4da7-414d-9d21-911960365d54_buggy.java b/tmp/df7a5d64-9472-43a4-accc-324e77675cfb_fixed.java
index 7d7ab59..57cc442 100644
--- a/tmp/026054ac-4da7-414d-9d21-911960365d54_buggy.java
+++ b/tmp/df7a5d64-9472-43a4-accc-324e77675cfb_fixed.java
@@ -1,124 +1,136 @@
   /**
    * Attempts to minimize the number of explicit exit points in a control
    * structure to take advantage of the implied exit at the end of the
    * structure.  This is accomplished by removing redundant statements, and
    * moving statements following a qualifying IF node into that node.
    * For example:
    *
    * function () {
    *   if (x) return;
    *   else blah();
    *   foo();
    * }
    *
    * becomes:
    *
    * function () {
    *  if (x) ;
    *  else {
    *    blah();
    *    foo();
    *  }
    *
    * @param n The execution node of a parent to inspect.
    * @param exitType The type of exit to look for.
    * @param labelName If parent is a label the name of the label to look for,
    *   null otherwise.
    * @nullable labelName non-null only for breaks within labels.
    */
   void tryMinimizeExits(Node n, int exitType, String labelName) {
 
     // Just an 'exit'.
     if (matchingExitNode(n, exitType, labelName)) {
       NodeUtil.removeChild(n.getParent(), n);
       compiler.reportCodeChange();
       return;
     }
 
     // Just an 'if'.
     if (n.isIf()) {
       Node ifBlock = n.getFirstChild().getNext();
       tryMinimizeExits(ifBlock, exitType, labelName);
       Node elseBlock = ifBlock.getNext();
       if (elseBlock != null) {
         tryMinimizeExits(elseBlock, exitType, labelName);
       }
       return;
     }
 
     // Just a 'try/catch/finally'.
     if (n.isTry()) {
       Node tryBlock = n.getFirstChild();
       tryMinimizeExits(tryBlock, exitType, labelName);
       Node allCatchNodes = NodeUtil.getCatchBlock(n);
       if (NodeUtil.hasCatchHandler(allCatchNodes)) {
         Preconditions.checkState(allCatchNodes.hasOneChild());
         Node catchNode = allCatchNodes.getFirstChild();
         Node catchCodeBlock = catchNode.getLastChild();
         tryMinimizeExits(catchCodeBlock, exitType, labelName);
       }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
-       */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
-        tryMinimizeExits(finallyBlock, exitType, labelName);
-      }
+      // DO NOT try to minimize the exits of finally blocks, as this
+      // can cause problems if it changes the completion type of the finally
+      // block. See ECMA 262 Sections 8.9 & 12.14
+      // The following code was removed:
+      // if (NodeUtil.hasFinally(n)) {
+      //   Node finallyBlock = n.getLastChild();
+      //   tryMinimizeExits(finallyBlock, exitType, labelName);
+      // }
     }
 
     // Just a 'label'.
     if (n.isLabel()) {
       Node labelBlock = n.getLastChild();
       tryMinimizeExits(labelBlock, exitType, labelName);
     }
 
     // TODO(johnlenz): The last case of SWITCH statement?
 
     // The rest assumes a block with at least one child, bail on anything else.
     if (!n.isBlock() || n.getLastChild() == null) {
       return;
     }
 
     // Multiple if-exits can be converted in a single pass.
     // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
     // become "if (blah); else { if (blah2); else { other_stmt; } }"
     // which will get converted to "if (!blah && !blah2) { other_stmt; }".
-    for (Node c : n.children()) {
+    // Use a temporary list to avoid ConcurrentModificationException when
+    // removing nodes following the IF.
+    Node[] children = n.children().toArray(new Node[0]);
+    for (Node c : children) {
+      // The node might have been removed or moved by a previous iteration.
+      if (c.getParent() != n) {
+        continue;
+      }
 
       // An 'if' block to process below.
       if (c.isIf()) {
         Node ifTree = c;
         Node trueBlock, falseBlock;
 
         // First, the true condition block.
         trueBlock = ifTree.getFirstChild().getNext();
         falseBlock = trueBlock.getNext();
         tryMinimizeIfBlockExits(trueBlock, falseBlock,
             ifTree, exitType, labelName);
 
         // Now the else block.
         // The if blocks may have changed, get them again.
+        // Check if the IF node itself is still valid before proceeding,
+        // as tryMinimizeIfBlockExits might have removed it (e.g. if trueBlock
+        // was empty and removed, and falseBlock didn't exist).
+        if (ifTree.getParent() == n && ifTree.isIf()) {
           trueBlock = ifTree.getFirstChild().getNext();
           falseBlock = trueBlock.getNext();
           if (falseBlock != null) {
             tryMinimizeIfBlockExits(falseBlock, trueBlock,
                 ifTree, exitType, labelName);
           }
         }
-
-      if (c == n.getLastChild()) {
-        break;
       }
+      // Removed break: if (c == n.getLastChild()) { break; }
+      // This break was incorrect as processing an IF might move the
+      // previously-last-child into the IF, and we still need to process
+      // subsequent IFs. The backward loop below handles the final last child.
     }
 
     // Now try to minimize the exits of the last child, if it is removed
     // look at what has become the last child.
     for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
       tryMinimizeExits(c, exitType, labelName);
       // If the node is still the last child, we are done.
       if (c == n.getLastChild()) {
         break;
       }
     }
   }
\ No newline at end of file
