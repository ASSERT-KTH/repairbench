diff --git a/tmp/e7a04624-4438-4f39-b62a-7d22517ea9af_buggy.java b/tmp/3ce02956-8f10-449d-b8a5-263dafcb67fd_fixed.java
index 7d7ab59..c0bb9cd 100644
--- a/tmp/e7a04624-4438-4f39-b62a-7d22517ea9af_buggy.java
+++ b/tmp/3ce02956-8f10-449d-b8a5-263dafcb67fd_fixed.java
@@ -1,124 +1,168 @@
   /**
    * Attempts to minimize the number of explicit exit points in a control
    * structure to take advantage of the implied exit at the end of the
    * structure.  This is accomplished by removing redundant statements, and
    * moving statements following a qualifying IF node into that node.
    * For example:
    *
    * function () {
    *   if (x) return;
    *   else blah();
    *   foo();
    * }
    *
    * becomes:
    *
    * function () {
    *  if (x) ;
    *  else {
    *    blah();
    *    foo();
    *  }
    *
    * @param n The execution node of a parent to inspect.
    * @param exitType The type of exit to look for.
    * @param labelName If parent is a label the name of the label to look for,
    *   null otherwise.
    * @nullable labelName non-null only for breaks within labels.
    */
   void tryMinimizeExits(Node n, int exitType, String labelName) {
 
-    // Just an 'exit'.
+    // Just an 'exit'. Handle removal logic within the block handling section.
     if (matchingExitNode(n, exitType, labelName)) {
-      NodeUtil.removeChild(n.getParent(), n);
-      compiler.reportCodeChange();
-      return;
+      // Let the block handle the removal of the exit node if it is
+      // the last statement in a removable context.
+      return; // Fix: Don't remove the node here directly.
     }
 
-    // Just an 'if'.
+    // Just an 'if'. Minimize children then return.
     if (n.isIf()) {
       Node ifBlock = n.getFirstChild().getNext();
       tryMinimizeExits(ifBlock, exitType, labelName);
       Node elseBlock = ifBlock.getNext();
       if (elseBlock != null) {
         tryMinimizeExits(elseBlock, exitType, labelName);
       }
+      // An if node can't be removed by this process.
       return;
     }
 
-    // Just a 'try/catch/finally'.
+    // Just a 'try/catch/finally'. Minimize children (except finally) then return.
     if (n.isTry()) {
       Node tryBlock = n.getFirstChild();
       tryMinimizeExits(tryBlock, exitType, labelName);
       Node allCatchNodes = NodeUtil.getCatchBlock(n);
       if (NodeUtil.hasCatchHandler(allCatchNodes)) {
+        // TODO(johnlenz): Handle multiple catch clauses.
         Preconditions.checkState(allCatchNodes.hasOneChild());
         Node catchNode = allCatchNodes.getFirstChild();
         Node catchCodeBlock = catchNode.getLastChild();
         tryMinimizeExits(catchCodeBlock, exitType, labelName);
       }
-      /* Don't try to minimize the exits of finally blocks, as this
+      /* Fix: Removed recursive call on finally block
+       * Do not try to minimize the exits of finally blocks, as this
        * can cause problems if it changes the completion type of the finally
        * block. See ECMA 262 Sections 8.9 & 12.14
        */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
-        tryMinimizeExits(finallyBlock, exitType, labelName);
-      }
+      // if (NodeUtil.hasFinally(n)) {
+      //   Node finallyBlock = n.getLastChild();
+      //   tryMinimizeExits(finallyBlock, exitType, labelName);
+      // }
+      // A try node can't be removed by this process.
+      return;
     }
 
-    // Just a 'label'.
+    // Just a 'label'. Minimize children then return.
     if (n.isLabel()) {
       Node labelBlock = n.getLastChild();
       tryMinimizeExits(labelBlock, exitType, labelName);
+      // A label node can't be removed by this process.
+      return;
     }
 
     // TODO(johnlenz): The last case of SWITCH statement?
 
     // The rest assumes a block with at least one child, bail on anything else.
     if (!n.isBlock() || n.getLastChild() == null) {
       return;
     }
 
-    // Multiple if-exits can be converted in a single pass.
-    // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
-    // become "if (blah); else { if (blah2); else { other_stmt; } }"
-    // which will get converted to "if (!blah && !blah2) { other_stmt; }".
+    // ----- Block body transformations -----
+
+    // Pass 1: Move statements following IF nodes with exiting branches.
+    // Iterate through children, calling the helper function.
+    // Note: Using a safe iteration mechanism might be better if
+    // tryMinimizeIfBlockExits can modify the block structure significantly,
+    // but assuming it only moves subsequent siblings into IF branches,
+    // this loop should be okay.
     for (Node c : n.children()) {
 
       // An 'if' block to process below.
       if (c.isIf()) {
         Node ifTree = c;
         Node trueBlock, falseBlock;
 
         // First, the true condition block.
         trueBlock = ifTree.getFirstChild().getNext();
         falseBlock = trueBlock.getNext();
         tryMinimizeIfBlockExits(trueBlock, falseBlock,
             ifTree, exitType, labelName);
 
         // Now the else block.
         // The if blocks may have changed, get them again.
         trueBlock = ifTree.getFirstChild().getNext();
         falseBlock = trueBlock.getNext();
         if (falseBlock != null) {
           tryMinimizeIfBlockExits(falseBlock, trueBlock,
               ifTree, exitType, labelName);
         }
       }
 
-      if (c == n.getLastChild()) {
-        break;
-      }
+      // Removed the original (and likely incorrect) break condition:
+      // if (c == n.getLastChild()) { break; }
     }
 
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
+    // Pass 2: Minimize exits on the last child recursively.
+    // If the last child is removed, repeat with the new last child.
     for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
+      // Try to minimize the exits of the last child. This recursive call
+      // might remove the node 'c' if it's a simple exit matching the
+      // criteria (handled by the base case check at the top returning true,
+      // allowing the parent's removeChild logic to work).
       tryMinimizeExits(c, exitType, labelName);
-      // If the node is still the last child, we are done.
+
+      // If the node is still the last child after the recursive call,
+      // it means it wasn't removed (e.g., it wasn't a simple exit, or
+      // it was an exit but couldn't be removed due to context).
+      // In this case, we are done processing the end of this block.
       if (c == n.getLastChild()) {
+        // It's possible the last child *is* a matching exit but wasn't
+        // removed by the recursion (e.g., if the base case only returns
+        // true but doesn't remove). Add explicit removal here for safety.
+        if (matchingExitNode(c, exitType, labelName)) {
+            // Check safety for finally blocks
+            boolean withinFinally = false;
+            for (Node ancestor = c.getParent(); ancestor != null; ancestor = ancestor.getParent()) {
+                if (NodeUtil.isFinallyBlock(ancestor)) {
+                    withinFinally = true;
                     break;
                 }
+                if (ancestor.isFunction() || ancestor.isScript()) {
+                    break;
+                }
+            }
+
+            if (!(withinFinally && (c.isBreak() || c.isContinue()))) {
+                 NodeUtil.removeChild(n, c);
+                 compiler.reportCodeChange();
+                 // After removal, continue the loop to check the new last child
+                 continue;
+            }
+        }
+        // If it's not a removable exit, or it wasn't removed, break the loop.
+        break;
+      }
+      // Otherwise, the child *was* removed by the recursive call.
+      // The loop will automatically continue with the new n.getLastChild().
     }
   }
\ No newline at end of file
