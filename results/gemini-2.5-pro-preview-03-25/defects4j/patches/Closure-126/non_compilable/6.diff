diff --git a/tmp/71265819-7971-4371-93e8-b87435f9295d_buggy.java b/tmp/28e13029-9086-47cb-8d73-0a22aefa1481_fixed.java
index 7d7ab59..3e16c4e 100644
--- a/tmp/71265819-7971-4371-93e8-b87435f9295d_buggy.java
+++ b/tmp/28e13029-9086-47cb-8d73-0a22aefa1481_fixed.java
@@ -1,124 +1,162 @@
   /**
    * Attempts to minimize the number of explicit exit points in a control
    * structure to take advantage of the implied exit at the end of the
    * structure.  This is accomplished by removing redundant statements, and
    * moving statements following a qualifying IF node into that node.
    * For example:
    *
    * function () {
    *   if (x) return;
    *   else blah();
    *   foo();
    * }
    *
    * becomes:
    *
    * function () {
    *  if (x) ;
    *  else {
    *    blah();
    *    foo();
    *  }
    *
    * @param n The execution node of a parent to inspect.
    * @param exitType The type of exit to look for.
    * @param labelName If parent is a label the name of the label to look for,
    *   null otherwise.
    * @nullable labelName non-null only for breaks within labels.
    */
   void tryMinimizeExits(Node n, int exitType, String labelName) {
 
-    // Just an 'exit'.
+    // Base case: If n is a matching exit node, try to remove it.
     if (matchingExitNode(n, exitType, labelName)) {
-      NodeUtil.removeChild(n.getParent(), n);
+      Node parent = n.getParent();
+      // An exit can be removed if it's the last statement in a BLOCK
+      // and it's not a FINALLY block.
+      if (parent != null && parent.isBlock() && n == parent.getLastChild()) {
+         Node grandparent = parent.getParent();
+         boolean inFinally = false;
+         if (grandparent != null && grandparent.isTry()) {
+            Node finallyBlock = NodeUtil.getFinallyBlock(grandparent);
+            if (finallyBlock == parent) {
+               inFinally = true;
+            }
+         }
+
+         if (!inFinally) {
+            NodeUtil.removeChild(parent, n);
             compiler.reportCodeChange();
+         }
+      }
+      // We're done with this node, whether it was removed or not.
       return;
     }
 
-    // Just an 'if'.
+    // Recurse on complex structures.
+
+    // If node.
     if (n.isIf()) {
       Node ifBlock = n.getFirstChild().getNext();
       tryMinimizeExits(ifBlock, exitType, labelName);
       Node elseBlock = ifBlock.getNext();
       if (elseBlock != null) {
         tryMinimizeExits(elseBlock, exitType, labelName);
       }
+      // Don't process the IF node itself further in this call.
       return;
     }
 
-    // Just a 'try/catch/finally'.
+    // Try/catch/finally node.
     if (n.isTry()) {
       Node tryBlock = n.getFirstChild();
       tryMinimizeExits(tryBlock, exitType, labelName);
       Node allCatchNodes = NodeUtil.getCatchBlock(n);
       if (NodeUtil.hasCatchHandler(allCatchNodes)) {
+        // ECMA-262 only allows one catch clause.
         Preconditions.checkState(allCatchNodes.hasOneChild());
         Node catchNode = allCatchNodes.getFirstChild();
         Node catchCodeBlock = catchNode.getLastChild();
         tryMinimizeExits(catchCodeBlock, exitType, labelName);
       }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
-       */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
-        tryMinimizeExits(finallyBlock, exitType, labelName);
-      }
+      // *** FIX: Do not try to minimize the exits of finally blocks ***
+      // This can change the completion type of the finally block, affecting
+      // control flow (See ECMA 262 Sections 8.9 & 12.14).
+      // The original recursive call is removed.
+      // if (NodeUtil.hasFinally(n)) {
+      //  Node finallyBlock = n.getLastChild();
+      //  tryMinimizeExits(finallyBlock, exitType, labelName); // REMOVED
+      // }
+      return; // Done processing TRY node.
     }
 
-    // Just a 'label'.
+    // Label node.
     if (n.isLabel()) {
       Node labelBlock = n.getLastChild();
       tryMinimizeExits(labelBlock, exitType, labelName);
+      // TODO(johnlenz): Should we remove the label if the block is empty?
+      // This is potentially handled by RemoveUnnecessaryCode.
+      return; // Done processing LABEL node.
     }
 
-    // TODO(johnlenz): The last case of SWITCH statement?
+    // TODO(johnlenz): Handle SWITCH statements?
 
-    // The rest assumes a block with at least one child, bail on anything else.
+    // Only perform structural modifications on BLOCK nodes below.
     if (!n.isBlock() || n.getLastChild() == null) {
       return;
     }
 
-    // Multiple if-exits can be converted in a single pass.
-    // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
-    // become "if (blah); else { if (blah2); else { other_stmt; } }"
-    // which will get converted to "if (!blah && !blah2) { other_stmt; }".
-    for (Node c : n.children()) {
+    // Process IF nodes within this block using tryMinimizeIfBlockExits.
+    // This helper function can move statements following an IF into its branches.
+    // Iterate through children, calling the helper.
+    // NOTE: This loop structure relies on tryMinimizeIfBlockExits potentially
+    // modifying the siblings of 'c' or 'c' itself.
+    for (Node c = n.getFirstChild(); c != null; ) {
+       Node next = c.getNext(); // Get next before potentially modifying/removing c
 
-      // An 'if' block to process below.
        if (c.isIf()) {
          Node ifTree = c;
          Node trueBlock, falseBlock;
 
-        // First, the true condition block.
+         // Minimize exits in the THEN branch
          trueBlock = ifTree.getFirstChild().getNext();
-        falseBlock = trueBlock.getNext();
-        tryMinimizeIfBlockExits(trueBlock, falseBlock,
-            ifTree, exitType, labelName);
+         falseBlock = trueBlock.getNext(); // Get ELSE block relative to THEN
+         tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);
 
-        // Now the else block.
-        // The if blocks may have changed, get them again.
+         // Refresh references, as the structure might have changed.
          trueBlock = ifTree.getFirstChild().getNext();
          falseBlock = trueBlock.getNext();
+
+         // Minimize exits in the ELSE branch (if it exists)
          if (falseBlock != null) {
-          tryMinimizeIfBlockExits(falseBlock, trueBlock,
-              ifTree, exitType, labelName);
-        }
-      }
-
-      if (c == n.getLastChild()) {
-        break;
-      }
-    }
-
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
-    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
+           // Pass the THEN block as the "other" block.
+           tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);
+         }
+       } else {
+          // For non-IF children, recurse to handle nested structures.
+          // This wasn't explicitly done in the original loop, but seems necessary
+          // to ensure structures inside the block are minimized before checking
+          // the block's last child later.
           tryMinimizeExits(c, exitType, labelName);
-      // If the node is still the last child, we are done.
-      if (c == n.getLastChild()) {
-        break;
        }
+       c = next; // Move to the next node
     }
+
+
+    // After potentially modifying the block structure (especially IFs),
+    // check the *current* last child. It might be a simple exit node
+    // that's now redundant, or a structure containing a newly redundant exit.
+    Node lastChild = n.getLastChild();
+    if (lastChild != null) {
+      // Recursively try to minimize the last child.
+      // This handles cases where the last child is a container (like IF or TRY)
+      // which might have had its own last statement removed, potentially making
+      // the container itself removable or simpler.
+      // It also handles the case where the last child *became* a removable exit
+      // due to the loop above. The base case check at the start of the function
+      // will handle the actual removal if `lastChild` is a simple exit node.
+      tryMinimizeExits(lastChild, exitType, labelName);
+    }
+    // Removed the complex iterative loop on the last child from the original code.
+    // The combination of the initial base case check and this final recursive call
+    // should be sufficient.
   }
\ No newline at end of file
