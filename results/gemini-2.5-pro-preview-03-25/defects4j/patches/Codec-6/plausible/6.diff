diff --git a/tmp/1350171d-77d3-4cfd-8dbf-abd141605f79_buggy.java b/tmp/2c653112-152f-49ba-a8cc-2aae29459634_fixed.java
index d3b3ebf..743d755 100644
--- a/tmp/1350171d-77d3-4cfd-8dbf-abd141605f79_buggy.java
+++ b/tmp/2c653112-152f-49ba-a8cc-2aae29459634_fixed.java
@@ -1,62 +1,93 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
-            throw new IndexOutOfBoundsException();
+            throw new IndexOutOfBoundsException("offset=" + offset + ", len=" + len);
         } else if (offset > b.length || offset + len > b.length) {
-            throw new IndexOutOfBoundsException();
+            throw new IndexOutOfBoundsException("offset=" + offset + ", len=" + len + ", b.length=" + b.length);
         } else if (len == 0) {
             return 0;
         } else {
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero.  Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
-                if (!base64.hasData()) {
-                    byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
+            int readLen = 0;
+            // Execute the read operation until readLen is non-zero.
+            // This ensures that we INTERNALIZE any 0-return reads from
+            // the Base64 object.
+            while (readLen == 0) {
+                if (!base64.hasData()) { // Check if the Base64 object has cached data
+                    byte[] buf = new byte[doEncode ? 4096 : 8192]; // Internal buffer
+                    int c = in.read(buf); // Read from underlying stream
+                    
+                    // Signal EOF to Base64 processor if underlying stream reaches EOF
+                    if (c == -1) {
+                         if (doEncode) {
+                             // Encode operates somewhat differently from decode with respect to EOF.
+                             // If encoding, we need to tell the encoder that this is the end of the stream.
+                             base64.encode(buf, 0, -1); // Signal EOF
+                         } else {
+                             // For decode, pass the EOF signal (-1) too.
+                             // This might flush any remaining buffered data.
+                             base64.decode(buf, 0, -1); // Signal EOF
                          }
+                    } else if (c > 0) { // Process data if read successfully
                         if (doEncode) {
                             base64.encode(buf, 0, c);
                         } else {
                             base64.decode(buf, 0, c);
                         }
                     }
-            return base64.readResults(b, offset, len);
+                    // If c == 0, we continue the loop as readLen is still 0.
+                    // This handles potential 0-byte reads from the underlying stream
+                    // appropriately by trying again.
+                }
+                
+                // Attempt to fill the user buffer with processed data from Base64 object.
+                // This call might return 0 if no data is available *yet*, even if EOF wasn't reached.
+                readLen = base64.readResults(b, offset, len);
+                
+                // If the underlying stream is EOF, and readResults returns 0,
+                // the loop continues. On the next iteration:
+                //   - !base64.hasData() might be true.
+                //   - in.read(buf) will return -1 again.
+                //   - EOF is signalled again.
+                //   - base64.readResults is called again.
+                // This continues until readResults returns -1 (signalling EOF completion)
+                // or > 0 (if buffered data was flushed).
+            }
+            return readLen; // Return bytes read (>0) or EOF (-1)
         }
     }
\ No newline at end of file
