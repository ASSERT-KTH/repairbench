diff --git a/tmp/cce8a5e3-f397-4684-89a4-ce38e61d0ed4_buggy.java b/tmp/ba55f174-d3b8-4b0a-8ef4-48bb9c196d1f_fixed.java
index d3b3ebf..118ba67 100644
--- a/tmp/cce8a5e3-f397-4684-89a4-ce38e61d0ed4_buggy.java
+++ b/tmp/ba55f174-d3b8-4b0a-8ef4-48bb9c196d1f_fixed.java
@@ -1,62 +1,111 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
-        } else if (offset < 0 || len < 0) {
-            throw new IndexOutOfBoundsException();
-        } else if (offset > b.length || offset + len > b.length) {
-            throw new IndexOutOfBoundsException();
+        // Combine boundary checks for clarity and efficiency
+        } else if (offset < 0 || len < 0 || len > b.length - offset) {
+            // Ensure the provided message is helpful for debugging
+            throw new IndexOutOfBoundsException("Trying to read " + len + " bytes into a byte array of size " + b.length + " at offset " + offset);
         } else if (len == 0) {
             return 0;
         } else {
-            /*
-             Rationale for while-loop on (readLen == 0):
-             -----
-             Base64.readResults() usually returns > 0 or EOF (-1).  In the
-             rare case where it returns 0, we just keep trying.
+            byte[] buf = null; // Buffer used to read from underlying stream, initialize lazily
+            boolean eof = false; // Tracks if EOF was reached on the underlying stream 'in'
+            int readLen = 0; // Number of bytes read in the last call to base64.readResults
 
-             This is essentially an undocumented contract for InputStream
-             implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base64, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
-             -----
-             This is a fix for CODEC-101
-            */
+            // Loop until we have read non-zero bytes or confirmed EOF.
+            // This loop implements the fix for CODEC-101, ensuring this method never returns 0
+            // unless len == 0, addressing issues with InputStreamReader and similar classes.
+            while (true) {
+                // Try to read results from the Base64 engine into the user buffer 'b'.
+                // This method may return >0 bytes, 0 bytes (if more input needed or skipping non-base64), or -1 (EOF).
+                readLen = base64.readResults(b, offset, len);
+
+                // If readResults returned non-zero, we return that value.
+                // This handles both successful reads (> 0) and EOF signaled by the codec (-1).
+                if (readLen != 0) {
+                    return readLen;
+                }
+
+                // If we reach here, readLen is 0. This means the Base64 engine couldn't produce
+                // output bytes with its current state. It might need more input data, or it might
+                // have processed input that resulted in no output (e.g., skipped whitespace).
+
+                // Check if we already know the underlying stream has ended.
+                if (eof) {
+                    // 'eof' is true means in.read() previously returned -1.
+                    // Since readResults just returned 0, it confirms that there's no more data
+                    // to be produced by the Base64 engine. Signal true EOF for this stream.
+                    return -1;
+                }
+
+                // readLen == 0 and the underlying stream is not yet known to be EOF.
+                // We need to try to fetch more data from 'in' if the Base64 engine's internal buffer is empty.
                 if (!base64.hasData()) {
-                    byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
+                    // Lazily initialize the buffer for reading from 'in'.
+                    // Size depends on whether we are encoding (smaller buffer) or decoding (larger buffer).
+                    if (buf == null) {
+                       buf = new byte[doEncode ? 4096 : 8192];
                     }
+                    int c = in.read(buf); // Read from the underlying stream
+
+                    if (c == -1) {
+                        // End of the underlying stream reached.
+                        eof = true; // Mark that EOF has been reached.
+                        if (!doEncode) {
+                            // For decoding, we must explicitly signal EOF to the Base64 engine.
+                            // This allows it to process any final partial blocks or padding.
+                            // We pass -1 as the length to the decode method to signal EOF.
+                            base64.decode(buf, 0, -1);
+                            // The loop will continue. The next call to readResults will attempt
+                            // to fetch any final data produced by the decoder. If it returns 0,
+                            // the 'if (eof)' check above will catch it and return -1.
+                        }
+                        // For encoding, reaching EOF on the input stream is normal. We just mark eof=true.
+                        // The loop continues. The next call to readResults will fetch any remaining
+                        // encoded data buffered in the engine. If readResults returns 0 after this,
+                        // the 'if (eof)' check above will return -1.
+                    } else if (c > 0) {
+                        // Successfully read 'c' bytes from the underlying stream.
+                        // Pass this data to the Base64 engine for processing (encoding or decoding).
                         if (doEncode) {
                             base64.encode(buf, 0, c);
                         } else {
                             base64.decode(buf, 0, c);
                         }
+                        // The loop continues. The next call to readResults will attempt
+                        // to fill the user buffer 'b' with the processed data.
                     }
-            return base64.readResults(b, offset, len);
+                    // If c == 0, the underlying stream read 0 bytes. This is permitted by the
+                    // InputStream contract but unusual. We simply continue the loop,
+                    // which will effectively retry the read from 'in' if !base64.hasData().
+                } else {
+                    // base64.hasData() is true, but readResults returned 0.
+                    // This scenario means the Base64 engine has some data internally, but it wasn't
+                    // enough to produce output bytes (e.g., processed whitespace, needs more data for a
+                    // full quantum, or 'len' was too small). We must continue the loop.
+                    // Eventually, either readResults will return non-zero, or hasData will become false
+                    // (prompting a read from 'in'), or 'in' will hit EOF triggering the eof logic.
+                }
+                // Continue loop to call readResults again.
+            } // End while
         }
     }
\ No newline at end of file
