diff --git a/tmp/ed76b993-bb6c-40d8-9dd3-5df2ec54878c_buggy.java b/tmp/ec8ef8e5-3b73-4722-9689-243ea38fd587_fixed.java
index d3b3ebf..54b45e9 100644
--- a/tmp/ed76b993-bb6c-40d8-9dd3-5df2ec54878c_buggy.java
+++ b/tmp/ec8ef8e5-3b73-4722-9689-243ea38fd587_fixed.java
@@ -1,62 +1,74 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      *
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      *
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
+    @Override
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
-        } else if (offset < 0 || len < 0) {
-            throw new IndexOutOfBoundsException();
-        } else if (offset > b.length || offset + len > b.length) {
+        } else if (offset < 0 || len < 0 || len > b.length - offset) { // Consolidated bounds check
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
+            int readLen = 0;
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero.  Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
-                if (!base64.hasData()) {
+            while (readLen == 0) { // Loop until bytes are read or EOF
+                if (!base64.hasData()) { // Check if Base64 object needs more data
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
+                    int c = in.read(buf); // Read from underlying stream
+                    if (c == -1) { // End of underlying stream reached
+                        // If Base64 has no data left to output, we are at EOF for Base64InputStream
+                        if (!base64.hasData()) {
+                           return -1; // Signal EOF for this stream
                         }
+                        // Otherwise, proceed to call readResults to flush any remaining Base64 data
+                    } else { // Data read from underlying stream
+                        // Pass the read data to the Base64 processor
                         if (doEncode) {
                             base64.encode(buf, 0, c);
                         } else {
                             base64.decode(buf, 0, c);
                         }
                     }
-            return base64.readResults(b, offset, len);
+                }
+                // Attempt to read results into the destination buffer
+                readLen = base64.readResults(b, offset, len);
+                // If readLen is 0, loop continues to ensure we don't return 0,
+                // potentially reading more from the underlying stream if needed.
+                // If readLen > 0, loop terminates and readLen is returned.
+                // If readLen is -1 (EOF), loop terminates and -1 is returned.
+            }
+            return readLen;
         }
     }
\ No newline at end of file
