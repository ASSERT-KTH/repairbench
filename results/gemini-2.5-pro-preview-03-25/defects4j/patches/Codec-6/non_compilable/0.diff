diff --git a/tmp/5c83cfcd-be02-455b-b361-d1cbb9cbd29c_buggy.java b/tmp/2ed05bc9-7760-430a-8dc1-d45524082cce_fixed.java
index d3b3ebf..9d5d76f 100644
--- a/tmp/5c83cfcd-be02-455b-b361-d1cbb9cbd29c_buggy.java
+++ b/tmp/2ed05bc9-7760-430a-8dc1-d45524082cce_fixed.java
@@ -1,62 +1,76 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      *
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      *
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
+    @Override
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
-        } else if (offset < 0 || len < 0) {
-            throw new IndexOutOfBoundsException();
-        } else if (offset > b.length || offset + len > b.length) {
+        // Consolidated bounds check: ensures offset and len are non-negative,
+        // and offset + len does not exceed the buffer length.
+        } else if (offset < 0 || len < 0 || len > b.length - offset) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
+            int readLen = 0;
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1). In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero. Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
-                if (!base64.hasData()) {
+            while (readLen == 0) {
+                if (!base64.hasData()) { // Check if Base64 codec needs more data
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
-                    }
+                    int c = in.read(buf); // Read raw data from underlying stream
+
+                    // Pass the data read (or EOF signal c=-1) to the Base64 codec
+                    // This will process the data and potentially buffer results.
                     if (doEncode) {
                         base64.encode(buf, 0, c);
                     } else {
                         base64.decode(buf, 0, c);
                     }
                 }
-            return base64.readResults(b, offset, len);
+                // Ask the Base64 codec to fill the user's buffer with processed data
+                // This reads from the Base64 codec's internal buffer.
+                readLen = base64.readResults(b, offset, len);
+
+                // If readLen is 0, it means the Base64 codec consumed some input
+                // but didn't produce output bytes yet (e.g., non-base64 characters)
+                // or it needs more input for a complete group.
+                // The loop continues to ensure we don't return 0 unless len == 0.
+                // If base64.readResults returns -1, it signifies EOF from the codec,
+                // and the loop terminates.
+                // If base64.readResults returns > 0, data was successfully read,
+                // and the loop terminates.
+            }
+            return readLen;
         }
     }
\ No newline at end of file
