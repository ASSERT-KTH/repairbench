diff --git a/tmp/c5c8b0d1-2ed7-416c-902e-e65684715fe3_buggy.java b/tmp/244d9a56-c988-4bdc-b49d-e76f3f6d9185_fixed.java
index d3b3ebf..d72c072 100644
--- a/tmp/c5c8b0d1-2ed7-416c-902e-e65684715fe3_buggy.java
+++ b/tmp/244d9a56-c988-4bdc-b49d-e76f3f6d9185_fixed.java
@@ -1,62 +1,75 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
+    @Override
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
+            int readLen = 0;
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
              java.io.InputStreamReader, since the latter hates it when
              InputStream.read(byte[]) returns a zero.  Unfortunately our
              readResults() call must return 0 if a large amount of the data
              being decoded was non-base64, so this while-loop enables proper
              interop with InputStreamReader for that scenario.
              -----
              This is a fix for CODEC-101
             */
-                if (!base64.hasData()) {
+            // Loop until readLen is non-zero (either > 0 bytes read or -1 for EOF)
+            while (readLen == 0) {
+                if (!base64.hasData()) { // Check if Base64 codec's buffer needs more data
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
-                    }
+                    int c = in.read(buf); // Read from underlying input stream
+                    // The setInitialBuffer optimization logic was removed as it's complex
+                    // and potentially incorrect within this loop structure.
+
+                    // Pass data read (or EOF indicator c=-1) to the Base64 codec
                     if (doEncode) {
                         base64.encode(buf, 0, c);
                     } else {
                         base64.decode(buf, 0, c);
                     }
+                    // If the underlying stream reached EOF (c == -1) and the codec
+                    // has processed it, subsequent calls to base64.readResults
+                    // should eventually return -1 after flushing any remaining data.
                 }
-            return base64.readResults(b, offset, len);
+                // Attempt to fill the user buffer 'b' with data from the Base64 codec
+                readLen = base64.readResults(b, offset, len);
+                // If readLen == 0, the loop condition remains true, and we try again.
+                // This ensures this method does not return 0, fulfilling the requirement
+                // for interop with InputStreamReader and fixing CODEC-101.
+                // The loop terminates when readLen > 0 (bytes read) or readLen == -1 (EOF).
+            }
+            return readLen;
         }
     }
\ No newline at end of file
