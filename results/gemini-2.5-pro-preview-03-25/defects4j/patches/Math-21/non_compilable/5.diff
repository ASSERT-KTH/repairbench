diff --git a/tmp/62f0a645-1e49-40bd-85ed-97ef5500df10_buggy.java b/tmp/4640389b-5b7e-4711-bffa-bddd871c6950_fixed.java
index 6708762..1b87440 100644
--- a/tmp/62f0a645-1e49-40bd-85ed-97ef5500df10_buggy.java
+++ b/tmp/4640389b-5b7e-4711-bffa-bddd871c6950_fixed.java
@@ -1,99 +1,134 @@
+import org.apache.commons.math3.linear.MatrixUtils;
+import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.FastMath;
+
+// Assume fields this.rank and this.root are declared elsewhere in the class
+// private RealMatrix root;
+// private int rank;
+
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
-        final double[][] b = new double[order][order];
+        final double[][] c = matrix.getData(); // Matrix data is modified in-place
+        final double[][] b = new double[order][order]; // Stores the factor L for P^T A P = L L^T
 
-        int[] swap  = new int[order];
-        int[] index = new int[order];
+        int[] swap  = new int[order]; // Stores permutation info during pivoting
+        int[] index = new int[order]; // Stores the permutation p: index[k] is original index at position k
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
-        int r = 0;
+        int r = 0; // Current rank / column index
+        // The loop continues as long as loop is true, which is initially set
+        // and controlled inside the loop based on rank completion or matrix size.
         for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // Find maximal diagonal element in the remaining submatrix (from r to order-1)
+            swap[r] = r; // Position of the max diagonal element found so far, initialized to current position r
+            // Initialize maxDiag with the diagonal element at the current position r
+            double maxDiag = c[index[r]][index[r]];
+
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                int ii = index[i]; // Original index of element at position i
+                double diag = c[ii][ii];
+                if (diag > maxDiag) {
+                    maxDiag = diag;
+                    swap[r] = i; // Update position of max diagonal
                 }
             }
 
-
-            // swap elements
+            // Swap elements to bring the maximal diagonal element to position r
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
-            // check diagonal element
-            int ir = index[r];
-            if (c[ir][ir] < small) {
+            // Check the pivot element (maximal diagonal element, now at position r)
+            int ir = index[r]; // Original index of the pivot element
+            double pivot = c[ir][ir];
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+            // Check for positive definiteness and handle rank deficiency
+            if (pivot < -small) {
+                // The pivot is significantly negative, matrix is not positive semidefinite.
+                // Use the original index 'ir' for reporting the problematic element.
+                throw new NonPositiveDefiniteMatrixException(pivot, ir, small);
+            } else if (pivot < small) {
+                // Pivot is close to zero (or slightly negative but within tolerance).
+                // This indicates potential rank deficiency.
+                // Check remaining diagonal elements for significant negative values before concluding.
+                for (int i = r; i < order; ++i) { // Check all remaining diagonal elements (including pivot position r)
+                     int currentOriginalIndex = index[i];
+                     // If any remaining diagonal element is significantly negative, the matrix is not PSD.
+                     if (c[currentOriginalIndex][currentOriginalIndex] < -small) {
+                         // Found a significantly negative diagonal element, matrix is not positive semidefinite.
+                         // Report the original index and value found.
+                         throw new NonPositiveDefiniteMatrixException(c[currentOriginalIndex][currentOriginalIndex], currentOriginalIndex, small);
                      }
                 }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
-
+                // All remaining diagonal elements are non-negative (within tolerance -small).
+                // The matrix is positive semidefinite but rank deficient. Rank is determined to be r.
+                loop = false; // Terminate the decomposition process; rank is r.
             } else {
+                // Pivot is sufficiently positive (>= small). Perform Cholesky update step.
+                final double sqrtPivot = FastMath.sqrt(pivot);
+                b[r][r] = sqrtPivot; // Store diagonal element L_rr of the factor L
+                final double inverseSqrtPivot = 1.0 / sqrtPivot;
 
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+                // Compute column r of L and update the trailing submatrix C (Schur complement)
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+                    final int ii = index[i]; // Original index at position i (outer loop)
+                    // Compute L_ir = c[ii][ir] / L_rr (where ii=index[i], ir=index[r] refer to original indices)
+                    final double e = inverseSqrtPivot * c[ii][ir];
+                    // Store L_ir in b using the permuted row index i
                     b[i][r] = e;
+                    // Update diagonal element C_ii = C_ii - L_ir^2
+                    // This update happens in the matrix c using original indices ii = index[i]
                     c[ii][ii] -= e * e;
+
+                    // Update off-diagonal elements C_ij = C_ij - L_ir * L_jr
+                    // This update happens in the matrix c using original indices ii=index[i], ij=index[j]
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
+                        final int ij = index[j]; // Original index at position j (inner loop)
+                        // b[j][r] stores L_jr (using permuted index j)
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry
                     }
                 }
 
-                // prepare next iteration
-                loop = ++r < order;
-            }
+                // Prepare for the next iteration: increment rank and check if we reached the end
+                r++; // Increment the rank since we successfully processed column r
+                loop = (r < order); // Continue if there are more columns/rows to process
             }
+        } // End of main loop
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
+        // Build the root matrix R such that A = R R^T
+        // The algorithm computes L and P such that P^T A P = L L^T.
+        // This implies A = P L L^T P^T = (P L) (P L)^T.
+        // Therefore, the root matrix R must be R = P L.
+        // R_ij = (P L)_ij = L_{p(i), j}, where p(i) = index[i] is the original index corresponding to row i after permutation.
+        // The matrix b stores L using permuted indices: b[k][j] = L_kj.
+        // So, R_ij = L_{index[i], j} = b[index[i]][j].
+        rank = r; // The final rank is the value of r when the loop terminated.
+        this.rank = r; // Store rank in the instance field
+        root = MatrixUtils.createRealMatrix(order, rank);
         for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+            for (int j = 0; j < rank; ++j) {
+                 // Populate the root matrix R using the formula R_ij = b[index[i]][j]
+                 root.setEntry(i, j, b[index[i]][j]);
             }
         }
-
+        this.root = root; // Store the computed root matrix in the instance field
     }
\ No newline at end of file
