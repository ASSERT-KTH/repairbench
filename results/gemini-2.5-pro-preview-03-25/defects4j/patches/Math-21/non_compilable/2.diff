diff --git a/tmp/a97ffc7c-4af2-4b7e-8cbb-6a6f2aef90f2_buggy.java b/tmp/52e3de6b-1cd2-43ea-9d6a-86b87b1c1e06_fixed.java
index 6708762..a71cf07 100644
--- a/tmp/a97ffc7c-4af2-4b7e-8cbb-6a6f2aef90f2_buggy.java
+++ b/tmp/52e3de6b-1cd2-43ea-9d6a-86b87b1c1e06_fixed.java
@@ -1,99 +1,117 @@
+import org.apache.commons.math3.exception.DimensionMismatchException; // Added for completeness, if checks were added
+import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.linear.MatrixUtils;
+import org.apache.commons.math3.util.FastMath;
+
+// NOTE: The surrounding class structure is assumed to provide fields:
+// private RealMatrix root;
+// private int rank;
+
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
+        // Note: This implementation modifies the input matrix data array in place!
+        // If the input matrix object should not be modified, a copy should be made first.
         final double[][] c = matrix.getData();
-        final double[][] b = new double[order][order];
+        final double[][] b = new double[order][order]; // Stores the permuted L factor elements
 
-        int[] swap  = new int[order];
-        int[] index = new int[order];
+        int[] index = new int[order]; // index[k] is the original index corresponding to current position k
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
-        int r = 0;
+        int r = 0; // Number of steps completed (also the current row/column index)
+        int determinedRank = order; // Assume full rank initially
         for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // Find maximal diagonal element in the remaining submatrix (indices r to order-1)
+            int maxIdx = r; // Position of the max diagonal element in the current permuted indices
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
+                int ii  = index[i];         // Original index of element at position i
+                int isi = index[maxIdx]; // Original index of current max element (at position maxIdx)
                 if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                    maxIdx = i; // Update the position of the maximal element
                 }
             }
 
-
-            // swap elements
-            if (swap[r] != r) {
+            // Swap elements in the index array to bring the pivot element to position r
+            if (maxIdx != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                index[r] = index[maxIdx];
+                index[maxIdx] = tmp;
             }
 
-            // check diagonal element
-            int ir = index[r];
-            if (c[ir][ir] < small) {
+            // Pivot element's original index is now index[r]
+            int ir = index[r]; // Original index of the pivot element for step r
+            final double pivot = c[ir][ir]; // The pivot value
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
+            // Check for rank deficiency or non-PSD
+            if (pivot < small) {
+                // Check remaining diagonals for negativity
                 for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                    // Use original index for reporting potential issues
+                    final int originalIndex = index[i];
+                    if (c[originalIndex][originalIndex] < -small) {
+                        throw new NonPositiveDefiniteMatrixException(c[originalIndex][originalIndex], originalIndex, small);
                     }
                 }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
-
+                // Rank is number of steps completed successfully
+                determinedRank = r;
+                loop = false; // Terminate the loop
             } else {
+                // Proceed with Cholesky step r
+                final double sqrtPivot = FastMath.sqrt(pivot);
+                b[r][r] = sqrtPivot;
+                final double invSqrtPivot = 1.0 / sqrtPivot;
 
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+                // Compute column r of L (permuted) and update Schur complement
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
-                    c[ii][ii] -= e * e;
+                    final int ii = index[i]; // Original row index
+                    final double e = invSqrtPivot * c[ii][ir]; // L(i, r) in permuted sense
+                    b[i][r] = e; // Store element L_perm(i, r)
+
+                    // Update Schur complement: A = A - L_col * L_col^T
+                    c[ii][ii] -= e * e; // Diagonal update: A_perm(i, i) -= L_perm(i, r)^2
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                        final int ij = index[j]; // Original column index
+                        // Update off-diagonal element: A_perm(i, j) -= L_perm(i, r) * L_perm(j, r)
+                        final double f = c[ii][ij] - e * b[j][r]; // b[j][r] holds L_perm(j, r)
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Exploit symmetry
                     }
                 }
 
-                // prepare next iteration
-                loop = ++r < order;
+                // Prepare for next iteration
+                loop = ++r < order; // Increment step counter and check if we are done
+                if (!loop) {
+                    // If loop terminates here, r == order, implies full rank processing completed.
+                    // determinedRank remains 'order' as initialized.
+                }
             }
         }
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+        // Build the final root matrix R such that A = R * R^T
+        // R = P^T * L_perm, where L_perm is stored in b (lower triangular part)
+        // R has dimensions order x determinedRank
+        this.rank = determinedRank;
+        this.root = MatrixUtils.createRealMatrix(order, this.rank);
+        for (int i = 0; i < order; ++i) { // Iterate over rows of L_perm (index `i` corresponds to permuted row)
+            for (int j = 0; j < this.rank; ++j) { // Iterate over columns of L_perm (up to determined rank)
+                // Assign L_perm(i, j) (which is b[i][j]) to the correct place in the root matrix.
+                // root[k, j] = L_perm[inv_perm[k], j]. Let k = index[i], then inv_perm[k] = i.
+                // So, root[index[i], j] = L_perm[i, j] = b[i][j].
+                this.root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
