diff --git a/tmp/f07736fd-1613-4a57-bb04-84b810c60789_buggy.java b/tmp/183324d0-1e0a-40e5-8c90-d633a7c2181f_fixed.java
index 6708762..c6655c4 100644
--- a/tmp/f07736fd-1613-4a57-bb04-84b810c60789_buggy.java
+++ b/tmp/183324d0-1e0a-40e5-8c90-d633a7c2181f_fixed.java
@@ -1,99 +1,123 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
-        final double[][] b = new double[order][order];
+        final double[][] c = matrix.getData(); // Get a copy to modify
+        final double[][] b = new double[order][order]; // Stores intermediate decomposition factors
 
-        int[] swap  = new int[order];
-        int[] index = new int[order];
+        int[] swap  = new int[order]; // Stores index of max diagonal element found at step r
+        int[] index = new int[order]; // Stores permutation P: index[k] is original index at position k
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
-        int r = 0;
+        int r = 0; // Current rank / step
         for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // find maximal diagonal element in the remaining submatrix c[r..order-1, r..order-1]
+            swap[r] = r; // Assume max is at current position r
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                int ii  = index[i]; // Original index corresponding to row/col i in permuted matrix
+                // Corrected: Compare c[index[i]][index[i]] with current max c[index[swap[r]]][index[swap[r]]]
+                int isr = index[swap[r]]; // Original index corresponding to current max diagonal element found so far
+                if (c[ii][ii] > c[isr][isr]) {
+                    swap[r] = i; // Update the index 'i' (in the permuted sense) of the max element
                 }
             }
 
 
-            // swap elements
+            // swap elements in index array to bring max diagonal to position r
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
-            // check diagonal element
-            int ir = index[r];
+            // check diagonal element at position r (after swap)
+            int ir = index[r]; // Original index of the pivot element at position r
+
+            // Check if matrix is 0x0, handled by loop condition r < order
+            // Check if diagonal element is too small
             if (c[ir][ir] < small) {
+                // Pivot element is too small
 
                 if (r == 0) {
+                     // Cannot start decomposition if the largest diagonal element is smaller than threshold
                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                 }
 
-                // check remaining diagonal elements
+                // Check remaining diagonal elements for negativity (sign of non-PSD matrix)
                 for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                    // Use the index from the permutation array to check the correct diagonal element
+                    final int ii = index[i];
+                    if (c[ii][ii] < -small) {
+                        // Found a significantly negative diagonal element
+                        // Corrected: Report the original matrix index index[i] (which is ii) in the exception
+                        throw new NonPositiveDefiniteMatrixException(c[ii][ii], ii, small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // All remaining diagonal elements are ~0 or positive but small.
+                // Found the rank, which is the current value of r.
+                // Corrected: Do not increment r.
+                loop = false; // Stop the decomposition.
 
             } else {
+                // Pivot element is large enough, perform Cholesky step r
 
-                // transform the matrix
+                // Calculate B[r,r] where P^T A P = B B^T
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+                final double inverse  = 1.0 / sqrt;
+
+                // Calculate column r of B (B[i,r] for i > r)
                 for (int i = r + 1; i < order; ++i) {
                     final int ii = index[i];
+                    // B[i,r] = C[ii, ir] / B[r,r], where C is the current Schur complement stored in c
                     final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
+                    b[i][r] = e; // Store B[i,r] in the temporary matrix b
+
+                    // Update Schur complement C = C - B[,r] * B[,r]^T (in place in c)
+                    // Update diagonal C[ii,ii] -= B[i,r]^2
                     c[ii][ii] -= e * e;
+                    // Update off-diagonal C[ii,ij] -= B[i,r] * B[j,r] for j from r+1 to i-1
                     for (int j = r + 1; j < i; ++j) {
                         final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                        final double bjr = b[j][r]; // B[j,r] was computed and stored in b[j][r]
+                        final double f = c[ii][ij] - e * bjr;
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry C[ij,ii] = C[ii,ij]
                     }
                 }
 
-                // prepare next iteration
+                // Increment rank and check if we should continue
                 loop = ++r < order;
             }
         }
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
+        // build the root matrix R such that R R^T = A
+        // Assume fields 'rank' and 'root' are defined in the class
+        this.rank = r;
+        this.root = MatrixUtils.createRealMatrix(order, r);
         for (int i = 0; i < order; ++i) {
             for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+                // Set R[index[i], j] = B[i,j] (where B[i,j] is stored in b[i][j])
+                // This permutes the rows of B to construct R = P*B
+                this.root.setEntry(index[i], j, b[i][j]);
             }
         }
 
     }
+
+    // Assuming the class has these fields, needed by the constructor and other methods:
+    private int rank;
+    private RealMatrix root;
\ No newline at end of file
