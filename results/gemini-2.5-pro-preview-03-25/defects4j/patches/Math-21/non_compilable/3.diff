diff --git a/tmp/62e26cd9-d49b-4067-b3d7-dac4a39a4587_buggy.java b/tmp/a1833b69-dd89-4b5f-be2e-913a05fa9e78_fixed.java
index 6708762..7c49ef8 100644
--- a/tmp/62e26cd9-d49b-4067-b3d7-dac4a39a4587_buggy.java
+++ b/tmp/a1833b69-dd89-4b5f-be2e-913a05fa9e78_fixed.java
@@ -1,99 +1,150 @@
+import org.apache.commons.math3.exception.DimensionMismatchException;
+import org.apache.commons.math3.linear.MatrixUtils;
+import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.FastMath;
+
+// Assume the following fields are defined in the class RectangularCholeskyDecomposition:
+// /** Permuted Cholesky root of the symmetric positive semidefinite matrix. */
+// private RealMatrix root;
+// /** Rank of the symmetric positive semidefinite matrix. */
+// private int rank;
+
+
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
+     * @param small Diagonal elements threshold under which columns are
      * considered to be dependent on previous ones and are discarded.
-     * @exception NonPositiveDefiniteMatrixException if the matrix is not
+     * @throws NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
+     * @throws DimensionMismatchException if the matrix is not square.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
-        throws NonPositiveDefiniteMatrixException {
+        throws NonPositiveDefiniteMatrixException, DimensionMismatchException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
+        if (!matrix.isSquare()) {
+            throw new DimensionMismatchException(matrix.getColumnDimension(), order);
+        }
+
+        // Make a copy to avoid modifying the input matrix
+        final double[][] c = matrix.copy().getData();
+        // b stores the permuted lower triangular factor L
         final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
-            index[i] = i;
+            index[i] = i; // index[k] is the original index of the k-th row/column after permutations
         }
 
-        int r = 0;
-        for (boolean loop = true; loop;) {
+        int r = 0; // Current rank / column index being processed
+        while (r < order) {
 
-            // find maximal diagonal element
-            swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+            // --- Pivoting ---
+            // Find row/column 'pivot' in the range [r, order-1] that maximizes the diagonal element c[index[k]][index[k]]
+            int pivot = r;
+            int ipPivot = index[pivot]; // Original index of the diagonal element for the current best pivot
+            double maxDiagonal = c[ipPivot][ipPivot];
+
+            for (int k = r + 1; k < order; ++k) {
+                int ik = index[k]; // Original index for row/column k
+                // Use the diagonal element of the *updated* matrix c for pivot selection
+                if (c[ik][ik] > maxDiagonal) {
+                    maxDiagonal = c[ik][ik];
+                    pivot = k; // Update the index of the best pivot found so far (in the permuted sense)
                 }
             }
 
-
-            // swap elements
-            if (swap[r] != r) {
+            // Swap row/column r with the pivot row/column if they are different, by swapping indices
+            if (pivot != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                index[r] = index[pivot];
+                index[pivot] = tmp;
             }
 
-            // check diagonal element
-            int ir = index[r];
+            // --- Check Diagonal Element ---
+            int ir = index[r]; // Original index of the r-th pivot element (after swapping)
+            // Check if the pivot element is smaller than the threshold 'small'
+            // A small or negative pivot indicates rank deficiency or non-PSD matrix.
             if (c[ir][ir] < small) {
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
+                // If the pivot is small, check subsequent diagonal elements for significant negativity.
                 for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                    int ii = index[i]; // Original index for row/column i
+                    if (c[ii][ii] < -small) {
+                        // Found a significantly negative diagonal element, implying the matrix is not PSD.
+                        throw new NonPositiveDefiniteMatrixException(c[ii][ii], ii, small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // All remaining diagonal elements c[index[i]][index[i]] for i >= r are approximately non-negative (>= -small).
+                // The matrix is considered numerically singular at this point.
+                // The rank is determined by the number of columns processed so far, which is 'r'.
+                break; // Stop the decomposition process. The rank is r.
+            }
+
+            // --- Cholesky Update Step ---
+            // The diagonal element c[ir][ir] is sufficiently positive.
 
-            } else {
+            // Calculate the diagonal element of L (permuted): L(r,r)
+            final double sqrt_c_ir_ir = FastMath.sqrt(c[ir][ir]);
+            b[r][r] = sqrt_c_ir_ir; // Store L(r,r) in b[r][r] (using permuted index r)
+            final double inverse = 1.0 / sqrt_c_ir_ir;
 
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+            // Calculate the elements in the r-th column of L below the diagonal: L(i,r) for i > r
             for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
+                final int ii = index[i]; // Original index for row i
+                // L(i,r) = C(i,r) / L(r,r), where C(i,r) is the element from the updated matrix 'c'.
+                // c[ii][ir] corresponds to C(original_i, original_r) in the current matrix state.
                 final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
-                    c[ii][ii] -= e * e;
+                b[i][r] = e; // Store L(i,r) in b[i][r] (using permuted index i for the row)
+            }
+
+            // Update the trailing submatrix C (Schur complement) using the computed column L(:,r)
+            // C(i,j) = C(i,j) - L(i,r) * L(j,r) for i,j > r
+            // Use original indices ii = index[i], ij = index[j] for accessing/updating 'c'.
+            // Use permuted indices i, j for accessing L values from 'b'.
+            for (int i = r + 1; i < order; ++i) {
+                final int ii = index[i];       // Original index for row i
+                final double bi_r = b[i][r];   // L(permuted_i, r)
+
+                // Update the diagonal element C(original_i, original_i)
+                c[ii][ii] -= bi_r * bi_r;
+
+                // Update the off-diagonal elements C(original_i, original_j) for j in [r+1, i-1]
                 for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                    final int ij = index[j];   // Original index for row j
+                    final double bj_r = b[j][r]; // L(permuted_j, r)
+                    // Update C(original_i, original_j)
+                    final double f = c[ii][ij] - bi_r * bj_r;
                     c[ii][ij] = f;
+                    // Maintain symmetry: C(original_j, original_i) = C(original_i, original_j)
                     c[ij][ii] = f;
                 }
             }
 
-                // prepare next iteration
-                loop = ++r < order;
-            }
-        }
+            // --- Prepare for the Next Iteration ---
+            r++; // Increment the rank and move processing to the next column
+        } // End while loop
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+        // --- Build the Root Matrix ---
+        // The rank of the decomposition is the final value of 'r'.
+        this.rank = r;
+        // The root matrix R (size order x rank) satisfies A = R * R^T.
+        // R is obtained by applying the permutation P to L: R = P * L.
+        // L is conceptually the upper-left rank x rank block of b.
+        this.root = MatrixUtils.createRealMatrix(order, rank);
+
+        // Copy the relevant elements from b (which stores L using permuted indices)
+        // to the root matrix, applying the permutation.
+        // root(original_row, j) = L(permuted_row, j) where original_row = index[permuted_row]
+        for (int i = 0; i < order; ++i) {       // Iterate through permuted rows i = 0..order-1
+            for (int j = 0; j < rank; ++j) {     // Iterate through columns j = 0..rank-1
+                // L(permuted_row=i, col=j) is stored in b[i][j]
+                // The corresponding original row is index[i]
+                this.root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
