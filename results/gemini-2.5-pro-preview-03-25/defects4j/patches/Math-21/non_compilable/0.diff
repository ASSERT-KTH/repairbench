diff --git a/tmp/1812267c-ac8a-4cb1-ac76-a18ec17f3538_buggy.java b/tmp/7ab13562-a67e-442d-acb0-b22318690362_fixed.java
index 6708762..2faef36 100644
--- a/tmp/1812267c-ac8a-4cb1-ac76-a18ec17f3538_buggy.java
+++ b/tmp/7ab13562-a67e-442d-acb0-b22318690362_fixed.java
@@ -1,99 +1,136 @@
+import org.apache.commons.math3.exception.DimensionMismatchException;
+import org.apache.commons.math3.linear.MatrixUtils;
+import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.FastMath;
+
+// Assume class RectangularCholeskyDecomposition exists with fields:
+// private RealMatrix root;
+// private int rank;
+
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
+     * @param small Diagonal elements threshold under which columns are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
+     * @exception DimensionMismatchException if the matrix is not square.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
-        throws NonPositiveDefiniteMatrixException {
+        throws NonPositiveDefiniteMatrixException, DimensionMismatchException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
-        final double[][] b = new double[order][order];
+        if (matrix.getColumnDimension() != order) {
+             // Add dimension check for robustness.
+             throw new DimensionMismatchException(matrix.getColumnDimension(), order);
+        }
+        // Work on a copy of the matrix data to avoid modifying the input matrix
+        final double[][] c = matrix.copy().getData();
+        final double[][] b = new double[order][order]; // Stores intermediate L factors
 
-        int[] swap  = new int[order];
-        int[] index = new int[order];
+        int[] swap  = new int[order]; // Stores index i (r..order-1) of pivot chosen at step r
+        int[] index = new int[order]; // index[k] stores the original index of the row/column currently at position k
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
-        int r = 0;
+        int r = 0; // Number of successful steps / rank
         for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // Find maximal diagonal element in the remaining submatrix c(r..order-1, r..order-1)
+            int maxDiagCurrentIndex = r; // Index in r..order-1 range corresponding to max diagonal element
+            // Use index[r] to get the original index for comparison start
+            double maxDiag = c[index[r]][index[r]];
+
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                int ii = index[i]; // Original index of the element at position i
+                if (c[ii][ii] > maxDiag) {
+                    maxDiag = c[ii][ii];
+                    maxDiagCurrentIndex = i; // Update the index (in r..order-1 range) pointing to the max element
                 }
             }
+            // swap[r] = maxDiagCurrentIndex; // Storing this is not essential
 
-
-            // swap elements
-            if (swap[r] != r) {
+            // Swap elements in index array if max isn't already at r
+            if (maxDiagCurrentIndex != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                index[r] = index[maxDiagCurrentIndex];
+                index[maxDiagCurrentIndex] = tmp;
             }
 
-            // check diagonal element
+            // Get the original index of the pivot row/column (now at position r)
             int ir = index[r];
-            if (c[ir][ir] < small) {
+            double pivot = c[ir][ir];
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
+            // Check the pivot diagonal element
+            if (pivot < small) {
+                // Pivot is too small (close to zero or negative).
 
-                // check remaining diagonal elements
+                // Check all remaining diagonal elements (including the pivot) for significant negativity.
+                // A PSD matrix cannot have negative diagonal elements.
                 for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                    int originalIndex = index[i];
+                    if (c[originalIndex][originalIndex] < -small) {
+                        // Found a significantly negative diagonal element, matrix not PSD.
+                        throw new NonPositiveDefiniteMatrixException(c[originalIndex][originalIndex], originalIndex, small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // If no significantly negative elements found, assume rank deficiency.
+                // The pivot is non-negative (>= -small) but smaller than 'small'.
+                // The rank is the number of steps completed successfully, which is 'r'.
+                loop = false; // Exit loop
+                // No ++r here, rank is determined after the loop by the value of r.
 
             } else {
+                // Pivot is large enough (>= small) and non-negative, perform Cholesky step
 
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+                // Compute the r-th column of L (corresponding to the permuted matrix)
+                final double sqrt = FastMath.sqrt(pivot);
+                b[r][r] = sqrt; // L_rr
+                final double inverse = 1.0 / sqrt;
+
+                // Compute elements L_ir for i > r
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
+                    final int ii = index[i]; // Original index for row i
+                    // c[ii][ir] is the element A'_{ii, ir} where A' is permuted and partially updated A
                     final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
+                    b[i][r] = e; // Store L_ir (in the permuted sense)
+                }
+
+                // Update the trailing submatrix (Schur complement) c = c - L_(:,r) * L_(:,r)^T
+                // This must be done AFTER computing all elements of column r of L (b[i][r])
+                for (int i = r + 1; i < order; ++i) {
+                    final int ii = index[i]; // Original index for row i
+                    final double e = b[i][r]; // L_ir
+                    // Update diagonal element: c_ii = c_ii - L_ir^2
                     c[ii][ii] -= e * e;
-                    for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                    // Update off-diagonal elements: c_ij = c_ij - L_ir * L_jr
+                    for (int j = r + 1; j < i; ++j) { // Lower triangle (j < i)
+                        final int ij = index[j]; // Original index for row j
+                        final double f = c[ii][ij] - e * b[j][r]; // b[j][r] is L_jr
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry
                     }
                 }
 
-                // prepare next iteration
+                // Prepare for the next iteration
+                // Increment r only if the step was successful
                 loop = ++r < order;
             }
-        }
+        } // End of main loop
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+        // Build the root matrix R = P^T L
+        this.rank = r; // Rank is the final value of r
+        this.root = MatrixUtils.createRealMatrix(order, this.rank);
+        // Fill the root matrix based on the computed L factors (stored in b) and the permutation P (represented by index)
+        // Root_{k,j} = L_{p_k, j} where index[p_k] = k.
+        // The assignment root.setEntry(index[i], j, b[i][j]) achieves this.
+        for (int i = 0; i < order; ++i) { // Loop through rows 0..order-1 (indices used in b)
+            for (int j = 0; j < this.rank; ++j) { // Loop through columns 0..rank-1
+                this.root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
