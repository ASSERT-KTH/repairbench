diff --git a/tmp/1f93a0e6-b21c-4987-a360-af35933204f6_buggy.java b/tmp/e030c35d-d7c1-46b9-8e65-a71b39cd2394_fixed.java
index 6708762..b759481 100644
--- a/tmp/1f93a0e6-b21c-4987-a360-af35933204f6_buggy.java
+++ b/tmp/e030c35d-d7c1-46b9-8e65-a71b39cd2394_fixed.java
@@ -1,99 +1,156 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
+     * @param small Diagonal elements threshold under which columns are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
+     * @throws NonSquareMatrixException if the matrix is not square.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
-        throws NonPositiveDefiniteMatrixException {
+        throws NonPositiveDefiniteMatrixException, NonSquareMatrixException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
+        if (order != matrix.getColumnDimension()) {
+             throw new NonSquareMatrixException(order, matrix.getColumnDimension());
+        }
+
+        // Get a modifiable copy of the matrix data, as the algorithm updates it in place.
+        // This assumes matrix.copy() returns a matrix type (like Array2DRowRealMatrix)
+        // whose getData() provides direct access to the internal array.
+        final double[][] c = matrix.copy().getData();
+        // Stores columns of the Cholesky factor B of the permuted matrix P A P^T
         final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
+        // 'index' array tracks permutations P such that P A P^T = B B^T
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
-        int r = 0;
+        int r = 0; // number of pivots processed (current rank)
         for (boolean loop = true; loop; ) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // Find maximal diagonal element in the remaining submatrix c[r..order-1][r..order-1]
+            // The indices used (ii, ipivot) are the actual indices in the matrix 'c'.
+            // The permutation is applied via the 'index' array.
+            int pivot = r; // 'pivot' is the index within the loop range [r, order-1] corresponding to max diagonal
+            int ipivot = index[pivot]; // Actual index in 'c' corresponding to index 'r' before searching
+            double maxDiag = c[ipivot][ipivot];
+
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                int ii = index[i]; // Actual index in 'c' corresponding to index 'i'
+                double diag = c[ii][ii];
+                if (diag > maxDiag) {
+                    maxDiag = diag;
+                    pivot = i; // Update 'pivot' to 'i' if a larger diagonal is found
                 }
             }
 
+            // Swap elements in 'index' array and corresponding rows in 'b' matrix if necessary
+            if (pivot != r) {
+                // Swap indices in the permutation array 'index'
+                int tmpIdx = index[r];
+                index[r] = index[pivot];
+                index[pivot] = tmpIdx;
 
-            // swap elements
-            if (swap[r] != r) {
-                int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                // Swap the corresponding already computed rows in 'b' (columns 0 to r-1)
+                // This ensures b[row_idx][col_idx] corresponds correctly to B_{row_idx, col_idx}
+                // relative to the *current* permutation P represented by 'index'.
+                for (int j = 0; j < r; ++j) {
+                    double tmpB = b[r][j];
+                    b[r][j] = b[pivot][j];
+                    b[pivot][j] = tmpB;
+                }
             }
 
-            // check diagonal element
+            // The actual index in 'c' for the pivot element (row/column r after potential swap)
             int ir = index[r];
-            if (c[ir][ir] < small) {
+            double diag_ir = c[ir][ir]; // Pivot diagonal element value
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
+            // Check diagonal element: is it positive enough?
+            if (diag_ir < small) {
+                // Pivot is too small (close to zero or negative).
+
+                // Check if the pivot is significantly negative -> not positive semidefinite
+                if (diag_ir < -small) {
+                     // Use index[r] (== ir) which is the original index causing the issue
+                    throw new NonPositiveDefiniteMatrixException(diag_ir, ir, small);
                 }
 
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                // Pivot is close to zero (>= -small and < small).
+                // Check the remaining diagonal elements for significant negativity.
+                for (int i = r + 1; i < order; ++i) {
+                    final int ii = index[i]; // Actual index in 'c'
+                    if (c[ii][ii] < -small) {
+                        // Found a subsequent significantly negative diagonal element.
+                        // Use index[i] (== ii) which is the original index causing the issue
+                        throw new NonPositiveDefiniteMatrixException(c[ii][ii], ii, small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // All remaining diagonal elements are non-negative or negligibly negative.
+                // The matrix is positive semidefinite but rank-deficient.
+                // Rank is 'r', the number of pivots processed so far.
+                // Stop the decomposition.
+                loop = false; // Exit the main loop
 
             } else {
+                // Pivot is sufficiently large and positive. Process it.
 
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+                // Compute the r-th column of the Cholesky factor B
+                final double sqrt_diag_ir = FastMath.sqrt(diag_ir);
+                b[r][r] = sqrt_diag_ir; // B_{r,r}
+                final double inverse = 1.0 / sqrt_diag_ir;
+
+                // Compute column r of B below the diagonal: B_{i,r} for i > r
+                // These are stored in b[i][r]
+                for (int i = r + 1; i < order; ++i) {
+                    final int ii = index[i]; // Actual index for row i
+                    // Use c[ii][ir], element from (permuted) matrix C
+                    final double c_ii_ir = c[ii][ir];
+                    final double B_ir = inverse * c_ii_ir; // B_{i,r} = C_{ii,ir} / B_{r,r}
+                    b[i][r] = B_ir;
+                }
+
+                // Update the remaining submatrix C_22 = C_22 - B_21 * B_21^T
+                // where B_21 is the column vector [B_{r+1,r}, ..., B_{order-1,r}]^T
+                // This updates the matrix 'c' in place for the next iteration's pivot search.
+                // The element C_{ii,ij} is updated by subtracting B_{i,r} * B_{j,r}
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
-                    c[ii][ii] -= e * e;
+                    final int ii = index[i]; // Actual index for row i
+                    // Update diagonal element first C_{ii,ii} = C_{ii,ii} - B_{i,r}^2
+                    // Need to use b[i][r] which was just computed
+                    c[ii][ii] -= b[i][r] * b[i][r];
+                    // Update off-diagonal elements C_{ii,ij} = C_{ii,ij} - B_{i,r} * B_{j,r} for j < i
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
-                        c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        final int ij = index[j]; // Actual index for row j
+                        // Need b[i][r] and b[j][r] which were computed above
+                        final double update = b[i][r] * b[j][r];
+                        c[ii][ij] -= update;
+                        // Explicitly maintain symmetry
+                        c[ij][ii] = c[ii][ij];
                     }
                 }
 
-                // prepare next iteration
+                // Prepare for the next iteration: increment rank and check if loop should continue
                 loop = ++r < order;
             }
-        }
+        } // End of main loop
 
-        // build the root matrix
+        // Final rank is 'r', the number of successful pivots.
         rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
+
+        // Build the root matrix R such that A = R R^T.
+        // We have P A P^T = B B^T, where B is stored in 'b'.
+        // We need R = P^T B.
+        // The code correctly implements this via: root_{index[i], j} = b[i][j]
+        root = MatrixUtils.createRealMatrix(order, rank);
         for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+            for (int j = 0; j < rank; ++j) {
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
 
     }
\ No newline at end of file
