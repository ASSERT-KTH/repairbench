diff --git a/tmp/af483095-2125-45f6-8abb-3bdc0916430a_buggy.java b/tmp/32a0bb24-396f-4fad-98db-ca994a415741_fixed.java
index 6708762..0bae10d 100644
--- a/tmp/af483095-2125-45f6-8abb-3bdc0916430a_buggy.java
+++ b/tmp/32a0bb24-396f-4fad-98db-ca994a415741_fixed.java
@@ -1,99 +1,102 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
+        final double[][] c = matrix.getData(); // Note: This might modify the input matrix data if getData() returns a reference.
         final double[][] b = new double[order][order];
 
         int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
             swap[r] = r;
             for (int i = r + 1; i < order; ++i) {
                 int ii  = index[i];
-                int isi = index[swap[i]];
+                int isi = index[swap[r]];
                 if (c[ii][ii] > c[isi][isi]) {
                     swap[r] = i;
                 }
             }
 
 
             // swap elements
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
             // check diagonal element
             int ir = index[r];
             if (c[ir][ir] < small) {
+                // Found a diagonal element below the threshold.
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
+                // Check remaining diagonal elements for significant negative values,
+                // indicating the matrix is not positive semidefinite.
                 for (int i = r; i < order; ++i) {
                     if (c[index[i]][index[i]] < -small) {
                         // there is at least one sufficiently negative diagonal element,
                         // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // All remaining diagonal elements are close to zero or small positive.
+                // Consider the rank to be 'r' (the number of steps completed successfully).
+                // Stop the decomposition.
+                loop = false; // Exit the loop.
+                // DO NOT increment r here. The rank is the number of columns successfully processed.
 
             } else {
+                // Diagonal element is large enough, perform Cholesky step.
 
                 // transform the matrix
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+                final double inverse  = 1.0 / sqrt; // Use 1.0 to ensure double division
                 for (int i = r + 1; i < order; ++i) {
                     final int ii = index[i];
                     final double e = inverse * c[ii][ir];
                     b[i][r] = e;
+                    // Update Schur complement in matrix c
                     c[ii][ii] -= e * e;
                     for (int j = r + 1; j < i; ++j) {
                         final int ij = index[j];
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry
                     }
                 }
 
                 // prepare next iteration
+                // Increment rank and check if loop should continue
                 loop = ++r < order;
             }
-        }
+        } // end main loop
 
         // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
+        rank = r; // The final rank is the value of r reached.
+        root = MatrixUtils.createRealMatrix(order, rank);
         for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+            for (int j = 0; j < rank; ++j) {
+                // Permute rows of b back to original order for root matrix L
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
 
     }
\ No newline at end of file
