diff --git a/tmp/049c1e3d-2f17-4b08-961d-6135b525f112_buggy.java b/tmp/27007d23-e753-4767-8abe-aa2bb47cfaf4_fixed.java
index 6708762..2d59ddc 100644
--- a/tmp/049c1e3d-2f17-4b08-961d-6135b525f112_buggy.java
+++ b/tmp/27007d23-e753-4767-8abe-aa2bb47cfaf4_fixed.java
@@ -1,99 +1,138 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
+        // Use copy() to prevent modifying the input matrix data if getData() returns a reference
+        final double[][] c = matrix.copy().getData();
         final double[][] b = new double[order][order];
 
         int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
-            swap[r] = r;
+            swap[r] = r; // Assume current pivot is maximal
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
+                int ii  = index[i]; // Original index of row/col i in current permutation
+                int isi = index[swap[r]]; // Original index of current max row/col candidate
                 if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                    swap[r] = i; // Update the index (in the r..order-1 range) of the max diagonal element
                 }
             }
 
 
-            // swap elements
+            // swap elements: bring the maximal diagonal element row/col to position r
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
             // check diagonal element
-            int ir = index[r];
+            int ir = index[r]; // Original index of the pivot element now at position r
             if (c[ir][ir] < small) {
+                // The maximal diagonal element is too small
 
                 if (r == 0) {
+                    // The rank is 0, and the largest diagonal element is smaller than threshold.
+                    // The matrix might be negative definite or semi-definite with small diagonal elements.
+                    // Check for negative elements first. Find the most negative diagonal element.
+                    double maxValue = -Double.MAX_VALUE;
+                    int maxIndex = -1;
+                    for (int i = 0; i < order; ++i) {
+                         // Check original diagonal elements stored in c initially, but c is modified.
+                         // It's better to check the current diagonal elements c[index[i]][index[i]]
+                         final double d = c[index[i]][index[i]];
+                         if (d < -small) { // Check if significantly negative
+                             if (d < maxValue) {
+                                 maxValue = d;
+                                 maxIndex = index[i]; // Store original index
+                             }
+                         }
+                    }
+                    if (maxIndex != -1) {
+                         // Found a significantly negative diagonal element
+                         throw new NonPositiveDefiniteMatrixException(maxValue, maxIndex, small);
+                    } else {
+                         // No element is significantly negative, but the pivot is too small.
+                         // Report the pivot element that's below threshold.
                          throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                     }
+                }
 
-                // check remaining diagonal elements
+                // If r > 0, we've already processed r pivots.
+                // Check remaining diagonal elements for negative values.
                 for (int i = r; i < order; ++i) {
                     if (c[index[i]][index[i]] < -small) {
                         // there is at least one sufficiently negative diagonal element,
                         // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small); // Report original index index[i]
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // all remaining diagonal elements are non-negative or slightly negative but close to zero (>= -small),
+                // and the largest one (the pivot c[ir][ir]) is smaller than 'small'.
+                // We consider we have found the rank of the symmetric positive semidefinite matrix.
+                // The rank is r, stop the decomposition.
+                loop = false; // FIX: Removed ++r;
 
             } else {
+                // The pivot element is large enough, process it.
 
                 // transform the matrix
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
+                b[r][r] = sqrt; // Store diagonal element L(r,r)
                 final double inverse  = 1 / sqrt;
+
+                // Compute column r of L and update the trailing submatrix C
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
+                    final int ii = index[i]; // Original index for row i (in pivoted order)
+                    // Calculate L(i, r) = C(i, r) / L(r, r) using C(ii, ir)
                     final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
+                    b[i][r] = e; // Store L(i, r) in row i (pivoted), column r
+                    // Update diagonal C(i, i) = C(i, i) - L(i, r)^2
                     c[ii][ii] -= e * e;
+                    // Update off-diagonal C(i, j) = C(i, j) - L(i, r) * L(j, r) for j from r+1 to i-1
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
+                        final int ij = index[j]; // Original index for row j (in pivoted order)
+                        // b[j][r] holds L(j, r) computed in previous iterations of the outer loop (or this one if j < i)
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry of C
                     }
                 }
 
                 // prepare next iteration
-                loop = ++r < order;
+                loop = ++r < order; // Increment rank and check if done
             }
         }
 
-        // build the root matrix
-        rank = r;
+        // build the root matrix B such that B*B^T = A
+        // The decomposition computed L such that P*A*P^T = L*L^T
+        // We need B = P^T*L
+        rank = r; // The final rank
         root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+        // L is stored in the first r columns of b (in pivoted row order)
+        // B(orig_row, j) = (P^T*L)(orig_row, j) = L(pivoted_row, j) where orig_row = index[pivoted_row]
+        // So, B(index[i], j) = L(i, j) = b[i][j]
+        for (int i = 0; i < order; ++i) { // i iterates through rows of L (pivoted order)
+            for (int j = 0; j < r; ++j) { // j iterates through columns of L (rank)
+                root.setEntry(index[i], j, b[i][j]); // Set root[original_row, j] = L[pivoted_row, j]
             }
         }
 
     }
\ No newline at end of file
