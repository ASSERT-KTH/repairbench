diff --git a/tmp/1384a938-b816-4c60-99ce-99015cbbb217_buggy.java b/tmp/94e6a07e-2c69-45cd-a416-fa1dac06cc5f_fixed.java
index 6708762..cffe7b6 100644
--- a/tmp/1384a938-b816-4c60-99ce-99015cbbb217_buggy.java
+++ b/tmp/94e6a07e-2c69-45cd-a416-fa1dac06cc5f_fixed.java
@@ -1,99 +1,136 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
+        // The algorithm modifies the input matrix data in place via c.
+        // If the original matrix should be preserved, a copy must be made beforehand.
         final double[][] c = matrix.getData();
+        // b stores the factor L' of the permuted matrix P^T*matrix*P = L'*L'^T
         final double[][] b = new double[order][order];
 
+        // index[] tracks the permutation P: index[k] = original index of row/column k
+        // swap[] is auxiliary for pivoting: swap[r] stores the index i >= r of the max diagonal element found at step r
         int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
-        int r = 0;
+        int r = 0; // Current rank / column index being processed
         for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // Find the index 'i' (in the range [r, order-1]) which corresponds to the
+            // maximal diagonal element c[index[i]][index[i]] among the remaining rows/columns.
+            // Store this index 'i' in swap[r].
+            swap[r] = r; // Assume max is at current position r initially
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                int ii = index[i]; // Original index corresponding to row/col i (in the current permuted view)
+                int maxIndexCurrent = index[swap[r]]; // Original index corresponding to the current max pivot candidate found so far
+                // Compare diagonal elements using their original indices
+                if (c[ii][ii] > c[maxIndexCurrent][maxIndexCurrent]) {
+                    swap[r] = i; // Update the position index 'i' that holds the new maximum diagonal value
                 }
             }
 
 
-            // swap elements
+            // Swap elements in the index array if the maximal element was not already at position r.
+            // This brings the row/column with the maximal diagonal element to position r.
             if (swap[r] != r) {
-                int tmp = index[r];
+                final int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
-            // check diagonal element
-            int ir = index[r];
+            // Check the diagonal element (pivot) at the current position r.
+            int ir = index[r]; // The original index of the row/column now at position r after pivoting.
             if (c[ir][ir] < small) {
+                // Pivot element c[ir][ir] (which is the largest among remaining diagonals) is too small.
+                // This indicates rank deficiency or potential non-positive semidefiniteness.
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
+                // Before concluding rank=r, check remaining diagonal elements c[index[i]][index[i]] for i >= r
+                // for significantly negative values, which would mean the matrix is not PSD.
                 for (int i = r; i < order; ++i) {
                     if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                        // Found a significantly negative diagonal element -> Matrix is not positive semidefinite.
+                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // If no significantly negative diagonal elements were found, but the current pivot c[ir][ir]
+                // (the largest remaining diagonal) is smaller than 'small', we conclude that the
+                // matrix rank is r. All remaining columns are considered dependent.
+
+                // If r is 0 and the first pivot is already < small, the original code threw an exception.
+                // Keep this behavior, assuming 'small' is chosen such that this indicates an issue
+                // (e.g., matrix is not PSD or rank is definitively 0 in a way that requires an exception).
+                if (r == 0 && c[ir][ir] < small) {
+                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
+                }
+
+                // All remaining diagonal elements are non-negative but close to zero (<= small).
+                // The rank is determined to be r. Stop the decomposition process.
+                loop = false; // Terminate the main loop
 
             } else {
+                // Pivot c[ir][ir] is positive and sufficiently large. Proceed with the Cholesky update step.
 
-                // transform the matrix
+                // Calculate the diagonal element L'_{r,r} and its inverse for column calculation.
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+                b[r][r] = sqrt; // Store L'_{r,r}
+                final double inverse = 1.0 / sqrt;
+
+                // Compute the r-th column of L' (elements below the diagonal L'_{i,r} for i > r).
+                // Simultaneously update the trailing submatrix c = c - l_r * l_r^T, where l_r is the r-th column of L'.
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
+                    final int ii = index[i]; // Original index for row i (in the current permuted order)
+                    // Calculate L'_{i,r} = c'_{i,r} / L'_{r,r} = c_{p(i),p(r)} / sqrt(c_{p(r),p(r)})
+                    // Note: c[ii][ir] refers to element (p(i), p(r)) of the original matrix C,
+                    // which is element (i, r) of the permuted matrix C' = P^T C P being decomposed.
                     final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
-                    c[ii][ii] -= e * e;
+                    b[i][r] = e; // Store L'_{i,r} in matrix b using loop indices (i, r)
+
+                    // Update the trailing submatrix elements C'_{k,l} for k, l > r.
+                    // C' = C' - l_r * l_r^T
+                    c[ii][ii] -= e * e; // Update diagonal element C'_{i,i} = c_{p(i),p(i)}
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
+                        final int ij = index[j]; // Original index for column j (in the current permuted order)
+                        // Update off-diagonal element C'_{i,j} = C'_{i,j} - L'_{i,r} * L'_{j,r}
+                        // L'_{j,r} was computed and stored in b[j][r] earlier in this outer loop iteration 'r'.
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry of the submatrix c being updated
                     }
                 }
 
-                // prepare next iteration
+                // Prepare for the next iteration: increment rank and check if we have processed all columns.
                 loop = ++r < order;
             }
         }
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+        // Decomposition finished. Build the final root matrix R such that matrix = R * R^T.
+        // The relationship is matrix = P * L' * (L')^T * P^T = (P * L') * (P * L')^T, so R = P * L'.
+        rank = r; // The final rank is the value of r when the loop terminated.
+        // Create the root matrix of size order x rank.
+        root = MatrixUtils.createRealMatrix(order, rank);
+        // Fill the root matrix using the relationship R = P * L'.
+        // L' is stored in b (using loop indices i, j), P is the permutation defined by the index array.
+        for (int i = 0; i < order; ++i) { // Iterates through rows 'i' of L' (as stored in b)
+            for (int j = 0; j < rank; ++j) { // Iterates through columns 'j' of L' and R
+                // root_{k, j} = L'_{i, j} where k = index[i].
+                // This applies the permutation P to the rows of L'.
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
+        // Assuming 'rank' and 'root' are instance variables, they are now set.
+        // this.rank = rank; // Implicitly set by using the instance variable 'rank'
+        // this.root = root; // Implicitly set by using the instance variable 'root'
     }
\ No newline at end of file
