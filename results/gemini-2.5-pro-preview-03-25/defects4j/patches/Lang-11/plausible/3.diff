diff --git a/tmp/295f1db6-a9b5-4b0c-9dfa-f50e7ee3077b_buggy.java b/tmp/ff2f67a1-d7fc-4cba-afa8-2f630cb391d2_fixed.java
index 682b760..b85b0d9 100644
--- a/tmp/295f1db6-a9b5-4b0c-9dfa-f50e7ee3077b_buggy.java
+++ b/tmp/ff2f67a1-d7fc-4cba-afa8-2f630cb391d2_fixed.java
@@ -1,100 +1,125 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive)
+     * @param end  the position in set of chars to end before (exclusive)
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     *  {@code (end - start) + 1} characters in the set array. (Note: Javadoc might be slightly imprecise here)
+     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided chars array is empty,
+     * or {@code end <= start}.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
         if (chars != null && chars.length == 0) {
             throw new IllegalArgumentException("The chars array must not be empty");
         }
 
         if (start == 0 && end == 0) {
             if (chars != null) {
                 end = chars.length;
             } else {
                 if (!letters && !numbers) {
                     end = Integer.MAX_VALUE;
                 } else {
                     end = 'z' + 1;
                     start = ' ';
                 }
             }
+        // Check if end <= start after potential modifications or if they were passed in non-zero.
+        // This ensures the range [start, end) is valid.
+        } else if (end <= start) {
+             throw new IllegalArgumentException("Parameter end (" + end + ") must be greater than start (" + start + ")");
         }
 
         char[] buffer = new char[count];
+        // calculate the gap once, as end > start is now guaranteed.
         int gap = end - start;
 
         while (count-- != 0) {
             char ch;
+            // Select a random character index or value within the [start, end) range.
+            // random.nextInt(gap) generates a value in [0, gap-1].
+            // Adding start shifts the range to [start, start + gap - 1] which is [start, end - 1].
+            int codePoint = random.nextInt(gap) + start;
+
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                ch = (char) codePoint; // Use the generated value as a char code.
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                ch = chars[codePoint]; // Use the generated value as an index into the chars array.
             }
+
+            // Filter the character based on letters/numbers flags
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+
+                // Handle surrogate pairs correctly to avoid generating broken Unicode strings.
+                // This logic generates pairs if a surrogate character is encountered.
+                if(ch >= 56320 && ch <= 57343) { // ch is a low surrogate (U+DC00 - U+DFFF)
+                    if(count == 0) { // Not enough space remaining to insert the high surrogate
+                        count++; // Retry character generation
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
+                        // Insert the low surrogate character
                         buffer[count] = ch;
-                        count--;
+                        count--; // Move to the previous position for the high surrogate
+                        // Insert a random high surrogate (U+D800 - U+DB7F, standard range)
+                        // The original code used random.nextInt(128), which seems arbitrary and likely incorrect range.
+                        // Sticking to original behavior for this fix, although it might be buggy.
                         buffer[count] = (char) (55296 + random.nextInt(128));
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if(ch >= 55296 && ch <= 56191) { // ch is a high surrogate (U+D800 - U+DBFF, excluding PUA U+DB80-U+DBFF)
+                    if(count == 0) { // Not enough space remaining to insert the low surrogate
+                        count++; // Retry character generation
                     } else {
-                        // high surrogate, insert low surrogate before putting it in
+                        // Insert a random low surrogate (U+DC00 - U+DFFF) first
+                        // The original code used random.nextInt(128), which seems arbitrary and likely incorrect range.
+                        // Sticking to original behavior for this fix, although it might be buggy.
                         buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
+                        count--; // Move to the previous position for the high surrogate
+                        // Insert the high surrogate character
                         buffer[count] = ch;
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
+                } else if(ch >= 56192 && ch <= 56319) { // ch is a Private Use Area high surrogate (U+DB80 â€“ U+DBFF)
+                    // These are unlikely to form valid pairs with random low surrogates.
+                    // Skip this character and retry.
                     count++;
                 } else {
+                    // ch is a valid BMP character (not a surrogate).
                     buffer[count] = ch;
                 }
             } else {
-                count++;
+                // Character did not meet the letters/numbers criteria.
+                count++; // Retry character generation
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
