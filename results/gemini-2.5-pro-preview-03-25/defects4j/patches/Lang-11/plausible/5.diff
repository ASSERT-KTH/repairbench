diff --git a/tmp/8cef090a-5032-4396-aeec-515b79c3e4a1_buggy.java b/tmp/11bde010-aed7-458e-ae96-bc292706f81b_fixed.java
index 682b760..0db8cde 100644
--- a/tmp/8cef090a-5032-4396-aeec-515b79c3e4a1_buggy.java
+++ b/tmp/11bde010-aed7-458e-ae96-bc292706f81b_fixed.java
@@ -1,100 +1,134 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
+     * @param start  the position in set of chars to start at (inclusive)
+     * @param end  the position in set of chars to end before (exclusive)
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided chars array is empty,
+     * or {@code end <= start} when {@code start} and {@code end} are not the default 0.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
         if (chars != null && chars.length == 0) {
             throw new IllegalArgumentException("The chars array must not be empty");
         }
 
-        if (start == 0 && end == 0) {
+        int effectiveStart = start;
+        int effectiveEnd = end;
+
+        if (start == 0 && end == 0) { // Use original start/end to detect default case
             if (chars != null) {
-                end = chars.length;
+                effectiveEnd = chars.length; // effectiveStart remains 0
             } else {
                 if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
+                    effectiveEnd = Integer.MAX_VALUE; // effectiveStart remains 0
                 } else {
-                    end = 'z' + 1;
-                    start = ' ';                
+                    effectiveEnd = 'z' + 1; // 123
+                    effectiveStart = ' ';   // 32
                 }
             }
+            // Default settings guarantee effectiveEnd > effectiveStart
+        } else {
+            // Validate user-provided start and end
+            if (end <= start) {
+                throw new IllegalArgumentException("Parameter end (" + end + ") must be greater than start (" + start + ")");
+            }
+            if (chars != null) {
+                // Validate start/end against chars array bounds if chars is provided
+                if (end > chars.length) {
+                    throw new IllegalArgumentException("Parameter end (" + end + ") must not be greater than the length of the chars array (" + chars.length + ")");
+                }
+                if (start < 0) {
+                    throw new IllegalArgumentException("Parameter start (" + start + ") must be non-negative when using a chars array.");
+                }
+                // If validation passes, effectiveStart and effectiveEnd keep original values
+            }
+            // If chars is null, only end > start validation is needed for non-default parameters
         }
 
+
         char[] buffer = new char[count];
-        int gap = end - start;
+        // Calculate gap using effective values; gap is now guaranteed to be > 0
+        int gap = effectiveEnd - effectiveStart;
 
         while (count-- != 0) {
             char ch;
             if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+                // Generate a code point within the effective range
+                int codePoint = random.nextInt(gap) + effectiveStart;
+                // Cast to char - may truncate supplementary characters, existing behavior preserved
+                ch = (char) codePoint;
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                // Select a character using an index within the effective range
+                int randomIndex = random.nextInt(gap) + effectiveStart;
+                ch = chars[randomIndex]; // Index is validated to be within bounds
             }
+
+            // Filter character based on letters/numbers flags
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
+
+                // Surrogate pair handling logic (unchanged from original)
+                if(ch >= 56320 && ch <= 57343) { // low surrogate
                     if(count == 0) {
-                        count++;
+                        count++; // Cannot fit pair, retry
                     } else {
                         // low surrogate, insert high surrogate after putting it in
                         buffer[count] = ch;
                         count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        buffer[count] = (char) (55296 + random.nextInt(128)); // Random high surrogate
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
+                } else if(ch >= 55296 && ch <= 56191) { // high surrogate
                     if(count == 0) {
-                        count++;
+                        count++; // Cannot fit pair, retry
                     } else {
                         // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
+                        buffer[count] = (char) (56320 + random.nextInt(128)); // Random low surrogate
                         count--;
-                        buffer[count] = ch;
+                        buffer[count] = ch; // High surrogate
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
+                } else if(ch >= 56192 && ch <= 56319) { // private high surrogate
+                    // skip it
+                    count++; // Retry
                 } else {
+                    // Non-surrogate or valid BMP character
                     buffer[count] = ch;
                 }
             } else {
+                // Character did not meet letters/numbers criteria, retry
                 count++;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
