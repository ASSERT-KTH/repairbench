diff --git a/tmp/e3dc4822-32e9-4765-bf8b-957534875543_buggy.java b/tmp/1fbf7d7d-076c-4bc0-9a94-6904cfafbd8c_fixed.java
index d6a560a..5bd76d0 100644
--- a/tmp/e3dc4822-32e9-4765-bf8b-957534875543_buggy.java
+++ b/tmp/1fbf7d7d-076c-4bc0-9a94-6904cfafbd8c_fixed.java
@@ -1,33 +1,97 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // ---- Fix Start ----
+    // If the type is already resolved, we're done.
+    if (isResolved()) {
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
+    // Handle recursive resolution attempts. If we're already trying to resolve
+    // this same NamedType further up the call stack, we have a cycle.
+    // This prevents StackOverflowErrors for cycles like T implements T.
+    if (resolutionInProgress) {
+      handleTypeCycle(t);
+      // Ensure the type is marked resolved to break the cycle, possibly by setting
+      // it to UNKNOWN if handleTypeCycle doesn't guarantee resolution.
+      // This helps prevent inconsistent states that might lead to incorrect errors.
+      if (!isResolved()) {
+        setReferencedType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+      // Return the (potentially error) resolved type or this proxy.
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
+    resolutionInProgress = true;
+    try { // Use finally to ensure the flag is always reset
+
+      // Attempt 1: Resolution via registry.
       // TODO(user): Investigate whether it is really necessary to keep two
       // different mechanisms for resolving named types, and if so, which order
       // makes more sense. Now, resolution via registry is first in order to
       // avoid triggering the warnings built into the resolution via properties.
       boolean resolved = resolveViaRegistry(t, enclosing);
+
+      // Check for structural cycles AFTER the registry attempt.
+      // These cycles might be detected after some links are established.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        // Ensure resolved state after cycle detection, similar to the recursion check.
+        if (!isResolved()) {
+           setReferencedType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+        }
+        // Return early if a cycle is found to avoid further processing.
+        // Skipping super call and property continuations in cycle case.
+        return registry.isLastGeneration() ? getReferencedType() : this;
       }
 
       if (resolved) {
+        // Resolved via registry, no cycle detected.
+        // Call supertype method potentially needed for further resolution steps.
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
       }
 
+      // Attempt 2: Resolution via properties (if registry failed).
+      // This is where resolution based on @extends, @implements happens,
+      // potentially triggering recursive calls handled by the 'resolutionInProgress' flag.
       resolveViaProperties(t, enclosing);
+
+      // Check for structural cycles AFTER the properties attempt.
+      // More links might have been established, revealing cycles.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        // Ensure resolved state after cycle detection.
+        if (!isResolved()) {
+           setReferencedType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+        }
+        // Return early if a cycle is found.
+        // Skipping super call and property continuations in cycle case.
+        return registry.isLastGeneration() ? getReferencedType() : this;
       }
 
+      // If we reach here, no cycle was detected by detectImplicitPrototypeCycle.
+      // Resolution might have succeeded via properties, or might have failed.
+      // The original code called super.resolveInternal unconditionally here.
+      // This call might be necessary for some object types.
       super.resolveInternal(t, enclosing);
+
+      // Finish property continuations if resolution was successful at any point.
+      // Properties might depend on the fully resolved type structure.
       if (isResolved()) {
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+      // Return the resolved type, or 'this' if resolution is ongoing/deferred.
+      // The registry.isLastGeneration() check ensures we return the final JSType
+      // object rather than the proxy when resolution is fully complete.
+      return registry.isLastGeneration() ? getReferencedType() : this;
+
+    } finally {
+      resolutionInProgress = false; // Mark resolution attempt as finished for this type.
+    }
+    // ---- Fix End ----
   }
\ No newline at end of file
