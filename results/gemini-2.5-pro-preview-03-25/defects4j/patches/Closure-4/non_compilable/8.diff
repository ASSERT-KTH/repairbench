diff --git a/tmp/c94e2ea5-73d6-49bf-8c5a-630dd8ba4cea_buggy.java b/tmp/bd4c7dba-4e70-4c1a-a6b0-ee535ac98877_fixed.java
index d6a560a..0e116e0 100644
--- a/tmp/c94e2ea5-73d6-49bf-8c5a-630dd8ba4cea_buggy.java
+++ b/tmp/bd4c7dba-4e70-4c1a-a6b0-ee535ac98877_fixed.java
@@ -1,33 +1,72 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for resolution cycles. This is the primary addition to fix recursion.
+    // We use an instance field 'resolving' (assumed to be added to NamedType)
+    // to track whether this specific NamedType is currently in the process of
+    // being resolved. If we enter this method while 'resolving' is true,
+    // it indicates a cyclical dependency.
+    // NOTE: Requires adding 'private boolean resolving = false;' to NamedType.
+    if (resolving) {
+      handleTypeCycle(t); // Report cycle error and likely resolve to UNKNOWN_TYPE.
+      return this; // Return the proxy object.
+    }
+
+    // Mark this type as currently being resolved.
+    resolving = true;
+
+    // Use a try/finally block to ensure 'resolving' flag is cleared, even if errors occur.
+    try {
+      // First attempt: Resolve via the type registry.
+      // This handles cases where the type is explicitly registered (e.g., native types).
       boolean resolved = resolveViaRegistry(t, enclosing);
+
+      // After attempting registry resolution, check for implicit prototype cycles.
+      // Cycles might be detectable at this stage if registry resolution established links.
       if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
+        handleTypeCycle(t); // Handle the detected cycle.
+        // Update the 'resolved' status, as handleTypeCycle might resolve the type to UNKNOWN.
+        resolved = isResolved();
       }
 
+      // If resolved via registry (or cycle detected and handled):
       if (resolved) {
+        // Finalize the resolution process using the superclass implementation.
+        // This typically sets the 'referencedType' field in the proxy.
         super.resolveInternal(t, enclosing);
+        // If the type is successfully resolved, finish any pending property initializations.
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        // Return the resolved type if the registry is stable, otherwise return the proxy.
+        return registry.isLastGeneration() ? getReferencedType() : this;
       }
 
+      // Second attempt: If not resolved by registry, try resolving using properties
+      // defined in the enclosing scope (e.g., finding 'var T = ...').
+      // This is often where recursive resolution calls occur in cycle cases.
       resolveViaProperties(t, enclosing);
+
+      // After attempting property resolution, check for cycles again.
+      // Property resolution might establish or reveal cycles not caught earlier.
       if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
+        handleTypeCycle(t); // Handle the detected cycle.
       }
 
+      // Finalize the resolution process using the superclass implementation.
       super.resolveInternal(t, enclosing);
+
+      // If the type is now resolved (either normally or via cycle handling):
       if (isResolved()) {
+        // Finish any pending property initializations.
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+      // Return the resolved type if the registry is stable, otherwise return the proxy.
+      return registry.isLastGeneration() ? getReferencedType() : this;
+
+    } finally {
+      // Crucial: Reset the 'resolving' flag before exiting the method.
+      resolving = false;
+    }
   }
\ No newline at end of file
