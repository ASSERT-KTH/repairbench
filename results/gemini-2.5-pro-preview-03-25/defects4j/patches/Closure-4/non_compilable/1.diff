diff --git a/tmp/16638970-5c9c-4d5e-b6ae-2c93cf2e5cd3_buggy.java b/tmp/c83d9eeb-d6e9-454d-823c-653ea2b2e1c7_fixed.java
index d6a560a..2f8c8d1 100644
--- a/tmp/16638970-5c9c-4d5e-b6ae-2c93cf2e5cd3_buggy.java
+++ b/tmp/c83d9eeb-d6e9-454d-823c-653ea2b2e1c7_fixed.java
@@ -1,33 +1,67 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // Check for cycle *before* attempting resolution steps that might recurse.
+    // This is the most crucial change to prevent StackOverflowError in cases like
+    // T implements T, where resolution itself triggers the cycle immediately.
+    // We assume detectImplicitPrototypeCycle() is safe to call early and might
+    // use its own mechanisms to prevent infinite loops during the check.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t); // Report the cycle error.
+      setResolved(true);  // Mark this NamedType as resolved (with an error state)
+                          // to prevent further resolution attempts.
+      // Do not call super.resolveInternal or finishPropertyContinuations here,
+      // as the type resolution failed due to a cycle.
+      return this;        // Return this type, now marked as resolved (due to error).
+    }
+
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Check for cycle again *after* attempting registry resolution.
+    // Resolution might have revealed necessary information (e.g., type aliases)
+    // to detect a cycle that wasn't apparent initially.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      setResolved(true);
+      // As above, return immediately after detecting and handling the cycle.
+      return this;
     }
 
     if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
+      // If resolved via registry and no cycle detected afterward.
+      super.resolveInternal(t, enclosing); // Finalize the resolution state.
+      finishPropertyContinuations();       // Complete any pending property resolutions.
       return registry.isLastGeneration() ?
-          getReferencedType() : this;
+          getReferencedType() : this;       // Return the resolved type or self.
     }
 
+    // If not resolved via registry, attempt resolution via properties.
     resolveViaProperties(t, enclosing);
+
+    // Check for cycle one last time after attempting property resolution.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      setResolved(true);
+      // As above, return immediately after detecting and handling the cycle.
+      return this;
     }
 
+    // Finalize the resolution state after property resolution attempt.
+    // isResolved() might be true now if resolveViaProperties succeeded.
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
+      // Complete property continuations only if the type is actually resolved.
       finishPropertyContinuations();
     }
+
+    // Return the final result. If resolution was successful, getReferencedType()
+    // might return a different object in the last generation. Otherwise, return this.
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
