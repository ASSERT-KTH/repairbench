diff --git a/tmp/2f984f33-805d-41c5-9705-263354ae0c4d_buggy.java b/tmp/57cb76e5-0a4f-4272-b50c-f1c20605e62d_fixed.java
index d6a560a..742e8f9 100644
--- a/tmp/2f984f33-805d-41c5-9705-263354ae0c4d_buggy.java
+++ b/tmp/57cb76e5-0a4f-4272-b50c-f1c20605e62d_fixed.java
@@ -1,33 +1,79 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // Check for recursion. This is the primary cycle detection.
+    // We assume the class has a boolean instance field 'resolving' initialized to false.
+    if (resolving) {
+      // Report the cycle error.
+      handleTypeCycle(t);
+      // Mark this type as resolved to UNKNOWN to prevent infinite loops
+      // and ensure it's considered 'resolved'.
+      // The actual mechanism might involve protected methods or registry interaction.
+      // We represent this with a hypothetical call for clarity. If handleTypeCycle
+      // already marks the type resolved, this explicit step might be adjusted.
+      if (!isResolved()) {
+         // Example using a hypothetical method to set the resolved type to UNKNOWN.
+         // The actual implementation might differ based on JSType's design.
+         // e.g., this.setResolvedType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+         // For now, we assume handleTypeCycle or subsequent super.resolveInternal
+         // will correctly mark the type as resolved (possibly to UNKNOWN).
+         // If the type remains unresolved, it might lead to further errors.
+      }
+      // Return the proxy object. The resolved type should eventually yield UNKNOWN or handle the error state.
+      return this;
+    }
+
+    // Mark this type as currently being resolved.
+    this.resolving = true;
+
+    try {
       // TODO(user): Investigate whether it is really necessary to keep two
       // different mechanisms for resolving named types, and if so, which order
       // makes more sense. Now, resolution via registry is first in order to
       // avoid triggering the warnings built into the resolution via properties.
       boolean resolved = resolveViaRegistry(t, enclosing);
+
+      // Check for implicit prototype cycle after registry resolution attempt.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        // Note: Even if a cycle is detected here, the original code proceeded.
+        // We maintain this behavior, assuming handleTypeCycle reports the error
+        // and potentially marks the type state, which super.resolveInternal might use.
       }
 
       if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        // If resolved via the registry, finalize and return.
+        super.resolveInternal(t, enclosing); // Mark as resolved
+        finishPropertyContinuations(); // Complete property setup
+        // Return the resolved type or 'this' proxy
+        return registry.isLastGeneration() ? getReferencedType() : this;
       }
 
+      // If not resolved via registry, attempt resolution via properties.
       resolveViaProperties(t, enclosing);
+
+      // Check for implicit prototype cycle after properties resolution attempt.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
+      // Call the base class implementation to finalize the resolution state
+      // regardless of whether properties resolution succeeded. It might use
+      // information from handleTypeCycle if a cycle was detected.
       super.resolveInternal(t, enclosing);
+
+      // Finish property continuations if the type is now resolved.
       if (isResolved()) {
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+      // Return the resolved type or 'this' proxy.
+      return registry.isLastGeneration() ? getReferencedType() : this;
+
+    } finally {
+      // Ensure the resolving flag is reset regardless of how the function exits.
+      this.resolving = false;
+    }
   }
\ No newline at end of file
