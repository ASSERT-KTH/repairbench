diff --git a/tmp/89ef9250-bbd3-4278-8e62-22b499955ab7_buggy.java b/tmp/52361fc8-c24a-498b-a5d7-91b9e769f6bb_fixed.java
index d6a560a..1103735 100644
--- a/tmp/89ef9250-bbd3-4278-8e62-22b499955ab7_buggy.java
+++ b/tmp/52361fc8-c24a-498b-a5d7-91b9e769f6bb_fixed.java
@@ -1,33 +1,69 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+
+    // We must check for cycles before calling super.resolveInternal,
+    // as that method may recursively call this one (causing stack overflows).
+
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Check for cycle after registry resolution.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      // If a cycle is detected, resolution is effectively failed/complete.
+      // Return the current type, possibly marked as an error by handleTypeCycle.
+      // Avoid proceeding to super.resolveInternal or finishPropertyContinuations.
+      // The return value should match the function's final return logic.
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
+      // If registry resolved it, we still need to handle inheritance/implementation resolution.
+      super.resolveInternal(t, enclosing); // Potentially recursive step.
 
+      // Check for cycle again after super.resolveInternal, as it might finalize
+      // the relationships that reveal a cycle.
+      if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        // If a cycle is found here, we should report it but might still need to finalize.
+        // The original code didn't explicitly stop here.
+        // Let's proceed to finishPropertyContinuations, assuming handleTypeCycle marks the error.
+      }
+      // finalize properties if resolved by the registry
+      finishPropertyContinuations(); // Original position
+    } else {
+      // If registry did not resolve it, try resolving via properties (JSDoc etc.).
       resolveViaProperties(t, enclosing);
+
+      // Check for cycle after gathering info from properties, but BEFORE super.resolveInternal.
+      // This is crucial for detecting nominal type cycles like 'T implements T'.
+      if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        // Cycle detected before hierarchy resolution. Stop here.
+        return registry.isLastGeneration() ? getReferencedType() : this;
+      }
+
+      // Resolve hierarchy using the info gathered.
+      super.resolveInternal(t, enclosing); // Potentially recursive step.
+
+      // Check for cycle again after super.resolveInternal.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        // Proceed to finalization even if cycle detected here.
       }
 
-    super.resolveInternal(t, enclosing);
+      // Finalize properties if the type is now resolved (after properties + super).
       if (isResolved()) {
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    }
+
+    // Final return value based on registry state (consistent with original code).
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
