diff --git a/tmp/117ed7f3-4e5b-4df0-9550-504111760e31_buggy.java b/tmp/d32b5abc-7ece-4b29-99aa-41a9abd42104_fixed.java
index d6a560a..d6cc6f7 100644
--- a/tmp/117ed7f3-4e5b-4df0-9550-504111760e31_buggy.java
+++ b/tmp/d32b5abc-7ece-4b29-99aa-41a9abd42104_fixed.java
@@ -1,33 +1,48 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
+    // Check for cycle after registry resolution.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
+      // If registry resolution worked, finish up.
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // Check for cycle *before* property resolution. This is the key fix
+    // to detect cycles like T implements T before potentially recursing infinitely.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      // If a cycle was detected, don't try to resolve properties further,
+      // as it could lead to stack overflows. Proceed to final resolution steps.
+      // We might already be resolved to an error type, or partially resolved.
+    } else {
+      // Only resolve via properties if no cycle was detected beforehand.
       resolveViaProperties(t, enclosing);
+      // Check for cycle again *after* property resolution, in case properties
+      // resolution itself introduced a cycle.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
+    }
 
+    // Final resolution steps.
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
