diff --git a/tmp/8ac5bcc9-7329-412a-af41-8d83edbd5b84_buggy.java b/tmp/0077a02c-782d-4222-a3c0-9171aff4b23a_fixed.java
index d6a560a..262900c 100644
--- a/tmp/8ac5bcc9-7329-412a-af41-8d83edbd5b84_buggy.java
+++ b/tmp/0077a02c-782d-4222-a3c0-9171aff4b23a_fixed.java
@@ -1,33 +1,69 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+
+    // Attempt resolution via registry.
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Check for cycles immediately after registry resolution attempt.
+    // If a cycle is detected here, it means the registry resolution itself
+    // completed a cyclic definition.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      // Mark as resolved to prevent further resolution attempts and loops,
+      // even though the type definition is faulty.
+      super.resolveInternal(t, enclosing);
+      // If resolved by registry, finish property continuations even if there's a cycle?
+      // The original code did this. Let's keep it for now.
+      if (resolved) {
+          finishPropertyContinuations();
+      }
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If resolved via registry and no cycle was detected, finalize.
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // Resolution via registry failed or didn't happen. Try via properties.
+    // This resolution path can cause deep recursion and StackOverflow for cycles
+    // like 'T implements T' or 'F extends G, G implements F'.
     resolveViaProperties(t, enclosing);
+
+    // Check for cycles *after* property resolution attempt but *before*
+    // marking the type as resolved via super.resolveInternal. This aims
+    // to catch cycles early and report the correct error, preventing stack overflows
+    // or incorrect subsequent error messages.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      // Mark as resolved to stop further processing and break loops.
+      super.resolveInternal(t, enclosing);
+      // Do not call finishPropertyContinuations here, as the type structure
+      // is likely invalid due to the cycle, and continuing might lead to further issues.
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // No cycle detected after property resolution. Mark the type as resolved.
+    // This call might potentially resolve the type if resolveViaProperties set things up correctly.
     super.resolveInternal(t, enclosing);
+
+    // If the type is now resolved (either by properties + super call, or maybe earlier),
+    // and no cycle was detected in the property resolution path, finish continuations.
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    // Return the resolved type if possible, otherwise return this unresolved proxy.
+    // If the type remains unresolved after all attempts, returning 'this' allows
+    // resolution to be potentially re-attempted later if more scope information becomes available.
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
