diff --git a/tmp/4647f39c-2cea-4271-9341-1214f0262562_buggy.java b/tmp/f55bfec4-112b-4442-b717-0857baf9368f_fixed.java
index d6a560a..d48e96f 100644
--- a/tmp/4647f39c-2cea-4271-9341-1214f0262562_buggy.java
+++ b/tmp/f55bfec4-112b-4442-b717-0857baf9368f_fixed.java
@@ -1,33 +1,73 @@
+  /**
+   * Tracks whether {@code resolveInternal} is currently being executed. Used
+   * to detect circular dependencies.
+   */
+  private boolean resolving = false;
+
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // Check for recursive resolution calls, which indicate a cycle.
+    if (resolving) {
+      // Cycle detected via recursion. Report the error and mark the type as
+      // resolved to break the cycle. handleTypeCycle should modify the type
+      // state appropriately (e.g., mark as resolved, possibly to an error type).
+      handleTypeCycle(t);
+      // Return the type reported by the registry, which might be an error type,
+      // or 'this' if it's not the last generation.
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+    resolving = true;
+
+    try {
       // TODO(user): Investigate whether it is really necessary to keep two
       // different mechanisms for resolving named types, and if so, which order
       // makes more sense. Now, resolution via registry is first in order to
       // avoid triggering the warnings built into the resolution via properties.
       boolean resolved = resolveViaRegistry(t, enclosing);
+
+      // Even if resolved via registry, check for cycles detected afterward.
+      // detectImplicitPrototypeCycle might rely on partial resolution info
+      // set by resolveViaRegistry, or catch cycles not caught by the direct
+      // recursion check (though the 'resolving' flag should catch most).
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        // If a cycle is found, handleTypeCycle should mark it resolved.
+        // We allow the normal resolution finalization steps below to proceed.
       }
 
       if (resolved) {
-      super.resolveInternal(t, enclosing);
+        // Resolution via registry succeeded. Finalize the resolution.
+        super.resolveInternal(t, enclosing); // Resolve the proxy object itself.
         finishPropertyContinuations();
+        // Return the resolved type (or 'this' based on generation).
         return registry.isLastGeneration() ?
             getReferencedType() : this;
       }
 
+      // Resolution via registry failed or didn't happen; try resolving via properties.
       resolveViaProperties(t, enclosing);
+
+      // Check for cycles again after the second resolution attempt.
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
-    super.resolveInternal(t, enclosing);
+      // Complete the resolution process. This runs whether properties resolved
+      // the type or a cycle was detected and handled.
+      super.resolveInternal(t, enclosing); // Resolve the proxy object itself.
       if (isResolved()) {
+        // isResolved() should be true now if either resolution path
+        // succeeded or if a cycle was detected and handled (by handleTypeCycle).
         finishPropertyContinuations();
       }
+      // Return the final resolved type or 'this'.
       return registry.isLastGeneration() ?
           getReferencedType() : this;
+    } finally {
+      // Ensure the resolving flag is reset regardless of how the function exits.
+      resolving = false;
+    }
   }
\ No newline at end of file
