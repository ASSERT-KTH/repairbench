diff --git a/tmp/24bf3192-60fa-4e32-8f1f-05cb0d04c4d6_buggy.java b/tmp/7044209d-a43b-4f85-942e-5af22f868fb3_fixed.java
index d6a560a..7a020e3 100644
--- a/tmp/24bf3192-60fa-4e32-8f1f-05cb0d04c4d6_buggy.java
+++ b/tmp/7044209d-a43b-4f85-942e-5af22f868fb3_fixed.java
@@ -1,33 +1,55 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // Prevent infinite recursion by checking for cycles early.
+    // If a cycle is detected, handle it and mark the type as resolved
+    // to avoid further resolution attempts.
+    // This is potentially expensive, so we should investigate optimizations later.
+    // See https://github.com/google/closure-compiler/issues/1441
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      // Mark this proxy as resolved, possibly to an error type or UnknownType,
+      // depending on how handleTypeCycle works. We must still call
+      // super.resolveInternal to ensure the resolution machinery knows
+      // we're "done" with this type for now.
+      super.resolveInternal(t, enclosing);
+      // Return the resolved type if possible, otherwise 'this' proxy.
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+
+    // Attempt 1: Resolve via registry.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
+    // Note: Don't check for cycles again here. We checked at the beginning.
 
     if (resolved) {
+      // If resolved via registry, finalize and return.
       super.resolveInternal(t, enclosing);
+      // Ensure properties defined AFTER the type definition are resolved.
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // Attempt 2: Resolve via properties in the scope.
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
+    // Note: Don't check for cycles again here. We checked at the beginning.
 
+    // Finalize the resolution process. This runs regardless of whether
+    // resolution succeeded, so that we can try again later.
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
+      // Ensure properties defined AFTER the type definition are resolved.
       finishPropertyContinuations();
     }
+
+    // Return the resolved type or 'this' if resolution failed/deferred.
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
