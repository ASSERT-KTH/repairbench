diff --git a/tmp/7d4506f7-8ffb-42be-a2b8-599e603dd05b_buggy.java b/tmp/6caeee0e-ef71-444c-ac36-de0bf0be2fde_fixed.java
index d6a560a..9742835 100644
--- a/tmp/7d4506f7-8ffb-42be-a2b8-599e603dd05b_buggy.java
+++ b/tmp/6caeee0e-ef71-444c-ac36-de0bf0be2fde_fixed.java
@@ -1,33 +1,69 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+
+    // Try to resolve via the registry.
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Check for cycles after the first resolution attempt.
+    // It's important to do this even if resolution succeeded, as the registry
+    // resolution might have completed the type definition in a way that reveals
+    // a cycle.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    // If registry resolution succeeded, we're mostly done.
     if (resolved) {
-      super.resolveInternal(t, enclosing);
+      super.resolveInternal(t, enclosing); // Mark as resolved in the base class.
       finishPropertyContinuations();
+      // Return the resolved type if possible, otherwise return this proxy.
+      // If a cycle was handled, getReferencedType() should reflect that.
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // If registry resolution failed, attempt property resolution.
+    // Crucially, check for cycles *before* calling resolveViaProperties,
+    // as this call can trigger recursive resolution that leads to StackOverflowError
+    // on cyclic definitions if the cycle isn't detected beforehand.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      // If a cycle is detected here, we assume handleTypeCycle marks the type
+      // appropriately (e.g., as an error type or breaks the cycle) so that
+      // resolveViaProperties below won't recurse infinitely.
+      // We proceed with resolveViaProperties even if a cycle is detected,
+      // matching the original code's behavior of attempting resolution
+      // after handling the cycle.
+    }
+
+    // Attempt resolution via properties (handling inheritance, interfaces, etc.).
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
+    // We don't need a cycle check *after* resolveViaProperties here, because
+    // the check *before* the call should have caught any cycles detectable
+    // at that point. If resolveViaProperties itself introduces or reveals
+    // a cycle structure not detectable before, that might indicate a deeper issue,
+    // but this fix addresses the immediate StackOverflowError cause.
+
+    // Mark as resolved in the base class. This needs to happen regardless of
+    // whether property resolution succeeded, as resolveInternal needs to be
+    // called for bookkeeping.
     super.resolveInternal(t, enclosing);
+
+    // Finish property continuations only if the type is now considered resolved
+    // (either through registry or properties).
     if (isResolved()) {
       finishPropertyContinuations();
     }
+
+    // Return the resolved type if possible, otherwise return this proxy.
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
