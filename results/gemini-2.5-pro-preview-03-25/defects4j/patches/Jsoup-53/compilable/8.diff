diff --git a/tmp/63355580-fcb0-4845-a1d4-6b711ed02f9e_buggy.java b/tmp/881adfe9-d7eb-4e3a-b041-5644c171b396_fixed.java
index fecb896..0676ae4 100644
--- a/tmp/63355580-fcb0-4845-a1d4-6b711ed02f9e_buggy.java
+++ b/tmp/881adfe9-d7eb-4e3a-b041-5644c171b396_fixed.java
@@ -1,34 +1,79 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
-     * @return data matched from the queue
+     * @return data matched from the queue, or empty string if not balanced or not found.
      */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
-        int depth = 0;
-        char last = 0;
+        int start = -1; // Start index of matched content (immediately after open char)
+        int end = -1;   // End index of matched content (immediately before close char)
+        int depth = 0;  // Current nesting depth
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        boolean escaped = false;
+        final char ESC = '\\'; // Escape character
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        final int initialPos = pos; // Remember starting position
+
+        while (!isEmpty()) {
+            char c = consume(); // Consume character and advance position
+            int currentPos = pos; // Position after consuming c
+
+            if (escaped) {
+                // Previous character was escape, treat this char literally
+                escaped = false;
+            } else {
+                if (c == ESC) {
+                    escaped = true;
+                    // If we are inside the potential match, ensure the escape itself is included
+                    // The logic continues, and the next char will be skipped for special handling
+                } else if (c == '\'' && !(open == '\'' || close == '\'')) { // Only toggle if quote is not the target open/close char
+                    // Check if not inside double quotes before toggling single quote state
+                    if (!inDoubleQuote) {
+                        inSingleQuote = !inSingleQuote;
+                    }
+                } else if (c == '"' && !(open == '"' || close == '"')) {
+                   // Check if not inside single quotes before toggling double quote state
+                   if (!inSingleQuote) {
+                        inDoubleQuote = !inDoubleQuote;
+                    }
+                } else if (!inSingleQuote && !inDoubleQuote) {
+                    // Only process open/close if not inside quotes and not escaped
+                    if (c == open) {
                         depth++;
-                    if (start == -1)
-                        start = pos;
+                        if (start == -1) { // Record start position only for the first opening brace
+                            start = currentPos; // Start position is *after* the opener
                         }
-                else if (c.equals(close))
+                    } else if (c == close) {
                         depth--;
+                        // If depth becomes 0 and we had found the start, this is the matching closer
+                        if (depth == 0 && start != -1) {
+                             end = currentPos - 1; // End position is *before* the closing char
+                             break; // Found the complete balanced match
+                        }
+                    }
+                }
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            // Safety break condition: if depth goes negative, it's unbalanced
+            if (depth < 0) {
+                 // This means a close occurred before a matching open or too many closes.
+                 // The original code structure would likely also fail/stop here.
+                 // We break the loop, and since 'end' is not set correctly, "" will be returned.
+                 break;
+            }
+        } // end while
+
+        // Determine return value
+        if (end >= 0) { // Successfully found the balanced match (end was set when depth became 0)
+             return queue.substring(start, end);
+        } else {
+             // Match not found (opener never found, or queue ended while unbalanced, or unbalanced closer found)
+             // Reset position? The "chomp" suggests consuming, so we don't reset by default.
+             // pos = initialPos; // Uncomment this line if the caller requires position reset on failure.
+             return ""; // Return empty string to indicate failure
+        }
     }
\ No newline at end of file
