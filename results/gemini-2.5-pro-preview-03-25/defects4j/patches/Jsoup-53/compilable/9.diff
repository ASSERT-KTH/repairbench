diff --git a/tmp/5919c8a2-abf7-47df-a24b-bac362d41817_buggy.java b/tmp/344d99d0-6683-4237-8f63-8d52ea501e94_fixed.java
index fecb896..8dae153 100644
--- a/tmp/5919c8a2-abf7-47df-a24b-bac362d41817_buggy.java
+++ b/tmp/344d99d0-6683-4237-8f63-8d52ea501e94_fixed.java
@@ -1,34 +1,63 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
+        int start = -1; // start index of balanced string content (after open char)
+        int end = -1; // end index of balanced string content (before close char)
         int depth = 0;
         char last = 0;
+        boolean inQuote = false;
+        char quoteChar = 0;
+        final char ESC = '\\'; // Escape character
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        while (!isEmpty()) {
+            int currentPos = pos; // Position before consuming char c
+            char c = consume(); // Read char and advance position
+
+            boolean isEscaped = last == ESC;
+
+            if (!isEscaped) { // Only process special chars if not escaped
+                if (!inQuote) { // If not currently within quotes
+                    if (c == '\'' || c == '"') { // Start of quote
+                        inQuote = true;
+                        quoteChar = c;
+                    } else if (c == open) { // Opening char
                         depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                        if (start == -1) // Record start index if it's the first opener we encounter
+                            start = pos; // pos is *after* the consumed opening char
+                    } else if (c == close) { // Closing char
                         depth--;
                     }
+                } else { // If currently within quotes
+                    if (c == quoteChar) { // End of quote
+                        inQuote = false;
+                    }
+                    // Inside quotes, characters like open/close don't affect depth
+                }
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
+            // Check for exit condition *after* processing the character and updating depth.
+            // We need to have found the start bracket (start != -1) and depth must have returned to 0 (or less, safety).
+            if (start != -1 && depth <= 0) {
+                 // This state should only be reached when the closing character `c` is consumed,
+                 // is not escaped, not inside a quote, and matches the `close` parameter.
+                 // The depth calculation already handles the conditions for decrementing.
+                 // So, if depth drops to 0 or below after finding the start, we've found the matching close.
+                end = currentPos; // The balanced content ends *before* the closing char c (which was at currentPos)
+                break; // Found the balanced match
+            }
+
+            last = c; // Update last char for escape checking next iteration
+        }
+
+        // If loop finished because queue is empty but depth is still > 0, it's unbalanced. End remains -1.
+        // If start was never found, start is -1, end is -1.
+        // Return substring only if end was validly found (which implies start was also found).
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
