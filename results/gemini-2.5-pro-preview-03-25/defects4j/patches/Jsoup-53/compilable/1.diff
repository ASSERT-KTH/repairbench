diff --git a/tmp/e62be88a-0af9-4986-8f0a-46a9ea83dd86_buggy.java b/tmp/01dd3da6-bc65-4363-bff8-19764c449066_fixed.java
index fecb896..ea83ee7 100644
--- a/tmp/e62be88a-0af9-4986-8f0a-46a9ea83dd86_buggy.java
+++ b/tmp/01dd3da6-bc65-4363-bff8-19764c449066_fixed.java
@@ -1,34 +1,73 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
-        char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        boolean escaped = false;
+        // Assumes ESC is a static final char defined in the class, likely private static final char ESC = '\\';
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        final int initialPos = pos; // Record start position to reset if no match found
+
+        while (!isEmpty()) {
+            char c = consume();
+
+            if (escaped) {
+                // If the previous char was an escape, treat this char literally and reset flag
+                escaped = false;
+            } else {
+                // If not escaped, check for control characters
+                if (c == ESC) {
+                    escaped = true;
+                } else if (c == '\'' && !inDoubleQuote) {
+                    // Toggle single quote state if encountered and not within double quotes
+                    inSingleQuote = !inSingleQuote;
+                } else if (c == '"' && !inSingleQuote) {
+                    // Toggle double quote state if encountered and not within single quotes
+                    inDoubleQuote = !inDoubleQuote;
+                } else if (!inSingleQuote && !inDoubleQuote) {
+                    // Only adjust depth if outside quotes
+                    if (c == open) {
                         depth++;
-                    if (start == -1)
+                        if (start == -1) // Track the start position *after* the opening character
                             start = pos;
-                }
-                else if (c.equals(close))
+                    } else if (c == close) {
                         depth--;
                     }
+                }
+            }
+
+            // Check for termination condition *after* processing the character and updating depth
+            // We need depth to be 0 (balanced) and we must have found the opening char (start != -1)
+            // This ensures we capture the content between the first 'open' and its corresponding 'close'.
+            if (depth == 0 && start != -1) {
+                end = pos - 1; // The end position is the index of the closing character itself
+                break; // Exit loop successfully, we found the balanced pair
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            // If depth becomes negative, it means we have encountered a closing char without a matching open char.
+            // This indicates an unbalanced situation from the perspective of the initial state. Stop searching.
+             if (depth < 0) {
+                 break;
+            }
+        }
+
+        // If we found a valid end position (end >= 0), return the substring between start and end
+        if (end >= 0) {
+            return queue.substring(start, end);
+        } else {
+            // Otherwise (no match found, unbalanced, or queue ended before closing), reset position and return empty string
+            // Resetting position ensures that no progress is made if the balanced string wasn't found.
+            pos = initialPos;
+            return "";
+        }
     }
\ No newline at end of file
