diff --git a/tmp/4ca2326a-8538-4e58-ae21-b305f20f45fd_buggy.java b/tmp/f08e33f1-5483-4300-bcb8-9f5951bb5a94_fixed.java
index fecb896..bf705fe 100644
--- a/tmp/4ca2326a-8538-4e58-ae21-b305f20f45fd_buggy.java
+++ b/tmp/f08e33f1-5483-4300-bcb8-9f5951bb5a94_fixed.java
@@ -1,34 +1,71 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
+        int start = -1; // Position *after* the first open char
+        int end = -1;   // Position *after* the last character within the balanced section (suitable for substring end index)
         int depth = 0;
-        char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        boolean escaped = false; // Tracks if the *next* character is escaped
+
+        final char ESC = '\\'; // Define escape character
 
         do {
             if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            char c = consume(); // Consume character, advances internal position 'pos'
+
+            if (escaped) {
+                // Previous char was ESC, current char 'c' is literal
+                escaped = false;
+                // No special handling needed for quotes or open/close for this character
+            } else {
+                // Check for escape character *before* checking quotes/open/close
+                if (c == ESC) {
+                    escaped = true;
+                } else if (c == '\'' && !inDoubleQuote) {
+                    // Toggle single quote state only if not inside double quotes
+                    inSingleQuote = !inSingleQuote;
+                } else if (c == '"' && !inSingleQuote) {
+                    // Toggle double quote state only if not inside single quotes
+                    inDoubleQuote = !inDoubleQuote;
+                } else if (!inSingleQuote && !inDoubleQuote) {
+                    // Only process open/close if not escaped and not inside any quotes
+                    if (c == open) {
                         depth++;
-                    if (start == -1)
+                        if (start == -1) // Record start position *after* the first opener char
                             start = pos;
-                }
-                else if (c.equals(close))
+                    } else if (c == close) {
                         depth--;
                     }
+                }
+                // Note: If the current char 'c' was not ESC, it might have changed quote state or depth.
+                // If it *was* ESC, the escaped flag is set true for the *next* iteration/character.
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
+            // Update end position:
+            // If we are inside the balanced structure (depth > 0) *after* processing char 'c',
+            // it means 'c' (and potentially escape characters before it) is part of the balanced content.
+            // Update 'end' to point *after* the character 'c'.
+            if (depth > 0 && start != -1) { // Ensure we are inside the balanced pair (start has been set)
+                 end = pos; // Update end to point *after* the current char 'c'
+            }
+            // When depth drops to 0 (or less) due to matching 'close' char, the loop condition (depth > 0)
+            // will fail, and the loop terminates. 'end' will hold the position *after* the character
+            // just before the final closing character.
+
+        } while (depth > 0); // Continue loop as long as depth is positive
+
+        // Return the substring from start (after open) to end (before close).
+        // Returns "" if:
+        //  - Opener 'open' was never found (start == -1, so end remains -1).
+        //  - Content is empty, e.g., "()". (start=1, end=1 -> substring(1,1) -> "").
+        //  - Input is unbalanced and queue ends while depth > 0.
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
