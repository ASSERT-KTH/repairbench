diff --git a/tmp/b2309673-6a52-4160-97a9-ecb65ff8cedf_buggy.java b/tmp/1dd53828-19ac-4e8e-b741-099dd68cdd4c_fixed.java
index fecb896..04a7bd3 100644
--- a/tmp/b2309673-6a52-4160-97a9-ecb65ff8cedf_buggy.java
+++ b/tmp/1dd53828-19ac-4e8e-b741-099dd68cdd4c_fixed.java
@@ -1,34 +1,73 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
+        int start = -1; // Start index of the balanced portion (position *after* open char)
+        int end = -1;   // End index of the balanced portion (position *after* char before close char)
         int depth = 0;
-        char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        boolean escaping = false;
+
+        // Assuming ESC is defined in the class, e.g., private static final char ESC = '\\';
+        // If ESC is not defined, needs to be added or obtained from context.
+        final char ESC = '\\'; // Hardcoding for this fix, assuming standard Java escape
 
         do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (isEmpty()) break; // Stop if queue is empty
+
+            char c = consume(); // Consume the next character and advance position
+
+            if (escaping) {
+                // Previous char was escape, this char is escaped. Reset flag.
+                // Treat escaped char literally (don't check for quotes or balance).
+                escaping = false;
+            } else {
+                if (c == ESC) {
+                    escaping = true; // Mark next char as escaped. Don't process this ESC char further.
+                } else {
+                    // Not an escape char, and not currently escaped: process normally.
+                    if (c == '\'' && !inDoubleQuote) {
+                        inSingleQuote = !inSingleQuote; // Toggle single quote state
+                    } else if (c == '"' && !inSingleQuote) {
+                        inDoubleQuote = !inDoubleQuote; // Toggle double quote state
+                    }
+
+                    // Check for balancing characters only if not inside quotes.
+                    if (!inSingleQuote && !inDoubleQuote) {
+                        if (c == open) {
                             depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                            if (start == -1) // Record start position *after* the first non-quoted/escaped opening char
+                                start = pos; // 'pos' is now after the consumed 'c'
+                        } else if (c == close) {
                             depth--;
+                            // Depth decreases *after* consuming the closing char.
                         }
+                    }
+                }
+            }
+
+            // Update the end position if we are inside the balanced structure.
+            // 'start >= 0' ensures the opener was found.
+            // 'depth > 0' ensures we are still inside the balanced structure *after* processing 'c'.
+            // If 'c' was the final closing char that made depth 0, this condition will be false,
+            // so 'end' correctly points to the position *after* the character *before* the final closing char.
+            if (depth > 0 && start >= 0) {
+                 end = pos; // Update end to the current position (after consuming 'c')
+            }
+            // Note: If the loop terminates because the queue is empty while depth > 0,
+            // 'end' will hold the position after the last consumed character.
+
+        } while (depth > 0); // Loop while strictly inside the balanced structure (depth > 0)
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
+        // Return the substring between start and end.
+        // If end was never updated (e.g., input "()" or just "("), end remains -1.
+        // The condition 'end >= 0' handles these cases correctly.
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
