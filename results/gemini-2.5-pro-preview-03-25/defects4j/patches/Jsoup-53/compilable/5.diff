diff --git a/tmp/fa1be4d3-e1a8-40fd-91b6-e44be50be61c_buggy.java b/tmp/b2abdac4-1d8b-4c62-a9e7-55eaa7bf3fa6_fixed.java
index fecb896..a25035f 100644
--- a/tmp/fa1be4d3-e1a8-40fd-91b6-e44be50be61c_buggy.java
+++ b/tmp/b2abdac4-1d8b-4c62-a9e7-55eaa7bf3fa6_fixed.java
@@ -1,34 +1,70 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
-        int depth = 0;
-        char last = 0;
+        int start = -1; // Start index of matched content (immediately after open char)
+        int end = -1; // End index of matched content (immediately after the char before the close char)
+        int depth = 0; // Current nesting depth
+        boolean inSingle = false; // Inside single quotes?
+        boolean inDouble = false; // Inside double quotes?
+        boolean wasEscaping = false; // If the *previous* character consumed was an escape character
+
+        // Assumes static final char ESC = '\\'; is defined in the class or inherited
 
         do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (isEmpty()) break; // Stop if queue is empty
+
+            char c = consume(); // Get next char and advance position (pos points *after* c)
+
+            if (wasEscaping) {
+                // If the previous char was ESC, this char 'c' is escaped.
+                // We treat it literally and reset the escape flag.
+                wasEscaping = false;
+            } else {
+                // If the previous char was not ESC, check current char 'c'
+                if (c == ESC) {
+                    // Current char is ESC, the *next* char will be escaped.
+                    wasEscaping = true;
+                } else if (c == '\'' && !inDouble) {
+                    // Toggle single quote state if not inside double quotes
+                    inSingle = !inSingle;
+                } else if (c == '"' && !inSingle) {
+                    // Toggle double quote state if not inside single quotes
+                    inDouble = !inDouble;
+                } else if (!inSingle && !inDouble) {
+                    // Only process open/close if not inside quotes and not escaped by the previous char
+                    if (c == open) {
                         depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                        if (start == -1) // If this is the first unbalanced open char found
+                            start = pos; // Mark starting position *after* the open char
+                    } else if (c == close) {
                         depth--;
                     }
+                }
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
+            // Update the end position if we are currently inside the balanced structure.
+            // 'end' should mark the position *after* the last character consumed *before* depth reached 0.
+            // This means 'end' is updated as long as depth is still positive after processing 'c'.
+            if (depth > 0 && start != -1) {
+                // Only update end if we have actually started (start != -1).
+                // 'pos' points after the character 'c' that was just consumed.
+                 end = pos;
+            }
+
+            // Loop continues as long as depth > 0 (we are inside the balanced structure).
+            // The loop terminates naturally when depth becomes 0 (or <= 0) after processing the closing character.
+            // Or when the queue becomes empty mid-structure.
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+        // Return the substring from start to end. If end was never updated (e.g., "()"),
+        // or start was never found (e.g., queue doesn't contain 'open'), return empty string.
+        // Use condition `start != -1 && end > start` to ensure valid range and handle "()".
+        return (start != -1 && end > start) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
