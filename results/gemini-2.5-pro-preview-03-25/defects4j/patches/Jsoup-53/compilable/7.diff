diff --git a/tmp/c1666966-5843-4bb4-9078-ca987db387dd_buggy.java b/tmp/44ddd714-dd9e-4c15-8735-eec0250d0c6e_fixed.java
index fecb896..c69767a 100644
--- a/tmp/c1666966-5843-4bb4-9078-ca987db387dd_buggy.java
+++ b/tmp/44ddd714-dd9e-4c15-8735-eec0250d0c6e_fixed.java
@@ -1,34 +1,58 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        final char ESC = '\\'; // Assuming ESC is defined in the class, typically as '\\'
 
         do {
             if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            char c = consume(); // Consume character, pos advances
+
+            if (last != 0 && last == ESC) {
+                // If previous char was ESC, this char 'c' is escaped.
+                // It doesn't affect quotes or depth. Handled by not executing the else block.
+                // 'last' will be updated to 'c' below.
+            } else {
+                // Not an escaped character, process normally
+                if (c == '\'' && !inDoubleQuote) {
+                    inSingleQuote = !inSingleQuote; // Toggle single quote state
+                } else if (c == '"' && !inSingleQuote) {
+                    inDoubleQuote = !inDoubleQuote; // Toggle double quote state
+                } else if (!inSingleQuote && !inDoubleQuote) {
+                    // Only check balance if not inside any quotes
+                    if (c == open) {
                         depth++;
                         if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                            start = pos; // pos is *after* consuming the open char
+                    } else if (c == close) {
                         depth--;
                     }
+                }
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
+            // Update end position based on original logic. Tracks position *after* last char consumed inside balanced section.
+            // Condition `last != 0` ensures we don't set end after consuming the opening brace itself.
+            if (depth > 0 && last != 0) {
+                 end = pos;
+            }
+            last = c; // Update last char for next iteration's escape check
+
+        } while (depth > 0); // Loop terminates *after* consuming the character that makes depth <= 0
+
+        // Returns substring from start (exclusive of open char) to end (exclusive of close char).
+        // If balance is never achieved (e.g., queue ends before depth returns to 0), end remains -1, returns "".
+        // If open char is never found, start remains -1, depth remains 0, loop doesn't execute (much), end remains -1, returns "".
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
