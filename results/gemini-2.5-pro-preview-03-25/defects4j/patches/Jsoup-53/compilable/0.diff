diff --git a/tmp/0f61da8f-de7c-4252-957f-0017c3bad2d8_buggy.java b/tmp/44c924e5-734f-4e34-8825-7daf94c6455e_fixed.java
index fecb896..7df42df 100644
--- a/tmp/0f61da8f-de7c-4252-957f-0017c3bad2d8_buggy.java
+++ b/tmp/44c924e5-734f-4e34-8825-7daf94c6455e_fixed.java
@@ -1,34 +1,75 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
+        int start = -1; // Position of the first opening char found
+        int end = -1; // Position of the matching closing char
         int depth = 0;
-        char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        boolean escaped = false;
+        final char ESC = '\\'; // Assuming this constant is available or should be defined here/class level
 
-        do {
-            if (isEmpty()) break;
+        while (!isEmpty()) {
+            int currentPos = pos; // Position *before* consuming char c
             Character c = consume();
-            if (last == 0 || last != ESC) {
+
+            if (escaped) {
+                // Previous char was escape, treat current char literally
+                escaped = false;
+            } else {
+                // Handle escape char for *next* character
+                if (c == ESC) {
+                    escaped = true;
+                }
+                // Handle quotes - only toggle if not escaped
+                else if (c == '\'' && !inDoubleQuote) {
+                    inSingleQuote = !inSingleQuote;
+                } else if (c == '"' && !inSingleQuote) {
+                    inDoubleQuote = !inDoubleQuote;
+                }
+                // Handle open/close only if not escaped and not inside quotes
+                else if (!inSingleQuote && !inDoubleQuote) {
                     if (c.equals(open)) {
                         depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                        if (start == -1) // Record position of the first opening char
+                            start = currentPos;
+                    } else if (c.equals(close)) {
                         depth--;
                     }
+                }
+            }
+
+            // Check for match completion *after* processing the char and updating depth
+            // Requires that we have found the start char first
+            if (start != -1 && depth == 0) {
+                end = currentPos; // Position of the closing char (the char just consumed)
+                break; // Found the matching close
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            // Check for premature close (unbalanced situation like ")(" )
+            if (depth < 0) {
+                 // Indicates an error state, like finding 'close' before 'open'.
+                 // Stop processing. start will be -1, resulting in empty string return.
+                break;
+            }
+        }
+
+        // If a balanced match was found (start was set, and loop broke with depth == 0 at end position)
+        if (start != -1 && end != -1) {
+             // Return the content *between* open and close chars
+             // queue.substring(from, to) -> from is inclusive, to is exclusive
+             // start is the index of 'open', end is the index of 'close'
+             // We want the string from index start + 1 up to (but not including) end.
+            return queue.substring(start + 1, end);
+        } else {
+            // No balanced match found (either open never seen, or queue ended prematurely with depth > 0, or premature close with depth < 0)
+            return "";
+        }
     }
\ No newline at end of file
