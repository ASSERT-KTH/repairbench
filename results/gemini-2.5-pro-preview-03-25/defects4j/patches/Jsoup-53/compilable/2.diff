diff --git a/tmp/84936963-e83f-4ca6-b914-f29af1701cab_buggy.java b/tmp/e25f4ebf-0e39-412e-864b-b69fb539b32a_fixed.java
index fecb896..3f096eb 100644
--- a/tmp/84936963-e83f-4ca6-b914-f29af1701cab_buggy.java
+++ b/tmp/e25f4ebf-0e39-412e-864b-b69fb539b32a_fixed.java
@@ -1,34 +1,66 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
+        int start = -1; // Position after the first char consumed (the opening bracket)
+        int end = -1;   // Position after the last char consumed *before* the closing bracket
         int depth = 0;
-        char last = 0;
+        char last = 0; // Tracks the last character consumed
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        final char ESC = '\\'; // Assuming ESC = '\\' is defined in the class
 
         do {
-            if (isEmpty()) break;
-            Character c = consume();
+            if (isEmpty()) break; // Stop if queue is empty
+            Character c = consume(); // Consume the next character, increments pos
+
+            // Handle escapes: if the previous character was an escape, this character is skipped for balancing/quoting logic
             if (last == 0 || last != ESC) {
+                // Handle quotes: only change quote state if not escaped
+                if (c.equals('\'') && !inDoubleQuote) {
+                    inSingleQuote = !inSingleQuote;
+                } else if (c.equals('"') && !inSingleQuote) {
+                    inDoubleQuote = !inDoubleQuote;
+                }
+                // Handle open/close: only change depth if not escaped and not inside quotes
+                else if (!inSingleQuote && !inDoubleQuote) {
                     if (c.equals(open)) {
                         depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                        if (start == -1) // If this is the first 'open' found
+                            start = pos; // Set start to position *after* this 'open' char is consumed
+                    } else if (c.equals(close)) {
                         depth--;
+                        // Note: depth could become < 0 here if 'close' appears before 'open'
                     }
+                }
+            }
+
+            // Update 'end' position using original logic:
+            // If depth > 0 (meaning we are inside the balanced structure)
+            // and we have consumed at least one character (last != 0 - avoids updating end right after consuming 'open')
+            // then update 'end' to the position *after* the character just consumed ('c').
+            // This correctly marks the position after the last character *before* the final closing bracket.
+            if (depth > 0 && last != 0) {
+                end = pos; // end points *after* the character 'c'
+            }
+
+            last = c; // Update last character seen *after* all checks involving 'last'
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
+            // The loop condition `depth > 0` ensures we continue only while inside the balanced structure.
+            // It terminates when depth becomes 0 (after consuming the closing bracket) or < 0 (unbalanced).
         } while (depth > 0);
+
+        // If 'end' was updated (meaning we found content between the brackets), return the substring.
+        // 'start' is the position after the opening bracket.
+        // 'end' is the position after the last character before the closing bracket.
+        // queue.substring(start, end) extracts the content between the brackets.
+        // For "()", start=1, end=-1, returns "".
+        // For "(a)", start=1, end=2, returns "a".
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
