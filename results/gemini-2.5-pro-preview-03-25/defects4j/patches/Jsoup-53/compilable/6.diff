diff --git a/tmp/18ca2eb4-3ec6-4013-aae9-fed08fc5a2cb_buggy.java b/tmp/cd77c7ef-139d-495a-b099-9752948b0b5a_fixed.java
index fecb896..cdff4ad 100644
--- a/tmp/18ca2eb4-3ec6-4013-aae9-fed08fc5a2cb_buggy.java
+++ b/tmp/cd77c7ef-139d-495a-b099-9752948b0b5a_fixed.java
@@ -1,34 +1,66 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        final char ESC = '\\'; // Escape character
 
         do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (isEmpty()) break; // Exit if queue is empty
+            Character c = consume(); // Consume next character
+            boolean escaped = (last == ESC); // Check if the previous character was an escape
+
+            if (!escaped) { // If the current character is not escaped
+                if (inSingleQuote) { // If currently inside single quotes
+                    if (c == '\'') // Check for closing single quote
+                        inSingleQuote = false;
+                    // Inside single quotes, open/close characters are ignored for depth calculation
+                } else if (inDoubleQuote) { // If currently inside double quotes
+                    if (c == '"') // Check for closing double quote
+                        inDoubleQuote = false;
+                    // Inside double quotes, open/close characters are ignored for depth calculation
+                } else { // Not inside any quotes
+                    if (c == '\'') {
+                        inSingleQuote = true; // Enter single quotes
+                    } else if (c == '"') {
+                        inDoubleQuote = true; // Enter double quotes
+                    } else if (c.equals(open)) { // Check for opener character
                         depth++;
-                    if (start == -1)
+                        if (start == -1) // Mark start position *after* the opener
                             start = pos;
-                }
-                else if (c.equals(close))
+                    } else if (c.equals(close)) { // Check for closer character
                         depth--;
                     }
+                }
+            }
+            // If the character was escaped, we ignore it for quote state changes and depth calculation.
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
+            // Update the end position:
+            // If we are inside the balanced structure (depth > 0) and it's not the first character processed after the opener,
+            // update 'end' to the position *after* the current character 'c'.
+            // This ensures 'end' points to the character *after* the last character within the balanced section.
+            if (depth > 0 && last != 0) { // 'last != 0' ensures we don't set end based on the opener itself.
+                                          // An alternative clearer check might be 'start != -1'.
+                end = pos;
+            }
+            last = c; // Update the last character for the next iteration's escape check
+
+            // The loop continues as long as depth > 0.
+            // It terminates *after* processing the character that makes depth == 0.
         } while (depth > 0);
+
+        // Return the substring from 'start' (exclusive of opener) to 'end' (exclusive of closer)
+        // If 'end' was never updated (e.g., empty balanced section like '()', or unterminated), return ""
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
