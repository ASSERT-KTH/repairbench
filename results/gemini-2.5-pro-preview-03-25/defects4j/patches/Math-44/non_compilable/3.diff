diff --git a/tmp/07bc7a20-3866-4020-9ff5-009741b6bd95_buggy.java b/tmp/3efadd4d-42de-4a7d-aa37-4ff9fdd0843f_fixed.java
index 2c4ed06..e18a98c 100644
--- a/tmp/07bc7a20-3866-4020-9ff5-009741b6bd95_buggy.java
+++ b/tmp/3efadd4d-42de-4a7d-aa37-4ff9fdd0843f_fixed.java
@@ -1,111 +1,144 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MathIllegalStateException if the value of one event state cannot be evaluated
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
             resetOccurred = false;
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // trigger the event
                 interpolator.setInterpolatedTime(eventT);
+                // get state BEFORE event handler is triggered
                 final double[] eventY = interpolator.getInterpolatedState();
                 currentEvent.stepAccepted(eventT, eventY);
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     return eventT;
                 }
 
+                // Check if the handler requested a state reset.
+                // The call to reset() below internally calls handler.eventOccurred()
+                // and potentially triggers the problematic reinitializeBegin().
+                // It returns true if eventOccurred returned RESET_STATE or RESET_DERIVATIVES.
                 if (currentEvent.reset(eventT, eventY)) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
-                    System.arraycopy(eventY, 0, y, 0, y.length);
+                    // An event requested a state reset or derivative recomputation.
+
+                    // Check if state reset is needed (as opposed to just derivative reset)
+                    // This requires assuming EventState provides a way to check the specific action,
+                    // or that reset() only returns true for RESET_STATE based on common usage,
+                    // or (most likely based on standard API) that we must call the handler's resetState method.
+                    // Let's assume the standard API: eventOccurred signals intent, resetState provides the new state.
+                    // We need access to the handler. Assuming EventState provides getHandler().
+                    final EventHandler handler = currentEvent.getHandler(); // Assumed method
+                    // Check the action recommended by the handler *after* eventOccurred was called inside reset()
+                    // Need a way to get this action from EventState, e.g., currentEvent.getAction()
+                    // If the action was RESET_STATE:
+                    // final int action = currentEvent.getAction(); // Assumed method
+                    // if (action == EventHandler.RESET_STATE) { // Check if state reset was specifically requested
+
+                    // Simplification: Assume if reset() returns true, we need to update state potentially.
+                    // The most robust way according to EventHandler interface is to call resetState.
+                    final double[] newState = handler.resetState(eventT, eventY); // Get the potentially new state
+                    System.arraycopy(newState, 0, y, 0, y.length); // Update main state vector
+
+                    // Recompute derivatives with the NEW state
                     computeDerivatives(eventT, y, yDot);
-                    resetOccurred = true;
+                    resetOccurred = true; // Signal the integrator to restart the step
+
+                    // NOTE: This fixes the state update logic in acceptStep.
+                    // However, the test failure is likely caused by the incorrect
+                    // re-initialization (setting t0) inside EventState.reset/reinitializeBegin,
+                    // which is called *before* this block. That bug requires modifying EventState.
                     return eventT;
                 }
 
+
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
 
             }
 
+            // last part of the step, after the last event. Ensure interpolator covers full remaining range.
+            interpolator.setSoftPreviousTime(previousT);
+            interpolator.setSoftCurrentTime(currentT);
             interpolator.setInterpolatedTime(currentT);
+
             final double[] currentY = interpolator.getInterpolatedState();
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
 
     }
\ No newline at end of file
