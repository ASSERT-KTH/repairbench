diff --git a/tmp/6fe5f33b-bba0-406a-adc6-43b1586ff248_buggy.java b/tmp/ac9b44d9-a746-458d-8985-7b3d7e4da88a_fixed.java
index 2c4ed06..589f5f3 100644
--- a/tmp/6fe5f33b-bba0-406a-adc6-43b1586ff248_buggy.java
+++ b/tmp/ac9b44d9-a746-458d-8985-7b3d7e4da88a_fixed.java
@@ -1,111 +1,142 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MathIllegalStateException if the value of one event state cannot be evaluated
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
             resetOccurred = false;
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
-                if (state.evaluateStep(interpolator)) {
+                 // Check if the evaluation interval is valid before calling evaluateStep.
+                 // The error "going backward in time" occurs inside evaluateStep if t0 > t1 in forward
+                 // integration, or t0 < t1 in backward integration. This check aims to prevent such calls.
+                 final boolean isForward = interpolator.isForward();
+                 final double evalEndTime = interpolator.getCurrentTime(); // This is currentT for this call
+
+                 // state.t0 represents the time at the beginning of the interval being evaluated.
+                 // It should be before evalEndTime in forward integration and after in backward integration.
+                 boolean evaluate = true;
+                 if (isForward) {
+                     if (state.t0 > evalEndTime) {
+                         // This condition implies state.t0 > currentT which should not happen if state.t0
+                         // comes from the previous step end time (<= previousT) and previousT < currentT.
+                         // Log or handle this inconsistency if necessary. For now, skip evaluation.
+                         evaluate = false;
+                     }
+                 } else { // Backward integration
+                     if (state.t0 < evalEndTime) {
+                         // Similar inconsistency for backward integration.
+                         evaluate = false;
+                     }
+                 }
+
+                 if (evaluate && state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
+
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // trigger the event
                 interpolator.setInterpolatedTime(eventT);
-                final double[] eventY = interpolator.getInterpolatedState();
+                //克隆eventY，因为它可能在reset中被修改
+                final double[] eventY = interpolator.getInterpolatedState().clone();
                 currentEvent.stepAccepted(eventT, eventY);
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     return eventT;
                 }
 
                 if (currentEvent.reset(eventT, eventY)) {
                     // some event handler has triggered changes that
                     // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
                     return eventT;
                 }
 
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
+                // No need for the extra interval check here, as t0 was just set to eventT
+                // and the interval end is currentT, satisfying t0 <= t1 (forward).
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
 
             }
 
+            // Last part of the step, after all events are handled (if any)
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
+            // Ensure interpolator interval is set correctly for the final segment.
+            interpolator.setSoftPreviousTime(previousT);
+            interpolator.setSoftCurrentTime(currentT);
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
 
     }
\ No newline at end of file
