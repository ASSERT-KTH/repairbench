diff --git a/tmp/c3a0165c-caed-49b1-9c92-9f7ee1dc475d_buggy.java b/tmp/a7b12804-62be-44e3-ab3f-f64d3b634bfb_fixed.java
index 2c4ed06..48dbd34 100644
--- a/tmp/c3a0165c-caed-49b1-9c92-9f7ee1dc475d_buggy.java
+++ b/tmp/a7b12804-62be-44e3-ab3f-f64d3b634bfb_fixed.java
@@ -1,111 +1,140 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MathIllegalStateException if the value of one event state cannot be evaluated
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
             resetOccurred = false;
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // trigger the event
                 interpolator.setInterpolatedTime(eventT);
-                final double[] eventY = interpolator.getInterpolatedState();
-                currentEvent.stepAccepted(eventT, eventY);
+                // Get state vector at event time (don't clone, handlers should modify the main vector 'y')
+                // final double[] eventY = interpolator.getInterpolatedState(); // Original code had this
+                // Using the main state vector 'y' is more appropriate if handlers modify it via resetState
+                final double[] eventY = y; // Let's assume resetState works on y
+
+                // Update event state BEFORE checking stop/reset.
+                // The state passed to stepAccepted should be the state *before* potential reset.
+                // Cloning ensures the event state uses the pre-reset state for its internal checks.
+                currentEvent.stepAccepted(eventT, interpolator.getInterpolatedState().clone());
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
-                    System.arraycopy(eventY, 0, y, 0, y.length);
+                    // Update state y to the state at event time before stopping
+                    System.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, y.length);
                     return eventT;
                 }
 
-                if (currentEvent.reset(eventT, eventY)) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
-                    System.arraycopy(eventY, 0, y, 0, y.length);
+                // Check if the event triggers a state reset
+                // The call currentEvent.reset(eventT, y) internally calls handler.resetState(eventT, y)
+                // The issue is that EventState.reset ignores the potentially new array returned by resetState.
+                // Pass the main state vector 'y'.
+                if (currentEvent.reset(eventT, y)) {
+                    // Reset occurred. The state array y might or might not have been modified
+                    // depending on the handler's resetState implementation and EventState's behavior.
+                    // To ensure the state is correct according to the EventHandler contract,
+                    // we must get the state returned by resetState.
+                    // Workaround: Call resetState again directly, as EventState.reset doesn't propagate the result.
+                    EventHandler handler = currentEvent.getHandler();
+                    double[] newState = handler.resetState(eventT, y); // Get the actual reset state
+                    // If resetState returned a new array instance, copy it into y.
+                    // If it modified y in place, newState might be == y, but copy is safe.
+                    if (newState != y) {
+                         System.arraycopy(newState, 0, y, 0, y.length); // Update main state array y only if necessary
+                    }
+
+                    // Now y contains the post-reset state. Recompute derivatives.
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
+                    // Integration restarts from eventT, states are implicitly synchronized by the next step start.
                     return eventT;
                 }
 
-                // prepare handling of the remaining part of the step
+
+                // No reset requested by this event. Prepare handling of the remaining part of the step.
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
+                // Re-evaluate the event state AFTER potentially advancing time and calling step handlers
                 if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
+                    // the event occurs during the current step in the remaining interval
                     occuringEvents.add(currentEvent);
                 }
 
             }
 
+            // No event caused a premature return. Finish the step to currentT.
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
+            System.arraycopy(currentY, 0, y, 0, y.length); // Update main state vector to the final state of the step
             for (final EventState state : eventsStates) {
-                state.stepAccepted(currentT, currentY);
-                isLastStep = isLastStep || state.stop();
+                state.stepAccepted(currentT, y); // Update all event states with final time and state
+                isLastStep = isLastStep || state.stop(); // Check stop condition again
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
+            // handle the full step (or remaining part), after all events if any
             for (StepHandler handler : stepHandlers) {
+                // Pass the interpolator finalized for the full step
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
 
     }
\ No newline at end of file
