diff --git a/tmp/a0429e04-5f25-4c4b-8cbf-b0420f907a90_buggy.java b/tmp/80c71171-fd5b-4df2-b3e9-aebe0fa14846_fixed.java
index 2c4ed06..6e02a25 100644
--- a/tmp/a0429e04-5f25-4c4b-8cbf-b0420f907a90_buggy.java
+++ b/tmp/80c71171-fd5b-4df2-b3e9-aebe0fa14846_fixed.java
@@ -1,111 +1,144 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MathIllegalStateException if the value of one event state cannot be evaluated
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
             resetOccurred = false;
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // trigger the event
                 interpolator.setInterpolatedTime(eventT);
-                final double[] eventY = interpolator.getInterpolatedState();
+                // Clode doesn't have access to the state vector on the AbstractStepInterpolator
+                // but the AbstractIntegrator does -> must retrieve the state from the interpolator
+                // at event time eventT
+                final double[] eventY;
+                if (currentEvent.isPending()) {
+                    // check if an event handler during the previous step requested a reset
+                    // if so, the state vector y is already the reset state and we trigger
+                    // the event handler on the reset state as in the specification of Events V1
+                    eventY = y;
+                    // we need to update the event state g function value as it may be obsolete after the reset
                     currentEvent.stepAccepted(eventT, eventY);
+                } else {
+                    // we need to compute the interpolated state at the root location according to the current step
+                    // this is the state before the event handler is triggered.
+                    eventY = interpolator.getInterpolatedState();
+                    // we trigger the event handler with the computed interpolated state
+                    currentEvent.stepAccepted(eventT, eventY);
+                }
+
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     return eventT;
                 }
 
                 if (currentEvent.reset(eventT, eventY)) {
                     // some event handler has triggered changes that
                     // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
+                    // Invalidate states initialization performed before the step
+                    // because the state vector has changed. The states will be
+                    // reinitialized at the beginning of the next step.
+                    statesInitialized = false;
                     return eventT;
                 }
 
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
 
             }
 
+            // last part of the step, after the last event. Advance all event states to step end time
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
             for (final EventState state : eventsStates) {
+                 // state vector can be y if reset has occurred before
+                 if(resetOccurred) {
+                      state.stepAccepted(currentT, y);
+                 } else {
                       state.stepAccepted(currentT, currentY);
+                 }
+                 isLastStep = isLastStep || state.stop();
+            }
+            // stepAccepted may have changed the stop status of an event handler that was not active
+            // during the step interval. Need to check all event handlers again.
+            // isLastStep = isLastStep; // Keep active status of event handlers from the step first part
+            for (final EventState state : eventsStates) {
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
 
     }
\ No newline at end of file
