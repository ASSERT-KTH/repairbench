diff --git a/tmp/232335a1-6f9e-40f6-88fe-2cde0a615454_buggy.java b/tmp/34b05908-bf1b-4e01-83cf-9ee50f69d60c_fixed.java
index 2c4ed06..3818f48 100644
--- a/tmp/232335a1-6f9e-40f6-88fe-2cde0a615454_buggy.java
+++ b/tmp/34b05908-bf1b-4e01-83cf-9ee50f69d60c_fixed.java
@@ -1,111 +1,128 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MathIllegalStateException if the value of one event state cannot be evaluated
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
             resetOccurred = false;
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // trigger the event
                 interpolator.setInterpolatedTime(eventT);
-                final double[] eventY = interpolator.getInterpolatedState();
+                // Clonedysta needed here since state.eventOccurred updates the interpolated array
+                final double[] eventY = interpolator.getInterpolatedState().clone();
+
+                // update the state handler itself
                 currentEvent.stepAccepted(eventT, eventY);
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     return eventT;
                 }
 
                 if (currentEvent.reset(eventT, eventY)) {
                     // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
+                    // invalidate the derivatives, the step needs to be accepted
+                    // this requires recomputing the derivatives for the new state
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
+
+                    // Reinitialize conditions for all event handlers at eventT
+                    // Use the state vector y after the reset handler potentially changed it
+                    for (final EventState state : eventsStates) {
+                        state.stepAccepted(eventT, y);
+                    }
+
                     return eventT;
                 }
 
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
 
             }
 
+            // last part of the step, after the last event. Needed to avoid missing the last event handler call
+            interpolator.setSoftPreviousTime(previousT);
+            interpolator.setSoftCurrentTime(currentT);
             interpolator.setInterpolatedTime(currentT);
-            final double[] currentY = interpolator.getInterpolatedState();
+
+            final double[] currentY = interpolator.getInterpolatedState().clone();
             for (final EventState state : eventsStates) {
+                 // Update the state handler here to avoid an issue when the event is located exactly at the end of the step
+                 // If the state is not updated here, the event may be missed if the integration represents the last step.
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
 
     }
\ No newline at end of file
