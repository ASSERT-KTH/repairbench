diff --git a/tmp/6afea593-f74d-4473-bc0f-dfc70b86aaea_buggy.java b/tmp/c0457ded-4c6c-4414-92d8-39edd0c47b0c_fixed.java
index 6e155da..6b8b9d4 100644
--- a/tmp/6afea593-f74d-4473-bc0f-dfc70b86aaea_buggy.java
+++ b/tmp/c0457ded-4c6c-4414-92d8-39edd0c47b0c_fixed.java
@@ -1,10 +1,32 @@
   @Override public void skipValue() throws IOException {
     if (peek() == JsonToken.NAME) {
-      nextName();
-      pathNames[stackSize - 2] = "null";
+      nextName(); // Consume the name, push the value onto the stack
+      // Do not modify pathNames here; nextName and popStack handle it.
     } else {
+      // If not a name, the top of the stack is the value (object, array, primitive) to skip.
+      // Pop it from the stack.
       popStack();
-        pathNames[stackSize - 1] = "null";
     }
-      pathIndices[stackSize - 1]++;
+    // If peek() was NAME, nextName() pushed the value. Now we need to pop that value.
+    // If peek() was not NAME, we already popped the value in the else block.
+    // Let's simplify: regardless of the token type, we want to remove the next logical value
+    // from the stream/tree.
+    // If it's a NAME, consume the name (nextName) AND its value (popStack).
+    // If it's anything else (BEGIN_*, value, END_*), just consume/pop that element.
+    // The original logic was flawed. A cleaner approach:
+
+    // If the current token is a name, advance past the name. nextName() pushes the value.
+    if (peek() == JsonToken.NAME) {
+      nextName();
+    }
+    // Now, the top of the stack is the value we need to skip
+    // (either the value associated with the name, or the initial object/array/primitive).
+    // Remove this value element from the stack. popStack handles necessary state updates
+    // like path indices and nulling out pathNames for the popped scope.
+    popStack();
+    
+    // The original code had index increments and pathNames modifications here,
+    // but popStack already handles incrementing the parent's index correctly,
+    // and modifying pathNames here caused errors or had unclear purpose.
+    // Removing those lines fixes the ArrayIndexOutOfBoundsException and simplifies the logic.
   }
\ No newline at end of file
