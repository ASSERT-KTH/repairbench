diff --git a/tmp/ea67f793-6b37-4274-b5c5-ea190a71f38e_buggy.java b/tmp/e5febabd-63d0-4927-aa32-a7431fff08d0_fixed.java
index 6e155da..b8a6755 100644
--- a/tmp/ea67f793-6b37-4274-b5c5-ea190a71f38e_buggy.java
+++ b/tmp/e5febabd-63d0-4927-aa32-a7431fff08d0_fixed.java
@@ -1,10 +1,52 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
+    JsonToken token = peek();
+    switch (token) {
+      case NAME:
+        // Consume the name, push the value. Update the path to show the name was processed (or skipped).
         nextName();
-      pathNames[stackSize - 2] = "null";
-    } else {
+        // pathNames is updated by nextName to the actual name.
+        // Here, we might indicate skipping by nulling the name in the path, or just rely on the recursive skipValue below.
+        // Let's keep the original intent slightly modified for path tracking during skip:
+        pathNames[stackSize - 2] = "null"; // Mark name slot in parent path as skipped/null.
+        // Recursively skip the value associated with the name.
+        skipValue();
+        break;
+
+      case BEGIN_OBJECT:
+        // Enter the object, skip all name/value pairs, then end the object.
+        beginObject();
+        while (hasNext()) {
+          // Skip the name and its corresponding value.
+          // The recursive call for NAME (above) handles both name and value skipping internally.
+          skipValue();
+        }
+        endObject();
+        break;
+
+      case BEGIN_ARRAY:
+        // Enter the array, skip all elements, then end the array.
+        beginArray();
+        while (hasNext()) {
+          // Skip the array element recursively.
+          skipValue();
+        }
+        endArray();
+        break;
+
+      // Handles STRING, NUMBER, BOOLEAN, NULL.
+      // It should not be called for END_ARRAY / END_OBJECT as those are handled by endArray()/endObject()
+      // called from the BEGIN_ARRAY / BEGIN_OBJECT cases.
+      default:
+        // Consuming/skipping a simple value or null just requires popping it from the stack.
         popStack();
-        pathNames[stackSize - 1] = "null";
-    }
+        // After consuming a value from a container (which is now at stackSize - 1),
+        // increment the container's index.
+        if (stackSize > 0) {
+          // Avoid incrementing if we just popped the root element (stackSize became 0).
+          // Also ensures we don't access pathIndices[-1].
+          // Note: endArray/endObject also increment the parent index.
           pathIndices[stackSize - 1]++;
         }
+        break;
+    }
+  }
\ No newline at end of file
