diff --git a/tmp/0d6f11d1-b9c5-447a-9a89-5712e2c785bc_buggy.java b/tmp/700d60a9-7387-4f25-ad30-5384e7ead864_fixed.java
index 6e155da..fe1a063 100644
--- a/tmp/0d6f11d1-b9c5-447a-9a89-5712e2c785bc_buggy.java
+++ b/tmp/700d60a9-7387-4f25-ad30-5384e7ead864_fixed.java
@@ -1,10 +1,48 @@
   @Override public void skipValue() throws IOException {
-    if (peek() == JsonToken.NAME) {
+    JsonToken token = peek();
+    if (token == JsonToken.NAME) {
+      // Consume the name, push the associated value onto the stack
       nextName();
+      // Path name for the consumed name is now at pathNames[stackSize - 1]. Nullify it.
+      // (nextName already sets pathNames[stackSize - 2] before pushing value,
+      // let's adjust the original logic slightly)
+      // Original buggy logic tried: pathNames[stackSize - 2] = "null";
+      // Let's stick to that index as nextName sets it before stackSize increments.
       pathNames[stackSize - 2] = "null";
-    } else {
+
+      // Pop the value associated with the name from the stack.
       popStack();
-        pathNames[stackSize - 1] = "null";
-    }
+      // Increment the index in the parent object (which is now at stackSize - 1).
       pathIndices[stackSize - 1]++;
+    } else {
+      // It's a value (primitive, object, array) or END_DOCUMENT etc.
+      // Update path information *before* popping the value.
+      if (stackSize > 0) {
+        int valueIndex = stackSize - 1;
+        // Nullify the path name associated with the value being skipped.
+        pathNames[valueIndex] = "null";
+
+        // Increment index in the parent container (if one exists).
+        // The parent is associated with the element *before* the current value.
+        // If stackSize > 1, the parent index is stackSize - 2.
+        // However, pathIndices tracks the index *within* the parent.
+        // The index to increment corresponds to the parent container, which is at stackSize - 1
+        // *before* the popStack call.
+        // Let's re-evaluate: the index to increment corresponds to the collection
+        // we are currently iterating/positioned within. This is stack[stackSize - 1]
+        // if it's an iterator, or stack[stackSize - 2] if stack[stackSize - 1] is a value
+        // just read from the parent collection at stack[stackSize-2].
+        // The popStack() removes the current value/element. The increment should apply to the parent index.
+        // The original code incremented pathIndices[stackSize - 1] *after* popStack, which was wrong.
+        // Incrementing pathIndices[stackSize - 1] *before* popStack seems correct for arrays/objects.
+        pathIndices[valueIndex]++;
+
+      }
+      // Remove the value itself from the stack.
+      // If it's an object or array, this effectively skips its contents.
+      // Avoid popping if stack is already empty (e.g. skipping END_DOCUMENT)
+      if (stackSize > 0) {
+          popStack();
+      }
+    }
   }
\ No newline at end of file
