diff --git a/tmp/02a49420-7f28-41f9-bfbb-441764619cd9_buggy.java b/tmp/fa45911b-d7cf-4807-ba19-16368580b9fd_fixed.java
index b8e7fdb..462d680 100644
--- a/tmp/02a49420-7f28-41f9-bfbb-441764619cd9_buggy.java
+++ b/tmp/fa45911b-d7cf-4807-ba19-16368580b9fd_fixed.java
@@ -1,15 +1,50 @@
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.NodeUtils;
+import org.jsoup.nodes.XmlDeclaration;
+import org.jsoup.parser.Parser;
+// Assuming this method is part of the org.jsoup.nodes.Comment class
+
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
+        // Minimum possible length is 2 e.g. <?a?> or <!a> for coreData "a"
+        // Added null check for robustness.
+        if (data == null || data.length() < 2) {
+            return null;
+        }
+
+        // Avoid StringIndexOutOfBoundsException: start index (1) > end index (0) for length 1.
+        String coreData = data.substring(1, data.length() - 1);
+
+        // If the stripped core is empty or whitespace, it's not a valid XML tag name for a decl.
+        // Example: <! > or <? ?>
+        if (coreData.trim().isEmpty()) {
+             return null;
+        }
+
+        // Parse the core data potentially representing the declaration content
+        // Need to wrap in < > for the parser to recognize it as tag based content
+        // Use a temporary doc to house the potential decl content
+        Document doc = Jsoup.parse("<" + coreData + ">", baseUri(), Parser.xmlParser());
         XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
+
+        // Check if the parsing resulted in a document with at least one Element child.
+        // Original code used doc.childNodeSize() > 0 which is incorrect as it includes non-Element nodes.
+        // doc.child(0) requires an Element at index 0 of the element children list, leading to
+        // IndexOutOfBoundsException: Index: 0, Size: 0 if children() is empty but childNodeSize() > 0.
+        if (!doc.children().isEmpty()) {
+            Element el = doc.children().first(); // Get the first Element child
+            // Ensure el is not null for safety, although !isEmpty should guarantee this.
+            if (el != null) {
+                 // Create the XmlDeclaration using the parsed tag name and attributes
                 decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
                 decl.attributes().addAll(el.attributes());
             }
+        }
         return decl;
     }
\ No newline at end of file
