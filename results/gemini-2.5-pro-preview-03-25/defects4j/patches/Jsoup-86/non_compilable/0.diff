diff --git a/tmp/d65b01f1-cb30-460d-bd3a-f543b68c19f7_buggy.java b/tmp/c1c7f747-8dda-420b-b0e1-4834292566fc_fixed.java
index b8e7fdb..b1a222e 100644
--- a/tmp/d65b01f1-cb30-460d-bd3a-f543b68c19f7_buggy.java
+++ b/tmp/c1c7f747-8dda-420b-b0e1-4834292566fc_fixed.java
@@ -1,15 +1,51 @@
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
         XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
+
+        // Check if the comment looks like a processing instruction <?...> or a DOCTYPE <!...>
+        // Need at least <?x?> or <!x>
+        boolean isProcessingInstruction = data.startsWith("?") && data.endsWith("?");
+        boolean isDoctype = data.startsWith("!");
+        if (!(isProcessingInstruction || isDoctype) || data.length() < 2) {
+            return null; // Doesn't fit the pattern or too short
+        }
+
+        String coreData;
+        if (isProcessingInstruction) {
+            // Needs to be <?x?> or longer
+            if (data.length() < 3) return null;
+            // Extract content between <? and ?>
+            coreData = data.substring(1, data.length() - 1);
+        } else { // isDoctype
+            // Extract content after <!
+            coreData = data.substring(1);
+        }
+
+        // If the extracted core is empty (e.g., from "<??>" or "<!>"), it's not valid
+        if (coreData.isEmpty()) {
+            return null;
+        }
+
+        // Try parsing the core data wrapped in <> via a temporary document.
+        // Use a parser with error tracking suppressed as this is speculative.
+        // The core data is parsed as if it's a tag name and attributes.
+        // E.g., for <?xml version="1.0"?>, coreData is "xml version='1.0'", parse "<xml version='1.0'>"
+        // E.g., for <!DOCTYPE html>, coreData is "DOCTYPE html", parse "<DOCTYPE html>"
+        Document doc = Jsoup.parse("<" + coreData + ">", baseUri(), Parser.xmlParser().setTrackErrors(0));
+
+        // Check if the parse resulted in a single element child within the body
+        if (doc.body().childrenSize() > 0) {
+            Element el = doc.body().child(0); // Get the first element child of body
+            // Ensure the parsed element has a non-empty tag name
+            if (!el.tagName().isEmpty()) {
+                decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), isDoctype);
                 decl.attributes().addAll(el.attributes());
             }
+        }
+        // If parsing failed, didn't produce an element in the body, or tag name was empty, decl remains null.
         return decl;
     }
\ No newline at end of file
