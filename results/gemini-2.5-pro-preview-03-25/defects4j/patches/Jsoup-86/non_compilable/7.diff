diff --git a/tmp/7c27700c-c751-4797-a6ff-4f654b4b1b02_buggy.java b/tmp/532b773e-fd95-41c6-b716-3666c8d50c15_fixed.java
index b8e7fdb..6208feb 100644
--- a/tmp/7c27700c-c751-4797-a6ff-4f654b4b1b02_buggy.java
+++ b/tmp/532b773e-fd95-41c6-b716-3666c8d50c15_fixed.java
@@ -1,15 +1,87 @@
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.NodeUtils;
+import org.jsoup.nodes.XmlDeclaration;
+import org.jsoup.parser.Parser;
+
+// Stub for the context class
+abstract class BaseComment {
+    abstract String getData();
+    abstract String baseUri();
+}
+
+// Class containing the fixed function (assuming it extends or uses BaseComment)
+class Comment extends BaseComment {
+    private String data;
+    private String baseUri;
+
+    // Constructor or methods to set data and baseUri needed for testing
+    public Comment(String data, String baseUri) {
+        this.data = data;
+        this.baseUri = baseUri;
+    }
+    @Override
+    String getData() { return data; }
+    @Override
+    String baseUri() { return baseUri; }
+
+
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
+
+        // Basic validation for <?...> or <!...> structure. Needs at least 2 chars.
+        if (data.length() < 2) {
+             return null;
+        }
+        // Must start with ? or !
+        if (!(data.startsWith("!") || data.startsWith("?"))) {
+            return null;
+        }
+
+        // Prevent StringIndexOutOfBoundsException on substring for length 1 node.data (e.g., "?")
+        // The previous check data.length() < 2 already covers this, but checking explicitly is fine.
+        // Example: data = "?", length = 1. Fails length < 2 check.
+        // Example: data = "??", length = 2. coreData = "".
+        // Example: data = "?a?", length = 3. coreData = "a".
+        String coreData = data.substring(1, data.length() - 1);
+
+        // If the core data is blank (e.g., from <? > or <??>), it's not a valid declaration name
+        if (coreData.trim().isEmpty()) {
+            return null;
+        }
+
         XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
+        try {
+            // Parse the core data as a standalone XML document fragment.
+            // Wrap in "<>" to make it parsable as a tag.
+            // Use a fresh parser instance to avoid modifying any shared settings.
+            Document doc = Jsoup.parse("<" + coreData + ">", baseUri(), Parser.xmlParser());
+
+            // Check if the parsing resulted in any element children in the body
+            // Note: Jsoup.parse creates html/head/body structure. We look for children of the body.
+            // Or simpler: check the direct children of the doc. XML parser may not create html/body.
+            // Let's test doc.children() directly as the original code did (implicitly via doc.child(0))
+            if (!doc.children().isEmpty()) { // Check if doc has direct Element children
+                Element el = doc.child(0); // Get the first element child
+                
+                // Create the XmlDeclaration using the parsed element's tag name and attributes
+                // Use the parser settings from the parsed doc to normalize the tag name
                 decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
-            decl.attributes().addAll(el.attributes());
+                decl.attributes().addAll(el.attributes()); // Copy attributes
+            }
+            // If doc.children() is empty, parsing "<coreData>" didn't yield a valid root element.
+        } catch (Exception e) {
+            // Catch potential exceptions during parsing (e.g., malformed coreData)
+            // If any exception occurs, treat it as not a valid XmlDeclaration.
+            // Log? For now, just return null as per original behavior on failure.
+            return null;
+        }
+
+        return decl; // Return the created XmlDeclaration or null
     }
-        return decl;
 }
\ No newline at end of file
