diff --git a/tmp/09fbe60e-0f59-43ee-98e8-5994ff7957e8_buggy.java b/tmp/af2fb398-d714-44fd-8110-126fc1454a6c_fixed.java
index b8e7fdb..e7ba845 100644
--- a/tmp/09fbe60e-0f59-43ee-98e8-5994ff7957e8_buggy.java
+++ b/tmp/af2fb398-d714-44fd-8110-126fc1454a6c_fixed.java
@@ -1,15 +1,88 @@
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Node;
+// NodeUtils is not strictly needed if we create a temporary parser for settings
+// import org.jsoup.nodes.NodeUtils; 
+import org.jsoup.nodes.XmlDeclaration;
+import org.jsoup.parser.Parser;
+
+// Context is the Comment class, inheriting from Node and having access to getData() and baseUri()
+// Example stub for context:
+// abstract class Comment extends org.jsoup.nodes.Node {
+//    public abstract String getData();
+// }
+
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
+        // Basic checks for potential XML Declaration or <!DECL> structure.
+        // Needs <? ... ?> or <! ... >. Minimum length 2 for ?X or !X to allow substring(1)
+        if (data == null || data.length() < 2) {
+            return null;
+        }
+
+        boolean isDecl = data.startsWith("!"); // True for <!DOCTYPE etc.
+        boolean isPi = data.startsWith("?");   // True for <?xml or <?pi processing instructions
+        if (!(isDecl || isPi)) {
+            return null; // Doesn't start with expected characters '?' or '!'
+        }
+
         XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
+        try {
+            // Create a parser instance to use its settings for normalization and parsing.
+            // Using a new instance avoids potential issues with shared state if NodeUtils.parser(doc) was used on a temp doc.
+            Parser parser = Parser.xmlParser();
+
+            // Extract the core data between markers.
+            String coreData = data.substring(1); // Strip first char (?, !)
+            // Strip trailing '?' only if it's a PI (starts with '?') and the core data ends with '?'
+            // Ensure coreData has content before checking endswith and substringing again
+            if (isPi && coreData.length() > 0 && coreData.endsWith("?")) {
+                 coreData = coreData.substring(0, coreData.length() - 1);
+            }
+            // Note: We don't strip trailing '>' for <!...> as data usually doesn't include it (e.g., "!DOCTYPE html")
+            // or for <?...> as data might be "?foo>" - parsing "<foo>>" seems okay with XML parser.
+
+            if (coreData.trim().isEmpty()) { // If nothing substantial left, return null
+                 return null; // Handles <?>, <!>, <? ?>, etc.
+            }
+
+            // Parse the core data by wrapping it in pointy braces, using the XML parser.
+            // Use Jsoup.parse which creates a full Document. Base URI defaults to empty string if null.
+            String parseInput = "<" + coreData + ">";
+            Document doc = Jsoup.parse(parseInput, baseUri() != null ? baseUri() : "", parser);
+
+            // We expect the parse to result in exactly one Element child node overall.
+            // Jsoup.parse might place the element in doc.body() or directly under doc.
+            Element el = null;
+            // Check if body exists, has exactly one child element, and the doc only contains <html> child.
+            if (doc.body() != null && doc.body().children().size() == 1 && doc.children().size() == 1 && doc.child(0).nodeName().equals("html")) {
+                 el = doc.body().child(0);
+            } 
+            // Check if doc has exactly one child, which is an element (e.g. <!DOCTYPE html> parses to <DOCTYPE..>, or <?xml?> to <xml?>)
+            // Ensure body is empty in this case to confirm the element wasn't put there instead.
+            else if (doc.children().size() == 1 && doc.child(0) instanceof Element) {
+                 if (doc.body() == null || doc.body().children().isEmpty()) {
+                    el = (Element) doc.child(0);
+                 }
+            }
+
+            // If we found exactly one suitable element:
+            if (el != null) {
+                 // Create XmlDeclaration using the element's tag name and attributes.
+                 // isDecl flag is true if the original comment data started with '!', determining <! or <? output style.
+                 decl = new XmlDeclaration(parser.settings().normalizeTag(el.tagName()), isDecl);
                  decl.attributes().addAll(el.attributes());
             }
+
+        } catch (Exception e) {
+            // On any exception during processing (e.g. StringIndexOutOfBoundsException, Jsoup parse error), return null safely.
+            decl = null;
+        }
+
         return decl;
     }
\ No newline at end of file
