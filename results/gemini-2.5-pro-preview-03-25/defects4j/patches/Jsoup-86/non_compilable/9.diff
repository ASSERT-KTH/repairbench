diff --git a/tmp/37d65618-7f86-49d8-89a6-7e45aa8e5841_buggy.java b/tmp/5b57700f-ad48-4544-9c20-38841a2a44fd_fixed.java
index b8e7fdb..1cafa77 100644
--- a/tmp/37d65618-7f86-49d8-89a6-7e45aa8e5841_buggy.java
+++ b/tmp/5b57700f-ad48-4544-9c20-38841a2a44fd_fixed.java
@@ -1,15 +1,68 @@
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Attribute;
+import org.jsoup.nodes.Attributes;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Node;
+import org.jsoup.nodes.NodeUtils;
+import org.jsoup.nodes.XmlDeclaration;
+import org.jsoup.parser.Parser;
+import org.jsoup.select.Elements; // Imported for clarity, though not directly used in the final code.
+import java.util.List;
+
+// The context assumes this method is part of a class like org.jsoup.nodes.Comment
+// which extends org.jsoup.nodes.Node and has access to getData(), baseUri() etc.
+
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
-        String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
+        String data = getData(); // Content of the comment node.
+
+        // Check for potential XML Declaration (<?...?>) or DOCTYPE (<!...>)
+        // Need at least 3 chars minimum, e.g., <?a?> or <!a>
+        // Added check for length >= 3 to avoid StringIndexOutOfBoundsException in substring
+        // and to ensure there's actual content inside the markers.
+        if (data.length() < 3 || !(data.startsWith("?") || data.startsWith("!"))) {
+             return null;
+        }
+
+        // Extract the core content, removing the first and last characters (? or ! and > or ?)
+        String coreData = data.substring(1, data.length() - 1);
+
+        // If the core data is empty or just whitespace (e.g., comment was <? ?>), it's not a valid declaration.
+        if (coreData.trim().isEmpty()) {
+            return null;
+        }
+
         XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
+        try {
+            // Parse the core data, wrapped in "<>", as an XML fragment.
+            // This is better than creating a full Document, as it directly parses the intended content.
+            // For <?xml version="1.0"?>, coreData is "xml version="1.0"", we parse "<xml version="1.0">"
+            // For <!DOCTYPE html>, coreData is "DOCTYPE html", we parse "<DOCTYPE html>"
+            // We use the static xmlParser instance for parsing and settings.
+            Parser xmlParser = Parser.xmlParser();
+            List<Node> nodes = Parser.parseXmlFragment("<" + coreData + ">", baseUri(), xmlParser);
+
+            // Check if parsing produced at least one node, and the first node is an Element.
+            if (!nodes.isEmpty() && nodes.get(0) instanceof Element) {
+                Element el = (Element) nodes.get(0);
+
+                // Create the XmlDeclaration using the element's tag name and attributes.
+                // Normalize the tag name using the XML parser's settings.
+                decl = new XmlDeclaration(NodeUtils.parser(xmlParser).settings().normalizeTag(el.tagName()), data.startsWith("!"));
                 decl.attributes().addAll(el.attributes());
             }
-        return decl;
+            // If not an element or parsing resulted in no nodes, decl remains null.
+
+        } catch (Exception e) {
+            // If any exception occurs during parsing (e.g., very malformed XML in coreData),
+            // treat it as not being a valid declaration. Return null.
+            // Logging could be added here if needed: // Log.warn("Exception parsing comment data for XML Declaration", e);
+            decl = null; // Ensure decl is null in case of exception.
+        }
+
+        return decl; // Return the declaration if successfully parsed, otherwise null.
     }
\ No newline at end of file
