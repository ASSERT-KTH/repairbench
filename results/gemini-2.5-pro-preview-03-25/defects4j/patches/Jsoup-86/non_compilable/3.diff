diff --git a/tmp/e461570a-4e85-4aaf-8088-1594cb04bb29_buggy.java b/tmp/e29ba24b-99a7-42ca-839d-a46bfce4a1c5_fixed.java
index b8e7fdb..0a48d20 100644
--- a/tmp/e461570a-4e85-4aaf-8088-1594cb04bb29_buggy.java
+++ b/tmp/e29ba24b-99a7-42ca-839d-a46bfce4a1c5_fixed.java
@@ -1,15 +1,63 @@
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.NodeUtils;
+import org.jsoup.nodes.XmlDeclaration;
+import org.jsoup.parser.Parser;
+
+// The following code snippet assumes it is part of the org.jsoup.nodes.Comment class or a similar class
+// that has access to `getData()` and `baseUri()` methods inherited from org.jsoup.nodes.Node.
+
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
+
+        // Basic check for length required by substring(1, length-1)
+        // Needs length >= 2 for substring(1,1) = "", length >= 3 for non-empty content.
+        // Examples like "?", "?>", "!", "<!" are too short.
+        if (data.length() <= 2) {
+            return null;
+        }
+
+        String parseContent;
+        try {
+            // The original code assumes the core content is between the first and last characters
+            // of the comment data. E.g., for "<!--?xml version='1.0'?-->", data is "?xml version='1.0'?".
+            // substring(1, data.length() - 1) yields "xml version='1.0'".
+            // This is wrapped in "<...>" for parsing.
+            parseContent = "<" + data.substring(1, data.length() - 1) + ">";
+        } catch (StringIndexOutOfBoundsException e) {
+            // This might happen if data length is <= 1, but that's caught above.
+            // Could also happen with unusual data structures, return null.
+            return null;
+        }
+
+        // Create a fresh XML parser for the temporary parse.
+        // Use the base URI of the original node.
+        Parser parser = Parser.xmlParser();
+        Document doc = Jsoup.parse(parseContent, baseUri(), parser);
         XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
+
+        // ** FIX **: Check for element children specifically, not just any node type.
+        // The original code used doc.childNodeSize() which includes text nodes, comments, etc.
+        // If the parsed content only contained non-element nodes (e.g., parsing "< just text >"),
+        // doc.child(0) would fail as it retrieves the first *element* child.
+        if (doc.children().size() > 0) {
+            Element el = doc.child(0); // Safe now, as we know at least one element child exists.
+            // Get the normalized tag name from the parsed element (e.g., lowercase).
+            String name = parser.settings().normalizeTag(el.tagName());
+            // The boolean flag in XmlDeclaration constructor indicates if it's treated as a processing instruction
+            // (like <!DOCTYPE>, which renders as a comment) vs. a standard <?xml?> declaration.
+            // This is determined by checking if the *original* comment data started with '!'.
+            boolean isProcessingInstruction = data.startsWith("!");
+            decl = new XmlDeclaration(name, isProcessingInstruction);
+            // Copy attributes found on the parsed element.
             decl.attributes().addAll(el.attributes());
+            // The new XmlDeclaration node is standalone here. Parentage and base URI etc.
+            // are implicitly handled when this node is inserted into the main tree by the caller.
         }
         return decl;
     }
