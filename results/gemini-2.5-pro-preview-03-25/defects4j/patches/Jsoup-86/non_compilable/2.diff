diff --git a/tmp/12dbf631-bbcc-4009-a34e-6c9d73ed431c_buggy.java b/tmp/01f02641-7036-4da7-8da2-ffec170128d8_fixed.java
index b8e7fdb..cff0a03 100644
--- a/tmp/12dbf631-bbcc-4009-a34e-6c9d73ed431c_buggy.java
+++ b/tmp/01f02641-7036-4da7-8da2-ffec170128d8_fixed.java
@@ -1,15 +1,46 @@
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
+        // Make sure comment data is potentially structured like <?...> or <!...>
+        // Need at least 3 chars E.g. <!> or <?>
+        if (data.length() <= 2 || (!data.startsWith("!") && !data.startsWith("?"))) {
+            return null;
+        }
+
+        String declaration = data.substring(1, data.length() - 1);
+        // Avoid parsing if the content is effectively empty
+        if (declaration.trim().isEmpty()) {
+            return null;
+        }
+
+        // Use a temporary document to parse the declaration content
+        // Inherit the base URI and use the XML parser settings.
+        // Use a parser that matches the current node's document settings if possible
+        Parser parser = Parser.xmlParser(); // Default to xml parser
+        if (ownerDocument() != null && ownerDocument().parser() != null) { // Should always be true, but defensive
+             parser = ownerDocument().parser().newInstance(); // Create a new instance to avoid side effects
+        }
+        // Setup parser to parse XML
+        parser.settings(parser.settings().preserveCase(true)); // XML is case sensitive
+
+        Document doc = Jsoup.parse("<" + declaration + ">", baseUri(), parser);
         XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
+        Element el = doc.firstElementChild(); // Get the first element child, if any
+
+        if (el != null) {
+            // We have a valid element structure derived from the comment's content
+            try {
+                // Use the tag name and attributes from the parsed element
+                // The normalizeTag logic comes from the parser's settings used for 'doc'
                 decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
                 decl.attributes().addAll(el.attributes());
+            } catch (IllegalArgumentException e) {
+                // In case the parsed tag name is somehow invalid for XmlDeclaration
+                decl = null;
+            }
         }
         return decl;
     }
\ No newline at end of file
