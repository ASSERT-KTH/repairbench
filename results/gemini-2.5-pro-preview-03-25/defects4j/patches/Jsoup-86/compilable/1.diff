diff --git a/tmp/038603c2-87b0-4a42-8368-4cd269eb460f_buggy.java b/tmp/7db97f19-2838-4ad0-a7c9-80c38a9f48de_fixed.java
index b8e7fdb..6907f8d 100644
--- a/tmp/038603c2-87b0-4a42-8368-4cd269eb460f_buggy.java
+++ b/tmp/7db97f19-2838-4ad0-a7c9-80c38a9f48de_fixed.java
@@ -1,15 +1,34 @@
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
+        // Avoid exceptions for comments too short for substring(1, length - 1)
+        // Requires at least "?>" or "!>" or similar patterns that substring logic expects.
+        // A data like "?" or "!" would cause StringIndexOutOfBoundsException on substring.
+        // A data like "??" or "!!" would result in empty parseable string.
+        if (data == null || data.length() <= 1) {
+             return null;
+        }
+
+        String parseable = data.substring(1, data.length() - 1);
+        // Avoid parsing just "<>" e.g. if data was "??" or "!!"
+        // Also trims, which is useful perhaps? Keep trim for robustness.
+        if (org.jsoup.internal.StringUtil.isBlank(parseable)) {
+             return null;
+        }
+
+        // Parse the content attempt in a pseudo tag "<content>"
+        // Use a temporary parser settings object to just get the normalized tag name
+        Document doc = Jsoup.parse("<" + parseable + ">", baseUri(), Parser.xmlParser());
         XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
+        // Check children().size() not childNodeSize(), to ensure we have an Element child.
+        // If the parsed content only yields text nodes (e.g., "< text>"), childNodeSize > 0 but children == 0.
+        if (doc.children().size() > 0) {
+            Element el = doc.child(0); // Element child must exist here
+            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!")); // Preserves original logic for 2nd arg
             decl.attributes().addAll(el.attributes());
         }
         return decl;
     }
