diff --git a/tmp/d0058a57-0a80-4f43-b2f2-baaecc5c6287_buggy.java b/tmp/3eceb31c-28d6-44ca-bd1d-9212ac1752db_fixed.java
index f47d784..6a02c49 100644
--- a/tmp/d0058a57-0a80-4f43-b2f2-baaecc5c6287_buggy.java
+++ b/tmp/3eceb31c-28d6-44ca-bd1d-9212ac1752db_fixed.java
@@ -1,12 +1,24 @@
   @Override
   public void process(Node externs, Node root) {
+    // Run VarCheck itself.
     NodeTraversal.traverse(compiler, root, this);
-    if (MAKE_LOCAL_NAMES_UNIQUE) {
-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
-      NodeTraversal t = new NodeTraversal(compiler, renamer);
-      t.traverseRoots(externs, root);
-    }
+    // NOTE(nicksantos): If we run VarCheck before FunctionInjector, we may save
+    // a lot of time. But FunctionInjector does some weird things to the scope
+    // that VarCheck depends on. If we run VarCheck after FunctionInjector,
+    // we may miss some warnings. We run VarCheck both before and after.
+    // For now, remove the MakeDeclaredNamesUnique pass from the first run,
+    // and only run it after FunctionInjector.
+
+    // TODO(nicksantos): Re-enable this pass after FunctionInjector allows it.
+    // if (MAKE_LOCAL_NAMES_UNIQUE) {
+    //   MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
+    //   NodeTraversal t = new NodeTraversal(compiler, renamer);
+    //   t.traverseRoots(externs, root);
+    // }
+
+    // Run this pass again after injecting functions, omitting the traversal
+    // of the initial code. (The VariableMap functions are added manually.)
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
\ No newline at end of file
