diff --git a/tmp/abb4da8e-cb55-4ae6-9c0d-edad9badfd8d_buggy.java b/tmp/7904e9c0-2d66-40f0-89d2-effa5cb6ebc1_fixed.java
index f47d784..6e30431 100644
--- a/tmp/abb4da8e-cb55-4ae6-9c0d-edad9badfd8d_buggy.java
+++ b/tmp/7904e9c0-2d66-40f0-89d2-effa5cb6ebc1_fixed.java
@@ -1,12 +1,28 @@
   @Override
   public void process(Node externs, Node root) {
-    NodeTraversal.traverse(compiler, root, this);
+    // Make local names unique first, so that the Normalize pass runs on
+    // code with unique names. This prevents potential issues with logic
+    // in Normalize that might rely on names being unique.
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
+      // Traverse both externs and root to ensure all names are handled.
       t.traverseRoots(externs, root);
     }
+
+    // Run the main normalization traversal.
+    // Pass 'this' as the callback, assuming 'this' is the Normalize instance.
+    // Traverse both externs and root for consistency.
+    NodeTraversal mainTraversal = new NodeTraversal(compiler, this);
+    mainTraversal.traverseRoots(externs, root);
+
+    // Remove duplicate declarations potentially introduced or made redundant
+    // by previous passes. Running only on root might be intentional,
+    // assuming externs are well-formed or handled differently.
     removeDuplicateDeclarations(root);
+
+    // Propagate constant annotations. This pass often runs after normalization
+    // as it might rely on the simplified structure.
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
\ No newline at end of file
