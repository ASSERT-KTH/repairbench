diff --git a/tmp/2af9e3d5-c2fe-4b69-a3da-3073d8eb6d7b_buggy.java b/tmp/54f3d142-4c9e-4d7e-84dd-a6c7e49fe92c_fixed.java
index f47d784..4315142 100644
--- a/tmp/2af9e3d5-c2fe-4b69-a3da-3073d8eb6d7b_buggy.java
+++ b/tmp/54f3d142-4c9e-4d7e-84dd-a6c7e49fe92c_fixed.java
@@ -1,12 +1,27 @@
   @Override
   public void process(Node externs, Node root) {
+    // Collect information about declarations potentially shadowing built-ins (like arguments)
+    // and other variable checks.
     NodeTraversal.traverse(compiler, root, this);
+
+    // Remove duplicate declarations found during the traversal. This needs to happen
+    // before potentially renaming variables, as renaming might obscure the duplication
+    // or interfere with the logic for removing declarations shadowing built-ins like 'arguments'.
+    removeDuplicateDeclarations(root);
+
+    // Make local names unique if required. This needs to run after initial checks
+    // and duplicate removal but before subsequent passes that might rely on unique names.
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
+      // Note: Renaming should be applied to both externs and root to ensure
+      // consistency, even though duplicates are only removed from root.
+      // However, the original code traversed roots for renaming, so we keep that pattern.
       t.traverseRoots(externs, root);
     }
-    removeDuplicateDeclarations(root);
+
+    // Propagate constant annotations. This pass typically runs after variable checks
+    // and normalization steps.
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
\ No newline at end of file
