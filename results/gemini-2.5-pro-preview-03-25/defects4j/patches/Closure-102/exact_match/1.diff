diff --git a/tmp/1592ecca-6d76-46ca-ac07-6619b9717515_buggy.java b/tmp/e2618ecf-2741-4cbb-89fb-b32e4cd7ae8f_fixed.java
index f47d784..080b34a 100644
--- a/tmp/1592ecca-6d76-46ca-ac07-6619b9717515_buggy.java
+++ b/tmp/e2618ecf-2741-4cbb-89fb-b32e4cd7ae8f_fixed.java
@@ -1,12 +1,27 @@
   @Override
   public void process(Node externs, Node root) {
+    // Ensure that the initial pass (likely VarCheck or similar) runs first.
     NodeTraversal.traverse(compiler, root, this);
+
+    // It's possible that removeDuplicateDeclarations needs to run before
+    // MakeDeclaredNamesUnique to handle the 'var arguments' case correctly,
+    // potentially simplifying it in a way that prevents incorrect renaming.
+    // The original bug (Issue 115) was fixed by modifying MakeDeclaredNamesUnique
+    // directly to not rename 'arguments'. Without modifying that class,
+    // changing the order of passes is the most plausible approach within this method.
+    removeDuplicateDeclarations(root);
+
+    // Run MakeDeclaredNamesUnique after removeDuplicateDeclarations.
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
+      // Ensure renaming happens in both externs and root, as originally done.
+      // Although the 'arguments' issue is specific to function scope (root),
+      // maintaining traversal of externs is safer if other renaming relies on it.
       t.traverseRoots(externs, root);
     }
-    removeDuplicateDeclarations(root);
+
+    // Run PropogateConstantAnnotations last in this sequence.
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
\ No newline at end of file
