diff --git a/tmp/d3c8be96-d40b-48df-a3f0-b63256001a1b_buggy.java b/tmp/e762310f-1273-4195-8494-27acb1465adb_fixed.java
index 81872ca..6582d97 100644
--- a/tmp/d3c8be96-d40b-48df-a3f0-b63256001a1b_buggy.java
+++ b/tmp/e762310f-1273-4195-8494-27acb1465adb_fixed.java
@@ -1,70 +1,94 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle cases of leading NUL or all NULs gracefully
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        // Keep track of the last non-space/NUL character seen
+        byte trailer = buffer[end - 1]; // Initial trailer check
+        // Loop needs to be simplified and check bounds correctly
+        while (start < end) {
+            final byte currentByte = buffer[end - 1];
+            if (currentByte == 0 || currentByte == ' '){
                 end--;
+            } else {
+                break; // Found last non-space/NUL
+            }
+            // Update trailer variable for exception message, although it's not used if start == end
+            if (start < end) {
                 trailer = buffer[end - 1];
             }
+        }
+
+
+        // If after skipping leading spaces and trimming trailing NUL/spaces,
+        // nothing is left, it means the field was effectively empty or contained only spaces/NULs.
+        // This should be treated as zero.
         if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+            // Instead of throwing an exception, return 0L for fields like " " or " \0"
+             return 0L;
+//            throw new IllegalArgumentException(
+//                    exceptionMessage(buffer, offset, length, start, trailer)); // Original buggy code threw exception here
         }
 
+        // Now parse the digits
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // Use the actual invalid byte in the exception message
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method exceptionMessage needs to be included if it's not available elsewhere
+    // For the fix, assuming exceptionMessage exists and is correct.
+    // private static String exceptionMessage(...) { ... }
\ No newline at end of file
