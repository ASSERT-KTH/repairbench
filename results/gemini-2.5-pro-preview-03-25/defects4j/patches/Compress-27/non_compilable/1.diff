diff --git a/tmp/3129b548-892c-408d-94ca-d6d30d1380df_buggy.java b/tmp/49132ec9-2a9e-4ddc-b86a-89069949a314_fixed.java
index 81872ca..5516ba7 100644
--- a/tmp/3129b548-892c-408d-94ca-d6d30d1380df_buggy.java
+++ b/tmp/49132ec9-2a9e-4ddc-b86a-89069949a314_fixed.java
@@ -1,70 +1,105 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if a invalid byte is detected.
+     *         (Note: The exception for missing trailer is effectively removed by the fix).
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
-        int     end = offset + length;
+        int     initialEnd = offset + length; // Use a different variable for initial end
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
+        while (start < initialEnd){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        // Use a local variable 'end' for the effective end after trimming.
+        int end = initialEnd;
+        while (start < end) {
+            final byte currentTrailer = buffer[end - 1];
+            if (currentTrailer == 0 || currentTrailer == ' ') {
+                end--; // Reduce the effective end
+            } else {
+                break; // Found the last non-trailer character (or start reached end)
             }
+        }
+
+        // If start == end, it means the buffer contained only spaces/NULs
+        // after the initial characters, or was empty to begin with after skipping spaces.
+        // Return 0L in this case, consistent with handling of missing fields or all-NUL buffers.
         if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+            // Previous code threw an exception based on the last character looked at during trimming,
+            // which could be misleading if the effective string was empty.
+            // throw new IllegalArgumentException(
+            //         exceptionMessage(buffer, offset, length, start, trailer)); // 'trailer' byte here was problematic
+             return 0L; // FIX: Return 0 for empty effective value after trimming.
         }
 
+        // Now, parse digits between the determined start and end points.
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // Found an invalid (non-octal) character within the determined range.
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist elsewhere for creating exception messages.
+    // Included here for completeness of the thought process, but not part of the required function output.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int badIdx, byte badByte) {
+         StringBuilder sb = new StringBuilder();
+         sb.append("Invalid byte ").append(badByte).append(" at offset ").append(badIdx - offset);
+         sb.append(" in '");
+         final int MAX_DUMP_LEN = 30;
+         int dumpLen = Math.min(length, MAX_DUMP_LEN);
+         for (int i = 0; i < dumpLen; ++i) {
+             byte b = buffer[offset + i];
+             if (b == 0) {
+                 sb.append("{NUL}");
+             } else {
+                 sb.append((char) b);
+             }
+         }
+         if (length > MAX_DUMP_LEN) {
+             sb.append("...");
+         }
+         sb.append("' len=").append(length);
+         return sb.toString();
+    }
\ No newline at end of file
