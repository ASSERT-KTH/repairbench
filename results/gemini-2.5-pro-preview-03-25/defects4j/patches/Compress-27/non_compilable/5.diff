diff --git a/tmp/3ab3981d-fa1f-439d-abda-772847c8b61a_buggy.java b/tmp/a6a0a6f6-6f30-4ab7-9813-66756e655bcb_fixed.java
index 81872ca..e64d6b4 100644
--- a/tmp/3ab3981d-fa1f-439d-abda-772847c8b61a_buggy.java
+++ b/tmp/a6a0a6f6-6f30-4ab7-9813-66756e655bcb_fixed.java
@@ -1,70 +1,85 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Detect leading NUL since Compress 1.4
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        // However, some extensions use the whole field, so we don't
+        // require a trailing NUL or space if the trailing byte is
+        // an octal digit.
+        int     trailer = end - 1; // current index of trailing character
+        while (start < end && (buffer[trailer] == 0 || buffer[trailer] == ' ')) {
             end--;
-            trailer = buffer[end - 1];
-        }
-        if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+            trailer--; // Point to the new trailing character
+            // If start == end, it means we saw only spaces and NULs
+            // which is valid (empty string parsing to 0)
         }
+        // No need to check 'start == end' here anymore.
+        // If the string became empty after trimming, the loop below
+        // won't execute and result will be 0, which is correct.
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method used by exception reporting in the original code.
+    // Included here for context, but not part of the required fix output.
+    private static String exceptionMessage(byte[] buffer, final int offset,
+                                           final int length, int current, final byte currentByte) {
+        String string = new String(buffer, offset, length);
+        string = string.replace("\0", "{NUL}"); // Replace NULs to print string
+        final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;
+        return s;
+    }
\ No newline at end of file
