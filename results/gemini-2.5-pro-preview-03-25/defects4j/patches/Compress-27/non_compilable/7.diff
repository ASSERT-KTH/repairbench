diff --git a/tmp/328eeae3-f271-4d36-bcd3-101799e0be2d_buggy.java b/tmp/a7aa40d8-246e-4016-b55e-db83fe2c1d0b_fixed.java
index 81872ca..04bd0a4 100644
--- a/tmp/328eeae3-f271-4d36-bcd3-101799e0be2d_buggy.java
+++ b/tmp/a7aa40d8-246e-4016-b55e-db83fe2c1d0b_fixed.java
@@ -1,70 +1,103 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle cases of leading NUL or all NULs
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
+        // If all spaces, return 0
+        if (start == end) {
+            return 0L;
+        }
+
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        // This loop needs to be careful about bounds checking.
+        int realEnd = end; // Store original end for exception message
+        byte trailer = buffer[realEnd - 1]; // Read last char initially
+
+        // Loop while the pointer hasn't reached the start and the character is NUL or space
+        while (start < realEnd && (trailer == 0 || trailer == ' ')) {
+            realEnd--;
+            // Ensure we don't read before the start or decrement end too much
+            if (start < realEnd) {
+                 trailer = buffer[realEnd - 1];
+            } else {
+                // If after trimming, start == realEnd, it means all were spaces/NULs
+                // from the initial start position onwards.
+                break;
+            }
         }
-        if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+
+        // If after trimming leading spaces and trailing NUL/spaces,
+        // nothing is left, return 0. This handles inputs like " \0" or " ".
+        if (start == realEnd) {
+             return 0L;
         }
 
-        for ( ;start < end; start++) {
+        // Now parse the digits between start and realEnd
+        for ( ;start < realEnd; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist, used by the original code for exceptions.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {
+        String M = "Invalid byte "+currentByte+" at offset "+(currentOffset - offset)+" in '";
+        try {
+            M += new String(buffer, offset, length, "UTF-8"); // Or appropriate encoding
+        } catch (Exception e) {
+             // Fallback or rethrow
+             M += "[unparseable buffer content]";
+        }
+        M += "' len="+length;
+        return M;
+    }
\ No newline at end of file
