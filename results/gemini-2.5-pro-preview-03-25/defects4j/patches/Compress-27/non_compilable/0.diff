diff --git a/tmp/4a5e287c-1bb9-4d73-9ef1-fb65422f83b9_buggy.java b/tmp/f406239e-bf2a-457e-b77a-b93b9c79e8f9_fixed.java
index 81872ca..f735962 100644
--- a/tmp/4a5e287c-1bb9-4d73-9ef1-fb65422f83b9_buggy.java
+++ b/tmp/f406239e-bf2a-457e-b77a-b93b9c79e8f9_fixed.java
@@ -1,70 +1,104 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL. This is sufficient for "all NULs" as well if the first byte is NUL.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
+        // Trim trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        // Keep trimming from the end while we see NUL or space.
+        int realEnd = end; // Use a different variable for the end of octal digits
+        while (realEnd > start) {
+            final byte currentByte = buffer[realEnd - 1];
+            if (currentByte == 0 || currentByte == ' ') {
+                realEnd--;
+            } else {
+                break; // Found a non-terminator character
             }
-        if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
         }
 
-        for ( ;start < end; start++) {
+        // After skipping leading spaces and trimming trailing NULs/spaces,
+        // if start == realEnd, it means the buffer contained only spaces and/or NULs.
+        // Example: {' ', 0} -> start=1, end=2 -> trim 0 -> realEnd=1. start == realEnd. Returns 0.
+        // Example: {' ', ' '} -> start=2, end=2 -> trim nothing -> realEnd=2. start == realEnd. Returns 0.
+        // This should be treated as 0, similar to the leading NUL case.
+        if (start == realEnd) {
+             // Original code threw exception here, causing the test failure for {' ', 0}
+             return 0L;
+        }
+
+        // Parse octal digits from start up to the potentially reduced end (realEnd).
+        for ( ;start < realEnd; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // Use the original offset and length in the exception message for context
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method used by the original code (and the fix) to generate exception messages.
+    // This method is assumed to exist elsewhere in the TarUtils class.
+    private static String exceptionMessage(byte[] buffer, final int offset,
+                                           final int length, int currentOffset, final byte currentByte) {
+        String Tmp = null;
+        try {
+            // Attempt to decode using a common TAR encoding that preserves ASCII
+            Tmp = new String(buffer, offset, length, "ISO-8859-1");
+        } catch (final java.io.UnsupportedEncodingException e) {
+            // Should generally not happen with ISO-8859-1, but fallback just in case
+            Tmp = new String(buffer, offset, length); // Use default charset
+        }
+        // Replace NUL characters for clearer display in the message
+        Tmp = Tmp.replace('\0', '{NUL}');
+        // Construct the error message including the byte value, its offset within the segment,
+        // the segment content, and the segment length.
+        final String err = "Invalid byte " + currentByte + " at offset " + (currentOffset - offset) + " in '" + Tmp + "' len=" + length;
+        return err;
+    }
\ No newline at end of file
