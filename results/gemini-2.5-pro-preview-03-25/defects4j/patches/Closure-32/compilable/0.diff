diff --git a/tmp/41ba9853-0eee-437b-a0fc-0ced5df5e49c_buggy.java b/tmp/0d2dd977-79b1-4a60-9349-ca1483cce56e_fixed.java
index 4be01ab..a6c4d6f 100644
--- a/tmp/41ba9853-0eee-437b-a0fc-0ced5df5e49c_buggy.java
+++ b/tmp/0d2dd977-79b1-4a60-9349-ca1483cce56e_fixed.java
@@ -1,115 +1,163 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
+   * Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // If the block starts directly with EOC or EOF, it's empty.
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
         return new ExtractionInfo("", token);
     }
 
+    // Track if we need to ignore a leading star on the next line.
+    // This is true initially if the passed-in token is EOL.
+    boolean ignoreStar = token == JsDocToken.EOL;
+
+    // Skip any initial EOL tokens.
+    while (token == JsDocToken.EOL) {
+        ignoreStar = true; // Mark that we encountered EOL.
+        token = next();
+        // Check again for immediate EOC/EOF after the EOL.
+        if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
+          // Block contained only EOLs.
+          return new ExtractionInfo("", token);
+        }
+    }
+
+    // Now 'token' is the first non-EOL token. Record its start position.
     stream.update();
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
+    int startCharno = stream.getCharno();
 
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
-
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    boolean requiresSeparator = false; // Track if a space is needed before the next token.
+    String line; // To hold content from getRemainingJSDocLine.
 
     do {
         switch (token) {
             case STAR:
                 if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+                    // This star is the optional leading '*' on a comment line. Ignore it.
+                    ignoreStar = false; // Handled the potential star for this line.
+                    requiresSeparator = false; // Star itself doesn't require separation.
+                    token = next(); // Consume the star, move to the next token.
+
+                    if (option == WhitespaceOption.PRESERVE) {
+                        // If preserving whitespace, capture the rest of the line verbatim,
+                        // including leading whitespace after the star.
+                        stream.update(); // Ensure stream is positioned at start of content.
+                        line = stream.getRemainingJSDocLine();
+                        builder.append(line);
+                        // Need separator if non-whitespace was appended.
+                        requiresSeparator = line.trim().length() > 0;
+                        // Consume the EOL/next token after this line.
+                        token = next();
+                    }
+                    // If not PRESERVE, the tokenizer handles whitespace, so just continue.
+                    continue; // Process the token found after the star/line.
+
                 } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+                    // This star is part of the actual text content.
+                    if (requiresSeparator) {
                         builder.append(' ');
                     }
-
                     builder.append('*');
-          }
-
+                    requiresSeparator = true; // Star acts as content needing separation.
                     token = next();
                     continue;
+                }
 
             case EOL:
                 if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
+                    // Append newline. Trim trailing space first unless preserving whitespace.
+                    if (option != WhitespaceOption.PRESERVE) {
+                      // Trim trailing whitespace from builder before adding newline.
+                      while (builder.length() > 0 &&
+                             Character.isWhitespace(builder.charAt(builder.length() - 1))) {
+                          builder.setLength(builder.length() - 1);
                       }
-
-          ignoreStar = true;
+                    }
+                    builder.append('\n');
+                }
+                ignoreStar = true; // Expect a potential leading star on the next line.
+                requiresSeparator = false; // Reset separator flag for the new line.
                 token = next();
                 continue;
 
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+            // Handle termination conditions.
+            case ANNOTATION:
+                // Annotations terminate the block unless PRESERVE is set.
+                if (option != WhitespaceOption.PRESERVE) {
+                   // Fallthrough to shared termination code below.
+                } else {
+                   // If preserving, treat ANNOTATION as a normal content token.
+                   break; // Break out of switch to handle in default case.
+                }
+                // FALLTHROUGH for non-PRESERVE ANNOTATION
+            case EOC:
+            case EOF:
+                // Terminate extraction process.
                 String multilineText = builder.toString();
 
+                // Trim the final extracted text only if not preserving whitespace.
                 if (option != WhitespaceOption.PRESERVE) {
                     multilineText = multilineText.trim();
                 }
+                // Note: Depending on exact JSDoc specs, even PRESERVE might need
+                // some final cleanup, but typically it implies literal content.
 
+                // Calculate end position (using the start of the terminating token).
+                stream.update(); // Position stream at start of the current (terminating) token.
                 int endLineno = stream.getLineno();
                 int endCharno = stream.getCharno();
 
+                // Record the extracted text and its source location if non-empty.
                 if (multilineText.length() > 0) {
                     jsdocBuilder.markText(multilineText, startLineno, startCharno,
                                           endLineno, endCharno);
                 }
-
+                // Return the result and the token that caused termination.
                 return new ExtractionInfo(multilineText, token);
-          }
 
-          if (builder.length() > 0) {
+            default: // Handle all other regular tokens (and ANNOTATION if PRESERVE).
+                ignoreStar = false; // Any non-EOL token means subsequent STARs are content.
+
+                // Add a space separator if the previous token requires one.
+                if (requiresSeparator) {
                     builder.append(' ');
                 }
-          builder.append(toString(token));
 
+                // Append the string representation of the current token.
+                String tokenStr = toString(token);
+                builder.append(tokenStr);
+
+                // Append the rest of the content on the current line.
                 line = stream.getRemainingJSDocLine();
 
+                // Trim the end of this line unless preserving whitespace.
                 if (option != WhitespaceOption.PRESERVE) {
+                    // Assumes a utility function trimEnd(String) exists and works like String.trim() but only for the end.
+                    // If trimEnd is not available, use a regex or loop. Example:
+                    // line = line.replaceAll("\\s+$", "");
                     line = trimEnd(line);
                 }
-
                 builder.append(line);
+
+                // Determine if a space separator is needed before the *next* token.
+                // Needed if the current token string or the rest of the line added non-whitespace characters.
+                requiresSeparator = (tokenStr.trim().length() > 0 || line.trim().length() > 0);
+
+                // Advance to the next token.
                 token = next();
         }
-    } while (true);
+    } while (true); // Continue loop until an explicit return.
   }
\ No newline at end of file
