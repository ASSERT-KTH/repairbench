diff --git a/tmp/ed950faf-5e98-4a9c-b2c4-9ed0d5f042b5_buggy.java b/tmp/eb63040e-94bc-4a05-bda1-b7fc6b238461_fixed.java
index 4be01ab..4555186 100644
--- a/tmp/ed950faf-5e98-4a9c-b2c4-9ed0d5f042b5_buggy.java
+++ b/tmp/eb63040e-94bc-4a05-bda1-b7fc6b238461_fixed.java
@@ -1,115 +1,157 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
-  @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
+      // No text found.
       return new ExtractionInfo("", token);
     }
 
+    // Record the start position. stream.update() ensures lineno/charno are current.
     stream.update();
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
+    // Use 0-based charno. This is the position *after* the initial token (e.g., @preserve).
+    int startCharno = stream.getCharno();
 
-    // Read the content from the first line.
+    // Read the content from the first line following the initial token.
     String line = stream.getRemainingJSDocLine();
     if (option != WhitespaceOption.PRESERVE) {
+      // Trim whitespace for non-preserve options.
       line = line.trim();
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
+    // Change state to reflect that we are now looking for the end of the block
+    // or the next annotation.
     state = State.SEARCHING_ANNOTATION;
+    // Consume the rest of the first line, get the first token of the next line or block.
     token = next();
 
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
     do {
       switch (token) {
         case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+          // This case handles STAR tokens that are not at the beginning of a line
+          // immediately after EOL when in PRESERVE mode (those are handled in the EOL case).
+          // Treat as part of the text. Add preceding space only if not preserving.
+          if (option != WhitespaceOption.PRESERVE) {
+              if (builder.length() > 0 && !builder.toString().endsWith("\n") && !builder.toString().endsWith(" ")) {
                   builder.append(' ');
               }
-
+          }
           builder.append('*');
-          }
-
           token = next();
-          continue;
+          continue; // Re-evaluate the next token.
 
         case EOL:
+          // Append the newline character.
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
+          token = next(); // Get the token after EOL.
 
-          ignoreStar = true;
+          if (option == WhitespaceOption.PRESERVE) {
+              // Preserve mode: Handle leading whitespace and optional '*'
+              stream.update(); // Update position to the start of the token after EOL.
+              int charno = stream.getCharno(); // Get the column number.
+
+              if (token == JsDocToken.STAR) {
+                  // Leading star found. Consume it and get the next token's position.
                   token = next();
+                  stream.update();
+                  charno = stream.getCharno(); // Column number after the star.
+              } else if (token == JsDocToken.EOL || token == JsDocToken.EOF || token == JsDocToken.EOC) {
+                  // If the line is blank or ends the comment, charno might be 0 or irrelevant.
+                  // We might have appended a newline, but there's no more text on this line.
+                  // Continue the loop to handle the EOL/EOF/EOC token correctly.
                   continue;
+              }
+              // Append leading spaces based on the final column number.
+              for (int i = 0; i < charno; i++) {
+                  builder.append(' ');
+              }
+              // Fall through to process the token found after EOL/[*].
+          } else {
+              // Non-preserve mode: Skip optional leading star.
+              if (token == JsDocToken.STAR) {
+                  token = next(); // Consume the star.
+              }
+              // Continue the loop to process the next token without adding leading spaces.
+              continue;
+          }
+          // Fallthrough only happens for PRESERVE option.
+          // The current 'token' is the first significant one on the new line.
+          break; // Break from EOL case, the switch will evaluate 'token'.
 
         default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
+          // Process any other token (STRING, ANNOTATION in PRESERVE mode, etc.).
+          state = State.SEARCHING_ANNOTATION; // Ensure state is correct.
 
+          // Check for termination conditions.
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
+              // Annotations terminate the block unless PRESERVE is active.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
+
+            // Block terminated. Finalize the extracted text.
             String multilineText = builder.toString();
 
+            // Trim only if whitespace is not preserved.
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
 
+            // Record the end position (start of the terminating token).
+            stream.update();
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
+            // Mark the extracted text range in the JSDoc builder.
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
+            // Return the extracted text and the terminating token.
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
+          // Not a terminating token. Append the token and the rest of the line.
+          // Add space separator only if not preserving and needed.
+          if (option != WhitespaceOption.PRESERVE) {
+              if (builder.length() > 0 && !builder.toString().endsWith("\n") && !builder.toString().endsWith(" ")) {
                   builder.append(' ');
               }
+          }
+          // Append the string value of the token.
           builder.append(toString(token));
 
+          // Append the remaining text on the current line.
           line = stream.getRemainingJSDocLine();
-
           if (option != WhitespaceOption.PRESERVE) {
+             // Trim end of line if not preserving.
             line = trimEnd(line);
           }
-
           builder.append(line);
+
+          // Advance to the next token for the next iteration.
           token = next();
-      }
-    } while (true);
+          break; // Break from default case, continue loop.
+      } // End switch
+    } while (true); // End do-while loop
   }
\ No newline at end of file
