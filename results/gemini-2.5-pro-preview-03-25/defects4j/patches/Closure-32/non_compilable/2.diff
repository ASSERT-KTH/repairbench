diff --git a/tmp/827a4bfd-ae5b-46f5-9d74-f2948504d9a2_buggy.java b/tmp/6c861977-52d2-48ba-81e2-d8f0b5bf9910_fixed.java
index 4be01ab..ca2711e 100644
--- a/tmp/827a4bfd-ae5b-46f5-9d74-f2948504d9a2_buggy.java
+++ b/tmp/6c861977-52d2-48ba-81e2-d8f0b5bf9910_fixed.java
@@ -1,115 +1,118 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
-   * @param token The start token.
+   * @param token The start token (first token *after* the annotation name).
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // Handle cases where there's nothing after the annotation name.
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
+    // If the first token is EOL, skip it and start processing from the next line.
+    // The text content effectively starts on the next line.
+    if (token == JsDocToken.EOL) {
+       token = next();
+       // If we reached the end immediately after the EOL, return empty.
+       if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
+           return new ExtractionInfo("", token);
+       }
+       // Otherwise, the new 'token' points to the start of the first content line.
+    }
+
+    // Mark the start position of the text block's content.
+    // This should be the position *before* the first actual content character.
     stream.update();
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
+    int startCharno = stream.getCharno();
 
     StringBuilder builder = new StringBuilder();
+    boolean firstContentLine = true;
+
+    // Loop until we hit the end of the comment (EOC), end of file (EOF),
+    // or a new annotation (if not preserving whitespace).
+    // The loop condition primarily checks for EOC/EOF. The annotation check is inside.
+    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {
+         // Check for terminating annotation if not preserving whitespace
+         if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {
+             // Stop reading text block, the annotation marks the start of something new.
+             break;
+         }
+
+         // Read the content of the current line using getRemainingJSDocLine.
+         // This method is assumed to handle the optional leading " * " correctly
+         // based on JSDoc conventions (skipping it) and return the raw content
+         // from that point until the end of the line (EOL or EOC).
+         stream.update(); // Ensure stream position is correct before reading line.
+         String line = stream.getRemainingJSDocLine();
+
+         // Process the extracted line based on the whitespace option.
+         if (!firstContentLine) {
+             // Add the newline separator from the previous line before adding the new line's content.
+             builder.append('\n');
+         }
+
+         if (option == WhitespaceOption.PRESERVE) {
+             // Preserve mode: Keep the line content exactly as read (including leading/trailing spaces).
              builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
-
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
-    do {
-      switch (token) {
-        case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
+             // Non-preserve modes (TRIM or COLLAPSE):
+             // Trim trailing whitespace from the line. Leading whitespace (after potential '*') is kept.
+             line = trimEnd(line);
+             builder.append(line);
          }
 
-            builder.append('*');
-          }
+         firstContentLine = false; // We have processed at least one line of content.
 
+         // Advance the token state past the line we just consumed.
+         // getRemainingJSDocLine reads until EOL or EOC. Calling next() consumes that terminator
+         // and positions the stream for the start of the next line or termination.
          token = next();
-          continue;
-
-        case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
-          }
 
-          ignoreStar = true;
+         // If the token immediately after the line content was EOL (the common case),
+         // we need to consume that EOL and get the token for the start of the *next* line
+         // (which could be STAR, content, another EOL, EOC, etc.).
+         // If the token was already EOC/EOF, the loop condition will handle termination.
+         if (token == JsDocToken.EOL) {
              token = next();
-          continue;
-
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
+         }
+         // Now 'token' is set for the check at the start of the next loop iteration.
+    }
 
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+    // --- Finalization ---
     String multilineText = builder.toString();
 
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
+    // No final trimming of the entire block is done, preserving intended structure like
+    // leading spaces on the first line and blank lines represented by newlines.
 
+    // Mark the text range using the recorded start position and the stream's
+    // position *before* the terminating token (EOC/EOF/ANNOTATION).
+    stream.update(); // Update stream position to be just before the terminating token.
     int endLineno = stream.getLineno();
     int endCharno = stream.getCharno();
 
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
-            }
+    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);
 
+    // Return the extracted text and the token that terminated the extraction.
     return new ExtractionInfo(multilineText, token);
   }
 
-          if (builder.length() > 0) {
-            builder.append(' ');
+  // Helper function to trim trailing whitespace (assuming Character class is available).
+  private String trimEnd(String s) {
+      int len = s.length();
+      while (len > 0 && Character.isWhitespace(s.charAt(len - 1))) {
+          len--;
       }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
-          }
-
-          builder.append(line);
-          token = next();
-      }
-    } while (true);
+      return s.substring(0, len);
   }
\ No newline at end of file
