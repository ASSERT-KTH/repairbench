diff --git a/tmp/17dd6c59-914d-440e-ade7-52ad5f40a0d8_buggy.java b/tmp/1a0f6cd4-b5c8-4456-9be3-b02015c95c9a_fixed.java
index 4be01ab..ff4464d 100644
--- a/tmp/17dd6c59-914d-440e-ade7-52ad5f40a0d8_buggy.java
+++ b/tmp/1a0f6cd4-b5c8-4456-9be3-b02015c95c9a_fixed.java
@@ -1,115 +1,205 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
+      // No text found on the line.
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
+    int startCharno = stream.getCharno(); // Position of the first token
 
-    // Read the content from the first line.
+    // Read the content from the first line, which starts *after* the initial token.
     String line = stream.getRemainingJSDocLine();
+    // Don't trim the initial line for PRESERVE
     if (option != WhitespaceOption.PRESERVE) {
         line = line.trim();
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
-    state = State.SEARCHING_ANNOTATION;
+    // Consume the rest of the first line by getting the next token (usually EOL).
     token = next();
 
     boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    // Track the start/end positions of the free text block for marking
+    // Use the initial position as default, update if content is found.
+    int textBlockStartLineno = startLineno;
+    // If initial line had content, start char is start of that content.
+    // Otherwise, it will be updated when first content token on subsequent line is found.
+    int textBlockStartCharno = startCharno + (line.length() - stream.getRemainingJSDocLine().length());
+    boolean contentStarted = !line.isEmpty();
+
 
     do {
+      stream.update(); // Update stream position at the start of each loop iteration
+
       switch (token) {
         case STAR:
           if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+            // --- Leading star on a new line ---
+            int starLineno = stream.getLineno();
+            int starCharno = stream.getCharno(); // Position BEFORE star token
+
+            // Consume the star token
+            token = next();
+
+            // Get position after consuming star, now points to the start of the next token
+            stream.update();
+            int nextTokenCharno = stream.getCharno();
+
+            // Append the whitespace between '*' and the next token if PRESERVE
+            if (option == WhitespaceOption.PRESERVE) {
+                int whitespaceStartCharno = starCharno + 1; // Position logically after the '*' char
+                int whitespaceEndCharno = nextTokenCharno; // Position logically before the next token
+
+                if (whitespaceEndCharno > whitespaceStartCharno && starLineno == stream.getLineno()) {
+                    // Retrieve the actual whitespace from the source stream/line buffer
+                    String currentLine = stream.getLine(starLineno);
+                    int lineStartOffset = stream.getLineStartOffset(starLineno);
+                    int relWhitespaceStart = Math.max(0, whitespaceStartCharno - lineStartOffset);
+                    int relWhitespaceEnd = Math.min(currentLine.length(), whitespaceEndCharno - lineStartOffset);
+
+                    if (relWhitespaceEnd > relWhitespaceStart) {
+                        String whitespace = currentLine.substring(relWhitespaceStart, relWhitespaceEnd);
+                        if (whitespace.length() > 0) {
+                           if (!contentStarted) {
+                                textBlockStartLineno = starLineno;
+                                textBlockStartCharno = starCharno + 1; // Start of whitespace
+                                contentStarted = true;
+                           }
+                           builder.append(whitespace);
+                        }
+                    }
+                }
+            }
+            // Loop continues with the token found after the star and whitespace
+            ignoreStar = false; // Processed the potential leading star line starter
           } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+            // --- Star is part of the comment text ---
+            if (!contentStarted) {
+                 textBlockStartLineno = stream.getLineno();
+                 textBlockStartCharno = stream.getCharno();
+                 contentStarted = true;
+            }
+            // In PRESERVE mode, no space is added automatically here.
+            // In Non-PRESERVE, add space if needed.
+            if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
+                // Avoid double spaces if line already ends with space/newline
+                char lastChar = builder.charAt(builder.length() - 1);
+                if (lastChar != ' ' && lastChar != '\n') {
                     builder.append(' ');
                 }
+            }
 
             builder.append('*');
+            token = next(); // Consume the star token
           }
-
-          token = next();
-          continue;
+          continue; // Back to top of loop with next token
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
-          ignoreStar = true;
-          token = next();
-          continue;
+          ignoreStar = true; // Next line might start with a star to ignore
+          token = next(); // Consume EOL
+          continue; // Back to top of loop
 
         default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
+          // --- Handle termination tokens first ---
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
+              // When PRESERVE, annotations are part of the text block.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
-            String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
+            String multilineText = builder.toString();
+
+            if (option != WhitespaceOption.PRESERVE) {
+                multilineText = multilineText.trim(); // Trim entire result
+                if (multilineText.isEmpty()) {
+                    contentStarted = false; // Adjust if trimming removed everything
+                }
+            }
+
+            // If content never started (or was trimmed away), use initial pos?
+            // Let's stick to marking based on content found. If !contentStarted, don't mark.
+            if (!contentStarted) {
+                 // Ensure we return the correct empty string if needed.
+                 multilineText = "";
+            }
+
+            // Mark text if it's considered non-empty after potential trimming.
+            if (contentStarted && multilineText.length() > 0) {
+                 jsdocBuilder.markText(multilineText, textBlockStartLineno, textBlockStartCharno,
                      endLineno, endCharno);
+            } else if (option == WhitespaceOption.PRESERVE && !contentStarted) {
+                 // Handle completely empty @preserve blocks - should they be marked?
+                 // Current logic only marks if contentStarted is true. Let's assume this is ok.
+                 // Return empty string, but potentially update token position for parser.
             }
 
+
             return new ExtractionInfo(multilineText, token);
           }
 
+          // --- Process regular content token ---
+          if (!contentStarted) {
+             textBlockStartLineno = stream.getLineno();
+             textBlockStartCharno = stream.getCharno();
+             contentStarted = true;
+          }
+          ignoreStar = false; // Seeing a non-EOL, non-STAR token means no leading star check needed now
+
+          if (option == WhitespaceOption.PRESERVE) {
+              // Append the token's string representation.
+              builder.append(toString(token));
+
+              // Append the rest of the line *exactly* as it is.
+              line = stream.getRemainingJSDocLine();
+              builder.append(line);
+
+              // Consume the rest of the line by getting the next token (usually EOL).
+              token = next();
+          } else {
+              // Non-PRESERVE options:
+              // All tokens must be separated by a space.
               if (builder.length() > 0) {
+                 char lastChar = builder.charAt(builder.length() - 1);
+                 if (lastChar != ' ' && lastChar != '\n') {
                      builder.append(' ');
                  }
+              }
               builder.append(toString(token));
 
               line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
+              // Trim end only, preserve leading space on this line part for now.
               line = trimEnd(line);
-          }
-
               builder.append(line);
               token = next();
           }
+          continue; // Continue the loop with the next token (often EOL)
+      }
     } while (true);
   }
\ No newline at end of file
