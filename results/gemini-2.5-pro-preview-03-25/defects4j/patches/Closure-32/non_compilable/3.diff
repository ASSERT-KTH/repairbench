diff --git a/tmp/16893761-aa67-43a5-9b78-5e1edefa5853_buggy.java b/tmp/d1015d82-9d5a-420a-a481-843f13ec5f63_fixed.java
index 4be01ab..eb12b37 100644
--- a/tmp/16893761-aa67-43a5-9b78-5e1edefa5853_buggy.java
+++ b/tmp/d1015d82-9d5a-420a-a481-843f13ec5f63_fixed.java
@@ -1,115 +1,164 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected). Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // Original check prevented extraction if block started with EOL, which happens
+    // for @preserve/@license used like: @preserve\n * text...
+    // Fix: Allow EOL to start extraction. EOC/EOF are still valid empty blocks.
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
+    int startCharno = stream.getCharno(); // Position before the content extraction starts
 
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
-
+    // If ignoreStar is true, we are at the beginning of a line after an EOL,
+    // and the next STAR token should be ignored (skipped).
     boolean ignoreStar = false;
+    // Keep track if we are processing the very first token passed to the function.
+    boolean firstToken = true;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
+    // Loop until we hit a terminating token (checked inside the loop)
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+            // Skip the leading star after a newline.
+            ignoreStar = false; // Only ignore one star per line.
           } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
+            // Star is part of the comment text (either mid-line or first token).
+            // Add space only if not preserving format and not the first token and builder isn't empty.
+            if (!firstToken && option != WhitespaceOption.PRESERVE) {
+                appendSpaceIfNeeded(builder);
             }
-
             builder.append('*');
           }
-
+          // Advance to the next token after the star.
           token = next();
-          continue;
+          firstToken = false; // No longer the first token overall.
+          continue; // Process the new token.
 
         case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
+          if (option == WhitespaceOption.SINGLE_LINE) {
+            // End of line terminates in single-line mode.
+            token = next(); // Consume EOL
+            // Force termination by breaking outer loop. Set token to EOL
+            // so the termination check below loop catches it.
+            token = JsDocToken.EOL;
+            break; // Exit switch, will terminate loop below.
+          }
+
+          // In multiline modes, append newline and prepare to ignore star on next line.
           builder.append("\n");
+          ignoreStar = true; // Expect a star at the start of the next line.
+          token = next(); // Consume EOL, get next token.
+          firstToken = false; // No longer the first token overall.
+          continue; // Process the new token.
+
+        default: // Handles STRING, ANNOTATION (if PRESERVE), PIPE, LB, etc.
+          // Check for termination conditions first.
+          // Use a helper method for clarity.
+          if (shouldTerminate(token, option)) {
+             break; // Exit switch, will terminate loop below.
           }
 
-          ignoreStar = true;
-          token = next();
-          continue;
-
-        default:
+          // Reset ignoreStar if we encounter any non-EOL, non-ignored-STAR token.
           ignoreStar = false;
+          // Reset parser state? (Original code did this here) Seems reasonable.
           state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+          // Add space separator if needed (non-preserve, not first token).
+          if (!firstToken && option != WhitespaceOption.PRESERVE) {
+            appendSpaceIfNeeded(builder);
+          }
+          // Append the string representation of the token.
+          builder.append(toString(token));
+
+          // Append the rest of the line after the token.
+          // Assumption: getRemainingJSDocLine() does NOT include the trailing \n.
+          String line = stream.getRemainingJSDocLine();
+
+          // Trim trailing whitespace from the rest of the line if not preserving.
+          if (option != WhitespaceOption.PRESERVE) {
+            line = trimEnd(line);
+          }
+          builder.append(line);
+
+          // Advance token past the current token and the rest of the line.
+          token = next();
+          firstToken = false; // No longer the first token overall.
+          continue; // Process the new token.
+
+      } // end switch
+
+      // If the switch was exited via 'break', it means termination. Exit the loop.
+      break;
+
+    } while (true);
+
+
+    // Final clean up and return.
     String multilineText = builder.toString();
 
+    // Trim the entire result only if not preserving whitespace.
     if (option != WhitespaceOption.PRESERVE) {
       multilineText = multilineText.trim();
     }
 
+    // Get end position (current stream position).
     int endLineno = stream.getLineno();
     int endCharno = stream.getCharno();
 
+    // Mark the extracted text in the JSDoc builder.
     if (multilineText.length() > 0) {
       jsdocBuilder.markText(multilineText, startLineno, startCharno,
                             endLineno, endCharno);
     }
 
+    // Return the extracted text and the token that terminated the extraction.
     return new ExtractionInfo(multilineText, token);
   }
 
+  // Helper method to check termination conditions (assuming it exists or is added)
+  // This consolidates the termination logic.
+  private boolean shouldTerminate(JsDocToken token, WhitespaceOption option) {
+    return token == JsDocToken.EOC || token == JsDocToken.EOF ||
+           (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) ||
+           (token == JsDocToken.EOL && option == WhitespaceOption.SINGLE_LINE);
+  }
+
+  // Helper method to append space if needed (assuming it exists or is added)
+  // Appends a space if the builder is not empty and does not already end with whitespace.
+  private void appendSpaceIfNeeded(StringBuilder builder) {
     if (builder.length() > 0) {
+      char lastChar = builder.charAt(builder.length() - 1);
+      if (lastChar != ' ' && lastChar != '\n') {
            builder.append(' ');
       }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+    }
   }
 
-          builder.append(line);
-          token = next();
+  // Helper method for trimming trailing whitespace (assuming it exists or is added)
+  // Replicates needed functionality if not already present.
+  private String trimEnd(String s) {
+      int end = s.length();
+      while (end > 0 && Character.isWhitespace(s.charAt(end - 1))) {
+        end--;
       }
-    } while (true);
+      return s.substring(0, end);
   }
\ No newline at end of file
