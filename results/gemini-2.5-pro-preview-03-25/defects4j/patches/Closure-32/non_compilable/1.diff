diff --git a/tmp/39dde315-a238-436c-9ee0-7618a2d1b66f_buggy.java b/tmp/e92dcad7-853f-4176-8aaf-a55fb66c4434_fixed.java
index 4be01ab..a476bad 100644
--- a/tmp/39dde315-a238-436c-9ee0-7618a2d1b66f_buggy.java
+++ b/tmp/e92dcad7-853f-4176-8aaf-a55fb66c4434_fixed.java
@@ -1,115 +1,208 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
+   * Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // If the description starts with EOC or EOF, return empty string.
+    // Allow EOL to start a potentially multiline description (handled below).
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
-    stream.update();
+    // stream, jsdocBuilder, next(), toString(), trimEnd() are assumed to be members/methods of the enclosing class.
+    stream.update(); // Update stream position to the start of the passed token
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
+    int startCharno = stream.getCharno();
 
     StringBuilder builder = new StringBuilder();
+    String line;
+
+    if (option == WhitespaceOption.PRESERVE) {
+        // --- PRESERVE Logic ---
+        // Correctly handles leading/trailing whitespace, newlines, and optional stars
+        // to preserve formatting for @license/@preserve.
+
+        boolean firstElement = true; // Track if we are processing the very first token/line
+
+        // Handle the first token/line content only if it's not EOL.
+        if (token != JsDocToken.EOL) {
+            line = stream.getRemainingJSDocLine();
+            builder.append(line);
+            token = next(); // Consume rest of line content
+            firstElement = false;
+        }
+        // else: first token is EOL, loop below will handle it without adding initial content.
+
+        // Loop through subsequent lines/tokens
+        while (token != JsDocToken.EOC && token != JsDocToken.EOF) {
+            if (token == JsDocToken.EOL) {
+                // Append newline, unless we are skipping the very first EOL (handled by firstElement flag).
+                if (!firstElement) {
+                   builder.append('\n');
+                }
+                token = next(); // Consume EOL
+                firstElement = false; // No longer the first element
+
+                // Check for optional star at the beginning of the new line
+                if (token == JsDocToken.STAR) {
+                    token = next(); // Consume STAR
+                    // Append the rest of the line (including leading space after star)
+                    line = stream.getRemainingJSDocLine();
                     builder.append(line);
+                    token = next(); // Consume the line content + EOL
+                } else if (token != JsDocToken.EOC && token != JsDocToken.EOF) {
+                    // No star, but not EOC/EOF. Append the whole line.
+                    line = stream.getRemainingJSDocLine();
+                    builder.append(line);
+                    token = next(); // Consume rest of line + EOL
+                }
+                // If token became EOC/EOF after consuming line, outer loop condition catches it.
+                // If token became EOL (empty line after star or no star), loop continues.
+            } else {
+                // Unexpected token for PRESERVE mode (e.g., mid-line content after EOL processing).
+                // This implies an issue with tokenization or stream state.
+                // Assume correct tokenization leads to EOC/EOF here or ANNOTATION if allowed.
+                // Since PRESERVE allows annotations, just break and let the caller handle it.
+                 break; // Exit loop, return current builder content and this token.
+            }
+        }
+
+        // Record the text end position. stream is positioned at the terminating token (EOC/EOF/ANNOTATION).
+        stream.update();
+        int endLineno = stream.getLineno();
+        int endCharno = stream.getCharno();
+        String preserveText = builder.toString(); // Don't trim
 
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
+        if (preserveText.length() > 0) {
+            // Mark text using recorded start/end positions.
+             jsdocBuilder.markText(preserveText, startLineno, startCharno, endLineno, endCharno);
+        }
+        return new ExtractionInfo(preserveText, token);
 
-    boolean ignoreStar = false;
+    } else {
+        // --- NON-PRESERVE Logic ---
+        // Collapses whitespace, trims lines, handles optional stars.
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+        boolean firstToken = true;
+        boolean ignoreStar = false; // Track if last token processed was EOL
 
         do {
             switch (token) {
                 case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+                    if (!ignoreStar) { // Star is content if not preceded by EOL
+                        // Append space only if needed.
+                        if (!firstToken && builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ') {
                            builder.append(' ');
                         }
-
                         builder.append('*');
+                        firstToken = false;
                     }
-
+                    // Star after EOL is ignored (whitespace).
+                    ignoreStar = false; // Reset ignoreStar after handling STAR
                     token = next();
                     continue;
 
                 case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
+                    if (option == WhitespaceOption.SINGLE_LINE) {
+                         // Terminate on the first EOL for SINGLE_LINE mode.
+                         String singleLineText = builder.toString().trim();
+                         stream.update();
+                         int endLineno = stream.getLineno();
+                         int endCharno = stream.getCharno();
+                         if (singleLineText.length() > 0) {
+                             jsdocBuilder.markText(singleLineText, startLineno, startCharno, endLineno, endCharno);
+                         }
+                         return new ExtractionInfo(singleLineText, token);
                     }
 
-          ignoreStar = true;
+                    // For multi-line non-preserve, EOL potentially signifies a space break.
+                    ignoreStar = true; // The next STAR should be ignored.
+                    // Space is added before the *next* content token, not here.
+                    firstToken = false; // No longer the first token
                     token = next();
                     continue;
 
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
-            String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
-
+                 case ANNOTATION: // Terminates non-preserve blocks
+                 case EOC:
+                 case EOF:
+                     String extractedText = builder.toString().trim();
+                     stream.update();
                      int endLineno = stream.getLineno();
                      int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
+                     if (extractedText.length() > 0) {
+                        jsdocBuilder.markText(extractedText, startLineno, startCharno,
                             endLineno, endCharno);
                      }
+                     return new ExtractionInfo(extractedText, token);
 
-            return new ExtractionInfo(multilineText, token);
-          }
-
-          if (builder.length() > 0) {
+                 default: // Regular content tokens (STRING, NAME, etc.)
+                    // Append a space separator unless it's the first token,
+                    // or if the builder already ends in a space. The ignoreStar flag signals
+                    // that a space is needed due to a preceding EOL (+ optional STAR).
+                    if (!firstToken) {
+                        if (ignoreStar || (builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ')) {
                             builder.append(' ');
                         }
+                    }
+
+                    // Append the token's string value.
                     builder.append(toString(token));
 
+                    // Append the rest of the line, trimming only the end.
                     line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+                    // Use trimEnd from Apache Commons Lang or implement locally if not available
+                    line = trimEnd(line); // Preserve leading space relative to token
+                    if (line.length() > 0) {
+                        // Add space only if builder doesn't already end with one.
+                         if (builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ') {
+                             builder.append(' ');
                          }
-
                         builder.append(line);
-          token = next();
+                    }
+
+                    firstToken = false;
+                    ignoreStar = false; // Reset ignoreStar
+                    token = next(); // Consume token + rest of line
             }
         } while (true);
     }
+  }
+
+  // Helper needed by the fixed code if not already present
+  private String trimEnd(String str) {
+    int end = str.length();
+    while (end > 0 && Character.isWhitespace(str.charAt(end - 1))) {
+      end--;
+    }
+    return str.substring(0, end);
+  }
+
+  // Helper class definition used by the function (assumed existing)
+  private static class ExtractionInfo {
+     final String string;
+     final JsDocToken token;
+     ExtractionInfo(String string, JsDocToken token) {
+       this.string = string;
+       this.token = token;
+     }
+  }
+
+  // Dummy State enum to satisfy the original code structure, though not actively used in the fix logic.
+  private enum State { SEARCHING_ANNOTATION }
+  private State state;
+
+  // Assume these members/methods exist in the enclosing class:
+  // private JsDocTokenStream stream;
+  // private JsDocBuilder jsdocBuilder;
+  // private JsDocToken next() { ... }
+  // private String toString(JsDocToken token) { ... }
\ No newline at end of file
