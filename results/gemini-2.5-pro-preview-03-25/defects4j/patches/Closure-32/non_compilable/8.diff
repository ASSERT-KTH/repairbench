diff --git a/tmp/e3cb68e3-20ef-4627-8d88-9acc4064dc9f_buggy.java b/tmp/2940f2ad-bb12-4ded-8a4f-0485776b7b85_fixed.java
index 4be01ab..4acdf9a 100644
--- a/tmp/e3cb68e3-20ef-4627-8d88-9acc4064dc9f_buggy.java
+++ b/tmp/2940f2ad-bb12-4ded-8a4f-0485776b7b85_fixed.java
@@ -1,115 +1,145 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
+    // Record the start position of the textual block.
     stream.update();
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
+    int startCharno = stream.getCharno(); // 0-based
 
     StringBuilder builder = new StringBuilder();
+
+    // Consume the rest of the first line.
+    String line = stream.getRemainingJSDocLine();
+    if (option == WhitespaceOption.PRESERVE) {
       builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
-
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
-    do {
-      switch (token) {
-        case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
     } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
+      // Trim trailing space, but not leading space for the first line.
+      // The final trim() happens later for non-preserve options.
+      builder.append(trimEnd(line));
     }
+    token = next(); // Read the token that terminates the first line (EOL, EOC, EOF)
 
-            builder.append('*');
-          }
-
-          token = next();
-          continue;
-
-        case EOL:
+    // Consume subsequent lines
+    while (token == JsDocToken.EOL) {
+      // Append the newline character.
       if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
+        builder.append('\n');
       }
+      token = next(); // Read the first token on the new line (STAR, text, EOC, ...)
 
-          ignoreStar = true;
+      if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
+          break;
+      }
+      // An annotation terminates the block unless we're preserving whitespace.
+      if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {
+          break;
+      }
+
+      // Handle the beginning of the line based on the whitespace option.
+      if (option == WhitespaceOption.PRESERVE) {
+        // Consume the potential leading star.
+        if (token == JsDocToken.STAR) {
+           token = next();
+           // Consume the space after the star if it exists.
+           if (stream.peek() == ' ') {
+             stream.getChar();
+           }
+        }
+        // Append the rest of the line literally.
+        line = stream.getRemainingJSDocLine();
+        builder.append(line);
+        token = next(); // Consume the EOL at the end of this line.
+      } else { // Not PRESERVE (TRIM or SINGLE_LINE)
+        // Consume the potential leading star, but don't add it to the builder.
+        if (token == JsDocToken.STAR) {
           token = next();
-          continue;
+        }
 
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
+        // Add a space between lines if needed (for TRIM mode).
+        if (option == WhitespaceOption.TRIM && builder.length() > 0) {
+            char lastChar = builder.charAt(builder.length() - 1);
+            if (lastChar != '\n' && lastChar != ' ') {
+                builder.append(' ');
+            }
+        }
 
-              // All tokens must be separated by a space.
+        // Consume the rest of the line token by token, trimming trailing whitespace from each part.
+        while (token != JsDocToken.EOL && token != JsDocToken.EOC && token != JsDocToken.EOF) {
+            if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {
+                break; // Stop at annotations when not preserving.
+            }
+
+            // Append token representation
+            builder.append(toString(token));
+            // Append rest of line, trimmed only at the end
+            line = trimEnd(stream.getRemainingJSDocLine());
+            if (!line.isEmpty()) {
+                 // Add space only if needed before appending the rest of the line
+                 if (builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ') {
+                    char firstChar = line.charAt(0);
+                    if (firstChar != ' ' && firstChar != '\t') {
+                        builder.append(' ');
+                    }
+                 }
+                 builder.append(line);
+            }
+            token = next(); // Read the token that terminates this line/segment (EOL, ANNOTATION, etc.).
+
+            // Add space before next token if needed and we're not at the end
+             if (token != JsDocToken.EOL && token != JsDocToken.EOC && token != JsDocToken.EOF &&
+                 !(token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
+                 if (builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ') {
+                    builder.append(' ');
+                 }
+             }
+        } // End inner while
+
+        // Exit inner loop: token is EOL, EOC, EOF, or ANNOTATION
+        if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {
+            break; // Exit outer loop as well
+        }
+      } // End else (not PRESERVE)
+    } // End while (token == EOL)
 
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+    // We have exited the loop. token is the terminating token (EOC, EOF, ANNOTATION).
     String multilineText = builder.toString();
 
+    // Trim the final result only if not preserving whitespace.
     if (option != WhitespaceOption.PRESERVE) {
       multilineText = multilineText.trim();
     }
 
+    // Determine the end position. stream.update() ensures the lineno/charno are current,
+    // reflecting the position *before* the terminating token was logically processed.
+    stream.update();
     int endLineno = stream.getLineno();
     int endCharno = stream.getCharno();
 
     if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
+      // Mark the text using the start position and the current end position.
+      // Convert startCharno to 1-based for marking.
+      jsdocBuilder.markText(multilineText, startLineno, startCharno + 1,
           endLineno, endCharno);
     }
 
     return new ExtractionInfo(multilineText, token);
   }
\ No newline at end of file
-
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
-          }
-
-          builder.append(line);
-          token = next();
-      }
-    } while (true);
-  }
