diff --git a/tmp/655c6314-7825-487b-aebc-4d715e7592f4_buggy.java b/tmp/03b4b90c-899c-473a-a902-58cb2a8d1f04_fixed.java
index 4be01ab..c997321 100644
--- a/tmp/655c6314-7825-487b-aebc-4d715e7592f4_buggy.java
+++ b/tmp/03b4b90c-899c-473a-a902-58cb2a8d1f04_fixed.java
@@ -1,115 +1,209 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
+      // No text found.
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
+    int startCharno = stream.getCharno() + 1; // 1-based index of the first char.
 
     // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
+
+    // Handle trimming on the first line based on the option.
+    if (option == WhitespaceOption.TRIM || option == WhitespaceOption.SINGLE_LINE) {
       line = line.trim();
-    }
+    } // PRESERVE: Keep leading/trailing whitespace.
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
-    state = State.SEARCHING_ANNOTATION;
+    // Consume the remainder of the first line and get the next token.
     token = next();
 
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    // After the first line, we expect subsequent lines to start with a star,
+    // which should be ignored unless it's actual content.
+    boolean ignoreStar = true;
 
     do {
-      switch (token) {
-        case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
+      // Check for terminating tokens.
+      if (token == JsDocToken.EOC || token == JsDocToken.EOF ||
+          (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
 
-            builder.append('*');
-          }
-
-          token = next();
-          continue;
-
-        case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
-          }
-
-          ignoreStar = true;
-          token = next();
-          continue;
-
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
         String multilineText = builder.toString();
 
-            if (option != WhitespaceOption.PRESERVE) {
+        // Perform final trimming based on the option.
+        if (option == WhitespaceOption.TRIM || option == WhitespaceOption.SINGLE_LINE) {
           multilineText = multilineText.trim();
-            }
+        } // PRESERVE: Keep all captured whitespace.
 
+        // The token location is typically the start of the token.
+        // Update the stream position before getting the end location.
+        stream.update();
         int endLineno = stream.getLineno();
         int endCharno = stream.getCharno();
 
         if (multilineText.length() > 0) {
           jsdocBuilder.markText(multilineText, startLineno, startCharno,
               endLineno, endCharno);
         }
 
         return new ExtractionInfo(multilineText, token);
       }
 
-          if (builder.length() > 0) {
+      switch (token) {
+        case STAR:
+          if (ignoreStar) {
+            // Leading star on a new line. Consume it and get the rest of the line.
+            stream.update(); // Position stream after the STAR token.
+            String restOfLine = stream.getRemainingJSDocLine();
+
+            if (option == WhitespaceOption.PRESERVE) {
+              // Keep all whitespace as is.
+              builder.append(restOfLine);
+            } else { // TRIM or SINGLE_LINE
+              // Skip a single leading space after the star, if present.
+              if (restOfLine.startsWith(" ")) {
+                restOfLine = restOfLine.substring(1);
+              }
+              // Append based on mode.
+              if (option == WhitespaceOption.SINGLE_LINE) {
+                String trimmedLine = restOfLine.trim();
+                if (!trimmedLine.isEmpty()) {
+                  // Add a space separator if needed. Assumes builder doesn't end in whitespace.
+                  if (builder.length() > 0 &&
+                      !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
                     builder.append(' ');
                   }
-          builder.append(toString(token));
+                  builder.append(trimmedLine);
+                }
+              } else { // TRIM
+                // Append the line content (leading space removed), trim trailing space from this piece.
+                builder.append(trimEnd(restOfLine));
+              }
+            }
+            // We've processed the line after the star. Consume the line content.
+            token = next(); // Gets EOL/EOC/EOF normally.
+          } else {
+            // Star is part of the text content.
+            String tokenText = "*"; // The star itself.
+            String restOfLine = stream.getRemainingJSDocLine(); // Content after the star.
 
-          line = stream.getRemainingJSDocLine();
+            if (option == WhitespaceOption.PRESERVE) {
+              builder.append(tokenText);
+              builder.append(restOfLine);
+            } else { // TRIM or SINGLE_LINE
+              String combinedLine = tokenText + restOfLine;
+              if (option == WhitespaceOption.SINGLE_LINE) {
+                String trimmedLine = combinedLine.trim();
+                if (!trimmedLine.isEmpty()) {
+                  // Add space separator if needed.
+                  if (builder.length() > 0 &&
+                      !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
+                    builder.append(' ');
+                  }
+                  builder.append(trimmedLine);
+                }
+              } else { // TRIM
+                // Add space if previous char wasn't whitespace
+                 if (builder.length() > 0 &&
+                    !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
+                   builder.append(' ');
+                 }
+                 // Append combined line, trimmed at the end for this piece.
+                 builder.append(trimEnd(combinedLine));
+              }
+            }
+            // Consumed star and rest of line. Get next token.
+            token = next();
+          }
+          // Reset ignoreStar, as we are no longer at the start of a line requiring ignore.
+          ignoreStar = false;
+          continue; // Re-evaluate the new token.
 
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+        case EOL:
+          // Add a newline character, unless we are collapsing lines.
+          if (option != WhitespaceOption.SINGLE_LINE) {
+            // Avoid adding double newlines if builder already ends with one.
+             if (builder.length() == 0 || builder.charAt(builder.length() - 1) != '\n') {
+               builder.append('\n');
+             } else {
+               // If the builder ends with \n, only append another if the original had consecutive EOLs.
+               // This requires looking ahead or tracking state, complex. Let's keep simple logic:
+               // only add \n if the builder doesn't already end with it. This handles single blank lines.
+               // Double blank lines might be collapsed to one. Check if tests require preserving double blanks.
+               // The tests (e.g., testParseLicense) expect double blanks to be preserved.
+               // Let's always append \n for EOL when not SINGLE_LINE. Final trim handles trailing ones if needed.
+               builder.append('\n');
+             }
           }
+          // Prepare for the next line, which might start with a star.
+          ignoreStar = true;
+          token = next(); // Consume EOL, get the next token.
+          continue; // Re-evaluate the new token.
 
-          builder.append(line);
+        default: // Handles ANNOTATION (in PRESERVE mode), STRING, identifiers, etc.
+          String tokenText = toString(token); // Get the string value of the token.
+          String restOfLine = stream.getRemainingJSDocLine(); // Get content after the token.
+
+          if (option == WhitespaceOption.PRESERVE) {
+            // Append token and rest of line exactly.
+            builder.append(tokenText);
+            builder.append(restOfLine);
+          } else { // TRIM or SINGLE_LINE
+            String combinedLine = tokenText + restOfLine;
+            if (option == WhitespaceOption.SINGLE_LINE) {
+              String trimmedLine = combinedLine.trim();
+              if (!trimmedLine.isEmpty()) {
+                // Add space separator if needed.
+                if (builder.length() > 0 &&
+                    !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
+                  builder.append(' ');
+                }
+                builder.append(trimmedLine);
+              }
+            } else { // TRIM
+              // Add space if needed before appending, if the last char wasn't whitespace.
+              if (builder.length() > 0 &&
+                  !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
+                builder.append(' ');
+              }
+              // Append combined line, trimmed at the end for this piece.
+              builder.append(trimEnd(combinedLine));
+            }
+          }
+          // We've processed the token and the rest of the line. Get the next token.
           token = next();
+          // Reset ignoreStar, as we are no longer at the start of a line requiring ignore.
+          ignoreStar = false;
+          continue; // Re-evaluate the new token.
       }
     } while (true);
   }
+
+  /** Helper method to trim trailing whitespace. */
+  private String trimEnd(String s) {
+    int len = s.length();
+    while (len > 0 && Character.isWhitespace(s.charAt(len - 1))) {
+      len--;
+    }
+    return s.substring(0, len);
+  }
\ No newline at end of file
