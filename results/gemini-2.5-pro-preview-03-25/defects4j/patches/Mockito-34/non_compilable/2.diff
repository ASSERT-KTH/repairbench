diff --git a/tmp/9bb8ac8c-6ad7-46a1-b892-ce8197c9c1b7_buggy.java b/tmp/1fdca949-5723-4eec-a6e7-b08ef2711a3b_fixed.java
index d68a69c..f7b7819 100644
--- a/tmp/9bb8ac8c-6ad7-46a1-b892-ce8197c9c1b7_buggy.java
+++ b/tmp/1fdca949-5723-4eec-a6e7-b08ef2711a3b_fixed.java
@@ -1,9 +1,51 @@
+import org.mockito.internal.matchers.CapturesArguments;
+import org.mockito.internal.matchers.Matcher;
+import org.mockito.internal.matchers.VarargMatcher;
+import org.mockito.invocation.Invocation;
+
+import java.util.Arrays;
+import java.util.List; // Assuming 'matchers' is a List or similar collection
+
+// Assume 'matchers' is a field of type List<Matcher> accessible in this scope
+
     public void captureArgumentsFrom(Invocation i) {
-        int k = 0;
-        for (Matcher m : matchers) {
+        Object[] arguments = i.getArguments();
+        int argsLength = arguments.length;
+        // Assuming 'matchers' is a List<Matcher> accessible field.
+        // If it's not a List, adjust access accordingly (e.g., array access).
+        List<Matcher> currentMatchers = this.matchers;
+        int matchersSize = currentMatchers.size();
+
+        for (int k = 0; k < matchersSize; k++) {
+            // We need the index 'k', so we cannot use the enhanced for loop directly
+            // if we need to relate the matcher position to argument position.
+            Matcher m = currentMatchers.get(k);
+
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                CapturesArguments captor = (CapturesArguments) m;
+
+                // Check if the matcher is specifically for varargs and is the last matcher.
+                // In Java, varargs can only be the last parameter.
+                boolean isVarargMatcher = m instanceof VarargMatcher;
+                boolean isLastMatcher = (k == matchersSize - 1);
+
+                if (isVarargMatcher && isLastMatcher) {
+                    // If it's a vararg matcher (and thus the last one),
+                    // capture all remaining arguments as an array.
+                    // Arrays.copyOfRange handles the case where k >= argsLength, returning an empty array.
+                    Object[] varargs = Arrays.copyOfRange(arguments, k, argsLength);
+                    captor.captureFrom(varargs);
+                    // Vararg matcher consumes all remaining arguments, so we can stop.
+                    break;
+                } else {
+                    // If it's a regular matcher (or not the last one),
+                    // capture the corresponding argument if it exists.
+                    if (k < argsLength) {
+                        captor.captureFrom(arguments[k]);
+                    }
+                    // If k >= argsLength, there is no argument corresponding to this matcher.
+                    // This could happen in mismatch scenarios; we capture nothing.
+                }
             }
-            k++;
         }
     }
