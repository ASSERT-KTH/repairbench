diff --git a/tmp/e4be6f3c-5ea7-47f3-97d4-97e1ff773443_buggy.java b/tmp/e9dbe3a5-43fb-4453-9f14-e8c4106cb260_fixed.java
index d68a69c..4876014 100644
--- a/tmp/e4be6f3c-5ea7-47f3-97d4-97e1ff773443_buggy.java
+++ b/tmp/e9dbe3a5-43fb-4453-9f14-e8c4106cb260_fixed.java
@@ -1,9 +1,61 @@
+import org.hamcrest.Matcher;
+import org.mockito.internal.matchers.CapturesArguments;
+import java.lang.reflect.Array;
+import java.lang.reflect.Method;
+
+// This is the fixed version of the buggy function.
+// It resides inside a class (presumably InvocationMatcher),
+// which has access to the 'matchers' field (List<Matcher>).
 public void captureArgumentsFrom(Invocation i) {
-        int k = 0;
-        for (Matcher m : matchers) {
-            if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+    Method method = i.getMethod();
+    boolean isVarArgs = method.isVarArgs();
+    Object[] arguments = i.getArguments();
+    int argc = arguments.length;
+    //getParameterTypes() is needed to know the declared number of parameters and the type for varargs
+    Class<?>[] parameterTypes = method.getParameterTypes();
+    int paramCount = parameterTypes.length;
+
+    for (int k = 0; k < matchers.size(); k++) {
+        Matcher m = matchers.get(k); // Use get(k) as matchers is often a List
+
+        if (!(m instanceof CapturesArguments)) {
+            continue; // Skip non-capturing matchers
+        }
+
+        CapturesArguments captor = (CapturesArguments) m;
+
+        // Check if this matcher corresponds to the vararg parameter
+        // Vararg parameter is always the last one.
+        if (isVarArgs && k == paramCount - 1) {
+            // Handle the vararg parameter capture
+            Object capturedValue;
+            if (k < argc) {
+                // If arguments exist at/beyond index k, capture the k-th argument.
+                // For varargs, Mockito wraps the varargs into an array as the last argument.
+                capturedValue = arguments[k];
+            } else {
+                // Invocation didn't have arguments for the vararg parameter
+                // (e.g., called foo() for foo(String... args)).
+                // We need to capture an empty array of the vararg component type.
+                Class<?> varargComponentType = parameterTypes[k].getComponentType();
+                capturedValue = Array.newInstance(varargComponentType, 0);
+            }
+            captor.captureFrom(capturedValue);
+            // Vararg matcher captures the argument at index k (which is the vararg array)
+            // or an empty array if no argument was provided. It consumes the conceptual 'rest'.
+            // Since the loop iterates through matchers, and we assume the vararg matcher
+            // corresponds to the last parameter, we can conceptually break here,
+            // but letting the loop finish is also fine if matchers.size() == paramCount.
+        } else {
+            // Handle standard (non-vararg) parameter capture
+            if (k < argc) {
+                // Capture the corresponding argument if it exists
+                captor.captureFrom(arguments[k]);
+            }
+            // else: If k >= argc for a non-vararg parameter, it implies an argument
+            // mismatch which arguably should have been handled elsewhere (e.g., matching phase).
+            // We don't call captureFrom in this case, preserving the original code's
+            // implicit behavior for this edge case while fixing the AIOOBE for varargs.
         }
-            k++;
     }
 }
\ No newline at end of file
