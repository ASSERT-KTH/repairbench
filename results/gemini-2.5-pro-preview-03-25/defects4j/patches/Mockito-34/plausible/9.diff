diff --git a/tmp/d910aa8f-db2c-43f0-bda4-b59e4ce0b5fd_buggy.java b/tmp/9ef39be0-9e29-440b-8df7-d5caae9cf589_fixed.java
index d68a69c..0940b58 100644
--- a/tmp/d910aa8f-db2c-43f0-bda4-b59e4ce0b5fd_buggy.java
+++ b/tmp/9ef39be0-9e29-440b-8df7-d5caae9cf589_fixed.java
@@ -1,9 +1,24 @@
     public void captureArgumentsFrom(Invocation i) {
         int k = 0;
+        // Get arguments array once to avoid repeated calls and improve readability
+        Object[] arguments = i.getArguments();
+        int argumentCount = arguments.length;
+
         for (Matcher m : matchers) {
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                // Check if the current matcher index 'k' corresponds to an actual argument.
+                // This prevents ArrayIndexOutOfBoundsException when the number of matchers
+                // might conceptually exceed the number of actual arguments provided
+                // in the invocation (e.g., with varargs matchers matching zero arguments).
+                if (k < argumentCount) {
+                    ((CapturesArguments) m).captureFrom(arguments[k]);
                 }
+                // If k >= argumentCount, it implies this matcher position does not
+                // have a corresponding argument in this specific invocation.
+                // The CapturesArguments matcher will not capture anything in this case.
+            }
+            // Increment the index 'k' to move to the next matcher, maintaining the
+            // positional correspondence assumption between matchers and arguments/argument slots.
             k++;
         }
     }
\ No newline at end of file
