diff --git a/tmp/89fc3def-e747-44d4-bc59-3c70ee960845_buggy.java b/tmp/69ef73d3-410f-4b84-987e-1627205917ed_fixed.java
index d68a69c..c338cae 100644
--- a/tmp/89fc3def-e747-44d4-bc59-3c70ee960845_buggy.java
+++ b/tmp/69ef73d3-410f-4b84-987e-1627205917ed_fixed.java
@@ -1,9 +1,35 @@
     public void captureArgumentsFrom(Invocation i) {
+        // Retrieve the arguments from the actual invocation
+        Object[] arguments = i.getArguments();
         int k = 0;
+        // Iterate through the matchers associated with this InvocationMatcher (usually from stubbing)
         for (Matcher m : matchers) {
+            // Check if the current matcher index 'k' is within the bounds of the actual arguments array.
+            // This prevents ArrayIndexOutOfBoundsException, especially in varargs scenarios
+            // where the number of matchers might not align perfectly with the number of
+            // actual arguments (e.g., invocation with 0 arguments for a varargs method).
+            if (k < arguments.length) {
+                // If the matcher is designed to capture arguments (like ArgumentCaptor)
                 if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                    // Capture the corresponding argument from the actual invocation.
+                    ((CapturesArguments) m).captureFrom(arguments[k]);
                 }
+            } else {
+                // If k >= arguments.length, it means there are more matchers than actual arguments.
+                // This can happen with varargs methods called with fewer arguments than the potential
+                // maximum defined by matchers. In this case, a capturing matcher at position k
+                // doesn't have a corresponding argument to capture.
+                // We might still need to inform the matcher, especially if it's a varargs matcher
+                // that needs to capture an empty collection or handle this situation.
+                // However, the specific `CapturesArguments` interface and its implementations
+                // determine how to handle missing arguments. The original code didn't handle this,
+                // and just adding the bounds check fixes the immediate AIOOBE.
+                // If a varargs captor needs to capture an empty array/list when no args are provided,
+                // that logic should ideally be within the captor's `captureFrom` or handled
+                // by how varargs arguments are represented (e.g., always passing an array, even if empty).
+                // For now, simply skipping the capture when the index is out of bounds fixes the crash.
+            }
+            // Move to the next matcher/argument position.
             k++;
         }
     }
\ No newline at end of file
