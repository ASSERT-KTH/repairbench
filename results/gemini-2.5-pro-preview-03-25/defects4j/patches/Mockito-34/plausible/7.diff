diff --git a/tmp/f886b44f-8ac1-4160-b265-4ad632caebca_buggy.java b/tmp/539768cc-e650-47b0-b329-a3036fd984a9_fixed.java
index d68a69c..62d44bd 100644
--- a/tmp/f886b44f-8ac1-4160-b265-4ad632caebca_buggy.java
+++ b/tmp/539768cc-e650-47b0-b329-a3036fd984a9_fixed.java
@@ -1,9 +1,29 @@
     public void captureArgumentsFrom(Invocation i) {
         int k = 0;
+        // Cache the arguments array to avoid repeated calls and improve clarity
+        Object[] arguments = i.getArguments();
+        int argumentsLength = arguments.length;
+
         for (Matcher m : matchers) {
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                // Check if the argument index 'k' is within the bounds of the actual arguments array.
+                // This prevents ArrayIndexOutOfBoundsException when the number of matchers
+                // potentially exceeds the number of arguments, especially in varargs scenarios
+                // or when argument counts mismatch during matching phases.
+                if (k < argumentsLength) {
+                    ((CapturesArguments) m).captureFrom(arguments[k]);
                 }
+                // Note: If k >= argumentsLength, we intentionally do nothing.
+                // The original code would have crashed. This fix prevents the crash.
+                // However, this might not perfectly capture the intended semantics for
+                // varargs matchers (like AnyVararg) when associated with zero arguments,
+                // as captureFrom might not be called in that specific edge case.
+                // But it resolves the reported ArrayIndexOutOfBoundsException.
+            }
+            // Increment k for the next matcher, assuming a one-to-one mapping for indexing purposes.
+            // This part of the logic might still be problematic for varargs matchers that should consume
+            // multiple arguments, but modifying that requires a deeper change potentially beyond
+            // just fixing this exception.
             k++;
         }
     }
\ No newline at end of file
