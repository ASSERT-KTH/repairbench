diff --git a/tmp/73506e78-14fc-4ade-958a-7784a8da7380_buggy.java b/tmp/53bb4bbf-d016-4440-aad8-e77764ffe09e_fixed.java
index e69de29..f0b1e9a 100644
--- a/tmp/73506e78-14fc-4ade-958a-7784a8da7380_buggy.java
+++ b/tmp/53bb4bbf-d016-4440-aad8-e77764ffe09e_fixed.java
@@ -0,0 +1,57 @@
+    /**
+     * @param stack Call stack used for resolving types; MUST be passed down
+     *   when calling {@link #_fromAny}
+     * @since 2.9
+     */
+    protected HierarchicType _findSuperTypeChain(ClassStack stack, Class<?> rawCurrent, TypeBindings context)
+    {
+        // Note: context MUST be passed here, for type variable resolution
+
+        // Trivial check first: maybe we have already seen it?
+        HierarchicType ht = stack.find(rawCurrent);
+        if (ht != null) {
+            return ht;
+        }
+
+        // Argument checks done by caller, shouldn't need any further checking
+
+        HierarchicType selfType = new HierarchicType(rawCurrent);
+        stack.push(selfType);
+        try {
+            // Then check super-class, if any
+            // 18-Aug-2015, tatu: Super-class is easy, but interfaces are more complex,
+            //    as they need to be registered using NameCanonicalizer, to avoid
+            //    duplicate interface definitions.
+            Class<?> parent = rawCurrent.getSuperclass();
+            if (parent != null) {
+                 // Pass the stack down!
+                 HierarchicType sup = _findSuperTypeChain(stack, parent, context);
+                 selfType.setSuperType(sup);
+            }
+
+            // Then interfaces, if any
+            Class<?>[] ifs = rawCurrent.getInterfaces();
+            if (ifs != null && ifs.length > 0) {
+                // Need to ensure we will only represent each unique interface type once
+                // (duplicate definitions are possible, esp. with generic types)
+                // So, let's use a Set to ensure this.
+                // 28-Jun-2017, tatu: As per [databind#1661], need to use LinkedHashSet
+                //   to maintain order of declarations.
+                java.util.LinkedHashSet<HierarchicType> ifts = new java.util.LinkedHashSet<HierarchicType>(ifs.length);
+                for (int i = 0, len = ifs.length; i < len; ++i) {
+                    // Pass the stack down!
+                    HierarchicType ift = _findSuperTypeChain(stack, ifs[i], context);
+                    if (ifts.add(ift)) { // true if it was first time seeing this interface
+                         // any significance?
+                    }
+                }
+                selfType.setInterfaces(new java.util.ArrayList<>(ifts));
+            }
+
+            // And finally, fully resolve type bindings
+            _resolveSuperTypes(stack, selfType, context);
+        } finally {
+            stack.pop();
+        }
+        return selfType;
+    }
\ No newline at end of file
