diff --git a/tmp/6b83e05b-28fc-4908-9277-904da4d8fdb2_buggy.java b/tmp/24edf46a-ec1d-4313-9139-481c960f9a07_fixed.java
index e69de29..f358f40 100644
--- a/tmp/6b83e05b-28fc-4908-9277-904da4d8fdb2_buggy.java
+++ b/tmp/24edf46a-ec1d-4313-9139-481c960f9a07_fixed.java
@@ -0,0 +1,441 @@
+package com.fasterxml.jackson.databind.type;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+// Class definition and other methods are omitted for brevity
+
+public class SimpleType extends TypeBase
+{
+    private static final long serialVersionUID = 1L;
+
+    // Mappings to formal type parameters (if any)
+    // (NOTE: was transient in 1.x)
+    /**
+     * Type parameters of the class represented by this type instance.
+     */
+    protected final JavaType[] _typeParameters;
+
+    /**
+     * Contained types; possibly needed for type resolution
+     * (for example, content type of arrays)
+     */
+    protected final JavaType[] _containedTypes;
+
+    /**
+     * Specific handler (serializer, deserializer) to use for handling instances of this type.
+     * @since 2.9
+     */
+    protected final Object _valueHandler;
+
+    /**
+     * Specific handler (serializer, deserializer) to use for handling instances of this type.
+     * @since 2.9
+     */
+    protected final Object _typeHandler;
+
+    /**
+     * @since 2.9
+     */
+    protected final boolean _asStatic;
+
+    /**
+     * Lazily resolved references to super-classes (if any), class hierarchy.
+     * Does not include type itself.
+     *
+     * @since 2.7
+     */
+    protected HierarchicType _superClass;
+
+    /**
+     * Lazily resolved references to implemented interfaces, class hierarchy.
+     * Does not include type itself.
+     *
+     * @since 2.7
+     */
+    protected HierarchicType[] _interfaces;
+
+    /*
+    /**********************************************************
+    /* Life-cycle
+    /**********************************************************
+     */
+
+    /**
+     * Constructor only used by {@link TypeFactory}.
+     *
+     * @since 2.7 -- remove final to allow mocking (for testing, mostly)
+     */
+    protected SimpleType(Class<?> cls) {
+        // We trust caller here, that class is not Collection, Map, Array or Enum
+        this(cls, TypeBindings.emptyBindings(), null, null);
+    }
+
+    /**
+     * @since 2.9 -- changed to public to allow usage by {@link ResolvedRecursiveType}
+     */
+    public SimpleType(TypeBase base, JavaType[] typeParams) {
+        super(base);
+        _typeParameters = typeParams;
+        // 10-Oct-2015, tatu: Not 100% sure this is needed but... let's try it.
+        _containedTypes = typeParams;
+        _valueHandler = base.getValueHandler();
+        _typeHandler = base.getTypeHandler();
+        _asStatic = base.isAsStatic();
+    }
+
+    /**
+     * Primary constructor for new types.
+     *
+     * @since 2.7
+     */
+    protected SimpleType(Class<?> cls, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInts)
+    {
+        this(cls, bindings, superClass, superInts, null, null, false);
+    }
+
+    protected SimpleType(Class<?> cls, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler,
+            boolean asStatic)
+    {
+        this(cls, bindings, superClass, superInts, cls.hashCode(),
+                valueHandler, typeHandler, asStatic);
+    }
+
+    /**
+     * @since 2.7
+     */
+    protected SimpleType(Class<?> cls, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInts, int extraHash,
+            Object valueHandler, Object typeHandler, boolean asStatic)
+    {
+        super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic);
+        // Should we try to figure out type parameters? Yes.
+        if (bindings.isEmpty()) {
+            _typeParameters = NO_TYPES;
+        } else {
+            _typeParameters = bindings.typeParameterArray();
+        }
+        // Contained types are type parameters AND super-types (if any)
+        // NOTE: only need direct super-type if it has type parameters
+        if (superClass == null) {
+            _containedTypes = _typeParameters;
+        } else {
+            // ... also, should super-types be added? For now, let's not unless type itself
+            // is generic...
+            if (superClass.hasContentType()) {
+                _containedTypes = new JavaType[_typeParameters.length+1];
+                System.arraycopy(_typeParameters, 0, _containedTypes, 0, _typeParameters.length);
+                _containedTypes[_typeParameters.length] = superClass;
+            } else {
+                _containedTypes = _typeParameters;
+            }
+        }
+        _valueHandler = valueHandler;
+        _typeHandler = typeHandler;
+        _asStatic = asStatic;
+    }
+
+    /**
+     * Constructor used when creating handling-specific subtypes
+     *
+     * @since 2.7
+     */
+    protected SimpleType(Class<?> cls, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInts,
+            JavaType[] typeParams, JavaType[] containedTypes,
+            HierarchicType hSuperClass, HierarchicType[] hInterfaces,
+            int hash,
+            Object valueHandler, Object typeHandler, boolean asStatic)
+    {
+        super(cls, bindings, superClass, superInts, hash,
+                valueHandler, typeHandler, asStatic);
+        _typeParameters = typeParams;
+        _containedTypes = containedTypes;
+        _superClass = hSuperClass;
+        _interfaces = hInterfaces;
+    }
+
+    /**
+     * @since 2.7
+     */
+    public static SimpleType constructUnsafe(Class<?> cls) {
+        // 16-May-2016, tatu: Not sure if this is required (or makes sense);
+        //   but needed to resolve [databind#1239] at least temporarily
+        return new SimpleType(cls, null, null, null, null, null, false);
+    }
+
+    /**
+     * @since 2.8
+     */
+    public SimpleType withHandlersFrom(JavaType src) {
+        // Let super class decide on basics:
+        JavaType type = super.withHandlersFrom(src);
+        // but then need to re-create hierarchic types, if any:
+        JavaType srcSuperClass = src.getSuperClass();
+        HierarchicType h = null;
+        if (srcSuperClass != null) {
+            // Sanity check: if LHS has super class, must be same...
+            if (_superClass != null && _superClass.getRawClass() == srcSuperClass.getRawClass()) {
+                h = _superClass.deepCloneWithoutSubclass();
+                srcSuperClass.setHierarchy(h);
+                // Not sure if this is needed but...
+                h.setSuperType(srcSuperClass.getSuperType());
+            }
+        }
+        // same for interfaces
+        // Hmmh. Actually, this may require re-construction of types, due to
+        // possible self-references. Let's punt for now, worry if it becomes
+        // actual problem. Note that issue is with potential definitions of
+        // Serializers/Deserializers that refer back to type being defined...
+        return type;
+    }
+
+    @Override
+    public JavaType withContentType(JavaType contentType) {
+        // Can not change main type, so:
+        throw new IllegalArgumentException("Simple types have no content types; cannot call withContentType()");
+    }
+
+    @Override
+    public SimpleType withTypeHandler(Object h)
+    {
+        if (_typeHandler == h) {
+            return this;
+        }
+        // 19-Mar-2016, tatu: Must re-create type since these are immutable;
+        //    could be extracted but code is simple enough:
+        return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _hash,
+                _valueHandler, h, _asStatic);
+    }
+
+    @Override
+    public JavaType withContentTypeHandler(Object h) {
+        // no content type, so is no-op; can return this:
+        return this;
+    }
+
+    @Override
+    public SimpleType withValueHandler(Object h) {
+        if (h == _valueHandler) {
+            return this;
+        }
+        return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _hash,
+                h, _typeHandler, _asStatic);
+    }
+
+    @Override
+    public SimpleType withStaticTyping() {
+        return _asStatic ? this :
+            new SimpleType(_class, _bindings, _superClass, _superInterfaces, _hash,
+                    _valueHandler, _typeHandler, true);
+    }
+
+    @Override
+    public JavaType refine(Class<?> rawType, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInterfaces) {
+        // 21-Sep-2017, tatu: For recursive types, this may be called at a point where
+        //    super-class/interfaces are not yet resolved. If so, should not try to
+        //    use them, but rather keep existing references.
+
+        // TODO: Tatu-> Improve to check _superClass, _superInterfaces?
+
+        return null;
+    }
+
+    @Override
+    protected JavaType _narrow(Class<?> subclass)
+    {
+        // Should we check that subclass is actual subclass of current class?
+        // Better not to, to keep checks cheap
+        // 18-Mar-2010, tatu: Except if class is final, can not narrow:
+        if (_class == subclass) {
+            return this;
+        }
+
+        // Must re-evaluate type parameters, bindings
+        // 24-Aug-2016, tatu: This check seems wrong; should rather check whether subclass
+        //    itself requires bindings... Need to reconsider. But for now keep as is.
+        if (!_class.isAssignableFrom(subclass)) {
+             // This check should perhaps be done earlier... but let's start by
+             // adding it here. If this is called, assumptions are that subclass
+             // IS a subtype, but let's double-check? Or is this just wrong?
+            return new SimpleType(subclass, _bindings, this, _superInterfaces, _hash,
+                    _valueHandler, _typeHandler, _asStatic);
+        }
+        // Otherwise, need to figure out bindings, if any?
+
+        // TODO: this is guesswork; may need revisiting, fixing
+        // 14-Aug-2015, tatu: Ok perhaps we do need to resolve...
+        Class<?> next = subclass.getSuperclass();
+        if (next == _class) { // direct check that given subclass is direct subclass
+            // apparently yes. In this case, create new instance, but need to
+            // ensure type parameters from this type are carried over.
+            // How about super-interfaces? Let's assume for now that they do not change
+            return new SimpleType(subclass, _bindings, this, _superInterfaces, _hash,
+                    _valueHandler, _typeHandler, _asStatic);
+        }
+        // If not direct subclass, need to traverse up; we can start from subclass's superclass
+        if (next != null && _class.isAssignableFrom(next)) {
+            // and get super type down to here:
+            JavaType nextType = _narrow(next);
+            return new SimpleType(subclass, _bindings, nextType, _superInterfaces, _hash,
+                    _valueHandler, _typeHandler, _asStatic);
+        }
+        // and interfaces are similar deal
+        Class<?>[] ifcs = subclass.getInterfaces();
+        for (Class<?> ifc : ifcs) {
+            if (ifc == _class) {
+                return new SimpleType(subclass, _bindings, null, new JavaType[] { this }, _hash,
+                        _valueHandler, _typeHandler, _asStatic);
+            }
+            if (_class.isAssignableFrom(ifc)) {
+                JavaType nextType = _narrow(ifc);
+                return new SimpleType(subclass, _bindings, null, new JavaType[] { nextType }, _hash,
+                        _valueHandler, _typeHandler, _asStatic);
+            }
+        }
+        // but if nothing works, just need to create basic type:
+        return new SimpleType(subclass, _bindings, this, _superInterfaces, _hash,
+                _valueHandler, _typeHandler, _asStatic);
+        // ... and this is just wrong, but should not occur.
+        // throw new IllegalArgumentException("Internal error: Should not attempt to narrow "+this+" to subclass "+subclass.getName());
+    }
+
+    /*
+    /**********************************************************
+    /* Public API overrides
+    /**********************************************************
+     */
+
+    @Override
+    public int containedTypeCount() {
+        return (_containedTypes == null) ? 0 : _containedTypes.length;
+    }
+
+    @Override
+    public JavaType containedType(int index) {
+        if (_containedTypes == null || index < 0 || index >= _containedTypes.length) {
+            return null;
+        }
+        return _containedTypes[index];
+    }
+
+    @Override
+    public String containedTypeName(int index) {
+        // TODO: should use TypeBindings information?
+        return null;
+    }
+
+    @Override
+    public JavaType getSuperClass() {
+        // 18-Sep-2017, tatu: Need to be careful here, check for recursive type
+        if (_superClass != null && _superClass instanceof ResolvedRecursiveType) {
+            JavaType actual = ((ResolvedRecursiveType) _superClass).getSelfReferencedType();
+            // Sanity check: self-reference *must* exist, right?
+            // Actually.. maybe not? Need to return placeholder, otherwise
+            // certain things will break. Seems counter-intuitive perhaps...
+            if (actual != null) {
+                return actual;
+            }
+        }
+        return _superClass;
+    }
+
+    @Override
+    public StringBuilder getErasedSignature(StringBuilder sb) {
+        return _classSignature(_class, sb, true);
+    }
+
+    @Override
+    public StringBuilder getGenericSignature(StringBuilder sb) {
+        _classSignature(_class, sb, false);
+        int count = (_typeParameters == null) ? 0 : _typeParameters.length;
+        if (count > 0) {
+            sb.append('<');
+            for (int i = 0; i < count; ++i) {
+                sb = _typeParameters[i].getGenericSignature(sb);
+            }
+            sb.append('>');
+        }
+        sb.append(';');
+        return sb;
+    }
+
+    /*
+    /**********************************************************
+    /* Extended API
+    /**********************************************************
+     */
+
+    /**
+     * @since 2.7
+     */
+    @Override
+    public void setHierarchy(HierarchicType h) {
+        _superClass = h;
+    }
+
+    /**
+     * @since 2.7
+     */
+    @Override
+    public void setInterfaces(HierarchicType[] i) {
+        _interfaces = i;
+    }
+
+    /**
+     * @since 2.7
+     */
+    @Override
+    public HierarchicType getHierarchy() {
+        return _superClass;
+    }
+
+    /*
+    /**********************************************************
+    /* Internal methods
+    /**********************************************************
+     */
+
+    /**
+     * @since 2.7
+     */
+    protected void _resolveHierarchy() {
+        // 21-Sep-2017, tatu: As per [databind#1647], need to be careful, avoid cyclic resolution
+        HierarchicType sup = _findSuperClass(_class.getGenericSuperclass(), this);
+        setHierarchy(sup);
+        // ... and interfaces
+        setInterfaces(_findSuperInterfaces(_class.getGenericInterfaces(), this, sup));
+    }
+
+    /*
+    /**********************************************************
+    /* Standard methods
+    /**********************************************************
+     */
+
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder(40);
+        sb.append("[simple type, class ").append(buildCanonicalName()).append(']');
+        return sb.toString();
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+
+        SimpleType other = (SimpleType) o;
+
+        // Classes must be identical...
+        if (other._class != this._class) return false;
+
+        // And bindings must be identical as well:
+        return _bindings.equals(other._bindings);
+    }
+}
