diff --git a/tmp/5ae5cd1c-1d21-4520-ac7d-4e2cfdf5293d_buggy.java b/tmp/3e2993c8-1ddf-41ed-8e72-7c1afe242607_fixed.java
index e69de29..f1be222 100644
--- a/tmp/5ae5cd1c-1d21-4520-ac7d-4e2cfdf5293d_buggy.java
+++ b/tmp/3e2993c8-1ddf-41ed-8e72-7c1afe242607_fixed.java
@@ -0,0 +1,39 @@
+    @Override
+    public JavaType getSuperClass() {
+        if (_referencedType != null) {
+            return _referencedType.getSuperClass();
+        }
+        // Call to resolve may be expensive, however, so only call if necessary;
+        // and possibly only once as well. Needs synchronization? (hope not)
+        // 11-Oct-2017, tatu: As per [databind#1647], may need to resolve non-recursively;
+        //   hopefully won't choke. NOTE: requires TypeBindings to refer back to TypeFactory
+        // NOTE: fields are NOT final, sideboarded using visible-after-construction,
+        // so theoretically could see null reference lecteur... an edge case for now.
+        if (_superClass == null) {
+            TypeBindings bindings = getBindings();
+            if (bindings != null) {
+                 TypeFactory tf = bindings.getTypeFactory();
+                 if (tf != null) {
+                     // Note: MUST pass 'null' ClassStack, to avoid infinite recursion
+                     try {
+                        _superClass = tf._resolveSuperClass(_raw, bindings);
+                     } catch (IllegalArgumentException e) {
+                        // 20-Mar-2021, tatu: [databind#3088]: Need to catch issue with trying to make
+                        //    java.lang.Record the supertype... doesn't work, needs to be Object.
+                        //    Only occurs on broken JDKs (14?), but work around it.
+                        // Ideally would be more specific, closer to `tf._mapJavaLangObject()`, but
+                        // maybe this is safer. Needs to be JavaType for 'Object', specifically
+                        if (_raw.getSuperclass() == null) { // which would indicate Object
+                            _superClass = tf.constructType(Object.class);
+                        } else {
+                            throw e;
+                        }
+                     }
+                 }
+             }
+            // If resolution failed, still null; We're fine with that? Or should perhaps
+            // assign Object.class equivalent? For now, leave as is
+            // (unless we hit that Record issue)
+        }
+        return _superClass;
+    }
\ No newline at end of file
