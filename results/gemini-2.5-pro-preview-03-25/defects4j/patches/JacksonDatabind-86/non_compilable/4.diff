diff --git a/tmp/b59b785a-05d8-4874-9094-dcbb3e82fd40_buggy.java b/tmp/cc08e276-b268-4bd3-ad11-8469e8117409_fixed.java
index e69de29..2dbc5ce 100644
--- a/tmp/b59b785a-05d8-4874-9094-dcbb3e82fd40_buggy.java
+++ b/tmp/cc08e276-b268-4bd3-ad11-8469e8117409_fixed.java
@@ -0,0 +1,41 @@
+	/**
+	 * Method called to check if type is included in known type cache;
+	 * if so, returning it; if not, returning null.
+     * Note: does NOT check for recursive merging, related types, so caller
+     * must handle checking.
+	 *
+	 * @param cl Class to look for
+	 *
+	 * @return Type found, if any; null if none
+	 */
+	protected JavaType _findCachedType(Class<?> cl) {
+	    // 01-Mar-2016, tatu: For some reason, this caching seems to have issues
+	    //   with default typing and perhaps modules. Disabling for now.
+	    //   (re-enabling seems to make default typing tests fail)
+	    // 08-Sep-2016, tatu: Actually, problem might be that type modifiers may
+	    //    change aspects of type... so let's try re-enabling, but only if
+	    //    no modifiers are present.
+	    if (_modifiers != null) {
+	        // TODO: Need to ensure this is sufficient; also, should we perhaps
+	        // clear cache upon registration?
+	        return null;
+	    }
+	    // Should not need ClassKey; identity comparison should be fine
+	    // 01-Mar-2016, tatu: Except for seemingly very rare occurrences of class loader leaks,
+	    //   maybe? Let's revert to ClassKey just in case. Alas, does not help with [databind#1148]
+	    //   ... so maybe revert back? For now, keep ClassKey.
+	    JavaType type = _cachedTypes.get(new ClassKey(cl));
+
+	    // 18-Oct-2017, tatu: As per [databind#1647], need to ensure we don't
+	    //   return placeholder type (ResolvedRecursiveType) but an actual resolved one.
+	    if (type instanceof ResolvedRecursiveType) {
+	        ResolvedRecursiveType rrt = (ResolvedRecursiveType) type;
+	        JavaType resolved = rrt.getSelfReferencedType();
+	        // If resolved, return the resolved type; otherwise return placeholder
+	        // (which indicates type construction is in progress)
+	        if (resolved != null) {
+	            return resolved;
+	        }
+	    }
+	    return type;
+	}
\ No newline at end of file
