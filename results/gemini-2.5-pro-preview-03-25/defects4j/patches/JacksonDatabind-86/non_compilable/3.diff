diff --git a/tmp/7b60defe-1966-4258-a496-baca56e07c9b_buggy.java b/tmp/30c4e8ce-a0c6-4ac0-bf84-a10267b861dd_fixed.java
index e69de29..4729e56 100644
--- a/tmp/7b60defe-1966-4258-a496-baca56e07c9b_buggy.java
+++ b/tmp/30c4e8ce-a0c6-4ac0-bf84-a10267b861dd_fixed.java
@@ -0,0 +1,130 @@
+// Method in class com.fasterxml.jackson.databind.type.TypeFactory
+// NOTE: Signature changed in 2.9 from `_fromClass(ClassStack, Class<?>, TypeBindings)`
+// to `_fromClass(Class<?>, TypeBindings)`
+@Override
+protected JavaType _fromClass(Class<?> cl, TypeBindings bindings)
+{
+    // First: maybe we have already seen this type?
+    JavaType type = _findWellKnownSimple(cl);
+    if (type != null) {
+        return type;
+    }
+
+    // Two-phase lookup: first using exact Class, then resolving
+    // hierarchy. Need to be careful with locking...
+
+    // 16-Aug-2016, tatu: Need to use `getCacheKey()` to handle possible bindings
+    final String key = bindings.getCacheKey(cl);
+    type = _typeCache.get(key);
+
+    if (type != null) {
+        // 13-May-2017, tatu: Important: self-refs must be handled regardless of cache find:
+        if (type.isContainerType() && type.isReferenceType()) { // includes recursive types
+            // Ugh. This gets tricky. Two basic cases. Let's assume exact match is fine,
+            // for now. NOTE: Used to check binding equality if `raw == cl`, but that
+            // does not seem right. Leave for future work if that needs re-consideration
+        }
+        return type;
+    }
+
+    // 15-May-2017, tatu: Required for [databind#1577], [databind#1647]
+    ResolvedRecursiveType selfRef = null;
+    boolean processing = _isProcessing(cl);
+
+    // 19-May-2017, tatu: As per [databind#1647], need to handle the case where
+    //    look-up fails even if it's όχι recursive look-up...
+    if (processing) {
+        // We are actively processing this type: recursive reference
+        selfRef = new ResolvedRecursiveType(cl, bindings);
+        //Important: MUST cache the placeholder BEFORE resolving supertypes etc:
+        _typeCache.put(key, selfRef);
+    } else {
+        _setProcessing(cl);
+    }
+
+    // If we had already started resolving this type, must return placeholder
+    if (selfRef != null) {
+        return selfRef;
+    }
+
+    try {
+        // Ok, no recursive self-reference (yet?), must resolve
+        type = _constructType(cl, bindings);
+
+        // Need to take type parameters into account, resolve super-class and super-interfaces.
+        if (!type.isPrimitive() && !type.isArray()) {
+            // 13-May-2017, tatu: Super-class/interfaces may be complex, need context
+            // Need ClassStack, but let's create it only now if needed?
+            type = _resolveSuperClass(new ClassStack(cl), type, bindings);
+            type = _resolveSuperInterfaces(new ClassStack(cl), type, bindings);
+            // 13-May-2017, tatu: One more thing; need to also ensure hierarchy
+            //    is fully resolved BEFORE caching the type.
+            // 06-Dec-2017, tatu: But... only do this for `SimpleType`?
+            if (type.isSimpleType()) {
+                if (type.getSuperClass() == null) {
+                    Class<?> raw = type.getRawClass();
+                    // Should not happen for Object, but check just in case:
+                    if (raw != Object.class) {
+                        // assign Object.class if there is no explicit super class...
+                        // except for interfaces. And annotation types (which are interfaces too)
+                        if (!raw.isInterface()) {
+                            JavaType objectType = _fromClass(Object.class, TypeBindings.emptyBindings());
+                            ((SimpleType) type).setSuperClass(objectType);
+                        }
+                    }
+                }
+            }
+        }
+        // Anything added to cache now? If so, is it what we have?
+        JavaType t = _typeCache.put(key, type);
+        if (t != null && t != selfRef) { // yikes! Should not happen... but
+            // Let's NOT try to resolve twice. Probably fine?
+            // 29-Mar-2017, tatu: Actually should probably complain... ? Or maybe self-ref?
+            // 06-Dec-2017, tatu: Not sure if this can actually happen anymore. Hope not.
+            /*
+             System.err.printf("Internal error: type resolved (%s) different instance than cached (%s) for key '%s'\n",
+             type, t, key);
+             */
+             // 16-Jan-2018, tatu: Actually, one case is possible: if we recursively call
+             //    this method, we may have added placeholder which is then resolved.
+             //    Need to double-check details, but this seems plausible.
+             //    Let's not throw Exception quite yet.
+        }
+        return type;
+    } finally {
+        _removeProcessing(cl);
+
+        // 19-May-2017, tatu: Any recursive types to resolve?
+        if (selfRef != null) {
+            // 06-Dec-2017, tatu: Maybe need to use ClassStack? Seems like it should not be needed,
+            //    recursive references are resolved using cache lookups.
+             JavaType resolved = _typeCache.get(key);
+             if (resolved == null) { // should not happen but
+                 // 10-Jan-2018, tatu: Let's try to resolve again just in case? For some reason,
+                 //   placeholder was perhaps (?) evicted? Or resolution failed?
+                 resolved = _constructType(cl, bindings);
+                 // 16-Jan-2018, tatu: As per notes above, super-type/interface resolution is needed too
+                 resolved = _resolveSuperClass(new ClassStack(cl), resolved, bindings);
+                 resolved = _resolveSuperInterfaces(new ClassStack(cl), resolved, bindings);
+
+                 // And we may need to re-populate SimpleType's super type as well
+                 if (resolved.isSimpleType()) {
+                     if (resolved.getSuperClass() == null) {
+                         Class<?> raw = resolved.getRawClass();
+                         if (raw != Object.class) {
+                             if (!raw.isInterface()) {
+                                 JavaType objectType = _fromClass(Object.class, TypeBindings.emptyBindings());
+                                 ((SimpleType) resolved).setSuperClass(objectType);
+                             }
+                         }
+                     }
+                 }
+                 _typeCache.put(key, resolved);
+             }
+             // sanity check, should always be the resolved version
+             if (resolved != selfRef) {
+                 selfRef.setReference(resolved);
+             }
+        }
+    }
+}
\ No newline at end of file
