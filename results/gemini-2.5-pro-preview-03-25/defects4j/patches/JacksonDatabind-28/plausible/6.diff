diff --git a/tmp/4ae1aa24-63cf-4b07-9863-a06dbee20c4c_buggy.java b/tmp/8d98aa6c-96ca-4b62-94ca-2cf241d8b683_fixed.java
index 66bb99f..1215dbd 100644
--- a/tmp/4ae1aa24-63cf-4b07-9863-a06dbee20c4c_buggy.java
+++ b/tmp/8d98aa6c-96ca-4b62-94ca-2cf241d8b683_fixed.java
@@ -1,14 +1,22 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+            // 16-Nov-2015, tatu: Minor simplification: START_OBJECT is easiest
+            //    case; but END_OBJECT requires special handling
+            if (p.isExpectedStartObjectToken()) {
                 p.nextToken();
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            JsonToken t = p.getCurrentToken();
+            // Most likely case here is FIELD_NAME, for empty Object:
+            if (t == JsonToken.FIELD_NAME) {
+                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            }
             // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
-                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            //    if caller has advanced to the first token of Object, but for empty Object.
+            //    Let's just handle that here:
+            if (t == JsonToken.END_OBJECT) {
+                 return ctxt.getNodeFactory().objectNode();
             }
-            throw ctxt.mappingException(ObjectNode.class);
+            throw ctxt.mappingException(ObjectNode.class, t);
          }
\ No newline at end of file
