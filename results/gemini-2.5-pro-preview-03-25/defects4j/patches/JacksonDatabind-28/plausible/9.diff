diff --git a/tmp/987b924c-f171-4360-ad35-988a31644623_buggy.java b/tmp/7d4b6128-4ac1-4644-bf0d-b57f92dd2104_fixed.java
index 66bb99f..5f7d457 100644
--- a/tmp/987b924c-f171-4360-ad35-988a31644623_buggy.java
+++ b/tmp/7d4b6128-4ac1-4644-bf0d-b57f92dd2104_fixed.java
@@ -1,14 +1,22 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+            // NOTE: Lgtm says 'p.getCurrentToken() == JsonToken.START_OBJECT' is always true
+            // BUT that's not the case when START_OBJECT is consumed by the caller
+            // (like JsonNodeDeserializer)
+            if (p.isExpectedStartObjectToken()) { // Standard case: START_OBJECT
                 p.nextToken();
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+            // Alternative cases where START_OBJECT has been consumed:
+            JsonToken t = p.getCurrentToken();
+            if (t == JsonToken.FIELD_NAME) { // Object with fields
+                // 23-Sep-2015, tatu: As per [databind#941], may start with FIELD_NAME
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            throw ctxt.mappingException(ObjectNode.class);
+            if (t == JsonToken.END_OBJECT) { // Empty object, as per [databind#941]
+                 return ctxt.getNodeFactory().objectNode();
+            }
+            // Anything else is an error
+            throw ctxt.mappingException(ObjectNode.class, t);
          }
\ No newline at end of file
