diff --git a/tmp/6ce78b7b-d05e-457a-a461-2c3bf5012e96_buggy.java b/tmp/88081f12-8c9f-4208-923e-948901473b2c_fixed.java
index 66bb99f..d4f12e0 100644
--- a/tmp/6ce78b7b-d05e-457a-a461-2c3bf5012e96_buggy.java
+++ b/tmp/88081f12-8c9f-4208-923e-948901473b2c_fixed.java
@@ -1,14 +1,20 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+            final JsonNodeFactory nodeFactory = ctxt.getNodeFactory();
+            // Main case: parser points to START_OBJECT
+            if (p.isExpectedStartObjectToken()) {
                 p.nextToken();
-                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+                return deserializeObject(p, ctxt, nodeFactory);
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
-                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            // Then handle cases where START_OBJECT has been consumed somehow
+            JsonToken t = p.getCurrentToken();
+            if (t == JsonToken.END_OBJECT) { // Case where START_OBJECT was consumed for empty object {}
+                 return nodeFactory.objectNode();
             }
-            throw ctxt.mappingException(ObjectNode.class);
+            if (t == JsonToken.FIELD_NAME) { // Case where START_OBJECT was consumed for non-empty object { "a":1 }
+                return deserializeObject(p, ctxt, nodeFactory);
+            }
+            // Otherwise, it's an error. Pass current token to improve error message.
+            throw ctxt.mappingException(ObjectNode.class, t);
          }
\ No newline at end of file
