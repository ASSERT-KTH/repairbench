diff --git a/tmp/ec5615ec-3e72-48d0-bc87-d91db0694459_buggy.java b/tmp/1d8e0b9f-4a07-48c5-b5d5-49cc41327358_fixed.java
index 66bb99f..01caf82 100644
--- a/tmp/ec5615ec-3e72-48d0-bc87-d91db0694459_buggy.java
+++ b/tmp/1d8e0b9f-4a07-48c5-b5d5-49cc41327358_fixed.java
@@ -1,14 +1,21 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
-                p.nextToken();
-                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            final JsonNodeFactory nodeFactory = ctxt.getNodeFactory();
+            if (p.isExpectedStartObjectToken()) { // Current token is START_OBJECT
+                p.nextToken(); // Consume the START_OBJECT
+                return deserializeObject(p, ctxt, nodeFactory);
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
-                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            // Handle cases where the caller might have already consumed START_OBJECT
+            // (like when used as a field value within another object)
+            JsonToken t = p.getCurrentToken();
+            if (t == JsonToken.FIELD_NAME) { // Or FIELD_NAME if not empty
+                return deserializeObject(p, ctxt, nodeFactory);
             }
+            // Fix for #941: Deserializing an empty object results in END_OBJECT token
+            if (t == JsonToken.END_OBJECT) {
+                 return nodeFactory.objectNode();
+            }
+            // Otherwise, it's an error
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
