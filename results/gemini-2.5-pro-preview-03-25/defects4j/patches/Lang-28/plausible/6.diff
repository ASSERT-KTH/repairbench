diff --git a/tmp/56b6abb7-d1ee-46ab-b6df-ed476cd0b918_buggy.java b/tmp/4c059276-590e-4c0e-84d3-b6e7ac0d6a58_fixed.java
index 4bbd561..d5839c3 100644
--- a/tmp/56b6abb7-d1ee-46ab-b6df-ed476cd0b918_buggy.java
+++ b/tmp/4c059276-590e-4c0e-84d3-b6e7ac0d6a58_fixed.java
@@ -1,37 +1,80 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        final int inputLen = input.length();
+        // Check bounds for initial characters '&' and '#'
+        // Check if characters match Numeric Entity format "&#"
+        if (input.charAt(index) == '&' && index + 1 < inputLen && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            // Check bounds after '#'
+            if (start >= inputLen) {
+                return 0; // Input ends prematurely after "&#"
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
+            // Check for optional hex marker 'x' or 'X'
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
+                // Check bounds after 'x'/'X'
+                if (start >= inputLen) {
+                    return 0; // Input ends prematurely after "&#x"
+                }
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the terminating semicolon ';', checking bounds
+            while (end < inputLen && input.charAt(end) != ';') {
                 end++;
             }
 
+            // Check if semicolon was found before the end of the input
+            if (end == inputLen || input.charAt(end) != ';') {
+                 return 0; // Malformed entity: no terminating semicolon found
+            }
+
+            // Check if there was at least one digit/hex digit between '#'/'#x' and ';'
+            if (start == end) {
+                return 0; // Malformed entity: no number present (e.g., "&#;", "&#x;")
+            }
+
             int entityValue;
             try {
+                CharSequence numeric = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numeric.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numeric.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-                return 0;
+                // The sequence between start and end is not a valid number in the specified base
+                // or the number is too large/small for an int.
+                return 0; // Treat as untranslatable
+            }
+
+            // Check if the parsed value is a valid Unicode code point.
+            // Valid range is U+0000 to U+10FFFF.
+            if (entityValue < Character.MIN_CODE_POINT || entityValue > Character.MAX_CODE_POINT) {
+                 // The numeric value does not represent a valid Unicode code point.
+                 return 0; // Treat as untranslatable
             }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Convert the code point to its char representation.
+            // This handles both BMP characters (resulting in a single char)
+            // and supplementary characters (resulting in a surrogate pair - two chars).
+            final char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+
+            // Return the total number of characters consumed from the input sequence.
+            // Calculation: length of "&#" (2)
+            //            + length of "x" (1 if hex, 0 otherwise)
+            //            + length of digits (end - start)
+            //            + length of ";" (1)
+            return 2 + (isHex ? 1 : 0) + (end - start) + 1;
         }
+        // The sequence at the current index does not start with "&#", so it's not a numeric entity.
         return 0;
     }
\ No newline at end of file
