diff --git a/tmp/f52ec70d-3efa-49d5-aa22-1fa2fb30e752_buggy.java b/tmp/0c336c38-7bcc-4166-99be-3a1cb9568dbb_fixed.java
index 4bbd561..66c6fe1 100644
--- a/tmp/f52ec70d-3efa-49d5-aa22-1fa2fb30e752_buggy.java
+++ b/tmp/0c336c38-7bcc-4166-99be-3a1cb9568dbb_fixed.java
@@ -1,37 +1,77 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        final int seqEnd = input.length();
+        // Check sufficient length for potential entity: minimum "&#d;" is 4 chars
+        // Check for '&#' starting sequence
+        if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            // Check if there's room for at least one digit/hex char and a semicolon
+            if (start >= seqEnd) {
+                return 0;
+            }
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
+
+            // Check for optional 'x' or 'X' indicating hexadecimal format
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
+                // Check if there's room for at least one hex digit and a semicolon after 'x'/'X'
+                if (start >= seqEnd) {
+                    return 0; // Incomplete sequence like "&#x"
+                }
                 isHex = true;
             }
 
+            // Find the terminating semicolon ';'
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            // Check if semicolon was found and if there were digits between #/x and ;
+            if (end == seqEnd || end == start) { // Missing ';' or no digits (e.g., "&#;" or "&#x;")
+                return 0;
+            }
+
             int entityValue;
             try {
+                // Parse the numeric value between start and end indices
+                final CharSequence sub = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(sub.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(sub.toString(), 10);
                 }
-            } catch(NumberFormatException nfe) {
-                return 0;
+            } catch (final NumberFormatException nfe) {
+                // The sequence between #/x and ; was not a valid number in the specified base
+                return 0; // Indicate translation failure
             }
 
+            // Convert the numeric value to char(s) and write to the output
+            try {
+                if (entityValue > 0xFFFF) {
+                    // Handle supplementary Unicode characters (codes > 0xFFFF)
+                    // Character.toChars converts the code point to its UTF-16 surrogate pair representation.
+                    // It throws IllegalArgumentException if entityValue is not a valid Unicode code point (e.g., > 0x10FFFF).
+                    out.write(Character.toChars(entityValue));
+                } else {
+                    // Handle Basic Multilingual Plane (BMP) characters (codes <= 0xFFFF)
+                    // This includes directly writing surrogate code points (U+D800-U+DFFF) if provided,
+                    // matching the behavior of the original code for BMP values.
                     out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
                 }
+            } catch (final IllegalArgumentException e) {
+                 // The parsed entityValue is not a valid Unicode code point (e.g., exceeds Character.MAX_CODE_POINT)
+                 return 0; // Indicate translation failure
+            }
+
+            // Return the total number of characters consumed from the input sequence
+            // The entity starts at 'index' and ends at 'end' (inclusive ';'). Total length is (end - index + 1).
+            return end + 1 - index;
+        }
+        // The input sequence at the given index does not start with "&#"
         return 0;
     }
\ No newline at end of file
