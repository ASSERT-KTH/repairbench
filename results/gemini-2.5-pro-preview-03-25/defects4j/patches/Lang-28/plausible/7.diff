diff --git a/tmp/edb89123-6648-46a0-92cc-3991285faf96_buggy.java b/tmp/fb7482d6-1d74-4073-a080-3c6b97a561f1_fixed.java
index 4bbd561..03f129c 100644
--- a/tmp/edb89123-6648-46a0-92cc-3991285faf96_buggy.java
+++ b/tmp/fb7482d6-1d74-4073-a080-3c6b97a561f1_fixed.java
@@ -1,37 +1,73 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Check if we have "&#"
+        if (input.charAt(index) == '&'
+                && index + 1 < input.length() && input.charAt(index + 1) == '#') {
+
             int start = index + 2;
+            // Check if we have at least one character after "&#"
+            if (start == input.length()) {
+                return 0; // Input ends with "&#"
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                // Check if we have at least one character after "&#x" or "&#X"
+                if (start == input.length()) {
+                    return 0; // Input ends with "&#x" or "&#X"
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the semicolon, checking bounds
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            // Check if semicolon was found before the end of the input
+            if (end == input.length() || input.charAt(end) != ';') {
+                return 0; // Malformed entity (missing semicolon or ended prematurely)
+            }
+
             try {
+                CharSequence numericEntity = input.subSequence(start, end);
+                // Check for empty numeric part like "&#;" or "&#x;"
+                if (numericEntity.length() == 0) {
+                    return 0;
+                }
+
+                int entityValue;
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numericEntity.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numericEntity.toString(), 10);
                 }
+
+                // Handle supplementary characters (code points > 0xFFFF)
+                // These require two chars in UTF-16
+                if (entityValue > 0xFFFF) {
+                    out.write(Character.toChars(entityValue));
+                } else {
+                    // Handle BMP characters (code points <= 0xFFFF)
+                    // These require one char in UTF-16
+                    out.write((char) entityValue);
+                }
+
+                // Calculate consumed characters: position after ';' minus starting position 'index'
+                // Includes '&', '#', optional 'x'/'X', digits, and ';'
+                return (end + 1) - index;
+
             } catch (NumberFormatException nfe) {
-                return 0;
+                // Catches invalid numeric sequences between #/[xX] and ;
+                return 0; // Indicates no translation occurred
             }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
+        // Not a numeric entity starting at index
         return 0;
     }
\ No newline at end of file
