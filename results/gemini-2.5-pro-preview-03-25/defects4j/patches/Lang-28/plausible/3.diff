diff --git a/tmp/4418d3ad-d564-4172-86b5-67e504300c78_buggy.java b/tmp/6551d854-f2db-4e8d-b782-85db81193b55_fixed.java
index 4bbd561..b6663ca 100644
--- a/tmp/4418d3ad-d564-4172-86b5-67e504300c78_buggy.java
+++ b/tmp/6551d854-f2db-4e8d-b782-85db81193b55_fixed.java
@@ -1,37 +1,71 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        int seqEnd = input.length();
+        // Check sufficient length for "&#"
+        if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            // Check if sequence terminates after "&#"
+            if (start == seqEnd) {
+                return 0;
+            }
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                // Check if sequence terminates after "&#x"
+                if (start == seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the semicolon, checking bounds
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            // Check if semicolon was found before the end of the sequence
+            if (end == seqEnd) {
+                return 0; // No terminating semicolon found
+            }
+
             int entityValue;
             try {
+                CharSequence entityChars = input.subSequence(start, end);
+                // Check if there are any digits
+                if (entityChars.length() == 0) {
+                    return 0; // e.g., "&#;" or "&#x;"
+                }
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityChars.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(entityChars.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
+                // Treat as untranslatable if parsing fails
                 return 0;
             }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            try {
+                // Convert the numeric value to char(s) and write.
+                // Character.toChars handles supplementary characters correctly.
+                // It throws IllegalArgumentException for invalid code points.
+                out.write(Character.toChars(entityValue));
+            } catch (IllegalArgumentException e) {
+                // Invalid Unicode code point, treat as untranslatable
+                return 0;
+            }
+
+            // Return the number of characters consumed (length of the entity)
+            // Example: "&#123;" -> end=5, index=0. Consumed: 5 - 0 + 1 = 6. Correct.
+            // Example: "&#x10FFFF;" -> end=9, index=0. Consumed: 9 - 0 + 1 = 10. Correct.
+            return end - index + 1;
         }
+        // Not a numeric entity starting at this index
         return 0;
     }
\ No newline at end of file
