diff --git a/tmp/8e0aa51e-3122-42e6-8424-51b8a663499d_buggy.java b/tmp/ef66a8d6-97a3-4bcb-9a4e-1c86f204879c_fixed.java
index 4bbd561..72a66fc 100644
--- a/tmp/8e0aa51e-3122-42e6-8424-51b8a663499d_buggy.java
+++ b/tmp/ef66a8d6-97a3-4bcb-9a4e-1c86f204879c_fixed.java
@@ -1,37 +1,78 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        final int seqEnd = input.length();
+        // Check for '&#'
+        // Check validity of the index and the next character first
+        if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            // Check if there's at least one character after '&#'
+            if (start == seqEnd) {
+                return 0; // Incomplete entity '&#'
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
+            // Check for hex marker 'x' or 'X'
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                // Check if there's at least one character after '&#x'
+                if (start == seqEnd) {
+                    return 0; // Incomplete entity '&#x'
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the ending semicolon, ensuring we don't go out of bounds
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            // Check if semicolon was found before the end of the sequence
+            // and if there were any digits (i.e., end > start)
+            if (end == seqEnd || end == start) {
+                // Malformed entity: no semicolon found or no digits/hex digits found
+                return 0;
+            }
+
             int entityValue;
             try {
+                CharSequence sub = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(sub.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(sub.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
+                // Malformed entity: the sequence between #/[x] and ; is not a valid number
                 return 0;
             }
 
+            // Check if the value is a valid Unicode code point
+            // Note: Integer.parseInt can produce negative values for large hex numbers
+            // if they exceed Integer.MAX_VALUE. Character methods handle code points as ints.
+            // We should ideally handle invalid code points, but the original didn't.
+            // Let's proceed assuming valid code points, focusing on the supplementary char issue.
+
+            if (entityValue > 0xFFFF) {
+                // Handle supplementary characters (code points > U+FFFF)
+                // These need to be encoded as a surrogate pair in UTF-16
+                char[] chars = Character.toChars(entityValue);
+                out.write(chars[0]);
+                out.write(chars[1]);
+            } else {
+                // Handle BMP characters (code points <= U+FFFF)
+                // Note: This includes values from 0 to 0xFFFF
                 out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
             }
+
+            // Calculate the number of input characters consumed
+            // It's 2 for '&#' + 1 if hex ('x') + number of digits (end - start) + 1 for ';'
+            return 2 + (isHex ? 1 : 0) + (end - start) + 1;
+        }
+        // Not a numeric entity starting at the given index
         return 0;
     }
\ No newline at end of file
