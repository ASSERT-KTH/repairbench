diff --git a/tmp/d9cdd4b4-cd4c-4621-8f5e-fd0b51bbfde5_buggy.java b/tmp/298af5e3-0252-4bdf-9228-0b8c22b4f070_fixed.java
index 4bbd561..522d7c2 100644
--- a/tmp/d9cdd4b4-cd4c-4621-8f5e-fd0b51bbfde5_buggy.java
+++ b/tmp/298af5e3-0252-4bdf-9228-0b8c22b4f070_fixed.java
@@ -1,37 +1,82 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Check bounds for initial '&#'.
+        if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            // Check bounds for character after '#'.
+            if (start >= input.length()) {
+                return 0; // Not enough characters for a potential entity.
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
+                // Check bounds after 'x'/'X'.
+                if (start >= input.length()) {
+                    return 0; // Not enough characters after 'x'/'X'.
+                }
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the semicolon, checking bounds and validating digits.
+            while (end < input.length() && input.charAt(end) != ';') {
+                // Check if the character is a valid digit for the base
+                char currentChar = input.charAt(end);
+                if (isHex) {
+                    if (!((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'a' && currentChar <= 'f') || (currentChar >= 'A' && currentChar <= 'F'))) {
+                        // Invalid hex digit found before semicolon
+                        return 0;
+                    }
+                } else {
+                    if (!(currentChar >= '0' && currentChar <= '9')) {
+                        // Invalid decimal digit found before semicolon
+                        return 0;
+                    }
+                }
                 end++;
             }
 
+            // Check if semicolon was found within bounds.
+            if (end == input.length() || input.charAt(end) != ';') {
+                 return 0; // Malformed entity: missing semicolon or ended prematurely.
+            }
+
+            // Check if there were any digits between markers and semicolon.
+            if (start == end) {
+                return 0; // Malformed entity: no digits found.
+            }
+
             int entityValue;
             try {
+                CharSequence subSequence = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(subSequence.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(subSequence.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-                return 0;
+                // Should not happen with the digit checks, but safeguard against overly large numbers.
+                return 0; // Malformed entity: invalid or out-of-range number.
+            }
+
+            try {
+                // Use Character.toChars to handle both BMP and supplementary code points correctly.
+                // This method also throws IllegalArgumentException for invalid code points.
+                char[] chars = Character.toChars(entityValue);
+                out.write(chars);
+            } catch (IllegalArgumentException e) {
+                // The parsed value is not a valid Unicode code point.
+                return 0; // Treat invalid code points as untranslatable.
             }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate consumed length: length = (';' index) + 1 - (start index 'index')
+            return end + 1 - index;
         }
+        // Input didn't start with '&#...' at the given index.
         return 0;
     }
\ No newline at end of file
