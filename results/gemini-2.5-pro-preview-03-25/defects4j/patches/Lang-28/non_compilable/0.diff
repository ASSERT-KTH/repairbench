diff --git a/tmp/cf622eed-91b7-4294-a5ca-45298dc1c63e_buggy.java b/tmp/add4bc9b-a894-4c3e-a221-553dfbc8289c_fixed.java
index 4bbd561..0cd3c7b 100644
--- a/tmp/cf622eed-91b7-4294-a5ca-45298dc1c63e_buggy.java
+++ b/tmp/add4bc9b-a894-4c3e-a221-553dfbc8289c_fixed.java
@@ -1,37 +1,81 @@
+import java.io.IOException;
+import java.io.Writer;
+
+/**
+ * This is a placeholder class that includes the buggy function
+ * and the necessary imports for context.
+ */
+class OriginalClass {
+    // Assume other parts of the class exist here.
+
     /**
      * {@inheritDoc}
      */
-    @Override
+    // @Override // Assuming this overrides a method in a superclass/interface
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        int seqEnd = input.length();
+        // Check for '&#' prefix and bounds
+        if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check for optional 'x' or 'X' prefix for hex notation
+            if (start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
+                    // Check if input ends abruptly after 'x'/'X'
+                    if (start == seqEnd) {
+                        return 0;
+                    }
+                }
+            } else {
+                 // Input ends abruptly after "&#"
+                return 0;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the terminating semicolon, staying within bounds
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            // Check if semicolon was found and if there were any digits
+            if (end == seqEnd || end == start) {
+                return 0; // Semicolon not found or no digits between markers
+            }
+
             int entityValue;
             try {
+                // Parse the numeric value (decimal or hexadecimal)
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
+                // The sequence between # and ; is not a valid number
                 return 0;
             }
 
+            // Check if the character is supplementary (requires two chars in UTF-16)
+            if (entityValue > Character.MAX_VALUE) { // Character.MAX_VALUE is 0xFFFF
+                // Convert supplementary character to surrogate pair
+                char[] chars = Character.toChars(entityValue);
+                // Write both characters of the surrogate pair
+                out.write(chars[0]);
+                out.write(chars[1]);
+            } else {
+                // Write the single character (BMP character)
                 out.write(entityValue);
+            }
+
+            // Return the total number of characters consumed from the input
+            // Calculation: 2 for "&#" + (end - start) for digits + (isHex ? 1 : 0) for "x" + 1 for ";"
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
+        // The sequence does not start with "&#" at the given index
         return 0;
     }
+}
