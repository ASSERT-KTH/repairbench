diff --git a/tmp/ba7da199-27b1-4de0-81aa-98f6deaad474_buggy.java b/tmp/0eb061bc-fe89-48b4-8a5b-b1274f237c99_fixed.java
index 4bbd561..c794e4b 100644
--- a/tmp/ba7da199-27b1-4de0-81aa-98f6deaad474_buggy.java
+++ b/tmp/0eb061bc-fe89-48b4-8a5b-b1274f237c99_fixed.java
@@ -1,37 +1,72 @@
+import java.io.IOException;
+import java.io.Writer;
+
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    final int seqEnd = input.length();
+    // Check for "&#" prefix
+    if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
+        // Check if characters exist after "&#"
+        if (start >= seqEnd) {
+            return 0; // Malformed entity
+        }
+
+        final char firstChar = input.charAt(start);
+        // Check for optional "x" or "X" for hexidecimal entities
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            // Check if characters exist after "&#x"
+            if (start >= seqEnd) {
+                return 0; // Malformed entity
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the terminating semicolon, respecting sequence bounds
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
-            int entityValue;
+        // Check if semicolon was found and if there were digits
+        if (end == seqEnd || end == start) {
+            return 0; // Malformed entity (no digits or no semicolon)
+        }
+
+        final int entityValue;
         try {
+            // Parse the numeric value
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
-            } catch(NumberFormatException nfe) {
-                return 0;
+        } catch (final NumberFormatException nfe) {
+            return 0; // Malformed entity (invalid number)
         }
 
+        // Check if the value represents a supplementary character
+        if (entityValue > 0xFFFF) {
+            // Convert to surrogate pair
+            final char[] chars = Character.toChars(entityValue);
+            out.write(chars[0]); // Write high surrogate
+            out.write(chars[1]); // Write low surrogate
+        } else {
+            // Write Basic Multilingual Plane (BMP) character
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
+
+        // Return the number of characters consumed (length of the entity sequence)
+        // Example: "&#123;" -> end=6, index=0. Consumed = (6 + 1) - 0 = 7.
+        // Example: "&#x10C22;" -> end=8, index=0. Consumed = (8 + 1) - 0 = 9.
+        return (end + 1) - index;
+    }
+    // Not a numeric entity starting at this index
     return 0;
 }
\ No newline at end of file
