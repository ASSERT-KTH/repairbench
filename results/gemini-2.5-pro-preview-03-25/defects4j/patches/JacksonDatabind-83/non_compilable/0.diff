diff --git a/tmp/389f7df6-5539-449a-885c-349c3c99dee9_buggy.java b/tmp/e34cd7fd-4dbe-49bf-8c4c-02c2b62cb39a_fixed.java
index abe09ae..3c37cce 100644
--- a/tmp/389f7df6-5539-449a-885c-349c3c99dee9_buggy.java
+++ b/tmp/e34cd7fd-4dbe-49bf-8c4c-02c2b62cb39a_fixed.java
@@ -1,57 +1,78 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
+            text = text.trim();
+            if (text.isEmpty()) {
                 // 04-Feb-2013, tatu: Usually should become null; but not always
-                return _deserializeFromEmptyString();
+                // 24-Sep-2019, tatu: empty needs different handling than blank...
+                return _deserializeFromEmptyString(ctxt);
             }
+            // 17-Dec-2018, tatu: Certain JDK types like `UUID` require special care wrt exceptions...
+            // Let's delegate grueso modo handling to context now?
             Exception cause = null;
             try {
                 // 19-May-2017, tatu: Used to require non-null result (assuming `null`
                 //    indicated error; but that seems wrong. Should be able to return
                 //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
+                // 08-Jun-2017, tatu: Call `_deserialize()` only once now
+                T result = _deserialize(text, ctxt);
+                if (result != null) {
+                    return result;
                 }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                // 21-Jun-2020, tatu: Need to store actual cause for Problem Handler
+                //   processing BUT also need to avoid NPE later on, if `null` really
+                //   is the value... Does not seem like something can check easily,
+                //   so let's just handle what we can
+                cause = e;
+                // and fall through to handling by context which may involve ProblemHandler
+                // or just throw the exception wrapping the cause
             }
+            // 19-May-2017, tatu: ... this is unfortunate, but has to do for now
+            // 21-Jun-2020, tatu: Let's use standard facilities; handling should be fine,
+            //   except for the slight possibility that `null` is valid value. The check
+            //   above SHOULD take care of that.... meaning we only get here on exception?
             String msg = "not a valid textual representation";
             if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: "+m2;
                 }
             }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
-                e.initCause(cause);
+            // Use method that checks for ProblemHandler, returns value/throws exception
+            Object result = ctxt.handleWeirdStringValue(_valueClass, text, msg);
+            // If it did return value, need to cast (might be null)
+            // 18-Nov-2020, tatu: As per [databind#2958], should NOT coerce to null
+            //    but value needs to be compatible... Although actually for "weird"
+            //    values, seems ok to trust handler? Let's assume ok for now.
+            // 21-Nov-2020, tatu: ... or possibly check `value != null`? For now assume
+            //    handlers know what they are doing.
+            return (T) result;
         }
-            throw e;
-            // nothing to do here, yet? We'll fail anyway
-        }
-        JsonToken t = p.getCurrentToken();
+
+        // Need to support Array (of Strings?) for borderline coercion cases?
+        // Re-scheduled for 2.3; was计划to be done for 2.2
+        JsonToken t = p.currentToken();
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
+            // 25-Nov-2015, tatu: Maybe need to call `_deserializeEmbedded`?
             return _deserializeEmbedded(ob, ctxt);
         }
+        // 24-Sep-2019, tatu: Let's beef up message for unexpected token too
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
