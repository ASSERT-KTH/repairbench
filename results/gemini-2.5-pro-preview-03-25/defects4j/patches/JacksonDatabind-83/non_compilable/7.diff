diff --git a/tmp/6a01c37c-6a48-4693-9575-0811db98f885_buggy.java b/tmp/af7f2d65-93af-4dc3-aeef-6778d2350710_fixed.java
index abe09ae..a7192af 100644
--- a/tmp/6a01c37c-6a48-4693-9575-0811db98f885_buggy.java
+++ b/tmp/af7f2d65-93af-4dc3-aeef-6778d2350710_fixed.java
@@ -1,57 +1,77 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
+            text = text.trim(); // Trim upfront
+            if (text.length() == 0) { // Check length after trim
                 // 04-Feb-2013, tatu: Usually should become null; but not always
-                return _deserializeFromEmptyString();
+                return _deserializeFromEmptyString(); // Delegate check to specific method
             }
+
+            // If not empty, try to deserialize
             Exception cause = null;
             try {
                 // 19-May-2017, tatu: Used to require non-null result (assuming `null`
                 //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
+                //    `null` as value. -> Call once, return value.
+                T result = _deserialize(text, ctxt);
+                return result;
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                // These are expected exceptions for invalid format strings, let's allow handlers to intervene
+                cause = e;
+                // fall through to handler invocation
             }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
-            }
-            String msg = "not a valid textual representation";
+            // OOME or other Errors are not caught; other IOExceptions are not caught
+            // here as _deserialize() isn't supposed to fail with those?
+            // (note: sub-classes may override and add other exceptions)
+
+            // If we reach here, deserialization from string failed.
+            String msg = "not a valid textual representation"; // Base message
             if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: "+m2;
                 }
             }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
+
+            // [databind#1629]: Allow DeserializationProblemHandler to handle
+            // 13-Oct-2020, tatu: Important: MUST call method in DeserializationContext
+            //   AND NOT just `handleWeirdStringValue` on `ObjectMapper` / `MapperFeature`
+            //   because context has information about handler state (avoid infinite loops)
+            Object handled = ctxt.handleWeirdStringValue(_valueClass, text, msg);
+            if (handled != DeserializationContext.UNKNOWN_VALUE) {
+                // Can be null if handler returns null
+                return (T) handled;
+            }
+            // If not handled, THEN throw the exception
             JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
             if (cause != null) {
                 e.initCause(cause);
             }
             throw e;
-            // nothing to do here, yet? We'll fail anyway
+            // Old comment: nothing to do here, yet? We'll fail anyway
         }
-        JsonToken t = p.getCurrentToken();
+
+        // If not-string value
+        JsonToken t = p.currentToken(); // Need to check as `getValueAsString()` may have advanced parser
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
             return _deserializeEmbedded(ob, ctxt);
         }
+        // Otherwise, unexpected token
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
