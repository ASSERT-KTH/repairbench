diff --git a/tmp/e134bac0-2868-462b-8db1-0d9f6188dbc9_buggy.java b/tmp/80aea7bc-ac30-4361-9d05-6cbc8c86e556_fixed.java
index abe09ae..44e000c 100644
--- a/tmp/e134bac0-2868-462b-8db1-0d9f6188dbc9_buggy.java
+++ b/tmp/80aea7bc-ac30-4361-9d05-6cbc8c86e556_fixed.java
@@ -1,57 +1,83 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
-        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
+        // This is the main handling for String values. Delegates to other methods for other types
         String text = p.getValueAsString();
         if (text != null) { // has String representation
             if (text.length() == 0 || (text = text.trim()).length() == 0) {
                 // 04-Feb-2013, tatu: Usually should become null; but not always
                 return _deserializeFromEmptyString();
             }
+            // If we have non-empty String, must parse it:
             Exception cause = null;
+            T result = null;
             try {
                 // 19-May-2017, tatu: Used to require non-null result (assuming `null`
                 //    indicated error; but that seems wrong. Should be able to return
                 //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
+                result = _deserialize(text, ctxt);
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                // Standard type conversion failures result in IAE/ME; allow mapping
+                // handlers to possibly handle these.
+                cause = e;
             }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
+            // 28-May-2020, tatu: Not sure if any implementations would throw plain
+            //   IOException, but maybe? Let's treat same way as IAE/ME
+            // Also: Make sure we don't inadvertently catch JsonMappingException itself, being IOException
+            catch (IOException e) {
+                if (e instanceof JsonMappingException) { // perhaps shouldn't have happened but...
+                    throw e;
                 }
+                cause = e;
+            }
+
+            // Ok: if we got null back, or have exception, call Problem Handler
+            // 16-Oct-2017, tatu: As per [databind#1629] allow ProblemHandler to deal
+            if (result == null || cause != null) {
                 String msg = "not a valid textual representation";
                 if (cause != null) {
                     String m2 = cause.getMessage();
                     if (m2 != null) {
                         msg = msg + ", problem: "+m2;
                     }
                 }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
+                // Note: this call may handle it, by returning value or throwing exception
+                // If handler returns `POISON_PILL` marker, means "not handled"
+                T handlerResult = (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);
+                if (handlerResult != DeserializationContext.POISON_PILL) {
+                    return handlerResult;
+                }
+                // If not handled, let's throw the exception we created
                 JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
                 if (cause != null) {
                     e.initCause(cause);
                 }
                 throw e;
-            // nothing to do here, yet? We'll fail anyway
             }
+            // Otherwise, we are good, return the value
+            return result;
+        }
+
+        // If not-a-string, check other cases
         JsonToken t = p.getCurrentToken();
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
+            // 30-Sep-2018, tatu: May need coercion, similar to String coercion
+            // Let's assume this is case for CLOBs, BYTE[]
             return _deserializeEmbedded(ob, ctxt);
         }
+        // Otherwise can not handle
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
