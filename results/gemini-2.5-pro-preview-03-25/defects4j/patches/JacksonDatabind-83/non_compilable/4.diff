diff --git a/tmp/07248d43-441a-46f2-bd30-d1388d2eebc1_buggy.java b/tmp/c9159b9a-7361-48de-a288-143c5d3382f4_fixed.java
index abe09ae..ccb53b2 100644
--- a/tmp/07248d43-441a-46f2-bd30-d1388d2eebc1_buggy.java
+++ b/tmp/c9159b9a-7361-48de-a288-143c5d3382f4_fixed.java
@@ -1,57 +1,79 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
-                return _deserializeFromEmptyString();
+            text = text.trim();
+            if (text.length() == 0) {
+                // 24-Apr-2020, tatu: Use helper method which may throw exception etc
+                return _deserializeFromEmptyString(ctxt);
             }
-            Exception cause = null;
-            try {
+            // If not empty, try to deserialize
             // 19-May-2017, tatu: Used to require non-null result (assuming `null`
             //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
-            }
-            String msg = "not a valid textual representation";
-            if (cause != null) {
-                String m2 = cause.getMessage();
-                if (m2 != null) {
-                    msg = msg + ", problem: "+m2;
+            //    `null` as value. Nulls are valid values.
+            Exception cause = null;
+            try {
+                T result = _deserialize(text, ctxt);
+                // It worked! Whether null or not, return result:
+                return result;
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                // Can catch other exceptions too, if _deserialize() throws more types
+                cause = e;
+                // Fall through to handler invocation...
             }
+            // Note: may want to catch other exceptions, like `JsonMappingException`
+            // Need to figure out how to handle recursive calls; for now keep simple
+
+            // We hit an exception; see if ProblemHandler can provide value instead
+            String baseMsg = "not a valid textual representation";
+            // Keep message structure similar to original code
+            String causeMsg = (cause == null) ? null : cause.getMessage();
+            String failureDesc = baseMsg;
+            if (causeMsg != null) {
+                failureDesc = baseMsg + ", problem: " + causeMsg;
             }
+
             // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
+            // 17-Jan-2018, tatu: Need to delegate problem handling to context
+            // Ask ProblemHandler if it can resolve the situation
+            Object S = ctxt.handleWeirdStringValue(_valueClass, text, failureDesc);
+
+            if (S != DeserializationContext.MISSING_VALUE) {
+                 // Handler provided a value (which might be null)
+                 return (T) S;
+            }
+            
+            // If handler didn't produce a value, THEN construct and throw exception
+            // Also: must pass original `cause` unless handler replaced it
+            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, failureDesc);
             if (cause != null) {
                 e.initCause(cause);
             }
             throw e;
-            // nothing to do here, yet? We'll fail anyway
         }
-        JsonToken t = p.getCurrentToken();
+
+        // If not attempting to deserialize from String value:
+        JsonToken t = p.currentToken(); // Use currentToken instead of getCurrentToken
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
+            // 24-Apr-2020, tatu: Use new method
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
+            // 24-Apr-2020, tatu: Use new method
             return _deserializeEmbedded(ob, ctxt);
         }
+        // 24-Apr-2020, tatu: Use new method
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
