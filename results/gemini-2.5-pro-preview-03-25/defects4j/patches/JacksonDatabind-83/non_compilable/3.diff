diff --git a/tmp/cdb33146-1001-41c6-bb66-ced03a5cae3a_buggy.java b/tmp/fb16482f-96e2-4fba-89e8-8e44e36ff4b6_fixed.java
index abe09ae..ef8a895 100644
--- a/tmp/cdb33146-1001-41c6-bb66-ced03a5cae3a_buggy.java
+++ b/tmp/fb16482f-96e2-4fba-89e8-8e44e36ff4b6_fixed.java
@@ -1,57 +1,81 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
-                return _deserializeFromEmptyString();
+            text = text.trim();
+            // 24-Jun-2020: Coerce empty String to null value, unless prohibited
+            // 17-Dec-2020, tatu: ... or handled by problem handler
+            if (text.isEmpty()) {
+                 // Usually should become null; but not always.
+                 // Delegate to context/handler mechanism first.
+                 String msg = String.format("Cannot deserialize value of type %s from empty String",
+                          ClassUtil.nameOf(_valueClass));
+                 Object result = ctxt.handleWeirdStringValue(_valueClass, text, msg);
+                 if (result == DeserializationProblemHandler.NOT_HANDLED) {
+                     // If not handled, use default handling (which might still return null,
+                     // or throw exception, depending on context)
+                     // Mimic the behavior of _deserializeFromEmptyString which called handleMissingInstantiator
+                    return (T) ctxt.handleMissingInstantiator(_valueClass, null, p, msg);
                  }
+                 // Otherwise handler handled it (possibly returning null)
+                 return (T) result;
+            }
+            
+            // Otherwise, try parsing from non-empty String
             Exception cause = null;
             try {
                 // 19-May-2017, tatu: Used to require non-null result (assuming `null`
                 //    indicated error; but that seems wrong. Should be able to return
                 //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
-            }
+                // 24-Jun-2020, tatu: Call once, NOT twice
+                T result = _deserialize(text, ctxt);
+                return result;
+            // Catch specific expected exceptions...
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                cause = e;
+                // and let context try to handle them via DeserializationProblemHandler
                 String msg = "not a valid textual representation";
-            if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: " + m2;
                 }
+                Object result = ctxt.handleWeirdStringValue(_valueClass, text, msg);
+                // If NOT_HANDLED, means DPH did not handle; throw exception like originally
+                if (result == DeserializationProblemHandler.NOT_HANDLED) {
+                     JsonMappingException jme = ctxt.weirdStringException(text, _valueClass, msg);
+                     jme.initCause(cause);
+                     throw jme;
                 }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
-                e.initCause(cause);
+                // Otherwise, handler handled it, return result (which might be null)
+                return (T) result;
             }
-            throw e;
-            // nothing to do here, yet? We'll fail anyway
+            // Other kinds of exceptions will propagate just fine
         }
-        JsonToken t = p.getCurrentToken();
+        
+        // What if not sent as String? Maybe START_ARRAY (for single-element array to value)
+        // or embedded object?
+        JsonToken t = p.currentToken();
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
+            // Let's delegate array handling to specialist method, again, for better recovery etc
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
+            // 30-Sep-2018, tatu: Related to [databind#2119], let's verify cases where this may be called
+            // 24-Jun-2020, tatu: Ok seems this may be called for things like UUID etc too
             return _deserializeEmbedded(ob, ctxt);
         }
+        // Can't deal with anything else
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
