diff --git a/tmp/a31dfad5-a408-4db0-81ee-3e10298f43f0_buggy.java b/tmp/b5c97b6d-a9cb-4ef2-8146-52f178ed2a9f_fixed.java
index abe09ae..6c1d7b8 100644
--- a/tmp/a31dfad5-a408-4db0-81ee-3e10298f43f0_buggy.java
+++ b/tmp/b5c97b6d-a9cb-4ef2-8146-52f178ed2a9f_fixed.java
@@ -1,57 +1,88 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
+            text = text.trim();
+            // 24-Mar-2017, tatu: Should possibly check for empty string separately
+            //   or should this be delegated? Looks like delegated. Changed to delegate.
             // 04-Feb-2013, tatu: Usually should become null; but not always
+            if (text.length() == 0) {
+                 // Make sure behavior is logical; strip first, then check length
+                 // Delegate to specific method because handling differs (might be null, throw exception, produce default)
+                 // Note: signature of method changed over versions, using 0-arg version based on original snippet
                  return _deserializeFromEmptyString();
             }
+            // If not empty, attempt actual deserialization
             Exception cause = null;
+            T result = null;
             try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
+                // Single call to deserialize:
+                result = _deserialize(text, ctxt);
+                // Good result? Then return it. Could be null if that's valid for the type
+                // 17-Aug-2021, tatu: We do need null check -- some legacy code returns null to fail
+                // Need to check if result is null AFTER try-catch, to allow handler intervention
+                // For now, let's assume non-null means success. If null, it MIGHT be failure.
+                 if (result != null) {
+                     return result;
                  }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                // Problem during deserialization? Store error, fall through to handler check
+                cause = e;
+                // and keep `result` null
             }
+
+            // If we reach here, either _deserialize() returned null OR threw an exception.
+            // Try to delegate to handler, or if none, throw exception
             String msg = "not a valid textual representation";
             if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: " + m2;
                 }
             }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
+
+            // Use method that consults handler first. If handler returns non-SKIP, use that.
+            // Note: handleWeirdStringValue is @deprecated in javadoc, but still the intended mechanism
+            @SuppressWarnings("deprecation")
+            Object handlerResult = ctxt.handleWeirdStringValue(_valueClass, text, msg);
+            if (handlerResult != JsonDeserializer.None.SKIP_VALUE) {
+                 // This includes the case where the handler returns null successfully
+                 return (T) handlerResult;
+            }
+
+            // If handler didn't handle it (returned SKIP_VALUE), then we must throw exception
             JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
             if (cause != null) {
                 e.initCause(cause);
             }
             throw e;
-            // nothing to do here, yet? We'll fail anyway
         }
-        JsonToken t = p.getCurrentToken();
-        // [databind#381]
+
+        // If not attempting to deserialize from String value...
+        JsonToken t = p.currentToken(); // Use currentToken() instead of deprecated getCurrentToken()
+
+        // ... perhaps we are handling START_ARRAY? [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
+
+        // ... or embedded object?
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
-            // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
+            // If embedded object is already of the correct type, return it
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
+            // Otherwise, delegate to specific handler for embedded objects
             return _deserializeEmbedded(ob, ctxt);
         }
+
+        // If none of the above, it's an unexpected token type for this deserializer
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
