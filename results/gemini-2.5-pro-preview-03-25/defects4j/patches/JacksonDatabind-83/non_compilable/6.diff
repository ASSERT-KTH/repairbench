diff --git a/tmp/96567716-a082-438e-889f-76346764b88a_buggy.java b/tmp/3e4b6093-e89a-4b60-be46-aa00c3501b5c_fixed.java
index abe09ae..488d165 100644
--- a/tmp/96567716-a082-438e-889f-76346764b88a_buggy.java
+++ b/tmp/3e4b6093-e89a-4b60-be46-aa00c3501b5c_fixed.java
@@ -1,57 +1,71 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
+            // [databind#601]: no leading/trailing whitespace allowed
+            text = text.trim();
+            if (text.length() == 0) {
                 // 04-Feb-2013, tatu: Usually should become null; but not always
+                // Call the non-context version for compatibility with older overrides
                 return _deserializeFromEmptyString();
             }
-            Exception cause = null;
+            // Otherwise, could be valid representation to try to parse?
             try {
+                // 08-Jun-2017, tatu: As per [databind#1677], need to call only once:
+                T result = _deserialize(text, ctxt);
                 // 19-May-2017, tatu: Used to require non-null result (assuming `null`
                 //    indicated error; but that seems wrong. Should be able to return
                 //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
-            }
+                return result;
+            // Catch specific exceptions that suggest problems with input String content
+            // (and not general processing problems like IO issues):
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                // [databind#1629] Allow problem handlers to intercept disallowed content:
                 String msg = "not a valid textual representation";
-            if (cause != null) {
-                String m2 = cause.getMessage();
-                if (m2 != null) {
-                    msg = msg + ", problem: "+m2;
+                String causeMsg = e.getMessage();
+                if (causeMsg != null) {
+                    msg = msg + ", problem: " + causeMsg;
                 }
+                // note: will throw exception if handlers cannot handle
+                Object result = ctxt.handleWeirdStringValue(_valueClass, text, msg);
+                // If it didn't throw, must have been handled
+                // [databind#2269]: Allow returning null if handler indicates.
+                if (result == DeserializationContext.MARKER_FOR_EMPTY) {
+                    return null;
                 }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
-                e.initCause(cause);
+                // Otherwise, need to cast
+                return (T) result;
             }
-            throw e;
-            // nothing to do here, yet? We'll fail anyway
+            // Other kinds of exceptions will propagate as-is, which is fine
         }
+
+        // [databind#381]: Need to support Array -> Scalar coercion
         JsonToken t = p.getCurrentToken();
-        // [databind#381]
         if (t == JsonToken.START_ARRAY) {
+            // Let's delegate array handling properly
             return _deserializeFromArray(p, ctxt);
         }
+
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
+            // 30-Sep-2019, tatu: maybe need this for some reason? (was missing)
             return _deserializeEmbedded(ob, ctxt);
         }
+        // [databind#1798]: How about incoming null? Need to handle properly
+        if (t == JsonToken.VALUE_NULL) {
+             // Usually default handling returns `getNullValue(ctxt)` is what is needed here
+             return getNullValue(ctxt);
+        }
+        // Otherwise, unexpected token type; let context handle
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
