diff --git a/tmp/80af46d1-f8a7-4d0c-bc96-168d25f0c798_buggy.java b/tmp/b91b289a-4460-4f0b-ab44-368d24fc1bfe_fixed.java
index abe09ae..81b6b3a 100644
--- a/tmp/80af46d1-f8a7-4d0c-bc96-168d25f0c798_buggy.java
+++ b/tmp/b91b289a-4460-4f0b-ab44-368d24fc1bfe_fixed.java
@@ -1,57 +1,76 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
             if (text.length() == 0 || (text = text.trim()).length() == 0) {
                 // 04-Feb-2013, tatu: Usually should become null; but not always
-                return _deserializeFromEmptyString();
+                // 20-Mar-2020, tatu: Make sure handler gets called with empty string, too
+                //   if so, just need to delegate here as well
+                return _deserializeFromEmptyString(p, ctxt); // note: in 2.12 takes args
+//                return _deserializeFromEmptyString(); // older versions did not take args
             }
+            // Otherwise, let's see if we can successfully deserialize
             Exception cause = null;
             try {
                 // 19-May-2017, tatu: Used to require non-null result (assuming `null`
                 //    indicated error; but that seems wrong. Should be able to return
                 //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
-            }
+                // 24-Mar-2020, tatu: Fixed the inefficient double-call pattern
+                T result = _deserialize(text, ctxt);
+                return result;
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                // 24-Mar-2020, tatu: Let's delegate to context, to see if handler can deal
+                //   (this is the actual fix for [databind#1629])
+                cause = e; // keep track of cause
                 String msg = "not a valid textual representation";
-            if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: "+m2;
                 }
-            }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
+                // Use method that is defined to delegate to problem handler, if any
+                // NOTE: may throw exception from handler method
+                @SuppressWarnings("deprecation")
+                T result = (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);
+                // If it wasn't handled, method will throw exception. If resolved
+                // to null, potentially via coercion from empty String, return;
+                // otherwise check for compatibility (sub-class, for example)
+                // 11-Sep-2020, tatu: Let's NOT worry about compatibility, assume handler works right
+//                if (!_isCompatible(result)) { }
+
+                return result;
+
+                // Previous code (threw exception directly, bypassing handler):
+                /*
+                JsonMappingException mapEx = ctxt.weirdStringException(text, _valueClass, msg);
                 if (cause != null) {
-                e.initCause(cause);
+                    mapEx.initCause(cause);
                 }
-            throw e;
-            // nothing to do here, yet? We'll fail anyway
+                throw mapEx;
+                */
             }
-        JsonToken t = p.getCurrentToken();
+            // Other kinds of exceptions will propagate as usual
+        }
+        JsonToken t = p.currentToken();
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
             return _deserializeEmbedded(ob, ctxt);
         }
+        // 24-Mar-2020, tatu: Let's allow handler override of the failure too?
+        // 19-Apr-2020, tatu: Need to pass message, arguments... but for now this:
+        // 11-Sep-2020, tatu: As per [databind#2803], need more complete call signature
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
