diff --git a/tmp/a02f1ea1-ba7c-4814-a12c-43940f326f52_buggy.java b/tmp/a6defa65-4d2e-49c9-9827-fb089cc5125a_fixed.java
index c51c8b1..0388d5e 100644
--- a/tmp/a02f1ea1-ba7c-4814-a12c-43940f326f52_buggy.java
+++ b/tmp/a6defa65-4d2e-49c9-9827-fb089cc5125a_fixed.java
@@ -1,31 +1,41 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+          // Check if the assignment is the callee expression in a call.
+          // (e.g., (foo = function() {})())
+          // In this case, the assignment itself doesn't constitute a "use"
+          // of the assigned variable 'foo' that should prevent its removal
+          // if it's otherwise unused. The *result* of the assignment (the function)
+          // is used by the call, but not the variable itself via a read operation.
+          boolean isAssignmentUsedAsCallee = parent.isCall() && parent.getFirstChild() == n;
+
+          if (!isAssignmentUsedAsCallee) {
+            // Record the dependency scope unless the assignment is immediately
+            // invoked.
             recordDepScope(recordNode, ns);
           }
+          // If isAssignmentUsedAsCallee is true, we do nothing here regarding
+          // the dependency scope for the assigned name. The assignment happens,
+          // but we don't mark it in a way that forces the name to be kept if
+          // it's otherwise unreferenced.
+        }
       }
     }
\ No newline at end of file
