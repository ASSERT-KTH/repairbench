diff --git a/tmp/9e02ad4f-2d90-4059-8adb-3f294e41d28c_buggy.java b/tmp/23dacf56-2257-4a9d-82b4-069cd001c002_fixed.java
index c51c8b1..e5313ad 100644
--- a/tmp/9e02ad4f-2d90-4059-8adb-3f294e41d28c_buggy.java
+++ b/tmp/23dacf56-2257-4a9d-82b4-069cd001c002_fixed.java
@@ -1,31 +1,35 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
+        } else if (parent.isCall() && n == parent.getFirstChild()) {
+          // If the assignment expression is the function being called
+          // (e.g., `(foo = function() {})()`), the name itself (`foo`)
+          // isn't truly referenced in a way that prevents its removal
+          // if it's otherwise unused. The *value* of the assignment
+          // (the function) is used by the call, but the name binding
+          // is temporary for the call. Don't record a dependency scope
+          // here, otherwise 'foo' might be incorrectly kept.
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+          // Default case: The assignment might represent a use of the variable,
+          // so record the dependency scope.
           recordDepScope(recordNode, ns);
         }
       }
     }
\ No newline at end of file
