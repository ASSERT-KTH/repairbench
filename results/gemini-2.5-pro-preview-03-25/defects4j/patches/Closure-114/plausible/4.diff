diff --git a/tmp/0b801eb8-f019-4a79-9913-dc4e33bec399_buggy.java b/tmp/5018acce-d5f5-45e7-a7df-4ebd30dc7955_fixed.java
index c51c8b1..7c66632 100644
--- a/tmp/0b801eb8-f019-4a79-9913-dc4e33bec399_buggy.java
+++ b/tmp/5018acce-d5f5-45e7-a7df-4ebd30dc7955_fixed.java
@@ -1,31 +1,37 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
-          if (parent.getFirstChild().getNext() != n) {
+          if (parent.getFirstChild().getNext() != n) { // n is init or increment
             recordDepScope(recordNode, ns);
-          } else {
+          } else { // n is condition
             recordDepScope(nameNode, ns);
           }
+        } else if (parent.isCall() && n == parent.getFirstChild()) {
+          // When an assignment is the direct target of a call, like
+          // (foo = function() { ... })()
+          // the dependency scope should be the name node itself.
+          // This allows the name analyzer to potentially remove the variable
+          // if the assignment is the only use. Associating it with recordNode
+          // (the call site or broader context) might incorrectly mark the name
+          // as globally referenced. This mirrors the logic for FOR loop
+          // conditions.
+          recordDepScope(nameNode, ns);
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+          // Default case: The assignment context (recordNode) determines the
+          // dependency scope.
           recordDepScope(recordNode, ns);
         }
       }
     }
\ No newline at end of file
