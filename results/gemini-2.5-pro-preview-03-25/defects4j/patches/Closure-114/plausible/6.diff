diff --git a/tmp/f03593ec-69c1-443f-b2fd-a4dde0890e5c_buggy.java b/tmp/94835bd7-a320-491b-b430-f5a06e776924_fixed.java
index c51c8b1..5b3e59c 100644
--- a/tmp/f03593ec-69c1-443f-b2fd-a4dde0890e5c_buggy.java
+++ b/tmp/94835bd7-a320-491b-b430-f5a06e776924_fixed.java
@@ -1,31 +1,38 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
+        } else if (parent.isCall() && parent.getFirstChild() == n) {
+          // If the assignment is the function expression being called
+          // (e.g., (func = function() {...})()), the call uses the
+          // *result* of the assignment (RHS value), not the LHS variable name
+          // itself directly in this context.
+          // Do not record the call node (which is 'parent' and typically also
+          // 'recordNode' in this context) as a dependency scope for the LHS name (ns).
+          // The assignment itself is still recorded by createNameInformation.
+          // This prevents the call from incorrectly keeping the LHS variable alive
+          // if it's not used elsewhere.
+          // We assume the RHS's dependencies are handled separately during traversal.
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+          // Default case: Record the context node (recordNode)
+          // as the dependency scope for the assigned name.
           recordDepScope(recordNode, ns);
         }
       }
     }
\ No newline at end of file
