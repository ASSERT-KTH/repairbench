diff --git a/tmp/08fd023f-6c19-41d4-b214-c61def550157_buggy.java b/tmp/4e5bc1b6-4a87-4588-8518-950e8b73bd09_fixed.java
index c51c8b1..0fd69bc 100644
--- a/tmp/08fd023f-6c19-41d4-b214-c61def550157_buggy.java
+++ b/tmp/4e5bc1b6-4a87-4588-8518-950e8b73bd09_fixed.java
@@ -1,31 +1,44 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
+
+          // This logic assumes 'n' is a direct child of the FOR node,
+          // which happens if the init/condition/iteration clause is
+          // exactly the assignment.
           if (parent.getFirstChild().getNext() != n) {
+             // Init or Iteration
             recordDepScope(recordNode, ns);
           } else {
+            // Condition
             recordDepScope(nameNode, ns);
           }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+          // Check if the assignment node is the callee of a call.
+          if (parent.isCall() && parent.getFirstChild() == n) {
+            // Assignment is the function being called (e.g., (fn = ...)()).
+            // The result (RHS, the function) is used immediately by the call,
+            // but the name (LHS, 'fn') itself isn't referenced by this use.
+            // Avoid recording a dependency from the RHS scope to the LHS name,
+            // as this might incorrectly prevent the removal of an unused LHS name.
+            // The usage of the function expression itself should be handled elsewhere.
+            // Thus, we do *not* call recordDepScope here for this specific case.
+          } else {
+            // Standard assignment (e.g., x = y, obj.prop = z, fn = func; fn(); )
+            // Record that the scope containing the RHS depends on the LHS name.
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
\ No newline at end of file
