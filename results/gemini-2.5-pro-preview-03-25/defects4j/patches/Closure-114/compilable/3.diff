diff --git a/tmp/1aaf44bb-8328-4e68-8836-7e3a9384b4d0_buggy.java b/tmp/b199d638-32bf-4804-b61e-15d5f8c9caef_fixed.java
index c51c8b1..f73c989 100644
--- a/tmp/1aaf44bb-8328-4e68-8836-7e3a9384b4d0_buggy.java
+++ b/tmp/b199d638-32bf-4804-b61e-15d5f8c9caef_fixed.java
@@ -1,31 +1,67 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
-          if (parent.getFirstChild().getNext() != n) {
-            recordDepScope(recordNode, ns);
+
+          // Determining the dependency scope node based on the position in the FOR loop.
+          // The init section uses the name node, condition and increment use the recordNode.
+          if (parent.getFirstChild().getNext() != n && parent.getFirstChild().getNext().getNext() != n) {
+             // If 'n' is the initializer part of the FOR loop. parent.getFirstChild() is init var node
+             // Need to check if n is the initializer. The initializer is the first child.
+             // In "for(var i=0;...", the VAR is the first child.
+             // In "for(i=0;...", the ASSIGN is the first child.
+             // Let's refine the condition. n is the init if it's the first child of parent.
+             if (parent.getFirstChild() == n) {
+               recordDepScope(nameNode, ns); // Use name node for init
              } else {
-            recordDepScope(nameNode, ns);
+               // n is condition or increment part
+               recordDepScope(recordNode, ns); // Use assign node for condition/increment
              }
           } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+             // n is condition or increment part (original logic had these reversed?)
+             // Let's stick to the logic: init uses nameNode, others use recordNode.
+             // If n is NOT the first child, it must be condition or increment.
              recordDepScope(recordNode, ns);
           }
+          // Simplified logic based on position:
+          // Node init = parent.getFirstChild();
+          // Node cond = init.getNext();
+          // Node incr = cond.getNext();
+          // if (n == init) { recordDepScope(nameNode, ns); } else { recordDepScope(recordNode, ns); }
+
+        } else if (parent.isCall() && n == parent.getFirstChild()) {
+            // If the assignment is the expression being called,
+            // A() in B = A()
+            // (function(){})() in var x = (function(){})()
+            // x = function(){} in (x = function(){})() <-- this case
+            // The CALL node is the context, not the assignment node.
+            recordDepScope(parent, ns);
+        } else {
+          // The general case. This includes assignments in expressions like:
+          // var a = (b = 1);  // parent is ASSIGN
+          // foo(c = 2);       // parent is CALL (but n is not the first child)
+          // if (d = 3)        // parent is IF
+          // Originally used recordNode. Using parent seems more correct
+          // for relating the assignment to the context where it happens.
+          // The failing test (fun = function(){})() hits the case above now.
+          // Let's consider if using parent here is always right.
+          // In `var a = (b = 1);`, parent of `b=1` is the outer assign. OK.
+          // In `foo(c=2);`, parent of `c=2` is CALL. OK.
+          // In `if (d=3)`, parent of `d=3` is IF. OK.
+          // In `e = 5;`, parent of `e=5` is EXPR_RESULT. OK.
+          // Using parent seems generally better than using the assign node itself.
+          recordDepScope(parent, ns);
+        }
       }
     }
\ No newline at end of file
