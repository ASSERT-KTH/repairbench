diff --git a/tmp/1b6ccf28-4a46-4134-9999-77ef84fee7c9_buggy.java b/tmp/7c00fd31-31b3-488c-bb8f-3ebd37d9dec0_fixed.java
index c51c8b1..4892736 100644
--- a/tmp/1b6ccf28-4a46-4134-9999-77ef84fee7c9_buggy.java
+++ b/tmp/7c00fd31-31b3-488c-bb8f-3ebd37d9dec0_fixed.java
@@ -1,31 +1,39 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
+        // Special case for FOR loops.
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
-          if (parent.getFirstChild().getNext() != n) {
+
+          // Assignments in the init or incr block are handled differently
+          // than assignments in the condition block.
+          if (parent.getFirstChild().getNext() != n) { // Condition is the second child
+            // Init or Incr
             recordDepScope(recordNode, ns);
           } else {
+            // Condition
             recordDepScope(nameNode, ns);
           }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
-          recordDepScope(recordNode, ns);
+          // For general assignments, e.g., `a = b`, `var a = b;`, or assigns
+          // whose result is used directly like `(a = function() {})()`,
+          // associate the dependency scope with the NAME node itself.
+          // This allows the analysis to potentially remove the variable if
+          // it's assigned but never referenced elsewhere. Associating with
+          // recordNode (the ASSIGN node or VAR node) could incorrectly
+          // mark the variable as used by the surrounding context.
+          // This mirrors the logic used for the FOR loop condition.
+          recordDepScope(nameNode, ns);
         }
       }
     }
\ No newline at end of file
