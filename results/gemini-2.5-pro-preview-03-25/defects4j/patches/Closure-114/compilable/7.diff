diff --git a/tmp/163e8dd9-2dd6-4a4f-9475-598ed8b08ecb_buggy.java b/tmp/379b5bbc-f6be-47a6-b99c-8ba6aa53dc06_fixed.java
index c51c8b1..94aaf3b 100644
--- a/tmp/163e8dd9-2dd6-4a4f-9475-598ed8b08ecb_buggy.java
+++ b/tmp/379b5bbc-f6be-47a6-b99c-8ba6aa53dc06_fixed.java
@@ -1,31 +1,37 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
-          if (parent.getFirstChild().getNext() != n) {
+
+          // Assignments in the init are treated differently than assignments
+          // in the condition or increment. This is because the iterations of
+          // the loop are controlled by the condition and increment, whereas the
+          // init is executed only once.
+          if (parent.getFirstChild().getNext() == n // Is 'n' the condition?
+              || parent.getFirstChild().getNext().getNext() == n) { // Is 'n' the increment?
             recordDepScope(recordNode, ns);
-          } else {
+          } else { // init
             recordDepScope(nameNode, ns);
           }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
-          recordDepScope(recordNode, ns);
+          // Default case: Associate the name with the node representing the name
+          // itself. This handles cases like `(a = b)()` or `foo(a = b)`, where
+          // the *value* of the assignment expression is used by the parent context,
+          // but the assigned variable `a` itself isn't necessarily read by that
+          // context. Associating with `nameNode` marks the definition/assignment
+          // point without incorrectly implying usage by the parent context.
+          recordDepScope(nameNode, ns);
         }
       }
     }
\ No newline at end of file
