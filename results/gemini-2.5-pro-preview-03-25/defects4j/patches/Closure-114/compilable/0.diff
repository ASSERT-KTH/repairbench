diff --git a/tmp/dbb84805-9203-4e4a-a2c2-051a6085fb63_buggy.java b/tmp/cb130195-9383-4c91-9d26-7eae6d202eed_fixed.java
index c51c8b1..bd59205 100644
--- a/tmp/dbb84805-9203-4e4a-a2c2-051a6085fb63_buggy.java
+++ b/tmp/cb130195-9383-4c91-9d26-7eae6d202eed_fixed.java
@@ -1,31 +1,38 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
-          if (parent.getFirstChild().getNext() != n) {
-            recordDepScope(recordNode, ns);
-          } else {
+
+          // Check if the assignment node 'n' is the condition part of the FOR loop.
+          // The FOR structure is FOR <init>; <condition>; <increment>.
+          // So, the condition is the second child.
+          if (parent.getFirstChild().getNext() == n) {
+             // Condition: Associate scope with the name node itself.
             recordDepScope(nameNode, ns);
-          }
           } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+             // Init or Increment: Associate scope with the containing FOR node.
             recordDepScope(recordNode, ns);
           }
+        } else {
+          // Fix: For assignments, especially those involved in calls (like IIFEs)
+          // or complex expressions, the dependency scope should be associated
+          // with the name being assigned (LHS), not the surrounding expression
+          // (recordNode). Associating with recordNode incorrectly implied that
+          // the name itself was used by the surrounding context (e.g., the call),
+          // preventing removal of unused variables like in `(func = function(){})()`.
+          // Associating with nameNode marks this as the point of definition.
+          recordDepScope(nameNode, ns);
+        }
       }
     }
\ No newline at end of file
