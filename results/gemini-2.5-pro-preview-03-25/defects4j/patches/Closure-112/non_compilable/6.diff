diff --git a/tmp/f449317c-43d8-44d5-9641-de7496d5ffc3_buggy.java b/tmp/37b3f96d-4780-4e61-98c2-5caf755502c3_fixed.java
index 63641d0..4dcf452 100644
--- a/tmp/f449317c-43d8-44d5-9641-de7496d5ffc3_buggy.java
+++ b/tmp/37b3f96d-4780-4e61-98c2-5caf755502c3_fixed.java
@@ -1,33 +1,66 @@
   /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+   * Infers template types for a function call based on the argument types.
+   * This function specifically focuses on inferring template types that are
+   * declared directly on the function being called (callee's own template types),
+   * not template types inherited from an enclosing class.
+   *
+   * The inferred types are used to specialize the function signature for this
+   * specific call, and the call node's JSType is updated with the specialized
+   * return type. The type of the callee definition itself is not modified.
+   *
+   * @param n The call Node.
+   * @param fnType The function type of the callee.
+   * @return True if any function-specific template types were inferred and applied.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
-    if (keys.isEmpty()) {
+    // Get template types declared directly on the function (not from outer scopes like classes).
+    ImmutableList<TemplateType> ownKeys = fnType.getOwnTemplateKeys();
+    if (ownKeys.isEmpty()) {
+      // If the function itself doesn't declare template types, there's nothing to infer here.
+      // Class template types are resolved based on the receiver type elsewhere.
       return false;
     }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
+    // Attempt to infer types for all template types (own and potentially class ones)
+    // based on the call's arguments matching the function's parameter types.
+    // The inferTemplateTypesFromParameters function handles the actual inference logic.
+    Map<TemplateType, JSType> inferredAll =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // We are only interested in the inferences made for the function's *own* template types.
+    // Filter the inference results to exclude class template types.
+    Map<TemplateType, JSType> inferredOwn = new HashMap<>();
+    for (TemplateType key : ownKeys) {
+      if (inferredAll.containsKey(key)) {
+        JSType inferredType = inferredAll.get(key);
+        // Store the inference if a non-null type was found.
+        if (inferredType != null) {
+          inferredOwn.put(key, inferredType);
+        }
+      }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Create a replacer that will substitute only the inferred *own* template types.
+    // If inferredOwn is empty (no own types were inferred), the replacer will do nothing.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
-    Node callTarget = n.getFirstChild();
+        registry, inferredOwn);
 
-    FunctionType replacementFnType = fnType.visit(replacer)
+    // Create a specialized version of the function type for this specific call
+    // by applying the inferred types for the function's own templates.
+    // Template types from outer scopes (like classes) remain unaffected by this replacer;
+    // they should be resolved based on the receiver type.
+    FunctionType specializedFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+    Preconditions.checkNotNull(specializedFnType);
 
-    callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    // Update the JSType of the call expression node itself (n)
+    // with the return type from the specialized function signature.
+    // Crucially, DO NOT modify the JSType of the callee node (n.getFirstChild()). Modifying
+    // the callee based on a specific call site is incorrect.
+    n.setJSType(specializedFnType.getReturnType());
 
+    // Return true iff the replacer actually substituted any types, indicating that
+    // inference succeeded for at least one function-specific template type.
     return replacer.madeChanges;
   }
\ No newline at end of file
