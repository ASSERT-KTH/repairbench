diff --git a/tmp/8bfb7ff2-611c-4535-8e8d-e19281320947_buggy.java b/tmp/47be31a6-9342-4d88-a2cb-edca68f7fd0d_fixed.java
index 63641d0..ab31021 100644
--- a/tmp/8bfb7ff2-611c-4535-8e8d-e19281320947_buggy.java
+++ b/tmp/47be31a6-9342-4d88-a2cb-edca68f7fd0d_fixed.java
@@ -1,33 +1,48 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
+   *
+   * This description seems potentially outdated or not fully representative.
+   * This function actually infers template types for the function call based
+   * on arguments passed.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+    // Only infer template types declared on the function signature itself (method templates).
+    // Class templates should be resolved based on the receiver type during specialization,
+    // not inferred from arguments here. This prevents potential conflicts, e.g., Issue 1058.
+    final ImmutableList<TemplateType> keys = fnType.getOwnTemplateKeys();
     if (keys.isEmpty()) {
-      return false;
+      return false; // No method-specific template types to infer.
     }
 
-    // Try to infer the template types
+    // Try to infer the types for the method's template parameters based on the call's arguments.
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Create a replacer that substitutes the inferred types into the function signature.
+    // Based on the TemplateTypeReplacer's typical behavior, it might also replace
+    // any template types encountered that are *not* in the 'inferred' map
+    // (potentially including uninferred method templates from 'keys' or class templates)
+    // with UNKNOWN or resolve them based on other context.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
+    // Apply the replacer to the original function type to get the specialized type for this call.
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
+    // If the result is not a function type, it indicates a problem during substitution.
     Preconditions.checkNotNull(replacementFnType);
 
+    // Update the JSType property of the call target (the function expression)
+    // and the call node itself (which takes the return type).
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
+    // Return true if the replacer made any substitutions based on the 'inferred' map.
+    // This indicates that inference was successful for at least one method template type.
     return replacer.madeChanges;
   }
\ No newline at end of file
