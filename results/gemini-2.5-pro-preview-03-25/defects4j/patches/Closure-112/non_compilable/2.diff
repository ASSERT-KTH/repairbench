diff --git a/tmp/8e167151-02a7-4d43-a91b-677fe96d683a_buggy.java b/tmp/92420107-988c-46ec-bf82-96bf6e766ad9_fixed.java
index 63641d0..e610c23 100644
--- a/tmp/8e167151-02a7-4d43-a91b-677fe96d683a_buggy.java
+++ b/tmp/92420107-988c-46ec-bf82-96bf6e766ad9_fixed.java
@@ -1,33 +1,86 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
+   *
+   * This function infers template types based on the arguments passed to a
+   * function call, and specializes the function type accordingly.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+    // TODO(nicksantos): This comment is suspicious. Why is it talking about
+    // function literals when this is for CALL nodes?
+
+    final TemplateTypeMap typeMap = fnType.getTemplateTypeMap();
+    final ImmutableList<TemplateType> keys = typeMap.getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
-    // Try to infer the template types
+    // Try to infer the template types from parameters
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Build the map for the replacer. For templates not inferred from
+    // parameters, use their existing resolution in fnType (if any), or map them
+    // to themselves if they were unresolved. This prevents the replacer
+    // from defaulting uninferred/unresolved templates to UNKNOWN.
+    Map<TemplateType, JSType> replacementMap = new HashMap<>();
+    boolean madeChanges = false;
+    for (TemplateType key : keys) {
+      JSType existingType = typeMap.getResolvedTemplateType(key); // Existing resolution or null
+      if (inferred.containsKey(key)) {
+        JSType inferredType = inferred.get(key);
+        replacementMap.put(key, inferredType);
+        // Check if the inferred type differs from the existing resolution state.
+        // If existingType is null, it means the template was unresolved,
+        // so we compare the inferredType against the template key itself.
+        JSType typeToCompare = (existingType != null) ? existingType : key;
+        if (!inferredType.isEquivalentTo(typeToCompare)) {
+          madeChanges = true;
+        }
+      } else {
+        // Not inferred from parameters. Use existing resolution or self-mapping.
+        if (existingType != null) {
+          // Template was already resolved (e.g., class template from receiver type),
+          // keep the existing resolution.
+          replacementMap.put(key, existingType);
+        } else {
+          // Template was unresolved and not inferred from parameters, map to self.
+          // This prevents it from being replaced by UNKNOWN.
+          replacementMap.put(key, key);
+        }
+        // This branch doesn't contribute to 'madeChanges' because we are preserving
+        // the state from fnType (either resolved or unresolved). Changes are only
+        // recorded if inference provides a *different* type than the existing state.
+      }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // If inference didn't produce any changes compared to the initial state of fnType,
+    // then we don't need to create/set a new function type.
+    if (!madeChanges) {
+      return false;
+    }
+
+    // Replace template types using the constructed map.
+    // Because replacementMap contains mappings for all keys (either inferred,
+    // existing, or self), the TemplateTypeReplacer will not default to UNKNOWN
+    // for templates listed in 'keys'.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, replacementMap);
+
     Node callTarget = n.getFirstChild();
+    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+    // Check if the specialization resulted in a valid FunctionType. It might become
+    // null or NoType if inference leads to incompatible types, e.g., violating
+    // template bounds.
+    Preconditions.checkNotNull(
+        replacementFnType, "Function type specialization resulted in null. Function: %s", fnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
-    return replacer.madeChanges;
+    // Return true because we determined earlier that actual changes were made by inference.
+    return true;
   }
\ No newline at end of file
