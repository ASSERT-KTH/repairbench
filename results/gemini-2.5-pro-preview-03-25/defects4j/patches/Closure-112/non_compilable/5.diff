diff --git a/tmp/b8842c01-eece-464e-9409-6b38c097a9ed_buggy.java b/tmp/f59994ce-48c3-4e47-8964-3ec536692b9b_fixed.java
index 63641d0..e92e632 100644
--- a/tmp/b8842c01-eece-464e-9409-6b38c097a9ed_buggy.java
+++ b/tmp/f59994ce-48c3-4e47-8964-3ec536692b9b_fixed.java
@@ -1,33 +1,71 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
+   *
+   * This method attempts to infer template types for a function call and specializes
+   * the function's type accordingly. It handles both templates defined directly
+   * on the function and templates from the enclosing class (via the 'this' type).
+   * Templates not inferred from arguments or receiver context are resolved to UNKNOWN.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
-    if (keys.isEmpty()) {
-      return false;
-    }
 
-    // Try to infer the template types
+    // Infer types for the function's own template parameters based on call arguments.
+    // Assumes inferTemplateTypesFromParameters is available and correctly infers based on args.
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Build the full map of substitutions: inferred types + defaults for others.
+    // Use HashMap for mutability.
+    Map<TemplateType, JSType> combinedMap = new HashMap<>(inferred);
+    boolean requiresSubstitution = !inferred.isEmpty();
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Find all template types referenced anywhere in the function signature
+    // (parameters, return type, this type).
+    ImmutableSet<TemplateType> allTemplates = fnType.getReferencedTemplateTypes();
+
+    // Default any template type referenced in the signature but not inferred
+    // from parameters to UNKNOWN. This handles class templates like T in C<T>.method()
+    // where T isn't determined by arguments to method().
+    for (TemplateType tt : allTemplates) {
+        if (!combinedMap.containsKey(tt)) {
+             combinedMap.put(tt, registry.getUnknownType());
+             requiresSubstitution = true;
+        }
+    }
+
+    // If no templates were inferred and no other templates needed defaulting,
+    // then no substitution is necessary, and the function type remains unchanged.
+    if (!requiresSubstitution) {
+      return false;
+    }
+
+    // Create a replacer that will substitute template types according to the combined map.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, combinedMap);
+
+    // Apply the substitutions by visiting the original function type.
+    // The visit method traverses the function type structure and applies replacements.
+    JSType replacement = fnType.visit(replacer);
+
+    // The result of replacement should ideally be a function type.
+    FunctionType replacementFnType = replacement.toMaybeFunctionType();
+    if (replacementFnType == null) {
+      // If visiting results in a non-function type, something is wrong.
+      // Avoid proceeding further.
+      return false;
+    }
+
+    // Update the JSType of the call target (e.g., the function expression like 'obj.method')
+    // with the specialized function type.
     Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
+
+    // Update the JSType of the call node itself ('n') with the specialized return type.
     n.setJSType(replacementFnType.getReturnType());
 
+    // Return true if the replacer indicates that substitutions were made.
+    // This signifies that the function type was specialized.
     return replacer.madeChanges;
   }
\ No newline at end of file
