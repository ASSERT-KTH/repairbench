diff --git a/tmp/eef4002b-a9d3-4a04-a8ea-beb632d8eb23_buggy.java b/tmp/bf42228a-ea7d-4326-9c29-a96092c0e86c_fixed.java
index 63641d0..7b7429c 100644
--- a/tmp/eef4002b-a9d3-4a04-a8ea-beb632d8eb23_buggy.java
+++ b/tmp/bf42228a-ea7d-4326-9c29-a96092c0e86c_fixed.java
@@ -1,33 +1,68 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
+   *
+   * This function infers template types for a function call based on the
+   * arguments and specializes the function's type for this specific call.
+   *
+   * @param n The call node.
+   * @param fnType The generic type of the function being called.
+   * @return True if template types were inferred and the function type was
+   *     specialized; false otherwise.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
-      return false;
+      return false; // No templates to infer.
     }
 
-    // Try to infer the template types
+    // Try to infer the template types based on parameters.
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Build the map for the replacer.
+    // It includes inferred types (T -> inferred_type) and identity mappings
+    // (T -> T) for any template types that were not inferred.
+    // This prevents uninferred template types from being replaced by UNKNOWN.
+    Map<TemplateType, JSType> replacements = Maps.newHashMap(inferred);
+    for (TemplateType key : keys) {
+      // Ensure every template key from the function type is in the map.
+      // If it wasn't inferred, map it to itself to preserve it.
+      replacements.putIfAbsent(key, key);
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Create a replacer that uses the 'replacements' map.
+    // The TemplateTypeReplacer keeps track of whether any type substitutions
+    // resulted in an actual change via its 'madeChanges' field.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
-    Node callTarget = n.getFirstChild();
+        registry, replacements);
 
+    // Apply the replacer to the function type to get the specialized type.
+    // Uninferred types (mapped to themselves) will remain as template types.
+    // Inferred types will be substituted.
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Check if the replacer actually made any changes.
+    // If not, the specialized type is the same as the original fnType,
+    // so no updates are needed, and we indicate no changes were made.
+    if (!replacer.madeChanges) {
+      return false;
+    }
+
+    // If changes were made, update the JSTypes.
+    Node callTarget = n.getFirstChild();
+    // Update the JSType of the call target (e.g., obj.method) to the specialized type
+    // This allows subsequent argument checking by TypeCheck to use the specialized signature.
     callTarget.setJSType(replacementFnType);
+    // Set the JSType of the call node (the result of the call) based on the specialized return type.
     n.setJSType(replacementFnType.getReturnType());
 
-    return replacer.madeChanges;
+    // Return true to indicate that template types were inferred and
+    // the function type was specialized for this call.
+    return true;
   }
\ No newline at end of file
