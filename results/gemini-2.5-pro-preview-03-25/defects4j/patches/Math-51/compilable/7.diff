diff --git a/tmp/8268b2d3-4c37-4da1-a783-ced54bec7610_buggy.java b/tmp/962d68ff-3bd8-4e53-a18b-dd0c93460df3_fixed.java
index 6b09955..5d22c84 100644
--- a/tmp/8268b2d3-4c37-4da1-a783-ced54bec7610_buggy.java
+++ b/tmp/962d68ff-3bd8-4e53-a18b-dd0c93460df3_fixed.java
@@ -1,121 +1,175 @@
     /** {@inheritDoc} */
+    @Override
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
+            // N.B. This can be problematic if f1 - f0 is close to zero. Check should be done.
+            // Avoid potential division by zero or convergence issues near zero gradient
+             if (f1 == f0) {
+                 // This should not happen based on verifyBracketing unless both are zero
+                 // or the function is extremely flat. Handle appropriately.
+                 // If convergence criteria are met, they should handle this.
+                 // If not, it indicates a problem. The original code didn't check explicitly.
+                 // We rely on convergence checks below.
+             }
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
+            // Determine which endpoint is stagnant and apply modification.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // Root is in [x, x1]. Endpoint x0 is replaced. Endpoint x1 is stagnant.
+                // Retained value is f1. Point x1 becomes the new x0.
+                // Modify the value f1 before assigning it to the new f0.
+                final double f0_old = f0; // Keep old f0 for Pegasus calculation.
+                switch (method) {
+                case ILLINOIS:
+                    f0 = f1 * 0.5; // Modify the stagnant value (f1) and assign to new f0
+                    break;
+                case PEGASUS:
+                    // Pegasus modification: f_stag *= f_other / (f_other + f_new)
+                    // f_stag is f1, f_other is f0_old, f_new is fx
+                    f0 = f1 * (f0_old / (f0_old + fx)); // Apply Pegasus modification to f1, assign to new f0
+                    break;
+                case REGULA_FALSI:
+                    // Default case: Regular Regula Falsi (no modification)
+                    f0 = f1; // Assign original stagnant value
+                    break;
+                default:
+                    // Should never happen. Consider throwing an exception.
+                     throw new MathInternalError(); // Or handle more gracefully
+                }
+                // Update endpoint x0 using the value from stagnant x1
                 x0 = x1;
-                f0 = f1;
+                // Invert the interval direction
                 inverted = !inverted;
             } else {
+                // Root is in [x0, x]. Endpoint x1 is replaced. Endpoint x0 is stagnant.
+                // Retained value is f0. Point x0 remains x0.
+                // Modify the value f0.
+                // Pegasus modification: f_stag *= f_other / (f_other + f_new)
+                // f_stag is f0, f_other is f1, f_new is fx. Formula: f0_new = f0 * (f1 / (f1 + fx))
                 switch (method) {
                 case ILLINOIS:
-                    f0 *= 0.5;
+                    f0 *= 0.5; // Modify the stagnant value (f0) in place
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    f0 *= f1 / (f1 + fx); // Modify stagnant f0 using original f1 and new fx
+                    break;
+                case REGULA_FALSI:
+                    // Default case: Regular Regula Falsi (no modification)
+                    // f0 remains unchanged.
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                  default:
                     // Should never happen.
+                     throw new MathInternalError(); // Or handle more gracefully
                 }
+                // x0 remains the same point, inverted state remains the same.
             }
-            // Update from [x0, x1] to [x0, x].
+
+            // Update the endpoint that is always replaced (x1) with the new approximation x.
             x1 = x;
             f1 = fx;
 
+            // Check for convergence based on function value.
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
+                // The logic here determines if x1 satisfies the AllowedSolution criteria.
+                // If it does, x1 is returned. If not, the loop might continue, potentially
+                // terminating later via the interval width check, which might return x0 or x1.
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    if (inverted) {
+                    if (inverted) { // x1 is on the left side of the root
                         return x1;
                     }
-                    break;
+                    break; // If !inverted, x1 is on the right, loop continues or hits interval check
                 case RIGHT_SIDE:
-                    if (!inverted) {
+                    if (!inverted) { // x1 is on the right side of the root
                         return x1;
                     }
-                    break;
+                    break; // If inverted, x1 is on the left, loop continues or hits interval check
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
+                    if (f1 <= 0) { // f1 is below or at zero
                         return x1;
                     }
-                    break;
+                    break; // If f1 > 0, loop continues or hits interval check
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
+                    if (f1 >= 0) { // f1 is above or at zero
                         return x1;
                     }
-                    break;
+                    break; // If f1 < 0, loop continues or hits interval check
                 default:
-                    throw new MathInternalError();
+                    throw new MathInternalError(); // Should never happen.
                 }
             }
 
+            // Check for convergence based on interval width.
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
+                // Interval is small enough, return the best endpoint based on AllowedSolution.
                 switch (allowed) {
                 case ANY_SIDE:
+                    // Return the latest approximation x1, as it's likely the best.
                     return x1;
                 case LEFT_SIDE:
+                    // Return the endpoint which is algebraically smaller.
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                    // Return the endpoint which is algebraically larger.
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Return the endpoint whose function value is less than or equal to zero.
+                    // Prefer the latest approximation if it qualifies.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                     // Return the endpoint whose function value is greater than or equal to zero.
+                     // Prefer the latest approximation if it qualifies.
                     return (f1 >= 0) ? x1 : x0;
                 default:
-                    throw new MathInternalError();
+                    throw new MathInternalError(); // Should never happen.
                 }
             }
         }
     }
\ No newline at end of file
