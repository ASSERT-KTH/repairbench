diff --git a/tmp/094a1c64-3614-4ac5-828f-9e3527a3759e_buggy.java b/tmp/002cbf99-76bf-40fa-984f-bf2d23d987b8_fixed.java
index 6b09955..7b38c0d 100644
--- a/tmp/094a1c64-3614-4ac5-828f-9e3527a3759e_buggy.java
+++ b/tmp/002cbf99-76bf-40fa-984f-bf2d23d987b8_fixed.java
@@ -1,121 +1,159 @@
     /** {@inheritDoc} */
+    @Override
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
+            // Store function values for modifications
+            final double f0_old = f0;
+            final double f1_old = f1;
+
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // Root is in [x, x1]. Update x0 to x.
+                // However, the variables are swapped: x0 becomes the previous x1.
                 x0 = x1;
-                f0 = f1;
+                f0 = f1; // f0 now holds the function value of the retained endpoint x1_old.
                 inverted = !inverted;
+
+                // Apply modification to the retained endpoint's function value (now in f0).
+                switch (method) {
+                case ILLINOIS:
+                    f0 *= 0.5;
+                    break;
+                case PEGASUS:
+                    // f_retained *= f_discarded / (f_discarded + f_new)
+                    // f_retained is f1_old (now in f0), f_discarded is f0_old, f_new is fx (becomes f1 later)
+                    f0 *= f0_old / (f0_old + fx);
+                    break;
+                case REGULA_FALSI:
+                    // No modification for standard Regula Falsi.
+                    break;
+                default:
+                    // Should never happen.
+                    throw new MathInternalError();
+                }
             } else {
+                // Root is in [x0, x]. Update x1 to x.
+                // Endpoint x0 is retained.
+                // Modify the retained endpoint's function value (f0).
                  switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    // f_retained *= f_discarded / (f_discarded + f_new)
+                    // f_retained is f0_old (still in f0), f_discarded is f1_old, f_new is fx (becomes f1 later)
+                    f0 *= f1_old / (f1_old + fx);
+                    break;
+                case REGULA_FALSI:
+                    // No modification for standard Regula Falsi.
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
                     // Should never happen.
+                    throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint which always gets replaced.
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
+                    // Should never happen.
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    // Prevent potential division by zero errors from complex return type logic
+                    final double f_x0 = computeObjectiveValue(x0);
+                    final double f_x1 = computeObjectiveValue(x1);
+                    return (f_x1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    // Prevent potential division by zero errors from complex return type logic
+                    final double f_x0_ = computeObjectiveValue(x0);
+                    final double f_x1_ = computeObjectiveValue(x1);
+                    return (f_x1_ >= 0) ? x1 : x0;
                 default:
+                    // Should never happen.
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
