diff --git a/tmp/88f6f36c-5fd7-4556-beb7-2e2e85161035_buggy.java b/tmp/f753a171-a068-4372-b06a-d250c64c23ea_fixed.java
index 6b09955..323e940 100644
--- a/tmp/88f6f36c-5fd7-4556-beb7-2e2e85161035_buggy.java
+++ b/tmp/f753a171-a068-4372-b06a-d250c64c23ea_fixed.java
@@ -1,121 +1,186 @@
     /** {@inheritDoc} */
+    @Override
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
+        // Track the side associated with the current x0 boundary point.
+        // This is needed to properly handle the Illinois and Pegasus step modifications.
+        // It indicates if the endpoint retained in the previous step was x0 (0) or x1 (1).
+        int retainedSide = -1; // -1 indicates initial state.
+
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
+            // Calculate the next approximation using the Regula Falsi formula.
+            // Avoid division by zero. Maybe verify f1 != f0 if needed, but verifyBracketing should ensure this.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
+            // Store the current function values for potential use in modification rules
+            double f0_old = f0;
+            double f1_old = f1;
+
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // Root is in [x, x1]. The interval is updated to [x, x1] or [x1, x].
+                // The old x1 becomes the new x0. x1 is the retained side (position 1).
                 x0 = x1;
-                f0 = f1;
+                f0 = f1; // Use the unmodified f1 value for the new f0
+
+                // Check if the retained side (position 1) was stagnant
+                if (retainedSide == 1) {
+                     switch (method) {
+                     case ILLINOIS:
+                         // Modify the function value of the stagnant endpoint (now at position 0).
+                         // Halve the function value of the endpoint that was just moved to x0
+                         f0 *= 0.5;
+                         break;
+                     case PEGASUS:
+                         // Modify using the Pegasus factor. stagnant=f1 (now f0), moving=f0_old, new=fx
+                         f0 *= f0_old / (f0_old + fx);
+                         break;
+                     default: // REGULA_FALSI
+                         // No modification
+                         break;
+                     }
+                }
+
                 inverted = !inverted;
+                retainedSide = 0; // The point previously at position 1 is now at position 0 and is the retained endpoint for the next check.
+
             } else {
+                // Root is in [x0, x]. The interval is updated to [x0, x].
+                // x0 is the retained side (position 0).
+                // Check if the retained side (position 0) was stagnant
+                 if (retainedSide == 0) {
                      switch (method) {
                      case ILLINOIS:
+                         // Halve the function value of the stagnant endpoint x0.
                          f0 *= 0.5;
                          break;
                      case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                         // Modify using the Pegasus factor. stagnant=f0, moving=f1_old, new=fx
+                         f0 *= f1_old / (f1_old + fx);
                          break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
-                default:
-                    // Should never happen.
+                     default: // REGULA_FALSI
+                          // No modification
+                         break;
+                     }
                  }
+                 // x0 and f0 (potentially modified) remain the same positionally.
+                 // inverted state does not change.
+                 retainedSide = 0; // The point at position 0 is the retained endpoint for the next check.
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update x1 to the new approximation x.
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // the root than we already are. Check based on f1 (value at the newest point x1=x).
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
-                    break;
+                    break; // Not the right side yet
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
-                    break;
+                    break; // Not the right side yet
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
-                    break;
+                    break; // Not the right side yet
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
-                    break;
+                    break; // Not the right side yet
                 default:
+                    // Should never happen.
                     throw new MathInternalError();
                 }
+                // If the allowed side condition was not met for ftol, continue loop
+                // This part of the original logic might need refinement if ftol convergence is strict
+                // For now, assume falling through means the side condition wasn't met, and we check interval width.
             }
 
+
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
+                // Convergence based on interval width. Return the endpoint satisfying the AllowedSolution.
                 switch (allowed) {
                 case ANY_SIDE:
+                    // Return the endpoint with the smallest function value magnitude?
+                    // Or return the latest estimate x1? The original code returns x1.
                     return x1;
                 case LEFT_SIDE:
+                    // Return the lower endpoint of the final interval [min(x0,x1), max(x0,x1)]
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                    // Return the upper endpoint of the final interval [min(x0,x1), max(x0,x1)]
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    // Return the endpoint with f <= 0
+                    // Check f1 first as it's the latest point and likely closer to 0
+                    if (f1 <= 0) { return x1; }
+                    if (f0 <= 0) { return x0; }
+                    // If neither is below, logic based on which is 'better' might be needed,
+                    // but verifyBracketing ensures one must be <=0 and the other >=0 if f1 != 0.
+                    // If f1 > ftol, and f1 > 0, then f0 must be < 0.
+                    return x0;
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    // Return the endpoint with f >= 0
+                    // Check f1 first
+                    if (f1 >= 0) { return x1; }
+                    if (f0 >= 0) { return x0; }
+                    // If f1 < -ftol, and f1 < 0, then f0 must be > 0.
+                    return x0;
                 default:
+                    // Should never happen.
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
