diff --git a/tmp/651b98cf-bfb6-438e-a72c-9ddb69756ca7_buggy.java b/tmp/2fd9b9dc-074a-4d6b-9edb-eda70628559f_fixed.java
index 6b09955..16e2a6f 100644
--- a/tmp/651b98cf-bfb6-438e-a72c-9ddb69756ca7_buggy.java
+++ b/tmp/2fd9b9dc-074a-4d6b-9edb-eda70628559f_fixed.java
@@ -1,121 +1,160 @@
+import org.apache.commons.math.exception.MathInternalError; // Assume this exists or handle appropriately
+import org.apache.commons.math.util.FastMath; // Needed for abs, max
+
+// Assuming the following are accessible from the base class or context:
+// - enum Method { REGULA_FALSI, ILLINOIS, PEGASUS }
+// - enum AllowedSolution { ANY_SIDE, LEFT_SIDE, RIGHT_SIDE, BELOW_SIDE, ABOVE_SIDE }
+// - Methods: getMin(), getMax(), computeObjectiveValue(double), verifyBracketing(double, double)
+// - Methods: getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy()
+// - Fields: Method method, AllowedSolution allowed
+
     /** {@inheritDoc} */
+    @Override
     protected final double doSolve() {
-        // Get initial solution
+        // Get initial solution bounds and function values.
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+        // Return endpoint if it is already the root.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
-        // Verify bracketing of initial solution.
+        // Verify bracketing. This also ensures f0 * f1 < 0.
         verifyBracketing(x0, x1);
 
-        // Get accuracies.
+        // Orient interval such that x0 < x1.
+        if (x0 > x1) {
+            double tmpX = x0; x0 = x1; x1 = tmpX;
+            double tmpF = f0; f0 = f1; f1 = tmpF;
+            // Note: f0 and f1 are swapped accordingly, preserving f0*f1 < 0.
+        }
+
+        // Get convergence criteria constants.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
+        // Initialize variables for the loop.
+        int side = 0; // 0: initial, 1: x1 updated in last step, -1: x0 updated in last step
 
-        // Keep finding better approximations.
+        // Main iteration loop.
         while (true) {
-            // Calculate the next approximation.
+            // Calculate the next approximation 'x' using the secant method formula (Regula Falsi).
+            // The formula is x = x1 - f1 * (x1 - x0) / (f1 - f0)
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+            // Calculate the function value at the new approximation.
             final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+            // If the new approximation is the exact root, return it.
             if (fx == 0.0) {
                 return x;
             }
 
-            // Update the bounds with the new approximation.
+            // Cache function values before update for potential Pegasus modification.
+            final double old_f0 = f0;
+            final double old_f1 = f1;
+
+            // Update the interval [x0, x1] based on the sign of fx.
+            // Keep track of which endpoint was retained, and which was updated.
+            final int previousSide = side;
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+                // Root is in [x, x1], so x becomes the new x0. Endpoint x1 is retained.
+                x0 = x;
+                f0 = fx;
+                side = -1;
             } else {
-                switch (method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
-                default:
-                    // Should never happen.
-                }
-            }
-            // Update from [x0, x1] to [x0, x].
+                // Root is in [x0, x], so x becomes the new x1. Endpoint x0 is retained.
+                // This assumes f0 * fx < 0 because initial f0 * f1 < 0.
                 x1 = x;
                 f1 = fx;
+                side = 1;
+            }
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
+            // Apply Illinois or Pegasus modification if the same endpoint was retained twice in a row.
+            // Check if the side of update remains the same (and non-zero).
+            if ((method == Method.ILLINOIS || method == Method.PEGASUS) && (side * previousSide > 0)) {
+                 // If side == -1, x0 was updated (x1 retained). If previousSide was also -1, x1 was retained twice. Modify f1.
+                 // If side == 1, x1 was updated (x0 retained). If previousSide was also 1, x0 was retained twice. Modify f0.
+                if (side == -1) { // Modify f1 (value at the retained endpoint x1)
+                    if (method == Method.ILLINOIS) {
+                        f1 *= 0.5;
+                    } else { // PEGASUS modification: f1_new = f1_old * f0_old / (f0_old + fx)
+                        double denom = old_f0 + fx;
+                        if (denom != 0) { // Avoid division by zero
+                             // Note: use old_f1 here as the value being modified.
+                             f1 = old_f1 * old_f0 / denom;
+                        }
+                        // If denom == 0, skip modification this iteration.
+                    }
+                } else { // Modify f0 (value at the retained endpoint x0)
+                    if (method == Method.ILLINOIS) {
+                        f0 *= 0.5;
+                    } else { // PEGASUS modification: f0_new = f0_old * f1_old / (f1_old + fx)
+                         double denom = old_f1 + fx;
+                         if (denom != 0) { // Avoid division by zero
+                             // Note: use old_f0 here as the value being modified.
+                             f0 = old_f0 * old_f1 / denom;
+                         }
+                         // If denom == 0, skip modification this iteration.
+                    }
+                }
+            }
+
+            // Check for convergence based on function value accuracy (ftol).
+            // Use the function value at the most recently computed point 'x'.
+            final double f_new = (side == -1) ? f0 : f1; // This is fx, stored in the updated endpoint's f value.
+            final double x_new = (side == -1) ? x0 : x1; // This is x, stored in the updated endpoint's x value.
+
+            if (FastMath.abs(f_new) <= ftol) {
+                // If converged based on function value, return the result
+                // respecting the AllowedSolution configuration.
                 switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
+                    return x_new;
+                case LEFT_SIDE: // Return endpoint x_ L s.t. x_L <= root. Since x0 < x1, check sign of f0.
+                    return (f0 < 0) ? x0 : x1; // If f0<0 -> increasing -> x0<=root. If f0>0 -> decreasing -> x1<=root.
+                case RIGHT_SIDE: // Return endpoint x_R s.t. x_R >= root.
+                    return (f0 < 0) ? x1 : x0; // If f0<0 -> increasing -> x1>=root. If f0>0 -> decreasing -> x0>=root.
+                case BELOW_SIDE: // Return endpoint x_B s.t. f(x_B) <= 0.
+                    // Prioritize returning x_new if its function value f_new satisfies the condition.
+                    return (f_new <= 0) ? x_new : ((f0 <= 0) ? x0 : x1); // If f_new > 0, return the endpoint where f <= 0.
+                case ABOVE_SIDE: // Return endpoint x_A s.t. f(x_A) >= 0.
+                    // Prioritize returning x_new if its function value f_new satisfies the condition.
+                    return (f_new >= 0) ? x_new : ((f0 >= 0) ? x0 : x1); // If f_new < 0, return the endpoint where f >= 0.
                 default:
+                    // This should not happen based on enum definition.
                     throw new MathInternalError();
                 }
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+            // Check for convergence based on domain interval accuracy (atol, rtol).
+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+                // If converged based on interval size, return the result
+                // respecting the AllowedSolution configuration.
                  switch (allowed) {
                  case ANY_SIDE:
-                    return x1;
+                     // Return the endpoint whose function value is closer to zero.
+                     return (FastMath.abs(f1) <= FastMath.abs(f0)) ? x1 : x0;
                  case LEFT_SIDE:
-                    return inverted ? x1 : x0;
+                     return (f0 < 0) ? x0 : x1;
                  case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
+                     return (f0 < 0) ? x1 : x0;
                  case BELOW_SIDE:
+                     // Return the endpoint with non-positive function value. One must exist.
                      return (f1 <= 0) ? x1 : x0;
                  case ABOVE_SIDE:
+                     // Return the endpoint with non-negative function value. One must exist.
                      return (f1 >= 0) ? x1 : x0;
                  default:
+                     // This should not happen.
                      throw new MathInternalError();
                  }
             }
-        }
+        } // End of main loop
     }
\ No newline at end of file
