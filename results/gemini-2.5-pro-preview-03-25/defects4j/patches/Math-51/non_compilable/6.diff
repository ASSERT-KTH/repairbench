diff --git a/tmp/79449c2d-12a8-437c-a1c2-7408db9701c3_buggy.java b/tmp/65ee796d-5343-4843-be71-0b6ed37a7b1c_fixed.java
index 6b09955..41c178d 100644
--- a/tmp/79449c2d-12a8-437c-a1c2-7408db9701c3_buggy.java
+++ b/tmp/65ee796d-5343-4843-be71-0b6ed37a7b1c_fixed.java
@@ -1,121 +1,164 @@
     /** {@inheritDoc} */
-    protected final double doSolve() {
+    @Override
+    protected final double doSolve() throws TooManyEvaluationsException, NoBracketingException {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
+            // N.B. This can be timestamped for debugging purposes.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
+            // Store the current values for modification calculation.
+            final double f0_old = f0;
+            final double f1_old = f1;
+
             // Update the bounds with the new approximation.
+            // If f1 and fx have different signs, the root is in the interval [x, x1]. -> Update x0. Otherwise, update x1.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                 // Root is in [x, x1_old]. x0 is replaced by x. x1_old is stationary.
+                 // Update interval boundaries: x0 becomes x1_old, x1 becomes x.
                  x0 = x1;
-                f0 = f1;
+                 f0 = f1; // f0 holds the value f1_old of the stationary endpoint.
                  inverted = !inverted;
+                 // Apply Illinois/Pegasus modification to the stationary endpoint's function value (f1_old, now stored in f0).
+                 switch (method) { // Assuming 'method' field exists and is ILLINOIS or PEGASUS
+                 case ILLINOIS:
+                     f0 *= 0.5;
+                     break;
+                 case PEGASUS:
+                     // Modification uses the value of the function at the discarded endpoint (f0_old) and the new function value fx.
+                     f0 *= f0_old / (f0_old + fx);
+                     break;
+                 case REGULA_FALSI:
+                     // Original Regula Falsi does not modify function values.
+                     break; // No operation
+                 default:
+                     // Should never happen unless more methods are introduced.
+                     throw new MathInternalError(); // Use the specific exception type from the context
+                 }
             } else {
-                switch (method) {
+                 // Root is in [x0_old, x]. x1 is replaced by x. x0_old is stationary.
+                 // Update interval boundaries: x0 remains x0_old, x1 becomes x.
+                 // Apply Illinois/Pegasus modification to the stationary endpoint's function value (f0_old, stored in f0).
+                 switch (method) { // Assuming 'method' field exists and is ILLINOIS or PEGASUS
                  case ILLINOIS:
                      f0 *= 0.5;
                      break;
                  case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                      // Modification uses the value of the function at the discarded endpoint (f1_old) and the new function value fx.
+                     f0 *= f1_old / (f1_old + fx);
                      break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
+                 case REGULA_FALSI:
+                     // Original Regula Falsi does not modify function values.
+                     break; // No operation
                  default:
-                    // Should never happen.
+                     // Should never happen unless more methods are introduced.
+                     throw new MathInternalError(); // Use the specific exception type from the context
                  }
             }
-            // Update from [x0, x1] to [x0, x].
+
+            // Update the endpoint which is always replaced by x in this implementation structure
             x1 = x;
-            f1 = fx;
+            f1 = fx; // f1 is always the function value at the most recent estimate x.
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+
+            // Check for convergence.
+
+            // If the function value f1 (at the latest estimate x1=x) is close enough to zero:
+            // Check if the allowed side constraint is met. If so, return x1.
             if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
+                switch (allowed) { // Assuming 'allowed' field exists
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    if (inverted) {
+                    if (inverted) { // If inverted, x1 is on the left side of the original interval
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, continue (don't return x1)
                 case RIGHT_SIDE:
-                    if (!inverted) {
+                    if (!inverted) { // If not inverted, x1 is on the right side of the original interval
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, continue
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
+                    if (f1 <= 0) { // If f1 is below or at zero
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, continue
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
+                    if (f1 >= 0) { // If f1 is above or at zero
                         return x1;
                     }
-                    break;
+                    break; // Otherwise, continue
                 default:
-                    throw new MathInternalError();
+                    throw new MathInternalError(); // Use the specific exception type from the context
                 }
+                // If we reach here, ftol was met but the side condition was not, so we don't return based on ftol alone.
+                // Continue to check the interval width convergence.
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
+            // If the interval [x0, x1] has become small enough:
+            // Return the endpoint that satisfies the allowed side constraint.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
-                switch (allowed) {
+                switch (allowed) { // Assuming 'allowed' field exists
                 case ANY_SIDE:
+                    // Return the latest estimate
                     return x1;
                 case LEFT_SIDE:
+                    // Return the endpoint corresponding to the original interval's left bound
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                     // Return the endpoint corresponding to the original interval's right bound
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Return the endpoint with function value <= 0.
+                    // Trust the signs of f0 and f1 (modifications should preserve sign).
+                    // f1 is the function value at the best estimate x1. Check it first.
+                    // If f1 is not <= 0, then f0 must be (due to bracketing).
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                    // Return the endpoint with function value >= 0.
+                    // Similar logic: Check f1 first.
                     return (f1 >= 0) ? x1 : x0;
                 default:
-                    throw new MathInternalError();
-                }
+                    throw new MathInternalError(); // Use the specific exception type from the context
                 }
             }
+        } // End of while loop
     }
\ No newline at end of file
