diff --git a/tmp/9809b2ee-7053-49ad-96c3-cb37ec4daf86_buggy.java b/tmp/8828f3bf-1c04-4379-aef5-16e09e837277_fixed.java
index 6b09955..23b8ee9 100644
--- a/tmp/9809b2ee-7053-49ad-96c3-cb37ec4daf86_buggy.java
+++ b/tmp/8828f3bf-1c04-4379-aef5-16e09e837277_fixed.java
@@ -1,121 +1,148 @@
+import org.apache.commons.math.exception.MathInternalError; // Assuming this exists from context
+import org.apache.commons.math.util.FastMath; // Assuming this exists from context
+// Assuming AllowedSolution and Method enums/classes exist in the same package or are imported
+// e.g. import org.apache.commons.math.analysis.solvers.AllowedSolution;
+
     /** {@inheritDoc} */
+    @Override // Add override assuming it inherits from a base class like BaseSecantSolver
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
+        // Assuming these methods exist to get the solver configuration from the base class or this class
+        final Method method = getMethod();
+        final AllowedSolution allowed = getAllowedSolutions();
+
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
+            // Determine which endpoint should be modified based on the signs.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // Root is in [x, x1]. The endpoint associated with x0 is replaced by x1 in the Commons Math structure.
+                // The function value modification should be applied to the retained endpoint (f1).
+                // Store the current f0 value, as it will be needed for the Pegasus update of f1 (which becomes new f0).
+                double f0_old = f0;
+                // Swap endpoints. After this, (x0, f0) represents the retained endpoint (original x1).
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
+
+                // Apply the modification to the function value of the retained endpoint (now in f0).
+                switch (method) {
+                case ILLINOIS:
+                    f0 *= 0.5;
+                    break;
+                case PEGASUS:
+                    // Modify f0 (the retained value, original f1) using f0_old (the replaced value, original f0) and fx.
+                    // Formula: f_retained *= f_other_orig / (f_other_orig + f_new)
+                    f0 *= f0_old / (f0_old + fx);
+                    break;
+                case REGULA_FALSI:
+                    // No modification for standard regula falsi.
+                    break;
+                // default: // Assuming Method is an enum covering all cases. Otherwise, handle appropriately.
+                }
             } else {
+                // Root is in [x0, x]. The endpoint associated with x1 is replaced by x.
+                // The function value modification should be applied to the retained endpoint (f0).
                 switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
+                    // Modify f0 (the retained value) using f1 (the value about to be replaced) and fx.
+                    // Formula: f_retained *= f_other / (f_other + f_new)
                     f0 *= f1 / (f1 + fx);
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
-                default:
-                    // Should never happen.
+                case REGULA_FALSI:
+                     // No modification for standard regula falsi.
+                    break;
+                // default: // Assuming Method is an enum covering all cases. Otherwise, handle appropriately.
                 }
+                // The endpoint (x1, f1) will be updated below.
             }
-            // Update from [x0, x1] to [x0, x].
+
+            // Update the endpoint that is always replaced with the new estimate.
             x1 = x;
             f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+            // Check for convergence based on the function value at the most recent estimate x1.
             if (FastMath.abs(f1) <= ftol) {
+                // f(x1) is close enough to zero, return the appropriate endpoint.
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
+                    return inverted ? x1 : x0; // Return the lower bound
                 case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
+                    return inverted ? x0 : x1; // Return the upper bound
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (f1 <= 0) ? x1 : x0; // Return endpoint with f<=0, preferring recent x1
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (f1 >= 0) ? x1 : x0; // Return endpoint with f>=0, preferring recent x1
                 default:
-                    throw new MathInternalError();
+                    // Should never happen (dead code).
+                    throw new MathInternalError(null);
                 }
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
+            // Check for convergence based on the interval width.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
+                // Interval width is small enough, return the appropriate endpoint.
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    return inverted ? x1 : x0;
+                    return inverted ? x1 : x0; // Return the lower bound
                 case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
+                    return inverted ? x0 : x1; // Return the upper bound
                 case BELOW_SIDE:
+                     // Interval converged, return endpoint with f<=0, preferring recent x1
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                     // Interval converged, return endpoint with f>=0, preferring recent x1
                     return (f1 >= 0) ? x1 : x0;
                 default:
-                    throw new MathInternalError();
+                     // Should never happen (dead code).
+                    throw new MathInternalError(null);
                 }
             }
         }
     }
\ No newline at end of file
