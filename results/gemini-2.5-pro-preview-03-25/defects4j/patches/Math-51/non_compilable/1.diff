diff --git a/tmp/96a23621-ec55-41f9-b4b6-809f23d0be3b_buggy.java b/tmp/a1fa2775-691b-4d41-b6f5-bc98525de946_fixed.java
index 6b09955..75d06b5 100644
--- a/tmp/96a23621-ec55-41f9-b4b6-809f23d0be3b_buggy.java
+++ b/tmp/a1fa2775-691b-4d41-b6f5-bc98525de946_fixed.java
@@ -1,121 +1,137 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
                 // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+                // the interval. The new interval is [old_x1, x]
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
             } else {
+                // The sign of fx is the same as f1. The new interval is [x0, x].
+                // Reduce the function value at the stationary endpoint x0 to avoid
+                // slow convergence.
                 switch (method) {
+                // N.B. REGULA_FALSI case implicitly handled by falling through to ILLINOIS
+                //      to prevent the poor convergence speed of the classic regula falsi method.
+                case REGULA_FALSI:
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
                     // Should never happen.
+                    throw new MathInternalError("Unexpected solve method"); // Use specific error
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            // Update the endpoint which is always the latest approximation x.
             x1 = x;
             f1 = fx;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
-                    }
+                    } // else return x0 is handled below the interval check
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
-                    }
+                    } // else return x0 is handled below the interval check
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
-                    }
+                    } // else return x0 is handled below the interval check
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
-                    }
+                    } // else return x0 is handled below the interval check
                     break;
                 default:
                     throw new MathInternalError();
                 }
+                // If we reach here, the current x1 doesn't satisfy the 'allowed' side condition,
+                // but the function value is small enough. The interval width check below
+                // will handle returning the appropriate endpoint (x0 or x1).
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Check sign of function value at the endpoints.
+                    // If inverted=true, x0 > x1, f0 > 0, f1 < 0. Return lower value with f <= 0, which is x1.
+                    // If inverted=false, x0 < x1, f0 < 0, f1 > 0. Return lower value with f <= 0, which is x0.
+                    // Generalizing: if f1 <= 0, x1 is the candidate; otherwise x0 is.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                    // Check sign of function value at the endpoints.
+                    // If inverted=true, x0 > x1, f0 > 0, f1 < 0. Return upper value with f >= 0, which is x0.
+                    // If inverted=false, x0 < x1, f0 < 0, f1 > 0. Return upper value with f >= 0, which is x1.
+                    // Generalizing: if f1 >= 0, x1 is the candidate; otherwise x0 is.
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
