diff --git a/tmp/1107804b-91f3-4fed-81d3-210aa1dafa0e_buggy.java b/tmp/f1a0b8e0-9d01-4157-8650-bb2a5e263daf_fixed.java
index 6b09955..60d0399 100644
--- a/tmp/1107804b-91f3-4fed-81d3-210aa1dafa0e_buggy.java
+++ b/tmp/f1a0b8e0-9d01-4157-8650-bb2a5e263daf_fixed.java
@@ -1,121 +1,202 @@
+import org.apache.commons.math.exception.MathInternalError; // Used in default switch cases
+import org.apache.commons.math.util.FastMath; // Used for abs and max
+import org.apache.commons.math.analysis.solvers.AllowedSolution; // Assuming enum exists
+// Assuming RegulaFalsiSolver.Method enum exists and other necessary imports/context
+
     /** {@inheritDoc} */
+    @Override
     protected final double doSolve() {
-        // Get initial solution
-        double x0 = getMin();
-        double x1 = getMax();
+        // Get initial bounds and function values.
+        final double min = getMin();
+        final double max = getMax();
+        double x0 = min;
+        double x1 = max;
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+        // Keep track of initial function values for side specification for AllowedSolution.
+        final double initialF0 = f0;
+        final double initialF1 = f1;
+
+        // If one of the bounds is the exact root, return it.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
+        // Flags to track which side was retained in the previous step, for Illinois/Pegasus.
+        boolean stagnantLeft = false; // True if x1 was retained (not updated) in the previous step.
+        boolean stagnantRight = false; // True if x0 was retained (not updated) in the previous step.
 
-        // Keep finding better approximations.
+        // Main iteration loop.
         while (true) {
-            // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+            // Calculate the next approximation using the Regula Falsi formula.
+            // Division by zero is avoided because f0 * f1 < 0 implies f0 != f1.
+            final double x = x1 - (f1 * (x1 - x0)) / (f1 - f0);
             final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+            // Check for exact root.
             if (fx == 0.0) {
                 return x;
             }
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
-            } else {
-                switch (method) {
+            // Update the interval [x0, x1] and function values f0, f1.
+            if (fx * f1 < 0) {
+                // Root is in (x, x1). Update x0. x1 is retained.
+                final double oldF0 = f0; // Store f0 for potential Pegasus calculation.
+                x0 = x;
+                f0 = fx;
+
+                // Check if the retained endpoint x1 was also retained previously.
+                if (stagnantLeft) {
+                    // Apply modification to the function value of the stagnant endpoint f1.
+                    switch (method) { // Assuming 'method' is an accessible enum field
                         case ILLINOIS:
-                    f0 *= 0.5;
+                            f1 *= 0.5;
                             break;
                         case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                            // Factor uses value at replaced endpoint (oldF0) and new point (fx).
+                            if (oldF0 + fx == 0) { // Avoid division by zero.
+                                f1 *= 0.5; // Fallback to Illinois step.
+                            } else {
+                                f1 *= oldF0 / (oldF0 + fx);
+                            }
                             break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                          default:
-                    // Should never happen.
+                            // REGULA_FALSI or others: No modification.
                     }
                 }
-            // Update from [x0, x1] to [x0, x].
+                // Set stagnation flags for next iteration: x1 was retained, x0 was updated.
+                stagnantLeft = true;
+                stagnantRight = false;
+            } else {
+                // Root is in (x0, x). Update x1. x0 is retained (implies f0 * fx < 0).
+                final double oldF1 = f1; // Store f1 for potential Pegasus calculation.
                 x1 = x;
                 f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
+                // Check if the retained endpoint x0 was also retained previously.
+                if (stagnantRight) {
+                    // Apply modification to the function value of the stagnant endpoint f0.
+                    switch (method) { // Assuming 'method' is an accessible enum field
+                        case ILLINOIS:
+                            f0 *= 0.5;
                             break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
+                        case PEGASUS:
+                             // Factor uses value at replaced endpoint (oldF1) and new point (fx).
+                             if (oldF1 + fx == 0) { // Avoid division by zero.
+                                 f0 *= 0.5; // Fallback to Illinois step.
+                             } else {
+                                 f0 *= oldF1 / (oldF1 + fx);
                              }
                             break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
+                         default:
+                            // REGULA_FALSI or others: No modification.
                     }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
                 }
-                    break;
-                default:
-                    throw new MathInternalError();
+                // Set stagnation flags for next iteration: x0 was retained, x1 was updated.
+                stagnantRight = true;
+                stagnantLeft = false;
+            }
+
+            // Check convergence criteria.
+
+            // 1. Check function value convergence.
+            // Consider the endpoint whose function value is closer to zero.
+            final double absF0 = FastMath.abs(f0);
+            final double absF1 = FastMath.abs(f1);
+            final double currentX = (absF0 < absF1) ? x0 : x1;
+            final double currentF = (absF0 < absF1) ? f0 : f1;
+
+            if (FastMath.abs(currentF) <= ftol) {
+                // Found a point with function value within tolerance.
+                // Return the best available point satisfying the AllowedSolution condition.
+                return selectResult(x0, f0, x1, f1, initialF0, initialF1, allowed);
+            }
+
+            // 2. Check interval convergence.
+            // Use the latest estimate x1 for relative tolerance, consistent with original code.
+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+                // Interval is small enough.
+                // Return the best available point satisfying the AllowedSolution condition.
+                return selectResult(x0, f0, x1, f1, initialF0, initialF1, allowed);
+            }
+        } // End while loop
+    }
+
+    /**
+     * Selects the final result based on the AllowedSolution criteria.
+     *
+     * @param x0 Lower bound of the final interval.
+     * @param f0 Function value at x0.
+     * @param x1 Upper bound of the final interval.
+     * @param f1 Function value at x1.
+     * @param initialF0 Function value at the initial lower bound.
+     * @param initialF1 Function value at the initial upper bound.
+     * @param allowed The AllowedSolution criterion.
+     * @return The chosen result (x0 or x1).
+     */
+    private double selectResult(double x0, double f0, double x1, double f1,
+                                double initialF0, double initialF1,
+                                AllowedSolution allowed) {
+
+        final boolean f0Satisfies = checkAllowed(f0, initialF0, initialF1, allowed);
+        final boolean f1Satisfies = checkAllowed(f1, initialF0, initialF1, allowed);
+
+        if (f0Satisfies && f1Satisfies) {
+            // Both endpoints satisfy the criteria, return the one closer to zero.
+            return (FastMath.abs(f0) < FastMath.abs(f1)) ? x0 : x1;
+        } else if (f0Satisfies) {
+            // Only x0 satisfies.
+            return x0;
+        } else if (f1Satisfies) {
+            // Only x1 satisfies.
+            return x1;
+        } else {
+            // Neither endpoint satisfies the criteria (e.g., LEFT_SIDE requested, but both
+            // f0 and f1 have the sign of initialF1). This indicates an issue or edge case.
+            // As a fallback, return the endpoint with the function value closer to zero,
+            // as it's the best approximation found in terms of function value.
+            return (FastMath.abs(f0) < FastMath.abs(f1)) ? x0 : x1;
         }
     }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+    /**
+     * Helper function to check if a function value satisfies the AllowedSolution criteria.
+     *
+     * @param fx Function value to check.
+     * @param initialF0 Function value at the initial lower bound.
+     * @param initialF1 Function value at the initial upper bound.
+     * @param allowed The AllowedSolution criterion.
+     * @return True if fx satisfies the criteria.
+     */
+    private boolean checkAllowed(double fx, double initialF0, double initialF1, AllowedSolution allowed) {
          switch (allowed) {
              case ANY_SIDE:
-                    return x1;
+                 return true;
              case LEFT_SIDE:
-                    return inverted ? x1 : x0;
+                 // Check if sign matches initial lower bound's sign (or if fx is zero).
+                 // Product is positive if signs match, negative if they differ. Zero if fx is zero.
+                 return fx == 0 || (fx > 0 && initialF0 > 0) || (fx < 0 && initialF0 < 0);
              case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
+                 // Check if sign matches initial upper bound's sign (or if fx is zero).
+                 return fx == 0 || (fx > 0 && initialF1 > 0) || (fx < 0 && initialF1 < 0);
              case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                 return fx <= 0;
              case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                 return fx >= 0;
              default:
+                 // Should not happen.
                  throw new MathInternalError();
          }
     }
-        }
-    }
