diff --git a/tmp/c956d3b3-a52d-4d23-8945-e1b6e47453d7_buggy.java b/tmp/4ff287d4-7621-49b8-81a5-7732b48676bf_fixed.java
index 1b36a4f..e6f77b7 100644
--- a/tmp/c956d3b3-a52d-4d23-8945-e1b6e47453d7_buggy.java
+++ b/tmp/4ff287d4-7621-49b8-81a5-7732b48676bf_fixed.java
@@ -1,58 +1,83 @@
+import org.apache.commons.lang.StringUtils; // Added import for clarity
+
+// ... other code ...
+
     /**
      * Abbreviates a string nicely.
      *
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      *
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
+     * @param lower       the lower limit. Must be non-negative.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
+        // Adjust lower bound: ensure it's >= 0 and <= str.length()
+        // (The comment mentioned capping lower > length, but code was missing it)
+        if (lower < 0) {
+            lower = 0;
+        }
+        if (lower > str.length()) {
+            lower = str.length();
+        }
+
+        // Adjust upper bound
         // if the upper value is -1 (i.e. no limit) or is greater
         // than the length of the string, set to the length of the string
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
         // if upper is less than lower, raise it to lower
+        // This adjustment must happen *after* lower is capped at str.length()
+        // to prevent upper from exceeding str.length() via lower.
         if (upper < lower) {
             upper = lower;
         }
 
         StringBuffer result = new StringBuffer();
+        // Note: StringUtils.indexOf is assumed to handle starting index >= length by returning -1
         int index = StringUtils.indexOf(str, " ", lower);
+
         if (index == -1) {
+            // No space found at or after lower limit.
+            // Abbreviate to upper limit. upper is guaranteed to be <= str.length()
             result.append(str.substring(0, upper));
             // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+            // Abbreviation occurs if upper limit is less than original string length.
+            if (upper < str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
         } else if (index > upper) {
+            // Space found, but it is beyond the upper limit.
+            // Abbreviate to upper limit instead. upper is guaranteed to be <= str.length()
             result.append(str.substring(0, upper));
+            // Abbreviation occurred (since upper < index <= str.length), so append.
             result.append(StringUtils.defaultString(appendToEnd));
-        } else {
+        } else { // index != -1 && index <= upper
+            // Space found within limits (>= lower implicitly, and <= upper explicitly).
+            // Abbreviate at the space index. index is guaranteed to be <= str.length()
             result.append(str.substring(0, index));
+            // Abbreviation occurred, so append.
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
\ No newline at end of file
