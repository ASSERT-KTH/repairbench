diff --git a/tmp/7169fd98-14a5-4161-9962-6e9acde70eeb_buggy.java b/tmp/41af04c1-bc1b-48d7-84ae-c6d2ff09dd25_fixed.java
index 1b36a4f..890e789 100644
--- a/tmp/7169fd98-14a5-4161-9962-6e9acde70eeb_buggy.java
+++ b/tmp/41af04c1-bc1b-48d7-84ae-c6d2ff09dd25_fixed.java
@@ -1,58 +1,89 @@
+import org.apache.commons.lang.StringUtils;
+
+// NOTE: The surrounding class WordUtils is assumed to exist.
+// Only the fixed abbreviate method is provided below.
+
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
+     * @param lower       the lower limit. Must be non-negative.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
+        // If lower is negative, treat as 0
+        if (lower < 0) {
+            lower = 0;
+        }
+        
+        // If lower is greater than or equal to the length of the string,
+        // return the original string because abbreviation isn't possible
+        // starting from outside the string.
+        if (lower >= str.length()) {
+             return str;
+        }
+
         // if the upper value is -1 (i.e. no limit) or is greater
         // than the length of the string, set to the length of the string
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
+        
         // if upper is less than lower, raise it to lower
         if (upper < lower) {
+            // Since lower is guaranteed to be < str.length() here,
+            // setting upper = lower will result in upper < str.length().
             upper = lower;
         }
 
         StringBuffer result = new StringBuffer();
+        // Find the first space in the string starting from the lower boundary.
         int index = StringUtils.indexOf(str, " ", lower);
+
         if (index == -1) {
+            // no space found after the lower limit
+            // take the substring up to the upper limit
+            // Note: upper is guaranteed to be <= str.length()
             result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+            // only if abbreviation has occured (i.e. upper < str.length())
+            // do we append the appendToEnd value
+            if (upper < str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
         } else if (index > upper) {
+            // space found but is beyond the upper limit
+            // take the substring up to the upper limit
             result.append(str.substring(0, upper));
+            // Abbreviation occurred (forced by upper limit)
             result.append(StringUtils.defaultString(appendToEnd));
         } else {
+            // space found within the lower/upper limits
+            // take the substring up to the space
+            // Note: index is guaranteed to be <= upper <= str.length()
             result.append(str.substring(0, index));
+            // Abbreviation occurred (truncated at space)
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
\ No newline at end of file
