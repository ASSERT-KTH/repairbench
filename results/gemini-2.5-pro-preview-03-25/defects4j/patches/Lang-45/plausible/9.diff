diff --git a/tmp/7d871ba3-ac18-4910-9964-e8252747228e_buggy.java b/tmp/83fb695a-d219-4aa1-9902-55771b6d3017_fixed.java
index 1b36a4f..96199ec 100644
--- a/tmp/7d871ba3-ac18-4910-9964-e8252747228e_buggy.java
+++ b/tmp/83fb695a-d219-4aa1-9902-55771b6d3017_fixed.java
@@ -1,58 +1,89 @@
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
+     * @param lower       the lower limit; negative value is treated as 0.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // Adjust lower bound
+        if (lower < 0) {
+            lower = 0;
+        }
+        // If lower is greater than length, we logically can't find a space >= lower.
+        // Clamp lower to length for consistency in subsequent logic and safety.
+        if (lower > str.length()) {
+            lower = str.length();
+        }
+
+        // Adjust upper bound based on length and -1
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
-        // if upper is less than lower, raise it to lower
+
+        // Adjust upper bound based on lower bound ("if upper is less than lower, raise it to lower")
         if (upper < lower) {
+            // After this, it might be possible that upper > str.length() if lower was initially > str.length().
+            // However, lower has already been clamped to str.length().
+            // So, this correctly sets upper = lower, and we know lower <= str.length().
             upper = lower;
         }
+        // At this point: 0 <= lower <= upper <= str.length() is guaranteed.
 
         StringBuffer result = new StringBuffer();
+        
+        // Now perform the abbreviation logic based on adjusted bounds
+        if (lower >= str.length()) { 
+            // If lower is at or beyond the end, no space can be found >= lower.
+            // The result is determined entirely by 'upper'. Append substring up to 'upper'.
+            // Since 'upper' is clamped to str.length(), this is safe.
+            // Also handles the case lower == upper == str.length(), returning the full string.
+            result.append(str.substring(0, upper));
+            // Append suffix only if 'upper' caused truncation (i.e., upper < full string length).
+            if (upper < str.length()) {
+                 result.append(StringUtils.defaultString(appendToEnd));
+            }
+        } else {
+             // Search for the first space starting from 'lower'.
+             // Since lower < str.length(), the search starts within the string bounds.
              int index = StringUtils.indexOf(str, " ", lower);
-        if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
-            }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
-        } else {
+
+             if (index != -1 && index <= upper) {
+                 // Found a space within the [lower, upper] bounds. Abbreviate at the space.
                  result.append(str.substring(0, index));
+                 // Append the suffix because abbreviation occurred at the space.
                  result.append(StringUtils.defaultString(appendToEnd));
+             } else {
+                 // Either no space was found (index == -1), or the first space is beyond 'upper'.
+                 // In both cases, abbreviate forcibly at 'upper'.
+                 result.append(str.substring(0, upper));
+                 // Append suffix only if 'upper' caused truncation.
+                 if (upper < str.length()) { 
+                     result.append(StringUtils.defaultString(appendToEnd));
+                 }
+             }
         }
+        
         return result.toString();
     }
\ No newline at end of file
