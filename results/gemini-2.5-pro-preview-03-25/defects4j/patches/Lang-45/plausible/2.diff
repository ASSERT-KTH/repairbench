diff --git a/tmp/84a9f1d3-7d81-4945-8877-57f760dc3efe_buggy.java b/tmp/e3fa40fa-9019-4595-959c-424edf84102d_fixed.java
index 1b36a4f..888a623 100644
--- a/tmp/84a9f1d3-7d81-4945-8877-57f760dc3efe_buggy.java
+++ b/tmp/e3fa40fa-9019-4595-959c-424edf84102d_fixed.java
@@ -1,58 +1,79 @@
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
-     * @param upper       the upper limit; specify -1 if no limit is desired.
+     * @param lower       the lower limit (minimum index to start abbreviation from, inclusive). Negative values treated as 0.
+     * @param upper       the upper limit (maximum index to abbreviate to, exclusive); specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
-            return StringUtils.EMPTY;
+            return StringUtils.EMPTY; // Assuming StringUtils.EMPTY is defined elsewhere as ""
+        }
+
+        // ensure lower is not negative.
+        if (lower < 0) {
+            lower = 0;
         }
 
         // if the lower value is greater than the length of the string,
-        // set to the length of the string
+        // set to the length of the string - prevents potential IndexOutOfBoundsException
+        // in StringUtils.indexOf(str, " ", lower)
+        if (lower > str.length()) {
+            lower = str.length();
+        }
+        
         // if the upper value is -1 (i.e. no limit) or is greater
         // than the length of the string, set to the length of the string
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
         // if upper is less than lower, raise it to lower
+        // This ensures that substring(0, upper) is valid after adjustments.
         if (upper < lower) {
             upper = lower;
         }
 
         StringBuffer result = new StringBuffer();
-        int index = StringUtils.indexOf(str, " ", lower);
+        // Find the first space index at or after 'lower'.
+        int index = StringUtils.indexOf(str, " ", lower); // Assuming StringUtils.indexOf handles start >= length by returning -1
+
         if (index == -1) {
+            // No space found at or after lower limit.
+            // Abbreviate to upper limit.
             result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
+            // Append the suffix if abbreviation happened (i.e. upper limit is less than original length).
             if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
+                result.append(StringUtils.defaultString(appendToEnd)); // Assuming StringUtils.defaultString handles null
             }
         } else if (index > upper) {
+            // A space was found, but it's beyond the upper limit.
+            // Abbreviate to the upper limit.
             result.append(str.substring(0, upper));
+            // Append the suffix because we shortened based on upper limit.
             result.append(StringUtils.defaultString(appendToEnd));
         } else {
+            // A space was found within the range [lower, upper].
+            // Abbreviate at the space.
             result.append(str.substring(0, index));
+            // Append the suffix because we shortened based on the space found.
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
\ No newline at end of file
