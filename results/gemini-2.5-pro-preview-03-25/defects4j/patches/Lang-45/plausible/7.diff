diff --git a/tmp/ae938304-9a4f-4812-aff7-1f5be7cb29ec_buggy.java b/tmp/6125afa7-40b0-49a4-a2ae-c73876544501_fixed.java
index 1b36a4f..6ca8083 100644
--- a/tmp/ae938304-9a4f-4812-aff7-1f5be7cb29ec_buggy.java
+++ b/tmp/6125afa7-40b0-49a4-a2ae-c73876544501_fixed.java
@@ -1,58 +1,86 @@
     /**
      * Abbreviates a string nicely.
      *
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      *
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
+     * @param lower       the lower limit; negative values are treated as 0.
+     *                    If the lower limit is greater than the length of the string,
+     *                    the string is returned unchanged.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
-     *                    adjusted to be the same as the lower limit.
+     *                    adjusted to be the same as the lower limit. The upper limit is
+     *                    constrained to be at most the length of the string.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // Adjust lower bound
+        if (lower < 0) {
+            lower = 0;
+        }
+        // If lower bound is beyond the string length, return original string
+        // as we cannot find a space starting from there or abbreviate reasonably.
+        if (lower > str.length()) {
+             return str;
+        }
+
+        // Adjust upper bound
         if (upper == -1 || upper > str.length()) {
-            upper = str.length();
+            upper = str.length(); // Clamp upper to string length
         }
-        // if upper is less than lower, raise it to lower
+        // If upper is less than lower, raise it to lower
         if (upper < lower) {
+            // This adjustment happens after upper is clamped to str.length()
+            // and after lower is checked against str.length().
+            // Therefore, lower <= str.length(), and this assignment ensures
+            // upper <= str.length() as well.
             upper = lower;
         }
 
         StringBuffer result = new StringBuffer();
+        // Find first space starting from the lower limit
         int index = StringUtils.indexOf(str, " ", lower);
+        int cutPoint;
+
         if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
-            }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
+            // No space found at or after lower, force cut at upper limit
+            cutPoint = upper;
         } else {
-            result.append(str.substring(0, index));
+            // Space found at 'index' (where index >= lower)
+            // If the found space is beyond the upper limit, force cut at upper limit
+            if (index > upper) {
+                cutPoint = upper;
+            } else {
+                // Otherwise, the space is within bounds (lower <= index <= upper), cut at the space
+                cutPoint = index;
+            }
+        }
+
+        // Perform the cut using the determined cut point.
+        // The bounds checks above ensure 0 <= cutPoint <= str.length()
+        result.append(str.substring(0, cutPoint));
+
+        // Append the suffix ONLY if the string was actually abbreviated
+        // (i.e., the cutPoint is before the end of the original string)
+        if (cutPoint < str.length()) {
             result.append(StringUtils.defaultString(appendToEnd));
         }
+
         return result.toString();
     }
\ No newline at end of file
