diff --git a/tmp/775cc35e-42bc-46f7-9deb-a4ea64236101_buggy.java b/tmp/98291210-ca3e-4dc0-a0f2-60a2f8ce0d10_fixed.java
index 1bd0d7e..08b2010 100644
--- a/tmp/775cc35e-42bc-46f7-9deb-a4ea64236101_buggy.java
+++ b/tmp/98291210-ca3e-4dc0-a0f2-60a2f8ce0d10_fixed.java
@@ -1,31 +1,81 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+// Assume getPrefix(Node) is defined elsewhere in the original class or context
+// and correctly returns the prefix of the node (e.g., "b" for "b:foo") or null if no prefix.
+
 /**
-     * Get the ns uri of the specified node.
+ * Get the ns uri of the specified node. Correctly handles default namespaces
+ * and resolves namespaces by searching ancestor nodes if necessary.
+ * Maps the empty string namespace URI (from xmlns="") to null, as per
+ * XML Namespace specification requirements for "no namespace".
+ *
  * @param node Node to check
-     * @return String ns uri
+ * @return String ns uri, or null if the node has no namespace.
  */
 public static String getNamespaceURI(Node node) {
-        if (node instanceof Document) {
+    if (node == null) {
+         return null;
+    }
+
+    // If node is Document, check its document element instead
+    if (node.getNodeType() == Node.DOCUMENT_NODE) {
         node = ((Document) node).getDocumentElement();
+        // If document has no root element, it has no namespace context
+        if (node == null) {
+            return null;
         }
+    }
+
+    String uri = null;
 
+    // Handle Elements: Try direct URI retrieval first. If null, perform ancestor lookup.
+    if (node.getNodeType() == Node.ELEMENT_NODE) {
         Element element = (Element) node;
+        // Use the standard DOM Level 2/3 method to get the namespace URI.
+        // This might be null if the DOM implementation is older, if the node
+        // was created using DOM Level 1 methods, or if it's in no namespace.
+        uri = element.getNamespaceURI();
 
-        String uri = element.getNamespaceURI();
+        // If the direct method returns null, we need to manually look up
+        // the namespace declaration (xmlns or xmlns:prefix) in the hierarchy.
         if (uri == null) {
+            // Assuming getPrefix(Node) helper exists from the original context.
             String prefix = getPrefix(node);
+            // Determine the attribute name to look for (xmlns for default, xmlns:prefix otherwise)
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
-            Node aNode = node;
-            while (aNode != null) {
-                if (aNode.getNodeType() == Node.ELEMENT_NODE) {
-                    Attr attr = ((Element) aNode).getAttributeNode(qname);
+            // Search the element itself and its ancestors for the declaration
+            Node ancestor = node;
+            while (ancestor != null && ancestor.getNodeType() == Node.ELEMENT_NODE) {
+                Element ancestorElement = (Element) ancestor;
+                Attr attr = ancestorElement.getAttributeNode(qname);
                 if (attr != null) {
-                        return attr.getValue();
+                    // Found the relevant namespace declaration attribute.
+                    uri = attr.getValue();
+                    // Stop searching, the closest declaration takes precedence.
+                    break;
                 }
+                // Move up to the parent node.
+                ancestor = ancestor.getParentNode();
             }
-                aNode = aNode.getParentNode();
         }
+    } else {
+        // For non-element nodes (e.g., Attributes, Text, Comments, PIs),
+        // rely on the standard Node.getNamespaceURI().
+        // For attributes (Attr nodes), this returns the namespace URI based on the attribute's prefix.
+        // For most other node types, this correctly returns null.
+        uri = node.getNamespaceURI();
+    }
+
+    // Final correction based on XML Namespaces spec:
+    // An empty string URI, typically resulting from xmlns="", signifies "no namespace".
+    // The standard representation for "no namespace" in APIs like DOM and JAXP is null.
+    if ("".equals(uri)) {
         return null;
-        }
+    } else {
         return uri;
     }
+}
\ No newline at end of file
