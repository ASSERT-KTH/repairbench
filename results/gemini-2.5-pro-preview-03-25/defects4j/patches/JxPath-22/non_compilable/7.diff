diff --git a/tmp/b03efb49-9b3e-4893-ab32-8d6f6855ba2f_buggy.java b/tmp/aa487e91-f1a1-47c4-8049-c68bff15d696_fixed.java
index 1bd0d7e..82e4919 100644
--- a/tmp/b03efb49-9b3e-4893-ab32-8d6f6855ba2f_buggy.java
+++ b/tmp/aa487e91-f1a1-47c4-8049-c68bff15d696_fixed.java
@@ -1,31 +1,80 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+// Note: The org.apache.commons.jxpath.ri.model.dom.DOMNodePointer class
+// contains the relevant getPrefix method, which is assumed to be accessible.
+// import static org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix;
+
+// Placeholder for the getPrefix method if needed for context, assuming similar signature
+// class DOMNodePointer { public static String getPrefix(Node node) { return node.getPrefix(); } }
+// import static DOMNodePointer.getPrefix;
+
+
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
-        if (node instanceof Document) {
-            node = ((Document) node).getDocumentElement();
+        Node targetNode = node;
+        if (targetNode instanceof Document) {
+            // If the node is a Document, use its document element.
+            targetNode = ((Document) targetNode).getDocumentElement();
         }
 
-        Element element = (Element) node;
+        // If the target node is not an Element (e.g., null document element,
+        // or input was not Element/Document), return null as namespace doesn't apply
+        // or cannot be determined in the context of this method's logic.
+        if (!(targetNode instanceof Element)) {
+            return null;
+        }
+
+        Element element = (Element) targetNode;
 
+        // Use the standard DOM Level 2/3 method first. This is generally the most reliable.
         String uri = element.getNamespaceURI();
+
+        // If the standard method returns null, it might be because the DOM implementation
+        // is not fully namespace-aware, or the namespace is defined via an ancestor's
+        // xmlns attribute which getNamespaceURI() might not resolve.
+        // We perform a manual lookup in the ancestor chain as a fallback mechanism.
         if (uri == null) {
-            String prefix = getPrefix(node);
+            // Determine the prefix of the element. This uses the static getPrefix method
+            // assumed to be available in this context (likely from DOMNodePointer).
+            // Pass 'element' instead of the original 'node' for clarity and safety.
+            String prefix = getPrefix(element);
+            // Construct the qualified name of the namespace attribute to search for (e.g., "xmlns" or "xmlns:prefix").
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
-            Node aNode = node;
+            // Search the element and its ancestors for the namespace declaration attribute.
+            Node aNode = element; // Start search from the element itself
             while (aNode != null) {
+                // Only check Element nodes, as namespace attributes reside on elements.
                 if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                     Attr attr = ((Element) aNode).getAttributeNode(qname);
                     if (attr != null) {
-                        return attr.getValue();
+                        // Found the namespace declaration attribute. Get its value (the URI).
+                        uri = attr.getValue();
+                        break; // Stop searching once the closest declaration is found.
                     }
                 }
+                // Move up to the parent node.
                 aNode = aNode.getParentNode();
             }
+            // If the loop completes without finding the attribute, uri remains null.
+        }
+
+        // FIX: The XML Namespaces specification defines that an empty string URI,
+        // typically declared via xmlns="", means the element and its descendants
+        // (unless overridden) belong to *no* namespace. XPath processors often
+        // represent "no namespace" as a null URI when matching nodes.
+        // To ensure consistent behavior and fix matching issues like the one observed
+        // in the test, map an empty string URI result to null.
+        if ("".equals(uri)) {
             return null;
         }
+
+        // Return the determined namespace URI (can be null or a non-empty string).
         return uri;
     }
\ No newline at end of file
