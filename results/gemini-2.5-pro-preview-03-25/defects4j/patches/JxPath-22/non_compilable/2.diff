diff --git a/tmp/57e17a94-d0d9-46ae-bdab-878e0cc93289_buggy.java b/tmp/6c6691e8-68f1-4a45-b84f-5d699a850d06_fixed.java
index 1bd0d7e..c83e7f8 100644
--- a/tmp/57e17a94-d0d9-46ae-bdab-878e0cc93289_buggy.java
+++ b/tmp/6c6691e8-68f1-4a45-b84f-5d699a850d06_fixed.java
@@ -1,31 +1,75 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+// Note: The surrounding class context is assumed to provide the 'getPrefix' helper method.
+// e.g., private static String getPrefix(Node node) { /* implementation */ }
+
     /**
      * Get the ns uri of the specified node.
+     * This method reliably determines the namespace URI for an element
+     * by manually walking up the DOM tree and checking xmlns attributes,
+     * which is more consistent across DOM implementations than relying
+     * solely on {@code node.getNamespaceURI()}, especially for default
+     * namespaces and empty namespace declarations (xmlns="").
+     * For non-element nodes, it returns the result of {@code node.getNamespaceURI()}.
+     *
      * @param node Node to check
-     * @return String ns uri
+     * @return String ns uri, "" for the empty namespace, or null if no namespace applies.
      */
     public static String getNamespaceURI(Node node) {
-        if (node instanceof Document) {
-            node = ((Document) node).getDocumentElement();
+        if (node == null) {
+            return null;
         }
 
+        int type = node.getNodeType();
+
+        if (type == Node.ELEMENT_NODE) {
+            // For elements, perform manual namespace lookup by walking up the tree.
             Element element = (Element) node;
-
-        String uri = element.getNamespaceURI();
-        if (uri == null) {
-            String prefix = getPrefix(node);
+            // Assumes a getPrefix helper exists in the same class or context.
+            // This helper should return the prefix from the element's QName, or null if no prefix.
+            String prefix = getPrefix(element); 
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
-            Node aNode = node;
-            while (aNode != null) {
-                if (aNode.getNodeType() == Node.ELEMENT_NODE) {
-                    Attr attr = ((Element) aNode).getAttributeNode(qname);
+            Node current = element;
+            while (current != null) {
+                // Namespace declarations are only carried by ELEMENT nodes.
+                if (current.getNodeType() == Node.ELEMENT_NODE) {
+                    Element ancestor = (Element) current;
+                    // Check if the namespace declaration attribute (xmlns or xmlns:prefix) exists.
+                    Attr attr = ancestor.getAttributeNode(qname);
                     if (attr != null) {
+                        // Found the namespace declaration attribute.
+                        // The attribute's value is the namespace URI.
+                        // This correctly handles xmlns="someURI" and xmlns="" (empty string URI).
                         return attr.getValue();
                     }
                 }
-                aNode = aNode.getParentNode();
+                // Move up to the parent node to check ancestor declarations.
+                current = current.getParentNode();
             }
+            // If the loop completes, no applicable namespace declaration was found
+            // walking up the tree from the element.
+            // If prefix was not null (e.g., "p:foo"), the prefix is undeclared, so the URI is null.
+            // If prefix was null (e.g., "foo"), there's no default namespace in scope, so the URI is null.
             return null;
         }
-        return uri;
+        else if (type == Node.DOCUMENT_NODE) {
+            // If the node is a Document, delegate to finding the namespace of its document element.
+            // This matches the behavior of the original code.
+            Document doc = (Document) node;
+            Element docElement = doc.getDocumentElement();
+            // Recursively call this method on the document element.
+            // If there's no document element, getNamespaceURI(null) will correctly return null.
+            return getNamespaceURI(docElement);
+        }
+        else {
+            // For other node types (Attr, Text, CDATA, Comment, PI, etc.),
+            // their namespace URI is determined differently (e.g., attribute's namespace
+            // depends on its own prefix). We return the node's own namespace URI property
+            // as defined by the DOM specification.
+            return node.getNamespaceURI();
+        }
     }
\ No newline at end of file
