diff --git a/tmp/3590b610-e277-4047-b292-9f73c8fc835d_buggy.java b/tmp/5885cc12-85f1-4252-a649-a8aeabd931ab_fixed.java
index 1bd0d7e..ea6c7af 100644
--- a/tmp/3590b610-e277-4047-b292-9f73c8fc835d_buggy.java
+++ b/tmp/5885cc12-85f1-4252-a649-a8aeabd931ab_fixed.java
@@ -1,31 +1,85 @@
+import org.w3c.dom.Attr;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
     /**
      * Get the ns uri of the specified node.
+     * Handles cases like xmlns="" correctly by returning null for the namespace URI.
      * @param node Node to check
-     * @return String ns uri
+     * @return String ns uri, or null for no namespace.
      */
     public static String getNamespaceURI(Node node) {
+        // Handle Document node: use the root element
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
+            // If document has no root element, node becomes null.
+            if (node == null) {
+                return null;
             }
+        }
+
+        int type = node.getNodeType();
 
+        // Handle Element nodes
+        if (type == Node.ELEMENT_NODE) {
             Element element = (Element) node;
-
+            // Try the direct DOM method first (handles createElementNS cases)
             String uri = element.getNamespaceURI();
-        if (uri == null) {
-            String prefix = getPrefix(node);
+
+            // If the standard DOM method returns a non-null URI, use it.
+            // DOM Level 3 compliant parsers might return "" for xmlns="",
+            // map this to null as JXPath expects null for the null namespace.
+            if (uri != null) {
+                return "".equals(uri) ? null : uri;
+            }
+
+            // If element.getNamespaceURI() is null, it might be in a default namespace
+            // not reported by getNamespaceURI, or it might truly be in no namespace.
+            // Manually search for relevant xmlns or xmlns:prefix attributes upwards.
+            String prefix = getPrefix(node); // Assumes getPrefix utility method is available
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
             Node aNode = node;
-            while (aNode != null) {
-                if (aNode.getNodeType() == Node.ELEMENT_NODE) {
+            // Walk up the element hierarchy
+            while (aNode != null && aNode.getNodeType() == Node.ELEMENT_NODE) {
                 Attr attr = ((Element) aNode).getAttributeNode(qname);
                 if (attr != null) {
-                        return attr.getValue();
-                    }
+                    String attrValue = attr.getValue();
+                    // Found namespace declaration. Map "" value (xmlns="") to null namespace.
+                    return "".equals(attrValue) ? null : attrValue;
                 }
+                // Move up to the parent element
                 aNode = aNode.getParentNode();
             }
+
+            // No namespace declaration found for this element/prefix in the hierarchy.
+            // Therefore, the element belongs to the null namespace.
             return null;
         }
-        return uri;
+        // Handle Attribute nodes
+        else if (type == Node.ATTRIBUTE_NODE) {
+            Attr attr = (Attr) node;
+            // Use the attribute's namespace URI directly.
+            String uri = attr.getNamespaceURI();
+            // Per DOM specification:
+            // - Unprefixed attributes have null namespace URI.
+            // - Prefixed attributes have the namespace URI bound to the prefix.
+            // - xmlns/xmlns:prefix attributes belong to "http://www.w3.org/2000/xmlns/".
+            // It's unlikely for an attribute's namespace URI to be "", but handle
+            // it consistently by mapping to null.
+            return "".equals(uri) ? null : uri;
         }
+        // Handle other node types (Text, Comment, PI, DocumentType, etc.)
+        else {
+            // These nodes do not have their own namespace URI.
+            // node.getNamespaceURI() typically returns null for these types.
+            return null;
+        }
+    }
+
+    /*
+     * Note: The above code assumes the existence of a static method 'getPrefix(Node node)'
+     * in the same class or context, which returns the prefix of the node (e.g., "b" for "b:foo").
+     * Example signature: private static String getPrefix(Node node)
+     */
\ No newline at end of file
