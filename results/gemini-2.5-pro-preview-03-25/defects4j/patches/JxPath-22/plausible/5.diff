diff --git a/tmp/f30b0721-f9b8-48d1-92eb-81dc51f0ff60_buggy.java b/tmp/bd25326a-91c2-4bef-ad53-69d6d6213b6a_fixed.java
index 1bd0d7e..25f290a 100644
--- a/tmp/f30b0721-f9b8-48d1-92eb-81dc51f0ff60_buggy.java
+++ b/tmp/bd25326a-91c2-4bef-ad53-69d6d6213b6a_fixed.java
@@ -1,31 +1,85 @@
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
+            // If the document has no root element, node might become null.
+            if (node == null) {
+                return null;
             }
+        }
+
+        // Use the standard DOM method first. It should handle most cases correctly,
+        // including attributes.
+        String uri = node.getNamespaceURI();
 
+        // If the standard DOM method returns null for an element, it might mean
+        // it's in the default namespace or no namespace. We need to check ancestor declarations.
+        // According to DOM Level 3, getNamespaceURI should return null for no namespace
+        // (e.g. <foo xmlns=""> or <foo/> in a document with no default ns).
+        // However, some DOM implementations might return null incorrectly when a
+        // default namespace is defined higher up. So, we perform manual lookup
+        // specifically for elements if the standard method returns null.
+        if (uri == null && node.getNodeType() == Node.ELEMENT_NODE) {
             Element element = (Element) node;
-
-        String uri = element.getNamespaceURI();
-        if (uri == null) {
             String prefix = getPrefix(node);
-            String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
+            // If there's no prefix, we're looking for the default namespace (xmlns).
+            if (prefix == null) {
+                Node aNode = node;
+                while (aNode != null) {
+                    if (aNode.getNodeType() == Node.ELEMENT_NODE) {
+                        // Check for xmlns="" declaration specifically first
+                        Attr attr = ((Element) aNode).getAttributeNode("xmlns");
+                        if (attr != null) {
+                            uri = attr.getValue();
+                            // An empty string value means "no namespace".
+                            // We represent "no namespace" as null.
+                            if (uri != null && uri.length() == 0) {
+                                return null;
+                            }
+                            // Found a non-empty default namespace declaration.
+                            return uri;
+                        }
+                    }
+                    // Stop searching at the document root or if no more parents
+                    if (aNode == node.getOwnerDocument()) break;
+                    aNode = aNode.getParentNode();
+                }
+                // No default namespace found in ancestors, so it's truly null.
+                return null;
+            }
+            // If there IS a prefix, getNamespaceURI() should ideally have returned
+            // the correct URI. The manual lookup for prefixed elements below might
+            // be redundant if the DOM impl follows the spec, but could help in
+            // rare cases or with older DOM levels. Let's keep the original logic's
+            // lookup for prefixed elements as a fallback, though it might be less critical.
+            else {
+                 String qname = "xmlns:" + prefix;
                  Node aNode = node;
                  while (aNode != null) {
                      if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                          Attr attr = ((Element) aNode).getAttributeNode(qname);
                          if (attr != null) {
-                        return attr.getValue();
+                             uri = attr.getValue();
+                             break; // Found the URI for the prefix
                          }
                      }
+                     if (aNode == node.getOwnerDocument()) break;
                      aNode = aNode.getParentNode();
                  }
+            }
+        }
+
+        // Final check: Ensure empty string "" is treated as null (no namespace).
+        // This handles cases like xmlns="" found by the DOM's getNamespaceURI or
+        // our manual lookup for prefixed elements.
+        if (uri != null && uri.length() == 0) {
             return null;
         }
+
         return uri;
     }
\ No newline at end of file
