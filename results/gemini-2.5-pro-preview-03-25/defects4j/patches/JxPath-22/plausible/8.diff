diff --git a/tmp/664c6fdc-414e-4ab3-aa59-87992fd4fee8_buggy.java b/tmp/666e4b49-a019-4938-a012-4878e28c59a5_fixed.java
index 1bd0d7e..b7428f9 100644
--- a/tmp/664c6fdc-414e-4ab3-aa59-87992fd4fee8_buggy.java
+++ b/tmp/666e4b49-a019-4938-a012-4878e28c59a5_fixed.java
@@ -1,31 +1,70 @@
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
+            // Handle empty document or document with no root element
+            if (node == null) {
+                return null;
+            }
+        }
+
+        // Namespace URIs are primarily relevant for elements in JXPath context.
+        // Return null for node types that don't have a namespace URI in this way.
+        if (node.getNodeType() != Node.ELEMENT_NODE) {
+            // Note: Attr nodes have namespaceURI in DOM Level 3, but this method's
+            // lookup logic is designed for resolving element namespaces.
+            return null;
         }
 
         Element element = (Element) node;
 
+        // Step 1: Use the standard DOM Level 3 method first.
         String uri = element.getNamespaceURI();
+
+        // Step 2: If the standard method returns null, it might indicate the null
+        // namespace, or it could be due to an older/incomplete DOM implementation.
+        // Attempt a manual lookup for the namespace declaration attribute (xmlns:prefix or xmlns).
         if (uri == null) {
+            // We need the prefix of the element to find the corresponding xmlns declaration.
+            // Assuming getPrefix helper handles potential nuances of Node.getPrefix().
             String prefix = getPrefix(node);
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
-            Node aNode = node;
+            Node aNode = node; // Start search from the element itself
             while (aNode != null) {
+                // Look for the namespace declaration attribute only on ELEMENT nodes.
                 if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                     Attr attr = ((Element) aNode).getAttributeNode(qname);
                     if (attr != null) {
-                        return attr.getValue();
+                        // Found the relevant xmlns attribute. Its value is the URI.
+                        uri = attr.getValue();
+                        // Declaration found, use the innermost one.
+                        break;
                     }
                 }
+                // Move up to the parent node to check for inherited namespaces.
                 aNode = aNode.getParentNode();
             }
+        }
+
+        // Step 3: Normalize the result. In DOM, an empty string "" URI typically
+        // signifies the null namespace (e.g., resulting from xmlns="").
+        // JXPath's name tests for unqualified names operate in the null namespace,
+        // which it represents internally with null. Therefore, map "" to null.
+        if (uri != null && uri.length() == 0) {
             return null;
         }
+
+        // Return the resolved namespace URI. This can be null if the element
+        // genuinely belongs to the null namespace and no xmlns="" was involved,
+        // or if a prefix was used but no corresponding xmlns:prefix declaration was found.
         return uri;
     }
+
+    // Assuming getPrefix is available in the same class or context.
+    // It should return the prefix of the node, or null if there is none.
+    // private static String getPrefix(Node node) { return node.getPrefix(); }
\ No newline at end of file
