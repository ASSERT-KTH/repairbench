diff --git a/tmp/85abb7c0-bbda-4c23-88c8-506efddba644_buggy.java b/tmp/f849b274-f11a-4927-82e2-a37b1e6d9b08_fixed.java
index 1bd0d7e..9d25207 100644
--- a/tmp/85abb7c0-bbda-4c23-88c8-506efddba644_buggy.java
+++ b/tmp/f849b274-f11a-4927-82e2-a37b1e6d9b08_fixed.java
@@ -1,31 +1,78 @@
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
-     * @return String ns uri
+     * @return String ns uri, or null if the node has no namespace.
      */
     public static String getNamespaceURI(Node node) {
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
+            // Handle case where Document has no root element
+            if (node == null) {
+                return null;
+            }
+        }
+
+        // This method is primarily designed for Elements.
+        // Original code would throw ClassCastException if node wasn't Element after Document check.
+        // We maintain this assumption for minimal change.
+        if (!(node instanceof Element)) {
+            // If not an element, it doesn't have a namespace URI in the XML sense,
+            // except for prefixed attributes, which require different handling.
+            // Returning null seems appropriate for non-elements in this context.
+            // However, to strictly match original behavior's failure mode on bad input:
+             Element elementCheck = (Element) node; // This line potentially throws ClassCastException
+            // If the code reaches here, it means node was an Element, but the check failed? Unlikely.
+            // The primary purpose of the original cast was likely just type conversion.
+            // Safest change respecting original logic's implicit assumption: proceed with cast.
         }
 
         Element element = (Element) node;
 
+        // Try the standard DOM Level 3 method first.
         String uri = element.getNamespaceURI();
+
+        // If the standard method returns null, attempt manual lookup.
+        // This handles cases where DOM might not resolve namespace correctly (e.g., not namespace-aware)
+        // or provides robustness for specific cases like default namespace inheritance.
         if (uri == null) {
-            String prefix = getPrefix(node);
+            // Determine the prefix (null for default namespace).
+            // Assumes getPrefix is available and works correctly for Elements.
+            String prefix = getPrefix(node); // Use the node itself (which is an Element).
+            // Determine the attribute name to look for (xmlns or xmlns:prefix).
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
-            Node aNode = node;
+            // Search the element and its ancestors for the namespace declaration.
+            Node aNode = element; // Start search from the element itself.
             while (aNode != null) {
+                // Only consider Element nodes for namespace declarations.
                 if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                     Attr attr = ((Element) aNode).getAttributeNode(qname);
                     if (attr != null) {
-                        return attr.getValue();
+                        // Declaration found, get its value.
+                        String value = attr.getValue();
+                        // FIX: Check for the xmlns="" case. If we were looking for the
+                        // default namespace (prefix is null) and the attribute value
+                        // is an empty string, it signifies *no* namespace. Return null.
+                        if (prefix == null && value.length() == 0) {
+                            return null; // Explicitly in no namespace
                         }
+                        // Otherwise, return the found namespace URI.
+                        return value;
                     }
+                }
+                // Move up to the parent node.
                 aNode = aNode.getParentNode();
             }
+            // No namespace declaration found in the hierarchy. Element is in no namespace.
             return null;
         }
+        // If the standard method returned a non-null URI, check if it's an empty string.
+        // According to Namespaces in XML 1.0, an empty URI is not strictly a namespace name.
+        // JXPath likely expects null for "no namespace". Normalize "" returned by DOM to null.
+        else if (uri.length() == 0) {
+            return null;
+        }
+
+        // Standard method returned a valid, non-empty URI. Return it.
         return uri;
     }
\ No newline at end of file
