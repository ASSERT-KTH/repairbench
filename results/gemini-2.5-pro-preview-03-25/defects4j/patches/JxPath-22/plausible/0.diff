diff --git a/tmp/8dc0ab70-4a99-4335-abbd-8233ea095da1_buggy.java b/tmp/a9a33528-8156-4c79-909e-477d6799a40f_fixed.java
index 1bd0d7e..980c6f0 100644
--- a/tmp/8dc0ab70-4a99-4335-abbd-8233ea095da1_buggy.java
+++ b/tmp/a9a33528-8156-4c79-909e-477d6799a40f_fixed.java
@@ -1,31 +1,69 @@
     /**
      * Get the ns uri of the specified node.
      * @param node Node to check
      * @return String ns uri
      */
     public static String getNamespaceURI(Node node) {
         if (node instanceof Document) {
             node = ((Document) node).getDocumentElement();
+            // Handle case where document might be empty
+            if (node == null) {
+                return null;
+            }
+        }
+
+        // Ensure node is an element before proceeding. Namespace URIs primarily apply to elements.
+        // Other node types (Text, Comment, PI) don't have namespace URIs in the same sense.
+        // Attributes have namespace URIs, but their lookup is different and typically handled
+        // by attribute-specific methods. Returning null for non-elements is safe here.
+        if (node.getNodeType() != Node.ELEMENT_NODE) {
+            return null;
         }
 
         Element element = (Element) node;
 
+        // Get the namespace URI assigned to the element when it was created (DOM Level 2+).
+        // This might be null for DOM Level 1 nodes or if created with a null URI.
         String uri = element.getNamespaceURI();
+
+        // If the creation-time URI is null, we need to find the effective namespace
+        // by looking at xmlns attributes in the element's scope (ancestor-or-self).
         if (uri == null) {
-            String prefix = getPrefix(node);
+            String prefix = getPrefix(node); // Determine the element's prefix (null if none)
+            // Determine the xmlns attribute name to search for based on the prefix
             String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
 
-            Node aNode = node;
+            Node aNode = node; // Start search from the element itself upwards
             while (aNode != null) {
+                // Only Elements can declare namespaces
                 if (aNode.getNodeType() == Node.ELEMENT_NODE) {
+                    // Check if the current element declares the namespace
                     Attr attr = ((Element) aNode).getAttributeNode(qname);
                     if (attr != null) {
-                        return attr.getValue();
+                        // Found the relevant xmlns declaration
+                        String value = attr.getValue();
+                        // FIX: Handle xmlns="" for the default namespace.
+                        // An empty value for the 'xmlns' attribute means the default namespace
+                        // is undeclared (elements without prefixes are in 'no namespace').
+                        // DOM Level 3's lookupNamespaceURI(null) returns null in this case.
+                        // We mimic that behavior by returning null instead of "".
+                        if (prefix == null && value.length() == 0) {
+                            return null;
                         }
+                        // Return the declared namespace URI
+                        return value;
                     }
+                }
+                // Move up to the parent node
                 aNode = aNode.getParentNode();
             }
+            // If the loop completes, no declaration was found for the prefix (or default).
+            // This implies the prefix is unbound or it's an unprefixed element in 'no namespace'.
+            // In either scenario, the effective namespace URI is null.
             return null;
         }
+
+        // If element.getNamespaceURI() returned a non-null value, return it.
+        // This preserves the original behavior for DOM Level 2+ nodes created with an explicit namespace URI.
         return uri;
     }
\ No newline at end of file
