diff --git a/tmp/17de465a-6a25-4635-8f25-db227f82ee74_buggy.java b/tmp/bf3ecbf3-e470-41cc-8163-bd4abd5b8630_fixed.java
index 5481b94..9557b0a 100644
--- a/tmp/17de465a-6a25-4635-8f25-db227f82ee74_buggy.java
+++ b/tmp/bf3ecbf3-e470-41cc-8163-bd4abd5b8630_fixed.java
@@ -1,49 +1,66 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
 
         mockingProgress.validateState();
 
         //if verificationMode is not null then someone is doing verify()
         if (verificationMode != null) {
             // We need to check if verification was started on the correct mock
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+
+            // If we are verifying, we need to check if the invocation applies to the mock we are verifying
+            MockAwareVerificationMode mockAwareMode = null;
+            boolean isMockAware = verificationMode instanceof MockAwareVerificationMode;
+            if (isMockAware) {
+                 mockAwareMode = (MockAwareVerificationMode) verificationMode;
+            }
+
+            // Check if the verification mode applies to the current invocation's mock
+            if (!isMockAware || mockAwareMode.getMock() == invocation.getMock()) {
+                // It's the mock we want to verify: verify the invocation
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
                 verificationMode.verify(data);
+                // Verification consumes the invocation, return null
                 return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            } else {
+                // It's an invocation on a different mock during verification.
+                // This happens in scenarios like verify(mock1).doSomething(mock2.getId());
+                // The invocation on mock2 comes through here. We need to handle it normally,
+                // but we must first restore the verification state for mock1.
+                mockingProgress.reportVerificationMode(verificationMode);
+                // Let the execution fall through to the regular invocation handling below.
             }
         }
 
+        // Handle regular invocation (i.e., not verification) OR invocation on a different mock during verification
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
\ No newline at end of file
