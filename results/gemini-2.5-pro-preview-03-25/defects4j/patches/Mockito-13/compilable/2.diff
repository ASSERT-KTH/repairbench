diff --git a/tmp/9762200a-b218-48aa-9213-a20608c1d4f0_buggy.java b/tmp/6c9c6420-2d2f-46b6-997d-a1b4dd4082f9_fixed.java
index 5481b94..dea7348 100644
--- a/tmp/9762200a-b218-48aa-9213-a20608c1d4f0_buggy.java
+++ b/tmp/6c9c6420-2d2f-46b6-997d-a1b4dd4082f9_fixed.java
@@ -1,49 +1,70 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
 
         mockingProgress.validateState();
 
         //if verificationMode is not null then someone is doing verify()
         if (verificationMode != null) {
             //We need to check if verification was started on the correct mock
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+            boolean mockIsVerified = verificationMode instanceof MockAwareVerificationMode &&
+                                     ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock();
+
+            if (mockIsVerified) {
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
                 verificationMode.verify(data);
                 return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            } else {
+                // Invocation on a different mock detected during verification.
+                // Important: This invocation must be handled normally, answering precepts,
+                //            but without interfering with the ongoing verification process state.
+                //            Particularly, we must not report this invocation as potential stubbing.
+                // See VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+
+                // Handle invocation by finding the answer, without reporting ongoing stubbing
+                StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
+                if (stubbedInvocation != null) {
+                    stubbedInvocation.captureArgumentsFrom(invocation);
+                    return stubbedInvocation.answer(invocation);
+                } else {
+                    // Use default answer, no state changes related to stubbing/verification
+                    return mockSettings.getDefaultAnswer().answer(invocation);
                 }
+                // End of handling invocation on different mock during verification.
+                // Do not fall through to the normal stubbing logic below.
             }
+        }
+
+        // --- Normal invocation flow (not verification mode) ---
 
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
\ No newline at end of file
