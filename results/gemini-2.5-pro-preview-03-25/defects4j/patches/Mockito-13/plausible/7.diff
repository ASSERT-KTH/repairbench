diff --git a/tmp/d7bb8b69-fe52-4d3b-9fa9-ed80e4f70980_buggy.java b/tmp/5139361c-0854-462c-9c21-a05402ba946f_fixed.java
index 5481b94..83fe1d9 100644
--- a/tmp/d7bb8b69-fe52-4d3b-9fa9-ed80e4f70980_buggy.java
+++ b/tmp/5139361c-0854-462c-9c21-a05402ba946f_fixed.java
@@ -1,49 +1,61 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
 
         mockingProgress.validateState();
 
         //if verificationMode is not null then someone is doing verify()
         if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+            // Check if the verification mode is for THIS mock
+            Object mockBeingVerified = null;
+            if (verificationMode instanceof MockAwareVerificationMode) {
+                 mockBeingVerified = ((MockAwareVerificationMode) verificationMode).getMock();
+            }
+
+            if (mockBeingVerified == invocation.getMock()) {
+                 // Verification is for this mock. Verify it.
                  VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
                  verificationMode.verify(data);
-                return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+                 return null; // Verification handled, return
+            } else {
+                 // Verification is for a different mock.
+                 // This invocation is happening *during* verification of another mock (e.g., mock.foo() inside verify(mockTwo).bar(mock.foo()))
+                 // We need to put the verification mode back so the correct mock handler can process it later.
+                 mockingProgress.verificationStarted(verificationMode); // Put the mode back
+                 // Let this invocation proceed as a normal call (stubbing/default answer) by falling through.
             }
         }
 
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
-            return stubbedInvocation.answer(invocation);
+            Object result = stubbedInvocation.answer(invocation);
+            // Reset potential stubbing info after answering (needed for spies/partial mocks)
+            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
+            return result;
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
\ No newline at end of file
