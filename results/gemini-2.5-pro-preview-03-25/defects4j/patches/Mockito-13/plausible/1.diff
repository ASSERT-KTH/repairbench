diff --git a/tmp/3acc53a1-20c6-410e-b663-356a1a6e728c_buggy.java b/tmp/cf311ce9-5a17-45f1-9a21-6ca90e3e558c_fixed.java
index 5481b94..22adc8f 100644
--- a/tmp/3acc53a1-20c6-410e-b663-356a1a6e728c_buggy.java
+++ b/tmp/cf311ce9-5a17-45f1-9a21-6ca90e3e558c_fixed.java
@@ -1,49 +1,78 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
 
         mockingProgress.validateState();
 
         //if verificationMode is not null then someone is doing verify()
         if (verificationMode != null) {
+            // If verification is ongoing, decide if this invocation is the target.
+
             // We need to check if verification was started on the correct mock
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+            // Explanation:
+            //   verify(mockTwo).doStuff(mockOne.doOtherStuff());
+            //   When 'mockOne.doOtherStuff()' is evaluated, it invokes the handler on mockOne. But verification is intended for mockTwo.
+            //   So we need to ignore this invocation from verification criteria (otherwise mockOne might be verified).
+            //   We need to differentiate between invocations intended for verification and invocations related evaluation of arguments.
+            //   Hence, we should check the instance of the mock.
+            if (verificationMode instanceof MockAwareVerificationMode) {
+                MockAwareVerificationMode mockAwareVerificationMode = (MockAwareVerificationMode) verificationMode;
+                // Check if the verified mock is the same as the mock reacting to this invocation.
+                if (mockAwareVerificationMode.getMock() == invocation.getMock()) {
+                    // Verification is for the current mock. Proceed with verification.
                     VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
                     verificationMode.verify(data);
-                return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+                    return null; // Verification finished, no need to check stubs.
+                } else {
+                    // Invocation happened on a different mock than the one being verified.
+                    // This means the invocation is likely part of argument evaluation for the verify() call.
+                    // We must 'undecorate' the verification mode and continue, allowing the invocation
+                    // on the other mock to proceed (e.g., return a stubbed value).
+                    mockingProgress.verificationStarted(verificationMode); // Put the verification mode back
+                    // Continue below to handle the invocation (find stubbed answer / call real method).
+                }
+            } else {
+                // Not a MockAware mode (e.g., standard times(1), never()).
+                // Perform verification directly. This assumes Mockito's internal state correctly tracks the target mock for verification.
+                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
+                verificationMode.verify(data);
+                return null; // Verification handled.
             }
         }
 
+        // If we are here, it means:
+        // - No verification was in progress (verificationMode == null)
+        // - OR verification was in progress, but it was MockAware for a different mock (and mode was restored).
+        // Now, handle potential stubbing reporting and finding/executing answers.
+
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
\ No newline at end of file
