diff --git a/tmp/ea0e1661-235c-4f7c-98f4-f897aee08510_buggy.java b/tmp/2e4f4493-c67b-48a2-883c-6df53b27761d_fixed.java
index 5481b94..aee9cdd 100644
--- a/tmp/ea0e1661-235c-4f7c-98f4-f897aee08510_buggy.java
+++ b/tmp/2e4f4493-c67b-48a2-883c-6df53b27761d_fixed.java
@@ -1,49 +1,75 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
 
         mockingProgress.validateState();
 
         //if verificationMode is not null then someone is doing verify()
         if (verificationMode != null) {
             //We need to check if verification was started on the correct mock
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+            // Example: verify(mockTwo).simpleMethod(mockOne.otherMethod());
+            // In the above example, when 'mockOne.otherMethod()' is evaluated, the invocation
+            // occurs on 'mockOne' but verification is happening on 'mockTwo'
+            if (verificationMode instanceof MockAwareVerificationMode) {
+                MockAwareVerificationMode mockAwareMode = (MockAwareVerificationMode) verificationMode;
+                // Check if the verification is for the mock that is currently invoked
+                if (mockAwareMode.getMock() == invocation.getMock()) {
+                    // Verification is for the current mock, proceed with verification
                     VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
                     verificationMode.verify(data);
-                return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+                    return null; // Verification handled, return null
+                } else {
+                    // Invocation is on a different mock than the one being verified.
+                    // This happens when an argument to the verified method is itself a mock invocation.
+                    // We need to put the verification mode back so that the verification framework
+                    // can capture the invocation on the correct mock later.
+                    mockingProgress.verificationStarted(verificationMode);
+                    // Let the invocation proceed normally to retrieve the value needed for verification args.
+                    // Fall through to the stubbing/playback logic below.
+                }
+            } else {
+                 // Not a MockAwareVerificationMode, assume it applies to the current invocation.
+                 // This case might be relevant for simpler verification modes or custom ones.
+                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
+                 verificationMode.verify(data);
+                 return null; // Verification handled, return null
             }
         }
 
+        // This part is reached if:
+        // 1. No verification was in progress (verificationMode == null).
+        // 2. Verification was in progress, but the current invocation is on a *different* mock
+        //    (e.g., evaluating an argument for the verify() call).
+
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
+            // This cleanup is particularly important if the invocation occurred during verification setup on a different mock.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
\ No newline at end of file
