diff --git a/tmp/94e8bc34-fa9b-4fad-af91-af744924f946_buggy.java b/tmp/fed62fdd-c835-4022-a146-21e28d40d57f_fixed.java
index 5481b94..405a309 100644
--- a/tmp/94e8bc34-fa9b-4fad-af91-af744924f946_buggy.java
+++ b/tmp/fed62fdd-c835-4022-a146-21e28d40d57f_fixed.java
@@ -1,49 +1,64 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
 
         mockingProgress.validateState();
 
         //if verificationMode is not null then someone is doing verify()
         if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+            // Check if the verification mode is intended for the current mock.
+            boolean intendedForThisMock = false;
+            if (verificationMode instanceof MockAwareVerificationMode) {
+                MockAwareVerificationMode mockAwareMode = (MockAwareVerificationMode) verificationMode;
+                if (mockAwareMode.getMock() == invocation.getMock()) {
+                    intendedForThisMock = true;
+                }
+            }
+            // If not MockAwareVerificationMode, we ignore it (perhaps it's relevant in another context)
+            // or it applies regardless of the mock? The original code implies verification only happens
+            // if it's MockAware and the mock matches. Let's stick to that.
+
+            if (intendedForThisMock) {
+                // Correct mock and mode for verification
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
                 verificationMode.verify(data);
-                return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+                return null; // Verification handled, return.
+            } else {
+                // It's an invocation on a different mock during verification.
+                // Re-register the verification mode, as it could be consumed by the invocation on the other mock.
+                // See VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+                mockingProgress.verificationStarted(verificationMode);
+                // Continue processing the invocation on this mock as a regular call.
             }
         }
 
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
\ No newline at end of file
