diff --git a/tmp/8e9af2ab-5a53-4eb1-bf6d-e06c52ce2929_buggy.java b/tmp/3a743c4b-dfb7-4820-a4e4-c8dfb811997e_fixed.java
index 511560e..2cacc01 100644
--- a/tmp/8e9af2ab-5a53-4eb1-bf6d-e06c52ce2929_buggy.java
+++ b/tmp/3a743c4b-dfb7-4820-a4e4-c8dfb811997e_fixed.java
@@ -1,21 +1,28 @@
     private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
         // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+        // Limits the number of nodes traversed up the stack to prevent parser loops and bugs
+        final int SearchDepthLimit = 100; // As defined in HtmlTreeBuilder constant, kept local for clarity of fix scope
+        final int bottom = stack.size() - 1; // The current node position
+
+        // The loop should check elements from 'bottom' upwards, but only up to 'SearchDepthLimit' levels,
+        // or until the root (index 0) is reached.
+        // Calculate the highest index we can reach (lowest index number)
+        // Spec implies loop counter starting at 0, incrementing, and stopping *before* check if counter >= limit.
+        // This means at most 'limit' iterations (0 to limit-1).
+        // Iteration 0 checks index 'bottom'.
+        // Iteration 'limit - 1' checks index 'bottom - (limit - 1)'.
+        // So the lowest index to check is 'bottom - limit + 1'.
+        final int top = Math.max(0, bottom - SearchDepthLimit + 1);
 
         for (int pos = bottom; pos >= top; pos--) {
             final String elName = stack.get(pos).nodeName();
             if (inSorted(elName, targetNames))
                 return true;
             if (inSorted(elName, baseTypes))
                 return false;
             if (extraTypes != null && inSorted(elName, extraTypes))
                 return false;
         }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
-        return false;
+        // Validate.fail("Should not be reachable"); // Commented out original validation failure point
+        return false; // Did not find target element within scope limit
     }
\ No newline at end of file
