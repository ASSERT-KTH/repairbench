diff --git a/tmp/80ae5f71-54d0-4bb1-aa94-f0fbba0fd6e4_buggy.java b/tmp/92e2dbae-0eea-4bf6-8909-7c528e0b4394_fixed.java
index 511560e..ff25f2f 100644
--- a/tmp/80ae5f71-54d0-4bb1-aa94-f0fbba0fd6e4_buggy.java
+++ b/tmp/92e2dbae-0eea-4bf6-8909-7c528e0b4394_fixed.java
@@ -1,21 +1,22 @@
     private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
         // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+        // Simplified version, check backwards up stack from current node position.
+        final int bottom = stack.size() - 1;
+        // Don't walk too far up the tree. Limits the search to prevent hangs or excessive stack use on deep trees.
+        // Calculate the lowest index ('top') to search to. It's the current position ('bottom') minus the max search depth,
+        // but not less than 0. The number of elements searched is bottom - top + 1. We want this to be at most MaxScopeSearchDepth.
+        // So, bottom - top + 1 <= MaxScopeSearchDepth  =>  top >= bottom - MaxScopeSearchDepth + 1
+        final int top = bottom >= MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth + 1 : 0;
 
         for (int pos = bottom; pos >= top; pos--) {
             final String elName = stack.get(pos).nodeName();
             if (inSorted(elName, targetNames))
-                return true;
+                return true; // Found a target element in scope.
             if (inSorted(elName, baseTypes))
-                return false;
+                return false; // Found a base scope boundary element, stop search.
             if (extraTypes != null && inSorted(elName, extraTypes))
-                return false;
+                return false; // Found an extra scope boundary element, stop search.
         }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
+        // Reachable if target not found within scope limit, or stack is empty.
         return false;
     }
\ No newline at end of file
