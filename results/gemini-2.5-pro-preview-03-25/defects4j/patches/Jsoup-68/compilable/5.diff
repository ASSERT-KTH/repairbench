diff --git a/tmp/2c7b02a1-eb47-4fc7-bb13-c3e3b1ed9c82_buggy.java b/tmp/63d326a3-a93b-47ef-a4ce-3f5f8c3687f5_fixed.java
index 511560e..f493411 100644
--- a/tmp/2c7b02a1-eb47-4fc7-bb13-c3e3b1ed9c82_buggy.java
+++ b/tmp/63d326a3-a93b-47ef-a4ce-3f5f8c3687f5_fixed.java
@@ -1,21 +1,19 @@
     private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
         // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+        // Limits the search up the stack to reasonably prevent extended lookups
+        // The HTML spec does not specify a limit. MaxScopeSearchDepth is an empirical value chosen for safety.
+        final int bottom = stack.size() - 1; // Current node is stack bottom
+        final int top = bottom >= MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; // Correctly calculate the search limit relative to the bottom
 
         for (int pos = bottom; pos >= top; pos--) {
             final String elName = stack.get(pos).nodeName();
             if (inSorted(elName, targetNames))
                 return true;
             if (inSorted(elName, baseTypes))
                 return false;
             if (extraTypes != null && inSorted(elName, extraTypes))
                 return false;
         }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
-        return false;
+        //Validate.fail("Should not be reachable"); // Deferred fail - would be false in normal cases
+        return false; // Fell out of scope
     }
\ No newline at end of file
