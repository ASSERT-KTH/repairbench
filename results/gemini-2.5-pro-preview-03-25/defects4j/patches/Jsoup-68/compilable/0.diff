diff --git a/tmp/5724e03c-35b2-4a13-9bc1-2632ede81cbb_buggy.java b/tmp/3a8cd1db-647a-4b1b-a23a-e2b833a5f50e_fixed.java
index 511560e..0ee4b07 100644
--- a/tmp/5724e03c-35b2-4a13-9bc1-2632ede81cbb_buggy.java
+++ b/tmp/3a8cd1db-647a-4b1b-a23a-e2b833a5f50e_fixed.java
@@ -1,21 +1,19 @@
     private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
         // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
+        // Limits the search to MaxScopeSearchDepth + 1 elements back up the stack from the current node.
+        final int bottom = stack.size() - 1;
+        final int top = bottom >= MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
         // don't walk too far up the tree
 
         for (int pos = bottom; pos >= top; pos--) {
             final String elName = stack.get(pos).nodeName();
             if (inSorted(elName, targetNames))
                 return true;
             if (inSorted(elName, baseTypes))
                 return false;
             if (extraTypes != null && inSorted(elName, extraTypes))
                 return false;
         }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
-        return false;
+        //Validate.fail("Should not be reachable"); // Formerly unreachable due to html base type check. Refactored to explicit false return.
+        return false; // Reached top of scope without finding target or scope limiting element
     }
\ No newline at end of file
