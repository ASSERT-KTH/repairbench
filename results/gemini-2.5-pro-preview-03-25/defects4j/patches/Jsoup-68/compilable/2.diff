diff --git a/tmp/c78c0560-a842-49a6-b30e-491b61f17eda_buggy.java b/tmp/bfc8d094-5dec-40ba-8aef-e1e0a8788503_fixed.java
index 511560e..b102f91 100644
--- a/tmp/c78c0560-a842-49a6-b30e-491b61f17eda_buggy.java
+++ b/tmp/bfc8d094-5dec-40ba-8aef-e1e0a8788503_fixed.java
@@ -1,21 +1,23 @@
     private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
         // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
 
+        // The stack search depth needs to be limited to prevent StackOverflowErrors on excessively deep stacks.
+        // See: https://github.com/jhy/jsoup/issues/1829
+
+        final int bottom = stack.size() - 1; // Index of the last element (current node)
+        // Calculate the top bound for the search, limited by MaxScopeSearchDepth
+        final int top = Math.max(0, bottom - MaxScopeSearchDepth); // Don't go lower than position 0
+
+        // Check elements from the bottom up to the calculated top limit
         for (int pos = bottom; pos >= top; pos--) {
             final String elName = stack.get(pos).nodeName();
             if (inSorted(elName, targetNames))
-                return true;
+                return true; // Found a target element in scope
             if (inSorted(elName, baseTypes))
-                return false;
+                return false; // Found a base type boundary element, stop searching
             if (extraTypes != null && inSorted(elName, extraTypes))
-                return false;
+                return false; // Found an extra type boundary element, stop searching
         }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
+        // Reached the search limit (top) or the root without finding a matching target or boundary.
         return false;
     }
\ No newline at end of file
