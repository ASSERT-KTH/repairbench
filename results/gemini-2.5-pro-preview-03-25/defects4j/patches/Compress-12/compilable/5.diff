diff --git a/tmp/0e147625-fbb0-40ab-9581-f26c52f60b6d_buggy.java b/tmp/b17bbdc7-d382-48b9-b06e-ee722ecb9785_fixed.java
index b5a206b..5701580 100644
--- a/tmp/0e147625-fbb0-40ab-9581-f26c52f60b6d_buggy.java
+++ b/tmp/b17bbdc7-d382-48b9-b06e-ee722ecb9785_fixed.java
@@ -1,80 +1,119 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
+            // Skip the current entry's data if necessary
+            // Copied from org.apache.commons.io.IOUtils.skip(InputStream, long)
             long numToSkip = entrySize - entryOffset;
-
             while (numToSkip > 0) {
                 long skipped = skip(numToSkip);
                 if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip current tar entry");
+                    // TAR entries shouldn't contain unexpected EOF when skipping
+                    // yet, so throw an exception
+                    throw new IOException("Unexpected EOF skipping current tar entry data");
                 }
                 numToSkip -= skipped;
             }
 
             readBuf = null;
         }
 
         byte[] headerBuf = getRecord();
 
-        if (hasHitEOF) {
+        if (hasHitEOF) { // Check EOF after reading the header record
             currEntry = null;
             return null;
         }
 
+        try {
             currEntry = new TarArchiveEntry(headerBuf);
+        } catch (IllegalArgumentException e) {
+            // Handle potential parsing errors in the header, such as invalid octal numbers
+            IOException ioe = new IOException("Failed to read tar entry header: " + e.getMessage());
+            ioe.initCause(e); // Preserve the original cause
+            throw ioe;
+        }
+
         entryOffset = 0;
         entrySize = currEntry.getSize();
 
         if (currEntry.isGNULongNameEntry()) {
-            // read in the name
-            StringBuffer longName = new StringBuffer();
-            byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
-            while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
+            // Read the long name from the entry's data section
+            byte[] longNameData = new byte[(int) entrySize];
+            int read = readAll(longNameData, 0, longNameData.length);
+            if (read != entrySize) {
+                 throw new IOException("Failed to read entire long name entry data");
             }
-            getNextEntry();
+            getNextEntry(); // Recursively call getNextEntry to process the actual entry after the long name entry
             if (currEntry == null) {
-                // Bugzilla: 40334
-                // Malformed tar file - long entry name not followed by entry
+                // Bugzilla: 40334 - Malformed tar file, long name entry not followed by actual entry
                 return null;
             }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
-                longName.deleteCharAt(longName.length() - 1);
+            // Remove trailing null terminator if present
+            int NUL_offset = longNameData.length;
+            // Some archives seem to pad the name with NULs, find the last non-NUL byte
+            for(int i = longNameData.length -1; i >= 0; i--){
+                if (longNameData[i] != 0) {
+                    break;
                 }
-            currEntry.setName(longName.toString());
+                NUL_offset = i;
+            }
+            // TODO: Should use the tar header encoding? Default is UTF-8 for GNULongName
+            currEntry.setName(new String(longNameData, 0, NUL_offset));
         }
 
         if (currEntry.isPaxHeader()){ // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()){ // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
-        // information, we update entrySize here so that it contains
-        // the correct value.
+        // due to PAX headers or other modifications, update entrySize.
         entrySize = currEntry.getSize();
         return currEntry;
     }
+
+    /**
+     * Reads len bytes from the input stream into the buffer buf, starting at
+     * offset off. This method repeats the read until the buffer is filled,
+     * unless the stream ends prematurely.
+     *
+     * @param buf the buffer to read data into.
+     * @param off the offset in the buffer from which to start writing data.
+     * @param len the number of bytes to read.
+     * @return the number of bytes read, which is typically len unless the
+     * stream ends prematurely.
+     * @throws IOException if an I/O error occurs.
+     */
+    private int readAll(byte[] buf, int off, int len) throws IOException {
+        int totalRead = 0;
+        while (totalRead < len) {
+            int numRead = read(buf, off + totalRead, len - totalRead);
+            if (numRead == -1) {
+                if (totalRead == 0) {
+                    return -1; // Return -1 if EOF is encountered immediately
+                }
+                break; // Break if EOF is encountered after reading some data
+            }
+            totalRead += numRead;
+        }
+        return totalRead;
+    }
\ No newline at end of file
