diff --git a/tmp/9e8f4182-6ede-4023-ac96-b8c6aabbc2e9_buggy.java b/tmp/933893a3-8b10-4f87-be7a-3990ddb5afce_fixed.java
index b5a206b..49a43ff 100644
--- a/tmp/9e8f4182-6ede-4023-ac96-b8c6aabbc2e9_buggy.java
+++ b/tmp/933893a3-8b10-4f87-be7a-3990ddb5afce_fixed.java
@@ -1,80 +1,82 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
-            long numToSkip = entrySize - entryOffset;
-
-            while (numToSkip > 0) {
-                long skipped = skip(numToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip current tar entry");
-                }
-                numToSkip -= skipped;
-            }
-
+            /* Skip will only skip partial records if skipPartial is false */
+            // Moved the skip logic into a separate method for readability
+            IOUtils.skip(this, entrySize - entryOffset);
             readBuf = null;
         }
 
         byte[] headerBuf = getRecord();
 
         if (hasHitEOF) {
             currEntry = null;
             return null;
         }
 
+        try {
             currEntry = new TarArchiveEntry(headerBuf);
+        } catch (IllegalArgumentException e) {
+            IOException ioe = new IOException("Failed to read tar entry: " + e.getMessage());
+            ioe.initCause(e);
+            throw ioe;
+        }
+
         entryOffset = 0;
+        // FIXME check entry size is valid?
         entrySize = currEntry.getSize();
 
+        if (currEntry.isGNULongLinkEntry()) {
+            byte[] longLinkData = getLongNameData();
+            if (longLinkData == null) {
+                // Bugzilla: 40334
+                // Malformed tar file - long link entry name not followed by entry
+                return null;
+            }
+            currEntry.setLinkName(new String(longLinkData, 0, longLinkData.length -1)); // CHECKSTYLE IGNORE MagicNumber
+        }
+
         if (currEntry.isGNULongNameEntry()) {
-            // read in the name
-            StringBuffer longName = new StringBuffer();
-            byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
-            while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
-            }
-            getNextEntry();
-            if (currEntry == null) {
+            byte[] longNameData = getLongNameData();
+            if (longNameData == null) {
                 // Bugzilla: 40334
                 // Malformed tar file - long entry name not followed by entry
                 return null;
             }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
-                longName.deleteCharAt(longName.length() - 1);
-            }
-            currEntry.setName(longName.toString());
+            currEntry.setName(new String(longNameData, 0, longNameData.length -1)); // CHECKSTYLE IGNORE MagicNumber
         }
 
         if (currEntry.isPaxHeader()){ // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()){ // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
         // due to a new size being reported in the posix header
         // information, we update entrySize here so that it contains
         // the correct value.
+        // This is needed needed here as the update happens in paxHeaders
+        // but the pax header is not the real entry.
         entrySize = currEntry.getSize();
+
         return currEntry;
     }
\ No newline at end of file
