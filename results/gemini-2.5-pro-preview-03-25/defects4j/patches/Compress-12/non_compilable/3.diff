diff --git a/tmp/5f204c98-3baf-4668-a16a-efd4efd3bc87_buggy.java b/tmp/66b5507c-57ec-4bc8-bb2a-86dfc0016d08_fixed.java
index b5a206b..9eb7517 100644
--- a/tmp/5f204c98-3baf-4668-a16a-efd4efd3bc87_buggy.java
+++ b/tmp/66b5507c-57ec-4bc8-bb2a-86dfc0016d08_fixed.java
@@ -1,80 +1,98 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
+            /* Skip refers to backing map entries, not underlying stream positions */
             long numToSkip = entrySize - entryOffset;
 
-            while (numToSkip > 0) {
-                long skipped = skip(numToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip current tar entry");
-                }
-                numToSkip -= skipped;
+            // System.out.println("TarAIS.read() skipping: " + numToSkip);
+
+            // DEV-40: Small files are read/skipped at once. Should be partial too.
+            if (numToSkip > 0) {
+                skip(numToSkip);
+//                long skipped = skip(numToSkip);
+//                if (skipped != numToSkip) {
+//                     BUG!                // TODO:                             IOUtils.skip() returns -1 if EOF, so we should check for that.
+//                    throw new IOException("Possible tar file corruption: failed to skip " + numToSkip
+//                                          + " bytes from entry " + currEntry.getName());
+//                }
             }
 
             readBuf = null;
         }
 
         byte[] headerBuf = getRecord();
 
         if (hasHitEOF) {
             currEntry = null;
             return null;
         }
 
+        try {
             currEntry = new TarArchiveEntry(headerBuf);
+        } catch (IllegalArgumentException e) {
+            IOException ioe = new IOException("Error detected parsing the header");
+            ioe.initCause(e);
+            throw ioe;
+        }
+        // System.out.println("TarAIS.read() - found entry: '" + currEntry.getName() + "'");
+
         entryOffset = 0;
+        // COMPRESS-156: tar formats allow for null blocks further inside the stream
         entrySize = currEntry.getSize();
 
+        // If the size of the next element in the archive has changed
+        // due to a new size being reported in the posix header
+        // information, we update entrySize here so that it contains
+        // the correct value. We are adding the line here as we need
+        // to read the entry header to get to the size information.
+        if (currEntry.isGNULongLinkEntry()) {
+            byte[] longLinkData = getLongNameData();
+            if (longLinkData == null) {
+                // Bugzilla: 40334
+                // Malformed tar file - long link entry name not followed by entry
+                return null;
+            }
+            currEntry.setLinkName(new String(longLinkData, 0, longLinkData.length - 1));
+        }
+
         if (currEntry.isGNULongNameEntry()) {
-            // read in the name
-            StringBuffer longName = new StringBuffer();
-            byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
-            while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
-            }
-            getNextEntry();
-            if (currEntry == null) {
+            byte[] longNameData = getLongNameData();
+            if (longNameData == null) {
                 // Bugzilla: 40334
                 // Malformed tar file - long entry name not followed by entry
                 return null;
             }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
-                longName.deleteCharAt(longName.length() - 1);
-            }
-            currEntry.setName(longName.toString());
+            currEntry.setName(new String(longNameData, 0, longNameData.length - 1));
         }
 
         if (currEntry.isPaxHeader()){ // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()){ // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
         // due to a new size being reported in the posix header
         // information, we update entrySize here so that it contains
         // the correct value.
         entrySize = currEntry.getSize();
         return currEntry;
     }
\ No newline at end of file
