diff --git a/tmp/d46ef79f-5cab-4252-9dc7-7fd1b87908d7_buggy.java b/tmp/8ad3878c-749b-4c7d-ab4f-ee14266f4c50_fixed.java
index ad7255c..007088e 100644
--- a/tmp/d46ef79f-5cab-4252-9dc7-7fd1b87908d7_buggy.java
+++ b/tmp/8ad3878c-749b-4c7d-ab4f-ee14266f4c50_fixed.java
@@ -1,42 +1,57 @@
+import java.awt.geom.GeneralPath;
+import java.awt.geom.PathIterator;
+import java.util.Arrays;
+
+/**
+ * Utility methods for {@link java.awt.Shape} objects.
+ * This class is deliberately simplified to focus on the buggy function.
+ */
+public class ShapeUtilities {
+
     /**
      * Tests two polygons for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        // FIX: iterator2 should iterate over p2, not p1
+        PathIterator iterator2 = p2.getPathIterator(null);
         double[] d1 = new double[6];
         double[] d2 = new double[6];
         boolean done = iterator1.isDone() && iterator2.isDone();
         while (!done) {
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
+            // Note: Using Arrays.equals might compare more data than strictly
+            // necessary for some segment types, but it's generally safe
+            // if the arrays are consistently filled.
             if (!Arrays.equals(d1, d2)) {
                 return false;
             }
             iterator1.next();
             iterator2.next();
             done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
+}
\ No newline at end of file
