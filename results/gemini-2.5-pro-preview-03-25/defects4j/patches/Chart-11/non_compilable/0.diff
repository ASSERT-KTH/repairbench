diff --git a/tmp/d749d63a-7d88-4e96-8e30-256351de5657_buggy.java b/tmp/a091cfee-b717-4cdf-88df-b68c877ccb4c_fixed.java
index ad7255c..29d3845 100644
--- a/tmp/d749d63a-7d88-4e96-8e30-256351de5657_buggy.java
+++ b/tmp/a091cfee-b717-4cdf-88df-b68c877ccb4c_fixed.java
@@ -1,42 +1,94 @@
+import java.awt.geom.GeneralPath;
+import java.awt.geom.PathIterator;
+import java.util.Arrays;
+
+/**
+ * Utility methods for {@link java.awt.Shape} objects.
+ *
+ * @since 1.0.13
+ */
+public class ShapeUtilities {
+
     /**
      * Tests two polygons for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        // FIX: Initialize iterator2 with p2, not p1
+        PathIterator iterator2 = p2.getPathIterator(null);
         double[] d1 = new double[6];
         double[] d2 = new double[6];
         boolean done = iterator1.isDone() && iterator2.isDone();
         while (!done) {
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            // Compare only the relevant coordinates based on segment type
+            // SEG_MOVETO and SEG_LINETO use 2 coords (indices 0, 1)
+            // SEG_QUADTO uses 4 coords (indices 0, 1, 2, 3)
+            // SEG_CUBICTO uses 6 coords (indices 0, 1, 2, 3, 4, 5)
+            // SEG_CLOSE uses 0 coords
+            int numCoords = 0;
+            switch (seg1) {
+                case PathIterator.SEG_MOVETO:
+                case PathIterator.SEG_LINETO:
+                    numCoords = 2;
+                    break;
+                case PathIterator.SEG_QUADTO:
+                    numCoords = 4;
+                    break;
+                case PathIterator.SEG_CUBICTO:
+                    numCoords = 6;
+                    break;
+                case PathIterator.SEG_CLOSE:
+                    numCoords = 0;
+                    break;
+                default:
+                    // Should not happen
                     return false;
             }
+            // Use a loop to compare only the necessary coordinates
+            boolean coordsEqual = true;
+            for (int i = 0; i < numCoords; i++) {
+                if (d1[i] != d2[i]) {
+                    coordsEqual = false;
+                    break;
+                }
+            }
+            if (!coordsEqual) {
+                 return false;
+            }
+            // Original comparison using Arrays.equals(d1, d2) could work
+            // if currentSegment consistently zeroes out unused elements,
+            // but comparing only relevant coords is safer.
+            // if (!Arrays.equals(d1, d2)) {
+            //    return false;
+            // }
+
             iterator1.next();
             iterator2.next();
             done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
+}
\ No newline at end of file
