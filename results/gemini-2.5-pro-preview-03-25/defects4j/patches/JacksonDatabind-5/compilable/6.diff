diff --git a/tmp/8c4face3-857f-4739-a877-14f1f9798a52_buggy.java b/tmp/8bc98075-e742-4afd-baed-8fa005f5373d_fixed.java
index b2db1d6..01868cb 100644
--- a/tmp/8c4face3-857f-4739-a877-14f1f9798a52_buggy.java
+++ b/tmp/8bc98075-e742-4afd-baed-8fa005f5373d_fixed.java
@@ -1,29 +1,29 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
-        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
-            for (Method m : mixin.getDeclaredMethods()) {
+        // Process methods declared directly in the mixin class.
+        // Hierarchy traversal is handled by the caller (_addMixIns, _addInterfaces).
+        for (Method m : mixInCls.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
+                // Apply annotations from mixin method 'm' to the existing target method 'am'
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
+            /* Otherwise, if no corresponding method found in the target class hierarchy yet,
+             * add this mixin method to the separate 'mixIns' map.
+             * It might be added later in _addMixIns if it's a valid property
+             * (like a getter), or if it overrides a method discovered later.
              */
             } else {
                 // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Add the mixin's method itself to the mixIns map for later processing.
                 mixIns.add(_constructMethod(m));
             }
         }
     }
-    }
