diff --git a/tmp/ae9929a5-7aea-42a2-ad41-c1e6e0857992_buggy.java b/tmp/048d7ddc-347c-4ef8-b52d-48d6d817b62b_fixed.java
index b2db1d6..efda5ec 100644
--- a/tmp/ae9929a5-7aea-42a2-ad41-c1e6e0857992_buggy.java
+++ b/tmp/048d7ddc-347c-4ef8-b52d-48d6d817b62b_fixed.java
@@ -1,29 +1,41 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
+        // [databind#515]: Also need to include interfaces, starting with 2.9
+        // Also, occasionally targetClass is null, esp. when dealing with modules/context
+        // (see [databind#2796])
+        // And target need not be super-type of mixin, may be unrelated (happens
+        // when resolving mix-ins for props discovered via fields)
+        if (targetClass != null) {
             ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+        }
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                    // [Issue#515]: Or, maybe the mixin method is a new property,
+                    // not augmenting existing method? If so, need to add
+                    // using the main method map, not mixin-only map.
+                    // Need to use 'methods', not 'mixIns'
+                    methods.add(_constructMethod(m));
+                    // Original code (buggy):
+                    // mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
