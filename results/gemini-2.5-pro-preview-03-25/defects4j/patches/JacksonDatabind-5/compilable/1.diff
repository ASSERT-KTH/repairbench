diff --git a/tmp/6a7b5dab-22b0-400d-b4f3-1e07f99f42c5_buggy.java b/tmp/33b78812-e448-4b35-91e2-0de32d502c94_fixed.java
index b2db1d6..d46bc75 100644
--- a/tmp/6a7b5dab-22b0-400d-b4f3-1e07f99f42c5_buggy.java
+++ b/tmp/33b78812-e448-4b35-91e2-0de32d502c94_fixed.java
@@ -1,29 +1,38 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
+        // Find supertypes of the mix-in class itself, up to Object (or 'targetClass' which is often Object)
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
+                 * that will mask this mixIn)? If so, add annotations from mixin
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
+                /* Otherwise, we may be adding a new method from mixin.
+                 * But note: we can NOT call it, it's just annotation placeholder.
+                 * And more importantly, we should NOT add it if we already
+                 * have a more specific definition (i.e. method from sub-class)
+                 * -- typically checked by caller by not calling this method if that's
+                 * the case.
+                 *
+                 * But with [Issue#515], there's possibility of multiple levels
+                 * of mix-ins; so we may need to add method definition from mix-in
+                 * that does not exist in target class.
                  */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                    // Add the mix-in method itself (as annotation placeholder)
+                    // to the main method map, not the map passed as 'mixIns'
+                    // (which, based on caller context, might be the ignored method map)
+                    methods.add(_constructMethod(m));
                 }
             }
         }
     }
