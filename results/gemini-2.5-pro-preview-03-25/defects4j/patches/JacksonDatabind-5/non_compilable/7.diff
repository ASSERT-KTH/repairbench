diff --git a/tmp/3b959d63-1e8a-4e02-a8cc-3359d958b290_buggy.java b/tmp/749de100-d69a-43d3-af04-c732d2c2f263_fixed.java
index b2db1d6..30ab57a 100644
--- a/tmp/3b959d63-1e8a-4e02-a8cc-3359d958b290_buggy.java
+++ b/tmp/749de100-d69a-43d3-af04-c732d2c2f263_fixed.java
@@ -1,29 +1,62 @@
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+// Assuming MethodKey is available, e.g., import com.fasterxml.jackson.databind.introspect.MethodKey;
+// Assuming ClassUtil is available, e.g., import com.fasterxml.jackson.databind.util.ClassUtil;
+// Assuming AnnotatedMethodMap is available, e.g., import com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap;
+// Assuming AnnotatedMethod is available, e.g., import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
+
+
+    /**
+     * Helper method used for adding annotated methods from given mix-in
+     * class (and its supertypes)
+     * 
+     * @param targetClass Target class to add methods to
+     * @param methods Map of methods to add methods to
+     * @param mixInCls Mix-in class that contains annotated methods to add
+     * @param mixIns Map of mix-in methods found so far (passed to allow
+     *   handling of possible duplicates)
+     */
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
+        // [databind#515]: need to ensure that we do NOT add mix-ins if masked by non-mixin ones.
+        // And based on experiments, seems like we MUST include mix-in class itself as well,
+        // not just super types. Also, order seems to matter, presumably sub-classes override
+        // super-class annotations.
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
+        // We used to pass `targetClass` as 3rd arg, but that seems wrong, filtering has to happen later?
+        // Or maybe requirement is that we should only consider mix-in hierarchy up to target class? Let's revert that part for now
          ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
+
+        // Keep track of signatures for which mix-ins have been applied or added.
+        // Use MethodKey for robust signature matching.
+        // This prevents super-class mix-in annotations from overriding sub-class mix-in annotations.
+        HashSet<MethodKey> processed = new HashSet<>();
+
+        for (Class<?> mixin : parents) { // Process subclass mixins first (due to parents.add(mixInCls) first)
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
+                MethodKey key = new MethodKey(m);
+                // Let's process only the first time we encounter a method signature
+                // (which will be from the most specific mixin subclass)
+                if (processed.add(key)) {
                     AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
                     if (am != null) {
+                        // Method exists in target class hierarchy: apply annotations from mixin
                         _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                     } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                        // Method does not exist in target class hierarchy (yet): add mixin method to mixIns map
+                        // (for possible later application, e.g. on fields)
                         mixIns.add(_constructMethod(m));
                     }
                 }
+                // If processed.add(key) returned false, we've already handled this signature
+                // with a more specific mixin subclass, so we do nothing for this superclass method 'm'.
+            }
         }
     }
\ No newline at end of file
