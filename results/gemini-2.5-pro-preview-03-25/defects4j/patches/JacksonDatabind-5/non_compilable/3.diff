diff --git a/tmp/e16b2ee0-2a34-47b2-9b44-7130861d5899_buggy.java b/tmp/82113d08-c447-4cda-b646-040269efdeb0_fixed.java
index b2db1d6..4b40348 100644
--- a/tmp/e16b2ee0-2a34-47b2-9b44-7130861d5899_buggy.java
+++ b/tmp/82113d08-c447-4cda-b646-040269efdeb0_fixed.java
@@ -1,29 +1,39 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
+        // Ok, first: find overriding mix-in methods, if any:
+        // (note: assumes `mixInCls` is direct mix-in)
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
+        // 03-Aug-2017, tatu: As per [databind#1702], need to handle super-interfaces as well.
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
-            for (Method m : mixin.getDeclaredMethods()) {
+            for (Method m : ClassUtil.getDeclaredMethods(mixin)) { // Use ClassUtil for potentially better handling
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // Well, or, as per [databind#515], multi-level merge within mixins...
+                    // Need to check if we already have added definition from a more
+                    // specific mix-in class (or this same class).
+                    // 16-May-2018, tatu: As per [databind#1973], need to ensure we do not
+                    //   add multiple mix-ins, starting with most specific one.
+                    //   Hence, only add if we don't already have it.
+                    if (mixIns.find(m) == null) {
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
\ No newline at end of file
