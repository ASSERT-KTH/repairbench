diff --git a/tmp/5093d9c0-8294-40f4-a213-adda7f03c65d_buggy.java b/tmp/2519a06e-da38-44fd-a37e-24bf8a366b4a_fixed.java
index b2db1d6..28c3df3 100644
--- a/tmp/5093d9c0-8294-40f4-a213-adda7f03c65d_buggy.java
+++ b/tmp/2519a06e-da38-44fd-a37e-24bf8a366b4a_fixed.java
@@ -1,29 +1,49 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
+        // Ok, first: let's see which mix-in methods override methods target class has:
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
+        // Target class is the implicit "stop condition"
+        // Issue #211: may need to add multiple mixins, too.
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
+                    /* Yes: we'll just augment via annotations then. No need
+                     * to add duplicate method. And we know it's visible
+                     * because method object is same.
+                     */
                     _addMixUnders(m, am);
+                    
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    /* We don't have a method yet. But do we have mix-in
+                     * from sub-class? Or, possibly, already added (for multiple mixins)?
+                     */
+                    /* As per [Issue#515], need to consider overriding mixin methods as well
+                     */
+                    AnnotatedMethod old = mixIns.find(m);
+                    if (old != null) {
+                        // TODO: should we verify that we are not losing information?
+                        // Ideally, perhaps we'd merge annotations somehow
+                        // Or maybe verify that signatures are compatible? For now, assume they are
+                        _addMixUnders(m, old);
+                    } else {
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
\ No newline at end of file
