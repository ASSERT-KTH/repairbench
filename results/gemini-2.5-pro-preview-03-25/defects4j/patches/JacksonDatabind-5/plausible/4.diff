diff --git a/tmp/b029987a-7261-4b1e-9277-bc19a0e891a0_buggy.java b/tmp/da36f09d-b527-4e1b-82b4-a7ab82019ccd_fixed.java
index b2db1d6..6a059e1 100644
--- a/tmp/b029987a-7261-4b1e-9277-bc19a0e891a0_buggy.java
+++ b/tmp/da36f09d-b527-4e1b-82b4-a7ab82019ccd_fixed.java
@@ -1,29 +1,35 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
+        // Find supertypes (classes, interfaces) of the mixin class, up to (but not including) targetClass.
+        // The ordering should be relevant; subclass before superclass.
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
+                // Check if the method already exists in the methods collected from the target class hierarchy
                 AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
+                /* If a corresponding method exists in the target class hierarchy,
+                 * we augment the existing AnnotatedMethod ('am') with annotations
+                 * from the mixin method ('m'). Precedence rules might apply within _addMixUnders.
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
+                /* Otherwise (method 'm' exists in mixin hierarchy but not in target hierarchy yet),
+                 * it's a method potentially introduced purely by the mixin.
+                 * We add it to the separate 'mixIns' map.
+                 * As per [databind#515], handle multi-level mixins by checking
+                 * if a definition for this method signature already exists in 'mixIns'
+                 * (presumably added from a more specific sub-mixin). If it exists, we skip;
+                 * otherwise, we add the current one. This respects mixin inheritance precedence.
                  */
-                } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                } else if (mixIns.find(m) == null) {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
