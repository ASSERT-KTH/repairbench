diff --git a/tmp/42f4849a-a712-4199-9610-a77a9960dec2_buggy.java b/tmp/8b49b26f-f12d-4ae3-8d66-c607f58a1327_fixed.java
index b2db1d6..a1b9e34 100644
--- a/tmp/42f4849a-a712-4199-9610-a77a9960dec2_buggy.java
+++ b/tmp/8b49b26f-f12d-4ae3-8d66-c607f58a1327_fixed.java
@@ -1,29 +1,34 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
+        // Find supertypes of the mixin class up to Object, passing targetClass as context (used?)
+        // although null or Object.class might be cleaner stop condition.
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+        // Iterate through the mixin hierarchy, starting from the most specific class
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
+                /* If target class (or its supertypes) already has the method,
+                 * we will augment it with annotations from the mixin.
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
+                /* Otherwise, it's a method solely introduced by the mixin hierarchy.
+                 * Add it to the separate mixIns map.
                  */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // Add to mixIns map only if a method with the same signature
+                    // hasn't already been added from a more specific mixin subclass.
+                    // The iteration order ensures subclasses are processed first.
+                    if (mixIns.find(m) == null) {
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
\ No newline at end of file
