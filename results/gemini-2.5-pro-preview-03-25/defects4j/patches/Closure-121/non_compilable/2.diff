diff --git a/tmp/5e9cbead-fd01-49ed-a69a-b5d7d3780461_buggy.java b/tmp/7b79e491-a0d9-49d9-b3d4-e141dc8faff1_fixed.java
index 3a790cb..11475d5 100644
--- a/tmp/5e9cbead-fd01-49ed-a69a-b5d7d3780461_buggy.java
+++ b/tmp/7b79e491-a0d9-49d9-b3d4-e141dc8faff1_fixed.java
@@ -1,74 +1,165 @@
     private void inlineNonConstants(
         Var v, ReferenceCollection referenceInfo,
         boolean maybeModifiedArguments) {
       int refCount = referenceInfo.references.size();
-      Reference declaration = referenceInfo.references.get(0);
+      Reference declaration = referenceInfo.getDeclaration();
       Reference init = referenceInfo.getInitializingReference();
-      int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
-      if (refCount > 1 &&
-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {
-        // if the variable is referenced more than once, we can only
-        // inline it if it's immutable and never defined before referenced.
+      // Calculate the index of the first reference after initialization.
+      // This helps identify cases where the variable is used exactly once after init.
+      int firstRefAfterInitIndex = -1;
+      int initIndex = (init != null) ? referenceInfo.references.indexOf(init) : -1;
+      if (initIndex != -1 && initIndex < refCount - 1) {
+          firstRefAfterInitIndex = initIndex + 1;
+      } else if (init == null && declaration != null) {
+          // No explicit init, check after declaration if declaration is present.
+          int declIndex = referenceInfo.references.indexOf(declaration);
+           if (declIndex != -1 && declIndex < refCount - 1) {
+              firstRefAfterInitIndex = declIndex + 1;
+          }
+      }
+
+      // Condition 1: Inline variables that are assigned once to an immutable value.
+      // This is safe because the value is constant and known.
+      if (refCount > 1 && isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         Node value;
         if (init != null) {
           value = init.getAssignedValue();
         } else {
-          // Create a new node for variable that is never initialized.
-          Node srcLocation = declaration.getNode();
+          // Variable is read but never assigned a value locally. Inline as undefined.
+          Node srcLocation = declaration != null ? declaration.getNode() : v.getNode();
+          // Ensure srcLocation is valid for creating a node.
+          if (srcLocation == null || srcLocation.getStaticSourceFile() == null) {
+             // Use a placeholder if source info is unavailable.
+             srcLocation = new Node(Token.SCRIPT);
+          }
           value = NodeUtil.newUndefinedNode(srcLocation);
         }
-        Preconditions.checkNotNull(value);
-        inlineWellDefinedVariable(v, value, referenceInfo.references);
+
+        // Ensure we have a value to inline.
+        if (value != null) {
+           // Clone the value node tree for safe inlining at multiple sites.
+           inlineWellDefinedVariable(v, value.cloneTree(), referenceInfo.references);
            staleVars.add(v);
-      } else if (refCount == firstRefAfterInit) {
-        // The variable likely only read once, try some more
-        // complex inlining heuristics.
-        Reference reference = referenceInfo.references.get(
-            firstRefAfterInit - 1);
-        if (canInline(declaration, init, reference)) {
+        }
+      // Condition 2: Try to inline variables that are initialized and used exactly once.
+      // This is potentially unsafe if the assigned value can change between init and use.
+      } else if (init != null && firstRefAfterInitIndex != -1 && refCount == firstRefAfterInitIndex + 1) {
+        // We have an initialization and exactly one reference after it.
+        Reference reference = referenceInfo.references.get(firstRefAfterInitIndex);
+
+        // Fix for issue 1053: Check stability of the assigned value, especially if it's a variable.
+        // If the assigned value (e.g., 'u' in x=u) can change state between the assignment
+        // and the use of 'x', inlining 'x' with 'u' is incorrect.
+        boolean valueIsStable = true;
+        Node valueNode = init.getAssignedValue();
+
+        if (valueNode == null) {
+             valueIsStable = false; // Cannot inline if assigned value is null/empty.
+        } else if (valueNode.isName()) {
+          // The assigned value is a variable name. Check if this variable might change.
+          Var valueVar = referenceInfo.scope.getVar(valueNode.getString());
+          if (valueVar != null) {
+            // Need reference information for the variable used as the value.
+            ReferenceCollection valueRefInfo = getRefInfo(valueVar); // Assume getRefInfo helper exists
+            if (valueRefInfo != null) {
+              // If we have reference info, check assignment count and escaped status.
+              // A variable assigned multiple times or escaped might change unexpectedly.
+              if (!valueRefInfo.isAssignedOnceInLifetime() || valueVar.isMarkedEscaped()) {
+                valueIsStable = false;
+              }
+            } else {
+              // No reference info available for the value variable.
+              // Check basic properties to assess stability.
+              // Assume unstable if global, extern, arguments object, escaped, or not declared 'const'.
+              if (valueVar.isGlobal() || valueVar.isExtern() ||
+                  valueVar.isArguments() || valueVar.isMarkedEscaped() ||
+                  !valueVar.isConst()) { // Use isConst as a best-effort check for stability.
+                valueIsStable = false;
+              }
+            }
+          } else {
+            // RHS variable name not found in scope? This indicates an error or unusual code.
+            // Treat as unstable for safety.
+            valueIsStable = false;
+          }
+        }
+        // Implicit else: valueNode is not a NAME. The canInline function should check its safety
+        // based on whether it has side effects or its value might change.
+
+        // Only proceed with inlining if the value appears stable AND canInline determines
+        // it's safe based on side effects and control flow between init and reference.
+        if (valueIsStable && canInline(declaration, init, reference)) {
           inline(v, declaration, init, reference);
           staleVars.add(v);
         }
-      } else if (declaration != init && refCount == 2) {
-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {
-          // The only reference is the initialization, remove the assignment and
-          // the variable declaration.
-          Node value = init.getAssignedValue();
-          Preconditions.checkNotNull(value);
-          inlineWellDefinedVariable(v, value, referenceInfo.references);
-          staleVars.add(v);
-        }
+      // Condition 3: Var declared, initialized, and never used otherwise (refCount == 2).
+      } else if (declaration != null && init != null && declaration != init && refCount == 2) {
+          // This case (e.g., var x = getValueWithSideEffects(); ) should be handled
+          // by other passes like RemoveUnusedVariables, which correctly handle
+          // preserving the initialization if it has side effects. Don't inline here.
       }
 
-      // If this variable was not inlined normally, check if we can
-      // inline an alias of it. (If the variable was inlined, then the
-      // reference data is out of sync. We're better off just waiting for
-      // the next pass.)
-      if (!maybeModifiedArguments &&
-          !staleVars.contains(v) &&
-          referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
+      // Condition 4: Alias inlining. Check if this variable 'v' is used as an alias
+      // for another variable that could be inlined.
+      // This check only runs if 'v' wasn't inlined above and meets basic safety criteria.
+      if (!maybeModifiedArguments && // Avoid if arguments object might be modified.
+          !staleVars.contains(v) && // Avoid if 'v' was already handled.
+          referenceInfo.isWellDefined() && // 'v' must be defined before use.
+          referenceInfo.isAssignedOnceInLifetime()) { // 'v' must be assigned only once.
+
         List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
-          Node nameNode = refs.get(i).getNode();
+        // Determine the index from where reads/aliases might start. Skip declaration/init.
+        int startReadIndex = 0;
+        if (!refs.isEmpty()) {
+            int declIndex = (declaration != null) ? refs.indexOf(declaration) : -1;
+            int initIdx = (init != null) ? refs.indexOf(init) : -1;
+            startReadIndex = Math.max(declIndex, initIdx) + 1;
+        }
+
+
+        for (int i = startReadIndex; i < refs.size(); i++) {
+          Reference currentRef = refs.get(i);
+          Node nameNode = currentRef.getNode();
+
+          // Check if this reference is a read and corresponds to a known alias candidate.
+          if (nameNode != null && nameNode.isName() && currentRef.isRead()) {
               if (aliasCandidates.containsKey(nameNode)) {
                   AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
-                !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
-              Node value = aliasInit.getAssignedValue();
-              Preconditions.checkNotNull(value);
-              inlineWellDefinedVariable(candidate.alias,
-                  value,
-                  candidate.refInfo.references);
-              staleVars.add(candidate.alias);
+                  Var aliasVar = candidate.alias; // The variable being aliased ('v' aliased 'aliasVar').
+                  ReferenceCollection aliasRefInfo = candidate.refInfo;
+
+                  // Ensure the alias target var ('aliasVar') hasn't been removed/inlined already,
+                  // isn't forbidden, and is suitable for inlining itself.
+                  if (!staleVars.contains(aliasVar) &&
+                      !isVarInlineForbidden(aliasVar) &&
+                      aliasRefInfo != null && // Need ref info for the alias target.
+                      isImmutableAndWellDefinedVariable(aliasVar, aliasRefInfo)) {
+
+                      Reference aliasInit = aliasRefInfo.getInitializingReference();
+                      Node aliasValue;
+                      if (aliasInit != null) {
+                        aliasValue = aliasInit.getAssignedValue();
+                      } else {
+                          // Alias target is never initialized, treat as undefined.
+                          Node srcLocation = aliasVar.getNode();
+                          if (srcLocation == null || srcLocation.getStaticSourceFile() == null) {
+                             srcLocation = new Node(Token.SCRIPT); // Placeholder
+                          }
+                          aliasValue = NodeUtil.newUndefinedNode(srcLocation);
+                      }
+
+                      if (aliasValue != null) {
+                          // Inline the alias variable ('aliasVar') using its stable value.
+                          inlineWellDefinedVariable(aliasVar, aliasValue.cloneTree(), aliasRefInfo.references);
+                          staleVars.add(aliasVar);
+                          // Successfully inlined an alias based on this reference to 'v',
+                          // break from the loop checking references of 'v'.
+                          break;
+                      }
+                  }
               }
           }
         }
       }
     }
\ No newline at end of file
