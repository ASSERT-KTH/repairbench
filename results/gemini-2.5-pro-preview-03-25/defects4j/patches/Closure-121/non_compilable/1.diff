diff --git a/tmp/7a301722-29a8-4c23-a4fd-118b8c9e075e_buggy.java b/tmp/c670b023-4ad0-4551-b134-5ce6b7069585_fixed.java
index 3a790cb..942f4cc 100644
--- a/tmp/7a301722-29a8-4c23-a4fd-118b8c9e075e_buggy.java
+++ b/tmp/c670b023-4ad0-4551-b134-5ce6b7069585_fixed.java
@@ -1,74 +1,135 @@
     private void inlineNonConstants(
         Var v, ReferenceCollection referenceInfo,
         boolean maybeModifiedArguments) {
       int refCount = referenceInfo.references.size();
       Reference declaration = referenceInfo.references.get(0);
       Reference init = referenceInfo.getInitializingReference();
-      int firstRefAfterInit = (declaration == init) ? 2 : 3;
+      // If init is null, it means the variable is never initialized.
+      // The first reference after init (if init exists) is either the 2nd
+      // (if declaration and init are same) or 3rd reference overall.
+      // If init is null, the first reference after declaration is the 1st read (index 1).
+      int firstRefAfterInitIndex = (init == null) ? 1 : (declaration == init) ? 2 : 3;
+
 
       if (refCount > 1 &&
           isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         // if the variable is referenced more than once, we can only
         // inline it if it's immutable and never defined before referenced.
         Node value;
         if (init != null) {
           value = init.getAssignedValue();
         } else {
           // Create a new node for variable that is never initialized.
           Node srcLocation = declaration.getNode();
           value = NodeUtil.newUndefinedNode(srcLocation);
         }
-        Preconditions.checkNotNull(value);
+        // Value can be null if init node is VAR and has no assigned value.
+        // Example: var x; This case should be handled by isImmutableAndWellDefinedVariable check.
+        Preconditions.checkNotNull(value, "Value is null for %s", v.getName());
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
-      } else if (refCount == firstRefAfterInit) {
-        // The variable likely only read once, try some more
-        // complex inlining heuristics.
+      } else if (init != null && refCount == firstRefAfterInitIndex) {
+        // The variable likely only read once after initialization.
+        // Try some more complex inlining heuristics.
         Reference reference = referenceInfo.references.get(
-            firstRefAfterInit - 1);
-        if (canInline(declaration, init, reference)) {
+            firstRefAfterInitIndex - 1);
+        Node value = init.getAssignedValue();
+        // Value could be null for `var x = void 0;` or `var x = undefined;`
+        // Ensure value is not null before proceeding with checks that depend on it.
+        // Also, canInline function likely expects a non-null value.
+        if (value == null) {
+             // Cannot inline null value using this heuristic.
+             return;
+        }
+
+        // Fix for issue 1053: Don't inline single-use variables initialized
+        // with names of non-constant variables. The value assigned might change
+        // between the initialization and the read due to side effects, and the
+        // current canInline check might not be sufficient for this specific case.
+        boolean valueIsPotentiallyChangingName = false;
+        if (value.isName() && !NodeUtil.isImmutableValue(value)) {
+          // Check if the assigned variable is known via scope analysis and not marked constant.
+          Var valueVar = init.getScope().getVar(value.getString());
+          if (valueVar == null || !isMarkedConstant(valueVar)) {
+             // If var is unknown (e.g., implicit global) or known but not constant,
+             // assume it might change between init and the single read.
+             valueIsPotentiallyChangingName = true;
+          }
+        }
+
+        // Only call canInline if the value is not a potentially changing variable name.
+        // Let canInline handle other cases (e.g., immutable values, literals, potentially safe names).
+        if (!valueIsPotentiallyChangingName && canInline(declaration, init, reference)) {
           inline(v, declaration, init, reference);
           staleVars.add(v);
         }
-      } else if (declaration != init && refCount == 2) {
+      } else if (declaration != init && init != null && refCount == 2) {
+         // This case means the variable is declared, initialized, and never read.
+         // init != null check added for safety.
         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
           // The only reference is the initialization, remove the assignment and
           // the variable declaration.
           Node value = init.getAssignedValue();
-          Preconditions.checkNotNull(value);
+          // Value could be null for var x = void 0;
+          if (value != null) {
+             // Original code uses inlineWellDefinedVariable here. It replaces
+             // all references (just the init one) with the value.
              inlineWellDefinedVariable(v, value, referenceInfo.references);
              staleVars.add(v);
           }
+           // If value is null, there's nothing to inline. Let RemoveUnusedVariables handle it.
+        }
       }
 
       // If this variable was not inlined normally, check if we can
       // inline an alias of it. (If the variable was inlined, then the
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
           referenceInfo.isAssignedOnceInLifetime()) {
           // Inlining the variable based solely on well-defined and assigned
           // once is *NOT* correct. We relax the correctness requirement if
           // the variable is declared constant.
         List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
+        // Start checking from the first reference that isn't the init/declaration.
+        int firstReadIndex = referenceInfo.getInitializeIndex();
+        if (firstReadIndex < 0) { // check if init exists
+             firstReadIndex = referenceInfo.getDeclarationIndex();
+        }
+        firstReadIndex++; // Start after init/declaration.
+
+
+        if (firstReadIndex < refs.size()) {
+            for (int i = firstReadIndex; i < refs.size(); i++) {
               Node nameNode = refs.get(i).getNode();
-          if (aliasCandidates.containsKey(nameNode)) {
+              // Check aliasCandidates only for NAME nodes that are being read.
+              if (nameNode != null && nameNode.isName() && aliasCandidates.containsKey(nameNode)) {
                 AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
+                // Check if the alias is valid and not already handled.
+                if (candidate != null && candidate.alias != v && // Don't alias self
+                    candidate.refInfo != null && // Safety check
+                    !staleVars.contains(candidate.alias) &&
                     !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
-              Node value = aliasInit.getAssignedValue();
-              Preconditions.checkNotNull(value);
+
+                  Reference aliasInit = candidate.refInfo.getInitializingReference();
+                  // Ensure the alias has a valid initialization.
+                  if (aliasInit != null) {
+                      Node aliasValue = aliasInit.getAssignedValue();
+                      if (aliasValue != null) {
+                          // Attempt to inline the alias.
                           inlineWellDefinedVariable(candidate.alias,
-                  value,
+                              aliasValue,
                               candidate.refInfo.references);
                           staleVars.add(candidate.alias);
+                          // Note: inlining the alias here might affect future alias lookups
+                          // if not careful, but staleVars check should prevent re-inlining.
+                      }
+                  }
+                }
               }
             }
         }
       }
     }
\ No newline at end of file
