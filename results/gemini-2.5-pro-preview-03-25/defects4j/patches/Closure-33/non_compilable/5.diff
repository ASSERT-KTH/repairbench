diff --git a/tmp/a326b73c-743d-4fd0-be3d-18132e4c6bb6_buggy.java b/tmp/9cb8c22e-8670-4141-a54a-1396dc6fe74b_fixed.java
index fb2b020..9e54307 100644
--- a/tmp/a326b73c-743d-4fd0-be3d-18132e4c6bb6_buggy.java
+++ b/tmp/9cb8c22e-8670-4141-a54a-1396dc6fe74b_fixed.java
@@ -1,27 +1,37 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
+    if (!this.isAnonymousType()) {
+      return;
+    }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
+            // If the property is not present on the object literal, it may
+            // be missing or undefined. Mark it as optional.
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
+          // Define the property if it's not already defined. Don't redefine
+          // existing properties, since they may be inherited and redefining
+          // them would override the inherited property.
+          if (!hasOwnProperty(prop)) {
             defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
+  }
\ No newline at end of file
