diff --git a/tmp/6b63d193-2db6-46b5-9d3a-4cca3cf5e4de_buggy.java b/tmp/53280d6c-1904-4f56-983d-2476bb7331a4_fixed.java
index fb2b020..fefc735 100644
--- a/tmp/6b63d193-2db6-46b5-9d3a-4cca3cf5e4de_buggy.java
+++ b/tmp/53280d6c-1904-4f56-983d-2476bb7331a4_fixed.java
@@ -1,27 +1,34 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+        // If the property is not declared on this object type AND it doesn't
+        // have this property either, then declare it.
+        // We must check isPropertyTypeDeclared first, so that we don't
+        // add optional properties defined on super types.
+        if (!isPropertyTypeDeclared(prop) && !hasProperty(prop)) {
+          // Infer the property type from the constraint, making it optional
+          // (because it was missing on the object literal).
+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
-          }
           defineInferredProperty(prop, typeToInfer, null);
         }
+        // Do not define inferred properties if the property already exists
+        // on the object literal (even if not explicitly declared).
+        // This preserves the original inferred type of the literal.
+        // Compatibility checks will happen later during unification.
       }
     }
   }
\ No newline at end of file
