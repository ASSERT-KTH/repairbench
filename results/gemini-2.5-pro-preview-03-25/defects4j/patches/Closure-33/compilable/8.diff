diff --git a/tmp/c2712c15-bb10-4229-ab7e-ddcc74f97172_buggy.java b/tmp/60d80372-2448-4f78-96e5-b7227dc2303d_fixed.java
index fb2b020..155bf83 100644
--- a/tmp/c2712c15-bb10-4229-ab7e-ddcc74f97172_buggy.java
+++ b/tmp/60d80372-2448-4f78-96e5-b7227dc2303d_fixed.java
@@ -1,27 +1,49 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
+    // This function is permissive, viewing {a:1} as compatible with {a:number|undefined},
+    // and {} as compatible with {a: number} by inferring an optional property.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+      RecordType constraintRecordType = constraintObj.toMaybeRecordType();
+      for (String prop : constraintRecordType.getOwnPropertyNames()) {
+        JSType propType = constraintRecordType.getPropertyType(prop);
+
+        // If the property is not explicitly declared (e.g., in JSDoc)
+        // AND it's not present on the object literal type itself,
+        // then we infer it from the constraint, making it optional.
+        // This allows an object literal like {} to satisfy a constraint like {prop: number}.
+        // We check !hasProperty before defining, to ensure we don't overwrite
+        // a property declared on the object literal. Type checking handles mismatches
+        // for existing properties.
+        if (!isPropertyTypeDeclared(prop) && !hasProperty(prop)) {
+          // Make the inferred property optional, by unioning with void.
+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
+          defineInferredProperty(prop, typeToInfer, /* propertyNode= */ null);
         }
-          defineInferredProperty(prop, typeToInfer, null);
-        }
+        // NOTE: The previous code had an 'else' path here (effectively):
+        // if (!isPropertyTypeDeclared(prop)) {
+        //   if (!hasProperty(prop)) { .. make optional .. }
+        //   defineInferredProperty(prop, non_optional_prop_type, null);
+        // }
+        // This meant that if a property was present on the literal (hasProperty=true)
+        // but not declared (isPropertyTypeDeclared=false), its type would be
+        // overwritten by the constraint's propType via defineInferredProperty.
+        // This could mask type errors if the literal's type didn't match the
+        // constraint's type. The corrected code avoids this overwrite.
       }
     }
+    // TODO(nicksantos): Handle the case where the constraint object is a function.
+    // TODO(nicksantos): Handle the case where the constraint object is some other
+    // crazy type. Maybe throw an error. Or maybe this is OK.
   }
\ No newline at end of file
