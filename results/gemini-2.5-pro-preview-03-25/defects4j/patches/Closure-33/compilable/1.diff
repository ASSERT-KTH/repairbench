diff --git a/tmp/58317472-0df8-4262-9bca-dbb60c939bb0_buggy.java b/tmp/22a7bfd7-83e1-457e-b958-6d7c48182c6e_fixed.java
index fb2b020..3ad83b5 100644
--- a/tmp/58317472-0df8-4262-9bca-dbb60c939bb0_buggy.java
+++ b/tmp/22a7bfd7-83e1-457e-b958-6d7c48182c6e_fixed.java
@@ -1,27 +1,37 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
+      RecordType constraintRecordType = constraintObj.toMaybeRecordType();
+      for (String prop : constraintRecordType.getOwnPropertyNames()) {
+        JSType propType = constraintRecordType.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
+          // If the property is not explicitly declared on this object type:
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+            // And it is missing from the object literal, define it as possibly undefined.
+            // This handles optional properties in the constraint.
+            JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
-          }
             defineInferredProperty(prop, typeToInfer, null);
           }
+          // If the property exists on the object literal but is not explicitly
+          // declared (i.e., its type is inferred), we do not modify it here.
+          // Overwriting the inferred type with the constraint type could lead
+          // to loss of precision or mask type errors that should be reported
+          // by the type checker later when comparing the inferred type against
+          // the constraint type.
         }
       }
     }
+    // TODO(lhuhn): Handle the case where the constraint is a Function type.
+  }
\ No newline at end of file
