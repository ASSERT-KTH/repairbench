diff --git a/tmp/87e9db7d-36da-4d85-b5ba-9dc3d236d716_buggy.java b/tmp/3ff03bd4-79bc-4a93-959b-efb267971c8c_fixed.java
index fb2b020..ae83f74 100644
--- a/tmp/87e9db7d-36da-4d85-b5ba-9dc3d236d716_buggy.java
+++ b/tmp/3ff03bd4-79bc-4a93-959b-efb267971c8c_fixed.java
@@ -1,27 +1,46 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
+      JSType voidType = getNativeType(JSTypeNative.VOID_TYPE); // Cache void type
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // Property is not declared yet on this object type.
+
+          if (hasProperty(prop)) {
+            // Property exists on the object, but is not declared.
+            // Define it with the type from the constraint, but only if necessary.
+            // This avoids potentially overwriting a more specific type inferred
+            // from the literal with a wider type from the constraint, or causing
+            // unnecessary updates if the types already match.
+            JSType currentType = getPropertyType(prop);
+            // Check if the current inferred type is already equivalent to the constraint type.
+            // If types are already equivalent, no need to redefine.
+            // Use isEquivalentTo for structural type comparison.
+            if (currentType == null || !currentType.isEquivalentTo(propType)) {
+                // Define with the constraint's type if different or no current type.
+                defineInferredProperty(prop, propType, null);
             }
+          } else {
+            // Property is missing from the object. Define it as potentially undefined.
+            JSType typeToInfer = voidType.getLeastSupertype(propType);
             defineInferredProperty(prop, typeToInfer, null);
           }
         }
+        // If the property is already declared (isPropertyTypeDeclared is true),
+        // we assume the main type checking process will handle any potential mismatch
+        // between the declared type and the constraint type.
+      }
     }
   }
\ No newline at end of file
