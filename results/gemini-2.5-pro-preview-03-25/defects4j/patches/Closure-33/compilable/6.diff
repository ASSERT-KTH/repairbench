diff --git a/tmp/f89ae2cf-d2c7-4c18-a047-fb11d0c08661_buggy.java b/tmp/2c3bae95-a103-4ad5-8c8d-1429e653d139_fixed.java
index fb2b020..6237936 100644
--- a/tmp/f89ae2cf-d2c7-4c18-a047-fb11d0c08661_buggy.java
+++ b/tmp/2c3bae95-a103-4ad5-8c8d-1429e653d139_fixed.java
@@ -1,27 +1,56 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
+    // Example:
+    // constraintObj == {prop: (number|undefined)}
     // function f(constraintObj) {}
     // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // We want to modify the object literal {} ('this') to match the constraint,
+    // making its type {prop: (number|undefined)}.
     if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
+      ObjectType constraintRecord = constraintObj.toObjectType(); // Use ObjectType API
+      for (String prop : constraintRecord.getOwnPropertyNames()) {
+        JSType propType = constraintRecord.getPropertyType(prop);
+        // getPropertyType returns null if the property is not defined on the object type.
+        // Record types obtained from parameter types should always have defined properties.
+        if (propType == null) {
+          // This case should ideally not happen for valid record constraints.
+          continue;
+        }
+
+        // We only modify properties that are not explicitly declared on 'this'.
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
+          JSType typeToInfer = null;
+          // getPropertyType returns the type of the property, or null if it's not present.
+          JSType existingType = getPropertyType(prop);
+          boolean needsUpdate = false;
+
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            // Property is missing on 'this'. Define it based on the constraint,
+            // making it optional (union with void).
+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
+            needsUpdate = true; // Definitely need to add the property.
+          } else {
+            // Property exists on 'this'. We might need to update its type to match the constraint.
+            typeToInfer = propType; // The target type is the constraint's type.
+
+            // Check if the existing type is already equivalent to the target type.
+            // Avoid redundant updates if the types already match.
+            // Use equals() for type comparison, handle case where existingType might be null.
+            if (existingType == null || !existingType.equals(typeToInfer)) {
+               needsUpdate = true;
             }
+            // If existingType equals typeToInfer, needsUpdate remains false.
+          }
+
+          // Only call defineInferredProperty if we determined an update is needed.
+          // This avoids unnecessary modifications that might trigger side effects.
+          if (needsUpdate) {
             defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
+  }
\ No newline at end of file
