diff --git a/tmp/138c3c22-8630-40ae-a439-876a6b23c0c2_buggy.java b/tmp/ef7aa960-9799-4cb1-8e17-c638c5fff3b4_fixed.java
index fb2b020..fa40060 100644
--- a/tmp/138c3c22-8630-40ae-a439-876a6b23c0c2_buggy.java
+++ b/tmp/ef7aa960-9799-4cb1-8e17-c638c5fff3b4_fixed.java
@@ -1,27 +1,45 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
+        // Don't declare properties that are already declared.
+        // Also, don't try to infer properties from types that may not have
+        // them (like Unknown).
+        if (!isPropertyTypeDeclared(prop) &&
+            !propType.isUnknownType()) {
+          JSType typeToInfer = null;
           if (!hasProperty(prop)) {
+            // If the property is not on the object, mark it as optional.
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
+          } else {
+             // If the property is on the object, union the inferred type
+             // with the type already there.
+             JSType existingType = getPropertyType(prop);
+             if (existingType == null) {
+                existingType = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+             }
+             // TODO(nicksantos): This seems wrong. We should be taking
+             // the meet of the two types. Wait for kamidin to fix this.
+             typeToInfer = existingType.getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
+
+    // TODO(nicksantos): Handle the case where the constraint object is a
+    // function prototype. We may need to make this function recursive later.
   }
\ No newline at end of file
