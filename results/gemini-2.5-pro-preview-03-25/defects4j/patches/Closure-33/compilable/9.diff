diff --git a/tmp/c714e2db-3aee-4b99-9488-6394cf3d6d03_buggy.java b/tmp/3ff9329a-a853-4e8b-b9fe-4ad654009f8e_fixed.java
index fb2b020..a7cba54 100644
--- a/tmp/c714e2db-3aee-4b99-9488-6394cf3d6d03_buggy.java
+++ b/tmp/3ff9329a-a853-4e8b-b9fe-4ad654009f8e_fixed.java
@@ -1,27 +1,30 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
+      RecordType constraintRecordType = constraintObj.toMaybeRecordType();
+      for (String prop : constraintRecordType.getOwnPropertyNames()) {
+        JSType constraintPropType = constraintRecordType.getPropertyType(prop);
+        // If the property is not declared and is missing from the object literal,
+        // infer it as optional from the constraint. This handles optional properties.
+        // Don't overwrite properties that are already present in the literal;
+        // let the type checker handle mismatches between the literal's inferred type
+        // and the constraint type (addresses Issue 700).
+        if (!hasProperty(prop) && !isPropertyTypeDeclared(prop)) {
+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+              .getLeastSupertype(constraintPropType);
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
