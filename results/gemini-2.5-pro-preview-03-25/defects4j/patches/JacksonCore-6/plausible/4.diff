diff --git a/tmp/492fea64-574a-4423-bf56-6b72e42a7835_buggy.java b/tmp/d37abae1-5a77-49de-83d5-fea5c338d06d_fixed.java
index c3c1a6f..dda2e44 100644
--- a/tmp/492fea64-574a-4423-bf56-6b72e42a7835_buggy.java
+++ b/tmp/d37abae1-5a77-49de-83d5-fea5c338d06d_fixed.java
@@ -1,22 +1,32 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [core#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
-        // [core#176]: no leading zeroes allowed
-        for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i);
-            if (c > '9' || c < '0') {
+        // [core#176]: no leading zeroes allowed unless valid single '0'
+        char c = str.charAt(0);
+        // first check: all digits?
+        for (int i = 1; i < len; ++i) {
+            char d = str.charAt(i);
+            if (d > '9' || d < '0') {
                 return -1;
             }
         }
+        
+        // First char has to be digit: but also, can not be '0' if length is > 1
+        if (c > '9' || c < '0' || (c == '0' && len > 1) ) {
+             return -1;
+        }
+
+        // Next: check for potential overflow for 10-digit numbers
         if (len == 10) {
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
+        // If all checks pass, parse the integer
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
