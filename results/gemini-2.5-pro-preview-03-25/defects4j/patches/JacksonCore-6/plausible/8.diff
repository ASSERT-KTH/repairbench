diff --git a/tmp/b384c4b0-5178-4153-902e-d5071666d81d_buggy.java b/tmp/b1d55f88-8921-45c1-84c9-fa5f13883371_fixed.java
index c3c1a6f..9eaad10 100644
--- a/tmp/b384c4b0-5178-4153-902e-d5071666d81d_buggy.java
+++ b/tmp/b1d55f88-8921-45c1-84c9-fa5f13883371_fixed.java
@@ -1,22 +1,37 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [core#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
         // [core#176]: no leading zeroes allowed
-        for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i);
+        char c = str.charAt(0);
+        // If single digit, '0' is fine
+        if (len == 1) {
+            if (c >= '0' && c <= '9') {
+                 // fine, we checked length == 1 above, so just parse
+                 return NumberInput.parseInt(str);
+             }
+             return -1;
+        }
+        // If multiple digits, first digit must be > '0'
+        if (c <= '0' || c > '9') { // Also catches invalid first chars
+            return -1;
+        }
+        // And subsequent ones must be digits
+        for (int i = 1; i < len; ++i) {
+            c = str.charAt(i);
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
+        // Finally, let's check potential overflow only for the biggest possible numbers
         if (len == 10) {
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
