diff --git a/tmp/1ec0b457-7a74-4db8-9662-0e79a9f93df6_buggy.java b/tmp/fd730154-c217-4e23-8c25-c79030263532_fixed.java
index c3c1a6f..0b04003 100644
--- a/tmp/1ec0b457-7a74-4db8-9662-0e79a9f93df6_buggy.java
+++ b/tmp/fd730154-c217-4e23-8c25-c79030263532_fixed.java
@@ -1,22 +1,41 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [core#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
         // [core#176]: no leading zeroes allowed
-        for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i);
+        // Check characters first AND leading zero condition
+        char c = str.charAt(0);
+        // First char must be a digit
+        if (c < '0' || c > '9') {
+             return -1;
+        }
+
+        // If len > 1, first char cannot be '0'
+        if (len > 1) {
+            if (c == '0') {
+                 return -1; // Leading zero with length > 1 is invalid
+            }
+            // Check remaining characters
+            for (int i = 1; i < len; ++i) {
+                c = str.charAt(i);
                 if (c > '9' || c < '0') {
                     return -1;
                 }
             }
+        }
+        // Note: we know len > 0 at this point and if len > 1, first char is not '0'.
+        // Also, all characters are digits.
+
+        // Check for potential overflow if len == 10
         if (len == 10) {
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
+        // If checks pass, parse as int
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
