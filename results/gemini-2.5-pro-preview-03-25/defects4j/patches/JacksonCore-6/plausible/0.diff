diff --git a/tmp/2d3c5d8e-ae4a-4798-83d6-d09bc82bc42e_buggy.java b/tmp/f1683d55-4843-4c41-ab48-05fe98d76bb2_fixed.java
index c3c1a6f..abd6999 100644
--- a/tmp/2d3c5d8e-ae4a-4798-83d6-d09bc82bc42e_buggy.java
+++ b/tmp/f1683d55-4843-4c41-ab48-05fe98d76bb2_fixed.java
@@ -1,22 +1,42 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [core#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
-        // [core#176]: no leading zeroes allowed
-        for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i);
+        // [core#176]: no leading zeroes allowed unless len == 1
+        char c = str.charAt(0);
+        // if len > 1, first char ('c') cannot be '0'
+        if (len > 1) {
+            if (c == '0') {
+               return -1;
+            }
+        } else {
+            // len == 1
+            // if not digit, invalid
+            if (c < '0' || c > '9') {
+               return -1;
+            }
+            // otherwise, digit '0' through '9', return value
+            return c - '0';
+        }
+
+        // Check trailing chars, ensure all are digits
+        for (int i = 1; i < len; ++i) {
+            c = str.charAt(i);
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
+
+        // Check for potential overflow only if len is 10
         if (len == 10) {
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
+        // If checks passed, parse as int
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
