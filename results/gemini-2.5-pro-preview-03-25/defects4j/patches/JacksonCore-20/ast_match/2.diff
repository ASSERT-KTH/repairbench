diff --git a/tmp/adc53654-9b25-4619-b69e-83abde52b172_buggy.java b/tmp/e0970449-fe25-467f-9c3d-d6a9186dcfd1_fixed.java
index a6f008f..485f0d5 100644
--- a/tmp/adc53654-9b25-4619-b69e-83abde52b172_buggy.java
+++ b/tmp/e0970449-fe25-467f-9c3d-d6a9186dcfd1_fixed.java
@@ -1,11 +1,32 @@
     /**
      * Method that can be called on backends that support passing opaque datatypes of
      * non-JSON formats
      *
      * @since 2.8
      */
     public void writeEmbeddedObject(Object object) throws IOException {
-        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases
-        throw new JsonGenerationException("No native support for writing embedded objects",
-                this);
+        // 01-Sep-2016, tatu: As per [core#318], handle cases for null, byte[]
+        if (object == null) {
+            writeNull();
+            return;
+        }
+        if (object instanceof byte[]) {
+            writeBinary((byte[]) object);
+            return;
+        }
+        // 12-Jan-2017, tatu: Maybe support RawValue? Seems logical.
+        // (used to claim no support for anything)
+        /* 12-Jan-2017, tatu: RawValue NOT supported well enough for this yet:
+            some backends (JSON) MUST copy content, but RawValue does not currently
+            expose content. Fix requires bit more work.
+        if (object instanceof RawValue) {
+            ((RawValue) object).serialize(this);
+            return;
+        }
+        */
+
+        // As per above, consider RawValue at some point
+        // But otherwise we have no standard handling for Objects, indicate failure
+        throw new JsonGenerationException("No native support for writing embedded objects of type "
+                + object.getClass().getName(), this);
     }
\ No newline at end of file
