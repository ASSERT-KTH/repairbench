diff --git a/tmp/748caae7-8b7a-407e-b8f2-81c1073c1026_buggy.java b/tmp/487dddf4-cce1-4e5f-b1a5-d0f049f9947b_fixed.java
index 4e8b037..5ba1650 100644
--- a/tmp/748caae7-8b7a-407e-b8f2-81c1073c1026_buggy.java
+++ b/tmp/487dddf4-cce1-4e5f-b1a5-d0f049f9947b_fixed.java
@@ -1,20 +1,48 @@
     public List getValues(final Option option,
                           List defaultValues) {
-        // initialize the return list
-        List valueList = (List) values.get(option);
+        // 1. Get command-line values
+        // We need to defensively copy the list returned from the map, as it
+        // might be immutable or modified later.
+        List cmdValues = null;
+        List<?> originalCmdValues = (List<?>) values.get(option);
+        if (originalCmdValues != null) {
+             cmdValues = new ArrayList<>(originalCmdValues);
+        }
+
 
-        // grab the correct default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = defaultValues;
+        // 2. Determine effective defaults to use for augmentation or as fallback
+        List defaultsToUse = defaultValues; // Prioritize argument defaults
+        if ((defaultsToUse == null) || defaultsToUse.isEmpty()) {
+            // Fallback to instance defaults if argument defaults are not provided
+            defaultsToUse = (List) this.defaultValues.get(option);
         }
 
-        // augment the list with the default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = (List) this.defaultValues.get(option);
+        // 3. Initialize result list
+        List resultList = null;
+
+        if (cmdValues != null && !cmdValues.isEmpty()) {
+            // Use command-line values as the base
+            resultList = cmdValues; // Already a mutable copy
+
+            // 4. Augment with defaults if command line provided fewer values than available defaults
+            if (defaultsToUse != null && !defaultsToUse.isEmpty()) {
+                int cmdSize = resultList.size();
+                int defSize = defaultsToUse.size();
+
+                if (cmdSize < defSize) {
+                    // Add defaults starting from the index after the last command-line value
+                    resultList.addAll(defaultsToUse.subList(cmdSize, defSize));
+                }
+            }
+        } else {
+            // No command-line values were provided, use the effective defaults directly.
+            // Check if defaultsToUse is non-null before assigning.
+             if (defaultsToUse != null) {
+                 // Defensive copy if we are using defaults directly, as they might be shared/immutable.
+                 resultList = new ArrayList(defaultsToUse);
+             }
         }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
 
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+        // 5. Return result or an immutable empty list if no values are found
+        return resultList == null ? Collections.EMPTY_LIST : resultList;
     }
\ No newline at end of file
