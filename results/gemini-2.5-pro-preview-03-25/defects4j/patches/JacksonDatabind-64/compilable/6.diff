diff --git a/tmp/ae542315-1059-4a70-b38b-38b44f91eada_buggy.java b/tmp/5facb735-325d-4861-b921-91147c5f476c_fixed.java
index 48fe2c7..7b46ab3 100644
--- a/tmp/ae542315-1059-4a70-b38b-38b44f91eada_buggy.java
+++ b/tmp/5facb735-325d-4861-b921-91147c5f476c_fixed.java
@@ -1,133 +1,168 @@
     /**
      * @param contentTypeSer Optional explicit type information serializer
      *    to use for contained values (only used for properties that are
      *    of container type)
      */
     @SuppressWarnings("deprecation")
     protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
         throws JsonMappingException
     {
         // do we have annotation that forces type to use (to declared type or its super type)?
         JavaType serializationType;
         try {
             serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
         } catch (JsonMappingException e) {
+            // TODO: return SimpleBeanPropertyDefinition referring to the Annotated Darn Thing?
+//            prov.reportMappingException(e, "Problem determining serialization type for %s: %s", propDef.getName(), e.getMessage());
+//            return null;
+            // 26-Oct-2016, tatu: Need to be able to indicate problem via `BeanPropertyWriter`...
             return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());
         }
 
         // Container types can have separate type serializers for content (value / element) type
         if (contentTypeSer != null) {
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
              *    type information for contents. Should work well (for JAXB case); can be
              *    revisited if this causes problems.
              */
             if (serializationType == null) {
 //                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
                 serializationType = declaredType;
             }
             JavaType ct = serializationType.getContentType();
             // Not exactly sure why, but this used to occur; better check explicitly:
             if (ct == null) {
                 prov.reportBadPropertyDefinition(_beanDesc, propDef,
                         "serialization type "+serializationType+" has no content");
             }
             serializationType = serializationType.withContentTypeHandler(contentTypeSer);
             ct = serializationType.getContentType();
         }
 
         Object valueToSuppress = null;
         boolean suppressNulls = false;
 
         // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
         JavaType actualType = (serializationType == null) ? declaredType : serializationType;
         
         // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well
         //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)
         //   for declared property type... and finally property annotation overrides
         JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),
                 _defaultInclusion);
 
         // property annotation override
         
         inclV = inclV.withOverrides(propDef.findInclusion());
         JsonInclude.Include inclusion = inclV.getValueInclusion();
 
         if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
             inclusion = JsonInclude.Include.ALWAYS;
         }
         
         switch (inclusion) {
         case NON_DEFAULT:
-            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
-            //    so that if enclosing class has this, we may need to access values of property,
-            //    whereas for global defaults OR per-property overrides, we have more
-            //    static definition. Sigh.
-            // First: case of class/type specifying it; try to find POJO property defaults
-
             // 16-Oct-2016, tatu: Note: if we can not for some reason create "default instance",
             //    revert logic to the case of general/per-property handling, so both
-            //    type-default AND null are to be excluded.
-            //    (as per [databind#1417]
-            if (_useRealPropertyDefaults) {
-                // 07-Sep-2016, tatu: may also need to front-load access forcing now
-                if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {
-                    am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
-                }
+            //    type-default AND null are to be excluded. (as per [databind#1417])
+            // 28-Mar-2017, tatu: WHICH IS TO SAY: behavior is same as NON_EMPTY, without
+            //    special handling for Optionals/References.
+            //    ... so, maybe this becomes wrong. But for now...
+
+            // Related to [databind#1351], [databind#1417]. Trying to fetch the
+            // default value might fail if the bean lacks a default constructor.
+            try {
                  valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
-            } else {
-                valueToSuppress = getDefaultValue(actualType);
-                suppressNulls = true;
+            } catch (Exception e) {
+                 // 08-Sep-2017, tatu: Need to log this for debugging, see [databind#1755]
+                 //   but do not propagate, just fallback
+                 _reportProblem(propDef, "Failed to call default value getter: %s", e);
+                 valueToSuppress = JsonInclude.Include.NON_EMPTY; // or null? marker better
             }
+
             if (valueToSuppress == null) {
                 suppressNulls = true;
+                // And if we could not determine POJO default value, should revert to
+                // static approach; can't really use annotation defaults as there are none.
+                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; // Use marker then
             } else {
+                // But if we did get a value, require specific equality; except for arrays,
+                // use deep comparison logic
                 if (valueToSuppress.getClass().isArray()) {
                     valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
                 }
             }
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
             // always suppress nulls
             suppressNulls = true;
             // and for referential types, also "empty", which in their case means "absent"
             if (actualType.isReferenceType()) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         case NON_EMPTY:
             // always suppress nulls
             suppressNulls = true;
             // but possibly also 'empty' values:
             valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             break;
         case NON_NULL:
             suppressNulls = true;
             // fall through
         case ALWAYS: // default
         default:
             // we may still want to suppress empty collections, as per [JACKSON-254]:
-            if (actualType.isContainerType()
-                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
+            // (or Strings, Maps)
+            if (actualType.isContainerType() || actualType.isReferenceType()) {
+                 // 21-Jun-2016, tatu: Let's also consider configuration option for empty Arrays
+                 //    as separate; requires enabling feature
+                 if (!_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
                       valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
                  }
+            }
             break;
         }
-        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
-                am, _beanDesc.getClassAnnotations(), declaredType,
+        BeanPropertyWriter bpw = _constructWriter(prov, propDef, am, declaredType,
                  ser, typeSer, serializationType, suppressNulls, valueToSuppress);
 
         // How about custom null serializer?
         Object serDef = _annotationIntrospector.findNullSerializer(am);
         if (serDef != null) {
             bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
         }
         // And then, handling of unwrapping
         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
         if (unwrapper != null) {
             bpw = bpw.unwrappingWriter(unwrapper);
         }
         return bpw;
     }
+
+    // @since 2.9 -- helper method introduced to avoid complexity warnings
+    private BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef,
+            AnnotatedMember am, JavaType declaredType, JsonSerializer<?> ser,
+            TypeSerializer typeSer, JavaType serializationType, boolean suppressNulls,
+            Object valueToSuppress)
+        throws JsonMappingException
+    {
+         return new BeanPropertyWriter(propDef,
+                 am, _beanDesc.getClassAnnotations(), declaredType,
+                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);
+    }
+
+    // @since 2.9.1 Helper method to contain logic for reporting recoverable problems
+    // (specifically, problems with getting default value)
+    private void _reportProblem(BeanPropertyDefinition propDef, String msg, Object... args)
+    {
+        if (args.length > 0) {
+            msg = String.format(msg, args);
+        }
+        String propName = propDef.getName();
+        throw new IllegalStateException(String.format(
+"Problem constructing prop '%s' (%s): %s",
+propName, propDef.getClass().getName(), msg));
+    }
