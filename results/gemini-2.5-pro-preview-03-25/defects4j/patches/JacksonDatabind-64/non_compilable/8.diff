diff --git a/tmp/9ddaae5d-45a9-4afc-8d07-da8244fddb64_buggy.java b/tmp/36d93288-4e74-4c02-8211-a7df609cf1c9_fixed.java
index 48fe2c7..4d1866d 100644
--- a/tmp/9ddaae5d-45a9-4afc-8d07-da8244fddb64_buggy.java
+++ b/tmp/36d93288-4e74-4c02-8211-a7df609cf1c9_fixed.java
@@ -1,133 +1,147 @@
     /**
      * @param contentTypeSer Optional explicit type information serializer
      *    to use for contained values (only used for properties that are
      *    of container type)
      */
     @SuppressWarnings("deprecation")
     protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
         throws JsonMappingException
     {
         // do we have annotation that forces type to use (to declared type or its super type)?
         JavaType serializationType;
         try {
             serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
         } catch (JsonMappingException e) {
-            return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());
+             // 30-Sep-2019, tatu: For 2.10.1, consider non-fatal, see [databind#2469]
+             prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());
+             return null; // can't proceed
         }
 
         // Container types can have separate type serializers for content (value / element) type
         if (contentTypeSer != null) {
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
              *    type information for contents. Should work well (for JAXB case); can be
              *    revisited if this causes problems.
              */
             if (serializationType == null) {
 //                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
                 serializationType = declaredType;
             }
             JavaType ct = serializationType.getContentType();
             // Not exactly sure why, but this used to occur; better check explicitly:
             if (ct == null) {
+                // Error message improvement from #2623
                 prov.reportBadPropertyDefinition(_beanDesc, propDef,
-                        "serialization type "+serializationType+" has no content");
+                        "serialization type %s has no content type, is not of type `ContainerType`",
+                                serializationType);
             }
             serializationType = serializationType.withContentTypeHandler(contentTypeSer);
             ct = serializationType.getContentType();
         }
 
         Object valueToSuppress = null;
         boolean suppressNulls = false;
 
         // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
         JavaType actualType = (serializationType == null) ? declaredType : serializationType;
         
         // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well
         //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)
         //   for declared property type... and finally property annotation overrides
-        JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),
-                _defaultInclusion);
+        // 01-Mar-2017, tatu: Actually, need to also consider config override
+        JsonInclude.Value inclV = JsonInclude.Value.mergeAll(
+                _config.getDefaultPropertyInclusion(), // lowest precedence
+                _config.getDefaultPropertyInclusion(actualType.getRawClass(), null), // type-specific default
+                _defaultInclusion, // enclosing POJO default
+                propDef.findInclusion() // highest precedence
+                );
         
-        // property annotation override
-        
-        inclV = inclV.withOverrides(propDef.findInclusion());
         JsonInclude.Include inclusion = inclV.getValueInclusion();
 
         if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
             inclusion = JsonInclude.Include.ALWAYS;
         }
         
         switch (inclusion) {
         case NON_DEFAULT:
-            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
-            //    so that if enclosing class has this, we may need to access values of property,
-            //    whereas for global defaults OR per-property overrides, we have more
-            //    static definition. Sigh.
-            // First: case of class/type specifying it; try to find POJO property defaults
+            // [databind#1351]: Default handling has semantics of NON_NULL + NON_DEFAULT,
+            // so first: nulls are always suppressed.
+            suppressNulls = true;
 
-            // 16-Oct-2016, tatu: Note: if we can not for some reason create "default instance",
-            //    revert logic to the case of general/per-property handling, so both
-            //    type-default AND null are to be excluded.
-            //    (as per [databind#1417]
+            Object potentialDefValue;
+            // If we are using POJO defaults, need to grab default value for property
+            // (or fall back to type defaults if that fails)
             if (_useRealPropertyDefaults) {
-                // 07-Sep-2016, tatu: may also need to front-load access forcing now
                 if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {
                     am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                 }
-                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
-            } else {
-                valueToSuppress = getDefaultValue(actualType);
-                suppressNulls = true;
+                try {
+                    potentialDefValue = getPropertyDefaultValue(propDef.getName(), am, actualType);
+                } catch (Exception e) {
+                    // [databind#1417]: safe handling if default value access fails
+                    prov.reportBadDefinition(actualType, String.format(
+                            "Failed to call default constructor of %s to retrieve default value for property '%s': %s",
+                            (actualType.getRawClass().getName()), propDef.getName(), e.getMessage()), e);
+                    potentialDefValue = getDefaultValue(actualType);
+                    // and since nulls are suppressed, default value does not matter if null
+                }
+            } else { // Otherwise we are using type defaults
+                potentialDefValue = getDefaultValue(actualType);
             }
-            if (valueToSuppress == null) {
-                suppressNulls = true;
+            // if default is non-null, record that as value-to-suppress
+            if (potentialDefValue != null) {
+                 if (potentialDefValue.getClass().isArray()) {
+                      valueToSuppress = ArrayBuilders.getArrayComparator(potentialDefValue);
                  } else {
-                if (valueToSuppress.getClass().isArray()) {
-                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
+                     valueToSuppress = potentialDefValue;
                  }
             }
+            // and if default value is null, we already marked null suppression anyway
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
             // always suppress nulls
             suppressNulls = true;
             // and for referential types, also "empty", which in their case means "absent"
             if (actualType.isReferenceType()) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         case NON_EMPTY:
             // always suppress nulls
             suppressNulls = true;
             // but possibly also 'empty' values:
             valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             break;
         case NON_NULL:
             suppressNulls = true;
             // fall through
         case ALWAYS: // default
         default:
             // we may still want to suppress empty collections, as per [JACKSON-254]:
+            // 08-Nov-2015, tatu: Except if explicitly asking for non-null sequences:
             if (actualType.isContainerType()
                     && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         }
+        // If you get this far, this construction should be safe
         BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
                 am, _beanDesc.getClassAnnotations(), declaredType,
                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);
 
         // How about custom null serializer?
         Object serDef = _annotationIntrospector.findNullSerializer(am);
         if (serDef != null) {
             bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
         }
         // And then, handling of unwrapping
         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
         if (unwrapper != null) {
             bpw = bpw.unwrappingWriter(unwrapper);
         }
         return bpw;
     }
\ No newline at end of file
