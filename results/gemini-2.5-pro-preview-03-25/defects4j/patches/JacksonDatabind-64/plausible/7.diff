diff --git a/tmp/af687279-49e3-49d8-930b-839c17bf24b9_buggy.java b/tmp/055d4d1d-bfbd-496b-854a-0c5ea273b55f_fixed.java
index 48fe2c7..8900fed 100644
--- a/tmp/af687279-49e3-49d8-930b-839c17bf24b9_buggy.java
+++ b/tmp/055d4d1d-bfbd-496b-854a-0c5ea273b55f_fixed.java
@@ -1,133 +1,143 @@
     /**
      * @param contentTypeSer Optional explicit type information serializer
      *    to use for contained values (only used for properties that are
      *    of container type)
      */
     @SuppressWarnings("deprecation")
     protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
         throws JsonMappingException
     {
         // do we have annotation that forces type to use (to declared type or its super type)?
         JavaType serializationType;
         try {
             serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
         } catch (JsonMappingException e) {
+            // Trivial placeholder to allow reporting problem later on:
+            // (note: should we instead just return null? Or throw?)
             return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());
         }
 
         // Container types can have separate type serializers for content (value / element) type
         if (contentTypeSer != null) {
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
              *    type information for contents. Should work well (for JAXB case); can be
              *    revisited if this causes problems.
              */
             if (serializationType == null) {
 //                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
                 serializationType = declaredType;
             }
             JavaType ct = serializationType.getContentType();
             // Not exactly sure why, but this used to occur; better check explicitly:
             if (ct == null) {
+                // 03-Apr-2016, tatu: Let's try to figure out if we can report this, without
+                //    causing other problems... (specifically look at `JsonSerializeTest` aspects)
+                // 18-Jun-2016, tatu: As per [databind#1255], need to consider possibility of
+                //    explicit serializer for contents, in which case this check is too strict.
+                if (ser == null) {
                     prov.reportBadPropertyDefinition(_beanDesc, propDef,
                             "serialization type "+serializationType+" has no content");
                 }
+            }
             serializationType = serializationType.withContentTypeHandler(contentTypeSer);
             ct = serializationType.getContentType();
         }
 
         Object valueToSuppress = null;
         boolean suppressNulls = false;
 
         // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
         JavaType actualType = (serializationType == null) ? declaredType : serializationType;
         
         // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well
         //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)
         //   for declared property type... and finally property annotation overrides
         JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),
                 _defaultInclusion);
 
         // property annotation override
         
         inclV = inclV.withOverrides(propDef.findInclusion());
         JsonInclude.Include inclusion = inclV.getValueInclusion();
 
         if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
             inclusion = JsonInclude.Include.ALWAYS;
         }
         
         switch (inclusion) {
         case NON_DEFAULT:
-            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
-            //    so that if enclosing class has this, we may need to access values of property,
-            //    whereas for global defaults OR per-property overrides, we have more
-            //    static definition. Sigh.
-            // First: case of class/type specifying it; try to find POJO property defaults
-
-            // 16-Oct-2016, tatu: Note: if we can not for some reason create "default instance",
-            //    revert logic to the case of general/per-property handling, so both
-            //    type-default AND null are to be excluded.
-            //    (as per [databind#1417]
-            if (_useRealPropertyDefaults) {
-                // 07-Sep-2016, tatu: may also need to front-load access forcing now
+            // 16-Oct-2016, tatu: Let's handle actual default value calculation directly;
+            //   note that we handling is different depending on whether it's based on
+            //   bean property Defaults OR type defaults
+            Object defaultV;
+            if (_useRealPropertyDefaults) { // Try to use default bean value?
                  if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {
                     am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                  }
-                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
-            } else {
-                valueToSuppress = getDefaultValue(actualType);
+                defaultV = getPropertyDefaultValue(propDef.getName(), am, actualType);
+            } else { // Otherwise, use logic based on type
+                defaultV = getDefaultValue(actualType);
+                // For non-bean-based defaults, nulls are always suppressed
+                // (note: redundant WRT later check; check is left just in case)
                 suppressNulls = true;
             }
-            if (valueToSuppress == null) {
+
+            if (defaultV == null) {
                 suppressNulls = true;
+                // valueToSuppress remains null
             } else {
+                // [databind#1417]: For non-null default, we need to suppress
+                // both actual nulls AND the default value.
+                suppressNulls = true;
+                valueToSuppress = defaultV;
                 if (valueToSuppress.getClass().isArray()) {
                     valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
                 }
             }
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
             // always suppress nulls
             suppressNulls = true;
             // and for referential types, also "empty", which in their case means "absent"
             if (actualType.isReferenceType()) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         case NON_EMPTY:
             // always suppress nulls
             suppressNulls = true;
             // but possibly also 'empty' values:
             valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             break;
         case NON_NULL:
             suppressNulls = true;
             // fall through
         case ALWAYS: // default
         default:
-            // we may still want to suppress empty collections, as per [JACKSON-254]:
+            // we may still want to suppress empty collections, as per [databind#254]:
+            // (or maybe not: users are seemingly confused by this setting)
             if (actualType.isContainerType()
                     && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         }
         BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
                 am, _beanDesc.getClassAnnotations(), declaredType,
                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);
 
         // How about custom null serializer?
         Object serDef = _annotationIntrospector.findNullSerializer(am);
         if (serDef != null) {
             bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
         }
         // And then, handling of unwrapping
         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
         if (unwrapper != null) {
             bpw = bpw.unwrappingWriter(unwrapper);
         }
         return bpw;
     }
\ No newline at end of file
