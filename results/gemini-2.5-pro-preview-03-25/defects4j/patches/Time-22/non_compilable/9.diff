diff --git a/tmp/f1e67820-d6d8-499a-922e-a8da552ca841_buggy.java b/tmp/529c8fab-7425-48f0-a477-955a28f95928_fixed.java
index 5b8a4d2..133fe18 100644
--- a/tmp/f1e67820-d6d8-499a-922e-a8da552ca841_buggy.java
+++ b/tmp/529c8fab-7425-48f0-a477-955a28f95928_fixed.java
@@ -1,12 +1,29 @@
     /**
      * Creates a period from the given millisecond duration with the standard period type
      * and ISO rules, ensuring that the calculation is performed with the time-only period type.
      * <p>
      * The calculation uses the hour, minute, second and millisecond fields.
      *
      * @param duration  the duration, in milliseconds
      */
     protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+        // bug [3264409] - calculation should be done using time-only period type
+        // Calculate period values using PeriodType.time() using UTC chronology
+        // This ensures that the duration is broken down into time fields only (h, m, s, ms).
+        PeriodType timeType = PeriodType.time();
+        // Use UTC chronology for duration calculations as it's context-agnostic.
+        Chronology chrono = org.joda.time.chrono.ISOChronology.getInstanceUTC();
+        // Use the chronology to get the field values for the duration according to the time-only type.
+        // The chrono.get method populates an array with values corresponding to the fields in the provided period object's type.
+        // We create a dummy MutablePeriod just to pass the timeType to chrono.get.
+        int[] values = chrono.get(new org.joda.time.MutablePeriod(timeType), duration);
+
+        // Construct the BasePeriod using the constructor that takes all fields.
+        // We explicitly set years, months, weeks, days to zero,
+        // use the calculated hours, minutes, seconds, millis,
+        // and specify the standard PeriodType for the final object.
+        // The indices in the 'values' array correspond to the fields in PeriodType.time():
+        // 0: hours, 1: minutes, 2: seconds, 3: millis
+        // We assume the 8-argument + PeriodType constructor exists and is accessible.
+        this(0, 0, 0, 0, values[0], values[1], values[2], values[3], PeriodType.standard());
     }
\ No newline at end of file
