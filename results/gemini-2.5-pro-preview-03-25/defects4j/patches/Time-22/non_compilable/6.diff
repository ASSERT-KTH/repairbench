diff --git a/tmp/53f2f739-6988-4e56-93ef-0fb963600cbd_buggy.java b/tmp/bccaaa51-bf72-427d-af04-c5d3aaadcb4f_fixed.java
index 5b8a4d2..bc7c96c 100644
--- a/tmp/53f2f739-6988-4e56-93ef-0fb963600cbd_buggy.java
+++ b/tmp/bccaaa51-bf72-427d-af04-c5d3aaadcb4f_fixed.java
@@ -1,12 +1,52 @@
     /**
      * Creates a period from the given millisecond duration with the standard period type
      * and ISO rules, ensuring that the calculation is performed with the time-only period type.
      * <p>
      * The calculation uses the hour, minute, second and millisecond fields.
      *
      * @param duration  the duration, in milliseconds
      */
     protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+        super(); // Call base class constructor
+        
+        // Define the period types involved:
+        // - requiredType: The type this period object should have (standard).
+        // - calcType: The type to use for the initial calculation from duration (time-only).
+        PeriodType requiredType = PeriodType.standard();
+        PeriodType calcType = PeriodType.time();
+        
+        // Obtain the Chronology (ISO default) for the calculation.
+        // Using getInstance() implies default time zone, which is consistent with
+        // how durations without specific instants are typically handled, focusing on magnitudes.
+        // The time field calculations (h, m, s, ms) are independent of time zone for ISO.
+        Chronology chrono = ISOChronology.getInstance();
+
+        // Calculate the period fields using the time-only period type.
+        // Chronology.get(PeriodType, long) calculates the fields based on the duration
+        // according to the rules of the specified PeriodType.
+        // For PeriodType.time(), this yields [hours, minutes, seconds, millis].
+        int[] timeValues = chrono.get(calcType, duration);
+
+        // Create the final values array, sized according to the standard period type.
+        // The standard type includes years, months, weeks, days, hours, minutes, seconds, millis.
+        int[] standardValues = new int[requiredType.size()]; // size is 8 for standard
+
+        // Populate the standardValues array.
+        // Copy the calculated time field values into the correct positions for the standard type.
+        // Indices for PeriodType.standard(): Y=0, M=1, W=2, D=3, h=4, m=5, s=6, ms=7
+        // Indices for PeriodType.time(): h=0, m=1, s=2, ms=3
+        // We map timeValues[0..3] to standardValues[4..7].
+        // The date fields (years, months, weeks, days) remain zero, as per the requirement
+        // that the calculation only uses time fields.
+        standardValues[4] = timeValues[0]; // Hours
+        standardValues[5] = timeValues[1]; // Minutes
+        standardValues[6] = timeValues[2]; // Seconds
+        standardValues[7] = timeValues[3]; // Millis
+        
+        // Set the internal state (type and values) of this BasePeriod instance.
+        // We directly assign to iType and iValues, bypassing other constructors/setters,
+        // to ensure the object represents the computed state accurately.
+        this.iType = requiredType;
+        this.iValues = standardValues;
+        // bug [3264409] fixed by performing calculation with time-only type
     }
\ No newline at end of file
