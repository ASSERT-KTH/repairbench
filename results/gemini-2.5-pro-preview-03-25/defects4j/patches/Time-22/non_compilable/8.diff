diff --git a/tmp/ee9b56ec-079a-4c2f-bf1b-bd2198ca444b_buggy.java b/tmp/dface9fb-a402-4872-84af-c02f446087ea_fixed.java
index 5b8a4d2..f27a2ca 100644
--- a/tmp/ee9b56ec-079a-4c2f-bf1b-bd2198ca444b_buggy.java
+++ b/tmp/dface9fb-a402-4872-84af-c02f446087ea_fixed.java
@@ -1,12 +1,33 @@
     /**
      * Creates a period from the given millisecond duration with the standard period type
      * and ISO rules, ensuring that the calculation is performed with the time-only period type.
      * <p>
      * The calculation uses the hour, minute, second and millisecond fields.
+     * The millisecond duration is converted into a period based on a 24 hour day,
+     * 60 minute hour, 60 second minute and 1000 millisecond second.
+     * The result will have a standard period type, but only the time fields will be populated.
      *
      * @param duration  the duration, in milliseconds
      */
     protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+        // Calculate period values using PeriodType.time() using UTC Chronology
+        // This ensures that the duration is distributed only across time fields H, M, S, Ms.
+        PeriodType timeType = PeriodType.time();
+        // Use UTC chronology for calculation as it is duration based, not calendar based.
+        Chronology chrono = ISOChronology.getInstanceUTC();
+        int[] values = chrono.get(timeType, duration);
+
+        // Extract time field values from the calculation result
+        // PeriodType.time() has H, M, S, Ms fields at indices 0, 1, 2, 3 respectively
+        int hours   = values[0]; // timeType.indexOf(DurationFieldType.hours()) == 0
+        int minutes = values[1]; // timeType.indexOf(DurationFieldType.minutes()) == 1
+        int seconds = values[2]; // timeType.indexOf(DurationFieldType.seconds()) == 2
+        int millis  = values[3]; // timeType.indexOf(DurationFieldType.millis()) == 3
+
+        // Construct the period using the explicit field constructor,
+        // setting date fields to zero and using standard period type.
+        // This fulfills the contract: standard type, but calculated using time-only logic.
+        this(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());
+        // bug [3264409] fixed by recalculating based on time fields only
+        // and using the appropriate constructor to set standard type with correct values.
     }
