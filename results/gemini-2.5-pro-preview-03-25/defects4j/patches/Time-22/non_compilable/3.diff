diff --git a/tmp/9fbed1f5-7ba9-4e96-acb8-1299860363ea_buggy.java b/tmp/cbb18e58-4c2a-4b8e-92bb-d0085921c6ef_fixed.java
index 5b8a4d2..e2d1186 100644
--- a/tmp/9fbed1f5-7ba9-4e96-acb8-1299860363ea_buggy.java
+++ b/tmp/cbb18e58-4c2a-4b8e-92bb-d0085921c6ef_fixed.java
@@ -1,12 +1,37 @@
     /**
      * Creates a period from the given millisecond duration with the standard period type
      * and ISO rules, ensuring that the calculation is performed with the time-only period type.
      * <p>
      * The calculation uses the hour, minute, second and millisecond fields.
+     * The input duration is precise, therefore the calculation does not depend on any
+     * chronology or time zone. The period type is standard (including years, months, etc)
+     * however only the time fields described here are non-zero.
      *
      * @param duration  the duration, in milliseconds
      */
     protected BasePeriod(long duration) {
-        this(duration, null, null);
+        // Constructor delegates to the one specified below,
+        // thus using the standard period type.
+        // The calculation is done manually here to satisfy the contract
+        // which requires basing the calculation on time fields only.
+        // NOTE: This constructor exists to fulfill the contract of
+        // new Period(long) and new MutablePeriod(long).
+        // Javadoc is specific to those classes.
+
+        PeriodType type = PeriodType.standard(); // Resulting type is standard.
+        
+        // Perform the calculation manually for time fields based on precise definitions.
+        long durationMillis = duration;
+        int millis = FieldUtils.safeToInt(durationMillis % DateTimeConstants.MILLIS_PER_SECOND);
+        long R = durationMillis / DateTimeConstants.MILLIS_PER_SECOND;
+        int seconds = FieldUtils.safeToInt(R % DateTimeConstants.SECONDS_PER_MINUTE);
+        R = R / DateTimeConstants.SECONDS_PER_MINUTE;
+        int minutes = FieldUtils.safeToInt(R % DateTimeConstants.MINUTES_PER_HOUR);
+        R = R / DateTimeConstants.MINUTES_PER_HOUR;
+        int hours = FieldUtils.safeToInt(R); // Total hours
+        
+        // Call the constructor that sets all fields, ensuring date fields are zero
+        // and the type is standard, fulfilling the documented behavior.
+        this(0, 0, 0, 0, hours, minutes, seconds, millis, type);
         // bug [3264409]
     }
\ No newline at end of file
