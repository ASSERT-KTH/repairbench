diff --git a/tmp/bf6f220e-5463-44ae-8b12-6660a0419027_buggy.java b/tmp/a45541c0-4448-4140-86b5-8bcdc9f83bce_fixed.java
index 5b8a4d2..e7c28af 100644
--- a/tmp/bf6f220e-5463-44ae-8b12-6660a0419027_buggy.java
+++ b/tmp/a45541c0-4448-4140-86b5-8bcdc9f83bce_fixed.java
@@ -1,12 +1,41 @@
     /**
      * Creates a period from the given millisecond duration with the standard period type
      * and ISO rules, ensuring that the calculation is performed with the time-only period type.
      * <p>
      * The calculation uses the hour, minute, second and millisecond fields.
+     * The chronology used is ISO UTC.
      *
      * @param duration  the duration, in milliseconds
      */
     protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+        this(PeriodType.standard(), // Specify standard type for the resulting period
+             calculateStandardTimeOnlyValues(duration), // Calculate values using time-only logic
+             ISOChronology.getInstanceUTC()); // Use UTC chronology for calculation consistency
+        // bug [3264409] - Fixed by explicitly using time-only calculation logic
+    }
+
+    /**
+     * Calculates period values based only on time fields (H, M, S, Ms)
+     * from a duration, assuming standard definitions (e.g., 60 min/hr).
+     * The returned array matches the order of PeriodType.standard().
+     *
+     * @param duration the duration in milliseconds
+     * @return int[] array of values [Y, M, W, D, H, M, S, Ms]
+     */
+    private static int[] calculateStandardTimeOnlyValues(long duration) {
+        long hours = duration / DateTimeConstants.MILLIS_PER_HOUR;
+        long durationLeft = duration % DateTimeConstants.MILLIS_PER_HOUR;
+        int minutes = (int) (durationLeft / DateTimeConstants.MILLIS_PER_MINUTE);
+        durationLeft %= DateTimeConstants.MILLIS_PER_MINUTE;
+        int seconds = (int) (durationLeft / DateTimeConstants.MILLIS_PER_SECOND);
+        durationLeft %= DateTimeConstants.MILLIS_PER_SECOND;
+        int millis = (int) durationLeft;
+
+        if (hours < Integer.MIN_VALUE || hours > Integer.MAX_VALUE) {
+            throw new ArithmeticException("Period value overflow: Hours");
+        }
+
+        // Return array matching PeriodType.standard() order [Y, M, W, D, H, M, S, Ms]
+        // Date fields are explicitly set to 0 as per the method's contract.
+        return new int[] {0, 0, 0, 0, (int) hours, minutes, seconds, millis};
     }
\ No newline at end of file
