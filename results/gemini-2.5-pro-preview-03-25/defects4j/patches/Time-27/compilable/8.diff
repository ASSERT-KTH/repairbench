diff --git a/tmp/50421d7c-79c9-4623-ad18-aeafa1c6841f_buggy.java b/tmp/d7141bdd-2a46-4cfd-ad15-57b4e0965e4f_fixed.java
index ec6c9ee..1ecef60 100644
--- a/tmp/50421d7c-79c9-4623-ad18-aeafa1c6841f_buggy.java
+++ b/tmp/d7141bdd-2a46-4cfd-ad15-57b4e0965e4f_fixed.java
@@ -1,21 +1,36 @@
     //-----------------------------------------------------------------------
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
-            Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
-        }
+        // The special case handling for a list starting with a Separator was removed.
+        // It was buggy as it returned a PeriodFormatter containing only the separator,
+        // discarding the formatter created from the remaining elements.
+        // The createComposite method is assumed to correctly handle all elements,
+        // including separators at any position.
+        // Original buggy code:
+//        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+//            Separator sep = (Separator) elementPairs.get(0);
+//                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+//                sep = sep.finish(f.getPrinter(), f.getParser());
+//                return new PeriodFormatter(sep, sep); // BUG: Discards f
+//        }
+
+        // General case: create a composite printer/parser from all elements
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
+            // If printing is not supported, ensure the parser is still valid.
+            // comp[1] might be null if elementPairs only contains printers or is empty.
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
+            // If parsing is not supported, ensure the printer is still valid.
+            // comp[0] might be null if elementPairs only contains parsers or is empty.
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
+            // Both printing and parsing are supported.
+            // comp[0] or comp[1] might be null if elementPairs is effectively empty
+            // for either printing or parsing.
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
\ No newline at end of file
