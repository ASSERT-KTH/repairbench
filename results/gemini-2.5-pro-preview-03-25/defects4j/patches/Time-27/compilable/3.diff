diff --git a/tmp/ed97cd9f-8cf2-4ccf-b706-95b3febd28f2_buggy.java b/tmp/ee097ce5-4943-4e21-a507-421b1b815908_fixed.java
index ec6c9ee..d3a4b52 100644
--- a/tmp/ed97cd9f-8cf2-4ccf-b706-95b3febd28f2_buggy.java
+++ b/tmp/ee097ce5-4943-4e21-a507-421b1b815908_fixed.java
@@ -1,21 +1,43 @@
     //-----------------------------------------------------------------------
+    /**
+     * Creates a PeriodFormatter from the specified list of printers and parsers.
+     * <p>
+     * The list elements are printers and parsers. They will be analysed and
+     * combined to form a new formatter. Each element is either a PeriodPrinter,
+     * a PeriodParser or an object that is both.
+     * <p>
+     * The returned formatter will be based on the first element in the list.
+     * If the first element is a Separator, then the returned formatter will be
+     * that separator, but with the subsequent list analysed and formed into
+     * formatters that are passed into the separator.
+     *
+     * @param elementPairs  list of printers and parsers, not null
+     * @param notPrinter  true if shouldn't function as a printer
+     * @param notParser  true if shouldn't function as a parser
+     */
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
+        // Removed the incorrect handling for a leading separator which discarded subsequent elements.
+        // The createComposite method is responsible for correctly handling separators within the list.
+        /*
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
+            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {
                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
                 sep = sep.finish(f.getPrinter(), f.getParser());
                 return new PeriodFormatter(sep, sep);
             }
+        }
+        */
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
\ No newline at end of file
