diff --git a/tmp/8121237c-00df-4fff-9467-213aec69a9a7_buggy.java b/tmp/8d5aaad1-e1cf-4c05-97bf-6842086569a4_fixed.java
index ec6c9ee..900127a 100644
--- a/tmp/8121237c-00df-4fff-9467-213aec69a9a7_buggy.java
+++ b/tmp/8d5aaad1-e1cf-4c05-97bf-6842086569a4_fixed.java
@@ -1,21 +1,32 @@
     //-----------------------------------------------------------------------
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
-            Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
-        }
+        // The following block was removed as it incorrectly handled leading separators.
+        // It recursively processed the tail of the list, finished the leading separator
+        // using the tail's formatter, but then discarded the tail's formatter,
+        // returning a formatter based only on the leading separator.
+        // This logic was flawed and likely unnecessary, as createComposite should handle
+        // all element combinations correctly.
+        // if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+        //     Separator sep = (Separator) elementPairs.get(0);
+        //     PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        //     sep = sep.finish(f.getPrinter(), f.getParser());
+        //     return new PeriodFormatter(sep, sep);
+        // }
+
+        // Rely on createComposite to build the printer/parser pair from all elements.
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
+            // Only parser requested.
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
+            // Only printer requested.
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
+            // Both printer and parser requested.
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
\ No newline at end of file
