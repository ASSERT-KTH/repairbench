diff --git a/tmp/06813e39-553d-4d59-9192-a91124ea1178_buggy.java b/tmp/6a52b055-2836-4399-a6cf-82ae1fbcaa88_fixed.java
index ec6c9ee..fb75495 100644
--- a/tmp/06813e39-553d-4d59-9192-a91124ea1178_buggy.java
+++ b/tmp/6a52b055-2836-4399-a6cf-82ae1fbcaa88_fixed.java
@@ -1,21 +1,28 @@
     //-----------------------------------------------------------------------
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
-            Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
-        }
+        // The special handling for the first element being a separator was flawed.
+        // It skipped the second element and incorrectly used the separator for the whole formatter.
+        // Removing this special case and letting createComposite handle all elements uniformly.
+        // if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+        //     Separator sep = (Separator) elementPairs.get(0);
+        //         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        //         sep = sep.finish(f.getPrinter(), f.getParser());
+        //         return new PeriodFormatter(sep, sep);
+        // }
+
+        // Let createComposite handle the composition of all elements.
         Object[] comp = createComposite(elementPairs);
+
+        // Construct the PeriodFormatter based on the composite components and flags.
         if (notPrinter) {
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
\ No newline at end of file
