diff --git a/tmp/801401b4-5d48-4a43-9680-158894344e82_buggy.java b/tmp/60ec1244-7412-4d04-895b-77aedea4b7c8_fixed.java
index ec6c9ee..9af240a 100644
--- a/tmp/801401b4-5d48-4a43-9680-158894344e82_buggy.java
+++ b/tmp/60ec1244-7412-4d04-895b-77aedea4b7c8_fixed.java
@@ -1,21 +1,27 @@
     //-----------------------------------------------------------------------
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
-            Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
-        }
+        // The special handling for a separator at the start was incorrect,
+        // as createComposite handles the composition of elements including separators.
+        // Removing the faulty block fixes issues where separators are not the first element
+        // or when the composite logic handles separators correctly.
+        // if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+        //     Separator sep = (Separator) elementPairs.get(0);
+        //         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        //         sep = sep.finish(f.getPrinter(), f.getParser());
+        //         return new PeriodFormatter(sep, sep);
+        // }
+
+        // createComposite should handle all element combinations.
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
