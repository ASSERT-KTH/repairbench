diff --git a/tmp/00378ebd-794f-49d7-9879-ba0b6515f021_buggy.java b/tmp/a2bfb0a6-c2e8-4aa0-8816-012a134a2f3f_fixed.java
index 4cce784..dc743a1 100644
--- a/tmp/00378ebd-794f-49d7-9879-ba0b6515f021_buggy.java
+++ b/tmp/a2bfb0a6-c2e8-4aa0-8816-012a134a2f3f_fixed.java
@@ -1,11 +1,29 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // To avoid potential overflow issues when multiplying numerators and denominators,
+        // we perform the comparison using long integers.
+        long n1 = (long) this.numerator;
+        long d1 = (long) this.denominator;
+        long n2 = (long) object.numerator;
+        long d2 = (long) object.denominator;
+
+        // Calculate the difference between the cross products: n1*d2 - n2*d1
+        // The sign of this difference determines the comparison result.
+        long diff = n1 * d2 - n2 * d1;
+
+        // Return -1, 0, or 1 based on the sign of the difference.
+        if (diff < 0L) {
+            return -1; // this fraction is less than the object fraction
+        } else if (diff > 0L) {
+            return 1;  // this fraction is greater than the object fraction
+        } else {
+            // Denominators are guaranteed positive by Fraction constructors.
+            // Therefore, if the difference is 0, the fractions are equal.
+            return 0;  // the fractions are equal
+        }
     }
\ No newline at end of file
