diff --git a/tmp/ad6af7eb-ab90-4c4b-a9e0-b321545a84df_buggy.java b/tmp/fe2800f0-fb46-452f-9101-20ad27dbd4d4_fixed.java
index 4cce784..61a7afc 100644
--- a/tmp/ad6af7eb-ab90-4c4b-a9e0-b321545a84df_buggy.java
+++ b/tmp/fe2800f0-fb46-452f-9101-20ad27dbd4d4_fixed.java
@@ -1,11 +1,25 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // Comparison using double values can lead to precision errors.
+        // Compare based on cross-multiplication: a/b vs c/d <=> ad vs bc
+        // Use long for intermediate products to prevent integer overflow.
+        long n = this.getNumerator(); // assuming getNumerator() returns int
+        long d = this.getDenominator(); // assuming getDenominator() returns int
+        long on = object.getNumerator();
+        long od = object.getDenominator();
+
+        long diff = (n * od) - (on * d);
+
+        if (diff < 0L) {
+            return -1; // this fraction is less than the object fraction
+        } else if (diff > 0L) {
+            return 1;  // this fraction is greater than the object fraction
+        } else {
+            return 0;  // fractions are equal
+        }
     }
\ No newline at end of file
