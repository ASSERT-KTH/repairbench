diff --git a/tmp/cc4e827b-8cff-4e8d-b85a-3de802dc08df_buggy.java b/tmp/e6aa9ccf-9ac3-4375-b4fb-b501a33dd7ad_fixed.java
index 4cce784..fb21087 100644
--- a/tmp/cc4e827b-8cff-4e8d-b85a-3de802dc08df_buggy.java
+++ b/tmp/e6aa9ccf-9ac3-4375-b4fb-b501a33dd7ad_fixed.java
@@ -1,11 +1,27 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // We are comparing a/b with c/d
+        // This is equivalent to comparing a*d with c*b
+        // Use long arithmetic to prevent overflow
+        long n1 = (long) this.getNumerator();
+        long d1 = (long) this.getDenominator();
+        long n2 = (long) object.getNumerator();
+        long d2 = (long) object.getDenominator();
+
+        long comparison = n1 * d2 - (long)n2 * d1;
+
+        if (comparison < 0) {
+            return -1;
+        } else if (comparison > 0) {
+            return 1;
+        } else {
+            return 0;
+        }
+        // Alternative implementation using Long.compare:
+        // return Long.compare(n1 * d2, n2 * d1);
     }
\ No newline at end of file
