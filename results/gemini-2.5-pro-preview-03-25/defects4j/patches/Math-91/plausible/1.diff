diff --git a/tmp/e5bcc5a0-d426-4b62-aa61-dd8b3fc29d3a_buggy.java b/tmp/c71b0371-3b35-41e4-8ce2-aaa4d3c5a1e9_fixed.java
index 4cce784..06e55e5 100644
--- a/tmp/e5bcc5a0-d426-4b62-aa61-dd8b3fc29d3a_buggy.java
+++ b/tmp/c71b0371-3b35-41e4-8ce2-aaa4d3c5a1e9_fixed.java
@@ -1,11 +1,28 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // To compare a/b and c/d, we compare ad and bc.
+        // We need to use long for the intermediate multiplications
+        // to avoid integer overflow.
+        long n1 = this.getNumerator();
+        long d1 = this.getDenominator();
+        long n2 = object.getNumerator();
+        long d2 = object.getDenominator();
+
+        long comparison = (n1 * d2) - (n2 * d1);
+
+        if (comparison < 0L) {
+            return -1;
+        } else if (comparison > 0L) {
+            return 1;
+        } else {
+            // Fractions are equal
+            return 0;
+        }
+        // An alternative implementation using Long.compare:
+        // return Long.compare(n1 * d2, n2 * d1);
     }
\ No newline at end of file
