diff --git a/tmp/fc97cd96-f3b0-466e-9b39-8153a065e686_buggy.java b/tmp/2bdcc195-d2c5-4328-9d54-72330f2c17d3_fixed.java
index e0a0552..f8447d7 100644
--- a/tmp/fc97cd96-f3b0-466e-9b39-8153a065e686_buggy.java
+++ b/tmp/2bdcc195-d2c5-4328-9d54-72330f2c17d3_fixed.java
@@ -1,54 +1,120 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
+     * <p>
+     * Special cases:
+     * <ul>
+     *  <li>The result is always non-negative.</li>
+     *  <li>The GCD of identical numbers is the number itself.</li>
+     *  <li>The GCD of zero and any number is the absolute value of that number.</li>
+     *  <li>The GCD of {@code Integer.MIN_VALUE} and any number is problematic as {@code Math.abs(Integer.MIN_VALUE)} overflows. A specific check for this case is implemented.</li>
+     * </ul>
      *
-     * @param u  a non-zero number
-     * @param v  a non-zero number
-     * @return the greatest common divisor, never zero
+     * @param u  a number
+     * @param v  a number
+     * @return the greatest common divisor, never negative
      */
     private static int greatestCommonDivisor(int u, int v) {
         // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
+        // Short circuit ако u or v is 0 or 1 or -1
+        if (u == 0 || v == 0) {
+            // gcd(0,x) := |x|, non-negative
+             if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: gcd is 2^31");
+             }
+             return Math.abs(u) + Math.abs(v);
+         }
+
+        // Swift return 1 for |u|=1 or |v|=1:
+        // We already handled the case u=0 or v=0
+        // Check for MIN_VALUE specifically, as Math.abs(MIN_VALUE) overflows.
+        if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+             // Check if the other operand is 1 or -1
+            if ( (u == Integer.MIN_VALUE && (v == 1 || v == -1)) ||
+                 (v == Integer.MIN_VALUE && (u == 1 || u == -1)) ) {
+                return 1;
+            }
+             // If u == v == MIN_VALUE, overflow occurs during the algorithm execution
+             // Before the fix for MATH-1391, the algorithm loop would exit with k=31
+             // and throw an ArithmeticException. After the fix, this case is checked upfront.
+             if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {
+                  throw new ArithmeticException("overflow: gcd is 2^31");
+             }
+             // One is MIN_VALUE, the other is > 1 or < -1.
+             // Proceed with the algorithm. The initial check for |u| <= 1 is bypassed.
+         } else if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
+             // Neither is MIN_VALUE, safe to use Math.abs
              return 1;
          }
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
+        // Handle the MIN_VALUE case safely. Assume inputs are not 0.
         if (u>0) { u=-u; } // make u negative
         if (v>0) { v=-v; } // make v negative
+
         // B1. [Find power of 2]
         int k=0;
+        // The check for k<31 is necessary since the shift operation (1<<k) could overflow.
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
         if (k==31) {
+            // This condition is reached only if u == v == Integer.MIN_VALUE.
+            // It might also be reached if the gcd is truly 2^31, which cannot be represented as a positive int.
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0 */
             // B4/B3: cast out twos from t.
             while ((t&1)==0) { // while t is even..
+                // This division is safe because abs(t) <= 2^30 (exact) if u or v started as MIN_VALUE
+                // or abs(t) <= 2^30 if result of (v-u)/2.
                  t/=2; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t>0) {
+                // u = -t is safe because t is positive and odd, hence t <= 2^31 - 1.
                 u = -t;
             } else {
+                // v = t is safe because t is negative and odd, hence t >= - (2^31 - 1).
+                // t cannot be Integer.MIN_VALUE here, as MIN_VALUE is even.
                 v = t;
             }
             // B6/B3. at this point both u and v should be odd.
+            // t = (v - u)/2; The computation (v-u) can overflow if u = MIN_VALUE
+            // This is checked indirectly: if the result t is 0, the loop terminates.
+            // The overflow in v-u leads to correct results for gcd.
             t = (v - u)/2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
         } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+        // gcd is -u*2^k; u is negative. Result must be non-negative.
+        // -u is positive unless u was Integer.MIN_VALUE.
+        // The result is -(u * 2^k) but u is negative, so this is correct.
+        // Handle potential overflow from shift operation (1 << k).
+        // This can happen if k=31, but we already checked for that.
+        // It can also happen if -u is large and k makes the result exceed MAX_VALUE.
+        // E.g. gcd(MIN_VALUE, MIN_VALUE/2) = 2^30. u becomes -1. -u=1. k=30. 1*(1<<30) = 2^30. Okay.
+        // E.g. gcd(MIN_VALUE, 2) = 2. u becomes -1. -u=1. k=1. 1*(1<<1) = 2. Okay.
+        // E.g. gcd(MIN_VALUE, MIN_VALUE) -> throws exception.
+        // Consider the case where -u = Integer.MAX_VALUE + 1 (i.e., MIN_VALUE). This happens if u = MIN_VALUE.
+        // If u = MIN_VALUE at the end, it means the original inputs were u=MIN_VALUE, v=0 or v=MIN_VALUE.
+        // We handle v=0 earlier. We throw for u=v=MIN_VALUE earlier.
+        // So u cannot be MIN_VALUE here. It must be an odd negative number.
+        // Therefore, -u > 0.
+        // Check for potential overflow in the final multiplication.
+        if (-u > (Integer.MAX_VALUE >> k)) { // Check for potential overflow before multiplying
+            throw new ArithmeticException("overflow: gcd is too large for int");
+        }
+        return -u*(1<<k); // gcd is (-u)*2^k -u is the negative odd component
     }
\ No newline at end of file
