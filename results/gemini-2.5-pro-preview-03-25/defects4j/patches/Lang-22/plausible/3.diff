diff --git a/tmp/016ddd4d-f184-4013-903f-801247a5fd97_buggy.java b/tmp/c1072a92-f1b7-4ad5-8643-72a9e9be73db_fixed.java
index e0a0552..e297f1f 100644
--- a/tmp/016ddd4d-f184-4013-903f-801247a5fd97_buggy.java
+++ b/tmp/c1072a92-f1b7-4ad5-8643-72a9e9be73db_fixed.java
@@ -1,54 +1,92 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
+     * <p>
+     * Special cases:
+     * <ul>
+     *  <li>The invocations {@code greatestCommonDivisor(Integer.MIN_VALUE, Integer.MIN_VALUE)},
+     *      {@code greatestCommonDivisor(Integer.MIN_VALUE, 0)} and
+     *      {@code greatestCommonDivisor(0, Integer.MIN_VALUE)} throw an
+     *      {@code ArithmeticException}, because the result would be 2^31, which
+     *      is too large for an int value.</li>
+     *  <li>The result of {@code greatestCommonDivisor(x, x)}, {@code greatestCommonDivisor(0, x)} and
+     *      {@code greatestCommonDivisor(x, 0)} is the absolute value of {@code x}, except
+     *      for the special cases above.</li>
+     *  <li>The invocation {@code greatestCommonDivisor(0, 0)} is 0.</li>
+     * </ul>
      *
-     * @param u  a non-zero number
-     * @param v  a non-zero number
-     * @return the greatest common divisor, never zero
+     * @param u  a number
+     * @param v  a number
+     * @return the greatest common divisor, never negative
+     * @throws ArithmeticException if the result cannot be represented as a non-negative int value
+     * @since 2.1
      */
     private static int greatestCommonDivisor(int u, int v) {
+        // Handle GCD(0,v) = |v|, GCD(u,0) = |u|, GCD(0,0) = 0
+        // Need special handling for MIN_VALUE because Math.abs(MIN_VALUE) = MIN_VALUE (which is negative)
+        if (u == 0 || v == 0) {
+            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            return Math.abs(u) + Math.abs(v);
+        }
+
         // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
-        }
-        // keep u and v negative, as negative integers range down to
+        // Initial check for |u| <= 1 or |v| <= 1 removed - it was incorrect for MIN_VALUE
+
+        // Keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         if (u > 0) { u = -u; } // make u negative
         if (v > 0) { v = -v; } // make v negative
+
         // B1. [Find power of 2]
         int k = 0;
         while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...
             u /= 2; v /= 2; k++; // cast out twos.
         }
         if (k == 31) {
+             // This condition implies that u = v = Integer.MIN_VALUE
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
+
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u & 1) == 1) ? v : -(u / 2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
+
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0 */ // Invariants maintained: u and v are negative and odd
             // B4/B3: cast out twos from t.
             while ((t & 1) == 0) { // while t is even..
+                 // N.B. Integer.MIN_VALUE is even. (-1 * 2^31)
+                 // The loop terminates when t becomes odd or 0.
+                 // It always terminates because t will eventually become odd or 0.
                 t /= 2; // cast out twos
             }
+
             // B5 [reset max(u,v)]
-            if (t>0) {
-                u = -t;
-            } else {
-                v = t;
+            // Now t is odd.
+            if (t > 0) { // t is positive odd
+                u = -t; // u is now negative odd
+            } else {    // t is negative odd (or 0 if loop terminates)
+                v = t;  // v is now negative odd (or 0)
             }
-            // B6/B3. at this point both u and v should be odd.
+
+            // B6/B3. at this point both u and v should be negative and odd.
             t = (v - u) / 2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
+            // If v == u, then t is 0, loop terminates.
+            // Since u and v are both odd, v-u is even, so division by 2 is exact.
         } while (t != 0);
-        return -u*(1<<k); // gcd is u*2^k
+
+        // gcd is |u| * 2^k or |v| * 2^k
+        // Since u is kept negative, the final |gcd| is -u
+        // Add back common powers of 2
+        return -u * (1 << k); // gcd is |u| * 2^k
     }
\ No newline at end of file
