diff --git a/tmp/4f4e7a70-aaf3-4bf3-9193-db95afb159de_buggy.java b/tmp/1669cda8-d123-4691-b041-1f437b83c4ac_fixed.java
index e0a0552..46d5a58 100644
--- a/tmp/4f4e7a70-aaf3-4bf3-9193-db95afb159de_buggy.java
+++ b/tmp/1669cda8-d123-4691-b041-1f437b83c4ac_fixed.java
@@ -1,54 +1,100 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
         // From Commons Math:
         //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
+        // Note: Cannot use Math.abs(int) as it may overflow
+        if (u == 0 || v == 0) {
+            // According to Knuth 4.5.2 Algorithm B, gcd(a, 0) = |a|
+            // However, this method requires non-zero args. If we relax this constraint,
+            // handling it here avoids issues with the negative number logic below.
+            // Need to handle Integer.MIN_VALUE carefully.
+             if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: gcd is 2^31");
+             }
+             return Math.abs(u + v); // If u=0, returns |v|; if v=0 returns |u|
+        }
+
+        // Handling MIN_VALUE is tricky. Math.abs(MIN_VALUE) returns MIN_VALUE.
+        // The original code's initial check was `if (Math.abs(u) <= 1 || Math.abs(v) <= 1)`
+        // which incorrectly evaluated to true for `u = MIN_VALUE` because MIN_VALUE <= 1.
+        // We need to correctly check if the absolute value is 1.
+        long absU = Math.abs((long)u);
+        long absV = Math.abs((long)v);
+        if (absU == 1 || absV == 1) {
             return 1;
         }
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         if (u>0) { u=-u; } // make u negative
         if (v>0) { v=-v; } // make v negative
         // B1. [Find power of 2]
         int k=0;
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
         if (k==31) {
+             // We handling the case gcd(MIN_VALUE, MIN_VALUE) here.
+             // Also gcd(MIN_VALUE, 0) and gcd(0, MIN_VALUE) are ruled out by parameter validation.
+             // Could be gcd(Integer.MIN_VALUE, x) where x is some multiple of 2^31 - cannot happen for int.
+             // Could be gcd(x, y) where result is 2^31 - eg gcd(2^31, 2^31). Handled above?
+             // Needs review for other cases eg gcd(MIN_VALUE, 2^30*k)?
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
             while ((t&1)==0) { // while t is even..
+                // Possible overflow here? Min value is -2^31. If t = -2^31 / 2^k,
+                // it should be safe as k < 31 ensures t != MIN_VALUE here?
+                // No, t could be MIN_VALUE if u was MIN_VALUE and v was odd.
+                // e.g. gcd(MIN_VALUE, 1) -> u=MIN_VALUE, v=-1, k=0. t = v = -1. Ok.
+                // e.g. gcd(MIN_VALUE, 3) -> u=MIN_VALUE, v=-3, k=0. t = v = -3. Ok.
+                // e.g. gcd(MIN_VALUE+1, MIN_VALUE) -> u=MIN_VALUE+1, v=MIN_VALUE, k=0.
+                //      u=- (MIN_VALUE+1) = MAX_VALUE, v=MIN_VALUE
+                //      (u&1)==1 -> true. t = v = MIN_VALUE.
+                //      while((MIN_VALUE & 1) == 0) -> true.
+                //      t /= 2 -> t = MIN_VALUE / 2. continues... ok.
                 t/=2; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t>0) {
                 u = -t;
             } else {
                 v = t;
             }
             // B6/B3. at this point both u and v should be odd.
+            // u and v are negative. v-u is (-ve) - (-ve). Can overflow?
+            // Example: v = -1, u = MIN_VALUE. v-u = -1 - MIN_VALUE = -1 + MAX_VALUE + 1 = MAX_VALUE. ok.
+            // Example: v = MIN_VALUE, u = -1. v-u = MIN_VALUE - (-1) = MIN_VALUE + 1. ok.
             t = (v - u)/2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
         } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+        // Rationale for return value: gcd(u, v) = gcd(u, u-v). At the end, t=0 implies u=v.
+        // Since u, v are kept negative, u holds -gcd of odd parts.
+        // Multiply by 2^k and negate to get positive gcd.
+        // Result is -u * 2^k. -u cannot overflow if u is negative and not MIN_VALUE.
+        // Could u be MIN_VALUE here?
+        // If loop terminates, u=v. If u=v=MIN_VALUE, this case is handled by k=31 check.
+        // If gcd(MIN_VALUE, x) = g > 1. Example gcd(MIN_VALUE, 2)=2. Final u = -1. Return -(-1) * 2 = 2.
+        // If gcd(MIN_VALUE, x) = 1. Example gcd(MIN_VALUE, 3)=1. Final u = -1. Return -(-1) * 1 = 1.
+        // Seems safe.
+        return -u*(1<<k); // gcd is -u*2^k
     }
\ No newline at end of file
