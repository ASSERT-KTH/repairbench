diff --git a/tmp/54662a04-a1ef-46c7-bc5c-013d621ae8a4_buggy.java b/tmp/317bb565-08a1-4bc0-93d4-f46d98d149f2_fixed.java
index e0a0552..e648130 100644
--- a/tmp/54662a04-a1ef-46c7-bc5c-013d621ae8a4_buggy.java
+++ b/tmp/317bb565-08a1-4bc0-93d4-f46d98d149f2_fixed.java
@@ -1,54 +1,109 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
         // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
+        // Initial check forkBtu special cases involving 0 or 1.
+        // Note: The original code's check Math.abs(u) <= 1 || Math.abs(v) <= 1 was incorrect
+        // because Math.abs(Integer.MIN_VALUE) returns Integer.MIN_VALUE, which is <= 1.
+        // We handle the special case of 1 or -1 first.
+        if (u == 0 || v == 0) {
+            // Gcd(0,x) := |x|, as per Knuth V.2 section 4.5.2 algorithm A.
+            // The Euclidean algorithm, upon which the binary algorithm is based,
+            // also follows this behavior.
+            // See https:// DRAFT :: N1570 Committee Draft April 12, 2011 WG14/N1570 state=mathml http%3A//www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf K.5.6.4.2
+            // However, Javadoc says inputs are non-zero. Adding this check defensively or
+            // assuming this method is only called with non-zero inputs per its contract.
+            // If inputs can be zero, the code needs adjustment. Assuming non-zero based on Javadoc.
+            // If Math.abs(u) or Math.abs(v) is Integer.MIN_VALUE, it means u or v is MIN_VALUE.
+            // Need to handle GCD with MIN_VALUE appropriately.
+            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: gcd is 2^31");
             }
+            return Math.abs(u) + Math.abs(v); // If one is 0, |u| + |v| = |non-zero value|.
+        }
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         if (u>0) { u=-u; } // make u negative
         if (v>0) { v=-v; } // make v negative
+
+        // Correct check for |u|=1 or |v|=1.
+        // After negation, u and v are <= -1.
+        // If either u or v is -1, the greatest common divisor is 1.
+        if (u == -1 || v == -1) {
+             return 1;
+        }
+
         // B1. [Find power of 2]
         int k=0;
+        // This loop must terminate after at most 31 iterations if u or v is != 0.
+        // If u = MIN_VALUE and v = MIN_VALUE, k will reach 31.
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
         if (k==31) {
+            // Handles the case u=MIN_VALUE, v=MIN_VALUE. GCD is 2^31.
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
+        // u and v are still negative. K is the power of 2 removed.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
+        // Note: If u is even, u/2 is negative, -u/2 is positive and won't overflow.
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0; */ // u and v stay negative, non-zero.
             // B4/B3: cast out twos from t.
+            // while t is even..
+            // The check (t&1)==0 is equivalent to (t%2)==0
+            // N.B. Integer division "/" rounds towards zero. Results may differ from Knuth's needs.
+            // However, this seems ok as the loop just extracts factors of 2.
+            // Example: If t = -4, t/2 = -2. If t = -6, t/2 = -3.
             while ((t&1)==0) { // while t is even..
+                 // This division is safe because t!=0 (loop condition is t!=0)
                 t/=2; // cast out twos
             }
             // B5 [reset max(u,v)]
-            if (t>0) {
-                u = -t;
-            } else {
-                v = t;
+            // Now t is odd.
+            // N.B. u and v are kept negative. Store negative values:
+            if (t>0) { // t is positive odd
+                u = -t; // u is negative odd
+            } else { // t is negative odd
+                v = t; // v is negative odd
             }
-            // B6/B3. at this point both u and v should be odd.
+            // B6/B3. at this point both u and v should be odd and negative.
+            // t = (v - u)/2; // Replace the negative of the larger value
+            // Knuth Algorithm B step B6: t := (v-u)/2
+            // Since u, v are negative, v-u is (-ve) - (-ve) = difference.
+            // If |v| > |u|, v is more negative, v-u is negative. e.g. v=-8, u=-2, v-u = -6.
+            // If |u| > |v|, u is more negative, v-u is positive. e.g. v=-2, u=-8, v-u = 6.
             t = (v - u)/2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
+            // For negative numbers, |v| larger means v < u. Then v - u < 0. t is negative. Store in v.
+            // For negative numbers, |u| larger means u < v. Then v - u > 0. t is positive. Store in u (as -t).
+            // The logic in B5 seems correct.
+
+            // Integer division t = (v-u)/2 rounds towards zero. Knuth needs exact division.
+            // Since u and v are now both odd, v-u is always even, so division by 2 is exact.
         } while (t!=0);
+        // gcd is |u|*2^k = -u*2^k
+        // The result is -u * (1 << k). Check for overflow.
+        // At this point, -u is the odd part of the gcd. It's > 0.
+        // k is the power of 2. (1<<k) is 2^k.
+        // The gcd is (-u) * 2^k.
+        // The only case where the result can be 2^31 (MIN_VALUE) is gcd(MIN_VALUE, MIN_VALUE),
+        // which was already handled by the k=31 check.
+        // Otherwise, the gcd is <= 2^30, which fits in a positive int.
+        // The multiplication -u * (1 << k) should not overflow.
         return -u*(1<<k); // gcd is u*2^k
     }
\ No newline at end of file
