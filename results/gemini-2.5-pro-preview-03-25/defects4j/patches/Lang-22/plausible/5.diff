diff --git a/tmp/b56e5129-23f9-4859-83a8-d7ab4f188baf_buggy.java b/tmp/d29b2b89-3068-42db-8d63-66a1d350ba10_fixed.java
index e0a0552..56eeb9e 100644
--- a/tmp/b56e5129-23f9-4859-83a8-d7ab4f188baf_buggy.java
+++ b/tmp/d29b2b89-3068-42db-8d63-66a1d350ba10_fixed.java
@@ -1,54 +1,122 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
         // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
-        }
+        // Initial check for |u| <= 1 or |v| <= 1 removed as it was incorrect
+        // for Integer.MIN_VALUE due to Math.abs(Integer.MIN_VALUE) overflowing.
+        // The binary algorithm below handles gcd(x, 1) and gcd(x, -1) correctly.
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
+        // Handle Integer.MIN_VALUE carefully.
+        if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+            // If either is Integer.MIN_VALUE, we cannot make them positive.
+            // Need to handle this case specifically or ensure the algorithm works with MIN_VALUE.
+            // The binary algorithm works with negative numbers, so MIN_VALUE is handled.
+            // Check for the case gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)
+            if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {
+                 throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            // If only one is MIN_VALUE, the relative magnitude logic might need adjustment?
+            // Let's verify the binary algorithm logic with MIN_VALUE.
+            // The core issue was the Math.abs() check, removing it might be sufficient.
+            // Let's proceed with the standard binary algorithm implementation
+            // which keeps numbers negative.
+        }
+
+        // Make u and v negative, if necessary. Handles MIN_VALUE correctly.
         if (u>0) { u=-u; } // make u negative
         if (v>0) { v=-v; } // make v negative
+
         // B1. [Find power of 2]
         int k=0;
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
+        // This check is needed because the final multiplication -u * (1 << k)
+        // can overflow if k = 31. For k=31, gcd is 2^31, which is Integer.MIN_VALUE
+        // if treated as signed, or abs(Integer.MIN_VALUE).
         if (k==31) {
+            // This condition implies u = v = Integer.MIN_VALUE originally. Handled above?
+            // No, can happen if u = MIN_VALUE, v = 0, but v is non-zero by Javadoc.
+            // Can happen if u = MIN_VALUE, v = MIN_VALUE.
+            // It indicates that the gcd is 2^31.
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
+        // Note: -(u/2) could overflow if u = Integer.MIN_VALUE.
+        // Example: u = MIN_VALUE, v = -1 (after B1). u is even. t = -(MIN_VALUE/2) = -(-2^30) = 2^30. OK.
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
             while ((t&1)==0) { // while t is even..
                 t/=2; // cast out twos
             }
             // B5 [reset max(u,v)]
+            // Update u or v based on sign of t
             if (t>0) {
+                // u = -t, where t is positive and odd.
+                // Cannot overflow, as max t = 2^30 if derived from -(MIN_VALUE/2).
                 u = -t;
             } else {
+                // v = t, where t is negative and odd.
+                // Max magnitude of t is MAX_VALUE + 1 = MIN_VALUE? No.
+                // If initial u = odd, t=v. If initial v = MIN_VALUE, t = MIN_VALUE.
+                // After casting out twos, t could be -1.
+                // If initial u=even(MIN_VALUE), v=odd, t=-(u/2)=positive. This path OK.
+                // If initial u=odd, v=even(MIN_VALUE), t=v=MIN_VALUE.
+                // Cast out twos from MIN_VALUE: t = MIN_VALUE/2 ... /2 = -1.
+                // So v = t assignment is safe.
                 v = t;
             }
-            // B6/B3. at this point both u and v should be odd.
+            // B6/B3. at this point both u and v should be negative and odd.
+            // t = (v - u)/2;
+            // u and v are negative. Let u = -a, v = -b, where a,b are positive odd.
+            // t = (-b - (-a))/2 = (a - b)/2. This is safe from overflow.
             t = (v - u)/2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
+            // |u| larger: |-a| > |-b| -> a > b -> a-b > 0 -> t positive (replace u)
+            // |v| larger: |-b| > |-a| -> b > a -> a-b < 0 -> t negative (replace v)
         } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+        // When t=0, u=v. gcd is -u * 2^k.
+        // Since u is negative and cannot be MIN_VALUE at this point (as that would imply k=31 case),
+        // -u is positive and <= MAX_VALUE.
+        // Result = -u * (1 << k). Max k is 30. Max result is MAX_VALUE * 2^30, fits in long.
+        // Can it overflow int? Yes, if -u * (1 << k) > MAX_VALUE.
+        // e.g. gcd(2^30, 3*2^30) = 2^30. u = -2^30, v= -3*2^30. k=30. u=-1, v=-3.
+        // B2: u odd, t=v=-3.
+        // B4: t=-3.
+        // B5: v=-3. u=-1, v=-3.
+        // B6: t=(v-u)/2 = (-3 - (-1))/2 = -1.
+        // Loop:
+        // B4: t=-1.
+        // B5: v=-1. u=-1, v=-1.
+        // B6: t = (-1 - (-1))/2 = 0.
+        // Exit loop. Return -u * (1 << k) = -(-1) * (1 << 30) = 1 * 2^30 = 1073741824. OK.
+        // e.g. gcd(Integer.MAX_VALUE, 1) = 1. u=-(MAX_VALUE), v=-1. k=0.
+        // B2: u odd. t=v=-1.
+        // B4: t=-1.
+        // B5: v=-1. u=-(MAX_VALUE), v=-1.
+        // B6: t = (-1 - (-(MAX_VALUE)))/2 = (MAX_VALUE - 1)/2. Positive.
+        // Loop:
+        // B4: t=(MAX_VALUE - 1)/2 (odd).
+        // B5: u = -t = -(MAX_VALUE - 1)/2. u=-(MAX_VALUE - 1)/2, v=-1.
+        // B6: t = (v-u)/2 = (-1 - (-(MAX_VALUE - 1)/2))/2 = ((MAX_VALUE - 1)/2 - 1) / 2 = (MAX_VALUE - 3)/4. Positive.
+        // ... eventually u will become -1.
+        // Suppose final u=-1. Return -u * (1<<k) = -(-1) * (1 << 0) = 1. OK.
+
+        return -u * (1 << k); // gcd is -u*2^k
     }
\ No newline at end of file
