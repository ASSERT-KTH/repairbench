diff --git a/tmp/7f54885d-3ce1-429b-951d-cf4ddc090e39_buggy.java b/tmp/3d990a85-6ea9-4773-9465-750656d98338_fixed.java
index e0a0552..a390b19 100644
--- a/tmp/7f54885d-3ce1-429b-951d-cf4ddc090e39_buggy.java
+++ b/tmp/3d990a85-6ea9-4773-9465-750656d98338_fixed.java
@@ -1,54 +1,68 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
         // From Commons Math:
         //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
+        // The original check: Math.abs(u) <= 1 || Math.abs(v) <= 1
+        // was flawed because Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE.
+        if (u == 1 || u == -1 || v == 1 || v == -1) {
              return 1;
         }
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
+        // Note: Integer.MIN_VALUE stays Integer.MIN_VALUE
         if (u>0) { u=-u; } // make u negative
         if (v>0) { v=-v; } // make v negative
         // B1. [Find power of 2]
         int k=0;
+        // The check k<31 is necessary to prevent overflow in the final shift.
+        // It also catches the case gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) automatically.
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
         if (k==31) {
+            // This condition occurs if u = MIN_VALUE and v = MIN_VALUE
+            // or u = MIN_VALUE and v = 0 (if 0 allowed) or vice-versa.
+            // gcd is 2^31, which cannot be represented as a positive int.
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0; */ // u and v are kept negative or MIN_VALUE
             // B4/B3: cast out twos from t.
             while ((t&1)==0) { // while t is even..
                 t/=2; // cast out twos
             }
             // B5 [reset max(u,v)]
+            // Now t is odd. Update u or v.
+            // if t>0, |v|<|u|, set u = -t
+            // if t<0, |v|>|u|, set v = t
             if (t>0) {
                 u = -t;
             } else {
                 v = t;
             }
-            // B6/B3. at this point both u and v should be odd.
+            // B6/B3. at this point both u and v should be odd and negative.
             t = (v - u)/2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
+            // If |u| larger, u is more negative, v-u is positive -> t positive (replace u)
+            // If |v| larger, v is more negative, v-u is negative -> t negative (replace v)
         } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+        // gcd is -u*2^k where u is the negative number
+        // analogous to Euclid's algorithm returning the last non-zero remainder.
+        // -u is the absolute value of the final u
+        return -u*(1<<k); // gcd is |u|*2^k
     }
\ No newline at end of file
