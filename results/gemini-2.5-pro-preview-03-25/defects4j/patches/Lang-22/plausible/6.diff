diff --git a/tmp/2266900a-0142-45ac-8ca7-f4cb9f9c7ab1_buggy.java b/tmp/08257090-3f62-4b07-af42-2660368c99d5_fixed.java
index e0a0552..5488e9d 100644
--- a/tmp/2266900a-0142-45ac-8ca7-f4cb9f9c7ab1_buggy.java
+++ b/tmp/08257090-3f62-4b07-af42-2660368c99d5_fixed.java
@@ -1,54 +1,110 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
+     * <p>
+     * Special cases:
+     * <ul>
+     *  <li>The invocations {@code greatestCommonDivisor(Integer.MIN_VALUE, Integer.MIN_VALUE)},
+     *      {@code greatestCommonDivisor(Integer.MIN_VALUE, 0)} and
+     *      {@code greatestCommonDivisor(0, Integer.MIN_VALUE)} throw an
+     *      {@code ArithmeticException}, because the result would be 2^31, which
+     *      is too large for an int value.</li>
+     *  <li>The result of {@code greatestCommonDivisor(x, x)}, {@code greatestCommonDivisor(0, x)} and
+     *      {@code greatestCommonDivisor(x, 0)} is the absolute value of {@code x}, except
+     *      for the special cases above.</li>
+     *  <li>The invocation {@code greatestCommonDivisor(0, 0)} is 0.</li>
+     * </ul>
      *
-     * @param u  a non-zero number
-     * @param v  a non-zero number
-     * @return the greatest common divisor, never zero
+     * @param u  an integer
+     * @param v  an integer
+     * @return the greatest common divisor, never negative
+     * @throws ArithmeticException if the result cannot be represented as a non-negative int value
      */
     private static int greatestCommonDivisor(int u, int v) {
-        // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
+        // From Commons Math: handle 0 appropriately.
+        // This also handles the special case where one value is Integer.MIN_VALUE and the other is 0.
+        if (u == 0 || v == 0) {
+            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+                throw new ArithmeticException("overflow: gcd is 2^31");
             }
+            // gcd(0, x) = |x|, gcd(x, 0) = |x|, gcd(0, 0) = 0
+            // Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE, which is negative.
+            // The Javadoc promises a non-negative result, but this case is excluded by the exception above.
+            return Math.abs(u) + Math.abs(v);
+        }
+
+        // The original code's initial check `if (Math.abs(u) <= 1 || Math.abs(v) <= 1)` was removed.
+        // It was incorrect for cases involving 0, and the main algorithm handles abs(x) == 1 correctly anyway.
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
+        // This negation step is safe even for Integer.MIN_VALUE because
+        // MIN_VALUE is already negative.
         if (u>0) { u=-u; } // make u negative
         if (v>0) { v=-v; } // make v negative
+
         // B1. [Find power of 2]
         int k=0;
+        // The loop advances k while both u and v are even and k < 31.
+        // Integer division `u/=2` and `v/=2` works correctly for negative even numbers.
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
+        // If k=31, it means the gcd is >= 2^31, which overflows an int.
+        // This happens for gcd(MIN_VALUE, MIN_VALUE)
         if (k==31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
+
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
+        // The initial value for t depends on which argument is odd.
+        // If u is odd, t = v.
+        // If u is even, v must be odd (because k<31), hence t = -(u/2).
+        // The division operation `/` truncates towards zero in Java, which is important.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
+
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0; */ // This invariant is maintained here.
+
             // B4/B3: cast out twos from t.
+            // Continue dividing t by 2 until it becomes odd.
             while ((t&1)==0) { // while t is even..
-                t/=2; // cast out twos
+                t/=2; // cast out twos using integer division
             }
+
             // B5 [reset max(u,v)]
+            // At this point, t is odd.
+            // If t is positive, replace u with -t.
+            // If t is negative, replace v with t.
+            // This ensures u and v remain negative.
             if (t>0) {
                 u = -t;
             } else {
                 v = t;
             }
-            // B6/B3. at this point both u and v should be odd.
+
+            // B6/B3. At this point both u and v should be odd and negative.
+            // Calculate the new difference and divide by 2.
+            // Since u and v are both odd, (v-u) is always even.
+            // Integer division is used.
             t = (v - u)/2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
+            // If |u| > |v| (u < v because both are negative), then v - u > 0, t is positive.
+            // If |v| > |u| (v < u), then v - u < 0, t is negative.
+            // The sign of t determines which variable (u or v) was effectively replaced in B5 for the next iteration.
         } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+
+        // The loop terminates when t=0, which implies u=v.
+        // The gcd is |u| * 2^k. Since u is negative, this is equal to -u * 2^k.
+        // u cannot be Integer.MIN_VALUE at this point, because if the original inputs
+        // were such that u = v = Integer.MIN_VALUE after dividing by 2^k,
+        // the k=31 check would have been triggered earlier.
+        // Therefore, -u will not overflow.
+        return -u*(1<<k); // gcd is -(u) * 2^k, which is |u| * 2^k
     }
\ No newline at end of file
