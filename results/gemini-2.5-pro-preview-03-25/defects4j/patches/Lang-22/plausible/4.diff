diff --git a/tmp/d9368ba5-68a0-4a82-b6f3-b9007f215a30_buggy.java b/tmp/c65c5a85-8019-4737-8dfd-f6e09dee0e6d_fixed.java
index e0a0552..07d7f5d 100644
--- a/tmp/d9368ba5-68a0-4a82-b6f3-b9007f215a30_buggy.java
+++ b/tmp/c65c5a85-8019-4737-8dfd-f6e09dee0e6d_fixed.java
@@ -1,54 +1,67 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
         // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
+        // Javadoc specifies non-zero inputs.
+        // The original check Math.abs(u) <= 1 || Math.abs(v) <= 1 was incorrect
+        // for u or v == Integer.MIN_VALUE because Math.abs(Integer.MIN_VALUE)
+        // returns Integer.MIN_VALUE, which is <= 1.
+        // Instead, we handle the case of |u| == 1 or |v| == 1 explicitly.
+        // If |u| == 1 or |v| == 1, the GCD is 1.
+        if (u == 1 || u == -1 || v == 1 || v == -1) {
+             // Covers cases like gcd(x, 1), gcd(x, -1), gcd(1, y), gcd(-1, y).
+             // This also correctly handles gcd(Integer.MIN_VALUE, 1) = 1, etc.
             return 1;
         }
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         if (u>0) { u=-u; } // make u negative
         if (v>0) { v=-v; } // make v negative
         // B1. [Find power of 2]
         int k=0;
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
         if (k==31) {
+            // Handles gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) = 2^31
+            // Note: gcd(Integer.MIN_VALUE, 0) is not handled here (and is specified away).
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
             while ((t&1)==0) { // while t is even..
                 t/=2; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t>0) {
                 u = -t;
             } else {
                 v = t;
             }
             // B6/B3. at this point both u and v should be odd.
             t = (v - u)/2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
         } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+        // gcd is -u*2^k where u is the negative number equivalent to the gcd of the odd parts.
+        // The final -u cannot be Integer.MIN_VALUE because the only inputs that could lead to this
+        // are u=MIN_VALUE, v=MIN_VALUE, which is handled by the k=31 check.
+        return -u*(1<<k); // gcd is -u*2^k
     }
\ No newline at end of file
