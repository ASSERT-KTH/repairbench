diff --git a/tmp/4bf79a64-4e36-4e73-96b4-b8c5e650a994_buggy.java b/tmp/1f8c94af-17d8-4578-a6cd-a7acb24b1174_fixed.java
index 88bb3a1..e0c85da 100644
--- a/tmp/4bf79a64-4e36-4e73-96b4-b8c5e650a994_buggy.java
+++ b/tmp/1f8c94af-17d8-4578-a6cd-a7acb24b1174_fixed.java
@@ -1,57 +1,87 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
             if (oneNotInjected >= 0) {
                 // getting close; but most not have name
                 if (candidate.paramName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                 }
             }
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+
+        // One-parameter case:
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
+        PropertyName explicitParamName = candidate.explicitParamName(0);
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
         // If there's injection or explicit name, should be properties-based
-        boolean useProps = (paramName != null) || (injectId != null);
+        boolean useProps = (explicitParamName != null) || (injectId != null);
         if (!useProps && (paramDef != null)) {
             // One more thing: if implicit name matches property with a getter
             // or field, we'll consider it property-based as well
 
             // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+            //    not implicit name, but name with possible strategy-based-rename.
+            //    The decision (`useProps`) is based on implicit name existing and matching
+            //    a serializable property. The REGISTRATION however needs the effective name.
+            PropertyName implicitName = candidate.findImplicitParamName(0);
+            if (implicitName != null && paramDef.couldSerialize()) {
+                 useProps = true;
             }
+        }
+
         if (useProps) {
+            // [databind#2051]: Need to use the effective parameter name, respecting
+            // explicit name, injection, and naming strategy, for registration.
+            PropertyName nameForRegistration;
+            if (explicitParamName != null) {
+                // Explicit name (`@JsonProperty`) always takes precedence
+                nameForRegistration = explicitParamName;
+            } else {
+                // Otherwise, implicit name should be used, BUT we need the one
+                // potentially modified by naming strategy. `paramName(0)` is
+                // designed to provide that name.
+                nameForRegistration = candidate.paramName(0);
+                 // Should not be null here if `useProps` is true, (since either
+                 // explicit name exists, or implicit name exists, or injected);
+                 // but defensively... handle? Currently assuming `paramName(0)` works.
+            }
+
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                    constructCreatorProperty(ctxt, beanDesc, nameForRegistration, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
             return;
         }
+
+        // If not using properties, treat as delegating or scalar:
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
         // problems with "unresolved" constructor property
         if (paramDef != null) {
+            // Note: must use the property definition, not parameter name, to
+            // handle case of implicit name matching renamed property.
+            // 13-Dec-2020, tatu: Actually, looks like we may need to use official
+            //    property name instead.
+            // ... although, wait? The issue is just constructor/factory param... why rename?
+            // Let's use `paramDef` as is, assuming links properly setup
            ((POJOPropertyBuilder) paramDef).removeConstructors();
         }
     }
\ No newline at end of file
