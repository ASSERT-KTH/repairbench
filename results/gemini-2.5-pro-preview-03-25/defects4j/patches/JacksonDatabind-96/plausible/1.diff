diff --git a/tmp/04891284-769e-40da-b51b-833927516263_buggy.java b/tmp/cd6ebb1a-1b92-457d-8d10-528935887dca_fixed.java
index 88bb3a1..e5fd39d 100644
--- a/tmp/04891284-769e-40da-b51b-833927516263_buggy.java
+++ b/tmp/cd6ebb1a-1b92-457d-8d10-528935887dca_fixed.java
@@ -1,57 +1,84 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
             if (oneNotInjected >= 0) {
                 // getting close; but most not have name
                 if (candidate.paramName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                 }
             }
+            // Otherwise, property-based is the only other possibility:
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+
+        // Handle the single-argument case:
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
+        PropertyName explicitParamName = candidate.explicitParamName(0);
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
-        // If there's injection or explicit name, should be properties-based
-        boolean useProps = (paramName != null) || (injectId != null);
+        // First: if injectable or explicitly named, use property-based
+        boolean useProps = (explicitParamName != null) || (injectId != null);
+        PropertyName nameForProperty = explicitParamName;
+
         if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
+            // Second: if not, but there is a matching property definition
+            // that could be serialized (meaning there is a field or getter),
+            // let's also consider it property-based.
+            // [databind#2051]: Make sure to use name potentially modified by naming strategy
+            if (paramDef.couldSerialize()) {
+                 useProps = true;
+                 nameForProperty = paramDef.getFullName();
+            }
+            // If neither explicit name/injection NOR matching property,
+            // keep 'useProps' false == use Delegating Creator
+        }
 
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
-        }
         if (useProps) {
+            // If property-based:
+            // We may still need name; specifically, if solely based on `@JacksonInject`
+            // (that is, explicit name is null)
+             if (nameForProperty == null) {
+                 // 13-Jun-2018, tatu: As per [databind#2051], need name to use here.
+                 //   Let's use name from property definition, if we have one...
+                 if (paramDef != null) {
+                     nameForProperty = paramDef.getFullName();
+                 }
+                 // and if not, basic implicit name from parameter
+                 if (nameForProperty == null) {
+                    nameForProperty = candidate.findImplicitParamName(0);
+                 }
+             }
+
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                    constructCreatorProperty(ctxt, beanDesc, nameForProperty, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
             return;
         }
+
+        // Otherwise, must be a delegating creator
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
         // problems with "unresolved" constructor property
         if (paramDef != null) {
+            // 18-Sep-2017, tatu: This is unfortunate hack; ideally parameter should
+            //    perhaps not be included in list of properties but...
              ((POJOPropertyBuilder) paramDef).removeConstructors();
         }
     }
\ No newline at end of file
