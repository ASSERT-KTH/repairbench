diff --git a/tmp/ae639551-0508-4bf0-a22a-5b9c761df4b1_buggy.java b/tmp/9ce344a6-7136-4840-8872-9c59f50416e0_fixed.java
index 88bb3a1..27b8e1a 100644
--- a/tmp/ae639551-0508-4bf0-a22a-5b9c761df4b1_buggy.java
+++ b/tmp/9ce344a6-7136-4840-8872-9c59f50416e0_fixed.java
@@ -1,57 +1,84 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
             if (oneNotInjected >= 0) {
                 // getting close; but most not have name
                 if (candidate.paramName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                 }
             }
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+
+        // Handle the 1-parameter case
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
+        // Name derived from `@JsonProperty`, null if not specified
+        PropertyName explicitParamName = candidate.explicitParamName(0);
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
         // If there's injection or explicit name, should be properties-based
-        boolean useProps = (paramName != null) || (injectId != null);
+        boolean useProps = (explicitParamName != null) || (injectId != null);
+        // Name to use if decided to be property-based
+        PropertyName nameForParam = explicitParamName;
+
         if (!useProps && (paramDef != null)) {
             // One more thing: if implicit name matches property with a getter
             // or field, we'll consider it property-based as well
 
             // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+            //    not implicit name, but name with possible strategy-based-rename.
+            //    Need to use name from property definition (`paramDef`) itself.
+//            paramName = candidate.findImplicitParamName(0); // OLD, incorrect approach before 2.9.6
+            PropertyName nameFromDef = paramDef.getFullName();
+
+            // Does parameter match a known property with getter/field?
+            // (and has name)
+            if (paramDef.couldSerialize()) {
+                 useProps = true;
+                 // Use the name derived from the property definition, which is naming-strategy aware
+                 nameForParam = nameFromDef;
             }
+        }
+
         if (useProps) {
+             // Sanity check: if we use properties-based creator, must have a name OR explicit injection
+             // (otherwise wouldn't be here)
+             /*
+            if (nameForParam == null) {
+                 // should not occur but...
+                 ctxt.reportBadPropertyDefinition(beanDesc, paramDef,
+ "Argument #%d of constructor %s has no property name annotation; must have name when multiple-param constructor annotated as Creator",
+                         0, candidate.creator());
+            }
+            */
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                    constructCreatorProperty(ctxt, beanDesc, nameForParam, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
             return;
         }
+
+        // Otherwise, fall back to single-argument creator handling
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
         // problems with "unresolved" constructor property
         if (paramDef != null) {
             ((POJOPropertyBuilder) paramDef).removeConstructors();
         }
     }
\ No newline at end of file
