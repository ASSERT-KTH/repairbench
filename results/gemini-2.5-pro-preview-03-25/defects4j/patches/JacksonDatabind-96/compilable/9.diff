diff --git a/tmp/cfdf8fc2-fca7-4b9f-95b0-6a9812661ad5_buggy.java b/tmp/f5e65b79-3abf-4f99-a6fe-2cc437515712_fixed.java
index 88bb3a1..871ad39 100644
--- a/tmp/cfdf8fc2-fca7-4b9f-95b0-6a9812661ad5_buggy.java
+++ b/tmp/f5e65b79-3abf-4f99-a6fe-2cc437515712_fixed.java
@@ -1,57 +1,74 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
-            if (oneNotInjected >= 0) {
-                // getting close; but most not have name
-                if (candidate.paramName(oneNotInjected) == null) {
+            // NOTE: as per [databind#2410], naming strategy DOES apply to delegating creators,
+            // so we DO need to check for explicit name
+            if ((oneNotInjected >= 0) && (candidate.paramName(oneNotInjected) == null)) {
+                 // getting close; but most not have explicit name (may have implicit)
+                 if (candidate.explicitParamName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                  }
             }
+            // Otherwise, property-based:
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+
+        // Handle the single-argument case
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
+        PropertyName explicitName = candidate.explicitParamName(0);
 
         // If there's injection or explicit name, should be properties-based
-        boolean useProps = (paramName != null) || (injectId != null);
+        boolean useProps = (explicitName != null) || (injectId != null);
+        PropertyName nameForProperty = explicitName; // Start with explicit name if available
+
         if (!useProps && (paramDef != null)) {
             // One more thing: if implicit name matches property with a getter
             // or field, we'll consider it property-based as well
 
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+            // 01-Jun-2018, tatu: Per [databind#2051], need parameter name for props-based,
+            //   implicit name is fine.
+            PropertyName implicitName = candidate.findImplicitParamName(0);
+            if (implicitName != null && paramDef.couldSerialize()) {
+                 useProps = true;
+                 nameForProperty = implicitName; // Use implicit name if it triggers property-based mode
             }
+        }
+
         if (useProps) {
+            // If we decided to use properties, nameForProperty should be set
+            // (either from explicit name, or implicit name).
+            // Exception: if useProps is true ONLY due to injectId, nameForProperty might be null.
+            // constructCreatorProperty handles null name + non-null injectId case.
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                    constructCreatorProperty(ctxt, beanDesc, nameForProperty, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
             return;
         }
+
+        // Otherwise, must be delegating or value creator
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
         // problems with "unresolved" constructor property
+        // 28-Mar-2017, tatu: Important -> only remove if NOT used for properties-based Creator
         if (paramDef != null) {
             ((POJOPropertyBuilder) paramDef).removeConstructors();
         }
     }
\ No newline at end of file
