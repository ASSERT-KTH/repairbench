diff --git a/tmp/352e5b8b-95d4-43c5-99bd-01f3344af632_buggy.java b/tmp/82f81350-508d-4233-a78b-6efb24c135ff_fixed.java
index 88bb3a1..7cdf726 100644
--- a/tmp/352e5b8b-95d4-43c5-99bd-01f3344af632_buggy.java
+++ b/tmp/82f81350-508d-4233-a78b-6efb24c135ff_fixed.java
@@ -1,57 +1,83 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
             if (oneNotInjected >= 0) {
                 // getting close; but most not have name
                 if (candidate.paramName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                 }
             }
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+        // If single argument, check if explicit name is given OR @JacksonInject used...
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
         PropertyName paramName = candidate.explicitParamName(0);
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
         // If there's injection or explicit name, should be properties-based
         boolean useProps = (paramName != null) || (injectId != null);
         if (!useProps && (paramDef != null)) {
             // One more thing: if implicit name matches property with a getter
             // or field, we'll consider it property-based as well
 
             // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
             //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+            //    ... so, use name from property definition, not implicit name:
+//            paramName = candidate.findImplicitParamName(0); // OLD code
+            PropertyName nameFromDef = paramDef.getFullName(); // NEW, fixed code [databind#2051]
+            if (paramDef.couldSerialize()) {
+                 paramName = nameFromDef;
+                 useProps = true;
             }
+        }
+
         if (useProps) {
+            // Sanity check: name should not be null after all this. For [databind#2051]
+            // we need to ensure Inject does not lead to null name.
+            if (paramName == null) {
+                 // 13-Jun-2019, tatu: Should try harder to find the name; maybe implicit?
+                 //   Specifically, injection only case...
+                 if (paramDef != null) {
+                     paramName = paramDef.getFullName();
+                 }
+                 if (paramName == null) {
+                     // TODO: report error? Or what?
+                     // Not sure if this can really happen, but let's add diagnostics
+                     ctxt.reportBadPropertyDefinition(beanDesc, paramDef,
+"Could not find parameter name for parameter #%d/%d of constructor of %s: can not determine name, does not seem to be present in class definition",
+                             0, 1, beanDesc.getBeanClass().getName());
+                     return; // or throw?
+                 }
+            }
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
                     constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
             return;
         }
+
+        // Otherwise, assumed to be a delegating creator
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
         // problems with "unresolved" constructor property
+        // (note: sever ONLY if not property-based; otherwise links are needed)
         if (paramDef != null) {
             ((POJOPropertyBuilder) paramDef).removeConstructors();
         }
     }
\ No newline at end of file
