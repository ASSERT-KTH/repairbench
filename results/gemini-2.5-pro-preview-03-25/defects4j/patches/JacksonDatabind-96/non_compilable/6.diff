diff --git a/tmp/ee78af0e-5973-4c8e-bd2b-1256a8f504fb_buggy.java b/tmp/b16c7b83-adea-4604-af26-924ae2fd3a88_fixed.java
index 88bb3a1..9361035 100644
--- a/tmp/ee78af0e-5973-4c8e-bd2b-1256a8f504fb_buggy.java
+++ b/tmp/b16c7b83-adea-4604-af26-924ae2fd3a88_fixed.java
@@ -1,57 +1,75 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
             if (oneNotInjected >= 0) {
-                // getting close; but most not have name
+                // getting close; but must not have name
                 if (candidate.paramName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                 }
             }
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+
+        // Handle the single-argument case:
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
+        PropertyName explicitParamName = candidate.explicitParamName(0);
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
         // If there's injection or explicit name, should be properties-based
-        boolean useProps = (paramName != null) || (injectId != null);
+        boolean useProps = (explicitParamName != null) || (injectId != null);
+        PropertyName nameForCreator = explicitParamName; // Start with explicit name if available
+
         if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
+            // No explicit name or injection; but parameter definition exists.
+            // If definition implies a property that can be serialized (like has getter/field),
+            // we will consider it property-based.
+            // Crucially, use name from definition, as it may be affected by naming strategy.
 
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+            // Original code used implicit name here - INCORRECT for naming strategy
+            // PropertyName implicitParamName = candidate.findImplicitParamName(0);
+            // useProps = (implicitParamName != null) && paramDef.couldSerialize();
+
+            // CORRECTED LOGIC: Use name from paramDef if it corresponds to a serializable property
+            PropertyName potentialName = paramDef.getName();
+            if (potentialName != null && !potentialName.isEmpty()) {
+                 if (paramDef.couldSerialize()) {
+                     useProps = true;
+                     nameForCreator = potentialName; // Use the strategy-aware name
+                 }
             }
+        }
+
         if (useProps) {
+            // Construct property using the determined name (explicit or from paramDef).
+            // constructCreatorProperty can handle injection details and potential naming conflicts.
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                    constructCreatorProperty(ctxt, beanDesc, nameForCreator, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
             return;
         }
+
+        // If not deemed property-based, handle as delegating (String->type, long->type etc)
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
         // problems with "unresolved" constructor property
         if (paramDef != null) {
             ((POJOPropertyBuilder) paramDef).removeConstructors();
         }
     }
\ No newline at end of file
