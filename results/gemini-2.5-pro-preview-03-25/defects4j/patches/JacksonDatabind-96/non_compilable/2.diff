diff --git a/tmp/ae5f49c1-d385-45c4-8204-45aea31f6e04_buggy.java b/tmp/5eb01e11-ddc0-4f07-ae6a-5d7d73430373_fixed.java
index 88bb3a1..ba161f7 100644
--- a/tmp/ae5f49c1-d385-45c4-8204-45aea31f6e04_buggy.java
+++ b/tmp/5eb01e11-ddc0-4f07-ae6a-5d7d73430373_fixed.java
@@ -1,57 +1,83 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
             if (oneNotInjected >= 0) {
                 // getting close; but most not have name
                 if (candidate.paramName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                 }
             }
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+
+        // Common case: single argument constructor/factory method
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
+        PropertyName paramName = candidate.explicitParamName(0); // Check explicit name first
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
         // If there's injection or explicit name, should be properties-based
         boolean useProps = (paramName != null) || (injectId != null);
         if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
+            // If no explicit name/injection, check if implicit name corresponds to a real property
 
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
+            // 25-May-2018, tatu: [databind#2051]: Use name from BeanPropertyDefinition
+            // (Buggy code used candidate.findImplicitParamName(0) here)
+            paramName = paramDef.getFullName(); // Get logical name from property def
+
+            // Consider it property-based if we found a logical name AND it could be serialized (getter/field exists)
             useProps = (paramName != null) && paramDef.couldSerialize();
         }
+
+        // If determined to be property-based:
         if (useProps) {
+            // We must use the name as defined by the property definition
+            // (which takes into account NamingStrategy, explicit name via @JsonProperty)
+            // -- Naming strategy applies to logical name,JsonProperty overrides.
+            // However, CreatorProperty itself needs the logical name? No, external.
+            // Let's try using the name as determined earlier (explicit, or implicit from def)
+            // but apply Naming Strategy if NO explicit name was given.
+
+            // UPDATE for [databind#2051] fix and related test:
+            // It seems that for constructor parameters, the naming strategy SHOULD
+            // be applied even if there is an explicit @JsonProperty annotation.
+            // This differs from regular properties.
+            PropertyName nameToUse = paramName; // Start with logical name (explicit or implicit)
+            PropertyNamingStrategy strategy = ctxt.getConfig().getPropertyNamingStrategy();
+            if (strategy != null) {
+                 String simpleName = paramName.getSimpleName();
+                 // Always apply strategy if present for constructor parameter
+                 nameToUse = strategy.nameForConstructorParameter(ctxt.getConfig(), param, simpleName);
+            }
+
+            // Construct and register property using the calculated external name.
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                    constructCreatorProperty(ctxt, beanDesc, nameToUse, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
             return;
         }
+
+        // If not property-based, handle as delegating/value creator
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
         // problems with "unresolved" constructor property
         if (paramDef != null) {
             ((POJOPropertyBuilder) paramDef).removeConstructors();
         }
     }
\ No newline at end of file
