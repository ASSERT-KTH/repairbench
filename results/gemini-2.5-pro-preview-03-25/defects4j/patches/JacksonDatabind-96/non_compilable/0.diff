diff --git a/tmp/71115b4c-ce23-478b-88e8-8948e4d392a2_buggy.java b/tmp/1eb30a3f-f186-46ab-bdc0-09789d95d04d_fixed.java
index 88bb3a1..8c250df 100644
--- a/tmp/71115b4c-ce23-478b-88e8-8948e4d392a2_buggy.java
+++ b/tmp/1eb30a3f-f186-46ab-bdc0-09789d95d04d_fixed.java
@@ -1,57 +1,83 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
             if (oneNotInjected >= 0) {
                 // getting close; but most not have name
                 if (candidate.paramName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                 }
             }
+            // Otherwise, property-based is the only other possibility
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+
+        // Single parameter case:
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
+        PropertyName explicitParamName = candidate.explicitParamName(0); // Explicit name from @JsonProperty
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
-        // If there's injection or explicit name, should be properties-based
-        boolean useProps = (paramName != null) || (injectId != null);
+        // Default decision: use properties-based if explicit name or injection exists
+        boolean useProps = (explicitParamName != null) || (injectId != null);
+        PropertyName nameToUse = explicitParamName; // Start with explicit name if available
+
+        // If not decided yet, check for implicit property match
         if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
+            // Try to find implicit name (logical name, pre-strategy)
+            PropertyName implicitName = candidate.findImplicitParamName(0);
 
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+            // If implicit name found AND matches a potentially serializable property,
+            // consider it property-based
+            // 16-Oct-2019, tatu: Need to ensure we handle possible renaming by strategy
+            if (implicitName != null && paramDef.couldSerialize()) {
+                 useProps = true;
+                 // IMPORTANT: For property-based creator, use the name as expected in JSON,
+                 // which means applying the naming strategy. Get it from paramDef.
+                 nameToUse = paramDef.findNameForDeserialization(ctxt.getConfig());
+                 // Should not be null if implicit name found, but defensive check best:
+                 if (nameToUse == null) {
+                     nameToUse = implicitName;
                  }
+            }
+        }
+
+        // Now, construct and add creator
         if (useProps) {
+            // For injection, name might be null, constructCreatorProperty handles this.
+            // If explicit name, nameToUse has it.
+            // If implicit match, nameToUse has the strategy-applied name (or fallback).
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                    constructCreatorProperty(ctxt, beanDesc, nameToUse, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
+            // We are done with properties-based creator
             return;
         }
+
+        // If not properties-based, treat as delegating or scalar
+        // 13-Jun-2017, tatu: Important; force as implicit regardless of what auto-detection may have found
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
+        // problems with "unresolved" constructor property (see [databind#1868])
         if (paramDef != null) {
+            // For [databind#2611]: Needs to be POJO, not general PropertyBased...
+            if (paramDef instanceof POJOPropertyBuilder) {
                 ((POJOPropertyBuilder) paramDef).removeConstructors();
             }
         }
+    }
\ No newline at end of file
