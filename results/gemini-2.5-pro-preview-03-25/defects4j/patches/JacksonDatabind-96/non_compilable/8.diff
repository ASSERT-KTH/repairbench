diff --git a/tmp/9922c270-bddb-4958-9912-ac5fc8bbefaa_buggy.java b/tmp/dc1f56ee-1250-4ea1-80d0-44e7b09146f2_fixed.java
index 88bb3a1..098d77f 100644
--- a/tmp/9922c270-bddb-4958-9912-ac5fc8bbefaa_buggy.java
+++ b/tmp/dc1f56ee-1250-4ea1-80d0-44e7b09146f2_fixed.java
@@ -1,57 +1,103 @@
     /**
      * Helper method called when there is the explicit "is-creator", but no mode declaration.
      *
      * @since 2.9.2
      */
     protected void _addExplicitAnyCreator(DeserializationContext ctxt,
             BeanDescription beanDesc, CreatorCollector creators,
             CreatorCandidate candidate)
         throws JsonMappingException
     {
         // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
         if (1 != candidate.paramCount()) {
             // Ok: for delegates, we want one and exactly one parameter without
             // injection AND without name
             int oneNotInjected = candidate.findOnlyParamWithoutInjection();
             if (oneNotInjected >= 0) {
                 // getting close; but most not have name
                 if (candidate.paramName(oneNotInjected) == null) {
                     _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                     return;
                 }
             }
             _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
             return;
         }
+
+        // Handle the single-argument case
         AnnotatedParameter param = candidate.parameter(0);
         JacksonInject.Value injectId = candidate.injection(0);
-        PropertyName paramName = candidate.explicitParamName(0);
+        PropertyName explicitName = candidate.explicitParamName(0);
         BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
-        // If there's injection or explicit name, should be properties-based
-        boolean useProps = (paramName != null) || (injectId != null);
+        // By default, assume property-based if there is explicit name or injection
+        boolean useProps = (explicitName != null) || (injectId != null);
+        PropertyName name = explicitName;
+
         if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
+            // No explicit name or injection, but parameter is linked to a property definition.
+            // This indicates an implicitly property-based creator.
+            // We need to determine the property name, considering NamingStrategy.
+            // [databind#2051]: Use the name derived from the property definition, not parameter name.
+            String baseName = paramDef.getName(); // Like "paramName0"
+            if (baseName != null && !baseName.isEmpty()) { // Ensure baseName is valid
+                PropertyNamingStrategy naming = ctxt.getConfig().getPropertyNamingStrategy();
+                String strategyName = null;
+                if (naming != null) {
+                    // Use the property's base name to apply the strategy
+                    strategyName = naming.nameForConstructorParameter(ctxt.getConfig(), param.getOwner(), baseName);
+                }
+                if (strategyName != null && !strategyName.isEmpty()) {
+                    name = PropertyName.construct(strategyName); // Use strategy-applied name like "param_name0"
+                } else {
+                    // If no strategy, or strategy returns null/empty, use base name
+                    name = PropertyName.construct(baseName);
+                }
+                useProps = true; // Yes, it's property based
+            }
+             // If baseName was null/empty (unlikely for paramDef), name remains null, useProps=false.
+        } else if (useProps && name == null) {
+            // Case: Injection used, but no explicit name. Need to determine implicit name.
+            // This also requires using the property definition + naming strategy.
+             if (paramDef != null) {
+                 String baseName = paramDef.getName();
+                 if (baseName != null && !baseName.isEmpty()) {
+                     PropertyNamingStrategy naming = ctxt.getConfig().getPropertyNamingStrategy();
+                     String strategyName = null;
+                     if (naming != null) {
+                         strategyName = naming.nameForConstructorParameter(ctxt.getConfig(), param.getOwner(), baseName);
+                     }
+                     if (strategyName != null && !strategyName.isEmpty()) {
+                         name = PropertyName.construct(strategyName);
+                     } else {
+                         name = PropertyName.construct(baseName);
+                     }
+                 }
+             }
+             // If paramDef is null, or baseName is null/empty, 'name' remains null.
+             // constructCreatorProperty might handle this, or it might fail downstream.
+        }
 
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
-        }
         if (useProps) {
+            // We have decided to use properties-based creator
+             // Defensive check: If we intended to use properties but failed to find a name (edge case?),
+             // let constructCreatorProperty handle it (usually by failing)
             SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                    constructCreatorProperty(ctxt, beanDesc, name, 0, param, injectId)
             };
             creators.addPropertyCreator(candidate.creator(), true, properties);
             return;
         }
+
+        // If not property-based (no explicit name, injection, or usable paramDef link),
+        // try standard single-argument creator handling (delegating, string, number etc)
         _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
         // one more thing: sever link to creator property, to avoid possible later
         // problems with "unresolved" constructor property
         if (paramDef != null) {
+             // Severing the link seems necessary regardless of whether it was used as
+             // property-based or delegating, to prevent conflicts later.
             ((POJOPropertyBuilder) paramDef).removeConstructors();
         }
     }
\ No newline at end of file
