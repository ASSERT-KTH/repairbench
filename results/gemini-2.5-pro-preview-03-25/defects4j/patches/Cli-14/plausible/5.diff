diff --git a/tmp/b23013aa-f1e4-4fb6-8b60-421ae48b6d1e_buggy.java b/tmp/45dea73d-157e-4351-955e-6dfa8af82b30_fixed.java
index 71189c3..affcac8 100644
--- a/tmp/b23013aa-f1e4-4fb6-8b60-421ae48b6d1e_buggy.java
+++ b/tmp/45dea73d-157e-4351-955e-6dfa8af82b30_fixed.java
@@ -1,46 +1,58 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // Keep track if validation occurred for this option in this pass
+            boolean validated = false;
+
+            // Validate required options or nested groups first.
+            // Their own validate methods should handle missing arguments if required.
+            if (option.isRequired() || option instanceof Group) {
                 option.validate(commandLine);
+                validated = true; // Mark as validated
             }
 
-            // if the child option is present then validate it
+            // Check if the option is actually present on the command line
             if (commandLine.hasOption(option)) {
+                // Increment count of present options for min/max checks
                 if (++present > maximum) {
-                    unexpected = option;
-
-                    break;
+                    unexpected = option; // Record the first option that exceeds the maximum
+                    break; // Stop processing further options for this group
                 }
 
+                // Validate the present option *only if* it wasn't already validated
+                // This prevents double validation which can cause issues like ClassCastException
+                // if the first validation changed the value type (e.g., String to File).
+                if (!validated) {
                     option.validate(commandLine);
                 }
             }
+        }
 
-        // too many options
+        // Check if too many options were found for this group
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
-        // too few option
+        // Check if the minimum number of options required for this group was met.
+        // Note: Individual required options are checked by their own validate() methods.
+        // This check is for the group's overall minimum count.
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
-        // validate each anonymous argument
+        // validate each anonymous argument associated with this group
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
+            // Anonymous arguments might have their own validation rules (e.g., type, count)
             option.validate(commandLine);
         }
     }
\ No newline at end of file
