diff --git a/tmp/a3cd0388-cd4e-4529-a573-ce82dee0c56e_buggy.java b/tmp/14105078-b9d3-40ba-ba18-841cf9ff0a63_fixed.java
index 71189c3..eb4d633 100644
--- a/tmp/a3cd0388-cd4e-4529-a573-ce82dee0c56e_buggy.java
+++ b/tmp/14105078-b9d3-40ba-ba18-841cf9ff0a63_fixed.java
@@ -1,46 +1,70 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
+        // Process each option
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // Determine if validation might be needed.
+            // An option needs validation if it's a required option (to check presence),
+            // a group (to validate its members), or if it's actually present on the command line (to validate its value).
+            final boolean needsValidationCheck = option.isRequired() || option instanceof Group || commandLine.hasOption(option);
+
+            // Flag to track if validation was performed in this iteration
+            boolean validated = false;
+
+            if (needsValidationCheck) {
+                // Perform validation. This single call handles checking required options
+                // and validating the argument value if the option is present.
+                // It might throw exceptions (e.g., MissingOptionException, validation format errors).
+                // We let exceptions propagate up, as any validation failure should halt the process.
                 option.validate(commandLine);
+                validated = true; // Mark as validated
             }
 
-            // if the child option is present then validate it
+            // Count how many options from this group are actually present on the command line
             if (commandLine.hasOption(option)) {
+                // Check if adding this option exceeds the maximum allowed for the group
                 if (++present > maximum) {
                     unexpected = option;
-
+                    // If maximum is exceeded, we stop processing options in this group.
                     break;
                 }
 
-                option.validate(commandLine);
+                // Ensure validation occurred if the option is present but wasn't covered by the needsValidationCheck logic above
+                // (e.g., an optional, non-group option).
+                // This check is likely redundant because commandLine.hasOption(option) implies needsValidationCheck would be true,
+                // leading to validation already happening above. However, explicitly checking ensures correctness.
+                // *Correction*: The original code had a potential double validation issue here.
+                // The fix is to ensure validate() is called *only once*. The logic above already does this.
+                // We do NOT need a second call here. The `validated` flag or re-validating is unnecessary.
             }
         }
 
-        // too many options
+        // Check if the maximum number of options was exceeded during the loop
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
-        // too few option
+        // Check if the minimum number of required options for this group was met.
+        // This check is performed after iterating through all options.
+        // Individual required options should have already thrown MissingOptionException
+        // during their validate() call if they were missing. This check enforces
+        // the group's overall minimum count.
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
-        // validate each anonymous argument
+        // Validate each anonymous argument associated with this group
+        // (This part is unchanged as it wasn't related to the reported bug)
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
