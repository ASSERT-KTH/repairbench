diff --git a/tmp/6ffdc3e2-773b-412a-bb41-179549ec7cbb_buggy.java b/tmp/84fad52d-2be7-441b-84de-cb8586effe3f_fixed.java
index 71189c3..4723a31 100644
--- a/tmp/6ffdc3e2-773b-412a-bb41-179549ec7cbb_buggy.java
+++ b/tmp/84fad52d-2be7-441b-84de-cb8586effe3f_fixed.java
@@ -1,46 +1,59 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
+            boolean validated = false; // Track if validation occurred for this option
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // needs validation? (e.g. required check, group validation)
+            boolean needsInitialValidation = option.isRequired() || option instanceof Group;
+            if (needsInitialValidation) {
+                // This initial validation might check presence for required options
+                // or handle group logic. It might also validate arguments,
+                // potentially changing the stored value type (e.g., String to File).
                 option.validate(commandLine);
+                validated = true;
             }
 
-            // if the child option is present then validate it
+            // if the child option is present then count it and validate if not already done
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
 
+                // Only validate here if it wasn't already validated in the block above.
+                // This prevents double validation, which can cause issues if the
+                // first validation changes the data type associated with the option
+                // in the commandLine (like the FileValidator case).
+                if (!validated) {
                     option.validate(commandLine);
                 }
             }
+        }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
-        // too few option
+        // too few options
         if (present < minimum) {
+            // Check if the minimum number of required options were present.
+            // Note: option.validate() called earlier might handle missing arguments
+            // for options that *are* present. This checks for missing options overall.
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
