diff --git a/tmp/40283089-dff7-4efa-9611-463e2b08870c_buggy.java b/tmp/e4776c06-6500-4def-a268-57d91b0c23e3_fixed.java
index 71189c3..a301d32 100644
--- a/tmp/40283089-dff7-4efa-9611-463e2b08870c_buggy.java
+++ b/tmp/e4776c06-6500-4def-a268-57d91b0c23e3_fixed.java
@@ -1,46 +1,55 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
+            boolean validated = false; // Track validation
 
-            // if the child option is present then validate it
+            // if the option is present, validate it and count it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
+                    break; // Too many options
+                }
 
-                    break;
+                // Validate the present option (handles value processing)
+                option.validate(commandLine);
+                validated = true; // Mark as validated
             }
 
+            // Needs structural validation (required or group)?
+            // Only perform this validation if it wasn't already validated
+            // by being present. This prevents validating twice (once for structure,
+            // once for value) which can cause issues if validation modifies state
+            // (e.g., converting a String argument to a File object).
+            boolean needsStructuralValidation = option.isRequired() || option instanceof Group;
+            if (needsStructuralValidation && !validated) {
+                // This validation might check for missing required options
+                // or validate group constraints even if the option isn't present.
                 option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
-        // too few option
+        // too few options (based on count of PRESENT options)
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
