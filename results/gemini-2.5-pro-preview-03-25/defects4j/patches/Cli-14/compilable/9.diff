diff --git a/tmp/f94f9623-cd97-4173-b38d-12432d2ad36d_buggy.java b/tmp/ca833234-ce13-41b5-8a9a-06ab63231c7b_fixed.java
index 71189c3..5d868d9 100644
--- a/tmp/f94f9623-cd97-4173-b38d-12432d2ad36d_buggy.java
+++ b/tmp/ca833234-ce13-41b5-8a9a-06ab63231c7b_fixed.java
@@ -1,46 +1,59 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
-        for (final Iterator i = options.iterator(); i.hasNext();) {
+        // Keep track of options validated in the first block
+        // to avoid redundant validation later.
+        final java.util.Set validated = new java.util.HashSet();
+
+        for (final java.util.Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
+            // needs validation? (required options or groups must be validated)
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
+                // Perform validation (checks requirements, handles groups recursively,
+                // and potentially validates values if option is present).
                 option.validate(commandLine);
+                validated.add(option); // Mark as validated
             }
 
-            // if the child option is present then validate it
+            // if the child option is present then count it
             if (commandLine.hasOption(option)) {
+                // Increment count and check against maximum allowed
                 if (++present > maximum) {
                     unexpected = option;
-
-                    break;
+                    break; // Too many options found
                 }
 
+                // If the option was present but wasn't validated in the block above
+                // (e.g., an optional option that is present), validate it now.
+                if (!validated.contains(option)) {
                     option.validate(commandLine);
                 }
             }
+        }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
-        // too few option
+        // too few options
+        // Note: This count ('present') might not be perfectly accurate for complex nested groups,
+        // but it matches the original logic's scope.
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
-        for (final Iterator i = anonymous.iterator(); i.hasNext();) {
+        for (final java.util.Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
