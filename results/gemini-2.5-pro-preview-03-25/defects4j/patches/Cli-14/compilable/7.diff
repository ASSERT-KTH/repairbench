diff --git a/tmp/33deb8d4-856f-4898-a704-7a1d7a487cce_buggy.java b/tmp/9f351ab8-5de2-49a6-8157-41e72a344fbf_fixed.java
index 71189c3..51949a1 100644
--- a/tmp/33deb8d4-856f-4898-a704-7a1d7a487cce_buggy.java
+++ b/tmp/9f351ab8-5de2-49a6-8157-41e72a344fbf_fixed.java
@@ -1,46 +1,58 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // If it's a group, delegate validation.
+            // The group's validate method will handle its own children and constraints.
+            if (option instanceof Group) {
+                // Recursively validate the group. This handles the group's internal
+                // constraints (min/max) and validates its present children.
                 option.validate(commandLine);
             }
 
-            // if the child option is present then validate it
+            // Check if the option is present in the command line arguments
+            // This is relevant for counting towards this group's min/max constraints.
             if (commandLine.hasOption(option)) {
+                // Increment the count of present options for this group
                 if (++present > maximum) {
-                    unexpected = option;
-
+                    unexpected = option; // Found more options than allowed for this group
                     break;
                 }
 
+                // If it's a non-group option and is present, validate it.
+                // Groups have already been validated recursively above, so we skip them here
+                // to avoid double validation which caused the ClassCastException.
+                if (!(option instanceof Group)) {
                     option.validate(commandLine);
                 }
             }
+            // Note: Missing required non-group options are handled by the 'present < minimum' check below.
+            // If a required option is missing, 'present' will be lower than expected.
+        }
 
-        // too many options
+        // Check if too many options were present for this group
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
-        // too few option
+        // Check if the minimum number of required options for this group were present
         if (present < minimum) {
+            // Throw the same generic exception as the original code for missing options.
+            // A more specific exception identifying the missing option could be a future enhancement.
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
-        // validate each anonymous argument
+        // Validate each anonymous argument (same as original code)
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
