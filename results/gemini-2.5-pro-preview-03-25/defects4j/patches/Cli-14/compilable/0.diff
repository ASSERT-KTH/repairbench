diff --git a/tmp/ecb40a85-937b-4ab0-9701-9a0d95e3ef56_buggy.java b/tmp/59d4620a-832b-48a7-928c-1907c49d7b69_fixed.java
index 71189c3..1c28363 100644
--- a/tmp/ecb40a85-937b-4ab0-9701-9a0d95e3ef56_buggy.java
+++ b/tmp/59d4620a-832b-48a7-928c-1907c49d7b69_fixed.java
@@ -1,46 +1,61 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
-        for (final Iterator i = options.iterator(); i.hasNext();) {
+        // Keep track of options already validated in this context
+        // to prevent issues with redundant validation calls (like CLI-144)
+        final java.util.Set validated = new java.util.HashSet();
+
+        for (final java.util.Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
+            boolean isPresent = commandLine.hasOption(option);
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
-
-            // if the child option is present then validate it
-            if (commandLine.hasOption(option)) {
+            // Count present options for min/max check
+            if (isPresent) {
                 if (++present > maximum) {
                     unexpected = option;
-
+                    // If maximum is exceeded, we can stop processing options within this group.
                     break;
                 }
+            }
 
+            // Determine if validation is needed for this specific option instance
+            // Needs validation if:
+            // 1. It's a Group (to validate internal structure/constraints)
+            // 2. It's required (validate presence and value)
+            // 3. It's present (validate value/arguments if given)
+            boolean needsValidation = option instanceof Group || option.isRequired() || isPresent;
+
+            // Perform validation if needed and if it hasn't been validated already
+            // validated.add() returns true if the option was successfully added (i.e., not present before)
+            if (needsValidation && validated.add(option)) {
                  option.validate(commandLine);
             }
         }
 
-        // too many options
+        // Check if too many options were present (identified during iteration)
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
-        // too few option
+        // Check if the minimum number of required options were present
         if (present < minimum) {
+            // This exception indicates that the group constraints (minimum required options) are not met.
+            // Individual required options missing should ideally be caught by their own validate() method.
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
-        // validate each anonymous argument
-        for (final Iterator i = anonymous.iterator(); i.hasNext();) {
+        // Validate each anonymous argument
+        // Assuming anonymous arguments are handled separately and don't overlap validation-wise
+        // with the named options processed above.
+        for (final java.util.Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
+            // Anonymous options might also need validation (e.g., type, count)
             option.validate(commandLine);
         }
     }
\ No newline at end of file
