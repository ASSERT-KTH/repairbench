diff --git a/tmp/1f2f8088-46b1-41b4-94cb-165ecee9f14d_buggy.java b/tmp/6431f4a7-255e-4b27-8e89-cfcd1e05ac60_fixed.java
index e69de29..887a5b0 100644
--- a/tmp/1f2f8088-46b1-41b4-94cb-165ecee9f14d_buggy.java
+++ b/tmp/6431f4a7-255e-4b27-8e89-cfcd1e05ac60_fixed.java
@@ -0,0 +1,93 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.HttpConnection;
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+// The class org.jsoup.nodes.FormElement contains the buggy method.
+// We only provide the fixed method formData() here.
+
+public class FormElement extends Element {
+    // Assume other parts of the class (constructor, fields like formElements, addElement method) exist as in jsoup.
+    // We only provide the fixed formData method.
+
+    // Required constructor for extending Element
+    public FormElement(org.jsoup.parser.Tag tag, String baseUri, org.jsoup.nodes.Attributes attributes) {
+        super(tag, baseUri, attributes);
+        // Initialization of internal 'formElements' list would likely happen elsewhere (e.g., TreeBuilder)
+        // or through the addElement method if used directly.
+    }
+
+
+    /**
+     * Get the data that this form submits. The returned list is a copy of the data, and changes to the list will not
+     * be reflected in the DOM. This method ensures it reads the current state of the form elements, including any
+     * modifications made after parsing.
+     *
+     * @return a list of key val pairs representing the data submitted by this form
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // ** The fix is to select current elements using select(), not rely on a potentially stale cached list **
+        Elements els = select("*"); // Select all current descendants
+
+        for (Element el : els) {
+            // Basic filtering for submittable elements
+            if (!el.tag().isFormSubmittable()) continue; // Skip non-submittable tags (like <p>, <div> etc.)
+            if (el.hasAttr("disabled")) continue; // Skip disabled elements
+            String name = el.attr("name");
+            if (name.length() == 0) continue; // Skip elements without a name attribute
+            String type = el.attr("type").toLowerCase(); // Normalize type attribute for comparison
+            String tagName = el.normalName(); // Use normalized (lowercase) tag name
+
+            // Handle <select> elements
+            if ("select".equals(tagName)) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option : options) {
+                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                // For single-selects (<select> without 'multiple' attribute), if no option is explicitly selected,
+                // browsers often submit the value of the first option.
+                if (!set && !el.hasAttr("multiple")) {
+                    Element firstOption = el.selectFirst("option");
+                    if (firstOption != null) {
+                        data.add(HttpConnection.KeyVal.create(name, firstOption.val()));
+                    }
+                }
+            // Handle <input type="checkbox"> and <input type="radio">
+            } else if ("checkbox".equals(type) || "radio".equals(type)) {
+                // Only include if the checkbox/radio is checked
+                if (el.hasAttr("checked")) {
+                    // If value attribute is missing, HTML spec defaults checkbox value to "on"
+                    String val = el.val().length() > 0 ? el.val() : "on";
+                    data.add(HttpConnection.KeyVal.create(name, val));
+                }
+            // Handle all other submittable elements (<input type="text">, <textarea>, <button>, etc.)
+            } else {
+                // Skip specific input types that don't submit values in this way
+                if ("file".equals(type) || "reset".equals(type)) {
+                    continue;
+                }
+                // Include the value of other input types (text, password, hidden, submit, image),
+                // <textarea>, and potentially <button> elements (if named).
+                // Note: This includes <input type="submit" name="..."/> which matches the test case expectation.
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+        }
+        return data;
+    }
+
+    // Dummy methods needed for compilation if this snippet is treated standalone.
+    // In reality, these would be inherited or implemented in the actual Element class.
+    // @Override
+    // public String normalName() { return tag().normalName(); } // Example
+    // Add other necessary overrides or helper methods if needed for compilation context.
+    // For the fix, only the logic within formData() is relevant.
+    // Need HttpConnection.KeyVal for the return type, assume it's accessible.
+    // Need Tag, Attributes etc. assume they are accessible.
+}
\ No newline at end of file
