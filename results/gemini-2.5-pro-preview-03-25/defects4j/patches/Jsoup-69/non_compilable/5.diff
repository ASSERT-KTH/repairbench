diff --git a/tmp/5f5a9958-8478-4647-8d56-337e477d1269_buggy.java b/tmp/f6e1e891-d096-485f-9508-b06b15b67234_fixed.java
index e69de29..0235bac 100644
--- a/tmp/5f5a9958-8478-4647-8d56-337e477d1269_buggy.java
+++ b/tmp/f6e1e891-d096-485f-9508-b06b15b67234_fixed.java
@@ -0,0 +1,108 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.HttpConnection; // Assuming KeyVal impl is here or similar static factory method exists
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+import java.util.ArrayList;
+import java.util.List;
+
+// Assuming this method is part of the org.jsoup.nodes.FormElement class
+
+    /**
+     * Get the data that this form submits. The returned list is a copy of the data, and changes to the list will not
+     * be reflected in the DOM.
+     * @return a list of key val pairs, corresponding to controls on the form.
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // Select the form controls that are descendants of this form element in the current DOM.
+        // This ensures that elements removed from the DOM are not included, fixing the bug.
+        Elements controls = select("input, select, textarea, button"); // Select only relevant form controls
+
+        for (Element el: controls) {
+            // Basic validation: must have a name and not be disabled.
+            if (!el.hasAttr("name")) continue;
+            String name = el.attr("name");
+            if (name.length() == 0) continue;
+            if (el.hasAttr("disabled")) continue;
+
+            String tagName = el.tagName();
+            String type = el.attr("type");
+
+            // Handle different control types according to HTML form submission rules:
+            if ("button".equals(tagName)) {
+                 // Buttons are submitted only if type=submit (default) or type=image.
+                 // type=button and type=reset are not submitted.
+                if (type.equalsIgnoreCase("button") || type.equalsIgnoreCase("reset")) {
+                    continue;
+                }
+                // Create a KeyVal for the button's name and value (text content).
+                // If type=image, coordinates would also be sent in a real submission,
+                // but formData() typically represents the static data. We can add name=value.
+                // If type=image, also add coordinates (defaulting to 0,0 as Jsoup doesn't simulate clicks)
+                if (type.equalsIgnoreCase("image")) {
+                     if (el.hasAttr("value")) // Add name=value if value attribute is present
+                        data.add(HttpConnection.KeyVal.create(name, el.attr("value")));
+                     data.add(HttpConnection.KeyVal.create(name + ".x", "0"));
+                     data.add(HttpConnection.KeyVal.create(name + ".y", "0"));
+                 } else { // type=submit or missing/invalid type
+                    data.add(HttpConnection.KeyVal.create(name, el.val())); // Use val() which gets text content for button
+                }
+
+            } else if ("select".equals(tagName)) {
+                boolean multiple = el.hasAttr("multiple");
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option: options) {
+                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                // If no option selected and not a multi-select, submit the first option's value per HTML spec
+                if (!set && !multiple) {
+                    Element firstOption = el.selectFirst("option");
+                    if (firstOption != null) {
+                        data.add(HttpConnection.KeyVal.create(name, firstOption.val()));
+                    }
+                }
+
+            } else if ("input".equals(tagName)) {
+                // Handle various input types
+                if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                    // Only submit if checked
+                    if (el.hasAttr("checked")) {
+                        String val = el.val().length() > 0 ? el.val() : "on"; // Default value is "on" if value attribute omitted
+                        data.add(HttpConnection.KeyVal.create(name, val));
+                    }
+                } else if ("file".equalsIgnoreCase(type)) {
+                    // Submit filename if value is set, otherwise empty string.
+                    // Actual file content requires Connection#data(KeyVal) with InputStream.
+                    data.add(HttpConnection.KeyVal.create(name, el.val()));
+                } else if ("submit".equalsIgnoreCase(type)) {
+                    // Include submit button's name=value if it has a non-empty value.
+                    // In real submission, only the clicked button is sent. formData() often includes all.
+                    if (el.val().length() > 0)
+                      data.add(HttpConnection.KeyVal.create(name, el.val()));
+                } else if ("image".equalsIgnoreCase(type)) {
+                    // input type="image" sends name=value (if value attr present) and coordinates x, y
+                     if (el.hasAttr("value"))
+                        data.add(HttpConnection.KeyVal.create(name, el.attr("value")));
+                    // Add coordinates, defaulting to 0,0
+                    data.add(HttpConnection.KeyVal.create(name + ".x", "0"));
+                    data.add(HttpConnection.KeyVal.create(name + ".y", "0"));
+                } else if ("reset".equalsIgnoreCase(type) || "button".equalsIgnoreCase(type)) {
+                    // input type=reset and type=button are not submitted
+                    continue;
+                }
+                else {
+                    // Includes text, password, hidden, email, number, date, etc.
+                    data.add(HttpConnection.KeyVal.create(name, el.val()));
+                }
+
+            } else if ("textarea".equals(tagName)) {
+                // Textareas value is its content
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+            // Other tags (like object, keygen - though deprecated/unsupported) are ignored.
+        }
+        return data;
+    }
\ No newline at end of file
