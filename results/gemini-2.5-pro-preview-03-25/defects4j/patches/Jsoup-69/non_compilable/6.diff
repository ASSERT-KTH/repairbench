diff --git a/tmp/e32231a2-799c-4733-98aa-d76525b87bfa_buggy.java b/tmp/c841ae99-bdfd-4493-b53f-af991f03e20d_fixed.java
index e69de29..a356d71 100644
--- a/tmp/e32231a2-799c-4733-98aa-d76525b87bfa_buggy.java
+++ b/tmp/c841ae99-bdfd-4493-b53f-af991f03e20d_fixed.java
@@ -0,0 +1,57 @@
+    /**
+     * Retrieves the form's data for submission. The data is gathered from all submittable elements, according to the
+     * <a href="http://www.w3.org/TR/html5/forms.html#constructing-form-data-set">HTML5 spec</a>.
+     * <p>Data is returned as a list of {@link org.jsoup.Connection.KeyVal} pairs.</p>
+     * <p>Specifically:</p>
+     * <ul>
+     *     <li>{@code input type=text, password, hidden, search, tel, url, email, number, date, time, month, week}</li>
+     *     <li>{@code input type=checkbox, radio} (if checked)</li>
+     *     <li>{@code input type=submit} (if clicked/submitted). If the submit button has a {@code name} attribute, it is included.</li>
+     *     <li>{@code textarea}</li>
+     *     <li>{@code select} (values from selected {@code option}s)</li>
+     *     <li>{@code input type=file} IS NOT INCLUDED. Use {@link org.jsoup.Connection.Request#data(org.jsoup.Connection.KeyVal...)} to add file data.</li>
+     * </ul>
+     * <p>This method should be called after the form's data has been populated, generally by a user.</p>
+     *
+     * @return a list of key value pairs representing the form data.
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // select the form controls elements, not the cached list, so that elements added after parse are included
+        // related discussion: https://github.com/jhy/jsoup/pull/897
+        Elements els = select("input[name], select[name], textarea[name]");
+        for (Element el: els) {
+            // skip disabled elements
+            if (el.hasAttr("disabled")) continue;
+            // skip any non-form-submittable types (image, button, reset)
+            if (!el.tag().isFormSubmittable()) continue;
+
+            String name = el.attr("name");
+            if (name.length() == 0) continue;
+            String type = el.attr("type");
+
+            if ("select".equals(el.tagName())) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option: options) {
+                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                if (!set) { // otherwise find the first option if none are selected
+                    Element option = el.select("option").first();
+                    if (option != null)
+                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                }
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // only add checkbox or radio if they have the checked attribute
+                if (el.hasAttr("checked")) {
+                    final String val = el.val().length() > 0 ? el.val() : "on"; // spec says "on" if value is not specified
+                    data.add(HttpConnection.KeyVal.create(name, val));
+                }
+            } else { // otherwise, add the value unconditionally
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+        }
+        return data;
+    }
\ No newline at end of file
