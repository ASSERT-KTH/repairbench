diff --git a/tmp/acedc9a0-c5f0-40ac-b131-daa71daf5dc6_buggy.java b/tmp/447a7df7-3300-4b98-bd8f-54e52fc8d1d2_fixed.java
index e69de29..233d1a6 100644
--- a/tmp/acedc9a0-c5f0-40ac-b131-daa71daf5dc6_buggy.java
+++ b/tmp/447a7df7-3300-4b98-bd8f-54e52fc8d1d2_fixed.java
@@ -0,0 +1,60 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.HttpConnection;
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+// Assuming 'elements' is a field of type Elements containing the form's controls,
+// and standard Element methods like parent(), tag(), attr(), hasAttr(), select(), val(), tagName() are available.
+    /**
+     * Retrieves the form's data for submission. The data is collected from all elements owned by this form, that
+     * have a {@code name} attribute. Data is supplied in key/val pairs, keyed by the element name. The values are
+     * supplied according to the spec, e.g. value from {@code input}, {@code textarea}, {@code select}; checked state
+     * for {@code checkbox}, {@code radio}; etc. Keyvals are ordered according to their position in the document.
+     * <p>Only elements that are descendents of this form control are included in the submitted data. Any elements
+     * that were previously descendants but have been moved or removed are not included.</p>
+     *
+     * @return a list of key val pairs for submission.
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // iterate the form elements and accumulate their values
+        for (Element el : elements) {
+            // FIX: check if the element is still in the DOM tree. If not (its parent is null), it was removed, so skip it.
+            if (el.parent() == null)
+                continue;
+
+            if (!el.tag().isFormSubmittable()) continue; // contents are form submitted by default
+            if (el.hasAttr("disabled")) continue; // skip disabled fields
+
+            String name = el.attr("name");
+            if (name.length() == 0) continue;
+            String type = el.attr("type");
+
+            if ("select".equals(el.tagName())) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option: options) {
+                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                if (!set) {
+                    Element option = el.select("option").first();
+                    if (option != null)
+                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                }
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // only add checkbox or radio if they have the checked attribute
+                if (el.hasAttr("checked")) {
+                    final String val = el.val().length() > 0 ? el.val() : "on"; // spec specifies "on" as default value
+                    data.add(HttpConnection.KeyVal.create(name, val));
+                }
+            } else {
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+        }
+        return data;
+    }
\ No newline at end of file
