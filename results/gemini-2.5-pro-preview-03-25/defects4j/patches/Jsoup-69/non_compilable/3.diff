diff --git a/tmp/78bd4945-e951-4409-9d3f-9ebc3331eddb_buggy.java b/tmp/2e5a7712-79b0-4fc0-ac5c-6957d016e46d_fixed.java
index e69de29..2c509f8 100644
--- a/tmp/78bd4945-e951-4409-9d3f-9ebc3331eddb_buggy.java
+++ b/tmp/2e5a7712-79b0-4fc0-ac5c-6957d016e46d_fixed.java
@@ -0,0 +1,135 @@
+import org.jsoup.Connection;
+import org.jsoup.internal.StringUtil;
+import org.jsoup.nodes.Attributes;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Tag;
+import org.jsoup.select.Elements;
+
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.List;
+
+// Note: This is the containing class `FormElement`. Only the `formData` method needs to be fixed.
+// Assume other necessary methods and fields exist as in the original `FormElement` class.
+
+public class FormElement extends Element {
+    // Assume necessary constructor and other fields/methods exist
+    // e.g., protected FormElement(Tag tag, String baseUri, Attributes attributes) { super(tag, baseUri, attributes); }
+
+    /**
+     * Get the data that this form submits. The returned list is a copy of the data, and changes to the list will not
+     * be reflected in the DOM.
+     * <p>Uses the {@code data()} method on the {@link Connection} interface which is useful for simplified cases. For
+     * example, if you want to create a Connection from a form, you can just call {@link Connection#data(java.util.Collection)} using
+     * the form data.</p>
+     * <p>
+     * A side effect of calling this method is that and {@code input type=hidden} elements in the form will be implicitly
+     * added as key/value pairs.
+     * </p>
+     * @return a list of key vals
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // Select all descendant elements from the current DOM state within this form.
+        Elements els = this.select("*");
+
+        for (Element el : els) {
+            if (!el.tag().isFormSubmittable()) continue; // Must be a form submittable element (input, select, textarea, button, object)
+            if (el.hasAttr("disabled")) continue; // Skip disabled elements
+            String name = el.attr("name");
+            if (name.length() == 0) continue; // Skip elements without a name
+
+            // Check if the element belongs to this form element, and not a nested form
+            // This check ensures that if the DOM is manipulated (e.g., element removed),
+            // we query the element's current parent form.
+            FormElement form = el.form();
+            if (form != null && form.equals(this)) {
+
+                String type = el.attr("type");
+
+                if ("select".equals(el.tagName())) {
+                    Elements options = el.select("option[selected]");
+                    boolean set = false;
+                    for (Element option : options) {
+                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                        set = true;
+                    }
+                    // No selected options, choose first option if exists, per spec
+                    if (!set) {
+                        Element option = el.selectFirst("option");
+                        if (option != null)
+                            data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    }
+                } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                    // Only add checked checkboxes and radios
+                    if (el.hasAttr("checked")) {
+                        // Use "on" if value attr is not present, per spec
+                        final String val = el.val().length() > 0 ? el.val() : "on";
+                        data.add(HttpConnection.KeyVal.create(name, val));
+                    }
+                } else if ("file".equalsIgnoreCase(type)) {
+                    // Don't submit file input values (as the value is the filename, not content)
+                    // Keep behavior consistent with previous jsoup versions / browser behavior for form data collection.
+                    continue;
+                } else {
+                    // Handles input types: text, password, hidden, submit, image, etc.
+                    // Also handles button elements.
+
+                    // Exclude input type=button, button elements with type=button or type=reset
+                    final String tagName = el.tagName();
+                    if (tagName.equals("input") && type.equalsIgnoreCase("button")) {
+                        continue; // Skip input type=button
+                    }
+                    if (tagName.equals("button")) {
+                         String buttonType = el.attr("type").toLowerCase();
+                         // Buttons default to type=submit
+                         if (buttonType.equals("button") || buttonType.equals("reset")) {
+                             continue; // Skip button type=button and type=reset
+                         }
+                    }
+
+                    // Add all other valid inputs, including submit buttons with names
+                    data.add(HttpConnection.KeyVal.create(name, el.val()));
+                }
+            }
+        }
+        return data;
+    }
+
+    // Dummy HttpConnection class and KeyVal interface for compilation if needed standalone.
+    // In the actual jsoup library, these would be imported.
+    private static class HttpConnection {
+        static class KeyVal implements Connection.KeyVal {
+            private String key;
+            private String value;
+
+            static KeyVal create(String key, String value) {
+                KeyVal kv = new KeyVal();
+                kv.key = key;
+                kv.value = value;
+                return kv;
+            }
+            @Override public KeyVal key(String key) { this.key = key; return this; }
+            @Override public String key() { return key; }
+            @Override public KeyVal value(String value) { this.value = value; return this; }
+            @Override public String value() { return value; }
+            @Override public Connection.KeyVal inputStream(java.io.InputStream inputStream) { return this; /* Not implemented */ }
+            @Override public java.io.InputStream inputStream() { return null; /* Not implemented */ }
+            @Override public boolean hasInputStream() { return false; }
+            @Override public Connection.KeyVal contentType(String contentType) { return this; /* Not implemented */ }
+            @Override public String contentType() { return null; /* Not implemented */ }
+            @Override public String toString() { return key + "=" + value; }
+        }
+    }
+
+    // Assume base Element, Attributes, Tag classes exist or are imported.
+    // This is just to make the provided function syntactically plausible.
+    public FormElement(Tag tag, String baseUri, Attributes attributes) { super(tag, baseUri, attributes); }
+
+}
+
+// Assume base Element class provides select(String), form(), tag(), hasAttr(), attr(), val(), tagName(), selectFirst()
+// Assume Tag class provides isFormSubmittable()
+// Assume Attributes class exists
+// Assume Elements class exists and is iterable
\ No newline at end of file
