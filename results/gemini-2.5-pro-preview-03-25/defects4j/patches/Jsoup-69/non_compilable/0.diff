diff --git a/tmp/2334f39f-6297-444d-9e7c-3e1f33e61779_buggy.java b/tmp/66a03e1f-ff39-4d79-b875-40ab91ccced3_fixed.java
index e69de29..24a4eec 100644
--- a/tmp/2334f39f-6297-444d-9e7c-3e1f33e61779_buggy.java
+++ b/tmp/66a03e1f-ff39-4d79-b875-40ab91ccced3_fixed.java
@@ -0,0 +1,74 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.HttpConnection;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.InputElement;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+// Assuming this method is within the org.jsoup.nodes.FormElement class
+
+public List<Connection.KeyVal> formData() {
+    ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+    // iterate the form control elements and accumulate their values
+    for (Element el: elements) { // Use the internal list of elements
+        // **FIX START**
+        // Check if the element is still connected to a document. If not, it was removed.
+        // This prevents elements removed from the DOM via element.remove() from being included.
+        if (el.ownerDocument() == null) {
+            continue; // Skip elements that have been removed from the tree
+        }
+        // **FIX END**
+
+        if (!el.tag().isFormSubmittable()) continue; // skip non-submittable tags (e.g. <form>)
+        if (el.hasAttr("disabled")) continue; // skip disabled fields
+        String name = el.attr("name");
+        if (name.length() == 0) continue;
+        String type = el.attr("type");
+
+        // Special case for checkbox and radio buttons: only add if checked
+        if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+            if (el.hasAttr("checked")) {
+                final String val = el.val().length() > 0 ? el.val() : "on"; // per spec, if value empty, default to 'on'
+                data.add(HttpConnection.KeyVal.create(name, val));
+            }
+            continue; // don't default add
+        }
+
+        // Special case for file inputs - don't add the value, but do add the KeyVal for the name, so Connection can find the files to upload. Add stream if presented.
+        if ("file".equalsIgnoreCase(type)) {
+            // TODO: consider if name=val is appropriate for file inputs - current thinking is no, maybe just name.
+            data.add(HttpConnection.KeyVal.create(name, el.val())); // we don't submit the file value, but the name is used as the key
+            if (el instanceof InputElement) {
+                InputElement input = (InputElement) el;
+                if (input.inputStream() != null)
+                    data.get(data.size()-1).inputStream(input.inputStream()); // set on the KeyVal added above
+            }
+            continue; // don't default add
+        }
+
+        // Special case for selects: multi-selects may have multiple values
+        if ("select".equalsIgnoreCase(el.tagName())) {
+            Elements options = el.select("option[selected]");
+            boolean set = false;
+            for (Element option: options) {
+                data.add(HttpConnection.KeyVal.create(name, option.val()));
+                set = true;
+            }
+            if (!set) {
+                // if no selected option, must send first value of a non-disabled option, if exists and required
+                Element first = el.select("option:not([disabled])").first();
+                 if (first != null && el.hasAttr("required")) // todo - should this be isRequired()?
+                    data.add(HttpConnection.KeyVal.create(name, first.val()));
+                // otherwise, don't add anything (no selected val)
+            }
+            continue; // don't default add
+        }
+
+        // default: add key/val pair
+        data.add(HttpConnection.KeyVal.create(name, el.val()));
+    }
+    return data;
+}
\ No newline at end of file
