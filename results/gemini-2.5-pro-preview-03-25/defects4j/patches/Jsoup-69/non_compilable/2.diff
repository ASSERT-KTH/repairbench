diff --git a/tmp/5722db85-7f27-49a2-be66-76a80326e226_buggy.java b/tmp/be8b231e-de25-43ab-861a-a6245bc865e2_fixed.java
index e69de29..2e3ae80 100644
--- a/tmp/5722db85-7f27-49a2-be66-76a80326e226_buggy.java
+++ b/tmp/be8b231e-de25-43ab-861a-a6245bc865e2_fixed.java
@@ -0,0 +1,91 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.HttpConnection;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+    /**
+     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
+     * list will not be reflected in the DOM.
+     * @return a list of key vals
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // iterate the form control elements stored in 'elements' list
+        for (Element el: elements) { // 'elements' is a List<Element> field in FormElement
+            // --- Start Check: Element Still Part of Form ---
+            // Verify that the element 'el' from the cached 'elements' list is still a descendant of this FormElement ('this').
+            // This check is necessary because 'el' could have been removed from the DOM after the 'elements' list was populated.
+            boolean isPartOfForm = false;
+            Element current = el;
+            while (true) {
+                Element parent = current.parent();
+                // If we reach a null parent, it means the element is detached or we've traversed past the document root
+                // without finding 'this' form as an ancestor.
+                if (parent == null) {
+                    isPartOfForm = false;
+                    break;
+                }
+                // If we find 'this' FormElement as the parent, the element is confirmed to be part of the form.
+                if (parent == this) {
+                    isPartOfForm = true;
+                    break;
+                }
+                // Optimization: If the parent is the Document node, and it's not 'this' form element,
+                // then 'el' cannot be a descendant of 'this' form element. Stop traversing.
+                if (parent instanceof Document) {
+                     isPartOfForm = false;
+                     break;
+                }
+                // Move up the DOM tree.
+                current = parent;
+            }
+
+            // If the element is no longer part of this form's DOM subtree, skip it.
+            if (!isPartOfForm) {
+                continue;
+            }
+            // --- End Check ---
+
+
+            // Element is confirmed to be part of the form, proceed with existing logic:
+            if (!el.tag().isFormSubmittable()) continue; // skip elements like <fieldset>
+            if (el.hasAttr("disabled")) continue; // skip disabled fields
+            String name = el.attr("name");
+            if (name.length() == 0) continue; // skip elements without a name
+            String type = el.attr("type");
+            final String tagName = el.tagName();
+
+            // Handle <select> elements
+            if ("select".equals(tagName)) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option: options) {
+                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                // If no option is selected, browser behavior is often to submit the first option's value.
+                if (!set) {
+                    Element option = el.select("option").first();
+                    if (option != null)
+                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                }
+            // Handle checkbox and radio types
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // Only submit checkboxes/radios if they are checked.
+                if (el.hasAttr("checked")) {
+                    // Use the element's value attribute. If the value attribute is missing, the default value is "on".
+                    final String val = el.val().length() > 0 ? el.val() : "on";
+                    data.add(HttpConnection.KeyVal.create(name, val));
+                }
+            // Handle other input types (text, password, hidden, submit, etc.), buttons, and textareas
+            } else {
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+        }
+        return data;
+    }
\ No newline at end of file
