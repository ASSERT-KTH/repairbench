diff --git a/tmp/f4010835-2d06-4fb1-a4c2-996d31fcb533_buggy.java b/tmp/000ad76c-c2f6-4b26-afc0-b0687326da51_fixed.java
index e69de29..1e2a428 100644
--- a/tmp/f4010835-2d06-4fb1-a4c2-996d31fcb533_buggy.java
+++ b/tmp/000ad76c-c2f6-4b26-afc0-b0687326da51_fixed.java
@@ -0,0 +1,81 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.HttpConnection;
+import org.jsoup.nodes.Attributes;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Tag;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FormElement extends Element {
+    private final Elements elements = new Elements();
+
+    /**
+     * Create a new, standalone form element.
+     * @param tag        tag of this element
+     * @param baseUri    the base URI
+     * @param attributes initial attributes
+     * @see #create(Tag, String, Attributes)
+     */
+    public FormElement(Tag tag, String baseUri, Attributes attributes) {
+        super(tag, baseUri, attributes);
+    }
+
+    /**
+     * Get the list of key value pairs, corresponding to names and values of the form elements.
+     * @return a list of key values for the form
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // Iterate selector query finding specific form controls, respect disabled states.
+        // Changed from iterating the 'elements' list, which was stale if elements were removed setting up the form.
+        Elements currentControls = select("input, select, textarea, button");
+        for (Element el: currentControls) {
+            if (el.form() != this) continue; // filter out controls not part of this form (e.g. nested forms)
+            if (!el.tag().isFormSubmittable()) continue; // contents are form submittable? (e.g. <template>)
+            if (el.hasAttr("disabled")) continue; // skip disabled fields
+            String name = el.attr("name");
+            if (name.length() == 0) continue; // skip unnamed fields
+            String type = el.attr("type").toLowerCase();
+
+            if ("select".equals(el.tagName())) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option : options) {
+                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                if (!set) {
+                    Element option = el.select("option").first();
+                    if (option != null)
+                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                }
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // only add checkbox or radio if they have the checked attribute
+                if (el.hasAttr("checked")) {
+                    final String val = el.val().length() >  0 ? el.val() : "on"; // spec specifies "on" if value attribute is missing
+                    data.add(HttpConnection.KeyVal.create(name, val));
+                }
+            } else {
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+        }
+        return data;
+    }
+
+    // Other methods of FormElement would be here...
+    // Dummy implementations for compilation if needed:
+    @Override
+    public FormElement addElement(Element element) {
+        elements.add(element);
+        return this;
+    }
+
+    // Required constructor if extending Element directly without default constructor
+    public static FormElement create(Tag tag, String baseUri, Attributes attributes) {
+         return new FormElement(tag, baseUri, attributes);
+    }
+
+}
\ No newline at end of file
