diff --git a/tmp/ad689669-18ca-4f2b-b2c8-9fc785a2bc09_buggy.java b/tmp/aab1c8a6-cb06-47c4-8e4d-b2aa18f00e1a_fixed.java
index 2b35d23..03a1814 100644
--- a/tmp/ad689669-18ca-4f2b-b2c8-9fc785a2bc09_buggy.java
+++ b/tmp/aab1c8a6-cb06-47c4-8e4d-b2aa18f00e1a_fixed.java
@@ -1,8 +1,20 @@
     /** Compute the maximum of two values
      * @param a first value
      * @param b second value
      * @return b if a is lesser or equal to b, a otherwise
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        // The original code had two issues:
+        // 1. Incorrect NaN check: Float.isNaN(a + b) fails for cases like max(Inf, -Inf).
+        //    The correct check consistent with Math.max is Float.isNaN(a) || Float.isNaN(b).
+        // 2. Incorrect return value when a > b and neither is NaN: It returned b instead of a.
+        // The corrected logic handles NaN according to Math.max specification and returns the larger value otherwise.
+        // This combined ternary expression implements the required logic.
+        // If a <= b, it correctly returns b (unless b is NaN, then NaN <= b is false).
+        // If a > b, it checks for NaNs. If either is NaN, it returns NaN. Otherwise, it returns a.
+        // Note: The comparison a <= b returns false if either a or b is NaN.
+        if (Float.isNaN(a) || Float.isNaN(b)) {
+            return Float.NaN;
+        }
+        return (a <= b) ? b : a;
     }
\ No newline at end of file
