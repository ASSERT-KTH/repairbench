diff --git a/tmp/81ebc908-59a1-466b-ab5c-8c0275ad0103_buggy.java b/tmp/0fdc1aab-ca29-4b83-ac11-b733171fea9f_fixed.java
index 2b35d23..13daf00 100644
--- a/tmp/81ebc908-59a1-466b-ab5c-8c0275ad0103_buggy.java
+++ b/tmp/0fdc1aab-ca29-4b83-ac11-b733171fea9f_fixed.java
@@ -1,8 +1,25 @@
     /** Compute the maximum of two values
      * @param a first value
      * @param b second value
      * @return b if a is lesser or equal to b, a otherwise
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        // Handle NaN: if either input is NaN, the result is NaN.
+        if (Float.isNaN(a) || Float.isNaN(b)) {
+            return Float.NaN;
+        }
+
+        // Handle the specific case involving negative zero: max(-0.0f, 0.0f) should be 0.0f.
+        // The standard comparison (-0.0f >= 0.0f) is true, which would incorrectly return -0.0f.
+        // We use floatToRawIntBits to distinguish -0.0f (0x80000000) from 0.0f (0x0).
+        // This check specifically targets the case where a is -0.0f and b is 0.0f or -0.0f.
+        if (a == 0.0f && b == 0.0f && Float.floatToRawIntBits(a) == 0x80000000) {
+            // If a is -0.0f, and b is 0.0f or -0.0f, return b.
+            // This yields max(-0.0f, 0.0f) = 0.0f and max(-0.0f, -0.0f) = -0.0f.
+            return b;
+        }
+
+        // For all other cases (including max(0.0f, -0.0f) == 0.0f), the standard comparison works.
+        // It also correctly handles infinities.
+        return (a >= b) ? a : b;
     }
\ No newline at end of file
