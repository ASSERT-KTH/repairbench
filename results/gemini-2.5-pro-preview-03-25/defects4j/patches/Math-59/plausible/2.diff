diff --git a/tmp/c3c34bb4-28c3-45f8-8361-17a61ed6d432_buggy.java b/tmp/86d73de8-a3cc-4200-9c33-0616ab11f42b_fixed.java
index 2b35d23..1257a79 100644
--- a/tmp/c3c34bb4-28c3-45f8-8361-17a61ed6d432_buggy.java
+++ b/tmp/86d73de8-a3cc-4200-9c33-0616ab11f42b_fixed.java
@@ -1,8 +1,23 @@
     /** Compute the maximum of two values
      * @param a first value
      * @param b second value
-     * @return b if a is lesser or equal to b, a otherwise
+     * @return the larger of a and b, handling NaN according to {@link Math#max(float, float)}
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        // The original code had two issues:
+        // 1. When a > b and neither was NaN, it incorrectly returned b instead of a.
+        // 2. The NaN check used Float.isNaN(a + b), which is not equivalent to the
+        //    Math.max specification (return NaN if *either* argument is NaN) and fails
+        //    for cases like max(Infinity, -Infinity).
+        //
+        // This corrected version implements the logic according to Math.max(float, float):
+        // - If either a or b is NaN, return NaN.
+        // - Otherwise, return the greater of a and b.
+        //
+        // The ternary structure below achieves this:
+        // - If a <= b is true (and neither is NaN, because NaN comparisons are false), return b.
+        // - If a <= b is false (meaning a > b, or at least one is NaN):
+        //   - Check if Float.isNaN(a) || Float.isNaN(b) is true. If so, return Float.NaN.
+        //   - Otherwise (comparison was false implies a > b, and neither is NaN), return a.
+        return (a <= b) ? b : (Float.isNaN(a) || Float.isNaN(b) ? Float.NaN : a);
     }
\ No newline at end of file
