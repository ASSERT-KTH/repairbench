diff --git a/tmp/59b99839-7cf0-4645-bdd9-083efc2fa391_buggy.java b/tmp/7c6fd174-477f-4408-bdee-6194ac2b9398_fixed.java
index 2b35d23..ee2b8ea 100644
--- a/tmp/59b99839-7cf0-4645-bdd9-083efc2fa391_buggy.java
+++ b/tmp/7c6fd174-477f-4408-bdee-6194ac2b9398_fixed.java
@@ -1,8 +1,32 @@
     /** Compute the maximum of two values
      * @param a first value
      * @param b second value
      * @return b if a is lesser or equal to b, a otherwise
+     *         The behaviour is aligned with {@link java.lang.Math#max(float, float)}:
+     *         - If either argument is NaN, the result is NaN.
+     *         - max(+0.0f, -0.0f) == max(-0.0f, +0.0f) == +0.0f.
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        // Handle NaN cases first (rule: if either is NaN, result is NaN)
+        // Note: comparisons with NaN always return false, except != which returns true.
+        if (Float.isNaN(a) || Float.isNaN(b)) {
+            return Float.NaN;
+        }
+
+        // Handle zero cases specifically: max(+0.0, -0.0) == +0.0 and max(-0.0, +0.0) == +0.0
+        // The standard comparison a >= b works for max(+0.0, -0.0) -> +0.0,
+        // but fails for max(-0.0, +0.0) because -0.0 == +0.0, so (-0.0 >= +0.0) is true, returning -0.0.
+        // We need to handle the case where a is -0.0 specifically.
+        // Use floatToRawIntBits to distinguish -0.0 (0x80000000) from +0.0 (0x0).
+        // This check also implicitly handles b == 0.0f because the equality a == b is required.
+        if (a == 0.0f && b == 0.0f && Float.floatToRawIntBits(a) == 0x80000000) {
+            // If a is -0.0f, and b is +0.0f or -0.0f, return b.
+            // max(-0.0f, +0.0f) returns +0.0f (b)
+            // max(-0.0f, -0.0f) returns -0.0f (b)
+            return b;
+        }
+
+        // For all other cases, including normal numbers, infinities, and the remaining zero cases
+        // like max(+0.0f, -0.0f) and max(+0.0f, +0.0f), the standard comparison works.
+        return (a >= b) ? a : b;
     }
\ No newline at end of file
