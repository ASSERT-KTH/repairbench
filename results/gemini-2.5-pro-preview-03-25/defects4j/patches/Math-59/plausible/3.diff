diff --git a/tmp/368d9736-1e82-450c-8ab0-6850986cd707_buggy.java b/tmp/28775dde-0b5f-483a-b24d-a390cf7cfeb4_fixed.java
index 2b35d23..7d2b9f0 100644
--- a/tmp/368d9736-1e82-450c-8ab0-6850986cd707_buggy.java
+++ b/tmp/28775dde-0b5f-483a-b24d-a390cf7cfeb4_fixed.java
@@ -1,8 +1,27 @@
     /** Compute the maximum of two values
      * @param a first value
      * @param b second value
      * @return b if a is lesser or equal to b, a otherwise
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        // Handle NaNs: If either a or b is NaN, return NaN.
+        // a != a is true if a is NaN. b != b is true if b is NaN.
+        // This check follows the IEEE 754 standard behavior for max.
+        if (a != a || b != b) {
+            return Float.NaN;
+        }
+
+        // Handle zero comparison: Math.max(+0.0f, -0.0f) or max(-0.0f, +0.0f) must return +0.0f
+        // The check Float.floatToIntBits(a) == 0x80000000 identifies negative zero.
+        // If a is -0.0f and b is 0.0f (either +0.0f or -0.0f), return b.
+        // This ensures max(-0.0f, +0.0f) returns +0.0f and max(-0.0f, -0.0f) returns -0.0f.
+        if (a == 0.0f && b == 0.0f && Float.floatToIntBits(a) == 0x80000000) {
+            // a is -0.0, b is 0.0 (+0.0 or -0.0)
+            return b;
+        }
+
+        // For all other cases (including normal numbers, infinities, and max(+0.0f, -0.0f)),
+        // the standard comparison a >= b works correctly.
+        // It returns the value closer to positive infinity.
+        return (a >= b) ? a : b;
     }
\ No newline at end of file
