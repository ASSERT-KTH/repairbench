diff --git a/tmp/b4b119d1-7b3a-4208-866e-38764710a4d0_buggy.java b/tmp/9ff6f0bc-df51-4bd9-bd3e-fee91677653e_fixed.java
index 2b35d23..687f836 100644
--- a/tmp/b4b119d1-7b3a-4208-866e-38764710a4d0_buggy.java
+++ b/tmp/9ff6f0bc-df51-4bd9-bd3e-fee91677653e_fixed.java
@@ -1,8 +1,33 @@
     /** Compute the maximum of two values
      * @param a first value
      * @param b second value
-     * @return b if a is lesser or equal to b, a otherwise
+     * @return the larger of a and b, following {@link Math#max(float, float)} NaN and signed zero rules.
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        // Handle NaN: if a is NaN, return NaN.
+        // This check works because NaN is the only float value f such that f != f.
+        if (a != a) {
+            return a;
+        }
+
+        // Handle signed zeros: Math.max(-0.0f, +0.0f) == +0.0f.
+        // The Java specification requires that Float.compare(a, b) is used implicitly,
+        // which means -0.0 is considered less than +0.0.
+        // However, the direct comparison operators (<=, >=) treat -0.0 and +0.0 as equal.
+        // We need special handling for the case max(-0.0f, 0.0f) which should be 0.0f.
+        // The check (a == 0.0f && b == 0.0f && Float.floatToRawIntBits(a) == 0x80000000)
+        // identifies when a is -0.0f and b is 0.0f (could be +0.0f or -0.0f).
+        // In this specific case (a=-0.0f, b=0.0f), returning b ensures the correct result:
+        // max(-0.0f, +0.0f) returns +0.0f (b)
+        // max(-0.0f, -0.0f) returns -0.0f (b)
+        // The constant 0x80000000 is the raw integer representation of -0.0f.
+        if ((a == 0.0f) && (b == 0.0f) && (Float.floatToRawIntBits(a) == 0x80000000)) {
+            // If a is -0.0 and b is 0.0 (signed or unsigned), return b.
+            return b;
+        }
+
+        // Standard comparison for non-NaN, non-special-zero cases.
+        // This also correctly handles the case where 'a' is a number but 'b' is NaN.
+        // In that case, (a >= b) evaluates to false, and b (NaN) is returned, which is correct.
+        return (a >= b) ? a : b;
     }
\ No newline at end of file
