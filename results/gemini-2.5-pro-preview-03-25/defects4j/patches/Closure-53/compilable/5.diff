diff --git a/tmp/e63323cd-7922-44f1-9aec-3ac3b9395b2c_buggy.java b/tmp/c6ed1218-1e8e-493e-8e0c-7656859bfab8_fixed.java
index 41ea16c..69187cc 100644
--- a/tmp/e63323cd-7922-44f1-9aec-3ac3b9395b2c_buggy.java
+++ b/tmp/c6ed1218-1e8e-493e-8e0c-7656859bfab8_fixed.java
@@ -1,63 +1,68 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
+      // Make sure that the value is not used in the assignment.
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
-        Node value = key.removeFirstChild();
+        Node value = key.removeFirstChild(); // remove value node from key
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
+      // Add assignments for keys that weren't specified in the literal.
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
       Node replacement;
       // All assignments evaluate to true, so make sure that the
       // expr statement evaluates to true in case it matters.
-        nodes.add(new Node(Token.TRUE));
+      nodes.add(new Node(Token.TRUE)); // Ensures nodes is never empty
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      // Create the replacement node.
+      if (nodes.size() == 1) {
+        replacement = nodes.get(0); // Just the TRUE node
+      } else {
+        // Build comma tree: (node[0], (node[1], ... (node[N-1], node[N])))
+        // A COMMA node must have 2 children.
+        int last = nodes.size() - 1;
+        replacement = new Node(Token.COMMA, nodes.get(last - 1), nodes.get(last));
+        for (int i = last - 2; i >= 0; i--) {
+          replacement = new Node(Token.COMMA, nodes.get(i), replacement);
         }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
+      }
+
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
 
+      // Replace the original node depending on the context.
       if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+        // If the original was a VAR declaration, replace it with an expression statement.
+        Node exprResult = NodeUtil.newExpr(replacement);
+        replace.getParent().replaceChild(replace, exprResult);
       } else {
+        // Otherwise, just replace the assignment node directly.
         replace.getParent().replaceChild(replace, replacement);
       }
+      // Report the change
+      compiler.reportCodeChange();
     }
\ No newline at end of file
