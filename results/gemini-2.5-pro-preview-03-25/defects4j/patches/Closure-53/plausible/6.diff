diff --git a/tmp/14aad9a2-8a40-4c41-b10f-c4c790ae86c5_buggy.java b/tmp/25757265-de7d-4186-9672-8aaca5b2a289_fixed.java
index 41ea16c..684afeb 100644
--- a/tmp/14aad9a2-8a40-4c41-b10f-c4c790ae86c5_buggy.java
+++ b/tmp/25757265-de7d-4186-9672-8aaca5b2a289_fixed.java
@@ -1,63 +1,82 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
       Node replacement;
         // All assignments evaluate to true, so make sure that the
         // expr statement evaluates to true in case it matters.
         nodes.add(new Node(Token.TRUE));
 
+        // Handle the case of a single node (e.g. an empty object literal {}
+        // resulted in only the TRUE node being added).
+        if (nodes.size() == 1) {
+          replacement = nodes.get(0); // Should be the TRUE node
+        } else {
           // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
+          // create a tree. In the tree the first child must be the COMMA to match
           // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
+          // The structure should evaluate the assignments left-to-right, followed by true.
+          // The built structure is COMMA(COMMA(..., COMMA(assign1, assign2)), ...), assign_k), true)
+          nodes = Lists.reverse(nodes); // Results in [true, assign_k, ..., assign1]
           replacement = new Node(Token.COMMA);
           Node cur = replacement;
           int i;
+          // Loop builds the nested comma structure for size >= 3
           for (i = 0; i < nodes.size() - 2; i++) {
             cur.addChildToFront(nodes.get(i));
             Node t = new Node(Token.COMMA);
             cur.addChildToFront(t);
             cur = t;
           }
+          // Add the final two nodes (works for size >= 2)
+          // For size 2, loop doesn't run, i=0. Adds nodes.get(0) and nodes.get(1).
+          // For size 3, loop runs once for i=0. Then adds nodes.get(1) and nodes.get(2).
           cur.addChildToFront(nodes.get(i));
           cur.addChildToFront(nodes.get(i + 1));
+       }
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
 
+      // InlineObjectLiterals#inlineObjectLiteral should handle the VAR case
+      // by calling inlineVariable, not this function. However, if this function
+      // is somehow called for a VAR, we replace the VAR statement with an
+      // expression statement containing the comma list.
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
+        // Replace the original expression (e.g., ASSIGN) with the comma list.
         replace.getParent().replaceChild(replace, replacement);
       }
+      // Report code change to allow for further optimizations/looping.
+      compiler.reportCodeChange();
     }
\ No newline at end of file
