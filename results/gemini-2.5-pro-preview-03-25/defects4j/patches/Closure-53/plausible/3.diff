diff --git a/tmp/55d49dec-85d3-4e19-8d5d-d95e67ec6cd6_buggy.java b/tmp/45a34c99-5bd2-41b1-8e29-dbcb16a4be40_fixed.java
index 41ea16c..585381f 100644
--- a/tmp/55d49dec-85d3-4e19-8d5d-d95e67ec6cd6_buggy.java
+++ b/tmp/45a34c99-5bd2-41b1-8e29-dbcb16a4be40_fixed.java
@@ -1,63 +1,86 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
+     * This method is only called for assignments (x = {...}), not declarations (var x = {...}).
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
-        String var = key.getString();
-        Node value = key.removeFirstChild();
+        // Note: This assumes that the object literal is well-formed.
+        String propertyName = key.getString();
+        Node value = key.removeFirstChild(); // Detach value from key
         // TODO(user): Copy type information.
         nodes.add(
             new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
-        all.remove(var);
+                     Node.newString(Token.NAME, varmap.get(propertyName)), value));
+        all.remove(propertyName);
       }
 
+      // Handle properties present in the variable map but not in the literal
+      // by assigning 'undefined' to their corresponding temporary variables.
       // TODO(user): Better source information.
-      for (String var : all) {
+      for (String propertyName : all) {
         nodes.add(
             new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
-                   NodeUtil.newUndefinedNode(null)));
+                     Node.newString(Token.NAME, varmap.get(propertyName)),
+                     // Use the object literal node for source info
+                     NodeUtil.newUndefinedNode(val)));
       }
 
       Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+      // All assignments evaluate to true eventually (assign is truthy in JS)
+      // We add an explicit TRUE at the end ensure the whole comma expression is True.
       nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
+      if (nodes.size() == 1) {
+        // If there were no assignments (empty object literal),
+        // the replacement is just 'true'.
+        replacement = nodes.get(0);
+        Preconditions.checkState(replacement.getType() == Token.TRUE);
+      } else {
+        // Join assignments and TRUE using COMMA operator.
+        // Build a left-associative tree: ( (a,b), c)
+        // The structure produced is COMMA(COMMA(..., assignN), TRUE)
+        // e.g. for [assign1, assign2, TRUE] -> COMMA(COMMA(assign1, assign2), TRUE)
+        nodes = Lists.reverse(nodes); // [TRUE, assignN, ..., assign1]
         replacement = new Node(Token.COMMA);
         Node cur = replacement;
         int i;
+        // Loop builds the left-nested structure: COMMA( new_comma, nodes[i] )
+        // It runs nodes.size() - 2 times.
         for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
+          cur.addChildToFront(nodes.get(i)); // Add nodes[0..N-3] as right child
           Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+          cur.addChildToFront(t);           // Add new comma node as left child
+          cur = t;                          // Recurse left
+        }
+        // After loop, i = nodes.size() - 2.
+        // cur points to the leftmost COMMA node.
+        // Add the final two elements from the reversed list (assign2, assign1).
+        // nodes.get(i) is assign2, nodes.get(i+1) is assign1.
+        cur.addChildToFront(nodes.get(i));     // Add assign2 (becomes second child)
+        cur.addChildToFront(nodes.get(i + 1)); // Add assign1 (becomes first child)
+        // Resulting in innermost COMMA(assign1, assign2)
       }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
-      Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
+      // ref is the NAME node in the assignment (e.g., 'a' in a = {})
+      // ref.getParent() is the ASSIGN node (a = {})
+      Node assignNode = ref.getParent();
+      Preconditions.checkState(assignNode.getType() == Token.ASSIGN,
+          "Expected ASSIGN node, found %s", Token.name(assignNode.getType()));
 
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
-      } else {
-        replace.getParent().replaceChild(replace, replacement);
-      }
+      replacement.copyInformationFromForTree(assignNode);
+
+      // Replace the original ASSIGN node with the new comma expression.
+      Node assignParent = assignNode.getParent();
+      assignParent.replaceChild(assignNode, replacement);
+      // Code change reporting is likely handled by the caller or traversal.
     }
\ No newline at end of file
