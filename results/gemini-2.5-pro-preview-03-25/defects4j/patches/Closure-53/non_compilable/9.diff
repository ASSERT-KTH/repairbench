diff --git a/tmp/671cc2e4-eb04-4210-b7c8-1672e430e94a_buggy.java b/tmp/e088be65-a2d4-462c-857a-b0c4f6e9c9eb_fixed.java
index 41ea16c..7760143 100644
--- a/tmp/671cc2e4-eb04-4210-b7c8-1672e430e94a_buggy.java
+++ b/tmp/e088be65-a2d4-462c-857a-b0c4f6e9c9eb_fixed.java
@@ -1,63 +1,90 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
+      // If the value is null, this indicates a removed object literal.
+      // This can happen in rare cases like var x = obj.o = {}.
+      if (val == null) {
+        return;
+      }
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
+        // Check added for Issue 763: Don't handle getter/setter definitions.
+        if (key.isGetterDef() || key.isSetterDef()) {
+          continue;
+        }
+
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
       Node replacement;
         // All assignments evaluate to true, so make sure that the
         // expr statement evaluates to true in case it matters.
         nodes.add(new Node(Token.TRUE));
 
+        // Handle the case where the object literal was empty.
+        if (nodes.size() == 1) {
+            // If the object literal was empty, nodes only contains TRUE.
+            replacement = nodes.get(0);
+        } else {
           // Join these using COMMA. A COMMA node must have 2 children, so we
           // create a tree. In the tree the first child be the COMMA to match
           // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
+          // This logic correctly builds COMMA(COMMA(assign1, assign2), TRUE)
+          // for nodes = [assign1, assign2, TRUE]
+          nodes = Lists.reverse(nodes); // e.g., [TRUE, assign2, assign1]
           replacement = new Node(Token.COMMA);
           Node cur = replacement;
           int i;
+          // Build the left spine of the COMMA tree.
           for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
+            cur.addChildToFront(nodes.get(i)); // Add right-most operand (e.g., TRUE)
             Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+            cur.addChildToFront(t);           // Add placeholder COMMA for left operand
+            cur = t;                          // Move to placeholder
+          }
+          // Add the final two operands to the left-most COMMA node.
+          cur.addChildToFront(nodes.get(i));     // Add second element (e.g., assign2)
+          cur.addChildToFront(nodes.get(i + 1)); // Add first element (e.g., assign1)
         }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
 
       if (replace.getType() == Token.VAR) {
+        // If the original was 'var x = {...}', replace the VAR node
+        // with an EXPR_RESULT node containing the comma expression.
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
+        // If the original was 'x = {}' (ASSIGN) or part of a larger expression,
+        // replace the parent of the reference (which is the ASSIGN node)
+        // with the comma expression.
         replace.getParent().replaceChild(replace, replacement);
       }
+      // Something changed, notify the compiler.
+      ref.getCompiler().reportCodeChange();
     }
\ No newline at end of file
