diff --git a/tmp/4bc3bcf1-8e20-4cfe-a786-fcbc0edfee7c_buggy.java b/tmp/d3d025b8-4b2c-441d-9d92-218c617ddfc2_fixed.java
index 41ea16c..6298fdd 100644
--- a/tmp/4bc3bcf1-8e20-4cfe-a786-fcbc0edfee7c_buggy.java
+++ b/tmp/d3d025b8-4b2c-441d-9d92-218c617ddfc2_fixed.java
@@ -1,63 +1,124 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
+     * This handles the following cases:
+     * var x = {a: 1, b: 2}      => var x$a = 1, x$b = 2; (true is implicit)
+     * var x = {}               => [removed]
+     * x = {a: 1, b: 2}          => x$a = 1, x$b = 2, true
+     * x = {}                   => true
+     * return {a: 1, b: 2}       => return (x$a = 1, x$b = 2, true)
+     * fn({a: 1, b: 2})          => fn((x$a = 1, x$b = 2, true))
+     * fn({})                   => fn(true)
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
-      // Compute all of the assignments necessary
+      // Compute all of the assignments necessary from the object literal properties.
       List<Node> nodes = Lists.newArrayList();
-      Node val = ref.getAssignedValue();
+      Node val = ref.getAssignedValue(); // This is the OBJECTLIT node.
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
-        String var = key.getString();
-        Node value = key.removeFirstChild();
+      Set<String> keysInLiteral = Sets.newHashSet();
+
+      // Iterate over properties in the object literal
+      Node nextKey;
+      for (Node key = val.getFirstChild(); key != null; key = nextKey) {
+         nextKey = key.getNext(); // Get next before potentially removing value node
+         // Handle only simple string properties for this optimization
+         // Assumes rewriteObjectLiteral already handled computed/getter/setter props.
+         if (key.isStringKey()) {
+             String keyName = key.getString();
+             // Check if this property is needed for inlining (i.e., is in varmap)
+             if (varmap.containsKey(keyName)) {
+                 // Avoid issues with duplicate keys, only process the first one.
+                 if (keysInLiteral.add(keyName)) {
+                     Node value = key.removeFirstChild(); // Removes value and detaches it
                      // TODO(user): Copy type information.
                      nodes.add(
                        new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
-        all.remove(var);
+                                Node.newString(Token.NAME, varmap.get(keyName)), value));
+                 } else {
+                     // Duplicate key encountered, already processed. Detach the value.
+                      if (key.hasChildren()) {
+                         key.removeFirstChild();
+                      }
+                 }
+             } else {
+                // Property key not in varmap (e.g., not read later), ignore. Detach value if present.
+                 if (key.hasChildren()) {
+                    key.removeFirstChild();
+                 }
+             }
+         } else {
+            // Should not happen if rewriteObjectLiteral ran first.
+            throw new IllegalStateException("Unexpected OBJECTLIT child: " + key + ". Parent: " + val);
+         }
       }
 
+      // Add assignments for properties that were expected (in varmap, thus read elsewhere)
+      // but were not present in the literal. These should be assigned 'undefined'.
+      Set<String> expectedKeys = Sets.newLinkedHashSet(varmap.keySet());
+      expectedKeys.removeAll(keysInLiteral); // Remove keys found in the literal
+      for (String keyName : expectedKeys) {
         // TODO(user): Better source information.
-      for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
-                   NodeUtil.newUndefinedNode(null)));
+                   Node.newString(Token.NAME, varmap.get(keyName)),
+                   NodeUtil.newUndefinedNode(null))); // Assign undefined
       }
 
       Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+      boolean hasAssignments = !nodes.isEmpty();
+
+      // The replacement expression must evaluate to true, like the original {}.
+      // Add a TRUE node to the list of expressions to be joined by commas.
       nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      // Build the replacement node (a COMMA sequence or just TRUE).
+      if (nodes.size() == 1) {
+          // Only the TRUE node was added (no assignments needed).
+          replacement = nodes.get(0); // Just TRUE
+          Preconditions.checkState(!hasAssignments, "Should not have assignments if only TRUE node exists");
+      } else {
+          // Build COMMA tree: COMMA(assign1, COMMA(assign2, ... COMMA(assignN, TRUE)))
+          // Start from the last node (TRUE) and work backwards.
+          replacement = nodes.get(nodes.size() - 1);
+          for (int i = nodes.size() - 2; i >= 0; i--) {
+              replacement = new Node(Token.COMMA, nodes.get(i), replacement);
+          }
       }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
-      Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
+      // Replace the original node (VAR's parent, ASSIGN's parent, or OBJECTLIT's parent).
+      Node nodeToReplace = ref.getParent();
+      Node parent = nodeToReplace.getParent();
+      replacement.copyInformationFromForTree(nodeToReplace);
 
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+      if (nodeToReplace.isVar()) {
+          // Original was 'var v = {...}'
+          if (!hasAssignments) {
+              // If no assignments were needed (e.g., var x = {}), remove the VAR declaration entirely.
+              NodeUtil.removeChild(parent, nodeToReplace);
+          } else {
+              // Replace 'var v = {...}' with 'assign1, assign2, ..., true;'
+              // The comma expression must be wrapped in an EXPR_RESULT for a statement context.
+              Node exprNode = NodeUtil.newExpr(replacement);
+              parent.replaceChild(nodeToReplace, exprNode);
+              // Copy source info from the original VAR statement to the new expression statement.
+              exprNode.copyInformationFrom(nodeToReplace);
+          }
+          compiler.reportCodeChange();
+      } else if (nodeToReplace.isAssign()) {
+          // Original was 'lhs = {...}'
+          // Replace the ASSIGN node directly with the comma expression.
+          parent.replaceChild(nodeToReplace, replacement);
+          compiler.reportCodeChange();
       } else {
-        replace.getParent().replaceChild(replace, replacement);
+          // The reference's parent wasn't VAR or ASSIGN.
+          // This implies the object literal was used directly in an expression, e.g., fn({...}).
+          // In this case, the node to replace is the OBJECTLIT itself (ref.getNode()).
+          Node objectLitNode = ref.getNode();
+          Preconditions.checkState(objectLitNode == val, "Reference node should be the object literal value");
+          nodeToReplace.replaceChild(objectLitNode, replacement); // Replace child within parent expression
+          compiler.reportCodeChange();
       }
     }
\ No newline at end of file
