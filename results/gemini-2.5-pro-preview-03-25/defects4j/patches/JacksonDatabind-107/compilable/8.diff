diff --git a/tmp/be07f637-0e8a-4cc2-9841-5cd620c03309_buggy.java b/tmp/e1a3c1b4-2b41-4a8a-bf21-1335612b31ff_fixed.java
index e8b3baa..f8ed23b 100644
--- a/tmp/be07f637-0e8a-4cc2-9841-5cd620c03309_buggy.java
+++ b/tmp/e1a3c1b4-2b41-4a8a-bf21-1335612b31ff_fixed.java
@@ -1,54 +1,82 @@
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                     if (actual == null) { // what should this be taken to mean?
                         // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
+                        // Caller (like TypeDeserializerBase) is expected to handle this:
+                        // it will call DeserializationContext.handleUnknownTypeId() which
+                        // throws exception if no handler is configured.
                         return null;
                     }
                     // ... would this actually work?
+                    // If handler returned Void.class, for example, need deser for that:
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    // 11-Sep-2019, tatu: Check for null here too? Either should not happen or indicate failure,
+                    //    in which case `null` return is appropriate, to let caller handle?
+                    if (deser == null) {
+                        // As above, `null` return should be handled by caller, possibly by
+                        // calling `handleUnknownTypeId` or `handleMissingTypeId`
+                        return null;
+                    }
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
                  *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
                 if ((_baseType != null)
                         && _baseType.getClass() == type.getClass()) {
                     /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                      *   but it appears to check that JavaType impl class is the same which is
                      *   important for some reason?
                      *   Disabling the check will break 2 Enum-related tests.
                      */
                     // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
                     if (!type.hasGenericTypes()) {
+                        // 22-Mar-2017, tatu: As per [databind#1564], can not possibly specialize NO generic types, only parameterizable ones
+                        // ... and only if it makes sense, probably only for Collection- / Map-like types?
+                        // 16-Aug-2019, tatu: Oh. Actually, we MUST do this for all kinds of types,
+                        //   since it is possible Sub-type has type parameters NOT indicated by Type Id. Wah.
+                        //   Need to document this better.
+                         try {
                              type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                         } catch (IllegalArgumentException e) {
+                             // 28-Mar-2021, tatu: As per [databind#3063], need to catch this for non-specializable
+                             //    types like `java.lang.Void`
+                             // Ideally should not be getting here, but let's assume original type is fine?
+                             ;
+                         }
                     }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
+                // 11-Sep-2019, tatu: Need to check for null here as well
+                 if (deser == null) {
+                     return null;
                  }
+            }
+            // Only cache if find succeeded -- incl. handler returning type that resolved
             _deserializers.put(typeId, deser);
         }
         return deser;
     }
\ No newline at end of file
