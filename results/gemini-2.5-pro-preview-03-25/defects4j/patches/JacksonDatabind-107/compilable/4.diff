diff --git a/tmp/1d581588-29af-493e-b1b7-a7e81a9411be_buggy.java b/tmp/f10cc960-033a-4731-bcf3-522d1717f6fd_fixed.java
index e8b3baa..ddde372 100644
--- a/tmp/1d581588-29af-493e-b1b7-a7e81a9411be_buggy.java
+++ b/tmp/f10cc960-033a-4731-bcf3-522d1717f6fd_fixed.java
@@ -1,54 +1,68 @@
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                     if (actual == null) { // what should this be taken to mean?
                         // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
+                        // 13-Mar-2021, tatu: Caller is likely to fail with NullPointerException if we return null.
+                        //   ... however, what is the strategy? Could return an alternative deserializer?
+                        // For now let's just return null, indicating failed resolution. Caller needs to handle.
+                        // (note: this potentially breaks contract of non-null return value... but caller
+                        // HAS TO check for null regardless)
                         return null;
                     }
-                    // ... would this actually work?
+                    // ... would this actually work? Let's try to find deserializer for suggested type
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    // [databind#2221]: if handler returns a type (like Void) but we can't find
+                    // a deserializer, should NOT return null as that will revert the fix.
+                    // Instead, should return deserializer that maybe returns `null` or similar?
+                    if (deser == null) {
+                         // Use `NullifyingDeserializer` which will simply return `null` for the value
+                         deser = com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer.instance;
+                    }
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
                  *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
                 if ((_baseType != null)
                         && _baseType.getClass() == type.getClass()) {
                     /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                      *   but it appears to check that JavaType impl class is the same which is
                      *   important for some reason?
                      *   Disabling the check will break 2 Enum-related tests.
                      */
                     // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
                     if (!type.hasGenericTypes()) {
-                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                        // 22-Mar-2017, tatu: Need to be careful here; TypeFactory will keep existing serializers
+                        //   but default is not to, and that seems wrong. Best let context handle specialization
+                        type = ctxt.constructSpecializedType(_baseType, type.getRawClass());
                     }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }
             _deserializers.put(typeId, deser);
         }
         return deser;
     }
