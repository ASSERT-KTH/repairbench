diff --git a/tmp/7c0555ae-c109-4e0b-88c8-15faa98ff3fb_buggy.java b/tmp/a5d661bd-d2ef-41d3-a6fc-6e4d3f319cf4_fixed.java
index e8b3baa..746f239 100644
--- a/tmp/7c0555ae-c109-4e0b-88c8-15faa98ff3fb_buggy.java
+++ b/tmp/a5d661bd-d2ef-41d3-a6fc-6e4d3f319cf4_fixed.java
@@ -1,54 +1,84 @@
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                     if (actual == null) { // what should this be taken to mean?
-                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
-                        return null;
+                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but fail:
+                         // Note: before 2.10, returned `null` here
+                         return (JsonDeserializer<Object>) ctxt.reportBadDefinition(_baseType,
+                                 String.format("Could not resolve type id '%s' as a subtype of %s: problem handler returned null",
+                                         typeId, _baseType));
                     }
+                    // 18-Jun-2019, tatu: As per [databind#2221], may need to actually DONE: handle `Void` type being returned
+                    //    specifically, produce `null value` deserializer:
+                    if (actual.hasRawClass(Void.class)) {
+                        deser = NullifyingDeserializer.instance;
+                    } else {
                         // ... would this actually work?
                         deser = ctxt.findContextualValueDeserializer(actual, _property);
                     }
+                }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
                  *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
                 if ((_baseType != null)
                         && _baseType.getClass() == type.getClass()) {
                     /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                      *   but it appears to check that JavaType impl class is the same which is
                      *   important for some reason?
                      *   Disabling the check will break 2 Enum-related tests.
                      */
                     // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
                     if (!type.hasGenericTypes()) {
+                        // 21-Feb-2019, tatu: Need to make sure we don't accidentally downgrade
+                        // a Optimized(EnumMap) type to Simple(Map) type -- would be better handled by TypeFactory
+                        try {
                             type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                        } catch (IllegalArgumentException e) {
+                            // 04-Mar-2019, tatu: For [databind#2255], probably should not fail?
+                             ctxt.reportBadDefinition(_baseType, String.format(
+"Failed to specialize base type %s with concrete type %s, problem: %s",
+_baseType, type.getRawClass().getName(), e.getMessage()), e);
+                             // And maybe just return the default implementation?
+                             deser = _findDefaultImplDeserializer(ctxt);
+                             // This may seem odd but has to do with the fact that we really shouldn't use this branch
+                             // any more -- it will be removed in 2.10 or later -- until then, need to try to make work
+                             if (deser == null) {
+                                 return (JsonDeserializer<Object>) ctxt.reportBadDefinition(_baseType, String.format(
+"Failed to specialize base type %s with concrete type %s, problem: %s",
+_baseType, type.getRawClass().getName(), e.getMessage()), e);
+                             }
+                             // also: cache this choice? Seems prudent
+                             _deserializers.put(typeId, deser);
+                             return deser;
+                        }
                     }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }
             _deserializers.put(typeId, deser);
         }
         return deser;
     }
