diff --git a/tmp/9e4829e2-a789-4ba5-885c-8f25d624d89c_buggy.java b/tmp/7ba0f03c-a34f-428c-9f8c-ed64fd3de32c_fixed.java
index e8b3baa..3c005b5 100644
--- a/tmp/9e4829e2-a789-4ba5-885c-8f25d624d89c_buggy.java
+++ b/tmp/7ba0f03c-a34f-428c-9f8c-ed64fd3de32c_fixed.java
@@ -1,54 +1,81 @@
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                     if (actual == null) { // what should this be taken to mean?
                         // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
+                        // If handler returns null, resolution failed. Return null to indicate.
+                        // Caller needs to handle this case.
                         return null;
                     }
-                    // ... would this actually work?
+                    // Special case: Handler provided java.lang.Void type, means "skip"
+                    // (databind#2221 handling)
+                    if (actual.hasRawClass(Void.class)) {
+                         // Returning null deserializer signals to skip the value
+                         return null;
+                    }
+                    // ... would this actually work? Yes, find deserializer for type handler provided
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    // If findContextualValueDeserializer returns null, we'll cache and return null below
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
                  *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
                 if ((_baseType != null)
                         && _baseType.getClass() == type.getClass()) {
                     /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                      *   but it appears to check that JavaType impl class is the same which is
                      *   important for some reason?
                      *   Disabling the check will break 2 Enum-related tests.
                      */
                     // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
                     if (!type.hasGenericTypes()) {
+                       // 11-Jan-2021, tatu: [databind#291] Try to avoid type specialization for enums;
+                       //    seems to be problematic for some reason
+                       if (!type.isEnumType()) {
+                           try { // #databind-291 requires catching errors sometimes
                                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                           } catch (IllegalArgumentException e) {
+                               // 11-Jan-2021, tatu: For [databind#291] may need to fallback for weird cases...
+                                // 21-Aug-2022, tatu: Should probably report more contextual info...
+                                ctxt.reportBadDefinition(_baseType, String.format(
+                                        "Failed to specialize base type %s with concrete type %s, problem: %s",
+                                        _baseType, type.getRawClass().getName(), e.getMessage()), e);
+                                // Based on other `reportBadDefinition` usage, seems returning null is expected
+                                return null;
+                            }
+                        }
                     }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
+                 // If findContextualValueDeserializer returns null, we'll cache and return null below
             }
+            // If we get this far, cache the resolved deserializer (which might be null
+            // if resolution failed), unless it was the default impl deserializer
+            // (which is cached separately). Note that 'putIfAbsent' is thread-safe.
              _deserializers.put(typeId, deser);
         }
         return deser;
     }
\ No newline at end of file
