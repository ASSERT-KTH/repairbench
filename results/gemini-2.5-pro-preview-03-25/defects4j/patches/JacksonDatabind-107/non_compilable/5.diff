diff --git a/tmp/d90ca005-a334-40e1-a03f-ad0b359c691d_buggy.java b/tmp/4c4b4e86-1666-4bc7-be67-f57fe1db01ba_fixed.java
index e8b3baa..fbbb867 100644
--- a/tmp/d90ca005-a334-40e1-a03f-ad0b359c691d_buggy.java
+++ b/tmp/4c4b4e86-1666-4bc7-be67-f57fe1db01ba_fixed.java
@@ -1,54 +1,72 @@
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
+                // Case 1: Type ID not resolved by TypeIdResolver
+
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
+                    // No default implementation found. Try DeserializationProblemHandler
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                     if (actual == null) { // what should this be taken to mean?
                         // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
+                        // If handler indicated "just skip" (by returning `Void.class` or `null`), or
+                        // failed to handle, we get `null` back. Just returning `null` problematic;
+                        // better return `UnknownTypeDeserializer` instance.
+                        // (note: caller is likely to cache resolution to `null`...)
+                        deser = ctxt.getUnknownTypeDeserializer(null); // pass null as we don't know expected type
+                        // If this returns null, we are out of luck; needs to be reported by caller
+                        if (deser == null) {
                             return null;
                         }
-                    // ... would this actually work?
+                        // Should we cache this? Let's assume we should NOT, to avoid
+                        // cluttering cache with failures. Let caller do that if necessary.
+                    } else {
+                        // Handler provided a concrete type.
+                        // Need to apply specialization logic same way as below
+                        if ((_baseType != null)
+                                && _baseType.getClass() == actual.getClass()
+                                && !actual.hasGenericTypes()) {
+                             actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass());
+                         }
+                        // ... would this actually work? Needs context:
                         deser = ctxt.findContextualValueDeserializer(actual, _property);
                     }
+                }
             } else {
+                // Case 2: Type ID resolved by TypeIdResolver
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
                  *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
-                if ((_baseType != null)
-                        && _baseType.getClass() == type.getClass()) {
-                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
-                     *   but it appears to check that JavaType impl class is the same which is
-                     *   important for some reason?
-                     *   Disabling the check will break 2 Enum-related tests.
-                     */
                  // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                  //   generic type with custom type resolvers. If so, should try to retain them.
-                    //  Whether this is sufficient to avoid problems remains to be seen, but for
-                    //  now it should improve things.
-                    if (!type.hasGenericTypes()) {
+                if ((_baseType != null)
+                        && _baseType.getClass() == type.getClass()
+                        && !type.hasGenericTypes()) {
                     type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                 }
-                }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }
+            // 28-Nov-2019, tatu: Only cache if we actually found a deserializer (see above)
+            //    and it's not the placeholder for "unknown"
+            if (deser != null && !(deser instanceof com.fasterxml.jackson.databind.deser.impl.UnknownTypeDeserializer)) {
                 _deserializers.put(typeId, deser);
             }
+        }
         return deser;
     }
\ No newline at end of file
