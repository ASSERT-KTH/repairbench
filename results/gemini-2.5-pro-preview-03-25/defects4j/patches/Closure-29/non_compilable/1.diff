diff --git a/tmp/1eaadf22-1291-4c45-ba8f-3bf4998f03c8_buggy.java b/tmp/35c3b9ae-3f1f-4339-bc92-fe4bf3be0423_fixed.java
index be9c8a3..e8a7283 100644
--- a/tmp/1eaadf22-1291-4c45-ba8f-3bf4998f03c8_buggy.java
+++ b/tmp/35c3b9ae-3f1f-4339-bc92-fe4bf3be0423_fixed.java
@@ -1,94 +1,108 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
-            return false;
+            return false; // Cannot inline x if x.y() is called
           }
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
           // Object.prototype can have arbitrary properties on it.
           //
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
+
+          // Check if the property access is the left-hand side of an assignment.
+          boolean isLhsOfAssign = gramps.isAssign() && gramps.getFirstChild() == parent;
+
+          // If the property access is NOT the LHS of an assignment (i.e., it's a read),
+          // then we bail out. This is a conservative approach to prevent issues with
+          // properties inherited from the prototype (like toString) or properties
+          // accessed before they are assigned (which this pass doesn't handle perfectly).
+          // While this might prevent some valid inlining cases (like reading a property
+          // assigned after the literal), it avoids incorrect inlining.
+          if (!isLhsOfAssign) {
+            return false; // Bail out on property reads like f(x.prop) or x.prop + 1
+          }
+
+          // If it IS the LHS of an assignment (e.g., x.prop = 1), this reference
+          // itself is okay. The inlining mechanism will handle creating a variable
+          // for 'prop' if necessary. We continue checking other references.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
         // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
 
-          Node childVal = child.getFirstChild();
+          Node childVal = child.getLastChild(); // Use getLastChild for STRING_KEY, GETTER_DEF, SETTER_DEF
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
-          // will happen.
+          // will happen. Note: Check childVal and its children, not just ancestors.
           for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
+             // Check if any reference node is beneath the value part of the object literal property
+            if (childVal != null && NodeUtil.isAncestor(childVal, t.getNode())) {
+                 // There's a self-referential assignment like x = {a: x} or x = {a: x.b}
                  return false;
             }
-              refNode = refNode.getParent();
-            }
           }
         }
 
 
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
       }
       return ret;
     }
\ No newline at end of file
