diff --git a/tmp/46f64c93-60d3-4744-a9e4-93a3c2d96a11_buggy.java b/tmp/f1365a41-c315-4a22-99c5-1d16ad09c8c1_fixed.java
index 29a9d2f..af622d9 100644
--- a/tmp/46f64c93-60d3-4744-a9e4-93a3c2d96a11_buggy.java
+++ b/tmp/f1365a41-c315-4a22-99c5-1d16ad09c8c1_fixed.java
@@ -1,43 +1,47 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
-      if (provided == null || !provided.isExplicitlyProvided()) {
+      boolean isRecognized = provided != null && provided.isExplicitlyProvided();
+
+      if (!isRecognized) {
+        // Record the unrecognized require for later error reporting.
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
+        // Check for cross-module dependencies if the provide is recognized.
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+      // Requires should be removed after processing, regardless of whether the
+      // provide was found. The error for missing provides is handled separately
+      // by processing the `unrecognizedRequires` list later. Removing the node
+      // prevents warnings from later passes (like VarCheck) about undeclared
+      // 'goog'. The original conditional removal caused problems in cases like
+      // the VarCheckTest#testNoUndeclaredVarWhenUsingClosurePass test.
+      // Assuming 'n' is the CALL and 'parent' is the EXPR_RESULT.
       parent.detachFromParent();
       compiler.reportCodeChange();
     }
   }
\ No newline at end of file
-  }
