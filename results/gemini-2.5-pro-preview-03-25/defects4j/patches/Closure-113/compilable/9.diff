diff --git a/tmp/aa72f058-add2-41de-9250-060b207cd366_buggy.java b/tmp/d94afb8f-3746-4ed1-8931-10aae604f98a_fixed.java
index 29a9d2f..556da14 100644
--- a/tmp/aa72f058-add2-41de-9250-060b207cd366_buggy.java
+++ b/tmp/d94afb8f-3746-4ed1-8931-10aae604f98a_fixed.java
@@ -1,43 +1,46 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
       if (provided == null || !provided.isExplicitlyProvided()) {
+        // Report error for missing/late provide.
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
+        // Explicit provide found, check module dependencies.
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+      // Requires should be removed after processing to avoid issues with
+      // subsequent passes like VarCheck potentially seeing 'goog' undeclared,
+      // and because the require statement itself has no runtime effect.
+      // The check for missing provides or cross-module errors has already happened.
+      // Removing the node regardless of whether the provide was found fixes
+      // the case where a missing provide error occurred but the node was left,
+      // potentially causing a VarCheck error later.
+      // The original code only removed the node if 'provided != null'.
       parent.detachFromParent();
       compiler.reportCodeChange();
     }
   }
\ No newline at end of file
-  }
