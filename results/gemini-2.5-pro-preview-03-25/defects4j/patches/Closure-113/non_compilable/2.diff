diff --git a/tmp/ef77742f-ab11-4ace-85af-fd7265e7325d_buggy.java b/tmp/97477b00-0924-4f1a-a533-3e52c4576f5b_fixed.java
index 29a9d2f..345489f 100644
--- a/tmp/ef77742f-ab11-4ace-85af-fd7265e7325d_buggy.java
+++ b/tmp/97477b00-0924-4f1a-a533-3e52c4576f5b_fixed.java
@@ -1,43 +1,64 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
       if (provided == null || !provided.isExplicitlyProvided()) {
-        unrecognizedRequires.add(
-            new UnrecognizedRequire(n, ns, t.getSourceName()));
+        // Report error directly, respecting the configured level.
+        // This ensures the error is reported even during the preprocessorRun,
+        // fixing cases where the check is expected but wasn't reported previously
+        // because reporting was deferred and skipped when preprocessorRun = true.
+        // We no longer add to unrecognizedRequires as the error is reported here.
+        if (requiresLevel != CheckLevel.OFF) {
+          compiler.report(
+              t.makeError(n,
+                  requiresLevel == CheckLevel.ERROR ?
+                      MISSING_PROVIDE_ERROR : MISSING_PROVIDE_WARNING,
+                  ns));
+        }
       } else {
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
       // Requires should be removed before further processing.
       // Some clients run closure pass multiple times, first with
       // the checks for broken requires turned off. In these cases, we
       // allow broken requires to be preserved by the first run to
       // let them be caught in the subsequent run.
+      // N.B. The correct condition for removal depends on preprocessorRun state,
+      // which is handled by maybeRemoveDeclaration. We only detach here if the
+      // namespace was successfully provided. If it was not provided,
+      // maybeRemoveDeclaration won't remove it during preprocessorRun=true,
+      // preserving it for later checks as intended by the comment.
       if (provided != null) {
+         // TODO(nicksantos): Consider removing the call for unrecognized
+         // requires, too. There are some legacy projects that might be relying
+         // on this behavior, but we should probably make this consistent.
+         // NOTE(brad): This is problematic because we might want to run
+         // ProcessClosurePrimitives twice, first with a lower check level,
+         // and then with a higher check level.
          parent.detachFromParent();
          compiler.reportCodeChange();
       }
     }
   }
\ No newline at end of file
