diff --git a/tmp/b1bca403-77b6-4be6-96d6-0928359ba5fa_buggy.java b/tmp/56ed9675-8972-4c31-8bce-cd54e2c15779_fixed.java
index 29a9d2f..6ba0dbc 100644
--- a/tmp/b1bca403-77b6-4be6-96d6-0928359ba5fa_buggy.java
+++ b/tmp/56ed9675-8972-4c31-8bce-cd54e2c15779_fixed.java
@@ -1,43 +1,49 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
       if (provided == null || !provided.isExplicitlyProvided()) {
+        // Record the error, but don't report it until the end of the pass.
+        // This allows reporting errors only for namespaces that are never
+        // provided (even transitively).
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
+        // Check module dependencies.
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+      // Remove the require call if it's valid, or if we're checking
+      // for missing provides and are going to report an error.
+      // If require checking is off, leave the node intact for subsequent
+      // runs. This prevents the VarCheck pass from complaining about
+      // the undeclared var "goog" when the require is bad.
+      // Note: requiresLevel is final and set in the constructor.
+      if (provided != null || requiresLevel.isOn()) {
+        // Detach the EXPR_RESULT node.
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
     }
   }
\ No newline at end of file
