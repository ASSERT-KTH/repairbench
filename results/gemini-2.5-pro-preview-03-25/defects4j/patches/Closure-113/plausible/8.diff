diff --git a/tmp/5e0213d5-3c4f-4ebf-8ea4-c0c988c90325_buggy.java b/tmp/f372cf44-a997-4c8e-9e17-0a0af3b1a45a_fixed.java
index 29a9d2f..fcaea22 100644
--- a/tmp/5e0213d5-3c4f-4ebf-8ea4-c0c988c90325_buggy.java
+++ b/tmp/f372cf44-a997-4c8e-9e17-0a0af3b1a45a_fixed.java
@@ -1,43 +1,53 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
+      boolean isMissingProvide = false; // Flag to track if the provide is missing
+
       if (provided == null || !provided.isExplicitlyProvided()) {
+        isMissingProvide = true;
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
       // Requires should be removed before further processing.
       // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+      // the checks for broken requires turned off (requiresLevel = OFF).
+      // In these cases, we allow broken requires to be preserved by the first run
+      // to let them be caught in the subsequent run.
+      // We remove the node if:
+      // 1. The provide exists (!isMissingProvide).
+      // 2. The provide is missing (isMissingProvide) AND we are checking for missing provides (requiresLevel != OFF).
+      // This ensures that if checks are on, the node is removed, preventing subsequent
+      // passes like VarCheck from potentially warning about 'goog'. The missing provide
+      // error is reported based on the unrecognizedRequires list.
+      boolean checksOn = (requiresLevel != CheckLevel.OFF);
+      if (!isMissingProvide || checksOn) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
     }
   }
\ No newline at end of file
