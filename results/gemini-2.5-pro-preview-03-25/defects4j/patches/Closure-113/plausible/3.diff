diff --git a/tmp/6827e4f6-0e08-438e-bd42-1050d3df4137_buggy.java b/tmp/8f4b41b1-5f3a-4bc7-88a2-bd24a8c6687b_fixed.java
index 29a9d2f..3dab846 100644
--- a/tmp/6827e4f6-0e08-438e-bd42-1050d3df4137_buggy.java
+++ b/tmp/8f4b41b1-5f3a-4bc7-88a2-bd24a8c6687b_fixed.java
@@ -1,43 +1,56 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
+      boolean requireOk = true; // Assume ok initially
+
       if (provided == null || !provided.isExplicitlyProvided()) {
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
+        requireOk = false; // Mark as broken, provide is missing
       } else {
+        // Namespace is provided. Check module dependencies.
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
+          // A module dependency error doesn't mean the require is broken
+          // regarding symbol provision. requireOk remains true.
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+      // Remove the goog.require call node if:
+      // 1) The require referred to a successfully provided name (requireOk == true),
+      //    regardless of the check level.
+      //    -OR-
+      // 2) The require is broken (requireOk == false), but we are checking
+      //    for missing provides (requiresLevel is not OFF). Removing the node
+      //    prevents subsequent passes like VarCheck from reporting errors related
+      //    to the unknown 'goog' base object when the MISSING_PROVIDE_ERROR is
+      //    the intended error.
+      // If requireOk is false (broken require) and requiresLevel is OFF,
+      // the node is preserved, allowing a subsequent pass with checks enabled
+      // to detect the missing provide.
+      if (requireOk || requiresLevel != CheckLevel.OFF) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
     }
   }
\ No newline at end of file
