diff --git a/tmp/958b3bae-6f6f-430b-a62f-86448aac868f_buggy.java b/tmp/1799a2d0-608d-4ba9-9235-a2ccf73bae8b_fixed.java
index 3ba614a..6b86c7c 100644
--- a/tmp/958b3bae-6f6f-430b-a62f-86448aac868f_buggy.java
+++ b/tmp/1799a2d0-608d-4ba9-9235-a2ccf73bae8b_fixed.java
@@ -1,9 +1,25 @@
     @Override
     public int read() throws IOException {
+        // Remember the previous character read (or initial state)
+        int previousChar = lastChar; 
+        // Read the current character from the underlying stream
         int current = super.read();
-        if (current == '\n') {
-            lineCounter++;
-        }
+        // Update the last character read for the next invocation
         lastChar = current;
-        return lastChar;
+
+        // Increment the line counter based on standard line endings (\n, \r, \r\n).
+        // This ensures accurate line counting regardless of the CSVFormat's specific line separator.
+        // The CSVFormat's line separator is used by the Lexer/Parser to determine record boundaries,
+        // while this read() method maintains the physical line number count.
+        if (current == '\n') {
+            // Check if the previous char was \r; if so, \r\n sequence handled by the \r case
+            if (previousChar != '\r') {
+                lineCounter++; // Increment for standalone \n
+            }
+        } else if (current == '\r') {
+            lineCounter++;     // Increment for \r (covers standalone \r and the \r of \r\n)
+        }
+        
+        // Return the character that was actually read from the underlying stream
+        return current;
     }
\ No newline at end of file
