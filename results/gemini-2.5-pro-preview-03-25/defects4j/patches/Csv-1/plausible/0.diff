diff --git a/tmp/ee6582d5-fb2c-434a-81e7-1e2d21bc64db_buggy.java b/tmp/68f18b4c-e162-4fd9-bc24-ca059b955f61_fixed.java
index 3ba614a..8f3b7ba 100644
--- a/tmp/ee6582d5-fb2c-434a-81e7-1e2d21bc64db_buggy.java
+++ b/tmp/68f18b4c-e162-4fd9-bc24-ca059b955f61_fixed.java
@@ -1,9 +1,27 @@
     @Override
     public int read() throws IOException {
-        int current = super.read();
-        if (current == '\n') {
+        int current = super.read(); // Read the character
+
+        // Increment line counter based on universal newline conventions (\n, \r, \r\n).
+        // The original code only incremented on '\n'.
+        // This updated logic handles standalone '\r' and '\r\n' sequences correctly,
+        // ensuring the line counter increments once per line terminator.
+        if (current == '\r') {
+            // Check if the next character is '\n' using lookahead capability.
+            // We assume lookAhead() is available in this class or its superclass.
+            if (lookAhead() != '\n') {
+                // If '\r' is not followed by '\n', it's a standalone line terminator.
                 lineCounter++;
             }
-        lastChar = current;
+            // If '\r' is followed by '\n' (CRLF), do nothing here.
+            // The counter will be incremented when the subsequent '\n' is read.
+        } else if (current == '\n') {
+            // If '\n' is read, always increment the counter.
+            // This handles both standalone '\n' and the '\n' part of a CRLF sequence.
+            lineCounter++;
+        }
+
+        lastChar = current; // Update the state tracking the last character read
+        // Return the character read. The original returned lastChar, which was just assigned 'current'.
         return lastChar;
     }
\ No newline at end of file
