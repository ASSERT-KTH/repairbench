diff --git a/tmp/706f6440-eef9-4598-9d37-7b137e2e8161_buggy.java b/tmp/d5c8d4e2-4e33-4337-85b6-76a4fd388094_fixed.java
index 3ba614a..4b4366e 100644
--- a/tmp/706f6440-eef9-4598-9d37-7b137e2e8161_buggy.java
+++ b/tmp/d5c8d4e2-4e33-4337-85b6-76a4fd388094_fixed.java
@@ -1,9 +1,31 @@
     @Override
     public int read() throws IOException {
+        // Read the next character from the underlying reader
         int current = super.read();
-        if (current == '\n') {
-            lineCounter++;
-        }
+
+        // Store the character read previously. This is needed to detect '\r\n' sequences.
+        int previousChar = lastChar;
+        // Update lastChar with the character just read for the next call.
         lastChar = current;
-        return lastChar;
+
+        // Increment the line counter based on the character(s) read.
+        // We need to handle different line endings: '\n', '\r', or '\r\n'.
+        // LineNumberReader increments *after* the line terminator is read.
+
+        // Case 1: Current character is '\n'. This always terminates a line.
+        // It handles both standalone '\n' and the '\n' part of '\r\n'.
+        if (current == '\n') {
+            lineCounter++;
+        }
+        // Case 2: Previous character was '\r' and the current character is NOT '\n'.
+        // This means the '\r' itself terminated the line. This also handles the
+        // case where '\r' is the last character in the stream (current == -1).
+        // The '\r\n' case is implicitly handled because the counter increment
+        // happens when '\n' is read (Case 1).
+        else if (previousChar == '\r') {
+            lineCounter++;
+        }
+
+        // Return the character that was read in this call.
+        return current;
     }
\ No newline at end of file
