diff --git a/tmp/84929446-e962-4176-95a9-ba84ecebfb01_buggy.java b/tmp/9f3b2675-03b2-4d05-82d2-b6c2d9cc8568_fixed.java
index 3ba614a..0b48269 100644
--- a/tmp/84929446-e962-4176-95a9-ba84ecebfb01_buggy.java
+++ b/tmp/9f3b2675-03b2-4d05-82d2-b6c2d9cc8568_fixed.java
@@ -1,9 +1,45 @@
     @Override
     public int read() throws IOException {
+        // Read the next character from the underlying reader
         int current = super.read();
+
+        // Get the configured line separator string from the Lexer's format
+        // Assumes this method belongs to the Lexer.ExtendedBufferedReader inner class
+        // which has access to the outer Lexer's format field.
+        final String lineSeparator = Lexer.this.format.getLineSeparator();
+
+        // Determine if the line counter should be incremented based on the character(s) read
+        // and the configured line separator.
+        boolean incrementLine = false;
+        if ("\n".equals(lineSeparator)) {
+            // Separator is LF ('\n')
             if (current == '\n') {
+                incrementLine = true;
+            }
+        } else if ("\r".equals(lineSeparator)) {
+            // Separator is CR ('\r')
+            if (current == '\r') {
+                incrementLine = true;
+            }
+        } else {
+            // Separator is CRLF ("\r\n") or default/unspecified (which defaults to CRLF)
+            // Increment only when LF ('\n') is read immediately after a CR ('\r')
+            if (current == '\n' && lastChar == '\r') {
+                incrementLine = true;
+            }
+            // Note: This logic strictly follows the specified line separator.
+            // It does not increment on lone CR or LF if CRLF is specified.
+            // It also does not handle custom multi-character line separators other than CRLF.
+        }
+
+        // Increment the line counter if a line ending matching the configured separator was detected
+        if (incrementLine) {
             lineCounter++;
         }
+
+        // Update the record of the last character read, used for CRLF detection
         lastChar = current;
-        return lastChar;
+
+        // Return the character read, as per the Reader contract
+        return current;
     }
\ No newline at end of file
