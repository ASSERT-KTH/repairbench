diff --git a/tmp/e4709be1-1d67-4018-bb8d-e24656c7b054_buggy.java b/tmp/5903d51f-0ead-4300-a201-6dd72dc3a96d_fixed.java
index ae1f3a6..7e96598 100644
--- a/tmp/e4709be1-1d67-4018-bb8d-e24656c7b054_buggy.java
+++ b/tmp/5903d51f-0ead-4300-a201-6dd72dc3a96d_fixed.java
@@ -1,34 +1,55 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
+            JavaType t;
+            try {
                 // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
                 //    compatibility -- needed later anyway, and not doing so may open
                 //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+                 t = tf.constructFromCanonical(id);
+            } catch (IllegalArgumentException e) {
+                 // 25-Nov-2017, tatu: Need to wrap exception type for test
+                 throw new IllegalArgumentException("Invalid type id '"+id+"': "+e.getMessage(), e);
+            }
+            // We must be assignable to the base type too
+            if (!_baseType.getRawClass().isAssignableFrom(t.getRawClass())) {
+                 // 11-Nov-2017, tatu: Need to actually verify type compatibility,
+                 //    if not, handle error same way as resolution failure
+                 // 25-Nov-2017, tatu: Also needs specific exception, message
+                 throw ctxt.invalidTypeIdException(_baseType, id, String.format(
+                         "Specified type (%s) not subtype of base type (%s)",
+                         t.getRawClass().getName(), _baseType));
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
+        // 28-Aug-2017, tatu: As per [databind#1735], need to ensure type compatibility
+        //    Also, should reuse existing method, not create new type
+        if (!_baseType.getRawClass().isAssignableFrom(cls)) {
+             throw ctxt.invalidTypeIdException(_baseType, id, String.format(
+                     "Specified type (%s) not subtype of base type (%s)",
+                     cls.getName(), _baseType));
+        }
         return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
