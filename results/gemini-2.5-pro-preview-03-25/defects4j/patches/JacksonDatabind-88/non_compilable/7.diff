diff --git a/tmp/ec8b9594-053c-4595-a932-bcf6a0b43bf3_buggy.java b/tmp/20ca2d1d-c7bd-48dc-b460-b7dffc829835_fixed.java
index ae1f3a6..20e6d78 100644
--- a/tmp/ec8b9594-053c-4595-a932-bcf6a0b43bf3_buggy.java
+++ b/tmp/20ca2d1d-c7bd-48dc-b460-b7dffc829835_fixed.java
@@ -1,34 +1,80 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
                 // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+
+            // 02-Apr-2019, tatu: Make sure types are compatible wrt generics constraints
+            //   ... typically `_baseType` is not generic, but may be, and could have bounds etc
+            if (_baseType != null) {
+                // 18-Nov-2019, tatu: Ok, this is bit tricky. We do not want to call
+                //   `constructSpecializedType()` because that assumes `id` is name of subclass,
+                //   but here `id` is the FULL type including generics. So we do need
+                //   a check here.
+                // TODO: Rework `TypeFactory` in 3.0 to have better way?
+                Class<?> raw = t.getRawClass();
+                // TODO: check for generic type compatibility? More work...
+                if (!_baseType.isTypeOrSuperTypeOf(raw)) {
+                    // If not type/supertype, need to check if it's just that `id` is invalid class;
+                    // or if it's attempt to specify type outside allowed limits. Latter seems
+                    // more likely.
+                    // Note: exception message should align with one constructed for the
+                    // other branch.
+                    throw ctxt.invalidTypeIdException(_baseType, id, "Not a subtype");
+                }
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
+                // 12-Jun-2016, tatu: As per [databind#1270] may need DeserializationConfig
+                 //    (and if so, should NOT rely on passing `this` as resolver)
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
-            throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
+            throw new IllegalArgumentException(String.format("Invalid type id '%s' (for id type 'Id.class'): %s",
+                    id, e.getMessage()), e);
         }
+        // 18-Jan-2018, tatu: As per [databind#1870], need to ensure that `cls` is,
+        //    indeed, compatible with `_baseType`. Necessary to prevent certain attack
+        //    vectors, possibly other kinds of ঝামেলা (trouble).
+        // Note: may need to be promoted to `TypeResolverBuilder.buildTypeDeserializer()` eventually
+        if ((_baseType != null) && _baseType.isTypeOrSuperTypeOf(cls)) {
+            // Usually we just use the explicit type (`cls`) as is, instead of specifying
+            // vague supertype (`_baseType`)
+            // 26-Oct-2018, tatu: Unless it's for abstract type (interface, abstract class),
+            //   in which case need base type. Fixed via [databind#2119]. Need to uncomment:
+             if (_baseType.isAbstract()) {
+                  JavaType t = tf.constructSpecializedType(_baseType, cls);
+                  // 18-Oct-2019, tatu: Must ensure type parameters are ok...
+                  //    otherwise we might be target of nasty attack
+                  // Wait! `constructSpecializedType` SHOULD do that?!
+                  // JavaType bound = tf.constructType(cls);
+                  // if (!_baseType.isAssignableFrom(bound)) { ... }
+                  return t;
+             }
+        } else {
+            // 01-Oct-2019, tatu: Use `DatatypeContext.invalidTypeIdException()` for more std exceptions
+            throw ctxt.invalidTypeIdException(_baseType, id, "Not a subtype");
+        }
+        // a plain subtype specified, should be fine -- just specialize, for generics:
         return tf.constructSpecializedType(_baseType, cls);
     }
