diff --git a/tmp/cd9cd12a-0fc8-443c-b21a-95c1080f8e30_buggy.java b/tmp/ee8774e9-cda3-4757-b369-dc01f2b7b3e0_fixed.java
index ae1f3a6..388aede 100644
--- a/tmp/cd9cd12a-0fc8-443c-b21a-95c1080f8e30_buggy.java
+++ b/tmp/ee8774e9-cda3-4757-b369-dc01f2b7b3e0_fixed.java
@@ -1,34 +1,63 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
                 // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+            // 03-Jan-2018, tatu: As per [databind#1735], need to ensure type compatibility
+            // Also related: [databind#1888] (obsolete?)
+            if (_baseType != null && !t.isSubTypeOf(_baseType)) {
+                 // Use specific exception from DeserializationContext for better reporting
+                 // (note: this should normally be DeserializationContext, but let's add fallback)
+                 if (ctxt instanceof DeserializationContext) {
+                     throw ((DeserializationContext) ctxt).invalidTypeIdException(_baseType, id, "Not a subtype");
+                 }
+                 // Fallback generic exception (should not happen in practice for deserialization)
+                 throw new IllegalArgumentException(String.format(
+                     "Specified type id '%s' is not assignable to base type '%s'",
+                     id, _baseType.toCanonical()));
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
+        // 17-Aug-2017, tatu: This is now verified bit later, by BeanDeserializerFactory
+        //    (via POJOPropertiesCollector), not here. Verification needs to be done
+        //    in any case, but seems more appropriate place is there.
+        //    Update: Nope. Need it here after all, see [databind#1735]
+        // 03-Jan-2018, tatu: ... or perhaps not? Note: `constructSpecializedType` DOES
+        //    check for type compatibility. Question is only whether it should be checked
+        //    sooner.
+
+        // NOTE: changed from previous -- requires compatibility check, explicit type checking
+        // 16-Feb-2019, tatu: Let's re-introduce stricter check from 2.9.8 again,
+        //   but only if `cls` is not Object.class. Can be overridden by custom impl.
+        //   (may need to be configurable in future? For now, assume default is ok)
+        if ((_baseType != null) && (_baseType.getRawClass() != Object.class)
+                && ! _baseType.getRawClass().isAssignableFrom(cls)) {
+             throw ctxt.invalidTypeIdException(_baseType, id, "Not a subtype");
+        }
         return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
