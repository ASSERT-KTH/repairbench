diff --git a/tmp/0df36c96-d68e-454c-a00e-f6401b6adcb1_buggy.java b/tmp/dc9a9df6-d3f2-4ede-a225-fc243cf0528d_fixed.java
index ae1f3a6..404fcf8 100644
--- a/tmp/0df36c96-d68e-454c-a00e-f6401b6adcb1_buggy.java
+++ b/tmp/dc9a9df6-d3f2-4ede-a225-fc243cf0528d_fixed.java
@@ -1,34 +1,53 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
+        JavaType t;
+
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+            // Use constructFromCanonical to handle generics
+            t = tf.constructFromCanonical(id);
+            // Need to check compatibility with base type
+            // 11-Nov-2017, tatu: Also need to ensure type compatibility with base type
+            // N রবি, 18 מרץ 2018, דימה: use isTypeOrSubTypeOf instead of isAssignableFrom
+            if (!t.isTypeOrSubTypeOf(_baseType.getRawClass())) {
+                 throw new IllegalArgumentException(String.format(
+ "Invalid type id '%s' (for id type '%s'): specified type %s not subtype of base type %s",
+                         id, _idType.name(), t.toCanonical(), _baseType.toCanonical()));
+             }
+             // We trust the external type id mechanism to produce valid type (relative to base)
+             // -- we cannot check that further, only make sure it's somewhat compatible.
+             // Compatibility is checked above; this should be fine.
             return t;
         }
+        // Else, non-generic type
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
-            throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
+            throw new IllegalArgumentException(String.format(
+                    "Invalid type id '%s' (for id type '%s'): %s", id, _idType.name(), e.getMessage()), e);
         }
-        return tf.constructSpecializedType(_baseType, cls);
+        // Now construct the specialized type: this also checks for basic compatibility
+        t = tf.constructSpecializedType(_baseType, cls);
+        // 08-Mar-2017, tatu: Maybe this should be moved earlier, theoretically?
+        // Or possibly should not do? For now, keep as is. See [databind#1576]
+        return t;
     }
\ No newline at end of file
