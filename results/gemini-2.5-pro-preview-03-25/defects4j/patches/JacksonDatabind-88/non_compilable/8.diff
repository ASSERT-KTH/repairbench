diff --git a/tmp/8ee282d4-d045-439d-b6e8-7c0fc50f3253_buggy.java b/tmp/67c91b1d-77b5-484f-ab3d-ef90888151bd_fixed.java
index ae1f3a6..26b8aaf 100644
--- a/tmp/8ee282d4-d045-439d-b6e8-7c0fc50f3253_buggy.java
+++ b/tmp/67c91b1d-77b5-484f-ab3d-ef90888151bd_fixed.java
@@ -1,34 +1,55 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
                 // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+            // 06-Jan-2018, tatu: Important: prevent invalid subtypes, combine checks.
+            //    Usually checked later on, but for canonical type ids it is possible
+            //    we may miss the check otherwise. Let's add specifically here, just in case
+            //    Also: let's not block conversion to `Object.class` ever.
+            if (!_baseType.isJavaLangObject()) {
+                // Note: we are trying to use the BAD type id for error reporting, NOT the resolved
+                // one (which is typically what is passed to error handler)
+                if (!t.isAssignableTo(_baseType)) {
+                    throw ctxt.invalidTypeIdException(_baseType, id, String.format(
+"Not a subtype of endpoint type %s", _baseType.getRawClass().getName()));
+                }
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
-        return tf.constructSpecializedType(_baseType, cls);
+        // 11-Oct-2015, tatu: Important: must narrow down type to `cls`, from `_baseType`.
+        // 29-Sep-2017, tatu: And ensure this is compatible type...
+        JavaType subType = tf.constructSpecializedType(_baseType, cls);
+        if (!_baseType.isAssignableTo(subType)) {
+            // 13-Oct-2017, tatu: Perhaps slightly cleaner way... requires bit more digging tho
+             throw ctxt.invalidTypeIdException(_baseType, id, String.format(
+"Not a subtype of endpoint type %s", _baseType.getRawClass().getName()));
+        }
+        return subType;
+//        return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
