diff --git a/tmp/060a2a22-39b1-4838-a9ed-c12748604b67_buggy.java b/tmp/512dce74-836a-420a-8f99-4340e98c40ff_fixed.java
index ae1f3a6..341fff1 100644
--- a/tmp/060a2a22-39b1-4838-a9ed-c12748604b67_buggy.java
+++ b/tmp/512dce74-836a-420a-8f99-4340e98c40ff_fixed.java
@@ -1,34 +1,60 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
+            JavaType t = tf.constructFromCanonical(id);
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+             if (_baseType != null) {
+                 // 18-Aug-2017, tatu: Ideally would allow specialization BUT that won't work
+                 //    with canonical types. So... requires exact match? Or, for reading,
+                 //    perhaps ok to requires subtype? For now, must be raw supertype
+                 Class<?> raw = t.getRawClass();
+                 Class<?> baseRaw = _baseType.getRawClass();
+                 if (!baseRaw.isAssignableFrom(raw)) {
+                     // 13-Mar-2019, tatu: Ran into an issue here; nominal type may be abstract,
+                     //   but actual type concrete. Eg base `Object`, actual `String`.
+                     //   Need to allow this. May need to revisit this topic in future.
+                     // NOTE! We are only checking RAW types, not generic parameters.
+                     // Fine for now.
+                     // TODO: try to figure out if we can get full check working
+                      throw ctxt.invalidTypeIdException(_baseType, id, String.format(
+                              "Not a subtype of baseline type %s", _baseType.toCanonical()));
+                 }
+                 // TODO: 13-Mar-2019, tatu: For 2.10 should figure out how to implement
+                 //   actual specialization...
+             }
              return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
+        // 18-Aug-2017, tatu: This is really the desired path for all cases, but
+        //   unfortunately does not work for generic types
+        // TODO: try to reconcile in 2.10
+        if (_baseType != null && _baseType.getRawClass() == cls) {
+            // 19-Dec-2017, tatu: A work-around: if type is the same, can just use base type,
+            //    since it has richer information
+            return _baseType;
+        }
         return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
