diff --git a/tmp/bd93c389-4b70-4b1d-bca1-de66c7187491_buggy.java b/tmp/0b9f64eb-80da-4098-b47b-c11268a84938_fixed.java
index ae1f3a6..6653b02 100644
--- a/tmp/bd93c389-4b70-4b1d-bca1-de66c7187491_buggy.java
+++ b/tmp/0b9f64eb-80da-4098-b47b-c11268a84938_fixed.java
@@ -1,34 +1,58 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
                 // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+
+            // 18-Aug-2017, tatu: As per [databind#1735], must verify that type is assignable
+            if (_baseType != null && _baseType.getRawClass() != Object.class) {
+                // 18-Aug-2017, tatu: Make sure it's subtype (or same type) -- MUST be done
+                //   there is no other place it gets verified.
+                if (!t.isTypeOrSubTypeOf(_baseType.getRawClass())) {
+                     throw ctxt.invalidTypeIdException(_baseType, id, String.format(
+                            "Not a subtype of (%s)", _baseType.toCanonical()));
+                }
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
+                // 18-Aug-2017, tatu: Need to pass base type to handler, NOT resolved type
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
+        // 18-Aug-2017, tatu: This check must also be enforced for non-generic type ids;
+        //    and we must NOT try to specialize (to retain type parameters of resolved
+        //    type id)
+        /* Also note that we could theoretically try to use `TypeFactory.constructGeneralizedType()`
+         * or `constructSpecializedType()` -- but the problem is that we do not really know
+         * which base type to use; the declared type or actual type. For now, let's simply
+         * construct type as is; specialization can be done somewhere else if need be.
+         */
+        // 19-Aug-2017, tatu: Actually... seems we DO need to check some cases...
+        //    specifically, if `_baseType` is abstract/interface, we may need that?
+
+        // Anyway, let's try finding possibly more specialized type BUT without losing
+        // generic type declaration from within id
         return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
