diff --git a/tmp/94f5ffb9-2c5f-463a-b359-9884080ab499_buggy.java b/tmp/49ba4a54-5070-4304-92b2-9576e17cb4d6_fixed.java
index 72a422c..7432ab7 100644
--- a/tmp/94f5ffb9-2c5f-463a-b359-9884080ab499_buggy.java
+++ b/tmp/49ba4a54-5070-4304-92b2-9576e17cb4d6_fixed.java
@@ -1,51 +1,81 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        // Check if '&' and '#' exist and that there is at least one potential digit character after &# or &#x
+        // The check index < seqEnd - 2 ensures there is room for at least one character after &#
+        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check there's still characters left after &#x or &#X
+                // If not, entity is incomplete (e.g., "&#x" at end of input)
+                if (start == seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Advance 'end' pointer to find the end of the numeric entity part.
+            // Stop condition is ';', or the end of the sequence.
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            // Check if any characters were found after &# or &#x
+            // This handles cases like "&#;" or "&#x;" where no digits are present.
+            if (end == start) {
+                 return 0;
+            }
+
             int entityValue;
             try {
+                CharSequence numericSequence = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                 // The sequence between start and end was not a valid number in the specified base (e.g., "&#zz;")
                 return 0;
             }
 
+            // Write the translated character(s) to the output writer
             if (entityValue > 0xFFFF) {
+                // Handle supplementary characters (codepoints > U+FFFF) which require two char units
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
-            } else {
+            } else if (entityValue > 0) { // Ensure it's a valid character codepoint (optional, but good practice)
+                // Handle BMP characters (codepoints <= U+FFFF)
                 out.write(entityValue);
+            } else {
+                // Value was 0 or negative - not typically valid entities, treat as untranslated
+                return 0;
             }
 
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate the total number of characters consumed by this translation.
+            // This spans from the initial '&' up to and including the terminating semicolon (if present),
+            // or up to the last digit character if the semicolon is absent.
+            int consumedLen = end - index;
+            // Check if the loop stopped because a semicolon was found at 'end'
+            boolean hasSemiColon = end < seqEnd && input.charAt(end) == ';';
+            if (hasSemiColon) {
+                consumedLen++; // Increment length to include the semicolon
+            }
+
+            return consumedLen;
         }
+        // If the input doesn't start with "&#" at the given index, or is too short,
+        // return 0 indicating no translation occurred starting at this index.
         return 0;
     }
\ No newline at end of file
