diff --git a/tmp/d92aafc5-b940-466d-a6ec-02b5c7dc0241_buggy.java b/tmp/0916866f-0265-496b-b5c2-1399233352bc_fixed.java
index 72a422c..a280d17 100644
--- a/tmp/d92aafc5-b940-466d-a6ec-02b5c7dc0241_buggy.java
+++ b/tmp/0916866f-0265-496b-b5c2-1399233352bc_fixed.java
@@ -1,51 +1,98 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+
+        // Check for '&#' requires at least 3 characters total (&, #, digit)
+        // to be a potentially valid entity.
+        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check for 'x' or 'X' following "&#"
+            if (start < seqEnd) { // Ensure there is a character after &#
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
-                start++;
+                    start++; // Move past 'x'
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                    // Check there is at least one hex digit after &#x
+                    if (start == seqEnd) {
+                        return 0; // Input ends with "&#x"
+                    }
+                }
+                // If not 'x' or 'X', assume decimal entity.
+            } else {
+                 return 0; // Input ends with "&#"
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+            // Find the end of the sequence of valid digits
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                boolean isDigit;
+                if (isHex) {
+                    // Check for valid hex digit
+                    isDigit = (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
+                } else {
+                    // Check for valid decimal digit
+                    isDigit = c >= '0' && c <= '9';
+                }
+
+                if (!isDigit) {
+                    break; // Character is not a valid digit in the current mode, or end of input reached
+                }
+                end++; // Advance pointer past the current digit
+            }
+
+            // Check if any digits were parsed
+            if (end == start) {
+                 // No digits found after "&#" or "&#x"
+                 return 0;
             }
 
             int entityValue;
             try {
+                // Parse the numeric value from the identified sequence of digits
+                String numStr = input.subSequence(start, end).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numStr, 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // This could happen if the number is too large to fit in an int,
+                // although the previous digit checks make invalid chars unlikely.
+                // Consider it untranslatable.
                 return 0;
             }
 
+            // Write the character corresponding to the entity value
             if(entityValue > 0xFFFF) {
+                // Handle supplementary characters (code points > U+FFFF)
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
+                // Handle BMP characters (code points <= U+FFFF), including null char for &#0;
                 out.write(entityValue);
             }
 
+            // Check if the entity was terminated by a semicolon
+            boolean semiColonPresent = false;
+            if (end < seqEnd && input.charAt(end) == ';') {
+                semiColonPresent = true;
+            }
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate the total number of characters consumed by the entity.
+            // This includes '&', '#', optional 'x', the digits found (up to 'end'),
+            // and the semicolon if it was present immediately after the digits.
+            // Length = (end - index) accounts for &, #, [x], digits.
+            // Add 1 if semicolon was consumed.
+            return end - index + (semiColonPresent ? 1 : 0);
         }
+        // Input character at 'index' is not the start of a numeric entity ('&')
+        // or the sequence is too short.
         return 0;
     }
\ No newline at end of file
