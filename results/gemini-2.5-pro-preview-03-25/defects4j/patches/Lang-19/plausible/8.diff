diff --git a/tmp/3bf498b1-7301-4ec7-8245-3ae74ff29d71_buggy.java b/tmp/1a476659-8acf-4897-b194-55b361e4f6a1_fixed.java
index 72a422c..d5988ab 100644
--- a/tmp/3bf498b1-7301-4ec7-8245-3ae74ff29d71_buggy.java
+++ b/tmp/1a476659-8acf-4897-b194-55b361e4f6a1_fixed.java
@@ -1,51 +1,106 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        // Check for '&#'
+        // Ensure index + 1 and index + 2 are valid indices to prevent StringIndexOutOfBoundsException
+        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check for optional 'x' or 'X' prefix
+            // 'start' is guaranteed to be a valid index (< seqEnd) due to the initial check 'index < seqEnd - 2'
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                // Check if there's anything after 'x'/'X'
+                // If start is now == seqEnd, the input ended with "&#x" or "&#X"
+                if (start == seqEnd) {
+                    return 0; // Indicate no translation was performed
                 }
+            }
+            // The initial check 'index < seqEnd - 2' ensures we don't proceed for input ending with just "&#"
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Find the end of the numeric sequence by checking for valid digits for the specified base (decimal or hex)
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                if (isHex) {
+                    // Check for valid hex digit (0-9, a-f, A-F)
+                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {
                         end++;
+                    } else {
+                        break; // Character is not a valid hex digit, end sequence here
+                    }
+                } else {
+                    // Check for valid decimal digit (0-9)
+                    if (c >= '0' && c <= '9') {
+                        end++;
+                    } else {
+                        break; // Character is not a valid decimal digit, end sequence here
+                    }
+                }
+            }
+
+            // Check if any digits were actually found after &# or &#x
+            // If end == start, it means no valid digits were present (e.g., "&#;", "&#x;", "&#abc;")
+            if (end == start) {
+                return 0; // Indicate no translation was performed
+            }
+
+            boolean semiColonPresent = false;
+            // Check for an optional semicolon immediately after the digits
+            // If end < seqEnd, it means the loop stopped before the end of the input
+            // Check if the character at 'end' is a semicolon
+            if (end < seqEnd && input.charAt(end) == ';') {
+                semiColonPresent = true;
             }
 
             int entityValue;
             try {
+                // Parse the numeric part (digits found between start and end)
+                CharSequence numericValue = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numericValue.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numericValue.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                // This can happen if the number format is valid (e.g., all digits)
+                // but the value exceeds Integer.MAX_VALUE.
+                // The original code printed an error message. Returning 0 is standard
+                // for CharSequenceTranslator to indicate failure/no translation.
+                // System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                return 0; // Indicate translation failure
             }
 
+            // Write the corresponding character (or characters for supplementary code points) to the output writer
             if (entityValue > 0xFFFF) {
+                // Handle supplementary Unicode characters (code points > U+FFFF) which require two char representation
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
+                // Handle Basic Multilingual Plane (BMP) characters (code points <= U+FFFF)
+                // This includes the null character if entityValue is 0 (e.g. &#0;)
                 out.write(entityValue);
             }
 
+            // Calculate the total number of characters consumed from the input sequence
+            // Consumed part includes: '&', '#', optional 'x'/'X', the digits, and the optional ';'
+            int consumedLength = (end - start) // Length of the digits
+                               + (isHex ? 1 : 0) // Add 1 for 'x'/'X' if present
+                               + 2; // Add 2 for '&#'
+            if (semiColonPresent) {
+                consumedLength++; // Add 1 for the semicolon if it was present and consumed
+            }
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return consumedLength;
         }
+        // If the input at the current index does not start with "&#", return 0
+        // indicating that no translation occurred at this index.
         return 0;
     }
\ No newline at end of file
