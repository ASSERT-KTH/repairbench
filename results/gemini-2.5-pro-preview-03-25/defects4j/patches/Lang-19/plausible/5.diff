diff --git a/tmp/a9d0aba7-35f7-4023-8283-f4ab103c2554_buggy.java b/tmp/f27d70ff-0601-45c8-b387-2d6f75478cd2_fixed.java
index 72a422c..e134d78 100644
--- a/tmp/a9d0aba7-35f7-4023-8283-f4ab103c2554_buggy.java
+++ b/tmp/f27d70ff-0601-45c8-b387-2d6f75478cd2_fixed.java
@@ -1,51 +1,101 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+
+        // Check for '&#' requires index+1 and index+2 to be valid at minimum
+        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check for 'x' or 'X' prefix for hexidecimal entities
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                // Check if sequence terminates immediately after 'x' or 'X'
+                // e.g. "&#x" is incomplete
+                if (start == seqEnd) {
+                    return 0; // Incomplete entity, do not translate
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+            // Find the end of the numeric part of the entity by scanning for valid digits
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                boolean isDigit;
+                if (isHex) {
+                    // Check for hex digit (0-9, a-f, A-F)
+                    isDigit = (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
+                } else {
+                    // Check for decimal digit (0-9)
+                    isDigit = c >= '0' && c <= '9';
+                }
+
+                if (!isDigit) {
+                    break; // Found non-digit, marks the end of the numeric part
+                }
+                end++; // Move to the next character
+            }
+
+            // Check if any digits were actually found after "&#" or "&#x"
+            // e.g. "&#;" or "&#x;" or "&# " are invalid
+            if (end == start) {
+                return 0; // No digits found, incomplete/invalid entity
             }
 
             int entityValue;
             try {
+                // Parse the numeric value from the identified sequence
+                CharSequence numericSequence = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                // This case should be rare given the prior digit checks,
+                // but handles potential overflow or invalid format robustly.
+                return 0; // Failed to parse, treat as untranslatable
             }
 
+            // Check if the entity is optionally terminated by a semicolon
+            boolean semiColonPresent = false;
+            if (end < seqEnd && input.charAt(end) == ';') {
+                semiColonPresent = true;
+            }
+
+            // Validate the parsed value as a Unicode code point and write to output
+            // Note: Character.isValidCodePoint handles negative values implicitly
+            if (Character.isValidCodePoint(entityValue)) {
                 if (entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
+                    // Supplementary character (requires two char surrogate pair)
+                    char[] chars = Character.toChars(entityValue);
+                    out.write(chars[0]);
+                    out.write(chars[1]);
                 } else {
-                out.write(entityValue);
+                    // Basic Multilingual Plane (BMP) character (single char)
+                    out.write((char) entityValue);
+                }
+            } else {
+                // Parsed value is not a valid Unicode code point
+                return 0; // Do not translate invalid code points
             }
 
+            // Calculate the total number of characters consumed by the entity
+            // Consumed length = prefix (&# or &#x) + digits + optional semicolon
+            // Prefix length = start - index (2 or 3)
+            // Digits length = end - start
+            int consumedLength = (start - index) + (end - start);
+            if (semiColonPresent) {
+                consumedLength++; // Add 1 for the consumed semicolon
+            }
+            return consumedLength;
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
-        return 0;
+        // The sequence at the current index does not start with "&#"
+        return 0; // Indicate that no translation occurred at this position
     }
\ No newline at end of file
