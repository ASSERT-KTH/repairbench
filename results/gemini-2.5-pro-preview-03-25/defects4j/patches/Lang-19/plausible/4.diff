diff --git a/tmp/70b0a813-e4de-4846-9b98-55e0fbe64b25_buggy.java b/tmp/6fe60084-0a01-41ef-b445-53ed452ff67b_fixed.java
index 72a422c..23c49d4 100644
--- a/tmp/70b0a813-e4de-4846-9b98-55e0fbe64b25_buggy.java
+++ b/tmp/6fe60084-0a01-41ef-b445-53ed452ff67b_fixed.java
@@ -1,51 +1,98 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+        // Check for "&#"
+        // Note: index < seqEnd - 1 ensures we can read index + 1
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+            int start = index + 2; // Current position is after "&#"
             boolean isHex = false;
 
+            // Check if we actually have characters after "&#"
+            if (start >= seqEnd) {
+                // Reached end of input after "&#"
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
-                start++;
+                start++; // Current position is after "&#x" or "&#X"
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check if we actually have characters after "&#x"
+                if (start >= seqEnd) {
+                    // Reached end of input after "&#x"
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Find the end of the digits, stopping at the first non-digit or end of sequence
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                if (isHex) {
+                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {
                         end++;
+                    } else {
+                        break; // Found non-hex digit or other character
                     }
+                } else {
+                    if (c >= '0' && c <= '9') {
+                        end++;
+                    } else {
+                        break; // Found non-decimal digit or other character
+                    }
+                }
+            }
+
+            // Check if any digits were found
+            if (end == start) {
+                // No digits found after "&#" or "&#x"
+                return 0;
+            }
+
+            boolean semiNext = (end < seqEnd && input.charAt(end) == ';');
 
             int entityValue;
             try {
+                CharSequence numericSequence = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // Should not happen with the digit checks unless the number is too large
+                // Return 0 to indicate nothing was translated
+                // System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]"); // Original debug print removed
                 return 0;
             }
 
+            // Write the character(s) corresponding to the entity value
             if (entityValue > 0xFFFF) {
+                // Handle supplementary characters (codepoints > U+FFFF)
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
+                // Handle BMP characters (codepoints <= U+FFFF)
+                // Note: The original code wrote entityValue even if it was 0 or negative.
+                // We retain this behavior, although filtering invalid codepoints might be desired in some contexts.
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate the number of input characters consumed
+            // Includes "&#", optional "x", the digits, and the trailing ";" if present.
+            // If semiNext is true, consumed length = (end - index) + 1 = end + 1 - index
+            // If semiNext is false, consumed length = end - index
+            int consumedLength = end - index;
+            if (semiNext) {
+                consumedLength++;
             }
+            return consumedLength;
+        }
+        // Did not find "&#" at the current index
         return 0;
     }
\ No newline at end of file
