diff --git a/tmp/e9c11f8f-7878-4ab4-b9d9-40b8829471cb_buggy.java b/tmp/c349e495-a71e-4057-a9bf-835d66db476c_fixed.java
index 72a422c..48286bd 100644
--- a/tmp/e9c11f8f-7878-4ab4-b9d9-40b8829471cb_buggy.java
+++ b/tmp/c349e495-a71e-4057-a9bf-835d66db476c_fixed.java
@@ -1,51 +1,100 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        final int seqEnd = input.length();
+
+        // Check for '&#'
+        // Ensure index+1 is valid before checking charAt(index+1)
+        if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if input ends prematurely after "&#"
+            if (start >= seqEnd) {
+                return 0;
+            }
+
+            // Check for optional 'x' or 'X' hex indicator
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check if input ends prematurely after "&#x" or "&#X"
+                if (start >= seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Scan for digits, stopping at the end of the input, a non-digit, or a semicolon.
+            // The loop condition `end < seqEnd` prevents StringIndexOutOfBoundsException.
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                if (isHex) {
+                    // Check for valid hex digit (0-9, a-f, A-F)
+                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                        break; // Character is not a hex digit
+                    }
+                } else { // Decimal
+                    // Check for valid decimal digit (0-9)
+                    if (!(c >= '0' && c <= '9')) {
+                        break; // Character is not a decimal digit
+                    }
+                }
                 end++;
             }
 
+            // Check if any digits were consumed
+            if (end == start) {
+                // No digits found after "&#" or "&#x..."
+                return 0;
+            }
+
+            boolean semiColonPresent = false;
+            // Check if the sequence ended with a semicolon (and we haven't gone past the end)
+            if (end < seqEnd && input.charAt(end) == ';') {
+                semiColonPresent = true;
+            }
+
             int entityValue;
             try {
+                CharSequence numericEntity = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numericEntity.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numericEntity.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // This could happen if the number is too large for an int,
+                // although the check for valid digits should prevent format errors otherwise.
+                // Treat as untranslatable --> return 0
                 return 0;
             }
 
+            // Write the translated character(s) to the output writer
             if (entityValue > 0xFFFF) {
+                // Handle supplementary characters (represented by surrogate pairs in UTF-16)
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
-                out.write(entityValue);
+                // Handle Basic Multilingual Plane (BMP) characters
+                // Includes characters like &#0; (NUL)
+                out.write((char) entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate the total number of characters consumed from the input
+            // Consumed = length of "&#" (2)
+            //          + length of "x" (1 if hex, 0 otherwise)
+            //          + length of digits (end - start)
+            //          + length of ";" (1 if present, 0 otherwise)
+            int consumed = 2 + (isHex ? 1 : 0) + (end - start) + (semiColonPresent ? 1 : 0);
+            return consumed;
         }
+
+        // The sequence starting at index is not a numeric entity ("&#...")
         return 0;
     }
\ No newline at end of file
