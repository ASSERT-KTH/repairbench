diff --git a/tmp/241a8fa4-8af9-4dce-ac1a-78dcca0cf4f3_buggy.java b/tmp/e7a5fed9-82b3-46cb-a8e2-1f7ed611910f_fixed.java
index 72a422c..1fc40e9 100644
--- a/tmp/241a8fa4-8af9-4dce-ac1a-78dcca0cf4f3_buggy.java
+++ b/tmp/e7a5fed9-82b3-46cb-a8e2-1f7ed611910f_fixed.java
@@ -1,51 +1,98 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+        // Check for '&#'
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if sequence is long enough for '#'
+            if (start >= seqEnd) {
+                // Input ends with "&#"
+                return 0;
+            }
+
+            // Check for 'x' or 'X'
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check if sequence is long enough after 'x'/'X'
+                if (start >= seqEnd) {
+                    // Input ends with "&#x" or "&#X"
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Find the end of the digits, stopping at non-digit/non-hex or end of input
+            while (end < seqEnd) {
+                char currentChar = input.charAt(end);
+                if (isHex) {
+                    if (!((currentChar >= '0' && currentChar <= '9') ||
+                          (currentChar >= 'a' && currentChar <= 'f') ||
+                          (currentChar >= 'A' && currentChar <= 'F'))) {
+                        break; // Not a hex digit
+                    }
+                } else {
+                    if (!(currentChar >= '0' && currentChar <= '9')) {
+                        break; // Not a decimal digit
+                    }
+                }
                 end++;
             }
 
-            int entityValue;
+            // Check if any digits were found
+            if (end == start) {
+                // No digits found after "&#" or "&#x" / "&#X"
+                return 0;
+            }
+
+            boolean hasSemicolon = false;
+            // Check for terminating semicolon
+            if (end < seqEnd && input.charAt(end) == ';') {
+                 hasSemicolon = true;
+            }
+
+
             try {
+                int entityValue;
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
 
                 if (entityValue > 0xFFFF) {
+                    // Handle supplementary characters (outside BMP)
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
+                    // Handle BMP characters
+                    // Note: Character.isValidCodePoint(entityValue) could be used for stricter validation,
+                    // but original code allowed any int value. We write even if it's 0.
                     out.write(entityValue);
                 }
 
+                // Calculate consumed length: includes '&', '#', optional 'x'/'X', digits, and optional ';'
+                int consumedLength = (start - index) + (end - start) + (hasSemicolon ? 1 : 0);
+                // Which simplifies to: end - index + (hasSemicolon ? 1 : 0)
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return consumedLength;
+
+            } catch (NumberFormatException nfe) {
+                // This might happen if the number is too large for an int, although unlikely for Unicode codepoints.
+                // Logically, the digit check prevents non-numeric chars from reaching parseInt.
+                // Return 0 to indicate no translation occurred, consistent with other failure paths.
+                // System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]"); // Original debug code
+                return 0;
+            }
         }
+        // Input character at index was not the start of a numeric entity ('&#')
         return 0;
     }
\ No newline at end of file
