diff --git a/tmp/f97efa6a-d617-4cec-945e-7e9345e99341_buggy.java b/tmp/29687584-7742-4ece-b59d-041e544ded3a_fixed.java
index 72a422c..c8c4102 100644
--- a/tmp/f97efa6a-d617-4cec-945e-7e9345e99341_buggy.java
+++ b/tmp/29687584-7742-4ece-b59d-041e544ded3a_fixed.java
@@ -1,51 +1,98 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        // Check for & #
+        // Must have at least &# followed by one potential digit/x and maybe ;
+        // So, need at least 3 characters after index
+        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
                 // Check there's more than just an x after the &#
+                if (start == seqEnd) {
+                    return 0; // Input ends with "&#x" or "&#X"
                 }
+            }
+            // Note: No need for a specific check like "if (start == seqEnd)" for the decimal case here,
+            // because the subsequent check "end == start" will handle the case where input is "&#"
+            // and no digits follow.
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Find the end of the numeric sequence by checking for valid digits
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                if (isHex) {
+                    // Check for valid hex digit
+                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {
                         end++;
+                    } else {
+                        break; // Non-hex character found, stop scanning
+                    }
+                } else {
+                    // Check for valid decimal digit
+                    if (c >= '0' && c <= '9') {
+                        end++;
+                    } else {
+                        break; // Non-digit character found, stop scanning
+                    }
+                }
+            }
+
+            // Check if any digits were actually found after &# or &#x
+            if (end == start) {
+                // Input was &# or &#x/&#X followed by non-digit/end of string.
+                return 0;
+            }
+
+            boolean semiColonPresent = false;
+            // Check if the entity ends with a semicolon
+            if (end < seqEnd && input.charAt(end) == ';') {
+                semiColonPresent = true;
             }
 
             int entityValue;
             try {
+                // Parse the numeric value found
+                CharSequence numericSequence = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
+                // This case should be unlikely given the prior checks for digits,
+                // but is a safeguard. Could indicate an unusually large number.
+                // Log or handle appropriately if required.
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                return 0; // Indicate translation failed
             }
 
+            // Write the character(s) to the output writer
             if (entityValue > 0xFFFF) {
+                // Handle Unicode supplementary characters (requires two Java chars)
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
+                // Handle Basic Multilingual Plane (BMP) characters (single Java char)
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate the total number of characters consumed from the input
+            // This includes '&', '#', 'x' (if present), digits, and ';' (if present)
+            // If semicolon is present, consumed chars = (end index of digits) + 1 - (start index)
+            // If semicolon is absent, consumed chars = (end index of digits) - (start index)
+            int consumedLength = (semiColonPresent ? end + 1 : end) - index;
+            return consumedLength;
         }
+        // Input didn't start with "&#" at the given index
         return 0;
     }
\ No newline at end of file
