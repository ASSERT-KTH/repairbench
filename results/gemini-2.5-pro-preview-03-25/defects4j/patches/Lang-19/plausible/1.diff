diff --git a/tmp/b92ab7b4-8ba6-4757-9bdc-5e3ed5fc66c1_buggy.java b/tmp/640cd037-c84e-45e3-afa4-27e71861a2ff_fixed.java
index 72a422c..bcc41fc 100644
--- a/tmp/b92ab7b4-8ba6-4757-9bdc-5e3ed5fc66c1_buggy.java
+++ b/tmp/640cd037-c84e-45e3-afa4-27e71861a2ff_fixed.java
@@ -1,51 +1,102 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+
+        // Check for '&#'
+        // Ensures there are at least 3 chars: &, #, potential digit/x
+        // The condition index < seqEnd - 2 ensures that index + 1 and index + 2 are valid indices.
+        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
+            int currentIdx = index + 2;
             boolean isHex = false;
 
-            char firstChar = input.charAt(start);
+            // Check if we are already at the end right after '#'
+            // This handles the case "Test &#" correctly.
+            // Note: currentIdx is seqEnd if input is exactly "&#" which is handled by index < seqEnd - 2 above.
+            // This check is important if the input is like "&# "
+            if (currentIdx == seqEnd) {
+                 return 0; // Incomplete sequence "&#"
+            }
+
+            // Check for 'x' or 'X' to indicate hex
+            char firstChar = input.charAt(currentIdx);
             if (firstChar == 'x' || firstChar == 'X') {
-                start++;
+                currentIdx++;
                 isHex = true;
+                // Check there's still something after 'x'/'X'
+                // This handles the cases "Test &#x" and "Test &#X" correctly.
+                if (currentIdx == seqEnd) {
+                    return 0; // Incomplete sequence "&#x" or "&#X"
+                }
+            }
+
+            int digitStart = currentIdx;
 
-                // Check there's more than just an x after the &#
+            // Find the end of the digits by iterating while characters are valid digits for the base
+            while (currentIdx < seqEnd) {
+                char c = input.charAt(currentIdx);
+                if (isHex) {
+                    // Check for valid hex digit [0-9a-fA-F]
+                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                        break; // Character is not a valid hex digit
+                    }
+                } else {
+                    // Check for valid decimal digit [0-9]
+                    if (!(c >= '0' && c <= '9')) {
+                        break; // Character is not a valid decimal digit
+                    }
+                }
+                currentIdx++;
             }
 
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+            // Check if any digits were actually found after &# or &#x
+            if (currentIdx == digitStart) {
+                return 0; // No digits found (e.g., "&#;", "&#x;", "&# not a number")
             }
 
             int entityValue;
             try {
+                // Parse the numeric value from the identified digit sequence
+                String number = input.subSequence(digitStart, currentIdx).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(number, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(number, 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // This should be logically unreachable due to the prior digit checks,
+                // but catch it defensively. Treat as an invalid sequence.
                 return 0;
             }
 
+            // Output the character(s). Handles Supplementary Characters correctly.
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
+                // Write Basic Multilingual Plane characters.
+                // Note: The original code wrote any value, including potentially invalid ones.
+                // This fix maintains that behavior for compatibility.
                 out.write(entityValue);
             }
 
+            // Calculate the total number of characters consumed from the input.
+            // currentIdx currently points just after the last digit.
+            int consumedLength = currentIdx - index;
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Check for an optional semicolon ';' immediately after the digits.
+            // If present, it's part of the entity and should be consumed.
+            if (currentIdx < seqEnd && input.charAt(currentIdx) == ';') {
+                 consumedLength++; // Increment consumed length to include the semicolon
             }
+
+            // Return the number of input characters that formed the numeric entity.
+            return consumedLength;
+
+        }
+        // Return 0 if the input sequence starting at 'index' does not begin with "&#"
         return 0;
     }
\ No newline at end of file
