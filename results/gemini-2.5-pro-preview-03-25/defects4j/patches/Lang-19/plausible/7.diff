diff --git a/tmp/c455ea65-111e-42fd-9ce4-e4d6870be2e3_buggy.java b/tmp/4794d80c-6560-4326-ad17-1fb37b9f8a1e_fixed.java
index 72a422c..974c020 100644
--- a/tmp/c455ea65-111e-42fd-9ce4-e4d6870be2e3_buggy.java
+++ b/tmp/4794d80c-6560-4326-ad17-1fb37b9f8a1e_fixed.java
@@ -1,51 +1,103 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
+        // Check for '&#'
         // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            // Check bounds: Is there anything after "&#"?
+            if (start == seqEnd) {
+                return 0; // Input is just "&#"
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                // Check bounds: Is there anything after "&#x"?
+                if (start == seqEnd) {
+                    return 0; // Input is just "&#x" or "&#X"
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Find the end of the digits, stopping at bounds or non-digit.
+            // This loop advances 'end' as long as it finds valid digits for the base (10 or 16)
+            // and stays within the bounds of the input sequence.
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                if (isHex) {
+                    // Check for valid hex digit (0-9, a-f, A-F)
+                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {
                         end++;
+                    } else {
+                        break; // Not a hex digit, stop scanning
                     }
+                } else {
+                    // Check for valid decimal digit (0-9)
+                    if (c >= '0' && c <= '9') {
+                        end++;
+                    } else {
+                        break; // Not a decimal digit, stop scanning
+                    }
+                }
+            }
+
+            // Check if any digits were found after "&#" or "&#x"
+            if (start == end) {
+                // No digits found, e.g., "&#;", "&#x;", "&# non-digit", "&#x non-digit"
+                // This is not a valid numeric entity sequence.
+                return 0;
+            }
+
+            // Check if the entity optionally ends with a semicolon.
+            // The semicolon is only considered part of the entity if it immediately follows the digits.
+            boolean semiColonPresent = (end < seqEnd && input.charAt(end) == ';');
 
             int entityValue;
             try {
+                // Parse the numeric value from the identified digit sequence
+                CharSequence numericSequence = input.subSequence(start, end);
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numericSequence.toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
+                // This could happen if the number is extremely large (beyond Integer.MAX_VALUE)
+                // or theoretically if the digit check logic was flawed.
+                // The original code printed an error; maintain that behavior.
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // Treat as untranslatable, return 0
                 return 0;
             }
 
+            // Write the character(s) corresponding to the entity value.
+            // Handles supplementary characters (code points > 0xFFFF).
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
+                // Handles BMP characters (including U+0000 if entityValue is 0).
                 out.write(entityValue);
             }
 
+            // Calculate the total number of input characters consumed by this entity.
+            // Consumed = length of prefix ('&#' or '&#x/') + length of digits + 1 if semicolon was present.
+            int consumed = (start - index) // Length of prefix (2 or 3)
+                         + (end - start);  // Length of digits
+            if (semiColonPresent) {
+                // If a semicolon was present immediately after the digits, it's consumed.
+                consumed++;
+            }
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return consumed;
         }
+        // The sequence starting at 'index' does not begin with "&#", so it's not a numeric entity.
         return 0;
     }
\ No newline at end of file
