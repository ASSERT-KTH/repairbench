diff --git a/tmp/e5588f2d-b640-490b-8490-891769a6eac2_buggy.java b/tmp/be4e9d92-b9ca-42c6-ad6c-0beadc7c8efd_fixed.java
index eb491d5..77edcf0 100644
--- a/tmp/e5588f2d-b640-490b-8490-891769a6eac2_buggy.java
+++ b/tmp/be4e9d92-b9ca-42c6-ad6c-0beadc7c8efd_fixed.java
@@ -1,170 +1,204 @@
   /** {@inheritDoc} */
   @Override
   public double integrate(final FirstOrderDifferentialEquations equations,
                           final double t0, final double[] y0,
                           final double t, final double[] y)
   throws DerivativeException, IntegratorException {
 
     sanityChecks(equations, t0, y0, t, y);
     setEquations(equations);
     resetEvaluations();
     final boolean forward = t > t0;
 
     // create some internal working arrays
     final int stages = c.length + 1;
     if (y != y0) {
       System.arraycopy(y0, 0, y, 0, y0.length);
     }
     final double[][] yDotK = new double[stages][y0.length];
     final double[] yTmp = new double[y0.length];
 
     // set up an interpolator sharing the integrator arrays
     AbstractStepInterpolator interpolator;
     if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
       final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
       rki.reinitialize(this, yTmp, yDotK, forward);
       interpolator = rki;
     } else {
       interpolator = new DummyStepInterpolator(yTmp, forward);
     }
     interpolator.storeTime(t0);
 
     // set up integration control objects
     stepStart         = t0;
-    double  hNew      = 0;
+    double  hNew      = 0; // Will be initialized based on step size control parameters or initializeStep
     boolean firstTime = true;
     for (StepHandler handler : stepHandlers) {
         handler.reset();
     }
     CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
     boolean lastStep = false;
 
     // main integration loop
     while (!lastStep) {
 
       interpolator.shift();
 
       double error = 0;
-      for (boolean loop = true; loop;) {
+      boolean firstAttempt = true; // Flag for first attempt of the current step
+      boolean stepAccepted = false; // Flag indicating if the step was accepted
 
-        if (firstTime || !fsal) {
-          // first stage
-          computeDerivatives(stepStart, y, yDotK[0]);
-        }
+      while (!stepAccepted) { // Inner loop for step attempts (initial + retries)
 
+          // Determine the step size for this attempt
+          if (firstAttempt) {
+              // Initialize step size on the very first attempt ever
               if (firstTime) {
                   final double[] scale;
                   if (vecAbsoluteTolerance == null) {
                       scale = new double[y0.length];
                       java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                   } else {
                       scale = vecAbsoluteTolerance;
                   }
+                  // Ensure the first derivative is computed for initializeStep
+                  computeDerivatives(stepStart, y, yDotK[0]);
                   hNew = initializeStep(equations, forward, getOrder(), scale,
                                         stepStart, y, yDotK[0], yTmp, yDotK[1]);
-          firstTime = false;
               }
-
+              // Use the proposed step size (either initialized or from previous step control)
               stepSize = hNew;
+          } else {
+              // On retries, stepSize is already reduced by the error control logic
+              // No need to update stepSize from hNew here
+          }
 
-        // next stages
+
+          // First stage (k=0) evaluation: f(t_n, y_n)
+          // Always recompute the first stage derivative if this is not the first attempt or if FSAL is disabled.
+          // For the first attempt of the first step, it was computed above for initializeStep.
+          // For the first attempt of subsequent steps with FSAL, yDotK[0] contains the last stage evaluation of the previous step.
+          if (!firstAttempt || !fsal || (firstTime && firstAttempt)) {
+               // Need to compute yDotK[0] if:
+               // - this is a retry (!firstAttempt)
+               // - FSAL is disabled (!fsal)
+               // - this is the first attempt of the first step (firstTime && firstAttempt - already done for initializeStep, but can recompute for safety or if initializeStep doesn't store it)
+               // Note: The condition simplifies: compute if !firstAttempt || !fsal. If firstTime && firstAttempt, it's already computed.
+               if (!firstAttempt || !fsal) {
+                 computeDerivatives(stepStart, y, yDotK[0]);
+               }
+          }
+          // If it's the first attempt (!firstTime && fsal), yDotK[0] holds the reused value and we skip the computation.
+
+
+          // Next stages (k=1 to stages-1)
           for (int k = 1; k < stages; ++k) {
-
               for (int j = 0; j < y0.length; ++j) {
                   double sum = a[k-1][0] * yDotK[0][j];
                   for (int l = 1; l < k; ++l) {
                       sum += a[k-1][l] * yDotK[l][j];
                   }
                   yTmp[j] = y[j] + stepSize * sum;
               }
-
               computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
-
           }
 
-        // estimate the state at the end of the step
+          // Estimate the state at the end of the step
           for (int j = 0; j < y0.length; ++j) {
               double sum    = b[0] * yDotK[0][j];
               for (int l = 1; l < stages; ++l) {
                   sum    += b[l] * yDotK[l][j];
               }
               yTmp[j] = y[j] + stepSize * sum;
           }
 
-        // estimate the error at the end of the step
+          // Estimate the error at the end of the step
           error = estimateError(yDotK, y, yTmp, stepSize);
+
           if (error <= 1.0) {
-
-          // discrete events handling
+              // Step size might be accepted based on error, check events
               interpolator.storeTime(stepStart + stepSize);
               if (manager.evaluateStep(interpolator)) {
+                  // Event occurred within the step
                   final double dt = manager.getEventTime() - stepStart;
                   if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                  // rejecting the step would lead to a too small next step, we accept it
-                  loop = false;
+                      // Event is very close to the start, accept the current step
+                      // The event manager will handle the exact time.
+                      stepAccepted = true;
                   } else {
-                  // reject the step to match exactly the next switch time
-                  hNew = dt;
+                      // Reject the step and resize step to hit the event time
+                      hNew = dt; // Propose new step size for the next attempt
+                      stepSize = hNew; // Set stepSize for the next iteration of this inner loop
+                      firstAttempt = false; // Mark that the next iteration is a retry
+                      // stepAccepted remains false, loop continues
                   }
               } else {
-            // accept the step
-            loop = false;
+                  // No event, step is fully accepted
+                  stepAccepted = true;
               }
 
           } else {
-          // reject the step and attempt to reduce error by stepsize control
-          final double factor =
-              Math.min(maxGrowth,
+              // Error too large, reject step and attempt to reduce error by stepsize control
+              final double factor = Math.min(maxGrowth,
                                              Math.max(minReduction, safety * Math.pow(error, exp)));
-          hNew = filterStep(stepSize * factor, forward, false);
+              hNew = filterStep(stepSize * factor, forward, false); // Propose smaller step size
+              stepSize = hNew; // Set stepSize for the next iteration of this inner loop
+              firstAttempt = false; // Mark that the next iteration is a retry
+              // stepAccepted remains false, loop continues
           }
 
-      }
+      } // End of inner step attempt loop: while (!stepAccepted)
 
-      // the step has been accepted
+      // The step has been accepted (stepSize holds the accepted value)
       final double nextStep = stepStart + stepSize;
       System.arraycopy(yTmp, 0, y, 0, y0.length);
       manager.stepAccepted(nextStep, y);
       lastStep = manager.stop();
 
-      // provide the step data to the step handler
-      interpolator.storeTime(nextStep);
+      // Provide the step data to the step handler
+      interpolator.storeTime(nextStep); // Store final time for the accepted step
       for (StepHandler handler : stepHandlers) {
           handler.handleStep(interpolator, lastStep);
       }
       stepStart = nextStep;
 
       if (fsal) {
-        // save the last evaluation for the next step
+          // Save the last evaluation for the next step's first attempt
           System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
       }
 
+      // Reset firstTime flag after the first successful step has been taken
+      if (firstTime) {
+        firstTime = false;
+      }
+
+
       if (manager.reset(stepStart, y) && ! lastStep) {
-        // some event handler has triggered changes that
-        // invalidate the derivatives, we need to recompute them
+          // Some event handler has triggered changes that invalidate the derivatives,
+          // we need to recompute them for the next step.
+          // This correctly overwrites the FSAL value if needed.
           computeDerivatives(stepStart, y, yDotK[0]);
       }
 
       if (! lastStep) {
-        // in some rare cases we may get here with stepSize = 0, for example
-        // when an event occurs at integration start, reducing the first step
-        // to zero; we have to reset the step to some safe non zero value
+          // Step size control for next step
+          // Ensure stepSize is not zero after event handling or near start
           stepSize = filterStep(stepSize, forward, true);
 
-        // stepsize control for next step
+          // Use the error from the accepted step to control the next step size
           final double factor = Math.min(maxGrowth,
                                          Math.max(minReduction,
                                                   safety * Math.pow(error, exp)));
           final double scaledH = stepSize * factor;
           final double nextT = stepStart + scaledH;
           final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
-        hNew = filterStep(scaledH, forward, nextIsLast);
+          hNew = filterStep(scaledH, forward, nextIsLast); // Store proposed hNew for the *next* step's first attempt
       }
 
-    }
+    } // End of main integration loop: while (!lastStep)
 
     final double stopTime = stepStart;
     resetInternalState();
     return stopTime;
 
   }
\ No newline at end of file
