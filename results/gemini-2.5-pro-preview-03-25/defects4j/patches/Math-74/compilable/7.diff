diff --git a/tmp/1e4e19cd-7eef-4da7-af76-4b23767db599_buggy.java b/tmp/077a2c48-d052-46f0-9cc8-d9b41946fa7f_fixed.java
index eb491d5..0330c20 100644
--- a/tmp/1e4e19cd-7eef-4da7-af76-4b23767db599_buggy.java
+++ b/tmp/077a2c48-d052-46f0-9cc8-d9b41946fa7f_fixed.java
@@ -1,170 +1,176 @@
   /** {@inheritDoc} */
   @Override
   public double integrate(final FirstOrderDifferentialEquations equations,
                           final double t0, final double[] y0,
                           final double t, final double[] y)
   throws DerivativeException, IntegratorException {
 
     sanityChecks(equations, t0, y0, t, y);
     setEquations(equations);
     resetEvaluations();
     final boolean forward = t > t0;
 
     // create some internal working arrays
     final int stages = c.length + 1;
     if (y != y0) {
       System.arraycopy(y0, 0, y, 0, y0.length);
     }
     final double[][] yDotK = new double[stages][y0.length];
     final double[] yTmp = new double[y0.length];
 
     // set up an interpolator sharing the integrator arrays
     AbstractStepInterpolator interpolator;
     if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
       final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
       rki.reinitialize(this, yTmp, yDotK, forward);
       interpolator = rki;
     } else {
       interpolator = new DummyStepInterpolator(yTmp, forward);
     }
     interpolator.storeTime(t0);
 
     // set up integration control objects
     stepStart         = t0;
     double  hNew      = 0;
     boolean firstTime = true;
     for (StepHandler handler : stepHandlers) {
         handler.reset();
     }
     CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
     boolean lastStep = false;
 
     // main integration loop
     while (!lastStep) {
 
       interpolator.shift();
 
       double error = 0;
+      boolean stepRejected = false; // Flag to track rejection within the inner loop
       for (boolean loop = true; loop;) {
 
-        if (firstTime || !fsal) {
+        // Check if we need to recompute the first stage derivative
+        if (firstTime || !fsal || stepRejected) {
           // first stage
           computeDerivatives(stepStart, y, yDotK[0]);
         }
+        // Reset the flag for the current attempt (will be set to true later if rejection occurs)
+        stepRejected = false;
 
         if (firstTime) {
           final double[] scale;
           if (vecAbsoluteTolerance == null) {
               scale = new double[y0.length];
               java.util.Arrays.fill(scale, scalAbsoluteTolerance);
             } else {
               scale = vecAbsoluteTolerance;
             }
           hNew = initializeStep(equations, forward, getOrder(), scale,
                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);
           firstTime = false;
         }
 
-        stepSize = hNew;
+        stepSize = hNew; // Use the proposed step size (from initialization or previous adaptation)
 
         // next stages
         for (int k = 1; k < stages; ++k) {
 
           for (int j = 0; j < y0.length; ++j) {
             double sum = a[k-1][0] * yDotK[0][j];
             for (int l = 1; l < k; ++l) {
               sum += a[k-1][l] * yDotK[l][j];
             }
             yTmp[j] = y[j] + stepSize * sum;
           }
 
           computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
 
         }
 
         // estimate the state at the end of the step
         for (int j = 0; j < y0.length; ++j) {
           double sum    = b[0] * yDotK[0][j];
           for (int l = 1; l < stages; ++l) {
             sum    += b[l] * yDotK[l][j];
           }
           yTmp[j] = y[j] + stepSize * sum;
         }
 
         // estimate the error at the end of the step
         error = estimateError(yDotK, y, yTmp, stepSize);
         if (error <= 1.0) {
 
           // discrete events handling
           interpolator.storeTime(stepStart + stepSize);
           if (manager.evaluateStep(interpolator)) {
               final double dt = manager.getEventTime() - stepStart;
               if (Math.abs(dt) <= Math.ulp(stepStart)) {
                   // rejecting the step would lead to a too small next step, we accept it
-                  loop = false;
+                  loop = false; // Accept step
               } else {
                   // reject the step to match exactly the next switch time
                   hNew = dt;
+                  stepRejected = true; // Mark step as rejected, need to recompute in the loop
               }
           } else {
             // accept the step
             loop = false;
           }
 
         } else {
           // reject the step and attempt to reduce error by stepsize control
           final double factor =
               Math.min(maxGrowth,
                        Math.max(minReduction, safety * Math.pow(error, exp)));
           hNew = filterStep(stepSize * factor, forward, false);
+          stepRejected = true; // Mark step as rejected, need to recompute in the loop
         }
 
-      }
+      } // End of inner loop (step trial loop)
 
       // the step has been accepted
       final double nextStep = stepStart + stepSize;
       System.arraycopy(yTmp, 0, y, 0, y0.length);
       manager.stepAccepted(nextStep, y);
       lastStep = manager.stop();
 
       // provide the step data to the step handler
       interpolator.storeTime(nextStep);
       for (StepHandler handler : stepHandlers) {
           handler.handleStep(interpolator, lastStep);
       }
       stepStart = nextStep;
 
       if (fsal) {
         // save the last evaluation for the next step
         System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
       }
 
       if (manager.reset(stepStart, y) && ! lastStep) {
         // some event handler has triggered changes that
         // invalidate the derivatives, we need to recompute them
         computeDerivatives(stepStart, y, yDotK[0]);
       }
 
       if (! lastStep) {
         // in some rare cases we may get here with stepSize = 0, for example
         // when an event occurs at integration start, reducing the first step
         // to zero; we have to reset the step to some safe non zero value
           stepSize = filterStep(stepSize, forward, true);
 
         // stepsize control for next step
         final double factor = Math.min(maxGrowth,
                                        Math.max(minReduction,
                                                 safety * Math.pow(error, exp)));
         final double  scaledH    = stepSize * factor;
         final double  nextT      = stepStart + scaledH;
         final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
-        hNew = filterStep(scaledH, forward, nextIsLast);
+        hNew = filterStep(scaledH, forward, nextIsLast); // This hNew is for the next step attempt
       }
 
-    }
+    } // End of main loop (while !lastStep)
 
     final double stopTime = stepStart;
     resetInternalState();
     return stopTime;
 
   }
\ No newline at end of file
