diff --git a/tmp/5dbc8bc5-ff10-4a17-a361-d025d3f6f4c8_buggy.java b/tmp/25e3190a-5b52-4f10-a750-9e8d62406206_fixed.java
index 90fe130..4b7e57d 100644
--- a/tmp/5dbc8bc5-ff10-4a17-a361-d025d3f6f4c8_buggy.java
+++ b/tmp/25e3190a-5b52-4f10-a750-9e8d62406206_fixed.java
@@ -1,61 +1,96 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        // Locale string must be at least 2 characters (language code).
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
+        // Language code must be 2 lowercase letters.
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Case 1: "ll" format (e.g., "en").
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // Format must be "ll_CC", "ll_CC_variant", or "ll__variant".
+        // It requires an underscore at index 2.
+        // Also implicitly checks len >= 3
         if (str.charAt(2) != '_') {
+             // Covers cases like "enGB" where the underscore is missing.
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Need country code or second underscore, implies len >= 5
+        // (e.g., "ll_CC" or "ll__V")
+        if (len < 5) {
+             // Covers lengths 3 and 4 ("en_", "en_G")
+             throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+
         char ch3 = str.charAt(3);
+        // Case 2: "ll__variant" format (e.g., "fr__POSIX").
+        if (ch3 == '_') {
+            // Requires a non-empty variant after "__". Minimum length is 5 ("ll__V").
+            // We know len >= 5 from the check above.
+            // Variant starts at index 4.
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        }
+
+        // Case 3: "ll_CC" or "ll_CC_variant" format (e.g., "en_GB", "en_GB_xxx").
+        // Country code (at indices 3 and 4) must be 2 uppercase letters.
         char ch4 = str.charAt(4);
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Case 3a: "ll_CC" format.
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+        }
+
+        // Case 3b: "ll_CC_variant" format.
+        // Requires an underscore separator at index 5. Minimum length is 7 ("ll_CC_V").
+        // (Technically len=6 like "en_GBX" is invalid length/format).
         if (str.charAt(5) != '_') {
+            // Covers length 6 like "en_GBX" or "en_GBv" format error
+            // and formats like "en_GBvariant" where the underscore is missing.
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+         // Checks for valid length >= 7 implicitly via previous checks and charAt(5) check.
+         // Variant starts at index 6. Empty variant ("en_GB_") was allowed by original code's logic.
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
-        }
-    }
