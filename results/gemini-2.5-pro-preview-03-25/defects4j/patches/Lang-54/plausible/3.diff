diff --git a/tmp/d3098e98-a3db-4be6-83d7-e8c6f940d5de_buggy.java b/tmp/6f1d6405-5994-4ba5-9c77-783478eb97bb_fixed.java
index 90fe130..c513098 100644
--- a/tmp/d3098e98-a3db-4be6-83d7-e8c6f940d5de_buggy.java
+++ b/tmp/6f1d6405-5994-4ba5-9c77-783478eb97bb_fixed.java
@@ -1,61 +1,84 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        // Valid lengths are 2 (lang), 5 (lang_COUNTRY or lang__variant starting point), >= 7 (lang_COUNTRY_variant)
+        // Also allows lang__variant where variant length > 1, so len can be 6+
+        // Thus, invalid lengths are 1, 3, 4.
+        if (len != 2 && len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
+        // Language code must be 2 lowercase letters
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        
         if (len == 2) {
+            // Language only: "ll"
             return new Locale(str, "");
-        } else {
+        } else { // len >= 5
+            // Must have underscore after language code
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            
             char ch3 = str.charAt(3);
+            if (ch3 == '_') {
+                // Language and variant: "ll__variant"
+                // Variant must exist, so minimum length is 5 (ll__V)
+                if (len < 5) {
+                     throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                return new Locale(str.substring(0, 2), "", str.substring(4));
+            } else {
+                // Language and country (and maybe variant): "ll_CC..."
                 char ch4 = str.charAt(4);
+                // Country code must be 2 uppercase letters
                 if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
                 if (len == 5) {
+                    // Language and country: "ll_CC"
                     return new Locale(str.substring(0, 2), str.substring(3, 5));
                 } else {
-                if (str.charAt(5) != '_') {
+                    // Language, country, and variant: "ll_CC_variant"
+                    // Must have underscore after country code and non-empty variant
+                    if (len < 7 || str.charAt(5) != '_') {
                         throw new IllegalArgumentException("Invalid locale format: " + str);
                     }
                     return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
                 }
             }
         }
+    }
\ No newline at end of file
