diff --git a/tmp/c5a55a7d-4db4-477b-bf14-e9b43af90215_buggy.java b/tmp/800345a7-8615-4be0-8800-075a1a03f706_fixed.java
index 90fe130..7cae98b 100644
--- a/tmp/c5a55a7d-4db4-477b-bf14-e9b43af90215_buggy.java
+++ b/tmp/800345a7-8615-4be0-8800-075a1a03f706_fixed.java
@@ -1,61 +1,91 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
+     * The length must be correct for the format.</p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        // Parsing requires minimum length of 2, e.g. "en"
+        if (len < 2) {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
+        // Language code check: 2 lowercase letters
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Format: "ll"
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // Format: "ll_..." requires minimum length of 5 ("ll_CC" or "ll__V")
+        if (len < 5) {
+             throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        // Separator check: must have '_' at index 2
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         char ch3 = str.charAt(3);
+        // Differentiate between "ll_CC..." and "ll__V..." based on char at index 3
+        if (ch3 == '_') {
+            // Format: "ll__Var..." (language, empty country, variant)
+            // Variant part starts at index 4, must have minimum length of 1
+            if(len < 5) { // Ensure there's at least one char for variant
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        } else {
+            // Format: "ll_CC..." (language, country, maybe variant)
             char ch4 = str.charAt(4);
+            // Country code check: 2 uppercase letters at index 3 and 4
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            // Format: "ll_CC"
             if (len == 5) {
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             } else {
+                // Format: "ll_CC_Var..." requires minimum length of 7
+                if (len < 7) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                // Separator check: must have '_' at index 5
                 if (str.charAt(5) != '_') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
+                // Variant part starts at index 6
                 return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
             }
         }
     }
\ No newline at end of file
