diff --git a/tmp/aa2a2ded-4128-4794-b789-f3f093ba0caa_buggy.java b/tmp/af8a03a2-5019-40c4-a562-5ec7084d3379_fixed.java
index 90fe130..d0bec42 100644
--- a/tmp/aa2a2ded-4128-4794-b789-f3f093ba0caa_buggy.java
+++ b/tmp/af8a03a2-5019-40c4-a562-5ec7084d3379_fixed.java
@@ -1,61 +1,95 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        // Input string must be at least 2 chars long ("ll")
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Language code (first 2 chars) must be lowercase letters
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Case 1: "ll"
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // String is longer than 2 chars, must have an underscore at index 2
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Format is "ll_..."
+        // String must be at least 5 chars long ("ll_CC" or "ll__V")
+        if (len < 5) {
+             throw new IllegalArgumentException("Invalid locale format: " + str); // Handles "ll_", "ll_X", "ll_XX", "ll__"
+        }
+
+        // Check char at index 3
         char ch3 = str.charAt(3);
+        if (ch3 == '_') {
+            // Format is "ll__variant"
+            // Variant must not be empty, so length must be >= 5 ("ll__V")
+            // The length check `len < 5` above already handled "ll__".
+            // Locale constructor handles variant content validation.
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        } else {
+            // Format might be "ll_CC..."
+            // Country code (chars at index 3 and 4) must be uppercase letters
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            // Format is "ll_CC"
             if (len == 5) {
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+            }
+
+            // Format must be "ll_CC_variant"
+            // Must have an underscore at index 5
             if (str.charAt(5) != '_') {
                  throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            // Variant must not be empty, so length must be >= 7 ("ll_CC_V")
+            if (len < 7) {
+                throw new IllegalArgumentException("Invalid locale format: " + str); // Handles "ll_CC_"
+            }
+
+            // Locale constructor handles variant content validation.
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
     }
\ No newline at end of file
-    }
