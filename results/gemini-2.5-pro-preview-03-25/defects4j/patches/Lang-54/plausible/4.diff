diff --git a/tmp/b5a88570-fd56-4867-a40d-05f2f0831104_buggy.java b/tmp/ec3b4179-a016-4fef-9f8b-d465a31ead68_fixed.java
index 90fe130..372381b 100644
--- a/tmp/b5a88570-fd56-4867-a40d-05f2f0831104_buggy.java
+++ b/tmp/ec3b4179-a016-4fef-9f8b-d465a31ead68_fixed.java
@@ -1,61 +1,92 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        // Must have language code
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
+        // Validate language: 2 lowercase letters
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Just language
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // Needs underscore separator
+        // Cannot be ll_C or ll_ or ll__ - minimum length is 5 (ll_CC or ll__V)
+        if (len < 5) {
+             throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         char ch3 = str.charAt(3);
+        // Case: ll__variant (e.g., fr__POSIX)
+        if (ch3 == '_') {
+             // Can't be ll__ - need minimum ll__V
+             if (len < 5) {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+             }
+            // The variant part starts at index 4
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        }
+
+        // Case: ll_CC or ll_CC_variant (e.g., en_GB, en_GB_xxx)
         char ch4 = str.charAt(4);
+        // Validate country: 2 uppercase letters
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Just language and country
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+        }
+
+        // Must have underscore separator for variant
+        // Cannot be ll_CC_ - minimum length is 7 (ll_CC_V)
+        if (len < 7) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Language, country, and variant
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
-        }
-    }
