diff --git a/tmp/10974125-01ee-4d57-9c47-b58a021a5675_buggy.java b/tmp/6ce6af58-51f9-4c27-9ba2-1500dbbcf4e9_fixed.java
index 90fe130..7ba32c2 100644
--- a/tmp/10974125-01ee-4d57-9c47-b58a021a5675_buggy.java
+++ b/tmp/6ce6af58-51f9-4c27-9ba2-1500dbbcf4e9_fixed.java
@@ -1,61 +1,88 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
+        // Check length requirements: 2, 5, or >= 7
         if (len != 2 && len != 5 && len < 7) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
+        // Check language code: Must be lowercase letters
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         if (len == 2) {
+            // Format: "ll"
             return new Locale(str, "");
-        } else {
+        } else { // len is 5 or >= 7
+            // Check first separator: Must be '_'
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            // Check for the "ll__variant" format (e.g., "fr__POSIX")
+            // This occurs when len >= 5 and the character after the first '_' is another '_'
+            if (str.charAt(3) == '_') {
+                 // The initial length check ensures len >= 5 for this path.
+                 // Language is the first two chars (validated lowercase)
+                 // Country is empty
+                 // Variant is from the 5th char onwards (index 4)
+                return new Locale(str.substring(0, 2), "", str.substring(4));
+            }
+
+            // Format must be "ll_CC" or "ll_CC_variant"
             char ch3 = str.charAt(3);
             char ch4 = str.charAt(4);
+            // Check country code: Must be uppercase letters
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
             if (len == 5) {
+                // Format: "ll_CC"
+                // Language is the first two chars
+                // Country is chars 3 and 4 (validated uppercase)
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+            } else { // len >= 7
+                // Format: "ll_CC_variant"
+                // Check second separator: Must be '_'
                 if (str.charAt(5) != '_') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
+                // Language is the first two chars
+                // Country is chars 3 and 4
+                // Variant is from the 7th char onwards (index 6)
                 return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
             }
         }
     }
\ No newline at end of file
