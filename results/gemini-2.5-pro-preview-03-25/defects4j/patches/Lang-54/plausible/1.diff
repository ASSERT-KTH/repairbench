diff --git a/tmp/3b697715-a10f-43da-b572-8d013d0d7999_buggy.java b/tmp/6be0f247-d212-4408-bf1c-29a9ad573c86_fixed.java
index 90fe130..4f02de3 100644
--- a/tmp/3b697715-a10f-43da-b572-8d013d0d7999_buggy.java
+++ b/tmp/6be0f247-d212-4408-bf1c-29a9ad573c86_fixed.java
@@ -1,61 +1,101 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        // Basic length check: must be at least 2 for language code
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Validate language code (first 2 chars)
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
+            throw new IllegalArgumentException("Invalid locale format: Language code must be lower case - " + str);
         }
+
+        // Case 1: Only language code ("ll")
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // Case 2: Language + Country/Variant ("ll_...")
+        // Must be "ll_CC", "ll_CC_V..." or "ll__V..." minimum length 5
+        if (len < 5) {
+            throw new IllegalArgumentException("Invalid locale format: Length must be at least 5 for non-language-only locales - " + str);
+        }
+
+        // Check for first underscore
         if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            throw new IllegalArgumentException("Invalid locale format: Expecting underscore after language code - " + str);
         }
+
         char ch3 = str.charAt(3);
+
+        // Case 2a: Language + Variant ("ll__VV...")
+        if (ch3 == '_') {
+            // Ensure there is a variant part after the "__"
+            if (len < 5) { // Format "ll__" is invalid (len 4), already caught by len < 5 check
+                 throw new IllegalArgumentException("Invalid locale format: Missing variant after double underscore - " + str);
+            }
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        }
+
+        // Case 2b: Language + Country (+ Variant?) ("ll_CC...")
+        // Validate country code (chars 3 and 4)
         char ch4 = str.charAt(4);
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            throw new IllegalArgumentException("Invalid locale format: Country code must be upper case - " + str);
         }
+
+        // Case 2b-i: Language + Country ("ll_CC")
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+        }
+
+        // Case 2b-ii: Language + Country + Variant ("ll_CC_VV...")
+        // Check length for variant part separator "_"
+        if (len < 7) { // Needs at least "ll_CC_V"
+            // Handles formats like "ll_CCX" (len 6), which are invalid.
+            throw new IllegalArgumentException("Invalid locale format: Length must be at least 7 for language+country+variant locales - " + str);
+        }
+
+        // Check for second underscore
         if (str.charAt(5) != '_') {
-                    throw new IllegalArgumentException("Invalid locale format: " + str);
+            throw new IllegalArgumentException("Invalid locale format: Expecting underscore after country code - " + str);
         }
+        
+        // Ensure there is a non-empty variant part after the second "_"
+        // The check len < 7 ensures that if len == 6 (e.g., "ll_CC_"), it fails.
+        // If len >= 7, str.substring(6) will be non-empty or empty ("").
+        // Locale constructor allows empty variant string.
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
-        }
-    }
