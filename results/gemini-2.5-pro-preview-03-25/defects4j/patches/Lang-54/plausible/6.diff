diff --git a/tmp/6ba50b63-fc11-484c-af73-e67a0a48e6a2_buggy.java b/tmp/b30f71bb-d4ea-4f7e-8faa-b07e26a3c478_fixed.java
index 90fe130..d6716d2 100644
--- a/tmp/6ba50b63-fc11-484c-af73-e67a0a48e6a2_buggy.java
+++ b/tmp/b30f71bb-d4ea-4f7e-8faa-b07e26a3c478_fixed.java
@@ -1,61 +1,93 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
-     * The country code must be uppercase.
+     * The country code must be uppercase. (If present)
      * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
+     * The length must be correct for the format.</p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        // Initial check for minimum length and valid language code
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Case 1: Language only (e.g., "en")
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // Case 2: Language + Country/Variant (e.g., "en_GB", "fr__POSIX", "en_GB_xxx")
+        // Must have an underscore separator and be at least length 5 (ll_CC or ll__v)
+        if (len < 5) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         char ch3 = str.charAt(3);
+
+        // Case 2a: Language + Variant (e.g., "fr__POSIX") - Country is empty
+        if (ch3 == '_') {
+             // Format ll__variant, requires length >= 5 (ll + __ + non-empty variant)
+             // Already checked len >= 5, check if variant part exists
+            if (len < 5) { // This check is technically redundant due to the earlier len < 5 check
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        }
+
+        // Case 2b: Language + Country (e.g., "en_GB", "en_GB_xxx")
         char ch4 = str.charAt(4);
+        // Validate country code: 2 uppercase letters
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Case 2b-i: Language + Country only (e.g., "en_GB")
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+        }
+
+        // Case 2b-ii: Language + Country + Variant (e.g., "en_GB_xxx")
+        // Must have a second underscore separator and be at least length 7 (ll_CC_v)
+        if (len < 7) {
+            // Handles cases like "en_GBx" or "en_GB_" which are invalid
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Ensure there's something after the _CC_
+        // The substring(6) correctly extracts the variant.
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
-        }
-    }
