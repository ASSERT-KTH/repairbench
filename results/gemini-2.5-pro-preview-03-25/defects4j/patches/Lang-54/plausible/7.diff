diff --git a/tmp/858af9f7-5eb5-4991-92fc-f607e24c1ae7_buggy.java b/tmp/895af03e-5efa-4b98-b21a-7c3e40c76357_fixed.java
index 90fe130..b411491 100644
--- a/tmp/858af9f7-5eb5-4991-92fc-f607e24c1ae7_buggy.java
+++ b/tmp/895af03e-5efa-4b98-b21a-7c3e40c76357_fixed.java
@@ -1,61 +1,101 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en__POSIX")  = new Locale("en", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
+        // Locale string formats: ll, ll_CC, ll__variant, ll_CC_variant
+        // Basic length validation
+        if (len < 2) {
+             throw new IllegalArgumentException("Invalid locale format: " + str + " - Minimum length is 2");
         }
+
+        // Validate language code (first 2 chars)
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
+            throw new IllegalArgumentException("Invalid locale format: " + str + " - Language code must be two lowercase letters");
         }
+
         if (len == 2) {
+            // Case: "ll"
             return new Locale(str, "");
-        } else {
+        }
+
+        // Requires underscore separator beyond language code
+        // Valid lengths are 5 (ll_CC or ll__V) or >= 7 (ll_CC_V...)
+        if (len < 5) {
+            // String is length 3 or 4, like "en_", "en_G"
+            // These are invalid as country code needs 2 chars and variant needs preceding __ or _CC_
+            throw new IllegalArgumentException("Invalid locale format: " + str + " - Length must be 2 or >= 5");
+        }
+
+        // Check for first underscore separator
         if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            throw new IllegalArgumentException("Invalid locale format: " + str + " - Expected underscore separating language/country or language/variant");
         }
-            char ch3 = str.charAt(3);
+
+        char ch3 = str.charAt(3); // Potentially start of country code OR second underscore
+
+        if (ch3 == '_') {
+            // Case: "ll__variant" (e.g., "fr__POSIX")
+            // Minimum length is ll__V -> 5. This is already guaranteed by the len < 5 check above.
+            // Variant part starts at index 4. Length must be >= 5.
+            if (len < 5) { // Defensive check, already covered by len >= 5 prerequisite
+                 throw new IllegalArgumentException("Invalid locale format: " + str + " - Variant must follow __");
+            }
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        } else {
+            // Case: "ll_CC..." (e.g., "en_GB", "en_GB_xxx")
+            // Validate country code (chars at index 3 and 4)
+            // Need length 5 for country code
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+                 throw new IllegalArgumentException("Invalid locale format: " + str + " - Country code must be two uppercase letters");
             }
+
             if (len == 5) {
+                // Case: "ll_CC"
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             } else {
+                // Case: "ll_CC_variant"
+                // Check for second underscore separator
                 if (str.charAt(5) != '_') {
-                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                    throw new IllegalArgumentException("Invalid locale format: " + str + " - Expected underscore separating country/variant");
+                }
+                // Check that variant part exists and is not empty (minimum length ll_CC_V -> 7)
+                if (len < 7) {
+                    // This case ensures string is not just "ll_CC_"
+                    throw new IllegalArgumentException("Invalid locale format: " + str + " - Variant must not be empty");
                 }
                 return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
             }
         }
     }
\ No newline at end of file
