diff --git a/tmp/fe476442-fc64-4246-9ab3-93d040dcc596_buggy.java b/tmp/8caf50cf-4e92-4f46-ae55-5b0d05ee4348_fixed.java
index 90fe130..7b1774e 100644
--- a/tmp/fe476442-fc64-4246-9ab3-93d040dcc596_buggy.java
+++ b/tmp/8caf50cf-4e92-4f46-ae55-5b0d05ee4348_fixed.java
@@ -1,61 +1,117 @@
+import java.util.Locale;
+
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        // 1. Basic length check (must be at least 2 for language)
+        // Also validates language code early
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        
+        // 2. Handle language-only case (length 2)
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // 3. Must have underscore separator after language part
         if (str.charAt(2) != '_') {
              throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // 4. Handle cases with country and/or variant
+        int firstUnderscoreIndex = 2;
+        // Index of the character after the first underscore
+        int CCorVariantIndex = firstUnderscoreIndex + 1; 
+        
+        // Find the next underscore, which separates country/variant or indicates empty country
+        int secondUnderscoreIndex = str.indexOf('_', CCorVariantIndex);
+
+        String language = str.substring(0, firstUnderscoreIndex);
+        String country = "";
+        String variant = "";
+
+        if (secondUnderscoreIndex == -1) {
+            // No second underscore found - implies format ll_CC
+            // String must be exactly 5 chars long (ll_CC)
+            if (len != 5) {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Validate country code (must be uppercase)
             char ch3 = str.charAt(3);
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            country = str.substring(3, 5);
+            // variant remains ""
         } else {
-                if (str.charAt(5) != '_') {
+            // Second underscore found
+            // Case A: ll__variant (double underscore)
+            if (secondUnderscoreIndex == CCorVariantIndex) { 
+                 // e.g. "fr__POSIX", second underscore is at index 3 (CCorVariantIndex)
+                 // Country code is empty. Check if variant part exists.
+                if (len <= CCorVariantIndex + 1) { // check length > 4 ("ll__" + at least one char)
                      throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                 // country remains ""
+                variant = str.substring(CCorVariantIndex + 1); // Variant starts after __
+            } 
+            // Case B: ll_CC_variant
+            else if (secondUnderscoreIndex == CCorVariantIndex + 2 && len >= CCorVariantIndex + 3) { 
+                // e.g. "en_GB_xxx", second underscore is at index 5 (CCorVariantIndex + 2)
+                // Validate country code (must be uppercase)
+                char ch3 = str.charAt(3);
+                char ch4 = str.charAt(4);
+                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+                     throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                country = str.substring(3, 5);
+                variant = str.substring(secondUnderscoreIndex + 1); // Variant starts after _CC_
+                 // Check if variant part is non-empty (redundant due to len >= CCorVariantIndex + 3)
+                // if (variant.length() == 0) {
+                //     throw new IllegalArgumentException("Invalid locale format: " + str);
+                // }
+            } 
+            // Case C: Invalid format (e.g. "ll_C_vv", "ll_CCC_vv")
+            else {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
         }
+        
+        return new Locale(language, country, variant);
     }
\ No newline at end of file
