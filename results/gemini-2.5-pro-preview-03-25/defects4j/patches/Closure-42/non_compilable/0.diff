diff --git a/tmp/4e8fa172-2fbf-4e29-a038-1faa2f288e43_buggy.java b/tmp/ee3c0703-6e39-4013-95a4-0300df561bcb_fixed.java
index 4d0be80..e3d5ae9 100644
--- a/tmp/4e8fa172-2fbf-4e29-a038-1faa2f288e43_buggy.java
+++ b/tmp/ee3c0703-6e39-4013-95a4-0300df561bcb_fixed.java
@@ -1,10 +1,19 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+        // Check if it's the unsupported "for each..in" loop
+        if (loopNode.isForEach()) {
+            // Report the specific error message required by the test
+            handleError(loopNode, "unsupported language extension: for each");
+            // The test parseError expects the parsing to fail due to this error.
+            // We still need to return a Node to keep the AST structure somewhat valid,
+            // as indicated by the original comment, although the error should halt compilation.
+        }
 
+        // Transform the loop as a standard for..in loop.
         // Return the bare minimum to put the AST in a valid state.
         return newNode(
             Token.FOR,
             transform(loopNode.getIterator()),
             transform(loopNode.getIteratedObject()),
             transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
