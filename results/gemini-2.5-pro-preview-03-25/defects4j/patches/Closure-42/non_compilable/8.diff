diff --git a/tmp/87c37547-a043-432b-84b7-1504d4c440ed_buggy.java b/tmp/99aed05b-076e-44de-a275-17b98e641485_fixed.java
index 4d0be80..1eea17f 100644
--- a/tmp/87c37547-a043-432b-84b7-1504d4c440ed_buggy.java
+++ b/tmp/99aed05b-076e-44de-a275-17b98e641485_fixed.java
@@ -1,10 +1,25 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+        // Check if it's a "for each...in" loop, which is unsupported.
+        if (loopNode.isForEach()) {
+            // Report the error using the specific diagnostic type for unsupported "for each".
+            // ParseError.FOR_EACH_UNSUPPORTED provides the message "unsupported language extension: for each".
+            reportError(loopNode, ParseError.FOR_EACH_UNSUPPORTED);
+            // Even though it's an error, we might still need to return a node
+            // to keep the AST somewhat valid for subsequent passes.
+        }
+
+        // Return the bare minimum node structure as in the original code,
+        // which creates a FOR node. While FOR_IN might be more semantically
+        // correct for a for-in loop in the compiler's IR, we retain the
+        // original structure to minimize changes beyond fixing the missing error report.
+        Node iterator = transform(loopNode.getIterator());
+        Node iteratedObject = transform(loopNode.getIteratedObject());
+        Node body = transformBlock(loopNode.getBody());
+
+        Node forNode = newNode(Token.FOR, iterator, iteratedObject, body);
+        // Make sure source info is copied. Assume setSourceInfo exists and handles this.
+        setSourceInfo(forNode, loopNode);
 
-        // Return the bare minimum to put the AST in a valid state.
-      return newNode(
-          Token.FOR,
-          transform(loopNode.getIterator()),
-          transform(loopNode.getIteratedObject()),
-          transformBlock(loopNode.getBody()));
+        return forNode;
     }
\ No newline at end of file
