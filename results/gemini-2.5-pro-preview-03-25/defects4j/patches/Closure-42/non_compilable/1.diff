diff --git a/tmp/1e186140-b40c-450c-8940-44dfdb956a64_buggy.java b/tmp/2487ce64-f8a4-4355-a1b7-d793f1d77d1e_fixed.java
index 4d0be80..eea5105 100644
--- a/tmp/1e186140-b40c-450c-8940-44dfdb956a64_buggy.java
+++ b/tmp/2487ce64-f8a4-4355-a1b7-d793f1d77d1e_fixed.java
@@ -1,10 +1,22 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+      // Check if it's the unsupported "for each" variant.
+      // Rhino supports this as a non-standard extension, but the compiler does not.
+      if (loopNode.isForEach()) {
+        // Report the specific error message required by the failing test.
+        // Use the generic PARSE_ERROR type and provide the exact string.
+        reportError(loopNode, RhinoErrorReporter.PARSE_ERROR,
+            "unsupported language extension: for each");
+      }
 
-        // Return the bare minimum to put the AST in a valid state.
+      // Original transformation logic:
+      // Return the bare minimum to put the AST in a valid state,
+      // representing it as a standard FOR node (for..in).
+      // Even if an error was reported for "for each", we return a
+      // structurally valid node. The error manager will ultimately halt compilation.
       return newNode(
           Token.FOR,
           transform(loopNode.getIterator()),
           transform(loopNode.getIteratedObject()),
           transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
