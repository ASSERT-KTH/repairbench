diff --git a/tmp/2e107536-cf4a-4d1f-bd8f-03881f047e30_buggy.java b/tmp/703c96d0-d48c-4b27-8420-b4dfa711fb8a_fixed.java
index 4d0be80..4c2172c 100644
--- a/tmp/2e107536-cf4a-4d1f-bd8f-03881f047e30_buggy.java
+++ b/tmp/703c96d0-d48c-4b27-8420-b4dfa711fb8a_fixed.java
@@ -1,10 +1,19 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+      // Check if it's the unsupported "for each" construct.
+      if (loopNode.isForEach()) {
+        reportError("unsupported language extension: for each", loopNode);
+        // Even after reporting the error, proceed to create a node
+        // to keep the AST somewhat intact. Using FOR_IN as it's the
+        // closest structure type.
+      }
 
-        // Return the bare minimum to put the AST in a valid state.
+      // Create a FOR_IN node (suitable for standard for...in loops).
+      // For the unsupported "for each", we report the error above but still
+      // generate a FOR_IN node for basic AST structure.
       return newNode(
-          Token.FOR,
+          Token.FOR_IN,
           transform(loopNode.getIterator()),
           transform(loopNode.getIteratedObject()),
           transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
