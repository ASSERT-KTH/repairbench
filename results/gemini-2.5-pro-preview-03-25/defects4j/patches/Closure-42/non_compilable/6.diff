diff --git a/tmp/d71efd63-59e7-4c0f-8905-ef314c34133a_buggy.java b/tmp/e9d341bd-1705-4cb1-83ff-2e681f4682cb_fixed.java
index 4d0be80..5971f17 100644
--- a/tmp/d71efd63-59e7-4c0f-8905-ef314c34133a_buggy.java
+++ b/tmp/e9d341bd-1705-4cb1-83ff-2e681f4682cb_fixed.java
@@ -1,10 +1,32 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+      // Check if it's the non-standard "for each...in" loop
+      if (loopNode.isForEach()) {
+        // Report an error, as "for each" is not supported.
+        reportError(FOR_EACH_NOT_SUPPORTED, loopNode);
+        // Return an empty node to signify that this construct is invalid/unsupported
+        // and cannot be meaningfully transformed.
+        return newNode(Token.EMPTY);
+      }
 
-        // Return the bare minimum to put the AST in a valid state.
+      // It's a standard "for...in" loop.
+      // Return the transformed node. The original code used Token.FOR,
+      // which might be simplified or part of a specific transformation strategy.
+      // We keep Token.FOR to match the original behavior for standard for-in loops.
       return newNode(
-          Token.FOR,
+          Token.FOR, // Keep Token.FOR as in the original code for standard for-in
           transform(loopNode.getIterator()),
           transform(loopNode.getIteratedObject()),
           transformBlock(loopNode.getBody()));
     }
+
+    // Assume FOR_EACH_NOT_SUPPORTED is a DiagnosticType defined elsewhere like:
+    // static final DiagnosticType FOR_EACH_NOT_SUPPORTED =
+    //     DiagnosticType.error("JSC_FOR_EACH_NOT_SUPPORTED",
+    //         "unsupported language extension: for each");
+
+    // Assume reportError is a helper method available in this class (IRFactory)
+    // that uses the compiler's error reporter:
+    // private void reportError(DiagnosticType type, ParseTree node) {
+    //   this.errorReporter.report(node.location.start, type);
+    // }
\ No newline at end of file
