diff --git a/tmp/6b7e8030-7e4d-4250-b08c-6944a039be49_buggy.java b/tmp/eeeeab93-7f03-4abb-8c85-2a138fd3d1d2_fixed.java
index 4d0be80..0e809f5 100644
--- a/tmp/6b7e8030-7e4d-4250-b08c-6944a039be49_buggy.java
+++ b/tmp/eeeeab93-7f03-4abb-8c85-2a138fd3d1d2_fixed.java
@@ -1,10 +1,54 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+        // Check if it's the unsupported 'for each..in' construct.
+        if (loopNode.isForEach()) {
+            // Report an error for the unsupported language extension using the message
+            // expected by the test. Rhino parser accepts this syntax, but the
+            // compiler doesn't support it.
+            reportError(RhinoErrorReporter.PARSE_ERROR, loopNode, "unsupported language extension: for each");
+        }
 
-        // Return the bare minimum to put the AST in a valid state.
+        // Return the bare minimum FOR-IN structure to put the AST in a valid state,
+        // even if an error was reported. The error reporting mechanism should
+        // ensure the compilation fails appropriately.
+        // The IR represents both for-in and for-each-in using the same FOR node structure
+        // initially, but the unsupported nature is flagged by the error above.
         return newNode(
-          Token.FOR,
+            Token.FOR, // Use FOR, as there's no distinct FOR_EACH token in the IR.
             transform(loopNode.getIterator()),
             transform(loopNode.getIteratedObject()),
             transformBlock(loopNode.getBody()));
     }
+
+    /**
+     * Reports a miscellaneous error message.
+     * This is required to adapt the fix to the expected surrounding code structure,
+     * assuming such a helper exists or can be added.
+     * The actual implementation might vary.
+     */
+    private void reportError(DiagnosticType type, AstNode node, String message) {
+      // This helper mimics how errors are reported in IRFactory,
+      // assuming 'compiler' and 'sourceName' are available instance fields.
+      compiler.report(
+          JSError.make(
+              sourceName, node.getLineno(), node.getCharno(), type, message));
+    }
+
+    // NOTE: The helper method `reportError` and the necessary fields (compiler, sourceName)
+    // are assumed to exist in the actual class (`IRFactory`).
+    // The following are placeholders for context:
+    // Assume these methods and fields exist within the class (e.g., IRFactory).
+    abstract Node transform(com.google.javascript.rhino.head.ast.AstNode node);
+    abstract Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node);
+    abstract Node newNode(Token token, Node c1, Node c2, Node c3);
+    private com.google.javascript.jscomp.AbstractCompiler compiler;
+    private String sourceName;
+    // Placeholder for the DiagnosticType constant.
+    static class RhinoErrorReporter {
+        static final DiagnosticType PARSE_ERROR =
+            DiagnosticType.error("JSC_PARSE_ERROR", "{0}");
+    }
+    // Placeholder for JSError, DiagnosticType, CheckLevel etc.
+    static class JSError { public static JSError make(String s, int l, int c, DiagnosticType t, String m) { return null; } }
+    static class DiagnosticType { public static DiagnosticType error(String s, String s2) { return null; } }
+    enum CheckLevel { ERROR }
\ No newline at end of file
