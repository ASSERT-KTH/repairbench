diff --git a/tmp/f926ed37-2e91-4337-a8eb-e35ef716ba79_buggy.java b/tmp/808377f3-3a26-428b-af95-4f322e559b80_fixed.java
index 4d0be80..8a8ca7d 100644
--- a/tmp/f926ed37-2e91-4337-a8eb-e35ef716ba79_buggy.java
+++ b/tmp/808377f3-3a26-428b-af95-4f322e559b80_fixed.java
@@ -1,10 +1,22 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+      // Check if it's the unsupported "for each" loop (a non-standard JS extension)
+      if (loopNode.isForEach()) {
+        // Report an error indicating that this language feature is not supported.
+        // The error message matches the one expected by the failing test.
+        reportError(ParseErrors.LEGACY_FOR_EACH, loopNode);
+        // Even after reporting an error, we might need to return a valid node structure
+        // to avoid cascading failures in subsequent processing, although the
+        // compilation will ultimately fail due to the reported error.
+        // The original code returned a transformed node, so we keep that behavior.
+      }
 
-        // Return the bare minimum to put the AST in a valid state.
+      // Transform the ForInLoop into a standard FOR node for the compiler's IR.
+      // This handles both regular for..in loops and, as a fallback after error reporting,
+      // the unsupported for each..in loops.
       return newNode(
           Token.FOR,
           transform(loopNode.getIterator()),
           transform(loopNode.getIteratedObject()),
           transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
