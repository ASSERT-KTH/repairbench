diff --git a/tmp/72156589-f813-4615-979f-74c06c535615_buggy.java b/tmp/d0e6ad06-f54f-4611-829c-4874dea40062_fixed.java
index 233a867..84c9692 100644
--- a/tmp/72156589-f813-4615-979f-74c06c535615_buggy.java
+++ b/tmp/d0e6ad06-f54f-4611-829c-4874dea40062_fixed.java
@@ -1,73 +1,92 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
+   * 2) If the function has side effects, none of the arguments can be expressions
+   * that might be affected by the function's side effects. This is a conservative
+   * check, assuming that any non-literal argument might be affected.
+   * For instance, this will not be inlined:
+   * <pre>
+   *     function foo(a){ x=1; return a; }
+   *     y = foo(x); // 'x' might be affected if x=1 runs before 'a' is used.
+   * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
+    // Check for side effects in the function body once.
+    boolean functionHasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);
 
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+      // For each named parameter check related conditions.
       if (fnParam != null) {
         if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+          // Check 1: Argument potentially affects mutable state AND the
+          // parameter is used multiple times.
+          // Example: foo(i++) where foo(a){ return a+a; }
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+
+          // Check 2: Function body has side effects AND argument is not a literal.
+          // This prevents potential issues where the side effect changes state
+          // used by the argument expression before the parameter is referenced.
+          // Example: foo(x) where foo(a){ modify(); return a; }
+          if (functionHasSideEffects && !NodeUtil.isLiteralValue(cArg)) {
+             return CanInlineResult.NO;
+          }
         }
 
-        // Move to the next name.
+        // Move to the next parameter.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // isn't a named parameter to match. This handles remaining args
+      // and ensures order of argument evaluation side effects.
+      // Example: foo(i++, j++)
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
