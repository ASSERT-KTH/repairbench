diff --git a/tmp/e182acd3-4626-452a-abbf-f380d876b038_buggy.java b/tmp/7eedbdd1-e220-452a-b2f1-e4edeb1564bf_fixed.java
index 139579d..b42d572 100644
--- a/tmp/e182acd3-4626-452a-abbf-f380d876b038_buggy.java
+++ b/tmp/7eedbdd1-e220-452a-b2f1-e4edeb1564bf_fixed.java
@@ -1,43 +1,69 @@
     // performance sensitive
     public boolean hasClass(String className) {
+        // Defensive checks: className should not be null or empty.
+        // An empty className (e.g. hasClass("")) is not a valid match according to specs.
+        if (className == null || className.isEmpty()) {
+             return false;
+        }
+        // Trim the search class name? No, spec implies class names don't have leading/trailing whitespace.
+        // If the input className had spaces, it wouldn't match anyway.
+
         final String classAttr = attributes.get("class");
+
+        // Attribute must exist and be at least as long as the class name.
+        // Also handles empty class attribute early.
+        if (classAttr == null || classAttr.isEmpty()) {
+            return false; // No class attribute or empty attribute value.
+        }
+
         final int len = classAttr.length();
         final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+        // Quick check: if attribute is shorter than className, it can't be present.
+        if (len < wantLen) {
             return false;
         }
 
-        // if both lengths are equal, only need compare the className with the attribute
+        // Optimization: if attribute length is exactly className length, compare the whole string case-insensitively.
+        // This handles attributes with only one class name.
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
-        int start = 0;
+        // Scan for className within the attribute string, respecting whitespace boundaries.
+        // This avoids allocations compared to splitting the string (e.g., classAttr.split("\\s+")).
+        boolean inClass = false; // Tracks if the current position is inside a potential class name segment.
+        int start = 0; // Tracks the start index of the current potential class name segment.
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
+                    // Whitespace encountered signifies the end of a potential class name segment.
+                    // Check if the identified segment matches the className (length and content, case-insensitive).
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
-                        return true;
+                        return true; // Found a match.
                     }
+                    // End of the segment; reset state to look for the next potential class name.
                     inClass = false;
                 }
-            } else {
+                // Continue scanning past potentially multiple whitespace characters.
+            } else { // Character is not whitespace.
                 if (!inClass) {
-                    // we're in a class name : keep the start of the substring
+                    // Start of a new potential class name segment.
                     inClass = true;
-                    start = i;
+                    start = i; // Record the starting position.
                 }
+                // Continue scanning within the potential class name segment.
             }
         }
 
-        // check the last entry
+        // After the loop, check if the string ended while inside a potential class name segment.
+        // This handles cases where the matching class name is the last one in the attribute string
+        // (i.e., not followed by whitespace).
         if (inClass && len - start == wantLen) {
+            // Compare the final segment case-insensitively.
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
+        // No matching class name segment was found after checking all segments.
         return false;
     }
\ No newline at end of file
