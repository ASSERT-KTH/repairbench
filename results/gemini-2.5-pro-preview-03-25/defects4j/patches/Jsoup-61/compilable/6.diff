diff --git a/tmp/1dd07485-884c-43dd-98fa-be795d79b1e0_buggy.java b/tmp/04d136c1-44fc-4bbd-a40a-8f3ec3183f41_fixed.java
index 139579d..5a539a3 100644
--- a/tmp/1dd07485-884c-43dd-98fa-be795d79b1e0_buggy.java
+++ b/tmp/04d136c1-44fc-4bbd-a40a-8f3ec3183f41_fixed.java
@@ -1,43 +1,68 @@
     // performance sensitive
     public boolean hasClass(String className) {
+        // Null check for className is implicit via className.length() below,
+        // but explicit check is cleaner. Return false if className is null or empty.
+        if (className == null || className.isEmpty()) {
+            return false;
+        }
+
         final String classAttr = attributes.get("class");
+        // Return false if class attribute is null, empty, or shorter than className
+        if (classAttr == null || classAttr.isEmpty()) {
+            return false;
+        }
+
         final int len = classAttr.length();
         final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+        if (len < wantLen) {
             return false;
         }
 
-        // if both lengths are equal, only need compare the className with the attribute
+        // Quick check: If lengths match, we can do a simple equalsIgnoreCase
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
+        // If className contains whitespace, it's an invalid class name, return false
+        // (This check wasn't strictly necessary based on test cases but improves robustness)
+        for (int j = 0; j < wantLen; j++) {
+            if (Character.isWhitespace(className.charAt(j))) {
+                return false;
+            }
+        }
+
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
-        int start = 0;
+        boolean inClass = false; // Tracks if the current position is inside a potential class name segment.
+        int start = 0; // Start index of the current potential class name segment.
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
+                    // Whitespace marks the end of a class name segment. Check if it matches.
+                    // Compare length: (current index i) - (start index) == length of className
+                    // Compare content: use regionMatches with ignoreCase = true
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
-                        return true;
+                        return true; // Found a match
                     }
-                    inClass = false;
+                    inClass = false; // Reset flag, we are no longer in a class name segment.
                 }
+                // Continue scanning past whitespace...
             } else {
+                // Character is not whitespace.
                 if (!inClass) {
-                    // we're in a class name : keep the start of the substring
+                    // Start of a new potential class name segment.
                     inClass = true;
-                    start = i;
+                    start = i; // Record the start index.
                 }
+                // Continue scanning characters within the segment...
             }
         }
 
-        // check the last entry
+        // After the loop, check if the string ended while inside a class name segment.
+        // This handles cases where the desired class is the last one and not followed by whitespace.
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
-        return false;
+        return false; // No match found
     }
\ No newline at end of file
