diff --git a/tmp/2fcbaa9e-4b79-4f2d-847d-ad4ab8ea090d_buggy.java b/tmp/b94d6019-55be-47f8-a0fa-cafec2022838_fixed.java
index 139579d..0e3706c 100644
--- a/tmp/2fcbaa9e-4b79-4f2d-847d-ad4ab8ea090d_buggy.java
+++ b/tmp/b94d6019-55be-47f8-a0fa-cafec2022838_fixed.java
@@ -1,43 +1,51 @@
     // performance sensitive
     public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+        // Use getIgnoreCase to handle attribute names like CLASS, class, Class
+        final String classAttr = attributes.getIgnoreCase("class");
         final int len = classAttr.length();
         final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+        // Basic length checks: attribute empty, className empty, attribute too short
+        // Added wantLen == 0 check for robustness.
+        if (len == 0 || wantLen == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
+                    // regionMatches(true,...) ensures case-insensitive comparison
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
-                    inClass = false;
+                    inClass = false; // Reset for the next potential class
                 }
-            } else {
+                // else: whitespace signifies boundary or padding; continue
+            } else { // Character is not whitespace
                 if (!inClass) {
-                    // we're in a class name : keep the start of the substring
+                    // Starting a new potential class name token
                     inClass = true;
                     start = i;
                 }
+                // else: Already in a class name token, continue scanning
             }
         }
 
-        // check the last entry
+        // check the last token after the loop, in case the string doesn't end with whitespace
+        // This check is crucial for the last class name in the attribute
         if (inClass && len - start == wantLen) {
+            // regionMatches(true,...) ensures case-insensitive comparison
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
-        return false;
+        return false; // className not found in attribute string
     }
\ No newline at end of file
