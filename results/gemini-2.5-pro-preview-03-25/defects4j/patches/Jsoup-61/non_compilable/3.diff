diff --git a/tmp/e3fe6951-8d8a-441a-904e-cb26827bc41a_buggy.java b/tmp/c017a5d1-cdcb-447b-8c48-ed8f6cd739e7_fixed.java
index 139579d..899ccef 100644
--- a/tmp/e3fe6951-8d8a-441a-904e-cb26827bc41a_buggy.java
+++ b/tmp/c017a5d1-cdcb-447b-8c48-ed8f6cd739e7_fixed.java
@@ -1,43 +1,66 @@
+import org.jsoup.nodes.Attributes;
+import org.jsoup.nodes.Element; // Assuming this method belongs to Element or similar class with 'attributes' field
+
+// The following imports are assumed based on standard Jsoup usage, though not strictly needed for the method itself
+import org.jsoup.Jsoup;
+import org.jsoup.select.Elements;
+import org.junit.Test; // Hypothetical test imports
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+
+
+// Assume the method is part of a class that has an 'attributes' field of type Attributes
+// e.g., public class Element { ... Attributes attributes; ... }
+
+    /**
+     * Checks if this element has the specified class name, case-insensitive.
+     * This method is typically performance sensitive, so operates directly on the underlying class string,
+     * avoiding allocations and splits, wherever possible.
+     *
+     * @param className case-insensitive class name to check for
+     * @return true if this element has the class
+     */
     // performance sensitive
     public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+        // Fetches the class attribute value. Uses getIgnoreCase to handle situations where the attribute name case varies (e.g., "Class" or "CLASS").
+        final String classAttr = attributes.getIgnoreCase("class"); // Use getIgnoreCase for robustness against attribute key casing
         final int len = classAttr.length();
         final int wantLen = className.length();
 
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
\ No newline at end of file
