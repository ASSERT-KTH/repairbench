diff --git a/tmp/95743c74-134b-4f5d-ab76-64a445d5b4d7_buggy.java b/tmp/a19ebb4f-1d46-48b6-b63f-b78d98181391_fixed.java
index 139579d..44f7049 100644
--- a/tmp/95743c74-134b-4f5d-ab76-64a445d5b4d7_buggy.java
+++ b/tmp/a19ebb4f-1d46-48b6-b63f-b78d98181391_fixed.java
@@ -1,43 +1,48 @@
     // performance sensitive
     public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+        // Use getIgnoreCase to handle attribute names like 'Class' or 'CLASS'
+        final String classAttr = attributes.getIgnoreCase("class");
         final int len = classAttr.length();
         final int wantLen = className.length();
 
+        // Check if the attribute exists and its length is sufficient
+        // isEmpty() check is implicitly covered by len == 0
+        // getIgnoreCase returns "" if attribute not present, so no need for null check
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
+            // Compare the last potential class name found
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
\ No newline at end of file
