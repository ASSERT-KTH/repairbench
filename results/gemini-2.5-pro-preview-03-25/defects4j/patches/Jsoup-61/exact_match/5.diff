diff --git a/tmp/a3e7f9e5-2466-483a-9683-7f12f40f5eef_buggy.java b/tmp/f1ed94d0-4685-42d9-a682-8bc7bbf34353_fixed.java
index 139579d..1b2276e 100644
--- a/tmp/a3e7f9e5-2466-483a-9683-7f12f40f5eef_buggy.java
+++ b/tmp/f1ed94d0-4685-42d9-a682-8bc7bbf34353_fixed.java
@@ -1,43 +1,53 @@
     // performance sensitive
     public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+        // Use getIgnoreCase to fetch the attribute value. This ensures that the lookup
+        // works regardless of the original case of the 'class' attribute in the HTML
+        // (e.g., class, Class, CLASS), aligning with the case-insensitive nature
+        // of class selectors in CSS and the behavior expected by the failing tests.
+        // Although Jsoup typically normalizes attribute keys to lowercase, using
+        // getIgnoreCase provides robustness against potential issues in attribute retrieval
+        // that might have caused the case-sensitivity bug.
+        final String classAttr = attributes.getIgnoreCase("class"); 
         final int len = classAttr.length();
         final int wantLen = className.length();
 
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
+            // Use equalsIgnoreCase for case-insensitive comparison
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
+                    // The 'true' argument in regionMatches ensures case-insensitive comparison
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
+            // The 'true' argument in regionMatches ensures case-insensitive comparison
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
\ No newline at end of file
