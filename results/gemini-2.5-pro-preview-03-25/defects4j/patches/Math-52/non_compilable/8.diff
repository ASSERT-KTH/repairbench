diff --git a/tmp/5d6a2fb5-d9f1-4ad4-9d0d-4b2bbf7e5baa_buggy.java b/tmp/6dcf9706-051d-429c-acd5-ffd6ff9440c2_fixed.java
index 0e110fe..a37ddff 100644
--- a/tmp/5d6a2fb5-d9f1-4ad4-9d0d-4b2bbf7e5baa_buggy.java
+++ b/tmp/6dcf9706-051d-429c-acd5-ffd6ff9440c2_fixed.java
@@ -1,96 +1,210 @@
+import org.apache.commons.math.exception.util.LocalizedFormats;
+import org.apache.commons.math.exception.MathRuntimeException;
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
+
+// The class structure is assumed to be:
+// public class Rotation {
+//     private double q0;
+//     private double q1;
+//     private double q2;
+//     private double q3;
+//     ... other methods ...
+
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
+   * or if the vectors are incompatible for rotation.
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
       // norms computation
       double u1u1 = u1.getNormSq();
       double u2u2 = u2.getNormSq();
       double v1v1 = v1.getNormSq();
-  double v2v2 = v2.getNormSq();
+      double v2v2 = v2.getNormSq(); // Norm of original v2
       if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
           throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
       }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+      // Store original vectors for adjustment phase
+      Vector3D v1_original = v1;
+      Vector3D v2_original = v2;
 
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
+      // Scale v1 to match u1's norm -> v1'
+      v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1_original);
+      // Now v1.getNormSq() == u1u1
+
+      // Adjust v2 to v2' such that (u1|u2) = (v1'|v2') and |v2'|^2 = |u2|^2
+      // v2' = alpha * v1' + beta * v2_original
       double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
+      // Dot product uses scaled v1 (v1') and original v2 (v2_original)
+      double v1prime_dot_v2original = v1.dotProduct(v2_original);
       double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+      double coeffV = v1prime_dot_v2original / u1u1;
+
+      // num = |u2|^2 - (u1.u2)^2 / |u1|^2 = |u2|^2 * sin^2(angle_u) >= 0
+      double num = u2u2 - u1u2 * coeffU;
+      // den = |v2_original|^2 - (v1'.v2_original)^2 / |v1'|^2 = |v2_original|^2 * sin^2(angle_v') >= 0
+      // Note: v2v2 is |v2_original|^2
+      double den = v2v2 - v1prime_dot_v2original * coeffV;
+
+      // Check for collinearity using a relative tolerance.
+      final double U1U1_TIMES_U2U2 = u1u1 * u2u2;
+      // Tolerance for denominator uses |v1'|^2 * |v2_original|^2
+      final double V1PrimeSq_TIMES_V2OrigSq = u1u1 * v2v2;
+
+      final double SMALL_RELATIVE = 1.0e-15; // Relative tolerance for checking zero
+
+      // Clamp num and den based on theory and tolerance
+      // num should be >= 0
+      if (num < SMALL_RELATIVE * U1U1_TIMES_U2U2) { num = 0.0; }
+      // den should be >= 0
+      if (den < SMALL_RELATIVE * V1PrimeSq_TIMES_V2OrigSq) { den = 0.0; }
+
+      boolean uCollinear = (num == 0.0);
+      boolean vCollinear = (den == 0.0); // vCollinear means v1' and v2_original are collinear
+
+      double beta;
+      if (vCollinear) {
+          if (uCollinear) {
+              // Both pairs are collinear. Adjusted v2' = coeffU * v1'. beta = 0.
+              beta = 0.0;
+          } else {
+              // v1', v2_original are collinear, but u1, u2 are not.
+              // The adjustment formula requires v2' to be collinear with v1',
+              // which cannot match the non-zero angle between u1, u2. Impossible transformation.
+              throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.CLOSE_VECTORS); // Or a more specific error
+          }
+      } else { // v not collinear (den > 0)
+          if (uCollinear) {
+             // u1, u2 are collinear, v1', v2_original are not.
+             // Adjusted v2' must be coeffU * v1'. Requires beta = sqrt(num/den) = sqrt(0/den) = 0.
+             beta = 0.0;
+          } else {
+             // General case: num > 0, den > 0.
+             beta = FastMath.sqrt(num / den);
+          }
+      }
+
       double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+      // Compute the adjusted v2' using scaled v1' and original v2_original
+      v2 = new Vector3D(alpha, v1, beta, v2_original);
+      // Now v1 = v1' and v2 = v2'
+
+      // preliminary computation for rotation q = (q0, q1, q2, q3)
+      // Use adjusted vectors v1=v1', v2=v2' from here
+      Vector3D uRef = u1; // Default reference vector
+      Vector3D vRef = v1; // Default reference vector image (adjusted v1')
+      Vector3D uAlt = u2; // Alternative reference vector
+      Vector3D vAlt = v2; // Alternative reference vector image (adjusted v2')
 
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
       Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
+      Vector3D v2Su2 = v2.subtract(u2); // v2 is adjusted v2' here
       Vector3D k     = v1Su1.crossProduct(v2Su2);
       Vector3D u3    = u1.crossProduct(u2);
       double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
+
+      // Check if c is near zero using a tolerance
+      // Using an absolute tolerance check, might need refinement based on vector magnitudes
+      final double SMALL_ABS = 1.0e-12;
+
+      if (FastMath.abs(c) < SMALL_ABS) {
+          // Degenerate case 1: Try using (u1, u3) and (v1, v3)
+          Vector3D v3 = v1.crossProduct(v2); // Use adjusted v1', v2'
           Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
-
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
+          k = v1Su1.crossProduct(v3Su3); // New k
+          Vector3D u2Prime = u1.crossProduct(u3); // Vector orthogonal to u1 in u1,u3 plane
+          c = k.dotProduct(u2Prime); // New c
+
+          if (FastMath.abs(c) < SMALL_ABS) {
+              // Degenerate case 2: Try using (u2, u3) and (v2, v3)
+              k = v2Su2.crossProduct(v3Su3); // New k
+              Vector3D u1Prime = u2.crossProduct(u3); // Vector orthogonal to u2 in u2,u3 plane
+              c = k.dotProduct(u1Prime); // New c
+
+              if (FastMath.abs(c) < SMALL_ABS) {
+                  // All attempts failed, must be identity rotation
+                  this.q0 = 1.0; this.q1 = 0.0; this.q2 = 0.0; this.q3 = 0.0;
                   return;
               }
+              // Use u2, v2 for the q0 calculation reference frame
+              uRef = u2; vRef = v2;
+              uAlt = u1; vAlt = v1;
+          }
+      }
 
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
-
+      // Compute the vectorial part using the final non-zero k and c
+      // Clamp c before sqrt, just in case of numerical noise making it slightly negative.
+      if (c < 0.0) {
+           c = 0.0; // Force non-negative. Should ideally not happen.
       }
 
+      // If c ended up being zero after all checks, assume identity.
+      if (c == 0.0) {
+          this.q0 = 1.0; this.q1 = 0.0; this.q2 = 0.0; this.q3 = 0.0;
+          return;
       }
 
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
+      // c > 0 guaranteed (or returned identity)
+      double s = FastMath.sqrt(c);
+      double inv = 0.5 / s;
+      // Compute vector part q = (q1, q2, q3)
+      this.q1 = inv * k.getX();
+      this.q2 = inv * k.getY();
+      this.q3 = inv * k.getZ();
 
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+      // Compute the scalar part q0 using the robust method
+      Vector3D qVec = new Vector3D(this.q1, this.q2, this.q3);
+      Vector3D k1 = uRef.crossProduct(qVec);
+      double normSqK1 = k1.getNormSq();
+      double uRefNormSq = uRef.getNormSq(); // Must be > 0
+      double qVecNormSq = qVec.getNormSq();
+
+      // Threshold for parallelism check (relative to norms squared)
+      double par_threshold = SMALL_RELATIVE * SMALL_RELATIVE * uRefNormSq * qVecNormSq;
+
+      if (normSqK1 < par_threshold) { // uRef is parallel to axis qVec
+          Vector3D k2 = uAlt.crossProduct(qVec);
+          double normSqK2 = k2.getNormSq();
+          double uAltNormSq = uAlt.getNormSq(); // Must be > 0
+          double par_threshold2 = SMALL_RELATIVE * SMALL_RELATIVE * uAltNormSq * qVecNormSq;
+
+          if (normSqK2 < par_threshold2) { // uAlt also parallel
+              // Both u1, u2 parallel to axis => u1, u2 collinear.
+              // Rotation must be around this axis.
+              // Calculate angle from vRef = R uRef. Since |vRef|=|uRef|, cos(angle) = dot / normSq
+              double uVRefDot = uRef.dotProduct(vRef);
+              // Handle case where uRefNormSq is zero (should not happen due to initial check)
+              double cosAngle = (uRefNormSq == 0) ? 1.0 : uVRefDot / uRefNormSq;
+              cosAngle = FastMath.max(-1.0, FastMath.min(1.0, cosAngle));
+              // q0 = cos(angle/2). Choose positive root (angle <= 180).
+              this.q0 = FastMath.sqrt(0.5 * (1.0 + cosAngle));
+          } else {
+              // Use uAlt, vAlt pair for q0 computation
+              // q0 = (vAlt . k2) / (2 * |k2|^2)
+              this.q0 = vAlt.dotProduct(k2) / (2.0 * normSqK2);
+          }
+      } else {
+          // Use uRef, vRef pair for q0 computation
+          // q0 = (vRef . k1) / (2 * |k1|^2)
+          this.q0 = vRef.dotProduct(k1) / (2.0 * normSqK1);
+      }
 
+      // The quaternion (q0, q1, q2, q3) should be normalized by construction if formulas are exact.
+      // No explicit renormalization is performed here.
   }
\ No newline at end of file
