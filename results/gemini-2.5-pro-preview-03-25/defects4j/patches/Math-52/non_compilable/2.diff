diff --git a/tmp/cb384a7e-3e6a-48f9-81af-02c60e413791_buggy.java b/tmp/97a62339-babd-44c2-b7d6-76c72910c907_fixed.java
index 0e110fe..2a12e86 100644
--- a/tmp/cb384a7e-3e6a-48f9-81af-02c60e413791_buggy.java
+++ b/tmp/97a62339-babd-44c2-b7d6-76c72910c907_fixed.java
@@ -1,96 +1,164 @@
+import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.exception.util.LocalizedFormats;
+import org.apache.commons.math.MathRuntimeException;
+
+// Assuming the context of the Rotation class with fields q0, q1, q2, q3
+// and appropriate definitions for MathRuntimeException and LocalizedFormats.
+
 /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
+   * @exception IllegalArgumentException if the norm of one of the vectors is zero,
+   * or if rotation is not vectorial (e.g. mapping non-collinear to collinear)
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
+    // fields of the Rotation class
+    double q0, q1, q2, q3;
+
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
       throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
     // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+    Vector3D v1_scaled = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
 
     // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
     double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
+    // Use v1_scaled for dot product, and original v2 for normsq and linear combination
+    double v1v2   = v1_scaled.dotProduct(v2);
     double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+    double coeffV = v1v2 / u1u1; // Denominator is u1u1 = |v1_scaled|^2
+    // Muv_num / u1u1 = |u1 x u2|^2 / u1u1^2
+    double Muv_num = u2u2 - u1u2 * coeffU;
+    // Muv_den / u1u1 = |v1_scaled x v2_orig|^2 / u1u1^2
+    double Muv_den = v2v2 - v1v2 * coeffV;
+
+    double beta;
+    // Check if v1_scaled and v2 are collinear (denominator is zero)
+    // We use a small tolerance since norms are involved.
+    final double V1V2_EPS = 1.0e-15; // Tolerance for collinearity check
+    if (FastMath.abs(Muv_den) < V1V2_EPS * v2v2 * u1u1) { // Relative tolerance check
+        // Check if u1 and u2 are also collinear
+        if (FastMath.abs(Muv_num) < V1V2_EPS * u2u2 * u1u1) { // Relative tolerance check
+             // Both pairs collinear. The angle constraint is trivially satisfied.
+             // Beta is indeterminate; v2 adjustment is not uniquely defined.
+             // Set beta = 0, implying v2_adjusted = alpha * v1_scaled.
+             // This effectively ignores v2 and defines rotation based on u1 -> v1_scaled.
+             beta = 0.0;
+        } else { // Denominator zero, numerator non-zero (v1,v2 collinear, u1,u2 not)
+             // Cannot map non-collinear pair to a collinear one preserving angles/norms.
+             // Note: LocalizedFormats.ROTATION_NOT_VECTORIAL might need to be defined
+             throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ROTATION_NOT_VECTORIAL);
+        }
+    } else { // Denominator is non-zero
+        // beta^2 = Muv_num / Muv_den
+        double arg = Muv_num / Muv_den;
+        // Clamp argument before sqrt for numerical stability (can be slightly < 0)
+        beta = FastMath.sqrt(FastMath.max(0.0, arg));
+    }
+
     double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+    Vector3D v2_adjusted = new Vector3D(alpha, v1_scaled, beta, v2); // Uses original v2 in combination
 
     // preliminary computation
     Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
+    Vector3D vRef  = v1_scaled; // Use scaled v1
+    Vector3D v1Su1 = v1_scaled.subtract(u1);
+    Vector3D v2Su2 = v2_adjusted.subtract(u2); // Use adjusted v2
     Vector3D k     = v1Su1.crossProduct(v2Su2);
     Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
+    double c_dot   = k.dotProduct(u3); // Store dot product with sign
+
+    // Check for degenerate cases using a tolerance
+    final double C_DOT_EPS = 1e-15;
+    if (FastMath.abs(c_dot) < C_DOT_EPS) {
+      // Degenerate cases
+      Vector3D v3 = Vector3D.crossProduct(v1_scaled, v2_adjusted);
       Vector3D v3Su3 = v3.subtract(u3);
       k = v1Su1.crossProduct(v3Su3);
       Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
+      c_dot = k.dotProduct(u2Prime); // Update c_dot
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+      if (FastMath.abs(c_dot) < C_DOT_EPS) {
+        k = v2Su2.crossProduct(v3Su3);
+        Vector3D u1Prime = u2.crossProduct(u3);
+        c_dot = k.dotProduct(u1Prime); // Update c_dot
 
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
+        if (FastMath.abs(c_dot) < C_DOT_EPS) {
+          // All attempts failed, implies identity rotation
+          this.q0 = 1.0; this.q1 = 0.0; this.q2 = 0.0; this.q3 = 0.0;
           return;
         }
-
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
-
+        // Use u2/v2 for reference if third case succeeded (ref vectors not used here, kept for consistency with original)
+        // uRef = u2; // Not needed for the chosen q0 calculation method
+        // vRef = v2_adjusted;
       }
-
     }
 
     // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
+    double kNormSq = k.getNormSq();
+    double c_abs = FastMath.abs(c_dot);
+
+    // Check for numerical issues where c_dot or k is near zero after checks
+    if (c_abs == 0.0 || kNormSq == 0.0) {
+        // Should be caught by degenerate checks, fallback to identity for safety
+         this.q0 = 1.0; this.q1 = 0.0; this.q2 = 0.0; this.q3 = 0.0; return;
+    }
+
+    double c_abs_sqrt = FastMath.sqrt(c_abs);
+    double inv = 0.5 / c_abs_sqrt; // 1.0 / (2 * sqrt(|c_dot|))
     q1 = inv * k.getX();
     q2 = inv * k.getY();
     q3 = inv * k.getZ();
 
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    // compute the scalar part using normalization and sign of c_dot
+    double q1q1 = q1 * q1;
+    double q2q2 = q2 * q2;
+    double q3q3 = q3 * q3;
+    // Ensure q0^2 is non-negative due to potential numerical errors in q1,q2,q3
+    double q0q0 = FastMath.max(0.0, 1.0 - q1q1 - q2q2 - q3q3);
+    q0 = FastMath.sqrt(q0q0);
 
+    // Apply the sign correction based on the sign of c_dot
+    if (c_dot < 0.0) {
+        q0 = -q0;
+    }
+
+    // Assign computed values to the fields
+    this.q0 = q0;
+    this.q1 = q1;
+    this.q2 = q2;
+    this.q3 = q3;
+
+    // Optional: Explicitly re-normalize for perfect unit norm, though often not strictly needed
+    // double norm = FastMath.sqrt(this.q0 * this.q0 + this.q1 * this.q1 + this.q2 * this.q2 + this.q3 * this.q3);
+    // if (norm == 0) { // Should not happen with valid inputs and checks
+    //     this.q0 = 1.0; this.q1 = 0.0; this.q2 = 0.0; this.q3 = 0.0;
+    // } else {
+    //     double normInv = 1.0 / norm;
+    //     this.q0 *= normInv;
+    //     this.q1 *= normInv;
+    //     this.q2 *= normInv;
+    //     this.q3 *= normInv;
+    // }
   }
\ No newline at end of file
