diff --git a/tmp/42a2b694-e332-43bb-bf14-5eff4cfe222d_buggy.java b/tmp/bd2cc704-e0e6-42f3-9841-3b1b1119dc19_fixed.java
index 0e110fe..97bba2d 100644
--- a/tmp/42a2b694-e332-43bb-bf14-5eff4cfe222d_buggy.java
+++ b/tmp/bd2cc704-e0e6-42f3-9841-3b1b1119dc19_fixed.java
@@ -1,96 +1,257 @@
+import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.exception.MathRuntimeException;
+import org.apache.commons.math.exception.util.LocalizedFormats;
+
+// NOTE: Assuming the existence of Vector3D and supporting classes/methods
+// like getNormSq, dotProduct, crossProduct, subtract, orthogonal, getX, getY, getZ.
+// Assuming Rotation class has fields q0, q1, q2, q3 to be set by the constructor.
+
+// --- Start of the fixed function ---
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
+   * @exception IllegalArgumentException if the norm of one of the vectors is zero or
+   * if the vectors are incompatible (e.g. collinearity mismatch).
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
+    // Constants for threshold checks to avoid numerical instability
+    final double NORM_EPSILON = 1e-15; // Threshold for squared norm checks (avoid division by zero)
+    final double C_EPSILON = 1e-15;    // Threshold for checking if coefficient c is zero
+    final double K_NORM_SQ_EPSILON = 1e-16; // Threshold for checking if qv x uRef norm squared is zero
+
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
+
+    // Check for zero norm vectors
+    if ((u1u1 < NORM_EPSILON) || (u2u2 < NORM_EPSILON) || (v1v1 < NORM_EPSILON) || (v2v2 < NORM_EPSILON)) {
       throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
-
-  // preliminary computation
+    // Adjust v1 to match the norm of u1
+    // v1_adj = v1 * sqrt(|u1|^2 / |v1|^2)
+    Vector3D v1_adj = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+    // Store the squared norm of adjusted v1; theoretically it's exactly u1u1.
+    // Using u1u1 avoids potential small errors from sqrt/square operations.
+    final double v1_adj_v1_adj = u1u1;
+
+    // Adjust v2 to preserve the geometric relationship with v1_adj, analogous to u1/u2
+    // We want |v2_adj|^2 = |u2|^2 and v1_adj . v2_adj = u1 . u2
+    final double u1u2 = u1.dotProduct(u2);
+    final double v1v2 = v1_adj.dotProduct(v2); // Use adjusted v1 and original v2
+
+    // Compute coefficients based on Gram-Schmidt orthogonalization idea
+    final double coeffU = u1u2 / u1u1;
+    final double coeffV = v1v2 / v1_adj_v1_adj; // Use v1_adj_v1_adj == u1u1
+
+    // Compute squared norms of components orthogonal to u1 and v1_adj respectively
+    // These are related to |u|^2 * sin^2(angle) and should be non-negative
+    final double normU2_orth_sq = u2u2 - u1u2 * coeffU;
+    final double normV2_orth_sq = v2v2 - v1v2 * coeffV;
+
+    // Check for collinearity: if v1_adj and v2 are collinear, normV2_orth_sq is near zero.
+    if (normV2_orth_sq < NORM_EPSILON) {
+        // If u1 and u2 are also collinear, the rotation might be identity or 180 degrees.
+        if (normU2_orth_sq < NORM_EPSILON) {
+            // Both pairs are collinear. Determine rotation based on relative orientation of u1 and v1_adj.
+            if (v1_adj.dotProduct(u1) < 0) { // Check if they point in opposite directions
+                // 180 degree rotation. Need an axis orthogonal to u1.
+                Vector3D axis = u1.orthogonal();
+                double normAxisSq = axis.getNormSq();
+                // Ensure axis is non-zero (u1 cannot be zero here)
+                if (normAxisSq < NORM_EPSILON) {
+                     // Fallback if orthogonal somehow yields zero vector (highly unlikely for non-zero u1)
+                     // Choose an arbitrary axis, ensuring it's not parallel to u1 if possible.
+                     if ((FastMath.abs(u1.getX()) < NORM_EPSILON) && (FastMath.abs(u1.getY()) < NORM_EPSILON)) {
+                         axis = Vector3D.PLUS_I; // If u1 is Z-axis, pick X-axis
+                     } else {
+                         axis = Vector3D.PLUS_K; // Otherwise, pick Z-axis
+                     }
+                     normAxisSq = 1.0;
+                }
+                // Normalize the axis vector for the quaternion representation
+                double invNorm = 1.0 / FastMath.sqrt(normAxisSq);
+                q0 = 0.0; // q0 = cos(180/2) = 0
+                q1 = invNorm * axis.getX();
+                q2 = invNorm * axis.getY();
+                q3 = invNorm * axis.getZ();
+            } else {
+                // Vectors are aligned (or nearly aligned) -> Identity rotation
+                q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0; // Identity
+            }
+            return; // Rotation determined, exit early.
+        } else {
+            // v1,v2 are collinear but u1,u2 are not. The required transformation is impossible for a rotation.
+            throw MathRuntimeException.createIllegalArgumentException(
+                    LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR, // Reusing error code, consider a more specific one
+                    "Input vectors are incompatible: v1, v2 are collinear but u1, u2 are not");
+        }
+    }
+
+    // Calculate beta, ensuring the numerator is non-negative (due to potential floating point errors)
+    final double betaNum = FastMath.max(0, normU2_orth_sq);
+    final double beta = FastMath.sqrt(betaNum / normV2_orth_sq);
+    // Calculate alpha
+    final double alpha = coeffU - beta * coeffV;
+    // Compute the adjusted v2 vector
+    final Vector3D v2_adj = new Vector3D(alpha, v1_adj, beta, v2);
+
+    // --- Compute rotation quaternion components ---
+
+    // Choose initial reference vectors (u1, v1_adj)
     Vector3D uRef = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
+    Vector3D vRef = v1_adj; // Use adjusted v1
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+    // Compute auxiliary vectors (cross products)
+    final Vector3D u3 = u1.crossProduct(u2);
+    final Vector3D v3_adj = Vector3D.crossProduct(v1_adj, v2_adj); // Use adjusted v1, v2
 
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
-      }
+    // Compute vector related to rotation axis using the first pair difference cross product
+    final Vector3D v1Su1 = v1_adj.subtract(u1);
+    final Vector3D v2Su2 = v2_adj.subtract(u2);
+    Vector3D k_axis = v1Su1.crossProduct(v2Su2); // This vector is related to qv * sin(theta)
+
+    // Compute coefficient 'c', related to rotation angle. Dot product with u3 normalizes.
+    double c = k_axis.dotProduct(u3);
+
+    // Check for degenerate cases where the computed axis is unstable (lies in plane of vectors)
+    if (FastMath.abs(c) < C_EPSILON) {
+        // Try using the pair (u1, u3) and their adjusted images (v1_adj, v3_adj)
+        final Vector3D v3Su3 = v3_adj.subtract(u3);
+        k_axis = v1Su1.crossProduct(v3Su3);
+        // Use reference normal u3 x u1 (corresponds to u2 direction in right-handed frame u1,u2,u3)
+        final Vector3D u2Prime = u3.crossProduct(u1);
+        c = k_axis.dotProduct(u2Prime);
+
+        // Check if still degenerate (axis might be aligned with u1)
+        if (FastMath.abs(c) < C_EPSILON) {
+            // Try using the pair (u2, u3) and their adjusted images (v2_adj, v3_adj)
+            k_axis = v2Su2.crossProduct(v3Su3);
+            // Use reference normal u2 x u3 (corresponds to u1 direction in right-handed frame u2,u3,u1)
+            final Vector3D u1Prime = u2.crossProduct(u3);
+            c = k_axis.dotProduct(u1Prime);
 
-      // we will have to use u2 and v2 to compute the scalar part
+            // Check if still degenerate (implies axis aligned with everything -> Identity or 180 deg)
+            if (FastMath.abs(c) < C_EPSILON) {
+                // Handle final degenerate case: Identity or 180 rotation
+                if (v1_adj.dotProduct(u1) < 0) { // Check orientation using adjusted v1
+                     // 180 deg rotation. Compute axis orthogonal to u1.
+                    Vector3D axis = u1.orthogonal();
+                    double normAxisSq = axis.getNormSq();
+                     if (normAxisSq < NORM_EPSILON) { // Fallback if orthogonal fails
+                         if ((FastMath.abs(u1.getX()) < NORM_EPSILON) && (FastMath.abs(u1.getY()) < NORM_EPSILON)) {
+                             axis = Vector3D.PLUS_I;
+                         } else {
+                             axis = Vector3D.PLUS_K;
+                         }
+                         normAxisSq = 1.0;
+                     }
+                    double invNorm = 1.0 / FastMath.sqrt(normAxisSq);
+                    q0 = 0.0; q1 = invNorm * axis.getX(); q2 = invNorm * axis.getY(); q3 = invNorm * axis.getZ();
+                } else {
+                    q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0; // Identity
+                }
+                return; // Exit early
+            }
+            // If third attempt succeeded, use u2/v2_adj as reference vectors for q0 calculation
             uRef = u2;
-      vRef = v2;
-
+            vRef = v2_adj;
         }
-
+        // else: Second attempt succeeded, use uRef=u1, vRef=v1_adj (default)
     }
+    // else: First attempt succeeded, use uRef=u1, vRef=v1_adj (default)
 
-  // compute the vectorial part
+    // compute the vectorial part qv = (q1, q2, q3) of the quaternion
+    boolean flipped = false;
+    // If c < 0, the formula requires sqrt(|c|), and the sign might affect qv direction.
+    if (c < 0) {
+        // Use sqrt of absolute value. Remember to potentially flip the sign of qv.
+        c = FastMath.sqrt(-c);
+        flipped = true;
+    } else {
         c = FastMath.sqrt(c);
+    }
+
+    // If c is near zero after sqrt, it indicates near-identity or numerical issues.
+    // This should ideally be caught by abs(c) < C_EPSILON checks earlier. Add safeguard.
+    if (c < C_EPSILON) {
+        q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0; return; // Default to identity
+    }
+
+    // Calculate normalization factor for qv components
     double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
+    // Compute qv components, flipping sign if c was negative (heuristic based on common derivations)
+    q1 = inv * k_axis.getX();
+    q2 = inv * k_axis.getY();
+    q3 = inv * k_axis.getZ();
+    if (flipped) {
+        q1 = -q1; q2 = -q2; q3 = -q3;
+    }
+
+    // compute the scalar part q0 using the robust formula derived from Rodrigues' rotation formula:
+    // q0 = [ (v - u) . (qv x u) ] / (2 * |qv x u|^2)
+    // This avoids the issues with the original formula used for q0 calculation.
+    Vector3D qv = new Vector3D(q1, q2, q3);
+    Vector3D k = qv.crossProduct(uRef); // k = qv x uRef (vector perpendicular to axis and uRef)
+    double kNormSq = k.getNormSq(); // |qv x uRef|^2
 
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    // Check if uRef is aligned with the rotation axis qv (|qv x uRef|^2 is near zero)
+    if (kNormSq < K_NORM_SQ_EPSILON) {
+        // If uRef is aligned with axis, the formula for q0 is indeterminate (0/0).
+        // Try using the other vector pair (uOther, vOther) which should not be aligned if u1, u2 are not collinear.
+        Vector3D uOther, vOther;
+        if (uRef == u1) { uOther = u2; vOther = v2_adj; } else { uOther = u1; vOther = v1_adj; }
+        k = qv.crossProduct(uOther); // k = qv x uOther
+        kNormSq = k.getNormSq();
 
+        // Check if the other vector is also aligned (implies u1, u2 collinear, handled earlier ideally)
+        if (kNormSq < K_NORM_SQ_EPSILON) {
+            // Both u1 and u2 seem aligned with qv axis. Should correspond to Identity or 180 deg.
+            // This case indicates collinear input vectors, which should have been handled.
+            // As a fallback, re-check dot product.
+            if (v1_adj.dotProduct(u1) < 0) {
+                q0 = 0.0; // Assume 180 deg rotation; qv computed earlier is the axis (needs normalization)
+            } else {
+                q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0; // Assume Identity rotation
+            }
+        } else {
+            // Use the 'other' pair (uOther, vOther) to compute q0, as it's not aligned with axis.
+            q0 = (vOther.subtract(uOther)).dotProduct(k) / (2 * kNormSq);
+        }
+    } else {
+        // uRef was not aligned with axis, compute q0 using uRef, vRef and the formula.
+        q0 = (vRef.subtract(uRef)).dotProduct(k) / (2 * kNormSq);
+    }
+
+    // Final step: Normalize the quaternion (q0, q1, q2, q3) to ensure it's a unit quaternion.
+    double norm = FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
+    if (norm < NORM_EPSILON) {
+        // If norm is zero (or very close), indicates an issue. Default to identity rotation.
+        q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0;
+    } else {
+        // Perform normalization
+        double invNorm = 1.0 / norm;
+        q0 *= invNorm;
+        q1 *= invNorm;
+        q2 *= invNorm;
+        q3 *= invNorm;
+    }
   }
+// --- End of the fixed function ---
