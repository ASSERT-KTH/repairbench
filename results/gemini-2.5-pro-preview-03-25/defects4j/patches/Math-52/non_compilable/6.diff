diff --git a/tmp/92849be6-454b-4ca6-9779-6616a89adc61_buggy.java b/tmp/ae336679-6029-498e-abd7-a32455402e5a_fixed.java
index 0e110fe..aa766f8 100644
--- a/tmp/92849be6-454b-4ca6-9779-6616a89adc61_buggy.java
+++ b/tmp/ae336679-6029-498e-abd7-a32455402e5a_fixed.java
@@ -1,96 +1,170 @@
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.exception.util.LocalizedFormats;
+import org.apache.commons.math.MathRuntimeException;
+
+// Note: Assuming necessary imports and class structure (Vector3D, Rotation fields q0-q3) exist.
+
 /** Build the rotation that transforms a pair of vector into another pair.
 
  * <p>Except for possible scale factors, if the instance were applied to
  * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
  * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
  * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
  * not the same as the angular separation between v<sub>1</sub> and
  * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
  * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
  * v<sub>2</sub>) plane.</p>
 
  * @param u1 first vector of the origin pair
  * @param u2 second vector of the origin pair
  * @param v1 desired image of u1 by the rotation
  * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
+ * @exception IllegalArgumentException if the norm of one of the vectors is zero or if the vectors are incompatible
  */
 public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
         throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
     // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+    Vector3D v1prime = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+    double v1primev1prime = v1prime.getNormSq(); // Should be u1u1 after scaling
 
     // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
+    Vector3D v2Original = v2; // Keep original v2 for adjustment calculation
     double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
+    double v1primev2   = v1prime.dotProduct(v2Original);
+    double v2Originalv2Original = v2Original.getNormSq();
+
     double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+    double coeffV = v1primev2 / v1primev1prime; // Use v1prime's norm squared here
+
+    // Compute components relevant for adjustment factor beta = sqrt(uNorm / vNorm)
+    // uNorm = |u1 x u2|^2 / |u1|^2. Protect against negative due to precision.
+    double uNorm = FastMath.max(0.0, u2u2 - u1u2 * coeffU);
+    // vNorm = |v1' x v2_orig|^2 / |v1'|^2. Protect against negative due to precision.
+    double vNorm = FastMath.max(0.0, v2Originalv2Original - v1primev2 * coeffV);
+
+    // Threshold to consider a value zero, relative to norms squared
+    // Use a small tolerance, e.g., 1.0e-15 * normSq
+    final double zeroThresholdSq = 1.0e-30; // Threshold for squared norms comparison
+
+    boolean vIsCollinear = (vNorm <= zeroThresholdSq); // Compare squared projection length to near zero
+    boolean uIsCollinear = (uNorm <= zeroThresholdSq); // Compare squared projection length to near zero
+
+
+    double beta;
+    if (vIsCollinear) {
+        if (!uIsCollinear) {
+             // u1, u2 define a plane, but v1', v2_orig are collinear. Impossible map for rotation.
+            throw MathRuntimeException.createIllegalArgumentException(
+                LocalizedFormats.ROTATION_MATRIX_DIMENSIONS, "v1 and v2"); // Or a more specific message
+        }
+        // Both pairs u1,u2 and v1',v2_orig are collinear.
+        // Adjust v2prime using alpha = coeffU, beta = 0.
+        // This makes v2prime = coeffU * v1prime, satisfying dot product and norm constraints.
+        beta = 0.0;
+    } else {
+       // General case: v1', v2_orig are not collinear.
+       // beta = sqrt(uNorm / vNorm). If u is collinear (uNorm=0), beta is 0.
+       beta = FastMath.sqrt(uNorm / vNorm); // uNorm is already >=0. vNorm is > zeroThresholdSq > 0.
+    }
+
     double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+    // Compute adjusted v2prime = alpha * v1prime + beta * v2Original
+    Vector3D v2prime = new Vector3D(alpha, v1prime, beta, v2Original);
 
-  // preliminary computation
+    // preliminary computation for quaternion derivation
+    // The logic below computes the rotation that maps (u1, u2) to (v1prime, v2prime)
     Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
+    Vector3D vRef  = v1prime;
+    Vector3D v1Su1 = v1prime.subtract(u1);
+    Vector3D v2Su2 = v2prime.subtract(u2); // Use adjusted v2prime
     Vector3D k     = v1Su1.crossProduct(v2Su2);
     Vector3D u3    = u1.crossProduct(u2);
     double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
+
+    double kNorm = k.getNorm();
+    double u3Norm = u3.getNorm();
+    // Check if c is near zero using a tolerance relative to norms involved
+    final double zeroThreshold = 1.0e-15; // Threshold for dot product comparison
+    if (FastMath.abs(c) < zeroThreshold * kNorm * u3Norm) {
+        // Try alternative basis vectors to compute k and c
+        Vector3D v3 = Vector3D.crossProduct(v1prime, v2prime);
+        Vector3D v3Su3 = v3.subtract(u3); // u3 = u1 x u2
         k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
+        Vector3D u2Prime = u1.crossProduct(u3); // u1 x (u1 x u2)
+        double u2PrimeNorm = u2Prime.getNorm();
+        kNorm = k.getNorm(); // Recompute kNorm
         c = k.dotProduct(u2Prime);
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+        if (FastMath.abs(c) < zeroThreshold * kNorm * u2PrimeNorm) {
+            // Try the third pair
+            k = v2Su2.crossProduct(v3Su3);
+            Vector3D u1Prime = u2.crossProduct(u3); // u2 x (u1 x u2)
+            double u1PrimeNorm = u1Prime.getNorm();
+            kNorm = k.getNorm(); // Recompute kNorm
+            c = k.dotProduct(u1Prime);
 
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
+            if (FastMath.abs(c) < zeroThreshold * kNorm * u1PrimeNorm) {
+                // All attempts failed. This implies v=u (identity) or possibly v=-u (180 deg rot).
+                // Check explicitly for identity.
+                 if (v1Su1.getNormSq() < zeroThresholdSq && v2Su2.getNormSq() < zeroThresholdSq) {
+                    // Vectors match, must be identity rotation
+                    q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0;
+                 } else {
+                     // Cannot determine rotation axis robustly (e.g., near 180 degree rotation).
+                     // Throwing an exception indicates singularity or ambiguity.
+                      throw MathRuntimeException.createIllegalArgumentException(
+                          LocalizedFormats.ROTATION_MATRIX_DIMENSIONS, "defining vectors are singular");
                  }
-
-      // we will have to use u2 and v2 to compute the scalar part
+                return; // Return after setting identity or throwing exception
+            }
+            // Use u2/v2prime as reference pair if third attempt succeeded
             uRef = u2;
-      vRef = v2;
-
+            vRef = v2prime;
         }
-
     }
 
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
+    // compute the vectorial part (q1, q2, q3)
+    // We expect c >= 0 based on the derivation idea c ~ (1-cos(theta))*stuff >= 0
+    // Protect against negative c due to numerical errors.
+    c = FastMath.sqrt(FastMath.max(0.0, c));
+    if (c < zeroThreshold) { // Check if c is effectively zero after sqrt
+        // This case indicates singularity or inconsistency if reached.
+         throw MathRuntimeException.createIllegalArgumentException(
+             LocalizedFormats.ROTATION_MATRIX_DIMENSIONS, "computation resulted in singularity");
+    }
+    double inv = 1.0 / (c + c); // 1 / (2 * sqrt(c))
     q1 = inv * k.getX();
     q2 = inv * k.getY();
     q3 = inv * k.getZ();
 
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    // compute the scalar part q0 using quaternion norm relation q0^2 + |q_vec|^2 = 1
+    double q123Sq = q1 * q1 + q2 * q2 + q3 * q3;
+    // Protect sqrt argument from going negative due to numerical errors
+    q0 = FastMath.sqrt(FastMath.max(0.0, 1.0 - q123Sq));
+    // This ensures q0 >= 0 (convention) and avoids division by zero from the original potentially unstable method.
 
+    // Final normalization to ensure unit quaternion (corrects minor numerical errors)
+    double norm = FastMath.sqrt(q0*q0 + q123Sq);
+    // Check norm > threshold before dividing
+    if (norm > zeroThreshold) {
+         double invNorm = 1.0 / norm;
+         q0 *= invNorm;
+         q1 *= invNorm;
+         q2 *= invNorm;
+         q3 *= invNorm;
+     } else {
+         // Norm is zero - implies q0=q1=q2=q3=0 initially. Should not happen with valid inputs.
+         // Default to identity as a safe fallback.
+         q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0;
+     }
 }
\ No newline at end of file
