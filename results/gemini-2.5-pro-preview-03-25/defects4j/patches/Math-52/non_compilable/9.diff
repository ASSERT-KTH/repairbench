diff --git a/tmp/05c925ee-6459-4544-b135-b5ab67e16b0a_buggy.java b/tmp/7c99aa48-d9e7-40d7-b007-2a08406aebad_fixed.java
index 0e110fe..4d7516c 100644
--- a/tmp/05c925ee-6459-4544-b135-b5ab67e16b0a_buggy.java
+++ b/tmp/7c99aa48-d9e7-40d7-b007-2a08406aebad_fixed.java
@@ -1,96 +1,142 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
+   * @exception IllegalArgumentException if the vectors u1 and u2 are collinear
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
       throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
     // normalize v1 in order to have (v1'|v1') = (u1|u1)
     v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
 
     // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
     double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
+    double v1v2   = v1.dotProduct(v2); // v1 is the adjusted version now
     double coeffU = u1u2 / u1u1;
+    // coeffV = v1'.dot(v2_orig) / |v1'|^2 = v1'.dot(v2_orig) / u1u1
     double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+    // Denominator for beta calculation: |v2_orig|^2 - (v1'.dot(v2_orig))^2 / |v1'|^2
+    double betaDen = v2v2 - v1v2 * coeffV;
+    // Numerator for beta calculation: |u2|^2 - (u1.dot(u2))^2 / |u1|^2
+    double betaNum = u2u2 - u1u2 * coeffU;
+
+    // Check for collinearity of u1 and u2 using the beta numerator (|u1 x u2|^2 / |u1|^2)
+    // Threshold calculation: norm of cross product squared compared to product of norms squared
+    if (betaNum < 1.0e-15 * u1u1 * u2u2) {
+        // u1 and u2 are parallel. Rotation is not uniquely defined.
+        // Check if v1 and v2 are also parallel.
+        if (betaDen < 1.0e-15 * v1v1 * v2v2) { // v1v1 is u1u1 here
+            // both pairs are parallel, find rotation from u1 to v1
+            Rotation r = new Rotation(u1, v1);
+            this.q0 = r.q0;
+            this.q1 = r.q1;
+            this.q2 = r.q2;
+            this.q3 = r.q3;
+            return; // Exit constructor
+        }
+        // u1, u2 parallel but v1, v2 are not (or at least not detected as parallel by betaDen).
+        // This case implies inconsistency, as adjustment should make v parallel if u are parallel.
+        // However, let's throw based on u1, u2 collinearity.
+        throw MathRuntimeException.createIllegalArgumentException(
+                LocalizedFormats.CLOSE_VECTORS_FOR_ROTATION_DEFINING_PAIR);
+    }
+
+    double betaArg;
+    if (betaDen < 1.0e-15 * v1v1 * v2v2) {
+         // v1 and v2 are parallel. Since u1, u2 are not parallel, this shouldn't happen
+         // if adjustment worked perfectly. Throw exception as it indicates inconsistent input.
+         // (A rotation cannot map non-parallel vectors to parallel ones).
+         throw MathRuntimeException.createIllegalArgumentException(
+                 LocalizedFormats.CLOSE_VECTORS_FOR_ROTATION_DEFINING_PAIR);
+         // betaArg = Double.POSITIVE_INFINITY; // Or handle differently
+    } else {
+        betaArg = betaNum / betaDen;
+    }
+
+    double beta   = FastMath.sqrt(betaArg); // betaArg should be non-negative now
     double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
-
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
-
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
-      }
-
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
-
+    v2 = new Vector3D(alpha, v1, beta, v2); // v2 becomes the adjusted v2a
+
+    // compute orthonormal basis U = { u1_hat, u2_hat, u3_hat } from (u1, u2)
+    Vector3D u1_hat = u1.normalize();
+    // compute u2 orthogonal to u1_hat: u2 - proj(u2 onto u1_hat)
+    Vector3D u2_orth = u1_hat.scalarMultiply(u1_hat.dotProduct(u2));
+    u2_orth = u2.subtract(u2_orth);
+    // u2_orth normSq was already checked via betaNum, normalization is safe
+    Vector3D u2_hat = u2_orth.normalize();
+    Vector3D u3_hat = Vector3D.crossProduct(u1_hat, u2_hat);
+
+    // compute orthonormal basis V = { v1_hat, v2_hat, v3_hat } from (v1a, v2a)
+    // v1 and v2 hold the adjusted vectors v1a, v2a at this point
+    Vector3D v1_hat = v1.normalize();
+    // compute v2 orthogonal to v1_hat: v2a - proj(v2a onto v1_hat)
+    Vector3D v2_orth = v1_hat.scalarMultiply(v1_hat.dotProduct(v2));
+    v2_orth = v2.subtract(v2_orth);
+    // If adjustment logic is correct, |v2_orth|^2 should equal |u2_orth|^2 and be non-zero.
+    Vector3D v2_hat = v2_orth.normalize();
+    Vector3D v3_hat = Vector3D.crossProduct(v1_hat, v2_hat);
+
+    // Compute rotation matrix R = V * U^T where R_ij = v_i_hat.dot(u_j_hat)
+    final double[][] R = new double[3][3];
+    R[0][0] = v1_hat.dotProduct(u1_hat);
+    R[0][1] = v1_hat.dotProduct(u2_hat);
+    R[0][2] = v1_hat.dotProduct(u3_hat);
+    R[1][0] = v2_hat.dotProduct(u1_hat);
+    R[1][1] = v2_hat.dotProduct(u2_hat);
+    R[1][2] = v2_hat.dotProduct(u3_hat);
+    R[2][0] = v3_hat.dotProduct(u1_hat);
+    R[2][1] = v3_hat.dotProduct(u2_hat);
+    R[2][2] = v3_hat.dotProduct(u3_hat);
+
+    // Convert matrix R to quaternion q0, q1, q2, q3
+    // Using the standard robust algorithm (Shepperd's method adaptation)
+    // From http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/
+    double trace = R[0][0] + R[1][1] + R[2][2];
+    if (trace > 0.0) { // Use 0.0 threshold, sqrt of slightly negative is handled by algorithm variations
+        double S = FastMath.sqrt(trace + 1.0) * 2.0; // S=4*q0
+        q0 = 0.25 * S;
+        q1 = (R[2][1] - R[1][2]) / S;
+        q2 = (R[0][2] - R[2][0]) / S;
+        q3 = (R[1][0] - R[0][1]) / S;
+    } else if ((R[0][0] > R[1][1]) && (R[0][0] > R[2][2])) { // R[0][0] is largest diagonal element
+        double S = FastMath.sqrt(1.0 + R[0][0] - R[1][1] - R[2][2]) * 2.0; // S=4*q1
+        q0 = (R[2][1] - R[1][2]) / S;
+        q1 = 0.25 * S;
+        q2 = (R[0][1] + R[1][0]) / S;
+        q3 = (R[0][2] + R[2][0]) / S;
+    } else if (R[1][1] > R[2][2]) { // R[1][1] is largest diagonal element
+        double S = FastMath.sqrt(1.0 + R[1][1] - R[0][0] - R[2][2]) * 2.0; // S=4*q2
+        q0 = (R[0][2] - R[2][0]) / S;
+        q1 = (R[0][1] + R[1][0]) / S;
+        q2 = 0.25 * S;
+        q3 = (R[1][2] + R[2][1]) / S;
+    } else { // R[2][2] is largest diagonal element
+        double S = FastMath.sqrt(1.0 + R[2][2] - R[0][0] - R[1][1]) * 2.0; // S=4*q3
+        q0 = (R[1][0] - R[0][1]) / S;
+        q1 = (R[0][2] + R[2][0]) / S;
+        q2 = (R[1][2] + R[2][1]) / S;
+        q3 = 0.25 * S;
     }
-
-  }
-
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
-
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
   }
\ No newline at end of file
