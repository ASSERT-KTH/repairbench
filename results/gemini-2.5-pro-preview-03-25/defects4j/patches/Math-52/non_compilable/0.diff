diff --git a/tmp/ae5b8b06-53e2-4fe1-8db4-522433cba5cc_buggy.java b/tmp/5be819cd-17dd-4d68-bc58-f86c50ab3806_fixed.java
index 0e110fe..5afaf90 100644
--- a/tmp/ae5b8b06-53e2-4fe1-8db4-522433cba5cc_buggy.java
+++ b/tmp/5be819cd-17dd-4d68-bc58-f86c50ab3806_fixed.java
@@ -1,96 +1,222 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
+   * @exception IllegalArgumentException if the norm of one of the vectors is zero or
+   * if the vectors u<sub>1</sub>, u<sub>2</sub> are not linearly independent while
+   * v<sub>1</sub>, v<sub>2</sub> are or vice-versa.
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
       throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+    // Compute tolerance for near-zero checks based on input vector magnitudes
+    // A tolerance proportional to the square root of the machine epsilon times the norms might be appropriate.
+    // Using a simpler fixed tolerance based on ULP of 1.0 for now.
+    final double epsilon = 1e-15; // Tolerance for floating point comparisons
 
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
+    // Keep references to original vectors
+    Vector3D u1_orig = u1;
+    Vector3D u2_orig = u2;
+    Vector3D v1_orig = v1;
+    Vector3D v2_orig = v2;
+
+    // normalize v1_orig in order to have (v1_adj|v1_adj) = (u1_orig|u1_orig)
+    Vector3D v1_adj = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1_orig);
+
+    // adjust v2_orig in order to have (u1_orig|u2_orig) = (v1_adj|v2_adj) and (v2_adj|v2_adj) = (u2_orig|u2_orig)
+    double u1u2   = u1_orig.dotProduct(u2_orig);
+
+    // Denominator for beta calculation: |v2_orig_perp_v1_orig|^2 = |v1_orig x v2_orig|^2 / |v1_orig|^2
+    double v1x v2_normSq = Vector3D.crossProduct(v1_orig, v2_orig).getNormSq();
+    double denBeta = v1x v2_normSq / v1v1;
+
+    // Numerator for beta calculation: |u2_orig_perp_u1_orig|^2 = |u1_orig x u2_orig|^2 / |u1_orig|^2
+    double u1x u2_normSq = Vector3D.crossProduct(u1_orig, u2_orig).getNormSq();
+    double numBeta = u1x u2_normSq / u1u1;
+
+    // Check for collinearity: u1 || u2 <=> |u1 x u2| ~ 0
+    boolean uParallel = (u1x u2_normSq) < (epsilon * u1u1 * u2u2);
+    // Check v1 || v2 <=> |v1 x v2| ~ 0
+    boolean vParallel = (v1x v2_normSq) < (epsilon * v1v1 * v2v2);
+
+    if (uParallel != vParallel) {
+         throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ROTATION_MATRIX_DIMENSIONS,
+                                                                   uParallel ? "u1/u2 parallel, v1/v2 not" : "u1/u2 not parallel, v1/v2 parallel");
+    }
+
+    Vector3D v2_adj;
+    double beta;
+    if (vParallel) { // Includes case where both are parallel (denBeta is near zero)
+        // Beta is indeterminate (0/0 if uParallel, num/0 otherwise, but that's error case).
+        // The rotation is mainly u1 -> v1_adj. Set beta=0 for calculation, logic below handles degeneracy.
+        beta = 0;
+    } else { // denBeta is significantly positive (v1,v2 not parallel)
+        // numBeta should also be positive if uParallel is false
+        numBeta = FastMath.max(0, numBeta); // Ensure non-negative due to FP
+        beta = FastMath.sqrt(numBeta / denBeta);
+    }
+
+    // Calculate alpha using adjusted v1 and original v2
+    double v1adj_v2orig = v1_adj.dotProduct(v2_orig); // v1' . v2
     double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+    double coeffV = v1adj_v2orig / u1u1; // v1'.v2 / |v1'|^2 = v1'.v2 / u1u1
     double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+    v2_adj = new Vector3D(alpha, v1_adj, beta, v2_orig);
+
 
     // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
+    Vector3D uRef  = u1_orig;
+    Vector3D vRef  = v1_adj;
+    Vector3D v1Su1 = v1_adj.subtract(u1_orig);
+    Vector3D v2Su2 = v2_adj.subtract(u2_orig);
     Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
+    Vector3D u3    = Vector3D.crossProduct(u1_orig, u2_orig); // Zero vector if u1 || u2
+    double kNorm = k.getNorm();
+    double u3Norm = u3.getNorm();
+    double cNorm = kNorm * u3Norm;
     double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
+
+    // Use relative tolerance for c == 0 check, guarding against zero norm
+    if (cNorm == 0 || FastMath.abs(c) < (epsilon * cNorm)) {
+      Vector3D v3 = Vector3D.crossProduct(v1_adj, v2_adj);
       Vector3D v3Su3 = v3.subtract(u3);
       k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
+      kNorm = k.getNorm();
+      Vector3D u2Prime = Vector3D.crossProduct(u1_orig, u3);
+      double u2PrimeNorm = u2Prime.getNorm();
+      cNorm = kNorm * u2PrimeNorm;
       c = k.dotProduct(u2Prime);
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+      if (cNorm == 0 || FastMath.abs(c) < (epsilon * cNorm)) {
+        k = v2Su2.crossProduct(v3Su3);
+        kNorm = k.getNorm();
+        Vector3D u3Prime = Vector3D.crossProduct(u2_orig, u3);
+        double u3PrimeNorm = u3Prime.getNorm();
+        cNorm = kNorm * u3PrimeNorm;
+        c = k.dotProduct(u3Prime);
 
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
+        if (cNorm == 0 || FastMath.abs(c) < (epsilon * cNorm)) {
+          // Identity rotation
           q0 = 1.0;
           q1 = 0.0;
           q2 = 0.0;
           q3 = 0.0;
           return;
         }
-
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
-
+        // Use u2/v2 for scalar part calculation
+        uRef = u2_orig;
+        vRef = v2_adj;
       }
-
     }
 
     // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
+    c = FastMath.max(0.0, c); // Ensure c is non-negative
+    double cSqrt = FastMath.sqrt(c);
+
+    // Use a tolerance check for cSqrt ~ 0
+    if (cSqrt < epsilon) {
+         // If c is near zero after trying all pairs, default to identity
+         q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0;
+         return;
+    }
+
+    double inv = 1.0 / (2.0 * cSqrt);
     q1 = inv * k.getX();
     q2 = inv * k.getY();
     q3 = inv * k.getZ();
 
     // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    Vector3D q_vec = new Vector3D(q1, q2, q3);
+    double q_vec_normSq = q_vec.getNormSq();
+    Vector3D k_q0  = Vector3D.crossProduct(uRef, q_vec);
+    double normSq_k_q0 = k_q0.getNormSq();
 
+    // Check if uRef is parallel to rotation axis q_vec
+    boolean refAligned = normSq_k_q0 < (epsilon * uRef.getNormSq() * q_vec_normSq);
+
+    if (refAligned) {
+        Vector3D otherU, otherV;
+        if (uRef == u1_orig) { // Identity check
+            otherU = u2_orig; otherV = v2_adj;
+        } else { // uRef == u2_orig
+            otherU = u1_orig; otherV = v1_adj;
+        }
+
+        k_q0 = Vector3D.crossProduct(otherU, q_vec);
+        normSq_k_q0 = k_q0.getNormSq();
+
+        boolean otherAligned = normSq_k_q0 < (epsilon * otherU.getNormSq() * q_vec_normSq);
+
+        if (otherAligned) {
+            // Both u1 and u2 are aligned with rotation axis. u1 || u2.
+            // Should have resulted in c == 0 and identity return.
+            // If reached, decide between 0/180 deg rotation based on vRef vs uRef.
+             double dot = vRef.dotProduct(uRef);
+             // If q_vec is non-zero (implies rot is 180) and dot is negative:
+             if (dot < 0 && q_vec_normSq > epsilon) {
+                 q0 = 0.0; // 180 degrees rotation
+             } else {
+                 q0 = 1.0; // 0 degrees rotation (Identity)
+                 q1 = 0.0; q2 = 0.0; q3 = 0.0; // Enforce zero vector part
+             }
+        } else {
+             // If normSq_k_q0 is zero here (division by zero), it implies otherU || q_vec,
+             // which means both were aligned -> handled above. So normSq_k_q0 should be > 0.
+            if (normSq_k_q0 < epsilon) { // Avoid division by zero just in case
+                 // This case should not be reached if otherAligned check is correct. Fallback?
+                 q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0; // Default to identity
+            } else {
+                // Use the other vector pair to compute q0 (with fixed sign)
+                q0 = -otherV.dotProduct(k_q0) / (2 * normSq_k_q0);
+            }
+        }
+
+    } else {
+         // If normSq_k_q0 is zero here (division by zero), it implies refAligned=true -> handled above.
+         // So normSq_k_q0 should be > 0.
+         if (normSq_k_q0 < epsilon) { // Avoid division by zero just in case
+             // This case should not be reached if refAligned check is correct. Fallback?
+             q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0; // Default to identity
+         } else {
+             // Use the primary vector pair (uRef, vRef) (with fixed sign)
+             q0 = -vRef.dotProduct(k_q0) / (2 * normSq_k_q0);
+         }
+    }
+
+    // Normalize the quaternion (q0, q1, q2, q3)
+    double norm = FastMath.sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
+    // Use a tolerance for the norm check as well
+    if (norm < epsilon) {
+       // If norm is zero, implies identity rotation was likely intended or input was degenerate
+       q0 = 1.0;
+       q1 = 0.0;
+       q2 = 0.0;
+       q3 = 0.0;
+    } else {
+       double invNorm = 1.0 / norm;
+       q0 *= invNorm;
+       q1 *= invNorm;
+       q2 *= invNorm;
+       q3 *= invNorm;
+    }
   }
\ No newline at end of file
