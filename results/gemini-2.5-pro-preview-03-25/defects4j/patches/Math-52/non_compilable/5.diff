diff --git a/tmp/f2319c72-393d-43cb-bc10-94bef0a844c3_buggy.java b/tmp/0177d47f-0f15-4c4f-a280-b55ce872e72b_fixed.java
index 0e110fe..09f53ff 100644
--- a/tmp/f2319c72-393d-43cb-bc10-94bef0a844c3_buggy.java
+++ b/tmp/0177d47f-0f15-4c4f-a280-b55ce872e72b_fixed.java
@@ -1,96 +1,177 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
+   * or if the vectors u1/u2 or v1/v2 are co-linear
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
       throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
     // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+    double ru1rv1 = FastMath.sqrt(u1u1 / v1v1);
+    Vector3D v1p = new Vector3D(ru1rv1, v1); // v1'
 
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
+    // normalize v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
     double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+    double v1pv2  = v1p.dotProduct(v2); // v1' . v2
+    double u1Norm = FastMath.sqrt(u1u1);
+    double v1pNorm= u1Norm; // Should be FastMath.sqrt(v1p.getNormSq()) but we know it equals u1Norm
+    double u2Norm = FastMath.sqrt(u2u2);
+    double v2Norm = FastMath.sqrt(v2v2);
+    double u1u2Angle = FastMath.acos(u1u2 / (u1Norm * u2Norm));
+    double v1pv2Angle= FastMath.acos(v1pv2 / (v1pNorm * v2Norm));
+
+    // Check for collinearity
+    final double VECTOR_ANGLE_THRESHOLD = 1.0e-14; // A small threshold for angle comparison
+    if (FastMath.abs(u1u2Angle) < VECTOR_ANGLE_THRESHOLD || FastMath.abs(u1u2Angle - FastMath.PI) < VECTOR_ANGLE_THRESHOLD ||
+        FastMath.abs(v1pv2Angle) < VECTOR_ANGLE_THRESHOLD || FastMath.abs(v1pv2Angle - FastMath.PI) < VECTOR_ANGLE_THRESHOLD) {
+        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.CLOSE_VECTORS_FOR_ROTATION_DEFINING_VECTOR);
+    }
+
+
+    double coeffU = u1u2 / u1u1; // u1.u2 / |u1|^2
+    double coeffV = v1pv2 / u1u1; // v1'.v2 / |v1'|^2 = v1'.v2 / |u1|^2
+    double v2v2Adjusted = v2v2 - v1pv2 * coeffV; // |v2_ortho_v1'|^2 approximation
+    double u2u2Adjusted = u2u2 - u1u2 * coeffU;   // |u2_ortho_u1|^2 approximation
+
+    // Handle potential numerical issues where adjusted norms are negative or zero
+    if (u2u2Adjusted < 0.0 || v2v2Adjusted <= 0.0) {
+        // This can happen if u1/u2 or v1/v2 are near collinear despite the earlier check, or due to precision.
+        // Fallback or throw error. Let's throw an error as the input condition is likely violated.
+        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.CLOSE_VECTORS_FOR_ROTATION_DEFINING_VECTOR);
+    }
+
+    double beta = FastMath.sqrt(u2u2Adjusted / v2v2Adjusted);
     double alpha = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+    Vector3D v2p = new Vector3D(alpha, v1p, beta, v2); // v2'
+
+
+    // Use the adjusted vectors v1p and v2p for rotation calculation
+    v1 = v1p;
+    v2 = v2p;
 
     // preliminary computation
     Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
+    Vector3D vRef  = v1; // Should be v1p
+    Vector3D v1Su1 = v1.subtract(u1); // v1p - u1
+    Vector3D v2Su2 = v2.subtract(u2); // v2p - u2
     Vector3D k     = v1Su1.crossProduct(v2Su2);
     Vector3D u3    = u1.crossProduct(u2);
     double c       = k.dotProduct(u3);
-  if (c == 0) {
+
+    // Check for degeneracy using a small threshold
+    final double C_THRESHOLD = 1.0e-15;
+    if (FastMath.abs(c) < C_THRESHOLD) {
         // the (q1, q2, q3) vector is close to the (u1, u2) plane
         // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
+        Vector3D v3 = Vector3D.crossProduct(v1, v2); // v1p x v2p
         Vector3D v3Su3 = v3.subtract(u3);
         k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
+        Vector3D u2Prime = u1.crossProduct(u3); // u1 x (u1 x u2) = (u1.u2)u1 - |u1|^2 u2
         c = k.dotProduct(u2Prime);
 
-    if (c == 0) {
+        if (FastMath.abs(c) < C_THRESHOLD) {
             // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
             // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+            k = v2Su2.crossProduct(v3Su3);
+            // u2.crossProduct(u3) = u2 x (u1 x u2) = |u2|^2 u1 - (u1.u2) u2
+            Vector3D u2Cu3 = new Vector3D(u2.getNormSq(), u1, -u1.dotProduct(u2), u2);
+            c = k.dotProduct(u2Cu3);
 
-      if (c == 0) {
+            if (FastMath.abs(c) < C_THRESHOLD) {
                 // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
+                // this should correspond to identity rotation (or 180 degree rotation if pairs are opposite)
+                // Check if v1 is close to u1
+                 if (v1.dotProduct(u1) < 0) { // Check for 180 degree rotation case
+                     // Find a perpendicular vector to u1 to define axis for 180 degree rotation
+                     Vector3D axis = Vector3D.crossProduct(u1, v1);
+                     if (axis.getNormSq() < 1.0e-15) { // u1 and v1 are collinear
+                         axis = u1.orthogonal(); // Find any orthogonal vector
+                     }
+                     axis = axis.normalize();
+                     q0 = 0.0;
+                     q1 = axis.getX();
+                     q2 = axis.getY();
+                     q3 = axis.getZ();
+
+                 } else { // Assume identity
                     q0 = 1.0;
                     q1 = 0.0;
                     q2 = 0.0;
                     q3 = 0.0;
+                 }
                  return;
             }
-
             // we will have to use u2 and v2 to compute the scalar part
             uRef = u2;
-      vRef = v2;
-
+            vRef = v2; // Should be v2p
         }
-
     }
 
     // compute the vectorial part
-  c = FastMath.sqrt(c);
+    // Ensure c is non-negative before sqrt. A negative c indicates numerical instability.
+    // Clamping to 0, although throwing an exception might be mathematically cleaner.
+    c = FastMath.sqrt(Math.max(0.0, c));
+    if (c == 0.0) {
+        // Should have been caught by identity checks, this indicates extreme numerical issues.
+        // Fallback to identity.
+        q0 = 1.0;
+        q1 = 0.0;
+        q2 = 0.0;
+        q3 = 0.0;
+        return;
+    }
+
     double inv = 1.0 / (c + c);
     q1 = inv * k.getX();
     q2 = inv * k.getY();
     q3 = inv * k.getZ();
 
     // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
+    // We use the formula q0 = - vRef . (uRef x q_vec) / (2 |uRef x q_vec|^2)
+    // Let K = uRef x q_vec
+    Vector3D K = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                            uRef.getZ() * q1 - uRef.getX() * q3,
                            uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    double normSqK = K.getNormSq();
 
+    // Threshold to handle case where uRef is nearly parallel to rotation axis
+    // Use a relative threshold based on uRef's norm? Let's use a fixed small threshold for now.
+    final double K_NORM_SQ_THRESHOLD = 1.0e-15;
+    if (normSqK < K_NORM_SQ_THRESHOLD) {
+        // uRef is parallel to the rotation axis (q_vec)
+        // Use q0^2 = 1 - |q_vec|^2, assuming q0 >= 0 convention (rotation angle <= 180 degrees)
+        double qVecNormSq = q1 * q1 + q2 * q2 + q3 * q3;
+        q0 = FastMath.sqrt(Math.max(0.0, 1.0 - qVecNormSq));
+    } else {
+        // Use the derived formula: q0 = -vRef.dotProduct(K) / (2 * normSqK)
+        q0 = -vRef.dotProduct(K) / (2 * normSqK);
+    }
+
+    // Optional: Normalize the final quaternion for robustness, though ideally it should be unit norm.
+    // double norm = FastMath.sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
+    // if (norm > 1.0e-15) {
+    //    q0 /= norm; q1 /= norm; q2 /= norm; q3 /= norm;
+    // } else { /* handle zero norm case - shouldn't happen here */ }
   }
\ No newline at end of file
