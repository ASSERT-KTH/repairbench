diff --git a/tmp/834615ce-afb2-4ece-aaf8-6768802f6ef4_buggy.java b/tmp/a0b8a4f2-6e4b-4255-8490-bc5a9d14ef07_fixed.java
index 0e110fe..6b88b7d 100644
--- a/tmp/834615ce-afb2-4ece-aaf8-6768802f6ef4_buggy.java
+++ b/tmp/a0b8a4f2-6e4b-4255-8490-bc5a9d14ef07_fixed.java
@@ -1,96 +1,188 @@
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.exception.util.LocalizedFormats; // Assuming this path based on original code context
+import org.apache.commons.math.MathRuntimeException; // Assuming this path based on original code context
+
+// Assuming Rotation class structure exists with q0, q1, q2, q3 fields
+// and Vector3D class exists with necessary methods like getNormSq, dotProduct, crossProduct, subtract, scalarMultiply, normalize, getX, getY, getZ.
+
 /** Build the rotation that transforms a pair of vector into another pair.
-
  * <p>Except for possible scale factors, if the instance were applied to
  * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
  * (v<sub>1</sub>, v<sub>2</sub>).</p>
-
  * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
  * not the same as the angular separation between v<sub>1</sub> and
  * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
  * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
  * v<sub>2</sub>) plane.</p>
-
  * @param u1 first vector of the origin pair
  * @param u2 second vector of the origin pair
  * @param v1 desired image of u1 by the rotation
  * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
+ * @exception IllegalArgumentException if the norm of one of the vectors is zero,
+ * or if one of the pairs is degenerated (u1, u2 collinear or v1, v2 collinear)
  */
 public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
+    // Tolerance for checking norms are non-zero. Use a small number relative to potential maximum values or machine epsilon.
+    final double NORM_ZERO_THRESHOLD = 1e-15;
+    // Threshold for checking cross product norm squared is non-zero (collinearity check).
+    // Use a relative threshold based on the squared norms of the input vectors.
+    final double CROSS_PRODUCT_ZERO_THRESHOLD_SQUARED_FACTOR = 1e-28; // (epsilon^2 roughly)
+
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
+
+    // Check for zero norms
+    if ((u1u1 < NORM_ZERO_THRESHOLD) || (u2u2 < NORM_ZERO_THRESHOLD) ||
+        (v1v1 < NORM_ZERO_THRESHOLD) || (v2v2 < NORM_ZERO_THRESHOLD)) {
         throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
-
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
-
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
+    // Check for collinearity of u1 and u2
+    final Vector3D u3 = Vector3D.crossProduct(u1, u2);
+    double u3u3 = u3.getNormSq();
+    if (u3u3 < CROSS_PRODUCT_ZERO_THRESHOLD_SQUARED_FACTOR * u1u1 * u2u2) {
+        // Provide a more specific error message if possible
+        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); // Ideally: VECTORS_ARE_COLLINEAR for u1, u2
+    }
+
+    // Check for collinearity of v1 and v2
+    final Vector3D v3_orig = Vector3D.crossProduct(v1, v2);
+    double v3v3_orig = v3_orig.getNormSq();
+    if (v3v3_orig < CROSS_PRODUCT_ZERO_THRESHOLD_SQUARED_FACTOR * v1v1 * v2v2) {
+        // Provide a more specific error message if possible
+        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); // Ideally: VECTORS_ARE_COLLINEAR for v1, v2
+    }
+
+    // normalize v1 to have the same norm as u1
+    // v1_adj = v1 * sqrt(|u1|^2 / |v1|^2)
+    final Vector3D v1_adj = v1.scalarMultiply(FastMath.sqrt(u1u1 / v1v1));
+
+    // adjust v2 to preserve scalar products and norms relative to v1_adj
+    // We want v2_adj = alpha * v1_adj + beta * v2 such that:
+    // v1_adj . v2_adj = u1 . u2
+    // v2_adj . v2_adj = u2 . u2
+
+    final double u1u2 = u1.dotProduct(u2);
+    final double v1_adj_v2 = v1_adj.dotProduct(v2); // Dot product using adjusted v1
+
+    // Compute squares of norms of components perpendicular to u1 and v1_adj respectively
+    // |u2_perp_u1|^2 = u2u2 - (u1.u2)^2 / u1u1
+    final double U2PerpNormSq = u2u2 - u1u2 * u1u2 / u1u1;
+    // |v2_perp_v1'|^2 = v2v2 - (v1'.v2)^2 / |v1'|^2 = v2v2 - v1_adj_v2^2 / u1u1
+    final double V2PerpNormSq = v2v2 - v1_adj_v2 * v1_adj_v2 / u1u1;
+
+    // Need to check V2PerpNormSq is positive before division (collinearity of v1,v2 again)
+    // This check should be redundant due to the earlier cross product check, but included for safety.
+    final double minPerpNormSq = CROSS_PRODUCT_ZERO_THRESHOLD_SQUARED_FACTOR * v1v1 * v2v2; // Relative threshold
+    if (V2PerpNormSq < minPerpNormSq) {
+        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); // Should not happen
+    }
+
+    // Compute scaling factor beta = |u2_perp_u1| / |v2_perp_v1'|
+    final double beta = FastMath.sqrt(U2PerpNormSq / V2PerpNormSq);
+    // Compute coefficient alpha for v1_adj component
+    final double alpha = (u1u2 - beta * v1_adj_v2) / u1u1;
+    // Compute adjusted v2: v2_adj = alpha * v1_adj + beta * v2
+    final Vector3D v2_adj = new Vector3D(alpha, v1_adj, beta, v2); // Assumes Vector3D constructor for linear combination
+
+    // Now we have pairs (u1, u2) and (v1_adj, v2_adj) with matching norms and dot products.
+    // Find the rotation mapping u1->v1_adj and u2->v2_adj.
+
+    // Compute the rotation angle cosine from u1 and v1_adj
+    // cos(theta) = (u1 . v1_adj) / (|u1| * |v1_adj|) = (u1 . v1_adj) / u1u1
+    double cosTheta = u1.dotProduct(v1_adj) / u1u1;
+    // Clamp cosTheta to [-1, 1] to handle potential numerical errors
+    cosTheta = FastMath.max(-1.0, FastMath.min(1.0, cosTheta));
+
+    // Compute scalar quaternion component q0 = cos(theta/2)
+    // We use the convention q0 >= 0, so theta is in [0, pi].
+    q0 = FastMath.sqrt((1.0 + cosTheta) / 2.0);
+
+    // Compute sin(theta/2) = sqrt((1 - cosTheta) / 2)
+    double sinHalfTheta = FastMath.sqrt((1.0 - cosTheta) / 2.0);
+
+    // Check if angle is close to 0 or pi (which implies sin(theta/2) is close to 0 or 1)
+    if (sinHalfTheta < NORM_ZERO_THRESHOLD) {
+        // Angle is ~0. Rotation is identity.
         q0 = 1.0;
         q1 = 0.0;
         q2 = 0.0;
         q3 = 0.0;
-        return;
-      }
+    } else {
+        // Rotation is not identity. Need to find the rotation axis.
+        // The axis is orthogonal to u1 and v1_adj (if they are different).
+        // A robust way to find the axis direction 'k' is using cross products involving vector differences.
+        final Vector3D v1Su1 = v1_adj.subtract(u1);
+        final Vector3D v2Su2 = v2_adj.subtract(u2);
+        Vector3D k = v1Su1.crossProduct(v2Su2);
+        double kNormSq = k.getNormSq();
 
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
+        // Threshold for checking if kNormSq is too small
+        double v1Su1NormSq = v1Su1.getNormSq();
+        double v2Su2NormSq = v2Su2.getNormSq();
+        final double minKNormSq = CROSS_PRODUCT_ZERO_THRESHOLD_SQUARED_FACTOR * v1Su1NormSq * v2Su2NormSq;
 
-    }
+        // If k is too small, try alternative vector combinations.
+        // This usually happens when the rotation axis is close to the plane of the vectors used.
+        if (kNormSq < minKNormSq) {
+            final Vector3D v3_adj = Vector3D.crossProduct(v1_adj, v2_adj);
+            final Vector3D v3Su3 = v3_adj.subtract(u3); // u3 = u1 x u2
+            double v3Su3NormSq = v3Su3.getNormSq();
+            k = v1Su1.crossProduct(v3Su3);
+            kNormSq = k.getNormSq();
 
-  }
+            if (kNormSq < CROSS_PRODUCT_ZERO_THRESHOLD_SQUARED_FACTOR * v1Su1NormSq * v3Su3NormSq) {
+                k = v2Su2.crossProduct(v3Su3);
+                kNormSq = k.getNormSq();
 
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
+                if (kNormSq < CROSS_PRODUCT_ZERO_THRESHOLD_SQUARED_FACTOR * v2Su2NormSq * v3Su3NormSq) {
+                    // All difference cross products are small. This implies u_i are close to v_i.
+                    // The only remaining problematic case is a 180-degree rotation (cosTheta = -1).
+                    // In this case, v1_adj = -u1. k = (-2u1) x (v2_adj - u2).
+                    // If v2_adj - u2 is parallel to u1, k is zero.
+                    if (cosTheta < (-1.0 + NORM_ZERO_THRESHOLD)) { // Check if angle is ~180 degrees
+                        // Axis is orthogonal to u1. Find a vector orthogonal to u1.
+                        // Example: u1 x w where w is a basis vector not parallel to u1.
+                        Vector3D w;
+                        double u1X2 = u1.getX() * u1.getX();
+                        double u1Y2 = u1.getY() * u1.getY();
+                        double u1Z2 = u1.getZ() * u1.getZ();
+                        // Protect against u1 being zero vector (already checked)
+                        // Choose w along axis with smallest u1 component projection squared
+                        if ((u1X2 <= u1Y2) && (u1X2 <= u1Z2)) {
+                            w = Vector3D.PLUS_I;
+                        } else if (u1Y2 <= u1Z2) {
+                            w = Vector3D.PLUS_J;
+                        } else {
+                            w = Vector3D.PLUS_K;
+                        }
+                        k = Vector3D.crossProduct(u1, w);
+                        kNormSq = k.getNormSq();
+                        // Check if u1 was parallel to w (should not happen with this choice if u1 is non-zero)
+                        if (kNormSq < CROSS_PRODUCT_ZERO_THRESHOLD_SQUARED_FACTOR * u1u1 * w.getNormSq()) {
+                           throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); // Cannot determine axis for 180 deg rotation
+                        }
+                    } else {
+                        // Angle is not 180 degrees, but k is still small. This implies identity rotation.
+                        // Should have been caught by sinHalfTheta check? Or numerical instability.
+                        // Assume identity if k is numerically zero and angle is not 180 deg.
+                         q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0; return;
+                    }
+                }
+            }
+        }
 
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+        // We have a non-zero vector k proportional to the axis. Normalize it.
+        Vector3D axis = k.normalize(); // normalize() should handle non-zero norm
 
+        // Compute vector part q = sin(theta/2) * axis
+        Vector3D qVec = axis.scalarMultiply(sinHalfTheta);
+        q1 = qVec.getX();
+        q2 = qVec.getY();
+        q3 = qVec.getZ();
+    }
 }
\ No newline at end of file
