diff --git a/tmp/efc69dd3-3f26-4a8c-baa4-2206bfef50b9_buggy.java b/tmp/235d97ce-f5e0-422c-8c60-3c2efd9e61a4_fixed.java
index 8da6fb2..f4840b4 100644
--- a/tmp/efc69dd3-3f26-4a8c-baa4-2206bfef50b9_buggy.java
+++ b/tmp/235d97ce-f5e0-422c-8c60-3c2efd9e61a4_fixed.java
@@ -1,163 +1,177 @@
     /**
      * Parse a date from ISO-8601 formatted string. It expects a format
      * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
      *
      * @param date ISO string to parse in the appropriate format.
      * @param pos The position to start parsing from, updated to where parsing stopped.
      * @return the parsed date
      * @throws ParseException if the date is not in the appropriate format
      */
     public static Date parse(String date, ParsePosition pos) throws ParseException {
         Exception fail = null;
         try {
             int offset = pos.getIndex();
 
             // extract year
             int year = parseInt(date, offset, offset += 4);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract month
             int month = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract day
             int day = parseInt(date, offset, offset += 2);
             // default time value
             int hour = 0;
             int minutes = 0;
             int seconds = 0;
             int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
             // if the value has no time component (and no time zone), we are done
             boolean hasT = checkOffset(date, offset, 'T');
 
             if (!hasT && (date.length() <= offset)) {
                 Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
                 pos.setIndex(offset);
                 return calendar.getTime();
             }
 
             if (hasT) {
 
                 // extract hours, minutes, seconds and milliseconds
                 hour = parseInt(date, offset += 1, offset += 2);
                 if (checkOffset(date, offset, ':')) {
                     offset += 1;
                 }
 
                 minutes = parseInt(date, offset, offset += 2);
                 if (checkOffset(date, offset, ':')) {
                     offset += 1;
                 }
                 // second and milliseconds can be optional
                 if (date.length() > offset) {
                     char c = date.charAt(offset);
                     if (c != 'Z' && c != '+' && c != '-') {
                         seconds = parseInt(date, offset, offset += 2);
                         if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
                         // milliseconds can be optional in the format
                         if (checkOffset(date, offset, '.')) {
                             offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
-                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
+                            int endOffset = indexOfNonDigit(date, offset + 1); // Find first non-digit
+                            int parseEndOffset = Math.min(endOffset, offset + 3); // Parse up to 3 digits
                             int fraction = parseInt(date, offset, parseEndOffset);
                             // compensate for "missing" digits
                             switch (parseEndOffset - offset) { // number of digits parsed
                                 case 2:
                                     milliseconds = fraction * 10;
                                     break;
                                 case 1:
                                     milliseconds = fraction * 100;
                                     break;
-                            default:
+                                default: // Case 3 or more digits, just use the first 3.
                                     milliseconds = fraction;
                             }
-                            offset = endOffset;
+                            offset = endOffset; // Advance past all fractional digits
                         }
                     }
                 }
             }
 
             // extract timezone
             if (date.length() <= offset) {
                 throw new IllegalArgumentException("No time zone indicator");
             }
 
-            TimeZone timezone = null;
+            TimeZone timezone;
             char timezoneIndicator = date.charAt(offset);
 
             if (timezoneIndicator == 'Z') {
                 timezone = TIMEZONE_UTC;
                 offset += 1;
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
                 String timezoneOffset = date.substring(offset);
+                // Store the original length to advance the offset later
+                int timezoneOffsetOriginalLength = timezoneOffset.length();
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
-
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+                // Normalize timezone offset
+                // Valid formats: +hh, +hhmm, +hh:mm
+                // Need to convert to GMT+hh:mm or GMT-hh:mm for TimeZone.getTimeZone
+                String normalizedTimezoneOffset;
+                if (timezoneOffset.equals("+0000") || timezoneOffset.equals("+00:00") ||
+                    timezoneOffset.equals("-0000") || timezoneOffset.equals("-00:00")) {
+                    // Special case for explicit UTC offsets
                     timezone = TIMEZONE_UTC;
+                    normalizedTimezoneOffset = "+00:00"; // Use a normalized form for consistency if needed
                 } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
+                    normalizedTimezoneOffset = timezoneOffset;
+                    // Append ":00" if the offset is in the format "+hh" or "-hh" (length 3)
+                    if (normalizedTimezoneOffset.length() == 3) {
+                        normalizedTimezoneOffset += ":00";
+                    }
+                    // Insert ":" if the offset is in the format "+hhmm" or "-hhmm" (length 5)
+                    else if (normalizedTimezoneOffset.length() == 5) {
+                        normalizedTimezoneOffset = normalizedTimezoneOffset.substring(0, 3) + ":" + normalizedTimezoneOffset.substring(3);
+                    }
 
+                    // Check if the resulting offset has the expected format "+/-hh:mm" (length 6)
+                    if (normalizedTimezoneOffset.length() != 6) {
+                        throw new IndexOutOfBoundsException("Invalid time zone indicator length: " + timezoneOffset);
+                    }
+
+                    // Construct the timezone ID and attempt to parse it
+                    String timezoneId = "GMT" + normalizedTimezoneOffset;
                     timezone = TimeZone.getTimeZone(timezoneId);
 
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
-                        }
+                    // Verify that TimeZone.getTimeZone successfully parsed the specific offset
+                    // It might return GMT (offset 0) for invalid IDs (e.g., GMT+99:99)
+                    String obtainedTimezoneId = timezone.getID();
+                    if (!obtainedTimezoneId.equals(timezoneId)) {
+                        // If the obtained ID doesn't match the requested ID, consider it a failure.
+                        // This handles cases where the offset format is valid but the value is out of range,
+                        // or other parsing issues where TimeZone.getTimeZone defaults to GMT.
+                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneOffset + " given, resolves to " + obtainedTimezoneId);
                     }
                 }
+                 // Advance the offset by the length of the original timezone string
+                 offset += timezoneOffsetOriginalLength;
+
             } else {
                 throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");
             }
 
             Calendar calendar = new GregorianCalendar(timezone);
             calendar.setLenient(false);
             calendar.set(Calendar.YEAR, year);
             calendar.set(Calendar.MONTH, month - 1);
             calendar.set(Calendar.DAY_OF_MONTH, day);
             calendar.set(Calendar.HOUR_OF_DAY, hour);
             calendar.set(Calendar.MINUTE, minutes);
             calendar.set(Calendar.SECOND, seconds);
             calendar.set(Calendar.MILLISECOND, milliseconds);
 
             pos.setIndex(offset);
             return calendar.getTime();
             // If we get a ParseException it'll already have the right message/offset.
             // Other exception types can convert here.
         } catch (IndexOutOfBoundsException e) {
             fail = e;
         } catch (NumberFormatException e) {
             fail = e;
         } catch (IllegalArgumentException e) {
             fail = e;
         }
         String input = (date == null) ? null : ('"' + date + "'");
         String msg = fail.getMessage();
         if (msg == null || msg.isEmpty()) {
             msg = "(" + fail.getClass().getName() + ")";
         }
         ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
         ex.initCause(fail);
         throw ex;
     }
\ No newline at end of file
