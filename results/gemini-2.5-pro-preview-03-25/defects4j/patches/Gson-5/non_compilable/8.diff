diff --git a/tmp/fcc9e7b3-ca96-41d2-9f67-b7e554388baa_buggy.java b/tmp/c2400c71-4cf8-4c68-aa91-81c35875160c_fixed.java
index 8da6fb2..2b3177e 100644
--- a/tmp/fcc9e7b3-ca96-41d2-9f67-b7e554388baa_buggy.java
+++ b/tmp/c2400c71-4cf8-4c68-aa91-81c35875160c_fixed.java
@@ -1,163 +1,226 @@
     /**
      * Parse a date from ISO-8601 formatted string. It expects a format
      * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
      *
      * @param date ISO string to parse in the appropriate format.
      * @param pos The position to start parsing from, updated to where parsing stopped.
      * @return the parsed date
      * @throws ParseException if the date is not in the appropriate format
      */
     public static Date parse(String date, ParsePosition pos) throws ParseException {
         Exception fail = null;
+        // Store the initial offset for potential error reporting
+        int initialOffset = pos.getIndex();
         try {
-            int offset = pos.getIndex();
+            int offset = initialOffset;
 
             // extract year
             int year = parseInt(date, offset, offset += 4);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract month
             int month = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract day
             int day = parseInt(date, offset, offset += 2);
             // default time value
             int hour = 0;
             int minutes = 0;
             int seconds = 0;
             int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
             // if the value has no time component (and no time zone), we are done
             boolean hasT = checkOffset(date, offset, 'T');
 
             if (!hasT && (date.length() <= offset)) {
                 Calendar calendar = new GregorianCalendar(year, month - 1, day);
-
+                // Note: Timezone is JVM default for date-only strings, consistent with ISO 8601 local time interpretation.
                 pos.setIndex(offset);
                 return calendar.getTime();
             }
 
             if (hasT) {
+                offset += 1; // Consume 'T'
 
                 // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
+                hour = parseInt(date, offset, offset += 2);
                 if (checkOffset(date, offset, ':')) {
                     offset += 1;
                 }
 
                 minutes = parseInt(date, offset, offset += 2);
                 if (checkOffset(date, offset, ':')) {
                     offset += 1;
                 }
                 // second and milliseconds can be optional
                 if (date.length() > offset) {
                     char c = date.charAt(offset);
                     if (c != 'Z' && c != '+' && c != '-') {
                         seconds = parseInt(date, offset, offset += 2);
-                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
+                        // ISO 8601 section 5.3.1.3 allows seconds 60 & 61 for leap seconds
+                        // Truncate leap seconds to 59
+                        if (seconds > 59 && seconds < 62) seconds = 59;
+
                         // milliseconds can be optional in the format
                         if (checkOffset(date, offset, '.')) {
                             offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
-                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
-                            int fraction = parseInt(date, offset, parseEndOffset);
-                            // compensate for "missing" digits
-                            switch (parseEndOffset - offset) { // number of digits parsed
+                            int endOffset = indexOfNonDigit(date, offset);
+                            if (endOffset == -1) {
+                                endOffset = date.length(); // Consume remaining digits
+                            }
+
+                            int parseBeginOffset = offset;
+                            // Limit parsing to 3 digits for milliseconds
+                            int parseEndOffset = Math.min(endOffset, offset + 3);
+
+                            if (parseBeginOffset < parseEndOffset) {
+                                int fraction = parseInt(date, parseBeginOffset, parseEndOffset);
+                                // compensate for "missing" digits based on actual number parsed
+                                switch (parseEndOffset - parseBeginOffset) { // number of digits parsed
                                 case 2:
                                     milliseconds = fraction * 10;
                                     break;
                                 case 1:
                                     milliseconds = fraction * 100;
                                     break;
-                            default:
+                                default: // 3 or more digits, use the parsed fraction (first 3 digits)
                                     milliseconds = fraction;
                                 }
+                            } else {
+                                // If dot is present, digits should follow. parseInt would fail if begin==end.
+                                // Throw explicitly? Or let parseInt fail? Let parseInt fail for consistency.
+                                // If parseInt allows empty string, add check:
+                                 if (parseBeginOffset >= endOffset) {
+                                     throw new NumberFormatException("No digits found after decimal point");
+                                 }
+                            }
+                            // Adjust offset to the end of the fractional second part (could be more than 3 digits)
                             offset = endOffset;
                         }
                     }
                 }
             }
 
             // extract timezone
             if (date.length() <= offset) {
-                throw new IllegalArgumentException("No time zone indicator");
+                // ISO 8601 requires timezone offset or Z if time part is present.
+                throw new IllegalArgumentException("Missing time zone indicator");
             }
 
-            TimeZone timezone = null;
+            TimeZone timezone;
             char timezoneIndicator = date.charAt(offset);
 
             if (timezoneIndicator == 'Z') {
-                timezone = TIMEZONE_UTC;
+                timezone = TIMEZONE_UTC; // Assume TIMEZONE_UTC = TimeZone.getTimeZone("UTC")
                 offset += 1;
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+                String timezoneOffsetStr = date.substring(offset);
+                int V0length = timezoneOffsetStr.length();
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+                // Validate and normalize the offset string to GMT[+|-]hh:mm format
+                String timezoneId;
+                int consumedOffsetLength;
 
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+                // Try matching [+-]hh:mm format (length 6)
+                if (V0length >= 6 && timezoneOffsetStr.charAt(3) == ':' &&
+                    Character.isDigit(timezoneOffsetStr.charAt(1)) && Character.isDigit(timezoneOffsetStr.charAt(2)) &&
+                    Character.isDigit(timezoneOffsetStr.charAt(4)) && Character.isDigit(timezoneOffsetStr.charAt(5)))
+                {
+                    timezoneId = "GMT" + timezoneOffsetStr.substring(0, 6);
+                    consumedOffsetLength = 6;
+                // Try matching [+-]hhmm format (length 5)
+                } else if (V0length >= 5 &&
+                           Character.isDigit(timezoneOffsetStr.charAt(1)) && Character.isDigit(timezoneOffsetStr.charAt(2)) &&
+                           Character.isDigit(timezoneOffsetStr.charAt(3)) && Character.isDigit(timezoneOffsetStr.charAt(4)))
+                {
+                    timezoneId = "GMT" + timezoneOffsetStr.substring(0, 3) + ":" + timezoneOffsetStr.substring(3, 5);
+                    consumedOffsetLength = 5;
+                // Try matching [+-]hh format (length 3)
+                } else if (V0length >= 3 &&
+                           Character.isDigit(timezoneOffsetStr.charAt(1)) && Character.isDigit(timezoneOffsetStr.charAt(2)))
+                {
+                    // Check for ambiguity: avoid parsing "+01" if it's actually "+0100" or "+01:00"
+                    // The previous checks for longer formats handle this. If we reach here, it must be exactly "+hh".
+                    // However, check if extra unexpected characters follow the "+hh".
+                    if (V0length > 3 && (Character.isDigit(timezoneOffsetStr.charAt(3)) || timezoneOffsetStr.charAt(3) == ':')) {
+                         throw new IndexOutOfBoundsException("Invalid character found after time zone offset hours: " + timezoneOffsetStr);
+                    }
+                    timezoneId = "GMT" + timezoneOffsetStr.substring(0, 3) + ":00";
+                    consumedOffsetLength = 3;
+                } else {
+                     // If none of the formats match
+                     throw new IndexOutOfBoundsException("Invalid time zone offset format or length: " + timezoneOffsetStr);
+                }
+
+                offset += consumedOffsetLength; // Consume the parsed timezone offset part
+
+                // Check for UTC offset (GMT+00:00 or GMT-00:00) which should resolve to UTC/GMT
+                if ("GMT+00:00".equals(timezoneId) || "GMT-00:00".equals(timezoneId)) {
                     timezone = TIMEZONE_UTC;
                 } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
-
                     timezone = TimeZone.getTimeZone(timezoneId);
-
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
+                    // Verify if the resolved timezone has the expected offset.
+                    // TimeZone.getTimeZone might return GMT for unknown IDs (e.g., "GMT+99:00").
+                    String resolvedId = timezone.getID();
+                    if (!resolvedId.equals(timezoneId)) {
+                        // If the ID was canonicalized (e.g., GMT+01 -> GMT+01:00), it's okay if the offset matches.
+                        // But if resolvedId is "GMT", it means the input ID was likely invalid.
+                        TimeZone expectedTimezone = TimeZone.getTimeZone(timezoneId); // Get expected timezone again for offset comparison
+                        if (resolvedId.equals("GMT") || timezone.getRawOffset() != expectedTimezone.getRawOffset()) {
+                            throw new IndexOutOfBoundsException("Invalid or unsupported time zone offset: " + timezoneOffsetStr + ", resolves to " + resolvedId);
                         }
                     }
                 }
             } else {
-                throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+                // Use absolute index in error message
+                throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "' at index " + offset);
             }
 
             Calendar calendar = new GregorianCalendar(timezone);
             calendar.setLenient(false);
             calendar.set(Calendar.YEAR, year);
-            calendar.set(Calendar.MONTH, month - 1);
+            calendar.set(Calendar.MONTH, month - 1); // Calendar month is 0-based
             calendar.set(Calendar.DAY_OF_MONTH, day);
             calendar.set(Calendar.HOUR_OF_DAY, hour);
             calendar.set(Calendar.MINUTE, minutes);
             calendar.set(Calendar.SECOND, seconds);
             calendar.set(Calendar.MILLISECOND, milliseconds);
 
-            pos.setIndex(offset);
+            pos.setIndex(offset); // Update position to where parsing stopped successfully
             return calendar.getTime();
-            // If we get a ParseException it'll already have the right message/offset.
-            // Other exception types can convert here.
-        } catch (IndexOutOfBoundsException e) {
+
+        } catch (IndexOutOfBoundsException | NumberFormatException | IllegalArgumentException e) {
+            // Catch parsing exceptions
             fail = e;
-        } catch (NumberFormatException e) {
-            fail = e;
-        } catch (IllegalArgumentException e) {
-            fail = e;
-        }
-        String input = (date == null) ? null : ('"' + date + "'");
-        String msg = fail.getMessage();
-        if (msg == null || msg.isEmpty()) {
-            msg = "("+fail.getClass().getName()+")";
         }
-        ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
+
+        // Constructing the error message if parsing failed
+        String input = (date == null) ? null : ('"' + date + '"');
+        String failMsg = (fail.getMessage() == null || fail.getMessage().isEmpty())
+                          ? "(" + fail.getClass().getName() + ")"
+                          : fail.getMessage();
+
+        // Error index: Use the original offset provided in ParsePosition.
+        // This matches the behavior of standard Java date parsing which reports
+        // the index where parsing started. More precise error index reporting
+        // would require more complex error handling within the try block.
+        int errorIndex = initialOffset;
+
+        ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + failMsg, errorIndex);
         ex.initCause(fail);
         throw ex;
     }
+
+    /* Assume helper methods and constants like TIMEZONE_UTC, parseInt, checkOffset, indexOfNonDigit
+     * are defined elsewhere in the same class or are accessible.
+     *
+     * private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
+     * private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException { ... }
+     * private static boolean checkOffset(String value, int offset, char expected) { ... }
+     * private static int indexOfNonDigit(String string, int offset) { ... }
+     */
\ No newline at end of file
