diff --git a/tmp/93e16b80-e65a-48d2-a23a-81561013bcbc_buggy.java b/tmp/514538a9-225e-43db-8c57-fee6051b506c_fixed.java
index 8da6fb2..1d9056b 100644
--- a/tmp/93e16b80-e65a-48d2-a23a-81561013bcbc_buggy.java
+++ b/tmp/514538a9-225e-43db-8c57-fee6051b506c_fixed.java
@@ -1,163 +1,237 @@
     /**
      * Parse a date from ISO-8601 formatted string. It expects a format
      * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
      *
      * @param date ISO string to parse in the appropriate format.
      * @param pos The position to start parsing from, updated to where parsing stopped.
      * @return the parsed date
      * @throws ParseException if the date is not in the appropriate format
      */
     public static Date parse(String date, ParsePosition pos) throws ParseException {
         Exception fail = null;
         try {
             int offset = pos.getIndex();
 
             // extract year
             int year = parseInt(date, offset, offset += 4);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract month
             int month = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract day
             int day = parseInt(date, offset, offset += 2);
             // default time value
             int hour = 0;
             int minutes = 0;
             int seconds = 0;
             int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
             // if the value has no time component (and no time zone), we are done
             boolean hasT = checkOffset(date, offset, 'T');
 
             if (!hasT && (date.length() <= offset)) {
                 Calendar calendar = new GregorianCalendar(year, month - 1, day);
-
+                // Note: This uses the default local timezone. ISO 8601 without a TZ is ambiguous.
                 pos.setIndex(offset);
                 return calendar.getTime();
             }
 
             if (hasT) {
-
+                offset += 1; // Skip 'T'
                 // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
+                // Support for hhmmss format (no colons)
+                int hourEndOffset = offset + 2;
+                hour = parseInt(date, offset, hourEndOffset);
+                offset = hourEndOffset; // Move offset past hour
+
                 if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                    offset += 1; // Skip ':'
                 }
 
-                minutes = parseInt(date, offset, offset += 2);
+                int minEndOffset = offset + 2;
+                minutes = parseInt(date, offset, minEndOffset);
+                offset = minEndOffset; // Move offset past minutes
+
                 if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                    offset += 1; // Skip ':'
                 }
+
                 // second and milliseconds can be optional
                 if (date.length() > offset) {
                     char c = date.charAt(offset);
+                    // Check if the next char is not a timezone indicator (Z, +, -)
                     if (c != 'Z' && c != '+' && c != '-') {
-                        seconds = parseInt(date, offset, offset += 2);
-                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
+                        int secEndOffset = offset + 2;
+                        seconds = parseInt(date, offset, secEndOffset);
+                        offset = secEndOffset; // Move offset past seconds
+
+                        // The spec allows seconds up to 60 (for leap seconds), but Java Date/Calendar typically don't support it.
+                        // Truncate leap seconds 60, 61, 62 to 59
+                        if (seconds > 59 && seconds < 63) seconds = 59;
+
                         // milliseconds can be optional in the format
                         if (checkOffset(date, offset, '.')) {
-                            offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
-                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
+                            offset += 1; // Skip '.'
+                            int endOffset = indexOfNonDigit(date, offset); // Find end of digits
+                             // Allow variable number of ms digits, but parse up to 3 for precision
+                            int parseEndOffset = Math.min(endOffset, offset + 3);
+                            if (offset < parseEndOffset) { // Check if any digits exist
                                 int fraction = parseInt(date, offset, parseEndOffset);
-                            // compensate for "missing" digits
+                                // compensate for "missing" digits based on how many were parsed
                                 switch (parseEndOffset - offset) { // number of digits parsed
                                 case 2:
                                     milliseconds = fraction * 10;
                                     break;
                                 case 1:
                                     milliseconds = fraction * 100;
                                     break;
-                            default:
+                                default: // 3 or more digits parsed
                                     milliseconds = fraction;
                                 }
-                            offset = endOffset;
+                            } else {
+                                // Handle case like "..." or ".Z" - invalid format
+                                throw new NumberFormatException("Missing digits after milliseconds separator '.'");
+                            }
+                            offset = endOffset; // Move offset past all fractional digits
                         }
                     }
                 }
             }
 
             // extract timezone
             if (date.length() <= offset) {
-                throw new IllegalArgumentException("No time zone indicator");
+                // ISO 8601 requires timezone information if time is present.
+                throw new IllegalArgumentException("Missing time zone indicator");
             }
 
-            TimeZone timezone = null;
+            TimeZone timezone;
             char timezoneIndicator = date.charAt(offset);
 
             if (timezoneIndicator == 'Z') {
-                timezone = TIMEZONE_UTC;
+                // Use final constant TIMEZONE_UTC if available and correct, otherwise get UTC instance.
+                timezone = TimeZone.getTimeZone("UTC");
                 offset += 1;
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+                String timezoneOffsetStr = date.substring(offset);
+                int consumedLength; // How many characters were consumed for the timezone offset
+                String timezoneId; // The ID string passed to TimeZone.getTimeZone
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
-
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
-                    timezone = TIMEZONE_UTC;
+                // Check for [+-]hh:mm (6 chars: sign, hh, :, mm)
+                if (timezoneOffsetStr.length() >= 6 && timezoneOffsetStr.charAt(3) == ':') {
+                    // Basic validation for digits
+                    if (!Character.isDigit(timezoneOffsetStr.charAt(1)) || !Character.isDigit(timezoneOffsetStr.charAt(2)) ||
+                        !Character.isDigit(timezoneOffsetStr.charAt(4)) || !Character.isDigit(timezoneOffsetStr.charAt(5))) {
+                         throw new IndexOutOfBoundsException("Invalid time zone offset format: " + timezoneOffsetStr.substring(0, 6));
+                    }
+                    timezoneId = "GMT" + timezoneOffsetStr.substring(0, 6);
+                    consumedLength = 6;
+                // Check for [+-]hhmm (5 chars: sign, hh, mm)
+                } else if (timezoneOffsetStr.length() >= 5 && Character.isDigit(timezoneOffsetStr.charAt(1)) && Character.isDigit(timezoneOffsetStr.charAt(2)) && Character.isDigit(timezoneOffsetStr.charAt(3)) && Character.isDigit(timezoneOffsetStr.charAt(4))) {
+                    timezoneId = "GMT" + timezoneOffsetStr.substring(0, 5);
+                    consumedLength = 5;
+                 // Check for [+-]hh (3 chars: sign, hh) - This is valid in ISO 8601
+                } else if (timezoneOffsetStr.length() >= 3 && Character.isDigit(timezoneOffsetStr.charAt(1)) && Character.isDigit(timezoneOffsetStr.charAt(2))) {
+                    // Normalize to GMT[+-]hh:00 for TimeZone.getTimeZone, as it might not handle GMT[+-]hh directly.
+                    timezoneId = "GMT" + timezoneOffsetStr.substring(0, 3) + ":00";
+                    consumedLength = 3;
                 } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
+                    // Throw specific exception about format if length/pattern doesn't match expected ones
+                    throw new IndexOutOfBoundsException("Invalid time zone offset format starting at index " + offset + ": " + timezoneOffsetStr);
+                }
 
                 timezone = TimeZone.getTimeZone(timezoneId);
+                String actualId = timezone.getID();
 
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
+                // Verification steps:
+                // 1. TimeZone.getTimeZone might return "GMT" if the ID is not recognized.
+                // Check if it defaulted to GMT incorrectly (i.e., timezoneId wasn't GMT+/-00:00 or equivalent).
+                if (actualId.equals("GMT") && !timezoneId.matches("GMT[+-]00:?00")) {
+                     throw new IndexOutOfBoundsException("Failed to parse timezone ID: '" + timezoneId + "' resulted in GMT default");
                 }
+
+                // 2. Verify that the raw offset of the obtained TimeZone matches the offset specified in the input string.
+                // This handles cases where TimeZone.getTimeZone canonicalizes the ID (e.g., GMT+0100 -> GMT+01:00)
+                // or accepts slightly different formats.
+
+                // Extract the numerical offset part actually consumed from the date string
+                String offsetPart = date.substring(offset, offset + consumedLength);
+
+                // Calculate expected offset in milliseconds from offsetPart
+                int sign = offsetPart.charAt(0) == '+' ? 1 : -1;
+                int hours, minutes;
+                try {
+                    // Use the provided parseInt helper if robust, otherwise Integer.parseInt
+                    if (consumedLength == 6) { // [+-]hh:mm
+                       hours = parseInt(offsetPart, 1, 3); // hh
+                       minutes = parseInt(offsetPart, 4, 6); // mm
+                    } else if (consumedLength == 5) { // [+-]hhmm
+                       hours = parseInt(offsetPart, 1, 3); // hh
+                       minutes = parseInt(offsetPart, 3, 5); // mm
+                    } else { // [+-]hh (consumedLength == 3)
+                       hours = parseInt(offsetPart, 1, 3); // hh
+                       minutes = 0; // ISO 8601 implies :00 for the hh format
+                    }
+                } catch (NumberFormatException nfe) {
+                    throw new IndexOutOfBoundsException("Invalid numeric characters in time zone offset: " + offsetPart);
                 }
+
+                int expectedOffsetMillis = sign * (hours * 3600 * 1000 + minutes * 60 * 1000);
+
+                if (timezone.getRawOffset() != expectedOffsetMillis) {
+                     // This might indicate an issue with TimeZone.getTimeZone or an invalid input format slipped through
+                     throw new IndexOutOfBoundsException("Mismatching time zone indicator: Parsed offset " + offsetPart
+                            + " resulted in TimeZone " + actualId + " with raw offset " + timezone.getRawOffset() + ", but expected offset " + expectedOffsetMillis);
                 }
+
+                // If all checks pass, update the main offset
+                offset += consumedLength;
+
             } else {
-                throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+                // Character is not Z, +, or -
+                throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "' at index " + offset);
             }
 
             Calendar calendar = new GregorianCalendar(timezone);
             calendar.setLenient(false);
             calendar.set(Calendar.YEAR, year);
-            calendar.set(Calendar.MONTH, month - 1);
+            calendar.set(Calendar.MONTH, month - 1); // Calendar month is 0-based
             calendar.set(Calendar.DAY_OF_MONTH, day);
             calendar.set(Calendar.HOUR_OF_DAY, hour);
             calendar.set(Calendar.MINUTE, minutes);
             calendar.set(Calendar.SECOND, seconds);
             calendar.set(Calendar.MILLISECOND, milliseconds);
 
-            pos.setIndex(offset);
+            pos.setIndex(offset); // Update position to indicate how much of the string was successfully parsed
             return calendar.getTime();
-            // If we get a ParseException it'll already have the right message/offset.
-            // Other exception types can convert here.
-        } catch (IndexOutOfBoundsException e) {
-            fail = e;
-        } catch (NumberFormatException e) {
-            fail = e;
-        } catch (IllegalArgumentException e) {
+
+        } catch (IndexOutOfBoundsException | NumberFormatException | IllegalArgumentException e) {
+            // Catch specific exceptions that indicate parsing failures
             fail = e;
         }
-        String input = (date == null) ? null : ('"' + date + "'");
-        String msg = fail.getMessage();
+        // Format the final error message for ParseException
+        String input = (date == null) ? null : ('"' + date + '"');
+        String msg = (fail != null) ? fail.getMessage() : "Unknown error";
         if (msg == null || msg.isEmpty()) {
+            // Provide fallback message if exception message is missing
             msg = "(" + fail.getClass().getName() + ")";
         }
+        // Create ParseException with the error message and the index where the error occurred.
+        // pos.getIndex() should ideally point to the failure location.
         ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
+        if (fail != null) { // Preserve the original exception cause
              ex.initCause(fail);
+        }
         throw ex;
     }
+
+    // Assume these helper methods are available and correct within the same class or context.
+    // private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException { ... }
+    // private static boolean checkOffset(String value, int offset, char expected) { ... }
+    // private static int indexOfNonDigit(String string, int offset) { ... }
+    // private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
\ No newline at end of file
