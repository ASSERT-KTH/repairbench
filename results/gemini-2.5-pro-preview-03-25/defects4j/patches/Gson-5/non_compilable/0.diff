diff --git a/tmp/ec56997e-8fe5-4471-8e3f-d850c6afa58c_buggy.java b/tmp/3ebfbf2c-8789-400d-8645-8615b87f5be9_fixed.java
index 8da6fb2..30eecef 100644
--- a/tmp/ec56997e-8fe5-4471-8e3f-d850c6afa58c_buggy.java
+++ b/tmp/3ebfbf2c-8789-400d-8645-8615b87f5be9_fixed.java
@@ -1,163 +1,231 @@
+import java.text.ParseException;
+import java.text.ParsePosition;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.TimeZone;
+
+// Assume helper methods parseInt, checkOffset, indexOfNonDigit are available and correct.
+// Assume TIMEZONE_UTC is defined as TimeZone.getTimeZone("UTC").
+// The following class structure is just for encapsulating the method.
+class DateUtil {
+    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
+
+    // Assume these helper methods exist and are implemented correctly elsewhere
+    private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {
+         return Integer.parseInt(value.substring(beginIndex, endIndex));
+    }
+    private static boolean checkOffset(String value, int offset, char expected) {
+        return (offset < value.length()) && (value.charAt(offset) == expected);
+    }
+    private static int indexOfNonDigit(String string, int offset) {
+        for (int i = offset; i < string.length(); i++) {
+            if (!Character.isDigit(string.charAt(i))) {
+                return i;
+            }
+        }
+        return string.length();
+    }
+
+
     /**
      * Parse a date from ISO-8601 formatted string. It expects a format
      * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
      *
      * @param date ISO string to parse in the appropriate format.
      * @param pos The position to start parsing from, updated to where parsing stopped.
      * @return the parsed date
      * @throws ParseException if the date is not in the appropriate format
      */
     public static Date parse(String date, ParsePosition pos) throws ParseException {
         Exception fail = null;
         try {
             int offset = pos.getIndex();
 
             // extract year
+            if (date.length() < offset + 4) throw new StringIndexOutOfBoundsException("Expected 'yyyy' at index " + offset);
             int year = parseInt(date, offset, offset += 4);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract month
+            if (date.length() < offset + 2) throw new StringIndexOutOfBoundsException("Expected 'MM' at index " + offset);
             int month = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract day
+            if (date.length() < offset + 2) throw new StringIndexOutOfBoundsException("Expected 'dd' at index " + offset);
             int day = parseInt(date, offset, offset += 2);
             // default time value
             int hour = 0;
             int minutes = 0;
             int seconds = 0;
             int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
             // if the value has no time component (and no time zone), we are done
             boolean hasT = checkOffset(date, offset, 'T');
 
             if (!hasT && (date.length() <= offset)) {
                 Calendar calendar = new GregorianCalendar(year, month - 1, day);
-
+                // Note: Uses default timezone. Consider UTC if standard requires.
                 pos.setIndex(offset);
                 return calendar.getTime();
             }
 
             if (hasT) {
+                offset += 1; // Consume 'T'
 
-                // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
+                // Expect hh
+                if (date.length() < offset + 2) throw new StringIndexOutOfBoundsException("Expected 'hh' after 'T' at index " + offset);
+                hour = parseInt(date, offset, offset += 2);
                 if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                    offset += 1; // Consume optional ':' separator
                 }
 
+                // Expect mm
+                if (date.length() < offset + 2) throw new StringIndexOutOfBoundsException("Expected 'mm' after 'hh' at index " + offset);
                 minutes = parseInt(date, offset, offset += 2);
+
+                // Optional :ss[.sss]
+                // Check if the next character exists and is a colon before proceeding.
                 if (checkOffset(date, offset, ':')) {
-                    offset += 1;
-                }
-                // second and milliseconds can be optional
-                if (date.length() > offset) {
-                    char c = date.charAt(offset);
-                    if (c != 'Z' && c != '+' && c != '-') {
+                    offset += 1; // Consume ':'
+                    // Check if there's room for 'ss'
+                    // Need to ensure we don't parse timezone Z or +/- as seconds
+                    if (date.length() >= offset + 2 && Character.isDigit(date.charAt(offset))) {
                         seconds = parseInt(date, offset, offset += 2);
-                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
-                        // milliseconds can be optional in the format
+                        if (seconds > 59 && seconds < 63) seconds = 59; // Handle leap seconds by truncating
+
+                        // Optional .sss
                         if (checkOffset(date, offset, '.')) {
-                            offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
-                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
-                            int fraction = parseInt(date, offset, parseEndOffset);
-                            // compensate for "missing" digits
-                            switch (parseEndOffset - offset) { // number of digits parsed
-                            case 2:
-                                milliseconds = fraction * 10;
-                                break;
-                            case 1:
-                                milliseconds = fraction * 100;
-                                break;
-                            default:
-                                milliseconds = fraction;
+                            offset += 1; // Consume '.'
+                            int startMillisOffset = offset;
+                            int endMillisOffset = indexOfNonDigit(date, offset);
+                            if (endMillisOffset == startMillisOffset) { // No digits found
+                                throw new NumberFormatException("Missing fractional second digits after '.'");
                             }
-                            offset = endOffset;
+
+                            // Limit parsing to 3 digits for milliseconds
+                            int parseEndOffset = Math.min(endMillisOffset, startMillisOffset + 3);
+
+                            int fraction = parseInt(date, startMillisOffset, parseEndOffset);
+
+                            // Scale to milliseconds based on the number of digits parsed
+                            switch (parseEndOffset - startMillisOffset) {
+                                case 1: milliseconds = fraction * 100; break;
+                                case 2: milliseconds = fraction * 10; break;
+                                default: milliseconds = fraction; // 3 digits were parsed
                             }
+                            offset = endMillisOffset; // Update offset to after all fractional digits
                         }
                     }
+                    // If not digits after ':', it could be timezone indicator Z, +, - (handled below)
                 }
+            } // End of time parsing if(hasT)
 
-            // extract timezone
+            // extract timezone Z, +hh:mm, +hhmm, +hh
             if (date.length() <= offset) {
-                throw new IllegalArgumentException("No time zone indicator");
+                // If 'T' was present, timezone is required.
+                // Original code threw: throw new IllegalArgumentException("No time zone indicator");
+                 throw new IllegalArgumentException("Missing time zone indicator");
              }
 
-            TimeZone timezone = null;
+            TimeZone timezone;
             char timezoneIndicator = date.charAt(offset);
 
             if (timezoneIndicator == 'Z') {
                 timezone = TIMEZONE_UTC;
                 offset += 1;
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+                String timezoneOffsetStr = date.substring(offset); // Grab the potential offset string
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+                String parsedOffsetStr; // The actual +/-hh:mm or +/-hhmm or +/-hh part
+                int offsetLen; // Length of the parsed offset string
 
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+                // Determine format and length, with digit checks
+                if (timezoneOffsetStr.length() >= 6 && timezoneOffsetStr.charAt(3) == ':' &&
+                    Character.isDigit(timezoneOffsetStr.charAt(1)) && Character.isDigit(timezoneOffsetStr.charAt(2)) &&
+                    Character.isDigit(timezoneOffsetStr.charAt(4)) && Character.isDigit(timezoneOffsetStr.charAt(5))) { // Format ±hh:mm
+                    parsedOffsetStr = timezoneOffsetStr.substring(0, 6);
+                    offsetLen = 6;
+                } else if (timezoneOffsetStr.length() >= 5 &&
+                           Character.isDigit(timezoneOffsetStr.charAt(1)) && Character.isDigit(timezoneOffsetStr.charAt(2)) &&
+                           Character.isDigit(timezoneOffsetStr.charAt(3)) && Character.isDigit(timezoneOffsetStr.charAt(4))) { // Format ±hhmm
+                    parsedOffsetStr = timezoneOffsetStr.substring(0, 5);
+                    offsetLen = 5;
+                } else if (timezoneOffsetStr.length() >= 3 &&
+                           Character.isDigit(timezoneOffsetStr.charAt(1)) && Character.isDigit(timezoneOffsetStr.charAt(2))) { // Format ±hh
+                    parsedOffsetStr = timezoneOffsetStr.substring(0, 3);
+                    offsetLen = 3;
+                } else {
+                    throw new IllegalArgumentException("Invalid time zone offset format: " + timezoneOffsetStr);
+                }
+
+                // Check for zero offset variations
+                boolean isZero = "+0000".equals(parsedOffsetStr) || "+00:00".equals(parsedOffsetStr) || "+00".equals(parsedOffsetStr) ||
+                                 "-0000".equals(parsedOffsetStr) || "-00:00".equals(parsedOffsetStr) || "-00".equals(parsedOffsetStr);
+
+                if (isZero) {
                     timezone = TIMEZONE_UTC;
                 } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
-
+                    // Use "GMT" prefix for custom time zones with offsets
+                    String timezoneId = "GMT" + parsedOffsetStr;
                     timezone = TimeZone.getTimeZone(timezoneId);
 
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
-                        }
+                    // Verify TimeZone.getTimeZone didn't silently fail by returning GMT for a non-zero offset input
+                    // TimeZone.getTimeZone returns "GMT" (with 0 offset) for unrecognized IDs like "GMT+99:00"
+                    // Check if the ID is exactly "GMT" and the raw offset is zero. This indicates failure for non-zero inputs.
+                    if (timezone.getID().equals("GMT") && timezone.getRawOffset() == 0) {
+                         throw new IllegalArgumentException("Invalid or unrecognized time zone offset: " + parsedOffsetStr);
                     }
+                    // Note: TimeZone.getTimeZone("GMT+01") returns a TimeZone with ID "GMT+01:00".
+                    // The check above works because invalid offsets like "GMT+99" result in ID "GMT" and offset 0.
+                    // Valid offsets like "GMT+01" result in a non-"GMT" ID (e.g., "GMT+01:00") or the correct non-zero raw offset.
                 }
+                offset += offsetLen; // Consume the parsed timezone offset part
             } else {
+                 // Original code used IndexOutOfBoundsException for invalid char
                  throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
             }
 
             Calendar calendar = new GregorianCalendar(timezone);
             calendar.setLenient(false);
             calendar.set(Calendar.YEAR, year);
-            calendar.set(Calendar.MONTH, month - 1);
+            calendar.set(Calendar.MONTH, month - 1); // Calendar month is 0-based
             calendar.set(Calendar.DAY_OF_MONTH, day);
             calendar.set(Calendar.HOUR_OF_DAY, hour);
             calendar.set(Calendar.MINUTE, minutes);
             calendar.set(Calendar.SECOND, seconds);
             calendar.set(Calendar.MILLISECOND, milliseconds);
 
-            pos.setIndex(offset);
+            pos.setIndex(offset); // Update position to where parsing stopped
             return calendar.getTime();
-            // If we get a ParseException it'll already have the right message/offset.
-            // Other exception types can convert here.
+
         } catch (IndexOutOfBoundsException e) {
             fail = e;
         } catch (NumberFormatException e) {
             fail = e;
         } catch (IllegalArgumentException e) {
             fail = e;
+        } catch (StringIndexOutOfBoundsException e) { // Catch specific bounds exception from parsing checks
+             fail = e;
         }
-        String input = (date == null) ? null : ('"' + date + "'");
-        String msg = fail.getMessage();
+        // Convert any caught exception to ParseException
+        String input = (date == null) ? null : ('"' + date + '"');
+        // Ensure fail is not null before getting message
+        String msg = (fail != null) ? fail.getMessage() : "Unknown error during parsing";
         if (msg == null || msg.isEmpty()) {
-            msg = "("+fail.getClass().getName()+")";
+            // Provide fallback message including exception class if message is null/empty
+            msg = "(" + (fail != null ? fail.getClass().getName() : "Unknown Exception") + ")";
         }
+        // Set error index to where parsing failed (current value of pos.getIndex())
         ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
+        if (fail != null) {
              ex.initCause(fail);
+        }
         throw ex;
     }
+}
\ No newline at end of file
