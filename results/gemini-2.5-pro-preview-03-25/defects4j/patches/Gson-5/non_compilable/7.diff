diff --git a/tmp/f513a118-e47b-4c78-83df-c4b4b3db541e_buggy.java b/tmp/01879317-decb-4522-b57b-6937a0f87e82_fixed.java
index 8da6fb2..1952cf8 100644
--- a/tmp/f513a118-e47b-4c78-83df-c4b4b3db541e_buggy.java
+++ b/tmp/01879317-decb-4522-b57b-6937a0f87e82_fixed.java
@@ -1,163 +1,251 @@
     /**
      * Parse a date from ISO-8601 formatted string. It expects a format
      * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
      *
      * @param date ISO string to parse in the appropriate format.
      * @param pos The position to start parsing from, updated to where parsing stopped.
      * @return the parsed date
      * @throws ParseException if the date is not in the appropriate format
      */
     public static Date parse(String date, ParsePosition pos) throws ParseException {
+        // Define TIMEZONE_UTC if not already available (e.g., via static import)
+        // Assuming it's available in the original class context.
+        // final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
+
         Exception fail = null;
         try {
             int offset = pos.getIndex();
 
             // extract year
             int year = parseInt(date, offset, offset += 4);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract month
             int month = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract day
             int day = parseInt(date, offset, offset += 2);
             // default time value
             int hour = 0;
             int minutes = 0;
             int seconds = 0;
             int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
             // if the value has no time component (and no time zone), we are done
             boolean hasT = checkOffset(date, offset, 'T');
 
             if (!hasT && (date.length() <= offset)) {
                 Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
                 pos.setIndex(offset);
                 return calendar.getTime();
             }
 
             if (hasT) {
+                // Skip 'T'
+                offset += 1;
 
                 // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
+                hour = parseInt(date, offset, offset += 2);
                 if (checkOffset(date, offset, ':')) {
                     offset += 1;
                 }
 
                 minutes = parseInt(date, offset, offset += 2);
                 if (checkOffset(date, offset, ':')) {
                     offset += 1;
                 }
                 // second and milliseconds can be optional
                 if (date.length() > offset) {
                     char c = date.charAt(offset);
                     if (c != 'Z' && c != '+' && c != '-') {
                         seconds = parseInt(date, offset, offset += 2);
                         if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
                         // milliseconds can be optional in the format
                         if (checkOffset(date, offset, '.')) {
                             offset += 1;
                             int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                            if (endOffset == -1) { // Handle case where digits are till the end
+                                endOffset = date.length();
+                            }
                             int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                             int fraction = parseInt(date, offset, parseEndOffset);
                             // compensate for "missing" digits
                             switch (parseEndOffset - offset) { // number of digits parsed
                             case 2:
                                 milliseconds = fraction * 10;
                                 break;
                             case 1:
                                 milliseconds = fraction * 100;
                                 break;
                             default:
                                 milliseconds = fraction;
                             }
                             offset = endOffset;
                         }
                     }
                 }
             }
 
             // extract timezone
             if (date.length() <= offset) {
                 throw new IllegalArgumentException("No time zone indicator");
             }
 
-            TimeZone timezone = null;
+            TimeZone timezone;
             char timezoneIndicator = date.charAt(offset);
 
             if (timezoneIndicator == 'Z') {
-                timezone = TIMEZONE_UTC;
+                // Assuming TIMEZONE_UTC is defined elsewhere, e.g., static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
+                timezone = Iso8601Utils.TIMEZONE_UTC; // Use the actual constant name from the class context
                 offset += 1;
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+                String timezoneOffsetStr = date.substring(offset);
+                String timezoneId;
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+                // The ISO8601 standard allows for formats +hh:mm, +hhmm, and +hh.
+                // java.util.TimeZone.getTimeZone requires "GMT[+-]hh:mm".
 
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
-                    timezone = TIMEZONE_UTC;
-                } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
+                // Ensure minimal length for timezone offset (+hh)
+                if (timezoneOffsetStr.length() < 3) {
+                     throw new IndexOutOfBoundsException("Invalid time zone indicator " + timezoneOffsetStr);
+                }
+
+                // Check for +hh:mm format
+                if (timezoneOffsetStr.length() >= 6 && timezoneOffsetStr.charAt(3) == ':') {
+                   timezoneId = "GMT" + timezoneOffsetStr.substring(0, 6);
+                   offset += 6;
+                }
+                // Check for +hhmm format
+                else if (timezoneOffsetStr.length() >= 5) {
+                    timezoneId = "GMT" + timezoneOffsetStr.substring(0, 3) + ":" + timezoneOffsetStr.substring(3, 5);
+                    offset += 5;
+                }
+                // Check for +hh format
+                else {
+                    timezoneId = "GMT" + timezoneOffsetStr.substring(0, 3) + ":00";
+                    offset += 3;
+                }
 
                 timezone = TimeZone.getTimeZone(timezoneId);
-
                 String act = timezone.getID();
+
+                // Verify that the parsed timezone ID is valid and matches what we constructed.
+                // TimeZone.getTimeZone returns "GMT" for invalid IDs or offset 0.
                 if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
+                    // Handle the case where GMT+00:00 or GMT-00:00 resolves to just "GMT"
+                    boolean isGmtZero = (timezoneId.equals("GMT+00:00") || timezoneId.equals("GMT-00:00")) && act.equals("GMT");
+                    if (!isGmtZero) {
+                        // The original code compared cleaned versions for robustness against minor format differences.
+                        String cleanedId = timezoneId.replace(":", "");
+                        String cleanedAct = act.replace(":", "");
+                        if (!cleanedId.equals(cleanedAct)) {
                              throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
+                                     +timezone.getID() + " for input " + timezoneOffsetStr);
                         }
                     }
                 }
             } else {
                 throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");
             }
 
             Calendar calendar = new GregorianCalendar(timezone);
             calendar.setLenient(false);
             calendar.set(Calendar.YEAR, year);
             calendar.set(Calendar.MONTH, month - 1);
             calendar.set(Calendar.DAY_OF_MONTH, day);
             calendar.set(Calendar.HOUR_OF_DAY, hour);
             calendar.set(Calendar.MINUTE, minutes);
             calendar.set(Calendar.SECOND, seconds);
             calendar.set(Calendar.MILLISECOND, milliseconds);
 
             pos.setIndex(offset);
             return calendar.getTime();
             // If we get a ParseException it'll already have the right message/offset.
             // Other exception types can convert here.
         } catch (IndexOutOfBoundsException e) {
             fail = e;
         } catch (NumberFormatException e) {
             fail = e;
         } catch (IllegalArgumentException e) {
             fail = e;
         }
         String input = (date == null) ? null : ('"' + date + "'");
-        String msg = fail.getMessage();
+        String msg = (fail != null) ? fail.getMessage() : "Unknown error";
         if (msg == null || msg.isEmpty()) {
             msg = "(" + fail.getClass().getName() + ")";
         }
         ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
         ex.initCause(fail);
         throw ex;
     }
+
+    // Helper methods used by parse (assuming they exist in the original class)
+
+    /**
+     * Check if the expected character exist at the given offset in the value.
+     *
+     * @param value the string to check at the specified offset
+     * @param offset the offset to look for the expected character
+     * @param expected the expected character
+     * @return true if the character is found
+     */
+    private static boolean checkOffset(String value, int offset, char expected) {
+        return (offset < value.length()) && (value.charAt(offset) == expected);
+    }
+
+    /**
+     * Parse an integer located between 2 given offsets in a string
+     *
+     * @param value the string to parse
+     * @param beginIndex the start index for the integer in the string
+     * @param endIndex the end index for the integer in the string
+     * @return the int
+     * @throws NumberFormatException if the value is not a number
+     */
+    private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {
+        if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {
+            throw new NumberFormatException(value);
+        }
+        // use same logic as in Integer.parseInt() but avoid creating substrings
+        int i = beginIndex;
+        int result = 0;
+        int digit;
+
+        if (i < endIndex) {
+            digit = Character.digit(value.charAt(i++), 10);
+            if (digit < 0) {
+                throw new NumberFormatException("Invalid number: " + value.substring(beginIndex, endIndex));
+            }
+            result = -digit;
+        }
+
+        while (i < endIndex) {
+            digit = Character.digit(value.charAt(i++), 10);
+            if (digit < 0) {
+                throw new NumberFormatException("Invalid number: " + value.substring(beginIndex, endIndex));
+            }
+            result *= 10;
+            result -= digit;
+        }
+        return -result;
+    }
+
+     /**
+      * Returns the index of the first character in the string that is not a digit, starting at offset.
+      */
+     private static int indexOfNonDigit(String string, int offset) {
+         for (int i = offset; i < string.length(); i++) {
+             char c = string.charAt(i);
+             if (c < '0' || c > '9') return i;
+         }
+         return string.length();
+     }
+
+     // Assume Iso8601Utils.TIMEZONE_UTC is defined like this:
+     private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
