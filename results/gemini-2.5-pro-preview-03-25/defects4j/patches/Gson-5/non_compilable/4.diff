diff --git a/tmp/c3c944af-59aa-418a-a030-6de2b69642ae_buggy.java b/tmp/8d790055-3b70-4f80-ad7b-0d74c0d3eb7f_fixed.java
index 8da6fb2..1bc7cd6 100644
--- a/tmp/c3c944af-59aa-418a-a030-6de2b69642ae_buggy.java
+++ b/tmp/8d790055-3b70-4f80-ad7b-0d74c0d3eb7f_fixed.java
@@ -1,163 +1,248 @@
+import java.text.ParseException;
+import java.text.ParsePosition;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.TimeZone;
+
+/**
+ * Contains helper methods for date parsing and formatting.
+ */
+// Assume this class exists and provides the necessary helper methods and constants.
+class Iso8601Utils {
+    // Assume TIMEZONE_UTC is defined correctly, e.g.:
+    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
+
+    // Assume helper methods exist and are correct:
+    private static boolean checkOffset(String value, int offset, char expected) {
+        return (offset < value.length()) && (value.charAt(offset) == expected);
+    }
+
+    private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {
+        if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {
+            throw new NumberFormatException(value);
+        }
+        // Check if characters are digits
+        int result = 0;
+        int i = beginIndex;
+        if (i < endIndex) {
+             char c = value.charAt(i);
+             // Check for sign if needed, but ISO dates don't have signed years here typically.
+             // Skip sign handling for simplicity based on context. Assume positive numbers.
+             if(!Character.isDigit(c)) {
+                 throw new NumberFormatException("Invalid number: " + value.substring(beginIndex, endIndex));
+             }
+        } else {
+             throw new NumberFormatException("Invalid number: " + value.substring(beginIndex, endIndex));
+        }
+
+        while (i < endIndex) {
+            char c = value.charAt(i);
+            if (!Character.isDigit(c)) {
+                 throw new NumberFormatException("Invalid number: " + value.substring(beginIndex, endIndex));
+            }
+            result *= 10;
+            result += Character.digit(c, 10);
+            i++;
+        }
+        return result;
+    }
+
+     private static int indexOfNonDigit(String string, int offset) {
+        for (int i = offset; i < string.length(); i++) {
+            char c = string.charAt(i);
+            if (c < '0' || c > '9') return i;
+        }
+        return string.length();
+    }
+
+
     /**
      * Parse a date from ISO-8601 formatted string. It expects a format
      * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
      *
      * @param date ISO string to parse in the appropriate format.
      * @param pos The position to start parsing from, updated to where parsing stopped.
      * @return the parsed date
      * @throws ParseException if the date is not in the appropriate format
      */
     public static Date parse(String date, ParsePosition pos) throws ParseException {
         Exception fail = null;
         try {
             int offset = pos.getIndex();
 
             // extract year
             int year = parseInt(date, offset, offset += 4);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract month
             int month = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, '-')) {
                 offset += 1;
             }
 
             // extract day
             int day = parseInt(date, offset, offset += 2);
             // default time value
             int hour = 0;
             int minutes = 0;
             int seconds = 0;
             int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
             // if the value has no time component (and no time zone), we are done
             boolean hasT = checkOffset(date, offset, 'T');
 
             if (!hasT && (date.length() <= offset)) {
+                // No time, no timezone specified. Original code used default/local timezone. Retain that behavior.
                 Calendar calendar = new GregorianCalendar(year, month - 1, day);
-
                 pos.setIndex(offset);
                 return calendar.getTime();
             }
 
             if (hasT) {
-
+                offset += 1; // Consume 'T'
                 // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
+                hour = parseInt(date, offset, offset += 2);
                 if (checkOffset(date, offset, ':')) {
                     offset += 1;
                 }
 
                 minutes = parseInt(date, offset, offset += 2);
                 if (checkOffset(date, offset, ':')) {
                     offset += 1;
                 }
                 // second and milliseconds can be optional
                 if (date.length() > offset) {
                     char c = date.charAt(offset);
                     if (c != 'Z' && c != '+' && c != '-') {
                         seconds = parseInt(date, offset, offset += 2);
                         if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
                         // milliseconds can be optional in the format
                         if (checkOffset(date, offset, '.')) {
                             offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                            int endOffset = indexOfNonDigit(date, offset); // Find end of digit sequence
                             int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                             int fraction = parseInt(date, offset, parseEndOffset);
                             // compensate for "missing" digits
                             switch (parseEndOffset - offset) { // number of digits parsed
                             case 2:
                                 milliseconds = fraction * 10;
                                 break;
                             case 1:
                                 milliseconds = fraction * 100;
                                 break;
-                            default:
+                            default: // 3 or more digits, only first 3 matter
                                 milliseconds = fraction;
                             }
-                            offset = endOffset;
+                            offset = endOffset; // Move offset past all fractional second digits
                         }
                     }
                 }
             }
 
             // extract timezone
             if (date.length() <= offset) {
-                throw new IllegalArgumentException("No time zone indicator");
+                // If 'T' was present, time zone is mandatory.
+                throw new IllegalArgumentException("No time zone indicator found after time");
             }
 
-            TimeZone timezone = null;
+            int timezoneOffsetMillis = 0;
             char timezoneIndicator = date.charAt(offset);
 
             if (timezoneIndicator == 'Z') {
-                timezone = TIMEZONE_UTC;
+                // UTC timezone
                 offset += 1;
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+                String timezoneOffsetStr = date.substring(offset);
+                int sign = timezoneIndicator == '-' ? -1 : 1;
+                int hoursOffset;
+                int minutesOffset = 0; // Default to 0 minutes offset
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+                // Minimum length is 3 for sign + hh, e.g., "+01"
+                if (timezoneOffsetStr.length() >= 3) {
+                    hoursOffset = parseInt(date, offset + 1, offset + 3);
+                    offset += 3; // Consumed sign and hh
 
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
-                    timezone = TIMEZONE_UTC;
+                    // Check for optional minutes part: ":mm" or "mm"
+                    if (offset < date.length()) {
+                         if (date.charAt(offset) == ':') {
+                            // Format is +hh:mm
+                            if (offset + 3 <= date.length()) { // Check length for :mm
+                                minutesOffset = parseInt(date, offset + 1, offset + 3);
+                                offset += 3; // Consumed :mm
                             } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
-
-                    timezone = TimeZone.getTimeZone(timezoneId);
-
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
+                                throw new IndexOutOfBoundsException("Invalid time zone format: incomplete :mm");
+                            }
+                         } else if (Character.isDigit(date.charAt(offset))) {
+                             // Try format +hhmm
+                             if (offset + 2 <= date.length() && Character.isDigit(date.charAt(offset+1))) {
+                                 minutesOffset = parseInt(date, offset, offset + 2);
+                                 offset += 2; // Consumed mm
+                             } else {
+                                 // Only one digit after hh - invalid format? Or just hh?
+                                 // ISO 8601 allows Z, ±hh:mm, ±hhmm, ±hh.
+                                 // If it's not ':', not 'mm', then it must be just hh.
+                                 // Let minutesOffset remain 0. The offset was already advanced by 3.
+                             }
                          }
+                         // Else: Character after hh is neither ':' nor digit, implies format was just ±hh.
                     }
+                    // Format was just ±hh if we reach here without consuming more chars
+
+                    if (hoursOffset > 23 || minutesOffset > 59) {
+                         throw new IllegalArgumentException("Invalid time zone offset: " + timezoneOffsetStr.substring(0, Math.min(timezoneOffsetStr.length(), 6))); // Show only relevant part
+                    }
+
+                    timezoneOffsetMillis = sign * (hoursOffset * 3600 + minutesOffset * 60) * 1000;
+
+                } else {
+                    // Timezone string like "+" or "+1" is too short
+                    throw new IndexOutOfBoundsException("Invalid time zone offset format: " + timezoneOffsetStr);
                 }
             } else {
                  throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
             }
 
-            Calendar calendar = new GregorianCalendar(timezone);
+            // Use UTC calendar to compute base milliseconds since epoch
+            Calendar calendar = new GregorianCalendar(TIMEZONE_UTC);
             calendar.setLenient(false);
             calendar.set(Calendar.YEAR, year);
             calendar.set(Calendar.MONTH, month - 1);
             calendar.set(Calendar.DAY_OF_MONTH, day);
             calendar.set(Calendar.HOUR_OF_DAY, hour);
             calendar.set(Calendar.MINUTE, minutes);
             calendar.set(Calendar.SECOND, seconds);
             calendar.set(Calendar.MILLISECOND, milliseconds);
 
             pos.setIndex(offset);
-            return calendar.getTime();
-            // If we get a ParseException it'll already have the right message/offset.
-            // Other exception types can convert here.
+
+            // Adjust the UTC time by the parsed timezone offset.
+            // calendar.getTimeInMillis() gives the epoch millis if the time (h,m,s) were UTC.
+            // To get the actual epoch millis, we subtract the offset.
+            // Example: 1am +01:00 is midnight UTC. timeInMillis is for 1am UTC. 1am UTC - 1hr = midnight UTC.
+            long timeInMillis = calendar.getTimeInMillis();
+            long adjustedTimeInMillis = timeInMillis - timezoneOffsetMillis;
+
+            return new Date(adjustedTimeInMillis);
+
         } catch (IndexOutOfBoundsException e) {
             fail = e;
         } catch (NumberFormatException e) {
             fail = e;
         } catch (IllegalArgumentException e) {
             fail = e;
         }
-        String input = (date == null) ? null : ('"' + date + "'");
-        String msg = fail.getMessage();
+        String input = (date == null) ? null : ('"' + date + '"');
+        String msg = (fail != null) ? fail.getMessage() : "Unknown error";
         if (msg == null || msg.isEmpty()) {
             msg = "(" + fail.getClass().getName() + ")";
         }
         ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
+        if (fail != null) {
              ex.initCause(fail);
+        }
         throw ex;
     }
+}
\ No newline at end of file
