diff --git a/tmp/d8dbd71d-8a65-4e35-b8f4-7a9c35c7d6ba_buggy.java b/tmp/4bd04aef-107e-45a6-9ab6-ce85b1d53aa6_fixed.java
index 8da6fb2..450bf06 100644
--- a/tmp/d8dbd71d-8a65-4e35-b8f4-7a9c35c7d6ba_buggy.java
+++ b/tmp/4bd04aef-107e-45a6-9ab6-ce85b1d53aa6_fixed.java
@@ -1,163 +1,254 @@
+import java.text.ParseException;
+import java.text.ParsePosition;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.TimeZone;
+
+// Assume these helper methods exist and work correctly:
+// private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {}
+// private static boolean checkOffset(String value, int offset, char expected) {}
+// private static int indexOfNonDigit(String string, int offset) {}
+// Assume TIMEZONE_UTC is defined elsewhere, e.g., static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
+
 /**
  * Parse a date from ISO-8601 formatted string. It expects a format
  * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
  *
  * @param date ISO string to parse in the appropriate format.
  * @param pos The position to start parsing from, updated to where parsing stopped.
  * @return the parsed date
  * @throws ParseException if the date is not in the appropriate format
  */
 public static Date parse(String date, ParsePosition pos) throws ParseException {
-        Exception fail = null;
+    int initialOffset = pos.getIndex(); // Store initial offset for error reporting if needed
     try {
-            int offset = pos.getIndex();
+        int offset = initialOffset;
 
         // extract year
         int year = parseInt(date, offset, offset += 4);
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract month
         int month = parseInt(date, offset, offset += 2);
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract day
         int day = parseInt(date, offset, offset += 2);
+
         // default time value
         int hour = 0;
         int minutes = 0;
         int seconds = 0;
         int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
-            // if the value has no time component (and no time zone), we are done
+        // Check for 'T' separator indicating time component
         boolean hasT = checkOffset(date, offset, 'T');
+        TimeZone timezone = null; // Initialize timezone
 
         if (!hasT && (date.length() <= offset)) {
-                Calendar calendar = new GregorianCalendar(year, month - 1, day);
+            // No 'T' and end of string reached: Only date component present
+            // Use UTC timezone as a default for date-only ISO strings
+            Calendar calendar = new GregorianCalendar(TIMEZONE_UTC);
+            calendar.setLenient(false);
+            // Set date fields
+            calendar.set(Calendar.YEAR, year);
+            calendar.set(Calendar.MONTH, month - 1); // Calendar month is 0-based
+            calendar.set(Calendar.DAY_OF_MONTH, day);
+            // Set time fields to 0 explicitly
+            calendar.set(Calendar.HOUR_OF_DAY, 0);
+            calendar.set(Calendar.MINUTE, 0);
+            calendar.set(Calendar.SECOND, 0);
+            calendar.set(Calendar.MILLISECOND, 0);
 
-                pos.setIndex(offset);
-                return calendar.getTime();
+            // Validate date components
+            try {
+                Date parsedDate = calendar.getTime();
+                pos.setIndex(offset); // Update position
+                return parsedDate;
+            } catch (IllegalArgumentException e) {
+                // Point error index near the problematic part (day)
+                throw new ParseException("Invalid date value: " + e.getMessage(), offset - 2);
+            }
         }
 
         if (hasT) {
+             offset += 1; // Skip 'T'
+             int timeStart = offset; // Keep track of where time parsing starts
 
-                // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
+            // extract hours
+            hour = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
 
+            // extract minutes
             minutes = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
-                // second and milliseconds can be optional
+
+            // extract seconds and milliseconds (optional)
             if (date.length() > offset) {
                 char c = date.charAt(offset);
-                    if (c != 'Z' && c != '+' && c != '-') {
+                if (c >= '0' && c <= '9') { // Check if seconds are present
                     seconds = parseInt(date, offset, offset += 2);
-                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
-                        // milliseconds can be optional in the format
+                    // Adjust for leap seconds if necessary (per ISO 8601 appendix D)
+                    if (seconds > 59 && seconds < 63) seconds = 59;
+
+                    // Check for milliseconds
                     if (checkOffset(date, offset, '.')) {
-                            offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
-                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
-                            int fraction = parseInt(date, offset, parseEndOffset);
-                            // compensate for "missing" digits
-                            switch (parseEndOffset - offset) { // number of digits parsed
-                            case 2:
-                                milliseconds = fraction * 10;
-                                break;
-                            case 1:
-                                milliseconds = fraction * 100;
-                                break;
-                            default:
-                                milliseconds = fraction;
-                            }
-                            offset = endOffset;
-                        }
+                        offset += 1; // Skip '.'
+                        int fractionStartOffset = offset;
+                        int endOffset = indexOfNonDigit(date, offset);
+                        if (endOffset == -1) endOffset = date.length(); // Digits go to the end
+
+                        // Check if any digits were found after '.'
+                        if (offset == endOffset) throw new ParseException("Missing fractional second digits after '.'", offset);
+
+                        int digitCount = endOffset - fractionStartOffset;
+                        int parseDigits = Math.min(digitCount, 3); // Parse up to 3 digits
+                        int parseEndOffset = fractionStartOffset + parseDigits;
+
+                        int fraction = parseInt(date, fractionStartOffset, parseEndOffset);
+
+                        // Adjust based on number of parsed digits
+                        if (parseDigits == 1) milliseconds = fraction * 100;
+                        else if (parseDigits == 2) milliseconds = fraction * 10;
+                        else milliseconds = fraction; // 3 or more digits
+
+                        offset = endOffset; // Move offset past all fractional digits
                     }
                 }
+                // If c was not a digit, it might be Z, +, - (handled next)
             }
 
-            // extract timezone
+            // After time component, a timezone indicator is required by ISO 8601
             if (date.length() <= offset) {
-                throw new IllegalArgumentException("No time zone indicator");
+                 throw new ParseException("Missing time zone indicator after time", offset);
             }
 
-            TimeZone timezone = null;
+            // Parse timezone
             char timezoneIndicator = date.charAt(offset);
+            int timezoneStartOffset = offset; // For error reporting
 
             if (timezoneIndicator == 'Z') {
                 timezone = TIMEZONE_UTC;
                 offset += 1;
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+                String timezoneOffset = date.substring(timezoneStartOffset); // Get the full offset string (+hh:mm, +hhmm, or +hh)
+                int consumedLength = 0; // Track length of valid offset parsed
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+                String formattedTimezoneOffset;
+                // Try parsing known formats: +hh:mm, +hhmm, +hh, ensuring digits are present
+                // Check for "+hh:mm" format (length 6)
+                if (timezoneOffset.length() >= 6 && timezoneOffset.charAt(3) == ':') {
+                    if (Character.isDigit(timezoneOffset.charAt(1)) && Character.isDigit(timezoneOffset.charAt(2)) &&
+                        Character.isDigit(timezoneOffset.charAt(4)) && Character.isDigit(timezoneOffset.charAt(5))) {
+                        formattedTimezoneOffset = timezoneOffset.substring(0, 6);
+                        consumedLength = 6;
+                    } else {
+                        throw new ParseException("Invalid time zone offset format near " + timezoneOffset.substring(0, 6), timezoneStartOffset);
+                    }
+                // Check for "+hhmm" format (length 5)
+                } else if (timezoneOffset.length() >= 5 && timezoneOffset.indexOf(':') == -1) {
+                     if (Character.isDigit(timezoneOffset.charAt(1)) && Character.isDigit(timezoneOffset.charAt(2)) &&
+                         Character.isDigit(timezoneOffset.charAt(3)) && Character.isDigit(timezoneOffset.charAt(4))) {
+                        // Normalize to +hh:mm for TimeZone.getTimeZone consistency
+                        formattedTimezoneOffset = timezoneOffset.substring(0, 3) + ":" + timezoneOffset.substring(3, 5);
+                        consumedLength = 5;
+                     } else {
+                         throw new ParseException("Invalid time zone offset format near " + timezoneOffset.substring(0, 5), timezoneStartOffset);
+                     }
+                // Check for "+hh" format (length 3)
+                } else if (timezoneOffset.length() >= 3 && timezoneOffset.indexOf(':') == -1) {
+                    if (Character.isDigit(timezoneOffset.charAt(1)) && Character.isDigit(timezoneOffset.charAt(2))) {
+                        // Normalize to +hh:00
+                        formattedTimezoneOffset = timezoneOffset.substring(0, 3) + ":00";
+                        consumedLength = 3;
+                    } else {
+                        throw new ParseException("Invalid time zone offset format near " + timezoneOffset.substring(0, 3), timezoneStartOffset);
+                    }
+                } else {
+                    // Does not match any of the expected formats/lengths
+                    throw new ParseException("Invalid time zone offset format: " + timezoneOffset, timezoneStartOffset);
+                }
 
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+                // Update main offset to after the consumed timezone string
+                offset = timezoneStartOffset + consumedLength;
+
+                // Get TimeZone instance using the normalized "+hh:mm" format
+                if ("+00:00".equals(formattedTimezoneOffset) || "-00:00".equals(formattedTimezoneOffset)) {
                     timezone = TIMEZONE_UTC;
                 } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
-
+                    String timezoneId = "GMT" + formattedTimezoneOffset;
                     timezone = TimeZone.getTimeZone(timezoneId);
-
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
+                    // Sanity check: if TimeZone.getTimeZone failed to parse the offset, it returns GMT.
+                    // This can happen for invalid values like "GMT+99:99".
+                    // We check if the returned ID is "GMT" unless the input legitimately corresponds to GMT.
+                    if (timezone.getID().equals("GMT") && !timezoneId.equals("GMT+00:00") && !timezoneId.equals("GMT-00:00")) {
+                         throw new ParseException("Invalid time zone offset value: " + timezoneOffset.substring(0, consumedLength), timezoneStartOffset);
                     }
                 }
+            } else {
+                // Character after time component is not Z, +, or -
+                throw new ParseException("Invalid time zone indicator '" + timezoneIndicator + "'", timezoneStartOffset);
             }
         } else {
-                throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+            // No 'T' but characters remaining after date part: Invalid format
+            throw new ParseException("Unexpected character '" + date.charAt(offset) + "' after date", offset);
+        }
+
+        // At this point, we should have parsed all components and have a valid timezone
+        if (timezone == null) {
+            // This state should be unreachable if logic is correct
+             throw new ParseException("Internal error: Time zone could not be determined", offset);
         }
 
+        // Build Calendar using the determined timezone
         Calendar calendar = new GregorianCalendar(timezone);
-            calendar.setLenient(false);
+        calendar.setLenient(false); // Use strict validation
         calendar.set(Calendar.YEAR, year);
-            calendar.set(Calendar.MONTH, month - 1);
+        calendar.set(Calendar.MONTH, month - 1); // Calendar month is 0-based
         calendar.set(Calendar.DAY_OF_MONTH, day);
         calendar.set(Calendar.HOUR_OF_DAY, hour);
         calendar.set(Calendar.MINUTE, minutes);
         calendar.set(Calendar.SECOND, seconds);
         calendar.set(Calendar.MILLISECOND, milliseconds);
 
-            pos.setIndex(offset);
-            return calendar.getTime();
-            // If we get a ParseException it'll already have the right message/offset.
-            // Other exception types can convert here.
-        } catch (IndexOutOfBoundsException e) {
-            fail = e;
-        } catch (NumberFormatException e) {
-            fail = e;
+        // Final validation and return date object
+        try {
+            Date parsedDate = calendar.getTime(); // Forces validation if lenient is false
+            pos.setIndex(offset); // Update position to reflect successful parse up to this point
+            return parsedDate;
         } catch (IllegalArgumentException e) {
-            fail = e;
+            // Catch errors from invalid date/time combinations (e.g., month=13, day=32)
+            throw new ParseException("Invalid date/time value resulting from calendar computation: " + e.getMessage(), offset); // Report error at end of parsed section
         }
-        String input = (date == null) ? null : ('"' + date + "'");
-        String msg = fail.getMessage();
-        if (msg == null || msg.isEmpty()) {
-            msg = "("+fail.getClass().getName()+")";
+
+    } catch (IndexOutOfBoundsException | NumberFormatException | IllegalArgumentException e) {
+         // Catch runtime exceptions from parsing helpers (parseInt, substring, etc.) or Calendar setters
+         // Wrap them in ParseException for consistent error handling
+         int errorIndex = pos.getIndex(); // Current index, might be outdated if error was early
+         // If error index wasn't advanced (error happened early), use initial offset. Otherwise, use current.
+         if (errorIndex <= initialOffset) errorIndex = initialOffset;
+
+         // Try to provide a slightly better error index for common exceptions
+         if (e instanceof NumberFormatException && errorIndex > initialOffset) {
+             // Often means the character at errorIndex-1 (or earlier) was invalid for a number
+         } else if (e instanceof IndexOutOfBoundsException) {
+             // Usually means reading past the end of the string
+             errorIndex = Math.min(errorIndex, (date != null ? date.length() : errorIndex)); // Ensure index is within bounds
          }
-        ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
-        ex.initCause(fail);
+         ParseException ex = new ParseException("Failed to parse date [" + (date == null ? "null" : "'" + date + "'") + "]: " + e.getMessage(), errorIndex);
+         ex.initCause(e);
          throw ex;
+    } catch (ParseException e) {
+        // Re-throw ParseExceptions that were explicitly thrown by our validation logic
+        throw e;
+    }
 }
\ No newline at end of file
