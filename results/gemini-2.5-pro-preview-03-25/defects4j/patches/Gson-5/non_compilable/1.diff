diff --git a/tmp/f95876e0-440f-49b7-8195-5320a168c864_buggy.java b/tmp/742d37c9-cae4-41fc-aa37-ac09faa0d910_fixed.java
index 8da6fb2..e87af07 100644
--- a/tmp/f95876e0-440f-49b7-8195-5320a168c864_buggy.java
+++ b/tmp/742d37c9-cae4-41fc-aa37-ac09faa0d910_fixed.java
@@ -1,163 +1,304 @@
+import java.util.Date;
+import java.text.ParsePosition;
+import java.text.ParseException;
+import java.util.TimeZone;
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+/**
+ * Contains the fixed parse method.
+ * Assumes helper methods parseInt, checkOffset and constant TIMEZONE_UTC exist
+ * in the same scope or are accessible.
+ * Example definition for TIMEZONE_UTC:
+ * private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
+ */
+public class DateParserFixed {
+
+    // Assume TIMEZONE_UTC is defined elsewhere, e.g.:
+    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
+
+    // Assume parseInt helper exists, e.g.:
+    private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {
+        if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex || beginIndex == endIndex) {
+            throw new NumberFormatException("Invalid range or empty slice for parseInt: [" + beginIndex + "," + endIndex + ") in \"" + value + "\"");
+        }
+        int result = 0;
+        int i = beginIndex;
+        while (i < endIndex) {
+            char c = value.charAt(i++);
+            if (c < '0' || c > '9') {
+                throw new NumberFormatException("For input string: \"" + value.substring(beginIndex, endIndex) + "\"");
+            }
+            result = result * 10 + (c - '0');
+        }
+        return result;
+    }
+
+    // Assume checkOffset helper exists, e.g.:
+    private static boolean checkOffset(String value, int offset, char expected) {
+        return (offset < value.length()) && (value.charAt(offset) == expected);
+    }
+
+    // indexOfNonDigit helper might not be needed with the current implementation,
+    // but included for completeness if used elsewhere or if millisecond parsing relies on it.
+    private static int indexOfNonDigit(String string, int offset) {
+        for (int i = offset; i < string.length(); i++) {
+            if (!Character.isDigit(string.charAt(i))) {
+                return i;
+            }
+        }
+        return string.length(); // Return length if no non-digit found
+    }
+
+
     /**
      * Parse a date from ISO-8601 formatted string. It expects a format
      * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
      *
      * @param date ISO string to parse in the appropriate format.
      * @param pos The position to start parsing from, updated to where parsing stopped.
      * @return the parsed date
      * @throws ParseException if the date is not in the appropriate format
      */
     public static Date parse(String date, ParsePosition pos) throws ParseException {
         Exception fail = null;
         try {
             int offset = pos.getIndex();
 
             // extract year
-            int year = parseInt(date, offset, offset += 4);
+            // Need at least 4 chars for year
+            if (date.length() < offset + 4) throw new IndexOutOfBoundsException("Insufficient length for year");
+            int year = parseInt(date, offset, offset + 4);
+            offset += 4;
             if (checkOffset(date, offset, '-')) {
-                offset += 1;
+                offset += 1; // advance past '-'
             }
 
             // extract month
-            int month = parseInt(date, offset, offset += 2);
+            // Need at least 2 chars for month
+            if (date.length() < offset + 2) throw new IndexOutOfBoundsException("Insufficient length for month");
+            int month = parseInt(date, offset, offset + 2);
+            offset += 2;
             if (checkOffset(date, offset, '-')) {
-                offset += 1;
+                offset += 1; // advance past '-'
             }
 
             // extract day
-            int day = parseInt(date, offset, offset += 2);
+            // Need at least 2 chars for day
+            if (date.length() < offset + 2) throw new IndexOutOfBoundsException("Insufficient length for day");
+            int day = parseInt(date, offset, offset + 2);
+            offset += 2;
+
             // default time value
             int hour = 0;
             int minutes = 0;
             int seconds = 0;
             int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
-            // if the value has no time component (and no time zone), we are done
+            // Check for 'T' separator indicating time component
             boolean hasT = checkOffset(date, offset, 'T');
 
+            // If no 'T' and we are at the end of the string, it's a date-only format
             if (!hasT && (date.length() <= offset)) {
                 Calendar calendar = new GregorianCalendar(year, month - 1, day);
-
                 pos.setIndex(offset);
                 return calendar.getTime();
             }
 
             if (hasT) {
+                offset += 1; // Skip 'T'
 
-                // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
-                if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                 // Determine end of time part (before timezone)
+                 int timePartEnd = date.length();
+                 for(int i=offset; i<date.length(); ++i) {
+                    char c = date.charAt(i);
+                    if(c == 'Z' || c == '+' || c == '-') {
+                        timePartEnd = i;
+                        break;
                     }
+                 }
+
+                 // Need at least hh (2 chars) for time
+                 if (timePartEnd - offset >= 2) {
+                    hour = parseInt(date, offset, offset + 2);
+                    offset += 2;
+
+                    // Optional separator for extended format hh:mm...
+                    boolean expectingSeparator = checkOffset(date, offset, ':');
+                    if (expectingSeparator) offset++;
+
+                    // Need at least mm (2 chars)
+                    if (timePartEnd - offset >= 2) {
+                         minutes = parseInt(date, offset, offset + 2);
+                         offset += 2;
 
-                minutes = parseInt(date, offset, offset += 2);
-                if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                         // Check for seconds (optional)
+                         // If we had ':', we expect ':' again for seconds. If not, basic format requires no separator.
+                         boolean hasSeconds = false;
+                         if (expectingSeparator) { // If hh:mm format
+                              if (checkOffset(date, offset, ':')) { // Check for :ss
+                                  offset++;
+                                  hasSeconds = true;
                               }
-                // second and milliseconds can be optional
-                if (date.length() > offset) {
-                    char c = date.charAt(offset);
-                    if (c != 'Z' && c != '+' && c != '-') {
-                        seconds = parseInt(date, offset, offset += 2);
-                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
-                        // milliseconds can be optional in the format
+                              // If no ':' here, time is hh:mm, proceed to timezone check.
+                         } else { // If hhmm format, check if there are more digits for ss
+                              if (timePartEnd - offset >= 2) { // Check for ss in hhmmss
+                                  hasSeconds = true;
+                              }
+                         }
+
+                         if (hasSeconds) {
+                              // Need at least ss (2 chars)
+                              if (timePartEnd - offset < 2) throw new IndexOutOfBoundsException("Insufficient length for seconds");
+                              seconds = parseInt(date, offset, offset + 2);
+                              if (seconds > 59 && seconds < 63) seconds = 59; // Leap second adjust
+                              offset += 2;
+
+                              // Check for fractional seconds (milliseconds)
                               if (checkOffset(date, offset, '.')) {
-                            offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
-                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
-                            int fraction = parseInt(date, offset, parseEndOffset);
-                            // compensate for "missing" digits
-                            switch (parseEndOffset - offset) { // number of digits parsed
-                            case 2:
-                                milliseconds = fraction * 10;
-                                break;
-                            case 1:
-                                milliseconds = fraction * 100;
-                                break;
-                            default:
-                                milliseconds = fraction;
+                                  offset++; // Skip '.'
+                                  int startFraction = offset;
+                                  int endFraction = offset;
+                                  while (endFraction < timePartEnd && Character.isDigit(date.charAt(endFraction))) {
+                                       endFraction++;
                                   }
-                            offset = endOffset;
+                                  int digitCount = endFraction - startFraction;
+                                  if (digitCount > 0) {
+                                       int effectiveEndFraction = Math.min(endFraction, startFraction + 3);
+                                       int fraction = parseInt(date, startFraction, effectiveEndFraction);
+                                       if (digitCount == 1) milliseconds = fraction * 100;
+                                       else if (digitCount == 2) milliseconds = fraction * 10;
+                                       else milliseconds = fraction; // handles >= 3 digits
                                   }
+                                  offset = endFraction; // Advance past all fractional digits
                               }
                          }
+                    } else if (expectingSeparator) { // hh: format, missing mm
+                          throw new IndexOutOfBoundsException("Missing minutes after ':'");
+                    } // else: hh format is invalid (need hhmm or hh:mm at least) handled by outer check
+
+                 } else if (timePartEnd - offset > 0) { // Some characters exist but not enough for hh
+                      throw new IllegalArgumentException("Time part must include at least hours (hh). Found: " + date.substring(offset, timePartEnd));
+                 }
+                 // Ensure offset is correctly positioned at the start of the timezone indicator
+                 offset = timePartEnd;
             }
 
-            // extract timezone
+            // Extract timezone
+            // If we are at the end of the string after parsing date (and optionally time)
             if (date.length() <= offset) {
-                throw new IllegalArgumentException("No time zone indicator");
+                // If time component was present (hasT=true), timezone is mandatory.
+                if (hasT) {
+                   throw new IllegalArgumentException("No time zone indicator found after time component.");
+                } else {
+                    // Date-only string successfully parsed completely. This was handled by the first return.
+                    // If code reaches here with !hasT, it implies there were unexpected characters after
+                    // the date part, which should be an error based on strict ISO 8601.
+                    // However, the original code seemed to allow this by returning early.
+                    // Let's make it an error if extra chars exist after date-only.
+                    // Reaching here implies date.length() > offset, but no 'T' was found, and no Z/+/-.
+                    throw new IllegalArgumentException("Unexpected character(s) found after date part: '" + date.substring(offset) +"'");
+                }
             }
 
-            TimeZone timezone = null;
+            TimeZone timezone;
             char timezoneIndicator = date.charAt(offset);
 
             if (timezoneIndicator == 'Z') {
                 timezone = TIMEZONE_UTC;
                 offset += 1;
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+                // Determine length of the timezone offset string part (e.g., +01, +0100, +01:00)
+                int tzOffsetStart = offset;
+                int currentOffset = offset + 1; // Skip sign
+                // Simple check for expected formats
+                String timezoneOffsetStr;
+                int offsetLenConsumed;
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+                if (date.length() >= tzOffsetStart + 6 && date.charAt(tzOffsetStart + 3) == ':') { // Check for ±hh:mm
+                    timezoneOffsetStr = date.substring(tzOffsetStart, tzOffsetStart + 6);
+                    offsetLenConsumed = 6;
+                } else if (date.length() >= tzOffsetStart + 5 && Character.isDigit(date.charAt(tzOffsetStart + 3))) { // Check for ±hhmm
+                     timezoneOffsetStr = date.substring(tzOffsetStart, tzOffsetStart + 5);
+                     offsetLenConsumed = 5;
+                } else if (date.length() >= tzOffsetStart + 3 && Character.isDigit(date.charAt(tzOffsetStart + 1))) { // Check for ±hh
+                     timezoneOffsetStr = date.substring(tzOffsetStart, tzOffsetStart + 3);
+                     offsetLenConsumed = 3;
+                } else {
+                     throw new IndexOutOfBoundsException("Invalid or incomplete time zone indicator: " + date.substring(tzOffsetStart));
+                }
 
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+                String normalizedOffsetId; // Will store the "GMT[+|-]hh:mm" string
+
+                // Check for zero offset first
+                if ("+00".equals(timezoneOffsetStr) || "+0000".equals(timezoneOffsetStr) || "+00:00".equals(timezoneOffsetStr) ||
+                    "-00".equals(timezoneOffsetStr) || "-0000".equals(timezoneOffsetStr) || "-00:00".equals(timezoneOffsetStr)) {
                     timezone = TIMEZONE_UTC;
                 } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
+                    // Normalize to "GMT[+|-]hh:mm" format for TimeZone.getTimeZone()
+                    if (offsetLenConsumed == 6) { // ±hh:mm format
+                        normalizedOffsetId = "GMT" + timezoneOffsetStr;
+                    } else if (offsetLenConsumed == 5) { // ±hhmm format -> insert ":"
+                         normalizedOffsetId = "GMT" + timezoneOffsetStr.substring(0, 3) + ":" + timezoneOffsetStr.substring(3, 5);
+                    } else { // offsetLenConsumed == 3, ±hh format -> append ":00"
+                         normalizedOffsetId = "GMT" + timezoneOffsetStr + ":00";
+                    }
 
-                    timezone = TimeZone.getTimeZone(timezoneId);
+                    timezone = TimeZone.getTimeZone(normalizedOffsetId);
 
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
-                        }
+                    // Verify that TimeZone.getTimeZone() understood the id.
+                    // It returns GMT if the id is not recognized. Check that it's not GMT unless the offset was actually zero.
+                    if (timezone.getID().equals("GMT")) {
+                         throw new IndexOutOfBoundsException("Invalid time zone indicator: Could not parse '" + timezoneOffsetStr + "'");
                     }
                 }
+                // Advance offset by the consumed length of the timezone string
+                offset += offsetLenConsumed;
+
             } else {
                 throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");
             }
 
+            // Create Calendar and set fields
             Calendar calendar = new GregorianCalendar(timezone);
             calendar.setLenient(false);
             calendar.set(Calendar.YEAR, year);
-            calendar.set(Calendar.MONTH, month - 1);
+            calendar.set(Calendar.MONTH, month - 1); // Calendar month is 0-based
             calendar.set(Calendar.DAY_OF_MONTH, day);
             calendar.set(Calendar.HOUR_OF_DAY, hour);
             calendar.set(Calendar.MINUTE, minutes);
             calendar.set(Calendar.SECOND, seconds);
             calendar.set(Calendar.MILLISECOND, milliseconds);
 
-            pos.setIndex(offset);
-            return calendar.getTime();
-            // If we get a ParseException it'll already have the right message/offset.
-            // Other exception types can convert here.
-        } catch (IndexOutOfBoundsException e) {
-            fail = e;
-        } catch (NumberFormatException e) {
-            fail = e;
+            // Check for validity, e.g. February 30th
+            try {
+                 calendar.getTimeInMillis(); // Forces computation and validation
             } catch (IllegalArgumentException e) {
+                 fail = e; // Store exception to rethrow later as ParseException
+                 throw e; // Throw immediately to be caught by the outer handler
+            }
+
+            pos.setIndex(offset); // Update position to where parsing stopped
+            return calendar.getTime();
+
+        } catch (IndexOutOfBoundsException | NumberFormatException | IllegalArgumentException e) {
+            // Consolidate catch blocks for cleaner code
             fail = e;
         }
+
+        // Error handling logic: Create and throw ParseException
         String input = (date == null) ? null : ('"' + date + "'");
-        String msg = fail.getMessage();
-        if (msg == null || msg.isEmpty()) {
-            msg = "("+fail.getClass().getName()+")";
+        // Use the failing exception's message if available and specific
+        String specificMsg = (fail != null) ? fail.getMessage() : "Unknown error";
+        if (specificMsg == null || specificMsg.isEmpty()) {
+            specificMsg = "(" + (fail != null ? fail.getClass().getName() : "Unknown") + ")";
         }
-        ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
+        // Use the index provided in ParsePosition. It reflects where parsing started.
+        // The error message contains details, but the offset in ParseException points to the start.
+        ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + specificMsg, pos.getIndex());
+        if (fail != null) {
           ex.initCause(fail);
+        }
         throw ex;
     }
+}
\ No newline at end of file
