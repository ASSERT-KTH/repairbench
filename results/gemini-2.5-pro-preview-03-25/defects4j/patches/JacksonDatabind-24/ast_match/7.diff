diff --git a/tmp/6100e0aa-9a2c-4006-8f49-c93eac5be268_buggy.java b/tmp/4d36f16f-663e-4efd-8955-872006c9e093_fixed.java
index 0502fea..d2bd089 100644
--- a/tmp/6100e0aa-9a2c-4006-8f49-c93eac5be268_buggy.java
+++ b/tmp/4d36f16f-663e-4efd-8955-872006c9e093_fixed.java
@@ -1,9 +1,17 @@
     public BaseSettings withDateFormat(DateFormat df) {
         if (_dateFormat == df) {
             return this;
         }
-        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();
+        /* Although formatters typically have timezone associated with them,
+         * we should NOT change the default TimeZone just because specified
+         * formatter might have one. Reason is that caller may just happen to
+         * have legacy code that uses such formatter, but really wants to use
+         * the TimeZone override.
+         */
+        // 21-Mar-2015, tatu: As per [databind#743], should NOT change timezone based on DateFormat
+        //TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();
         return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,
                 _typeResolverBuilder, df, _handlerInstantiator, _locale,
-                tz, _defaultBase64);
+                _timeZone, // Use the existing TimeZone, don't derive from DateFormat
+                 _defaultBase64);
     }
\ No newline at end of file
