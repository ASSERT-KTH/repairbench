diff --git a/tmp/abbbcded-9c68-4cf7-9ea1-56f1f107637b_buggy.java b/tmp/e4881946-35ec-4df9-b30e-015400fb0cfe_fixed.java
index 0502fea..deb98d7 100644
--- a/tmp/abbbcded-9c68-4cf7-9ea1-56f1f107637b_buggy.java
+++ b/tmp/e4881946-35ec-4df9-b30e-015400fb0cfe_fixed.java
@@ -1,9 +1,25 @@
     public BaseSettings withDateFormat(DateFormat df) {
         if (_dateFormat == df) {
             return this;
         }
+        /* 28-Aug-2014, tatu: Problem here is that MANY date formats are context-specific,
+         *    and specifically that context is Locale. If so, we should not create a new
+         *    instance but rather clear the cached one, so that context-specific one will
+         *    be created.
+         */
+        // 09-Jan-2016, tatu: Not sure if the intent is to keep existing TimeZone or use
+        //   the one from DateFormat; for now, let's keep TimeZone as is.
+        TimeZone tz = _timeZone;
+
+        // 02-Nov-2017, tatu: Actually, looks like the intent is that `setDateFormat()`
+        //     does NOT change timezone, but use of `StdDateFormat` does, but if custom
+        //     dateformat used, maybe use its timezone? Or maybe not? Seems safest to
+        //     stick to configured timezone.
+        /*
         TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();
+        */
+        
         return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,
                 _typeResolverBuilder, df, _handlerInstantiator, _locale,
                 tz, _defaultBase64);
     }
\ No newline at end of file
