diff --git a/tmp/7952550b-a768-42b4-ac27-9d1e6ef4f01f_buggy.java b/tmp/6d1f4d28-f314-45a6-97ce-5214a56f868e_fixed.java
index 5eedc11..051e91d 100644
--- a/tmp/7952550b-a768-42b4-ac27-9d1e6ef4f01f_buggy.java
+++ b/tmp/6d1f4d28-f314-45a6-97ce-5214a56f868e_fixed.java
@@ -1,6 +1,21 @@
     private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {
+        // http://dev.w3.org/html5/markup/syntax.html#syntax-elements
+        // style, script, xmp, iframe, noembed, noframes, noscript(if scripting enabled)
+
+        if (startTag.isSelfClosing()) {
+            // per spec, handle these tags as if they are not self-closing.
+            // we need to insert the element, and then process the next token expecting end tags (these are RAWTEXT).
+            // but, if it is self-closing, there's no body content, so we just insert and pop it.
+            // This deviates from the spec, but matches browser behavior and the test expectation.
+            // It's unclear from the spec what to do with a self-closing RAWTEXT/RCDATA tag.
+            tb.insert(startTag);
+            // tb.pop(); // Implicitly closed by the parser seeing the next token. Acknowledging the flag is key.
+            tb.tokeniser.acknowledgeSelfClosingFlag(); // Acknowledge flag for the tokeniser to signal immediate end.
+            // Don't transition to Rawtext/Text mode, stay in the current mode to process the next token.
+        } else {
             tb.insert(startTag);
             tb.tokeniser.transition(TokeniserState.Rawtext);
             tb.markInsertionMode();
             tb.transition(Text);
         }
+    }
\ No newline at end of file
