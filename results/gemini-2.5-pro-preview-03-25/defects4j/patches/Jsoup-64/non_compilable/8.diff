diff --git a/tmp/c1d9c404-86d3-4d88-84cc-3effe3829864_buggy.java b/tmp/9df7656a-fc0d-4674-8f19-334117963e48_fixed.java
index 5eedc11..f765320 100644
--- a/tmp/c1d9c404-86d3-4d88-84cc-3effe3829864_buggy.java
+++ b/tmp/9df7656a-fc0d-4674-8f19-334117963e48_fixed.java
@@ -1,6 +1,25 @@
     private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {
+        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#parsing-main-inrawtext
+        // specific handling for tags like <style> and <script> where we need to handle tags specially.
         tb.insert(startTag);
+
+        // According to the spec, the self-closing flag should be ignored for these tags.
+        // However, existing tests expect that a self-closing tag like <style/> is immediately closed.
+        // To match this behavior, we process an end tag token immediately if the start tag is self-closing.
+        if (startTag.isSelfClosing()) {
+            // Process the implied end tag token. This will pop the element correctly
+            // based on the current insertion mode's handling of the end tag.
+            // We don't transition to Rawtext/Text modes in this case.
+            tb.process(new Token.EndTag(startTag.tagName()));
+            // The tokeniser would have already consumed the "/>" as part of the start tag.
+            // We don't need tb.tokeniser.acknowledgeSelfClosingFlag() here, the parser handles it.
+        } else {
+            // Standard behavior for non-self-closing rawtext tags:
+            // Switch tokeniser state to Rawtext to capture literal content.
             tb.tokeniser.transition(TokeniserState.Rawtext);
+            // Mark the current insertion mode to return to it after the rawtext content.
             tb.markInsertionMode();
+            // Switch the parser's insertion mode to Text to handle the content and the closing tag.
             tb.transition(Text);
         }
+    }
\ No newline at end of file
