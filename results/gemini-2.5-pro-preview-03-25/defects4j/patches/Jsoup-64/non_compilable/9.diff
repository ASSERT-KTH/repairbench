diff --git a/tmp/01dfec38-5c8b-4785-9e14-9c5c7282d0b5_buggy.java b/tmp/da36321c-8b02-4622-a06e-3e54f7dbcdc7_fixed.java
index 5eedc11..119d4de 100644
--- a/tmp/01dfec38-5c8b-4785-9e14-9c5c7282d0b5_buggy.java
+++ b/tmp/da36321c-8b02-4622-a06e-3e54f7dbcdc7_fixed.java
@@ -1,6 +1,21 @@
     private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {
+        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#parsing-elements-that-contain-only-text
+        // handle <script>, <style>, <textarea> etc
         tb.insert(startTag);
+
+        // Check if the tag is self-closing (e.g., <style />). If so, treat it as an empty element.
+        if (startTag.isSelfClosing()) {
+            // A self-closing tag here implies an immediate end tag.
+            // Acknowledge the flag in the tokeniser. For non-foreign elements like <style>,
+            // HTML spec ยง12.2.6.3 suggests this should also pop the node.
+            // We explicitly pop it here to ensure the element is closed and the parser
+            // does not transition to the Text state expecting content.
+            tb.tokeniser.acknowledgeSelfClosingFlag();
+            tb.pop(); // Pop the node to close the element.
+        } else {
+            // For regular start tags (e.g., <style>), switch states according to spec.
             tb.tokeniser.transition(TokeniserState.Rawtext);
             tb.markInsertionMode();
             tb.transition(Text);
         }
+    }
\ No newline at end of file
