diff --git a/tmp/eaba99ca-a9ac-4f5d-b1a0-6c00da8a044b_buggy.java b/tmp/46403b03-bc3a-4066-a164-838744c84520_fixed.java
index 5eedc11..f9cc488 100644
--- a/tmp/eaba99ca-a9ac-4f5d-b1a0-6c00da8a044b_buggy.java
+++ b/tmp/46403b03-bc3a-4066-a164-838744c84520_fixed.java
@@ -1,6 +1,20 @@
     private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {
+        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#parsing-elements-that-contain-only-text
+        // verbatim insert character data, personaje feed, elements etc
         tb.insert(startTag);
         tb.tokeniser.transition(TokeniserState.Rawtext);
         tb.markInsertionMode();
         tb.transition(Text);
+        // If the start tag is self-closing, we need to reset the tokenizer state BEFORE
+        // the synthetic end tag is processed (by the Text state handler). Otherwise,
+        // the tokenizer stays in Rawtext state and mishandles subsequent tokens.
+        if (startTag.isSelfClosing()) {
+            // Process the synthetic end tag by popping the element and switching back insertion mode.
+            // No need to explicitly call tb.process(endTag) here, as HtmlTreeBuilderState.process
+            // already handles that immediately after this method returns.
+            // However, we *must* reset the tokenizer state back to Data as the synthetic end tag
+            // processing in the Text state does not do that.
+            tb.tokeniser.transition(TokeniserState.Data);
+            // The Text state handler will pop the element and transition the parser mode back.
+        }
     }
