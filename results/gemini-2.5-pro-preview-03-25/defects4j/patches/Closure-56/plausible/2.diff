diff --git a/tmp/0fc0d210-13af-49af-9eae-ead4e690a2f7_buggy.java b/tmp/b53d773f-41e4-4797-b273-f36c480f7893_fixed.java
index 0ef85f2..86f8938 100644
--- a/tmp/0fc0d210-13af-49af-9eae-ead4e690a2f7_buggy.java
+++ b/tmp/b53d773f-41e4-4797-b273-f36c480f7893_fixed.java
@@ -1,50 +1,67 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
+    // If we've saved a previous offset and it's for a line less than or equal to
+    // the one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
+    // Navigate to the start of the requested line
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
+        // Cannot find the start of the requested line number, so it doesn't exist.
         return null;
       }
-      pos = nextpos + 1;
+      pos = nextpos + 1; // Move to the character after '\n', which is the start of the next line
     }
 
     // Remember this offset for the next search we do.
+    // 'pos' is now the index of the first character of the requested line.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Find the end of the requested line.
+    int eol = js.indexOf('\n', pos);
+
+    if (eol == -1) {
+      // No newline found after 'pos'. This means either:
+      // 1. We are on the last line of the file, and it doesn't end with a newline.
+      // 2. The requested line number is beyond the actual number of lines (e.g.,
+      //    file has 3 lines, requested line 4. 'pos' might be js.length() or beyond).
+      // 3. The file is empty (js.length() == 0, pos == 0).
+      if (pos >= js.length()) {
+        // Handles cases 2 and 3. Also handles the case where the file ends
+        // with a newline and the requested line number is one greater than the
+        // actual number of lines (pos will be == js.length()).
         return null;
       } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+        // Handles case 1. Return the rest of the string from 'pos'.
+        return js.substring(pos);
+      }
+    } else {
+      // Found a newline ('\n') at index 'eol'. The line content is from 'pos' up to (but not including) 'eol'.
+      return js.substring(pos, eol);
     }
   }
\ No newline at end of file
