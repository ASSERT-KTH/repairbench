diff --git a/tmp/92a40a9e-01ed-4199-a9b2-38d0472c85bb_buggy.java b/tmp/3eafa1cf-062b-4e34-a7e6-cd85efb7c50a_fixed.java
index 0ef85f2..17993b1 100644
--- a/tmp/92a40a9e-01ed-4199-a9b2-38d0472c85bb_buggy.java
+++ b/tmp/3eafa1cf-062b-4e34-a7e6-cd85efb7c50a_fixed.java
@@ -1,50 +1,89 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
+    // Handle invalid line number early.
+    if (lineNumber <= 0) {
+        return null;
+    }
+
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
+    // If we've saved a previous offset and it's for a line less than or
+    // equal to the one we're searching for, then start at that point.
+    // Minor optimization: Use <= to potentially save work if searching for the same line.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
+    // Find the start of the requested line.
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
+      // If we can't find the start of the line (because the requested
+      // lineNumber is greater than the total lines), it doesn't exist.
       if (nextpos == -1) {
         return null;
       }
       pos = nextpos + 1;
     }
 
+    // After the loop, pos points to the start index of the desired line lineNumber.
+
+    // If the starting position is at or after the end of the code, the line doesn't exist.
+    // This handles cases like requesting line 1 of an empty file (pos=0, length=0)
+    // or requesting a line number greater than the actual number of lines + 1
+    // (e.g., line 2 for "a\n", where pos becomes 2, length is 2).
+    if (pos >= js.length()) {
+        // Check specifically for the case of an empty file, requesting line 1.
+        // The loop is skipped, pos=0, js.length()=0. pos >= js.length() is true.
+        if (js.isEmpty() && lineNumber == 1) {
+            return null;
+        }
+        // Check for requesting the line just after the last newline
+        // Example: js = "a\n", lineNumber = 2. Loop sets pos=2. pos>=js.length(). Return null.
+        // In general, if pos is at the end, the line number doesn't exist.
+        if (pos == js.length() && lineNumber > 1) {
+             // Ensure we are not treating the first line of an empty file incorrectly here.
+             // The js.isEmpty() check above handles that.
+             return null;
+        }
+        // If pos > js.length(), something went wrong or lineNumber is too high (already handled by loop).
+        // If we reach here and pos >= js.length(), it implies the line doesn't exist.
+        return null;
+
+    }
+
+
     // Remember this offset for the next search we do.
+    // It's placed here because we now know 'pos' points to a valid start index.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
-        return null;
+    // Find the end of the line (next newline or end of string).
+    int endOfLine = js.indexOf('\n', pos);
+    if (endOfLine == -1) {
+      // No newline found after pos. This means it's the last line of the file.
+      // Return the rest of the string starting from pos.
+      return js.substring(pos);
     } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+      // Found a newline. Return the substring from pos up to (excluding) the newline.
+      return js.substring(pos, endOfLine);
     }
   }
\ No newline at end of file
