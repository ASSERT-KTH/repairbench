diff --git a/tmp/d62f460d-0293-416a-977c-4c7fca7338f6_buggy.java b/tmp/2abfc1ea-bea1-4e07-946f-66725fe0bed3_fixed.java
index 0ef85f2..b424218 100644
--- a/tmp/d62f460d-0293-416a-977c-4c7fca7338f6_buggy.java
+++ b/tmp/2abfc1ea-bea1-4e07-946f-66725fe0bed3_fixed.java
@@ -1,50 +1,64 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
     // If we've saved a previous offset and it's for a line less than the
     // one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
+    // Move pos to the beginning of the requested line.
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
+        // The requested line number is greater than the number of lines in the file.
         return null;
       }
-      pos = nextpos + 1;
+      pos = nextpos + 1; // Move pos to the first character of the next line.
     }
 
     // Remember this offset for the next search we do.
+    // Note: If the loop above returned null, this code is not reached.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Check if pos is now beyond the length of the code string.
+    // This can happen if the requested line number is exactly one greater
+    // than the number of lines in the file, and the file ends with a newline.
+    // In that case, the loop completed, and pos was advanced past the final newline.
+    if (pos >= js.length()) {
         return null;
+    }
+
+    // Find the end of the line (the next newline character).
+    int eol = js.indexOf('\n', pos);
+
+    if (eol == -1) {
+      // No newline found after pos. This means we're on the last line.
+      // Return the rest of the string from pos.
+      return js.substring(pos);
     } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+      // Found a newline. Return the substring from pos up to (but not including) the newline.
+      return js.substring(pos, eol);
     }
   }
\ No newline at end of file
