diff --git a/tmp/5aedc973-4095-4c0d-bb86-15ca3bf14678_buggy.java b/tmp/e16a46c3-7716-4b66-aad2-8f1a7f0b9a5d_fixed.java
index 0ef85f2..5a5ba43 100644
--- a/tmp/5aedc973-4095-4c0d-bb86-15ca3bf14678_buggy.java
+++ b/tmp/e16a46c3-7716-4b66-aad2-8f1a7f0b9a5d_fixed.java
@@ -1,50 +1,64 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
     // If we've saved a previous offset and it's for a line less than the
     // one we're searching for, then start at that point.
+    // The >= is important for the edge case where lineNumber = 1.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
+    // Count the number of lines until we reach the desired line number.
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
+      // If we can't find the start of the next line, then the
+      // requested line number is too large, so return null.
       if (nextpos == -1) {
         return null;
       }
-      pos = nextpos + 1;
+      pos = nextpos + 1; // position after the newline
     }
 
     // Remember this offset for the next search we do.
+    // This matters because we might be asked for a nearby line later.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Find the end of the line.
+    int eol = js.indexOf('\n', pos);
+    if (eol == -1) {
+      // If no newline is found, this could be the last line of the file.
+      // Check if 'pos' is a valid index. If it's past the end of the string,
+      // the line doesn't exist (e.g., asking for line 1 in an empty file,
+      // or asking for a line number greater than the actual number of lines).
+      if (pos >= js.length()) {
         return null;
+      }
+      // Otherwise, return the rest of the string from 'pos'.
+      return js.substring(pos);
     } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+      // Return the substring from the start of the line ('pos')
+      // to the end of the line ('eol').
+      return js.substring(pos, eol);
     }
   }
\ No newline at end of file
