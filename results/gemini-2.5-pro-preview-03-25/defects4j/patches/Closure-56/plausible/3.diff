diff --git a/tmp/13a37f69-fb10-4d7f-bf87-b82cee1af125_buggy.java b/tmp/a0010615-7d5d-40f5-83de-6ed56cb5ada9_fixed.java
index 0ef85f2..b0fdd9c 100644
--- a/tmp/13a37f69-fb10-4d7f-bf87-b82cee1af125_buggy.java
+++ b/tmp/a0010615-7d5d-40f5-83de-6ed56cb5ada9_fixed.java
@@ -1,50 +1,69 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
     // If we've saved a previous offset and it's for a line less than the
     // one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
+    // Find the start of the requested line.
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
+        // The requested line number is greater than the number of lines in the file.
         return null;
       }
       pos = nextpos + 1;
     }
 
     // Remember this offset for the next search we do.
+    // Note: lastOffset might be == js.length() if the last line ended with \n
+    // and the requested line is the line after that.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Find the end of the requested line.
+    int endpos = js.indexOf('\n', pos);
+
+    if (endpos == -1) {
+      // If next new line cannot be found, there are two cases:
+      // 1. 'pos' is beyond the end of the file. This happens if the file is
+      //    empty, or if lineNumber is 1 greater than the number of lines
+      //    and the last line ended with \n. In this case, we should return null.
+      // 2. This is the last line of the file and it doesn't end with a
+      //    newline character. In this case, we should return the substring
+      //    from 'pos' to the end of the string.
+      if (pos >= js.length()) {
+        // Case 1: The line number is out of bounds.
         return null;
       } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+        // Case 2: Return the last line.
+        return js.substring(pos);
+      }
+    } else {
+      // Found the end of the line (newline character).
+      // Return the line, excluding the newline character itself.
+      return js.substring(pos, endpos);
     }
   }
\ No newline at end of file
