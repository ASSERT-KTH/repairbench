diff --git a/tmp/f75b924c-ec69-4253-b013-fa01fd1d2784_buggy.java b/tmp/b12898c0-5413-48f7-a4cc-195f9f34b3a1_fixed.java
index 0ef85f2..a4e84c3 100644
--- a/tmp/f75b924c-ec69-4253-b013-fa01fd1d2784_buggy.java
+++ b/tmp/b12898c0-5413-48f7-a4cc-195f9f34b3a1_fixed.java
@@ -1,50 +1,86 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
+    // Line numbers are 1-based. Disallow 0 or negative.
+    if (lineNumber <= 0) {
+        return null;
+    }
+
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
+    // If we've saved a previous offset and it's for a line less than or
+    // equal to the one we're searching for, then start at that point.
+    // Otherwise, start from the beginning.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
+    } else {
+      // Requested line is before the cached line, reset cache and start over.
+      // Although not strictly necessary for correctness (the loop would still work),
+      // resetting the cache state is cleaner.
+      lastLine = 1;
+      lastOffset = 0;
+      // pos and startLine are already 0 and 1.
     }
 
+    // Iterate through lines until we reach the start of the desired line number.
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
+        // We've reached the end of the string before finding the start
+        // of the requested line number.
         return null;
       }
+      // Move position to the character immediately following the newline,
+      // which is the start of the next line.
       pos = nextpos + 1;
     }
 
-    // Remember this offset for the next search we do.
+    // Remember this offset (the start of the current line) for the next search.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Find the end of the current line.
+    int endpos = js.indexOf('\n', pos);
+
+    if (endpos == -1) {
+      // No newline found after 'pos'.
+      // This means we are on the last line of the file, or the file is empty,
+      // or we are trying to access a line beyond the end of a file ending with a newline.
+
+      // Check if 'pos' is actually within the bounds of the string content.
+      // If pos >= js.length(), it means the line we are looking for starts
+      // at or after the end of the file content. This happens for:
+      // - Empty file (js="", lineNumber=1 => pos=0, length=0)
+      // - File ending with newline ("abc\n", lineNumber=2 => loop sets pos=4, length=4)
+      if (pos >= js.length()) {
+          // The requested line number is out of bounds.
           return null;
       } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+          // 'pos' points to the start of the last line, and there's content
+          // from 'pos' to the end of the string. Return this content.
+          return js.substring(pos);
+      }
+    } else {
+      // Found a newline at 'endpos'. The line content is from 'pos' up to
+      // (but not including) the newline character.
+      return js.substring(pos, endpos);
     }
   }
\ No newline at end of file
