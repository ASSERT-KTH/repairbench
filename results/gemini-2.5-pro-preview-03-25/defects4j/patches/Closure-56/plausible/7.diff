diff --git a/tmp/393383be-be77-4995-8a0d-1114ae51a76a_buggy.java b/tmp/323327b2-41e2-4242-a28d-d6c7b49fd024_fixed.java
index 0ef85f2..b034ec9 100644
--- a/tmp/393383be-be77-4995-8a0d-1114ae51a76a_buggy.java
+++ b/tmp/323327b2-41e2-4242-a28d-d6c7b49fd024_fixed.java
@@ -1,50 +1,76 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
+    // Ensure lineNumber is positive
+    if (lineNumber <= 0) {
+      return null;
+    }
+
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
+    // If we've saved a previous offset and it's for a line less than or equal to
+    // the one we're searching for, then start at that point.
+    // Check >= here to handle potential repeated requests for the same line.
+    // Note: This optimization assumes `getCode` always returns the same String object
+    // or that the content has not changed between calls.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
+    // Iterate to find the starting position ('pos') of the requested lineNumber.
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
+        // We've reached the end of the string before finding the start
+        // of the requested line number. This means the line doesn't exist.
         return null;
       }
+      // Move position past the newline character for the next iteration.
       pos = nextpos + 1;
     }
 
-    // Remember this offset for the next search we do.
+    // Remember this offset and line number for the next search we do.
+    // Setting this here ensures that if we returned null above, we don't
+    // incorrectly cache a position for a non-existent line.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Find the end of the line (the next newline character).
+    int endpos = js.indexOf('\n', pos);
+
+    if (endpos == -1) {
+      // No newline found after 'pos'. This means we are on the last line,
+      // or the file is empty, or pos is past the end of the content.
+      // If pos is at or past the end of the string, the requested line doesn't exist
+      // (e.g., empty file requested line 1, or file ends in \n and line after that is requested).
+      if (pos >= js.length()) {
         return null;
       } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+        // We are on a valid line (likely the last line) and it doesn't end with a newline.
+        // Return the rest of the string from 'pos'.
+        return js.substring(pos);
+      }
+    } else {
+      // Found a newline. Return the substring representing the line content
+      // between pos (inclusive) and endpos (exclusive).
+      return js.substring(pos, endpos);
     }
   }
\ No newline at end of file
