diff --git a/tmp/bda90306-7849-4db2-9693-13fbabe316db_buggy.java b/tmp/0c6402c8-e08d-4335-9484-0f6aefe9a4e5_fixed.java
index 0ef85f2..2b63fd1 100644
--- a/tmp/bda90306-7849-4db2-9693-13fbabe316db_buggy.java
+++ b/tmp/0c6402c8-e08d-4335-9484-0f6aefe9a4e5_fixed.java
@@ -1,50 +1,86 @@
   /**
    * Gets the source line for the indicated line number.
    *
    * @param lineNumber the line number, 1 being the first line of the file.
    * @return The line indicated. Does not include the newline at the end
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
   public String getLine(int lineNumber) {
     String js = "";
     try {
       // NOTE(nicksantos): Right now, this is optimized for few warnings.
       // This is probably the right trade-off, but will be slow if there
       // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
+      return null; // IO error
+    }
+    // getCode() might return null if source is unavailable.
+    if (js == null) {
+        return null;
+    }
+
+    // Basic validation for lineNumber.
+    if (lineNumber <= 0) {
         return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
+    // If we've saved a previous offset and it's for a line less than or
+    // equal to the one we're searching for, then start at that point.
+    // TODO(nicksantos): This is not safe if the underlying file changes.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
 
+    // Advance 'pos' to the beginning of the requested line.
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
+        // We've reached the end of the string before finding the start
+        // of the requested line.
         return null;
       }
       pos = nextpos + 1;
     }
 
     // Remember this offset for the next search we do.
+    // NOTE(nicksantos): This is not safe if the underlying file changes.
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Check if the calculated starting position is valid.
+    if (pos > js.length()) {
+      // This should theoretically not happen if the loop logic is correct and
+      // lineNumber is valid, but acts as a safeguard.
+      // It might occur if the file is empty and lineNumber is 1,
+      // although the code below handles the empty case more directly.
         return null;
+    }
+
+    // Find the end of the line.
+    int endpos = js.indexOf('\n', pos);
+
+    if (endpos == -1) {
+      // No newline found after 'pos'. This is the last line of the file,
+      // or it signifies that the requested line number is past the end.
+      if (pos >= js.length()) {
+          // If pos is at or past the end of the string:
+          // 1. If the file was empty (js="", pos=0, len=0) and lineNumber=1 was requested, the line doesn't exist.
+          // 2. If the file ended with a newline (e.g., "a\n") and the line *after* the newline was requested (line 2),
+          //    then pos will be equal to js.length(). This line exists and is empty.
+          return js.isEmpty() ? null : "";
+      } else {
+          // pos < js.length(). This means we are on the last line, and it does not end with a newline.
+          // Return the rest of the string from pos.
+          return js.substring(pos);
+      }
     } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+      // Found a newline. The line content is the substring up to the newline.
+      return js.substring(pos, endpos);
     }
   }
\ No newline at end of file
