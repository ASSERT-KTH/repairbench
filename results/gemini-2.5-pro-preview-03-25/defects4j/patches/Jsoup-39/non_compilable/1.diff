diff --git a/tmp/15139872-d79f-4ee8-b611-f9a2eb543ed5_buggy.java b/tmp/11086015-61de-450f-996d-5bcd39cbfe17_fixed.java
index c4b260c..be21558 100644
--- a/tmp/15139872-d79f-4ee8-b611-f9a2eb543ed5_buggy.java
+++ b/tmp/11086015-61de-450f-996d-5bcd39cbfe17_fixed.java
@@ -1,51 +1,146 @@
-    // todo - this is getting gnarly. needs a rewrite.
-    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.StandardCharsets;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import javax.annotation.Nullable; // Or org.jetbrains.annotations.Nullable if using Jetbrains annotations
+import org.jsoup.helper.Validate;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+
+// todo - this is getting gnarly. needs a rewrite. // Comment kept from original
+static Document parseByteData(ByteBuffer byteData, @Nullable String charsetName, String baseUri, Parser parser) {
     String docData;
-        Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
-                        try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
-                            }
-                        } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
-                        }
-                    }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
+    Document doc;
+    final String defaultCharset = StandardCharsets.UTF_8.name();
+    String finalCharset = null;
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+    // Mark the start for potential resets
+    byteData.mark();
+
+    // 1. Check for BOM (Byte Order Mark)
+    boolean bomFound = false;
+    String bomCharset = null;
+    if (byteData.remaining() >= 3 &&
+        byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {
+        bomCharset = StandardCharsets.UTF_8.name();
+        byteData.position(3); // Skip BOM bytes
+        bomFound = true;
     }
+    // Add checks for other BOMs (UTF-16LE, UTF-16BE) if needed here
+    else {
+        byteData.reset(); // No BOM found or handled, reset to original mark
     }
-        } else { // specified by content type header (or by user on file load)
+    // Mark the start of the actual data (after BOM if applicable) for the final read
+    byteData.mark();
+
+
+    // 2. Determine final charset based on precedence: specified > BOM > meta > default
+    if (charsetName != null) { // Specified charset takes precedence
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+        finalCharset = charsetName;
+        // byteData position is already correctly set (initial mark or after BOM)
+    } else if (bomFound) { // BOM detected and no specific charset specified
+        finalCharset = bomCharset; // Use charset implied by BOM (e.g., UTF-8)
+    } else { // No specified charset, no BOM: detect from meta tags or use default
+        try {
+            // Use a defensive copy/slice for tentative decoding with default charset
+            // slice() creates a view sharing content but with independent pos/limit/mark
+            ByteBuffer bufferForMetaRead = byteData.slice();
+            String tentativeDocData = Charset.forName(defaultCharset).decode(bufferForMetaRead).toString();
+
+            // Parse tentatively to find meta tags.
+            // Note: A full parse is used here to read the meta tag. This is more robust than regex.
+            Document tempDoc = parser.parseInput(tentativeDocData, baseUri);
+
+            // Look for <meta charset=...> or <meta http-equiv=content-type ...>
+            // Prefer <meta charset=charset> as per HTML5 spec
+            Element metaCharset = tempDoc.selectFirst("meta[charset]");
+            if (metaCharset != null) {
+                String foundCharset = metaCharset.attr("charset");
+                if (foundCharset != null && foundCharset.length() > 0) {
+                   finalCharset = foundCharset;
                 }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+            } else {
+                 // Fallback to http-equiv
+                 Element metaHttpEquiv = tempDoc.selectFirst("meta[http-equiv=content-type]");
+                 if (metaHttpEquiv != null) {
+                     String foundCharset = getCharsetFromContentType(metaHttpEquiv.attr("content"));
+                      if (foundCharset != null && foundCharset.length() > 0) {
+                          finalCharset = foundCharset;
                       }
-        if (doc == null) {
+                 }
+            }
+
+            // Validate the found charset (if any)
+            if (finalCharset != null) {
+                 finalCharset = finalCharset.trim().replaceAll("['\"]", ""); // Clean attribute value
+                 try {
+                     if (!Charset.isSupported(finalCharset)) {
+                         // Found charset in meta, but it's not supported. Fallback needed.
+                         finalCharset = null;
+                     }
+                     // else: charset is supported, keep it.
+                 } catch (IllegalCharsetNameException e) {
+                     // Found charset in meta, but the name is illegal. Fallback needed.
+                     finalCharset = null;
+                 }
+            }
+
+        } catch (Exception e) {
+            // Exception during tentative read/parse (e.g., buffer error, parse error).
+            // Ignore and fallback to default charset later. Consider logging 'e'.
+        }
+
+        // If meta detection didn't yield a supported charset, use the default
+        if (finalCharset == null) {
+            finalCharset = defaultCharset;
+        }
+    }
+
+    // 3. Reset buffer to start point (after BOM if applicable) for final decode
+    byteData.reset(); // Reset to the mark set after BOM check/skip
+
+    // 4. Final Decode
+    // Ensure we have a final charset name by this point
+    if (finalCharset == null) { // Should not happen with the logic above, but as a safeguard
+         finalCharset = defaultCharset;
+    }
+
+    try {
+        docData = Charset.forName(finalCharset).decode(byteData).toString();
+    } catch (Exception e) {
+        // If the determined charset failed (e.g., invalid specified charset), throw an exception.
+        // Consider wrapping in a Jsoup-specific exception (e.g., CharsetException) or handle per project strategy.
+        throw new RuntimeException("Failed to decode using charset '" + finalCharset + "'", e);
+    }
+
+    // 5. Final Parse
     doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
-        }
+
+    // 6. Set Output Charset in Document settings
+    // Use the charset that was actually used for decoding.
+    doc.outputSettings().charset(finalCharset);
+
     return doc;
 }
+
+// Helper function to extract charset from Content-Type header value
+// Assumes this function is available or placed within the same class.
+private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)");
+@Nullable
+private static String getCharsetFromContentType(@Nullable String contentType) {
+    if (contentType == null) return null;
+    Matcher m = charsetPattern.matcher(contentType);
+    if (m.find()) {
+        String charset = m.group(1).trim();
+        // Charset.isSupported() should be used to validate before use.
+        // Return the found string, validation happens in the caller.
+        if (charset.length() > 0) {
+            return charset;
+        }
+    }
+    return null;
+}
\ No newline at end of file
