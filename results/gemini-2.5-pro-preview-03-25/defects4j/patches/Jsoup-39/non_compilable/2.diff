diff --git a/tmp/8db771a6-ed0f-4374-801d-594247b2045b_buggy.java b/tmp/ee1e2938-0ead-4414-abd9-b7733bb3e621_fixed.java
index c4b260c..6c1abec 100644
--- a/tmp/8db771a6-ed0f-4374-801d-594247b2045b_buggy.java
+++ b/tmp/ee1e2938-0ead-4414-abd9-b7733bb3e621_fixed.java
@@ -1,51 +1,161 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+import org.jsoup.helper.Validate;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.UnsupportedCharsetException;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+// Stub for defaultCharset and getCharsetFromContentType for context
+import static org.jsoup.helper.DataUtil.defaultCharset;
+import static org.jsoup.helper.DataUtil.getCharsetFromContentType;
+
+
+class DataUtilFixed {
+    // Note: Removed the original todo comment as the function is rewritten.
+    // Added stubs for defaultCharset and getCharsetFromContentType for compilation context if run standalone.
+    // In the actual Jsoup codebase, these would refer to the existing members/methods.
+    // static final String defaultCharset = "UTF-8"; // Example definition
+    // static String getCharsetFromContentType(String contentType) { return null; } // Example definition
+
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        String docData = null;
+        Document doc = null; // The final document
+        Document tempDoc = null; // Temp document for meta charset detection
+        String finalCharset = null; // Determined charset
+        boolean bomFound = false;
+
+        byteData.mark(); // Mark position before any decoding attempt
+
+        // 1. Check for UTF-8 BOM. Takes precedence over everything. (EF BB BF)
+        if (byteData.remaining() >= 3) {
+            byte[] bomBytes = new byte[3];
+            byteData.get(bomBytes);
+            if (bomBytes[0] == (byte) 0xEF && bomBytes[1] == (byte) 0xBB && bomBytes[2] == (byte) 0xBF) {
+                finalCharset = defaultCharset; // BOM dictates UTF-8
+                bomFound = true;
+                // Buffer position is now correctly after BOM bytes. Continue to decode below.
+            } else {
+                byteData.reset(); // Not a BOM, rewind to marked position for full decode
+            }
+        } else {
+             // Not enough bytes to be a BOM, rewind for full decode
+             byteData.reset();
+        }
+
+        if (bomFound) {
+            // Decode remaining data (after BOM) as UTF-8
+            try {
+                 docData = Charset.forName(finalCharset).decode(byteData).toString();
+            } catch (UnsupportedCharsetException e) {
+                 // Should not happen for defaultCharset (UTF-8)
+                 throw new RuntimeException(e);
+            }
+        } else if (charsetName != null) {
+             // 2. Charset explicitly provided by caller (or HTTP header), no BOM.
+             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+             try {
+                 docData = Charset.forName(charsetName).decode(byteData).toString();
+                 finalCharset = charsetName;
+             } catch (UnsupportedCharsetException e) {
+                 // Pass this exception up: the specified charset was invalid.
+                 throw e;
+             }
+        } else {
+             // 3. No BOM, no charset provided - attempt to detect from meta tag.
+             try {
+                 // 3a. Decode tentatively using default charset (UTF-8). Reset buffer afterwards for potential re-decode.
+                 final String tentativeDocData = Charset.forName(defaultCharset).decode(byteData).toString();
+                 byteData.reset(); // Reset buffer to marked position for potential re-decode with detected charset
+
+                 // 3b. Parse tentatively to find meta tag. This is expensive, but necessary.
+                 tempDoc = parser.parseInput(tentativeDocData, baseUri);
+
+                 // 3c. Look for <meta> tag with charset info
+                 // todo: HTML5 specifies precedence: BOM > http-equiv > charset attr > default
+                 Element meta = tempDoc.selectFirst("meta[http-equiv=content-type], meta[charset]");
+                 if (meta != null) {
+                     String foundCharset = null;
+                     // Check http-equiv first
                      if (meta.hasAttr("http-equiv")) {
                          foundCharset = getCharsetFromContentType(meta.attr("content"));
+                     }
+                     // If not found, check charset attribute (HTML5)
                      if (foundCharset == null && meta.hasAttr("charset")) {
                          try {
                              if (Charset.isSupported(meta.attr("charset"))) {
                                  foundCharset = meta.attr("charset");
                              }
                          } catch (IllegalCharsetNameException e) {
+                             // Ignore invalid charset names specified in meta
                              foundCharset = null;
                          }
                      }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                     // 3d. If meta tag found a different charset, and it's supported, use it.
+                     if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) {
+                         // Clean the found charset name (some sites add quotes etc)
                          foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                         // Check it's supported (again, after cleaning)
+                         if (Charset.isSupported(foundCharset)) {
+                             finalCharset = foundCharset;
+                             // Meta charset differs from default and is supported, needs re-decode.
+                             // Buffer position was reset earlier. Now decode with the correct charset.
+                             docData = Charset.forName(finalCharset).decode(byteData).toString();
+                             tempDoc = null; // Discard the temp document parsed with default charset
+                         } else {
+                             // Found charset in meta, but it's not supported. Stick with default.
+                             finalCharset = defaultCharset;
+                             docData = tentativeDocData; // Use the data decoded with default charset
+                             // Keep the tempDoc parsed with default charset (though reparsing below is safer)
+                             tempDoc = null; // Safer to reparse docData decoded with defaultCharset
                          }
+                     } else {
+                          // Meta found but is default, invalid, or missing charset info. Stick with default.
+                          finalCharset = defaultCharset;
+                          docData = tentativeDocData; // Use the data decoded with default charset
+                          // Keep the tempDoc parsed with default charset (though reparsing below is safer)
+                          tempDoc = null; // Safer to reparse docData decoded with defaultCharset
                      }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+                 } else {
+                      // 3e. No meta tag found. Stick with default charset.
+                      finalCharset = defaultCharset;
+                      docData = tentativeDocData; // Use the data decoded with default charset
+                      // Keep the tempDoc parsed with default charset (though reparsing below is safer)
+                      tempDoc = null; // Safer to reparse docData decoded with defaultCharset
                  }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+             } catch (UnsupportedCharsetException e) {
+                 // Should not happen with defaultCharset
+                 throw new RuntimeException(e);
              }
-        if (doc == null) {
+        }
+
+        // Ensure docData is set (should always be, unless UnsupportedCharsetException)
+        if (docData == null) {
+            // If we get here, there was a problem reading the data. The UnsupportedCharsetException may have been thrown.
+            // Or bomFound was true, but the decode failed? (Shouldn't happen for UTF-8). Let's assume docData exists.
+            // Consider adding a Validate.notNull(docData) here? Or handle error case more explicitly.
+            // For now, proceed assuming docData is valid if no exception was thrown.
+        }
+
+        // 4. Parse the string using the final determined charset ONLY IF we haven't already parsed it correctly
+        //    (which happens if we used the tentatively parsed doc for meta-detection and stuck with default charset)
+        //    It's generally safer and cleaner to *always* re-parse here from the final docData string.
+        //    The performance cost of potentially parsing twice (once for meta, once final) is acceptable.
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+
+
+        // 5. Set the determined charset on the document's output settings.
+        if (finalCharset == null) {
+             // Should have been set by now, but fall back just in case.
+             finalCharset = defaultCharset;
         }
+        doc.outputSettings().charset(finalCharset);
+
         return doc;
     }
+}
\ No newline at end of file
