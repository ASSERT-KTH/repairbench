diff --git a/tmp/64fdf66c-fb9d-4b5d-aeee-cdc55a0e873e_buggy.java b/tmp/55185c5c-0a9c-4e60-8df4-c8f9ca9a2036_fixed.java
index c4b260c..acc0756 100644
--- a/tmp/64fdf66c-fb9d-4b5d-aeee-cdc55a0e873e_buggy.java
+++ b/tmp/55185c5c-0a9c-4e60-8df4-c8f9ca9a2036_fixed.java
@@ -1,51 +1,54 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
+            String foundCharset = null; // predicting the encoding is slow, so only do so if we have meta tags
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
+                }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
+                        // if specified charset is invalid, it may be some garbage value, so ignore. See #1090
                         foundCharset = null;
                     }
                 }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    doc = null; // indicate doc needs re-parsing
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
         // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+        // Note that DataUtil.readToByteBuffer removes the BOM, so this will only be hit if unmodified bytebuffer is passed in.
+        if (docData.length() > 0 && docData.charAt(0) == 65279) { // 65279 is the BOM char \uFEFF
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
+            charsetName = defaultCharset; // After BOM, we are definitively UTF-8
+            doc = null; // indicate doc needs re-parsing
         }
+
         if (doc == null) {
+            // makes sense to re-parse only if we needed to re-decode, or if we haven't yet parsed (charset was specified)
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
