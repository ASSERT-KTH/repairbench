diff --git a/tmp/e08682bf-c3ba-48d6-888e-d8bdfaeee25a_buggy.java b/tmp/af8b89bb-f42a-4897-ab0e-a311ced37710_fixed.java
index c4b260c..db86f67 100644
--- a/tmp/e08682bf-c3ba-48d6-888e-d8bdfaeee25a_buggy.java
+++ b/tmp/af8b89bb-f42a-4897-ab0e-a311ced37710_fixed.java
@@ -1,51 +1,80 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        // Use a temporary variable to track the charset as it's detected or specified
+        String detectedCharset = charsetName;
+
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            // Initial decode attempt with default charset
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+            doc = parser.parseInput(docData, baseUri); // Initial parse to look for meta tags
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            detectedCharset = defaultCharset; // Assume default if no meta found
+
+            if (meta != null) { // if found, potentially override charset
+                String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
+                    // Note: Original logic might miss charset if http-equiv is present but doesn't specify charset, and meta[charset] exists.
+                    // Keeping original logic structure for minimal fix.
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
+                            // ignore invalid charset
                             foundCharset = null;
                         }
                     }
-                } else {
+                } else if (meta.hasAttr("charset")) { // <meta charset=...>
+                     try {
+                         if (Charset.isSupported(meta.attr("charset"))) {
                              foundCharset = meta.attr("charset");
                          }
+                     } catch (IllegalCharsetNameException e) {
+                         // ignore invalid charset
+                         foundCharset = null;
+                     }
+                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    detectedCharset = foundCharset; // Update detected charset
+                    byteData.rewind(); // Rewind buffer for re-decoding
+                    docData = Charset.forName(detectedCharset).decode(byteData).toString(); // Re-decode with found charset
+                    doc = null; // Set doc to null to trigger re-parse below
                 }
+                // If no charset found in meta, or it's the default, keep the initial parse (doc != null)
             }
+            // If no meta tag found, keep the initial parse (doc != null) and default charset
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            detectedCharset = charsetName; // Use the specified charset
+            // doc is still null, needs parsing
         }
+
         // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        // Check if the string data starts with the BOM character (\uFEFF)
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
+            byteData.rewind(); // Rewind the original byte buffer
+            // Re-decode forced as UTF-8 (defaultCharset)
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+            docData = docData.substring(1); // Remove the BOM character from the string
+            detectedCharset = defaultCharset; // BOM implies UTF-8, override any previous detection/specification
+            doc = null; // *** FIX: Force re-parse with BOM removed and correct charset ***
         }
+
         if (doc == null) {
+            // If doc is null, it needs parsing (or re-parsing).
+            // This happens if charset was specified, or meta charset required re-decode, or BOM was found.
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+
+        // Set the output charset on the final document based on the determined charset
+        doc.outputSettings().charset(detectedCharset);
         return doc;
     }
\ No newline at end of file
