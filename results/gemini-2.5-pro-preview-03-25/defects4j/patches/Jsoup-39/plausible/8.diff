diff --git a/tmp/081963e3-8a9a-439c-8894-3cd2c7b75887_buggy.java b/tmp/69187e84-565f-4358-bb94-47b201d8adc4_fixed.java
index c4b260c..f5a36e6 100644
--- a/tmp/081963e3-8a9a-439c-8894-3cd2c7b75887_buggy.java
+++ b/tmp/69187e84-565f-4358-bb94-47b201d8adc4_fixed.java
@@ -1,51 +1,81 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+                String foundCharset = null; // Declared here for broader scope
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
+                    // According to original code logic, check charset attribute only if http-equiv doesn't specify charset
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
+                            // charset is unsupported, leave foundCharset as null
                             foundCharset = null;
                         }
                     }
-                } else {
+                } else if (meta.hasAttr("charset")) { // Only check charset if http-equiv is not present
+                    try {
+                         if (Charset.isSupported(meta.attr("charset"))) {
                              foundCharset = meta.attr("charset");
                          }
+                     } catch (IllegalCharsetNameException e) {
+                         // charset is unsupported, leave foundCharset as null
+                         foundCharset = null;
+                     }
+                }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                    charsetName = foundCharset; // Update the charset name
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    doc = null; // Set doc to null to trigger re-parse
                 }
             }
+            // If charsetName is still null, we should use the default charset.
+            // This might be because no meta tag was found, or the found charset was the default one.
+             if (charsetName == null) {
+                 charsetName = defaultCharset;
+             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            // doc is null here, will be parsed below.
         }
         // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+        // This check needs to happen after decoding potentially happens above.
+        // It might override the detected or supplied charset if a BOM is present.
+        if (docData != null && docData.length() > 0 && docData.charAt(0) == 65279) { // Check for BOM
             byteData.rewind();
+            // Re-decode using the default charset (UTF-8) as BOM implies UTF-8
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+            docData = docData.substring(1); // Remove the BOM character
+            charsetName = defaultCharset; // BOM dictates UTF-8
+            doc = null; // *** FIX: Ensure doc is null so that it will be re-parsed with the BOM removed ***
         }
+        
         if (doc == null) {
+            // Parse the string document data. This happens if:
+            // 1. Charsetname was specified originally.
+            // 2. Charsetname was null, but a meta tag specified a different charset, requiring re-decode.
+            // 3. A BOM was found, requiring re-decode and removal.
             doc = parser.parseInput(docData, baseUri);
+            // Set the document charset to the determined one
+            doc.outputSettings().charset(charsetName);
+        } else {
+            // If doc is not null here, it means charsetName was null, we parsed with defaultCharset,
+            // and no different meta charset was found, and no BOM was found.
+            // We still need to set the charset on the document.
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
