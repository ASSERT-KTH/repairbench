diff --git a/tmp/19a527a4-e28e-4d95-8ca0-2b26476d5189_buggy.java b/tmp/37c68787-86b2-41fe-9d89-4fe460d7fd6c_fixed.java
index c4b260c..f7dda6e 100644
--- a/tmp/19a527a4-e28e-4d95-8ca0-2b26476d5189_buggy.java
+++ b/tmp/37c68787-86b2-41fe-9d89-4fe460d7fd6c_fixed.java
@@ -1,51 +1,66 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+            docData = Charset.forName(defaultCharset).decode(byteData).toString(); // Initial decode using default charset
+            doc = parser.parseInput(docData, baseUri); // Initial parse
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
+            String foundCharset = null; // Declare foundCharset outside the meta block to track it later
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
+                }
+                if (foundCharset == null && meta.hasAttr("charset")) { // Check charset attr if http-equiv failed or wasn't present
                      try {
                          if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                          }
                      } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
+                            foundCharset = null; // Treat invalid charset name as null
                      }
                 }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode if different charset found
+                    // Rerun same check from else branch, but use found charset
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    charsetName = foundCharset; // Update the authoritative charsetName
+                    byteData.rewind(); // Rewind buffer for re-decoding
+                    docData = Charset.forName(foundCharset).decode(byteData).toString(); // Re-decode with found charset
+                    doc = null; // Set doc to null to trigger re-parse later
                 }
             }
+            // If we fall through here, doc might still be the initially parsed doc (using defaultCharset)
+            // docData might still be the initially decoded data (with BOM if present)
+            // charsetName might still be null (if no meta tag found or meta tag had defaultCharset)
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            // doc is still null here
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+
+        // UTF-8 BOM indicator check. This comes AFTER potential meta charset detection or explicit charset setting.
+        // It overrides other findings if a BOM is present.
+        // Uses the correct defaultCharset defined in DataUtil.
+        if (docData.length() > 0 && docData.charAt(0) == 65279) { // Check for BOM (U+FEFF)
+            byteData.rewind(); // Rewind buffer
+            docData = Charset.forName(defaultCharset).decode(byteData).toString(); // Re-decode ALWAYS using defaultCharset (UTF-8) if BOM present
+            docData = docData.substring(1); // Remove BOM from string
+            charsetName = defaultCharset; // Set charset to defaultCharset, overriding any previous value
+            doc = null; // Set doc to null to force re-parse with BOM removed and defaultCharset (UTF-8)
         }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+
+        if (doc == null) { // This will be true if: 1) charsetName was specified, 2) meta tag forced re-decode, 3) BOM forced re-decode
+            doc = parser.parseInput(docData, baseUri); // Parse the potentially re-decoded and BOM-stripped docData
+            // Determine the charset to set on the document. Prioritize the final 'charsetName' value.
+            // If charsetName is null here, it means we started with null, didn't find a meta tag, and didn't find a BOM, so use defaultCharset.
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
+        } else {
+            // This case is reached ONLY if charsetName was initially null, no relevant meta tag was found, AND no BOM was detected.
+            // The doc was parsed using the defaultCharset. Set the charset accordingly.
+             doc.outputSettings().charset(defaultCharset);
         }
+
         return doc;
     }
\ No newline at end of file
