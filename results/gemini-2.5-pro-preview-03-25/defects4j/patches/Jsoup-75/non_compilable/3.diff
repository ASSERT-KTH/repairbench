diff --git a/tmp/0525318b-24e8-4f2c-93d0-00a4a33e5ee6_buggy.java b/tmp/4cb5cbe4-fbb2-4574-8e9a-933a4dfed598_fixed.java
index 98b456f..7b51170 100644
--- a/tmp/0525318b-24e8-4f2c-93d0-00a4a33e5ee6_buggy.java
+++ b/tmp/4cb5cbe4-fbb2-4574-8e9a-933a4dfed598_fixed.java
@@ -1,17 +1,57 @@
     final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
         final int sz = size;
         for (int i = 0; i < sz; i++) {
             // inlined from Attribute.html()
             final String key = keys[i];
-            final String val = vals[i];
+            final String val = vals[i]; // can be null -> checked below
             accum.append(' ').append(key);
 
             // collapse checked=null, checked="", checked=checked; write out others
-            if (!(out.syntax() == Document.OutputSettings.Syntax.html
-                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
+            // The value should be omitted if:
+            // 1) It's really null
+            // 2) In HTML mode, the attribute is boolean, and the value matches the key or is empty
+            if (!Attribute.shouldCollapseAttribute(key, val, out)) {
                 accum.append("=\"");
+                // if val is null, use empty string - happens in Attributes where null allowed for vals
                 Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
                 accum.append('"');
             }
         }
     }
+
+    // Added helper method from Attribute class for context (or assume it exists)
+    static boolean shouldCollapseAttribute(final String key, @Nullable final String val, final Document.OutputSettings out) {
+        return (
+            out.syntax() == Document.OutputSettings.Syntax.html &&
+            (val == null || (Attribute.isBooleanAttribute(key) && (val.isEmpty() || val.equalsIgnoreCase(key))))
+            // Note: previous impl was `val.equals(key)` but that differs from spec / legacy user agents
+            // e.g. `<details open=open>` is equivalent to `<details open>`
+        );
+    }
+
+    // Note: The fix involves calling Attribute.shouldCollapseAttribute, which encapsulates the corrected logic.
+    // If modifying the existing code directly without adding the helper method call:
+    /*
+    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
+        final int sz = size;
+        for (int i = 0; i < sz; i++) {
+            // inlined from Attribute.html()
+            final String key = keys[i];
+            final String val = vals[i]; // can be null -> checked below
+            accum.append(' ').append(key);
+
+            // collapse checked=null, checked="", checked=checked; write out others
+            // The value should be omitted if: output is html, key is boolean attribute, and value is null, empty, or equals key.
+            boolean omitValuePart = out.syntax() == Document.OutputSettings.Syntax.html
+                                  && Attribute.isBooleanAttribute(key)
+                                  && (val == null || val.isEmpty() || val.equalsIgnoreCase(key)); // Use equalsIgnoreCase like in Attribute.java
+
+            if (!omitValuePart) {
+                accum.append("=\"");
+                // if val is null, use empty string - happens in Attributes where null allowed for vals
+                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
+                accum.append('"');
+            }
+        }
+    }
+    */
