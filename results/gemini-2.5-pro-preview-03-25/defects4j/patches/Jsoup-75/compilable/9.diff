diff --git a/tmp/89c3a07d-f500-4c66-88ff-48929ff00cca_buggy.java b/tmp/db4b2879-a2e6-4639-b55b-71d3acba2e99_fixed.java
index 98b456f..9797bdf 100644
--- a/tmp/89c3a07d-f500-4c66-88ff-48929ff00cca_buggy.java
+++ b/tmp/db4b2879-a2e6-4639-b55b-71d3acba2e99_fixed.java
@@ -1,17 +1,29 @@
     final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
         final int sz = size;
         for (int i = 0; i < sz; i++) {
             // inlined from Attribute.html()
             final String key = keys[i];
             final String val = vals[i];
             accum.append(' ').append(key);
 
-            // collapse checked=null, checked="", checked=checked; write out others
-            if (!(out.syntax() == Document.OutputSettings.Syntax.html
-                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
+            // Determine if this attribute should be output in collapsed boolean fashion (key only, no value)
+            // Example: <div noshade> rather than <div noshade="">
+            // Boolean attributes should be collapsed in HTML mode if the value is null, empty, or equals the key's name (case-insensitive).
+            // The presence of the attribute name implies true in HTML5
+            final boolean renderValue = !(
+                out.syntax() == Document.OutputSettings.Syntax.html &&
+                Attribute.isBooleanAttribute(key) &&
+                (val == null || val.isEmpty() || val.equalsIgnoreCase(key)) // collapse null, empty, or value=key name
+            );
+
+            if (renderValue) {
                 accum.append("=\"");
+                // Use EmptyString representation for null values if needed, consistent with original code's pattern,
+                // although val should typically not be null when renderValue is true based on the condition above,
+                // except for non-boolean attributes where val might be null.
                 Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
                 accum.append('"');
             }
+            // else: If it's a boolean attribute suitable for collapsing, we've already output the key, and that's all.
         }
     }
