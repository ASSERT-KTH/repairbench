diff --git a/tmp/1821840c-288a-445f-b32a-e814c99f8e6f_buggy.java b/tmp/2d4471c6-4e39-45a5-95ad-ad39592e61b1_fixed.java
index 98b456f..ebee090 100644
--- a/tmp/1821840c-288a-445f-b32a-e814c99f8e6f_buggy.java
+++ b/tmp/2d4471c6-4e39-45a5-95ad-ad39592e61b1_fixed.java
@@ -1,17 +1,23 @@
     final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
         final int sz = size;
         for (int i = 0; i < sz; i++) {
             // inlined from Attribute.html()
             final String key = keys[i];
             final String val = vals[i];
             accum.append(' ').append(key);
 
-            // collapse checked=null, checked="", checked=checked; write out others
+            // Check if this attribute should be output as valueless or valued
+            // Output value unless it's HTML syntax, the attribute is boolean,
+            // and the value represents true (null, empty string, or the key name case-insensitively).
             if (!(out.syntax() == Document.OutputSettings.Syntax.html
-                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
+                  && Attribute.isBooleanAttribute(key)
+                  && (val == null || val.equals("") || val.equalsIgnoreCase(key)))) {
                 accum.append("=\"");
-                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
+                // Assuming EmptyString constant is "" or equivalent handling for null val
+                Entities.escape(accum, val == null ? "" : val, out, true, false, false);
                 accum.append('"');
             }
+            // otherwise, in HTML mode, for boolean attributes whose value represents true,
+            // no value is appended, rendering the attribute valueless.
         }
     }
\ No newline at end of file
