diff --git a/tmp/1f0fcc66-13d9-4e48-99b3-ddf8b9576bf7_buggy.java b/tmp/c6d10a30-7842-4d11-85d2-adbecdd72627_fixed.java
index 98b456f..f7a373f 100644
--- a/tmp/1f0fcc66-13d9-4e48-99b3-ddf8b9576bf7_buggy.java
+++ b/tmp/c6d10a30-7842-4d11-85d2-adbecdd72627_fixed.java
@@ -1,17 +1,21 @@
     final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
         final int sz = size;
         for (int i = 0; i < sz; i++) {
             // inlined from Attribute.html()
             final String key = keys[i];
             final String val = vals[i];
             accum.append(' ').append(key);
 
-            // collapse checked=null, checked="", checked=checked; write out others
+            // collapse boolean attributes in html mode: key=null, key=key, key="" => key
+            // render others as key="val"
+            // The specific check for boolean attributes handling was adjusted to include the case where val is an empty string.
             if (!(out.syntax() == Document.OutputSettings.Syntax.html
-                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
+                && Attribute.isBooleanAttribute(key)
+                && (val == null || val.equals(key) || val.equals("")) )) { // Added val.equals("") check for boolean attributes
                 accum.append("=\"");
-                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
+                // Ensure Entities and EmptyString are accessible in this context. Assuming EmptyString is ""
+                Entities.escape(accum, val == null ? "" : val, out, true, false, false); // Replaced EmptyString with "" for clarity if not defined in scope
                 accum.append('"');
             }
         }
     }
