diff --git a/tmp/85bd4ab5-f4e8-45f1-be83-ca82ad723b02_buggy.java b/tmp/7b55fffe-85a6-43a8-b625-7b07c7e32c4f_fixed.java
index 98b456f..627465c 100644
--- a/tmp/85bd4ab5-f4e8-45f1-be83-ca82ad723b02_buggy.java
+++ b/tmp/7b55fffe-85a6-43a8-b625-7b07c7e32c4f_fixed.java
@@ -1,17 +1,23 @@
     final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
         final int sz = size;
         for (int i = 0; i < sz; i++) {
             // inlined from Attribute.html()
             final String key = keys[i];
             final String val = vals[i];
             accum.append(' ').append(key);
 
-            // collapse checked=null, checked="", checked=checked; write out others
+            // collapse conditions for boolean attributes in html syntax: key=null, key="", key=key
+            // Rationale: these values are equivalent to omitting the value altogether for boolean attributes.
+            // "false" is not collapsed, because that has specific meaning.
             if (!(out.syntax() == Document.OutputSettings.Syntax.html
-                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
+                && Attribute.isBooleanAttribute(key) // is it a known boolean attribute?
+                && (val == null || val.isEmpty() || val.equalsIgnoreCase(key)))) { // should we collapse it? (valueless or value is empty or matches key)
+                // if not collapsing, write out the value
                 accum.append("=\"");
+                // Original code used EmptyString for null val; assuming it's available and equivalent to "" for escape context.
                 Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
                 accum.append('"');
             }
+            // else: looks like a boolean attribute that should be collapsed, so just the key is written.
         }
     }
