diff --git a/tmp/d968b4a4-c2f7-4089-a7fd-a197220940b1_buggy.java b/tmp/e286fca6-bbe3-4b2d-8936-614ac3c22014_fixed.java
index 1c875ad..70b618e 100644
--- a/tmp/d968b4a4-c2f7-4089-a7fd-a197220940b1_buggy.java
+++ b/tmp/e286fca6-bbe3-4b2d-8936-614ac3c22014_fixed.java
@@ -1,31 +1,37 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object[] rawArguments = invocation.getRawArguments();
+        int argumentCount = rawArguments.length;
+        int matcherCount = matchers.size();
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+        for (int position = 0; position < matcherCount; position++) {
             Matcher m = matchers.get(position);
+
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
-        }
+                CapturesArguments captor = (CapturesArguments) m;
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                // Check if this matcher is specifically for handling varargs element by element
+                // and if it's placed at the vararg parameter position.
+                // Assumes helper methods isVarargMatcher(Matcher) and isVariableArgument(Invocation, int) exist
+                // within the class scope or are accessible.
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    // Capture all remaining actual arguments from this position onwards as individual captures.
+                    // This handles calls like method("a", "b") for method(String... args) correctly.
+                    for (int i = position; i < argumentCount; i++) {
+                        captor.captureFrom(rawArguments[i]);
+                    }
+                    // Once a vararg matcher captures arguments, stop processing further matchers
+                    // as the vararg matcher consumes all remaining arguments for the purpose of capturing.
+                    return;
+                } else {
+                    // Standard capture: capture the single argument at the current position.
+                    // This also handles the case where a vararg parameter is matched by a non-vararg matcher
+                    // (e.g., eq(new String[]{"a", "b"})), capturing the array object itself.
+                    if (position < argumentCount) {
+                        captor.captureFrom(rawArguments[position]);
+                    }
+                    // If position >= argumentCount, there's no argument for this matcher
+                    // (e.g., method() called for method(int i, String s)), so capture nothing.
+                }
+            }
+        }
     }
\ No newline at end of file
