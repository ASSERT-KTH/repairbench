diff --git a/tmp/08e9b5f0-7c3f-4e29-928f-d08a729b8a16_buggy.java b/tmp/6454252a-5482-4376-97fa-2eca20f3e594_fixed.java
index 1c875ad..22669b9 100644
--- a/tmp/08e9b5f0-7c3f-4e29-928f-d08a729b8a16_buggy.java
+++ b/tmp/6454252a-5482-4376-97fa-2eca20f3e594_fixed.java
@@ -1,31 +1,37 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        // Defer FÃ¡bio's comment on issue 1 capturesArgumentsFrom has different implementation for varargs
+        // The implementation seems correct AFAICT
+        // This combines both varargs and non-varargs logic
+        int lastParameterPosition = invocation.getMethod().getParameterTypes().length - 1;
+        boolean isVarargsMethod = invocation.getMethod().isVarArgs();
+        Object[] rawArguments = invocation.getRawArguments();
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
-        }
+            // Check if matcher captures and if an argument potentially exists at this position
+            // Using rawArguments length check handles cases where fewer args are passed than matchers exist.
+            if (m instanceof CapturesArguments && rawArguments.length > position) {
+                CapturesArguments captor = (CapturesArguments) m;
+                Object argument = rawArguments[position];
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                // Check if this specific argument position corresponds to the varargs parameter
+                if (isVarargsMethod && position == lastParameterPosition) {
+                    // Argument should be an array (or null) if it's the vararg one.
+                    if (argument != null && argument.getClass().isArray()) {
+                        // Capture each element of the vararg array
+                        for (int i = 0; i < Array.getLength(argument); i++) {
+                            captor.captureFrom(Array.get(argument, i));
+                        }
+                    } else {
+                        // Vararg array is null or somehow not an array (e.g. null passed explicitly).
+                        // Capture the value itself.
+                        captor.captureFrom(argument);
+                    }
+                } else {
+                    // It's a regular argument (or a varargs method but not the varargs parameter position).
+                    // Capture the argument directly.
+                    captor.captureFrom(argument);
+                }
+            }
+        }
     }
\ No newline at end of file
