diff --git a/tmp/de52d4dd-5b68-44b2-892c-2eee46eab828_buggy.java b/tmp/da289e29-b84f-43cf-a259-c8b1493dffbd_fixed.java
index 1c875ad..e3db5bf 100644
--- a/tmp/de52d4dd-5b68-44b2-892c-2eee46eab828_buggy.java
+++ b/tmp/da289e29-b84f-43cf-a259-c8b1493dffbd_fixed.java
@@ -1,31 +1,44 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        int matchersSize = matchers.size();
+        Object[] rawArgs = invocation.getRawArguments();
+        int actualArgCount = rawArgs.length;
+        Method method = invocation.getMethod();
+        boolean isVarArgs = method.isVarArgs();
+        // The vararg parameter is the last one in the signature
+        int varargPosition = -1;
+        if (isVarArgs) {
+            varargPosition = method.getParameterTypes().length - 1;
+        }
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+        for (int position = 0; position < matchersSize; position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
+            // If matcher doesn't capture, simply continue.
+            if (!(m instanceof CapturesArguments)) {
+                continue;
             }
+            CapturesArguments captor = (CapturesArguments) m;
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+            // Check if this matcher is for the vararg parameter position
+            if (isVarArgs && position == varargPosition) {
+                // Capture all remaining actual arguments from the vararg position onwards.
+                // This occurs when the number of matchers equals the number of declared parameters,
+                // and the last matcher corresponds to the vararg parameter.
+                for (int i = position; i < actualArgCount; i++) {
+                    captor.captureFrom(rawArgs[i]);
+                }
+                // Once the vararg arguments are captured, break the loop as this captor
+                // accounts for all remaining arguments.
+                break;
+            } else {
+                // Capture a single argument for a non-vararg parameter,
+                // or if the method isn't varargs.
+                // Check if an argument exists at this position before capturing.
+                if (position < actualArgCount) {
+                    captor.captureFrom(rawArgs[position]);
+                }
+                // If position >= actualArgCount, there's no corresponding argument in this
+                // specific invocation for this matcher/captor (e.g., fewer args passed than matchers),
+                // so nothing is captured for this position.
+            }
+        }
     }
\ No newline at end of file
