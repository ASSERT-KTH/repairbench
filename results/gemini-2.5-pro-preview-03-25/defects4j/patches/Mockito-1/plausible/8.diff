diff --git a/tmp/e82278ff-d64e-4762-a3e3-b60dce4d382f_buggy.java b/tmp/3b993dec-3bed-4bb1-bc48-7e4ed46f46ea_fixed.java
index 1c875ad..3d76231 100644
--- a/tmp/e82278ff-d64e-4762-a3e3-b60dce4d382f_buggy.java
+++ b/tmp/3b993dec-3bed-4bb1-bc48-7e4ed46f46ea_fixed.java
@@ -1,31 +1,55 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        int numMatchers = matchers.size(); // Assuming matchers is available field List<Matcher>
+        int numArgs = invocation.getRawArguments().length;
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+        for (int position = 0; position < numMatchers; position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            if (!(m instanceof org.mockito.internal.matchers.CapturesArguments)) {
+                continue; // Skip non-capturing matchers
             }
+
+            org.mockito.internal.matchers.CapturesArguments captor = (org.mockito.internal.matchers.CapturesArguments) m;
+            boolean isVarargMethod = invocation.getMethod().isVarArgs();
+            int varargParameterIndex = -1;
+            if (isVarargMethod) {
+                 // The index of the vararg parameter in the *declared* parameters list
+                 varargParameterIndex = invocation.getMethod().getParameterTypes().length - 1;
+            }
+
+            // Check if the current matcher position corresponds to the vararg parameter
+            if (isVarargMethod && position == varargParameterIndex) {
+                // This matcher corresponds to the vararg parameter. Capture elements from the array argument.
+
+                Object varargArgument = null;
+                // The vararg argument array (or null) is expected at this position in rawArguments.
+                if (position < numArgs) {
+                     varargArgument = invocation.getRawArguments()[position];
+                }
+                // If position >= numArgs, it implies no varargs elements were passed, varargArgument remains null.
+                // The logic below handles null correctly (captures null) and handles empty array correctly (captures no elements).
+
+                // Capture elements if it's an array, otherwise capture the value itself (e.g., null).
+                if (varargArgument != null && varargArgument.getClass().isArray()) {
+                    int arrayLength = java.lang.reflect.Array.getLength(varargArgument);
+                    for (int i = 0; i < arrayLength; i++) {
+                        captor.captureFrom(java.lang.reflect.Array.get(varargArgument, i));
                     }
+                } else {
+                    // Capture the argument itself (which could be null if nothing was passed for varargs,
+                    // or if null was explicitly passed as the vararg array)
+                    captor.captureFrom(varargArgument);
                 }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                // Vararg parameter captured, finish processing matchers for this invocation.
+                // This assumes one matcher corresponds to the entire vararg parameter set.
+                return;
+
+            } else {
+                // This matcher is for a regular (non-vararg) parameter position.
+                if (position < numArgs) {
+                    captor.captureFrom(invocation.getRawArguments()[position]);
+                }
+                // else: No argument at this position (e.g., invocation with fewer args than matchers), capture nothing.
+            }
+        }
     }
\ No newline at end of file
