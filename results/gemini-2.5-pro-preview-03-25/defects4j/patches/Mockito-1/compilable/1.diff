diff --git a/tmp/58c23990-9e38-4da6-b4e0-616135339923_buggy.java b/tmp/8e5d6406-57c0-4fb5-8c87-1befc567aad5_fixed.java
index 1c875ad..3d3292d 100644
--- a/tmp/58c23990-9e38-4da6-b4e0-616135339923_buggy.java
+++ b/tmp/8e5d6406-57c0-4fb5-8c87-1befc567aad5_fixed.java
@@ -1,31 +1,53 @@
     public void captureArgumentsFrom(Invocation invocation) {
+        int nrOfMatchers = matchers.size();
+        // Use getRawArguments length as it corresponds to the number of arguments passed,
+        // where varargs are represented as a single array entry. This length is suitable
+        // for bounds checking when using getArgumentAt(parameterIndex, ...).
+        int nrOfArgs = invocation.getRawArguments().length;
+
         if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+            int varargParameterIndex = invocation.getMethod().getParameterTypes().length - 1;
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
+            for (int position = 0; position < nrOfMatchers; position++) {
+                // Assumes 'matchers' list contains ArgumentMatcher or similar that can be cast to Matcher
+                org.mockito.ArgumentMatcher m = (org.mockito.ArgumentMatcher) matchers.get(position);
                 if (m instanceof CapturesArguments) {
+                    CapturesArguments captor = (CapturesArguments) m;
+
+                    if (position < varargParameterIndex) {
+                        // Capture regular argument before varargs
+                        if (position < nrOfArgs) { // Check arg exists
+                            captor.captureFrom(invocation.getArgumentAt(position, Object.class));
+                        }
+                    } else if (position == varargParameterIndex) {
+                        // Capture varargs. The argument at this position is the vararg array.
+                        // Check if the vararg argument itself exists in the invocation
+                        if (varargParameterIndex < nrOfArgs) {
+                            Object varargArray = invocation.getArgumentAt(varargParameterIndex, Object.class);
+                            if (varargArray != null && varargArray.getClass().isArray()) {
+                                int length = java.lang.reflect.Array.getLength(varargArray);
+                                for (int i = 0; i < length; i++) {
+                                    captor.captureFrom(java.lang.reflect.Array.get(varargArray, i));
+                                }
+                            } else {
+                                // Capture the argument as-is if it's null or not an array (e.g., null passed explicitly)
+                                captor.captureFrom(varargArray);
+                            }
+                        }
+                        // If varargParameterIndex >= nrOfArgs, it implies an empty vararg array or fewer args than expected.
+                        // Capturing nothing in this case is correct as no corresponding vararg elements were passed.
+                    }
+                    // else: Matcher position is > varargParameterIndex. This implies more matchers than parameters.
+                    // There's no distinct argument to capture. Ignore.
+                }
+            }
+        } else {
+            // Non-varargs: Capture arguments using getArgumentAt, checking bounds.
+            for (int position = 0; position < nrOfMatchers; position++) {
+                org.mockito.ArgumentMatcher m = (org.mockito.ArgumentMatcher) matchers.get(position);
+                if (m instanceof CapturesArguments && position < nrOfArgs) {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
