diff --git a/tmp/1a66a839-fdf2-43b2-9306-52373cd51be6_buggy.java b/tmp/b65618cc-7f73-4a53-b7d3-e6e9e8385e90_fixed.java
index 1c875ad..a19b0a0 100644
--- a/tmp/1a66a839-fdf2-43b2-9306-52373cd51be6_buggy.java
+++ b/tmp/b65618cc-7f73-4a53-b7d3-e6e9e8385e90_fixed.java
@@ -1,31 +1,48 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+//        if (invocation.getMethod().isVarArgs()) {
+//            int indexOfVararg = invocation.getRawArguments().length - 1;
+//            throw new UnsupportedOperationException();
+//
+//        } else {
+//            for (int position = 0; position < matchers.size(); position++) {
+//                Matcher m = matchers.get(position);
+//                if (m instanceof CapturesArguments) {
+//                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+//                }
+//            }
+//        }
 
-        } else {
+        // Commented out code restored below
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
+            //TODO SF extract this method
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
+                //TODO SF - this whole lot can be moved captureFrom implementation
+                if(invocation.getMethod().isVarArgs() && position == invocation.getRawArguments().length-1) {
+                    //TODO SF does it handle null vararg array?
+                    // captures all arguments from the vararg array
+                    Object array = invocation.getRawArguments()[position];
+                    int arrayLength = java.lang.reflect.Array.getLength(array);
+                    for (int i = 0; i < arrayLength; i++) {
+                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));
                     }
+                    //since we've captured all varargs already, it does not make sense to process other matchers.
+                    //processing further matchers has no sense (because vararg captures all remaining args)
+                    //however, we need to handle the case when the vararg is ArrayEquals matcher:
+                    if(VarargMatcher.class.isAssignableFrom(m.getClass())){
+                        // if it's a vararg matcher then we're done
+                        return;
+                    } else {
+                        // seems like the vararg is matched using non-vararg matcher (e.g. eq(..))
+                        // according to current impl of ArgumentCaptor.capture() we need to capture the whole array
+                        // capturing the whole array is the default behavior below
+                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
                     }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                } else if (invocation.getRawArguments().length > position) {
+                    // captures regular arguments
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+                }
+            }
+        }
     }
\ No newline at end of file
