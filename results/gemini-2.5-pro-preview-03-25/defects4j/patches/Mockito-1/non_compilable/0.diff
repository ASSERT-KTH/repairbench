diff --git a/tmp/155b9843-52f8-4009-bd53-1c4d69a1539b_buggy.java b/tmp/870bc1f0-2d14-4144-b4d5-e3ce3b4af5c1_fixed.java
index 1c875ad..4a3c6ac 100644
--- a/tmp/155b9843-52f8-4009-bd53-1c4d69a1539b_buggy.java
+++ b/tmp/870bc1f0-2d14-4144-b4d5-e3ce3b4af5c1_fixed.java
@@ -1,31 +1,62 @@
+import org.mockito.internal.matchers.CapturesArguments;
+import org.mockito.internal.matchers.Matcher;
+import org.mockito.invocation.Invocation;
+
+import java.lang.reflect.Array;
+
+// Assume necessary helper methods like isVariableArgument and isVarargMatcher exist in the enclosing class or are accessible.
+// The following is the fixed version of the captureArgumentsFrom method.
+
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    // Iterate through the matchers provided for this invocation matcher
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
+
+        // Check if the matcher is capable of capturing arguments
         if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
+            CapturesArguments captor = (CapturesArguments) m;
+            Object[] rawArguments = invocation.getRawArguments();
+
+            // Check if the invocation actually has an argument at this position
+            if (rawArguments.length > position) {
+                Object argument = rawArguments[position];
+
+                // Special handling for varargs:
+                // Check if the current argument position corresponds to the vararg parameter
+                // and if the matcher itself is specifically a vararg matcher.
+                // We assume isVariableArgument checks if 'position' is the index of the vararg parameter
+                // and that it correctly incorporates the isVarArgs() check.
+                // We assume isVarargMatcher checks if 'm' is designed to match varargs (e.g., AnyVararg).
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    // The argument at the vararg position should be an array (or null).
+                    Object varargArray = argument;
+
+                    // Capture each element of the vararg array.
+                    if (varargArray != null && varargArray.getClass().isArray()) {
+                        for (int i = 0; i < Array.getLength(varargArray); i++) {
+                            captor.captureFrom(Array.get(varargArray, i));
                         }
+                    } else if (varargArray == null) {
+                        // If the vararg array argument itself is null, capture null.
+                        // This handles cases like invocation. D .varargs((String[]) null);
+                        captor.captureFrom(null);
                     }
+                    // else: If argument is not null and not an array (unexpected for varargs),
+                    // the original code didn't explicitly handle this, so we don't either.
+                    // It might be captured by the 'else' block below if not a vararg matcher,
+                    // or implicitly ignored here if it's a vararg matcher with unexpected input.
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                    // Once varargs are captured by a vararg matcher, assume processing is complete for this invocation.
+                    // This aligns with the idea that a vararg matcher consumes all remaining arguments.
+                    return;
+                } else {
+                    // Capture a regular argument, or a vararg argument matched by a non-vararg matcher
+                    // (e.g., matching the vararg array itself with eq( G ) ).
+                    captor.captureFrom(argument);
+                }
+            }
+            // If rawArguments.length <= position, there's no argument to capture
+            // for this matcher position. This can happen with flexible vararg matching (e.g., anyVararg).
+        }
+    }
 }
\ No newline at end of file
