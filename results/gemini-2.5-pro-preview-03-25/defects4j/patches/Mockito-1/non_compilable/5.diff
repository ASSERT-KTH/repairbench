diff --git a/tmp/8cd99598-0b8d-4818-bfdb-30a7f498a3ce_buggy.java b/tmp/6b192e43-d0ed-4ece-832e-4b989e3a3240_fixed.java
index 1c875ad..8a6785a 100644
--- a/tmp/8cd99598-0b8d-4818-bfdb-30a7f498a3ce_buggy.java
+++ b/tmp/6b192e43-d0ed-4ece-832e-4b989e3a3240_fixed.java
@@ -1,31 +1,63 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Method method = invocation.getMethod();
+        boolean isVarargMethod = method.isVarArgs();
+        Class<?>[] parameterTypes = method.getParameterTypes();
+        int declaredParamCount = parameterTypes.length;
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
+            // Using Matcher type as in the original snippet context
+            org.mockito.Matcher m = matchers.get(position);
+
+            if (m instanceof org.mockito.internal.matchers.CapturesArguments) {
+                org.mockito.internal.matchers.CapturesArguments captor = (org.mockito.internal.matchers.CapturesArguments) m;
+
+                // Assume a helper method 'isVarargMatcher(Matcher)' exists in the class or is accessible.
+                // This helper determines if the matcher is specifically designed for varargs (like anyVararg()).
+                // The original commented code used isVarargMatcher(m).
+                boolean isVarargMatcher = isVarargMatcher(m); // Assuming this helper method exists
+
+                // Check if the current matcher position corresponds to the vararg parameter declaration
+                boolean isVarargPosition = isVarargMethod && position == declaredParamCount - 1;
+
+                if (isVarargPosition && isVarargMatcher) {
+                    // Case 1: This matcher is at the vararg parameter position and is a vararg matcher.
+                    // It should capture all remaining arguments packed into an array by getArgumentAt.
+                    Class<?> varargParamType = parameterTypes[position]; // e.g., String[].class
+                    // Use Object.class for getArgumentAt to ensure we get the array object itself,
+                    // handling different vararg types (Object[], String[], int[], etc.).
+                    Object varargsArray = invocation.getArgumentAt(position, Object.class);
+
+                    if (varargsArray != null && varargsArray.getClass().isArray()) {
+                        // Capture each element of the vararg array
+                        for (int i = 0; i < java.lang.reflect.Array.getLength(varargsArray); i++) {
+                            captor.captureFrom(java.lang.reflect.Array.get(varargsArray, i));
                         }
+                    } else if (varargsArray == null && varargParamType.isArray()) {
+                         // Capture the explicitly passed null for the vararg array parameter
+                         captor.captureFrom(null);
                     }
+                    // If zero varargs were passed, getArgumentAt typically provides an empty array,
+                    // the loop doesn't run, correctly capturing nothing.
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                    // A vararg matcher consumes the vararg parameter; stop processing further matchers.
+                    // This behavior matches the original commented-out code's 'return'.
+                    return;
+
+                } else if (position < declaredParamCount) {
+                    // Case 2: This is a non-vararg parameter position, or it's the vararg position
+                    // but the matcher is *not* a vararg matcher (e.g., eq("value") used for a vararg).
+                    // Capture the single argument corresponding to this parameter position.
+                    // Using Object.class with getArgumentAt retrieves the argument regardless of its type.
+                    Object argument = invocation.getArgumentAt(position, Object.class);
+                    captor.captureFrom(argument);
+                }
+                // Case 3: position >= declaredParamCount
+                // This implies more matchers than declared method parameters. This could be an error
+                // state or an edge case. Nothing is captured for such extra matchers.
+            }
         }
+    }
+
+    // Helper method assumed to exist elsewhere in the class or be accessible.
+    // Its implementation depends on Mockito internals for identifying vararg matchers.
+    // private boolean isVarargMatcher(org.mockito.Matcher matcher) { ... }
\ No newline at end of file
