diff --git a/tmp/3177c31e-33df-4c34-a921-f421f70b56af_buggy.java b/tmp/bf6eabe3-0e6b-4fa4-bb13-cfd963d15012_fixed.java
index 1c875ad..e055595 100644
--- a/tmp/3177c31e-33df-4c34-a921-f421f70b56af_buggy.java
+++ b/tmp/bf6eabe3-0e6b-4fa4-bb13-cfd963d15012_fixed.java
@@ -1,31 +1,77 @@
+import org.mockito.internal.matchers.CapturesArguments;
+import org.mockito.internal.matchers.AnyVararg;
+import org.mockito.internal.matchers.LocalizedMatcher;
+import org.mockito.invocation.Invocation;
+import org.hamcrest.Matcher;
+import java.lang.reflect.Array;
+import java.util.List; // Assuming matchers field is List<Matcher>
+
+// Assumes this method is within a class that has access to:
+// private List<Matcher> matchers;
 public void captureArgumentsFrom(Invocation invocation) {
+    // Determine the vararg parameter position if the method has varargs
+    int varargPosition = -1;
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        // The vararg parameter is the last one
+        varargPosition = invocation.getMethod().getParameterTypes().length - 1;
+    }
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
+    // Iterate through the matchers provided for this invocation match
+    for (int matcherPosition = 0; matcherPosition < matchers.size(); matcherPosition++) {
+        Matcher m = matchers.get(matcherPosition);
+
+        // Check if the matcher is an argument captor
         if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            CapturesArguments captor = (CapturesArguments) m;
+
+            // Unwrap the matcher if necessary (e.g., from LocalizedMatcher)
+            // This allows checking the type of the actual matcher (e.g., AnyVararg)
+            Matcher actualMatcher = m;
+            if (m instanceof LocalizedMatcher) {
+                 actualMatcher = ((LocalizedMatcher) m).getMatcher();
+            }
+
+            // Check if the unwrapped matcher is specifically for varargs (e.g., AnyVararg)
+            boolean isVarargSpecificMatcher = actualMatcher instanceof AnyVararg;
+
+            // Check if this matcher's position corresponds to the vararg parameter position
+            boolean isMatcherAtVarargPos = (varargPosition != -1 && matcherPosition == varargPosition);
+
+            if (isMatcherAtVarargPos && isVarargSpecificMatcher) {
+                // Case 1: A vararg-specific captor (like AnyVararg) at the vararg position.
+                // Capture elements from the raw vararg argument array.
+                Object[] rawArgs = invocation.getRawArguments();
+                // Check if vararg argument exists in raw args (it might not if invoked with fewer args than vararg position)
+                if (varargPosition < rawArgs.length) {
+                    Object rawVarargArgument = rawArgs[varargPosition];
+                    // Ensure the raw argument is a non-null array before iterating
+                    if (rawVarargArgument != null && rawVarargArgument.getClass().isArray()) {
+                        // Iterate through the vararg array and capture each element
+                        for (int i = 0; i < Array.getLength(rawVarargArgument); i++) {
+                            captor.captureFrom(Array.get(rawVarargArgument, i));
                         }
                     }
+                    // If rawVarargArgument is null or not an array (e.g., explicit null passed for varargs),
+                    // the AnyVararg matcher should capture nothing, as there are no elements. Handled by the check.
                 }
+                // If varargPosition >= rawArgs.length (e.g., method("fixed") for method(String, String...)),
+                // the vararg array is effectively empty, so capture nothing. Handled by the check.
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+            } else {
+                // Case 2: Any other captor (regular captor, or vararg captor not at vararg position - less common).
+                // Capture the single 'effective' argument at this logical position.
+                // Use invocation.getArgumentAt() as it handles vararg expansion correctly.
+                try {
+                    // Get the argument corresponding to the matcher's position, considering vararg expansion.
+                    Object effectiveArgument = invocation.getArgumentAt(matcherPosition, Object.class);
+                    captor.captureFrom(effectiveArgument);
+                } catch (IndexOutOfBoundsException e) {
+                    // This exception occurs if this matcher position doesn't correspond to any effective argument
+                    // (e.g., more captors provided than effective arguments for this invocation).
+                    // In this situation, the captor associated with this position captures nothing for this specific invocation.
+                    // This is the expected behavior, so we ignore the exception and proceed.
+                }
+            }
+        }
+    }
 }
\ No newline at end of file
