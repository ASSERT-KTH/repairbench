diff --git a/tmp/5757744f-e35c-4767-93b0-3e18d2da43fe_buggy.java b/tmp/15c0121c-a814-4a10-9e11-87a7d2f764b8_fixed.java
index 1c875ad..8efa724 100644
--- a/tmp/5757744f-e35c-4767-93b0-3e18d2da43fe_buggy.java
+++ b/tmp/15c0121c-a814-4a10-9e11-87a7d2f764b8_fixed.java
@@ -1,31 +1,84 @@
+import org.mockito.internal.invocation.ArgumentsProcessor;
+import org.mockito.internal.matchers.CapturesArguments;
+import org.mockito.internal.matchers.VarargMatcher;
+import org.mockito.invocation.Invocation;
+import org.hamcrest.Matcher; // Assuming the list 'matchers' holds Hamcrest Matchers
+
+import java.lang.reflect.Array;
+import java.lang.reflect.Method;
+import java.util.List; // Assuming matchers field is List<Matcher>
+
+// The user provided only the method, so we assume 'matchers' is an accessible field (List<Matcher>) of the enclosing class.
+// public class ContainingClass {
+//     private List<Matcher> matchers;
+//     ...
+
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Method method = invocation.getMethod();
+        Object[] rawArgs = invocation.getRawArguments();
+        int rawArgsLen = rawArgs.length;
+        int matchersSize = this.matchers.size(); // Assumes 'matchers' is accessible via 'this'
 
+        // Use ArgumentsProcessor to get arguments, potentially expanded if varargs
+        Object[] arguments = ArgumentsProcessor.expandVarArgs(method.isVarArgs(), rawArgs);
+        int expandedArgsLen = arguments.length;
+
+        for (int position = 0; position < matchersSize; position++) {
+            // The list stores Hamcrest Matchers, but the actual instance might implement internal Mockito interfaces.
+            Object matcherObject = this.matchers.get(position);
+
+            // Check if the matcher instance is capable of capturing arguments.
+            if (matcherObject instanceof CapturesArguments) {
+                 CapturesArguments captor = (CapturesArguments) matcherObject;
+
+                 if (method.isVarArgs()) {
+                    // Determine the index of the vararg parameter in the raw arguments list.
+                    // Handle no-arg methods gracefully.
+                    int indexOfVararg = rawArgsLen > 0 ? rawArgsLen - 1 : 0;
+
+                    // Check if the matcher instance is specifically a VarargMatcher (like AnyVararg).
+                    boolean isVarargMatcherInstance = matcherObject instanceof VarargMatcher;
+                    // Check if this is the last matcher in the list.
+                    boolean isLastMatcher = position == matchersSize - 1;
+                    // Check if the matcher's position corresponds to the vararg parameter or beyond
+                    // in the raw method signature. This helps identify matchers intended for varargs.
+                    boolean isMatcherAtOrBeyondVarargPosition = position >= indexOfVararg;
+
+                    // Determine if this captor should capture all remaining arguments.
+                    // This logic covers two main scenarios for varargs:
+                    // 1. A specific VarargMatcher (like AnyVararg) is used.
+                    // 2. A regular captor is used as the last matcher for the vararg sequence.
+                    if (isVarargMatcherInstance || (isLastMatcher && isMatcherAtOrBeyondVarargPosition)) {
+                        // Capture all remaining arguments from the expanded list, starting from the current position.
+                        // This handles cases like `captor.capture()` matching multiple varargs,
+                        // or `anyVararg()` potentially matching (though AnyVararg itself might not capture).
+                        for (int i = position; i < expandedArgsLen; i++) {
+                            captor.captureFrom(arguments[i]);
+                        }
+                        // Once a matcher captures the rest of the varargs, no further matchers should capture.
+                        return;
                     } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                         // This captor corresponds to a single fixed argument, or one of potentially several
+                         // arguments within the varargs sequence (when multiple matchers map to the varargs).
+                         // Capture the single argument from the expanded list corresponding to this matcher's position.
+                         if (position < expandedArgsLen) {
+                             captor.captureFrom(arguments[position]);
                          }
+                         // If position >= expandedArgsLen, it implies more matchers than arguments.
+                         // This might occur in edge cases, but matching should ideally prevent this.
+                         // If it happens, we don't capture anything for this matcher.
+                    }
+                 } else {
+                     // Not a varargs method. Capture the argument at the current position.
+                     // We use the expanded arguments list here as well for consistency, although
+                     // for non-varargs methods, expandedArgs is the same as rawArgs.
+                     if (position < expandedArgsLen) {
+                         captor.captureFrom(arguments[position]);
                      }
                  }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
             }
+            // If matcherObject is not an instance of CapturesArguments, do nothing.
+        }
+    }
+
+// } // Assumed end of class
\ No newline at end of file
