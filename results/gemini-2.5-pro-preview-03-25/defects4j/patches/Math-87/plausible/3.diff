diff --git a/tmp/4b847c38-b400-468f-b660-bc299994c649_buggy.java b/tmp/5cf36103-2c52-42d1-b8ea-deb9e793bb08_fixed.java
index 70cafe0..5b65ac8 100644
--- a/tmp/4b847c38-b400-468f-b660-bc299994c649_buggy.java
+++ b/tmp/5cf36103-2c52-42d1-b8ea-deb9e793bb08_fixed.java
@@ -1,18 +1,34 @@
     /**
-     * Checks whether the given column is basic.
+     * Checks whether the given column is basic. A basic column corresponds to a basic
+     * variable and must be a unit vector (exactly one entry is 1.0, all others are 0.0)
+     * within the rows corresponding to constraints.
      * @param col index of the column to check
-     * @return the row that the variable is basic in.  null if the column is not basic
+     * @return the row index (starting from 0) where the 1.0 entry is found if the column is basic,
+     *         null otherwise.
      */
     private Integer getBasicRow(final int col) {
-        Integer row = null;
+        Integer row = null; // Stores the row index where 1.0 is found
+        // Iterate through the rows corresponding to constraints.
+        // Objective function rows are typically excluded (indices < getNumObjectiveFunctions()).
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
+            final double entry = getEntry(i, col);
+            // Check if the entry is approximately 1.0 using the provided epsilon
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
+                // If we have already found a 1.0 entry in a previous row for this column,
+                // this column has more than one '1' (or non-zero element close to 1), so it's not basic.
+                if (row != null) {
+                    return null;
+                }
+                // Record the row index where the 1.0 is located.
                 row = i;
-                } else {
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // If the entry is non-zero but not 1.0, the column does not represent
+                // a basic variable (it's not a unit vector in the constraint rows).
                 return null;
             }
+            // If the entry is approximately 0.0, continue checking the next row.
         }
-        }
+        // After checking all constraint rows, 'row' will be non-null if and only if
+        // exactly one entry was found to be 1.0 and all other entries were 0.0.
         return row;
     }
\ No newline at end of file
