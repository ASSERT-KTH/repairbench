diff --git a/tmp/3b168c30-313c-452d-a176-a171320fb9d9_buggy.java b/tmp/064535a8-1e47-4a18-8154-df22fee3d0aa_fixed.java
index 70cafe0..c9b8254 100644
--- a/tmp/3b168c30-313c-452d-a176-a171320fb9d9_buggy.java
+++ b/tmp/064535a8-1e47-4a18-8154-df22fee3d0aa_fixed.java
@@ -1,18 +1,34 @@
     /**
      * Checks whether the given column is basic.
+     * A column is basic if it has exactly one entry equals to 1.0 in the
+     * Bolean rows (rows corresponding to the constraints) and all other entries
+     * in these rows are 0.0 for the given column.
      * @param col index of the column to check
      * @return the row that the variable is basic in. null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
-        Integer row = null;
+        Integer basicRow = null;
+        // Check entries in constraint rows (below objective functions)
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
-                row = i;
-                } else {
+            final double entry = getEntry(i, col);
+            // Check if the entry is close to 1.0
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
+                // If we've already found a row where this column is basic (i.e., equals 1.0),
+                // then this column has multiple '1' entries and is not basic.
+                if (basicRow != null) {
                     return null;
                 }
+                // Record the row index where the entry is 1.0.
+                basicRow = i;
+            // Check if the entry is significantly different from 0.0
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // If an entry in this column (within constraint rows) is neither 1.0 nor 0.0,
+                // then the column does not represent a basic variable.
+                return null;
             }
+            // If entry is close to 0.0, continue to the next row.
         }
-        return row;
+        // If the loop completes, 'basicRow' will be non-null if exactly one '1.0' was found
+        // and all other entries in the constraint rows were '0.0'. Otherwise, it's null.
+        return basicRow;
     }
\ No newline at end of file
