diff --git a/tmp/10257adb-9cd3-4a79-8cc3-50461a48837b_buggy.java b/tmp/14ab6011-ebf7-4c90-b52d-696c767c0f0f_fixed.java
index 70cafe0..ab3a932 100644
--- a/tmp/10257adb-9cd3-4a79-8cc3-50461a48837b_buggy.java
+++ b/tmp/14ab6011-ebf7-4c90-b52d-696c767c0f0f_fixed.java
@@ -1,18 +1,32 @@
     /**
-     * Checks whether the given column is basic.
+     * Checks whether the given column is basic. A basic column corresponds to a basic
+     * variable and must contain exactly one entry equal to 1.0 (within epsilon) in the
+     * constraint rows, and all other entries in the constraint rows must be 0.0 (within epsilon).
      * @param col index of the column to check
-     * @return the row that the variable is basic in.  null if the column is not basic
+     * @return the row index where the single 1.0 entry is found if the column is basic,
+     *         otherwise returns null.
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
+            final double entry = getEntry(i, col);
+            // Check if the entry is approximately 1.0
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
+                // If we have already found a row with '1.0' in this column
+                if (row != null) {
+                    // The column is not basic because it contains more than one '1.0'
+                    return null;
+                }
+                // Record the row where '1.0' is found
                 row = i;
-                } else {
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // If the entry is non-zero but not approximately 1.0,
+                // the column cannot be basic.
                 return null;
             }
+            // If the entry is approximately 0.0, continue to the next row
         }
-        }
+        // Return the index of the row containing the single '1.0',
+        // or null if no '1.0' was found or the column violated basic conditions.
         return row;
     }
\ No newline at end of file
