diff --git a/tmp/6a3b1568-241e-4dbf-a89e-6b2dba6aa45b_buggy.java b/tmp/3cd032c9-d2a3-4609-bdbd-c41a3e2e3c29_fixed.java
index 70cafe0..15c4b10 100644
--- a/tmp/6a3b1568-241e-4dbf-a89e-6b2dba6aa45b_buggy.java
+++ b/tmp/3cd032c9-d2a3-4609-bdbd-c41a3e2e3c29_fixed.java
@@ -1,18 +1,44 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
-        Integer row = null;
+        Integer basicRow = null;
+        // Iterate through the rows corresponding to constraints.
+        // The Simplex tableau structure typically has objective function row(s)
+        // first, followed by constraint rows.
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
-                row = i;
-                } else {
+            final double entry = getEntry(i, col);
+            // Check if the entry is non-zero within the tolerance
+            if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // If we have already found a non-zero entry in a previous row for this column,
+                // then this column cannot be basic (a basic column must have only one non-zero
+                // entry in the constraint rows).
+                if (basicRow != null) {
                     return null;
                 }
+                // Store the row index where the non-zero entry was found.
+                basicRow = i;
             }
         }
-        return row;
+
+        // After checking all constraint rows:
+        // If we found exactly one row with a non-zero entry...
+        if (basicRow != null) {
+            // ...further check if that single non-zero entry is equal to 1.0 (within tolerance).
+            // A standard basic variable column has a 1 in its basic row.
+            if (MathUtils.equals(getEntry(basicRow, col), 1.0, epsilon)) {
+                // If it's 1.0, then this column is basic in the recorded row.
+                return basicRow;
+            }
+            // If the single non-zero entry is not 1.0, it doesn't fit the standard
+            // definition of a basic column in a canonical tableau form. Return null.
+        }
+
+        // Return null if:
+        // - No non-zero entry was found in the constraint rows for this column.
+        // - More than one non-zero entry was found (handled inside the loop).
+        // - Exactly one non-zero entry was found, but it was not equal to 1.0.
+        return null;
     }
\ No newline at end of file
