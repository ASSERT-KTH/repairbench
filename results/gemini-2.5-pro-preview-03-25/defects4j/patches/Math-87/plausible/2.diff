diff --git a/tmp/5a02c4db-1904-46c2-b46a-77233bf19035_buggy.java b/tmp/27c73445-eb17-4261-b37b-0351678abcf6_fixed.java
index 70cafe0..a413c80 100644
--- a/tmp/5a02c4db-1904-46c2-b46a-77233bf19035_buggy.java
+++ b/tmp/27c73445-eb17-4261-b37b-0351678abcf6_fixed.java
@@ -1,18 +1,30 @@
     /**
      * Checks whether the given column is basic.
+     * A column is basic if it has exactly one entry equal to 1.0 (within epsilon)
+     * and all other entries equal to 0.0 (within epsilon) in the rows corresponding
+     * to constraints.
      * @param col index of the column to check
      * @return the row that the variable is basic in. null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
-        Integer row = null;
+        Integer basicRow = null;
+        // Iterate over the constraint rows (skipping objective function rows)
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
-                row = i;
-                } else {
+            final double entry = getEntry(i, col);
+            // Check if the entry is approximately 1.0
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
+                // If we have already found a row with 1.0, this column is not basic
+                if (basicRow != null) {
                     return null;
                 }
+                // Record the row index where 1.0 was found
+                basicRow = i;
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // If we find an entry that is non-zero but not 1.0, this column is not basic
+                return null;
             }
+            // If the entry is approximately 0.0, continue to the next row
         }
-        return row;
+        // Return the row index if exactly one 1.0 was found and all others were 0.0
+        return basicRow;
     }
\ No newline at end of file
