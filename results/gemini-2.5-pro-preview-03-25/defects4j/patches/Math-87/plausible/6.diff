diff --git a/tmp/5be8e9ea-7a7e-4753-97a2-b932b0323447_buggy.java b/tmp/0e0c83c5-ebd3-4569-bb31-577006be7cf2_fixed.java
index 70cafe0..968312f 100644
--- a/tmp/5be8e9ea-7a7e-4753-97a2-b932b0323447_buggy.java
+++ b/tmp/0e0c83c5-ebd3-4569-bb31-577006be7cf2_fixed.java
@@ -1,18 +1,32 @@
     /**
      * Checks whether the given column is basic.
+     * A column is basic if it has exactly one entry equal to 1.0 (within epsilon)
+     * and all other entries equal to 0.0 (within epsilon) in the rows corresponding
+     * to the constraints.
      * @param col index of the column to check
-     * @return the row that the variable is basic in.  null if the column is not basic
+     * @return the row index of the basic variable entry (i.e., the 1.0) or
+     *         {@code null} if the column is not basic.
      */
     private Integer getBasicRow(final int col) {
-        Integer row = null;
+        Integer basicRow = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
-                row = i;
-                } else {
+            final double entry = getEntry(i, col);
+            // check if entry is close to 1.0
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
+                // if we already found an entry close to 1.0 previously
+                if (basicRow != null) {
+                    // column has multiple entries close to 1.0, not basic
                     return null;
                 }
+                // record the row index where the entry is 1.0
+                basicRow = i;
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // if entry is non-zero but not close to 1.0, column is not basic
+                return null;
             }
+            // if entry is close to 0.0, continue to the next row
         }
-        return row;
+        // return the row index if exactly one entry was 1.0 and others were 0.0,
+        // otherwise return null
+        return basicRow;
     }
\ No newline at end of file
