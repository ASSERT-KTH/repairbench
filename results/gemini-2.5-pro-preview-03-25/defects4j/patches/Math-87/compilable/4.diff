diff --git a/tmp/25724620-7cb4-42d5-a360-b8827f6b1184_buggy.java b/tmp/f8b9eceb-9fc7-4333-aa6b-1c97be31f267_fixed.java
index 70cafe0..cde5998 100644
--- a/tmp/25724620-7cb4-42d5-a360-b8827f6b1184_buggy.java
+++ b/tmp/f8b9eceb-9fc7-4333-aa6b-1c97be31f267_fixed.java
@@ -1,18 +1,42 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in. null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
-        Integer row = null;
+        Integer basicRow = null;
+        // Check constraint rows first
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
+            final double entry = getEntry(i, col);
+            // Check if entry is close to 1.0
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
+                // If we already found a potential basic row, this column is not basic
+                // (requires exactly one 1 in the column among constraint rows)
+                if (basicRow != null) {
+                    return null;
+                }
+                // Store the potential basic row
+                basicRow = i;
+            // Check if entry is significantly different from 0.0 (and not 1.0)
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // Found a non-zero, non-one entry in constraint rows -> column is not basic
+                return null;
+            }
+        }
+
+        // If we found a unique '1' in constraint rows,
+        // check if all entries in the objective function rows are zero.
+        if (basicRow != null) {
+            for (int i = 0; i < getNumObjectiveFunctions(); i++) {
+                 // If any entry in objective rows is non-zero, column is not basic
                  if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
-                row = i;
-                } else {
                      return null;
                  }
             }
         }
-        return row;
+
+        // If we found exactly one '1' in constraint rows and all other entries
+        // (including objective rows) are '0', then return the row index.
+        // Otherwise, return null.
+        return basicRow;
     }
\ No newline at end of file
