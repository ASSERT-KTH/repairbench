diff --git a/tmp/90874bca-4b18-464e-a998-1b82aacb4e79_buggy.java b/tmp/bdc055e4-4312-44cd-96c1-f37bf1735738_fixed.java
index 70cafe0..4da4958 100644
--- a/tmp/90874bca-4b18-464e-a998-1b82aacb4e79_buggy.java
+++ b/tmp/bdc055e4-4312-44cd-96c1-f37bf1735738_fixed.java
@@ -1,18 +1,42 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in. null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
+        // Check constraint rows (rows starting from getNumObjectiveFunctions())
+        // A basic variable column should have exactly one non-zero element in these rows.
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            final double entry = getEntry(i, col);
+            // Use MathUtils.equals for floating point comparison with tolerance epsilon
+            if (!MathUtils.equals(entry, 0.0, epsilon)) {
                 if (row == null) {
+                    // Found the first non-zero entry in constraint rows
                     row = i;
                 } else {
+                    // Found a second non-zero entry in constraint rows -> column is not basic
                     return null;
                 }
             }
         }
+
+        // After checking constraint rows, if a unique non-zero entry was found (row != null),
+        // also check the objective function row(s). In a canonical tableau, the basic
+        // variable should have a zero coefficient in the objective function.
+        if (row != null) {
+            for (int i = 0; i < getNumObjectiveFunctions(); i++) {
+                 // Check if the entry in the objective function row is non-zero
+                 if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+                     // If non-zero in objective function -> column is not basic (for typical Simplex phase II)
+                     return null;
+                 }
+            }
+        }
+
+        // If we found exactly one non-zero entry in constraint rows (at index 'row')
+        // AND all entries in the objective function row(s) are zero, then the column is basic.
+        // Otherwise, return null (covers cases: no non-zero in constraints, multiple non-zeros in constraints,
+        // or non-zero in objective function row).
         return row;
     }
\ No newline at end of file
