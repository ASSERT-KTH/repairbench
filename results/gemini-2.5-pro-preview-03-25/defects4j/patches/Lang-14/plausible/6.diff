diff --git a/tmp/56e1d75c-63a1-4aba-9776-8ebedcd969fa_buggy.java b/tmp/f891dc7a-62ad-4e70-813c-3981c6743a0a_fixed.java
index c18eb8b..af83fa3 100644
--- a/tmp/56e1d75c-63a1-4aba-9776-8ebedcd969fa_buggy.java
+++ b/tmp/f891dc7a-62ad-4e70-813c-3981c6743a0a_fixed.java
@@ -1,30 +1,52 @@
     /**
      * <p>Compares two CharSequences, returning {@code true} if they represent
      * equal sequences of characters.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
      * references are considered to be equal. The comparison is case sensitive.</p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
+     * <p>Note: It is vital that the implementation of {@link CharSequence#equals(Object)}
+     * is not invoked, as {@link CharSequence} implementations are not required
+     * to implement equals based on character content. For example, a String is not
+     * equal to a StringBuilder, even if they contain the same characters.
+     * See <a href="https://issues.apache.org/jira/browse/LANG-407">LANG-407</a>.
+     * </p>
+     *
      * @see java.lang.CharSequence#equals(Object)
      * @param cs1  the first CharSequence, may be {@code null}
      * @param cs2  the second CharSequence, may be {@code null}
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
      */
     public static boolean equals(CharSequence cs1, CharSequence cs2) {
         if (cs1 == cs2) {
             return true;
         }
         if (cs1 == null || cs2 == null) {
             return false;
         }
+        // Check length first as CharSequence.equals is not defined over content
+        if (cs1.length() != cs2.length()) {
+            return false;
+        }
+        // If they are both Strings, we can use the optimized String.equals
+        if (cs1 instanceof String && cs2 instanceof String) {
             return cs1.equals(cs2);
         }
+        // Otherwise, compare character by character
+        final int length = cs1.length();
+        for (int i = 0; i < length; i++) {
+            if (cs1.charAt(i) != cs2.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
\ No newline at end of file
