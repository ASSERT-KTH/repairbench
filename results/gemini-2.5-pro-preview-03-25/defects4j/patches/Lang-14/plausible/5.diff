diff --git a/tmp/94cf2fe8-75af-4fd1-acf1-55c79b7d18bb_buggy.java b/tmp/b379e1b5-e48d-4ac9-9c73-a46db301e32e_fixed.java
index c18eb8b..bd5177d 100644
--- a/tmp/94cf2fe8-75af-4fd1-acf1-55c79b7d18bb_buggy.java
+++ b/tmp/b379e1b5-e48d-4ac9-9c73-a46db301e32e_fixed.java
@@ -1,30 +1,48 @@
     /**
      * <p>Compares two CharSequences, returning {@code true} if they represent
      * equal sequences of characters.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
      * references are considered to be equal. The comparison is case sensitive.</p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
      * @see java.lang.CharSequence#equals(Object)
      * @param cs1  the first CharSequence, may be {@code null}
      * @param cs2  the second CharSequence, may be {@code null}
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
      */
-    public static boolean equals(CharSequence cs1, CharSequence cs2) {
-        if (cs1 == cs2) {
+    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
+        if (cs1 == cs2) { // Handles same object or both null
             return true;
         }
-        if (cs1 == null || cs2 == null) {
+        if (cs1 == null || cs2 == null) { // Handles one null, one non-null
             return false;
         }
+        // Both are non-null from here
+        if (cs1.length() != cs2.length()) { // Different lengths means not equal
+            return false;
+        }
+        // Optimization: If both are Strings, use the potentially faster String#equals(Object)
+        if (cs1 instanceof String && cs2 instanceof String) {
+            // String#equals(Object) is specified to compare characters
             return cs1.equals(cs2);
         }
+        // General case: Compare character by character for any CharSequence implementations
+        // CharSequence#equals(Object) is not specified to compare content, so we must do it manually.
+        final int length = cs1.length(); // Lengths are known to be equal here
+        for (int i = 0; i < length; i++) {
+            if (cs1.charAt(i) != cs2.charAt(i)) {
+                return false;
+            }
+        }
+        // If loop completes, all characters matched
+        return true;
+    }
\ No newline at end of file
