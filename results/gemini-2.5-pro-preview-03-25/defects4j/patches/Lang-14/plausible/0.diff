diff --git a/tmp/0a64b659-5ee1-4ae4-a27c-d17cc4ff1bee_buggy.java b/tmp/127b4568-c45a-4f7b-96a7-e5ebc999dbc3_fixed.java
index c18eb8b..f36d718 100644
--- a/tmp/0a64b659-5ee1-4ae4-a27c-d17cc4ff1bee_buggy.java
+++ b/tmp/127b4568-c45a-4f7b-96a7-e5ebc999dbc3_fixed.java
@@ -1,30 +1,58 @@
     /**
      * <p>Compares two CharSequences, returning {@code true} if they represent
      * equal sequences of characters.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
      * references are considered to be equal. The comparison is case sensitive.</p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
+     * <p>This method is implemented reflexive, symmetric, and transitive.</p>
+     * <p>Note that this method does not canonicalize the underlying CharSequences
+     * before comparing them using {@link CharSequence#equals(Object)}. Therefore,
+     * it is possible for this method to return {@code true} when
+     * {@code cs1.equals(cs2)} returns {@code false}.</p>
+     * <p>Examples:</p>
+     * <ul>
+     * <li>{@code StringUtils.equals("abc", new StringBuilder("abc"))} returns {@code true}</li>
+     * <li>{@code new String("abc").equals(new StringBuilder("abc"))} returns {@code false}</li>
+     * </ul>
+     *
      * @see java.lang.CharSequence#equals(Object)
      * @param cs1  the first CharSequence, may be {@code null}
      * @param cs2  the second CharSequence, may be {@code null}
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
+     * @since 3.1 Added CharSequence implementation details and examples
      */
-    public static boolean equals(CharSequence cs1, CharSequence cs2) {
+    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
         if (cs1 == cs2) {
             return true;
         }
         if (cs1 == null || cs2 == null) {
             return false;
         }
+        if (cs1.length() != cs2.length()) {
+            return false;
+        }
+        // The check above implies that both cs1 and cs2 are not null and have the same length.
+        // If they are both Strings, we can use the optimized String#equals.
+        if (cs1 instanceof String && cs2 instanceof String) {
             return cs1.equals(cs2);
         }
+        // For other CharSequence types, or mixtures, perform character-by-character comparison.
+        // This works correctly for comparing String with StringBuilder, etc.
+        final int length = cs1.length();
+        for (int i = 0; i < length; i++) {
+            if (cs1.charAt(i) != cs2.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
\ No newline at end of file
