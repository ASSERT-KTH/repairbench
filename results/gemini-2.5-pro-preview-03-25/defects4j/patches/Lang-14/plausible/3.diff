diff --git a/tmp/157278ad-653a-474f-80a4-ec376efd3318_buggy.java b/tmp/72302de2-6bd0-4c17-8963-d3c6238d153e_fixed.java
index c18eb8b..ee4a53a 100644
--- a/tmp/157278ad-653a-474f-80a4-ec376efd3318_buggy.java
+++ b/tmp/72302de2-6bd0-4c17-8963-d3c6238d153e_fixed.java
@@ -1,30 +1,51 @@
     /**
      * <p>Compares two CharSequences, returning {@code true} if they represent
      * equal sequences of characters.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
      * references are considered to be equal. The comparison is case sensitive.</p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
      * @see java.lang.CharSequence#equals(Object)
      * @param cs1  the first CharSequence, may be {@code null}
      * @param cs2  the second CharSequence, may be {@code null}
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
      */
     public static boolean equals(CharSequence cs1, CharSequence cs2) {
         if (cs1 == cs2) {
-            return true;
+            return true; // Handles same object and null == null
         }
         if (cs1 == null || cs2 == null) {
+            return false; // One is null, the other is not
+        }
+        // Check lengths. If different, they can't be equal.
+        if (cs1.length() != cs2.length()) {
+            return false;
+        }
+        // Check if both are String instances; if so, use String.equals() for potential performance benefits.
+        // Note: This was present in later versions of Apache Commons Lang but is not strictly required
+        // to fix the bug for generic CharSequence comparison. The character-by-character check below
+        // is the fundamental fix needed.
+        // if (cs1 instanceof String && cs2 instanceof String) {
+        //     return cs1.equals(cs2);
+        // }
+
+        // Compare characters sequentially.
+        // cs1.length() can be used since lengths are known to be equal.
+        final int length = cs1.length();
+        for (int i = 0; i < length; i++) {
+            if (cs1.charAt(i) != cs2.charAt(i)) {
                 return false;
             }
-            return cs1.equals(cs2);
+        }
+        // If all characters matched.
+        return true;
     }
\ No newline at end of file
