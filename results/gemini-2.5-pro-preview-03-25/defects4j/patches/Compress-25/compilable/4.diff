diff --git a/tmp/71c2c01b-f00e-4d00-ba50-9eafea2e8ce6_buggy.java b/tmp/c1fdcccd-c737-44a7-97ac-ddb7af8ec41c_fixed.java
index 6c0aa19..8ddb644 100644
--- a/tmp/71c2c01b-f00e-4d00-ba50-9eafea2e8ce6_buggy.java
+++ b/tmp/c1fdcccd-c737-44a7-97ac-ddb7af8ec41c_fixed.java
@@ -1,20 +1,31 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
+        // The constructor previously used buf.capacity() (8192) as the PushbackInputStream size.
+        // While not obviously incorrect, using a smaller size, like 1, decouples the pushback
+        // buffer size from the inflater buffer size and is sufficient for the single byte unread
+        // operation used in fillInflaterBuffer(). This change might avoid subtle bugs related
+        // to buffering interaction or PushbackInputStream implementation details with large buffer sizes,
+        // potentially fixing issues where the stream state is incorrect after reading headers,
+        // leading to incorrect data being read for the first entry.
+        in = new PushbackInputStream(inputStream, 1); // Changed size from buf.capacity() to 1
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
         // haven't read anything so far
+        // Ensure the inflater buffer starts empty. While likely not the primary cause
+        // for the STORED entry issue, it's good practice.
+        buf.position(0);
+        buf.limit(0);
     }
