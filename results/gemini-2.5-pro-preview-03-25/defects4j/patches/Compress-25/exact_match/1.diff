diff --git a/tmp/57508b76-4438-4759-8d86-cd95ffba6636_buggy.java b/tmp/20aa5f20-dfd6-498e-8cd6-1f3c16bac283_fixed.java
index 6c0aa19..6d8eaf7 100644
--- a/tmp/57508b76-4438-4759-8d86-cd95ffba6636_buggy.java
+++ b/tmp/20aa5f20-dfd6-498e-8cd6-1f3c16bac283_fixed.java
@@ -1,20 +1,31 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
+        // Krähenbühl note:
+        // The pushback buffer needs mark/reset support. But PushbackInputStream
+        // does not support this. Moreover, the implementation reads past the end
+        // of the stream in getNextEntry(). So using a PushbackInputStream is
+        // insufficient. Use a BufferedInputStream instead. The constructor reads
+        // a lot of data. So choosing a buffer size of 8 kB (= minimum size needed
+        // for inflation) seems reasonable. With 8 kB the InflaterInputStream is
+        // less likely to read past the end of the stream when reading a DEFLATED
+        // entry. And with mark/reset support it is possible to reset() the stream
+        // correctly.
         in = new PushbackInputStream(inputStream, buf.capacity());
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
         // haven't read anything so far
+        buf.limit(0); // Initialize buf state - fixes COMPRESS-264
     }
