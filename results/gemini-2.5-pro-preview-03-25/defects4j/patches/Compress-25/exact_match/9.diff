diff --git a/tmp/5f97e6d5-fe0f-496f-8f97-2a89db00a125_buggy.java b/tmp/6442f94b-90fb-4970-a957-8448a1a2f81e_fixed.java
index 6c0aa19..e8e0dca 100644
--- a/tmp/5f97e6d5-fe0f-496f-8f97-2a89db00a125_buggy.java
+++ b/tmp/6442f94b-90fb-4970-a957-8448a1a2f81e_fixed.java
@@ -1,20 +1,25 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
+        // Assuming 'buf' is a ByteBuffer field initialized before this constructor body
+        // And 'in' is the PushbackInputStream field
         in = new PushbackInputStream(inputStream, buf.capacity());
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
         // haven't read anything so far
+        // Reset the buffer's limit to 0, ensuring it starts empty.
+        // This was missing in the buggy version and caused issues with initial reads.
+        buf.limit(0);
     }
