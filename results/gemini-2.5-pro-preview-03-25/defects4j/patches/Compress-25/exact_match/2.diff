diff --git a/tmp/1c63e769-c8bd-4bb2-a7e0-55ee0ebca6fe_buggy.java b/tmp/adccefc9-f17b-4165-93c3-f16aaf0645c7_fixed.java
index 6c0aa19..620388c 100644
--- a/tmp/1c63e769-c8bd-4bb2-a7e0-55ee0ebca6fe_buggy.java
+++ b/tmp/adccefc9-f17b-4165-93c3-f16aaf0645c7_fixed.java
@@ -1,20 +1,29 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
+        // Make sure we always use a PushbackInputStream;
+        // need to be able to push back archive signature and LFH
+        // bytes when reading the first entry.
+        // The buffer capacity is used as the pushback size.
         in = new PushbackInputStream(inputStream, buf.capacity());
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
         // haven't read anything so far
+        // Initialize buffer limit to 0, indicating buffer is empty.
+        // This fixes a bug where the first read() might read stale
+        // (zero) data from the buffer if it was allocated but not
+        // yet filled from the underlying stream.
+        buf.limit(0);
     }
