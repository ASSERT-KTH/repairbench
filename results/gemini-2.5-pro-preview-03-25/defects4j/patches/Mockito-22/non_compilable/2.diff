diff --git a/tmp/47dcaaa0-af19-4b38-919b-9b7848aaae58_buggy.java b/tmp/6ced39d9-20bc-4457-8dff-cf21fe3a27cd_fixed.java
index 111ba5e..27f03a9 100644
--- a/tmp/47dcaaa0-af19-4b38-919b-9b7848aaae58_buggy.java
+++ b/tmp/6ced39d9-20bc-4457-8dff-cf21fe3a27cd_fixed.java
@@ -1,9 +1,48 @@
     public static boolean areEqual(Object o1, Object o2) {
+        // Check identity first: handles same instance and null == null
+        if (o1 == o2) {
+            return true;
+        }
+        // If identity check failed, but one is null, they are not equal.
+        // (Covers o1=null, o2!=null OR o1!=null, o2=null)
         if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
+            return false;
+        }
+        // At this point, o1 and o2 are non-null and different instances.
+        // Check if o1 is an array.
+        // isArray() and areArraysEqual() are helper methods assumed to exist.
+        if (isArray(o1)) {
+            // If o1 is an array, o2 must also be an array and they must be deeply equal.
             return isArray(o2) && areArraysEqual(o1, o2);
         } else {
+            // o1 is not an array. For equality, o2 must also not be an array,
+            // and o1.equals(o2) must be true.
+            // The standard behavior of Object.equals() already handles the case
+            // where o2 might be an array (it would return false).
             return o1.equals(o2);
         }
     }
+
+    // Helper methods assumed to exist and function correctly (not part of the fix)
+    private static boolean isArray(Object o) {
+        // Assumed implementation
+        return o != null && o.getClass().isArray();
+    }
+
+    private static boolean areArraysEqual(Object o1, Object o2) {
+        // Assumed implementation (likely recursive using areEqual for elements)
+        // Example sketch:
+         int length = java.lang.reflect.Array.getLength(o1);
+         if (length != java.lang.reflect.Array.getLength(o2)) {
+             return false;
+         }
+         for (int i = 0; i < length; i++) {
+             Object e1 = java.lang.reflect.Array.get(o1, i);
+             Object e2 = java.lang.reflect.Array.get(o2, i);
+             if (!areEqual(e1, e2)) { // Recursive call is key
+                 return false;
+             }
+         }
+         return true;
+        // return false; // Placeholder if no implementation available
+    }
\ No newline at end of file
