diff --git a/tmp/e25878f6-ff28-4d34-bd89-d57df54f27ac_buggy.java b/tmp/2fceec0e-119d-41fe-9a97-86b9fe5fc069_fixed.java
index 111ba5e..ec99004 100644
--- a/tmp/e25878f6-ff28-4d34-bd89-d57df54f27ac_buggy.java
+++ b/tmp/2fceec0e-119d-41fe-9a97-86b9fe5fc069_fixed.java
@@ -1,9 +1,66 @@
     public static boolean areEqual(Object o1, Object o2) {
-        if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
+        if (o1 == o2) { // Check for identity first (handles same instance, including null==null)
+            return true;
+        }
+        if (o1 == null || o2 == null) { // If not identical, and one is null, they're not equal
+            return false;
+        }
+        // At this point, o1 and o2 are non-null and not identical.
+        // Use isArray helper method (assumed to exist and work correctly)
+        // to check if objects are arrays.
+        if (isArray(o1)) {
+            // o1 is an array, o2 is non-null.
+            // Return true only if o2 is also an array and their contents are deeply equal.
+            // The areArraysEqual method (assumed to exist) should handle deep comparison,
+            // including nested arrays and potentially different array types if applicable
+            // (e.g., int[] vs Integer[]). The RuntimeException likely originates here
+            // if it doesn't handle such cases.
             return isArray(o2) && areArraysEqual(o1, o2);
+        } else if (isArray(o2)) {
+            // o1 is not an array, but o2 is. They cannot be equal.
+            return false;
         } else {
+            // Neither is an array. Use standard equals method.
             return o1.equals(o2);
         }
     }
+
+    // Helper methods (isArray and areArraysEqual) are assumed to exist elsewhere
+    // and are not part of the fix for the areEqual method itself.
+    // Example stubs (actual implementation might be more complex):
+    private static boolean isArray(Object o) {
+        return o != null && o.getClass().isArray();
+    }
+
+    private static boolean areArraysEqual(Object o1, Object o2) {
+        // This method needs to handle different array types (primitive/object),
+        // lengths, and recursively call areEqual for elements.
+        // A full implementation is complex and depends on desired semantics
+        // (e.g., how to compare int[] and Integer[]).
+        // A simple placeholder:
+        if (o1.getClass() != o2.getClass()) {
+             // This is too strict for cases like int[] vs Integer[] or Object[] vs String[]
+             // The actual implementation must be more nuanced.
+             // return false; // Or attempt comparison if types are compatible.
+             // For the purpose of fixing areEqual, we assume this method exists and
+             // potentially throws the RuntimeException seen in the test if types are tricky.
+             throw new UnsupportedOperationException("areArraysEqual logic depends on full context");
+        }
+        // Basic length check
+        int length = java.lang.reflect.Array.getLength(o1);
+        if (length != java.lang.reflect.Array.getLength(o2)) {
+            return false;
+        }
+        // Element-wise comparison using areEqual recursively
+        for (int i = 0; i < length; i++) {
+            Object elem1 = java.lang.reflect.Array.get(o1, i);
+            Object elem2 = java.lang.reflect.Array.get(o2, i);
+            if (!areEqual(elem1, elem2)) { // Recursive call
+                return false;
+            }
+        }
+        return true;
+        // NOTE: Comparing primitive arrays like this using reflection (get)
+        // involves boxing, which might be acceptable. Comparing int[] vs Integer[]
+        // requires more specific logic not shown here.
+    }
\ No newline at end of file
