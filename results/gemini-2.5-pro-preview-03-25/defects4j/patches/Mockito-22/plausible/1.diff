diff --git a/tmp/3523b33c-eb47-4d4a-a11b-d608fccc13c8_buggy.java b/tmp/e4f93e61-312a-4dca-9df9-8e45bbce36e4_fixed.java
index 111ba5e..c409671 100644
--- a/tmp/3523b33c-eb47-4d4a-a11b-d608fccc13c8_buggy.java
+++ b/tmp/e4f93e61-312a-4dca-9df9-8e45bbce36e4_fixed.java
@@ -1,9 +1,44 @@
     public static boolean areEqual(Object o1, Object o2) {
-        if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+        if (o1 == o2) { // Check for identity first (covers o1 == null && o2 == null)
+            return true;
+        }
+        if (o1 == null || o2 == null) { // If either is null (but not both, due to identity check), they aren't equal
+            return false;
+        }
+        // Now we know o1 and o2 are non-null and not identical.
+        // Check if o1 is an array. We need the isArray helper method, assume it exists and works.
+        // We also need the areArraysEqual helper method, assume it exists and works.
+        // This structure assumes isArray and areArraysEqual are provided elsewhere.
+        // A simple isArray check could be 'o1.getClass().isArray()'.
+        if (o1.getClass().isArray()) {
+            // If o1 is an array, o2 must also be an array and their contents must be equal.
+            // Rely on a helper method 'areArraysEqual' to perform deep array comparison.
+            // This helper would need to handle primitive and object arrays, lengths, and element equality (recursively calling areEqual for elements if needed).
+            return o2.getClass().isArray() && areArraysEqual(o1, o2);
         } else {
+            // If o1 is not an array, use the standard equals method.
+            // This correctly handles the case where o2 might be an array (o1.equals(array) should typically return false).
             return o1.equals(o2);
         }
     }
+
+    // Helper methods assumed to exist (implementations not provided, but needed for compilation/functionality):
+
+    /**
+     * Checks if an object is an array (either primitive or object array).
+     * Assumed to be available. A potential implementation:
+     * private static boolean isArray(Object obj) {
+     *     return obj != null && obj.getClass().isArray();
+     * }
+     */
+    // private static boolean isArray(Object obj) { ... }
+
+
+    /**
+     * Checks if two arrays are deeply equal. Handles primitive and object arrays.
+     * Compares lengths and elements recursively using areEqual if necessary.
+     * Assumed to be available. Implementation details are complex and depend on specific requirements
+     * (e.g., handling of primitive vs wrapper arrays like int[] vs Integer[] as seen in the test).
+     * A full implementation would use java.lang.reflect.Array and potentially Arrays.equals methods.
+     */
+    // private static boolean areArraysEqual(Object o1, Object o2) { ... }
