diff --git a/tmp/2c6cfc0e-c7dd-436c-9393-c2b82d24f898_buggy.java b/tmp/d5e6c44b-2372-4895-9f77-1800e2beba75_fixed.java
index 111ba5e..3744af6 100644
--- a/tmp/2c6cfc0e-c7dd-436c-9393-c2b82d24f898_buggy.java
+++ b/tmp/d5e6c44b-2372-4895-9f77-1800e2beba75_fixed.java
@@ -1,9 +1,25 @@
     public static boolean areEqual(Object o1, Object o2) {
-        if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+        if (o1 == o2) { // Check identity first for performance and correctness (e.g., identical arrays)
+            return true;
+        }
+        if (o1 == null || o2 == null) { // If identity failed, and one is null, they are not equal
+            return false;
+        }
+        // Now o1 and o2 are non-null and not identical references
+        final boolean o1IsArray = isArray(o1);
+        final boolean o2IsArray = isArray(o2);
+
+        if (o1IsArray && o2IsArray) {
+            // Both are arrays, delegate to areArraysEqual which should handle content comparison
+            return areArraysEqual(o1, o2);
+        } else if (o1IsArray != o2IsArray) {
+            // One is an array, the other is not. They cannot be equal.
+            // This explicitly handles the case where the original code might call o1.equals(o2)
+            // when o1 is not an array but o2 is.
+            return false;
         } else {
+            // Neither is an array, rely on the equals() method of o1
+            // This assumes o1.equals() correctly handles comparison with o2's type.
             return o1.equals(o2);
         }
     }
\ No newline at end of file
