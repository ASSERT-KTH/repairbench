diff --git a/tmp/ed4f8085-421b-45f5-ab3c-565980a5fa6d_buggy.java b/tmp/6e423c36-8e8b-487d-a04d-a725199e5896_fixed.java
index 111ba5e..7ba6618 100644
--- a/tmp/ed4f8085-421b-45f5-ab3c-565980a5fa6d_buggy.java
+++ b/tmp/6e423c36-8e8b-487d-a04d-a725199e5896_fixed.java
@@ -1,9 +1,24 @@
     public static boolean areEqual(Object o1, Object o2) {
+        if (o1 == o2) { // Add identity check for performance and to handle faulty equals()
+            return true;
+        }
         if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
+            // Since o1 != o2, if either is null, they are not equal.
+            return false;
         } else if (isArray(o1)) {
+            // If o1 is an array, o2 must also be an array for them to be equal (given o1 != o2 and o2 != null)
+            // We rely on isArray and areArraysEqual helper methods (assumed to exist and be correct)
             return isArray(o2) && areArraysEqual(o1, o2);
         } else {
+            // Neither is null, o1 is not an array. Use standard equals().
+            // We already know o1 != o2 from the initial identity check.
             return o1.equals(o2);
         }
     }
+
+    // Helper methods assumed to exist and be implemented correctly, e.g.:
+    // private static boolean isArray(Object o) { ... }
+    // private static boolean areArraysEqual(Object o1, Object o2) { ... }
+    // Note: A correct areArraysEqual would likely need to handle different
+    // array types (e.g., primitive vs wrapper) by recursively calling areEqual
+    // on elements obtained via java.lang.reflect.Array.get().
\ No newline at end of file
