diff --git a/tmp/2d3a2b18-18d9-479a-a1a9-6154b86e8fce_buggy.java b/tmp/dddf1d95-43db-486f-9179-79785230328d_fixed.java
index 111ba5e..b79bf8b 100644
--- a/tmp/2d3a2b18-18d9-479a-a1a9-6154b86e8fce_buggy.java
+++ b/tmp/dddf1d95-43db-486f-9179-79785230328d_fixed.java
@@ -1,9 +1,24 @@
     public static boolean areEqual(Object o1, Object o2) {
+        if (o1 == o2) { // Check for identity first. Handles same instance cases like (arr, arr) and (badequals, badequals).
+            return true;
+        }
         if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
+            // If they are not identical (checked above), and one is null, they are not equal.
+            // The original code 'return o1 == null && o2 == null;' is equivalent after the identity check,
+            // because if we reach here, o1 != o2. If one is null, the other isn't, so the && is false.
+            // If both were null, the identity check 'o1 == o2' would have caught it.
+            return false;
+        }
+        // From here, o1 and o2 are non-null and not identical (o1 != o2).
+        if (isArray(o1)) {
+            // If o1 is an array, o2 must also be an array and their contents must be equal.
             return isArray(o2) && areArraysEqual(o1, o2);
         } else {
+            // o1 is not an array. o2 is not null. o1 != o2.
+            // For equality, o2 must also not be an array (this check is implicit,
+            // as if o2 were an array, the flow would likely enter the 'if (isArray(o1))' block
+            // if called as areEqual(o2, o1), or o1.equals(o2) should return false).
+            // Rely on the equals method for non-array object comparison.
             return o1.equals(o2);
         }
     }
\ No newline at end of file
