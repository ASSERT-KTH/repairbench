diff --git a/tmp/03f8d241-a432-41a5-a8f3-419b06ceb48f_buggy.java b/tmp/e16fdb98-4267-4861-a36c-27c6eda5c1de_fixed.java
index d9b400d..5a57914 100644
--- a/tmp/03f8d241-a432-41a5-a8f3-419b06ceb48f_buggy.java
+++ b/tmp/e16fdb98-4267-4861-a36c-27c6eda5c1de_fixed.java
@@ -1,21 +1,26 @@
+import org.apache.commons.cli.ParseException;
+
 /**
  * <p>Create a number from a String. If a . is present, it creates a
  *    Double, otherwise a Long. </p>
  *
  * @param str the value
-     * @return the number represented by <code>str</code>, if <code>str</code>
-     * is not a number, null is returned.
+ * @return the number represented by <code>str</code>
+ * @throws ParseException if <code>str</code> is not a number.
  */
-    public static Number createNumber(String str)
-    {
-        try
-        {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+public static Number createNumber(String str) throws ParseException {
+    try {
+        // check if the string has a '.'
+        if (str.indexOf('.') != -1) {
+            // it has a ., so create a Double
+            return Double.valueOf(str);
+        } else {
+            // create a Long
+            return Long.valueOf(str);
         }
-        catch (NumberFormatException nfe)
-        {
-            System.err.println(nfe.getMessage());
+    } catch (NumberFormatException e) {
+        // Re-throw the NumberFormatException as a ParseException
+        // Note: Using e.getMessage() preserves the original reason from NumberFormatException.
+        throw new ParseException(e.getMessage());
     }
-
-        return null;
 }
\ No newline at end of file
