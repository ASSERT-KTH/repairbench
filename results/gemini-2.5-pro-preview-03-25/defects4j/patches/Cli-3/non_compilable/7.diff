diff --git a/tmp/e23a3f74-78fd-48a2-9147-c1a69d7b6531_buggy.java b/tmp/43dabe02-4b41-479e-b83a-60cdc748b2d4_fixed.java
index d9b400d..7cd683c 100644
--- a/tmp/e23a3f74-78fd-48a2-9147-c1a69d7b6531_buggy.java
+++ b/tmp/43dabe02-4b41-479e-b83a-60cdc748b2d4_fixed.java
@@ -1,21 +1,32 @@
+import org.apache.commons.cli.ParseException;
+
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
-     * @return the number represented by <code>str</code>, if <code>str</code>
-     * is not a number, null is returned.
+     * @return the number represented by <code>str</code>.
+     * @throws ParseException if <code>str</code> is not a valid number.
      */
-    public static Number createNumber(String str)
+    public static Number createNumber(String str) throws ParseException
     {
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // handle JDK 1.3 issues
+            if (str.indexOf('.') != -1)
+            {
+                // If a decimal point exists, create a Double
+                return Double.valueOf(str);
+            }
+            else
+            {
+                // Otherwise, create a Long
+                return Long.valueOf(str);
+            }
         }
-        catch (NumberFormatException nfe)
+        catch (NumberFormatException e)
         {
-            System.err.println(nfe.getMessage());
+            // Throw a ParseException if the string is not a valid number
+            throw new ParseException("Unable to parse " + str);
         }
-
-        return null;
     }
\ No newline at end of file
