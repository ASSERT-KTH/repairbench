diff --git a/tmp/925ac6b3-95bc-40b8-b2d9-c472af4cfc25_buggy.java b/tmp/a7bcca05-a2d0-421d-8e62-20d401578dc1_fixed.java
index d9b400d..76cac4c 100644
--- a/tmp/925ac6b3-95bc-40b8-b2d9-c472af4cfc25_buggy.java
+++ b/tmp/a7bcca05-a2d0-421d-8e62-20d401578dc1_fixed.java
@@ -1,21 +1,36 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        if (str == null) {
+            return null;
+        }
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // check if a decimal point exists. This determines if it's a Double or Long.
+            // This behavior is specified in the Javadoc.
+            if (str.indexOf('.') != -1)
+            {
+                return Double.valueOf(str);
+            }
+            else
+            {
+                // no decimal point => create a Long
+                return Long.valueOf(str);
+            }
         }
         catch (NumberFormatException nfe)
         {
+            // Print the error message like the original code, although returning null
+            // might be sufficient based on the Javadoc contract ("null is returned").
             System.err.println(nfe.getMessage());
-        }
-
+            // Return null if the string is not a valid number according to the defined logic.
             return null;
         }
+    }
\ No newline at end of file
