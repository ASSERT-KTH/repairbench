diff --git a/tmp/d1236ab0-1b15-4f74-8d36-cae64317fdb2_buggy.java b/tmp/09a8d032-0742-4c5a-9098-c47a41d3c5f3_fixed.java
index d9b400d..5622d00 100644
--- a/tmp/d1236ab0-1b15-4f74-8d36-cae64317fdb2_buggy.java
+++ b/tmp/09a8d032-0742-4c5a-9098-c47a41d3c5f3_fixed.java
@@ -1,21 +1,40 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        if (str == null) {
+            return null;
+        }
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // If str contains a '.', create a Double
+            if (str.indexOf('.') != -1)
+            {
+                // Handle potential 'f'/'F' suffix for floats if needed,
+                // but Double.valueOf should handle standard double formats.
+                // The Javadoc specifically mentions Double, so we create a Double.
+                return Double.valueOf(str);
+            }
+            // Otherwise, create a Long
+            else
+            {
+                // Long.valueOf handles standard long formats.
+                // It might throw NumberFormatException for non-integer strings,
+                // hex/octal depending on the implementation, which is caught below.
+                return Long.valueOf(str);
+            }
         }
         catch (NumberFormatException nfe)
         {
-            System.err.println(nfe.getMessage());
-        }
-
+            // The original code printed the error, but the Javadoc contract
+            // is just to return null if the string is not a number.
+            // System.err.println(nfe.getMessage()); // Removed error printing
             return null;
         }
+    }
\ No newline at end of file
