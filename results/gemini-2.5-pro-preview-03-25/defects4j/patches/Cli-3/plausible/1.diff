diff --git a/tmp/6b3e739a-2969-49af-8d2c-296c5a2c05c7_buggy.java b/tmp/bd3fe166-49d6-4815-8534-2afed9204e14_fixed.java
index d9b400d..dd10db6 100644
--- a/tmp/6b3e739a-2969-49af-8d2c-296c5a2c05c7_buggy.java
+++ b/tmp/bd3fe166-49d6-4815-8534-2afed9204e14_fixed.java
@@ -1,21 +1,38 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        if (str == null) {
+             return null;
+        }
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // Delegate parsing to commons-lang NumberUtils
+            Number number = org.apache.commons.lang.math.NumberUtils.createNumber(str);
+
+            // commons-lang NumberUtils can return Float, Double, Long, BigInteger, BigDecimal.
+            // Test case implies that floating point numbers like "4.5" should be Double.
+            // NumberUtils may return Float for smaller precision floating point numbers.
+            // Convert Float to Double to ensure consistency with Double expectation.
+            if (number instanceof Float)
+            {
+                // Use doubleValue() to get the value and create a new Double
+                return Double.valueOf(number.doubleValue());
+            }
+            
+            // Return other Number types (Long, Double, BigInteger, BigDecimal) as is.
+            return number;
         }
         catch (NumberFormatException nfe)
         {
-            System.err.println(nfe.getMessage());
-        }
-
+            // If NumberUtils fails to parse, return null as per the contract.
+            // The original code printed the error, which is removed here.
             return null;
         }
+    }
