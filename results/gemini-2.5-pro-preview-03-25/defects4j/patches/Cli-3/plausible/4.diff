diff --git a/tmp/6452f476-155a-4bf8-97f3-58e310931a26_buggy.java b/tmp/60ab64d8-082b-4abe-9ae1-9d14870ab340_fixed.java
index d9b400d..30e49c9 100644
--- a/tmp/6452f476-155a-4bf8-97f3-58e310931a26_buggy.java
+++ b/tmp/60ab64d8-082b-4abe-9ae1-9d14870ab340_fixed.java
@@ -1,21 +1,43 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
+     * <p>Note: This method deviates from NumberUtils.createNumber which may return
+     * Integer, Float, BigInteger, or BigDecimal.</p> // Added note about deviation
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        if (str == null)
+        {
+            return null;
+        }
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // Rule: Check for decimal point or exponent marker.
+            // If present, create a Double. Handles cases like "4.5", "1.0", "1e6".
+            // Double.valueOf handles "d" or "D" suffix, but throws NFE for "f" or "F".
+            // This aligns with the expectation of creating a Double, not a Float.
+            if (str.indexOf('.') != -1 || str.indexOf('e') != -1 || str.indexOf('E') != -1)
+            {
+                // Consider it a Double
+                return Double.valueOf(str);
             }
-        catch (NumberFormatException nfe)
+            else
             {
-            System.err.println(nfe.getMessage());
+                // No decimal point or exponent, treat as Long.
+                // Long.valueOf handles optional sign and "L" or "l" suffix.
+                // It does *not* handle hex ("0x") or octal ("0") prefixes like NumberUtils.
+                return Long.valueOf(str);
+            }
         }
-
+        catch (NumberFormatException e)
+        {
+            // The original code printed the error to System.err,
+            // but the Javadoc contract is to return null if str is not a number.
+            // Return null on any parsing failure.
             return null;
         }
+    }
\ No newline at end of file
