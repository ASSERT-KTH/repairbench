diff --git a/tmp/eed7516d-ce01-48c4-aa87-daf07164ee69_buggy.java b/tmp/c7b41b8a-2750-4755-ac24-b9197fd0b90f_fixed.java
index d9b400d..71f7c37 100644
--- a/tmp/eed7516d-ce01-48c4-aa87-daf07164ee69_buggy.java
+++ b/tmp/c7b41b8a-2750-4755-ac24-b9197fd0b90f_fixed.java
@@ -1,21 +1,45 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        if (str == null) {
+            return null;
+        }
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // Check if the string contains a decimal point '.'
+            // The original implementation delegated to commons-lang NumberUtils.createNumber,
+            // which prefers Float over Double for "4.5", causing the test to fail
+            // as it expected a Double.
+            // The javadoc for this method explicitly states that a '.' should result
+            // in a Double, and otherwise a Long. We implement this logic directly.
+            if (str.indexOf('.') != -1)
+            {
+                // If a dot is present, create a Double
+                return Double.valueOf(str);
+            }
+            else
+            {
+                // If no dot is present, create a Long
+                // Note: This interpretation of the javadoc means formats like
+                // "1e6" (which doesn't contain '.') or "0xFF" will be parsed as Long
+                // and likely throw NumberFormatException, unlike NumberUtils.createNumber.
+                // However, this aligns with the javadoc and fixes the failing test.
+                return Long.valueOf(str);
+            }
         }
         catch (NumberFormatException nfe)
         {
+            // Print the specific message from the NumberFormatException, like the original.
+            // Using System.err is generally discouraged in libraries, prefer logging.
              System.err.println(nfe.getMessage());
-        }
-
+             // Return null if parsing fails, consistent with original behavior on NFE.
             return null;
         }
+    }
\ No newline at end of file
