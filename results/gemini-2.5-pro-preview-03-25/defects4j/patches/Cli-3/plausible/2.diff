diff --git a/tmp/ed67ca72-b5f8-4a75-abd6-17fb2b4e20f8_buggy.java b/tmp/6f4327fb-8618-480b-8856-04943d880448_fixed.java
index d9b400d..7a37154 100644
--- a/tmp/ed67ca72-b5f8-4a75-abd6-17fb2b4e20f8_buggy.java
+++ b/tmp/6f4327fb-8618-480b-8856-04943d880448_fixed.java
@@ -1,21 +1,38 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
-        try
-        {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+        if (str == null) {
+            return null;
         }
-        catch (NumberFormatException nfe)
-        {
-            System.err.println(nfe.getMessage());
+        try {
+            // check if the string contains a dot, if so parse as Double
+            if (str.indexOf('.') != -1) {
+                // Double.valueOf handles exponents (e.g., "1.2e3") correctly
+                return Double.valueOf(str);
+            } else {
+                // No dot, parse as Long.
+                // Use Long.decode to handle decimal, hex (0x), and octal (0) prefixes.
+                return Long.decode(str);
             }
+        } catch (NumberFormatException e) {
+            // The Javadoc specifies returning null if str is not a number.
+            // NumberFormatException indicates it's not a valid number format
+            // for Double or Long (depending on the path taken).
+            
+            // The original code printed the error message, but returning null
+            // is the documented behavior for invalid input.
+            // System.err.println(e.getMessage()); // Removed side-effect
 
+            // We might end up here if the string is too large for Long
+            // or has an invalid format. The comment doesn't specify
+            // handling BigInteger/BigDecimal, so returning null is consistent.
             return null;
         }
+    }
\ No newline at end of file
