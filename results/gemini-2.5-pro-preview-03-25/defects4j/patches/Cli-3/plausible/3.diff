diff --git a/tmp/5b7e2b1a-e238-4cc4-812d-8ed1c478b8d2_buggy.java b/tmp/da92e6c5-278f-448e-98ac-22c4ed8b955c_fixed.java
index d9b400d..83753b6 100644
--- a/tmp/5b7e2b1a-e238-4cc4-812d-8ed1c478b8d2_buggy.java
+++ b/tmp/da92e6c5-278f-448e-98ac-22c4ed8b955c_fixed.java
@@ -1,21 +1,40 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        if (str == null) {
+            return null;
+        }
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // Check if the string contains a decimal point '.'
+            // This aligns with the javadoc description and standard commons-cli behavior.
+            if (str.indexOf('.') != -1)
+            {
+                // If a decimal point is present, create a Double
+                // This fixes the test failure where NumberUtils might return BigDecimal
+                // causing assertEquals(Double, BigDecimal) to fail.
+                return Double.valueOf(str);
+            }
+            else
+            {
+                // Otherwise, create a Long
+                // Note: This won't handle hex (0x...), octal (0...), or type suffixes (L)
+                // like NumberUtils.createNumber does, but matches the javadoc.
+                return Long.valueOf(str);
+            }
         }
         catch (NumberFormatException nfe)
         {
-            System.err.println(nfe.getMessage());
-        }
-
+            // If parsing fails (e.g., non-numeric input, or format not handled
+            // by Double.valueOf/Long.valueOf like "0xFF"), return null.
+            // Avoid printing to System.err in library code.
             return null;
         }
+    }
\ No newline at end of file
