diff --git a/tmp/197bf8bf-b147-4f59-9b12-0ce1345d7c5b_buggy.java b/tmp/70cfe73c-60cd-4ffb-a7e0-15014a1a7459_fixed.java
index e69de29..0d63942 100644
--- a/tmp/197bf8bf-b147-4f59-9b12-0ce1345d7c5b_buggy.java
+++ b/tmp/70cfe73c-60cd-4ffb-a7e0-15014a1a7459_fixed.java
@@ -0,0 +1,52 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.Map;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.FunctorException;
+import org.apache.commons.collections4.MultiMap;
+import org.apache.commons.collections4.map.AbstractMapDecorator;
+
+/**
+ * Read the object from the stream, validating the collection class.
+ * This method is added to ensure that deserialization does not allow
+ * the creation of a MultiValueMap with a collection class that is not
+ * actually a Collection implementation, enhancing security and robustness.
+ *
+ * @param in the input stream
+ * @throws IOException if an error occurs reading from the stream
+ * @throws ClassNotFoundException if the class of a serialized object cannot be found
+ * @throws UnsupportedOperationException if the deserialized collection class is invalid
+ *                                      (not assignable from Collection)
+ */
+private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+    // Read the non-transient fields, including collectionClass and the decorated map.
+    in.defaultReadObject();
+
+    // Validate the deserialized collectionClass.
+    // It should have been initialized by defaultReadObject() from the stream.
+    if (this.collectionClass == null) {
+        // This path suggests the object was serialized from an instance where
+        // collectionClass was null (e.g., using the Factory constructor where
+        // the factory field is transient and wasn't restored, or a corrupted stream).
+        // For streams generated from instances created with the Class-based factory method,
+        // collectionClass should not be null.
+        throw new IOException("MultiValueMap collectionClass is null during deserialization.");
+    }
+
+    // Check if the deserialized class is actually a Collection.
+    if (!Collection.class.isAssignableFrom(this.collectionClass)) {
+        // Throw an exception if the class is not a valid collection type,
+        // preventing the potential misuse or instability from using a non-Collection class.
+        throw new UnsupportedOperationException("Deserialized collection class " +
+                                                this.collectionClass.getName() +
+                                                " is not assignable from Collection");
+    }
+
+    // Note: The 'collectionFactory' field is transient and is not restored here.
+    // The 'createCollection' method handles the case where 'collectionFactory' is null
+    // by using 'collectionClass.newInstance()', so this behaviour is maintained.
+    // The underlying 'map' field is handled by default deserialization as it's
+    // inherited from AbstractMapDecorator and is not transient.
+}
\ No newline at end of file
