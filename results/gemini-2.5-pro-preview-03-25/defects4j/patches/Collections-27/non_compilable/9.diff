diff --git a/tmp/ab528c06-9fac-4cd4-98b5-4e929e17c679_buggy.java b/tmp/4bcbfb61-f164-43aa-96e7-5a04bfa072e6_fixed.java
index e69de29..b8fc0c3 100644
--- a/tmp/ab528c06-9fac-4cd4-98b5-4e929e17c679_buggy.java
+++ b/tmp/4bcbfb61-f164-43aa-96e7-5a04bfa072e6_fixed.java
@@ -0,0 +1,23 @@
+    /**
+     * Read the factory from serialized state, validating that the class is usable.
+     *
+     * @param is the input stream
+     * @throws IOException if an I/O error occurs
+     * @throws ClassNotFoundException if the class cannot be found
+     * @throws UnsupportedOperationException if the deserialized class is not a Collection subclass
+     */
+    private void readObject(final ObjectInputStream is) throws IOException, ClassNotFoundException {
+        is.defaultReadObject();
+        if (proto == null) {
+            // This could happen if an old version is deserialized, although maybe unlikely.
+            // Or perhaps proto is transient, and defaultReadObject doesn't set it.
+            // However, proto is not transient in the likely source.
+            // If proto was null, the constructor should have prevented it.
+            // If it is null after deserialization, it indicates a serialization issue or corruption.
+            throw new java.io.InvalidObjectException("Collection class Class is null"); // Use standard exception
+        }
+        if (!java.util.Collection.class.isAssignableFrom(proto)) {
+            throw new UnsupportedOperationException("Deserialized collection class " + proto.getName() +
+                                                     " is not a subclass of Collection");
+        }
+    }
\ No newline at end of file
