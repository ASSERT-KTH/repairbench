diff --git a/tmp/35952a01-2df0-4379-9066-56be22fee8a1_buggy.java b/tmp/08bdc0c9-2485-4d4a-b359-a670443f313a_fixed.java
index e69de29..6466108 100644
--- a/tmp/35952a01-2df0-4379-9066-56be22fee8a1_buggy.java
+++ b/tmp/08bdc0c9-2485-4d4a-b359-a670443f313a_fixed.java
@@ -0,0 +1,47 @@
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.functors.ReflectionFactory;
+
+import java.io.IOException;
+import java.io.InvalidObjectException;
+import java.io.ObjectInputStream;
+import java.lang.reflect.Field;
+import java.util.Collection;
+import java.util.Map;
+
+    /**
+     * Read the map in using custom serialization implementations.
+     *
+     * @param in the input stream
+     * @throws IOException            if an I/O error occurs
+     * @throws ClassNotFoundException if the stream contains an object which class can not be loaded
+     * @throws UnsupportedOperationException if the stream contains an invalid collection class
+     */
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject(); // Reads the collectionClass field.
+
+        // Validate the collectionClass straight away
+        if (collectionClass == null) {
+            throw new InvalidObjectException("collectionClass is null during deserialization");
+        }
+        if (!Collection.class.isAssignableFrom(collectionClass)) {
+            throw new UnsupportedOperationException("Deserialized collection class " + collectionClass.getName() +
+                                                    " is not assignable to Collection");
+        }
+
+        // Recreate the transient factory - needs reflection to set final field
+        final Factory<? extends Collection<V>> factory = new ReflectionFactory<>(collectionClass);
+        try {
+            final Field factoryField = MultiValueMap.class.getDeclaredField("collectionFactory");
+            factoryField.setAccessible(true);
+            factoryField.set(this, factory);
+        } catch (final NoSuchFieldException | IllegalAccessException e) {
+            // This should not happen if the field exists and security policy allows access
+            throw new InvalidObjectException("Unable to initialize transient final field collectionFactory: " + e.getMessage());
+        }
+
+        // Read the decorated map
+        @SuppressWarnings("unchecked") // Keep CCE type safety via convention
+        final Map<K, ? super Collection<V>> map = (Map<K, ? super Collection<V>>) in.readObject();
+        // Set the map in the superclass (AbstractMultiValuedMap)
+        setMap(map);
+    }
\ No newline at end of file
