diff --git a/tmp/32babacc-caf2-4021-a94a-36c6f7f9da77_buggy.java b/tmp/167657cb-67d3-4917-82e5-9209de0c9ad7_fixed.java
index e69de29..7d185d9 100644
--- a/tmp/32babacc-caf2-4021-a94a-36c6f7f9da77_buggy.java
+++ b/tmp/167657cb-67d3-4917-82e5-9209de0c9ad7_fixed.java
@@ -0,0 +1,35 @@
+    /**
+     * Deserializes the map in using a custom routine.
+     * <p>
+     * The {@code collectionClass} field is read and validated.
+     *
+     * @param in the input stream
+     * @throws IOException if an error occurs while reading from the stream
+     * @throws ClassNotFoundException if an object read from the stream can not be loaded
+     * @throws UnsupportedOperationException if the deserialized {@code collectionClass} is not a Collection type.
+     * @since 4.1
+     */
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject(); // Reads collectionClass
+
+        // Validate the collectionClass
+        if (collectionClass == null) {
+            // This should not happen with default serialization, but be defensive
+            throw new UnsupportedOperationException("Collection class is null during deserialization");
+        }
+        // Check if the deserialized class is actually a Collection implementation.
+        if (!Collection.class.isAssignableFrom(collectionClass)) {
+            throw new UnsupportedOperationException("Deserialized collection class " + collectionClass.getName()
+                    + " is not assignable to Collection");
+        }
+
+        // Now that collectionClass is validated, proceed with setting up the map.
+        // Set the transient factory field in the superclass
+        super.setCollectionFactory(new ReflectionFactory<>(collectionClass));
+        // Set the transient map field in the superclass
+        // Note: The specific map implementation (e.g., HashMap) used here might differ
+        // from the original map, but this is typical for serialization proxies.
+        // The AbstractMultiValuedMap's doReadObject should populate this map.
+        super.setMap(new HashMap<K, Collection<V>>());
+        doReadObject(in); // Reads map contents using the logic in AbstractMultiValuedMap
+    }
\ No newline at end of file
