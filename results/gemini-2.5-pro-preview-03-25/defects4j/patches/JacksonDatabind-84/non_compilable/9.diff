diff --git a/tmp/7a5882b1-d4f4-41d5-850f-2c120b6835a4_buggy.java b/tmp/9e9e9ddd-6791-47ed-bfca-ffedf40eb6ab_fixed.java
index e69de29..07c1129 100644
--- a/tmp/7a5882b1-d4f4-41d5-850f-2c120b6835a4_buggy.java
+++ b/tmp/9e9e9ddd-6791-47ed-bfca-ffedf40eb6ab_fixed.java
@@ -0,0 +1,41 @@
+// Located in package com.fasterxml.jackson.databind.type, class TypeFactory
+    /**
+     * Method called to ensure that type constructed is valid and,
+     * if so, add to cache.
+     * Added to allow subtypes to override definition of validity,
+     * and perhaps additional caching checks.
+     * Note that {@link ResolvedRecursiveType} instances are NOT
+     * cached as is, but only during construction, and should
+     * be replaced by actual resolved type instance.
+     * Currently validity check just avoids caching types that
+     * are not {@link #isConcrete()}.
+     *
+     * @since 2.9
+     */
+    private final void _verifyAndCache(Object key, JavaType type)
+    {
+        // 13-Jan-2017, tatu: As per [databind#1467] need to ensure we don't cache
+        //    truly invalid types. But note that we DO want to cache placeholders.
+        //    So... is this check useful? (Seems like not) Or should it be done right
+        //    after construction, by `_constructType`?
+        /* 19-Sep-2018, tatu: [databind#1998] makes it necessary NOT to check this,
+         *   for recursive types. Let's just comment out for now.
+        if (!type.isConcrete()) {
+             return;
+        }
+        */
+        // 19-Sep-2018, tatu: Ok. This is where [databind#1998] fix is needed.
+        //   We must NOT try replacing a ResolvedRecursiveType ("placeholder") with
+        //   ResolvedRecursiveType. Instead, need to either resolve or fail.
+        //   But for now let's just unconditionally add mapping. May be problematic,
+        //   but needs to work for placeholder/self-ref cases.
+        /* 19-Sep-2018, tatu: Turns out this is probably NOT needed -- checks for `isResolved()`
+         *   may be sufficient? Needs more testing. But for 2.9 let's play it safe.
+         *   Resolving placeholders has to occur somewhere...
+         */
+         // [databind#1998] / [databind#2334]: unconditionally cache for now:
+         // Ensure the final constructed type replaces any temporary placeholder (like ResolvedRecursiveType)
+         // put in the cache earlier during recursive type resolution. Failing to replace the placeholder
+         // could lead to issues later when the type hierarchy is introspected.
+         _typeCache.put(key, type);
+    }
\ No newline at end of file
