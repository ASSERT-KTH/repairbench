diff --git a/tmp/ba854268-d836-4d3e-9ebf-800997cfdf7b_buggy.java b/tmp/a168f35d-32e8-4a20-9640-76198c719e5a_fixed.java
index e69de29..e8ca498 100644
--- a/tmp/ba854268-d836-4d3e-9ebf-800997cfdf7b_buggy.java
+++ b/tmp/a168f35d-32e8-4a20-9640-76198c719e5a_fixed.java
@@ -0,0 +1,41 @@
+    protected SimpleType _constructSimple(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
+    {
+        // If type is already being constructed, return placeholder
+        // 19-Oct-2015, tatu: As per [databind#923], need to handle recursive types.
+        if (_typeCache.isSeen(raw)) {
+            // 14-Mar-2017, tatu: For deser, needs to handle BINDINGS for Lists/Maps...
+            //    (for other types too? For now this seems to work)
+            // 06-Apr-2017, tatu: Actually, probably HAS to be for all types?
+            return new ResolvedRecursiveType(raw, bindings);
+        }
+
+        // Not seen before: create the type, add placeholder into cache
+        ResolvedRecursiveType selfRef = new ResolvedRecursiveType(raw, bindings);
+        _typeCache.put(raw, selfRef);
+
+        // Super-class, interfaces may be null... seems like they should not be,
+        // but let's handle that just in case...
+        if (superClass == null) {
+            // should not happen for anything other than Object.class, and for that
+            // we probably don't call this method
+            superClass = _findSuperType(raw, raw, bindings);
+        }
+        JavaType[] sInterfaces = (superInterfaces == null) ?
+                _findSuperInterfaces(raw, raw, bindings) : superInterfaces;
+
+        SimpleType st = new SimpleType(raw, bindings, superClass, sInterfaces);
+        // If we have TypeHandlers/ValueHandlers for super-classes, they may be usable
+        // (through subtype-check)
+        // Needed for [#1378]: make sure TypeModifier-specified handlers are attached
+        //    asap. NOTE! Does not seem like a good place, interferes with other handlers?
+        /*
+        if (superClass != null) {
+            JavaType actual = st.refine(raw, bindings, superClass, sInterfaces);
+            if (actual != null) {
+                st = (SimpleType) actual;
+            }
+        }
+        */
+        selfRef.setReference(st);
+        return st;
+    }
\ No newline at end of file
