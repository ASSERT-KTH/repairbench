diff --git a/tmp/57cdf96b-b488-48f3-8644-90c1321aa8a7_buggy.java b/tmp/051e92bf-ab35-4e71-8235-6e3263539e9c_fixed.java
index e69de29..a9259c1 100644
--- a/tmp/57cdf96b-b488-48f3-8644-90c1321aa8a7_buggy.java
+++ b/tmp/051e92bf-ab35-4e71-8235-6e3263539e9c_fixed.java
@@ -0,0 +1,106 @@
+    protected JavaType _fromClass(TypeResolutionContext ctxt, Class<?> clz, TypeBindings bindings)
+    {
+        // Should not be called for primitives, but better safe than sorry...
+        if (clz == String.class) { return SimpleType.constructUnsafe(String.class); }
+        if (clz == Object.class) { return TypeFactory.CORE_TYPE_OBJECT; }
+        // This is apparently needed for some edge cases, so:
+        if (clz == Void.class || clz == void.class) { return TypeFactory.CORE_TYPE_VOID; }
+
+        // Ok: no easy shortcut, let's figure out type hierarchy etc.
+        // First: check main cache; if found, we are fine
+        JavaType type = _findCachedType(clz);
+        if (type != null) {
+            return type;
+        }
+
+        // 18-May-2016, tatu: If context is null, need to create; otherwise
+        //   we only need to check against recursive refs from this context
+        if (ctxt == null) {
+            ctxt = new TypeResolutionContext(this);
+        } else {
+            ResolvedRecursiveType selfRef = ctxt.findObjectType(clz);
+            if (selfRef != null) {
+                return selfRef;
+            }
+        }
+
+        // preliminary type definition, used for resolving recursive definitions
+        ResolvedRecursiveType placeholder = new ResolvedRecursiveType(clz, bindings);
+        ctxt.addObjectType(clz, placeholder);
+
+        // Super-class, interfaces
+        JavaType resolvedSuperClass = null;
+        List<JavaType> resolvedSuperInterfaces = Collections.emptyList();
+
+        // Some types managed by core handler; others via introspection
+        if (clz.isArray()) {
+            type = ArrayType.construct(_fromAny(ctxt, clz.getComponentType(), bindings), bindings);
+        } else if (clz.isEnum()) {
+            type = EnumType.construct(clz, bindings);
+        } else if (Map.class.isAssignableFrom(clz)) {
+            resolvedSuperInterfaces = _resolveSuperInterfaces(ctxt, clz, bindings); // needed early to find key/value types
+            // We may already know key/value types
+            JavaType keyType = CORE_TYPE_OBJECT;
+            JavaType valueType = CORE_TYPE_OBJECT;
+            // via Map interface?
+            for (JavaType t : resolvedSuperInterfaces) {
+                if (Map.class == t.getRawClass()) {
+                    keyType = t.containedType(0);
+                    valueType = t.containedType(1);
+                    break;
+                }
+            }
+            type = MapType.construct(clz, bindings, null, resolvedSuperInterfaces, keyType, valueType);
+        } else if (Collection.class.isAssignableFrom(clz)) {
+             resolvedSuperInterfaces = _resolveSuperInterfaces(ctxt, clz, bindings); // needed early to find element type
+            JavaType elemType = CORE_TYPE_OBJECT;
+             // via Collection interface?
+            for (JavaType t : resolvedSuperInterfaces) {
+                if (Collection.class == t.getRawClass()) {
+                     elemType = t.containedType(0);
+                    break;
+                }
+            }
+            type = CollectionType.construct(clz, bindings, null, resolvedSuperInterfaces, elemType);
+        } else {
+            resolvedSuperClass = _resolveSuperClass(ctxt, clz, bindings);
+            resolvedSuperInterfaces = _resolveSuperInterfaces(ctxt, clz, bindings);
+            type = new SimpleType(clz, bindings, resolvedSuperClass, resolvedSuperInterfaces);
+        }
+
+        // possibly apply SimpleType refinements?
+        if (type.isSimpleType()) {
+            // May need refinement for nominal types, related to [databind#193]
+            // (no need to check for Collection/Map/Array/Enum)
+            // 18-May-2016, tatu: Not sure if this is needed but... maybe?
+             ((SimpleType) type).setSuperClass(resolvedSuperClass);
+             ((SimpleType) type).setInterfaces(resolvedSuperInterfaces);
+        }
+
+        // Important: MUST resolve placeholder AFTER we are done with supertypes
+        placeholder.setReference(type);
+
+        // Handle self-references within constructed type; mostly relevant for Collections, Maps
+        _resolveSelfReferences(ctxt, type);
+
+        // Finally: any type modifiers?
+        if (_modifiers != null) {
+            TypeBindings b = type.getBindings();
+            if (b == null) {
+                b = TypeBindings.emptyBindings();
+            }
+            for (TypeModifier mod : _modifiers) {
+                JavaType t = mod.modifyType(type, ctxt.getType(), b, this);
+                if (t == null) {
+                    throw new IllegalStateException(String.format(
+                            "TypeModifier %s returned null for type %s", mod.getClass().getName(), type));
+                }
+                type = t;
+            }
+        }
+
+        // We are done with resolving this type, safe to add to cache
+        _addCachedType(clz, type);
+
+        return type;
+    }
\ No newline at end of file
