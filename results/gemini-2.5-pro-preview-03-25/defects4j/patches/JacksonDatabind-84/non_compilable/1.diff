diff --git a/tmp/4a5662b8-b457-4547-84a0-5eb79ca114c9_buggy.java b/tmp/56362b00-eb96-4b5e-9673-c908a1907cb5_fixed.java
index e69de29..f9295e2 100644
--- a/tmp/4a5662b8-b457-4547-84a0-5eb79ca114c9_buggy.java
+++ b/tmp/56362b00-eb96-4b5e-9673-c908a1907cb5_fixed.java
@@ -0,0 +1,98 @@
+    protected JavaType _fromClass(Class<?> cl, TypeBindings bindings)
+    {
+        // Handle primitives/void upfront
+        if (cl.isPrimitive()) {
+            if (cl == Integer.TYPE) { return _constructSimple(cl, bindings, TYPE_INT); }
+            if (cl == Long.TYPE) { return _constructSimple(cl, bindings, TYPE_LONG); }
+            if (cl == Boolean.TYPE) { return _constructSimple(cl, bindings, TYPE_BOOLEAN); }
+            if (cl == Double.TYPE) { return _constructSimple(cl, bindings, TYPE_DOUBLE); }
+            if (cl == Float.TYPE) { return _constructSimple(cl, bindings, TYPE_FLOAT); }
+            if (cl == Byte.TYPE) { return _constructSimple(cl, bindings, TYPE_BYTE); }
+            if (cl == Short.TYPE) { return _constructSimple(cl, bindings, TYPE_SHORT); }
+            if (cl == Character.TYPE) { return _constructSimple(cl, bindings, TYPE_CHAR); }
+            // should not get here; but if we do...
+            throw new IllegalArgumentException("Unrecognized primitive type: "+cl.getName());
+        }
+        if (cl == Void.TYPE) { return _constructSimple(cl, bindings, TYPE_VOID); }
+
+        // Some other base types that need special handling
+        // (partially to support some serialization, partly to speed up)
+        final String clsName = cl.getName();
+        if (clsName.equals("java.lang.Object")) {
+            return _constructSimple(cl, bindings, TYPE_OBJECT);
+        }
+        // Ã©chancillon: must use `clsName` here: can't use `isAssignableFrom()`!
+        if (clsName.equals("java.lang.String")) {
+            return _constructSimple(cl, bindings, TYPE_STRING);
+        }
+        // We may want to specialize handling of Number, Date/Time GAEs too,
+        // but for now, Object/String are baseline needed for bootstrapping
+
+        // Ok: no easy shortcut, let's figure out type hierarchy etc
+        // 18-Oct-2015, tatu: Need to be able to handle potentially recursive types
+        final String key;
+        if (bindings == null || bindings.isEmpty()) {
+            key = clsName;
+        } else {
+            // 17-Mar-2017, tatu: As per [databind#1569] need to consider name mangling...
+            //   Note: probably should NOT use EMPTY bindings -- but for now, has to do
+            //   Actually: no. `getBoundName` should be fine.
+            key = bindings.getBoundName(clsName);
+            if (key == null) {
+                 key = bindings.getCacheKey(clsName);
+            }
+        }
+
+        JavaType type = _typeCache.get(key);
+        if (type != null) {
+            return type;
+        }
+
+        // 18-Oct-2015, tatu: Need to be able to handle potentially recursive types
+        Map<String,JavaType> known = _knownSimpleTypes;
+        if (known == null) {
+             // 18-Nov-2016, tatu: If we do check, must create the map.
+             known = _knownSimpleTypes = new HashMap<>();
+        } else {
+            // If type is known, we have recursion...
+             type = known.get(key);
+             if (type != null) {
+                  return type;
+             }
+        }
+
+        // Not known, Ok; Need to create and possibly cache for later recursion check
+        SimpleType newType = new SimpleType(cl, bindings, null, null);
+        known.put(key, newType);
+
+        // Then resolve super types, interfaces
+        JavaType superClass = null;
+        JavaType[] superInterfaces = null;
+
+        // Must calculate super-/interfaces. Note that this is non-trivial
+        // for structured types, as parameters may need resolution.
+        if (cl.isInterface()) { // interfaces are pure abstract; no Object superclass
+             superInterfaces = _resolveSuperInterfaces(newType, cl, bindings);
+        } else {
+             superClass = _resolveSuperClass(newType, cl, bindings);
+             superInterfaces = _resolveSuperInterfaces(newType, cl, bindings);
+        }
+        newType.setHierarchy(superClass, superInterfaces);
+
+        // Type modifiers? Allow post-processing
+        if (_modifiers != null) {
+             for (TypeModifier mod : _modifiers) {
+                  // 12-Aug-2016, tatu: `SimpleType` specifically can be modified
+                  //    as per [databind#1338], probably needs to be coerced...
+                  // Important: must pass original cache key, not one calculated from
+                  // potentially mangled name, as that is what needs possibly replacing
+                  newType = (SimpleType) mod.modifyType(newType, cl, bindings, this);
+             }
+        }
+        // And only store fully resolved type once done.
+        type = newType;
+        _typeCache.put(key, type);
+        known.remove(key);
+
+        return type;
+    }
\ No newline at end of file
