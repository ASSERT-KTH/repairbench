diff --git a/tmp/4a055ba2-a054-416d-af6d-b772223c5464_buggy.java b/tmp/5228007b-58ce-4c38-aac2-d2f0b18a0f00_fixed.java
index e69de29..5dcc7a5 100644
--- a/tmp/4a055ba2-a054-416d-af6d-b772223c5464_buggy.java
+++ b/tmp/5228007b-58ce-4c38-aac2-d2f0b18a0f00_fixed.java
@@ -0,0 +1,78 @@
+    protected JavaType _fromClass(Class<?> cl, TypeBindings bindings)
+    {
+        // 1. Check primary cache first (usually cheapest)
+        JavaType type = _findCachedType(cl);
+        if (type != null) {
+            // 16-Feb-2017, tatu: Important: MUST create new instance, if bindings change...
+            //   ... so that different bindings are not mixed...
+            if ((bindings != null) && !bindings.isEmpty()) {
+                if (!bindings.equals(type.getBindings())) {
+                    // 16-Feb-2017, tatu: ... except, is this actually safe? Seems dubious. Need
+                    //   to reconsider. For now, try reverting.
+                    type = type.withBindings(bindings);
+                }
+            }
+            return type;
+        }
+
+        // 2. Ok: no match in primary cache, resolve. But first: maybe placeholder?
+        // 16-Feb-2017, tatu: Must handle recursive types -- detect, placeholder:
+        // 26-Aug-2017, tatu: Ok, check THIS way: if type currently being resolved, return.
+        ResolvedRecursiveType currentlyResolving = _findIncomplete(cl);
+        if (currentlyResolving != null) {
+            return currentlyResolving;
+        }
+
+        // 3. Nope: need to construct an instance... but register placeholder first
+        ResolvedRecursiveType selfRef = new ResolvedRecursiveType(cl, bindings);
+        _incompleteTypes.put(cl, selfRef);
+
+        // 4. And then resolve hierarchy (super-class, super-interfaces)
+        //    Note: includes resolving TypeVariable for hierarchic types (but not for Class!)
+        // !!! FIX: Resolve hierarchy BEFORE constructing the actual type object !!!
+        final JavaType resolvedSuperClass = _resolveSuperClass(cl, bindings);
+        final JavaType[] resolvedSuperInterfaces = _resolveSuperInterfaces(cl, bindings);
+
+        // 5. And after resolving hierarchy, see if we were perhaps modifying the type?
+        JavaType resultType = null;
+        if (_modifiers != null && !_modifiers.isEmpty()) {
+             // 30-Aug-2017, tatu: NOTE! Need to pass `selfRef` as place-holder, NOT
+             //    resolved `superClass` or `superInterfaces`, as those may be incorrect
+             //    due to modifiers. They will be resolved later on by `setReference`.
+            JavaType typeToModify = selfRef; // Start with placeholder itself
+            for (TypeModifier mod : _modifiers) {
+                 JavaType modified = mod.modifyType(typeToModify, cl, bindings, this);
+                 if (modified == null) { // problem
+                     throw new IllegalStateException(String.format(
+                             "TypeModifier %s returned null for type %s", mod.getClass().getName(), typeToModify));
+                 }
+                 resultType = modified;
+                 typeToModify = resultType; // use result for next modifier
+            }
+        }
+
+        // 6. If type not modified, create the default SimpleType instance:
+        if (resultType == null) {
+            // Pass resolved hierarchy here
+            resultType = _newSimpleType(cl, bindings, resolvedSuperClass, resolvedSuperInterfaces);
+        }
+
+        // 7. Finally: resolve self-reference BEFORE caching; needed for cyclic deps
+        selfRef.setReference(resultType);
+
+        // 8. And ensure super-type information is set correctly, especially needed if
+        //    type was modified (but possibly also otherwise, for robustness)
+        //    Super-types are set directly on SimpleType; other types should be fine without?
+        //    (note: was missing from fix for [databind#1708] added in 2.9.1)
+        if (resultType instanceof SimpleType) {
+            ((SimpleType) resultType)._addSuperClass(resolvedSuperClass, resolvedSuperInterfaces);
+        }
+
+        // 9. Caching: Add to primary cache AND remove from incomplete list
+        //    (must do in this order)
+        _addCached(cl, resultType);
+        // We are done with resolving this type, remove from placeholder map
+        _incompleteTypes.remove(cl);
+
+        return resultType;
+    }
\ No newline at end of file
