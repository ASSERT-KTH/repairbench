diff --git a/tmp/6cb88660-95d8-48b9-bf8d-0675fad0c81e_buggy.java b/tmp/d9f26c78-dc31-4460-9d15-5194d10ce14f_fixed.java
index 1a63a66..3c67877 100644
--- a/tmp/6cb88660-95d8-48b9-bf8d-0675fad0c81e_buggy.java
+++ b/tmp/d9f26c78-dc31-4460-9d15-5194d10ce14f_fixed.java
@@ -1,21 +1,42 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        
+        // Ensure we delegate to TypeFactory to get canonical instance
+        JavaType subtype = TypeFactory.defaultInstance().constructType(subclass, _bindings);
+
+        // Ok, but let's see if we need to create new instance... generally
+        // only if handlers or static-typing flag differs
+        Object currentVH = this.getValueHandler();
+        Object currentTH = this.getTypeHandler();
+        boolean currentStatic = this.isAnchorType(); // _asStatic
+
+        // Anything inherited?
+        if ((currentVH == subtype.getValueHandler())
+                && (currentTH == subtype.getTypeHandler())
+                && (currentStatic == subtype.isAnchorType())) { // isAnchorType() is getter for _asStatic
+             return subtype;
+        }
+        
+        // If not, need to create new instance that has all handlers and typing
+        // NOTE: since 2.7, this happens much less often due to TypeFactory change
+        // to create "shared" instances (see TypeFactory._fromClass())
+        
+        JavaType result = subtype;
+        if (currentVH != null) {
+            result = result.withValueHandler(currentVH);
+        }
+        if (currentTH != null) {
+            result = result.withTypeHandler(currentTH);
+        }
+        // 17-Jan-2018, tatu: Important! `withStaticTyping` only returns new instance
+        //   if value changes.
+        if (currentStatic) {
+            result = result.withStaticTyping();
+        }
+        return result;
     }
