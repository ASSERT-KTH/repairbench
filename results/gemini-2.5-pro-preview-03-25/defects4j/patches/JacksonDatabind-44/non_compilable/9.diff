diff --git a/tmp/39c06115-73c7-4d66-9e79-c2c9e5395b5b_buggy.java b/tmp/186e6317-b89b-4c8f-b7b9-13194fa8bae4_fixed.java
index 1a63a66..be5fc60 100644
--- a/tmp/39c06115-73c7-4d66-9e79-c2c9e5395b5b_buggy.java
+++ b/tmp/186e6317-b89b-4c8f-b7b9-13194fa8bae4_fixed.java
@@ -1,21 +1,45 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
+        // Can not narrow down further than Collections.emptyList() etc
         if (_class == subclass) {
             return this;
         }
+
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
         /*
+        if (!_class.isAssignableFrom(subclass)) {
              throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
+        }
         */
+
+        // NOTE: Internally, this method is only called when refinancing Collection/Map
+        // types when they are being specialized. And it's only needed because
+        // CollectionType/MapType do not have variant that takes super-class/super-interfaces.
+        // Ideally this method would not be needed, but for now it is.
+
+        // 19-Feb-2017, tatu: By default, must NOT specify super-class/interfaces, as
+        //    resolution latter on MUST be able to determine true super-type. This seems
+        //    to be the root cause of [#1125], [#1406]
+        //  (except, should we consider specifying 'this' as supertype?)
+        //
+        // 26-May-2019, tatu: As per [databind#2345], need to be careful to NOT pass binding
+        //   information, if relationship is not direct sub-classing. Although unfortunately
+        //   can not really check that reliably. But let's try this: if `this` type has
+        //   no bindings, OR subclass is annotation/interface, assume bindings not needed.
+        if (this.hasBindings() && !subclass.isInterface() && !subclass.isAnnotation()) {
+            // 18-Mar-2021, tatu: As per [databind#3084], need to be careful to retain super-type linkage
+            //    as well; otherwise subtype has no knowledge of super type implementation constraints
             return new SimpleType(subclass, _bindings, this, _superInterfaces,
                     _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        }
+
+        // Otherwise, assume no bindings are needed / super-class/interfaces will be re-resolved
+        return new SimpleType(subclass, TypeBindings.emptyBindings(), null, null,
+                _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
