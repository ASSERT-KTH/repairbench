diff --git a/tmp/923bffda-68d6-44b9-9ddb-40924736d77a_buggy.java b/tmp/5b177c41-47a9-4485-91f7-44313e05cd19_fixed.java
index 1a63a66..c40c0ea 100644
--- a/tmp/923bffda-68d6-44b9-9ddb-40924736d77a_buggy.java
+++ b/tmp/5b177c41-47a9-4485-91f7-44313e05cd19_fixed.java
@@ -1,21 +1,44 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
+        // This method is deprecated and was removed in Jackson 2.8.
+        // The original implementation manually created a new SimpleType,
+        // which likely caused issues with hierarchy resolution, leading to
+        // problems like unrecognized properties during deserialization (Issue #1125).
+        // The correct way to create a specialized type is through the TypeFactory.
+
         if (_class == subclass) {
             return this;
         }
+
+        // Delegate to TypeFactory to ensure correct construction, including
+        // hierarchy resolution, type bindings, caching, and handler propagation.
+        // TypeFactory.constructSpecializedType handles the relationship checks
+        // and correctly builds the specialized type.
+        // NOTE: Using defaultInstance() assumes no context-specific TypeFactory
+        // configuration is needed here. This might be an approximation if this
+        // method were called from a context with a custom TypeFactory. However,
+        // given the method's deprecation and removal, this is the most robust fix
+        // within the method's confines.
+        // Null checks for handlers are unnecessary as constructSpecializedType copies them.
+        // The _asStatic flag is also implicitly handled by the factory methods.
+        return com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()
+                .constructSpecializedType(this, subclass);
+
+        /* Original buggy code:
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
             /*
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
                     * /
+            // This manual construction likely uses incorrect hierarchy information
+            // (passing 'this' as superclass, and superclass's interfaces/bindings),
+            // leading to deserialization issues like unrecognized properties.
             return new SimpleType(subclass, _bindings, this, _superInterfaces,
                     _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        */
     }
\ No newline at end of file
