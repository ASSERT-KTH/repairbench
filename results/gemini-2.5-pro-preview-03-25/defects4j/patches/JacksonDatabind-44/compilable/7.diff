diff --git a/tmp/94e292e8-1e46-4a13-8e8c-1d575f4f0d3f_buggy.java b/tmp/f353a35b-8ca4-4d89-888f-251ed1bc87b4_fixed.java
index 1a63a66..a0e4682 100644
--- a/tmp/94e292e8-1e46-4a13-8e8c-1d575f4f0d3f_buggy.java
+++ b/tmp/f353a35b-8ca4-4d89-888f-251ed1bc87b4_fixed.java
@@ -1,21 +1,30 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
+        // Should not be called on final classes, but just in case...
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
+
+        // 18-Nov-2017, tatu: As per [databind#1833] need to ensure that we don't accidentally
+        //   produce "more generic" type -- for now, let's require exact match:
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
+        // TODO: fix in 2.8 / 2.9? Or maybe 3.0? Requires thorough verification
+        //if (!_class.isAssignableFrom(subclass)) {
             /*
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
                     */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
+        //}
+
+        // Let's NOT try to statically determine hierarchy; should be dynamic
+        // (SimpleType does note cache much)
+        // And return new instance that does have correct handler overrides
+        // 25-Mar-2017, tatu: As per [databind#1125], need to be careful; specifically,
+        //    re-constructing type hierarchy every time seems necessary.
+        return new SimpleType(subclass, _bindings,
+                 null, null,
                 _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
     }
