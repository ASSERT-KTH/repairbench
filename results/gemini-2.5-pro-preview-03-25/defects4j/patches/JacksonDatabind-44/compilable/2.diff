diff --git a/tmp/1685c041-3e16-4f8b-93d7-61d6a4f79aaf_buggy.java b/tmp/1de8a287-698e-4925-b6af-a82e1484697a_fixed.java
index 1a63a66..59a145a 100644
--- a/tmp/1685c041-3e16-4f8b-93d7-61d6a4f79aaf_buggy.java
+++ b/tmp/1de8a287-698e-4925-b6af-a82e1484697a_fixed.java
@@ -1,21 +1,47 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
+        // Note: Method already deprecated in source
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
+        // Existing comments explaining why sub-class check is tricky
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
             /*
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
                     */
+
+        // Fix inspired by Jackson 2.8.x handling for non-generic types:
+        // If the current type has no type bindings (is not generic, or bindings already resolved),
+        // create the narrowed type differently. This addresses issues where the simple propagation
+        // of 'this' as superclass led to incorrect type information for introspection.
+        if (_bindings == null || _bindings.isEmpty()) {
+            // Create the new SimpleType for the subclass:
+            // - Use the specific subclass.
+            // - Use empty TypeBindings as the base type was not generic.
+            // - Pass null for the superclass JavaType. This avoids propagating potentially
+            //   incorrect hierarchy information from 'this'. Downstream code (like
+            //   introspector) might fall back to reflection on the raw class when needed.
+            // - Propagate _superInterfaces (consistent with 2.8.x simple case approach).
+            // - Propagate handlers and static flag.
+            return new SimpleType(subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings(),
+                    null, _superInterfaces,
+                    _valueHandler, _typeHandler, _asStatic);
+        } else {
+            // If the current type *does* have bindings (generic type), fall back to the
+            // original behavior. This case might still be buggy, as proper narrowing
+            // of generic types requires more complex hierarchy resolution (as done in Jackson 2.8+).
+            // However, this retains the previous behavior for the generic case.
             return new SimpleType(subclass, _bindings, this, _superInterfaces,
                     _valueHandler, _typeHandler, _asStatic);
+        }
+        // The original code was effectively just the 'else' block logic applied unconditionally.
+        // Leftover comments from original:
         // Otherwise, stitch together the hierarchy. First, super-class
         // if not found, try a super-interface
         // should not get here but...
     }
