diff --git a/tmp/ea80b04f-c3d2-4101-acd5-524b0030bf00_buggy.java b/tmp/224f5839-da4c-4632-bcd8-34b2c686033e_fixed.java
index ae9ef3f..2f64bce 100644
--- a/tmp/ea80b04f-c3d2-4101-acd5-524b0030bf00_buggy.java
+++ b/tmp/224f5839-da4c-4632-bcd8-34b2c686033e_fixed.java
@@ -1,158 +1,169 @@
   /**
    * Parses the externs and main inputs.
    *
    * @return A synthetic root node whose two children are the externs root
    *     and the main root
    */
   Node parseInputs() {
     boolean devMode = options.devMode != DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
     if (externsRoot != null) {
       externsRoot.detachChildren();
     }
     if (jsRoot != null) {
       jsRoot.detachChildren();
     }
 
     // Parse main js sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
 
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
 
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
 
     if (options.tracer.isOn()) {
       tracker = new PerformanceTracker(jsRoot, options.tracer);
       addChangeHandler(tracker.getCodeChangeHandler());
     }
 
     Tracer tracer = newTracer("parseInputs");
 
     try {
       // Parse externs sources.
       for (CompilerInput input : externs) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
+          reportCodeChange();
           return null;
         }
         externsRoot.addChildToBack(n);
       }
 
       // Modules inferred in ProcessCommonJS pass.
       if (options.transformAMDToCJSModules || options.processCommonJSModules) {
         processAMDAndCommonJSModules();
       }
 
       // Check if inputs need to be rebuilt from modules.
       boolean staleInputs = false;
 
       // Check if the sources need to be re-ordered.
+      // This should happen even in WHITESPACE_ONLY mode if dependency management
+      // is requested. It shouldn't depend on the closurePass flag.
       if (options.dependencyOptions.needsManagement() &&
-          !options.skipAllPasses &&
-          options.closurePass) {
+          !options.skipAllPasses) {
         for (CompilerInput input : inputs) {
           // Forward-declare all the provided types, so that they
           // are not flagged even if they are dropped from the process.
+          // TODO(nicksantos): Use the registry for this. Once we do,
+          // we may be able to get rid of buildKnownSymbolTable.
           for (String provide : input.getProvides()) {
             getTypeRegistry().forwardDeclareType(provide);
           }
         }
 
         try {
           inputs =
               (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
               .manageDependencies(options.dependencyOptions, inputs);
           staleInputs = true;
         } catch (CircularDependencyException e) {
           report(JSError.make(
               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
+            reportCodeChange();
             return null;
           }
         } catch (MissingProvideException e) {
           report(JSError.make(
               MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
+            reportCodeChange();
             return null;
           }
         }
       }
 
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
 
         // Inputs can have a null AST during initial parse.
         if (n == null) {
           continue;
         }
 
-        if (n.getJSDocInfo() != null) {
+        // Check for @externs directive.
         JSDocInfo info = n.getJSDocInfo();
-          if (info.isExterns()) {
+        if (info != null && info.isExterns()) {
           // If the input file is explicitly marked as an externs file, then
           // assume the programmer made a mistake and throw it into
           // the externs pile anyways.
+          if (!externs.contains(input)) {
              externsRoot.addChildToBack(n);
              input.setIsExtern(true);
 
+             // This is conceptually weird, but we don't want to double-count.
+             // The module graph will be null in this case.
+             if (input.getModule() != null) {
                input.getModule().remove(input);
+             }
 
              externs.add(input);
              staleInputs = true;
-          } else if (info.isNoCompile()) {
+           }
+        } else if (info != null && info.isNoCompile()) {
+          if (input.getModule() != null) {
             input.getModule().remove(input);
             staleInputs = true;
           }
         }
       }
 
       if (staleInputs) {
         fillEmptyModules(modules);
         rebuildInputsFromModules();
       }
 
       // Build the AST.
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
         if (n == null) {
           continue;
         }
 
         if (devMode) {
           runSanityCheck();
           if (hasErrors()) {
+            reportCodeChange();
             return null;
           }
         }
 
+        // Optionally annotate the AST with source information.
         if (options.sourceMapOutputPath != null ||
             options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
           SourceInformationAnnotator sia =
               new SourceInformationAnnotator(
                   input.getName(), options.devMode != DevMode.OFF);
           NodeTraversal.traverse(this, n, sia);
         }
 
         jsRoot.addChildToBack(n);
       }
 
       if (hasErrors()) {
+        reportCodeChange();
         return null;
       }
+
+      reportCodeChange();
       return externAndJsRoot;
     } finally {
       stopTracer(tracer, "parseInputs");
     }
   }
\ No newline at end of file
