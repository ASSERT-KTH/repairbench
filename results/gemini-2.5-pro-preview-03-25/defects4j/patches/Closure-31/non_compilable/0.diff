diff --git a/tmp/49b4f843-4990-4a5b-899d-04e8f099a63a_buggy.java b/tmp/7a559d00-0098-4b9b-b93e-27525b7e79e3_fixed.java
index ae9ef3f..f4add35 100644
--- a/tmp/49b4f843-4990-4a5b-899d-04e8f099a63a_buggy.java
+++ b/tmp/7a559d00-0098-4b9b-b93e-27525b7e79e3_fixed.java
@@ -1,158 +1,179 @@
   /**
    * Parses the externs and main inputs.
    *
    * @return A synthetic root node whose two children are the externs root
    *     and the main root
    */
   Node parseInputs() {
     boolean devMode = options.devMode != DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
     if (externsRoot != null) {
       externsRoot.detachChildren();
     }
     if (jsRoot != null) {
       jsRoot.detachChildren();
     }
 
     // Parse main js sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
 
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
 
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
 
     if (options.tracer.isOn()) {
       tracker = new PerformanceTracker(jsRoot, options.tracer);
       addChangeHandler(tracker.getCodeChangeHandler());
     }
 
     Tracer tracer = newTracer("parseInputs");
 
     try {
       // Parse externs sources.
       for (CompilerInput input : externs) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
           return null;
         }
         externsRoot.addChildToBack(n);
       }
 
       // Modules inferred in ProcessCommonJS pass.
       if (options.transformAMDToCJSModules || options.processCommonJSModules) {
         processAMDAndCommonJSModules();
       }
 
       // Check if inputs need to be rebuilt from modules.
       boolean staleInputs = false;
 
       // Check if the sources need to be re-ordered.
-      if (options.dependencyOptions.needsManagement() &&
-          !options.skipAllPasses &&
-          options.closurePass) {
+      // This must be done explicitly, because the process depends on
+      // ModuleMetadata to be initialized, which is done later in init()
+      // Note that it is OK to ignore this step if we're not doing any checks,
+      // because the core Compiler is robust to compilations without
+      // dependency management. The catch is that the SourceFile inputs
+      // are not necessarily in the right order, and the TypeRegistry does
+      // not have all the forward declarations it needs. Dependency management
+      // takes care of both of these things.
+      if (options.dependencyOptions.needsManagement() && !options.skipAllPasses) {
         for (CompilerInput input : inputs) {
           // Forward-declare all the provided types, so that they
           // are not flagged even if they are dropped from the process.
-          for (String provide : input.getProvides()) {
-            getTypeRegistry().forwardDeclareType(provide);
-          }
+          // Gathered from sources provided from the module graph. Forward
+          // declare here so that the compiler knows about the type even if the
+          // input is removed.
+          input.getProvides().forEach(getTypeRegistry()::forwardDeclareType);
         }
 
         try {
           inputs =
               (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
               .manageDependencies(options.dependencyOptions, inputs);
           staleInputs = true;
         } catch (CircularDependencyException e) {
           report(JSError.make(
               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
 
           // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         } catch (MissingProvideException e) {
           report(JSError.make(
               MISSING_ENTRY_ERROR, e.getMessage()));
 
           // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         }
       }
 
+
+      // --- Process File-Level Annotations ---
+      // If the file has @externs or @nocompile, these annotations should
+      // override the default assumptions. Do this even if dependency
+      // management is off. This needs to happen before
+      // `rebuildInputsFromModules` because it might change the results of that.
+      // It also needs to happen early, so that the AST is available for any
+      // checks that need it.
+      if (!options.skipAllPasses) {
         for (CompilerInput input : inputs) {
           Node n = input.getAstRoot(this);
 
           // Inputs can have a null AST during initial parse.
           if (n == null) {
             continue;
           }
 
           if (n.getJSDocInfo() != null) {
             JSDocInfo info = n.getJSDocInfo();
             if (info.isExterns()) {
               // If the input file is explicitly marked as an externs file, then
               // assume the programmer made a mistake and throw it into
               // the externs pile anyways.
               externsRoot.addChildToBack(n);
               input.setIsExtern(true);
 
+              if (input.getModule() != null) {
                 input.getModule().remove(input);
+              }
 
               externs.add(input);
               staleInputs = true;
             } else if (info.isNoCompile()) {
+              if (input.getModule() != null) {
                 input.getModule().remove(input);
+              }
               staleInputs = true;
             }
           }
         }
+      }
 
       if (staleInputs) {
         fillEmptyModules(modules);
         rebuildInputsFromModules();
       }
 
       // Build the AST.
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
         if (n == null) {
           continue;
         }
 
         if (devMode) {
           runSanityCheck();
           if (hasErrors()) {
             return null;
           }
         }
 
         if (options.sourceMapOutputPath != null ||
             options.nameReferenceReportPath != null) {
 
           // Annotate the nodes in the tree with information from the
           // input file. This information is used to construct the SourceMap.
           SourceInformationAnnotator sia =
               new SourceInformationAnnotator(
                   input.getName(), options.devMode != DevMode.OFF);
           NodeTraversal.traverse(this, n, sia);
         }
 
         jsRoot.addChildToBack(n);
       }
 
       if (hasErrors()) {
         return null;
       }
       return externAndJsRoot;
     } finally {
       stopTracer(tracer, "parseInputs");
     }
   }
\ No newline at end of file
