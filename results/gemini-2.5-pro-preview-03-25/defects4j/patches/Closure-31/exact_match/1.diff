diff --git a/tmp/740df0e4-ee4b-437a-92b0-6129d31d37aa_buggy.java b/tmp/69b3642d-3dd5-4df6-8fd9-db839dd4ac63_fixed.java
index ae9ef3f..8e7ca9b 100644
--- a/tmp/740df0e4-ee4b-437a-92b0-6129d31d37aa_buggy.java
+++ b/tmp/69b3642d-3dd5-4df6-8fd9-db839dd4ac63_fixed.java
@@ -1,158 +1,170 @@
   /**
    * Parses the externs and main inputs.
    *
    * @return A synthetic root node whose two children are the externs root
    *     and the main root
    */
   Node parseInputs() {
     boolean devMode = options.devMode != DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
     if (externsRoot != null) {
       externsRoot.detachChildren();
     }
     if (jsRoot != null) {
       jsRoot.detachChildren();
     }
 
     // Parse main js sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
 
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
 
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
 
     if (options.tracer.isOn()) {
       tracker = new PerformanceTracker(jsRoot, options.tracer);
       addChangeHandler(tracker.getCodeChangeHandler());
     }
 
     Tracer tracer = newTracer("parseInputs");
 
     try {
       // Parse externs sources.
       for (CompilerInput input : externs) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
           return null;
         }
         externsRoot.addChildToBack(n);
       }
 
       // Modules inferred in ProcessCommonJS pass.
       if (options.transformAMDToCJSModules || options.processCommonJSModules) {
         processAMDAndCommonJSModules();
       }
 
       // Check if inputs need to be rebuilt from modules.
       boolean staleInputs = false;
 
       // Check if the sources need to be re-ordered.
+      // The condition '!options.skipAllPasses' prevents dependency management
+      // in WHITESPACE_ONLY mode, even if manage_closure_dependencies is true.
+      // Remove this part of the condition. Dependency management should run
+      // if requested, regardless of compilation level's pass skipping.
       if (options.dependencyOptions.needsManagement() &&
-          !options.skipAllPasses &&
           options.closurePass) {
         for (CompilerInput input : inputs) {
           // Forward-declare all the provided types, so that they
           // are not flagged even if they are dropped from the process.
           for (String provide : input.getProvides()) {
             getTypeRegistry().forwardDeclareType(provide);
           }
         }
 
         try {
           inputs =
               (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
               .manageDependencies(options.dependencyOptions, inputs);
           staleInputs = true;
         } catch (CircularDependencyException e) {
           report(JSError.make(
               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
 
           // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         } catch (MissingProvideException e) {
           report(JSError.make(
               MISSING_ENTRY_ERROR, e.getMessage()));
 
           // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         }
       }
 
+      // Check for inputs improperly marked @externs or @nocompile after
+      // potential dependency sorting.
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
 
         // Inputs can have a null AST during initial parse.
         if (n == null) {
           continue;
         }
 
         if (n.getJSDocInfo() != null) {
           JSDocInfo info = n.getJSDocInfo();
           if (info.isExterns()) {
             // If the input file is explicitly marked as an externs file, then
             // assume the programmer made a mistake and throw it into
             // the externs pile anyways.
-            externsRoot.addChildToBack(n);
-            input.setIsExtern(true);
+            externsRoot.addChildToBack(n); // Move the AST node
+            input.setIsExtern(true);       // Mark the input as extern
 
+            // Remove the input from its module. This requires rebuilding the
+            // main inputs list later.
             input.getModule().remove(input);
 
-            externs.add(input);
-            staleInputs = true;
+            externs.add(input); // Add to the compiler's externs list
+            staleInputs = true; // Mark that inputs list needs rebuilding
           } else if (info.isNoCompile()) {
+            // Files marked @nocompile should be removed from the compilation.
             input.getModule().remove(input);
-            staleInputs = true;
+            staleInputs = true; // Mark that inputs list needs rebuilding
           }
         }
       }
 
+      // If dependency management occurred, or files were moved to externs
+      // or marked nocompile, then the main 'inputs' list might be
+      // inconsistent with the modules. Rebuild it.
       if (staleInputs) {
-        fillEmptyModules(modules);
-        rebuildInputsFromModules();
+        fillEmptyModules(modules); // Prevent modules from becoming empty
+        rebuildInputsFromModules(); // Update the 'inputs' list
       }
 
-      // Build the AST.
+      // Build the AST. Iterate over the potentially updated 'inputs' list.
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
-        if (n == null) {
+        if (n == null) { // Should not happen if parsing succeeded, but check.
           continue;
         }
 
+        // Sanity checks should run while the AST is built.
         if (devMode) {
           runSanityCheck();
           if (hasErrors()) {
             return null;
           }
         }
 
         if (options.sourceMapOutputPath != null ||
             options.nameReferenceReportPath != null) {
 
           // Annotate the nodes in the tree with information from the
           // input file. This information is used to construct the SourceMap.
           SourceInformationAnnotator sia =
               new SourceInformationAnnotator(
                   input.getName(), options.devMode != DevMode.OFF);
           NodeTraversal.traverse(this, n, sia);
         }
 
-        jsRoot.addChildToBack(n);
+        jsRoot.addChildToBack(n); // Add the input's AST to the main JS root
       }
 
       if (hasErrors()) {
         return null;
       }
       return externAndJsRoot;
     } finally {
       stopTracer(tracer, "parseInputs");
     }
   }
\ No newline at end of file
