diff --git a/tmp/4a7656b4-a4fe-4fbc-9496-ddc09f21c0ff_buggy.java b/tmp/a1d0ecdf-0ab0-49f5-944b-8f73b9bddaee_fixed.java
index a7d0787..03554e2 100644
--- a/tmp/4a7656b4-a4fe-4fbc-9496-ddc09f21c0ff_buggy.java
+++ b/tmp/a1d0ecdf-0ab0-49f5-944b-8f73b9bddaee_fixed.java
@@ -1,54 +1,81 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            // Handle types not explicitly listed above by trying to find and use a String constructor.
+            try
+            {
+                // Find the constructor accepting a single String argument.
+                java.lang.reflect.Constructor<T> constructor = clazz.getConstructor(String.class);
+                // Invoke the constructor with the input string.
+                return constructor.newInstance(str);
+            }
+            catch (NoSuchMethodException e)
+            {
+                // The class doesn't have a Constructor(String).
+                // Indicate that this type cannot be handled via String conversion.
+                // Note: Returning null might be an alternative, but throwing seems more consistent
+                // with the method's contract (throws ParseException if creation fails).
+                throw new ParseException("Class " + clazz.getName() + " does not support creation from a String");
+            }
+            catch (Exception e)
+            {
+                // Handle exceptions during constructor invocation (e.g., NumberFormatException, SecurityException).
+                // If it's an InvocationTargetException, get the underlying cause for a clearer message.
+                Throwable cause = e;
+                if (e instanceof java.lang.reflect.InvocationTargetException && e.getCause() != null)
+                {
+                    cause = e.getCause();
+                }
+                // Wrap the underlying exception in a ParseException.
+                throw new ParseException("Unable to create an instance of " + clazz.getName() + " from '" + str + "': " + cause.getMessage());
+            }
         }
     }
\ No newline at end of file
