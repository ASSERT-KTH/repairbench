diff --git a/tmp/dd3385a2-a458-494e-ad73-d24b6af56157_buggy.java b/tmp/2ae98c54-dfda-4cf6-a1f0-6591b9b32497_fixed.java
index a7d0787..6033634 100644
--- a/tmp/dd3385a2-a458-494e-ad73-d24b6af56157_buggy.java
+++ b/tmp/2ae98c54-dfda-4cf6-a1f0-6591b9b32497_fixed.java
@@ -1,54 +1,90 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
+     * @param <T> The type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        // Handle Integer class specifically
+        else if (Integer.class == clazz) {
+             try {
+                 return (T) Integer.valueOf(str);
+             } catch (NumberFormatException e) {
+                 throw new ParseException("Unable to parse '" + str + "' as an Integer.");
+             }
+        }
+        // Handle Long class specifically (optional but good practice)
+        else if (Long.class == clazz) {
+             try {
+                 return (T) Long.valueOf(str);
+             } catch (NumberFormatException e) {
+                 throw new ParseException("Unable to parse '" + str + "' as a Long.");
+             }
+        }
+        // Handle Float class specifically (optional but good practice)
+        else if (Float.class == clazz) {
+             try {
+                 return (T) Float.valueOf(str);
+             } catch (NumberFormatException e) {
+                 throw new ParseException("Unable to parse '" + str + "' as a Float.");
+             }
+        }
+        // Handle Double class specifically (optional but good practice)
+         else if (Double.class == clazz) {
+             try {
+                 return (T) Double.valueOf(str);
+             } catch (NumberFormatException e) {
+                 throw new ParseException("Unable to parse '" + str + "' as a Double.");
+             }
+        }
         else
         {
-            return null;
+            // Throw exception for unsupported types instead of returning null
+            // This ensures that if a type is not explicitly handled and conversion fails or is not possible,
+            // a ParseException is thrown as per the method contract.
+             throw new ParseException("Unable to handle the class: " + clazz.getName());
         }
     }
\ No newline at end of file
