diff --git a/tmp/cd3fb9cb-3827-4fc7-b8f8-facd012f5fb4_buggy.java b/tmp/c4888071-e008-4396-8d10-cbd3f751a089_fixed.java
index a7d0787..ccf190b 100644
--- a/tmp/cd3fb9cb-3827-4fc7-b8f8-facd012f5fb4_buggy.java
+++ b/tmp/c4888071-e008-4396-8d10-cbd3f751a089_fixed.java
@@ -1,54 +1,81 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        // Use isAssignableFrom to handle Number and its subclasses (Integer, Long, etc.)
+        else if (Number.class.isAssignableFrom(clazz))
         {
+            // Handle specific Number types directly to return correct type T
+            // and provide specific parsing logic / error messages.
+            try {
+                if (clazz == Long.class) {
+                    return (T) Long.valueOf(str);
+                } else if (clazz == Integer.class) {
+                    return (T) Integer.valueOf(str);
+                } else if (clazz == Short.class) {
+                    return (T) Short.valueOf(str);
+                } else if (clazz == Byte.class) {
+                    return (T) Byte.valueOf(str);
+                } else if (clazz == Float.class) {
+                    return (T) Float.valueOf(str);
+                } else if (clazz == Double.class) {
+                    return (T) Double.valueOf(str);
+                } else if (clazz == Number.class) { // Check for Number.class itself
+                    // If Number.class was explicitly requested (PatternOptionBuilder.NUMBER_VALUE)
+                    // use the generic createNumber method. May throw ParseException.
                     return (T) createNumber(str);
                 }
+                // Otherwise, clazz is some other Number subclass (e.g., BigDecimal).
+                // Fall through to the final return null for unsupported types.
+            } catch (final NumberFormatException e) {
+                 // Catch NFE from Long.valueOf, Integer.valueOf, etc. and wrap in ParseException
+                throw new ParseException("Unable to parse '" + str + "' as a " + clazz.getSimpleName());
+            }
+        }
+        // The original check for PatternOptionBuilder.NUMBER_VALUE is replaced by the block above.
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
-            return (T) createDate(str);
+            return (T) createDate(str); // May throw ParseException
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
-            return (T) createClass(str);
+            return (T) createClass(str); // May throw ParseException
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
-            return (T) createFile(str);
+            return (T) createFile(str); // Does not declare ParseException
         }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
+        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) // FileInputStream.class
         {
-            return (T) openFile(str);
+            return (T) openFile(str); // May throw ParseException
         }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
+        else if (PatternOptionBuilder.FILES_VALUE == clazz) // File[].class
         {
-            return (T) createFiles(str);
+            return (T) createFiles(str); // Does not declare ParseException
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
-            return (T) createURL(str);
+            return (T) createURL(str); // May throw ParseException
         }
-        else
-        {
+
+        // If none of the above conditions matched (e.g., unknown type, or unsupported Number subclass)
+        // return null as per the original logic's final else block.
         return null;
     }
\ No newline at end of file
-    }
