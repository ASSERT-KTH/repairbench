diff --git a/tmp/2c1efef7-8611-4a26-b15d-3d5a6c3a2eb6_buggy.java b/tmp/a64fe837-daca-4e7f-a2b6-ecf6636a7847_fixed.java
index a7d0787..3b56432 100644
--- a/tmp/2c1efef7-8611-4a26-b15d-3d5a6c3a2eb6_buggy.java
+++ b/tmp/a64fe837-daca-4e7f-a2b6-ecf6636a7847_fixed.java
@@ -1,54 +1,58 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
+     * @param <T> The type of object to create.
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            // Handle the case where the class type is not recognized.
+            // According to the method's contract and the failing test,
+            // a ParseException should be thrown.
+            throw new ParseException("Unable to handle the class: " + clazz);
         }
     }
\ No newline at end of file
