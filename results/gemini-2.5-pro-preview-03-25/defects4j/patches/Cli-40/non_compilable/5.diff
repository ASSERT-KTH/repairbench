diff --git a/tmp/fe2bdf17-9a5a-4377-8a91-a1b5cd53bf3f_buggy.java b/tmp/4652ba10-c2fb-442e-ac6a-06ed53853b59_fixed.java
index a7d0787..6d78a61 100644
--- a/tmp/fe2bdf17-9a5a-4377-8a91-a1b5cd53bf3f_buggy.java
+++ b/tmp/4652ba10-c2fb-442e-ac6a-06ed53853b59_fixed.java
@@ -1,54 +1,108 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
+            // Handles requests for the generic Number class, typically returns Long or Double
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
-        else
+        // Handle specific Number subclasses (Integer, Long, Double, Float, BigDecimal, BigInteger etc.)
+        else if (Number.class.isAssignableFrom(clazz))
         {
+            // Attempt to use the static valueOf(String) method (common for wrappers like Integer, Long)
+            try {
+                Method valueOf = clazz.getMethod("valueOf", String.class);
+                // Check if method is static, assume return type is compatible due to T and autoboxing
+                if (Modifier.isStatic(valueOf.getModifiers())) {
+                    @SuppressWarnings("unchecked") // Assume valueOf returns T or compatible
+                    T result = (T) valueOf.invoke(null, str);
+                    return result;
+                }
+                // If valueOf exists but is not static, fall through to constructor attempt
+            } catch (NoSuchMethodException e) {
+                // valueOf(String) not found, ignore and try constructor below
+            } catch (IllegalAccessException e) {
+                 // Should not happen for public static method, but treat as failure
+                 throw new ParseException("Cannot invoke valueOf on Number class: " + clazz.getName());
+            } catch (InvocationTargetException e) {
+                 // valueOf method threw an exception (e.g., NumberFormatException)
+                 Throwable cause = e.getCause();
+                 if (cause instanceof NumberFormatException) {
+                     // Specific message for number format issues
+                     throw new ParseException("Unable to parse '" + str + "' as a " + clazz.getSimpleName() + ": " + cause.getMessage());
+                 } else {
+                     // Other exceptions from valueOf
+                     throw new ParseException("Error invoking valueOf on Number class '" + clazz.getName() + "' with value '" + str + "': " + cause.getMessage());
+                 }
+            }
+
+            // Attempt to use Constructor(String) as fallback (e.g., for BigDecimal, BigInteger)
+            try {
+                Constructor<T> constructor = clazz.getConstructor(String.class);
+                return constructor.newInstance(str);
+            } catch (NoSuchMethodException e1) {
+                // No valueOf(String) or Constructor(String) found for this Number type
+                throw new ParseException("Unsupported Number type: " + clazz.getName() + " (no suitable valueOf or constructor)");
+            } catch (InstantiationException | IllegalAccessException e1) {
+                // Cannot instantiate using constructor
+                throw new ParseException("Cannot instantiate Number type: " + clazz.getName());
+            } catch (InvocationTargetException e1) {
+                // Constructor threw an exception (e.g., NumberFormatException for BigInteger/BigDecimal)
+                Throwable cause = e1.getCause();
+                 // Handle common parsing exceptions from constructors
+                 if (cause instanceof NumberFormatException || cause instanceof ArithmeticException) {
+                     throw new ParseException("Unable to parse '" + str + "' as a " + clazz.getSimpleName() + ": " + cause.getMessage());
+                 } else {
+                    // Other exceptions from constructor
+                    throw new ParseException("Constructor failed for " + clazz.getName() + ": " + cause.getMessage());
+                 }
+            }
+        }
+        else // Type not handled by PatternOptionBuilder constants or as a Number subclass
+        {
+            // Return null for unhandled types, preserving original behavior for these cases.
             return null;
         }
     }
\ No newline at end of file
