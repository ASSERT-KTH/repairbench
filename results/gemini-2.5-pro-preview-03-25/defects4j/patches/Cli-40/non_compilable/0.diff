diff --git a/tmp/f7456d28-6068-4572-930a-17212ba81559_buggy.java b/tmp/317004f6-0597-40e5-88a0-7491ac2daf2d_fixed.java
index a7d0787..e17c30b 100644
--- a/tmp/f7456d28-6068-4572-930a-17212ba81559_buggy.java
+++ b/tmp/317004f6-0597-40e5-88a0-7491ac2daf2d_fixed.java
@@ -1,54 +1,163 @@
+import java.io.File;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.net.URL;
+import java.util.Date;
+// Assume these classes are accessible from the original context
+// import org.apache.commons.cli.PatternOptionBuilder;
+// import org.apache.commons.cli.ParseException;
+
+// Define dummy classes/constants if needed for standalone compilation check
+// Remove these dummies when integrating into the actual project
+class TypeHandler_Fix { // Helper class for context, replace with actual if needed
+
+    // --- Assume these exist in the actual environment ---
+    public static class ParseException extends Exception {
+        public ParseException(String message) { super(message); }
+    }
+
+    public static class PatternOptionBuilder {
+        // Assume these constants are defined as Class objects
+        public static final Class<String> STRING_VALUE = String.class;
+        public static final Class<Object> OBJECT_VALUE = Object.class;
+        public static final Class<Number> NUMBER_VALUE = Number.class;
+        public static final Class<Date> DATE_VALUE = Date.class;
+        public static final Class<?> CLASS_VALUE = Class.class; // Using Class<?> for broader compatibility
+        public static final Class<File> FILE_VALUE = File.class;
+        // This constant might vary or be absent. Using File.class as a plausible placeholder.
+        public static final Class<?> EXISTING_FILE_VALUE = File.class;
+        public static final Class<File[]> FILES_VALUE = File[].class;
+        public static final Class<URL> URL_VALUE = URL.class;
+    }
+
+    // Assume these helper methods exist and have the specified behavior
+    public static Object createObject(String str) throws ParseException { /* ... */ return null; }
+    public static Number createNumber(String str) throws ParseException { /* ... */ return null; }
+    public static Date createDate(String str) throws ParseException { /* ... */ return null; }
+    public static Class<?> createClass(String str) throws ParseException { /* ... */ return null; }
+    public static File createFile(String str) { /* ... */ return null; }
+    public static File openFile(String str) throws ParseException { /* ... */ return null; }
+    public static File[] createFiles(String str) { /* ... */ return null; }
+    public static URL createURL(String str) throws ParseException { /* ... */ return null; }
+    // --- End of assumed existing parts ---
+
+
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
+            // createObject can throw ParseException
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
+            // Handles Number.class specifically using createNumber helper
+            // createNumber can throw ParseException
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
+            // createDate can throw ParseException
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
+            // createClass can throw ParseException
+            // The cast to (T) is generally safe here because the condition
+            // clazz == CLASS_VALUE implies T must be Class<?> or assignable from it.
              return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
+            // createFile doesn't declare throws ParseException, internal handling assumed
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
+            // openFile can throw ParseException
+            // Assuming openFile returns a type compatible with T when clazz matches
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
+             // createFiles doesn't declare throws ParseException
              return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
+            // createURL can throw ParseException
             return (T) createURL(str);
         }
+        // Handle specific Number subclasses (Integer, Double, etc.) using reflection
+        // Check if clazz is a subclass of Number, but not Number itself (already handled)
+        else if (Number.class.isAssignableFrom(clazz) && PatternOptionBuilder.NUMBER_VALUE != clazz)
+        {
+            try
+            {
+                 // Find the static valueOf(String) method (standard for Number wrappers)
+                 Method valueOfMethod = clazz.getMethod("valueOf", String.class);
+                 if (!Modifier.isStatic(valueOfMethod.getModifiers()))
+                 {
+                     // Should not happen for standard Number types like Integer, Double, etc.
+                     throw new NoSuchMethodException("valueOf(String) method is not static in " + clazz.getName());
+                 }
+
+                 // Invoke the static valueOf(String) method
+                 Object value = valueOfMethod.invoke(null, str);
+
+                 // Cast the result to the target type T (which is clazz)
+                 // clazz.cast provides runtime type safety.
+                 return clazz.cast(value);
+            }
+            catch (NoSuchMethodException e)
+            {
+                 // If valueOf(String) is not found or not static.
+                 // Could potentially fallback to Constructor<T>(String) here if needed.
+                 throw new ParseException("Cannot create instance of Number type " + clazz.getName() + ": " + e.getMessage());
+            }
+            catch (IllegalAccessException e)
+            {
+                 // Should not happen for public static valueOf methods.
+                 throw new ParseException("Cannot create instance of Number type " + clazz.getName() + ": Cannot access valueOf(String) method.");
+            }
+            catch (InvocationTargetException e)
+            {
+                 // An exception occurred inside the invoked valueOf method.
+                 Throwable cause = e.getTargetException(); // Get the underlying cause
+                 if (cause instanceof NumberFormatException)
+                 {
+                     // This is the expected failure mode for invalid number strings.
+                     throw new ParseException("Unable to parse '" + str + "' as a " + clazz.getSimpleName());
+                 }
                  else
                  {
+                     // Some other unexpected exception occurred during number creation.
+                     throw new ParseException("Error creating instance of Number type " + clazz.getName() + " from value '" + str + "': " + cause.getMessage());
+                 }
+            }
+        }
+        else // Default case for types not explicitly handled above
+        {
+            // Maintain original behavior: return null for unhandled types.
+            // The specific test case failure (Integer with invalid string causing missing ParseException)
+            // is now addressed by the Number handling block above.
             return null;
         }
     }
+} // End of helper class
\ No newline at end of file
