diff --git a/tmp/4887e3a1-f978-442e-b66a-92d7a7d70fc8_buggy.java b/tmp/87e8a6b5-d09b-412c-832f-1de7dde79109_fixed.java
index a7d0787..4817a1c 100644
--- a/tmp/4887e3a1-f978-442e-b66a-92d7a7d70fc8_buggy.java
+++ b/tmp/87e8a6b5-d09b-412c-832f-1de7dde79109_fixed.java
@@ -1,54 +1,175 @@
+import org.apache.commons.cli.ParseException;
+import org.apache.commons.cli.PatternOptionBuilder;
+
+import java.io.File;
+import java.net.URL;
+import java.util.Date;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Modifier;
+
+// Assume necessary helper methods like createObject, createNumber etc. exist elsewhere in the class.
+
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
+     * @param <T> The type of object to create
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
+    @SuppressWarnings("unchecked") // Casting is guarded by checks or inherent to T matching clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
+            // The cast is safe because T is String in this branch
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
+            // createObject returns Object; cast assumes T is Object or superclass.
+            // Note: Original behavior kept. Might be unsafe if T is more specific than Object.
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
+            // createNumber returns Number. Cast to T (Number) is safe.
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
+            // createDate returns Date. Cast to T (Date) is safe.
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
+            // createClass returns Class<?>. Cast to T (Class<?>) is safe.
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
+             // createFile returns File. Cast to T (File) is safe.
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
+             // This constant might be == FILE_VALUE. Assumes openFile performs necessary checks.
+             // openFile returns File. Cast to T (File) is safe.
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
+            // createFiles returns File[]. Cast to T (File[]) is safe.
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
+            // createURL returns URL. Cast to T (URL) is safe.
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            // Handle general types using reflection: T(String) constructor or static T valueOf(String) method
+            T result = null;
+            Exception cause = null; // Store the root cause exception from reflection attempts
+
+            // 1. Try T(String) constructor
+            try {
+                Constructor<T> constructor = clazz.getConstructor(String.class);
+                result = constructor.newInstance(str);
+            } catch (NoSuchMethodException ignored) {
+                // Constructor T(String) not found, ok to proceed to valueOf
+            } catch (Exception e) {
+                cause = e; // Store exception from constructor attempt
             }
+
+            // 2. If constructor didn't work or wasn't found, try static T valueOf(String)
+            if (result == null && cause == null) {
+                try {
+                    Method valueOfMethod = clazz.getMethod("valueOf", String.class);
+                    // Check method is static and returns assignable type
+                    if (Modifier.isStatic(valueOfMethod.getModifiers()) &&
+                        clazz.isAssignableFrom(valueOfMethod.getReturnType())) {
+
+                        Object methodResult = valueOfMethod.invoke(null, str);
+
+                        // Defensive check on result type before casting
+                        if (clazz.isInstance(methodResult)) {
+                             result = clazz.cast(methodResult);
+                        } else {
+                             // Should not happen if isAssignableFrom passed, but signals an issue
+                             cause = new ClassCastException("valueOf method for " + clazz.getName() + " returned incompatible type: " + (methodResult == null ? "null" : methodResult.getClass().getName()));
                         }
+                    } else {
+                         // Found valueOf(String) but signature is wrong (e.g., not static). Treat as 'not found'.
+                         // The final 'else' block below will throw 'method not found'.
+                    }
+                } catch (NoSuchMethodException ignored) {
+                    // Method valueOf(String) not found either.
+                } catch (Exception e) {
+                     cause = e; // Store exception from valueOf attempt
+                }
+            }
+
+            // 3. Check results and throw ParseException if conversion failed or no method found
+            if (result != null) {
+                return result; // Success
+            } else {
+                String baseMsg = "Unable to create an instance of type " + clazz.getName() + " from string '" + str + "'";
+
+                // Unwrap InvocationTargetException to get the real cause
+                if (cause instanceof InvocationTargetException) {
+                    Throwable targetException = ((InvocationTargetException) cause).getTargetException();
+                    // Update 'cause' to the actual underlying exception/error if available
+                    if (targetException instanceof Exception) {
+                        cause = (Exception) targetException;
+                    } else if (targetException instanceof Error) {
+                         // Wrap Error in a RuntimeException to fit the ParseException constructor signature
+                         cause = new RuntimeException("Underlying error: " + targetException.getMessage(), targetException);
+                    } else if (targetException != null) {
+                         // Wrap other Throwables
+                         cause = new RuntimeException("Underlying throwable: " + targetException.getMessage(), targetException);
+                    }
+                    // If targetException is null, keep original InvocationTargetException details by falling through
+                }
+
+                // Create the final ParseException with an informative message
+                if (cause instanceof NumberFormatException) {
+                    // Provide a specific message for number format issues
+                    throw new ParseException(baseMsg + ". Reason: Invalid number format.");
+                } else if (cause != null) {
+                    // Use the message from the (potentially unwrapped) cause
+                    String reason = cause.getMessage() != null ? cause.getMessage() : cause.getClass().getSimpleName();
+                    throw new ParseException(baseMsg + ". Reason: " + reason, cause);
+                } else {
+                    // If 'cause' is still null, it means neither T(String) nor static T valueOf(String) was found/suitable
+                    throw new ParseException(baseMsg + ". Reason: No suitable public constructor T(String) or static factory method T valueOf(String) found.");
+                }
+            }
+        }
+    }
+
+    // Dummy helper methods for context (actual implementation exists elsewhere in the original class)
+    private static Object createObject(String s) throws ParseException { throw new UnsupportedOperationException("Helper method not implemented in provided snippet"); }
+    private static Number createNumber(String s) throws ParseException {
+        try {
+            // Simplified implementation based on common patterns
+            if (s.contains(".")) {
+                return Double.valueOf(s);
+            }
+            return Long.valueOf(s);
+        } catch (NumberFormatException e) {
+            throw new ParseException("Unable to parse number: " + s);
+        }
+    }
+    private static Date createDate(String s) throws ParseException { throw new UnsupportedOperationException("Helper method not implemented in provided snippet"); }
+    private static Class<?> createClass(String s) throws ParseException { throw new UnsupportedOperationException("Helper method not implemented in provided snippet"); }
+    private static File createFile(String s) throws ParseException { return new File(s); } // Simple example
+    private static File openFile(String s) throws ParseException { throw new UnsupportedOperationException("Helper method not implemented in provided snippet"); }
+    private static File[] createFiles(String s) throws ParseException { throw new UnsupportedOperationException("Helper method not implemented in provided snippet"); }
+    private static URL createURL(String s) throws ParseException { throw new UnsupportedOperationException("Helper method not implemented in provided snippet"); }
