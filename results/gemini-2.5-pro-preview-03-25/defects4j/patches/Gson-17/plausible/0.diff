diff --git a/tmp/5cf90e75-2160-4498-aa33-ded7c211f5f0_buggy.java b/tmp/0e8b0677-c4ce-4333-b00a-eff5ed0bcd8b_fixed.java
index 85f5680..66c2df7 100644
--- a/tmp/5cf90e75-2160-4498-aa33-ded7c211f5f0_buggy.java
+++ b/tmp/0e8b0677-c4ce-4333-b00a-eff5ed0bcd8b_fixed.java
@@ -1,17 +1,24 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    // Handle null values
+    if (in.peek() == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     }
-    Date date = deserializeToDate(in.nextString());
+    // Expect a string value. Let nextString() throw IllegalStateException if it's not a string.
+    String dateString = in.nextString();
+    Date date = deserializeToDate(dateString); // This method should handle parse exceptions
+
+    // Convert to the specific date type required
     if (dateType == Date.class) {
       return date;
     } else if (dateType == Timestamp.class) {
       return new Timestamp(date.getTime());
     } else if (dateType == java.sql.Date.class) {
       return new java.sql.Date(date.getTime());
     } else {
       // This must never happen: dateType is guarded in the primary constructor
-      throw new AssertionError();
+      // and GSON should have selected a different adapter if another type was requested
+      throw new AssertionError("Unexpected date type: " + dateType + ". Should have been guarded either by GSON or the DefaultDateTypeAdapter constructor.");
     }
   }
\ No newline at end of file
