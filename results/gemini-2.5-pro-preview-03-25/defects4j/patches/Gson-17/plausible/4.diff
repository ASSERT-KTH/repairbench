diff --git a/tmp/7307829a-2604-4e00-806b-02c185372ba4_buggy.java b/tmp/73abdafb-40f7-44fe-a9c4-9c7cebde9e13_fixed.java
index 85f5680..28fdba6 100644
--- a/tmp/7307829a-2604-4e00-806b-02c185372ba4_buggy.java
+++ b/tmp/73abdafb-40f7-44fe-a9c4-9c7cebde9e13_fixed.java
@@ -1,17 +1,29 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    JsonToken peek = in.peek();
+    if (peek == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     }
+    if (peek != JsonToken.STRING) {
+      // The test `testUnexpectedToken` expects IllegalStateException for non-string, non-null tokens.
+      // Original code threw JsonParseException, which did not match the test expectation.
+      // Gson's standard behavior might throw JsonSyntaxException, but we align with the provided test.
+      throw new IllegalStateException("Expected STRING but was " + peek);
+    }
+    // Reads the string value and deserializes it.
     Date date = deserializeToDate(in.nextString());
+    
+    // Converts to the specific Date subtype if necessary.
     if (dateType == Date.class) {
       return date;
     } else if (dateType == Timestamp.class) {
       return new Timestamp(date.getTime());
     } else if (dateType == java.sql.Date.class) {
       return new java.sql.Date(date.getTime());
     } else {
-      // This must never happen: dateType is guarded in the primary constructor
-      throw new AssertionError();
+      // This case should be unreachable due to constructor validation.
+      // It's kept as a safeguard.
+      throw new AssertionError("Unexpected date type: " + dateType);
     }
   }
\ No newline at end of file
