diff --git a/tmp/f006a94e-54b7-48ec-a5a9-41e0a74731bf_buggy.java b/tmp/d10d3dc1-a6f4-46b6-9c1b-a3c251f59c0f_fixed.java
index 85f5680..b031f5f 100644
--- a/tmp/f006a94e-54b7-48ec-a5a9-41e0a74731bf_buggy.java
+++ b/tmp/d10d3dc1-a6f4-46b6-9c1b-a3c251f59c0f_fixed.java
@@ -1,17 +1,26 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    if (in.peek() == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     }
-    Date date = deserializeToDate(in.nextString());
+    // This potentially throws IllegalStateException if the token is not a string,
+    // which satisfies the testUnexpectedToken expectation.
+    String json = in.nextString();
+    try {
+      Date date = deserializeToDate(json);
       if (dateType == Date.class) {
         return date;
       } else if (dateType == Timestamp.class) {
         return new Timestamp(date.getTime());
       } else if (dateType == java.sql.Date.class) {
         return new java.sql.Date(date.getTime());
       } else {
         // This must never happen: dateType is guarded in the primary constructor
         throw new AssertionError();
       }
+    // Catch ParseException potentially thrown by deserializeToDate and wrap it
+    } catch (ParseException e) {
+       throw new JsonSyntaxException("Failed parsing '" + json + "' as Date; at path " + in.getPreviousPath(), e);
+    }
   }
\ No newline at end of file
