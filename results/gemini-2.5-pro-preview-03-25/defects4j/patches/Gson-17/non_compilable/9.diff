diff --git a/tmp/9fd92071-22b2-47e8-b8c0-621e354f204b_buggy.java b/tmp/47a66d74-f453-445e-bc9c-5cedeb09fcb0_fixed.java
index 85f5680..94c09b7 100644
--- a/tmp/9fd92071-22b2-47e8-b8c0-621e354f204b_buggy.java
+++ b/tmp/47a66d74-f453-445e-bc9c-5cedeb09fcb0_fixed.java
@@ -1,17 +1,32 @@
   @Override
   public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    JsonToken peek = in.peek();
+    if (peek == JsonToken.NULL) {
+      in.nextNull();
+      return null;
     }
+    // Original code threw JsonParseException. Test expects IllegalStateException for unexpected tokens.
+    if (peek != JsonToken.STRING) {
+      // Use IllegalStateException as expected by testUnexpectedToken and often used by Gson internally for type mismatches.
+      throw new IllegalStateException("Expected STRING but was " + peek + " at path " + in.getPath());
+    }
+    
+    // It's a STRING, proceed with deserialization
+    try {
       Date date = deserializeToDate(in.nextString());
       if (dateType == Date.class) {
         return date;
       } else if (dateType == Timestamp.class) {
         return new Timestamp(date.getTime());
       } else if (dateType == java.sql.Date.class) {
         return new java.sql.Date(date.getTime());
       } else {
         // This must never happen: dateType is guarded in the primary constructor
         throw new AssertionError();
       }
+    } catch (java.text.ParseException e) {
+      // deserializeToDate might throw ParseException, which should be wrapped.
+      // Gson often wraps underlying parsing errors in JsonSyntaxException.
+      throw new com.google.gson.JsonSyntaxException("Failed parsing '" + in.getPath() + "' as Date; at path " + in.getPath(), e);
+    }
   }
\ No newline at end of file
