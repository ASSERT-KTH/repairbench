diff --git a/tmp/c47bddaf-eec2-4f33-aa33-50569428e493_buggy.java b/tmp/7d189dd8-edc7-4750-acf8-f34fac4b736f_fixed.java
index cd412d2..d8c43fa 100644
--- a/tmp/c47bddaf-eec2-4f33-aa33-50569428e493_buggy.java
+++ b/tmp/7d189dd8-edc7-4750-acf8-f34fac4b736f_fixed.java
@@ -1,76 +1,248 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone modifiers for ISO-8601. So we need to do some scrubbing.
+         *    (see [JACKSON-42], [JACKSON-103], [JACKSON-200], [JACKSON-334])
+         *
+         * And possibly even more robust handling would be needed, see
+         * http://www.w3.org/TR/NOTE-datetime for more complete handling.
+         * But for now, let's try this approach.
          */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
-        int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+        final int len = dateStr.length();
         DateFormat df;
 
+        // First things first: remove optional colon from +/+MM:SS timezone indicator
+        // (parse pattern Z requires it be removed)
+        char c = dateStr.charAt(len-1);
+
         // [JACKSON-200]: need to support "plain" date...
+        // Another consideration: need to ensure format is yyyy-MM-dd
         if (len <= 10 && Character.isDigit(c)) {
              df = _formatPlain;
              if (df == null) {
                  df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
              }
+        // Zulu-formatted date?
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
+            // Let's handle possible trailing junk here? Or should we fail?
+            // For now, fail will occur if junk is found
+
+            // Additionally, need to handle missing seconds / milliseconds
+            // "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
+
+            // First: find 'T'
+            int tIndex = dateStr.lastIndexOf('T');
+            if (tIndex >= 0) {
+                // Then see if we have seconds specification
+                // 18-Oct-2014, tatu: Specs differ on this; some indicate 'T' is enough...
+                //   Let's assume it's optional. Find last colon.
+                int timeEndIdx = len-1; // Index of 'Z'
+                int dotIdx = -1;
+                int lastColonIdx = -1;
+                for (int i = tIndex + 1; i < timeEndIdx; ++i) {
+                    char ch = dateStr.charAt(i);
+                    if (ch == ':') lastColonIdx = i;
+                    else if (ch == '.') dotIdx = i;
+                }
+                StringBuilder sb = null;
+
+                if (lastColonIdx != -1) { // Ok, must have hours, minutes OR hours, minutes, seconds
+                    int secondColonIdx = -1;
+                    for (int i = tIndex + 1; i < lastColonIdx; ++i) {
+                         if (dateStr.charAt(i) == ':') secondColonIdx = i;
+                    }
+
+                    if (secondColonIdx != -1) { // We have HH:mm:ss
+                        if (dotIdx < lastColonIdx) dotIdx = -1; // dot must be after seconds
+                        if (dotIdx == -1) { // No milliseconds indicated.
+                             sb = new StringBuilder(dateStr);
+                             sb.insert(timeEndIdx, ".000");
                              dateStr = sb.toString();
+                        } else { // Milliseconds indicated
+                            int millisDigits = timeEndIdx - (dotIdx + 1);
+                            if (millisDigits < 3) {
+                                 sb = new StringBuilder(dateStr);
+                                 for (; millisDigits < 3; ++millisDigits) {
+                                     sb.insert(timeEndIdx, '0');
+                                 }
+                                 dateStr = sb.toString();
+                            }
+                        }
+                    } else { // Assume HH:mm
+                        sb = new StringBuilder(dateStr);
+                        sb.insert(timeEndIdx, ":00.000");
+                        dateStr = sb.toString();
+                    }
+                } else { // Assume "THH" / "THH." / "THH.mm" / "THH.mmm" format
+                    sb = new StringBuilder(dateStr);
+                    if (dotIdx < tIndex) dotIdx = -1; // dot must be after 'T'
+                    if (dotIdx == -1) { // "THH" -> "THH:00:00.000"
+                        sb.insert(timeEndIdx, ":00:00.000");
+                    } else { // "THH.mmm" -> "THH:00:00.mmm" (or fewer m's)
+                        sb.insert(dotIdx, ":00:00");
+                        // Pad milliseconds if needed
+                        int currentLen = sb.length();
+                        int newTimeEndIdx = currentLen - 1;
+                        int newDotIdx = sb.lastIndexOf('.');
+                        int millisDigits = newTimeEndIdx - (newDotIdx + 1);
+                        for (; millisDigits < 3; ++millisDigits) {
+                           sb.insert(newTimeEndIdx, '0');
+                        }
+                    }
+                    dateStr = sb.toString();
+                }
             }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+        // Date with timezone offset (+HH:MM / +HHMM / +HH)
+        } else if (hasTimeZone(dateStr)) {
+             // Need to remove colon, if present: Z supports "+HHMM" / "-HHMM"
+             int signIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+             String timezonePartOrig = dateStr.substring(signIdx);
+             if (timezonePartOrig.length() == 6 && timezonePartOrig.charAt(3) == ':') { // "+HH:MM" -> "+HHMM"
                  StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                 sb.deleteCharAt(signIdx + 3);
                  dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+             } else if (timezonePartOrig.length() == 3) { // "+HH" -> "+HH00"
                  dateStr += "00";
+             } else if (timezonePartOrig.length() != 5) { // "+HHMM" is ok
+                 // Otherwise, invalid format, let parser deal with it
+             }
+
+             // Ensure "yyyy-MM-dd'T'HH:mm:ss.SSS" part before timezone
+            int timeEndIdx = signIdx;
+            int tIndex = dateStr.lastIndexOf('T');
+            if (tIndex >= 0) {
+                 int dotIdx = -1;
+                 int lastColonIdx = -1;
+                 for (int i = tIndex + 1; i < timeEndIdx; ++i) {
+                     char ch = dateStr.charAt(i);
+                     if (ch == ':') lastColonIdx = i;
+                     else if (ch == '.') dotIdx = i;
+                 }
+                 StringBuilder sb = null;
+
+                 if (lastColonIdx != -1) { // Ok, must have hours, minutes OR hours, minutes, seconds
+                     int secondColonIdx = -1;
+                     for (int i = tIndex + 1; i < lastColonIdx; ++i) {
+                          if (dateStr.charAt(i) == ':') secondColonIdx = i;
+                     }
+
+                     if (secondColonIdx != -1) { // We have HH:mm:ss
+                        if (dotIdx < lastColonIdx) dotIdx = -1; // dot must be after seconds
+                         if (dotIdx == -1) { // No milliseconds indicated.
+                              sb = new StringBuilder(dateStr);
+                              sb.insert(timeEndIdx, ".000");
+                              dateStr = sb.toString();
+                         } else { // Milliseconds indicated
+                             int millisDigits = timeEndIdx - (dotIdx + 1);
+                             if (millisDigits < 3) {
+                                  sb = new StringBuilder(dateStr);
+                                  for (; millisDigits < 3; ++millisDigits) {
+                                      sb.insert(timeEndIdx, '0');
+                                  }
+                                  dateStr = sb.toString();
+                             }
+                         }
+                     } else { // Assume HH:mm
+                         sb = new StringBuilder(dateStr);
+                         sb.insert(timeEndIdx, ":00.000");
+                         dateStr = sb.toString();
+                     }
+                 } else { // Assume "THH" / "THH." / "THH.mm" / "THH.mmm" format
+                     sb = new StringBuilder(dateStr);
+                     if (dotIdx < tIndex) dotIdx = -1; // dot must be after 'T'
+                     if (dotIdx == -1) { // "THH" -> "THH:00:00.000"
+                         sb.insert(timeEndIdx, ":00:00.000");
+                     } else { // "THH.mmm" -> "THH:00:00.mmm" (or fewer m's)
+                         sb.insert(dotIdx, ":00:00");
+                         // Pad milliseconds if needed
+                         int currentLen = sb.length();
+                         // Need to find sign index again
+                         int currentSignIdx = Math.max(sb.lastIndexOf("+", currentLen - 2), sb.lastIndexOf("-", currentLen - 2));
+                         int newTimeEndIdx = currentSignIdx;
+                         int newDotIdx = sb.lastIndexOf('.');
+                         int millisDigits = newTimeEndIdx - (newDotIdx + 1);
+                         for (; millisDigits < 3; ++millisDigits) {
+                            sb.insert(newTimeEndIdx, '0');
+                         }
                      }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
                      dateStr = sb.toString();
                  }
+            }
              df = _formatISO8601;
              if (_formatISO8601 == null) {
                  df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
              }
-            } else {
         // If not, plain date. Easiest to just patch 'Z' in the end?
+        } else {
+            // If not timezone indicator, and not ending in Z, let's assume
+            // that it's local time and needs 'Z' appended (as per prior behavior).
              StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+             int timeEndIdx = dateStr.length();
+             int tIndex = dateStr.lastIndexOf('T');
+             // If 'T' is present, parse time part, otherwise assume plain date which should have been handled already
+             if (tIndex >= 0) {
+                 int dotIdx = -1;
+                 int lastColonIdx = -1;
+                 for (int i = tIndex + 1; i < timeEndIdx; ++i) {
+                     char ch = dateStr.charAt(i);
+                     if (ch == ':') lastColonIdx = i;
+                     else if (ch == '.') dotIdx = i;
+                 }
+
+                 if (lastColonIdx != -1) { // Has time separator
+                     int secondColonIdx = -1;
+                      for (int i = tIndex + 1; i < lastColonIdx; ++i) {
+                          if (dateStr.charAt(i) == ':') secondColonIdx = i;
+                     }
+
+                     if (secondColonIdx != -1) { // We have HH:mm:ss
+                         if (dotIdx < lastColonIdx) dotIdx = -1; // dot must be after seconds
+                         if (dotIdx == -1) { // No millis
                              sb.append(".000");
+                         } else { // Has millis
+                             int millisDigits = timeEndIdx - (dotIdx + 1);
+                             for (; millisDigits < 3; ++millisDigits) {
+                                 sb.append('0');
                              }
+                         }
+                     } else { // Assume HH:mm
+                         sb.append(":00.000");
+                     }
+                 } else { // Assume "THH" / "THH." / "THH.mm" / "THH.mmm" format
+                      if (dotIdx < tIndex) dotIdx = -1; // dot must be after T
+                      if (dotIdx == -1) { // "THH" -> "THH:00:00.000"
+                         sb.append(":00:00.000");
+                      } else { // "THH.mmm" -> "THH:00:00.mmm"
+                          // Insert :00:00 before the dot
+                           sb.insert(dotIdx, ":00:00");
+                           // Pad millis that are already there (at the end of the string now)
+                           int currentLen = sb.length();
+                           int newDotIdx = sb.lastIndexOf('.');
+                           int millisDigits = currentLen - (newDotIdx + 1);
+                           for (int i=millisDigits; i < 3; ++i) {
+                               sb.append('0');
+                           }
+                      }
+                 }
+                 sb.append('Z');
+                 dateStr = sb.toString();
+             } else {
+                 // If no 'T', we may have plain date (pre-10 chars) or something else...
+                 // Ideally we shouldn't get here for plain dates, but what the heck:
+                 // Let's append 'Z', see what happens
                  sb.append('Z');
                  dateStr = sb.toString();
+             }
+
              df = _formatISO8601_z;
              if (df == null) {
                  df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                          _timezone, _locale);
              }
         }
-        }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
