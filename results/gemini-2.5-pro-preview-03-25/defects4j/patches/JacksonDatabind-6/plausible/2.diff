diff --git a/tmp/94db39d8-e851-4c3b-8800-8d842c8d88f4_buggy.java b/tmp/666057da-73f8-481e-9265-6589219d2e2a_fixed.java
index cd412d2..d281e0c 100644
--- a/tmp/94db39d8-e851-4c3b-8800-8d842c8d88f4_buggy.java
+++ b/tmp/666057da-73f8-481e-9265-6589219d2e2a_fixed.java
@@ -1,76 +1,168 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
+         * 14-Nov-2014, tatu: Revised radically to handle more variations,
+         * specifically, missing components and partial milliseconds.
          */
         int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
         DateFormat df;
+        String timezoneStr; // Normalized timezone: Z, +HHmm or -HHmm
+        int timePartEndIndex; // Index where the time part (HH:mm:ss.SSS) ends, before timezone
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+        // First, handle the potential plain date case: "yyyy-MM-dd"
+        // Needs to be pattern yyyy-MM-dd
+        if (len == 10 && Character.isDigit(dateStr.charAt(len - 1)) && dateStr.charAt(4) == '-' && dateStr.charAt(7) == '-') {
             df = _formatPlain;
             if (df == null) {
+                // Use shared clone method directly
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
-            }
-        }
+            // NOTE: No scrubbing needed, should match format directly
             return df.parse(dateStr, pos);
         }
+
+        // Determine timezone format and select the appropriate DateFormat
+        char lastChar = dateStr.charAt(len - 1);
+
+        if (lastChar == 'Z') { // Zulu timezone "Z"
+            df = _formatISO8601_z;
+            if (df == null) {
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            }
+            timezoneStr = "Z";
+            timePartEndIndex = len - 1;
+        } else if (len >= 6 && dateStr.charAt(len - 3) == ':' && (dateStr.charAt(len - 6) == '+' || dateStr.charAt(len - 6) == '-')) {
+            // Timezone "+/-HH:mm"
+            df = _formatISO8601;
+            if (df == null) {
+                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+            }
+            // Normalize timezone to +/-HHmm
+            timezoneStr = dateStr.substring(len - 6, len - 3) + dateStr.substring(len - 2);
+            timePartEndIndex = len - 6;
+        } else if (len >= 5 && Character.isDigit(lastChar) && (dateStr.charAt(len - 5) == '+' || dateStr.charAt(len - 5) == '-')) {
+            // Timezone "+/-HHmm"
+            df = _formatISO8601;
+             if (df == null) {
+                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+             }
+             timezoneStr = dateStr.substring(len - 5);
+             timePartEndIndex = len - 5;
+        // Let's be specific: timezone "+/-HH" (implicit :00)
+        // Len must be at least 3 for "+HH"; last char must be digit; char at len-3 must be sign
+        } else if (len >= 3 && Character.isDigit(lastChar) && (dateStr.charAt(len - 3) == '+' || dateStr.charAt(len - 3) == '-')) {
+             // Heuristic: is the char before +/- expected (T, digit, dot)? This distinguishes
+             // "+HH" offset from end of seconds/millis like "...3+..."
+             char charBeforeSign = dateStr.charAt(len-4);
+             // Character before sign must be end of date/time part (digit, 'T', '.')
+             // Or beginning of string if date part is short (unlikely for ISO8601)
+             if (Character.isDigit(charBeforeSign) || charBeforeSign == 'T' || charBeforeSign == '.') {
+                 df = _formatISO8601;
+                 if (df == null) {
+                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+                 }
+                 timezoneStr = dateStr.substring(len - 3) + "00"; // Normalize to +/-HH00
+                 timePartEndIndex = len - 3;
+             } else { // Does not look like timezone, assume implicit Z
+                 df = _formatISO8601_z;
+                 if (df == null) {
+                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+                 }
+                 timezoneStr = "Z";
+                 timePartEndIndex = len; // Time part includes up to the end
+             }
+        } else {
+            // No recognizable timezone indicator at the end, treat as Implicit Z
+            df = _formatISO8601_z;
+            if (df == null) {
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            }
+            timezoneStr = "Z";
+            timePartEndIndex = len;
+        }
+
+        // ISO8601 requires 'T' separator for time component
+        int tIndex = dateStr.indexOf('T');
+        // If no 'T', it should have been handled by plain date case or is invalid
+        if (tIndex == -1) {
+            pos.setErrorIndex(len); // Indicate error at end, T missing
+            return null;
+        }
+
+        // Normalize the time part: yyyy-MM-dd'T'HH:mm:ss.SSS
+        String datePart = dateStr.substring(0, tIndex);
+        // Extract time part safely, can be empty if timezone immediately follows T
+        String timePart = (timePartEndIndex > tIndex + 1) ? dateStr.substring(tIndex + 1, timePartEndIndex) : "";
+
+        String hhmmPart;
+        String ssPart = ":00"; // Default seconds
+        String SSSPart = ".000"; // Default milliseconds
+
+        int timeColon1 = timePart.indexOf(':');
+        int timeColon2 = (timeColon1 == -1) ? -1 : timePart.indexOf(':', timeColon1 + 1);
+        // Look for dot AFTER the seconds field (i.e., after second colon, or after first if no second colon)
+        int timeDot = timePart.indexOf('.', (timeColon2 > timeColon1) ? timeColon2 + 1 : (timeColon1 > -1 ? timeColon1 + 1 : 0));
+
+        if (timePart.isEmpty()) { // Case like "yyyy-MM-ddTZ" or "yyyy-MM-ddT+HH:mm" -> use default 00:00:00.000
+            hhmmPart = "00:00";
+        } else if (timeColon1 == -1) { // No colons: Not HH:mm(:ss)? format. Invalid.
+             // ISO 8601 allows basic format (no colons), but SimpleDateFormat needs them.
+             pos.setErrorIndex(tIndex + 1); // Error in time part structure
+             return null;
+        } else if (timeColon2 == -1) { // Only one colon: HH:mm
+             // Check for dot: If dot exists, it's HH:mm.SSS which is invalid format
+             if (timeDot != -1) {
+                 pos.setErrorIndex(timeDot); // Invalid format HH:mm.SSS
+                 return null;
+             }
+             hhmmPart = timePart; // Format is HH:mm
+             // ssPart and SSSPart remain default ":00" and ".000"
+        } else { // Two colons: HH:mm:ss[.SSS]
+            hhmmPart = timePart.substring(0, timeColon2); // HH:mm part
+            if (timeDot == -1) { // HH:mm:ss (no dot)
+                ssPart = timePart.substring(timeColon2); // :ss part
+                // Ensure ssPart is valid ":ss" format (length 3)
+                if (ssPart.length() != 3 || !Character.isDigit(ssPart.charAt(1)) || !Character.isDigit(ssPart.charAt(2))) {
+                     pos.setErrorIndex(timeColon2+1); return null;
+                }
+                SSSPart = ".000"; // Add default millis
+            } else { // HH:mm:ss.SSS... (dot found)
+                ssPart = timePart.substring(timeColon2, timeDot); // :ss part
+                // Ensure ssPart is valid ":ss" format (length 3)
+                if (ssPart.length() != 3 || !Character.isDigit(ssPart.charAt(1)) || !Character.isDigit(ssPart.charAt(2))) {
+                     pos.setErrorIndex(timeColon2+1); return null;
+                }
+                SSSPart = timePart.substring(timeDot); // .SSS... part
+            }
+        }
+
+        // Normalize SSSPart (milliseconds) to .SSS format
+        if (SSSPart.startsWith(".")) {
+            int millisLen = SSSPart.length() - 1; // Number of digits after dot
+            if (millisLen == 0) SSSPart = ".000"; // "." -> ".000"
+            else if (millisLen == 1) SSSPart += "00"; // ".S" -> ".S00"
+            else if (millisLen == 2) SSSPart += "0"; // ".SS" -> ".SS0"
+            else if (millisLen > 3) SSSPart = SSSPart.substring(0, 4); // ".SSS..." -> ".SSS"
+            // else millisLen == 3 (".SSS"), do nothing
+        } else if (!SSSPart.equals(".000")) { // If not default and not starting with '.', it's invalid
+             pos.setErrorIndex(timeDot > -1 ? timeDot : timePartEndIndex);
+             return null;
+        }
+        // else SSSPart is already ".000" (default) or correctly formatted ".SSS"
+
+
+        // Reconstruct the date string in the target format (yyyy-MM-dd'T'HH:mm:ss.SSS + timezone)
+        String rebuiltDateStr = datePart + "T" + hhmmPart + ssPart + SSSPart;
+
+        if (df == _formatISO8601_z) { // Target format needs 'Z' literal
+             rebuiltDateStr += "Z";
+        } else { // Target format needs Z pattern (+/-HHmm)
+             if ("Z".equals(timezoneStr)) { // Input was Z, but target needs offset
+                 timezoneStr = "+0000"; // Convert Z to offset
+             }
+             rebuiltDateStr += timezoneStr;
+        }
+
+        return df.parse(rebuiltDateStr, pos);
+    }
\ No newline at end of file
