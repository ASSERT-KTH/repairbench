diff --git a/tmp/0ad23346-4854-4d0d-b474-0a321fbd1d3f_buggy.java b/tmp/8606df62-4583-478f-8ecf-ded7bf00bb07_fixed.java
index 63a7c80..a127552 100644
--- a/tmp/0ad23346-4854-4d0d-b474-0a321fbd1d3f_buggy.java
+++ b/tmp/8606df62-4583-478f-8ecf-ded7bf00bb07_fixed.java
@@ -1,77 +1,108 @@
     /**
      * Arranges the items within a container.
      *
      * @param container  the container.
-     * @param constraint  the constraint.
      * @param g2  the graphics device.
+     * @param constraint  the constraint.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        w[0] = constraint.getWidth(); // Fixed width constraint
+        double heightAvailable = constraint.getHeight(); // Height constraint is FIXED or RANGE
+
+        // Arrange top block
         if (this.topBlock != null) {
+            // Constraint: width fixed, height range [0, heightAvailable]
+            // Create constraint with fixed width and height range
              RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                      LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                     new Range(0.0, heightAvailable),
                      LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+
+        // Calculate height remaining for bottom block, ensure non-negative
+        double heightRemainingForBottom = Math.max(heightAvailable - h[0], 0.0);
+        w[1] = w[0]; // Bottom block also uses full width
+
+        // Arrange bottom block
         if (this.bottomBlock != null) {
+            // Constraint: width fixed, height range [0, heightRemainingForBottom]
              RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                     LengthConstraintType.FIXED, 0.0,
+                     new Range(0.0, heightRemainingForBottom), // Use clamped remaining height
+                     LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // Calculate height for middle row (left, center, right), ensure non-negative
+        h[2] = Math.max(heightAvailable - h[0] - h[1], 0.0);
+        h[3] = h[2];
+        h[4] = h[2];
+
+        // Arrange left block
         if (this.leftBlock != null) {
+             // Constraint: height fixed to h[2], width range [0, constraint.getWidth()]
             RectangleConstraint c3 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
+                    LengthConstraintType.RANGE,
+                    h[2], null, // Use non-negative h[2]
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
-        h[3] = h[2];
+
+        // Calculate width remaining for right block, ensure non-negative
+        double widthRemainingForRight = Math.max(constraint.getWidth() - w[2], 0.0);
+
+        // Arrange right block
         if (this.rightBlock != null) {
+            // Constraint: height fixed to h[3], width range [0, widthRemainingForRight]
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
+                    new Range(0.0, widthRemainingForRight), // Use clamped remaining width
+                    LengthConstraintType.RANGE,
+                    h[3], null, // Use non-negative h[3]
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+        // Calculate width for center block, ensure non-negative
+        w[4] = Math.max(constraint.getWidth() - w[2] - w[3], 0.0);
+
+        // Arrange center block
+        // Constraint: fixed width w[4], fixed height h[4] (both non-negative)
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
+            // Resulting size of center block doesn't influence overall layout geometry here
         }
 
+        // Set bounds for all blocks using calculated dimensions
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            // The x-coordinate should be after the left and center blocks
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            // The x-coordinate should be after the left block
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        // Return the total size: original fixed width, calculated total height
+        return new Size2D(constraint.getWidth(), h[0] + h[2] + h[1]);
     }
\ No newline at end of file
