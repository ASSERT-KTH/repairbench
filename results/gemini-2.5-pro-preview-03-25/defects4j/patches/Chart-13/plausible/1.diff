diff --git a/tmp/d2e77bc1-0306-4b0b-9829-84e68ad2308a_buggy.java b/tmp/c6a9301f-2067-4d8c-b837-5f44a40ee76c_fixed.java
index 63a7c80..7a5337f 100644
--- a/tmp/d2e77bc1-0306-4b0b-9829-84e68ad2308a_buggy.java
+++ b/tmp/c6a9301f-2067-4d8c-b837-5f44a40ee76c_fixed.java
@@ -1,77 +1,129 @@
     /**
-     * Arranges the items within a container.
+     * Arranges the items within a container assuming a fixed width and height.
+     * This method is intended for use when the constraint type is FIXED for
+     * both width and height. It includes clamping to handle potential
+     * negative intermediate values.
      *
      * @param container  the container.
-     * @param constraint  the constraint.
+     * @param constraint  the constraint (assumed Fixed/Fixed).
      * @param g2  the graphics device.
      *
-     * @return The container size after the arrangement.
+     * @return The container size after the arrangement. Returns the fixed
+     *         width from the constraint and the calculated total height based
+     *         on arranged blocks.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        w[0] = constraint.getWidth(); // Fixed width from constraint
+
+        // Arrange top block
         if (this.topBlock != null) {
+            // Constraint for top block: Fixed width, Ranged height (up to constraint height)
+            // Clamp upper bound of range to be at least 0.0
+            Range heightRange = new Range(0.0, Math.max(0.0, constraint.getHeight()));
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                    LengthConstraintType.FIXED, 0.0, heightRange,
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+
+        w[1] = w[0]; // Bottom block has same fixed width
+
+        // Arrange bottom block
         if (this.bottomBlock != null) {
+            // Calculate available height, ensuring non-negative
+            double h_avail_for_bottom = Math.max(0.0, constraint.getHeight() - h[0]);
+            // Constraint for bottom block: Fixed width, Ranged height (up to available)
+            Range heightRange = new Range(0.0, h_avail_for_bottom);
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    LengthConstraintType.FIXED, 0.0, heightRange,
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // Calculate height for the middle row (left, center, right)
+        // Ensure non-negative height
+        h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);
+
+        // Arrange left block
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+            // Constraint for left block: Ranged width (up to constraint width), Fixed height (h[2])
+            // Clamp upper bound of width range to be at least 0.0
+             Range widthRange = new Range(0.0, Math.max(0.0, constraint.getWidth()));
+            RectangleConstraint c3 = new RectangleConstraint(0.0, widthRange,
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
-        h[3] = h[2];
+
+        h[3] = h[2]; // Right block has same height as middle row
+
+        // Arrange right block
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+            // Calculate available width, ensuring non-negative
+            double w_avail_for_right = Math.max(0.0, constraint.getWidth() - w[2]);
+            // Constraint for right block: Ranged width (up to available), Fixed height (h[2])
+             Range widthRange = new Range(0.0, w_avail_for_right);
+            RectangleConstraint c4 = new RectangleConstraint(0.0, widthRange,
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+        h[4] = h[2]; // Center block has same height as middle row
+
+        // Calculate width for center block, ensuring non-negative
+        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);
+
+        // Constraint for center block: Fixed width (w[4]), Fixed height (h[4])
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+        // Arrange center block
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
+            // In FF mode, the center block must fit the calculated space.
+            // We don't update w[4] or h[4] from its arranged size.
         }
 
+        // --- Set Bounds ---
+        // Use calculated dimensions, ensuring non-negative coordinates and sizes.
+        // Note: w[], h[] themselves might not be negative due to arrange() returning
+        // non-negative sizes, but intermediate calculations for position/available
+        // space need clamping (which was done above).
+
         if (this.topBlock != null) {
             this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                     h[0]));
         }
         if (this.bottomBlock != null) {
+            // y-position depends on top height and middle row height
             this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                     w[1], h[1]));
         }
         if (this.leftBlock != null) {
+             // y-position depends on top height
             this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                     h[2]));
         }
         if (this.rightBlock != null) {
+             // x-position depends on left and center widths; y-position on top height
             this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                     w[3], h[3]));
         }
         if (this.centerBlock != null) {
+             // x-position depends on left width; y-position on top height
             this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                     h[4]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        // Calculate final size. Width is fixed by constraint.
+        // Height is sum of calculated row heights.
+        double actualTotalHeight = h[0] + h[2] + h[1];
+        return new Size2D(constraint.getWidth(), actualTotalHeight);
     }
\ No newline at end of file
