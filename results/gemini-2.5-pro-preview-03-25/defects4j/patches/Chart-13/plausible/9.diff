diff --git a/tmp/83b6cb24-f16f-4dad-89bd-22d81aa86eae_buggy.java b/tmp/5115b79f-5058-4c21-bc03-784418e02a0c_fixed.java
index 63a7c80..fd15694 100644
--- a/tmp/83b6cb24-f16f-4dad-89bd-22d81aa86eae_buggy.java
+++ b/tmp/5115b79f-5058-4c21-bc03-784418e02a0c_fixed.java
@@ -1,77 +1,107 @@
     /**
-     * Arranges the items within a container.
+     * Arranges the items within a container. This version assumes a FIXED width
+     * and FIXED height constraint, but includes fixes to handle potential issues
+     * arising from non-positive calculated dimensions and returns calculated height.
      *
      * @param container  the container.
-     * @param constraint  the constraint.
      * @param g2  the graphics device.
+     * @param constraint  the constraint (intended Fixed Width, Fixed Height).
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        double constrainedWidth = constraint.getWidth();
+        // Use constraint.getHeight() as the reference height for calculations,
+        // but clamp results to be non-negative.
+        double constrainedHeight = constraint.getHeight();
+
+        w[0] = constrainedWidth; // Width for top block
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+            // Arrange top block: Fixed width, height constrained by available space (up to constrainedHeight)
+            // Use a height range [0, constrainedHeight]
+            RectangleConstraint c1 = new RectangleConstraint(constrainedWidth, null,
+                    LengthConstraintType.FIXED, 0.0, new Range(0.0, constrainedHeight),
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+
+        w[1] = constrainedWidth; // Width for bottom block
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            // Arrange bottom block: Fixed width, height constrained by remaining space
+            // FIX: Ensure range upper bound is non-negative
+            double remainingHeight = Math.max(0.0, constrainedHeight - h[0]);
+            RectangleConstraint c2 = new RectangleConstraint(constrainedWidth, null,
+                    LengthConstraintType.FIXED, 0.0, new Range(0.0, remainingHeight),
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // Calculate height for the middle row (left, right, center)
+        // FIX: Ensure middle height is non-negative
+        h[2] = Math.max(0.0, constrainedHeight - h[0] - h[1]);
+        h[3] = h[2]; // Same height for right block
+        h[4] = h[2]; // Same height for center block
+
         if (this.leftBlock != null) {
+            // Arrange left block: Fixed height h[2], width constrained by available width (up to constrainedWidth)
             RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                    new Range(0.0, constrainedWidth), LengthConstraintType.RANGE,
+                    h[2], null, LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
-        h[3] = h[2];
+
         if (this.rightBlock != null) {
+            // Arrange right block: Fixed height h[2], width constrained by remaining width
+            // FIX: Ensure available width for range is non-negative
+            double availableWidth = Math.max(0.0, constrainedWidth - w[2]);
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                    new Range(0.0, availableWidth), LengthConstraintType.RANGE,
+                    h[2], null, LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+        // Calculate width for center block (remaining space)
+        // FIX: Ensure center width is non-negative
+        w[4] = Math.max(0.0, constrainedWidth - w[2] - w[3]);
+
+        // Arrange center block: Fixed width w[4], Fixed height h[4] (which is h[2])
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
+            // Size returned by arrange is ignored here, as we used fixed constraint c5
         }
 
+        // Set bounds for all blocks based on calculated dimensions
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, constrainedWidth, h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+             // Y position is after top and middle rows
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], constrainedWidth, h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+             // Y position is after top row
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+             // X position is after left and center blocks, Y position is after top row
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2])); // height is h[2]
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+             // X position is after left block, Y position is after top row
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[2])); // height is h[2]
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        // FIX: Return calculated height instead of constrained height.
+        // This allows the method to function correctly even if the initial height
+        // constraint wasn't truly FIXED (e.g., NONE resulted in constrainedHeight=0).
+        double calculatedHeight = h[0] + h[1] + h[2];
+        return new Size2D(constrainedWidth, calculatedHeight);
     }
\ No newline at end of file
