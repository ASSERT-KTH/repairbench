diff --git a/tmp/53b208e8-259d-4230-8418-2f9c5349d37b_buggy.java b/tmp/6ce06135-b542-4a6f-9312-c6a6e9494864_fixed.java
index 63a7c80..1e43f2f 100644
--- a/tmp/53b208e8-259d-4230-8418-2f9c5349d37b_buggy.java
+++ b/tmp/6ce06135-b542-4a6f-9312-c6a6e9494864_fixed.java
@@ -1,77 +1,106 @@
     /**
-     * Arranges the items within a container.
+     * Arranges the items within a container that has dimensions fixed in both
+     * directions.
      *
      * @param container  the container.
-     * @param constraint  the constraint.
      * @param g2  the graphics device.
+     * @param constraint  the constraint.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
+            // Constraint c1: Width fixed, Height ranged up to available constraint height
+            Range heightRange1 = new Range(0.0, constraint.getHeight());
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                    LengthConstraintType.FIXED, 0.0, heightRange1,
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
+
+        // Calculate height remaining for bottom block (clamp to non-negative)
+        double heightRemaining1 = Math.max(0.0, constraint.getHeight() - h[0]);
+
         w[1] = w[0];
         if (this.bottomBlock != null) {
+             // Constraint c2: Width fixed, Height ranged up to remaining height
+             Range heightRange2 = new Range(0.0, heightRemaining1);
              RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                     LengthConstraintType.FIXED, 0.0, heightRange2,
+                     LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // Calculate fixed height for the middle row (clamp to non-negative)
+        h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);
+
+        double widthAvailable = constraint.getWidth(); // Width available for L, R, C
+
         if (this.leftBlock != null) {
+            // Constraint c3: Width ranged up to available width, Height fixed at h[2]
             RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+                    new Range(0.0, widthAvailable),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
-        h[3] = h[2];
+
+        // Width remaining for R, C (clamp to non-negative)
+        double widthRemaining1 = Math.max(0.0, widthAvailable - w[2]);
+
+        h[3] = h[2]; // Right block has same fixed height
         if (this.rightBlock != null) {
+            // Constraint c4: Width ranged up to remaining width, Height fixed at h[3]
+             // Ensure the upper bound of the range is not less than the lower bound (0.0)
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
+                    new Range(0.0, widthRemaining1), // Use clamped remaining width
+                    LengthConstraintType.RANGE, h[3], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+        // Width remaining for C (clamp to non-negative)
+        double widthRemaining2 = Math.max(0.0, widthRemaining1 - w[3]);
+
+        h[4] = h[2]; // Center block has same fixed height
+        w[4] = widthRemaining2; // Center block gets the final remaining width
+
+        // Constraint c5: Fixed width w[4], fixed height h[4]
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
+        // Set bounds using calculated w[0..4] and h[0..4]
         if (this.topBlock != null) {
             this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                     h[0]));
         }
         if (this.bottomBlock != null) {
             this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                     w[1], h[1]));
         }
         if (this.leftBlock != null) {
             this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                     h[2]));
         }
         if (this.rightBlock != null) {
             this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                     w[3], h[3]));
         }
         if (this.centerBlock != null) {
             this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                     h[4]));
         }
+
+        // Return the original fixed constraint size
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
\ No newline at end of file
