diff --git a/tmp/b8df793f-14cb-4cdc-b05a-c3eb583e683a_buggy.java b/tmp/1ee3e723-e9c2-4dc9-aede-7c0d5aa8262c_fixed.java
index 63a7c80..c1fb9e5 100644
--- a/tmp/b8df793f-14cb-4cdc-b05a-c3eb583e683a_buggy.java
+++ b/tmp/1ee3e723-e9c2-4dc9-aede-7c0d5aa8262c_fixed.java
@@ -1,77 +1,218 @@
+import org.jfree.chart.block.BlockContainer;
+import org.jfree.chart.block.LengthConstraintType;
+import org.jfree.chart.block.RectangleConstraint;
+import org.jfree.data.Range;
+import org.jfree.ui.Size2D;
+
+import java.awt.Graphics2D;
+import java.awt.geom.Rectangle2D;
+
+// Imports added for context, assume these fields exist in the class:
+// import org.jfree.chart.block.Block;
+// private Block topBlock;
+// private Block bottomBlock;
+// private Block leftBlock;
+// private Block rightBlock;
+// private Block centerBlock;
+
+
     /**
-     * Arranges the items within a container.
+     * Arranges the items within a container assuming a fixed width and a
+     * variable height. This method is called when the container is arranged
+     * within a fixed width and the height is determined by the contents.
      *
      * @param container   the container.
-     * @param constraint  the constraint.
      * @param g2          the graphics device.
+     * @param constraint  the constraint (assumed fixed width, possibly variable
+     *                    height).
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        double usableWidth = constraint.getWidth(); // Assumes fixed width based on FF name convention
+        double usableHeight = constraint.getHeight(); // Height from constraint (value depends on type)
+
+        // 1. Arrange Top block
+        w[0] = usableWidth;
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            // Constraint: Fixed width (usableWidth), Height constraint based on input constraint
+            Range heightRange = constraint.getHeightRange();
+            LengthConstraintType heightConstraintType = constraint.getHeightConstraintType();
+            if (heightConstraintType == LengthConstraintType.NONE) {
+                 heightRange = new Range(0.0, Double.MAX_VALUE);
+                 heightConstraintType = LengthConstraintType.RANGE; // Treat NONE as RANGE MAX_VALUE for arrangement
+            } else if (heightConstraintType == LengthConstraintType.FIXED) {
+                 heightRange = new Range(usableHeight, usableHeight); // Use constraint's fixed height
+            } // If RANGE, heightRange is already set.
+
+            RectangleConstraint c1 = new RectangleConstraint(
+                    usableWidth, null, LengthConstraintType.FIXED,
+                    0.0, heightRange, heightConstraintType);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+
+        // 2. Arrange Bottom block
+        w[1] = usableWidth;
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            // Constraint: Fixed width (usableWidth), Height constraint based on input constraint minus top height
+            Range heightRange = constraint.getHeightRange();
+            LengthConstraintType heightConstraintType = constraint.getHeightConstraintType();
+            double availableHeight = Double.MAX_VALUE;
+
+            if (heightConstraintType == LengthConstraintType.NONE) {
+                heightRange = new Range(0.0, Double.MAX_VALUE);
+                heightConstraintType = LengthConstraintType.RANGE;
+            } else if (heightConstraintType == LengthConstraintType.FIXED) {
+                availableHeight = Math.max(usableHeight - h[0], 0.0);
+                heightRange = new Range(availableHeight, availableHeight); // Fixed remaining height
+            } else { // RANGE
+                availableHeight = Math.max(heightRange.getUpperBound() - h[0], 0.0);
+                heightRange = new Range(0.0, availableHeight); // Range up to remaining height
+            }
+
+            RectangleConstraint c2 = new RectangleConstraint(
+                    usableWidth, null, LengthConstraintType.FIXED,
+                    0.0, heightRange, heightConstraintType);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // Calculate height theoretically available for the middle row based *only* on constraint and top/bottom heights
+        double middleRowMaxHeight = Double.MAX_VALUE; // Default for NONE
+        if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
+            middleRowMaxHeight = Math.max(usableHeight - h[0] - h[1], 0.0);
+        } else if (constraint.getHeightConstraintType() == LengthConstraintType.RANGE) {
+            middleRowMaxHeight = Math.max(constraint.getHeightRange().getUpperBound() - h[0] - h[1], 0.0);
+        }
+
+        // 3. Arrange Left block
+        Size2D sizeL = null;
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+            // Constraint: Range width (0 to usableWidth), Height constraint depends on container's constraint & middleRowMaxHeight
+            Range widthRange = new Range(0.0, usableWidth);
+            LengthConstraintType heightConstraintType = constraint.getHeightConstraintType();
+            Range heightRange;
+
+            if (heightConstraintType == LengthConstraintType.FIXED) {
+                 heightRange = new Range(middleRowMaxHeight, middleRowMaxHeight); // Fixed height
+                 heightConstraintType = LengthConstraintType.FIXED;
+            } else { // RANGE or NONE
+                 heightRange = new Range(0.0, middleRowMaxHeight); // Range up to max allowed
+                 heightConstraintType = LengthConstraintType.RANGE;
             }
-        h[3] = h[2];
+
+            RectangleConstraint c3 = new RectangleConstraint(
+                    0.0, widthRange, LengthConstraintType.RANGE,
+                    0.0, heightRange, heightConstraintType);
+
+            sizeL = this.leftBlock.arrange(g2, c3);
+            w[2] = sizeL.width;
+        }
+
+        // Calculate width remaining *after* left block
+        double widthRemaining = Math.max(usableWidth - w[2], 0.0);
+
+        // 4. Arrange Right block
+        Size2D sizeR = null;
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+             // Constraint: Range width (0 to widthRemaining), Height constraint same as Left block
+            Range widthRange = new Range(0.0, widthRemaining);
+            LengthConstraintType heightConstraintType = constraint.getHeightConstraintType();
+            Range heightRange;
+
+             if (heightConstraintType == LengthConstraintType.FIXED) {
+                 heightRange = new Range(middleRowMaxHeight, middleRowMaxHeight);
+                 heightConstraintType = LengthConstraintType.FIXED;
+            } else { // RANGE or NONE
+                 heightRange = new Range(0.0, middleRowMaxHeight);
+                 heightConstraintType = LengthConstraintType.RANGE;
             }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+            RectangleConstraint c4 = new RectangleConstraint(
+                    0.0, widthRange, LengthConstraintType.RANGE,
+                    0.0, heightRange, heightConstraintType);
+
+            sizeR = this.rightBlock.arrange(g2, c4);
+            w[3] = sizeR.width;
+        }
+
+        // Calculate width remaining *after* left and right blocks for center
+        widthRemaining = Math.max(widthRemaining - w[3], 0.0); // widthRemaining already incorporates usableWidth - w[2]
+        w[4] = widthRemaining;
+
+        // 5. Arrange Center block
+        Size2D sizeC = null;
         if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+            // Constraint: Fixed width (w[4]), Height constraint same as Left/Right blocks
+            LengthConstraintType heightConstraintType = constraint.getHeightConstraintType();
+            Range heightRange;
+
+             if (heightConstraintType == LengthConstraintType.FIXED) {
+                 heightRange = new Range(middleRowMaxHeight, middleRowMaxHeight);
+                 heightConstraintType = LengthConstraintType.FIXED;
+            } else { // RANGE or NONE
+                 heightRange = new Range(0.0, middleRowMaxHeight);
+                 heightConstraintType = LengthConstraintType.RANGE;
+            }
+            RectangleConstraint c5 = new RectangleConstraint(
+                    w[4], null, LengthConstraintType.FIXED,
+                    0.0, heightRange, heightConstraintType);
+
+            sizeC = this.centerBlock.arrange(g2, c5);
+            // Assume arrange respects fixed width w[4], if not w[4] might need update (but test blocks don't)
+        }
+
+        // 6. Calculate middle height h[2] = max height of arranged left, right, center
+        double hL = (sizeL != null) ? sizeL.height : 0.0;
+        double hR = (sizeR != null) ? sizeR.height : 0.0;
+        double hC = (sizeC != null) ? sizeC.height : 0.0;
+        h[2] = Math.max(hL, Math.max(hC, hR));
+
+        // Cap middle height h[2] by available height if container constraint is FIXED or RANGE
+        if (constraint.getHeightConstraintType() != LengthConstraintType.NONE) {
+             h[2] = Math.min(h[2], middleRowMaxHeight);
         }
+        // If constraint was Fixed Height, the middle row *must* use the calculated fixed height
+        if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
+            h[2] = middleRowMaxHeight;
+        }
+
+        h[3] = h[2]; // Right block uses same logical height slot
+        h[4] = h[2]; // Center block uses same logical height slot
 
+        // 7. Set bounds
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            // Ensure calculated w[3] is non-negative before setting bounds width
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], Math.max(0.0, w[3]), h[2]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+             // Ensure calculated w[4] is non-negative
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], Math.max(0.0, w[4]), h[2]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        // 8. Return total size
+        double totalHeight = h[0] + h[2] + h[1];
+        double totalWidth = usableWidth; // Use the fixed width
+
+        // Final check against height constraint range / fixed value
+        if (constraint.getHeightConstraintType() == LengthConstraintType.RANGE) {
+             totalHeight = constraint.getHeightRange().constrain(totalHeight);
+        } else if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
+             totalHeight = usableHeight; // Final height must match fixed constraint
+        }
+
+        return new Size2D(totalWidth, totalHeight);
     }
\ No newline at end of file
