diff --git a/tmp/1869e07e-b32b-4de6-be82-918f5c5a29d0_buggy.java b/tmp/0403e45e-3c8f-476a-8353-bbf36a45ecd6_fixed.java
index 63a7c80..6632cf1 100644
--- a/tmp/1869e07e-b32b-4de6-be82-918f5c5a29d0_buggy.java
+++ b/tmp/0403e45e-3c8f-476a-8353-bbf36a45ecd6_fixed.java
@@ -1,77 +1,179 @@
     /**
-     * Arranges the items within a container.
+     * Arranges the items within a container. This method handles fixed width
+     * constraints but adapts calculation based on the height constraint type.
      *
      * @param container  the container.
-     * @param constraint  the constraint.
      * @param g2  the graphics device.
+     * @param constraint  the constraint.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        w[0] = constraint.getWidth(); // Container width is fixed
+
+        // --- Top Block ---
         if (this.topBlock != null) {
+            // Constraint is fixed width, height constraint from input constraint
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+                    LengthConstraintType.FIXED, constraint.getHeight(),
+                    constraint.getHeightRange(), constraint.getHeightConstraintType());
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
+        } else {
+            h[0] = 0.0;
         }
-        w[1] = w[0];
+
+        // --- Bottom Block ---
+        w[1] = w[0]; // Bottom block also uses fixed container width
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            RectangleConstraint c2;
+            LengthConstraintType hConsType = constraint.getHeightConstraintType();
+            if (hConsType == LengthConstraintType.NONE) {
+                 // Fixed width, NONE height constraint for bottom block
+                 c2 = new RectangleConstraint(w[1], null, LengthConstraintType.FIXED,
+                         0.0, null, LengthConstraintType.NONE);
+            } else { // FIXED or RANGE height for container
+                 // Calculate remaining height range [0, max(0, H_upper - h[0])]
+                 double H_upper = constraint.getHeightRange().getUpperBound();
+                 Range R = new Range(0.0, Math.max(0.0, H_upper - h[0]));
+                 // Constraint type for bottom block should be RANGE to allow flexibility within remaining space
+                 c2 = new RectangleConstraint(w[1], null, LengthConstraintType.FIXED,
+                         0.0, R, LengthConstraintType.RANGE);
+            }
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
+        } else {
+            h[1] = 0.0;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // --- Determine Middle Row Height Constraint ---
+        // This constraint applies to left, right, and center blocks if container height is FIXED or RANGE
+        double middleRowConstraintHeight = 0.0; // Target fixed height if applicable
+        Range middleRowConstraintRange = null; // Target range if applicable
+        LengthConstraintType middleRowConstraintType = LengthConstraintType.NONE; // Default is no height constraint
+
+        LengthConstraintType hConsType = constraint.getHeightConstraintType();
+        if (hConsType == LengthConstraintType.FIXED) {
+             // Calculate fixed height available for the middle row
+             middleRowConstraintHeight = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);
+             middleRowConstraintType = LengthConstraintType.FIXED;
+             middleRowConstraintRange = new Range(middleRowConstraintHeight, middleRowConstraintHeight);
+        } else if (hConsType == LengthConstraintType.RANGE) {
+             double H_upper = constraint.getHeightRange().getUpperBound();
+             // Max height available for middle row based on container range and top/bottom heights
+             double maxMiddleHeight = Math.max(0.0, H_upper - h[1] - h[0]);
+             middleRowConstraintType = LengthConstraintType.RANGE;
+             // Height range for middle blocks is [0, maxMiddleHeight]
+             middleRowConstraintRange = new Range(0.0, maxMiddleHeight);
+             // fixedHeight argument (middleRowConstraintHeight) is not used for RANGE type
+        } // else type remains NONE, middle blocks determine their own height
+
+
+        // --- Left Block ---
+        Size2D sizeL = Size2D.ZERO;
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+             // Width constraint: Range [0, containerWidth]
+             Range widthRange3 = new Range(0.0, constraint.getWidth());
+             // Height constraint determined above
+             RectangleConstraint c3 = new RectangleConstraint(0.0, widthRange3, LengthConstraintType.RANGE,
+                      middleRowConstraintHeight, middleRowConstraintRange, middleRowConstraintType);
+             sizeL = this.leftBlock.arrange(g2, c3);
+             w[2] = sizeL.width;
+        } else {
+             w[2] = 0.0;
         }
-        h[3] = h[2];
+
+        // --- Right Block ---
+        Size2D sizeR = Size2D.ZERO;
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+             // Width constraint: Range [0, max(0, containerWidth - w[2])]
+             Range widthRange4 = new Range(0.0, Math.max(0.0, constraint.getWidth() - w[2]));
+             // Height constraint determined above
+             RectangleConstraint c4 = new RectangleConstraint(0.0, widthRange4, LengthConstraintType.RANGE,
+                      middleRowConstraintHeight, middleRowConstraintRange, middleRowConstraintType);
+             sizeR = this.rightBlock.arrange(g2, c4);
+             w[3] = sizeR.width;
+        } else {
+             w[3] = 0.0;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+        // --- Center Block ---
+        Size2D sizeC = Size2D.ZERO;
+        // Width for center block is fixed to remaining space
+        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);
         if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+            // Height constraint determined above
+            RectangleConstraint c5 = new RectangleConstraint(w[4], null, LengthConstraintType.FIXED,
+                     middleRowConstraintHeight, middleRowConstraintRange, middleRowConstraintType);
+            sizeC = this.centerBlock.arrange(g2, c5);
+            // Actual width may differ if block behaviour overrides, but w[4] is the constraint.
+            // We use the calculated w[4] for layout.
         }
 
+        // --- Determine Actual Middle Row Height ---
+        // The actual height is the max of the arranged heights of L, R, C blocks.
+        double middleRowActualHeight = Math.max(sizeL.height, Math.max(sizeR.height, sizeC.height));
+
+        // If the container height was constrained (FIXED or RANGE), the actual middle height
+        // cannot exceed the constraint calculated earlier.
+        if (hConsType == LengthConstraintType.FIXED) {
+             // Clip actual height to the calculated fixed constraint height
+             middleRowActualHeight = Math.min(middleRowActualHeight, middleRowConstraintHeight);
+        } else if (hConsType == LengthConstraintType.RANGE) {
+             // Clip actual height to the upper bound of the calculated range constraint
+             middleRowActualHeight = Math.min(middleRowActualHeight, middleRowConstraintRange.getUpperBound());
+        }
+        // Ensure non-negative height regardless of calculations
+        middleRowActualHeight = Math.max(0.0, middleRowActualHeight);
+
+
+        // Assign the determined actual middle row height for layout
+        h[2] = middleRowActualHeight; // Actual height for Left
+        h[3] = middleRowActualHeight; // Actual height for Right
+        h[4] = middleRowActualHeight; // Actual height for Center
+
+        // --- Set Bounds ---
+        double currentY = 0.0;
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, currentY, w[0], h[0]));
+            currentY += h[0];
         }
+        double middleY = currentY; // Y-coordinate for the middle row
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, middleY, w[2], h[2]));
+        }
+        if (this.centerBlock != null) {
+            // Center block starts after left block
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], middleY, w[4], h[4]));
+        }
+        if (this.rightBlock != null) {
+            // Right block starts after left and center blocks
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], middleY, w[3], h[3]));
+        }
+        currentY += middleRowActualHeight; // Advance Y past the middle row
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, currentY, w[1], h[1]));
+            // currentY += h[1]; // Update Y if needed later
         }
-        if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
-        }
-        if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
-        }
-        if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
-        }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        // --- Return Total Size ---
+        // Calculate the total required height based on arranged components
+        double totalHeight = h[0] + middleRowActualHeight + h[1];
+        // The result width is always the fixed constraint width
+        double resultWidth = constraint.getWidth();
+
+        // Apply the original container height constraint to the calculated total height
+        double resultHeight = totalHeight;
+        if (hConsType == LengthConstraintType.FIXED) {
+            // If container height was fixed, return that fixed height
+            resultHeight = constraint.getHeight();
+        } else if (hConsType == LengthConstraintType.RANGE) {
+            // If container height was a range, constrain the calculated height by that range
+            resultHeight = constraint.getHeightRange().constrain(totalHeight);
+        } // else (hConsType == NONE), resultHeight remains the calculated totalHeight
+
+        return new Size2D(resultWidth, resultHeight);
     }
\ No newline at end of file
