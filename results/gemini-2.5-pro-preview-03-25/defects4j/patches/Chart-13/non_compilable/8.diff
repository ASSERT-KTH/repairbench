diff --git a/tmp/439f525b-bf10-4f3f-adf3-6f0de8175335_buggy.java b/tmp/4197600a-757b-43a0-b545-bd724c0af155_fixed.java
index 63a7c80..b3de3ab 100644
--- a/tmp/439f525b-bf10-4f3f-adf3-6f0de8175335_buggy.java
+++ b/tmp/4197600a-757b-43a0-b545-bd724c0af155_fixed.java
@@ -1,77 +1,173 @@
     /**
-     * Arranges the items within a container.
+     * Arranges the items within a container. This method handles constraints
+     * where the width is fixed, but the height may be fixed, ranged, or none.
      *
      * @param container  the container.
-     * @param constraint  the constraint.
      * @param g2  the graphics device.
+     * @param constraint  the constraint (requires fixed width).
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        double[] w = new double[5]; // widths: top, bottom, left, right, center
+        double[] h = new double[5]; // heights: top, bottom, left, right, center (actual heights of blocks or constrained heights)
+        w[0] = constraint.getWidth(); // Fixed width for container
+
+        // Determine the relevant height constraint from the container
+        Range heightRange = constraint.getHeightRange();
+        LengthConstraintType heightType = constraint.getHeightConstraintType();
+        double relevantHeight = constraint.getHeight(); // Default for FIXED. Returns 0 for NONE.
+
+        if (heightType == LengthConstraintType.RANGE) {
+             relevantHeight = heightRange.getUpperBound();
+        } else if (heightType == LengthConstraintType.NONE) {
+             // Treat NONE as effectively infinite available height for calculation purposes
+             relevantHeight = Double.POSITIVE_INFINITY;
+        }
+
+        // --- Step 1: Arrange Top Block ---
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+             // Constraint: Fixed width w[0], Ranged height (0 to available)
+             Range topRange = new Range(0.0, Math.max(0.0, relevantHeight));
+             RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED,
+                                           0.0, topRange, LengthConstraintType.RANGE);
              Size2D size = this.topBlock.arrange(g2, c1);
              h[0] = size.height;
         }
-        w[1] = w[0];
+
+        w[1] = w[0]; // Bottom block uses the same fixed width
+
+        // --- Step 2: Arrange Bottom Block ---
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+             // Available height after top block is placed
+             double availableHeightForBottom = relevantHeight - h[0];
+             // Constraint: Fixed width w[1], Ranged height (0 to available for bottom)
+             // Ensure the upper bound of the range is not less than the lower bound (0.0)
+             Range bottomRange = new Range(0.0, Math.max(0.0, availableHeightForBottom));
+             RectangleConstraint c2 = new RectangleConstraint(w[1], null, LengthConstraintType.FIXED,
+                                           0.0, bottomRange, LengthConstraintType.RANGE);
              Size2D size = this.bottomBlock.arrange(g2, c2);
              h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // --- Step 3: Determine Available Height for Middle Row ---
+        // This is the height constraint passed *to* the middle row blocks if the container height is fixed.
+        double middleRowHeightConstraint = 0.0;
+        if (heightType == LengthConstraintType.FIXED) {
+            // If container height is fixed, the middle row must fit in the remaining space.
+            middleRowHeightConstraint = Math.max(0.0, relevantHeight - h[0] - h[1]);
+        }
+        // If container height is not fixed (NONE or RANGE), the middle row's height
+        // will be determined by the content arranged below (sizeL, sizeC, sizeR).
+
+        // --- Step 4: Arrange Left, Right, Center Blocks ---
+        Size2D sizeL = Size2D.ZERO, sizeR = Size2D.ZERO, sizeC = Size2D.ZERO;
+
+        // Arrange Left Block
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+             RectangleConstraint c3;
+             if (heightType == LengthConstraintType.FIXED) {
+                 // Constrain height to middleRowHeightConstraint
+                 c3 = new RectangleConstraint(
+                     0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, // Ranged width
+                     middleRowHeightConstraint, null, LengthConstraintType.FIXED); // Fixed height
+             } else {
+                 // Allow block to determine its own height
+                 c3 = new RectangleConstraint(
+                     0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, // Ranged width
+                     0.0, null, LengthConstraintType.NONE); // No height constraint
              }
-        h[3] = h[2];
+             sizeL = this.leftBlock.arrange(g2, c3);
+             w[2] = sizeL.width; // Store the arranged width
+        }
+
+        // Arrange Right Block
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+             // Calculate width available after the left block is placed
+             double widthAvailableForRight = Math.max(0.0, constraint.getWidth() - w[2]);
+             // Ensure the upper bound of the range is not less than the lower bound (0.0)
+             Range rightWidthRange = new Range(0.0, Math.max(0.0, widthAvailableForRight));
+             RectangleConstraint c4;
+             if (heightType == LengthConstraintType.FIXED) {
+                  // Constrain height to middleRowHeightConstraint
+                 c4 = new RectangleConstraint(
+                     0.0, rightWidthRange, LengthConstraintType.RANGE, // Ranged width
+                     middleRowHeightConstraint, null, LengthConstraintType.FIXED); // Fixed height
+             } else {
+                  // Allow block to determine its own height
+                 c4 = new RectangleConstraint(
+                     0.0, rightWidthRange, LengthConstraintType.RANGE, // Ranged width
+                     0.0, null, LengthConstraintType.NONE); // No height constraint
              }
+             sizeR = this.rightBlock.arrange(g2, c4);
+             w[3] = sizeR.width; // Store the arranged width
+        }
+
+        // Calculate width remaining for Center Block
+        w[4] = Math.max(0.0, constraint.getWidth() - w[2] - w[3]);
+
+        // Arrange Center Block
+        if (this.centerBlock != null) {
+             RectangleConstraint c5;
+             if (heightType == LengthConstraintType.FIXED) {
+                 // Constrain both width and height
+                 c5 = new RectangleConstraint(w[4], middleRowHeightConstraint); // Fixed width, fixed height
+             } else {
+                 // Constrain width, but allow block to determine its own height
+                 c5 = new RectangleConstraint(w[4], null, LengthConstraintType.FIXED, // Fixed width
+                                           0.0, null, LengthConstraintType.NONE); // No height constraint
+             }
+             sizeC = this.centerBlock.arrange(g2, c5);
+             // We use sizeC.height below only if container height was not fixed
+        }
+
+        // --- Step 5: Determine Actual Height of Middle Row (h[2]) ---
+        if (heightType == LengthConstraintType.FIXED) {
+             // Height was constrained by available space
+             h[2] = middleRowHeightConstraint;
+        } else {
+             // Height is the maximum of the natural heights of L, C, R blocks
+             h[2] = Math.max(sizeL.height, Math.max(sizeC.height, sizeR.height));
+        }
+        h[3] = h[2]; // Keep h[3], h[4] consistent for bounds setting, though h[2] defines row height
         h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
-        if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
-        }
 
+        // --- Step 6: Set Bounds for all blocks ---
+        double currentY = 0.0;
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
-        }
-        if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, currentY, w[0], h[0]));
+            currentY += h[0];
         }
+
+        double middleRowY = currentY; // Y-coordinate for L, C, R blocks
+        double currentX = 0.0; // X-coordinate starts at 0 for the middle row
+
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            // Use arranged width w[2] and calculated middle row height h[2]
+            this.leftBlock.setBounds(new Rectangle2D.Double(currentX, middleRowY, w[2], h[2]));
+            currentX += w[2];
+        }
+        if (this.centerBlock != null) {
+            // Use calculated center width w[4] and calculated middle row height h[2]
+            this.centerBlock.setBounds(new Rectangle2D.Double(currentX, middleRowY, w[4], h[2]));
+            currentX += w[4];
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            // Use arranged right width w[3] and calculated middle row height h[2]
+            this.rightBlock.setBounds(new Rectangle2D.Double(currentX, middleRowY, w[3], h[2]));
+            // No need to update currentX further
         }
-        if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        currentY += h[2]; // Move Y past the middle row
+
+        if (this.bottomBlock != null) {
+            // Use arranged width w[1] and height h[1]
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, currentY, w[1], h[1]));
+            // currentY += h[1]; // Update Y if needed for final height calculation (done below)
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        // --- Step 7: Calculate and return the total container size ---
+        double totalWidth = constraint.getWidth(); // Width is fixed by input constraint
+        double totalHeight = h[0] + h[2] + h[1]; // Sum of the heights of the three rows
+        return new Size2D(totalWidth, totalHeight);
     }
\ No newline at end of file
