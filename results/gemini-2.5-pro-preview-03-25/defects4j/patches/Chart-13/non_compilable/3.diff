diff --git a/tmp/3a3359b7-3756-49dc-8619-1744bf7684a8_buggy.java b/tmp/fba2136a-32aa-40f8-99f2-bc41fddab8a3_fixed.java
index 63a7c80..609d4ce 100644
--- a/tmp/3a3359b7-3756-49dc-8619-1744bf7684a8_buggy.java
+++ b/tmp/fba2136a-32aa-40f8-99f2-bc41fddab8a3_fixed.java
@@ -1,77 +1,106 @@
     /**
-     * Arranges the items within a container.
+     * Arranges the items within a container. This method is used when the
+     * container has a fixed width and a fixed height. It is protected so
+     * that subclasses (if any) can override it. This method is called by
+     * {@link #arrange(Graphics2D, RectangleConstraint)}.
      *
      * @param container  the container.
-     * @param constraint  the constraint.
      * @param g2  the graphics device.
+     * @param constraint  the constraint.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        w[0] = constraint.getWidth(); // Fixed width for top/bottom
+
+        // Arrange Top
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            // Constraint: Fixed width w[0], height range [0, constraint.getHeight()]
+            RectangleConstraint c1 = constraint.toRangeWidth(w[0]).toRangeHeight(
+                    new Range(0.0, constraint.getHeight()));
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+
+        // Arrange Bottom
+        w[1] = w[0]; // Same fixed width as top
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            // Constraint: Fixed width w[1], height range [0, max(0, constraint.getHeight() - h[0])]
+            // Ensure the upper bound of the range is not negative
+            double availableHeight = Math.max(0.0, constraint.getHeight() - h[0]);
+            RectangleConstraint c2 = constraint.toRangeWidth(w[1]).toRangeHeight(
+                    new Range(0.0, availableHeight));
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // Determine nominal height constraint for middle row based on fixed height logic
+        // This might be 0 if overall height constraint is NONE or if T/B already used up fixed height.
+        double h_middle_constr = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);
+
+        // Arrange Left, track max middle height required
+        double h_middle_actual = 0.0;
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            // Constraint: Fixed height h_middle_constr, width range [0, constraint.getWidth()]
+            RectangleConstraint c3 = constraint.toFixedHeight(h_middle_constr).toRangeWidth(
+                    new Range(0.0, constraint.getWidth()));
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
+            h_middle_actual = Math.max(h_middle_actual, size.height);
         }
-        h[3] = h[2];
+
+        // Arrange Right, track max middle height required
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            // Constraint: Fixed height h_middle_constr, width range [0, max(0, constraint.getWidth() - w[2])]
+            // Ensure the upper bound of the width range is not negative
+            double availableWidth = Math.max(0.0, constraint.getWidth() - w[2]);
+             RectangleConstraint c4 = constraint.toFixedHeight(h_middle_constr).toRangeWidth(
+                     new Range(0.0, availableWidth));
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
+            h_middle_actual = Math.max(h_middle_actual, size.height);
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+        // Determine width for Center, ensure not negative
+        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);
+
+        // Arrange Center, track max middle height required
         if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+            // Constraint: Fixed width w[4], fixed height h_middle_constr
+            RectangleConstraint c5 = constraint.toFixedWidth(w[4]).toFixedHeight(h_middle_constr);
+            Size2D size = this.centerBlock.arrange(g2, c5);
+            // Width w[4] is fixed by constraint c5
+            h_middle_actual = Math.max(h_middle_actual, size.height);
         }
 
+        // Now we have final dimensions: h[0], h[1], h_middle_actual, w[2], w[3], w[4]
+        // Assign actual middle height to h[2], h[3], h[4] for bounds setting
+        h[2] = h_middle_actual;
+        h[3] = h_middle_actual;
+        h[4] = h_middle_actual;
+
+        // Set Bounds using calculated dimensions
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            // Y position depends on actual middle height h[2]
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); // Use actual middle height h[2]
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            // X position depends on left and center widths
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); // Use actual middle height h[3]
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); // Use actual middle height h[4]
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        // Return calculated total size: fixed width, total calculated height
+        return new Size2D(constraint.getWidth(), h[0] + h[2] + h[1]);
     }
\ No newline at end of file
