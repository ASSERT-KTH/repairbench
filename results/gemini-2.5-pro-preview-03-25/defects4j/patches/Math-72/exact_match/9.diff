diff --git a/tmp/fba61f91-cfeb-4038-b02e-af872395a2de_buggy.java b/tmp/6e85c8b1-ad26-4e43-90c7-5a44ed9c5577_fixed.java
index 0fe7b81..c7e3979 100644
--- a/tmp/fba61f91-cfeb-4038-b02e-af872395a2de_buggy.java
+++ b/tmp/6e85c8b1-ad26-4e43-90c7-5a44ed9c5577_fixed.java
@@ -1,67 +1,75 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Use min instead of yMin for the result
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Use max instead of yMax for the result
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // If the signs of endpoints are the same, and the initial guess
+        // is not bracketed by either endpoint, then we don't have a
+        // bracketing interval. Throw an exception.
         if (yMin * yMax > 0) {
             throw MathRuntimeException.createIllegalArgumentException(
                   NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
         }
 
         // full Brent algorithm starting with provided initial guess
+        // This call should only happen if yMin * yMax < 0, meaning the
+        // endpoints bracket the root but the initial guess didn't fall
+        // conveniently to shrink the interval.
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
