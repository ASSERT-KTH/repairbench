diff --git a/tmp/9138b9b3-a0b4-4714-953b-056616f3b3f9_buggy.java b/tmp/6907b521-18fc-488e-bcfe-1834a7dca68f_fixed.java
index 0fe7b81..8c2c41e 100644
--- a/tmp/9138b9b3-a0b4-4714-953b-056616f3b3f9_buggy.java
+++ b/tmp/6907b521-18fc-488e-bcfe-1834a7dca68f_fixed.java
@@ -1,67 +1,77 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Use min as the result, not yMin
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Use max as the result, not yMax
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // Check if the endpoints bracket the root otherwise. This also catches
+        // the case where yMin and yMax have the same sign but yInitial has the opposite sign.
+        // In this case, the calls above to solve with reduced intervals will find the root.
         if (yMin * yMax > 0) {
+            // We expect one of the previous checks to have handled the case
+            // where min or max is the root. If we get here with yMin * yMax > 0,
+            // and neither endpoint was close enough to zero, and the initial guess
+            // didn't bracket the root with either endpoint, then we don't have
+            // a guaranteed root bracket.
              throw MathRuntimeException.createIllegalArgumentException(
                    NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
         }
 
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
