diff --git a/tmp/96685cae-5682-4a85-9225-3ffea03a4268_buggy.java b/tmp/da276c6e-5b29-429b-8c30-f6cd0a67a5c0_fixed.java
index fd74156..365a537 100644
--- a/tmp/96685cae-5682-4a85-9225-3ffea03a4268_buggy.java
+++ b/tmp/da276c6e-5b29-429b-8c30-f6cd0a67a5c0_fixed.java
@@ -1,110 +1,134 @@
     /**
      * @param contentTypeSer Optional explicit type information serializer
      *    to use for contained values (only used for properties that are
      *    of container type)
      */
     @SuppressWarnings("deprecation")
     protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
         throws JsonMappingException
     {
         // do we have annotation that forces type to use (to declared type or its super type)?
         JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
 
         // Container types can have separate type serializers for content (value / element) type
         if (contentTypeSer != null) {
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
              *    type information for contents. Should work well (for JAXB case); can be
              *    revisited if this causes problems.
              */
             if (serializationType == null) {
 //                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
                 serializationType = declaredType;
             }
             JavaType ct = serializationType.getContentType();
             // Not exactly sure why, but this used to occur; better check explicitly:
             if (ct == null) {
-                throw new IllegalStateException("Problem trying to create BeanPropertyWriter for property '"
-                        +propDef.getName()+"' (of type "+_beanDesc.getType()+"); serialization type "+serializationType+" has no content");
+                // 05-Mar-2017, tatu: Should this ever occur? It did in past, trying to see if it still does
+                prov.reportBadDefinition(_beanDesc.getType(), String.format(
+                        "Problem trying to create BeanPropertyWriter for property '%s' (of type %s); serialization type %s has no content",
+                        propDef.getName(), _beanDesc.getType(), serializationType));
             }
             serializationType = serializationType.withContentTypeHandler(contentTypeSer);
             ct = serializationType.getContentType();
         }
         
         Object valueToSuppress = null;
         boolean suppressNulls = false;
 
+        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
+        //   for inclusion filtering purposes (not just serialization type)
+        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
+
         JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());
         JsonInclude.Include inclusion = inclV.getValueInclusion();
         if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
             inclusion = JsonInclude.Include.ALWAYS;
         }
 
-        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
-        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
-        
         switch (inclusion) {
         case NON_DEFAULT:
             // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
             //    so that if enclosing class has this, we may need to values of property,
             //    whereas for global defaults OR per-property overrides, we have more
             //    static definition. Sigh.
             // First: case of class specifying it; try to find POJO property defaults
-            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
-                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
-            } else {
-                valueToSuppress = getDefaultValue(actualType);
+            // 12-Jul-2016, tatu: Ideally would use getter type, not field type, but...
+            // 13-Jul-2016, tatu: Let's try actual type, see if that works better overall
+            //   ... note that this should only be done if enclosing class has the setting...
+
+            // 16-Aug-2016, tatu: To fix [databind#1347], need to handle explicit default value
+            Object defaultV = propDef.getMetadata().getDefaultValue();
+            if (defaultV == null) {
+                defaultV = getDefaultValue(actualType);
             }
-            if (valueToSuppress == null) {
+
+            if (defaultV == null) {
                 suppressNulls = true;
+                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; // since default is null
             } else {
-                if (valueToSuppress.getClass().isArray()) {
-                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
+                if (defaultV.getClass().isArray()) {
+                    valueToSuppress = ArrayBuilders.getArrayComparator(defaultV);
+                }
+                // just use the value itself as marker, otherwise
+            }
+            // 23-Mar-2017, tatu: As per [databind#1548], must verify that the value is actual
+            //    instance of property type... can't do that earlier because property type not
+            //    passed, but here we do have it.
+            // 02-Jun-2017, tatu: Actually, need `actualType`, not `declaredType`...
+            if (valueToSuppress != null) {
+                if (!actualType.isTypeOrSubTypeOf(valueToSuppress.getClass())) {
+                    // 19-Apr-2018, tatu: Maybe this should be an exception instead...
+                    prov.reportBadDefinition(actualType,
+                            String.format("Default value type (%s) incompatible with type %s",
+                                    ClassUtil.classNameOf(valueToSuppress), actualType));
                 }
             }
-
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
             // always suppress nulls
             suppressNulls = true;
             // and for referential types, also "empty", which in their case means "absent"
-            if (declaredType.isReferenceType()) {
+            // 12-Jul-2016, tatu: As per [databind#1256], need to use actual type...
+            if (actualType.isReferenceType()) { // <<< FIX: Use actualType instead of declaredType
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         case NON_EMPTY:
             // always suppress nulls
             suppressNulls = true;
             // but possibly also 'empty' values:
             valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             break;
         case NON_NULL:
             suppressNulls = true;
             // fall through
         case ALWAYS: // default
-        default:
+        default: // should not happen but just in case
             // we may still want to suppress empty collections, as per [JACKSON-254]:
-            if (declaredType.isContainerType()
+            // 12-Jul-2016, tatu: Ok, this is tricky... originally used declared type,
+            //   but that may not be right. Let's try `actualType` instead.
+            if (actualType.isContainerType()
                     && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         }
         BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
                 am, _beanDesc.getClassAnnotations(), declaredType,
                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);
 
         // How about custom null serializer?
         Object serDef = _annotationIntrospector.findNullSerializer(am);
         if (serDef != null) {
             bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
         }
         // And then, handling of unwrapping
         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
         if (unwrapper != null) {
             bpw = bpw.unwrappingWriter(unwrapper);
         }
         return bpw;
     }
\ No newline at end of file
