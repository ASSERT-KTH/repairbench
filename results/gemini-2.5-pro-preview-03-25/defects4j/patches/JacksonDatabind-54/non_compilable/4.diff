diff --git a/tmp/56b0f257-d052-4be6-80da-58810b76659a_buggy.java b/tmp/ed129ce0-439d-495e-b8d0-a53d39397e95_fixed.java
index fd74156..0354d73 100644
--- a/tmp/56b0f257-d052-4be6-80da-58810b76659a_buggy.java
+++ b/tmp/ed129ce0-439d-495e-b8d0-a53d39397e95_fixed.java
@@ -1,110 +1,147 @@
     /**
      * @param contentTypeSer Optional explicit type information serializer
      *    to use for contained values (only used for properties that are
      *    of container type)
      */
     @SuppressWarnings("deprecation")
     protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
         throws JsonMappingException
     {
         // do we have annotation that forces type to use (to declared type or its super type)?
         JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
 
         // Container types can have separate type serializers for content (value / element) type
         if (contentTypeSer != null) {
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
              *    type information for contents. Should work well (for JAXB case); can be
              *    revisited if this causes problems.
              */
             if (serializationType == null) {
 //                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
                 serializationType = declaredType;
             }
             JavaType ct = serializationType.getContentType();
             // Not exactly sure why, but this used to occur; better check explicitly:
             if (ct == null) {
+                // 03-Jun-2016, tatu: Let's add some sanity checks for common issues, like
+                //    trying to apply refersializers on non-container types
+                if (declaredType.isContainerType() || declaredType.isReferenceType()) {
+                    throw new IllegalStateException("Problem trying to create BeanPropertyWriter for property '"
+                            +propDef.getName()+"' (of type "+_beanDesc.getType()+"); serialization type "+serializationType+" has no content");
+                }
+                // otherwise, let's just quietly ignore Øº seems likely to be a configuration/setup error...
+                // -> 18-Oct-2016, tatu: Actually, let's not do that: configuration by itself should not hide things.
+                //    But ideally we'd only fail if there's relevant annotation? For now, keep failing
                 throw new IllegalStateException("Problem trying to create BeanPropertyWriter for property '"
                         +propDef.getName()+"' (of type "+_beanDesc.getType()+"); serialization type "+serializationType+" has no content");
             }
             serializationType = serializationType.withContentTypeHandler(contentTypeSer);
             ct = serializationType.getContentType();
         }
         
         Object valueToSuppress = null;
         boolean suppressNulls = false;
 
-        JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());
+        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
+        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
+
+        // 18-Oct-2016, tatu: [databind#1361] Need to ensure that default value is calculated
+        //  using the property definition, not from global defaults, for structure types
+        //  since they are unlikely to have global defaults.
+        JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(), _defaultInclusion)
+                .withOverrides(propDef.findInclusion());
+
         JsonInclude.Include inclusion = inclV.getValueInclusion();
+
         if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
             inclusion = JsonInclude.Include.ALWAYS;
         }
         
-        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
-        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
-        
         switch (inclusion) {
         case NON_DEFAULT:
             // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
             //    so that if enclosing class has this, we may need to values of property,
             //    whereas for global defaults OR per-property overrides, we have more
             //    static definition. Sigh.
-            // First: case of class specifying it; try to find POJO property defaults
-            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
-                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
-            } else {
-                valueToSuppress = getDefaultValue(actualType);
-            }
-            if (valueToSuppress == null) {
-                suppressNulls = true;
-            } else {
-                if (valueToSuppress.getClass().isArray()) {
-                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
-                }
-            }
+            // 18-Oct-2016, tatu: As per [databind#1361], need calculation refinement, check
+            //   POJO properties for objects, exclusion values for primitives
 
+            Object defValue;
+            if (actualType.isContainerType() || actualType.isReferenceType()) {
+                 // 23-Apr-2018, tatu: For [databind#1998], need to separate default value definition
+                 //    (fixed, structural) from possibly changing inclusion criteria. Let's fetch
+                 //    default value first:
+                 defValue = BeanPropertyWriter.MARKER_FOR_EMPTY;
+            } else if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
+                defValue = getPropertyDefaultValue(propDef.getName(), am, actualType);
+            } else {
+                defValue = getDefaultValue(actualType);
+            }
+            if (defValue == null) {
+                suppressNulls = true;
+            } else {
+                 // 23-Apr-2018, tatu: For [databind#1998], need to ensure that "empty" marker
+                 //    is NOT used as default value, but only for deciding whether to
+                 //    consider property itself potentially suppressable
+                 if (defValue == BeanPropertyWriter.MARKER_FOR_EMPTY) {
+                     // For container/reference types, leave valueToSuppress as null, keep suppressNulls false,
+                     // and let `BeanPropertyWriter.serializeAsField` handle the logic for non-empty/present checks
+                 } else {
+                     valueToSuppress = defValue;
+                     if (defValue.getClass().isArray()) {
+                         valueToSuppress = ArrayBuilders.getArrayComparator(defValue);
+                     }
+                 }
+            }
+            // 23-Apr-2018, tatu: [databind#1998] Need to ensure that default check is properly done,
+            //    so let `BeanPropertyWriter` do it. Note that `valueToSuppress` is only
+            //    used for initial check: it is NOT the value used for comparisons.
+            //    Need to keep `suppressNulls` as `false` pending check for actual default value comparison.
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
             // always suppress nulls
             suppressNulls = true;
             // and for referential types, also "empty", which in their case means "absent"
-            if (declaredType.isReferenceType()) {
+            // 12-Jul-2016, tatu: [databind#1256] Need to use `actualType` not `declaredType`
+            if (actualType.isReferenceType()) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         case NON_EMPTY:
             // always suppress nulls
             suppressNulls = true;
             // but possibly also 'empty' values:
             valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             break;
         case NON_NULL:
             suppressNulls = true;
             // fall through
         case ALWAYS: // default
         default:
             // we may still want to suppress empty collections, as per [JACKSON-254]:
-            if (declaredType.isContainerType()
+            // 12-Jul-2016, tatu: [databind#1256] Need to use `actualType` not `declaredType`
+            if (actualType.isContainerType()
                     && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         }
         BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
                 am, _beanDesc.getClassAnnotations(), declaredType,
                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);
 
         // How about custom null serializer?
         Object serDef = _annotationIntrospector.findNullSerializer(am);
         if (serDef != null) {
             bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
         }
         // And then, handling of unwrapping
         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
         if (unwrapper != null) {
             bpw = bpw.unwrappingWriter(unwrapper);
         }
         return bpw;
     }
\ No newline at end of file
