diff --git a/tmp/47bbff2b-0ca7-4dcd-b734-f8b69a52e645_buggy.java b/tmp/c604a062-4a08-495f-b823-384313c1cab0_fixed.java
index fd74156..1f91c25 100644
--- a/tmp/47bbff2b-0ca7-4dcd-b734-f8b69a52e645_buggy.java
+++ b/tmp/c604a062-4a08-495f-b823-384313c1cab0_fixed.java
@@ -1,110 +1,139 @@
     /**
      * @param contentTypeSer Optional explicit type information serializer
      *    to use for contained values (only used for properties that are
      *    of container type)
      */
     @SuppressWarnings("deprecation")
     protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
         throws JsonMappingException
     {
         // do we have annotation that forces type to use (to declared type or its super type)?
         JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
 
         // Container types can have separate type serializers for content (value / element) type
         if (contentTypeSer != null) {
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
              *    type information for contents. Should work well (for JAXB case); can be
              *    revisited if this causes problems.
              */
             if (serializationType == null) {
 //                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
                 serializationType = declaredType;
             }
             JavaType ct = serializationType.getContentType();
             // Not exactly sure why, but this used to occur; better check explicitly:
             if (ct == null) {
+                // 03-Aug-2016, tatu: Needs to be IllegalStateException, not IAE
                 throw new IllegalStateException("Problem trying to create BeanPropertyWriter for property '"
                         +propDef.getName()+"' (of type "+_beanDesc.getType()+"); serialization type "+serializationType+" has no content");
             }
+            // 03-Aug-2016, tatu: And further, need to append handler...
             serializationType = serializationType.withContentTypeHandler(contentTypeSer);
             ct = serializationType.getContentType();
         }
         
         Object valueToSuppress = null;
         boolean suppressNulls = false;
 
-        JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());
+        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
+        //    This is the type used for potentially accessing default value, filtering etc
+        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
+
+        // What is the inclusion criteria? Can be set globally, locally for type;
+        // or specifically for property. Locally first overriding global, then
+        // property annotation overriding local definition?
+        // 11-Nov-2015, tatu: Need to combine class defaults too. Annoying...
+        JsonInclude.Value inclV = _defaultInclusion
+                .withOverrides(propDef.findInclusion())
+                // 12-Jul-2016, tatu: Should perhaps check type refinement?
+                .withOverrides(_config.getDefaultPropertyInclusion(actualType.getRawClass(), _defaultInclusion));
+
         JsonInclude.Include inclusion = inclV.getValueInclusion();
+
         if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
             inclusion = JsonInclude.Include.ALWAYS;
         }
 
-        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
-        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
-        
         switch (inclusion) {
         case NON_DEFAULT:
             // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
             //    so that if enclosing class has this, we may need to values of property,
             //    whereas for global defaults OR per-property overrides, we have more
             //    static definition. Sigh.
             // First: case of class specifying it; try to find POJO property defaults
+            // 13-Jul-2016, tatu: Let's simplify this bit: problem is that we really need
+            //    information from BeanDescription, not just AnnotationIntrospector
+            // Accessing host object property's default value requires knowledge of host Class,
+            // instance... whereas default value for specific type is easier (just requires type).
+            // Punt for now; may need to reconsider?
+            /*
             if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
                 valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
             } else {
                 valueToSuppress = getDefaultValue(actualType);
             }
+            */
+            // 16-Aug-2016, tatu: As per [databind#1331], need to allow getPropertyDefaultValue()
+            //    always, but only use if not `null`. Note that we are using non-getter member
+            //    (usually field) for access;getter may not yet be available.
+            valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
+            if (valueToSuppress == null) {
+                valueToSuppress = getDefaultValue(actualType);
+            }
+
             if (valueToSuppress == null) {
                 suppressNulls = true;
             } else {
                 if (valueToSuppress.getClass().isArray()) {
                     valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
                 }
             }
-
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
             // always suppress nulls
             suppressNulls = true;
             // and for referential types, also "empty", which in their case means "absent"
-            if (declaredType.isReferenceType()) {
+            // 12-Jul-2016, tatu: [databind#1256] Need to use `actualType` not `declaredType`
+            if (actualType.isReferenceType()) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         case NON_EMPTY:
             // always suppress nulls
             suppressNulls = true;
             // but possibly also 'empty' values:
             valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             break;
         case NON_NULL:
             suppressNulls = true;
             // fall through
         case ALWAYS: // default
         default:
             // we may still want to suppress empty collections, as per [JACKSON-254]:
-            if (declaredType.isContainerType()
+            // 12-Jul-2016, tatu: [databind#1256] Need to use `actualType` not `declaredType`
+            if (actualType.isContainerType()
                     && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         }
+        // 12-Jul-2016, tatu: [databind#1256] Need to construct with `actualType` not `declaredType`
         BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
-                am, _beanDesc.getClassAnnotations(), declaredType,
+                am, _beanDesc.getClassAnnotations(), actualType, // Fix: Use actualType
                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);
 
         // How about custom null serializer?
         Object serDef = _annotationIntrospector.findNullSerializer(am);
         if (serDef != null) {
             bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
         }
         // And then, handling of unwrapping
         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
         if (unwrapper != null) {
             bpw = bpw.unwrappingWriter(unwrapper);
         }
         return bpw;
     }
\ No newline at end of file
