diff --git a/tmp/e945d1ed-aa9f-4819-8c7d-00c359bc0c47_buggy.java b/tmp/a10d6d90-f458-4a70-a814-ccb20181f585_fixed.java
index 40f74f7..0196767 100644
--- a/tmp/e945d1ed-aa9f-4819-8c7d-00c359bc0c47_buggy.java
+++ b/tmp/a10d6d90-f458-4a70-a814-ccb20181f585_fixed.java
@@ -1,50 +1,106 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
+            // Node must be an element to have a name test match.
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+            // The namespace URI required by the test (null if node must be in null namespace, or from prefix mapping)
+            String requiredNS = nodeNameTest.getNamespaceURI();
+            // Is the test name component '*' (e.g., 'prefix:*' or '*')?
+            boolean isTestNameWildcard = nodeNameTest.isWildcard();
+            // The local name required by the test (e.g., "ElementB", "*")
+            String testLocalName = testName.getName();
+            // The prefix used in the XPath expression (e.g., "B", "*", or null)
+            // This helps differentiate 'name' (null prefix, requires null/default ns) from '*:name' (* prefix, requires any ns)
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+
+            // Handle '*' node test (match any element name in any namespace)
+            // This corresponds to: name='*', prefix=null, requiredNS=null
+            if (isTestNameWildcard && testPrefix == null) {
                  return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+            // Check local name match if the test name is not a wildcard.
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
+            // We need an equalStrings helper that handles nulls safely (like Objects.equals)
+            // Assuming equalStrings exists and works like Objects.equals
+            if (!isTestNameWildcard && !equalStrings(testLocalName, nodeLocalName)) {
+                return false; // Local names don't match
+            }
+
+            // At this point, local names match, or the test name is a wildcard (case 'prefix:*').
+
+            // Handle '*:name' node test (match specific name in any namespace)
+            // This corresponds to: name='name', prefix='*', requiredNS=null
+            // The key identifier is testPrefix being "*"
+            if (testPrefix != null && testPrefix.equals("*")) {
+                 // Local name already matched above (since !isTestNameWildcard is true here).
+                 // Namespace condition is wildcard ('any'), so return true.
+                 return true;
+            }
+
+            // Handle remaining cases: 'prefix:name', 'name', 'prefix:*'
+            // These all require matching the namespace URI.
+            // 'prefix:name' -> requiredNS=uri, isTestNameWildcard=false. Match requiredNS against nodeNS.
+            // 'name' -> requiredNS=null (or default), isTestNameWildcard=false. Match requiredNS against nodeNS.
+            // 'prefix:*' -> requiredNS=uri, isTestNameWildcard=true. Match requiredNS against nodeNS.
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
-            }
-            return false;
+            // Compare required namespace with actual node namespace
+            return equalStrings(requiredNS, nodeNS);
+
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
+                    // Definition of node() test varies. JXPath spec says any node.
+                    // This code originally matched only ELEMENT and DOCUMENT.
+                    // Keep original behavior unless test indicates otherwise.
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
+                    // This tests for the PI type, does not match PI target name
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
-            return false;
+            return false; // Unknown NodeTypeTest type
         }
         if (test instanceof ProcessingInstructionTest) {
+            // This handles PI test with specific target name.
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
+                // Assuming String.equals is sufficient (null target names not expected?)
+                // Use equalStrings for safety? Let's stick to original .equals
                 return testPI.equals(nodePI);
             }
+            // Node is not a PI node.
+            return false;
         }
+        // Unrecognized test type or node type mismatch for PI test.
         return false;
     }
+
+    /**
+     * Helper method to compare two strings for equality, handling nulls safely.
+     * Assumed to be available based on original code's usage.
+     * @param s1 First string
+     * @param s2 Second string
+     * @return true if strings are equal (or both null)
+     */
+    private static boolean equalStrings(String s1, String s2) {
+        if (s1 == null) {
+            return s2 == null;
+        }
+        return s1.equals(s2);
+    }
\ No newline at end of file
