diff --git a/tmp/67a9c0a3-8e4a-4721-87b9-4eb258299b9d_buggy.java b/tmp/e472ea17-c84f-4dd7-bb57-9ee9cb02a27d_fixed.java
index 40f74f7..470bc8f 100644
--- a/tmp/67a9c0a3-8e4a-4721-87b9-4eb258299b9d_buggy.java
+++ b/tmp/e472ea17-c84f-4dd7-bb57-9ee9cb02a27d_fixed.java
@@ -1,50 +1,125 @@
+import org.apache.commons.jxpath.ri.Compiler;
+import org.apache.commons.jxpath.ri.QName;
+import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
+import org.apache.commons.jxpath.ri.compiler.NodeTest;
+import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
+import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
+import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer; // Assuming this class exists and provides the helper methods
+import org.w3c.dom.Node;
+import org.w3c.dom.ProcessingInstruction;
+
+// Auxiliary static method assumed to exist elsewhere or be commonly available
+// private static boolean equalStrings(String s1, String s2) {
+//    return s1 == null ? s2 == null : s1.equals(s2);
+// }
+
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+            String testLocalName = testName.getName();
+            String requiredNsURI = nodeNameTest.getNamespaceURI();
+            boolean isWildcardName = nodeNameTest.isWildcard(); // testLocalName.equals("*")
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+
+            // Handle '*' test (wildcard name, no prefix --> matches any element regardless of namespace)
+            if (isWildcardName && testPrefix == null) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+
+            // Determine the node's effective namespace URI and local name
+            String nodeNsURI = DOMNodePointer.getNamespaceURI(node); // Use helper (calls node.getNamespaceURI())
+
+            // Calculate the effective local name, handling non-namespace-aware DOMs where node.getLocalName() might be null
+            String nodeEffectiveLocalName = node.getLocalName();
+            if (nodeEffectiveLocalName == null) {
+                // Fallback for non-NS aware nodes, or nodes created with createElement instead of createElementNS
+                // In this case, node.getNodeName() might return "prefix:localName" or just "localName"
+                String nodeName = node.getNodeName();
+                // We need the local part for comparison
+                int colon = nodeName.indexOf(':');
+                if (colon >= 0) {
+                    // If there's a prefix, extract the part after the colon
+                    nodeEffectiveLocalName = nodeName.substring(colon + 1);
+                } else {
+                    // Otherwise, the whole nodeName is the local name
+                    nodeEffectiveLocalName = nodeName;
                 }
+                // Note: For such nodes, nodeNsURI is typically null, which is correctly retrieved by DOMNodePointer.getNamespaceURI.
+            }
+
+            // Check local name match
+            // It matches if the test name is a wildcard (like prefix:*) or if the local names are equal.
+            boolean localNameMatches = isWildcardName || testLocalName.equals(nodeEffectiveLocalName);
+
+            if (!localNameMatches) {
+                // If local names don't match (and test wasn't a name wildcard), then this node doesn't match the test.
                 return false;
             }
+
+            // Local name matches (or is wildcard like prefix:*)
+            // Now, check if the namespace URIs match.
+            // This correctly handles:
+            // - prefix:local (compares requiredNsURI from prefix with nodeNsURI)
+            // - prefix:* (localNameMatches was true due to isWildcardName=true, compares requiredNsURI with nodeNsURI)
+            // - localName (requiredNsURI is default NS or null, compares with nodeNsURI)
+            // - *:localName (if requiredNsURI is null, compares null with nodeNsURI - may need refinement if *:localName should match *any* NS)
+            // - '*' was handled earlier.
+            // The `equalStrings` helper correctly handles null comparisons (null URI means no namespace).
+            return equalStrings(requiredNsURI, nodeNsURI);
+
+        }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
+                    // NODE_TYPE_NODE test typically matches Element nodes in JXPath/DOM context.
+                    // The original code also included Document nodes, which might be correct depending on JXPath interpretation.
+                    // Retaining original logic. If only elements should match, remove `|| nodeType == Node.DOCUMENT_NODE`.
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
+                // Test PI target name must match the node's PI target name.
                 return testPI.equals(nodePI);
             }
+            // If it's not a PI node, it cannot match a ProcessingInstructionTest
+             return false;
         }
+        // Unknown test type or node type did not match test conditions
         return false;
     }
+
+    /**
+     * Helper function to compare strings, handling nulls.
+     * (Copied from original context for completeness within this fixed function scope,
+     * assuming it was available/accessible)
+     * @param s1 string 1
+     * @param s2 string 2
+     * @return true if strings are equal
+     */
+    private static boolean equalStrings(String s1, String s2) {
+        if (s1 == null) {
+            return s2 == null;
+        }
+        return s1.equals(s2);
+    }
\ No newline at end of file
