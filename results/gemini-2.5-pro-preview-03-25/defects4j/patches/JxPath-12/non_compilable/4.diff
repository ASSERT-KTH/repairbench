diff --git a/tmp/7a79b0c4-2cdc-4be2-b599-f954ad90e895_buggy.java b/tmp/786db582-9d9e-4288-8ae2-cb8826915b52_fixed.java
index 40f74f7..dd52f63 100644
--- a/tmp/7a79b0c4-2cdc-4be2-b599-f954ad90e895_buggy.java
+++ b/tmp/786db582-9d9e-4288-8ae2-cb8826915b52_fixed.java
@@ -1,50 +1,113 @@
+import org.apache.commons.jxpath.ri.Compiler;
+import org.apache.commons.jxpath.ri.QName;
+import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
+import org.apache.commons.jxpath.ri.compiler.NodeTest;
+import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
+import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
+import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
+import org.w3c.dom.Attr;
+import org.w3c.dom.CDATASection;
+import org.w3c.dom.Comment;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.ProcessingInstruction;
+import org.w3c.dom.Text;
+
+// Note: Imports added for context, they might differ slightly in the original file.
+// Also assuming 'equalStrings' is accessible, e.g., as a static method in the same class or a utility class.
+
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
+        // A NodeNameTest tests for elements by name
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+        String testLocalName = testName.getName();
         String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+        // testNamespaceURI is the namespace URI the prefix is bound to in the XPath expression context,
+        // or null if the test is for an unprefixed name.
+        String testNamespaceURI = nodeNameTest.getNamespaceURI();
+        boolean isWildcardTest = nodeNameTest.isWildcard(); // True if the local name part of the test is '*'
+
+        // Handle the '*' test (matches any element)
+        if (isWildcardTest && testPrefix == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+
+        // Determine the node's local name. Use node.getLocalName() if available (DOM Level 2+).
+        // Fall back to parsing node.getNodeName() for potentially older DOM levels or nodes
+        // created with createElement (which might set nodeName to "prefix:localName" but
+        // leave localName as null).
+        String nodeLocalName = node.getLocalName();
+        if (nodeLocalName == null) {
+            String nodeName = node.getNodeName();
+            // Use lastIndexOf, similar to DOMNodePointer.getPrefix logic
+            int idx = nodeName.lastIndexOf(':');
+            if (idx >= 0) {
+                nodeLocalName = nodeName.substring(idx + 1);
+            } else {
+                nodeLocalName = nodeName;
             }
+        }
+
+        // Check if the local names match
+        boolean localNamesMatch = testLocalName.equals(nodeLocalName);
+
+        // The node matches if:
+        // 1. The test is 'prefix:*' (isWildcardTest is true) AND the namespaces match.
+        // 2. The local names match AND the namespaces match.
+        if (isWildcardTest || localNamesMatch) {
+            // Compare the namespace URI expected by the test with the node's actual namespace URI.
+            // node.getNamespaceURI() returns null if the node is not in a namespace.
+            String nodeNamespaceURI = node.getNamespaceURI();
+            // Use the existing equalStrings method for comparison (assuming it's accessible)
+            return equalStrings(testNamespaceURI, nodeNamespaceURI);
+        }
+
+        // Local names didn't match, and it wasn't a 'prefix:*' test
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
+                // XPath 'node()' test typically matches any node.
+                // The original code only matched Element and Document nodes.
+                // Retaining original behavior unless specification requires otherwise.
+                // Consider returning true for any node type if this represents 'node()'.
                  return nodeType == Node.ELEMENT_NODE
                          || nodeType == Node.DOCUMENT_NODE;
+//                return true; // If NODE_TYPE_NODE represents the XPath node() test
             case Compiler.NODE_TYPE_TEXT :
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
+                return nodeType == Node.TEXT_NODE
+                    || nodeType == Node.CDATA_SECTION_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
+                // Matches PI nodes, ignoring the target.
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
-            return false;
+        return false; // Should not happen with valid NodeTypeTest constants
     }
     if (test instanceof ProcessingInstructionTest) {
+        // Matches PI nodes with a specific target.
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
+            // Use equals for comparison as in original code. Assumes target is non-null.
             return testPI.equals(nodePI);
         }
     }
+    // Unknown or unhandled NodeTest type
     return false;
 }
+
+// Assume this helper method exists elsewhere and performs a null-safe string comparison.
+// private static boolean equalStrings(String s1, String s2) { ... }
