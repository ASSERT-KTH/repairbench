diff --git a/tmp/41fc5ff8-d277-451e-bccb-cb861c6257bc_buggy.java b/tmp/8bd0c351-4811-4e52-bcae-eeed279fbc5f_fixed.java
index 40f74f7..220a67e 100644
--- a/tmp/41fc5ff8-d277-451e-bccb-cb861c6257bc_buggy.java
+++ b/tmp/8bd0c351-4811-4e52-bcae-eeed279fbc5f_fixed.java
@@ -1,50 +1,98 @@
+    /**
+     * Test a node.
+     * @param node Node to test
+     * @param test NodeTest to apply
+     * @return true if the test passes
+     */
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
+            // NodeNameTest tests only ELEMENT nodes
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+            String testLocalName = testName.getName();
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
+            boolean isNameWildcard = nodeNameTest.isWildcard(); // Test local name is '*'
+
+            // Step 1: Check local name match
+            // If the test's local name is not a wildcard, it must match the node's local name.
+            if (!isNameWildcard) {
+                String nodeLocalName = DOMNodePointer.getLocalName(node);
+                // Note: Use Objects.equals for null-safety, although local names shouldn't be null for elements.
+                // Assuming equalStrings handles nulls appropriately as well.
+                if (!equalStrings(testLocalName, nodeLocalName)) {
+                    return false; // Local names mismatch
                 }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
+            }
+            // If we are here, either the test's local name was '*' or it matched the node's local name.
+
+            // Step 2: Check namespace match
+
+            // Case A: Test prefix is '*' (e.g., *:name or *:*). Matches any namespace.
+            if ("*".equals(testPrefix)) {
+                return true; // Name matched, prefix is wildcard, namespace match is implicit.
+            }
+
+            // Case B: Test prefix is specific or null (e.g., prefix:name, name, prefix:*, *).
+            // Namespaces must match.
+            String namespaceURI = nodeNameTest.getNamespaceURI(); // Expected NS URI based on test prefix (or default NS)
+            String nodeNS = DOMNodePointer.getNamespaceURI(node); // Actual NS URI of the node
+
+            // Use a null-safe equality check for namespace URIs
             return equalStrings(namespaceURI, nodeNS);
         }
-            return false;
-        }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
+                    // In DOM model, NODE_TYPE_NODE test selects Element nodes.
+                    // Document node is not reachable via navigation, context node can be a document node.
+                    // This behavior is somewhat confusing - different models may vary.
+                    // Sticking to original logic for now:
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
+                    // Check for specific PI target added below. Is this reachable?
+                    // Original logic seems to imply this case handles PI('*')
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
-            return false;
+            return false; // Should not happen if NodeTypeTest has valid type
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
-                return testPI.equals(nodePI);
+                // Use null-safe equality check
+                return equalStrings(testPI, nodePI);
             }
+            // Node is not a PI node, so it cannot match a ProcessingInstructionTest
+            return false;
         }
+        // Unknown test type
         return false;
     }
+
+    /**
+     * Helper method for null-safe string comparison.
+     * Assumes the behavior needed by the original code.
+     * @param s1 String 1
+     * @param s2 String 2
+     * @return true if strings are equal (null == null is true)
+     */
+    private static boolean equalStrings(String s1, String s2) {
+        if (s1 == null) {
+            return s2 == null;
+        }
+        return s1.equals(s2);
+    }
\ No newline at end of file
