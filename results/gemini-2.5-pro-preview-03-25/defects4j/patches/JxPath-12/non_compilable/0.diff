diff --git a/tmp/6e7a0f0c-e844-4412-b9d6-8d750d72f4e7_buggy.java b/tmp/f6484a90-d24f-4f4f-a80b-2c67046f9e7d_fixed.java
index 40f74f7..a42196c 100644
--- a/tmp/6e7a0f0c-e844-4412-b9d6-8d750d72f4e7_buggy.java
+++ b/tmp/f6484a90-d24f-4f4f-a80b-2c67046f9e7d_fixed.java
@@ -1,50 +1,101 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+            // Resolved namespace URI for the test (e.g., from prefix, or default)
+            String testNamespaceURI = nodeNameTest.getNamespaceURI();
+            // True if the test's local name is wildcard '*'
+            boolean isWildcardName = nodeNameTest.isWildcard();
+            // The prefix used in the test QName (e.g., "B" in "B:ElementB", null in "ElementB")
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+            // The local name specified in the test (e.g., "ElementB", "*")
+            String testLocalName = testName.getName();
+
+            // Case 1: Test is *:* (wildcard name, null prefix in QName)
+            // This matches any element node.
+            if (isWildcardName && testPrefix == null) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+
+            // Get node's properties using the helper functions which handle DOM variations
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
+            String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);
+
+            // Case 2: Test is prefix:* (wildcard name, specific prefix)
+            // This matches elements with the specified namespace URI, regardless of local name.
+            if (isWildcardName) {
+                // testPrefix is non-null here (covered by Case 1 otherwise).
+                // Compare the node's namespace URI with the test's expected namespace URI.
+                return equalStrings(testNamespaceURI, nodeNamespaceURI);
             }
+
+            // Case 3: Test is for a specific local name (prefix:name or name)
+            // Note: This logic also covers *:name if JXPath represents it with testPrefix==null
+            // and testNamespaceURI==null, but the namespace check might be incorrect for *:name.
+            // However, for prefix:name and name tests, the logic is correct.
+            if (!isWildcardName) {
+                // Check if the node's local name matches the test's local name.
+                // XPath element/attribute names are case-sensitive.
+                if (testLocalName.equals(nodeLocalName)) {
+                    // Local names match. Now compare namespace URIs.
+                    // testNamespaceURI contains the expected URI (specific, default, or null).
+                    // nodeNamespaceURI is the actual URI of the node.
+                    return equalStrings(testNamespaceURI, nodeNamespaceURI);
+                }
+                // else: Local names do not match.
+            }
+
+            // Node did not match the test criteria (e.g., local name mismatch)
             return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
+                    // Matches Element and Document nodes based on original logic
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
+            // Unknown/unhandled node type in the test
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
+                // Check if the PI target names match (case-sensitive).
                 return testPI.equals(nodePI);
             }
+            // Node is not a processing instruction
+            return false;
         }
+        // Test type is not recognized or handled
         return false;
     }
+
+    /**
+     * Helper function to compare two strings for equality, handling nulls correctly.
+     * @param s1 First string
+     * @param s2 Second string
+     * @return true if strings are equal (both null is considered equal)
+     */
+    private static boolean equalStrings(String s1, String s2) {
+        if (s1 == null) {
+            return s2 == null;
+        }
+        return s1.equals(s2);
+    }
\ No newline at end of file
