diff --git a/tmp/b11da4a1-d05a-4cc2-a156-251d2ddc4ac2_buggy.java b/tmp/c0c05b09-aa11-47f9-928e-cbde2383b2ca_fixed.java
index 40f74f7..1bd7eef 100644
--- a/tmp/b11da4a1-d05a-4cc2-a156-251d2ddc4ac2_buggy.java
+++ b/tmp/c0c05b09-aa11-47f9-928e-cbde2383b2ca_fixed.java
@@ -1,50 +1,75 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
+            // Node name tests only apply to elements
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
+            String namespaceURI = nodeNameTest.getNamespaceURI(); // Expected namespace URI from the XPath expression context
+            boolean wildcard = nodeNameTest.isWildcard(); // True if the test's local name is "*"
+            String testPrefix = testName.getPrefix(); // The prefix used in the XPath expression for this test
+
+            // Case 1: Test is "*" (wildcard local name, null prefix) - matches any element
             if (wildcard && testPrefix == null) {
                 return true;
             }
-            if (wildcard
+
+            // Case 2: Test involves specific local name or namespace wildcard
+            // Check if the test's local name is a wildcard ("prefix:*") OR if the test's local name matches the node's local name.
+            if (wildcard // True if test is "prefix:*"
                 || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
+                        .equals(DOMNodePointer.getLocalName(node))) // Compare local names if test is "prefix:name" or "name"
+            {
+                // If local names match, or if the test is "prefix:*", then check the namespace URIs.
+                String nodeNS = DOMNodePointer.getNamespaceURI(node); // Get the actual namespace URI of the DOM node
+                // Compare the expected namespace URI (resolved from the XPath context) with the actual namespace URI of the node.
+                // Assumes equalStrings handles null/empty strings appropriately according to namespace rules.
                 return equalStrings(namespaceURI, nodeNS);
             }
+            // Local name did not match (and test was not "prefix:*")
             return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
+                    // JXPath's interpretation of 'node()' test seems to be element or document.
+                    // Standard XPath 'node()' matches Element, Text, Comment, PI on applicable axes.
+                    // Keep original logic.
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
+                    // XPath 'text()' test matches Text and CDATA nodes.
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
+                    // XPath 'comment()' test matches Comment nodes.
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
+                    // XPath 'processing-instruction()' test matches PI nodes.
+                    // This specific test only checks the type, not the target name.
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
+            // Unrecognized node type constant in the NodeTypeTest
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
+            // XPath 'processing-instruction('target')' test.
+            // Check if node is a PI.
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
+                // Check if the PI target names match.
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
-                return testPI.equals(nodePI);
+                return testPI.equals(nodePI); // Original uses String.equals
             }
+            // Node is not a PI.
+            return false;
         }
+        // Unhandled test type, or node failed specific checks for handled types.
         return false;
     }
\ No newline at end of file
