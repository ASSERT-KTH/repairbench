diff --git a/tmp/05c0cf5a-a4c8-43e3-9875-90cfaaeb2e15_buggy.java b/tmp/11aff720-2e50-4b0e-8082-f9d3d284424a_fixed.java
index 40f74f7..03fb2bd 100644
--- a/tmp/05c0cf5a-a4c8-43e3-9875-90cfaaeb2e15_buggy.java
+++ b/tmp/11aff720-2e50-4b0e-8082-f9d3d284424a_fixed.java
@@ -1,50 +1,91 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+            String testLocalName = testName.getName();
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
-            }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
-            }
+            // nodeNameTest.isWildcard() means the local name part is "*"
+            boolean wildcardName = nodeNameTest.isWildcard();
+            // This is the namespace URI associated with the test prefix (or null) resolved by JXPath
+            String testNamespaceURI = nodeNameTest.getNamespaceURI();
+
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
+
+            // 1. Check local name match
+            // If the test's local name is not a wildcard, it must match the node's local name.
+            if (!wildcardName && !testLocalName.equals(nodeLocalName)) {
                 return false;
             }
+
+            // Local name matches (or is wildcard). Now check namespace.
+
+            // 2. Check namespace constraints based on the test type
+
+            // Test '*:name' (wildcard prefix, specific name): Namespace doesn't matter.
+            // JXPath Compiler represents this with prefix=="*" and namespaceURI==null.
+            if (testPrefix != null && testPrefix.equals("*")) {
+                // Local name was already checked above. Namespace is wildcarded.
+                return true;
+            }
+
+            // Test '*' (wildcard name, null prefix): Namespace doesn't matter.
+            if (wildcardName && testPrefix == null) {
+                // Name part is wildcard, prefix is null. Matches elements in any/no namespace.
+                return true;
+            }
+
+            // Test 'prefix:name', 'name' (default ns or no ns), 'prefix:*'
+            // For these tests, the namespace URIs must match.
+            // Note: For 'prefix:*', wildcardName is true, but testPrefix is not null and not "*".
+            //       For 'name', testPrefix is null, wildcardName is false.
+            //       For 'prefix:name', testPrefix is not null/ "*", wildcardName is false.
+            // The logic correctly falls through to compare namespaces for all these cases.
+            String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);
+            // Use the helper that handles nulls correctly.
+            return equalStrings(testNamespaceURI, nodeNamespaceURI);
+
+        }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
+                    // Although XPath 'node()' matches any node type, the original code
+                    // specifically checked for Element or Document. Retaining original behavior.
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
+                    // This test checks for any PI node. Specific target matching
+                    // is handled by ProcessingInstructionTest.
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
-            return false;
+            return false; // Should not be reached with valid NodeTypeTest types
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
+                // Comparison must be exact match.
                 return testPI.equals(nodePI);
             }
+            // Node is not a Processing Instruction, so it cannot match this test.
+            return false;
         }
+        // Test type not recognized or node doesn't match test constraints.
         return false;
     }
+
+    // Assume this helper function exists and correctly compares strings, handling nulls.
+    // It's defined in DOMNodePointer in the original codebase.
+    // private static boolean equalStrings(String s1, String s2) { ... }
