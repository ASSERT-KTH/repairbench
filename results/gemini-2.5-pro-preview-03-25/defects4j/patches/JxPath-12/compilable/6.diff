diff --git a/tmp/4c1ca427-989c-4186-9763-5fc90697ec04_buggy.java b/tmp/87015baa-e4f8-4c3e-b7a9-7543e5855ee5_fixed.java
index 40f74f7..9f0a1a4 100644
--- a/tmp/4c1ca427-989c-4186-9763-5fc90697ec04_buggy.java
+++ b/tmp/87015baa-e4f8-4c3e-b7a9-7543e5855ee5_fixed.java
@@ -1,50 +1,126 @@
+    /**
+     * Tests if the specified node matches the supplied NodeTest.
+     * Handles NodeNameTest, NodeTypeTest, and ProcessingInstructionTest.
+     *
+     * @param node The DOM Node to test.
+     * @param test The NodeTest to apply.
+     * @return true if the node matches the test, false otherwise.
+     */
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
+            // A null test matches any node.
             return true;
         }
         if (test instanceof NodeNameTest) {
+            // Node must be an Element to possibly match a NodeNameTest.
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
+            String testLocalName = testName.getName();
+            String testPrefix = testName.getPrefix();
+            // namespaceURI is the URI associated with testPrefix in the XPath context.
             String namespaceURI = nodeNameTest.getNamespaceURI();
+            // wildcard indicates if the test local name is '*' (e.g., prefix:*).
             boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
+
+            // Case 1: Test is * (match any element) or *:* (treated same as *).
+            // Here, wildcard is true, testPrefix is null.
             if (wildcard && testPrefix == null) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+            // Get node's actual local name and namespace URI.
+            // Assumes DOM is namespace aware, these methods return correct values.
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+
+            // Namespace comparison logic: treat null and empty string "" as equivalent.
+            boolean namespacesMatch;
+            if (namespaceURI == null || namespaceURI.isEmpty()) {
+                // If test expects null/empty NS, node must also have null/empty NS.
+                namespacesMatch = (nodeNS == null || nodeNS.isEmpty());
+            } else {
+                // If test expects a specific NS, node must have the exact same NS.
+                // Node NS can be null here, equals handles that correctly.
+                namespacesMatch = namespaceURI.equals(nodeNS);
             }
+
+            // Case 2: Test is prefix:* (wildcard local name, specific namespace).
+            // Here, wildcard is true, testPrefix is not null.
+            if (wildcard) {
+                // Only the namespace needs to match.
+                return namespacesMatch;
+            }
+
+            // Case 3: Test is QName (specific local name, specific or null namespace).
+            // Here, wildcard is false. Check both local name and namespace.
+            // This covers "prefix:localName" and "localName" (where prefix is null).
+            // Use null-safe equals for local name comparison.
+            boolean localNameMatch = (testLocalName == null ? nodeLocalName == null : testLocalName.equals(nodeLocalName));
+
+            if (localNameMatch) {
+                 // If local names match, the result depends on namespace comparison.
+                 return namespacesMatch;
+            }
+
+            // Case 4: Test is *:localName (any namespace, specific local name).
+            // This case is not explicitly handled by the structure derived from the original code.
+            // Standard JXPath might represent this differently or not support it directly
+            // in NodeNameTest in this manner. Assuming it's not required based on the fix needed.
+
+            // If local names did not match for a QName test.
             return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
-                case Compiler.NODE_TYPE_NODE :
+                // Compiler constants are specific to JXPath's internal representation.
+                // Assuming original logic reflected the intended meaning of these constants.
+                case Compiler.NODE_TYPE_NODE : // Test 'node()' - Original logic matched ELEMENT or DOCUMENT. Keep this interpretation.
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
-                case Compiler.NODE_TYPE_TEXT :
+                case Compiler.NODE_TYPE_TEXT : // Test 'text()'
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
-                case Compiler.NODE_TYPE_COMMENT :
+                case Compiler.NODE_TYPE_COMMENT : // Test 'comment()'
                     return nodeType == Node.COMMENT_NODE;
-                case Compiler.NODE_TYPE_PI :
+                case Compiler.NODE_TYPE_PI : // Test 'processing-instruction()' - Matches any PI
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
+            // Unknown node type constant in the test.
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
+            // Test 'processing-instruction('target')' - Matches specific PI target.
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
-                String testPI = ((ProcessingInstructionTest) test).getTarget();
-                String nodePI = ((ProcessingInstruction) node).getTarget();
-                return testPI.equals(nodePI);
+                String testPITarget = ((ProcessingInstructionTest) test).getTarget();
+                String nodePITarget = ((ProcessingInstruction) node).getTarget();
+                // Use null-safe equals for comparing PI targets.
+                return java.util.Objects.equals(testPITarget, nodePITarget);
             }
+             // Node is not a PI, so it cannot match this test.
+             return false;
         }
+        // The test is of an unknown or unsupported type.
         return false;
     }
+
+    /* Assume DOMNodePointer and Compiler classes are available in the context */
+    /* Assume QName class structure and methods */
+    /* Assume Node, Element, ProcessingInstruction interfaces from org.w3c.dom */
+    /* Assume NodeTest, NodeNameTest, NodeTypeTest, ProcessingInstructionTest classes from JXPath */
+
+    // Helper methods assumed to exist based on original code:
+    // static class DOMNodePointer {
+    //    public static String getLocalName(Node node) { /* ... */ return node.getLocalName(); }
+    //    public static String getNamespaceURI(Node node) { /* ... */ return node.getNamespaceURI(); }
+    // }
+    // static class Compiler { // Constants for node types
+    //    public static final int NODE_TYPE_NODE = 1;
+    //    public static final int NODE_TYPE_TEXT = 2;
+    //    public static final int NODE_TYPE_COMMENT = 3;
+    //    public static final int NODE_TYPE_PI = 4;
+    // }
\ No newline at end of file
