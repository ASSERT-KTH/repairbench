diff --git a/tmp/7147a96d-8db0-436e-9339-b74b5fed29ff_buggy.java b/tmp/815cf8ec-fe2f-4d29-8fd2-846d0baf52e2_fixed.java
index 98dde53..baa5f97 100644
--- a/tmp/7147a96d-8db0-436e-9339-b74b5fed29ff_buggy.java
+++ b/tmp/815cf8ec-fe2f-4d29-8fd2-846d0baf52e2_fixed.java
@@ -1,34 +1,71 @@
         public void head(org.jsoup.nodes.Node source, int depth) {
             namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
             if (source instanceof org.jsoup.nodes.Element) {
                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
-                String prefix = updateNamespaces(sourceEl);
-                String namespace = namespacesStack.peek().get(prefix);
-                String tagName = sourceEl.tagName();
+                // Update namespaces defined on this element AFTER inheriting parent namespaces
+                updateNamespaces(sourceEl);
+
+                String tagName = sourceEl.tagName(); // e.g., "fb:like", "div"
+                String prefix = null;
+                final int colon = tagName.indexOf(':');
+                if (colon > 0) {
+                    prefix = tagName.substring(0, colon);
+                }
+
+                // Determine the namespace URI for this element's prefix (or default namespace if no prefix)
+                // Use "" key for the default namespace
+                String namespace = namespacesStack.peek().get(prefix != null ? prefix : "");
+
+                Element el;
+                if (namespace != null) {
+                     // Namespace is declared (or default namespace exists)
+                     // Use createElementNS. tagName includes the prefix, which is correct per spec.
+                     el = doc.createElementNS(namespace, tagName);
+                } else {
+                    // No namespace found for this prefix (or no default namespace is active).
+                    // This occurs for undeclared prefixes (like <fb:like> without xmlns:fb)
+                    // or for tags in no namespace (like <html> or <p> when no default ns is declared).
+                    // The DOM spec disallows createElementNS(null, "prefix:name").
+                    // Use createElement, which creates elements in the null namespace.
+                    el = doc.createElement(tagName);
+                }
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
                 copyAttributes(sourceEl, el);
                 if (dest == null) { // sets up the root
                     doc.appendChild(el);
                 } else {
                     dest.appendChild(el);
                 }
                 dest = el; // descend
             } else if (source instanceof org.jsoup.nodes.TextNode) {
                 org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
+                // Skip empty text nodes
+                if (!sourceText.isBlank()) {
                     Text text = doc.createTextNode(sourceText.getWholeText());
-                dest.appendChild(text);
+                    append(text); // Use helper to avoid NPE if dest is null
+                }
             } else if (source instanceof org.jsoup.nodes.Comment) {
                 org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
                 Comment comment = doc.createComment(sourceComment.getData());
-                dest.appendChild(comment);
+                append(comment); // Use helper
             } else if (source instanceof org.jsoup.nodes.DataNode) {
+                // DataNodes (like <script> data) are not typically represented in standard XML DOM
+                // Jsoup's parser uses them for convenience. We can convert them to Text nodes.
                 org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
                 Text node = doc.createTextNode(sourceData.getWholeData());
+                append(node); // Use helper
+            } else {
+                // Handle other node types like DocumentType, CDataSection if needed
+                // For now, unhandled types are ignored.
+            }
+        }
+
+        // Helper method to safely append a node to the current destination or the document root
+        private void append(Node node) {
+            if (dest != null) {
                 dest.appendChild(node);
             } else {
-                // unhandled
+                doc.appendChild(node); // Append to document if dest is null (e.g., comment before root)
             }
         }
\ No newline at end of file
