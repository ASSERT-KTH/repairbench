diff --git a/tmp/b7f78bf9-2d9e-4722-9645-d21f1affa850_buggy.java b/tmp/e2f1ccf0-58e4-44bf-83d8-e9f5d02b3724_fixed.java
index 98dde53..88d0b7c 100644
--- a/tmp/b7f78bf9-2d9e-4722-9645-d21f1affa850_buggy.java
+++ b/tmp/e2f1ccf0-58e4-44bf-83d8-e9f5d02b3724_fixed.java
@@ -1,34 +1,60 @@
         public void head(org.jsoup.nodes.Node source, int depth) {
             namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
             if (source instanceof org.jsoup.nodes.Element) {
                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
-                String prefix = updateNamespaces(sourceEl);
-                String namespace = namespacesStack.peek().get(prefix);
-                String tagName = sourceEl.tagName();
+                // executes updateNamespaces primarily for side effect of updating namespacesStack
+                updateNamespaces(sourceEl);
+
+                String tagName = sourceEl.tagName(); // The potentially prefixed tag name (e.g., "fb:like")
+                String prefix = sourceEl.tag().getPrefix(); // The prefix (e.g., "fb") or null
+                String localName = sourceEl.tag().normalName(); // The local name (e.g., "like")
+
+                // Determine the namespace URI for this element by looking up the prefix (or default)
+                String namespace = null;
+                Map<String, String> currentNsMap = namespacesStack.peek();
+                if (prefix != null) {
+                    namespace = currentNsMap.get(prefix); // Look up the prefix
+                } else {
+                    namespace = currentNsMap.get(""); // Look up the default namespace (xmlns="")
+                }
+
+                Element el;
+                // If the namespace URI is null, but the tag name has a prefix,
+                // calling doc.createElementNS(null, tagName) will throw a NAMESPACE_ERR.
+                // Instead, we should use the local name and a null namespace URI.
+                if (namespace == null && prefix != null) {
+                    // Undeclared prefix: create element with null namespace and local name.
+                    // This satisfies namespace requirements but nodeName will be localName.
+                    el = doc.createElementNS(null, localName);
+                } else {
+                    // Namespace is declared, or element has no prefix.
+                    // Use the determined namespace (which might be null if no prefix and no default)
+                    // and the original tagName (which might or might not have a prefix).
+                    // If namespace is null and there's no prefix (e.g. <html>), tagName is just localName.
+                    el = doc.createElementNS(namespace, tagName);
+                }
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
                 copyAttributes(sourceEl, el);
                 if (dest == null) { // sets up the root
                     doc.appendChild(el);
                 } else {
                     dest.appendChild(el);
                 }
                 dest = el; // descend
             } else if (source instanceof org.jsoup.nodes.TextNode) {
                 org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
                 Text text = doc.createTextNode(sourceText.getWholeText());
                 dest.appendChild(text);
             } else if (source instanceof org.jsoup.nodes.Comment) {
                 org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
                 Comment comment = doc.createComment(sourceComment.getData());
                 dest.appendChild(comment);
             } else if (source instanceof org.jsoup.nodes.DataNode) {
                 org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
                 Text node = doc.createTextNode(sourceData.getWholeData());
                 dest.appendChild(node);
             } else {
                 // unhandled
             }
         }
\ No newline at end of file
