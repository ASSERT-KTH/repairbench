diff --git a/tmp/2b2aec9a-c8e5-4d0f-aec4-61c36f8aad38_buggy.java b/tmp/691fb82f-e3c1-4320-8b9a-1f437cb82529_fixed.java
index 98dde53..c0b252a 100644
--- a/tmp/2b2aec9a-c8e5-4d0f-aec4-61c36f8aad38_buggy.java
+++ b/tmp/691fb82f-e3c1-4320-8b9a-1f437cb82529_fixed.java
@@ -1,34 +1,50 @@
         public void head(org.jsoup.nodes.Node source, int depth) {
             namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
             if (source instanceof org.jsoup.nodes.Element) {
                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
-                String prefix = updateNamespaces(sourceEl);
-                String namespace = namespacesStack.peek().get(prefix);
-                String tagName = sourceEl.tagName();
+                // retrieve namespace and tag name
+                final String prefix = updateNamespaces(sourceEl); // updates stack based on xmlns attributes, returns prefix from tag name
+                final String namespace = namespacesStack.peek().get(prefix); // get namespace URI for prefix
+                final String tagName = sourceEl.tagName(); // includes prefix if present (e.g., "fb:like")
+
+                Element el;
+                // DOM strictly enforces namespaces. If a prefix is present in the tag name, a namespace must be supplied.
+                // If the prefix is undeclared (namespace==null), Jsoup treats it as part of the tag name,
+                // whereas DOM would throw a NAMESPACE_ERR. To achieve Jsoup's behavior, we create the element
+                // without a namespace using the full tag name when the namespace URI is null *and* a prefix exists.
+                if (namespace == null && tagName.contains(":")) {
+                    // prefix is undeclared - treat as simple element name
+                    el = doc.createElement(tagName);
+                } else {
+                    // prefix is declared, or tag is unprefixed - use namespace (which might be null for unprefixed tags in no namespace)
+                    el = doc.createElementNS(namespace, tagName);
+                }
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
                 copyAttributes(sourceEl, el);
                 if (dest == null) { // sets up the root
                     doc.appendChild(el);
                 } else {
                     dest.appendChild(el);
                 }
                 dest = el; // descend
             } else if (source instanceof org.jsoup.nodes.TextNode) {
                 org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
                 Text text = doc.createTextNode(sourceText.getWholeText());
                 dest.appendChild(text);
             } else if (source instanceof org.jsoup.nodes.Comment) {
                 org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
                 Comment comment = doc.createComment(sourceComment.getData());
                 dest.appendChild(comment);
             } else if (source instanceof org.jsoup.nodes.DataNode) {
                 org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
+                // Even DataNodes should be text nodes in XML/HTML DOM? Who uses DataNodes for XML? Only Jsoup.
+                // See https://www.w3.org/TR/REC-xml/#dt-cdsection - CDATA sections are text nodes.
+                // Let's output as TextNode, like TextNode above.
                 Text node = doc.createTextNode(sourceData.getWholeData());
                 dest.appendChild(node);
             } else {
-                // unhandled
+                // unhandled node types (like DocumentType)
+                // TODO: Support other node types if required
             }
         }
\ No newline at end of file
