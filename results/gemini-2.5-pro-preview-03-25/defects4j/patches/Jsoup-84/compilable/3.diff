diff --git a/tmp/f7af0857-ce64-4f05-9ebf-cbd69f5e5ed5_buggy.java b/tmp/293219a6-91d4-47a3-82b2-6ac508f87f3b_fixed.java
index 98dde53..1bfd1a8 100644
--- a/tmp/f7af0857-ce64-4f05-9ebf-cbd69f5e5ed5_buggy.java
+++ b/tmp/293219a6-91d4-47a3-82b2-6ac508f87f3b_fixed.java
@@ -1,34 +1,50 @@
         public void head(org.jsoup.nodes.Node source, int depth) {
             namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
             if (source instanceof org.jsoup.nodes.Element) {
                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
+                // update namespaces, also get the element's prefix
                 String prefix = updateNamespaces(sourceEl);
-                String namespace = namespacesStack.peek().get(prefix);
                 String tagName = sourceEl.tagName();
+                // look up namespace uri for this element's prefix
+                String namespace = namespacesStack.peek().get(prefix);
+
+                Element el;
+                // A null namespace indicates that the prefix is undeclared. Create element without namespace.
+                // However, createElementNS will raise NAMESPACE_ERR if the tagName has a prefix and namespace is null.
+                if (namespace == null && tagName.contains(":")) {
+                    // TODO: This creates the element without a namespace, but the nodename will retain the prefix.
+                    // Is this the desired behavior? It matches the test case expectation.
+                    el = doc.createElement(tagName);
+                } else {
+                    // Creates elements with namespaces - handles default namespace correctly (if prefix is "", namespace ! = null)
+                    // Handles elements without namespaces correctly (if prefix is "", namespace = null)
+                    // Handles elements with declared namespaces correctly (if prefix !="", namespace != null)
+                    el = doc.createElementNS(namespace, tagName);
+                }
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
                 copyAttributes(sourceEl, el);
                 if (dest == null) { // sets up the root
                     doc.appendChild(el);
                 } else {
                     dest.appendChild(el);
                 }
                 dest = el; // descend
             } else if (source instanceof org.jsoup.nodes.TextNode) {
                 org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
                 Text text = doc.createTextNode(sourceText.getWholeText());
                 dest.appendChild(text);
             } else if (source instanceof org.jsoup.nodes.Comment) {
                 org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
                 Comment comment = doc.createComment(sourceComment.getData());
                 dest.appendChild(comment);
             } else if (source instanceof org.jsoup.nodes.DataNode) {
                 org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
+                // Note: DataNodes are not compatible with XML/HTML DOM; created as Text
                 Text node = doc.createTextNode(sourceData.getWholeData());
                 dest.appendChild(node);
             } else {
-                // unhandled
+                // unhandled node types (like DocumentType)
+                // TODO: Handle other node types if required
             }
         }
\ No newline at end of file
