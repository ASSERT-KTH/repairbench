diff --git a/tmp/df4bcff9-fc1d-4bbe-8f3f-8e6fe8cf306e_buggy.java b/tmp/97d363ec-bbda-46e1-9de1-21367f65e4d6_fixed.java
index d907b39..4362f9a 100644
--- a/tmp/df4bcff9-fc1d-4bbe-8f3f-8e6fe8cf306e_buggy.java
+++ b/tmp/97d363ec-bbda-46e1-9de1-21367f65e4d6_fixed.java
@@ -1,56 +1,93 @@
     public int read(byte[] buffer, int start, int length) throws IOException {
         if (closed) {
             throw new IOException("The stream is closed");
         }
         if (inf.finished() || current == null) {
             return -1;
         }
 
         // avoid int overflow, check null buffer
         if (start <= buffer.length && length >= 0 && start >= 0
             && buffer.length - start >= length) {
+            // If the entry is STORED, then we can exactly check the size.
             if (current.getMethod() == ZipArchiveOutputStream.STORED) {
                 int csize = (int) current.getSize();
                 if (readBytesOfEntry >= csize) {
                     return -1;
                 }
+                // If the buffer is empty, read a new block of data.
                 if (offsetInBuffer >= lengthOfLastRead) {
                     offsetInBuffer = 0;
                     if ((lengthOfLastRead = in.read(buf)) == -1) {
+                        // Reached EOF prematurely.
+                        // Throw if the entry is not complete
+                        if (csize > readBytesOfEntry) {
+                             throw new IOException("Truncated ZIP file");
+                        }
+                        // Should be -1, but again, the contract is vague,
+                        // and the original code returned -1 here. Keep it for now
+                        // unless further tests show issues.
                         return -1;
                     }
                     count(lengthOfLastRead);
                     bytesReadFromStream += lengthOfLastRead;
                 }
+                // Determine how much to read
                 int toRead = length > lengthOfLastRead
                     ? lengthOfLastRead - offsetInBuffer
                     : length;
+                // Ensure we don't read more than the claimed size
                 if ((csize - readBytesOfEntry) < toRead) {
                     toRead = csize - readBytesOfEntry;
                 }
+                // Copy data
                 System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
+                // Update counters
                 offsetInBuffer += toRead;
                 readBytesOfEntry += toRead;
                 crc.update(buffer, start, toRead);
                 return toRead;
             }
+
+            // If the entry is DEFLATED...
+            // Fill the inflater buffer if necessary
             if (inf.needsInput()) {
                 fill();
-                if (lengthOfLastRead > 0) {
+                // If the fill ended up reading EOF from the underlying stream,
+                // but the inflater is not finished, then the file is truncated.
+                if (lengthOfLastRead == -1) {
+                    // Only throw if inf hasn't signalled end AND needs input
+                    if (!inf.finished()) {
+                         throw new IOException("Truncated ZIP file");
+                    }
+                    // If inflater finished and fill got EOF, it's a normal ending.
+                    // Fall through to inflate, which should return 0 and signal finished.
+                } else if (lengthOfLastRead > 0) { // Only count if data was actually read
                     bytesReadFromStream += lengthOfLastRead;
                 }
             }
+
+            // Decompress data
             int read = 0;
             try {
                 read = inf.inflate(buffer, start, length);
             } catch (DataFormatException e) {
-                throw new ZipException(e.getMessage());
+                // Data format exception implies corrupt data, map to ZipException
+                // which is an IOException.
+                throw new ZipException(e.getMessage() != null ? e.getMessage() : "Invalid ZLIB data format");
             }
+
+            // If inflate returns 0 and is finished, we are at the end of the entry
             if (read == 0 && inf.finished()) {
                 return -1;
             }
+
+            // Update CRC and return bytes read
+            if (read > 0) {
                 crc.update(buffer, start, read);
+            }
             return read;
         }
+        // Invalid arguments
         throw new ArrayIndexOutOfBoundsException();
     }
\ No newline at end of file
