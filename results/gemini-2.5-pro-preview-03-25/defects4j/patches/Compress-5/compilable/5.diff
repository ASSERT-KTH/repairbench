diff --git a/tmp/977e8609-5720-45b0-8522-7fdb908262a0_buggy.java b/tmp/0a27bbbc-c7b8-4eb7-b5a4-39d1b1cc72dd_fixed.java
index d907b39..9367941 100644
--- a/tmp/977e8609-5720-45b0-8522-7fdb908262a0_buggy.java
+++ b/tmp/0a27bbbc-c7b8-4eb7-b5a4-39d1b1cc72dd_fixed.java
@@ -1,56 +1,99 @@
     public int read(byte[] buffer, int start, int length) throws IOException {
         if (closed) {
             throw new IOException("The stream is closed");
         }
-        if (inf.finished() || current == null) {
-            return -1;
+        if (current == null) {
+            return -1; // No current entry
         }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+        // avoid int overflow, check buffer boundaries
+        if (start < 0 || length < 0 || start > buffer.length || length > buffer.length - start) {
+            throw new ArrayIndexOutOfBoundsException();
+        }
+
+        try {
             if (current.getMethod() == ZipArchiveOutputStream.STORED) {
+                // Handle STORED entry
                 int csize = (int) current.getSize();
+                // Check if entry is fully read
                 if (readBytesOfEntry >= csize) {
                     return -1;
                 }
+                // Refill internal buffer 'buf' if necessary
                 if (offsetInBuffer >= lengthOfLastRead) {
                     offsetInBuffer = 0;
                     if ((lengthOfLastRead = in.read(buf)) == -1) {
+                        // EOF hit on underlying stream
+                        if (csize > readBytesOfEntry) { // Check if EOF was premature
+                           throw new IOException("Truncated ZIP file");
+                        }
+                        // EOF coincides with expected end of entry
                         return -1;
                     }
                     count(lengthOfLastRead);
-                    bytesReadFromStream += lengthOfLastRead;
+                    // bytesReadFromStream is not updated here; it seems specific to how STORED entries track progress via readBytesOfEntry
                 }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
+                // Calculate how much data to copy from internal buffer to user buffer
+                int toRead = Math.min(length, lengthOfLastRead - offsetInBuffer);
+                // Ensure we don't read beyond the declared entry size
                 if ((csize - readBytesOfEntry) < toRead) {
                     toRead = csize - readBytesOfEntry;
                 }
+                // Copy data and update state
                 System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
                 offsetInBuffer += toRead;
-                readBytesOfEntry += toRead;
+                readBytesOfEntry += toRead; // Track progress within the current STORED entry
                 crc.update(buffer, start, toRead);
                 return toRead;
+
             }
+            // Handle DEFLATED entry (or other methods using Inflater)
+            if (inf.finished()) {
+                return -1; // Inflater already finished for this entry
+            }
+            // Fill input buffer for inflater if it needs more data
             if (inf.needsInput()) {
-                fill();
-                if (lengthOfLastRead > 0) {
-                    bytesReadFromStream += lengthOfLastRead;
+                fill(); // Reads from 'in', sets lengthOfLastRead, feeds inflater
+                if (lengthOfLastRead == -1) {
+                    // EOF reached on underlying stream.
+                    // Inflater will try to process any remaining buffered data.
+                    // If it still needs input after the inflate() call below, we know it's truncated.
                 }
+                // Removed the incorrect 'bytesReadFromStream += lengthOfLastRead;' update for DEFLATED
             }
             int read = 0;
             try {
+                // Attempt to inflate data into the user buffer
                 read = inf.inflate(buffer, start, length);
             } catch (DataFormatException e) {
-                throw new ZipException(e.getMessage());
+                // Data format error usually indicates corruption or truncation
+                throw new ZipException("Invalid ZLIB data format: " + e.getMessage());
             }
-            if (read == 0 && inf.finished()) {
+
+            // Check the state *after* the inflation attempt
+            if (read == 0) {
+                if (inf.finished()) {
+                    // Inflater finished successfully, no more data in this entry
                     return -1;
                 }
+                // If inflate() returned 0, but the inflater is not finished,
+                // it implies that it needs more input.
+                // Since fill() was called if input was needed, this state typically means
+                // that the end of the underlying stream was reached prematurely.
+                if (inf.needsInput()) { // This should be true if read == 0 and !inf.finished()
+                    throw new IOException("Truncated ZIP file");
+                }
+                // This state (read==0, !finished, !needsInput) should not normally occur
+                throw new ZipException("Unexpected Inflater state");
+            }
+            // If read > 0, update CRC and return the number of bytes read
             crc.update(buffer, start, read);
             return read;
+
+        } catch (IOException e) {
+            // Rethrow IOExceptions, including the "Truncated ZIP file" potentially thrown above
+            throw e;
         }
-        throw new ArrayIndexOutOfBoundsException();
+        // Note: The original code had a final 'throw new ArrayIndexOutOfBoundsException()'
+        // which is now handled by the check at the beginning.
     }
\ No newline at end of file
