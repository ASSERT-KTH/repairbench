diff --git a/tmp/2308fe57-3e79-490c-95bc-6d1ecf57e832_buggy.java b/tmp/dd53776d-7cc3-40f4-92ef-9401e7e6edab_fixed.java
index d907b39..7326442 100644
--- a/tmp/2308fe57-3e79-490c-95bc-6d1ecf57e832_buggy.java
+++ b/tmp/dd53776d-7cc3-40f4-92ef-9401e7e6edab_fixed.java
@@ -1,56 +1,106 @@
     public int read(byte[] buffer, int start, int length) throws IOException {
         if (closed) {
             throw new IOException("The stream is closed");
         }
+        // End of stream condition for the entry
         if (inf.finished() || current == null) {
             return -1;
         }
 
         // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+        // start <= buffer.length is implicit in buffer.length - start >= length
+        if (length < 0 || start < 0 || buffer.length - start < length) {
+            throw new ArrayIndexOutOfBoundsException();
+        }
+
+        // If length is zero, return 0 to indicate no bytes read
+        if (length == 0) {
+            return 0;
+        }
+
+        try {
             if (current.getMethod() == ZipArchiveOutputStream.STORED) {
+                // Check if entry is already fully read
                 int csize = (int) current.getSize();
                 if (readBytesOfEntry >= csize) {
                     return -1;
                 }
+
+                // Need to refill internal buffer 'buf'?
                 if (offsetInBuffer >= lengthOfLastRead) {
                     offsetInBuffer = 0;
-                    if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
+                    lengthOfLastRead = in.read(buf); // Read from underlying stream
+                    if (lengthOfLastRead == -1) {
+                        // EOF encountered in underlying stream.
+                        // Since readBytesOfEntry < csize, this means the file is truncated.
+                        throw new IOException("Truncated ZIP file");
                     }
+                    // Successfully read some data into 'buf'
                     count(lengthOfLastRead);
                     bytesReadFromStream += lengthOfLastRead;
                 }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
-                }
+
+                // Calculate how much data we can copy in this call
+                int availableInBuffer = lengthOfLastRead - offsetInBuffer;
+                int remainingInEntry = csize - readBytesOfEntry;
+
+                // We can copy at most 'length' bytes requested by the user,
+                // at most 'availableInBuffer' bytes from our internal buffer,
+                // and at most 'remainingInEntry' bytes for the current entry.
+                int toRead = Math.min(length, Math.min(availableInBuffer, remainingInEntry));
+
+                if (toRead > 0) {
                     System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
                     offsetInBuffer += toRead;
                     readBytesOfEntry += toRead;
                     crc.update(buffer, start, toRead);
-                return toRead;
                 }
+                // No need for an else block, if toRead is 0 (e.g. length was 0), we return 0.
+
+                return toRead; // Return number of bytes actually read (can be 0 if length == 0)
+            }
+
+            // DEFLATED method
             if (inf.needsInput()) {
-                fill();
+                fill(); // Sets lengthOfLastRead (-1 on EOF)
                 if (lengthOfLastRead > 0) {
                     bytesReadFromStream += lengthOfLastRead;
                 }
             }
+
             int read = 0;
             try {
                 read = inf.inflate(buffer, start, length);
             } catch (DataFormatException e) {
-                throw new ZipException(e.getMessage());
+                // Data format error implies corruption or possibly truncation
+                throw new ZipException("Invalid ZLIB data format: " + e.getMessage(), e);
             }
-            if (read == 0 && inf.finished()) {
+
+            if (read == 0) {
+                if (inf.finished()) {
+                    // Normal end of entry's compressed data
                     return -1;
                 }
+                if (inf.needsInput() && lengthOfLastRead == -1) {
+                     // Inflater needs more data, but the underlying stream is exhausted.
+                     // This indicates a truncated file.
+                    throw new IOException("Truncated ZIP file");
+                }
+                // If read == 0, but not finished and not truncated (e.g., output buffer full, needs dictionary)
+                // return 0. No CRC update needed. Caller should call again.
+                return 0;
+            }
+            // read > 0
             crc.update(buffer, start, read);
             return read;
+
+        } catch (IOException e) {
+            // Catch underlying IOExceptions and rethrow, potentially adding context
+            // If the specific "Truncated ZIP file" message was already thrown, rethrow it.
+            // Otherwise, wrap generic IOExceptions if needed, though usually not necessary.
+            // The existing throws already handle this. Pass through IOExceptions.
+            throw e;
         }
-        throw new ArrayIndexOutOfBoundsException();
+        // ArrayIndexOutOfBoundsException is thrown earlier if parameters are invalid.
+        // Removed the final throw new ArrayIndexOutOfBoundsException() as the checks at the top cover this.
     }
\ No newline at end of file
