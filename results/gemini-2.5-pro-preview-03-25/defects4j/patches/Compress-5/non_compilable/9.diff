diff --git a/tmp/9c28f638-df7c-4ea9-8cbc-92cb0942c485_buggy.java b/tmp/5fc52a65-fe5a-44f0-9323-985ef0189896_fixed.java
index d907b39..1d8f466 100644
--- a/tmp/9c28f638-df7c-4ea9-8cbc-92cb0942c485_buggy.java
+++ b/tmp/5fc52a65-fe5a-44f0-9323-985ef0189896_fixed.java
@@ -1,56 +1,131 @@
+    @Override
     public int read(byte[] buffer, int start, int length) throws IOException {
         if (closed) {
             throw new IOException("The stream is closed");
         }
-        if (inf.finished() || current == null) {
-            return -1;
+         if (buffer == null) {
+             // Maintain original behaviour which relied on the array access check below
+             // Or throw NullPointerException explicitly:
+             // throw new NullPointerException("buffer array is null");
+             // Let's stick closer to original structure unless NPE is strictly required.
+             // The IndexOutOfBoundsException check below implicitly handles null buffer access.
+         }
+        // Parameter validation based on InputStream spec
+        if (start < 0 || length < 0 || length > buffer.length - start) {
+            throw new IndexOutOfBoundsException(); // Use standard exception for array bounds
+        }
+        // Short-circuit if length is 0
+        if (length == 0) {
+            return 0;
+        }
+
+        if (current == null) {
+            return -1; // No current entry selected
         }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+        // Handle STORED entry
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
-                int csize = (int) current.getSize();
+            // Size might be -1 for STORED entries if reading from a stream using data descriptor.
+            // The original code implicitly assumed size is known by casting to int.
+            // We maintain that assumption for this fix. Handle unknown size (-1) if necessary elsewhere.
+            long CSIZE = current.getSize();
+
+            // Check required size vs actual read count for completion. Cast CSIZE to int.
+            // This might overflow for zip64, but matches original code's behaviour.
+            // We must handle CSIZE == -1 case explicitly if it can occur here. Assuming CSIZE >= 0.
+             if (CSIZE == -1) {
+                  // Cannot reliably check for truncation with unknown size based solely on CSIZE.
+                  // Rely on underlying stream EOF? This path needs careful review if CSIZE=-1 is expected.
+                  // Let's assume CSIZE >= 0 based on original code structure.
+             }
+            int csize = (int) CSIZE;
+
+
+            // Check if entry already fully read based on declared size
             if (readBytesOfEntry >= csize) {
                 return -1;
             }
+
+            // Refill internal buffer 'buf' if it's empty
             if (offsetInBuffer >= lengthOfLastRead) {
                 offsetInBuffer = 0;
-                    if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
+                lengthOfLastRead = in.read(buf); // Read from underlying stream
+                if (lengthOfLastRead == -1) {
+                    // EOF on underlying stream before reading 'csize' bytes.
+                    // Since readBytesOfEntry < csize (checked above), this means truncation.
+                    // Mark stream as potentially damaged?
+                    bytesReadFromStream = -1; // Original code doesn't seem to use this statefully here
+                    throw new IOException("Truncated ZIP file"); // FIX 1: Throw exception on truncation for STORED
                 }
+                // Account for bytes read from the raw stream
                 count(lengthOfLastRead);
                 bytesReadFromStream += lengthOfLastRead;
             }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
-                }
+
+            // Determine how many bytes to copy in this call
+            int availableInBuffer = lengthOfLastRead - offsetInBuffer;
+            // Ensure we don't read past the declared entry size
+            // Use long for remainingInEntry calculation if csize can exceed Integer.MAX_VALUE
+            // but stick to int as original code did.
+            int remainingInEntry = csize - (int)readBytesOfEntry;
+            // We need the minimum of: requested length, available in internal buffer, remaining in entry
+            int toRead = Math.min(length, Math.min(availableInBuffer, remainingInEntry));
+
+            // Perform copy and update state
             System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
             offsetInBuffer += toRead;
-                readBytesOfEntry += toRead;
+            readBytesOfEntry += toRead; // Track progress within the entry
             crc.update(buffer, start, toRead);
-                return toRead;
+            return toRead; // Return bytes copied to user buffer
         }
+
+        // Handle DEFLATED entry (method != STORED)
+        // Check if DEFLATED entry already finished inflation
+        if (inf.finished()) {
+            return -1;
+        }
+
+        // Ensure inflater has input if needed
         if (inf.needsInput()) {
-                fill();
+            fill(); // Tries to read from 'in' into 'buf' and sets inf.setInput()
+                    // Also updates lengthOfLastRead.
             if (lengthOfLastRead > 0) {
+                // Account for bytes read from the raw stream (count() is called within fill)
                 bytesReadFromStream += lengthOfLastRead;
             }
+            // Check for truncation after trying to fill
+            if (lengthOfLastRead == -1 && inf.needsInput()) {
+                // Inflater needs more data, but underlying stream is exhausted.
+                throw new IOException("Truncated ZIP file"); // FIX 2: Throw exception on truncation for DEFLATED
             }
+        }
+
+        // Perform inflation
         int read = 0;
         try {
             read = inf.inflate(buffer, start, length);
         } catch (DataFormatException e) {
-                throw new ZipException(e.getMessage());
-            }
-            if (read == 0 && inf.finished()) {
-                return -1;
+            // Wrap DataFormatException in a ZipException (which is an IOException)
+            // Include original exception as cause for better debugging
+            throw new ZipException("Invalid ZLIB data format: " + e.getMessage(), e); // FIX 3: Add cause to exception
         }
+
+        // Update CRC if bytes were successfully inflated
+        if (read > 0) {
             crc.update(buffer, start, read);
-            return read;
         }
-        throw new ArrayIndexOutOfBoundsException();
+
+        // Check if inflation finished during this call
+        if (inf.finished()) {
+            // If read is 0, it means we finished exactly now, signal EOF.
+            // If read > 0, return read, the next call will return -1 via the check at the start.
+            if (read == 0) {
+                return -1;
+            }
+        }
+        // Note: if read == 0 and inf is NOT finished, it typically means the
+        // output buffer `buffer` was too small, or inflater needs more input (which
+        // should be handled by the next call's needsInput() check). Returning 0 is correct.
+
+        return read; // Return number of bytes inflated into buffer
     }
\ No newline at end of file
