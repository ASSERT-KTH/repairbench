diff --git a/tmp/99080017-3650-4b06-a394-862d0640e01e_buggy.java b/tmp/a740b4cb-a66c-442b-be99-4516965baf75_fixed.java
index a7d4ff8..9499913 100644
--- a/tmp/99080017-3650-4b06-a394-862d0640e01e_buggy.java
+++ b/tmp/a740b4cb-a66c-442b-be99-4516965baf75_fixed.java
@@ -1,28 +1,57 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space after '-' if the number is negative or negative zero.
+    // This prevents "--" which is confusing or a syntax error.
+    // The original check (x < 0) failed for -0.0.
+    if (prev == '-' && (x < 0 || negativeZero)) {
       add(" ");
     }
 
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
-      if (Math.abs(x) >= 100) {
-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
+      // Avoid scientific notation for integers < 1000 to save space.
+      // TODO(johnlenz): This is overly conservative. Revisit.
+      // We could also print "1E3" but that requires more sophisticated analysis.
+      if (Math.abs(value) >= 1000) {
+        // Check for potential scientific notation representation.
+        // This is prone to floating point errors. A better approach might involve
+        // string manipulation or careful integer math.
+        while (mantissa % 10 == 0 && mantissa != 0) {
+            // Verify if the representation is precise enough.
+            // Using Math.pow might introduce inaccuracies for large numbers.
+            // Let's stick to simpler integer logic for this loop condition check.
+            // If value = 1000, mantissa = 1000, exp = 0.
+            // 1st iter: m=100, exp=1. Is 100 * 10^1 == 1000? Yes.
+            // 2nd iter: m=10, exp=2. Is 10 * 10^2 == 1000? Yes.
+            // 3rd iter: m=1, exp=3. Is 1 * 10^3 == 1000? Yes.
+            // Next: mantissa = 1, which doesn't end in 0. Loop stops. exp=3.
+           if (mantissa / 10 * Math.pow(10, exp + 1) == value) {
               mantissa /= 10;
               exp++;
+           } else {
+               // If precision issues occur, break the loop.
+               break;
+           }
         }
       }
-      if (exp > 2) {
-        add(Long.toString(mantissa) + "E" + Integer.toString(exp));
+
+      // Use scientific notation only if it's shorter than the long representation.
+      // The threshold exp > 2 means numbers like 1E3, 2E4, etc.
+      // Length of "1E3" is 3, length of "1000" is 4.
+      // Length of mantissa + "E" + length of exp vs length of value
+      String longStr = Long.toString(value);
+      String sciStr = Long.toString(mantissa) + "E" + Integer.toString(exp);
+      if (exp > 2 && sciStr.length() < longStr.length()) {
+          add(sciStr);
       } else {
-        add(Long.toString(value));
+        add(longStr);
       }
     } else {
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
