diff --git a/tmp/ed478ace-8515-40c7-8b4d-9a0979725bc7_buggy.java b/tmp/d4213901-29e2-4d77-aca3-ae3fadd6229b_fixed.java
index a7d4ff8..dc735bc 100644
--- a/tmp/ed478ace-8515-40c7-8b4d-9a0979725bc7_buggy.java
+++ b/tmp/d4213901-29e2-4d77-aca3-ae3fadd6229b_fixed.java
@@ -1,28 +1,46 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space before negatives, including negative zero, if the previous
+    // character was a minus sign.
+    if ((x < 0 || negativeZero) && prev == '-') { // Fix: Include negativeZero in the check
       add(" ");
     }
 
+    // Check if the number can be represented as a long (integer) and is not negative zero.
+    // We special case negative zero because we want it printed as -0.0, not 0.
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
+      // For large integers, try to use scientific E notation like 1E3 for 1000.
+      // Check magnitude using the original double value `x` to avoid potential issues
+      // with Math.abs(Long.MIN_VALUE).
       if (Math.abs(x) >= 100) {
-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
+        // This loop finds the exponent for E notation. It checks if stripping a zero
+        // from the mantissa and adjusting the exponent preserves the original value.
+        // This check `mantissa / 10 * Math.pow(10, exp + 1) == value` is used
+        // to ensure correctness even with potential floating point inaccuracies
+        // or large long values.
+        while (mantissa != 0 && mantissa % 10 == 0 && // Optimization: Check divisibility by 10 first
+               mantissa / 10 * Math.pow(10, exp + 1) == value) {
           mantissa /= 10;
           exp++;
         }
       }
+      // Use E notation only if the exponent is significant (greater than 2).
+      // e.g., 1000 becomes 1E3, but 100 remains 100.
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
+        // Otherwise, print the integer value directly.
         add(Long.toString(value));
       }
     } else {
+      // For doubles, non-integer numbers, or negative zero, use String.valueOf.
+      // This handles printing -0.0 correctly.
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
