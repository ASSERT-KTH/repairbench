diff --git a/tmp/c39984c0-e7c3-4dc4-bbb7-fd763f252a47_buggy.java b/tmp/8080b82e-d28a-4fcf-b15f-684670d4395c_fixed.java
index a7d4ff8..4831365 100644
--- a/tmp/c39984c0-e7c3-4dc4-bbb7-fd763f252a47_buggy.java
+++ b/tmp/8080b82e-d28a-4fcf-b15f-684670d4395c_fixed.java
@@ -1,28 +1,53 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Fix: Add space if prev is '-' and x is negative OR negative zero.
+    // The original condition (x < 0) is false for -0.0.
+    if ((x < 0 || negativeZero) && prev == '-') {
       add(" ");
     }
 
+    // Handle numbers that can be represented as longs (integers), but exclude negative zero.
+    // Negative zero must be printed as -0.0, not 0.
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
-      if (Math.abs(x) >= 100) {
-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
-          mantissa /= 10;
-          exp++;
+      // Try to use scientific notation for large integers (e.g., 1000 -> 1E3).
+      // This avoids printing large strings like "1000000000000000000".
+      // The threshold (>= 100) and exponent check (exp > 2) are somewhat arbitrary
+      // and aim for shorter output in some cases.
+      if (Math.abs(value) >= 100) { // Check magnitude using the long value
+        // This loop attempts to find the shortest scientific notation (mantissa * 10^exp).
+        // It checks if removing a trailing zero from the mantissa and increasing
+        // the exponent preserves the original value.
+        // Potential precision issues with Math.pow for very large longs exist.
+        while (mantissa != 0 && mantissa % 10 == 0) {
+            long nextMantissa = mantissa / 10;
+            int nextExp = exp + 1;
+            // Check if value == nextMantissa * 10^nextExp without using floating point potentially.
+            // A direct check or BigInteger might be safer for extremely large numbers.
+            // Using Math.pow here for consistency with the original code.
+            if (nextMantissa * Math.pow(10, nextExp) == value) {
+                mantissa = nextMantissa;
+                exp = nextExp;
+            } else {
+                // Stop if removing the zero changes the value (e.g., 12300 -> 1230 -> 123).
+                break;
             }
         }
+      }
+      // Use scientific notation only if the exponent is significantly large (e.g., > 2).
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
+        // Otherwise, print the standard integer representation.
         add(Long.toString(value));
       }
     } else {
+      // Handle non-integer doubles and negative zero using the standard String.valueOf conversion.
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
