diff --git a/tmp/74fcc157-47fc-4447-a59c-57b03bc2fcc0_buggy.java b/tmp/cec80944-4253-4ca9-a659-c492f49ad10c_fixed.java
index a7d4ff8..ae870c0 100644
--- a/tmp/74fcc157-47fc-4447-a59c-57b03bc2fcc0_buggy.java
+++ b/tmp/cec80944-4253-4ca9-a659-c492f49ad10c_fixed.java
@@ -1,28 +1,47 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Fix: Add space if x is strictly negative OR negative zero, and the previous
+    // character was '-'. The original condition `x < 0` did not handle negative zero.
+    if ((x < 0 || negativeZero) && prev == '-') {
       add(" ");
     }
 
+    // Handle integers and check for negative zero, which should be printed as -0.0
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
-      if (Math.abs(x) >= 100) {
-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
-          mantissa /= 10;
-          exp++;
+      // Try to use scientific notation for large integers (e.g., 1E3 instead of 1000)
+      // This optimization check seems to target numbers >= 100.
+      // The loop condition checks if the number can be represented as mantissa/10 * 10^(exp+1)
+      if (Math.abs(value) >= 100) { // Use value (long) instead of x (double) for check
+        // Check if mantissa is divisible by 10 and the representation holds
+        while (mantissa != 0 && mantissa % 10 == 0) {
+           long tempMantissa = mantissa / 10;
+           int tempExp = exp + 1;
+           // Use double for the check to mimic the original behavior, comparing
+           // the potential simplified form back to the original value.
+           // Note: This can have precision issues for very large longs.
+           if (tempMantissa * Math.pow(10, tempExp) != value) {
+             break; // Stop if simplification changes the value
            }
+           // Update if the simplification is valid
+           mantissa = tempMantissa;
+           exp = tempExp;
         }
+      }
+
+      // Use scientific notation only if the exponent is greater than 2 (e.g., 1E3, not 1E2)
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
         add(Long.toString(value));
       }
     } else {
+      // Handles non-integer doubles and negative zero
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
