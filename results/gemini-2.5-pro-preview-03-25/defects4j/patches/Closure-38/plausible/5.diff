diff --git a/tmp/3b0db8f3-ca3d-4d2b-a9b8-4429f5e608d7_buggy.java b/tmp/87809bd8-4cc9-4aa3-bd2a-05d7f1662150_fixed.java
index a7d4ff8..beb5ff3 100644
--- a/tmp/3b0db8f3-ca3d-4d2b-a9b8-4429f5e608d7_buggy.java
+++ b/tmp/87809bd8-4cc9-4aa3-bd2a-05d7f1662150_fixed.java
@@ -1,28 +1,60 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space before negative numbers (including -0.0) if the previous
+    // character is '-'. This prevents x--4 which is syntactically invalid.
+    if ((x < 0 || negativeZero) && prev == '-') {
       add(" ");
     }
 
+    // Use long representation if it doesn't lose precision (and not for -0.0).
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
-      if (Math.abs(x) >= 100) {
-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
+      // Check if we should use scientific notation (for numbers >= 100 or <= -100).
+      // This check also avoids potential issues with Math.abs(Long.MIN_VALUE).
+      if (Math.abs(value) >= 100) {
+        // Use a loop that avoids floating point math if possible.
+        // Check for trailing zeros.
+        while (mantissa % 10 == 0 && mantissa != 0) {
+             // Check if dividing by 10 would preserve the representation.
+             // This condition prevents issues with large longs where division
+             // might be lossy or lead to unexpected results with Math.pow.
+             // We essentially check if mantissa is a multiple of 10^(exp+1).
+             // Using long multiplication avoids potential floating point inaccuracies.
+             long powerOf10 = 1L;
+             for (int i = 0; i < exp + 1; i++) {
+                // Avoid overflow if possible, though unlikely for reasonable exponents.
+                if (Long.MAX_VALUE / 10 < powerOf10) {
+                    powerOf10 = Long.MAX_VALUE; // Indicate potential overflow stop
+                    break;
+                }
+                powerOf10 *= 10;
+             }
+
+             // If powerOf10 calculation overflowed or doesn't divide value cleanly
+             // or mantissa / 10 * powerOf10 isn't the original value, stop.
+             if (powerOf10 == Long.MAX_VALUE || value % powerOf10 != 0 || (mantissa / 10) * powerOf10 != value) {
+                 break;
+             }
+             // It's safe to divide mantissa by 10 and increment exponent.
              mantissa /= 10;
              exp++;
         }
       }
+      // Use scientific notation if exponent is sufficiently large.
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
+        // Otherwise, print the long value directly.
         add(Long.toString(value));
       }
     } else {
+      // Otherwise, print the double value using String.valueOf,
+      // which handles -0.0 correctly as "-0.0".
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
