diff --git a/tmp/7a1d9d8d-8518-40a5-bd9d-55f0e0cf555d_buggy.java b/tmp/52ddbceb-ad80-4a7c-b920-449a199c6257_fixed.java
index a7d4ff8..b67770e 100644
--- a/tmp/7a1d9d8d-8518-40a5-bd9d-55f0e0cf555d_buggy.java
+++ b/tmp/52ddbceb-ad80-4a7c-b920-449a199c6257_fixed.java
@@ -1,28 +1,51 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space before negative numbers or negative zero if the previous
+    // character is a minus sign.
+    if ((x < 0 || negativeZero) && prev == '-') {
       add(" ");
     }
 
+    // Use the long representation if it's an integer and not negative zero.
+    // We don't want to print -0.0 as 0.
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
-      if (Math.abs(x) >= 100) {
+      // Check if we should use exponential notation for large integers.
+      // Don't use it for numbers near 0, like 0.000001.
+      // We suppress exponential notation for integers between -100 and 100,
+      // exclusive. This prevents generating "-1E2" for -100, for example.
+      if (Math.abs(value) >= 100) {
+        // Calculate the exponent for scientific notation.
+        // This loop essentially finds the largest power of 10 that divides value.
+        // However, it uses floating-point math which can be imprecise.
+        // A better way might be to repeatedly divide by 10 and count.
+        // Example: value = 12000
+        // mantissa=12000, exp=0: 12000 / 10 * 10^(0+1) = 1200 * 10 = 12000 == 12000 (true)
+        // mantissa=1200, exp=1: 1200 / 10 * 10^(1+1) = 120 * 100 = 12000 == 12000 (true)
+        // mantissa=120, exp=2: 120 / 10 * 10^(2+1) = 12 * 1000 = 12000 == 12000 (true)
+        // mantissa=12, exp=3: 12 / 10 * 10^(3+1) = 1 * 10000 = 10000 != 12000 (false) -> loop ends
+        // This calculation seems error-prone due to floating point; integer division is safer.
+        // Let's keep the original logic for now, assuming it worked before.
+        // Note: Math.pow(10, exp + 1) can be large.
         while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
           mantissa /= 10;
           exp++;
         }
       }
+      // Use exponential notation if the exponent is significant (arbitrarily > 2).
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
         add(Long.toString(value));
       }
     } else {
+      // Otherwise, use the standard double-to-string conversion.
+      // This handles non-integers, negative zero, NaN, Infinity.
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
