diff --git a/tmp/78fb1716-da20-4cf9-ba6d-aa61ba3db86c_buggy.java b/tmp/c05cc7f8-4b81-4f35-bf18-555c29b03a70_fixed.java
index a7d4ff8..089ed99 100644
--- a/tmp/78fb1716-da20-4cf9-ba6d-aa61ba3db86c_buggy.java
+++ b/tmp/c05cc7f8-4b81-4f35-bf18-555c29b03a70_fixed.java
@@ -1,28 +1,44 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space before negative numbers or negative zero if the previous
+    // character was a minus sign.
+    if ((x < 0 || negativeZero) && prev == '-') { // Fix: Added check for negativeZero
       add(" ");
     }
 
+    // Try to represent the number as an integer if possible.
+    // Make sure we are not trimming digits off the end of an otherwise number.
+    // Specifically, we're looking for numbers like 1.0E100, which are technically
+    // integers, but we want to print them in exponential notation.
+    // We also special-case negative zero.
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
-      if (Math.abs(x) >= 100) {
+      // NOTE: The logic below for scientific notation was present in the original
+      // buggy code provided. It might have its own issues (e.g., floating point
+      // precision with Math.pow), but the fix requested only addresses the
+      // spacing issue with negative zero.
+      if (Math.abs(x) >= 100) { // This check was in the original snippet
+        // This loop condition was in the original snippet and might be imprecise
         while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
           mantissa /= 10;
           exp++;
         }
       }
+      // Use scientific notation if the exponent is greater than 2 (e.g., 1E3).
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
+        // Otherwise, print the integer directly.
         add(Long.toString(value));
       }
     } else {
+      // Handle doubles, negative zero, and integers that couldn't be
+      // represented compactly using the integer logic.
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
