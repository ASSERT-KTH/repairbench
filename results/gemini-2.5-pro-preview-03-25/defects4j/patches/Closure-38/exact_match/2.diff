diff --git a/tmp/546bde8f-11ab-48d0-8077-d37f3319441b_buggy.java b/tmp/7a685d5d-8945-490e-9f2e-3ca42a3ece41_fixed.java
index a7d4ff8..0656da3 100644
--- a/tmp/546bde8f-11ab-48d0-8077-d37f3319441b_buggy.java
+++ b/tmp/7a685d5d-8945-490e-9f2e-3ca42a3ece41_fixed.java
@@ -1,28 +1,42 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space before minus signs that follow another minus sign, creating
+    // "--". This is necessary because "--" is interpreted as the decrement
+    // operator in JavaScript. This also handles the case of "- -0.0".
+    if ((x < 0 || negativeZero) && prev == '-') {
       add(" ");
     }
 
+    // Try printing the number as an integer if possible.
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
+      // Check if printing in scientific notation is shorter.
+      // We only bother with positive exponents, negative exponents don't make
+      // sense for integer values. Also, Math.abs(x) >= 100 implies that
+      // value != 0, thus we don't need to worry about division by zero.
+      // We make sure that the value can be represented accurately in scientific
+      // notation before using it. Otherwise, we may print 1.23E4 for 12300,
+      // which is technically correct, but may be misleading.
       if (Math.abs(x) >= 100) {
         while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
           mantissa /= 10;
           exp++;
         }
       }
+      // Print in scientific notation if it saves space.
+      // In particular, "1E3" is shorter than "1000".
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
         add(Long.toString(value));
       }
     } else {
+      // Otherwise, print it as a regular double.
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
