diff --git a/tmp/8783e59d-710b-483c-9d23-23d24683a00b_buggy.java b/tmp/12d8cd39-b9b7-4468-876b-24795e0a8f62_fixed.java
index 780fa1a..fab431e 100644
--- a/tmp/8783e59d-710b-483c-9d23-23d24683a00b_buggy.java
+++ b/tmp/12d8cd39-b9b7-4468-876b-24795e0a8f62_fixed.java
@@ -1,15 +1,23 @@
     /**
      * Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.
      *
      * @param bytes
      *            The bytes to be decoded into characters, may be <code>null</code>
      * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or
      *         <code>null</code> if the input byte array was <code>null</code>.
      * @throws NullPointerException
-     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is
+     *             Thrown if {@link org.apache.commons.codec.Charsets#ISO_8859_1} is not initialized, which should never happen since it is
      *             required by the Java platform specification.
      * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException
      */
     public static String newStringIso8859_1(final byte[] bytes) {
-        return new String(bytes, Charsets.ISO_8859_1);
+        // Return null if the input array is null, as specified by the Javadoc.
+        if (bytes == null) {
+            return null;
+        }
+        // Otherwise, create the new String using the specified charset.
+        // Charsets class should provide the Charset object. Assuming it exists and is correctly initialized.
+        // Note: The original code used Charsets.ISO_8859_1 which implies a dependency on a Charsets utility class.
+        // We'll keep that dependency.
+        return new String(bytes, org.apache.commons.codec.Charsets.ISO_8859_1);
     }
\ No newline at end of file
