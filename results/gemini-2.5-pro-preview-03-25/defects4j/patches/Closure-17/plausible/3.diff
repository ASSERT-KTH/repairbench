diff --git a/tmp/940c82b6-1590-4cb1-bda2-3796b2a64029_buggy.java b/tmp/ebd25f45-6805-4db1-b54a-5fbb82159f44_fixed.java
index eb9ce9f..0c80398 100644
--- a/tmp/940c82b6-1590-4cb1-bda2-3796b2a64029_buggy.java
+++ b/tmp/ebd25f45-6805-4db1-b54a-5fbb82159f44_fixed.java
@@ -1,60 +1,93 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // 1. Handle @type annotation on the l-value.
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+
+      // Check for function literal assigned to a variable.
+      // We special case this because we can often infer the type of a function
+      // literal directly.
+      if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+
+      // 2. Handle specific JSDoc constructs like @enum, @constructor, @interface
+      //    on the l-value declaration.
+      if (info != null) {
         if (info.hasEnumParameterType()) {
+          // Use the inferred type of the object literal if it's available.
+          // TODO(nicksantos): There's no reason why we shouldn't
+          // do this for all types.
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+        }
+      }
+
+      // 3. Handle @const on the l-value.
+      // This case is special, because we want to use the type *before*
+      // the r-value is assigned. To make this more complicated, sometimes
+      // the type is only specified on the r-value. e.g.,
+      // /** @const */ var MY_BEATLES =
+      //     /** @type {!Array.<string>} */ (["Paul", "John", ...]);
+      if (info != null && info.isConstant()) {
+        // Use the type annotation on the r-value if it exists. This handles
+        // cases like /** @const */ var x = /** @type {Foo} */ (y);
+        JSDocInfo rValueInfo = rValue != null ? rValue.getJSDocInfo() : null;
+        if (rValueInfo != null && rValueInfo.hasType()) {
+            return getDeclaredTypeInAnnotation(sourceName, rValue, rValueInfo);
+        }
+
+        // Fall back to the inferred type of the r-value.
         if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
-                return rValue.getJSType();
+          JSType rValueType = rValue.getJSType();
+          // Make sure we're not recursively trying to infer the type of a VAR.
+          if (rValueType != null && !rValueType.isUnknownType() && !rValue.isName()) {
+            return rValueType;
           } else if (rValue.isOr()) {
             // Check for a very specific JS idiom:
             // var x = x || TYPE;
             // This is used by Closure's base namespace for esoteric
             // reasons.
             Node firstClause = rValue.getFirstChild();
             Node secondClause = firstClause.getNext();
             boolean namesMatch = firstClause.isName()
                 && lValue.isName()
                 && firstClause.getString().equals(lValue.getString());
             if (namesMatch && secondClause.getJSType() != null
                 && !secondClause.getJSType().isUnknownType()) {
               return secondClause.getJSType();
             }
           }
         }
       }
-        }
-      }
 
+
+      // 4. Last resort, try to get a type from the l-value node's JSDoc.
+      // This is the place where we handle stub declarations, like:
+      // /** @type {number} */ var x;
+      // It also sometimes catches types declared inline, which is illegal
+      // according to the style guide, but allowed by the compiler:
+      // var /** @type {number} */ x = 3;
+      // TODO(nicksantos): The support for inline types should probably be
+      // moved elsewhere.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
