diff --git a/tmp/cf19d847-f244-43a8-b2e1-8aff3cbf4687_buggy.java b/tmp/b0cc876c-fb81-4534-85b6-0e5ca37d9f5a_fixed.java
index eb9ce9f..322a0e4 100644
--- a/tmp/cf19d847-f244-43a8-b2e1-8aff3cbf4687_buggy.java
+++ b/tmp/b0cc876c-fb81-4534-85b6-0e5ca37d9f5a_fixed.java
@@ -1,60 +1,91 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // 1. Check for @type in JSDoc associated with the l-value
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+
+      // Check for inline type information on the r-value if l-value has no @type
+      // Note: CAST nodes are handled later in the isConstant check by looking
+      // at rValue.getJSType(), which should return the cast type.
+      // However, if JSDoc is directly on rValue (e.g. /** @type {T} */ value),
+      // it might be preferable, especially for constants.
+
+      // 2. Check for function literal type inference
+      if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
+        // Function literal with declared parameter types or return type.
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+
+      // 3. Check for @enum, @constructor, @interface in JSDoc associated with l-value
+      if (info != null) {
         if (info.hasEnumParameterType()) {
-          if (rValue != null && rValue.isObjectLit()) {
+          // If rValue is an object literal, its type is usually inferred
+          // and has already been set by ProcessObjectPropertyPatterns.
+          // We prefer that type. See issue 643.
+          if (rValue != null && rValue.isObjectLit()
+              && rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
+          // Function literal inference was handled above, so this is likely
+          // a stub declaration or an alias.
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+        } else if (info.isConstant()) {
+          // 4. Handle @const case
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+            // Check #1: Explicit JSDoc on rValue (e.g., /** @type {T} */ value)
+            // This handles cases where the JSDoc is directly on the rValue node.
+            JSDocInfo rValueInfo = rValue.getJSDocInfo();
+            if (rValueInfo != null && rValueInfo.hasType()) {
+              return getDeclaredTypeInAnnotation(sourceName, lValue, rValueInfo);
+            }
+
+            // Check #2: Pre-computed type on rValue (e.g., from CAST node /** @type {T} */ (value))
+            // or other prior inference. This should take precedence over OR idiom.
+            JSType rValueType = rValue.getJSType();
+            if (rValueType != null && !rValueType.isUnknownType()) {
               // If rValue has a type-cast, we use the type in the type-cast.
               // If rValue's type was already computed during scope creation,
               // then we can safely use that.
-                return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+              return rValueType;
+            }
+
+            // Check #3: 'var x = x || TYPE;' idiom
+            if (rValue.isOr()) {
               Node firstClause = rValue.getFirstChild();
               Node secondClause = firstClause.getNext();
               boolean namesMatch = firstClause.isName()
                   && lValue.isName()
                   && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
+              if (namesMatch) {
+                   JSType secondClauseType = secondClause.getJSType();
+                   if (secondClauseType != null && !secondClauseType.isUnknownType()) {
+                     return secondClauseType;
                    }
               }
             }
           }
+          // If no type found for the constant, fall through to default.
         }
       }
 
+      // 5. Last resort: return null or an inferred type based on the annotation.
+      // This handles stub declarations, and constants without RHS types.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
