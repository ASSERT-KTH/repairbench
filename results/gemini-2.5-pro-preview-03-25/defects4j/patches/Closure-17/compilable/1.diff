diff --git a/tmp/5dcb8cd1-cb90-4635-bc5c-0927bb6cd8cb_buggy.java b/tmp/d978e633-9cf4-4203-a8f3-d2dc10966f77_fixed.java
index eb9ce9f..c31ea0b 100644
--- a/tmp/5dcb8cd1-cb90-4635-bc5c-0927bb6cd8cb_buggy.java
+++ b/tmp/d978e633-9cf4-4203-a8f3-d2dc10966f77_fixed.java
@@ -1,60 +1,89 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // 1. Explicit @type on lValue takes precedence
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+
+      // 2. Function literal rValue with specific conditions
+      if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
+        // Function literal defines the type
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+
+      // 3. Specific lValue markers (@enum, @constructor, @interface)
+      if (info != null) {
         if (info.hasEnumParameterType()) {
+          // Enum type definition
           if (rValue != null && rValue.isObjectLit()) {
+             // If assigned an object literal, its type might be the enum value type.
+             // Note: This might be inaccurate if the object literal doesn't match the enum.
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
+          // Function type definition (constructor/interface)
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+        }
+        // Not handled here: @const or other annotations. Proceed below.
+      }
+
+      // 4. Check @const specifically (if info present and isConstant)
+      // This is handled after specific type-defining annotations but before the final fallback.
+      if (info != null && info.isConstant()) {
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
-                return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+            // Check 1: Known type from rValue (CAST, literal, variable ref, etc.)
+            JSType rValueType = rValue.getJSType();
+            if (rValueType != null && !rValueType.isUnknownType()) {
+              // If rValue's type was already computed, use that.
+              // This handles CASTs `/** @type {T} */ (expr)` correctly if the CAST type is populated.
+              return rValueType;
+            }
+            // Check 2: OR idiom (var x = x || TYPE;)
+            else if (rValue.isOr()) {
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
-                }
+                // Check structure: first clause must be a name, lValue must be a name, names must match.
+                boolean namesMatch = lValue.isName()
+                    && firstClause.isName()
+                    && lValue.getString().equals(firstClause.getString());
+                if (namesMatch) {
+                    // If names match, try to use the type of the second clause (the default value).
+                    JSType secondClauseType = secondClause.getJSType();
+                    if (secondClauseType != null && !secondClauseType.isUnknownType()) {
+                        return secondClauseType;
                     }
                 }
             }
+            // If rValue type is unknown/null or it's not the specific OR idiom,
+            // we cannot determine the type from rValue here.
           }
+          // For @const, the type must come from initialization or an explicit @type.
+          // If we are here, it means @const was present, but we couldn't determine
+          // the type from the rValue at this stage. Return null to let
+          // subsequent type inference determine the type (hopefully respecting the rValue/CAST).
+          return null;
       }
 
+      // 5. Fallback if none of the above determined the type.
+      // This happens if info is null, or info is present but didn't have @type,
+      // wasn't enum/ctor/iface, and wasn't @const.
+      // It essentially means no declaration JSDoc provided usable type info.
+      // We still call getDeclaredTypeInAnnotation as a last resort, though it will likely
+      // return null if info is null or has no type.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
