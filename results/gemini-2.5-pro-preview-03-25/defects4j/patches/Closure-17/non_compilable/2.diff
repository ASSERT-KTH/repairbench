diff --git a/tmp/360dbc3b-15c2-4452-912e-e097bca34101_buggy.java b/tmp/c93136d8-07a8-46c5-8876-084aebbcc803_fixed.java
index eb9ce9f..e3c6ac0 100644
--- a/tmp/360dbc3b-15c2-4452-912e-e097bca34101_buggy.java
+++ b/tmp/c93136d8-07a8-46c5-8876-084aebbcc803_fixed.java
@@ -1,60 +1,81 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+
+      // Check for a type annotation attached to the rValue node.
+      // This occurs in cases like: var x = /** @type {T} */ (value);
+      // or /** @type {T} */ ({...}). This annotation takes precedence.
+      if (rValue != null) {
+        JSDocInfo rValueInfo = rValue.getJSDocInfo();
+        if (rValueInfo != null && rValueInfo.hasType()) {
+          // Use the type annotation found on the rValue.
+          // Pass rValue as the 'defining' node for context.
+          return getDeclaredTypeInAnnotation(sourceName, rValue, rValueInfo);
+        }
+      }
+
+      // If no type annotation on rValue, check for one on the lValue.
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+
+      // If no explicit type annotation found yet, check for specific structures.
+      if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
+        // Handle function literal rhs
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+
+      if (info != null) {
+        // Handle @enum, @constructor, @interface from lValue's JSDoc
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
+            // Enum initialized with an object literal. Use the literal's type
+            // if no explicit @type was found on rValue already.
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+        } else if (info.isConstant()) {
+          // Handle @const, try to infer the type from rValue if no explicit type found.
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
-                return rValue.getJSType();
+            // Check if rValue's type was already computed (e.g., by type inference)
+            // Make sure we didn't already handle this via an rValue JSDoc check above.
+            JSType rValueType = rValue.getJSType();
+            if (rValueType != null && !rValueType.isUnknownType()) {
+              return rValueType;
             } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+              // Check for the specific JS idiom: var x = x || DEFAULT_VALUE;
               Node firstClause = rValue.getFirstChild();
               Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
+              boolean namesMatch = lValue.isQualifiedName()
+                  && firstClause.isQualifiedName()
+                  && lValue.matchesQualifiedName(firstClause);
+              if (namesMatch) {
+                  JSType secondClauseType = secondClause.getJSType();
+                  if (secondClauseType != null && !secondClauseType.isUnknownType()) {
+                      return secondClauseType;
                   }
               }
             }
           }
         }
       }
 
+      // Fallback: Try to get type from lValue JSDoc again, possibly handling
+      // other kinds of annotations or if info was initially null.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
