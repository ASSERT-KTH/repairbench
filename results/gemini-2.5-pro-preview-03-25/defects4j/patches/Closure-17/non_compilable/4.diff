diff --git a/tmp/cf461e5b-4d85-4232-a1ed-69820df41ad8_buggy.java b/tmp/b648b1b2-6ace-4151-bdd0-9b255cf21f77_fixed.java
index eb9ce9f..45a58e2 100644
--- a/tmp/cf461e5b-4d85-4232-a1ed-69820df41ad8_buggy.java
+++ b/tmp/b648b1b2-6ace-4151-bdd0-9b255cf21f77_fixed.java
@@ -1,60 +1,86 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // 1. Check for @type JSDoc on the L-Value.
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+
+      // 2. Check for a @type JSDoc cast on the R-Value.
+      // This is commonly used for constants. e.g. @const x = /** @type {foo} */ (bar);
+      // This also needs to be checked before the other rValue checks below
+      // (like isFunction or isObjectLit), as casts can wrap those types.
+      if (rValue != null && rValue.isCast()) {
+        JSDocInfo rValueInfo = rValue.getJSDocInfo();
+        if (rValueInfo != null && rValueInfo.hasType()) {
+          // Use the type from the cast.
+          return getDeclaredTypeInAnnotation(sourceName, rValue, rValueInfo);
+        }
+        // If the cast doesn't have type info (which would be weird),
+        // fall through and try to get the type from the expression being cast
+        // or other conditions below.
+      }
+
+      // 3. Check for function literal types.
+      if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+
+      // 4. Check for other JSDoc annotations on the L-Value (@enum, @constructor, @interface, @const).
+      if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
+            // If the RHS is an object literal, its type might be precomputed.
             return rValue.getJSType();
           } else {
+            // Otherwise, create the enum type from the declaration.
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
+          // Create the function type from the declaration.
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+        } else if (info.isConstant()) {
+          // Handle @const when no explicit @type on L-Value and no cast on R-Value.
+          // Try to infer the type from the R-Value if possible.
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
+            // Don't check cast nodes again, they were handled above.
+            // Check if rValue's type is already known and usable.
+             if (!rValue.isCast() && rValue.getJSType() != null &&
+                 !rValue.getJSType().isUnknownType()) {
+                // If rValue has a known type (and isn't a cast), use it.
+                // This handles cases like @const x = 1; or @const y = someFunction();
                 return rValue.getJSType();
              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+                // Handle the "var x = x || DEFAULT" idiom.
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
                 boolean namesMatch = firstClause.isName()
                     && lValue.isName()
                     && firstClause.getString().equals(lValue.getString());
                 if (namesMatch && secondClause.getJSType() != null
                     && !secondClause.getJSType().isUnknownType()) {
                   return secondClause.getJSType();
                 }
              }
           }
-          }
+          // If @const but R-Value is null, unknown, a cast without type, or unhandled, fall through.
         }
       }
 
+      // 5. Final fallback. If no type was determined by annotations or inference,
+      //    call getDeclaredTypeInAnnotation again. This might return null or handle
+      //    other cases like @param for function parameters based on the original 'info'.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
