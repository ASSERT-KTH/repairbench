diff --git a/tmp/e2a2ba9c-3f4a-46de-99f8-888308e70475_buggy.java b/tmp/b1500c32-6316-40c1-b1d8-4dff85b65217_fixed.java
index eb9ce9f..61f75f8 100644
--- a/tmp/e2a2ba9c-3f4a-46de-99f8-888308e70475_buggy.java
+++ b/tmp/b1500c32-6316-40c1-b1d8-4dff85b65217_fixed.java
@@ -1,60 +1,103 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // If the l-value has an explicit type annotation, use that.
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+
+      // If the r-value is a function literal, use its type.
+      if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+
+      if (info != null) {
+        // Check for enum types.
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
+            // If rValue is an object literal, this is an enum definition.
+            // Use the object literal's type.
             return rValue.getJSType();
           } else {
+            // If rValue is not an object literal, we might be looking at an
+            // assignment of an enum type to a variable. e.g.,
+            // /** @enum {string} */ var MyEnum = OtherEnum;
+            // In this case, use the declared enum type, not the type of the rValue.
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
-        } else if (info.isConstructor() || info.isInterface()) {
+        }
+
+        // Check for constructor/interface types.
+        if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
+        }
+
+        // Check if this is constant.
         if (info.isConstant()) {
-            JSType knownType = null;
+           // For constants, the type annotation on the value is
+           // potentially significant.
+           // If rValue has a type-cast, we use the type in the type-cast.
+           // It's stronger than the inferred type.
+           // NOTE(nicksantos): This doesn't handle nested casts properly.
+           // Need to fix this later.
+
+           // Only do this if the constant does not have an explicit type
+           // annotation. The explicit annotation takes precedence.
+           if (rValue != null && rValue.isCast() && rValue.getJSDocInfo() != null) {
+             JSDocInfo castInfo = rValue.getJSDocInfo();
+             if (castInfo.hasType()) {
+               // Use the type specified in the cast. Pass the CAST node as the node
+               // associated with the type, so that it can be used for template resolution.
+               return getDeclaredTypeInAnnotation(sourceName, rValue, castInfo);
+             }
+             // If the castInfo has no type (e.g. /** @type {?} */), fall through
+             // and attempt to use the inferred type of the casted expression.
+           }
+
+          // If the constant is not initialized, or initialized to null, we do not
+          // infer the type.
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+            JSType rValueType = rValue.getJSType();
             // If rValue has a type-cast, we use the type in the type-cast.
             // If rValue's type was already computed during scope creation,
             // then we can safely use that.
-                return rValue.getJSType();
+            if (rValueType != null && !rValueType.isUnknownType()) {
+              return rValueType;
             } else if (rValue.isOr()) {
               // Check for a very specific JS idiom:
               // var x = x || TYPE;
               // This is used by Closure's base namespace for esoteric
               // reasons.
               Node firstClause = rValue.getFirstChild();
               Node secondClause = firstClause.getNext();
               boolean namesMatch = firstClause.isName()
                   && lValue.isName()
                   && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
+              if (namesMatch) {
+                JSType secondClauseType = secondClause.getJSType();
+                if (secondClauseType != null && !secondClauseType.isUnknownType()) {
+                  return secondClauseType;
                 }
               }
             }
           }
         }
       }
 
+      // If we couldn't determine the type from the above checks, fall back
+      // to using the l-value's JSDoc info (or lack thereof). This handles function stubs,
+      // variables without initializers, and cases where the r-value type is unknown.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
