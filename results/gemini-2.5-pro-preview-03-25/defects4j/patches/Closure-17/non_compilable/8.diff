diff --git a/tmp/5e814f8a-d8fc-444d-8078-6de040ff3462_buggy.java b/tmp/32906766-564e-43bb-b975-9f4eff404273_fixed.java
index eb9ce9f..dc357e5 100644
--- a/tmp/5e814f8a-d8fc-444d-8078-6de040ff3462_buggy.java
+++ b/tmp/32906766-564e-43bb-b975-9f4eff404273_fixed.java
@@ -1,60 +1,89 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // If the jsdoc declares a type, use that.
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+
+      // Functions are special, check them first.
+      if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+
+      // Check for other jsdoc annotations.
+      if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
+            // If the enum is initialized with an object literal, we infer
+            // the type from the properties of the object literal.
             return rValue.getJSType();
           } else {
+            // Otherwise, the enum type is resolved during scope creation.
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
+          // If this is a function prototype assignment, type information
+          // is specified in the jsdoc comment. We have a function type
+          // with the corresponding instance type.
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
+        } else if (info.isConstant()) {
           // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+            JSType rValueType = rValue.getJSType();
+            if (rValueType != null && !rValueType.isUnknownType()) {
               // If rValue has a type-cast, we use the type in the type-cast.
               // If rValue's type was already computed during scope creation,
               // then we can safely use that.
-                return rValue.getJSType();
+
+              // For @const declarations, the assigned value is guaranteed
+              // not null *if* the rValue expression itself isn't the null literal.
+              // In such cases, restrict the type to non-nullable.
+              // This handles `/** @const */ var X = /** @type {T} */ ({...})` by making the type !T.
+              // It also handles `/** @const */ var Y = {};` making the type {!Object}.
+              if (!rValue.isNull()) {
+                  return rValueType.restrictByNotNullOrUndefined();
+              } else {
+                  // If rValue is the literal 'null', keep the original type (which should be NullType)
+                  return rValueType;
+              }
             } else if (rValue.isOr()) {
               // Check for a very specific JS idiom:
               // var x = x || TYPE;
               // This is used by Closure's base namespace for esoteric
               // reasons.
               Node firstClause = rValue.getFirstChild();
               Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
+              // Check if the first clause refers to the same variable being assigned.
+              boolean namesMatch = firstClause.isQualifiedName()
+                  && lValue.isQualifiedName()
+                  && firstClause.matchesQualifiedName(lValue);
               if (namesMatch && secondClause.getJSType() != null
                   && !secondClause.getJSType().isUnknownType()) {
+                // Type is determined by the second clause (the default value).
                 return secondClause.getJSType();
               }
             }
           }
-          }
+          // If rValue is null or its type is unknown, fall through
+          // to the general case.
         }
       }
 
+      // Fallback case. If we have jsdoc, we use that.
+      // Otherwise, rValue may already have a type annotated on it
+      // (in an assignment, call, etc).
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
