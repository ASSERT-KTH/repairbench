diff --git a/tmp/6e65fa47-bf87-4107-920d-e4a7e3dda7ff_buggy.java b/tmp/5229f662-4335-414c-96b0-d112ecaac3f3_fixed.java
index eb9ce9f..e8215f9 100644
--- a/tmp/6e65fa47-bf87-4107-920d-e4a7e3dda7ff_buggy.java
+++ b/tmp/5229f662-4335-414c-96b0-d112ecaac3f3_fixed.java
@@ -1,60 +1,100 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
+      // 1. Check @type on lValue (info)
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+      // 2. Check if rValue is a function literal (special handling)
+      else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
+        // Function literal definition can be handled specially.
         return rValue.getJSType();
-      } else if (info != null) {
+      }
+      // 3. Check specific JSDoc tags on lValue (info)
+      else if (info != null) {
+        // 3a. @enum
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
+            // If rValue is an object literal, this is an enum definition.
             return rValue.getJSType();
           } else {
+            // If rValue is not an object literal, this is the declaration
+            // of an enum type, so use the enum type declared in the JSDoc.
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
-        } else if (info.isConstructor() || info.isInterface()) {
+        }
+        // 3b. @constructor/@interface
+        else if (info.isConstructor() || info.isInterface()) {
+          // If rValue is a function literal, this is a function definition.
+          // If rValue is something else, this is the declaration of a function
+          // type, so use the function type declared in the JSDoc.
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
+        }
+        // 3c. @const / other properties
+        else {
           // Check if this is constant, and if it has a known type.
           if (info.isConstant()) {
-            JSType knownType = null;
             if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+              JSType rValueType = rValue.getJSType();
+              // Check 1: Use existing type on rValue if valid and known.
+              if (rValueType != null && !rValueType.isUnknownType()) {
                 // If rValue has a type-cast, we use the type in the type-cast.
                 // If rValue's type was already computed during scope creation,
                 // then we can safely use that.
-                return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+                return rValueType;
+              }
+              // Check 2: If rValue type is unknown/null, check specific structures.
+              else {
+                 // Check 2a: If rValue is a CAST, try resolving its JSDoc type directly.
+                 // This can help if the type wasn't propagated to the node's JSType yet.
+                 if (rValue.isCast()) {
+                    JSDocInfo castInfo = rValue.getJSDocInfo();
+                    if (castInfo != null && castInfo.hasType()) {
+                      JSType typeFromCastInfo =
+                          getDeclaredTypeInAnnotation(sourceName, rValue, castInfo);
+                      // Return the resolved type if successful.
+                      if (typeFromCastInfo != null) {
+                        return typeFromCastInfo;
+                      }
+                    }
+                 }
+                 // Check 2b: Handle the "var x = x || TYPE;" idiom.
+                 else if (rValue.isOr()) {
                    Node firstClause = rValue.getFirstChild();
                    Node secondClause = firstClause.getNext();
                    boolean namesMatch = firstClause.isName()
                        && lValue.isName()
                        && firstClause.getString().equals(lValue.getString());
                    if (namesMatch && secondClause.getJSType() != null
                        && !secondClause.getJSType().isUnknownType()) {
+                     // Use the type of the second clause if names match.
                      return secondClause.getJSType();
                    }
                  }
               }
             }
           }
+          // Fall through: If not constant or type not determined,
+          // let the final fallback handle it.
+        }
       }
 
+      // 4. Fallback: Check @type on lValue (info) again.
+      // This might be reached if info is null, or if info is non-null
+      // but has no recognized annotations (@type, @enum, @const etc.) handled above,
+      // or if @const handling above didn't find a type.
+      // If info is non-null but has no @type, this will likely return null.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
