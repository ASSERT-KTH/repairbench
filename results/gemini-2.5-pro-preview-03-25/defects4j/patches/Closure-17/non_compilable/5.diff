diff --git a/tmp/c0236c3f-aace-40d4-a46f-bc186aef1fd7_buggy.java b/tmp/8a19ac7e-f80e-4d96-870e-217da2712f19_fixed.java
index eb9ce9f..0a06783 100644
--- a/tmp/c0236c3f-aace-40d4-a46f-bc186aef1fd7_buggy.java
+++ b/tmp/8a19ac7e-f80e-4d96-870e-217da2712f19_fixed.java
@@ -1,60 +1,78 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
         } else {
           // Check if this is constant, and if it has a known type.
           if (info.isConstant()) {
-            JSType knownType = null;
             if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+              JSType knownType = rValue.getJSType();
               // If rValue has a type-cast, we use the type in the type-cast.
               // If rValue's type was already computed during scope creation,
               // then we can safely use that.
-                return rValue.getJSType();
+              if (knownType != null && !knownType.isUnknownType()) {
+                return knownType;
+              } else if (rValue.isCast()) {
+                // Handling for a standalone variable annotated @const
+                // whose definition is a cast expression, like:
+                // /** @const */ var x = /** @type {Foo} */ (foo());
+                // The rValue JSType might not be set yet. We try to determine
+                // the type directly from the cast annotation.
+                JSDocInfo castInfo = rValue.getJSDocInfo();
+                if (castInfo != null && castInfo.hasType()) {
+                  // Pass rValue as the lValue node, because that's the node
+                  // the castInfo is attached to.
+                  return getDeclaredTypeInAnnotation(sourceName, rValue, castInfo);
+                }
               } else if (rValue.isOr()) {
                 // Check for a very specific JS idiom:
                 // var x = x || TYPE;
                 // This is used by Closure's base namespace for esoteric
                 // reasons.
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
                 boolean namesMatch = firstClause.isName()
                     && lValue.isName()
                     && firstClause.getString().equals(lValue.getString());
                 if (namesMatch && secondClause.getJSType() != null
                     && !secondClause.getJSType().isUnknownType()) {
                   return secondClause.getJSType();
                 }
               }
             }
           }
         }
       }
 
+      // Fallback: use the type in the @type annotation if any.
+      // Includes the case where rValue is null, like /** @type {foo} */ var x;
+      // Includes the case where rValue is present but doesn't have a known type,
+      // like /** @type {foo} */ var x = function() {};
+      // Includes the case where the @const doesn't have an rValue type that
+      // we can figure out.
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
