diff --git a/tmp/2f42fce2-e210-44e9-b4c1-d486e0a8c66e_buggy.java b/tmp/b4de9a15-3dcf-4228-b5aa-fb549cab6add_fixed.java
index 8ff679b..3412440 100644
--- a/tmp/2f42fce2-e210-44e9-b4c1-d486e0a8c66e_buggy.java
+++ b/tmp/b4de9a15-3dcf-4228-b5aa-fb549cab6add_fixed.java
@@ -1,39 +1,48 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
     // This can be the case if interfaceType is proxy to a non-existent
     // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    // If the implicit prototype is null, there are no properties to check.
+    if (implicitProto != null) {
+      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
+          // Check that the property types are equivalent.
+          // We use the interface type that defined the property, rather than
+          // the current interface type, because the current interface type
+          // might be a proxy for a non-existent type.
+          ObjectType propertyDefiningType = oType;
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+              propertyDefiningType.getPropertyType(name))) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
+                    functionName, name, propertyDefiningType.toString(),
                     interfaceType.toString()));
           }
         }
         currentProperties.put(name, interfaceType);
       }
+    }
+
+    // Check recursively for conflicts in other extended interfaces.
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
