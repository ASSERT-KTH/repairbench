diff --git a/tmp/8e781da1-8b64-424a-b51e-c7aabf886caa_buggy.java b/tmp/807508c1-10b0-4390-a159-6ff53847c2cc_fixed.java
index 8ff679b..d49ff91 100644
--- a/tmp/8e781da1-8b64-424a-b51e-c7aabf886caa_buggy.java
+++ b/tmp/807508c1-10b0-4390-a159-6ff53847c2cc_fixed.java
@@ -1,39 +1,48 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
-   * been visited
+   * been visited (from previous sibling branches).
    * @param currentProperties The property names in the super interface
-   * that have been visited
+   * hierarchy currently being visited.
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+
+    // Check if the implicit prototype is null. This can happen if the
+    // interfaceType is a proxy to a non-existent object (a bad type annotation).
+    // In this case, we shouldn't crash, and there are no properties to check.
+    if (implicitProto != null) {
+      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
+        // Check for conflict with a property from a previously visited branch.
         if (oType != null) {
+          // Check if the property types are compatible.
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
+        // Record this property name and the interface it's from for the current branch.
         currentProperties.put(name, interfaceType);
       }
+    }
+
+    // Recursively check interfaces extended by the current one, even if the
+    // current interfaceType itself was problematic (e.g., non-existent).
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
