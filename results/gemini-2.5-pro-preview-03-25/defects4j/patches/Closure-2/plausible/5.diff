diff --git a/tmp/8c6eec44-8287-44b0-a63f-04d56bf43077_buggy.java b/tmp/666903d0-9a47-4b91-8390-9a609c33d551_fixed.java
index 8ff679b..81d2295 100644
--- a/tmp/8c6eec44-8287-44b0-a63f-04d56bf43077_buggy.java
+++ b/tmp/666903d0-9a47-4b91-8390-9a609c33d551_fixed.java
@@ -1,39 +1,74 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    // Handle cases where the interface type might be null or a proxy to an unknown type,
+    // which can occur with bad annotations like extending non-existent interfaces.
+    if (interfaceType == null || interfaceType.isUnknownType()) {
+      return; // Nothing to check for null or unknown types.
+    }
+
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+
+    // Check if the implicit prototype is null. This can happen if interfaceType
+    // is a proxy to a non-existent object (a bad type annotation), or for
+    // other reasons like structural interfaces.
+    if (implicitProto != null) {
+      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
+          // Ensure both property types exist before comparing.
+          // JSType#isEquivalentTo should handle nulls or UnknownType gracefully,
+          // but direct comparison is safer if getPropertyType might return null unexpectedly.
+          JSType propType1 = interfaceType.getPropertyType(name);
+          JSType propType2 = oType.getPropertyType(name);
+          // Check for null defensively, although isEquivalentTo often handles this.
+          // If either type is null or couldn't be resolved, consider it not equivalent
+          // unless both are similarly unresolved/null? The isEquivalentTo method
+          // should define the correct semantics here.
+          if (propType1 != null && propType2 != null && !propType1.isEquivalentTo(propType2)) {
+            compiler.report(
+                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+                    functionName, name, oType.toString(),
+                    interfaceType.toString()));
+          } else if (propType1 == null || propType2 == null) {
+             // If one type is null and the other isn't, they are not equivalent.
+             // However, reporting this might be too noisy if types couldn't be resolved
+             // for reasons already reported (like unknown type).
+             // Let's stick to the original logic's reliance on isEquivalentTo,
+             // assuming it handles null/unknown appropriately.
+             // Reverting the explicit null check here based on that assumption.
              if (!interfaceType.getPropertyType(name).isEquivalentTo(
                  oType.getPropertyType(name))) {
                compiler.report(
                    t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                        functionName, name, oType.toString(),
                        interfaceType.toString()));
              }
           }
+        }
+        // Record the property and the interface it's associated with in this path.
         currentProperties.put(name, interfaceType);
       }
+    }
+
+    // Recursively check the interfaces this interface extends.
+    // The recursive call will handle null/unknown types at its start.
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
