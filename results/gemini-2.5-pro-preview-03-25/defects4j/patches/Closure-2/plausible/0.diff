diff --git a/tmp/5786bebd-4671-45f7-9b77-4e46daf1c1a8_buggy.java b/tmp/1f70b3f5-8c14-4795-9a93-46a4aeb2ff37_fixed.java
index 8ff679b..f401973 100644
--- a/tmp/5786bebd-4671-45f7-9b77-4e46daf1c1a8_buggy.java
+++ b/tmp/1f70b3f5-8c14-4795-9a93-46a4aeb2ff37_fixed.java
@@ -1,39 +1,69 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    // interfaceType can be null if this interface is a proxy
+    // to a non-existent object (which is a bad type annotation, but shouldn't crash).
+    // It can also be null if the interface comes from a bad @extends clause.
+    if (interfaceType == null) {
+      return;
+    }
+
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
+    // Check if implicitProto is null, which can happen for proxies to non-existent objects.
+    if (implicitProto != null) {
       // This can be the case if interfaceType is proxy to a non-existent
       // object (which is a bad type annotation, but shouldn't crash).
       currentPropertyNames = implicitProto.getOwnPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+          // Check for conflicts, but be robust against null property types
+          // which might occur in malformed types.
+          JSType propType1 = interfaceType.getPropertyType(name);
+          JSType propType2 = oType.getPropertyType(name);
+          boolean incompatible = false;
+          if (propType1 == null || propType2 == null) {
+              // If one is null and the other isn't, they are incompatible.
+              // If both are null, consider them equivalent for this check.
+              if (propType1 != propType2) {
+                  incompatible = true;
+              }
+          } else {
+              // Both are non-null, check equivalence.
+              if (!propType1.isEquivalentTo(propType2)) {
+                  incompatible = true;
+              }
+          }
+
+          if (incompatible) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
         currentProperties.put(name, interfaceType);
       }
+    } // End of null check for implicitProto
+
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+      // Recursively check inherited interfaces. iType could also be null if
+      // an extended interface is non-existent. Handled by the null check at the start.
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
