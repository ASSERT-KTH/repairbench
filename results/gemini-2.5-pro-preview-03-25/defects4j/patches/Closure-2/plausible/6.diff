diff --git a/tmp/d94eabb0-50fc-4acc-86ca-8ec90d57a8ba_buggy.java b/tmp/8e398a36-77f1-440a-a9af-2244acbca378_fixed.java
index 8ff679b..5cf7548 100644
--- a/tmp/d94eabb0-50fc-4acc-86ca-8ec90d57a8ba_buggy.java
+++ b/tmp/8e398a36-77f1-440a-a9af-2244acbca378_fixed.java
@@ -1,39 +1,61 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    // interfaceType might be null if it resolves to an unknown type.
+    // This can happen if an extended interface name is misspelled.
+    if (interfaceType == null) {
+      return; // Nothing to check.
+    }
+
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    // Check if the implicit prototype is null. This can happen if interfaceType
+    // is a proxy to a non-existent object (e.g., @extends {NotFound}),
+    // which is a bad type annotation, but shouldn't crash the compiler.
+    if (implicitProto != null) {
+      // Process properties only if the implicit prototype is available.
+      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
+          // Check for incompatible property types. Use JSType's isEquivalentTo.
+          // Assume getPropertyType returns a valid JSType if the property name
+          // was retrieved from getOwnPropertyNames.
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
+        // Record this property and the interface it came from.
         currentProperties.put(name, interfaceType);
       }
-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+    }
+    // ImplicitProto might be null, but the interface might still nominally
+    // extend other interfaces (even if incorrectly typed). Recurse to check those.
+    // For example, /** @interface I extends DoesNotExist, RealInterface */
+    // We should still check RealInterface.
+    Iterable<ObjectType> extendedInterfaces = interfaceType.getCtorExtendedInterfaces();
+    // Check if the iterable itself is null for safety, although typically it should return an empty collection.
+    if (extendedInterfaces != null) {
+      for (ObjectType iType : extendedInterfaces) {
+        // The recursive call will handle null iType at its start.
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
     }
+  }
\ No newline at end of file
