diff --git a/tmp/b1eba0cf-2bd8-40ca-92df-fb39b3bd97f4_buggy.java b/tmp/5db8b72d-a840-467c-9a53-efd03888dce4_fixed.java
index 8ff679b..547be1f 100644
--- a/tmp/b1eba0cf-2bd8-40ca-92df-fb39b3bd97f4_buggy.java
+++ b/tmp/5db8b72d-a840-467c-9a53-efd03888dce4_fixed.java
@@ -1,39 +1,49 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
     // This can be the case if interfaceType is proxy to a non-existent
     // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (implicitProto != null) { // Add null check for implicitProto
+      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+          // Check if the property types are equivalent. Use the JSType methods
+          // directly on the ObjectType representing the interface.
+          com.google.javascript.rhino.jstype.JSType propType = interfaceType.getPropertyType(name);
+          com.google.javascript.rhino.jstype.JSType oPropType = oType.getPropertyType(name);
+
+          // isEquivalentTo should handle unknown types gracefully, but checking
+          // for null might be necessary if getPropertyType can return null.
+          // Assuming getPropertyType returns non-null JSType or UnknownType.
+          if (!propType.isEquivalentTo(oPropType)) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
+        // Record this interface as the source for this property name
         currentProperties.put(name, interfaceType);
       }
+    }
+    // Recursively check extended interfaces, even if the current one had a null prototype
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
