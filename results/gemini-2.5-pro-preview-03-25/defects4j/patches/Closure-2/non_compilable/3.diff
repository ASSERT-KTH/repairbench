diff --git a/tmp/ce17a0e2-8c17-43a2-a1ff-c654ebba29ab_buggy.java b/tmp/29456062-7f51-4a54-b59b-06b2be005197_fixed.java
index 8ff679b..83d2b7f 100644
--- a/tmp/ce17a0e2-8c17-43a2-a1ff-c654ebba29ab_buggy.java
+++ b/tmp/29456062-7f51-4a54-b59b-06b2be005197_fixed.java
@@ -1,39 +1,65 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    *     been visited
    * @param currentProperties The property names in the super interface
-   * that have been visited
+   *     that have been visited, mapped to the interface definition node
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
+    if (implicitProto != null) {
       // This can be the case if interfaceType is proxy to a non-existent
       // object (which is a bad type annotation, but shouldn't crash).
       currentPropertyNames = implicitProto.getOwnPropertyNames();
+    } else {
+      // If the implicit prototype is null, it means the interface couldn't be
+      // fully resolved (e.g., @extends non-existent type).
+      // There are no properties to check on this specific interface type.
+      currentPropertyNames = java.util.Collections.emptySet();
+    }
+
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
-      if (oType != null) {
+      ObjectType currentType = currentProperties.get(name);
+      // If the property is defined on the current interface and not previously
+      // defined on other interfaces then record it.
+      // If the property is defined on the current interface and also defined
+      // on other interfaces then check for conflicts.
+      if (oType != null && currentType == null) {
+          // Check for conflicts only if the property was defined previously
+          // in a different interface branch. currentProperties tracks properties
+          // found in the current specific branch of the interface hierarchy.
+          // properties tracks all properties found across all branches.
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
               compiler.report(
                   t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                       functionName, name, oType.toString(),
                       interfaceType.toString()));
             }
       }
+      // Record the property definition from the current interface.
       currentProperties.put(name, interfaceType);
+      // Keep track of the property existence across all interfaces.
+      // Use the current interfaceType if it's the first time seeing the property,
+      // otherwise keep the existing oType.
+      properties.putIfAbsent(name, interfaceType);
     }
+
+    // Check recursively declared interfaces
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+      HashMap<String, ObjectType> interfaceProperties =
+          new HashMap<>(currentProperties);
       checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
+          interfaceProperties, iType);
     }
   }
\ No newline at end of file
