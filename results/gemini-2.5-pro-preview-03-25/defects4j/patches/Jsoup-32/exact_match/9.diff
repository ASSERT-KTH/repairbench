diff --git a/tmp/7f81b26a-4b21-49b0-a13b-defb73679ea4_buggy.java b/tmp/81305312-6ee6-458f-8465-fd7622e0ef57_fixed.java
index 91469b4..1aad3a4 100644
--- a/tmp/7f81b26a-4b21-49b0-a13b-defb73679ea4_buggy.java
+++ b/tmp/81305312-6ee6-458f-8465-fd7622e0ef57_fixed.java
@@ -1,6 +1,12 @@
     @Override
     public Element clone() {
-        Element clone = (Element) super.clone();
-        clone.classNames();
+        Element clone = (Element) super.clone(); // Creates a shallow copy of Element fields, but Node.clone() handles deep copying of attributes.
+        // The issue is that if the class names set (`classNames`) is cached as a field in Element,
+        // super.clone() (Object's clone) performs a shallow copy of this field.
+        // This means both the original and the clone would share the same Set object initially.
+        // Modifying the Set retrieved from the clone would then affect the original element's state.
+        // To fix this, we need to clear the cached Set in the clone, so it generates its own
+        // independent Set when classNames() is called on it.
+        clone.classNames = null; // Reset the cached class names Set in the clone.
         return clone;
     }
\ No newline at end of file
