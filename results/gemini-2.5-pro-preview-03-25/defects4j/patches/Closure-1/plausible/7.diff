diff --git a/tmp/e7c86c34-aa10-4ffb-bec5-d2bfde11f05e_buggy.java b/tmp/c4494b09-3f8f-44e1-9703-35bf0ce44425_fixed.java
index 61ffdbf..a21251b 100644
--- a/tmp/e7c86c34-aa10-4ffb-bec5-d2bfde11f05e_buggy.java
+++ b/tmp/c4494b09-3f8f-44e1-9703-35bf0ce44425_fixed.java
@@ -1,44 +1,54 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
+    // Check if removing unused function arguments is enabled.
+    // This is controlled by the removeGlobals flag, which is typically
+    // true only in ADVANCED mode.
+    if (!removeGlobals) {
+      return;
+    }
+
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
+        // The var may be null if it was defined in externs.
+        // We may also not want to remove externs declarations.
+        if (var == null || var.isExtern() || referenced.contains(var)) {
+          break;
+        } else {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
-        } else {
-          break;
         }
       }
     } else {
+      // TODO(johnlenz): Refactor this. Move this to CallSiteOptimizer?
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
