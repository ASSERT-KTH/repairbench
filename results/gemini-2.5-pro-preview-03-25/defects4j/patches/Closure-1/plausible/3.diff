diff --git a/tmp/2a2a5a44-7b4c-46ac-abfb-28dc406fcf3d_buggy.java b/tmp/5bc909c5-f38b-467c-a1d3-882add22c83e_fixed.java
index 61ffdbf..5ff19bc 100644
--- a/tmp/2a2a5a44-7b4c-46ac-abfb-28dc406fcf3d_buggy.java
+++ b/tmp/5bc909c5-f38b-467c-a1d3-882add22c83e_fixed.java
@@ -1,44 +1,58 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
+    // This optimization is only relevant if we are removing globals.
+    // TODO(johnlenz): See if we can decouple this from removeGlobals.
+    if (!removeGlobals) {
+      return;
+    }
+
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
+        // Check if the variable exists and is unreferenced.
+        // If the var is null, it means it wasn't declared in this scope,
+        // which shouldn't happen for parameter nodes. But check anyway.
+        if (var != null && !referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
+          // If the var is referenced, or we can't find it, stop removing args.
           break;
         }
       }
     } else {
+      // Optimize the call sites if possible. This logic should be safe
+      // even if removeGlobals is false. CallSiteOptimizer has its own
+      // checks for safety. However, the decision to DO this optimization
+      // is currently tied to removeGlobals.
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
