diff --git a/tmp/e105012e-54d6-4cf4-8d43-ebbf58066599_buggy.java b/tmp/1d89cc34-717f-4c6d-bc9f-ff06d8d37093_fixed.java
index 61ffdbf..9e6bf84 100644
--- a/tmp/e105012e-54d6-4cf4-8d43-ebbf58066599_buggy.java
+++ b/tmp/1d89cc34-717f-4c6d-bc9f-ff06d8d37093_fixed.java
@@ -1,44 +1,48 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
+    // We only remove unreferenced function parameters if removeGlobals is true.
+    // The rationale is that this is similar to removing globals in that it
+    // affects the "API" of the function. Removing unused parameters changes
+    // the function signature, which might break code that uses
+    // Function.prototype.length.
+    // Simple optimizations explicitly calls this pass with removeGlobals=false.
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
+    if (!removeGlobals) {
+      return;
+    }
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
+          // Assume the first referenced variable means the rest are referenced.
           break;
         }
       }
     } else {
+      // Delegate the work of removing unused function parameters and call
+      // arguments to the call site optimizer.
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
