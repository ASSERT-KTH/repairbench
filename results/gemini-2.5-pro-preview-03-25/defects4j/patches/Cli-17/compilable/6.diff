diff --git a/tmp/d038d57d-d626-4c44-90f0-0f8430887ca6_buggy.java b/tmp/dc4df5b4-93da-4877-9347-6835255b13e0_fixed.java
index 43fb5fd..9fe57cc 100644
--- a/tmp/d038d57d-d626-4c44-90f0-0f8430887ca6_buggy.java
+++ b/tmp/dc4df5b4-93da-4877-9347-6835255b13e0_fixed.java
@@ -1,55 +1,68 @@
     /**
      * <p>Breaks <code>token</code> into its constituent parts
      * using the following algorithm.
      * <ul>
      *  <li>ignore the first character ("<b>-</b>")</li>
      *  <li>foreach remaining character check if an {@link Option}
      *  exists with that id.</li>
      *  <li>if an {@link Option} does exist then add that character
      *  prepended with "<b>-</b>" to the list of processed tokens.</li>
      *  <li>if the {@link Option} can have an argument value and there
      *  are remaining characters in the token then add the remaining
      *  characters as a token to the list of processed tokens.</li>
      *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
      *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
      *  "<b>--</b>" followed by the remaining characters and also
      *  the remaining tokens directly to the processed tokens list.</li>
      *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
      *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
      *  character prepended with "<b>-</b>".</li>
      * </ul>
      * </p>
      *
      * @param token The current token to be <b>burst</b>
      * @param stopAtNonOption Specifies whether to stop processing
      * at the first non-Option encountered.
      */
     protected void burstToken(String token, boolean stopAtNonOption)
     {
         for (int i = 1; i < token.length(); i++)
         {
             String ch = String.valueOf(token.charAt(i));
 
             if (options.hasOption(ch))
             {
                 tokens.add("-" + ch);
-                currentOption = options.getOption(ch);
+                currentOption = options.getOption(ch); // Keep track of current option
 
+                // if the current Option is known to require an argument
+                // and there are characters left in the token retrieve the argument
                 if (currentOption.hasArg() && (token.length() != (i + 1)))
                 {
                     tokens.add(token.substring(i + 1));
-
+                    // Done processing this token, exit the loop.
                     break;
                 }
+                // otherwise continue looping through characters of the token
             }
+            // It is NOT an option, treat differently based on stopAtNonOption
             else if (stopAtNonOption)
             {
-                process(token.substring(i));
+                // Slice the token starting from the current character
+                // and add it as a single token. This effectively stops
+                // bursting the token.
+                tokens.add(token.substring(i));
+                // Done processing this token, exit the loop.
+                break; // *** FIX: Added break statement ***
             }
             else
             {
-                tokens.add(token);
-                break;
+                // stopAtNonOption is false, so add the unknown character
+                // as a token (prepended with "-") and continue bursting.
+                // *** FIX: Changed behavior to match documentation ***
+                // Original behavior added the entire token and broke, which was incorrect.
+                tokens.add("-" + ch);
+                // Continue processing the rest of the characters in the token.
             }
         }
     }
\ No newline at end of file
