diff --git a/tmp/3292b0a0-d089-4d2c-b641-792ea9ee026a_buggy.java b/tmp/233f0c01-cd08-47a5-bbba-e00ef61bb946_fixed.java
index 730ab7d..2593754 100644
--- a/tmp/3292b0a0-d089-4d2c-b641-792ea9ee026a_buggy.java
+++ b/tmp/233f0c01-cd08-47a5-bbba-e00ef61bb946_fixed.java
@@ -1,48 +1,62 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     *
+     * <p>Certain tools create entries where the central directory extra
+     * field contains more data than is required based on the fields signaled
+     * in the central directory header. According to the spec, extra data
+     * must be ignored. We cater for this situation by allowing the
+     * central directory extra field to be longer than expected.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // Data specification section 4.5.3
+            //   Original Size          8 bytes    (if size == 0xFFFFFFFF)
+            //   Compressed Size        8 bytes    (if csize == 0xFFFFFFFF)
+            //   Relative Header Offset 8 bytes    (if offset == 0xFFFFFFFF)
+            //   Disk Start Number      4 bytes    (if disk == 0xFFFF)
+            int expectedLength = (hasUncompressedSize ? ZipConstants.DWORD : 0)
+                + (hasCompressedSize ? ZipConstants.DWORD : 0)
+                + (hasRelativeHeaderOffset ? ZipConstants.DWORD : 0)
+                + (hasDiskStart ? ZipConstants.WORD : 0);
+            // Some tools format the data incorrectly, we attempt to work
+            // around it and let parsing fail later - see COMPRESS-247
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasDiskStart) {
+                // disk number is 32 bits in CDIR
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                // offset += WORD; // BZ 104483 - this was missing
             }
         }
     }
\ No newline at end of file
