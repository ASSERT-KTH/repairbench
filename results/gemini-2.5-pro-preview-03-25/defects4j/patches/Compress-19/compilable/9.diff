diff --git a/tmp/e054a481-4162-4dc8-be17-e6cec0b671bc_buggy.java b/tmp/bfe68001-abac-4988-9b02-2ff735ac71ee_fixed.java
index 730ab7d..13af6f7 100644
--- a/tmp/e054a481-4162-4dc8-be17-e6cec0b671bc_buggy.java
+++ b/tmp/bfe68001-abac-4988-9b02-2ff735ac71ee_fixed.java
@@ -1,48 +1,78 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     * @param hasUncompressedSize flag indicating that the uncompressed size is present
+     * @param hasCompressedSize flag indicating that the compressed size is present
+     * @param hasRelativeHeaderOffset flag indicating that the relative header offset is present
+     * @param hasDiskStart flag indicating that the disk start number is present
+     * @throws ZipException if the extra field buffer is too short
+     * @since 1.1
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
+            // DWORD = 8 bytes, WORD = 4 bytes in this context
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // Specification says: The Central Directory Header MUST include a
+            // Zip64 Extended Information Extra Field if any of the corresponding
+            // Size, Compressed Size, Relative Header Offset , or Disk Start Number
+            // fields are set to 0xFFFFFFFF.
+            //
+            // The order of the fields in the extra field MUST be:
+            // Original Size          8 bytes
+            // Compressed Size        8 bytes
+            // Relative Header Offset 8 bytes
+            // Disk Start Number      4 bytes
+            //
+            // The data MAY be truncated, i.e. the extra field can be shorter
+            // than 28 bytes. Information MUST only be present if the corresponding
+            // Central Directory Header field is set to 0xFFFFFFFF.
+            //
+            // This method is invoked with flags telling us which fields to expect
+            // based on the values in the central directory entry.
+            //
+            // The specification is somewhat ambiguous about whether the extra field
+            // can be *longer* than needed. Some ZIP tools seem to produce archives
+            // where this happens (e.g. COMPRESS-228). We should tolerate this.
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
+                                       + " is too short, expected minimum length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
+                // The offset check is implicit: the constructor would throw an exception
+                // if the buffer was too short. We've already checked the total length.
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                // No need to increment offset further, as this is the last potential field.
+                // offset += WORD;
             }
         }
     }
\ No newline at end of file
