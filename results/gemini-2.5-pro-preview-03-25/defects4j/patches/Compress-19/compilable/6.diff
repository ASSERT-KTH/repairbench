diff --git a/tmp/1cd766f6-37b8-4e16-93d1-a8a8aa7b4cdd_buggy.java b/tmp/cb9b57f9-17b3-4a73-9820-c732311aff94_fixed.java
index 730ab7d..e63bb78 100644
--- a/tmp/1cd766f6-37b8-4e16-93d1-a8a8aa7b4cdd_buggy.java
+++ b/tmp/cb9b57f9-17b3-4a73-9820-c732311aff94_fixed.java
@@ -1,48 +1,86 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     *
+     * <p>According to APPNOTE.TXT version 6.3.2, the order is:</p>
+     * <ol>
+     *   <li>Original Size (8 bytes) - only if actual size is 0xFFFFFFFF</li>
+     *   <li>Compressed Size (8 bytes) - only if actual compressed size is 0xFFFFFFFF</li>
+     *   <li>Relative Header Offset (8 bytes) - only if actual relative header offset is 0xFFFFFFFF</li>
+     *   <li>Disk Start Number (4 bytes) - only if actual disk start is 0xFFFF</li>
+     * </ol>
+     *
+     * <p>Therefore, the extra field may be between 0 and 28 bytes long.</p>
+     *
+     * @param hasUncompressedSize     if the corresponding central directory entry requires an uncompressed size
+     * @param hasCompressedSize       if the corresponding central directory entry requires a compressed size
+     * @param hasRelativeHeaderOffset if the corresponding central directory entry requires a relative header offset
+     * @param hasDiskStart            if the corresponding central directory entry requires a disk start number
+     * @throws ZipException on error
+     * @since 1.1
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // Fields are stored in the order listed by APPNOTE.TXT 6.3.2
+            // Original Size (8)
+            // Compressed Size (8)
+            // Relative Header Offset (8)
+            // Disk Start Number (4)
+            // -> minimum length is 0, maximum length is 28
+            int expectedLength = (hasUncompressedSize ? ZipConstants.DWORD : 0) // DWORD is 8 bytes for ZipEightByteInteger
+                + (hasCompressedSize ? ZipConstants.DWORD : 0)
+                + (hasRelativeHeaderOffset ? ZipConstants.DWORD : 0)
+                + (hasDiskStart ? ZipConstants.WORD : 0); // WORD is 4 bytes for ZipLong (disk number)
+
+            // Compare against actual length
+            // It's possible that the extra field contains more data than
+            // indicated by the flags based on the central directory header,
+            // for example interaction with ZipOutputStream#putArchiveEntry.
+            // Let's just parse the data indicated by the flags and ignore
+            // any extra bytes. See: COMPRESS-228
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
+                // The constructor creates a copy of the byte array
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasCompressedSize) {
+                // The constructor creates a copy of the byte array
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasRelativeHeaderOffset) {
+                // The constructor creates a copy of the byte array
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasDiskStart) {
+                // The constructor creates a copy of the byte array
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                // offset += ZipConstants.WORD; // No need to increment offset beyond this point
             }
+            // Data is now parsed, getting rid of the raw data is tempting,
+            // but callers like ZipFile#getEntries need the field based on
+            // the parsed data. Resetting it to null would potentially require
+            // recreation from the parsed fields. Keep rawCentralDirectoryData.
         }
     }
\ No newline at end of file
