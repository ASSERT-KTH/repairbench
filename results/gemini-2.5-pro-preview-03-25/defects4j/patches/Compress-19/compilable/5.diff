diff --git a/tmp/ec59c7b9-cfdb-46fe-8128-7f50a6db709a_buggy.java b/tmp/6809f281-d47b-4f6a-b25c-22ccbdf5f6a7_fixed.java
index 730ab7d..55e7d62 100644
--- a/tmp/ec59c7b9-cfdb-46fe-8128-7f50a6db709a_buggy.java
+++ b/tmp/6809f281-d47b-4f6a-b25c-22ccbdf5f6a7_fixed.java
@@ -1,48 +1,53 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
+            // Constants from ZipConstants
+            final int WORD = 4;
+            final int DWORD = 8;
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // Tolerate extra data in the slack space. COMPRESS-228
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
+                                       + " is too short, expected minimal length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
+                // The offset relies on the previous check having ensuring
+                // that rawCentralDirectoryData has enough bytes.
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                // offset += WORD; // not needed, it's the last field
             }
         }
     }
\ No newline at end of file
