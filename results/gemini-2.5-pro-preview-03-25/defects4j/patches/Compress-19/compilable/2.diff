diff --git a/tmp/38a0242b-985a-4ad5-b848-36683e05c808_buggy.java b/tmp/c57238dc-6cc9-479d-8fb3-d88b61791cbe_fixed.java
index 730ab7d..47afcd4 100644
--- a/tmp/38a0242b-985a-4ad5-b848-36683e05c808_buggy.java
+++ b/tmp/c57238dc-6cc9-479d-8fb3-d88b61791cbe_fixed.java
@@ -1,48 +1,73 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     *
+     * <p>The central directory extra field size is variable, depending on
+     * which fields are present. According to the spec, the size should be
+     * exactly the sum of the sizes of the fields that MUST be present.
+     * However, some tools may add extra data, which we should tolerate.</p>
+     *
+     * @param hasUncompressedSize     if the uncompressed size is expected to be present.
+     * @param hasCompressedSize       if the compressed size is expected to be present.
+     * @param hasRelativeHeaderOffset if the relative header offset is expected to be present.
+     * @param hasDiskStart            if the disk start number is expected to be present.
+     * @throws ZipException if the arguments are inconsistent or the extra field data is too short.
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
+            // Calculate the expected minimum length based on which fields are expected.
+            // DWORD is 8 bytes (ZipEightByteInteger), WORD is 4 bytes (ZipLong).
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+
+            // Tolerate extra data in the zip64 extra field segment.
+            // See https://issues.apache.org/jira/browse/COMPRESS-228
+            // Some ZIP writers may include fields that aren't strictly required
+            // (e.g., disk start number when it's < 0xFFFF) or add padding.
+            // We only need to ensure that there's *enough* data for the fields
+            // that we expect based on the central directory flags.
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                       + " is too short, expected at least "
+                                       + expectedLength + " bytes, but is "
                                        + rawCentralDirectoryData.length);
             }
+
             int offset = 0;
             if (hasUncompressedSize) {
+                // Ensure offset + DWORD is within bounds implicitly by ZipEightByteInteger constructor
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
+                // Ensure offset + DWORD is within bounds implicitly by ZipEightByteInteger constructor
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
+                // Ensure offset + DWORD is within bounds implicitly by ZipEightByteInteger constructor
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
+                // Ensure offset + WORD is within bounds implicitly by ZipLong constructor
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                // offset += WORD; // No need to update offset beyond the last field parsed
             }
+            // Any data beyond the expected length (offset) is ignored.
         }
     }
\ No newline at end of file
