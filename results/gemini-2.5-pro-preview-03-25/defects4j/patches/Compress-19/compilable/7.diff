diff --git a/tmp/a1a6ecf1-0d2c-416f-9d79-f60c97e299d2_buggy.java b/tmp/d9b93b9d-b3ef-49e4-8378-0a471acc8c4f_fixed.java
index 730ab7d..1d1ac5e 100644
--- a/tmp/a1a6ecf1-0d2c-416f-9d79-f60c97e299d2_buggy.java
+++ b/tmp/d9b93b9d-b3ef-49e4-8378-0a471acc8c4f_fixed.java
@@ -1,48 +1,67 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     *
+     * <p>Blocks of extra data that are too short to contain the expected
+     * fields are considered errors.</p>
+     *
+     * @param hasUncompressedSize     must the uncompressed size field be present
+     * @param hasCompressedSize       must the compressed size field be present
+     * @param hasRelativeHeaderOffset must the relative header offset field be present
+     * @param hasDiskStart            must the disk start number field be present
+     * @throws ZipException on error
+     * @since 1.1
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // Fields are expected in this order:
+            // - uncompressed size
+            // - compressed size
+            // - relative header offset
+            // - disk start
+            // NOTE: The constants WORD and DWORD are misleadingly named - WORD is 4 bytes, DWORD is 8 bytes
+            int expectedLength = (hasUncompressedSize ? DWORD : 0) // DWORD is 8 bytes
+                + (hasCompressedSize ? DWORD : 0) // DWORD is 8 bytes
+                + (hasRelativeHeaderOffset ? DWORD : 0) // DWORD is 8 bytes
+                + (hasDiskStart ? WORD : 0); // WORD is 4 bytes
+            // Tolerate extra data characters like Ant's zip task does - see Compress-228
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
+                                       + " is too short, expected minimal length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += DWORD; // DWORD = 8
             }
             if (hasCompressedSize) {
+                // The offset is relative to the start of the raw data
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
-                offset += DWORD;
+                offset += DWORD; // DWORD = 8
             }
             if (hasRelativeHeaderOffset) {
+                // The offset is relative to the start of the raw data
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += DWORD; // DWORD = 8
             }
             if (hasDiskStart) {
+                // The offset is relative to the start of the raw data
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                // offset += WORD; // WORD = 4 - not needed as it's the last field
             }
         }
     }
\ No newline at end of file
