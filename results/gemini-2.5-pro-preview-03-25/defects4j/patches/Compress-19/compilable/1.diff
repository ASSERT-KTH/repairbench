diff --git a/tmp/9c5b3e05-ef23-4fa4-8125-6b3841944b64_buggy.java b/tmp/157119f9-dea2-47d4-8e81-f83916ff513b_fixed.java
index 730ab7d..e35f1ed 100644
--- a/tmp/9c5b3e05-ef23-4fa4-8125-6b3841944b64_buggy.java
+++ b/tmp/157119f9-dea2-47d4-8e81-f83916ff513b_fixed.java
@@ -1,48 +1,81 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     *
+     * <p>According to APPNOTE.TXT 4.5.3 The actual size of the field
+     * can be smaller than the expected size if the fields are omitted.</p>
+     *
+     * <p>The fields MUST only appear if the corresponding Local or Central
+     * directory record field is set to 0xFFFF or 0xFFFFFFFF. It is possible
+     * that the extra field is longer than the minimal required size based
+     * on the flags passed in.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // The Zip64 extra field contains لازمي fields based on the
+            // flags passed in. Other fields might be present if the
+            // central directory header values were 0xFF../0xFFFF.
+            // The extra field data length can be >= the required length.
+            // Let's calculate the minimum required length based on the flags.
+            int minimumExpectedLength = (hasUncompressedSize ? ZipConstants.DWORD : 0)
+                + (hasCompressedSize ? ZipConstants.DWORD : 0)
+                + (hasRelativeHeaderOffset ? ZipConstants.DWORD : 0)
+                + (hasDiskStart ? ZipConstants.WORD : 0);
+
+            // Check if the actual data length is sufficient for the required fields.
+            if (rawCentralDirectoryData.length < minimumExpectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
+                                       + " is too short, expected minimum"
+                                       + " " + minimumExpectedLength + " bytes"
+                                       + " but is " + rawCentralDirectoryData.length);
             }
+
             int offset = 0;
             if (hasUncompressedSize) {
+                // Ensure we do not read beyond the bounds of the array
+                if (offset + ZipConstants.DWORD > rawCentralDirectoryData.length) {
+                     throw new ZipException("Data read out of bounds"); // Should not happen due to the length check above, but safety first
+                 }
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasCompressedSize) {
+                // Ensure we do not read beyond the bounds of the array
+                if (offset + ZipConstants.DWORD > rawCentralDirectoryData.length) {
+                     throw new ZipException("Data read out of bounds");
+                 }
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasRelativeHeaderOffset) {
+                 // Ensure we do not read beyond the bounds of the array
+                 if (offset + ZipConstants.DWORD > rawCentralDirectoryData.length) {
+                     throw new ZipException("Data read out of bounds");
+                 }
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasDiskStart) {
+                // Ensure we do not read beyond the bounds of the array
+                if (offset + ZipConstants.WORD > rawCentralDirectoryData.length) {
+                     throw new ZipException("Data read out of bounds");
+                 }
+                // diskStart is ZipLong (4 bytes), corresponding to WORD in this context
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                // offset += ZipConstants.WORD; // No need to increment offset further as it's the last field potentially parsed
             }
+            // Any remaining bytes in rawCentralDirectoryData are ignored as per the spec flexibility.
         }
     }
\ No newline at end of file
