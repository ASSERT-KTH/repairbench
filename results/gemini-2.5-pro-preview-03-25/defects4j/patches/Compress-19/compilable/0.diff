diff --git a/tmp/ae323eb4-2be9-43cb-a57a-6c8bb8771d35_buggy.java b/tmp/b5ab5fa8-beb4-4c6c-90f4-f03a45c08879_fixed.java
index 730ab7d..de6805b 100644
--- a/tmp/ae323eb4-2be9-43cb-a57a-6c8bb8771d35_buggy.java
+++ b/tmp/b5ab5fa8-beb4-4c6c-90f4-f03a45c08879_fixed.java
@@ -1,48 +1,60 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     *
+     * <p>This method assumes the preamble (header id and length) has
+     * been skipped and that the data starts with the first field of
+     * the zip64 extra data.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
+            // Determine the minimum size required based on the flags.
+            // Constants are DWORD=8, WORD=4.
+            int minimumExpectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+
+            // Check if the provided data is sufficient for the expected fields.
+            // Some tools might add more data than strictly required, so we only check for minimum length.
+            // See https://issues.apache.org/jira/browse/COMPRESS-228
+            if (rawCentralDirectoryData.length < minimumExpectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                       + " doesn't contain enough data for the"
+                                       + " expected fields. Expected at least "
+                                       + minimumExpectedLength + " bytes but is "
                                        + rawCentralDirectoryData.length);
             }
+
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                offset += WORD; // Although not strictly needed, advance offset for consistency
             }
+            // Any data beyond the parsed fields is ignored.
         }
     }
\ No newline at end of file
