diff --git a/tmp/9b1fd58d-b080-4b85-8de2-3f10db95f3d5_buggy.java b/tmp/e96989a5-0762-406c-82de-59104c26dde3_fixed.java
index 730ab7d..e7180d0 100644
--- a/tmp/9b1fd58d-b080-4b85-8de2-3f10db95f3d5_buggy.java
+++ b/tmp/e96989a5-0762-406c-82de-59104c26dde3_fixed.java
@@ -1,48 +1,60 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     *
+     * <p>According to the ZIP specification, the extra field may contain
+     * additional data beyond the fields listed for Zip64. We ignore any
+     * surplus data.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
+            // Fields present in order: size, compressedSize, relativeHeaderOffset, diskStart
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // The actual data could be longer than expected if there are other fields
+            // unknown to us. Need to ensure we have *at least* the expected length.
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                       + " is too short, expected at least "
+                                       + expectedLength + " but is only "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
+                // The constructor validates the length available from the offset.
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
+                 // The constructor validates the length available from the offset.
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
+                 // The constructor validates the length available from the offset.
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
+                 // The constructor validates the length available from the offset.
+                // Note: ZipLong uses WORD (4 bytes) not DWORD (8 bytes)
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                // offset += WORD; // No need to increment offset beyond this point
             }
+            // Any data beyond the known fields is ignored, as allowed by the spec.
         }
     }
\ No newline at end of file
