diff --git a/tmp/870ebc13-cd96-4952-94b5-90cfd6911c15_buggy.java b/tmp/a0bf087a-0946-4c4e-a9db-259bb194149b_fixed.java
index 730ab7d..44255d1 100644
--- a/tmp/870ebc13-cd96-4952-94b5-90cfd6911c15_buggy.java
+++ b/tmp/a0bf087a-0946-4c4e-a9db-259bb194149b_fixed.java
@@ -1,48 +1,62 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     * <p>This method is lenient, however. It will tolerate files that
+     * contain more data than indicated by the flags specified in the
+     * parameters. It will only fail if the data is shorter than
+     * indicated by the flags.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            // Calculate the expected minimum length based on the flags.
+            int expectedLength = (hasUncompressedSize ? ZipConstants.DWORD : 0)
+                + (hasCompressedSize ? ZipConstants.DWORD : 0)
+                + (hasRelativeHeaderOffset ? ZipConstants.DWORD : 0)
+                + (hasDiskStart ? ZipConstants.WORD : 0);
+
+            // The raw data field might contain more data than indicated by the flags.
+            // See https://issues.apache.org/jira/browse/COMPRESS-228
+            // We only check if the data field is long enough to hold the data
+            // indicated by the flags. It's okay if it is longer.
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                       + " is too short, expected at least "
+                                       + expectedLength + " but is only "
                                        + rawCentralDirectoryData.length);
             }
+
             int offset = 0;
+            // Read the fields indicated by the flags, assuming they are present
+            // in the correct order. The length check above ensures we won't read
+            // past the end of the buffer for these fields.
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipConstants.DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                offset += ZipConstants.WORD; // Increment offset for consistency
             }
+            // Any remaining data in rawCentralDirectoryData is ignored.
         }
     }
\ No newline at end of file
