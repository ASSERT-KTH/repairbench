diff --git a/tmp/a668eebe-251f-472f-9959-e98dc1610879_buggy.java b/tmp/ce78eb3a-c686-4df3-80ab-2140f2244398_fixed.java
index ec709bd..6932d95 100644
--- a/tmp/a668eebe-251f-472f-9959-e98dc1610879_buggy.java
+++ b/tmp/ce78eb3a-c686-4df3-80ab-2140f2244398_fixed.java
@@ -1,8 +1,34 @@
     @Override
     public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 29-Jan-2016, tatu: Simple skipping for all other tokens, but FIELD_NAME bit
-        //    special unfortunately
+        //    special unfortunately -- use logic similar to JsonParser.skipValue()
+
+        // If current token is FIELD_NAME, advance to its value token
+        if (p.currentToken() == JsonToken.FIELD_NAME) {
+            p.nextToken();
+        }
+
+        // Get the token for the value (or whatever the current token is)
+        JsonToken t = p.currentToken();
+
+        // If it's an object or array, skip its children AND the end marker
+        if (t == JsonToken.START_OBJECT || t == JsonToken.START_ARRAY) {
+            // p.skipChildren() consumes the structure including the end token,
+            // leaving the parser positioned AFTER the END_OBJECT/END_ARRAY.
             p.skipChildren();
+        }
+        // else: If it's a scalar value (or null), the token itself represents the value.
+        // A deserializer should consume the tokens for the value it processed.
+        // However, since this method is specifically for *skipping*,
+        // and returns null, the caller (like BeanDeserializer or TypeDeserializer)
+        // will typically call p.nextToken() to advance. Thus, we don't necessarily
+        // need to consume the scalar token here. The original logic using only
+        // p.skipChildren() also didn't consume scalars.
+        // This approach ensures structured types are fully skipped, and handles
+        // the FIELD_NAME case explicitly, which seems to align with the comment
+        // and addresses the likely failure mode (being called when current token
+        // isn't START_OBJECT/START_ARRAY, potentially after reading a type id).
+
         return null;
     }
\ No newline at end of file
