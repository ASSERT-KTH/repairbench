diff --git a/tmp/2d4c8dec-e217-457e-ae63-b979b92c27fa_buggy.java b/tmp/36c69591-f18f-4519-a887-a5dc9d23b4b6_fixed.java
index ec709bd..e5ee42b 100644
--- a/tmp/2d4c8dec-e217-457e-ae63-b979b92c27fa_buggy.java
+++ b/tmp/36c69591-f18f-4519-a887-a5dc9d23b4b6_fixed.java
@@ -1,8 +1,18 @@
     @Override
     public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 29-Jan-2016, tatu: Simple skipping for all other tokens, but FIELD_NAME bit
         //    special unfortunately
-            p.skipChildren();
+
+        // Use skipValue() instead of skipChildren(). skipValue() is more robust as it
+        // handles skipping the current value regardless of the token type (START_OBJECT,
+        // START_ARRAY, FIELD_NAME, scalar value), whereas skipChildren() only works
+        // correctly for START_OBJECT and START_ARRAY. If the parser is positioned
+        // at FIELD_NAME (as the comment suggests might happen, and is likely the case
+        // when handling unknown type ids within an object), skipChildren() would
+        // not skip the value correctly, leading to parsing errors like UnrecognizedPropertyException
+        // later on. skipValue() will correctly skip the FIELD_NAME and its associated value,
+        // or the whole object/array if currently pointing to START_OBJECT/START_ARRAY.
+        p.skipValue();
         return null;
     }
