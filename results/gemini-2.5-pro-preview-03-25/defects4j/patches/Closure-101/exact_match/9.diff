diff --git a/tmp/b3940f06-402c-4d07-8849-6604d61e9bdb_buggy.java b/tmp/1320e7f7-aeba-466f-8fce-d0fdbf9d0cd6_fixed.java
index 8afddc6..ee77852 100644
--- a/tmp/b3940f06-402c-4d07-8849-6604d61e9bdb_buggy.java
+++ b/tmp/1320e7f7-aeba-466f-8fce-d0fdbf9d0cd6_fixed.java
@@ -1,22 +1,25 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     options.setCodingConvention(new ClosureCodingConvention());
     CompilationLevel level = flags.compilation_level;
     level.setOptionsForCompilationLevel(options);
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     WarningLevel wLevel = flags.warning_level;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
-    }
+    // Set closurePass directly based on the flag's value,
+    // ensuring it's set correctly even when the flag is false.
+    options.closurePass = flags.process_closure_primitives;
 
+    // initOptionsFromFlags should ideally respect the value set above,
+    // or handle the flag itself. Assuming the direct assignment here
+    // is the intended way or a necessary override.
     initOptionsFromFlags(options);
     return options;
   }
\ No newline at end of file
