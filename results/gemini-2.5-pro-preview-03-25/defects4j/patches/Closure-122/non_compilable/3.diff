diff --git a/tmp/54381221-2024-466c-ab38-214bf23aa133_buggy.java b/tmp/25888a87-1a2f-4297-94b7-6332b8da4ca9_fixed.java
index 308b324..f6e51c1 100644
--- a/tmp/54381221-2024-466c-ab38-214bf23aa133_buggy.java
+++ b/tmp/25888a87-1a2f-4297-94b7-6332b8da4ca9_fixed.java
@@ -1,11 +1,31 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+// ... other imports and class definition ...
+
+  // Pre-compile the pattern for efficiency.
+  // Looks for patterns like:
+  // @foo
+  // *@foo
+  // * @foo
+  // Any of the above preceded by whitespace and/or occurring after a newline.
+  private static final Pattern SUSPICIOUS_COMMENT_PATTERN =
+      Pattern.compile("(^|\\n)[\\t ]*\\*?[\\t ]*@[a-zA-Z]");
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
+   * This method assumes it's called only for block comments (/* ... * /)
+   * that are not JSDoc comments (/ ** ... * /).
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // We check the comment's content for patterns typical of JSDoc annotations
+    // that might appear at the beginning of a line.
+    Matcher matcher = SUSPICIOUS_COMMENT_PATTERN.matcher(comment.getValue());
+    if (matcher.find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
+          // Report the warning at the line where the comment starts.
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
