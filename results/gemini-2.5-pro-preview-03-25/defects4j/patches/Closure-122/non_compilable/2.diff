diff --git a/tmp/7f5dda17-081c-4d37-9803-db18e2f06dd3_buggy.java b/tmp/0caac894-1fad-4c8c-8273-cc49df1c93c5_fixed.java
index 308b324..68ca2b8 100644
--- a/tmp/7f5dda17-081c-4d37-9803-db18e2f06dd3_buggy.java
+++ b/tmp/0caac894-1fad-4c8c-8273-cc49df1c93c5_fixed.java
@@ -1,11 +1,27 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
+   * This is expected to be called only for comments that start with /*, not /**.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // Use a regex to find '@' characters that are at the beginning of the
+    // comment value, or at the beginning of a line, possibly preceded by
+    // whitespace and an optional '*'.
+    // This pattern helps identify comments like:
+    // /* @foo */
+    // /* \n * @foo */
+    // /* \n *@foo */
+    // /* \n * foo\n * @bar */
+    final Pattern suspiciousCommentPattern = Pattern.compile("(^|\\n)\\s*\\*?\\s*@");
+    String commentValue = comment.getValue();
+    Matcher matcher = suspiciousCommentPattern.matcher(commentValue);
+
+    if (matcher.find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
