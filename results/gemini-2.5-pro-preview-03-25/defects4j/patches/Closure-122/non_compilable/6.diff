diff --git a/tmp/c0014bf3-2d5c-4c9d-b7db-1fcc7b648293_buggy.java b/tmp/d0352faf-2ac9-429d-86f7-eb9d41ccba7c_fixed.java
index 308b324..a611bbf 100644
--- a/tmp/c0014bf3-2d5c-4c9d-b7db-1fcc7b648293_buggy.java
+++ b/tmp/d0352faf-2ac9-429d-86f7-eb9d41ccba7c_fixed.java
@@ -1,11 +1,34 @@
+import java.util.regex.Pattern;
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
+   * We issue a warning if the comment starts with /* instead of /**
+   * but contains intermediate lines starting with * followed by @
+   * or starts with @ after the opening /*.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // This check should only apply to non-JSDoc comments (those starting with /*).
+    // We are looking for comments that contain JSDoc-like tags, like "@foo"
+    // at the start of a line (potentially after whitespace and an optional "*").
+    String value = comment.getValue();
+
+    // Check for patterns like "@tag" at the start of the comment value (after whitespace)
+    // or "* @tag" / "*@tag" / "@tag" at the start of a line within the comment
+    // (allowing for optional whitespace).
+    // Regex: "(^|\n)\s*\*?\s*@"
+    //   (^|\n)   - Start of the string or newline
+    //   \s*      - Optional whitespace
+    //   \*?      - Optional '*' (the leading asterisk on comment lines)
+    //   \s*      - Optional whitespace
+    //   @        - Literal '@' indicating a JSDoc tag
+    // Using Pattern.compile inline for simplicity as requested, although
+    // pre-compiling as a static final field is generally more performant.
+    Pattern suspiciousCommentPattern = Pattern.compile("(^|\\n)\\s*\\*?\\s*@");
+
+    if (suspiciousCommentPattern.matcher(value).find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
