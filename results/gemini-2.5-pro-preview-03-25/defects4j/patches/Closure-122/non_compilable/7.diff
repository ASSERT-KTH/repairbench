diff --git a/tmp/777a1f94-8b9e-4180-9390-9b17ae98328b_buggy.java b/tmp/246477d7-9570-4d7a-945b-6524b2f5a247_fixed.java
index 308b324..d29eb87 100644
--- a/tmp/777a1f94-8b9e-4180-9390-9b17ae98328b_buggy.java
+++ b/tmp/246477d7-9570-4d7a-945b-6524b2f5a247_fixed.java
@@ -1,11 +1,34 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+// ... other imports and class definition ...
+
+  // Regex to find suspicious JSDoc tags (like @type, @param) within block comments
+  // that are not JSDoc comments (i.e., start with /* instead of /**).
+  // Looks for @<word> potentially preceded by whitespace and an optional asterisk,
+  // occurring either at the start of a line within the comment body.
+  // Assumes comment.getValue() returns the content *inside* the comment delimiters.
+  private static final Pattern SUSPICIOUS_COMMENT_PATTERN =
+      Pattern.compile("(?:^|\\n)\\s*(?:\\*\\s*)?@\\w");
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
+   * This method should only be called for comments that start with /* but not /**.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // We assume this method is only called for non-JSDoc block comments /* ... */.
+    // We also assume comment.getValue() returns the content *without* the leading /*
+    // and trailing */.
+
+    String commentValue = comment.getValue();
+    Matcher matcher = SUSPICIOUS_COMMENT_PATTERN.matcher(commentValue);
+
+    // Search for the pattern anywhere in the comment value.
+    if (matcher.find()) {
+      // Found a JSDoc-like tag (e.g., @type) inside a /* comment.
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
