diff --git a/tmp/33510d99-87b0-4530-bf0e-0f855229c0b0_buggy.java b/tmp/5e204ef0-5693-4f22-b617-b234922d0a68_fixed.java
index 308b324..4b0bee6 100644
--- a/tmp/33510d99-87b0-4530-bf0e-0f855229c0b0_buggy.java
+++ b/tmp/5e204ef0-5693-4f22-b617-b234922d0a68_fixed.java
@@ -1,11 +1,33 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+// Assumes Pattern and Matcher are imported correctly in the full file context.
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
+   * This identifies comments that start with /* but contain JSDoc-like @tags,
+   * suggesting they should likely start with /**.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    String value = comment.getValue();
+
+    // Regex to find JSDoc-like @tags potentially missing the second '*' in /*
+    // Looks for:
+    // 1. '@' at the start of the comment text (possibly after whitespace): ^\s*@
+    //    e.g., /*@foo*/ or /* @foo */
+    // 2. '@' at the start of a line following a newline (possibly after whitespace and '*'): \n\s*\*\s*@
+    //    e.g., /* \n * @foo */ or /* \n   *\n * @foo */
+    // The pattern uses non-capturing groups (?:...) for clarity if needed, but simple alternation works.
+    // Using Pattern.compile for potentially better performance if called often, though Pattern.matches could also be used.
+    Pattern pattern = Pattern.compile("(^\\s*@)|(\\n\\s*\\*\\s*@)");
+    Matcher matcher = pattern.matcher(value);
+
+    if (matcher.find()) {
+      // Found a pattern (\s*@ at the start, or \n\s*\*\s*@ on a later line)
+      // that suggests this comment might be intended as JSDoc.
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
