diff --git a/tmp/a5ff7cc7-2fea-4f66-af97-ce6b746be74d_buggy.java b/tmp/16ce4131-dd43-4303-9448-ba816f78cb6b_fixed.java
index 308b324..e88c2d1 100644
--- a/tmp/a5ff7cc7-2fea-4f66-af97-ce6b746be74d_buggy.java
+++ b/tmp/16ce4131-dd43-4303-9448-ba816f78cb6b_fixed.java
@@ -1,11 +1,29 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
 /**
  * Check to see if the given block comment looks like it should be JSDoc.
+ * This method assumes it is only called for comments starting with /*, not /**.
+ * It checks for patterns like "@tag", " @tag", "\n@tag", "\n *@tag", etc.,
+ * inside the comment body, which suggest an attempt to use JSDoc tags.
  */
 private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+  // Pattern to find JSDoc tags inside non-JSDoc block comments.
+  // Looks for @ followed by a word character, where the @ is preceded by
+  // whitespace or the start of the comment's content, possibly with a *.
+  // (^|\s) - Start of string or whitespace.
+  // \*?    - Optional asterisk.
+  // @\w    - @ followed by a word character (to avoid matching random @ symbols).
+  // Using Pattern.compile().matcher().find() is more robust than indexOf checks.
+  final Pattern SUSPICIOUS_COMMENT_PATTERN = Pattern.compile("(^|\\s)\\*?@\\w");
+
+  String value = comment.getValue();
+  // comment.getValue() returns the content *between* /* and */.
+  Matcher matcher = SUSPICIOUS_COMMENT_PATTERN.matcher(value);
+  if (matcher.find()) {
     errorReporter.warning(
         SUSPICIOUS_COMMENT_WARNING,
         sourceName,
         comment.getLineno(), "", 0);
   }
 }
\ No newline at end of file
