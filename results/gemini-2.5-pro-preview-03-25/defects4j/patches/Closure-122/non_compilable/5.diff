diff --git a/tmp/57c8d745-561f-4863-8132-0c86fb53e9b2_buggy.java b/tmp/927592d1-0b8c-4f2c-89cc-cac5e6a19b6d_fixed.java
index 308b324..93a30bb 100644
--- a/tmp/57c8d745-561f-4863-8132-0c86fb53e9b2_buggy.java
+++ b/tmp/927592d1-0b8c-4f2c-89cc-cac5e6a19b6d_fixed.java
@@ -1,11 +1,33 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+  // Pre-compile the pattern for efficiency, looking for patterns like
+  // "* @..." or "@..." at the start of a line in the comment body.
+  private static final Pattern SUSPICIOUS_COMMENT_PATTERN =
+      Pattern.compile("(^|\\n)\\s*\\*?\\s*@[a-zA-Z]");
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
+   * This is a heuristic check. We check for JSDoc-like tags that appear
+   * at the beginning of a line (ignoring whitespace and the leading "*").
+   * We only issue a warning if the comment is not already a JSDoc comment
+   * (i.e., it starts with /* instead of /**). The caller is responsible
+   * for ensuring this method is only called on non-JSDoc comments.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // This method should only be called for non-JSDoc block comments.
+    // We check the comment's value for patterns that suggest it was
+    // intended to be JSDoc.
+    String value = comment.getValue();
+    Matcher matcher = SUSPICIOUS_COMMENT_PATTERN.matcher(value);
+
+    // Checking for patterns like " *@type" or "\n *@type" which are common JSDoc tags.
+    // The regex allows for variations in whitespace and the optional leading asterisk.
+    // We add [a-zA-Z] to avoid matching things like "* @ 123" but match "* @type".
+    if (matcher.find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
