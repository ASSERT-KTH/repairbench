diff --git a/tmp/b82ec8f0-8baa-43d3-bba5-1f7148ce939a_buggy.java b/tmp/42f63fcd-22b1-492a-8fd0-22f57733c636_fixed.java
index 308b324..cfc6308 100644
--- a/tmp/b82ec8f0-8baa-43d3-bba5-1f7148ce939a_buggy.java
+++ b/tmp/42f63fcd-22b1-492a-8fd0-22f57733c636_fixed.java
@@ -1,11 +1,30 @@
+import java.util.regex.Pattern;
+
 /**
  * Check to see if the given block comment looks like it should be JSDoc.
+ * This expects a comment that does not start with /**.
  */
 private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+  String value = comment.getValue();
+
+  // Check for patterns that suggest a JSDoc comment:
+  // 1. A "@" symbol following the start of the comment, possibly after whitespace.
+  //    Example: /* @type {string} */
+  //    Handled by trimming the value and checking if it starts with "@".
+  boolean tagOnFirstLine = value.trim().startsWith("@");
+
+  // 2. A "@" symbol following a newline, optional whitespace, an asterisk, and optional whitespace.
+  //    Example: /*
+  //             * @param {number} x
+  //             */
+  //    Handled by regex looking for "\n\\s*\\*\\s*@".
+  boolean tagOnNewLine = Pattern.compile("\\n\\s*\\*\\s*@").matcher(value).find();
+
+
+  if (tagOnFirstLine || tagOnNewLine) {
     errorReporter.warning(
         SUSPICIOUS_COMMENT_WARNING,
         sourceName,
         comment.getLineno(), "", 0);
   }
 }
\ No newline at end of file
