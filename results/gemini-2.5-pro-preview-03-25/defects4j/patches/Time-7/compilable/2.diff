diff --git a/tmp/2c10833f-9c08-4afe-8153-1966999bdfe3_buggy.java b/tmp/cffe3d92-d9d8-4b1c-b79f-c2bae261ec32_fixed.java
index 0bbaab0..82bf97b 100644
--- a/tmp/2c10833f-9c08-4afe-8153-1966999bdfe3_buggy.java
+++ b/tmp/cffe3d92-d9d8-4b1c-b79f-c2bae261ec32_fixed.java
@@ -1,62 +1,85 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+        Chronology originalChrono = instant.getChronology();
 
+        // Calculate the local instant millis using the original instant's chronology and zone.
+        // This is necessary to correctly determine the default year based on the instant's wall time.
+        long instantLocal = instantMillis + originalChrono.getZone().getOffset(instantMillis);
+
+        // Select the chronology to use for parsing, potentially applying overrides from the formatter.
+        Chronology effectiveChrono = selectChronology(originalChrono);
+
+        // Determine the default year from the local instant using the effective chronology.
+        int defaultYear = effectiveChrono.year().get(instantLocal);
+        
+        // Create the bucket using the UTC instant millis and the effective chronology.
+        // The bucket itself will use a UTC chronology internally for calculations,
+        // operating on the provided UTC millis.
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+            instantMillis, effectiveChrono, iLocale, iPivotYear, defaultYear);
+        
+        // Parse the text into the bucket
         int newPos = parser.parseInto(bucket, text, position);
+        
+        // Compute the new millis based on the parsed fields and the initial UTC millis.
+        // false means don't reset unspecified fields; they retain values from the initial instant.
         instant.setMillis(bucket.computeMillis(false, text));
+        
+        // Update the chronology and zone of the instant based on parsed values or formatter settings.
+        // Start with the effective chronology used during parsing.
+        Chronology resultChrono = effectiveChrono;
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+            // If an offset was parsed, it takes precedence for the zone.
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
+            resultChrono = resultChrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
+            // Otherwise, use the zone determined by the bucket (initial or parsed).
+            resultChrono = resultChrono.withZone(bucket.getZone());
         }
-        instant.setChronology(chrono);
+        instant.setChronology(resultChrono);
+        
+        // If the formatter has a specific zone override, apply it last.
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
