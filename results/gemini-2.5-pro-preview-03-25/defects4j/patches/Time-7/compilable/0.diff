diff --git a/tmp/2d43170d-5448-4c90-9f39-4e4bbc769c5b_buggy.java b/tmp/f0eb8eb2-d225-457b-9e3f-6d28d28d6a83_fixed.java
index 0bbaab0..5d5bcd3 100644
--- a/tmp/2d43170d-5448-4c90-9f39-4e4bbc769c5b_buggy.java
+++ b/tmp/f0eb8eb2-d225-457b-9e3f-6d28d28d6a83_fixed.java
@@ -1,62 +1,75 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+        // Use the year from the instant, based on its chronology and time zone
+        int defaultYear = chrono.year().get(instantMillis);
+        // Select chronology for bucket, which might be UTC if offset is parsed
+        Chronology bucketChrono = selectChronology(chrono);
 
+        // Bucket will be used for parsing and holds the state.
+        // Initialize using the UTC millis from the instant. Internal calculations
+        // in the bucket (DateTimeField.set) operate on UTC millis.
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+            instantMillis, bucketChrono, iLocale, iPivotYear, defaultYear);
+            
         int newPos = parser.parseInto(bucket, text, position);
+        // Merge parsed fields into the instant. computeMillis(false,...) starts
+        // with the bucket's initial millis (instantMillis) and applies the
+        // parsed fields.
         instant.setMillis(bucket.computeMillis(false, text));
+        
+        // Update the chronology of the instant with the parsed zone/offset.
+        // Use the original chronology derived from the instant as the base.
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
             chrono = chrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
             chrono = chrono.withZone(bucket.getZone());
         }
         instant.setChronology(chrono);
+        
+        // Apply the zone override from the formatter, if any.
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
