diff --git a/tmp/0743b1a4-1647-43d8-899c-f2faff43fc08_buggy.java b/tmp/87134ee3-59a4-4903-ab41-5d530441af10_fixed.java
index 0bbaab0..c761c27 100644
--- a/tmp/0743b1a4-1647-43d8-899c-f2faff43fc08_buggy.java
+++ b/tmp/87134ee3-59a4-4903-ab41-5d530441af10_fixed.java
@@ -1,62 +1,88 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
 
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+        // Select the chronology to use for parsing/computation, potentially applying iZone
+        Chronology computationChrono = selectChronology(chrono);
+        // Calculate default year using the computation chrono, based on the UTC instant.
+        // This addresses the issue where the bucket might not correctly handle local millis
+        // or derive the year correctly for validation in all cases (like leap years).
+        // Using UTC millis as the base for the bucket and default year calculation is more robust.
+        int defaultYear = computationChrono.year().get(instantMillis);
 
+        // Create the bucket using UTC millis as the base instant.
+        // Pass the computation chrono and the UTC-derived default year.
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+                instantMillis,          // Use UTC millis as base instant
+                computationChrono,      // Use the selected Chronology
+                iLocale,
+                iPivotYear,
+                defaultYear);           // Use year derived from UTC millis
+
+        // Parse the text into the bucket.
         int newPos = parser.parseInto(bucket, text, position);
+
+        // Compute the millis from the bucket. Assumes computeMillis works correctly now.
+        // The 'false' means merge parsed fields with defaults from the base instantMillis.
+        // The result should be UTC millis.
         instant.setMillis(bucket.computeMillis(false, text));
+
+        // Update the chronology's zone based on parsed offset or zone, if applicable.
+        // Start with the computationChrono used by the bucket.
+        Chronology resultChrono = computationChrono;
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
+            resultChrono = resultChrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
+            resultChrono = resultChrono.withZone(bucket.getZone());
         }
-        instant.setChronology(chrono);
+
+        // Set the potentially zone-updated chronology onto the instant.
+        instant.setChronology(resultChrono);
+
+        // If a zone override was specified for the formatter (iZone), apply it lastly.
+        // This overrides any zone derived from parsing or the original instant's chronology zone.
         if (iZone != null) {
             instant.setZone(iZone);
         }
+
         return newPos;
     }
\ No newline at end of file
