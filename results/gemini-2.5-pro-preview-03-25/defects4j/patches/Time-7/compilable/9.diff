diff --git a/tmp/45d3e4d7-f3f2-4ec2-b025-f45101129eb0_buggy.java b/tmp/e068a7be-f317-473f-873e-b0813dc974f8_fixed.java
index 0bbaab0..6eb2691 100644
--- a/tmp/45d3e4d7-f3f2-4ec2-b025-f45101129eb0_buggy.java
+++ b/tmp/e068a7be-f317-473f-873e-b0813dc974f8_fixed.java
@@ -1,62 +1,96 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
 
+        // Get initial state from the instant
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
+
+        // Calculate default year using the original instant's local time,
+        // using the original instant's chronology and zone.
+        // We calculate the local millis first to correctly determine the year
+        // in the instant's specific time zone.
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+        int defaultYear = chrono.year().get(instantLocal); // Use local millis to get local year
 
+        // Select the chronology to use for parsing (might differ from instant's chrono
+        // due to withChronology call on the formatter).
+        Chronology parseChrono = selectChronology(chrono);
+
+        // Create the bucket using UTC millis and the parsing chronology.
+        // The bucket constructor expects the initial instant in UTC millis.
+        // Pass the original UTC instantMillis, not the calculated instantLocal.
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+            instantMillis, parseChrono, iLocale, iPivotYear, defaultYear);
+
+        // Parse the text into the bucket. parser.parseInto populates the bucket.
         int newPos = parser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis(false, text));
+
+        // Compute the new millis by merging the parsed fields onto the initial instant.
+        // bucket.computeMillis(false, ...) performs the merge.
+        // This might throw IllegalFieldValueException if validation fails after merge.
+        long newMillis = bucket.computeMillis(false, text);
+
+        // Update the instant's millisecond value.
+        instant.setMillis(newMillis);
+
+        // Determine the final chronology based on parsed zone/offset.
+        // Start with the chronology used for parsing.
+        Chronology resultChrono = parseChrono;
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+            // If offset was parsed, create a zone with that offset and update the chrono.
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
+            resultChrono = resultChrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
+            // If zone was parsed, use that zone to update the chrono.
+            resultChrono = resultChrono.withZone(bucket.getZone());
         }
-        instant.setChronology(chrono);
+
+        // Update the instant's chronology.
+        instant.setChronology(resultChrono);
+
+        // Apply the formatter's specific zone override if it was set (via withZone).
+        // This overrides any zone/offset determined during parsing.
         if (iZone != null) {
             instant.setZone(iZone);
         }
+
+        // Return the new position index from the parser.
         return newPos;
     }
\ No newline at end of file
