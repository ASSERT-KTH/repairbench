diff --git a/tmp/3c8adde2-482f-4181-8c40-b0da88879296_buggy.java b/tmp/f35a0cf3-89f8-4b0d-920b-e26c08ce8f8b_fixed.java
index 0bbaab0..a2bf5af 100644
--- a/tmp/3c8adde2-482f-4181-8c40-b0da88879296_buggy.java
+++ b/tmp/f35a0cf3-89f8-4b0d-920b-e26c08ce8f8b_fixed.java
@@ -1,62 +1,92 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
 
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+        // Select the chronology to use for parsing, potentially applying overrides from the formatter.
+        Chronology effectiveChronology = selectChronology(chrono);
+        // Determine default year using the effective chronology and the original instant's millis.
+        // This ensures the year used for defaults aligns with the chronology used for computation.
+        int defaultYear = effectiveChronology.year().get(instantMillis);
 
+        // Initialize the bucket with the original UTC millis and the effective chronology.
+        // Pass the determined default year. This avoids potential issues with local millis calculation
+        // which seemed to cause problems with leap year validation in computeMillis.
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+            instantMillis, effectiveChronology, iLocale, iPivotYear, defaultYear);
         int newPos = parser.parseInto(bucket, text, position);
+        
+        // Compute the new millis by merging parsed fields onto the initial instant state.
+        // The bucket uses the effectiveChronology for the computation.
+        // 'false' for resetFields ensures unspecified fields (like time) are retained from the original instant.
+        // Pass the text for context in potential error messages from computeMillis.
         instant.setMillis(bucket.computeMillis(false, text));
+
+        // Determine the final chronology for the result instant.
+        // It should be based on the effectiveChronology, but potentially updated
+        // with a zone/offset parsed from the text.
+        // Note: iOffsetParsed is a formatter field indicating if the parser grammar included offset parsing.
+        Chronology resultChrono;
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+            // An offset was successfully parsed.
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
+            // Use the base chronology but with the parsed fixed offset zone.
+            resultChrono = effectiveChronology.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
+            // A time zone identifier was successfully parsed.
+            // Use the base chronology but with the parsed zone.
+            resultChrono = effectiveChronology.withZone(bucket.getZone());
+        } else {
+            // No zone or offset was parsed. Use the effectiveChronology determined earlier.
+            // This carries the zone from the original instant or the formatter's override zone.
+            resultChrono = effectiveChronology;
         }
-        instant.setChronology(chrono);
+        // Set the potentially updated chronology on the instant.
+        // This typically preserves the UTC millisecond value set previously.
+        instant.setChronology(resultChrono);
+        
+        // Finally, apply the formatter's overall zone override (iZone) if it was specified.
+        // This adjusts the fields to match the iZone while preserving the UTC instant.
         if (iZone != null) {
             instant.setZone(iZone);
         }
+        
         return newPos;
     }
\ No newline at end of file
