diff --git a/tmp/a83f9fe7-9430-4e4e-8d2a-af0429d6e671_buggy.java b/tmp/99957849-f09b-4680-a97a-a8ef47be1b11_fixed.java
index e4fca3c..538c3df 100644
--- a/tmp/a83f9fe7-9430-4e4e-8d2a-af0429d6e671_buggy.java
+++ b/tmp/99957849-f09b-4680-a97a-a8ef47be1b11_fixed.java
@@ -1,239 +1,282 @@
   /**
    * Try turning IF nodes into smaller HOOKs
    *
    * Returns the replacement for n or the original if no replacement was
    * necessary.
    */
   private Node tryMinimizeIf(Node n) {
 
     Node parent = n.getParent();
 
     Node cond = n.getFirstChild();
 
     /* If the condition is a literal, we'll let other
      * optimizations try to remove useless code.
      */
     if (NodeUtil.isLiteralValue(cond, true)) {
       return n;
     }
 
     Node thenBranch = cond.getNext();
     Node elseBranch = thenBranch.getNext();
 
     if (elseBranch == null) {
       if (isFoldableExpressBlock(thenBranch)) {
         Node expr = getBlockExpression(thenBranch);
         if (!late && isPropertyAssignmentInExpression(expr)) {
           // Keep opportunities for CollapseProperties such as
           // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
           // until CollapseProperties has been run.
           return n;
         }
 
         if (cond.isNot()) {
           // if(!x)bar(); -> x||bar();
           if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
               isLowerPrecedenceInExpression(expr.getFirstChild(),
                   OR_PRECEDENCE)) {
             // It's not okay to add two sets of parentheses.
             return n;
           }
 
-          Node or = IR.or(
-              cond.removeFirstChild(),
-              expr.removeFirstChild()).srcref(n);
+          // Detach the condition's child before detaching the expression's child.
+          Node condChild = cond.removeFirstChild();
+          Node exprChild = expr.removeFirstChild();
+          Node or = IR.or(condChild, exprChild).srcref(n);
           Node newExpr = NodeUtil.newExpr(or);
           parent.replaceChild(n, newExpr);
           reportCodeChange();
 
           return newExpr;
         }
 
         // if(x)foo(); -> x&&foo();
         if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
             isLowerPrecedenceInExpression(expr.getFirstChild(),
                 AND_PRECEDENCE)) {
           // One additional set of parentheses is worth the change even if
           // there is no immediate code size win. However, two extra pair of
           // {}, we would have to think twice. (unless we know for sure the
           // we can further optimize its parent.
           return n;
         }
 
+        // Detach the expression's child after detaching the condition node.
         n.removeChild(cond);
-        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
+        Node exprChild = expr.removeFirstChild();
+        Node and = IR.and(cond, exprChild).srcref(n);
         Node newExpr = NodeUtil.newExpr(and);
         parent.replaceChild(n, newExpr);
         reportCodeChange();
 
         return newExpr;
       } else {
 
         // Try to combine two IF-ELSE
         if (NodeUtil.isStatementBlock(thenBranch) &&
             thenBranch.hasOneChild()) {
           Node innerIf = thenBranch.getFirstChild();
 
           if (innerIf.isIf()) {
             Node innerCond = innerIf.getFirstChild();
             Node innerThenBranch = innerCond.getNext();
             Node innerElseBranch = innerThenBranch.getNext();
 
             if (innerElseBranch == null &&
                  !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                    isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
-              n.detachChildren();
+              // Use detach to preserve existing node properties.
+              Node currentCond = cond.detachFromParent();
+              Node innerIfCond = innerCond.detachFromParent();
+              Node innerIfThen = innerThenBranch.detachFromParent();
+
+              n.detachChildren(); // Remove original children cleanly
               n.addChildToBack(
-                  IR.and(
-                      cond,
-                      innerCond.detachFromParent())
-                      .srcref(cond));
-              n.addChildrenToBack(innerThenBranch.detachFromParent());
+                  IR.and(currentCond, innerIfCond)
+                      .srcref(currentCond)); // Propagate srcref
+              n.addChildrenToBack(innerIfThen);
               reportCodeChange();
               // Not worth trying to fold the current IF-ELSE into && because
               // the inner IF-ELSE wasn't able to be folded into && anyways.
               return n;
             }
           }
         }
       }
 
       return n;
     }
 
     /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
      * peephole optimization. This should probably get moved to another pass.
      */
     tryRemoveRepeatedStatements(n);
 
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
-      n.replaceChild(cond, cond.removeFirstChild());
+      Node originalCond = cond.removeFirstChild();
+      n.replaceChild(cond, originalCond); // Replace NOT with its child
       n.removeChild(thenBranch);
-      n.addChildToBack(thenBranch);
+      n.addChildToBack(thenBranch); // Swap branches
       reportCodeChange();
-      return n;
+      // Condition changed, re-evaluate the node
+      return n; // Let the optimizer re-visit the modified IF
     }
 
     // if(x)return 1;else return 2; -> return x?1:2;
     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
       Node thenExpr = getBlockReturnExpression(thenBranch);
       Node elseExpr = getBlockReturnExpression(elseBranch);
-      n.removeChild(cond);
+
+      // Ensure both returns have values to avoid "return x?void 0:value;"
+      if (thenExpr != null && elseExpr != null) {
+        cond.detachFromParent();
         thenExpr.detachFromParent();
         elseExpr.detachFromParent();
 
-      // note - we ignore any cases with "return;", technically this
-      // can be converted to "return undefined;" or some variant, but
-      // that does not help code size.
-      Node returnNode = IR.returnNode(
-                            IR.hook(cond, thenExpr, elseExpr)
-                                .srcref(n));
+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+        Node returnNode = IR.returnNode(hookNode).srcref(n);
         parent.replaceChild(n, returnNode);
         reportCodeChange();
         return returnNode;
       }
+    }
 
     boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
     boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
 
     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
       Node thenOp = getBlockExpression(thenBranch).getFirstChild();
       Node elseOp = getBlockExpression(elseBranch).getFirstChild();
-      if (thenOp.getType() == elseOp.getType()) {
+      if (thenOp.getType() == elseOp.getType() && NodeUtil.isAssignmentOp(thenOp)) {
         // if(x)a=1;else a=2; -> a=x?1:2;
-        if (NodeUtil.isAssignmentOp(thenOp)) {
         Node lhs = thenOp.getFirstChild();
-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
-              // if LHS has side effects, don't proceed [since the optimization
-              // evaluates LHS before cond]
-              // NOTE - there are some circumstances where we can
-              // proceed even if there are side effects...
-              !mayEffectMutableState(lhs)) {
+        if (areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {
 
-            n.removeChild(cond);
-            Node assignName = thenOp.removeFirstChild();
-            Node thenExpr = thenOp.removeFirstChild();
-            Node elseExpr = elseOp.getLastChild();
-            elseOp.removeChild(elseExpr);
+            boolean canFold = false;
+            // Check if it is safe to fold the assignment.
+            if (thenOp.isAssign()) {
+                // Fold "if(c) x = a; else x = b;" into "x = c ? a : b;"
+                // only if evaluating the LHS ('x' in this case) has no side effects.
+                // Evaluating 'x' itself has no side effects.
+                // Evaluating 'x[foo()]' has side effects.
+                // We don't need to worry about cond modifying LHS because
+                // the assignment happens after the condition evaluates.
+                // Example: "x = x++ ? a : b;" is safe.
+                canFold = !NodeUtil.mayHaveSideEffects(lhs);
+            } else { // Compound assignment (e.g., +=)
+                // Fold "if(c) x += a; else x += b;" into "x += c ? a : b;"
+                // only if evaluating the LHS ('x') has no side effects AND
+                // the condition ('c') does not modify the LHS ('x').
+                // We use mayEffectMutableState(lhs) as a proxy for the check
+                // "cond modifies lhs". This implicitly assumes mayEffectMutableState
+                // considers the context.
+                // Example: "a += foo() ? 1 : 2" is safe if foo() doesn't modify a.
+                // Example: "x += x++ ? 1 : 2" is NOT safe (we prefer the structure
+                // "x++ ? (x += 1) : (x += 2)").
+                canFold = !NodeUtil.mayEffectMutableState(lhs);
+            }
+
+            if (canFold) {
+                // Must clone LHS, as original is shared between thenOp and elseOp
+                Node assignLhs = lhs.cloneTree();
+                Node thenExpr = thenOp.getLastChild().detachFromParent();
+                Node elseExpr = elseOp.getLastChild().detachFromParent();
+                cond.detachFromParent();
 
                 Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-            Node assign = new Node(thenOp.getType(), assignName, hookNode)
-                              .srcref(thenOp);
+                Node assign = new Node(thenOp.getType(), assignLhs, hookNode)
+                                  .srcref(thenOp); // Use the original assignment type
                 Node expr = NodeUtil.newExpr(assign);
                 parent.replaceChild(n, expr);
                 reportCodeChange();
 
                 return expr;
              }
         }
       }
       // if(x)foo();else bar(); -> x?foo():bar()
-      n.removeChild(cond);
+      // This handles cases like:
+      //   if (a) x[y]=1; else x[y]=2; => a ? (x[y]=1) : (x[y]=2);
+      //   if (x++) a += 1; else a += 2; => x++ ? (a+=1) : (a+=2);
+      // We need to detach the children before creating the hook.
+      cond.detachFromParent();
       thenOp.detachFromParent();
       elseOp.detachFromParent();
       Node expr = IR.exprResult(
           IR.hook(cond, thenOp, elseOp).srcref(n));
       parent.replaceChild(n, expr);
       reportCodeChange();
       return expr;
     }
 
     boolean thenBranchIsVar = isVarBlock(thenBranch);
     boolean elseBranchIsVar = isVarBlock(elseBranch);
 
     // if(x)var y=1;else y=2  ->  var y=x?1:2
     if (thenBranchIsVar && elseBranchIsExpressionBlock &&
         getBlockExpression(elseBranch).getFirstChild().isAssign()) {
 
       Node var = getBlockVar(thenBranch);
       Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
 
-      Node name1 = var.getFirstChild();
-      Node maybeName2 = elseAssign.getFirstChild();
+      Node name1 = var.getFirstChild(); // VAR's NAME node
+      Node maybeName2 = elseAssign.getFirstChild(); // Assign's LHS
+
+      // Check:
+      // 1. The var declares exactly one name.
+      // 2. The var declaration has an initializer.
+      // 3. The else branch is an assignment.
+      // 4. The LHS of the else assignment is a NAME node.
+      // 5. The names match.
+      if (var.hasOneChild() && name1.hasChildren() &&
+          maybeName2.isName() &&
+          name1.getString().equals(maybeName2.getString())) {
 
-      if (name1.hasChildren()
-          && maybeName2.isName()
-          && name1.getString().equals(maybeName2.getString())) {
         Node thenExpr = name1.removeChildren();
         Node elseExpr = elseAssign.getLastChild().detachFromParent();
         cond.detachFromParent();
         Node hookNode = IR.hook(cond, thenExpr, elseExpr)
-                            .srcref(n);
-        var.detachFromParent();
-        name1.addChildrenToBack(hookNode);
+                            .srcref(n); // Use IF's source info for hook
+        // var node is already detached implicitly by replaceChild
+        name1.addChildrenToBack(hookNode); // Add hook as new initializer
+
+        // Replace IF with the modified VAR node
         parent.replaceChild(n, var);
         reportCodeChange();
         return var;
       }
 
     // if(x)y=1;else var y=2  ->  var y=x?1:2
     } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
         getBlockExpression(thenBranch).getFirstChild().isAssign()) {
 
       Node var = getBlockVar(elseBranch);
       Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
 
-      Node maybeName1 = thenAssign.getFirstChild();
-      Node name2 = var.getFirstChild();
+      Node maybeName1 = thenAssign.getFirstChild(); // Assign's LHS
+      Node name2 = var.getFirstChild(); // VAR's NAME node
+
+      // Symmetric checks as above
+      if (var.hasOneChild() && name2.hasChildren() &&
+          maybeName1.isName() &&
+          maybeName1.getString().equals(name2.getString())) {
 
-      if (name2.hasChildren()
-          && maybeName1.isName()
-          && maybeName1.getString().equals(name2.getString())) {
         Node thenExpr = thenAssign.getLastChild().detachFromParent();
         Node elseExpr = name2.removeChildren();
         cond.detachFromParent();
         Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                             .srcref(n);
-        var.detachFromParent();
+        // var node is detached implicitly by replaceChild
         name2.addChildrenToBack(hookNode);
+
         parent.replaceChild(n, var);
         reportCodeChange();
 
         return var;
       }
     }
 
     return n;
   }
\ No newline at end of file
