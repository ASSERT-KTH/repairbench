diff --git a/tmp/eb659127-aab5-4644-acc1-3c8a93a610a5_buggy.java b/tmp/50b6c163-a902-42c9-ad54-906089cb0adc_fixed.java
index e4fca3c..eb25078 100644
--- a/tmp/eb659127-aab5-4644-acc1-3c8a93a610a5_buggy.java
+++ b/tmp/50b6c163-a902-42c9-ad54-906089cb0adc_fixed.java
@@ -1,239 +1,333 @@
   /**
    * Try turning IF nodes into smaller HOOKs
    *
    * Returns the replacement for n or the original if no replacement was
    * necessary.
    */
   private Node tryMinimizeIf(Node n) {
 
     Node parent = n.getParent();
+    // Ensure parent is available before proceeding, replaceChild will fail otherwise.
+    if (parent == null) {
+      return n;
+    }
 
     Node cond = n.getFirstChild();
 
     /* If the condition is a literal, we'll let other
      * optimizations try to remove useless code.
      */
     if (NodeUtil.isLiteralValue(cond, true)) {
       return n;
     }
 
     Node thenBranch = cond.getNext();
+    // Need thenBranch to exist
+    if (thenBranch == null) {
+        return n;
+    }
     Node elseBranch = thenBranch.getNext();
 
     if (elseBranch == null) {
+      // IF without ELSE
       if (isFoldableExpressBlock(thenBranch)) {
         Node expr = getBlockExpression(thenBranch);
+        // getBlockExpression returns null if not foldable, check for safety
+        if (expr == null) {
+          return n;
+        }
         if (!late && isPropertyAssignmentInExpression(expr)) {
           // Keep opportunities for CollapseProperties such as
           // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
           // until CollapseProperties has been run.
           return n;
         }
 
+        // Ensure expr has a child (the actual expression node)
+        Node exprChild = expr.getFirstChild();
+        if (exprChild == null) {
+            return n;
+        }
+
         if (cond.isNot()) {
           // if(!x)bar(); -> x||bar();
-          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
-              isLowerPrecedenceInExpression(expr.getFirstChild(),
-                  OR_PRECEDENCE)) {
+          Node notChild = cond.getFirstChild();
+          // Ensure NOT has a child
+          if (notChild == null) {
+            return n;
+          }
+
+          if (isLowerPrecedenceInExpression(notChild, OR_PRECEDENCE) &&
+              isLowerPrecedenceInExpression(exprChild, OR_PRECEDENCE)) {
             // It's not okay to add two sets of parentheses.
             return n;
           }
 
-          Node or = IR.or(
-              cond.removeFirstChild(),
-              expr.removeFirstChild()).srcref(n);
+          // Detach operands before creating the OR node
+          cond.removeChild(notChild);
+          expr.removeChild(exprChild);
+
+          Node or = IR.or(notChild, exprChild).srcref(n);
           Node newExpr = NodeUtil.newExpr(or);
           parent.replaceChild(n, newExpr);
           reportCodeChange();
 
           return newExpr;
-        }
-
+        } else {
           // if(x)foo(); -> x&&foo();
           if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
-            isLowerPrecedenceInExpression(expr.getFirstChild(),
-                AND_PRECEDENCE)) {
+              isLowerPrecedenceInExpression(exprChild, AND_PRECEDENCE)) {
             // One additional set of parentheses is worth the change even if
             // there is no immediate code size win. However, two extra pair of
             // {}, we would have to think twice. (unless we know for sure the
             // we can further optimize its parent.
             return n;
           }
 
-        n.removeChild(cond);
-        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
+          // Detach operands before creating the AND node
+          n.removeChild(cond); // Detach cond from IF
+          expr.removeChild(exprChild); // Detach exprChild from EXPR_RESULT
+
+          Node and = IR.and(cond, exprChild).srcref(n);
           Node newExpr = NodeUtil.newExpr(and);
           parent.replaceChild(n, newExpr);
           reportCodeChange();
 
           return newExpr;
+        }
       } else {
-
-        // Try to combine two IF-ELSE
+        // Try to combine two IF-ELSE: if(x) { if(y) foo() } -> if(x&&y) foo()
         if (NodeUtil.isStatementBlock(thenBranch) &&
             thenBranch.hasOneChild()) {
           Node innerIf = thenBranch.getFirstChild();
 
           if (innerIf.isIf()) {
             Node innerCond = innerIf.getFirstChild();
             Node innerThenBranch = innerCond.getNext();
+            // Need innerCond and innerThenBranch to proceed
+            if (innerCond == null || innerThenBranch == null) {
+                return n;
+            }
             Node innerElseBranch = innerThenBranch.getNext();
 
             if (innerElseBranch == null &&
                  !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                    isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
-              n.detachChildren();
-              n.addChildToBack(
-                  IR.and(
-                      cond,
+
+              n.detachChildren(); // Detach original cond, thenBranch
+
+              Node andCond = IR.and(
+                  cond, // cond was already detached by detachChildren
                   innerCond.detachFromParent())
-                      .srcref(cond));
+                  .srcref(cond); // Use original outer cond's source info
+
+              n.addChildToBack(andCond);
               n.addChildrenToBack(innerThenBranch.detachFromParent());
               reportCodeChange();
-              // Not worth trying to fold the current IF-ELSE into && because
-              // the inner IF-ELSE wasn't able to be folded into && anyways.
+              // Return the modified IF node 'n'
               return n;
             }
           }
         }
       }
-
+      // No transformation applied for IF without ELSE
       return n;
     }
 
+    // IF with ELSE
     /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
      * peephole optimization. This should probably get moved to another pass.
      */
     tryRemoveRepeatedStatements(n);
 
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
-      n.replaceChild(cond, cond.removeFirstChild());
-      n.removeChild(thenBranch);
-      n.addChildToBack(thenBranch);
+       Node notChild = cond.getFirstChild();
+       // Ensure NOT has a child
+       if (notChild != null) {
+           n.replaceChild(cond, notChild); // Replace NOT node with its child
+           n.removeChild(thenBranch); // Remove then branch
+           n.addChildToBack(thenBranch); // Add then branch as the new else branch
            reportCodeChange();
+           // Return the modified IF node 'n'
            return n;
        }
+    }
 
     // if(x)return 1;else return 2; -> return x?1:2;
     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
       Node thenExpr = getBlockReturnExpression(thenBranch);
       Node elseExpr = getBlockReturnExpression(elseBranch);
-      n.removeChild(cond);
-      thenExpr.detachFromParent();
-      elseExpr.detachFromParent();
 
       // note - we ignore any cases with "return;", technically this
       // can be converted to "return undefined;" or some variant, but
-      // that does not help code size.
-      Node returnNode = IR.returnNode(
-                            IR.hook(cond, thenExpr, elseExpr)
-                                .srcref(n));
+      // that does not help code size. Check that both returns have values.
+      if (thenExpr != null && elseExpr != null) {
+          n.removeChild(cond); // Detach condition
+          thenExpr.detachFromParent(); // Detach return value from its RETURN node
+          elseExpr.detachFromParent(); // Detach return value from its RETURN node
+
+          Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n); // Use IF's source info
+          Node returnNode = IR.returnNode(hookNode).srcref(n); // Use IF's source info again for RETURN
+
           parent.replaceChild(n, returnNode);
           reportCodeChange();
           return returnNode;
       }
+    }
 
     boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
     boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
 
     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
-      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
-      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
-      if (thenOp.getType() == elseOp.getType()) {
-        // if(x)a=1;else a=2; -> a=x?1:2;
-        if (NodeUtil.isAssignmentOp(thenOp)) {
+      Node thenExprBlock = getBlockExpression(thenBranch);
+      Node elseExprBlock = getBlockExpression(elseBranch);
+
+      // Check that blocks and their first children (the expressions) exist
+      if (thenExprBlock == null || elseExprBlock == null ||
+          thenExprBlock.getFirstChild() == null || elseExprBlock.getFirstChild() == null) {
+        return n;
+      }
+
+      Node thenOp = thenExprBlock.getFirstChild();
+      Node elseOp = elseExprBlock.getFirstChild();
+
+      // Check for assignment operations specifically:
+      // if(x)a=1;else a=2; -> a=x?1:2; (also handles +=, *= etc.)
+      if (thenOp.getType() == elseOp.getType() && NodeUtil.isAssignmentOp(thenOp)) {
           Node lhs = thenOp.getFirstChild();
-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
-              // if LHS has side effects, don't proceed [since the optimization
-              // evaluates LHS before cond]
-              // NOTE - there are some circumstances where we can
-              // proceed even if there are side effects...
-              !mayEffectMutableState(lhs)) {
+          Node elseLhs = elseOp.getFirstChild();
+          // Check LHS exists in both and they are equivalent
+          if (lhs != null && elseLhs != null && areNodesEqualForInlining(lhs, elseLhs)) {
 
-            n.removeChild(cond);
-            Node assignName = thenOp.removeFirstChild();
-            Node thenExpr = thenOp.removeFirstChild();
-            Node elseExpr = elseOp.getLastChild();
-            elseOp.removeChild(elseExpr);
+            // Check if the optimization `lhs op= (cond ? ...)` is safe or explicitly allowed.
+            boolean lhsMayBeAffectedByCond = NodeUtil.canBeSideEffected(lhs);
+            boolean lhsEvalHasSideEffects = mayEffectMutableState(lhs);
 
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-            Node assign = new Node(thenOp.getType(), assignName, hookNode)
-                              .srcref(thenOp);
-            Node expr = NodeUtil.newExpr(assign);
-            parent.replaceChild(n, expr);
+            // Allow `lhs op= (cond ? ...)` if:
+            // 1. Evaluating lhs itself has no side effects (e.g., `getLhs().prop = ...` is disallowed).
+            // 2. AND EITHER:
+            //    a) lhs's value cannot be affected by external side effects (like cond's). This is the safe case.
+            //    b) OR it's the special case allowed by Issue925: simple assignment (ASSIGN) to a simple name (NAME),
+            //       even if the name's value might be affected by the condition (e.g. `x = x++ ? ...`).
+            if (!lhsEvalHasSideEffects &&
+                (!lhsMayBeAffectedByCond || (thenOp.isAssign() && lhs.isName()))) {
+
+               Node thenRhs = thenOp.getLastChild();
+               Node elseRhs = elseOp.getLastChild();
+               // Ensure RHS exists in both assignments
+               if (thenRhs != null && elseRhs != null) {
+                 n.removeChild(cond); // Detach cond separately first
+                 Node assignLhs = thenOp.removeFirstChild(); // Detach shared LHS
+                 thenRhs.detachFromParent(); // Detach then RHS
+                 elseRhs.detachFromParent(); // Detach else RHS
+
+                 Node hookNode = IR.hook(cond, thenRhs, elseRhs).srcref(n); // Hook(cond, thenRhs, elseRhs)
+                 Node assign = new Node(thenOp.getType(), assignLhs, hookNode) // Reuse thenOp's type (ASSIGN or ASSIGN_XXX)
+                                   .srcref(thenOp); // Use first assignment's source info
+                 Node newExpr = NodeUtil.newExpr(assign); // Wrap in EXPR_RESULT
+                 parent.replaceChild(n, newExpr);
                  reportCodeChange();
-
-            return expr;
+                 return newExpr;
                }
             }
           }
+      }
+      // Fallthrough or different expression types:
       // if(x)foo();else bar(); -> x?foo():bar()
-      n.removeChild(cond);
-      thenOp.detachFromParent();
-      elseOp.detachFromParent();
-      Node expr = IR.exprResult(
-          IR.hook(cond, thenOp, elseOp).srcref(n));
+      // This handles cases like `if(cond){a=1}else{b=2}` and the assignment cases
+      // that were disallowed above (e.g., `if(x[--y]...){x[y]=0}else{x[y]=1}` which becomes `cond ? (x[y]=0) : (x[y]=1)`)
+      n.removeChild(cond); // Detach cond from IF
+      thenOp.detachFromParent(); // Detach the root of the then expression (e.g., ASSIGN, CALL)
+      elseOp.detachFromParent(); // Detach the root of the else expression
+
+      Node hookNode = IR.hook(cond, thenOp, elseOp).srcref(n);
+      Node expr = IR.exprResult(hookNode); // Create EXPR_RESULT(HOOK(cond, thenOp, elseOp))
       parent.replaceChild(n, expr);
       reportCodeChange();
       return expr;
     }
 
     boolean thenBranchIsVar = isVarBlock(thenBranch);
     boolean elseBranchIsVar = isVarBlock(elseBranch);
 
     // if(x)var y=1;else y=2  ->  var y=x?1:2
-    if (thenBranchIsVar && elseBranchIsExpressionBlock &&
-        getBlockExpression(elseBranch).getFirstChild().isAssign()) {
+    if (thenBranchIsVar && elseBranchIsExpressionBlock) {
+        Node elseExprBlock = getBlockExpression(elseBranch);
+        // Ensure else block is a valid assignment expression
+        if (elseExprBlock != null && elseExprBlock.getFirstChild() != null &&
+            elseExprBlock.getFirstChild().isAssign()) {
+            Node var = getBlockVar(thenBranch); // VAR node
+            Node elseAssign = elseExprBlock.getFirstChild(); // ASSIGN node
 
-      Node var = getBlockVar(thenBranch);
-      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
+            // Ensure VAR has one child (the NAME node)
+            if (var != null && var.hasOneChild()) {
+                Node name1 = var.getFirstChild(); // The NAME node in `var y=1;`
+                Node maybeName2 = elseAssign.getFirstChild(); // The LHS of `y=2;`
 
-      Node name1 = var.getFirstChild();
-      Node maybeName2 = elseAssign.getFirstChild();
+                // Check name1 has initializer, maybeName2 is a NAME node, and names match
+                if (name1.hasChildren() && maybeName2 != null && maybeName2.isName() &&
+                    name1.getString().equals(maybeName2.getString())) {
 
-      if (name1.hasChildren()
-          && maybeName2.isName()
-          && name1.getString().equals(maybeName2.getString())) {
-        Node thenExpr = name1.removeChildren();
-        Node elseExpr = elseAssign.getLastChild().detachFromParent();
+                    Node thenExpr = name1.getFirstChild(); // Initializer of var (RHS of var y=1)
+                    Node elseExpr = elseAssign.getLastChild(); // RHS of assign y=2
+
+                    // Ensure both initializers/RHS exist
+                    if (thenExpr != null && elseExpr != null) {
                         cond.detachFromParent();
-        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
-                            .srcref(n);
-        var.detachFromParent();
-        name1.addChildrenToBack(hookNode);
+                        thenExpr.detachFromParent(); // Detach thenExpr from NAME
+                        elseExpr.detachFromParent(); // Detach elseExpr from ASSIGN
+
+                        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+                        var.detachFromParent(); // Detach VAR from its original block
+                        name1.addChildToBack(hookNode); // Replace original initializer with HOOK
                         parent.replaceChild(n, var);
                         reportCodeChange();
                         return var;
                     }
-
+                }
+            }
+        }
     // if(x)y=1;else var y=2  ->  var y=x?1:2
-    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
-        getBlockExpression(thenBranch).getFirstChild().isAssign()) {
+    } else if (elseBranchIsVar && thenBranchIsExpressionBlock) {
+        Node thenExprBlock = getBlockExpression(thenBranch);
+        // Ensure then block is a valid assignment expression
+        if (thenExprBlock != null && thenExprBlock.getFirstChild() != null &&
+            thenExprBlock.getFirstChild().isAssign()) {
+            Node var = getBlockVar(elseBranch); // VAR node
+            Node thenAssign = thenExprBlock.getFirstChild(); // ASSIGN node
 
-      Node var = getBlockVar(elseBranch);
-      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
+            // Ensure VAR has one child (the NAME node)
+            if (var != null && var.hasOneChild()) {
+                Node maybeName1 = thenAssign.getFirstChild(); // LHS of `y=1;`
+                Node name2 = var.getFirstChild(); // The NAME node in `var y=2;`
 
-      Node maybeName1 = thenAssign.getFirstChild();
-      Node name2 = var.getFirstChild();
+                // Check name2 has initializer, maybeName1 is a NAME node, and names match
+                if (name2.hasChildren() && maybeName1 != null && maybeName1.isName() &&
+                    maybeName1.getString().equals(name2.getString())) {
 
-      if (name2.hasChildren()
-          && maybeName1.isName()
-          && maybeName1.getString().equals(name2.getString())) {
-        Node thenExpr = thenAssign.getLastChild().detachFromParent();
-        Node elseExpr = name2.removeChildren();
+                    Node thenExpr = thenAssign.getLastChild(); // RHS of assign y=1
+                    Node elseExpr = name2.getFirstChild(); // Initializer of var (RHS of var y=2)
+
+                    // Ensure both RHS/initializers exist
+                    if (thenExpr != null && elseExpr != null) {
                         cond.detachFromParent();
-        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
-                            .srcref(n);
-        var.detachFromParent();
-        name2.addChildrenToBack(hookNode);
+                        thenExpr.detachFromParent(); // Detach thenExpr from ASSIGN
+                        elseExpr.detachFromParent(); // Detach elseExpr from NAME
+
+                        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+                        var.detachFromParent(); // Detach VAR from its original block
+                        name2.addChildToBack(hookNode); // Replace original initializer with HOOK
                         parent.replaceChild(n, var);
                         reportCodeChange();
-
                         return var;
                     }
                 }
+            }
+        }
+    }
 
+    // No transformation applied for IF with ELSE in this section
     return n;
   }
\ No newline at end of file
