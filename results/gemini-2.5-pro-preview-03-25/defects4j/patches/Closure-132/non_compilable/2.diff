diff --git a/tmp/5f9c0d51-5366-48e1-9943-3d74f8f0c97c_buggy.java b/tmp/893b2e4d-bfe7-4b9a-b484-276bc4fd16ba_fixed.java
index e4fca3c..ff36f9a 100644
--- a/tmp/5f9c0d51-5366-48e1-9943-3d74f8f0c97c_buggy.java
+++ b/tmp/893b2e4d-bfe7-4b9a-b484-276bc4fd16ba_fixed.java
@@ -1,239 +1,365 @@
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.IR;
+import com.google.javascript.jscomp.NodeUtil;
+import static com.google.javascript.jscomp.AstValidator.validateCodeChange;
+import static com.google.javascript.jscomp.NodeUtil.isAssignmentOp;
+import static com.google.javascript.jscomp.NodeUtil.isExpressionNode;
+import static com.google.javascript.jscomp.NodeUtil.isForIn;
+import static com.google.javascript.jscomp.NodeUtil.isTryFinallyNode;
+import static com.google.javascript.jscomp.NodeUtil.newExpr;
+import static com.google.javascript.jscomp.parsing.JsDocInfoParser.getConsistentEOL;
+import com.google.javascript.rhino.Token;
+
+// Dummy classes and methods to allow compilation
+abstract class AbstractPeepholeOptimization {
+    abstract protected Node optimizeSubtree(Node subtree);
+    protected void reportCodeChange() {}
+    boolean late = false; // Added field to match original code context
+    static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND); // Added constant
+    static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR); // Added constant
+    boolean isASTNormalized() { return true; } // Dummy implementation
+    boolean nodeTypeMayHaveSideEffects(Node n) { return NodeUtil.nodeTypeMayHaveSideEffects(n); } // Dummy implementation
+    boolean mayEffectMutableState(Node n) { return NodeUtil.mayHaveSideEffects(n); } // Dummy implementation
+    boolean areNodesEqualForInlining(Node n1, Node n2) { return n1.isEquivalentToTyped(n2); } // Dummy implementation
+
+  /**
+   * Returns true if the node may represent a Generator function. The FUNCTION node passed in must
+   * be the root of a function.
+   */
+  protected static boolean isGeneratorFunction(Node n) {
+    return n.isGeneratorFunction();
+  }
+
+  /** @return Whether the node is a call to {@code goog.reflect.objectProperty}. */
+  static boolean isGoogReflectObjectProperty(Node n) {
+      return false; // Dummy
+  }
+
+
+    protected boolean consumesDanglingElse(Node n) { return false; } // Dummy
+
+    protected boolean isLowerPrecedenceInExpression(Node n, int p) { return false; } // Dummy
+
+    protected boolean isPropertyAssignmentInExpression(Node n) { return false; } // Dummy
+
+    protected void tryRemoveRepeatedStatements(Node n) {} // Dummy
+
+    /**
+     * @return Whether the node is a block with a single statement that
+     * is an expression.
+     */
+    protected static boolean isFoldableExpressBlock(Node n) {
+      if (n.isBlock()) {
+        if (n.hasOneChild()) {
+          Node first = n.getFirstChild();
+          return isExpressionNode(first);
+        }
+      }
+      return false;
+    }
+
+    /**
+     * @return The expression node.
+     * @see #isFoldableExpressBlock
+     */
+    protected static Node getBlockExpression(Node n) {
+      return n.getFirstChild();
+    }
+
+    /**
+     * @return Whether the node is a block with a single statement that
+     * is an return.
+     */
+    protected static boolean isReturnExpressBlock(Node n) {
+      if (n.isBlock()) {
+        if (n.hasOneChild()) {
+          Node first = n.getFirstChild();
+          if (first.isReturn()) {
+            return first.hasOneChild();
+          }
+        }
+      }
+      return false;
+    }
+
+    /**
+     * @return The expression node.
+     * @see #isReturnExpressBlock
+     */
+    protected static Node getBlockReturnExpression(Node n) {
+      return n.getFirstChild().getFirstChild();
+    }
+
+
+    /**
+     * @return Whether the node is a block with a single var statement.
+     */
+    private static boolean isVarBlock(Node n) {
+      if (n.isBlock()) {
+        if (n.hasOneChild()) {
+          Node first = n.getFirstChild();
+          return first.isVar();
+        }
+      }
+      return false;
+    }
+
+    /**
+     * @return The var node.
+     * @see #isVarBlock
+     */
+    private static Node getBlockVar(Node n) {
+      return n.getFirstChild();
+    }
+}
+
+
+class PeepholeSubstituteAlternateSyntax extends AbstractPeepholeOptimization {
+  @Override
+  protected Node optimizeSubtree(Node node) {
+    // Required implementation, but not relevant for the fix.
+    return node;
+  }
   /**
    * Try turning IF nodes into smaller HOOKs
    *
    * Returns the replacement for n or the original if no replacement was
    * necessary.
    */
   private Node tryMinimizeIf(Node n) {
 
     Node parent = n.getParent();
 
     Node cond = n.getFirstChild();
 
     /* If the condition is a literal, we'll let other
      * optimizations try to remove useless code.
      */
     if (NodeUtil.isLiteralValue(cond, true)) {
       return n;
     }
 
     Node thenBranch = cond.getNext();
     Node elseBranch = thenBranch.getNext();
 
     if (elseBranch == null) {
       if (isFoldableExpressBlock(thenBranch)) {
         Node expr = getBlockExpression(thenBranch);
         if (!late && isPropertyAssignmentInExpression(expr)) {
           // Keep opportunities for CollapseProperties such as
           // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
           // until CollapseProperties has been run.
           return n;
         }
 
         if (cond.isNot()) {
           // if(!x)bar(); -> x||bar();
           if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
               isLowerPrecedenceInExpression(expr.getFirstChild(),
                   OR_PRECEDENCE)) {
             // It's not okay to add two sets of parentheses.
             return n;
           }
 
           Node or = IR.or(
               cond.removeFirstChild(),
               expr.removeFirstChild()).srcref(n);
           Node newExpr = NodeUtil.newExpr(or);
           parent.replaceChild(n, newExpr);
           reportCodeChange();
 
           return newExpr;
         }
 
         // if(x)foo(); -> x&&foo();
         if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
             isLowerPrecedenceInExpression(expr.getFirstChild(),
                 AND_PRECEDENCE)) {
           // One additional set of parentheses is worth the change even if
           // there is no immediate code size win. However, two extra pair of
           // {}, we would have to think twice. (unless we know for sure the
           // we can further optimize its parent.
           return n;
         }
 
         n.removeChild(cond);
         Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
         Node newExpr = NodeUtil.newExpr(and);
         parent.replaceChild(n, newExpr);
         reportCodeChange();
 
         return newExpr;
       } else {
 
         // Try to combine two IF-ELSE
         if (NodeUtil.isStatementBlock(thenBranch) &&
             thenBranch.hasOneChild()) {
           Node innerIf = thenBranch.getFirstChild();
 
           if (innerIf.isIf()) {
             Node innerCond = innerIf.getFirstChild();
             Node innerThenBranch = innerCond.getNext();
             Node innerElseBranch = innerThenBranch.getNext();
 
             if (innerElseBranch == null &&
                  !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                    isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
               n.detachChildren();
               n.addChildToBack(
                   IR.and(
                       cond,
                       innerCond.detachFromParent())
                       .srcref(cond));
               n.addChildrenToBack(innerThenBranch.detachFromParent());
               reportCodeChange();
               // Not worth trying to fold the current IF-ELSE into && because
               // the inner IF-ELSE wasn't able to be folded into && anyways.
               return n;
             }
           }
         }
       }
 
       return n;
     }
 
     /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
      * peephole optimization. This should probably get moved to another pass.
      */
     tryRemoveRepeatedStatements(n);
 
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
       n.replaceChild(cond, cond.removeFirstChild());
       n.removeChild(thenBranch);
       n.addChildToBack(thenBranch);
       reportCodeChange();
       return n;
     }
 
     // if(x)return 1;else return 2; -> return x?1:2;
     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
       Node thenExpr = getBlockReturnExpression(thenBranch);
       Node elseExpr = getBlockReturnExpression(elseBranch);
       n.removeChild(cond);
       thenExpr.detachFromParent();
       elseExpr.detachFromParent();
 
       // note - we ignore any cases with "return;", technically this
       // can be converted to "return undefined;" or some variant, but
       // that does not help code size.
       Node returnNode = IR.returnNode(
                             IR.hook(cond, thenExpr, elseExpr)
                                 .srcref(n));
       parent.replaceChild(n, returnNode);
       reportCodeChange();
       return returnNode;
     }
 
     boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
     boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
 
     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
       Node thenOp = getBlockExpression(thenBranch).getFirstChild();
       Node elseOp = getBlockExpression(elseBranch).getFirstChild();
       if (thenOp.getType() == elseOp.getType()) {
         // if(x)a=1;else a=2; -> a=x?1:2;
-        if (NodeUtil.isAssignmentOp(thenOp)) {
+        // This optimization is only valid if the assignment doesn't have side effects
+        // and is a simple assignment. Compound assignments (like +=) are NOT handled here.
+        // We check for side effects on the LHS because the assignment will be hoisted
+        // outside the condition: a = x ? 1 : 2 evaluates 'a' first.
+        if (thenOp.isAssign()) { // <<< FIX: Changed from NodeUtil.isAssignmentOp(thenOp) to thenOp.isAssign()
           Node lhs = thenOp.getFirstChild();
           if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
-              // if LHS has side effects, don't proceed [since the optimization
-              // evaluates LHS before cond]
-              // NOTE - there are some circumstances where we can
-              // proceed even if there are side effects...
               !mayEffectMutableState(lhs)) {
 
-            n.removeChild(cond);
-            Node assignName = thenOp.removeFirstChild();
-            Node thenExpr = thenOp.removeFirstChild();
-            Node elseExpr = elseOp.getLastChild();
-            elseOp.removeChild(elseExpr);
+            // Transform: a = cond ? thenExpr : elseExpr;
+            n.removeChild(cond); // Detach condition 'x'
+            Node assignName = thenOp.removeFirstChild(); // Get LHS 'a' from 'a=1'
+            Node thenExpr = thenOp.removeFirstChild();   // Get RHS '1' from 'a=1'
+            Node elseExpr = elseOp.getLastChild();       // Get RHS '2' from 'a=2'
+            elseOp.removeChild(elseExpr); // Detach '2' from 'a=2'
 
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-            Node assign = new Node(thenOp.getType(), assignName, hookNode)
-                              .srcref(thenOp);
-            Node expr = NodeUtil.newExpr(assign);
+            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n); // Create hook 'x?1:2'
+            Node assign = IR.assign(assignName, hookNode) // Create 'a = (x?1:2)'
+                              .srcref(thenOp); // Use srcref from original assignment 'a=1'
+            Node expr = NodeUtil.newExpr(assign); // Create EXPR_RESULT node
             parent.replaceChild(n, expr);
             reportCodeChange();
 
             return expr;
           }
         }
       }
-      // if(x)foo();else bar(); -> x?foo():bar()
-      n.removeChild(cond);
-      thenOp.detachFromParent();
-      elseOp.detachFromParent();
-      Node expr = IR.exprResult(
-          IR.hook(cond, thenOp, elseOp).srcref(n));
+      // Fallback: if(x)foo();else bar(); -> x?foo():bar()
+      // This applies if the a=x?1:2 optimization above wasn't possible (e.g., because of
+      // side effects, compound assignment, or different LHS).
+      n.removeChild(cond); // Detach condition 'x'
+      thenOp.detachFromParent(); // Detach the entire 'then' expression (e.g., 'a=1', 'x+=2')
+      elseOp.detachFromParent(); // Detach the entire 'else' expression (e.g., 'a=2', 'x+=3')
+      Node expr = IR.exprResult( // Create EXPR_RESULT
+          IR.hook(cond, thenOp, elseOp).srcref(n)); // Create hook 'x ? (a=1) : (a=2)'
       parent.replaceChild(n, expr);
       reportCodeChange();
       return expr;
     }
 
     boolean thenBranchIsVar = isVarBlock(thenBranch);
     boolean elseBranchIsVar = isVarBlock(elseBranch);
 
     // if(x)var y=1;else y=2  ->  var y=x?1:2
     if (thenBranchIsVar && elseBranchIsExpressionBlock &&
         getBlockExpression(elseBranch).getFirstChild().isAssign()) {
 
       Node var = getBlockVar(thenBranch);
       Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
 
-      Node name1 = var.getFirstChild();
-      Node maybeName2 = elseAssign.getFirstChild();
+      Node name1 = var.getFirstChild(); // VAR name node
+      Node maybeName2 = elseAssign.getFirstChild(); // LHS of assignment
 
-      if (name1.hasChildren()
+      if (name1.hasChildren() // var y = 1; (has initializer)
           && maybeName2.isName()
-          && name1.getString().equals(maybeName2.getString())) {
-        Node thenExpr = name1.removeChildren();
-        Node elseExpr = elseAssign.getLastChild().detachFromParent();
-        cond.detachFromParent();
-        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
+          && name1.getString().equals(maybeName2.getString())) { // names match
+        Node thenExpr = name1.removeChildren(); // Get initializer '1'
+        Node elseExpr = elseAssign.getLastChild().detachFromParent(); // Get RHS '2'
+        cond.detachFromParent(); // Detach condition 'x'
+        Node hookNode = IR.hook(cond, thenExpr, elseExpr) // Create hook 'x?1:2'
                             .srcref(n);
-        var.detachFromParent();
-        name1.addChildrenToBack(hookNode);
-        parent.replaceChild(n, var);
+        var.detachFromParent(); // Detach 'var y=1' from original block
+        name1.addChildrenToBack(hookNode); // Make it 'var y=(x?1:2)'
+        parent.replaceChild(n, var); // Replace 'if' with 'var'
         reportCodeChange();
         return var;
       }
 
     // if(x)y=1;else var y=2  ->  var y=x?1:2
     } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
         getBlockExpression(thenBranch).getFirstChild().isAssign()) {
 
-      Node var = getBlockVar(elseBranch);
-      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
+      Node var = getBlockVar(elseBranch); // Get 'var y=2'
+      Node thenAssign = getBlockExpression(thenBranch).getFirstChild(); // Get 'y=1'
 
-      Node maybeName1 = thenAssign.getFirstChild();
-      Node name2 = var.getFirstChild();
+      Node maybeName1 = thenAssign.getFirstChild(); // LHS 'y' from 'y=1'
+      Node name2 = var.getFirstChild(); // VAR name node 'y' from 'var y=2'
 
-      if (name2.hasChildren()
+      if (name2.hasChildren() // var y = 2; (has initializer)
           && maybeName1.isName()
-          && maybeName1.getString().equals(name2.getString())) {
-        Node thenExpr = thenAssign.getLastChild().detachFromParent();
-        Node elseExpr = name2.removeChildren();
-        cond.detachFromParent();
-        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
+          && maybeName1.getString().equals(name2.getString())) { // names match
+        Node thenExpr = thenAssign.getLastChild().detachFromParent(); // Get RHS '1'
+        Node elseExpr = name2.removeChildren(); // Get initializer '2'
+        cond.detachFromParent(); // Detach condition 'x'
+        Node hookNode = IR.hook(cond, thenExpr, elseExpr) // Create hook 'x?1:2'
                             .srcref(n);
-        var.detachFromParent();
-        name2.addChildrenToBack(hookNode);
-        parent.replaceChild(n, var);
+        var.detachFromParent(); // Detach 'var y=2' from original block
+        name2.addChildrenToBack(hookNode); // Make it 'var y=(x?1:2)'
+        parent.replaceChild(n, var); // Replace 'if' with 'var'
         reportCodeChange();
 
         return var;
       }
     }
 
     return n;
   }
+}
\ No newline at end of file
