diff --git a/tmp/93b4866b-864a-4d0c-9179-aaab4d95077c_buggy.java b/tmp/1cfc4893-b5e8-40d3-9ac9-b1e9f454a033_fixed.java
index 7c0ebae..dcac686 100644
--- a/tmp/93b4866b-864a-4d0c-9179-aaab4d95077c_buggy.java
+++ b/tmp/1cfc4893-b5e8-40d3-9ac9-b1e9f454a033_fixed.java
@@ -1,229 +1,270 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
         
         // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
         // check for no buffered context _exposedContext - null
         // If all the conditions matches then check for scalar / non-scalar property
         if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
+            // If we are not allowing multiple matches, and found the first one, may need
+            // to complete its handling and then just return null.
+            // Need to be careful here: if `_includePath` is true, we do need to
+            // expose surrounding tokens as well.
+            // Comments suggested this was only for `!_includePath`
             if (_currToken.isStructEnd()) {
-                    if (_headContext.isStartHandled()) {
+                if (!_includePath && _headContext.isStartHandled()) {
                      return (_currToken = null);
                 }
             } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
-                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                // Same for scalars: if path not included, and match found, need to return null
+                if (!_includePath && !_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
                     return (_currToken = null);
                 }
             }
         }
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
+                        t = delegate.currentToken();
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
+                    // 13-Dec-2018, tatu: Added this check to avoid accidental EOF
+                    //   in some cases; needed with JsonPointer filtering
+                    // NOTE: We can NOT call `delegate.nextToken()` because that assumes
+                    // matching START_OBJECT, whereas we are inside Object, expecting FIELD_NAME
+                    t = delegate.currentToken();
                     if (t != JsonToken.FIELD_NAME) {
                         _currToken = t;
                         return t;
                     }
-                    */
+                    // otherwise fall through to get FIELD_NAME handled
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildArrayContext(f, false);
             
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             // note: inclusion of surrounding Object handled separately via
             // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
+                    f.filterFinishArray(); // misnomer, applied to objects too
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
                     if (!_includePath) {
                         // Minor twist here: if parent NOT included, may need to induce output of
                         // surrounding START_OBJECT/END_OBJECT
                         if (_includeImmediateParent && !_headContext.isStartHandled()) {
                             t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                             _exposedContext = _headContext;
                         }
+                        // We should handle the start token of object/array only if the property filter is include all
+                        // Or if the property is to be included otherwise the start token may not be needed
+                        // For cases like { "a" : { "b" : 1 } } where filter is for "b" and includePath is false
+                        // We should not see START_OBJECT for "a"
                     }
                     return (_currToken = t);
                 }
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 f = f.includeProperty(name);
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
                 if (f == TokenFilter.INCLUDE_ALL) {
                     if (_includePath) {
                         return (_currToken = t);
                     }
+                    // Need to check if parent was explicitly included; if not, need to buffer
+                    if (_includeImmediateParent && _headContext.isStartHandled()) {
+                        // property will be included, and parent was included too, so just return
+                        return (_currToken = t);
                     }
+                    // If parent not included, need to buffer START_OBJECT/ARRAY (and END_OBJECT/ARRAY)
+                    if (_includePath) { // if path is included then must have been buffered earlier
+                        // we don't get here actually...
+                    } else { // need to buffer starting from START_OBJECT/ARRAY
+                        t = _nextTokenWithBuffering(_headContext);
+                        if (t != null) {
+                            _currToken = t;
+                            return t;
+                        }
+                    }
+                }
+                // Otherwise not included (leaves must be explicitly included)...
+                // Except that if path inclusion is enabled, we may need to buffer:
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
+                    // Need to check if parent was included; if not, may need to buffer?
+                    if (_includeImmediateParent && _headContext.isStartHandled()) {
+                        return (_currToken = t);
+                    }
+                    // If parent not included, need to buffer START_OBJECT/ARRAY (and END_OBJECT/ARRAY)
+                    if (_includePath) { // if path is included then must have been buffered earlier
+                        return (_currToken = t);
+                    } else { // need to buffer starting from START_OBJECT/ARRAY?
+                        // 03-Feb-2019, tatu: This seems wrong; should possibly check buffer?
+                        // Let's try this:
+                        t = _nextTokenWithBuffering(_headContext);
+                        if (t != null) {
+                           _currToken = t;
+                           return t;
+                        }
+                    }
+
+                    // If we get here, shouldn't... for now, return token?
+                    // (used to just fall through)
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
         return _nextToken2();
     }
\ No newline at end of file
