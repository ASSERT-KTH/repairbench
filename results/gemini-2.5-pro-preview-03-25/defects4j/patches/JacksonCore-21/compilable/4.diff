diff --git a/tmp/67eb8798-338a-48bc-8ab6-463f8db489f0_buggy.java b/tmp/fe1db813-cdd2-48bf-9b28-bec75ec97e65_fixed.java
index 7c0ebae..21e88be 100644
--- a/tmp/67eb8798-338a-48bc-8ab6-463f8db489f0_buggy.java
+++ b/tmp/fe1db813-cdd2-48bf-9b28-bec75ec97e65_fixed.java
@@ -1,229 +1,283 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
         
         // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
         // check for no buffered context _exposedContext - null
         // If all the conditions matches then check for scalar / non-scalar property
+        // [JACKSON-CORE#330]: This check needs refinement: specifically, with `_includePath`,
+        // we may need to return Structure End token even if !_allowMultipleMatches,
+        // to match the Structure Start token that was already returned.
         if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
+            // If the last token returned was the end of a structure which was included
+            // Need to check the context active when that token was returned, i.e.
+            // the parent of the current context.
             if (_currToken.isStructEnd()) {
-                    if (_headContext.isStartHandled()) {
+                // If the start of the structure that just ended was handled
+                // and we are not including the full path, we are done.
+                // NOTE: `_headContext` is context AFTER ending the structure.
+                //       `isStartHandled()` refers to the start of this parent context.
+                if (_headContext.isStartHandled() && !_includePath) {
                     return (_currToken = null);
                 }
             } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
-                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                // If the last token was a scalar value included via INCLUDE_ALL filter,
+                // and the containing structure's start was NOT handled (typically means root scalar)
+                // and we are not including the path, we are done.
+                if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL) && !_includePath) {
                     return (_currToken = null);
                 }
             }
         }
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
+                    // [JACKSON-CORE#406]: When reading from buffer, possible that matching
+                    // END_ARRAY / END_OBJECT was returned; in which case, need to verify
+                    // state is correct. Specifically, if last token was END_ARRAY,
+                    // delegate should point to matching END_ARRAY. If START_ARRAY, ditto.
+                    // Let's verify...
                     if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
+                        t = delegate.currentToken();
+                        // it appears we must assume it's ok to return this?
+                        // Based on [core#406], seems ok.
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
+                    // Similarly for objects, FIELD_NAMEs
+                    if (ctxt.inObject()) {
+                        t = delegate.currentToken();
+                        if (t == JsonToken.FIELD_NAME) {
                             _currToken = t;
                             return t;
                         }
-                    */
+                        // but could also be END_OBJECT; needs to be returned then?
+                        // Or... is this even possible? Maybe FIELD_NAME is the only
+                        // case Needs to consider? For now, let's assume so
+                    }
+                    // Past END_OBJECT / END_ARRAY need to fall through though
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
+            // 28-Sep-2018, tatu: Need to consider [jackson-core#488]
+            if (!_includePath) {
+                // Let's offline this; requires buffering which is bit complicated
+                t = _nextTokenWithBuffering(_headContext); // Also assigns _currToken
+                if (t != null) {
+                    return t;
+                }
+                break;
+            }
             _headContext = _headContext.createChildArrayContext(f, false);
-            
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
+            // If path not included, and filter START_ARRAY itself returns null, need to skip
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
+
+            // 28-Sep-2018, tatu: Need to consider [jackson-core#488]
+            if (!_includePath) {
+                // Let's offline this; requires buffering which is bit complicated
+                t = _nextTokenWithBuffering(_headContext); // Also assigns _currToken
+                if (t != null) {
+                    return t;
+                }
+                break;
+            }
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             // note: inclusion of surrounding Object handled separately via
             // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
+                    // 16-May-2019, tatu: Matching filter may specify matching inclusion:
+                    f.filterFinishArray(); // or filterFinishObject() ? Needs to call the right one? How?
+                                           // context has that info, Filter does not?
+                                           // ... maybe FilterProvider needs access? Or TokenFilterContext?
+                                           // Fixed in 2.10.0 I think
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                    // We will include the field name and the subsequent value. But
+                    // we only need immediate buffering if the current context has not
+                    // been started AND parent path is to be included.
+                    if (_includePath && !_headContext.isStartHandled()) {
                         t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                         _exposedContext = _headContext;
-                        }
+                        // note: this does NOT assign _currToken: caller needs to track
                     }
                     return (_currToken = t);
                 }
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 f = f.includeProperty(name);
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
                 if (f == TokenFilter.INCLUDE_ALL) {
+                    // We need to ensure that the START_OBJECT/START_ARRAY that precedes this
+                    // FIELD_NAME has been included IF path is to be included:
                     if (_includePath) {
-                        return (_currToken = t);
+                        t = _nextTokenWithBuffering(_headContext);
+                        if (t != null) {
+                            _currToken = t;
+                            return t;
                         }
                     }
+                    // Either way, the field name itself needs to be returned, stay here
+                }
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
+                    // Similar buffering check as with FIELD_NAME
+                    if (_includePath && !_headContext.isStartHandled()) {
+                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                        _exposedContext = _headContext;
+                        // note: this does NOT assign _currToken: caller needs to track
+                    }
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
+        // Need to make sure we didn't already return the result though
         return _nextToken2();
     }
\ No newline at end of file
