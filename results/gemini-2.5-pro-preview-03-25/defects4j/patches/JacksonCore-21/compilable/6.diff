diff --git a/tmp/c3324600-66dd-4f18-b572-849232dc8ef8_buggy.java b/tmp/06a0a847-ba5d-4588-8f4c-ea446f1b8d7e_fixed.java
index 7c0ebae..4d1cb8d 100644
--- a/tmp/c3324600-66dd-4f18-b572-849232dc8ef8_buggy.java
+++ b/tmp/06a0a847-ba5d-4588-8f4c-ea446f1b8d7e_fixed.java
@@ -1,229 +1,261 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
         
         // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
         // check for no buffered context _exposedContext - null
         // If all the conditions matches then check for scalar / non-scalar property
+        // 14-Jan-2019, tatu: As per [core#487], must check `_includePath`
         if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
+            // If the last token was an END_OBJECT/END_ARRAY, and the matching structure is presumably finished,
+            // we might be done, but only if path is not included.
             if (_currToken.isStructEnd()) {
-                    if (_headContext.isStartHandled()) {
+                // If path is NOT included, and we just finished a structure whose start was reported,
+                // we are likely done with the single match.
+                if (!_includePath && _headContext.isStartHandled()) {
                     return (_currToken = null);
                 }
             } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
-                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                // If path is NOT included, and the scalar matched directly (_itemFilter == INCLUDE_ALL)
+                // and its containing array/object was NOT started (implying the scalar is the root match), stop.
+                 if (!_includePath && !_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
                      return (_currToken = null);
                  }
             }
         }
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
 // Is this guaranteed to work without further checks?
 //                        if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
+                    // Maybe need to return FIELD_NAME too?
+                    // 11-Sep-2018, tatu: Looks like we may indeed need to return
+                    //   FIELD_NAME in some cases...
+                    /* For now, commented out based on failing test:
+                    if (ctxt.inObject()) {
+                        t = delegate.getCurrentToken();
+                        _currToken = t;
+                        return t;
+                    }
+                    */
 
                     // Almost! Most likely still have the current token;
                     // with the sole exception of 
                     /*
                     t = delegate.getCurrentToken();
                     if (t != JsonToken.FIELD_NAME) {
                         _currToken = t;
                         return t;
                     }
                     */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildArrayContext(f, false);
             
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
+            // If not included, need to skip
+            // break;
+
+            // We get here if the START_ARRAY is not to be included... but
+            // then we need to scan ahead, check if something later might be...
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
+            // Object not included (by filter)... is path included?
             _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
+            // If not included, need to skip
+            // break;
+
+            // If START_OBJECT not included, fall through to checking FIELD_NAMEs etc
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+                    // 17-Jan-2018, tatu: Filter finish needs to be called on matching filter;
+                    //   but should NOT be called for non-matching filters. Simplest way seems
+                    //   to be to check if START was handled? Even that seems iffy...
+                    //  ... Also: needs to be done differently based on type?
+                    if (t == JsonToken.END_ARRAY) {
                         f.filterFinishArray();
+                    } else {
+                        f.filterFinishObject();
+                    }
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
-                            _exposedContext = _headContext;
-                        }
-                    }
                     return (_currToken = t);
                 }
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 f = f.includeProperty(name);
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
                 if (f == TokenFilter.INCLUDE_ALL) {
                     if (_includePath) {
+                        // Need to first make sure we output appropriate start token
+                        t = _nextTokenWithBuffering(_headContext);
+                        if (t != null) {
+                            _currToken = t;
+                            return t;
+                        }
+                    }
+                    // note: used to have this here, but shouldn't be needed:
+//                    if (!_includeImmediateParent) {
+                    // but it has to be included, should be fine?
+                    // Hmmh. If path is included, do need to verify this...
+                    // (and conversely...)
                     return (_currToken = t);
                 }
-                }
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
         return _nextToken2();
     }
\ No newline at end of file
