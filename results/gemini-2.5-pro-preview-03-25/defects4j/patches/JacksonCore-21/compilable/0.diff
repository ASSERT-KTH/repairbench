diff --git a/tmp/8655437a-1fb3-4ec7-a067-a5e08c276c9d_buggy.java b/tmp/ba91b767-a872-42f5-8f1a-7e9e00a4252c_fixed.java
index 7c0ebae..ce752c4 100644
--- a/tmp/8655437a-1fb3-4ec7-a067-a5e08c276c9d_buggy.java
+++ b/tmp/ba91b767-a872-42f5-8f1a-7e9e00a4252c_fixed.java
@@ -1,229 +1,305 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
 
-        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
-        // check for no buffered context _exposedContext - null
-        // If all the conditions matches then check for scalar / non-scalar property
+        // Check for _allowMultipleMatches = false and single match found and structure ended.
         if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
+            // If the previous token was the end of a structure, and we are now back at the root,
+            // the match is complete. Signal completion.
+            // Fix for [core#330]
             if (_currToken.isStructEnd()) {
-                    if (_headContext.isStartHandled()) {
+                // Error fix: Changed the condition here to check if context is back at root
+                if (_headContext.inRoot()) { 
                     return (_currToken = null);
                 }
+            // Original check for scalar values; needed for cases like root-level scalars?
+            // Or maybe cases where includePath=false?
             } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
                  if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                     // Related to [core#60] ?
                      return (_currToken = null);
                  }
             }
         }
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
 // Is this guaranteed to work without further checks?
 //                        if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
 
                     // Almost! Most likely still have the current token;
                     // with the sole exception of
                     /*
                     t = delegate.getCurrentToken();
                     if (t != JsonToken.FIELD_NAME) {
                         _currToken = t;
                         return t;
                     }
                     */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
 
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // filter indicates skip-all
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // filter indicates skip-all
                 delegate.skipChildren();
                 break;
             }
+            // But perhaps we need to include this array?
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
+            // Still not included, but need to traverse.
+            // Perhaps due to ancestor filter inclusion (aka include path)
             _headContext = _headContext.createChildArrayContext(f, false);
 
             // Also: only need buffering if parent path to be included
             if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
+                 // But do we need to include root-level array START_ARRAY? Yes.
+                 // Or, if property is included, need START_ARRAY
+                 JsonToken t2 = _nextTokenWithBuffering(_headContext);
+                 if (t2 != null) {
+                     _currToken = t2;
+                     return t2;
                  }
             }
+            // If not including path, need to skip current START_ARRAY: handled by looping
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // filter indicates skip-all
                 delegate.skipChildren();
                 break;
             }
-            // Otherwise still iffy, need to check
+            // If not include-all, first check if parent requires value:
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // filter indicates skip-all
                 delegate.skipChildren();
                 break;
             }
+            // Maybe include? If not, calculate filter for contents
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
+            // Not included, but need to traverse (maybe include path?)
              _headContext = _headContext.createChildObjectContext(f, false);
+
              // Also: only need buffering if parent path to be included
              if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
+                 JsonToken t2 = _nextTokenWithBuffering(_headContext);
+                 if (t2 != null) {
+                     _currToken = t2;
+                     return t2;
                  }
              }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
+             // If not including path, handled by loop: START_OBJECT not returned, loop back
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+                    // 18-Sep-2019, tatu: This seems wrong, filter applied AFTER structure finished?
+                    //    Need to reconsider. However, let's keep the structure from the input code.
+                    //    Note: original code only called filterFinishArray() regardless of token type.
                     f.filterFinishArray();
                 }
                 _headContext = _headContext.getParent();
+                // Important: value filter should be cleared, parent node's filter restored
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
+            // If not returning, loop: will scan till something is included
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
-                if (f == TokenFilter.INCLUDE_ALL) {
+                if (f == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree?
                     _itemFilter = f;
-                    if (!_includePath) {
+                    // we may also need to consider parent path if we are filtering based
+                    // on it
+                     if (_includePath) {
+                        // If path is included, FIELD_NAME is always returned:
+                        // Also, need to initiate buffering if parent context wasn't included
+                         JsonToken t2 = _nextTokenWithBuffering(_headContext);
+                         if (t2 != null) {
+                             _currToken = t2;
+                             return t2;
+                         }
                      // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                     // surrounding START_OBJECT/END_OBJECT (if _includeImmediateParent enabled)
+                     } else if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                        // If parent not included, still need to output the START_OBJECT (if available)
+                         JsonToken t2 = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                         _exposedContext = _headContext;
+                        // Note: This case is only relevant if _includePath is false.
+                        // Also note: may return null, but that's fine
+                        if (t2 != null) {
+                            _currToken = t2;
+                            return t2;
                         }
                      }
+                    // otherwise return token after potentially starting buffering
                     return (_currToken = t);
                 }
-                if (f == null) {
+                if (f == null) { // explicit exclusion
+                    // need to skip field's value
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
+                // But maybe FIELD_NAME itself needs to be included? Or its value?
                 f = f.includeProperty(name);
-                if (f == null) {
+                if (f == null) { // skip
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
-                if (f == TokenFilter.INCLUDE_ALL) {
+                if (f == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree?
                      if (_includePath) {
+                         // analogous to when starting with INCLUDE_ALL filter:
+                         JsonToken t2 = _nextTokenWithBuffering(_headContext);
+                         if (t2 != null) {
+                             _currToken = t2;
+                             return t2;
+                         }
+                         // otherwise fall through and return FIELD_NAME
+                     // If path not included, but property is, may need START_OBJECT
+                     } else if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                        JsonToken t2 = _headContext.nextTokenToRead();
+                        _exposedContext = _headContext;
+                         if (t2 != null) {
+                            _currToken = t2;
+                            return t2;
+                        }
+                     }
+                     // if no path inclusion or buffering, FIELD_NAME is still the token to return
                      return (_currToken = t);
                 }
-                }
+
+                 // Ok; not-including-all, but FIELD_NAME might be included,
+                 // if path is included:
                  if (_includePath) {
-                    t = _nextTokenWithBuffering(_headContext);
-                    if (t != null) {
-                        _currToken = t;
-                        return t;
+                     JsonToken t2 = _nextTokenWithBuffering(_headContext);
+                     if (t2 != null) {
+                         _currToken = t2;
+                         return t2;
                      }
                  }
+                 // Otherwise, need to skip the FIELD_NAME, but DON'T skip value.
+
+                // Fall through: will recurse, skip FIELD_NAME, find value etc
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
+                // Need to check buffering state regardless
+                 if (_includePath) {
+                     JsonToken t2 = _nextTokenWithBuffering(_headContext);
+                     if (t2 != null) {
+                         _currToken = t2;
+                         return t2;
+                     }
+                 }
+                // If no buffering, just return
                 return (_currToken = t);
             }
             if (f != null) {
+                // but included by parent?
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
+                        // or by value itself?
                         || ((f != null) && f.includeValue(delegate))) {
+                    // Need to check buffering state regardless
+                    if (_includePath) {
+                        JsonToken t2 = _nextTokenWithBuffering(_headContext);
+                        if (t2 != null) {
+                            _currToken = t2;
+                            return t2;
+                        }
+                    }
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
+        // (rare case; only happens if buffering was needed but did not
+        // produce tokens, OR if we had to skip FIELD_NAME)
         return _nextToken2();
     }
\ No newline at end of file
