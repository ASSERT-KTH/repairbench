diff --git a/tmp/bcc5d3c8-ee11-4582-b195-a1daf809c4a5_buggy.java b/tmp/79a74c09-26a9-443d-a160-33dcbd00ba53_fixed.java
index 7c0ebae..dbe57f5 100644
--- a/tmp/bcc5d3c8-ee11-4582-b195-a1daf809c4a5_buggy.java
+++ b/tmp/79a74c09-26a9-443d-a160-33dcbd00ba53_fixed.java
@@ -1,229 +1,276 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
         
         // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
         // check for no buffered context _exposedContext - null
         // If all the conditions matches then check for scalar / non-scalar property
         if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
+            // If path is not included, we may stop early; otherwise, need the closing token(s)
+            if (_currToken.isStructEnd()) {
+                 // If start handled, and not including path, then we can stop
+                if (!_includePath && _headContext.isStartHandled()) {
+                    return (_currToken = null);
+                }
+                // otherwise continue to potentially return the END_OBJECT/END_ARRAY
+            } else if (_currToken.isScalarValue()) {
+                // If root-level scalar matched, and not including path, can stop
+                // 28-Mar-2018, tatu: As per [core#434], same logic needed for scalars too
+                if (!_includePath && !_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                    return (_currToken = null);
+                }
+                // otherwise proceed to see what comes next
+            }
+            // 28-Mar-2018, tatu: Before fix for [core#434], code was:
+            /*
             //if not scalar and ended successfully, and !includePath, then return null
                 if (_currToken.isStructEnd()) {
                     if (_headContext.isStartHandled()) {
                         return (_currToken = null);
                     }
                 } else if (_currToken.isScalarValue()) {
                     //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
                     // then return null 
                     if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
                         return (_currToken = null);
                     }
                 }
+                */
         }
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
+                    // If we are using non-blocking parser, it may not be possible to
+                    // advance buffer to determine next token. Return null for now.
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
+                        // TODO: verify this is safe or do we need to buffer?
 // Is this guaranteed to work without further checks?
 //                        if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
+                    // 13-Dec-2018, tatu: [core#518] Need similar handling for objects...
+                    //   how about this? Seems to work but... not 100% sure
+                    if (ctxt.inObject()) {
                         t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
                         _currToken = t;
                         return t;
                     }
-                    */
+
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // filter indicates skip children
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // value filter indicates skip
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
+            // Still not certain if inclusion needed? Ask filter
             _headContext = _headContext.createChildArrayContext(f, false);
             
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
+            // If not included, need to skip Schnapps... unless we want to keep structure
+            /* May be structurally included, need to remain open? For now, let's assume this is enough.
+            if (!_includePath) {
+                delegate.skipChildren();
+            }
+             */
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // filter indicates skip children
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             // note: inclusion of surrounding Object handled separately via
             // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
-                boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
+                boolean returnEnd = _headContext.isStartHandled();
+
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
+                    // 10-Jun-2018, tatu: Should call appropriate `filterFinishXxx()`?
+                    //    Looks like filter logic has issues here; skipping for now
+//                    f.filterFinishArray();
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
-                if (f == TokenFilter.INCLUDE_ALL) {
+                if (f == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree
                     _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
+                    // With path-inclusion, we need FIELD_NAME; without, we only need it if
+                    // parent wasn't explicitly included (and need START_OBJECT)
+                    if (_includePath) {
+                       return (_currToken = t);
+                    }
+                    // Without path inclusion, may need START_OBJECT for the current context
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                       // note: this assumes we are within Object context (which we should be)
                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                        _exposedContext = _headContext;
                     }
+                    // but FIELD_NAME itself is not needed. Fall through to reading value
+                    break;
                 }
-                    return (_currToken = t);
-                }
-                if (f == null) {
+                if (f == null) { // filter indicates skip this property/sub-tree
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
+                // Ok, maybe include? Ask filter to verify:
                 f = f.includeProperty(name);
-                if (f == null) {
+                if (f == null) { // nope, skip
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
+                // But does filter want the whole sub-tree?
                 if (f == TokenFilter.INCLUDE_ALL) {
+                    // With path inclusion, FIELD_NAME needed:
                     if (_includePath) {
                         return (_currToken = t);
                     }
+                    // Without path inclusion, may need START_OBJECT for the current context
+                    if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                        // note: this assumes we are within Object context (which we should be)
+                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                        _exposedContext = _headContext;
                     }
+                    // and then FIELD_NAME is never needed actually... fall through to read value
+                    
+                // Ok: this filter matches property, include FieldName, Value, possible children:
+                } else {
+                    // But maybe parent path included? Need to buffer...
                     if (_includePath) {
                         t = _nextTokenWithBuffering(_headContext);
                         if (t != null) {
                             _currToken = t;
                             return t;
                         }
                     }
+                }
+                // Stuff to skip either way:
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
         return _nextToken2();
     }
\ No newline at end of file
