diff --git a/tmp/09aff559-29aa-497c-bf2f-171b93c9a387_buggy.java b/tmp/241604ba-02c5-4c6c-873c-062fd90f80d0_fixed.java
index 7c0ebae..4d58ff6 100644
--- a/tmp/09aff559-29aa-497c-bf2f-171b93c9a387_buggy.java
+++ b/tmp/241604ba-02c5-4c6c-873c-062fd90f80d0_fixed.java
@@ -1,229 +1,288 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
 
         // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
         // check for no buffered context _exposedContext - null
+        // check for path inclusion is disabled
         // If all the conditions matches then check for scalar / non-scalar property
-        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
-                if (_currToken.isStructEnd()) {
-                    if (_headContext.isStartHandled()) {
+        // Make sense to short-circuit if ALL of these conditions are met:
+        //
+        // 1. We are not allowing multiple matches (_allowMultipleMatches == false)
+        // 2. We have already returned at least one token (_currToken != null)
+        // 3. We are not currently handling buffered tokens (_exposedContext == null)
+        // 4. We are not including the full path (_includePath == false) <--- Added this check
+        //
+        // If all conditions are met, we MIGHT be able to stop processing.
+        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null) && !_includePath) {
+            // If the last token returned was the end of a structure (object/array)
+            // AND its corresponding start token was already handled/returned...
+            if (_currToken.isStructEnd() && _headContext.isStartHandled()) {
+                 // ... then we are done with the single match, return null to indicate end-of-input
+                 // for this filtered view
                 return (_currToken = null);
             }
-                } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
-                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+            // If the last token was a scalar value, AND its enclosing structure's start
+            // token was NOT handled (meaning the structure itself wasn't included), AND
+            // the filter matched this specific scalar (_itemFilter == INCLUDE_ALL)...
+            if (_currToken.isScalarValue() && !_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                // ... then we are done with the single match, return null.
                 return (_currToken = null);
             }
         }
-        }
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
+                    // [databind#1744]: If buffer is consumed, may need to exit
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
+                        // Let's NOT advance parser but use current token as is
                          _currToken = t;
                          return t;
                     }
+                    // Similarly, with FIELD_NAME we're at field name, need to get value etc:
+                    /* 26-May-2017, tatu: As per [jackson-core#364], seems we do need this...
+                    if (ctxt.inObject()) {
+                        t = delegate.getCurrentToken(); // Should be FIELD_NAME
+                         _currToken = t;
+                         return t;
+                    }
+                    */
 
                     // Almost! Most likely still have the current token;
                     // with the sole exception of
                     /*
                     t = delegate.getCurrentToken();
                     if (t != JsonToken.FIELD_NAME) {
                         _currToken = t;
                         return t;
                     }
                     */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
 
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildArrayContext(f, false);
 
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             // note: inclusion of surrounding Object handled separately via
             // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
+                    f.filterFinishArray(); // misnomer, applied to objects too
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
-                    if (!_includePath) {
+                    // We may also need to output START_OBJECT/ARRAY if parent wasn't included:
+                    if (_includePath) {
+                        //slightly different if path is included
+                         // Important: need to make sure parent START_OBJECT/ARRAY is written, if not yet done:
+                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                            _exposedContext = _headContext;
+                            // Let's fall through and let caller fetch it from buffer
+                            // Fall through: will return FIELD_NAME in the end
+                        }
+                        // Otherwise can just return the FIELD_NAME we have
+                        return (_currToken = t);
+                    }
+                    // If path not included, may need to include START_OBJECT/ARRAY implicitly
                     // Minor twist here: if parent NOT included, may need to induce output of
                     // surrounding START_OBJECT/END_OBJECT
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                        // Need to generate START_OBJECT/ARRAY first?
                         t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                         _exposedContext = _headContext;
                     }
-                    }
+                    // And in either case, we will return the FIELD_NAME, then value etc:
                     return (_currToken = t);
                 }
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 f = f.includeProperty(name);
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
                 if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
+                     if (_includeProperty(f)) { // Also checks _includePath
                         return (_currToken = t);
                     }
+                     // If path not included, need similar logic as above?
+                     // Actually, no: if properties match, but not including path,
+                     // we are golden. But with path inclusion, need buffering.
                 }
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
+                // If we get here, need to skip the value
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
+                if (_includePath) {
+                    // Important: need to make sure parent START_OBJECT/ARRAY is written, if not yet done:
+                    if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                        _exposedContext = _headContext;
+                        // Let's fall through and let caller fetch it from buffer
+                     }
+                    // Otherwise can just return the scalar value we have
+                    return (_currToken = t);
+                }
+                // If path not included, we have plain scalar value, return
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
+                if (f == TokenFilter.INCLUDE_ALL) {
+                     if (_includeScalarValue(f)) { // Also checks _includePath
                         return (_currToken = t);
                      }
+                } else if (f != null) {
+                    if (f.includeValue(delegate)) {
+                         if (_includeScalarValue(f)) { // Also checks _includePath
+                            return (_currToken = t);
+                         }
+                    }
+                }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
+        // is needed. This occurs for two basic reasons:
+        //
+        // 1. Filtering by path (whether explicit or implicit) -> potentially need to buffer, return enclosing structure
+        // 2. A match is found but potentially needs enclosing structure to be returned (when path inclusion enabled)
         return _nextToken2();
     }
\ No newline at end of file
