diff --git a/tmp/7765242d-c9e2-4759-9d6a-f76511637d22_buggy.java b/tmp/dc473943-28bd-44b3-b71e-e9f97e458541_fixed.java
index 7c0ebae..719d0d5 100644
--- a/tmp/7765242d-c9e2-4759-9d6a-f76511637d22_buggy.java
+++ b/tmp/dc473943-28bd-44b3-b71e-e9f97e458541_fixed.java
@@ -1,229 +1,271 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
 
-        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
-        // check for no buffered context _exposedContext - null
-        // If all the conditions matches then check for scalar / non-scalar property
+        // [JACKSON-CORE-330]: Check if we need to stop because single match found and path completed.
+        // This occurs when:
+        // 1. We are not allowing multiple matches.
+        // 2. We have already returned at least one token (_currToken != null).
+        // 3. We are not currently draining buffered context (_exposedContext == null).
+        // 4. The filter context state (_headContext) indicates we are back at the root level (depth 0).
+        // 5. The root level context itself was not "handled" (meaning its START token wasn't returned,
+        //    which implies the match occurred deeper within the structure or was a root scalar).
+        // 6. The last token returned (_currToken) was a scalar value or a structure end, signifying the
+        //    completion of the matched value or the structure containing it.
         if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
-                if (_currToken.isStructEnd()) {
-                    if (_headContext.isStartHandled()) {
-                        return (_currToken = null);
-                    }
-                } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
-                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+            if (_headContext.getNestingDepth() == 0 && !_headContext.isStartHandled()) {
+                if (_currToken.isScalarValue() || _currToken.isStructEnd()) {
+                    // The single match (including its path if _includePath was true) has been fully returned.
+                    // Subsequent calls should return null.
                     return (_currToken = null);
                 }
+                // If the last token was START_OBJECT/ARRAY or FIELD_NAME, we are still descending into/processing
+                // the matched path, so we don't stop yet.
             }
         }
+        
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
+                    // Keep this block commented as in the provided snippet, potential complexities.
+                    /*
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
                         //if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
                     */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // filter indicates skip
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // filter indicates skip
                 delegate.skipChildren();
                 break;
             }
+            // Got filter, determine if Structure itself included
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
-            _itemFilter = f;
+            _itemFilter = f; // filter for items
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
+                // _matchCount++; // Note: _matchCount logic might be needed if getMatchCount() is used.
                 return (_currToken = t);
             }
+            // Still need to create context, but possibly skip elements
             _headContext = _headContext.createChildArrayContext(f, false);
             
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
+            // If not included, fall through to filtering of elements via _nextToken2
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
                 return (_currToken = t);
             }
-            if (f == null) { // does this occur?
+            if (f == null) { // filter indicates skip
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
-            if (f == null) {
+            if (f == null) { // filter indicates skip
                 delegate.skipChildren();
                 break;
             }
+            // Got filter, determine if Structure itself included
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
-            _itemFilter = f;
+            _itemFilter = f; // filter for properties
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                // _matchCount++;
                 return (_currToken = t);
             }
+            // Still need to create context, but possibly skip elements
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
+            // If not included, fall through to filtering of elements via _nextToken2
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+                    // Call the correct filter finish method based on context type
+                     if (_headContext.inArray()) {
                          f.filterFinishArray();
+                     } else {
+                         f.filterFinishObject();
+                     }
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
+            // If !returnEnd, token is NOT returned, need to fetch next one via _nextToken2
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                    // _matchCount++;
+                     // Handle path inclusion / immediate parent check
+                     if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {
+                         if (!_headContext.isStartHandled()) {
                              t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                              _exposedContext = _headContext;
+                              _currToken = t;
+                             return t;
                       }
                      }
                     return (_currToken = t);
                 }
-                if (f == null) {
+                if (f == null) { // filter indicates skip
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
+                // filter indicates possible inclusion
                 f = f.includeProperty(name);
-                if (f == null) {
+                if (f == null) { // but property filter said skip
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
-                _itemFilter = f;
+                 _itemFilter = f; // filter for value
                  if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
+                     // _matchCount++;
+                     // Handle path inclusion / immediate parent check
+                     if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {
+                          if (!_headContext.isStartHandled()) {
+                              t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                             _exposedContext = _headContext;
+                              _currToken = t;
+                              return t;
+                         }
+                     }
                      return (_currToken = t);
                  }
-                }
+                // Ok: property included, but not INCLUDE_ALL. Need context for path/buffering?
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
+                // Otherwise filtered, need to fetch next token via _nextToken2
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
+                // _matchCount++;
+                 // Handle path inclusion / immediate parent check
+                 if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {
+                     if (!_headContext.isStartHandled()) {
+                         t = _headContext.nextTokenToRead(); // returns START_OBJECT/ARRAY but also marks it handled
+                         _exposedContext = _headContext;
+                         _currToken = t;
+                         return t;
+                     }
+                 }
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
+                     // Handle path inclusion / immediate parent check
+                     if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {
+                          if (!_headContext.isStartHandled()) {
+                             t = _headContext.nextTokenToRead(); // returns START_OBJECT/ARRAY but also marks it handled
+                             _exposedContext = _headContext;
+                             _currToken = t;
+                             return t;
+                         }
+                     }
+                     // if (f == TokenFilter.INCLUDE_ALL) { _matchCount++; } // Count match if needed
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
+            // Fall through to fetch next token via _nextToken2
             break;
         }
 
-        // We get here if token was not yet found; offlined handling
+        // We get here if token was not yet found (filtered out); need to call recursively
         return _nextToken2();
     }
\ No newline at end of file
