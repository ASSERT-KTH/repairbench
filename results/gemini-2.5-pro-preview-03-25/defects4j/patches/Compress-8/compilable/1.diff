diff --git a/tmp/d911d443-f5e1-4622-b4f3-548d4489235d_buggy.java b/tmp/3deae5e1-85fe-49e2-8da2-8afff3af1139_fixed.java
index e087f95..17895fe 100644
--- a/tmp/d911d443-f5e1-4622-b4f3-548d4489235d_buggy.java
+++ b/tmp/3deae5e1-85fe-49e2-8da2-8afff3af1139_fixed.java
@@ -1,53 +1,113 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected,
+     *         or if the buffer length is less than 2 bytes, or if the buffer contains invalid characters.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // 1. Minimum Length Check
+        if (length < 2) {
+            // Javadoc explicitly states length must be at least 2.
+            throw new IllegalArgumentException("Length must be at least 2");
+        }
+
         long    result = 0;
-        boolean stillPadding = true;
         int     end = offset + length;
-        int     start = offset;
+        int     pos = offset;
+        boolean stillPadding = true; // For leading spaces and '0's
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        // Check for "all NULs" special case FIRST
+        // Handles javadoc rule and cases like [0, 0, ' '] which should fail vs [0, 0, 0] which should return 0.
+        boolean allNuls = true;
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNuls = false;
                 break;
             }
+        }
+        if (allNuls) {
+            return 0L;
+        }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        while (pos < end && buffer[pos] == ' ') {
+            pos++;
+        }
+
+        // If after skipping spaces we are at the end, or if the first non-space
+        // character is NUL (and it's not the "all NULs" case), then it's invalid.
+        if (pos == end) {
+             // Only spaces found, no digits or terminator
+             // This violates the requirement of digits followed by NUL/space.
+             throw new IllegalArgumentException("Cannot parse value from buffer containing only spaces");
+        }
+        // Check for NUL immediately after spaces (and not the all-NUL case which returns 0)
+        // This logic is derived from the failing test cases [0,0,' '] and [' ',0,0,0]
+        // which expect an exception, implying NUL is only a terminator or part of the all-NUL case.
+        if (buffer[pos] == 0) {
+             throw new IllegalArgumentException("Cannot parse value from buffer starting with NUL byte unless all bytes are NUL");
+        }
+
+
+        // Main loop: process digits until terminator or end
+        for (; pos < end; pos++){
+            final byte currentByte = buffer[pos];
+
+            // NUL or Space signifies the end of the octal number
+            if (currentByte == 0 || currentByte == ' ') {
+                // Verify that the rest of the buffer contains only NUL or space
+                // This catches invalid embedded terminators like " 0 07 " or " 0\00007 ".
+                for(int i = pos + 1; i < end; i++) {
+                    if (buffer[i] != 0 && buffer[i] != ' ') {
+                         // Found an invalid character after the first terminator.
+                         throw new IllegalArgumentException(
+                                 "Invalid byte " + buffer[i] + " at offset " + i
+                                 + " found after NUL/space terminator at offset " + pos);
+                    }
+                }
+                // If we reached here, the termination is valid.
+                return result;
+            }
+
+            // If we are here, currentByte is not NUL and not space. It must be part of the octal number.
+
+            // Handle padding state ('0's before significant digits '1'-'7')
             if (stillPadding) {
+                if (currentByte == '0') {
+                    // Allow leading zeros, stay in padding mode.
                     continue;
                 }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+                // First non-'0' (and non-space) byte encountered. End padding mode.
                 stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+                // Fall through to process this first significant digit.
+            }
+
+            // Check if character is a valid octal digit ('0'-'7')
             if (currentByte < '0' || currentByte > '7'){
+                // Found an invalid character (not 0-7, not space, not NUL) where a digit was expected.
                  throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                         "Invalid byte " + currentByte + " at offset " + pos);
             }
+
+            // Process the octal digit
+            // CheckStyle:MagicNumber OFF already present in original code
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
-        }
+            // CheckStyle:MagicNumber ON already present in original code
+
+        } // End of loop
 
-        return result;
+        // If loop finishes without returning, it means we hit the 'end'
+        // without a NUL or space terminator following the last digit(s). This is an error.
+        throw new IllegalArgumentException("Missing mandatory trailing NUL or space character.");
     }
\ No newline at end of file
