diff --git a/tmp/0ea20610-e14c-41be-837f-2cb909bed430_buggy.java b/tmp/314a6bce-3638-4658-90a0-6ad4339cfe83_fixed.java
index e087f95..bd9e4aa 100644
--- a/tmp/0ea20610-e14c-41be-837f-2cb909bed430_buggy.java
+++ b/tmp/314a6bce-3638-4658-90a0-6ad4339cfe83_fixed.java
@@ -1,53 +1,119 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes: " + length);
+        }
+
         long result = 0;
-        boolean stillPadding = true;
         int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        // Check for special case: all NULs within the defined segment
+        // Assumes the segment defined by offset and length contains only NUL bytes.
+        boolean allNuls = true;
+        for (int i = offset; i < end; i++) {
+            // Check bounds to avoid ArrayIndexOutOfBoundsException if offset/length are invalid
+            // This check is slightly redundant if buffer access below is correct, but adds safety.
+            if (i >= buffer.length || buffer[i] != 0) {
+                allNuls = false;
                 break;
             }
+        }
+        if (allNuls) {
+            return 0L;
+        }
+
+        int current = offset;
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+        while (current < end && buffer[current] == ' ') {
+            current++;
         }
-                if (currentByte == (byte) ' ') {
+
+        // Find the end of the octal digits, which must be terminated by NUL or space.
+        int digitEnd = -1;
+        // firstDigitIndex tracks where the actual digits (or first terminator) start after leading spaces.
+        int firstDigitIndex = current;
+
+        for (int i = firstDigitIndex; i < end; i++) {
+            final byte currentByte = buffer[i];
+            if (currentByte == 0 || currentByte == ' ') {
+                digitEnd = i; // Found the first terminator
                 break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            // Check if it's a valid octal digit '0'-'7'
             if (currentByte < '0' || currentByte > '7') {
+                 // Assuming exceptionMessage helper exists in the actual class context
+                 // If not, a simple message can be constructed here.
                  throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+        }
+
+        // Check if a terminator (NUL or space) was found before the end boundary.
+        if (digitEnd == -1) {
+             // No terminator found within the loop up to 'end'.
+             // Example: "123"
+             throw new IllegalArgumentException("Parse octal error: Segment does not end with NUL or space");
+        }
+
+        // Check for potentially one additional NUL/space trailer AFTER the first one found at digitEnd.
+        int trailerEnd = digitEnd + 1; // Points to the character position after the first terminator
+        if (trailerEnd < end && (buffer[trailerEnd] == ' ' || buffer[trailerEnd] == 0)) {
+            trailerEnd++; // Consume the second terminator, trailerEnd now points past it
+        }
+
+        // After consuming the first terminator (at digitEnd) and optionally a second one,
+        // trailerEnd points to the first character position *after* the valid terminators.
+        // Ensure that this position is exactly at the end of the specified segment length.
+        if (trailerEnd < end) {
+             // There are unexpected non-NUL/non-space characters after the terminator(s).
+             // Example: "123 \0a"
+             throw new IllegalArgumentException(
+                        "Parse octal error: Unexpected characters after end marker at offset " + trailerEnd);
+        }
+
+        // Handle edge case where only padding (spaces) was found before the terminator(s)
+        if (firstDigitIndex == digitEnd) {
+             // Example: "  \0" or " \0 ". No actual digits were present.
+             return 0L;
+        }
+
+        // Parse the actual octal digits found between firstDigitIndex and digitEnd
+        for (int i = firstDigitIndex; i < digitEnd; i++) {
+             final byte currentByte = buffer[i];
+             // CheckStyle:MagicNumber OFF
+             result = (result << 3) + (currentByte - '0'); // Convert from ASCII
              // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Assume this helper exists outside the function provided:
+    // If not present, the exception throwing line inside the loop needs adjustment.
+    private static String exceptionMessage(byte[] buffer, final int offset, final int length, int idx, final byte currentByte){
+        // This is a placeholder assuming the original class has this helper.
+        // A simple implementation could be:
+        String s;
+        try {
+            s = new String(buffer, offset, length, "ISO-8859-1");
+        } catch (java.io.UnsupportedEncodingException e) {
+            s = e.getMessage(); // Should not happen
+        }
+         return "Invalid byte " + (currentByte & 0xFF) + " at offset " + idx + " in '" + s + "' len " + length;
+     }
\ No newline at end of file
