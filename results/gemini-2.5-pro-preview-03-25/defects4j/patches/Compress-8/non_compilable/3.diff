diff --git a/tmp/e5adb7e9-1580-4a23-8b88-39a79d16997f_buggy.java b/tmp/5b3373ce-54a9-48ef-9e19-f6a68125157d_fixed.java
index e087f95..350ea31 100644
--- a/tmp/e5adb7e9-1580-4a23-8b88-39a79d16997f_buggy.java
+++ b/tmp/5b3373ce-54a9-48ef-9e19-f6a68125157d_fixed.java
@@ -1,53 +1,120 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // Check length requirement
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes");
+        }
+
         long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
         int     start = offset;
+        int     end = offset + length;
+        int     pos = start;
 
+        // Handle "all NULs" case separately.
+        // This avoids conflicts with NUL behavior during parsing if not all NULs.
+        boolean allNuls = true;
         for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+            if (buffer[i] != 0) {
+                allNuls = false;
                 break;
             }
+        }
+        if (allNuls) {
+            return 0L;
+        }
+
+        // If not all NULs, then NUL bytes are restricted.
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+        while (pos < end && buffer[pos] == (byte) ' ') {
+            pos++;
         }
+
+        // Process digits until SPACE or END.
+        // NUL is only allowed as the final character.
+        int     terminatorPos = -1; // Position of a valid terminator (space or final NUL)
+        boolean nulTerminated = false; // Flag if termination was by NUL at the end
+
+        while (pos < end) {
+            final byte currentByte = buffer[pos];
+
+            // Check for space terminator
             if (currentByte == (byte) ' ') {
+                terminatorPos = pos;
                 break;
             }
+
+            // Check for NUL terminator (only valid if it's the last byte)
+            if (currentByte == 0) {
+                 if (pos == end - 1) { // Allow NUL only as the final char
+                     nulTerminated = true;
+                     terminatorPos = pos; // Mark NUL position
+                     break;
+                 }
+                 // NUL encountered before the allowed end position is invalid if not all NULs
+                 throw new IllegalArgumentException(
+                     exceptionMessage(buffer, offset, length, pos, currentByte)
+                     + " (NUL byte encountered before end of region)");
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+            // Check for non-octal digit
+            if (currentByte < (byte) '0' || currentByte > (byte) '7') {
+                throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, pos, currentByte));
+            }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+            // Accumulate octal value
+            result = (result << 3) + (currentByte - (byte) '0'); // convert from ASCII
+            pos++;
+        }
+
+
+        // Validation after the loop
+
+        // Case 1: Loop finished by finding space terminator
+        if (terminatorPos != -1 && !nulTerminated) {
+             // Check remaining chars after the space must be space or NUL
+             for (int i = terminatorPos + 1; i < end; i++) {
+                 final byte trailByte = buffer[i];
+                 if (trailByte != (byte) ' ' && trailByte != 0) {
                       throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                         exceptionMessage(buffer, offset, length, i, trailByte)
+                         + " (found after space terminator)");
+                 }
+             }
+        }
+        // Case 2: Loop finished by finding NUL at the very end
+        else if (nulTerminated) {
+            // This is valid termination by NUL. 'pos' should be end - 1.
+            // No characters should follow the final NUL within the length.
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        // Case 3: Loop finished because pos == end (no NUL or space found)
+        else if (terminatorPos == -1) { // Ensure no terminator was marked
+             // This means the segment ended with an octal digit, not a required terminator.
+              throw new IllegalArgumentException("Parse error: Octal segment doesn't end with null byte or space");
         }
+         // Other cases (e.g., invalid char) would have thrown inside the loop.
 
         return result;
     }
+
+    // Assume this helper method exists elsewhere in the class or is accessible.
+    // It's needed for the exception messages in the fixed code.
+    private static String exceptionMessage(byte[] buffer, final int offset, final int length, int idx, final byte b) {
+        return "Invalid byte " + (b & 0xFF) + " at offset " + (idx - offset) + " in '{"+ new String(buffer, offset, length) +"}' len " + length;
+    }
\ No newline at end of file
