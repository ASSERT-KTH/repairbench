diff --git a/tmp/7ae0f978-a9f5-4970-a69a-59a87d7f8805_buggy.java b/tmp/3dc56688-27c8-43c0-8389-b79a8d5c56d3_fixed.java
index e087f95..7f45118 100644
--- a/tmp/7ae0f978-a9f5-4970-a69a-59a87d7f8805_buggy.java
+++ b/tmp/3dc56688-27c8-43c0-8389-b79a8d5c56d3_fixed.java
@@ -1,53 +1,116 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // 1. Length check (as per Javadoc and test failure)
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes");
+        }
+
         long    result = 0;
-        boolean stillPadding = true;
         int     end = offset + length;
-        int     start = offset;
+        int     pos = offset;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        // 2. Handle All-NULs case first (as documented)
+        boolean allNuls = true;
+        for (int i = offset; i < end; i++) {
+            // Basic bounds check although offset/length validity is usually assumed by caller
+            if (i >= buffer.length) {
+                 throw new IllegalArgumentException("Attempt to parse octal outside buffer boundaries");
+            }
+            if (buffer[i] != 0) {
+                allNuls = false;
                 break;
             }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
+        if (allNuls) {
+            return 0L;
         }
+
+        // 3. Skip leading spaces
+        while (pos < end && buffer[pos] == ' ') {
+            pos++;
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        // 4. Check for early NUL termination if buffer is not all NULs
+        // This handles cases like "\0abc", " \0abc", "[0,0,' ']", "[' ',0,0,0]" which are invalid
+        // according to the tests implicitly requiring digits if not all NULs.
+        if (pos < end && buffer[pos] == 0) {
+             throw new IllegalArgumentException(
+                     "Invalid octal entry: Starts with NUL but is not an all-NUL entry. Offset " + offset + ", length " + length);
+        }
+
+        // 5. Parse octal digits until the first space or NUL
+        int startOfDigits = pos; // Remember where digits started (or should have)
+        while (pos < end) {
+            final byte currentByte = buffer[pos];
+
+            // NUL or space terminates the octal number
+            if (currentByte == 0 || currentByte == ' ') {
+                break;
+            }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            // Check for invalid characters (must be 0-7)
             if (currentByte < '0' || currentByte > '7') {
                  throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, pos, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            result = (result << 3) + (currentByte - '0');
+            pos++;
         }
 
+        // 6. Post-parsing validation
+
+        // Check if we hit the end without finding a terminator
+        if (pos == end) {
+            throw new IllegalArgumentException("Parse octal requires a trailing NUL or space character. Offset " + offset + ", length " + length);
+        }
+        
+        // Check the character at termination position is indeed NUL or space (should be true by loop logic)
+        if (buffer[pos] != 0 && buffer[pos] != ' ') {
+             // This indicates a logic error in the parsing loop itself
+             throw new IllegalStateException("Internal parse error: terminator mismatch. Offset " + offset + ", length " + length);
+        }
+
+
+        // Check that all characters *after* the first terminator (space or NUL)
+        // up to the specified length are also either space or NUL.
+        for (int i = pos + 1; i < end; i++) {
+            if (buffer[i] != ' ' && buffer[i] != 0) {
+                throw new IllegalArgumentException(
+                   "Invalid byte " + buffer[i] + " after NUL/space terminator at offset " + (pos - offset) +
+                    " in '" + new String(buffer, offset, length) + "'"); // Using default charset for error message
+            }
+        }
+
+        // If we skipped spaces and immediately found a terminator (e.g., "  \0"),
+        // or if the input was just a terminator ("\0" or " "), result is 0, which is correct.
+        // The case where pos == startOfDigits means no digits were parsed.
+
         return result;
     }
+
+    /** Helper method to generate exception message */
+    private static String exceptionMessage(byte[] buffer, final int offset, final int length, int idx, byte currentByte) {
+         // Use String constructor that takes range and default charset (sufficient for error message)
+         final String s = new String(buffer, offset, length);
+         final StringBuilder msg = new StringBuilder();
+         msg.append("Invalid byte ").append(currentByte).append(" (").append((char)currentByte).append(") ");
+         msg.append("at relative offset ").append(idx - offset); // offset relative to start of parsed slice
+         msg.append(" in '").append(s).append("'. Offset ").append(offset).append(", length ").append(length).append(".");
+         return msg.toString();
+    }
\ No newline at end of file
