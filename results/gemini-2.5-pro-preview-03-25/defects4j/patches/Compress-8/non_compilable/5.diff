diff --git a/tmp/e0e7cf86-0c5d-4d7d-afa5-d615194b8c15_buggy.java b/tmp/4117aa57-dea9-479d-a16e-2366a4adac81_fixed.java
index e087f95..c8fcecf 100644
--- a/tmp/e0e7cf86-0c5d-4d7d-afa5-d615194b8c15_buggy.java
+++ b/tmp/4117aa57-dea9-479d-a16e-2366a4adac81_fixed.java
@@ -1,53 +1,127 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // 1. Check minimum length
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes: " + length);
+        }
+
         long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
+        int     i = offset;
+        final int end = offset + length;
+        boolean trailerFound = false;
+        int     trailerPos = -1; // Position where the trailer NUL/space was found
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+        while (i < end && buffer[i] == ' ') {
+            i++;
+        }
+
+        // Remember where potential digits should start (after spaces)
+        int startOfDigits = i; 
+
+        // Handle case where only spaces were found up to the end (violates trailer requirement)
+        // Or if the first non-space character is NUL (effectively zero, but needs validation)
+        if (i == end) {
+             // We consumed only spaces. A trailer (NUL or space) is required.
+             // Since we reached 'end', the only possible valid trailer is if buffer[end-1] is NUL/space.
+             // But the loop structure below handles missing trailers better. Let's remove this specific check.
+             // If we only had spaces, the main loop won't run, trailerFound remains false -> exception.
+        } else if (buffer[i] == 0) {
+            // First non-space char is NUL. Treat as zero value, but validate the rest.
+            trailerFound = true; // NUL acts as the trailer
+            trailerPos = i;
+            // Check remaining bytes must be NUL or space
+            for (int j = trailerPos + 1; j < end; j++) {
+                if (buffer[j] != 0 && buffer[j] != ' ') {
+                    throw new IllegalArgumentException(
+                        "Expected NUL or space after initial NUL, but found '" + (char)buffer[j] + "' ("+buffer[j]+") at index " + j);
                 }
-                if (currentByte == (byte) ' ') {
-                break;
             }
+            return 0L; // Valid sequence like " \0" or " \0\0" or " \0 "
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // Start parsing digits - i is already positioned after leading spaces and non-NUL check
+        while (i < end) {
+            final byte currentByte = buffer[i];
+
+            if (currentByte == 0 || currentByte == ' ') {
+                // Found potential trailer NUL or space
+                trailerFound = true;
+                trailerPos = i;
+                break; // Exit parsing loop
+            }
+
+            // Check for invalid characters (anything not '0'-'7')
             if (currentByte < '0' || currentByte > '7') {
                  throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                         exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            // Valid octal digit found, accumulate result
+            result = (result << 3) + (currentByte - '0');
+            i++;
+        }
+
+        // Post-loop validation
+
+        // If no trailer was found before reaching the end
+        if (!trailerFound) {
+            // Examples: "123", "   ", [' ', 0, 0, 0] (for length 4)
+            throw new IllegalArgumentException("Missing required NUL or space terminator in octal value.");
+        }
+
+        // If a trailer WAS found at trailerPos...
+        // Ensure that all characters AFTER the trailer character are also NUL or space.
+        for (int j = trailerPos + 1; j < end; j++) {
+            if (buffer[j] != 0 && buffer[j] != ' ') {
+                // This catches errors like "123X ", " 0 07 ", " 0\00007 "
+                throw new IllegalArgumentException(
+                    "Expected NUL or space after octal value, but found '" + (char)buffer[j] + "' ("+buffer[j]+") at index " + j);
+            }
+        }
+
+        // If we skipped spaces and immediately hit the trailer (startOfDigits == trailerPos)
+        // This implies an empty string "" followed by a trailer, e.g. "  \0" or "   " (if terminated)
+        // This represents zero.
+        if (startOfDigits == trailerPos && result == 0) {
+             // This check isn't strictly necessary as result is already 0
+             // but confirms the intent for empty value after spaces.
+             return 0L;
         }
 
+        // Otherwise, digits were parsed, return the result.
         return result;
     }
+
+    // Helper function to generate exception messages (implementation assumed available)
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+       // A simple message matching the typical format might suffice.
+       // The original used TarUtils.parseName which might not be available here.
+       String excerpt;
+       try {
+           // Try to get a readable excerpt around the error
+           int excerptStart = Math.max(offset, idx - 10);
+           int excerptEnd = Math.min(offset + length, idx + 10);
+            // Replace NULs for clearer display if needed
+           excerpt = new String(buffer, excerptStart, excerptEnd - excerptStart, "UTF-8").replace('\0', '*');
+       } catch (Exception e) {
+           excerpt = "(cannot decode excerpt)";
+       }
+        return "Invalid byte " + currentByte + " at offset " + idx + " in specified range ["+offset+", "+(offset+length)+"). Octal value expected, buffer excerpt near invalid byte: ..." + excerpt + "...";
+    }
\ No newline at end of file
