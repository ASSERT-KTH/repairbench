diff --git a/tmp/cfc0ae27-cee3-4cab-8e9c-56f47e9677ec_buggy.java b/tmp/a8c6477c-a62a-47e7-adfd-50310d7def38_fixed.java
index e087f95..6fdaf79 100644
--- a/tmp/cfc0ae27-cee3-4cab-8e9c-56f47e9677ec_buggy.java
+++ b/tmp/a8c6477c-a62a-47e7-adfd-50310d7def38_fixed.java
@@ -1,53 +1,101 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
+        boolean stillPadding = true; // True if only leading spaces have been seen
+        final int end = offset + length;
+        int parseEnd = -1; // Index of the trailer character (NUL or space) found, -1 if not found
 
-        for (int i = start; i < end; i++){
+        // 1. Check minimum length requirement
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " must be at least 2");
+        }
+
+        for (int i = offset; i < end; i++){
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            // Handle terminators NUL or Space
+            if (currentByte == 0 || currentByte == ' ') {
                 if (stillPadding) {
+                    // If we are still in padding mode (only spaces seen so far),
+                    // only spaces should be skipped. A NUL encountered here
+                    // signifies the end of the segment, and the value is zero.
+                    if (currentByte == ' ') {
+                        // Skip leading space
                         continue;
                     }
-                if (currentByte == (byte) ' ') {
-                break;
+                    // If NUL is encountered during padding phase (first non-space is NUL)
+                    parseEnd = i;
+                    break; // Found terminator, result is 0
                 }
+                // If we are not in padding mode (digits have been seen),
+                // NUL or Space are valid terminators.
+                parseEnd = i;
+                break; // Found terminator
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+            // If it's not a terminator (NUL or space), it must be an octal digit.
+            // Check for invalid characters (non-octal digits) before processing.
+            if (currentByte < '0' || currentByte > '7'){
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, currentByte));
+            }
 
+            // We've found a valid octal digit, so we are no longer in the padding phase.
             stillPadding = false;
+
+            // Accumulate the octal value. Note: Overflow is not checked.
             // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            result = (result << 3) + (currentByte - '0'); // convert character to numeric value
             // CheckStyle:MagicNumber ON
         }
 
+        // 2. Check if a valid terminator (NUL or space) was found within the specified length.
+        if (parseEnd == -1) {
+            // Loop finished without hitting NUL or space. This means the buffer segment
+            // ended with an octal digit or consisted only of spaces. Both are invalid.
+            throw new IllegalArgumentException("Trailing byte not NUL or space found in buffer");
+        }
+
+        // 3. Check for invalid characters after the first terminator.
+        // The specification allows for "an additional trailing space or NUL".
+        // This means all bytes from parseEnd + 1 up to the end must be space or NUL.
+        for (int i = parseEnd + 1; i < end; i++) {
+            if (buffer[i] != ' ' && buffer[i] != 0) {
+                 // Found an invalid character after the main terminator.
+                throw new IllegalArgumentException(
+                       exceptionMessage(buffer, offset, length, i, buffer[i]));
+            }
+        }
+
         return result;
     }
+
+    // Helper method assumed to exist from the original code context to generate exception messages.
+    // It's not part of the fix itself but needed for the thrown exceptions.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {
+         // This replicates the likely function of the original helper for context.
+         String S;
+         try {
+             S = new String(buffer, offset, length, "UTF-8"); // Be cautious with encoding assumptions
+         } catch (Exception e) {
+             S = new String(buffer, offset, length); // Fallback
+         }
+         // Clamp offset for safety in message
+         int displayOffset = Math.max(0, Math.min(currentOffset - offset, length -1));
+         return "Invalid byte " + currentByte + " at offset " + displayOffset + " in '" + S + "'";
+    }
\ No newline at end of file
