diff --git a/tmp/dfc27ed7-4655-422c-aea9-d3a1d6158b1b_buggy.java b/tmp/393de327-16f0-4a71-936f-a19b71d16db5_fixed.java
index e087f95..f11cb31 100644
--- a/tmp/dfc27ed7-4655-422c-aea9-d3a1d6158b1b_buggy.java
+++ b/tmp/393de327-16f0-4a71-936f-a19b71d16db5_fixed.java
@@ -1,53 +1,121 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected,
+     *         or if NUL bytes are improperly used.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
-        boolean stillPadding = true;
         int end = offset + length;
-        int     start = offset;
+        int numberEnd = -1; // Index of the terminator NUL/space
+        boolean parsingDigits = false; // Started parsing digits '0'-'7'
 
-        for (int i = start; i < end; i++){
+        // 1. Basic validation
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes.");
+        }
+
+        // 2. Check for all NULs special case.
+        // Based on tests, this seems to mean the buffer slice *only* contains NULs.
+        boolean allNulsStrict = true;
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNulsStrict = false;
+                break;
+            }
+        }
+        if (allNulsStrict) {
+            return 0L; // Javadoc: "input buffer is allowed to contain all NULs... returns 0L"
+        }
+
+        // 3. Main parsing loop
+        for (int i = offset; i < end; i++) {
             final byte currentByte = buffer[i];
+
             if (currentByte == 0) {
+                numberEnd = i; // NUL terminates parsing
                 break;
             }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            if (currentByte == ' ') {
+                if (parsingDigits) {
+                    numberEnd = i; // Space terminates after digits
+                    break;
+                }
+                // Still in leading space padding - continue
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            // Check for invalid characters (anything not 0-7, space, NUL)
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+
+            // It's a digit '0'-'7'
+            parsingDigits = true;
+            // CheckStyle:MagicNumber OFF
+            result = (result << 3) + (currentByte - '0'); // accumulate octal value
             // CheckStyle:MagicNumber ON
         }
 
+        // 4. Post-loop validation
+
+        // Case 1: Loop finished without break (numberEnd == -1)
+        if (numberEnd == -1) {
+            // Reached end. Must have trailing NUL or space.
+            // If we were parsing digits, the last char buffer[end-1] must have been a digit -> Error.
+            // If we only saw spaces, the last char buffer[end-1] must have been a space -> OK.
+            if (!parsingDigits) { // Only leading spaces encountered up to end?
+                 // This implies the buffer was like "   ". We need buffer[end-1] == ' '.
+                 if (end > offset && buffer[end - 1] == ' ') {
+                     return 0L; // All spaces, ending in space is valid.
+                 }
+                 // Otherwise fall through to throw exception
+            }
+            // If parsingDigits was true, or if !parsingDigits but last char wasn't space.
+            throw new IllegalArgumentException("Missing required trailing NUL or space character in octal value.");
+
+        } else {
+            // Case 2: Loop broke at numberEnd (found NUL or space terminator)
+            // Check bytes AFTER numberEnd up to end for validity.
+            final byte terminator = buffer[numberEnd];
+
+            for (int i = numberEnd + 1; i < end; i++) {
+                final byte followByte = buffer[i];
+                // Apply strict rules derived from tests: after NUL only NUL, after space only NUL or space.
+                if (terminator == 0) { // Terminator NUL requires following NULs
+                    if (followByte != 0) {
+                        throw new IllegalArgumentException(
+                                "Expected only NUL bytes after NUL terminator at index " + numberEnd + ", found byte " + followByte + " at index " + i);
+                    }
+                } else { // Terminator space requires following NUL or space
+                    if (followByte != 0 && followByte != ' ') {
+                        throw new IllegalArgumentException(
+                                "Expected only NUL or space bytes after space terminator at index " + numberEnd + ", found byte " + followByte + " at index " + i);
+                    }
+                }
+            }
+        }
+
+        // If all validation passed
         return result;
     }
+
+    // Helper method to format exception messages (assuming it exists or is added elsewhere)
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+         // In a real scenario, reuse TarUtils.parseName or format appropriately
+         String contentPreview = TarUtils.parseName(buffer, offset, length); // May truncate at NUL
+         return "Invalid byte " + currentByte + " at offset " + idx + " in '" + contentPreview + "' len=" + length;
+    }
\ No newline at end of file
