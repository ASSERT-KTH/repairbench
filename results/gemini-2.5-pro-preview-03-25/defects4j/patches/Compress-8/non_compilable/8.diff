diff --git a/tmp/8250c47a-a447-428f-a979-745838a001ce_buggy.java b/tmp/2cb4ad9c-59ce-42db-bc50-cfa499e0a14e_fixed.java
index e087f95..996b36b 100644
--- a/tmp/8250c47a-a447-428f-a979-745838a001ce_buggy.java
+++ b/tmp/2cb4ad9c-59ce-42db-bc50-cfa499e0a14e_fixed.java
@@ -1,53 +1,101 @@
+import java.util.Arrays; // If needed for exception message
+
+/**
+ * Helper method to create exception message (assuming definition is available/similar)
+ * Using a format inspired by the original code's likely helper.
+ */
+private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+    final StringBuilder sb = new StringBuilder();
+    sb.append("Invalid byte '").append((char) currentByte).append("' (").append(currentByte);
+    // The original exceptionMessage likely calculated offset relative to buffer start (idx)
+    // rather than relative to the slice start (idx - offset). Let's use idx.
+    sb.append(") at offset ").append(idx);
+    sb.append(" in '");
+    // Replace NULs for better readability in error messages, similar to original context display
+    // Use replaceAll("\u0000", "{NUL}") as used in the failing test description.
+    sb.append(new String(buffer, offset, length).replaceAll("\u0000", "{NUL}"));
+    sb.append("'.");
+    return sb.toString();
+}
+
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
     int     start = offset;
+    int     end = offset + length;
+    int     pos = start; // Current position
+    boolean stillPadding = true; // Are we processing leading space or zero?
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+    // 1. Length Check - Fix for the reported test failure
+    if (length < 2) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
+    int trailerPos = -1; // Position where the first NUL or space trailer was found
+
+    // Main parsing loop: find digits and first terminator
+    for (; pos < end; pos++) {
+        final byte currentByte = buffer[pos];
+
+        // Check for NUL or space - potential trailer
+        if (currentByte == 0 || currentByte == ' ') {
+            trailerPos = pos; // Found the first NUL/space
+            break; // End digit parsing phase.
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        // Skip leading zeros *after* spaces (if any)
+        if (currentByte == '0' && stillPadding) {
+            continue; // Still padding
+        }
 
+        // Encountered a non-space/NUL/leading-zero byte. No longer padding.
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for valid octal digit '0'-'7'
+        // Fix: Moved the check here to catch invalid chars after padding ends
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, pos, currentByte));
+        }
+
+        // Accumulate octal value
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // --- Post-loop validation ---
+
+    // If no NUL/space trailer was found before loop end
+    if (trailerPos == -1) {
+         // This implies the buffer ended with octal digits (e.g., "123") or only invalid chars.
+         // If the loop finished because pos == end, no terminator was found within length.
+         throw new IllegalArgumentException("Missing mandatory trailing NUL or space character.");
+    }
+
+    // Fix: Check characters from the first trailer position to the end.
+    // All characters in the trailer section must be NUL or space.
+    for (int k = trailerPos; k < end; k++) {
+        if (buffer[k] != 0 && buffer[k] != ' ') {
+            throw new IllegalArgumentException(
+                // Use the same exception message helper for consistency
+                exceptionMessage(buffer, offset, length, k, buffer[k]) +
+                " Character is supposed to be part of the NUL or space trailer.");
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
