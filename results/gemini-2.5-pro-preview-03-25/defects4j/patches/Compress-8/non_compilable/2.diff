diff --git a/tmp/b35bc2b5-a47f-44f0-aafd-e481376f7fa0_buggy.java b/tmp/d22a9a23-c784-431f-8e7d-b93f61ab1498_fixed.java
index e087f95..710d1de 100644
--- a/tmp/b35bc2b5-a47f-44f0-aafd-e481376f7fa0_buggy.java
+++ b/tmp/d22a9a23-c784-431f-8e7d-b93f61ab1498_fixed.java
@@ -1,53 +1,96 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // Check length requirement first
+        if (length < 2) {
+            // Using a message consistent with the failing test's expectation
+            throw new IllegalArgumentException("Length must be at least 2 bytes");
+        }
+
         long result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
         int start = offset;
+        int end = offset + length;
+        int pos = start;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        // Check for all NULs special case
+        boolean allNuls = true;
+        for (int i = pos; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNuls = false;
                 break;
             }
+        }
+        if (allNuls) {
+            return 0L;
+        }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+        while (pos < end && buffer[pos] == ' ') {
+            pos++;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // Find end of octal digits (first NUL or space) and validate digits
+        int digitEnd = pos;
+        while (digitEnd < end && buffer[digitEnd] != 0 && buffer[digitEnd] != ' ') {
+            final byte currentByte = buffer[digitEnd];
+            // Check for non-octal characters (including NUL)
             if (currentByte < '0' || currentByte > '7') {
+                 // Assuming exceptionMessage helper exists as in the original context
                  throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, digitEnd, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            digitEnd++;
+        }
+
+        // Check if a NUL or space trailer exists within the specified length
+        if (digitEnd == end) {
+            throw new IllegalArgumentException("Parse octal requires a trailing NUL or space");
+        }
+
+        // Check characters *after* the mandatory NUL/space trailer
+        // They must also be NUL or space according to Javadoc ("may contain an additional...")
+        for (int i = digitEnd + 1; i < end; i++) {
+            if (buffer[i] != 0 && buffer[i] != ' ') {
+                 // Assuming exceptionMessage helper exists as in the original context
+                 throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, buffer[i]));
+            }
+        }
+
+        // Parse the validated digits (between pos and digitEnd)
+        while (pos < digitEnd) {
+            final byte currentByte = buffer[pos];
+            // CheckStyle:MagicNumber OFF - Already validated as '0'-'7'
+            result = (result << 3) + (currentByte - '0');
             // CheckStyle:MagicNumber ON
+            pos++;
         }
 
         return result;
     }
+
+    // Assume this helper method exists elsewhere in the class as it was used by the original buggy code
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+        String T;
+        try {
+            T = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1); // Or UTF-8
+        } catch(Throwable e) { // NOSONAR
+             T="Could not decode byte array"; // fallback
+        }
+        T = T.replaceAll("\0", "{NUL}"); // Replace NULs to make string printable
+        return "Invalid byte "+currentByte+" at offset "+(idx-offset)+" in '"+T+"' len "+length;
+    }
\ No newline at end of file
