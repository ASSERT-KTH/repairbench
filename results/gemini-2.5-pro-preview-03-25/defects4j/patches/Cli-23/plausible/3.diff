diff --git a/tmp/d532434d-4eb1-41da-a272-714562f5f9ce_buggy.java b/tmp/ed4925a7-ac7c-497a-9770-b317eb98d2d5_fixed.java
index 227a4ef..17e0039 100644
--- a/tmp/d532434d-4eb1-41da-a272-714562f5f9ce_buggy.java
+++ b/tmp/ed4925a7-ac7c-497a-9770-b317eb98d2d5_fixed.java
@@ -1,48 +1,97 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        int start = 0;
+        final int length = text.length();
+
+        // Find the wrap pos for the first line (no padding)
+        int pos = findWrapPos(text, width, start);
 
         if (pos == -1)
         {
+            // Text fits on one line or is shorter than width
             sb.append(rtrim(text));
-
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Append the first line
+        sb.append(rtrim(text.substring(start, pos))).append(defaultNewLine);
+        // The next line should begin after the position returned by findWrapPos.
+        start = pos; 
+
+        // Padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        while (start < length)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Trim leading whitespace from the start of the remaining text.
+            // This mimics the original `text.substring(pos).trim()` behavior for subsequent lines.
+            while (start < length && text.charAt(start) == ' ') {
+                start++;
+            }
+            // If only whitespace was left
+            if (start >= length) {
+                break;
+            }
+
+            // Construct the potentially padded line for measurement
+            String lineToMeasure = padding + text.substring(start);
+
+            // Find the wrap position within this potentially padded line,
+            // searching from the beginning of this constructed line.
+            pos = findWrapPos(lineToMeasure, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
+                // The rest of the text fits on one line (with padding)
+                sb.append(rtrim(lineToMeasure));
+                start = length; // Consider all text processed
+                break;
+            }
+
+            // Calculate the number of actual text characters from the original string ('text')
+            // that are included up to the wrap position 'pos' in 'lineToMeasure'.
+            // This is the amount by which 'start' should advance in the original string.
+            int delta = pos - padding.length();
+
+            // If the calculated wrap position 'pos' is within the padding portion of 
+            // 'lineToMeasure', or if it implies that no characters from the original
+            // text 'text' would be consumed (delta <= 0). This can happen if:
+            // a) width <= nextLineTabStop (padding length)
+            // b) findWrapPos calculation results in a break within the padding
+            // In such cases, continuing the loop normally would likely lead to an
+            // infinite loop because 'start' would not advance.
+            if (delta <= 0)
+            {
+                 // To prevent an infinite loop, we stop wrapping and append the 
+                 // remainder of the original text (prefixed by the required padding)
+                 // onto a new line. This might result in a line longer than 'width', 
+                 // but it avoids the crash/loop.
+                 // Append the padded remaining text. Need rtrim() in case original text had trailing spaces.
+                 sb.append(padding).append(rtrim(text.substring(start))); 
+                 start = length; // Mark all text as processed
+                 break; // Exit the loop
+            }
+
+            // We have a valid wrap point 'pos' in 'lineToMeasure'.
+            // Append the wrapped part of the line (substring from lineToMeasure).
+            sb.append(rtrim(lineToMeasure.substring(0, pos))).append(defaultNewLine);
+
+            // Advance the start position in the original text by the number of 
+            // characters ('delta') that were consumed from it for this wrapped line.
+            start += delta;
+        }
 
         return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
     }
\ No newline at end of file
