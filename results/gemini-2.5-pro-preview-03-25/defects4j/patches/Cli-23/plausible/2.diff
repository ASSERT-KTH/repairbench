diff --git a/tmp/efeb150c-6119-4100-a31a-e3aab9f59e0d_buggy.java b/tmp/aa5d627b-0f57-4b51-8869-fdfaac26951b_fixed.java
index 227a4ef..250ea8f 100644
--- a/tmp/efeb150c-6119-4100-a31a-e3aab9f59e0d_buggy.java
+++ b/tmp/aa5d627b-0f57-4b51-8869-fdfaac26951b_fixed.java
@@ -1,48 +1,103 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        // Handle null or empty text
+        if (text == null || text.length() == 0) {
+            return sb;
+        }
 
-        if (pos == -1)
-        {
+        int start = 0;
+        final int textLength = text.length();
+
+        // First line calculation: find wrap position from the beginning
+        int wrapPos = findWrapPos(text, width, start);
+        if (wrapPos == -1) {
+            // Text fits entirely on one line or is shorter than width
             sb.append(rtrim(text));
-
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Append the first wrapped line segment
+        sb.append(rtrim(text.substring(start, wrapPos))).append(defaultNewLine);
+        // Update the starting position for the next potential line in the original text
+        start = wrapPos;
+
+        // Subsequent lines require padding and further wrapping
+        // Calculate padding string once, it will be reused
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
+        // Loop while there's remaining text to process
+        while (start < textLength) {
+            // Skip leading whitespace characters at the beginning of the next line segment
+            while (start < textLength && Character.isWhitespace(text.charAt(start))) {
+                start++;
+            }
+            // If we've reached the end of the text after skipping whitespace, stop
+            if (start >= textLength) {
+                break;
+            }
+
+            // Handle the edge case where the requested padding (nextLineTabStop)
+            // is greater than or equal to the total line width. In this scenario,
+            // meaningful wrapping with padding is impossible.
+            if (nextLineTabStop >= width) {
+                // Append the rest of the text (trimmed) directly without padding and stop processing.
+                sb.append(text.substring(start).trim()); 
+                // Break the loop as no further wrapping is possible/meaningful.
+                break;
+            }
+
+            // Construct the text for the current line: padding + remaining text from original
+            String lineSource = padding + text.substring(start);
+            // Find the wrap position for this padded line, searching from its beginning (index 0)
+            wrapPos = findWrapPos(lineSource, width, 0);
+
+            // Case 1: The rest of the padded line fits within the specified width
+            if (wrapPos == -1) {
+                sb.append(rtrim(lineSource)); // Append the entire remaining padded line
+                // Break the loop as we've processed the rest of the text.
+                break; 
+            }
+
+            // Case 2: The calculated wrap position falls within the padding area
+            // (or exactly at the end of the padding). This implies that no actual
+            // text characters from the original string would fit on this line after the padding.
+            if (wrapPos <= padding.length()) {
+                // Append the rest of the original text (trimmed) without padding and stop.
+                // This prevents potential infinite loops if no progress can be made.
+                sb.append(text.substring(start).trim());
+                // Break the loop.
+                break; 
+            }
+
+            // Case 3: Normal wrapping condition where the wrap position occurs after the padding.
+            // Calculate how many characters from the original text (starting at 'start') 
+            // were actually consumed for this line. This is the wrap position minus the padding length.
+            int consumedChars = wrapPos - padding.length();
+
+            // Extract the corresponding segment from the original text that fits on this line.
+            // The end index for substring is exclusive.
+            int endIndex = start + consumedChars; 
+            String consumedOriginalTextPart = text.substring(start, endIndex);
+
+            // Append the padded line segment for this wrapped line, followed by a newline.
+            sb.append(rtrim(padding + consumedOriginalTextPart)).append(defaultNewLine);
+
+            // Update the start position in the original text to point to the beginning 
+            // of the remaining text for the next iteration.
+            start = endIndex; 
+        }
 
         return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
     }
\ No newline at end of file
