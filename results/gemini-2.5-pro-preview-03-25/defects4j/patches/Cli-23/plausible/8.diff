diff --git a/tmp/3a50d4c0-09e0-40e5-ba34-8b61cf31542b_buggy.java b/tmp/69b6027e-5e99-4766-a8a0-c2758b802ba7_fixed.java
index 227a4ef..052f58f 100644
--- a/tmp/3a50d4c0-09e0-40e5-ba34-8b61cf31542b_buggy.java
+++ b/tmp/69b6027e-5e99-4766-a8a0-c2758b802ba7_fixed.java
@@ -1,48 +1,96 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        int currentPos = 0; // Position in the original text
+        final int textLength = text.length();
 
-        if (pos == -1)
+        // Handle first line (no padding)
+        int pos = findWrapPos(text, width, currentPos);
+
+        if (pos == -1) // Text fits on one line or is empty
         {
             sb.append(rtrim(text));
-
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        // Append the first line
+        sb.append(rtrim(text.substring(currentPos, pos))).append(defaultNewLine);
+        currentPos = pos; // Advance position in original text
+
+        // Prepare padding for subsequent lines
+        // Ensure padding is not longer than width, cause problems otherwise
+        final String padding = createPadding(Math.min(nextLineTabStop, width));
 
-        while (true)
+
+        while (currentPos < textLength) // Loop while there's text remaining
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+             // Skip leading whitespace in the remaining text before adding padding
+            while (currentPos < textLength && Character.isWhitespace(text.charAt(currentPos))) {
+                currentPos++;
+            }
+            // Check if we reached the end after skipping whitespace
+            if (currentPos >= textLength) {
+                break; // No more actual text
+            }
+
+            // Construct the text potentially wrapping for this line, including padding
+            String lineToWrap = padding + text.substring(currentPos);
 
-            if (pos == -1)
+            // Find wrap position in this padded line
+            pos = findWrapPos(lineToWrap, width, 0);
+
+            if (pos == -1) // Rest fits on the line
+            {
+                // Append the remaining text (padded)
+                sb.append(rtrim(lineToWrap));
+                currentPos = textLength; // Mark as finished
+                break; // Exit loop
+            }
+            else
             {
-                sb.append(text);
+                 // We need to break the line at 'pos' relative to 'lineToWrap'
+                 // Calculate how many characters from the *original* text segment were included before the break
+                 // This is the length of the content part: pos - padding.length()
+                 int originalCharsConsumed = pos - padding.length();
 
-                return sb;
-            } else
-            if (pos == lastPos)
+                 // Handle potential issue: If break ('pos') is within or before the padding,
+                 // or if no actual characters from the original text would be consumed.
+                 if (originalCharsConsumed <= 0)
                  {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                     // This can happen if the first word is too long and findWrapPos returns 'width',
+                     // but 'width' is less than or equal to padding.length().
+                     // Or if findWrapPos returns a position within the padding itself (which shouldn't happen after trim).
+
+                     // Try to force break at width, ensuring it's after padding and within bounds
+                     pos = Math.min(width, lineToWrap.length()); // Break at width or end of line
+                     originalCharsConsumed = pos - padding.length(); // Recalculate consumed chars
+
+                     // If still no progress possible (width <= padding or line ends within padding)
+                     if (originalCharsConsumed <= 0) {
+                          // Cannot make progress. Append the rest of the line and stop to avoid infinite loop.
+                          sb.append(rtrim(lineToWrap));
+                          currentPos = textLength;
+                          break;
                      }
+                 }
+
+                 // Append the wrapped line segment (from lineToWrap)
+                 sb.append(rtrim(lineToWrap.substring(0, pos))).append(defaultNewLine);
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+                 // Advance position in the original text by the number of non-padding chars consumed
+                 currentPos += originalCharsConsumed;
             }
         }
+        return sb;
+    }
\ No newline at end of file
