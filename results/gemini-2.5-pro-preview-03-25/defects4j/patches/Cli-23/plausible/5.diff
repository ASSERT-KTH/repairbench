diff --git a/tmp/3e34dcc1-efba-442c-a513-60ed8b25ef96_buggy.java b/tmp/acf4dfb0-72c1-43e9-bd8c-05dadf4a6acb_fixed.java
index 227a4ef..7f9c638 100644
--- a/tmp/3e34dcc1-efba-442c-a513-60ed8b25ef96_buggy.java
+++ b/tmp/acf4dfb0-72c1-43e9-bd8c-05dadf4a6acb_fixed.java
@@ -1,48 +1,87 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // all following lines must be padded with nextLineTabStop space characters
         final String padding = createPadding(nextLineTabStop);
+        String remainder = text.substring(pos).trim(); // The rest of the text
 
-        while (true)
+        // Loop whilst there is still text to be processed
+        while (remainder.length() > 0) 
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // The line we are trying to format
+            String currentLine = padding + remainder;
+            pos = findWrapPos(currentLine, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
+                // The rest fits on the line
+                sb.append(rtrim(currentLine));
+                remainder = ""; // Done
+            }
+            else
+            {
+                // Calculate the next remainder
+                String nextRemainder = currentLine.substring(pos).trim();
 
+                // Check for infinite loop scenario: if the remainder appears unchanged
+                // after wrapping attempt. This usually means the next wrap position
+                // calculated by findWrapPos is within the padding, typically because
+                // the first word of the remainder is longer than the available line
+                // width (width - padding.length()).
+                if (nextRemainder.equals(remainder))
+                {
+                    // Force break at the first space or newline within the remainder
+                    // to prevent the infinite loop, even if it overflows the line.
+                    int breakPosInRemainder = -1;
+                    int firstSpace = remainder.indexOf(' ');
+                    int firstNewLine = remainder.indexOf('\n');
+
+                    // Choose the earliest break point
+                    if (firstSpace != -1 && (firstNewLine == -1 || firstSpace < firstNewLine)) {
+                        breakPosInRemainder = firstSpace;
+                    } else {
+                        breakPosInRemainder = firstNewLine; // Might be -1 if neither exists
+                    }
+
+                    if (breakPosInRemainder != -1) {
+                         // Break at the first space/newline found in the remainder
+                         String textToAppend = padding + remainder.substring(0, breakPosInRemainder);
+                         sb.append(rtrim(textToAppend)).append(defaultNewLine);
+                         remainder = remainder.substring(breakPosInRemainder).trim();
+                    } else {
+                        // No space/newline found in remainder (single long word).
+                        // Append the whole line and stop. It will overflow, but avoids the loop.
+                        sb.append(rtrim(currentLine));
+                        remainder = ""; // Done
+                    }
+                }
+                else
+                {
+                    // Normal wrap: append the calculated part and update remainder
+                    sb.append(rtrim(currentLine.substring(0, pos))).append(defaultNewLine);
+                    remainder = nextRemainder;
+                }
+            }
+        }
         return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
     }
\ No newline at end of file
