diff --git a/tmp/74295967-907b-49c9-ab7c-c5d906226852_buggy.java b/tmp/d01edd37-cee5-4cd5-a3d8-4634242d02d6_fixed.java
index 227a4ef..e718f5e 100644
--- a/tmp/74295967-907b-49c9-ab7c-c5d906226852_buggy.java
+++ b/tmp/d01edd37-cee5-4cd5-a3d8-4634242d02d6_fixed.java
@@ -1,48 +1,76 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // Handle first line indentation an wrap position
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
+            // No wrap needed for the first line
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line and the newline character
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // The text to process for subsequent lines, trimmed
+        String remainingText = text.substring(pos).trim();
+
+        // Create padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        // Process the remaining text line by line
+        while (remainingText.length() > 0)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Prepend padding to the remaining text for the current line
+            String currentLine = padding + remainingText;
+            pos = findWrapPos(currentLine, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
+                // No further wrapping needed, append the rest of the text
+                sb.append(rtrim(currentLine));
+                // Mark remaining text as empty to exit the loop
+                remainingText = ""; 
+            }
+            else
+            {
+                // Calculate the part of the line to append and the text for the next iteration
+                String lineToAppend = currentLine.substring(0, pos);
+                String nextRemainingText = currentLine.substring(pos).trim();
 
+                // Check for potential infinite loop: if the remaining text doesn't change
+                // after trimming and padding, it means we are stuck. This can happen if
+                // the wrap position falls within the padding or doesn't advance the processing
+                // of the actual text content.
+                if (nextRemainingText.equals(remainingText))
+                {
+                    // Throw the exception as intended by the original code for CLI-162
+                    throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + currentLine);
+                    // Note: An alternative might be to append the rest of the line and break,
+                    // but the original fix for CLI-162 specifically added this exception.
+                    // sb.append(rtrim(currentLine));
+                    // remainingText = "";
+                }
+                else
+                {
+                    // Append the wrapped line part and continue with the next remaining text
+                    sb.append(rtrim(lineToAppend)).append(defaultNewLine);
+                    remainingText = nextRemainingText;
+                }
+            }
+        }
         return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
     }
\ No newline at end of file
