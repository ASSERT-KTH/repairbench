diff --git a/tmp/3d8d91ff-8ccf-43c8-8ce4-335c40efc6fc_buggy.java b/tmp/a182f901-4711-4b95-b8aa-50fa44f754ea_fixed.java
index 227a4ef..d9fb56e 100644
--- a/tmp/3d8d91ff-8ccf-43c8-8ce4-335c40efc6fc_buggy.java
+++ b/tmp/a182f901-4711-4b95-b8aa-50fa44f754ea_fixed.java
@@ -1,48 +1,71 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
+     * <p>
+     * This method handles wrapping of the text across lines, respecting
+     * the specified width and indenting subsequent lines by the
+     * specified tab stop.
+     * </p>
      *
      * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
+     * @param width The number of characters available for the text per line.
+     * @param nextLineTabStop The position on the next line for the first character
+     *                        after the padding (indention).
+     * @param text The text to be rendered. Must not be {@code null}.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // Handle the first line (no padding)
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
+            // Text fits on one line
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        // The remainder of the text for subsequent lines, trimmed
+        String remainder = text.substring(pos).trim();
 
-        while (true)
+        // Create padding string for subsequent lines
+        // Guard against negative or zero nextLineTabStop values
+        final String padding = (nextLineTabStop <= 0) ? "" : createPadding(nextLineTabStop);
+
+
+        // Loop while there's text remaining to be wrapped
+        while (remainder.length() > 0)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Prefix the remaining text with padding
+            String paddedRemainder = padding + remainder;
+
+            // Find the wrap position in the padded line.
+            // Important: The search for wrap position starts *after* the padding,
+            // ensuring that we wrap the actual content, not the padding itself.
+            // This prevents infinite loops if a long word follows the padding.
+            pos = findWrapPos(paddedRemainder, width, padding.length());
 
             if (pos == -1)
             {
-                sb.append(text);
-
-                return sb;
-            } else
-            if (pos == lastPos)
+                // The remaining text fits on the current line (with padding).
+                sb.append(paddedRemainder);
+                // No more remainder, exit the loop
+                break; 
+            }
+            else
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                // Append the part of the padded line that fits.
+                sb.append(rtrim(paddedRemainder.substring(0, pos))).append(defaultNewLine);
+                // Update the remainder for the next iteration, trimming leading space.
+                remainder = paddedRemainder.substring(pos).trim();
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
+        // All text has been appended.
+        return sb;
     }
\ No newline at end of file
