diff --git a/tmp/1d791f5a-f20e-489a-9546-04ca2b3e7971_buggy.java b/tmp/83cd57bb-0c3f-4e36-b62f-396a8cbb7a33_fixed.java
index 227a4ef..47f0e79 100644
--- a/tmp/1d791f5a-f20e-489a-9546-04ca2b3e7971_buggy.java
+++ b/tmp/83cd57bb-0c3f-4e36-b62f-396a8cbb7a33_fixed.java
@@ -1,48 +1,91 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+        int currentIndent = 0; // Indentation for the current line being processed
+        int currentPos = 0; // Position in the *original* text string being processed
 
+        // Ensure text is not null to avoid NullPointerException
+        if (text == null) {
              return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        // This loop processes the text node by node, wrapping lines based on width
+        // and indenting subsequent lines.
+        while (currentPos < text.length()) {
+            // Determine available width for this line, considering current indent
+            int availableWidth = width - currentIndent;
 
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Skip leading whitespace at the start of the line segment being processed
+            // This ensures that lines don't start with unnecessary spaces.
+            while (currentPos < text.length() && Character.isWhitespace(text.charAt(currentPos))) {
+                currentPos++;
+            }
 
-            if (pos == -1)
-            {
-                sb.append(text);
+            // If we have consumed all text (e.g., it was all whitespace or we finished)
+            if (currentPos >= text.length()) {
+                break;
+            }
 
-                return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // If available width is <= 0 due to indent, we cannot fit anything further.
+            // This can happen if nextLineTabStop >= width.
+            // To prevent potential infinite loops, append the rest of the text directly and stop.
+            if (availableWidth <= 0) {
+                // Get the remaining text unprocessed.
+                String remainingText = text.substring(currentPos);
+                // Add indent padding if required for this line
+                if (currentIndent > 0) {
+                    sb.append(createPadding(currentIndent));
+                }
+                // Append the remaining text as is.
+                sb.append(remainingText);
+                // Mark all text as consumed.
+                currentPos = text.length(); 
+                break; // Exit the loop
+            }
+
+            // Find the wrap position in the text starting from currentPos, 
+            // using the calculated availableWidth for this line.
+            // findWrapPos returns the index where the *next* line should begin, or -1 if the rest fits.
+            int wrapPos = findWrapPos(text, availableWidth, currentPos);
+
+            String lineText; // Will hold the text for the current line
+            if (wrapPos == -1) {
+                // The rest of the text fits on the current line without wrapping.
+                lineText = text.substring(currentPos); // Grab the remainder.
+                currentPos = text.length(); // Advance position to the end of the text.
+            } else {
+                // Found a wrap position. Text for this line is from currentPos up to (but not including) wrapPos.
+                lineText = text.substring(currentPos, wrapPos);
+                currentPos = wrapPos; // Advance position to the start of the next line's content.
+            }
+
+            // Append the text calculated for the current line.
+            // Add indent padding first if this isn't the first line (currentIndent > 0).
+            if (currentIndent > 0) {
+                sb.append(createPadding(currentIndent));
             }
+            // Append the line's text, removing any trailing whitespace with rtrim.
+            sb.append(rtrim(lineText));
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // If there is more text to process after this line, add a newline character.
+            if (currentPos < text.length()) {
+                sb.append(defaultNewLine);
+                // Set the indent that should be used for the next line.
+                currentIndent = nextLineTabStop;
+            }
+            // The loop continues if currentPos < text.length()
         }
+        // Return the StringBuffer containing the formatted text.
+        return sb;
     }
\ No newline at end of file
