diff --git a/tmp/262b9bdb-6dfd-4573-892f-570840c62f59_buggy.java b/tmp/ac2ba7ef-a933-4328-a64a-d5d0a92f4f62_fixed.java
index 227a4ef..ba5cc87 100644
--- a/tmp/262b9bdb-6dfd-4573-892f-570840c62f59_buggy.java
+++ b/tmp/ac2ba7ef-a933-4328-a64a-d5d0a92f4f62_fixed.java
@@ -1,48 +1,81 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
+        // Handle first line wrapping (no padding)
         int pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
+            // All fits on first line
             sb.append(rtrim(text));
-
             return sb;
         }
+        // Append first line
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Setup for subsequent lines
         final String padding = createPadding(nextLineTabStop);
+        final int effectiveWidth = width - padding.length();
 
-        while (true)
+        // The text to wrap for subsequent lines
+        String currentText = text.substring(pos).trim();
+
+        while (currentText.length() > 0)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // If padding consumes the whole width or more, we cannot sensibly wrap further lines.
+            // Append the rest of the text on the next line, padded.
+            if (effectiveWidth <= 0) {
+                // Append the padded remaining text and stop.
+                sb.append(padding).append(rtrim(currentText));
+                // No newline here, assuming the caller handles final line breaks. If sb is reused,
+                // the next append will happen naturally. If this is the absolute end,
+                // a final newline might be missing, but this matches the original's potential behaviour
+                // in the case where the first line fit (no newline added).
+                // Let's add the newline for consistency with the loop below.
+                sb.append(padding).append(rtrim(currentText)).append(defaultNewLine);
+                currentText = ""; // Mark as done
+                break;
+            }
 
+            // Find wrap point in the *remaining text* using the *effective width*
+            pos = findWrapPos(currentText, effectiveWidth, 0);
+
+            String lineFragment; // Text fragment for the current line (part of currentText)
             if (pos == -1)
             {
-                sb.append(text);
-
-                return sb;
-            } else
-            if (pos == lastPos)
+                // The rest of currentText fits within the effective width
+                lineFragment = currentText; // Take all remaining text
+                currentText = ""; // Mark as done
+            }
+            else
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                // Wrap currentText at 'pos'
+                lineFragment = currentText.substring(0, pos);
+                currentText = currentText.substring(pos).trim(); // Update remaining text
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the padded line fragment
+            sb.append(padding).append(rtrim(lineFragment)).append(defaultNewLine);
+
+            // Loop continues if currentText has length
         }
+
+        // The loop structure ensures a newline is added after the last piece.
+        // If the original text ended perfectly at a wrap point, the last 'currentText' might be empty
+        // or just whitespace, resulting in an extra newline potentially.
+        // However, the trim() operations should minimize this.
+        // Consider if the final newline should always be there. The original code
+        // added it in the loop, so we maintain that.
+
+        return sb; // StringBuffer is returned, containing all appended lines.
     }
\ No newline at end of file
