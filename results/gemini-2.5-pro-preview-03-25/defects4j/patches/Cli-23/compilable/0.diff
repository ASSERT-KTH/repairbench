diff --git a/tmp/1925c081-e5bf-417c-ab02-7ccab0e53b57_buggy.java b/tmp/bca5dafb-81f1-4cab-9c78-82ba2119d828_fixed.java
index 227a4ef..d1b4050 100644
--- a/tmp/1925c081-e5bf-417c-ab02-7ccab0e53b57_buggy.java
+++ b/tmp/bca5dafb-81f1-4cab-9c78-82ba2119d828_fixed.java
@@ -1,48 +1,80 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Handle empty or null text
+        if (text == null || text.length() == 0) {
+             return sb;
+        }
+
+        // Find wrap position for the first line (no padding calculation needed)
+        // Start searching from the beginning of the text (startPos = 0)
         int pos = findWrapPos(text, width, 0);
 
+        // If text fits on one line
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Prepare padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
+        // The effective width available for text on subsequent lines
+        // Ensure positivity, though findWrapPos should handle width <= 0 correctly
+        // by returning -1 or a position within the text if it finds a newline/tab early.
+        final int subsequentWidth = Math.max(1, width - padding.length()); 
 
-        while (true)
+
+        // Start processing the remainder
+        String remainder = text.substring(pos).trim();
+
+        // Loop while there is remaining text to process
+        while (remainder.length() > 0)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // If the available width on subsequent lines is non-positive
+            // (because padding is too large). This case means subsequentWidth was <= 0 before Math.max.
+            // We append the remaining text on one padded line which might exceed the target width,
+            // but avoids errors and infinite loops.
+             if (width - padding.length() <= 0) {
+                  sb.append(padding).append(rtrim(remainder));
+                  return sb; // Exit after appending the rest
+             }
 
+            // Find wrap position in the *remainder* using the *subsequentWidth*
+            // Start searching from the beginning of the remainder (startPos = 0)
+            pos = findWrapPos(remainder, subsequentWidth, 0);
+
+            // If the rest of the remainder fits on the current line
             if (pos == -1)
             {
-                sb.append(text);
+                // Append the final padded line
+                sb.append(padding).append(rtrim(remainder));
+                // Ensure the loop terminates
+                remainder = ""; 
+            }
+            else // A wrap position was found
+            {
+                // Append the wrappable part of the remainder, prepended with padding
+                sb.append(padding).append(rtrim(remainder.substring(0, pos))).append(defaultNewLine);
+                // Update the remainder for the next iteration
+                remainder = remainder.substring(pos).trim();
+            }
+        }
 
+        // Return the StringBuffer containing the wrapped text
         return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
     }
\ No newline at end of file
