diff --git a/tmp/a10fd285-f5c4-464d-9195-6925e3e4d5a6_buggy.java b/tmp/d55e7ab8-5ad1-4ae1-99db-02b38e40a25e_fixed.java
index b2d53db..6396aa7 100644
--- a/tmp/a10fd285-f5c4-464d-9195-6925e3e4d5a6_buggy.java
+++ b/tmp/d55e7ab8-5ad1-4ae1-99db-02b38e40a25e_fixed.java
@@ -1,34 +1,25 @@
         void read(Tokeniser t, CharacterReader r) {
-            if (r.matchesLetter()) {
-                String name = r.consumeLetterSequence();
-                t.tagPending.appendTagName(name.toLowerCase());
-                t.dataBuffer.append(name);
+            // Handle comments, doctypes, and special tags first
+            if (r.matches('!')) {
                 r.advance();
-                return;
-            }
-
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
-                char c = r.consume();
-                switch (c) {
-                    case '\t':
-                    case '\n':
-                    case '\f':
-                    case ' ':
-                        t.transition(BeforeAttributeName);
-                        break;
-                    case '/':
-                        t.transition(SelfClosingStartTag);
-                        break;
-                    case '>':
-                        t.emitTagPending();
-                        t.transition(Data);
-                        break;
-                    default:
-                        t.dataBuffer.append(c);
-                        anythingElse(t, r);
-                        break;
-                }
+                t.transition(TokeniserState.MarkupDeclarationOpen);
+            } else if (r.matches('/')) {
+                r.advance();
+                t.transition(TokeniserState.EndTagOpen);
+            } else if (r.matchesLetter()) {
+                // Start tag name
+                t.createTagPending(true); // true = start tag
+                t.transition(TokeniserState.TagName);
+                // No need to consume or advance here; TagName state will handle the character (reconsume)
+            } else if (r.matches('?')) {
+                // Bogus comment <!> tag open <?>
+                r.advance(); // consume the '?'
+                t.createBogusCommentPending();
+                t.transition(TokeniserState.BogusComment);
             } else {
-                anythingElse(t, r);
+                // Parse error. Emit '<' token. Transition back to Data state (reconsume current char)
+                t.error(this);
+                t.emit('<');
+                t.transition(TokeniserState.Data);
             }
         }
\ No newline at end of file
