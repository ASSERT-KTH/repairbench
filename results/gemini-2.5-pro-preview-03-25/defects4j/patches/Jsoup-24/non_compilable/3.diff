diff --git a/tmp/f619118b-fa21-4127-a4c4-49451a37a038_buggy.java b/tmp/47566ed4-99a9-4d16-aa3f-71d3842cd68a_fixed.java
index b2d53db..235d056 100644
--- a/tmp/f619118b-fa21-4127-a4c4-49451a37a038_buggy.java
+++ b/tmp/47566ed4-99a9-4d16-aa3f-71d3842cd68a_fixed.java
@@ -1,34 +1,42 @@
+        // This method implements the 'After Tag Name' state logic.
         void read(Tokeniser t, CharacterReader r) {
-            if (r.matchesLetter()) {
-                String name = r.consumeLetterSequence();
-                t.tagPending.appendTagName(name.toLowerCase());
-                t.dataBuffer.append(name);
-                r.advance();
+            // Handle EOF first
+            if (r.isEmpty()) {
+                t.eofError(this); // Signal error for End Of File
+                t.transition(Data); // Transition to Data state
                 return;
             }
 
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
-                char c = r.consume();
+            char c = r.peek(); // Peek at the next character without consuming
+
             switch (c) {
                 case '\t':
                 case '\n':
                 case '\f':
                 case ' ':
-                        t.transition(BeforeAttributeName);
+                    r.advance(); // Consume the whitespace character
+                    t.transition(BeforeAttributeName); // Transition to BeforeAttributeName state
                     break;
                 case '/':
-                        t.transition(SelfClosingStartTag);
+                    r.advance(); // Consume the slash character
+                    t.transition(SelfClosingStartTag); // Transition to SelfClosingStartTag state
                     break;
                 case '>':
-                        t.emitTagPending();
-                        t.transition(Data);
+                    r.advance(); // Consume the '>' character
+                    t.emitTagPending(); // Emit the accumulated tag token (start or end)
+                                        // emitTagPending handles switching to ScriptData, Rcdata if needed based on tag name
+                    t.transition(Data); // Transition to Data state (base state after tag close, may be changed by emit)
                     break;
                 default:
-                        t.dataBuffer.append(c);
+                    // Unexpected character follows tag name (e.g., letter, symbol, or EOF if somehow missed).
+                    // This is a parse error according to the HTML specification.
+                    // Delegate complex error handling to the existing 'anythingElse' method,
+                    // assuming it implements the required error handling and state transition.
+                    // We do not consume the character here ('peek' was used), assuming 'anythingElse'
+                    // will handle consumption or reconsumption as needed.
+                    // This fixes the bug by removing the incorrect `dataBuffer.append(c)` and
+                    // ensuring '>' is handled correctly for all tags before falling back to error handling.
                     anythingElse(t, r);
                     break;
             }
-            } else {
-                anythingElse(t, r);
-            }
         }
\ No newline at end of file
