diff --git a/tmp/c0ead07d-5d9c-40e4-bbaa-e1770c8e7a11_buggy.java b/tmp/2bd06788-994e-4f5c-bcd9-b0974cb33682_fixed.java
index b2d53db..23fc2db 100644
--- a/tmp/c0ead07d-5d9c-40e4-bbaa-e1770c8e7a11_buggy.java
+++ b/tmp/2bd06788-994e-4f5c-bcd9-b0974cb33682_fixed.java
@@ -1,34 +1,41 @@
         void read(Tokeniser t, CharacterReader r) {
-            if (r.matchesLetter()) {
-                String name = r.consumeLetterSequence();
-                t.tagPending.appendTagName(name.toLowerCase());
-                t.dataBuffer.append(name);
-                r.advance();
+            // Handle EOF first
+            if (r.isEmpty()) {
+                t.eofError(this);
+                t.transition(Data);
                 return;
             }
 
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
+            // Process the next character according to the spec for AfterTagName state
             char c = r.consume();
             switch (c) {
                 case '\t':
                 case '\n':
                 case '\f':
                 case ' ':
+                    // Whitespace following tag name, transition to BeforeAttributeName
                     t.transition(BeforeAttributeName);
                     break;
                 case '/':
+                    // Solidus following tag name, transition to SelfClosingStartTag
                     t.transition(SelfClosingStartTag);
                     break;
                 case '>':
+                    // Greater-than sign, emit tag and transition back to Data state
                     t.emitTagPending();
                     t.transition(Data);
                     break;
                 default:
-                        t.dataBuffer.append(c);
-                        anythingElse(t, r);
+                    // Unexpected character. Append to TagName is generally not correct here.
+                    // The original code appended to dataBuffer and called anythingElse.
+                    // Let's assume anythingElse handles the transition to Data and potentially logs an error.
+                    // Replicating the original default seems the safest minimal change, assuming anythingElse is the intended error handler.
+                    // Note: HTML5 spec ยง12.2.5.10 suggests parse error, transition to Data, and reconsume.
+                    // Appending to data buffer might be Jsoup's lenient approach.
+                    t.error("Unexpected character '%s' after tag name", c); // Add explicit error
+                    t.dataBuffer.append(c); // Keep appending to data buffer as per original default logic
+                    anythingElse(t, r); // Let anythingElse handle the state transition (likely to Data)
+                    // Note: If anythingElse consumes more characters, this might differ from reconsume.
                     break;
             }
-            } else {
-                anythingElse(t, r);
-            }
         }
\ No newline at end of file
