diff --git a/tmp/b3ac1295-137c-4893-ada1-c5c33e62f853_buggy.java b/tmp/bd080c7d-4a7e-4882-8211-73dd746c0eeb_fixed.java
index b2d53db..0d1a17e 100644
--- a/tmp/b3ac1295-137c-4893-ada1-c5c33e62f853_buggy.java
+++ b/tmp/bd080c7d-4a7e-4882-8211-73dd746c0eeb_fixed.java
@@ -1,34 +1,34 @@
+        // Fixed version based on HTML Spec: https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state
         void read(Tokeniser t, CharacterReader r) {
-            if (r.matchesLetter()) {
-                String name = r.consumeLetterSequence();
-                t.tagPending.appendTagName(name.toLowerCase());
-                t.dataBuffer.append(name);
+            // previous state needs to have consumed the '<'
+            switch (r.current()) {
+                case '!':
                     r.advance();
-                return;
-            }
-
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
-                char c = r.consume();
-                switch (c) {
-                    case '\t':
-                    case '\n':
-                    case '\f':
-                    case ' ':
-                        t.transition(BeforeAttributeName);
+                    t.transition(MarkupDeclarationOpen);
                     break;
                 case '/':
-                        t.transition(SelfClosingStartTag);
+                    r.advance();
+                    t.transition(EndTagOpen);
                     break;
-                    case '>':
-                        t.emitTagPending();
-                        t.transition(Data);
+                case '?':
+                    r.advance();
+                    // spec ignores processing instructions. createBogusComment allows reading until >, and token emitted
+                    t.createBogusCommentPending();
+                    t.transition(BogusComment);
                     break;
                 default:
-                        t.dataBuffer.append(c);
-                        anythingElse(t, r);
-                        break;
-                }
+                    if (r.matchesLetter()) {
+                        // optimize letter case. No need to emit < as char, but keep state correct
+                        t.createTagPending(true); // true = start tag
+                        t.transition(TagName);
+                        // reconsume letter in TagName state
                     } else {
-                anythingElse(t, r);
+                        // "<", no letters after => treat like data
+                        t.error(this);
+                        t.emit('<');
+                        t.transition(Data);
+                        // reconsume in Data state
+                    }
+                    break;
             }
         }
\ No newline at end of file
