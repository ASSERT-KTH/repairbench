diff --git a/tmp/ff794e57-8606-4351-85f3-bb4139b7541b_buggy.java b/tmp/265a946d-64d3-4810-87bc-305e37daf5e8_fixed.java
index b2d53db..b38cf5a 100644
--- a/tmp/ff794e57-8606-4351-85f3-bb4139b7541b_buggy.java
+++ b/tmp/265a946d-64d3-4810-87bc-305e37daf5e8_fixed.java
@@ -1,34 +1,49 @@
         void read(Tokeniser t, CharacterReader r) {
+            // previous state ensures we start with a letter. Optimize for that path.
             if (r.matchesLetter()) {
                 String name = r.consumeLetterSequence();
                 t.tagPending.appendTagName(name.toLowerCase());
                 t.dataBuffer.append(name);
-                r.advance();
-                return;
+                // r.advance(); // bug: consumeLetterSequence already advances. removed.
+                return; // allows next state to handle characters after tag name
             }
 
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
+            // If we're in ScriptDataEndTagName, the logic is different from TagName
+            // Handling for the general TagName state, but adapted slightly for ScriptDataEndTagName context
+            // based on the presence of isAppropriateEndTagToken check and dataBuffer usage.
+
+            boolean isAppropriateEndTag = t.isAppropriateEndTagToken();
+
+            if (isAppropriateEndTag && !r.isEmpty()) {
                 char c = r.consume();
                 switch (c) {
                     case '\t':
                     case '\n':
                     case '\f':
                     case ' ':
                         t.transition(BeforeAttributeName);
                         break;
                     case '/':
                         t.transition(SelfClosingStartTag);
                         break;
                     case '>':
                         t.emitTagPending();
-                        t.transition(Data);
+                        t.transition(Data); // Should transition back to ScriptData state normally
                         break;
                     default:
-                        t.dataBuffer.append(c);
-                        anythingElse(t, r);
+                        // appropriate end tag name, but not ended correctly.
+                        // backtrack to treat as data.
+                        // t.dataBuffer.append(c); // bug: shouldn't append current char here, anythingElse handles it. removed.
+                        r.unconsume(); // put char back for anythingElse handler to process
+                        anythingElse(t, r); // handle as data
                         break;
                 }
             } else {
+                // Tag name didn't match appropriate end tag, or reader empty. Treat as data.
                  anythingElse(t, r);
             }
         }
+
+        // Assuming 'anythingElse' is defined elsewhere in the context (likely specific to ScriptDataEndTagName)
+        // and handles emitting "</" + dataBuffer content and transitioning back to the main data state (ScriptData).
+        // private void anythingElse(Tokeniser t, CharacterReader r) { ... }
