diff --git a/tmp/10208a15-7cd3-409b-8e89-1aed194db931_buggy.java b/tmp/d3f06885-e02e-4b79-8fa3-46f0e393b7fc_fixed.java
index b2d53db..ba96981 100644
--- a/tmp/10208a15-7cd3-409b-8e89-1aed194db931_buggy.java
+++ b/tmp/d3f06885-e02e-4b79-8fa3-46f0e393b7fc_fixed.java
@@ -1,34 +1,42 @@
         void read(Tokeniser t, CharacterReader r) {
+            // If the next char is a letter, consume the letter sequence as tag name continuation.
             if (r.matchesLetter()) {
                 String name = r.consumeLetterSequence();
                 t.tagPending.appendTagName(name.toLowerCase());
-                t.dataBuffer.append(name);
-                r.advance();
-                return;
+                // t.dataBuffer.append(name); // Removed: Tag name should not be appended to data buffer.
+                r.advance(); // Keep original logic - advances past the sequence to check the next char
+                return;      // Keep original logic - return to loop / next state transition check presumably
             }
 
+            // Handle transitions after the tag name. The appropriateness check might be part of Jsoup's specific logic.
+            // Keep the original conditional structure for minimal change, but fix data buffer append.
             if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
                 char c = r.consume();
                 switch (c) {
                     case '\t':
                     case '\n':
                     case '\f':
                     case ' ':
                         t.transition(BeforeAttributeName);
                         break;
                     case '/':
                         t.transition(SelfClosingStartTag);
                         break;
                     case '>':
                         t.emitTagPending();
-                        t.transition(Data);
+                        t.transition(Data); // Keep original explicit transition
                         break;
                     default:
-                        t.dataBuffer.append(c);
-                        anythingElse(t, r);
+                        // Unexpected character following tag name in this context.
+                        // t.dataBuffer.append(c); // Removed: Do not append unexpected chars after tag name to data buffer.
+                        // Let anythingElse handle the unexpected character, potentially signalling a parse error
+                        // or implementing specific recovery logic. It should not append to data buffer here.
+                        anythingElse(t, r); // Call fallback handler
                         break;
                 }
             } else {
-                anythingElse(t, r);
+                // Handle cases where not an appropriate end tag, or reader is empty,
+                // or the first character check (!r.matchesLetter()) failed.
+                anythingElse(t, r); // Call fallback handler
             }
         }
\ No newline at end of file
