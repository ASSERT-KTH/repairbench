diff --git a/tmp/001075b7-cba5-456c-91d3-82b10752203c_buggy.java b/tmp/6f0e67a1-238f-40c8-a12e-9bcb45a82ca3_fixed.java
index 1ad070d..3d21171 100644
--- a/tmp/001075b7-cba5-456c-91d3-82b10752203c_buggy.java
+++ b/tmp/6f0e67a1-238f-40c8-a12e-9bcb45a82ca3_fixed.java
@@ -1,38 +1,63 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+        // Removed incorrect cases for literal CR, LF, FF, TAB, BACKSPACE
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // Check if the character 'c' is defined as needing escaping.
+            // This includes the escape character itself, the delimiter, and the quote character (if defined).
+            // Note: 'format' is accessible as a member field (assumed context of CSVLexer).
+            final Character escapeCharacter = format.getEscapeCharacter(); 
+            // This method should only be called if escapeCharacter is configured.
+            // Adding a check for robustness, although it should ideally not be null here.
+            if (escapeCharacter == null) {
+                 // If escape is not set, treat the character following the supposed escape literally.
+                 // This path should not be reached if the lexer correctly identifies escapes.
                  return c; 
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            final char escape = escapeCharacter.charValue();
+
+            // If the character following the escape is the escape char itself,
+            // or the delimiter, return the character literally (unescaped).
+            if (c == escape || c == format.getDelimiter()) {
+                 return c;
+            }
+
+            // If quote character is defined and the character following the escape is the quote character,
+            // return the quote character literally (unescaped).
+            if (format.isQuoteCharacterSet() && c == format.getQuoteCharacter().charValue()) {
+                 return c;
+            }
+            
+            // If the character 'c' is not a special escape code (like \n, \t) and not a meta character
+            // that requires escaping (delimiter, quote, escape itself according to the format), 
+            // then the escape character is treated as a literal character, not performing any escaping.
+            // We return the escape character itself.
+            // The character 'c' that followed the escape remains available via in.getLastChar()
+            // and will be processed by the lexer in the next iteration.
+            // This handles cases like '\a' or '\N' where the escape does not apply to 'a' or 'N'.
+            return escape;
         }
     }
\ No newline at end of file
