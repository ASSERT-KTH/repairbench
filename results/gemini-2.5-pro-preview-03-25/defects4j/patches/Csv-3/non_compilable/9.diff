diff --git a/tmp/95addf4c-6889-4dd0-bfd8-9e7d6a8a4f69_buggy.java b/tmp/4b5d3d00-1ccc-4c45-bf65-b2f7e17a7c88_fixed.java
index 1ad070d..b19b8ec 100644
--- a/tmp/95addf4c-6889-4dd0-bfd8-9e7d6a8a4f69_buggy.java
+++ b/tmp/4b5d3d00-1ccc-4c45-bf65-b2f7e17a7c88_fixed.java
@@ -1,38 +1,49 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
+     * @return the unescaped character (as an int) or the escape character itself if the character following the escape is not a meta character.
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+        // the escape char has just been read (normally this.escape)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // Check if the character following the escape is a meta character or line ending.
+            // Meta characters defined in the format: delimiter, escape, quote, comment marker.
+            // Line endings (CR, LF) are also treated as meta for escaping purposes here,
+            // meaning escaping them results in the line ending character itself.
+            boolean isMeta = (c == this.delimiter ||
+                            c == this.escape ||
+                            c == this.quoteChar ||
+                            (this.format.isCommentMarkerSet() && c == this.commentStart) ||
+                            c == CR ||
+                            c == LF);
+
+            if (isMeta) {
+                // If 'c' is a meta char (or CR/LF), return 'c' itself (e.g., \, -> ,, \\ -> \).
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            
+            // If 'c' is not a known escape sequence (r,n,t,b,f) and not a meta char,
+            // the tests indicate that the escape character itself should be returned.
+            // The character 'c' will then be processed in the next iteration of the lexer. (e.g., \N -> \ followed by N).
+            return this.escape;
         }
     }
