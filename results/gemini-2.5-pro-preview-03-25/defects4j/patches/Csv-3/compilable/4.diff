diff --git a/tmp/c8c77d1a-d2c2-455e-8520-8ebc2339f106_buggy.java b/tmp/63cea354-4ce7-46da-bd34-1d209a73b078_fixed.java
index 1ad070d..33e98f2 100644
--- a/tmp/c8c77d1a-d2c2-455e-8520-8ebc2339f106_buggy.java
+++ b/tmp/63cea354-4ce7-46da-bd34-1d209a73b078_fixed.java
@@ -1,38 +1,49 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      *
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid.
      * @throws IOException if there is a problem reading the stream or the end of stream is detected:
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+        // Removed erroneous cases for literal control characters CR, LF, FF, TAB, BACKSPACE.
+        // These characters are not standard escape sequences like \r, \n, etc.
+        // If the character following the escape is one of these control characters,
+        // it should be handled by the default case, returning the character itself.
+        // The lexer logic (caller) determines how to handle the returned character
+        // (e.g., append directly if it's a meta char, or prepend escape if it's not).
+        // case CR:
+        // case LF:
+        // case FF: // TODO is this correct? -> No
+        // case TAB: // TODO is this correct? Do tabs need to be escaped? -> No
+        // case BACKSPACE: // TODO is this correct? -> No
+        //    return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // Return the character following the escape character.
+            // This character might be a meta character (quote, delimiter, escape itself)
+            // or a regular character. The caller (CSVLexer) is responsible for
+            // interpreting this returned character correctly based on the CSVFormat settings.
+            // For example, if \ cancels the escaping functionality of the escape character
+            // and the character following the escape is not a meta character then the escape
+            // character is itself appended to the token, followed by the character read.
             return c;
-            // indicate unexpected char - available from in.getLastChar()
         }
     }
\ No newline at end of file
