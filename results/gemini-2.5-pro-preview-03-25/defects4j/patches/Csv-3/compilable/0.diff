diff --git a/tmp/7644497f-ba4e-4864-a833-e02d4bd6eea1_buggy.java b/tmp/baef9c0e-c20d-435c-8379-23f70d05f050_fixed.java
index 1ad070d..3b47968 100644
--- a/tmp/7644497f-ba4e-4864-a833-e02d4bd6eea1_buggy.java
+++ b/tmp/baef9c0e-c20d-435c-8379-23f70d05f050_fixed.java
@@ -1,38 +1,40 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      *
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid.
      * @throws IOException if there is a problem reading the stream or the end of stream is detected:
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
-        final int c = in.read();
+        final int c = in.read(); // Read the character following the escape character
+
         switch (c) {
+        // Standard C-style escapes
         case 'r':
-            return CR;
+            return CR; // Carriage return
         case 'n':
-            return LF;
+            return LF; // Line feed
         case 't':
-            return TAB;
+            return TAB; // Tab
         case 'b':
-            return BACKSPACE;
+            return BACKSPACE; // Backspace
         case 'f':
-            return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+            return FF; // Form feed
+
+        // Handling EOF after escape character
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
+
+        // Default case: treat the character literally.
+        // This handles escaping of meta-characters (like the escape char itself, delimiter, quote)
+        // and any other character. E.g., '\\' -> '\', '\,' -> ',', '\"' -> '"', '\a' -> 'a', '\N' -> 'N'.
+        // It also handles escaped control characters if they are not explicitly mapped above,
+        // e.g., an input like \<LF> would return LF.
         default:
-            // Now check for meta-characters
             return c;
-            // indicate unexpected char - available from in.getLastChar()
         }
     }
\ No newline at end of file
