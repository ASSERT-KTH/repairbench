diff --git a/tmp/12a95669-f5a6-499a-a3dd-9e21d7b649f2_buggy.java b/tmp/8b72aa38-9969-446c-bccc-9f1893d8edb9_fixed.java
index 7e64f1d..82bc418 100644
--- a/tmp/12a95669-f5a6-499a-a3dd-9e21d7b649f2_buggy.java
+++ b/tmp/8b72aa38-9969-446c-bccc-9f1893d8edb9_fixed.java
@@ -1,78 +1,113 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option}
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        List tokens = new ArrayList();
+        List<String> tokens = new ArrayList<>(); // Use generics
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                int eqPos = arg.indexOf('=');
 
-                if (options.hasOption(opt))
+                // Case 1: Argument contains '=', e.g., --opt=value, -o=value
+                if (eqPos != -1)
                 {
-                    tokens.add(arg);
+                    String optionPart = arg.substring(0, eqPos); // e.g., --opt, -o
+                    String valuePart = arg.substring(eqPos + 1); // e.g., value
+
+                    // Check if the part before '=' is a known option (short, long, or gnu-style long)
+                    // options.hasOption() checks registered short/long/GNU-long opt names after stripping hyphens
+                    if (options.hasOption(optionPart))
+                    {
+                        tokens.add(optionPart);
+                        tokens.add(valuePart);
+                    }
+                    else // Unrecognized option before '='
+                    {
+                        // If stopAtNonOption is enabled, treat as non-option
+                        if (stopAtNonOption) {
+                            eatTheRest = true;
+                        }
+                        tokens.add(arg); // Add the original string unprocessed
+                    }
                 }
+                // Case 2: Argument does not contain '=', e.g., --opt, -o, -ovalue, -Dprop=value
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    // Check if the whole argument is a known option (e.g., --verbose, -v)
+                    if (options.hasOption(arg))
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        tokens.add(arg);
+                    }
+                    // Check for short option with attached value: -fbar, -Dkey=value
+                    // Condition: single dash, length > 2 (more than just -X), starts with a known short opt
+                    else if (!arg.startsWith("--") && arg.length() > 2 && options.hasOption(arg.substring(0, 2)))
+                    {
+                        // Need to ensure the whole arg is not also a registered option (e.g., -log vs -l)
+                        // If hasOption(arg) was false, we proceed to split.
+                        tokens.add(arg.substring(0, 2)); // Add the short option part like "-f" or "-D"
+                        tokens.add(arg.substring(2));    // Add the rest like "bar" or "key=value"
                     }
+                    // Argument is not recognized as a known option or pattern
                     else
                     {
-                        eatTheRest = stopAtNonOption;
-                        tokens.add(arg);
+                        // If stopAtNonOption is enabled, treat as non-option
+                        if (stopAtNonOption) {
+                             eatTheRest = true;
                         }
+                        tokens.add(arg); // Add the original string unprocessed
                     }
                 }
-            else
+            }
+            else // Argument does not start with "-", treat as value or stop processing
             {
+                if (stopAtNonOption) {
+                    eatTheRest = true;
+                }
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
+                // Add all subsequent arguments unprocessed
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        // Convert List to String array
+        return tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
