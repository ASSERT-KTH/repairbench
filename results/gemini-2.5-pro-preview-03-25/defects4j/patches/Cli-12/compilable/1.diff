diff --git a/tmp/a34f509f-5609-433a-89e3-0ad880a62d43_buggy.java b/tmp/9dc73205-3562-4bdb-bb55-905aaddeb502_fixed.java
index 7e64f1d..2e6d9ed 100644
--- a/tmp/a34f509f-5609-433a-89e3-0ad880a62d43_buggy.java
+++ b/tmp/9dc73205-3562-4bdb-bb55-905aaddeb502_fixed.java
@@ -1,78 +1,115 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option}
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        List tokens = new ArrayList();
+        // Use List<String> for type safety
+        List<String> tokens = new ArrayList<>();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
+                // Strip hyphens to get the option key part, e.g., "f", "foo", "f=bar", "foo=bar"
                 String opt = Util.stripLeadingHyphens(arg);
 
+                // Check if the entire stripped string is a registered option key (e.g., "f", "foo")
                 if (options.hasOption(opt))
                 {
+                    // Argument is a recognized option like "-f" or "--foo"
                     tokens.add(arg);
                 }
-                else
+                // Handle arguments containing "=", like "--foo=bar", "-f=bar", "-foo=bar"
+                else if (arg.indexOf('=') != -1)
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    // Split into key part (with hyphens) and value part
+                    String key = arg.substring(0, arg.indexOf('=')); // e.g., "--foo", "-f", "-foo"
+                    String value = arg.substring(arg.indexOf('=') + 1); // e.g., "bar"
+
+                    // Check if the key part (e.g., "foo", "f") corresponds to a known option
+                    String keyToCheck = Util.stripLeadingHyphens(key);
+                    if (options.hasOption(keyToCheck)) // Use hasOption for existence check
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        // It's a valid option with an embedded value. Split them.
+                        tokens.add(key);   // Add the option token, e.g., "--foo" or "-f"
+                        tokens.add(value); // Add the value token, e.g., "bar"
                     }
                     else
                     {
+                        // The part before "=" is not a recognized option. Treat as a single token.
                         eatTheRest = stopAtNonOption;
-                        tokens.add(arg);
+                        tokens.add(arg); // Add the original argument, e.g. "-unrecognized=value"
                     }
                 }
+                // Handle cases like "-fvalue" or "-Dkey=value" (where -D is an option).
+                // This applies only if arg starts with a single "-", has no "=", the full opt wasn't recognized,
+                // AND the first character after "-" is a registered short option key.
+                // Note: This uses the check from the original code's logic which seemed intended for -D style or attached values.
+                // Check options.hasOption(arg.substring(1, 2)) to see if the first char represents a known short option key.
+                else if (!arg.startsWith("--") && arg.length() > 1 && options.hasOption(arg.substring(1, 2)))
+                {
+                    // Split into the short option token (e.g., "-f", "-D") and the rest
+                    tokens.add(arg.substring(0, 2)); // Add "-f" or "-D"
+                    tokens.add(arg.substring(2));    // Add "value" or "key=value" or "bc" (if bundled)
                 }
-            else
+                else // Argument starts with "-", but doesn't match known patterns above.
                 {
+                    // Treat as an unrecognized option or potentially a non-option argument starting with "-"
+                    eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
+            }
+            else // Argument does not start with "-"
+            {
+                 tokens.add(arg);
+                 // If stopAtNonOption is enabled, stop processing options after this argument
+                 if (stopAtNonOption) {
+                     eatTheRest = true;
+                 }
+            }
 
+            // If "--" was encountered or stopAtNonOption triggered by a non-option argument,
+            // add all remaining arguments as literal tokens.
             if (eatTheRest)
             {
-                for (i++; i < arguments.length; i++)
-                {
-                    tokens.add(arguments[i]);
+                // Consume the rest of the arguments
+                // Increment i here locally, the outer loop will continue and check the condition
+                for (int j = i + 1; j < arguments.length; j++) {
+                    tokens.add(arguments[j]);
                 }
+                // Break the outer loop since all remaining arguments have been added.
+                break; 
             }
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
