diff --git a/tmp/e03cd890-d9e0-446d-942a-51a32cbaebed_buggy.java b/tmp/ae46b33e-02a1-4c14-a0c8-0059da2d3195_fixed.java
index 7e64f1d..c0c2e77 100644
--- a/tmp/e03cd890-d9e0-446d-942a-51a32cbaebed_buggy.java
+++ b/tmp/ae46b33e-02a1-4c14-a0c8-0059da2d3195_fixed.java
@@ -1,78 +1,143 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option}
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        List tokens = new ArrayList();
-
+        // Use generics for the list
+        List<String> tokens = new ArrayList<>();
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
+            // if stopAtNonOption enabled, and we already hit a non-option,
+            // or encountered "--", just add remaining args
+            if (eatTheRest)
+            {
+                tokens.add(arg);
+                continue; // continue to next arg
+            }
+
             if ("--".equals(arg))
             {
-                eatTheRest = true;
                 tokens.add("--");
+                eatTheRest = true; // Subsequent arguments are not options
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
-            else if (arg.startsWith("-"))
+            else if (arg.startsWith("--")) // Handle long options (--opt, --opt=value)
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                int eq = arg.indexOf('=');
+                // Get the option name (the part before '=')
+                String optToken = (eq == -1) ? arg : arg.substring(0, eq); // e.g., "--foo"
 
-                if (options.hasOption(opt))
+                if (options.hasOption(optToken)) // Check if the potential option is known
                 {
+                    tokens.add(optToken); // Add the option token, e.g. "--foo"
+                    if (eq != -1) // If there was an '=', add the value
+                    {
+                        tokens.add(arg.substring(eq + 1)); // e.g., "bar"
+                    }
+                }
+                else // The token is not a recognized long option
+                {
+                    // If stopAtNonOption is enabled, we should stop processing options
+                    if (stopAtNonOption)
+                    {
+                        eatTheRest = true;
+                    }
+                    // Add the uninterpreted argument as-is. The parser can decide if it's an error.
                     tokens.add(arg);
                 }
-                else
+            }
+            else if (arg.startsWith("-")) // Handle short options (-o, -o=val, -oval, -oabc, -abc)
+            {
+                int eq = arg.indexOf('=');
+
+                // Case 1: Argument contains '=', e.g., -f=bar, -Lkey=value, -foo=bar
+                if (eq != -1)
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    String optToken = arg.substring(0, eq); // e.g., -f, -L, -foo
+                    String valueToken = arg.substring(eq + 1); // e.g., bar, key=value, bar
+
+                    if (options.hasOption(optToken)) // Check if the part before '=' is a known short option
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        // Standard short option with =, e.g. -f=bar
+                        tokens.add(optToken);
+                        tokens.add(valueToken);
                     }
-                    else
+                    // Gnu specific check: -foo=bar where -foo is not known, but -f is.
+                    else if (optToken.length() >= 2 && options.hasOption(optToken.substring(0, 2)))
                     {
-                        eatTheRest = stopAtNonOption;
-                        tokens.add(arg);
+                        // Treat as -f followed by oo=bar
+                        tokens.add(optToken.substring(0, 2)); // Add "-f"
+                        tokens.add(optToken.substring(2) + "=" + valueToken); // Add "oo=bar"
                     }
+                    else // Unrecognized option before '=', e.g., -X=bar
+                    {
+                        if (stopAtNonOption)
+                        {
+                            eatTheRest = true;
+                        }
+                        tokens.add(arg); // Add the full argument
                     }
                 }
+                // Case 2: Argument does not contain '=', e.g., -f, -fbar, -abc, -foo
                 else
+                {
+                    // Check if the whole arg is a single known option, or Gnu style combines short options/options+values
+                    // Gnu specific check: -fbar -> -f, bar or -foo -> -f, oo
+                    if (arg.length() >= 2 && options.hasOption(arg.substring(0, 2)))
+                    {
+                        // Check if the first character forms a known option
+                        tokens.add(arg.substring(0, 2)); // Add "-f"
+                        tokens.add(arg.substring(2));    // Add "bar" or "oo"
+                    }
+                    // Is the whole argument a single known option? e.g., "-f", "-v"
+                    else if (options.hasOption(arg))
                     {
                         tokens.add(arg);
                     }
-
-            if (eatTheRest)
+                    else // Not a known single option, and first char not a known option (or len < 2)
                     {
-                for (i++; i < arguments.length; i++)
+                        // e.g., "-unrecognized", "-?", "-abc" (where -a not known and clustering handled later)
+                        if (stopAtNonOption)
                         {
-                    tokens.add(arguments[i]);
+                            eatTheRest = true;
+                        }
+                        tokens.add(arg); // Add the full argument
                     }
                 }
             }
+            else // Argument does not start with '-' or '--'
+            {
+                // Treat as a non-option argument
+                if (stopAtNonOption)
+                {
+                    eatTheRest = true; // Stop processing options from here
+                }
+                tokens.add(arg);
+            }
+        }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
