diff --git a/tmp/fc760d11-56e7-4bf0-a789-3f069153153f_buggy.java b/tmp/66ea03c5-6f86-4781-a901-145a7b93e635_fixed.java
index 7e64f1d..312b152 100644
--- a/tmp/fc760d11-56e7-4bf0-a789-3f069153153f_buggy.java
+++ b/tmp/66ea03c5-6f86-4781-a901-145a7b93e635_fixed.java
@@ -1,78 +1,116 @@
+import java.util.ArrayList;
+import java.util.List;
+// Assuming Option, Options, Util classes are available and work as expected.
+// Util.stripLeadingHyphens should remove "-" or "--" from the start of a string.
+
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option}
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        List tokens = new ArrayList();
+        List<String> tokens = new ArrayList<String>(); // Use generics
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
+                // Argument is "--", indicates end of options
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
+                // Argument is "-", treated as a literal argument
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                // Argument starts with "-", could be an option
+                String opt = Util.stripLeadingHyphens(arg); // Remove "-" or "--"
 
+                // Case 1: Check if the stripped token (without hyphens) is a recognized option name.
+                // Handles options like "-v", "--verbose" which are passed as is.
                 if (options.hasOption(opt))
                 {
-                    tokens.add(arg);
+                    tokens.add(arg); // Add the original token with hyphen(s)
                 }
-                else
+                // Case 2: Check for options with an equals sign attached, e.g., "--file=out.txt" or "-f=out.txt" or "-long=val".
+                // Check if the part before "=" is a known option (after stripping hyphens).
+                else if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    // Split arg into the option part (including hyphen(s)) and the value part.
+                    tokens.add(arg.substring(0, arg.indexOf('='))); // e.g., "--file", "-f", "-long"
+                    tokens.add(arg.substring(arg.indexOf('=') + 1)); // e.g., "out.txt", "val"
+                }
+                // Case 3: Handle the special Java property format like "-Dkey=value".
+                // Condition: Starts with a single '-', has length > 2, the first char forms a valid option (e.g., "-D"),
+                //            and the whole stripped token ("Dkey=value") is NOT a valid option itself.
+                // This is based on the original code's behavior and documentation comment.
+                else if (!arg.startsWith("--") && arg.length() > 2 && options.hasOption(arg.substring(0, 2)) && !options.hasOption(opt))
                 {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    // Split into the short option "-D" and the rest "key=value".
+                    tokens.add(arg.substring(0, 2));
+                    tokens.add(arg.substring(2));
                 }
+                // Case 4: Argument starts with "-" but does not match any known option or pattern above.
+                // This includes unrecognized options like "-unrec", "--unrecognized", or "--unrec=val" where "unrec" is not defined.
+                // Pass it through unmodified. The calling parser should handle unrecognized options.
                 else
                 {
-                        eatTheRest = stopAtNonOption;
                     tokens.add(arg);
+                    // If stopAtNonOption is true, encountering such an argument should stop option processing.
+                    if (stopAtNonOption)
+                    {
+                        eatTheRest = true;
                     }
                 }
             }
-            else
+            else // Argument does not start with "-"
             {
+                // Argument is a non-option argument (e.g., a filename).
                 tokens.add(arg);
+                // If stopAtNonOption is true, this non-option argument stops further option processing.
+                if (stopAtNonOption)
+                {
+                    eatTheRest = true;
+                }
             }
 
+            // If "--" was found, or stopAtNonOption triggered 'eatTheRest' by encountering
+            // a non-option argument or an unrecognized argument starting with "-".
             if (eatTheRest)
             {
-                for (i++; i < arguments.length; i++)
+                // Add all remaining arguments directly to the token list without further processing.
+                // Increment i because the current argument (which triggered eatTheRest or was "--") is already handled.
+                i++;
+                for (; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
+                // The outer loop terminates correctly after this inner loop finishes
+                // because 'i' will be >= arguments.length.
             }
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
