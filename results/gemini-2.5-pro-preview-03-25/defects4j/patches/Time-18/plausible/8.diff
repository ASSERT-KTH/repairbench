diff --git a/tmp/1d747b03-fd33-440b-ae9c-c87422603f43_buggy.java b/tmp/e6fb611b-fd89-4a45-af57-43b628c218ea_fixed.java
index be2af16..fa38ec2 100644
--- a/tmp/1d747b03-fd33-440b-ae9c-c87422603f43_buggy.java
+++ b/tmp/e6fb611b-fd89-4a45-af57-43b628c218ea_fixed.java
@@ -1,29 +1,69 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        long instantG;
+        try {
+            // Calculate using Gregorian rules first.
+            instantG = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+        } catch (IllegalArgumentException e) {
+            // When the Gregorian calculation fails, it might be because the
+            // date is before the cutover and only valid in the Julian calendar.
+            // Calculate using Julian rules. If this fails, then the date is invalid.
+            // If it succeeds, check the resulting instant against the cutover.
+            long instantJ;
+            try {
+                instantJ = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            } catch (IllegalArgumentException e2) {
+                // Failed in both Gregorian and Julian systems. Rethrow the original exception.
+                throw e;
+            }
+            
+            // Gregorian calculation failed, but Julian succeeded.
+            // If the Julian instant is before the cutover, then it's valid.
+            if (instantJ < iCutoverMillis) {
+                 return instantJ;
+            } else {
+                 // Otherwise, the date is invalid. The fields resolved to a Julian date
+                 // on or after the cutover, but the fields are invalid for the
+                 // Gregorian calendar. This situation implies an invalid date.
+                 // Rethrow the original Gregorian exception.
+                 throw e;
+            }
+        }
+
+        // Gregorian calculation succeeded. Check if the instant is before the cutover.
+        if (instantG < iCutoverMillis) {
+            // The instant calculated using Gregorian rules is before the cutover.
+            // Calculate the instant using Julian rules.
+            long instantJ = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            
+            // If the Julian instant is on or after the cutover, the date is invalid
+            // because it falls within the cutover gap.
+            if (instantJ >= iCutoverMillis) {
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            
+            // The date is before the cutover. Per GJ chronology rules, use the
+            // Julian calculation.
+            return instantJ;
+        } else {
+            // The instant calculated using Gregorian rules is on or after the cutover.
+            // Use the Gregorian calculation.
+            return instantG;
         }
-        return instant;
     }
\ No newline at end of file
