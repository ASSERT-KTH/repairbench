diff --git a/tmp/94c01d53-419b-43c7-99e9-e42c106df45f_buggy.java b/tmp/a3b86592-ba0b-4604-86c9-cdad7179463f_fixed.java
index be2af16..1505e98 100644
--- a/tmp/94c01d53-419b-43c7-99e9-e42c106df45f_buggy.java
+++ b/tmp/a3b86592-ba0b-4604-86c9-cdad7179463f_fixed.java
@@ -1,29 +1,79 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // Try Gregorian calculation first. This is assumed by default
+            // for dates on or after the cutover.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+            
+            // If the Gregorian date is potentially before the cutover, verify
+            // logic further down. If it's on or after, we are done with this part.
+
+        } catch (IllegalArgumentException ex) {
+            // Gregorian calculation failed. This might be because the date is
+            // valid under Julian rules but not Gregorian (e.g., Feb 29, 1500).
+            
+            // Try Julian calculation. If it also fails, let the exception propagate upwards.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+
+            // If Julian calculation succeeded, check if it falls before the cutover.
+            if (instant < iCutoverMillis) {
+                // Valid Julian date before the cutover - return it.
+                return instant;
+            } else {
+                // Valid Julian date, but on or after the cutover instant.
+                // In GJChronology, dates on or after the cutover must be Gregorian.
+                // Since the Gregorian calculation failed, this date doesn't exist in GJ terms.
+                // Example: Fields that represent a date that would be valid in Julian
+                // if the calendar continued indefinitely, but falls after the cutover date.
+                throw new IllegalArgumentException("Specified date does not exist in GJ chronology");
+                // Alternative: could re-throw ex, but this message is more specific to GJ context.
+            }
+        }
+
+        // Gregorian calculation succeeded. 'instant' holds the Gregorian millis.
+        // We must now check if this date should actually be Julian based on the cutover.
+        if (instant < iCutoverMillis) {
+            // The Gregorian interpretation falls before the cutover instant.
+            // This means the date should be interpreted using the Julian calendar.
+            
+            // Recalculate using Julian. We expect this to succeed because the fields
+            // were valid enough for the Gregorian calculation to succeed initially.
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // Check if the Julian interpretation falls into the "gap" - the period
+            // skipped during the calendar transition. This happens if the date fields
+            // specify a date that exists notionally in Gregorian before the cutover, 
+            // but the same date fields interpreted in Julian result in an instant 
+            // on or after the cutover.
+            // Example: 1582-10-10 in the standard switch. Valid Gregorian fields,
+            // results in instant before cutover. Julian fields 1582-10-10 result
+            // in instant >= cutover. This date is in the gap.
+            if (julianInstant >= iCutoverMillis) {
+                // Date is in the cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
-        }
+            
+            // Valid Julian date before the cutover.
+            return julianInstant;
+        } else {
+            // The Gregorian date is on or after the cutover. Return the Gregorian instant.
             return instant;
         }
+    }
\ No newline at end of file
