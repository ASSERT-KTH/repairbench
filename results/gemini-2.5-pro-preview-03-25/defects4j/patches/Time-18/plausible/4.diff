diff --git a/tmp/5525cac9-a5e0-417f-b77c-0e9c3650d505_buggy.java b/tmp/9e8b1f32-b01e-4fa4-b001-d5365b295bbc_fixed.java
index be2af16..51df79e 100644
--- a/tmp/5525cac9-a5e0-417f-b77c-0e9c3650d505_buggy.java
+++ b/tmp/9e8b1f32-b01e-4fa4-b001-d5365b295bbc_fixed.java
@@ -1,29 +1,83 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+            // Delegate if base is set
+            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
+        IllegalArgumentException gregorianException = null;
         long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+
+        // Try Gregorian calculation first
+        try {
+            instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // Gregorian calculation succeeded.
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
-            }
-        }
+                // Instant is on or after the cutover, Gregorian calculation is correct.
                 return instant;
             }
+            // If Gregorian calculation succeeded, but represents an instant *before*
+            // the cutover, it implies this date should have been Julian.
+            // Fall through to the Julian calculation block below.
+
+        } catch (IllegalArgumentException e) {
+            // Gregorian calculation failed (e.g., invalid date like 1500-02-29).
+            // Store the exception and proceed to try Julian, as it might be a valid Julian date.
+            gregorianException = e;
+            // Set instant to a value that won't be accidentally returned.
+            // The actual value doesn't matter here as control flow dictates what happens next.
+            instant = Long.MIN_VALUE; // Or any value clearly indicating failure/pending state
+        }
+
+        // If we are here, either:
+        // 1. Gregorian calculation failed (gregorianException != null).
+        // 2. Gregorian calculation succeeded, but the calculated instant was < iCutoverMillis.
+
+        // Try Julian calculation
+        try {
+            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // Julian calculation succeeded.
+            // Check if this Julian date falls into the Gregorian period (gap or after).
+            if (julianInstant >= iCutoverMillis) {
+                // A date specified by these fields calculates to a Julian instant
+                // on or after the cutover. This implies the date falls into the
+                // "gap" where the switch from Julian to Gregorian occurred,
+                // or represents a time where the Gregorian calendar should be used
+                // but was calculated using Julian rules due to earlier checks.
+                // In either case, according to the GJ Chronology rules, this date
+                // specification is invalid as it creates ambiguity or falls in the gap.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+
+            // Otherwise (julianInstant < iCutoverMillis), the Julian instant is correct
+            // because we are either dealing with a date clearly before the cutover,
+            // or the Gregorian calculation failed suggesting it should be Julian.
+            return julianInstant;
+
+        } catch (IllegalArgumentException e) {
+            // Julian calculation also failed.
+            // If the Gregorian calculation had also failed previously (gregorianException != null),
+            // it indicates the date is invalid under both calendar systems' rules
+            // (or at least invalid under Gregorian and the attempt to interpret as Julian also failed).
+            // Rethrow the original Gregorian exception as it likely represents the primary validation failure
+            // encountered when initially checking against the Gregorian system (which is the default
+            // for dates after the cutover).
+            if (gregorianException != null) {
+                throw gregorianException;
+            }
+            // If Gregorian succeeded (but its instant was < cutover) and Julian failed,
+            // it means the date fields yielded a pre-cutover instant with Gregorian rules
+            // (suggesting Julian should apply), but the date is invalid according to Julian rules.
+            // In this case, the Julian exception correctly reflects the reason for failure.
+            throw e;
+        }
+    }
\ No newline at end of file
