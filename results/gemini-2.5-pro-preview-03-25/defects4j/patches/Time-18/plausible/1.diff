diff --git a/tmp/53d4b4e8-302e-4e0e-84f9-e42ca22fcb4a_buggy.java b/tmp/c03b15e8-9a4e-4630-a3a0-c81fdb4500bb_fixed.java
index be2af16..128842f 100644
--- a/tmp/53d4b4e8-302e-4e0e-84f9-e42ca22fcb4a_buggy.java
+++ b/tmp/c03b15e8-9a4e-4630-a3a0-c81fdb4500bb_fixed.java
@@ -1,29 +1,71 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        long gregorianMillis = Long.MIN_VALUE; // Sentinel for "not calculated" or "failed"
+        boolean gregorianFailed = false;
+
+        // Try Gregorian calculation first
+        try {
+            gregorianMillis = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+        } catch (IllegalArgumentException e) {
+            // Date is potentially invalid in Gregorian calendar (eg. Feb 29 non-leap year).
+            // It Might be Julian or truly invalid. Allow specific exceptions like
+            // IllegalFieldValueException to be caught here.
+            gregorianFailed = true;
+            // Keep gregorianMillis as Long.MIN_VALUE
+        }
+
+        // If Gregorian calculation succeeded AND the resulting instant is at or after the cutover, use it.
+        if (!gregorianFailed && gregorianMillis >= iCutoverMillis) {
+            return gregorianMillis;
+        }
+
+        // Otherwise (Gregorian failed or instant is before cutover), calculate using Julian.
+        // We prioritize Julian interpretation for dates before the cutover instant.
+        long julianMillis;
+        try {
+             julianMillis = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        } catch (IllegalArgumentException e) {
+            // If Gregorian also failed, then the date is likely invalid in Julian too.
+            // Re-throw the exception from the Julian calculation, as it's the one we tried last
+            // for the pre-cutover logic path.
+             if (gregorianFailed) {
+                  throw e;
+             } else {
+                  // Gregorian succeeded but was < cutover, and Julian failed.
+                  // This implies the date might be valid proleptic Gregorian before the cutover,
+                  // but is explicitly invalid in Julian. Since we prioritize Julian rules
+                  // before the cutover, a failure here means invalid input according to GJ rules.
+                  throw e;
+             }
+        }
+
+        // If the Julian instant is strictly before the cutover, use it.
+        // This correctly handles dates like 1500-02-29 (valid Julian, invalid Gregorian).
+        // It also handles cases where Gregorian might have succeeded proleptically (< cutover)
+        // but Julian interpretation is preferred before the cutover.
+        if (julianMillis < iCutoverMillis) {
+             return julianMillis;
+        }
+
+        // If we reach here:
+        // 1. Gregorian failed OR Gregorian succeeded but gregorianMillis < iCutoverMillis
+        // 2. Julian succeeded AND julianMillis >= iCutoverMillis
+        // This implies the date falls into the cutover gap (a time that doesn't exist
+        // in the GJ timeline). Even if Gregorian succeeded proleptically (< cutover),
+        // the fact that the Julian interpretation falls >= cutover identifies the gap.
         throw new IllegalArgumentException("Specified date does not exist");
     }
\ No newline at end of file
-        }
-        return instant;
-    }
