diff --git a/tmp/f69b5425-4c31-4c8a-bd23-7ebca4df2fc7_buggy.java b/tmp/2442762c-1380-438f-933c-c9715f81dbb4_fixed.java
index be2af16..09384c0 100644
--- a/tmp/f69b5425-4c31-4c8a-bd23-7ebca4df2fc7_buggy.java
+++ b/tmp/2442762c-1380-438f-933c-c9715f81dbb4_fixed.java
@@ -1,29 +1,63 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        // Calculate using Julian first, as it comes chronologically before Gregorian
+        // This fixes bugs related to dates like 1500-02-29 which is valid Julian but invalid Gregorian
+        long julianInstant;
+        try {
+             julianInstant = iJulianChronology.getDateTimeMillis(
+                year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        } catch (IllegalArgumentException e) {
+            // If Julian calculation fails, it might be a Gregorian date after the cutover,
+            // or just an invalid date. Try Gregorian. If it also fails, the exception
+            // will propagate correctly. If it succeeds, the logic below handles it.
+             return iGregorianChronology.getDateTimeMillis(
+                year, monthOfYear, dayOfMonth,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+             // Note: If Gregorian succeeds here, it must be >= cutover, otherwise
+             // something is wrong. But the checks below handle the cutover comparison.
+             // This path is mainly for invalid dates under Julian (e.g., 1500-02-30)
+             // or dates valid only in Gregorian post-cutover.
+        }
+
+
+        // If the Julian instant is before the cutover, it's the correct instant.
+        if (julianInstant < iCutoverMillis) {
+            return julianInstant;
+        }
+
+        // If julianInstant is >= cutover, the date might be Gregorian, or in the gap.
+        // Calculate the Gregorian instant.
+        long gregorianInstant;
+        try {
+            gregorianInstant = iGregorianChronology.getDateTimeMillis(
+                year, monthOfYear, dayOfMonth,
+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException e) {
+            // Gregorian calculation failed (e.g., for a date in the gap like 1582-10-10).
+            // Since the Julian calculation succeeded and yielded an instant >= cutover,
+            // this signifies the date must be in the non-existent gap.
+            throw new IllegalArgumentException("Specified date does not exist", e);
+        }
+
+        // If Gregorian instant is >= cutover, it's the correct instant.
+        if (gregorianInstant >= iCutoverMillis) {
+            return gregorianInstant;
+        } else {
+            // If we get here:
+            // - Julian calculation succeeded with instant >= cutover.
+            // - Gregorian calculation succeeded with instant < cutover.
+            // This combination defines the cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
\ No newline at end of file
-        return instant;
-    }
