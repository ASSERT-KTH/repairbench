diff --git a/tmp/1273c4d5-25ea-44e6-a932-21d44ce45751_buggy.java b/tmp/693851ab-52a1-4075-a985-327740ebabff_fixed.java
index be2af16..95bd104 100644
--- a/tmp/1273c4d5-25ea-44e6-a932-21d44ce45751_buggy.java
+++ b/tmp/693851ab-52a1-4075-a985-327740ebabff_fixed.java
@@ -1,29 +1,72 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // Try Gregorian calculation first.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // Okay, Gregorian calculation succeeded.
+
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+                // Instant is before the cutover estimate. It might be Julian.
+                // Calculate the Julian instant anyway to detect the gap.
+                long julianInstant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+
+                if (julianInstant >= iCutoverMillis) {
+                    // The Julian instant is on or after the cutover, but the
+                    // Gregorian instant is before the cutover. This means the
+                    // date is in the cutover gap.
                     throw new IllegalArgumentException("Specified date does not exist");
                 }
-        }
+                // Both Gregorian and Julian instants are before the cutover.
+                // The date must be verified by the Julian calendar rules.
+                // Note: We return the Julian instant, not the Gregorian one,
+                // because the GJChronology uses Julian rules before the cutover.
+                return julianInstant;
+            } else {
+                // Instant is on or after the cutover estimate. Assume Gregorian.
                 return instant;
             }
+
+        } catch (IllegalArgumentException e) {
+            // Gregorian calculation failed. This can happen if the date is invalid
+            // in Gregorian (eg Gregorian leap year rules) but valid in Julian.
+            // It can also happen if the date is truly invalid (eg Feb 30).
+
+            // Calculate the Julian instant. If this fails too, the original exception
+            // (or a new one from Julian) will propagate correctly.
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // Julian calculation succeeded.
+
+            if (julianInstant < iCutoverMillis) {
+                // The Julian instant is before the cutover. Since the Gregorian
+                // calculation failed, we assume this is a valid Julian date
+                // before the cutover (like 1500-02-29).
+                return julianInstant;
+            } else {
+                // The Julian instant is on or after the cutover. However, the
+                // Gregorian calculation failed. This means the date doesn't
+                // exist in the Gregorian calendar after the cutover but would
+                // have existed in Julian (like 1700-02-29). Therefore, it is
+                // invalid in GJChronology.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+        }
+    }
\ No newline at end of file
