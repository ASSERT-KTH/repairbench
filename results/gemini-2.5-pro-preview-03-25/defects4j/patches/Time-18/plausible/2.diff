diff --git a/tmp/d648edce-374e-4d10-82de-5ef2f9aeac0e_buggy.java b/tmp/be5a66c1-ea18-4fa5-904d-b38a88c8bb0a_fixed.java
index be2af16..e2bf6ff 100644
--- a/tmp/d648edce-374e-4d10-82de-5ef2f9aeac0e_buggy.java
+++ b/tmp/be5a66c1-ea18-4fa5-904d-b38a88c8bb0a_fixed.java
@@ -1,29 +1,77 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
+            // Delegate to the base chronology if it exists.
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // Attempt calculation using the Gregorian calendar first.
+            // This is generally preferred for dates after the cutover.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } catch (IllegalArgumentException e) {
+            // The specified date fields are invalid according to the proleptic Gregorian calendar.
+            // This might be because it's a Julian-only date (like Feb 29, 1500) valid before the cutover.
+            // Or it could be genuinely invalid date fields (like Feb 30).
+            // We must attempt the calculation using the Julian calendar to check the first possibility.
+
+            // Calculate using Julian calendar. If this also throws, the date is definitively invalid
+            // (as it's invalid in both Gregorian and Julian contexts).
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // If the Julian calculation succeeded, we need to ensure it falls *before* the cutover.
+            // A date specified by fields that are valid in Julian but not Gregorian,
+            // and which calculates to an instant *at or after* the cutover,
+            // is considered invalid in GJChronology (e.g., Feb 29, 1700).
+            // This is because Gregorian rules should apply at or after the cutover, and the
+            // date was already found invalid under those rules (exception 'e').
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                 // The date is invalid under Gregorian rules (initial exception e),
+                 // and even if interpreted as Julian, it falls at or after the cutover where Gregorian should apply.
+                 // Thus, the original assessment of invalidity holds. Re-throw the original exception.
+                 throw e;
+            }
+            // Otherwise (Julian calculation succeeded and instant < iCutoverMillis),
+            // this is a valid Julian date before the cutover. Return it.
+            return instant;
+        }
+
+        // Gregorian calculation succeeded. Now, check if the resulting instant
+        // falls before or after the cutover instant.
+        if (instant < iCutoverMillis) {
+            // The Gregorian date maps to a time before the cutover.
+            // According to GJChronology rules, dates before the cutover must use the Julian calendar rules.
+            // We must recalculate using Julian.
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // There's a special case: the cutover gap.
+            // If the date fields represented a valid Gregorian date mapping before the cutover instant, AND
+            // the same fields represent a valid Julian date mapping *at or after* the cutover instant,
+            // then the date falls into the gap (e.g., Oct 10, 1582, depending on exact cutover).
+            // Such dates do not exist in GJChronology.
+            if (julianInstant >= iCutoverMillis) {
+                // It's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
-        }
+            // Otherwise, the Julian interpretation is valid and represents the correct instant
+            // for a date specified before the cutover. Use the Julian instant.
+            return julianInstant;
+        } else {
+            // The Gregorian date maps to a time at or after the cutover.
+            // This is correct according to GJChronology rules. Use the Gregorian instant.
             return instant;
         }
+    }
\ No newline at end of file
