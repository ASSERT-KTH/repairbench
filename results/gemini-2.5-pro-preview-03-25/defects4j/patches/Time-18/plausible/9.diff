diff --git a/tmp/aec35a94-0456-43d9-aa6c-3b89d1110328_buggy.java b/tmp/5273fc97-d0cc-492e-b202-5196876c5d06_fixed.java
index be2af16..2974aab 100644
--- a/tmp/aec35a94-0456-43d9-aa6c-3b89d1110328_buggy.java
+++ b/tmp/5273fc97-d0cc-492e-b202-5196876c5d06_fixed.java
@@ -1,29 +1,67 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // First try using Gregorian chronology. This will throw an exception
+            // if the date is invalid in Gregorian (like 1500-02-29).
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } catch (IllegalArgumentException e) {
+            // The Gregorian date calculation failed.
+            // This might be because the date is invalid in Gregorian but valid in Julian
+            // (eg. 1500-02-29), especially for dates before the cutover.
+            // Let's try the Julian chronology. If this also throws, the date is invalid in both.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // If the Julian calculation succeeded, we need to ensure the resulting instant
+            // falls *before* the cutover time. If it falls at or after the cutover,
+            // it means the date specified using components (which failed Gregorian validation)
+            // corresponds to a time instant within or after the Gregorian switch, implying
+            // it falls into the 'gap' or is otherwise inconsistent.
             if (instant >= iCutoverMillis) {
+                // The instant calculated using Julian fields occurs after the cutover.
+                // This indicates the original date specification is invalid within GJChronology,
+                // typically falling into the cutover gap.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            // If we are here, the date was invalid Gregorian, but valid Julian and falls before the cutover.
+            // So, we return the Julian instant.
+            return instant;
+        }
+
+        // The Gregorian calculation succeeded. Now, check if the resulting instant
+        // falls before the cutover. If it does, the date should actually be Julian.
+        if (instant < iCutoverMillis) {
+            // The Gregorian instant is before the cutover. This date should be treated as Julian.
+            // Recalculate using Julian chronology.
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            
+            // Sanity check: If the Julian instant is at or after the cutover,
+            // it implies the date falls within the 'gap' where dates were skipped
+            // during the Gregorian calendar adoption.
+            if (julianInstant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
-        }
+            // The date is valid and falls before the cutover, return the Julian instant.
+            return julianInstant;
+        } else {
+            // The Gregorian instant is at or after the cutover. This is the correct instant.
             return instant;
         }
+    }
\ No newline at end of file
