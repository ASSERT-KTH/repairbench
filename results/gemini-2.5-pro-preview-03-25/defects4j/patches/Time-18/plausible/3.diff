diff --git a/tmp/d1bb35e5-742d-4f5d-b048-24896ed4cdf7_buggy.java b/tmp/c63444c9-39c4-4a86-b7ec-9de5635016f8_fixed.java
index be2af16..bbcfdda 100644
--- a/tmp/d1bb35e5-742d-4f5d-b048-24896ed4cdf7_buggy.java
+++ b/tmp/c63444c9-39c4-4a86-b7ec-9de5635016f8_fixed.java
@@ -1,29 +1,61 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // Try Gregorian calculation first. Handles dates strictly after the cutover.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // If the calculated instant is STRICTLY before the cutover,
+            // it is either a valid Julian date or falls into the gap.
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+                // It's before the cutover, so recalculate using Julian chronology.
+                // This corrects for dates that are valid in both calendars but occurred before the cutover.
                 instant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                // If the Julian instant is on or after the cutover, the date is invalid (gap).
                  if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                    // The date is valid Gregorian before the cutover but Julian after or on the cutover
                     throw new IllegalArgumentException("Specified date does not exist");
                  }
+                 // Otherwise, it's a valid Julian date before the cutover.
             }
+            // If the Gregorian instant was >= cutoverMillis, it's a valid Gregorian date post-cutover.
+            // The value in 'instant' is correct.
+
+        } catch (IllegalArgumentException e) {
+            // The Gregorian calculation failed.
+            // This can happen if the date is invalid Gregorian (e.g., Feb 29 in non-leap Gregorian year)
+            // OR if it's in the Gregorian cutover gap (e.g., 1582-10-10).
+            // Try the calculation using Julian.
+            instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // If the Julian calculation succeeds, check if the instant is before the cutover.
+            // If it's on or after the cutover, it means the date is valid in Julian but not Gregorian,
+            // and occurs chronologically after the cutover started, so it's in the gap.
+            if (instant >= iCutoverMillis) {
+                // Input date is valid Julian, but not valid Gregorian, and is after the cutover.
+                // Must be in the gap.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            // Otherwise, the date is valid Julian and occurred before the cutover.
+            // The value in 'instant' is correct.
+        }
+
+        // Return the calculated instant (either Julian pre-cutover or Gregorian post-cutover)
         return instant;
     }
\ No newline at end of file
