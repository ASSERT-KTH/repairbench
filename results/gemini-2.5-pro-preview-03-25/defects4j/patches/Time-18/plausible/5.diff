diff --git a/tmp/309b7bb2-3772-4a2b-9f97-962c4c45b9e8_buggy.java b/tmp/1f87cd99-ba7f-48c8-9b53-3a6acab2d92e_fixed.java
index be2af16..bee68b5 100644
--- a/tmp/309b7bb2-3772-4a2b-9f97-962c4c45b9e8_buggy.java
+++ b/tmp/1f87cd99-ba7f-48c8-9b53-3a6acab2d92e_fixed.java
@@ -1,29 +1,65 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        long instantGregorian;
+        try {
+             // Try Gregorian calculation first; it's the most common case post-cutover.
+             instantGregorian = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+         } catch (IllegalArgumentException e) {
+             // When Gregorian fails, possibly due to the date being valid only in Julian
+             // before the cutover (like Feb 29, 1500). Calculate using Julian.
+             // If Julian calculation also throws an exception, let it propagate.
+             long instantJulianCatch = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+
+             // Gregorian failed, but Julian succeeded. Check if the Julian date is before the cutover.
+             if (instantJulianCatch < iCutoverMillis) {
+                 // It's a valid Julian date before the cutover. Return it.
+                 return instantJulianCatch;
+             } else {
+                 // It's a valid Julian date, but it is on or after the cutover.
+                 // Since the Gregorian calculation failed for a date that should be Gregorian,
+                 // this indicates the date is truly invalid in the context of GJChronology.
+                 // Rethrow the original Gregorian exception.
+                 throw e;
+             }
+         }
+
+         // Gregorian calculation succeeded. Now, check if the calculated instant falls before the cutover.
+         if (instantGregorian < iCutoverMillis) {
+             // The date falls before the cutover according to Gregorian rules.
+             // For dates before the cutover, the Julian calendar is authoritative.
+             // We must calculate the instant using Julian rules to be sure.
+             long instantJulianCheck = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+             if (instantJulianCheck < iCutoverMillis) {
+                 // Both calculations result in an instant before the cutover.
+                 // Use the Julian instant, as it's the correct calendar system before the cutover.
+                 return instantJulianCheck;
+             } else {
+                 // Gregorian instant is before the cutover, but the Julian instant is on or after the cutover.
+                 // This signifies that the date falls into the "gap" where dates were skipped
+                 // during the transition from Julian to Gregorian. This date does not exist.
                  throw new IllegalArgumentException("Specified date does not exist");
              }
+         } else {
+             // instantGregorian >= iCutoverMillis
+             // The date is on or after the cutover according to Gregorian calculation.
+             // This is the correct instant to return.
+             return instantGregorian;
          }
-        return instant;
     }
\ No newline at end of file
