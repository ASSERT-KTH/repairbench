diff --git a/tmp/613650bd-baf7-4b07-b160-7031f4c8dd39_buggy.java b/tmp/7b047825-5496-49eb-85e8-50ccc154f0e0_fixed.java
index 98d89dc..7509073 100644
--- a/tmp/613650bd-baf7-4b07-b160-7031f4c8dd39_buggy.java
+++ b/tmp/7b047825-5496-49eb-85e8-50ccc154f0e0_fixed.java
@@ -1,23 +1,72 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
+        // Note: Assuming InitialContext reset is orthogonal to comparison logic
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
+
+        // Handle iterators first using specific logic
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
+
+        // Default case: numeric or other scalar comparison. Convert to double.
+        // InfoSetUtil likely handles basic type conversions (String->Number etc.)
+        // returning NaN for invalid conversions.
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+        boolean leftIsNaN = Double.isNaN(ld);
+        boolean rightIsNaN = Double.isNaN(rd);
+
+        // Special handling for NaN according to XPath 1.0 Specification (Section 3.4 Booleans)
+        if (leftIsNaN || rightIsNaN) {
+            // Check the type of operation being performed.
+            // We need the actual class types from the compiler package.
+            // Assuming standard naming convention like CoreOperationEqual, CoreOperationNotEqual, etc.
+
+            // Equality operators: = and !=
+            if (this instanceof org.apache.commons.jxpath.ri.compiler.CoreOperationEqual) {
+                // '=' is true if and only if both are NaN
+                return leftIsNaN && rightIsNaN;
+            }
+            if (this instanceof org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual) {
+                // '!=' is true if and only if either is NaN
+                return leftIsNaN || rightIsNaN;
+            }
+
+            // Relational operators: >, <, >=, <=
+            // XPath Spec: If either number is NaN, the result of any <=, <, >=, > comparison will be false.
+            // Check if 'this' is one of the relational operators.
+            if (this instanceof org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan ||
+                this instanceof org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual ||
+                this instanceof org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan ||
+                this instanceof org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual) {
+                return false;
+            }
+
+            // If an unexpected operation type using this compute method encounters NaN,
+            // its behavior is undefined by this fix. However, this block covers
+            // the standard comparison operations.
+        }
+
+        // If neither operand is NaN, perform standard comparison logic.
+        // Use the original comparison method (== and < on doubles) to determine order.
+        // Note: Java's == and < behave as expected for non-NaN doubles, including +/-0.0.
+        int comparison = (ld == rd) ? 0 : (ld < rd ? -1 : 1);
+
+        // Delegate to the specific operation's evaluateCompare method,
+        // which interprets the comparison result (0, -1, 1) based on the operation (>, =, etc.).
+        return evaluateCompare(comparison);
     }
\ No newline at end of file
