diff --git a/tmp/555d277b-d8f4-4648-aea8-3ecdff4a2c99_buggy.java b/tmp/2ad260ca-e46b-4c92-b651-c1985d8a0810_fixed.java
index 98d89dc..1d3e5d7 100644
--- a/tmp/555d277b-d8f4-4648-aea8-3ecdff4a2c99_buggy.java
+++ b/tmp/2ad260ca-e46b-4c92-b651-c1985d8a0810_fixed.java
@@ -1,23 +1,61 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
-        if (left instanceof InitialContext) {
-            ((InitialContext) left).reset();
+        // Reset InitialContext instances if necessary
+        if (left instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {
+            // It's important to use the fully qualified name or ensure InitialContext is imported correctly.
+            // Assuming org.apache.commons.jxpath.ri.axes.InitialContext is the correct class.
+            ((org.apache.commons.jxpath.ri.axes.InitialContext) left).reset();
         }
-        if (right instanceof InitialContext) {
-            ((InitialContext) right).reset();
+        if (right instanceof org.apache.commons.jxpath.ri.axes.InitialContext) {
+            ((org.apache.commons.jxpath.ri.axes.InitialContext) right).reset();
         }
+
+        // Handle Iterator comparisons
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
+
+        // Convert arguments to doubles for comparison
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+
+        // Handle NaN according to XPath comparison rules
+        // XPath rules for NaN:
+        // - NaN = NaN -> true
+        // - NaN = x -> false
+        // - x = NaN -> false
+        // - NaN op NaN -> false (for op in {<, <=, >, >=})
+        // - NaN op x -> false (for op in {<, <=, >, >=})
+        // - x op NaN -> false (for op in {<, <=, >, >=})
+        // - NaN != NaN -> false
+        // - NaN != x -> true
+        // - x != NaN -> true
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // Check the type of comparison operation being performed.
+            // We use instanceof, assuming this method is called by instances of comparison operations.
+            if (this instanceof org.apache.commons.jxpath.ri.compiler.CoreOperationEqual) {
+                // For '=', result is true iff both operands are NaN
+                return Double.isNaN(ld) && Double.isNaN(rd);
+            }
+            if (this instanceof org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual) {
+                // For '!=', result is false iff both operands are NaN
+                return !(Double.isNaN(ld) && Double.isNaN(rd));
+            }
+            // For relational comparisons (<, >, <=, >=), any NaN operand results in false
+            return false;
+        }
+
+        // If neither operand is NaN, perform standard numeric comparison.
+        // The result (-1, 0, or 1) is passed to evaluateCompare, which belongs to the
+        // specific operation subclass (e.g., CoreOperationGreaterThan) and returns the
+        // final boolean result based on the comparison type.
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
\ No newline at end of file
