diff --git a/tmp/d41ce5a4-ad5c-4d50-92e4-a65825c03121_buggy.java b/tmp/3085a106-697a-4bb1-a396-ac74998f568b_fixed.java
index 98d89dc..60dd72b 100644
--- a/tmp/d41ce5a4-ad5c-4d50-92e4-a65825c03121_buggy.java
+++ b/tmp/3085a106-697a-4bb1-a396-ac74998f568b_fixed.java
@@ -1,23 +1,46 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
+            // Delegate comparison to node sets
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
+            // Delegate comparison to node set and atomic value
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
+            // Delegate comparison to node set and atomic value
             return containsMatch((Iterator) right, left);
         }
+
+        // Convert objects to numeric values for comparison
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+        // According to XPath 1.0 spec section 3.4:
+        // When comparing numbers using <, >, <=, >=, if either number is NaN,
+        // the result is false.
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // This method is used for <, >, <=, >= comparisons.
+            // Equality (=, !=) is handled elsewhere (CoreOperationEqual).
+            return false;
+        }
+
+        // Perform standard numeric comparison
+        int compare = ld == rd ? 0 : ld < rd ? -1 : 1;
+        // Note: Double.compare(ld, rd) behaves differently for NaN,
+        // treating NaN as equal to itself and greater than other numbers,
+        // which is not the desired XPath behavior for relational operators.
+
+        // Delegate the final boolean result calculation based on the specific
+        // relational operator (<, >, <=, >=) being evaluated.
+        return evaluateCompare(compare);
     }
\ No newline at end of file
