diff --git a/tmp/4ca54c81-75c3-4def-9d16-8a103985a5a5_buggy.java b/tmp/096e0d1e-cc09-4084-bb6a-231d587cfda0_fixed.java
index 98d89dc..2fd5b52 100644
--- a/tmp/4ca54c81-75c3-4def-9d16-8a103985a5a5_buggy.java
+++ b/tmp/096e0d1e-cc09-4084-bb6a-231d587cfda0_fixed.java
@@ -1,23 +1,55 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
+
+        // Convert arguments to doubles
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+        // Special handling for NaN values according to XPath/JXPath test semantics
+        boolean leftIsNaN = Double.isNaN(ld);
+        boolean rightIsNaN = Double.isNaN(rd);
+
+        // Check if either value is NaN
+        if (leftIsNaN || rightIsNaN) {
+            // Determine the type of comparison operation based on its symbol
+            String symbol = getSymbol(); // Assumes getSymbol() is available from CoreOperation
+
+            // For relational operators (<, <=, >, >=), any NaN operand results in false
+            if (symbol.equals(">") || symbol.equals("<") || symbol.equals(">=") || symbol.equals("<=")) {
+                return false;
+            }
+            // For equality (=), the result is true only if both operands are NaN (based on test expectation)
+            if (symbol.equals("=")) {
+                return leftIsNaN && rightIsNaN;
+            }
+            // For inequality (!=), the result is false only if both operands are NaN
+            if (symbol.equals("!=")) {
+                return !(leftIsNaN && rightIsNaN);
+            }
+            // If the symbol is none of the above comparison symbols, default to false.
+            // This case might indicate an issue or an operation type not handled here.
+            return false;
+        }
+
+        // For non-NaN numeric comparisons, use Double.compare for robustness
+        // Handles +/- Infinity, -0.0 etc. correctly.
+        // Pass the comparison result (-1, 0, or 1) to evaluateCompare.
+        return evaluateCompare(Double.compare(ld, rd));
     }
\ No newline at end of file
