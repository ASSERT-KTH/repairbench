diff --git a/tmp/6d733201-56ed-4742-8474-39706df72bd2_buggy.java b/tmp/320372f9-74f7-48e6-ab7f-a97587d9130f_fixed.java
index 98d89dc..a8e3ac1 100644
--- a/tmp/6d733201-56ed-4742-8474-39706df72bd2_buggy.java
+++ b/tmp/320372f9-74f7-48e6-ab7f-a97587d9130f_fixed.java
@@ -1,23 +1,36 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+        // XPath 1.0 Section 3.5 specifies that relational comparisons
+        // (<, <=, >, >=) involving NaN return false.
+        // CoreOperationRelationalExpression handles these operators.
+        // Equality (=, !=) is handled separately in CoreOperationCompare,
+        // which needs different NaN semantics (NaN = NaN is true in JXPath tests).
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            return false;
+        }
+
+        // Use Double.compare for robust comparison of non-NaN doubles,
+        // including handling of infinities.
+        int comparison = Double.compare(ld, rd);
+        return evaluateCompare(comparison);
     }
\ No newline at end of file
