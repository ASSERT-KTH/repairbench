diff --git a/tmp/27ea37d1-d31e-4469-b329-32e6dfe29a8d_buggy.java b/tmp/d7cd3bde-a0d3-42f9-8d4c-485577242551_fixed.java
index 98d89dc..6d8fc0c 100644
--- a/tmp/27ea37d1-d31e-4469-b329-32e6dfe29a8d_buggy.java
+++ b/tmp/d7cd3bde-a0d3-42f9-8d4c-485577242551_fixed.java
@@ -1,23 +1,39 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+        // XPath 1.0 spec Section 3.4: "The <, <=, >, and >= operators work as follows:
+        // ... If either object to be compared is NaN, then the comparison will be false."
+        // Equality operators (=, !=) are handled differently (often in CoreOperationEqual).
+        // Assuming this compute method is for relational expressions (<, <=, >, >=).
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // For relational comparisons, any NaN results in false.
+            // Note: This logic assumes the concrete class calling this method
+            // is indeed a relational operator. Equality operators might need
+            // different NaN handling depending on specific requirements (e.g., IEEE 754 vs XPath).
+            // However, the failing test ($nan > $nan) indicates a relational operator context.
+             return false;
+        }
+
+        // Use Double.compare for standard non-NaN comparison, which produces -1, 0, or 1.
+        int comparison = Double.compare(ld, rd);
+        return evaluateCompare(comparison);
     }
\ No newline at end of file
