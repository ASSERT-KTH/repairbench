diff --git a/tmp/68527a37-0567-483c-ab42-8af0156750ad_buggy.java b/tmp/9f916e43-32d5-4794-ad0a-68474006ff4a_fixed.java
index 98d89dc..048a07d 100644
--- a/tmp/68527a37-0567-483c-ab42-8af0156750ad_buggy.java
+++ b/tmp/9f916e43-32d5-4794-ad0a-68474006ff4a_fixed.java
@@ -1,23 +1,44 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
+            // Assuming findMatch correctly handles potential NaN values within iterators
+            // according to XPath node-set comparison rules.
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
+            // Assuming containsMatch correctly handles potential NaN values
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
+            // Assuming containsMatch correctly handles potential NaN values
             return containsMatch((Iterator) right, left);
         }
+
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+        // XPath 1.0 specification section 3.4 requires that relational comparisons
+        // (<, >, <=, >=) involving NaN return false.
+        // This check assumes this compute method is used for relational expressions.
+        // Equality expressions (=, !=) might have different handling, particularly
+        // for NaN = NaN, which the tests expect to be true (a common JXPath interpretation).
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // For relational operators, any comparison involving NaN is false.
+            // The evaluateCompare method is not called in this case.
+            return false;
+        }
+
+        // For non-NaN numeric values, use Double.compare which handles
+        // -0.0, +0.0, POSITIVE_INFINITY, NEGATIVE_INFINITY correctly.
+        // Pass the comparison result (-1, 0, or 1) to the specific
+        // operator's evaluation logic.
+        return evaluateCompare(Double.compare(ld, rd));
     }
\ No newline at end of file
