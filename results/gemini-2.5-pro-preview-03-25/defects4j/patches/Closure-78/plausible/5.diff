diff --git a/tmp/8c963c74-2c8b-41ca-a19d-38bbdd3d75de_buggy.java b/tmp/f3f4404e-e52f-4998-8115-e978e6a41e06_fixed.java
index 27e0871..f6f18b5 100644
--- a/tmp/8c963c74-2c8b-41ca-a19d-38bbdd3d75de_buggy.java
+++ b/tmp/f3f4404e-e52f-4998-8115-e978e6a41e06_fixed.java
@@ -1,86 +1,98 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+          // Modulo by zero yields NaN. This is valid JavaScript
+          // but we don't fold it because it is often unintentional. Return
+          // null to indicate that this operation cannot be folded.
+          // error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right); // Removed error reporting
           return null;
         }
         result = lval % rval;
         break;
       case Token.DIV:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+          // Division by zero yields Infinity or NaN. This is valid JavaScript
+          // but we don't fold it because it is often unintentional. Return
+          // null to indicate that this operation cannot be folded.
+          // error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right); // Removed error reporting
           return null;
         }
         result = lval / rval;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
-    // TODO(johnlenz): consider removing the result length check.
-    // length of the left and right value plus 1 byte for the operator.
-    if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
+    // Check if the result is NaN or +/-Infinity. These results are only
+    // foldable if the original expression consisted of constants, because
+    // these results are non-numeric. These are handled later.
 
-        // Do not try to fold arithmetic for numbers > 2^53. After that
-        // point, fixed-point math starts to break down and become inaccurate.
-        Math.abs(result) <= MAX_FOLD_NUMBER) {
-      Node newNumber = Node.newNumber(result);
-      return newNumber;
-    } else if (Double.isNaN(result)) {
+    // Do not try to fold arithmetic for numbers > 2^53 or numbers that
+    // Increase code size. After that point, fixed-point math starts to break
+    // down and become inaccurate.
+    if (!(Math.abs(result) <= MAX_FOLD_NUMBER &&
+          String.valueOf(result).length() <=
+             String.valueOf(lval).length() + String.valueOf(rval).length() + 1)) {
+       // Check for NaN and Infinity. These need to be handled specially.
+       if (Double.isNaN(result)) {
          return Node.newString(Token.NAME, "NaN");
        } else if (result == Double.POSITIVE_INFINITY) {
          return Node.newString(Token.NAME, "Infinity");
        } else if (result == Double.NEGATIVE_INFINITY) {
          return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
-    }
-
+       } else {
+         // Otherwise, don't fold it.
          return null;
        }
+    }
+
+    Node newNumber = Node.newNumber(result);
+    return newNumber;
+  }
\ No newline at end of file
