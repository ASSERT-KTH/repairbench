diff --git a/tmp/f8768db8-4108-439c-8f3f-0429e9b22c7e_buggy.java b/tmp/26000de9-1943-4596-9834-28a64d40b319_fixed.java
index 27e0871..b004a61 100644
--- a/tmp/f8768db8-4108-439c-8f3f-0429e9b22c7e_buggy.java
+++ b/tmp/26000de9-1943-4596-9834-28a64d40b319_fixed.java
@@ -1,86 +1,125 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
+          // Modulo by zero results in NaN, but we don't fold it.
+          // See ECMA-262 section 11.5.3
+          // error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right); // Remove error reporting
+          return null; // Do not fold
         }
         result = lval % rval;
         break;
       case Token.DIV:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
+          // Division by zero results in Infinity, -Infinity, or NaN,
+          // but we don't fold it. See ECMA-262 section 11.5.2
+          // error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right); // Remove error reporting
+          return null; // Do not fold
         }
         result = lval / rval;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
+    // If the result is NaN or +/- Infinity, fold it only if the original
+    // expression was not computing NaN or +/- Infinity itself. This prevents
+    // 0/0 -> NaN, 1/0 -> Infinity, -1/0 -> -Infinity folding.
+    // However, we do want to fold other expressions that produce non-finite
+    // results like Infinity * 0 -> NaN, Infinity * 2 -> Infinity,
+    // Infinity + x -> Infinity.
+    if (Double.isNaN(result)) {
+        if (lval == 0 && rval == 0 && (opType == Token.DIV || opType == Token.MOD)) {
+             // Prevent 0/0 => NaN and 0%0 => NaN folding
+             return null;
+        }
+        if (Double.isNaN(lval) || Double.isNaN(rval)) {
+             // If the operands were already NaN, fold to NaN.
+             return Node.newString(Token.NAME, "NaN");
+        }
+         // Otherwise fold
+        return Node.newString(Token.NAME, "NaN");
+    } else if (result == Double.POSITIVE_INFINITY) {
+        if ((opType == Token.DIV && lval > 0 && rval == 0)) {
+            // Prevent x/0 => Infinity (where x > 0)
+            return null;
+        }
+        if (Double.isInfinite(lval) || Double.isInfinite(rval)) {
+            // If the operands were already Infinity, fold to Infinity.
+            return Node.newString(Token.NAME, "Infinity");
+        }
+         // Otherwise fold
+        return Node.newString(Token.NAME, "Infinity");
+    } else if (result == Double.NEGATIVE_INFINITY) {
+        if ((opType == Token.DIV && lval < 0 && rval == 0)) {
+            // Prevent x/0 => -Infinity (where x < 0)
+             return null;
+        }
+        if (Double.isInfinite(lval) || Double.isInfinite(rval)) {
+             // If the operands were already Infinity/-Infinity, fold result.
+            return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+        }
+         // Otherwise fold
+        return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+    }
+
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
     if (String.valueOf(result).length() <=
         String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
 
         // Do not try to fold arithmetic for numbers > 2^53. After that
         // point, fixed-point math starts to break down and become inaccurate.
         Math.abs(result) <= MAX_FOLD_NUMBER) {
       Node newNumber = Node.newNumber(result);
       return newNumber;
-    } else if (Double.isNaN(result)) {
-      return Node.newString(Token.NAME, "NaN");
-    } else if (result == Double.POSITIVE_INFINITY) {
-      return Node.newString(Token.NAME, "Infinity");
-    } else if (result == Double.NEGATIVE_INFINITY) {
-      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
 
     return null;
   }
\ No newline at end of file
