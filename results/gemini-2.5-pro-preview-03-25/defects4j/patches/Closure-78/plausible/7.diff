diff --git a/tmp/fa3ee718-2e85-4383-a701-cfd8102d96e7_buggy.java b/tmp/2637440e-4ec8-44f9-8f2b-9331ee44f869_fixed.java
index 27e0871..1ad73ae 100644
--- a/tmp/fa3ee718-2e85-4383-a701-cfd8102d96e7_buggy.java
+++ b/tmp/2637440e-4ec8-44f9-8f2b-9331ee44f869_fixed.java
@@ -1,86 +1,112 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+          // Division by zero yields NaN in JS, but we don't attempt to fold it.
+          // See https://github.com/google/closure-compiler/issues/294
+          // error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right); // Removed error reporting
           return null;
         }
         result = lval % rval;
         break;
       case Token.DIV:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+          // Division by zero yields Infinity or -Infinity in JS, but we don't
+          // attempt to fold it.
+          // See https://github.com/google/closure-compiler/issues/294
+          // error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right); // Removed error reporting
           return null;
         }
         result = lval / rval;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
+    // If the result is NaN or Infinite, let the JS VM handle it at runtime.
+    // The vm knows how to handle these cases correctly. Folds involving
+    // +-Infinity are only valid if the other operand is also Infinity. Even then,
+    // we can't be sure of the sign of the result. And folds involving NaN are never
+    // valid. Note that the calculation is done using doubles, which means
+    // 1/0 is Infinity and 0/0 is NaN.
+
+    // Try folding NaN
+    if (Double.isNaN(result)) {
+      return Node.newString(Token.NAME, "NaN");
+    }
+
+    // Try folding Infinity
+    if (result == Double.POSITIVE_INFINITY) {
+      return Node.newString(Token.NAME, "Infinity");
+    }
+
+    // Try folding -Infinity
+    if (result == Double.NEGATIVE_INFINITY) {
+      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+    }
+
+
+    // Don't fold if the result is too big to be represented precisely.
+    if (Math.abs(result) > MAX_FOLD_NUMBER) {
+       return null;
+    }
+
+
+    // Check if the representation is shorter.
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
-    if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
-
-        // Do not try to fold arithmetic for numbers > 2^53. After that
-        // point, fixed-point math starts to break down and become inaccurate.
-        Math.abs(result) <= MAX_FOLD_NUMBER) {
+    String sResult = String.valueOf(result);
+    if (sResult.length() <=
+        String.valueOf(lval).length() + String.valueOf(rval).length() + 1) {
       Node newNumber = Node.newNumber(result);
       return newNumber;
-    } else if (Double.isNaN(result)) {
-      return Node.newString(Token.NAME, "NaN");
-    } else if (result == Double.POSITIVE_INFINITY) {
-      return Node.newString(Token.NAME, "Infinity");
-    } else if (result == Double.NEGATIVE_INFINITY) {
-      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
 
     return null;
   }
\ No newline at end of file
