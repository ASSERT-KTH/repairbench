diff --git a/tmp/14cd406e-57e5-4c3f-9848-5a812b3b1e13_buggy.java b/tmp/e6b46858-4cc9-4f35-a49c-d950f1c57119_fixed.java
index 27e0871..2cbb274 100644
--- a/tmp/14cd406e-57e5-4c3f-9848-5a812b3b1e13_buggy.java
+++ b/tmp/e6b46858-4cc9-4f35-a49c-d950f1c57119_fixed.java
@@ -1,86 +1,112 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+          // Do not fold, as JavaScript execution results in NaN,
+          // but we don't want to report an error or replace it with NaN.
           return null;
         }
         result = lval % rval;
         break;
       case Token.DIV:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+           // Do not fold, as JavaScript execution results in +/-Infinity or NaN,
+           // but we don't want to report an error or replace it.
           return null;
         }
         result = lval / rval;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
+    // Fold the result if it meets the criteria
+
+    // Don't fold NaN, +Infinity, or -Infinity, as the test expects
+    // division/modulo by zero to remain unfolfed. While JS evaluates
+    // 1/0 to Infinity and 1%0 to NaN, folding them might mask legitimate
+    // runtime behavior or increase code size unexpectedly. Other operations
+    // yielding NaN (like 0/0) are implicitly handled by the Double.isNaN check below
+    // if we allow folding for rval==0, but the tests expect 1/0 and 1%0 not to fold.
+    // The MAX_FOLD_NUMBER check also implicitly prevents folding numbers outside
+    // the precise integer range, which might otherwise become Infinity.
+    if (Double.isNaN(result) || Double.isInfinite(result)) {
+        return null;
+    }
+
+
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
+    // Fold if the resulting number isn't larger than the original expression.
     if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
+        NodeUtil.getStringValue(left).length() + NodeUtil.getStringValue(right).length() + 1 &&
 
         // Do not try to fold arithmetic for numbers > 2^53. After that
         // point, fixed-point math starts to break down and become inaccurate.
         Math.abs(result) <= MAX_FOLD_NUMBER) {
       Node newNumber = Node.newNumber(result);
+      // Return the folded node.
       return newNumber;
-    } else if (Double.isNaN(result)) {
-      return Node.newString(Token.NAME, "NaN");
-    } else if (result == Double.POSITIVE_INFINITY) {
-      return Node.newString(Token.NAME, "Infinity");
-    } else if (result == Double.NEGATIVE_INFINITY) {
-      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
+    // } else if (Double.isNaN(result)) {
+    //   // This path is now unreachable due to the check above, but kept
+    //   // for reference if folding NaN becomes desirable again.
+    //   return Node.newString(Token.NAME, "NaN");
+    // } else if (result == Double.POSITIVE_INFINITY) {
+    //   // This path is now unreachable, kept for reference.
+    //   return Node.newString(Token.NAME, "Infinity");
+    // } else if (result == Double.NEGATIVE_INFINITY) {
+    //   // This path is now unreachable, kept for reference.
+    //   return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+    // }
 
+
+    // Return null if folding was not performed.
     return null;
   }
\ No newline at end of file
