diff --git a/tmp/b5fe9522-fb66-4266-87c5-6114f104d2c0_buggy.java b/tmp/c3d8408d-7ed8-428d-8a36-eecbee83dbea_fixed.java
index 27e0871..f52d4e3 100644
--- a/tmp/b5fe9522-fb66-4266-87c5-6114f104d2c0_buggy.java
+++ b/tmp/c3d8408d-7ed8-428d-8a36-eecbee83dbea_fixed.java
@@ -1,86 +1,111 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
+        // JavaScript spec section 11.5.3 says that if the divisor is 0, the
+        // result is NaN. This is Normalized according to Java's spec, but not
+        // specifically stated.
+        // http://code.google.com/p/v8/issues/detail?id=1038 says V8 conforms
+        // to the Java behavior, not the ECMA behavior. We follow V8 here.
+        if (rval == 0.0) {
+           result = Double.NaN;
+        } else {
            result = lval % rval;
+        }
         break;
       case Token.DIV:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
+        // JavaScript spec section 11.5.2 says that if the divisor is 0, the
+        // result is +/-Infinity or NaN. This is normalized according to Java's
+        // spec. Specifically:
+        // 1/0 => Infinity
+        // -1/0 => -Infinity
+        // 0/0 => NaN
+        // Per ECMA spec, we should report this is an error. But Rhino and V8
+        // don't. So we don't either for compatibility.
         result = lval / rval;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
-    if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
+    // The exception is when the operation creates a shorter representation:
+    // e.g. 1000 / 10 -> 100. 1000 -> "1e3"
+    if (!Double.isNaN(result) &&
+          Math.abs(result) < Double.POSITIVE_INFINITY &&
+          (String.valueOf(result).length() <=
+              NodeUtil.getStringValue(left).length() + NodeUtil.getStringValue(right).length() + 1 ||
+           // Always fold if the result is simpler than either operand.
+           String.valueOf(result).length() < NodeUtil.getStringValue(left).length() ||
+           String.valueOf(result).length() < NodeUtil.getStringValue(right).length()) &&
 
         // Do not try to fold arithmetic for numbers > 2^53. After that
         // point, fixed-point math starts to break down and become inaccurate.
         Math.abs(result) <= MAX_FOLD_NUMBER) {
       Node newNumber = Node.newNumber(result);
       return newNumber;
     } else if (Double.isNaN(result)) {
+      // Note: We prefer the literal "NaN" to the Number node representation
+      // of NaN for simplicity and shortness. For example, we prefer "NaN" to
+      // "0/0".
       return Node.newString(Token.NAME, "NaN");
     } else if (result == Double.POSITIVE_INFINITY) {
+      // We prefer the literal "Infinity" to the Number node representation
+      // of Infinity for simplicity and shortness. For example, we prefer
+      // "Infinity" to "1/0".
       return Node.newString(Token.NAME, "Infinity");
     } else if (result == Double.NEGATIVE_INFINITY) {
+      // We prefer the literal "-Infinity" to the Number node representation
+      // of -Infinity for simplicity and shortness. For example, we prefer
+      // "-Infinity" to "-1/0".
       return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
 
     return null;
   }
\ No newline at end of file
