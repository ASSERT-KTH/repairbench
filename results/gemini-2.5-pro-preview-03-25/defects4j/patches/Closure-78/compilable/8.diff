diff --git a/tmp/bbfcf7e2-5be0-4e28-b885-2347905da313_buggy.java b/tmp/91284d96-427f-4618-bdcc-342a7344d498_fixed.java
index 27e0871..05901f1 100644
--- a/tmp/bbfcf7e2-5be0-4e28-b885-2347905da313_buggy.java
+++ b/tmp/91284d96-427f-4618-bdcc-342a7344d498_fixed.java
@@ -1,86 +1,103 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
+        // JavaScript specific behavior for modulo by zero is NaN.
+        // Java's double % double operation produces NaN for x % 0,
+        // which matches the JavaScript behavior. No error should be reported.
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
+          result = Double.NaN; // Explicitly match JS behavior which is NaN.
+        } else {
           result = lval % rval;
+        }
         break;
       case Token.DIV:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
+        // JavaScript specific behavior for division by zero is Infinity or NaN.
+        // Java's double / double operation produces Infinity for x / 0 where x!=0
+        // and NaN for 0 / 0, which matches the JavaScript behavior.
+        // No error should be reported.
         result = lval / rval;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
+    // Fold arithmetic results that are NaN, +/-Infinity, or finite numbers
+    // that satisfy the size and precision constraints.
+
+    // Always fold NaN results.
+    if (Double.isNaN(result)) {
+      return Node.newString(Token.NAME, "NaN");
+    }
+
+    // Always fold +/- Infinity results.
+    if (result == Double.POSITIVE_INFINITY) {
+      return Node.newString(Token.NAME, "Infinity");
+    }
+
+    if (result == Double.NEGATIVE_INFINITY) {
+      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+    }
+
+    // Fold finite results if they meet the criteria.
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
     if (String.valueOf(result).length() <=
         String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
 
         // Do not try to fold arithmetic for numbers > 2^53. After that
         // point, fixed-point math starts to break down and become inaccurate.
         Math.abs(result) <= MAX_FOLD_NUMBER) {
       Node newNumber = Node.newNumber(result);
       return newNumber;
-    } else if (Double.isNaN(result)) {
-      return Node.newString(Token.NAME, "NaN");
-    } else if (result == Double.POSITIVE_INFINITY) {
-      return Node.newString(Token.NAME, "Infinity");
-    } else if (result == Double.NEGATIVE_INFINITY) {
-      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
 
+    // Otherwise, don't fold (e.g. if the result was a finite number that
+    // didn't meet the length/magnitude criteria).
     return null;
   }
\ No newline at end of file
