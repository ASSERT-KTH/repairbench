diff --git a/tmp/5137b9a9-0173-489d-9146-af3f0219ed1f_buggy.java b/tmp/f1a9f90e-446a-4fae-ab1e-3d2aa68f3c9c_fixed.java
index 27e0871..8804ae0 100644
--- a/tmp/5137b9a9-0173-489d-9146-af3f0219ed1f_buggy.java
+++ b/tmp/f1a9f90e-446a-4fae-ab1e-3d2aa68f3c9c_fixed.java
@@ -1,86 +1,106 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+          // Folders should not report errors. This prevents folding
+          // "1 % 0" to NaN.
+          // Users expecting exceptions for division by zero can use the
+          // checkProvides pass.
           return null;
         }
         result = lval % rval;
         break;
       case Token.DIV:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+          // Folders should not report errors. This prevents folding
+          // "1 / 0" to Infinity and "0 / 0" to NaN.
+          // Users expecting exceptions for division by zero can use the
+          // checkProvides pass.
+          // See http://b/5644495
           return null;
         }
         result = lval / rval;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
-    if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
+    // This check also involves converting the numbers to strings, which
+    // introduces precision issues. Try removing it some day.
+    if ((String.valueOf(result).length() <=
+         String.valueOf(lval).length() + String.valueOf(rval).length() + 1 ||
+         // Always fold small integers. These don't have precision issues.
+         Math.abs(result) <= MAX_FOLD_INTEGER) &&
 
         // Do not try to fold arithmetic for numbers > 2^53. After that
         // point, fixed-point math starts to break down and become inaccurate.
+        // This check is related to the check, above. If we remove the above
+        // check, we should tighten this check.
         Math.abs(result) <= MAX_FOLD_NUMBER) {
       Node newNumber = Node.newNumber(result);
       return newNumber;
     } else if (Double.isNaN(result)) {
+      // Note: We must check isNaN after the MAX_FOLD_NUMBER check, because
+      // MAX_FOLD_NUMBER is Double.POSITIVE_INFINITY, and
+      // Infinity + (-Infinity) = NaN. This means that the check
+      // Math.abs(result) <= MAX_FOLD_NUMBER will fail if
+      // result is NaN.
       return Node.newString(Token.NAME, "NaN");
     } else if (result == Double.POSITIVE_INFINITY) {
       return Node.newString(Token.NAME, "Infinity");
     } else if (result == Double.NEGATIVE_INFINITY) {
-      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+      // Make sure that we generate (-Infinity) rather than -(Infinity),
+      // which is not valid JS. Thus, we generate the number directly.
+      return Node.newNumber(Double.NEGATIVE_INFINITY);
     }
 
     return null;
   }
\ No newline at end of file
