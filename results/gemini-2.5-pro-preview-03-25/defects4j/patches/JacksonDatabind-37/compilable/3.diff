diff --git a/tmp/2e4eedd1-29c9-4809-86c1-e8cde6a25c05_buggy.java b/tmp/d33fcd76-fc9b-4155-bac0-4bd1108e1707_fixed.java
index e5ad041..13887e5 100644
--- a/tmp/2e4eedd1-29c9-4809-86c1-e8cde6a25c05_buggy.java
+++ b/tmp/d33fcd76-fc9b-4155-bac0-4bd1108e1707_fixed.java
@@ -1,19 +1,33 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+        
+        // 15-Jan-2015, tatu: Not correct; should really re-resolve... -> Fixed below
+        // 25-Mar-2024, AI: Original code incorrectly copied supertype and binding
+        // information from the base type (_class) to the new specialized type (subclass).
+        // This can lead to incorrect type resolution and errors like UnrecognizedPropertyException
+        // if the subclass has different properties or structure than what the incorrect
+        // supertype information implies.
+        // The fix is to create a new SimpleType for the subclass without copying the
+        // superclass, superinterfaces, or bindings from the original type.
+        // We pass empty bindings, assuming this narrowing path is taken for non-generic
+        // subclasses or when base type bindings are not relevant.
+        // We pass null for super-class and super-interfaces, as resolving them correctly
+        // here without TypeFactory is complex and prone to errors; not providing them
+        // is safer than providing incorrect ones. Handlers and 'asStatic' flag are inherited.
+        return new SimpleType(subclass, TypeBindings.emptyBindings(),
+                /* superClass */ null, /* superInterfaces */ null,
                 _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
