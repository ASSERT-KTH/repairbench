diff --git a/tmp/74ddf19c-2810-4cc7-b6e6-df5c902e7b0c_buggy.java b/tmp/98b53a2f-3dab-4713-8a9d-63aab66f4ffe_fixed.java
index e5ad041..48c6086 100644
--- a/tmp/74ddf19c-2810-4cc7-b6e6-df5c902e7b0c_buggy.java
+++ b/tmp/98b53a2f-3dab-4713-8a9d-63aab66f4ffe_fixed.java
@@ -1,19 +1,32 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
+        // note: comparing Class instances works reliably here
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+        // Must check for sub-class relationship (or identical):
+        // (this appears to be optional, but let's do it)
         if (!_class.isAssignableFrom(subclass)) {
              throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                      +_class.getName());
         }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+
+        // Otherwise, need to create new instance. We are not Genealogical,
+        // so let's just create specialization of this type, not replacement.
+        // We also must keep track of type bindings.
+        // And importantly: handlers are specific to the type, CAN NOT be
+        // reused. Let's also NOT reuse relationships, they need to be
+        // re-resolved.
+        // 15-Jan-2016, tatu: This is simpler approach, which may or may not
+        //    work perfectly...
+        // 18-Jun-2016, tatu: As per [databind#1243], we need to consider
+        //    type parameters AND super-type declaration.
+        // 29-Sep-2016, tatu: Seems like passing 'this' requires further changes,
+        //    causes issues like [databind#1391]. So, revert for now
+        // 28-Mar-2021, tatu: [databind#3077]: Except! Abstract types should not block...
+        //   looks like `this` works better than `_superClass` here
+        return new SimpleType(subclass, _bindings, this, /*_superClass,*/ _superInterfaces,
+                // value/type handlers are intentionally NOT passed (see note above)
+                null, null, _asStatic);
     }
\ No newline at end of file
