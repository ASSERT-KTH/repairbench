diff --git a/tmp/a25c4258-cdb6-487a-9e0e-e01cac52daf8_buggy.java b/tmp/046050df-bf75-4b35-a490-15eedd993fc4_fixed.java
index e5ad041..88624db 100644
--- a/tmp/a25c4258-cdb6-487a-9e0e-e01cac52daf8_buggy.java
+++ b/tmp/046050df-bf75-4b35-a490-15eedd993fc4_fixed.java
@@ -1,19 +1,27 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
+        // If identity same, fine
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
+
+        // sanity check: ensure relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
+        //    placeholder values, so no. Seems like this may be possible for
+        //    non-generic types? Let's hold off for now
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+
+        // 15-Jan-2016, tatu: Not correct; should really re-resolve... So let's
+        //   NOT use readily available values but nulls, forcing re-resolution
+        //   (by SimpleType itself, accessing newly provided subclass)
+        //   ... also, need to retain possible value/type handlers
+        // 27-Mar-2017, tatu: Retaining TypeBindings is important, as per [databind#1577]
+        return new SimpleType(subclass, _bindings, /* super-class */ null, /* interfaces */ null,
                 _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
