diff --git a/tmp/5a383e58-23a6-443e-8811-ae4868982344_buggy.java b/tmp/4e6f0ec0-ace3-4a2b-bf1a-8c0e703ac7d2_fixed.java
index e5ad041..df4c3e8 100644
--- a/tmp/5a383e58-23a6-443e-8811-ae4868982344_buggy.java
+++ b/tmp/4e6f0ec0-ace3-4a2b-bf1a-8c0e703ac7d2_fixed.java
@@ -1,19 +1,33 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+        // Resolved type for subclass should be constructed by TypeFactory,
+        // Salim Point #1: preserve type/value handlers
+        // Also: Caching should be fine, as Types are canonicalized
+
+        // 28-Mar-2018, tatu: Let's assume we must have `TypeFactory` accessible
+        //   ... Note: may be problematic if it's null? But assume it won't be
+        //   Need to use `_fromClass` regardless of whether we have super-class/super-ifaces defined,
+        //   since it does class-level resolution properly.
+
+        // 13-Jun-2020, tatu: Accessing `_typeFactory` requires care as it may not
+        //    be assigned yet... but let's assume for now it has been?
+        // TODO: revisit if this assumption does not hold
+        // Note: first arg is Context, could pass `null`? Seems ok based on impl
+        JavaType newType = _typeFactory._fromClass(null, subclass, _bindings);
+
+        // Ok, then let's apply handlers and static flag.
+        if (_valueHandler != null) {
+            newType = newType.withValueHandler(_valueHandler);
+        }
+        if (_typeHandler != null) {
+            newType = newType.withTypeHandler(_typeHandler);
+        }
+        if (_asStatic) {
+            newType = newType.withStaticTyping();
+        }
+        return newType;
     }
\ No newline at end of file
