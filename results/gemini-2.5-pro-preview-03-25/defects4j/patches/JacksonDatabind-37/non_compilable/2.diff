diff --git a/tmp/da6b02c0-60a0-4fc9-8e68-ce1f5b7b61f1_buggy.java b/tmp/b60a5b4d-0597-414b-81bc-662d166f766f_fixed.java
index e5ad041..603a302 100644
--- a/tmp/da6b02c0-60a0-4fc9-8e68-ce1f5b7b61f1_buggy.java
+++ b/tmp/b60a5b4d-0597-414b-81bc-662d166f766f_fixed.java
@@ -1,19 +1,29 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
-        if (_class == subclass) {
+        if (_class == subclass) { // If same class, no narrowing needed
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
+
+        // 15-Jan-2015, tatu: Comment indicated that simple copy constructor is:
+        // "Not correct; should really re-resolve..."
+        // The correct way to handle narrowing is to delegate back to the TypeFactory,
+        // which can properly resolve the bindings, superclass, and superinterfaces
+        // for the new subclass in the context of the original type.
+        // This requires SimpleType to have access to the TypeFactory instance (e.g., via a field _typeFactory).
+        // Assuming _typeFactory field exists and is properly initialized:
+        if (_typeFactory == null) {
+            // Or handle this case appropriately, maybe throw exception or log error
+            // Fallback to old buggy behavior is not a real fix. Throwing exception highlights missing context.
+             throw new IllegalStateException("Cannot narrow SimpleType ("+_class.getName()+" to "+subclass.getName()+") without TypeFactory access");
+        }
+        
+        // Delegate construction of the specialized type to the factory
+        return _typeFactory.constructSpecializedType(this, subclass);
+
+        // Original buggy implementation:
         /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
         return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
                 _valueHandler, _typeHandler, _asStatic);
+        */
     }
