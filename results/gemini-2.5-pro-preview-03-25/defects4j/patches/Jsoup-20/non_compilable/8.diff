diff --git a/tmp/0f9aac9d-3612-41e1-8d60-a5846e5ef7df_buggy.java b/tmp/00f2eb14-58f6-4de6-86e4-af294a9582ea_fixed.java
index db19f52..1626261 100644
--- a/tmp/0f9aac9d-3612-41e1-8d60-a5846e5ef7df_buggy.java
+++ b/tmp/00f2eb14-58f6-4de6-86e4-af294a9582ea_fixed.java
@@ -1,32 +1,119 @@
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+import org.jsoup.helper.Validate;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.UnsupportedCharsetException;
+
+// NOTE: This code assumes the existence of a static final String defaultCharset
+// and a static helper method getCharsetFromContentType(String) in the surrounding class (e.g., DataUtil).
+// For example:
+// static final String defaultCharset = "UTF-8";
+// private static String getCharsetFromContentType(String contentType) { /* implementation */ }
+
+class FixedDataUtil { // Renamed class for clarity, assumes it's part of the original class context
+
+    // Assume these exist in the actual class
+    static final String defaultCharset = "UTF-8"; // or StandardCharsets.UTF_8.name()
+    private static String getCharsetFromContentType(String contentType) {
+        // Dummy implementation for compilation, replace with actual jsoup implementation
+        if (contentType == null) return null;
+        String[] params = contentType.split(";");
+        for (String param : params) {
+            param = param.trim();
+            if (param.startsWith("charset=")) {
+                return param.substring("charset=".length());
+            }
+        }
+        return null;
+    }
+
+
     // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+        String finalCharset = charsetName; // charset used for final parse. Default to specified charset.
+
+        // *** Charset determination and initial decode ***
+        if (charsetName == null) { // determine from meta. safe parse first as UTF-8 or specified default
+            finalCharset = defaultCharset; // Assume default for now
+            try {
+                docData = Charset.forName(finalCharset).decode(byteData).toString();
+            } catch (UnsupportedCharsetException e) {
+                // Should not happen as defaultCharset should be supported. Fallback or rethrow?
+                // For now, rethrow or handle as fatal error, as parsing cannot proceed.
+                 throw new RuntimeException("Unsupported default charset: " + finalCharset, e); // Or handle differently
+            }
+
+            // Check for BOM and strip it *before* parsing for meta tags
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            }
+
+            doc = parser.parseInput(docData, baseUri); // Parse tentatively to find meta tag
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+
+            if (meta != null) {
+                String foundCharset = null;
+                if (meta.hasAttr("http-equiv")) {
+                    foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
+                if (foundCharset == null && meta.hasAttr("charset")) {
+                    foundCharset = meta.attr("charset");
                 }
+
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(finalCharset)) {
+                    foundCharset = foundCharset.trim();
+                    // Check if charset is supported before switching
+                    if (Charset.isSupported(foundCharset)) {
+                        finalCharset = foundCharset; // Update the final charset
+                        byteData.rewind(); // Reset buffer for re-decode
+                        docData = Charset.forName(finalCharset).decode(byteData).toString();
+
+                        // Check for BOM again after re-decoding
+                        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                            docData = docData.substring(1);
+                        }
+                        doc = null; // Mark document for re-parse
+                    }
+                    // If foundCharset is not supported, we stick with the defaultCharset parse (doc is already parsed)
+                }
+                // If meta tag found but charset is same as default or invalid, stick with default parse (doc is already parsed)
+            }
+            // If no meta tag found, stick with default parse (doc is already parsed)
+
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            try {
                  docData = Charset.forName(charsetName).decode(byteData).toString();
+            } catch (UnsupportedCharsetException e) {
+                 // Handle case where specified charset is not supported
+                 // Maybe fallback to default or throw a more specific exception?
+                 // For now, let it propagate up.
+                 throw e;
+            }
+            // Check for BOM and strip it *before* parsing
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            }
+            finalCharset = charsetName; // Final charset is the specified one
+            // doc is initially null, will be parsed below
         }
-        if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
 
+        // *** Final parsing ***
+        if (doc == null) { // If doc is null, we need to parse (because charset was specified, or because we re-decoded)
+                           // docData will contain the correctly decoded (and potentially BOM-stripped) data
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+
+        // Set the output charset to the one actually used for the final successful parse
+        // If finalCharset was null initially and remained null (e.g., default was used but detection failed somehow?),
+        // ensure we set a valid charset. Using the determined/default seems robust.
+        doc.outputSettings().charset(finalCharset);
+
         return doc;
     }
+}
\ No newline at end of file
