diff --git a/tmp/b6436f06-6836-4bf2-aa19-aed74ae3152a_buggy.java b/tmp/547d3c6c-7ba0-4478-9c64-cbbcf4756779_fixed.java
index db19f52..6bf6b62 100644
--- a/tmp/b6436f06-6836-4bf2-aa19-aed74ae3152a_buggy.java
+++ b/tmp/547d3c6c-7ba0-4478-9c64-cbbcf4756779_fixed.java
@@ -1,32 +1,89 @@
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+import org.jsoup.helper.Validate;
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+// Assuming DataUtil.defaultCharset and DataUtil.getCharsetFromContentType are accessible
+// static members/methods within the context where this function resides.
+
     // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
+        final String HINT_CHARSET = DataUtil.defaultCharset; // Use the configured default charset as a hint
+
+        // Initial Decode: Use specified charset or hint if charsetName is null.
+        if (charsetName == null) { // determine from meta. safe parse first using default charset hint
+            docData = Charset.forName(HINT_CHARSET).decode(byteData).toString();
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+
+        // *** Strip BOM ***
+        // If the data started with a BOM, strip it here. The BOM should only be present at the very start,
+        // even if encoded mid-stream by character encoding switching. It should not be present in UTF-8 encode.
+        if (docData.length() > 0 && docData.charAt(0) == 65279) { // Check for BOM (\uFEFF)
+            docData = docData.substring(1);
+        }
+
+        // Auto-detect charset from meta tags if charsetName was null.
+        if (charsetName == null) {
+            // We parsed with the HINT_CHARSET. Now, quickly parse that doc to find meta charset tags.
+            Document earlyDoc = parser.parseInput(docData, baseUri); // Quick parse on BOM-stripped data
+            Element meta = earlyDoc.select("meta[http-equiv=content-type], meta[charset]").first();
+            String foundCharset = null;
+
+            if (meta != null) { // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+                if (meta.hasAttr("http-equiv")) {
+                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+                    // todo: should check charset exists here
+                }
+                if (foundCharset == null && meta.hasAttr("charset")) {
+                    try {
+                        if (Charset.isSupported(meta.attr("charset"))) {
+                             foundCharset = meta.attr("charset");
+                        }
+                    } catch (IllegalCharsetNameException e) {
+                        // ignore unusable charset name
+                    }
+                }
+            }
+
+            // If found a specific charset in the meta tag, and it's different from the hint:
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(HINT_CHARSET)) {
+                // Confirmed charset found! Might be different from the hint. Re-decode.
+                charsetName = foundCharset; // Update the charset to the found one
+                byteData.rewind(); // Rewind the buffer to re-read
+                docData = Charset.forName(foundCharset).decode(byteData).toString();
+
+                // Strip BOM again after re-decoding (very unlikely, but safer)
+                if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                    docData = docData.substring(1);
+                }
+                // doc remains null, indicating the need for a final parse below with the new docData
+            } else { // No useful meta tag found, or found charset is same as hint. Use the initial parse.
+                doc = earlyDoc;
+                // Ensure charsetName is set to the one actually used (the hint) if it was initially null.
+                if (charsetName == null) {
+                     charsetName = HINT_CHARSET;
+                }
+            }
+        }
+        // else: charsetName was specified. docData is decoded and BOM stripped. doc is null, needs final parse.
+
+        // Final Parse: If doc is null, parse the docData (which is now finalized and BOM-stripped).
         if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
+            // This parse happens if:
+            // 1. charsetName was specified from the start.
+            // 2. charsetName was null, but a different charset was detected in meta, requiring re-decode and re-parse.
             doc = parser.parseInput(docData, baseUri);
+        }
+
+        // Set the final determined charset on the document's output settings.
+        // charsetName will hold: the specified charset, the detected charset, or the default hint.
         doc.outputSettings().charset(charsetName);
-        }
+
         return doc;
     }
\ No newline at end of file
