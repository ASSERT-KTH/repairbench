diff --git a/tmp/8c3a8054-927a-4496-8bb3-99cfea8f88e2_buggy.java b/tmp/c3e47c97-7f12-4f17-b9ef-6af35e93176e_fixed.java
index 2955e62..6684dfc 100644
--- a/tmp/8c3a8054-927a-4496-8bb3-99cfea8f88e2_buggy.java
+++ b/tmp/c3e47c97-7f12-4f17-b9ef-6af35e93176e_fixed.java
@@ -1,66 +1,90 @@
     /**
      * @return true if the provided reference and declaration can be safely
      *         inlined according to our criteria
      */
     private boolean canInline(
         Reference declaration,
         Reference initialization,
         Reference reference) {
       if (!isValidDeclaration(declaration)
           || !isValidInitialization(initialization)
           || !isValidReference(reference)) {
         return false;
       }
 
       // If the value is read more than once, skip it.
       // VAR declarations and EXPR_RESULT don't need the value, but other
       // ASSIGN expressions parents do.
       if (declaration != initialization &&
           !initialization.getGrandparent().isExprResult()) {
         return false;
       }
 
       // Be very conservative and do no cross control structures or
       // scope boundaries
       if (declaration.getBasicBlock() != initialization.getBasicBlock()
           || declaration.getBasicBlock() != reference.getBasicBlock()) {
         return false;
       }
 
       // Do not inline into a call node. This would change
       // the context in which it was being called. For example,
       //   var a = b.c;
       //   a();
       // should not be inlined, because it calls a in the context of b
       // rather than the context of the window.
       //   var a = b.c;
       //   f(a)
       // is ok.
       Node value = initialization.getAssignedValue();
       Preconditions.checkState(value != null);
       if (value.isGetProp()
           && reference.getParent().isCall()
           && reference.getParent().getFirstChild() == reference.getNode()) {
         return false;
       }
 
       if (value.isFunction()) {
         Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
+        // Check if the function is being used within a CALL node.
+        if (callNode.isCall()) {
           CodingConvention convention = compiler.getCodingConvention();
+
           // Bug 2388531: Don't inline subclass definitions into class defining
           // calls as this confused class removing logic.
           SubclassRelationship relationship =
               convention.getClassesDefinedByCall(callNode);
           if (relationship != null) {
+            // Check if the function 'value' (represented by 'reference' at the usage site)
+            // is one of the arguments being passed to the class-defining call.
+            boolean isArg = false;
+            for (Node arg = callNode.getSecondChild(); arg != null; arg = arg.getNext()) {
+              if (arg == reference.getNode()) {
+                isArg = true;
+                break;
+              }
+            }
+            if (isArg) {
+              // Don't inline Foo into goog.addSingletonGetter(Foo)
+              // or Sub/Base into goog.inherits(Sub, Base).
               return false;
             }
+          }
 
           // issue 668: Don't inline singleton getter methods
           // calls as this confused class removing logic.
+          // This check specifically targets calls recognized by the convention
+          // as defining a singleton getter (e.g., goog.addSingletonGetter).
+          // If the reference occurs within such a call, and the value being
+          // inlined is a function, prevent inlining. This might be slightly
+          // redundant with the check above but is added defensively based on
+          // historical context (commit e14d7e4d5d).
+          if (convention.isSingletonGetter(callNode)) {
+            return false;
+          }
         }
       }
 
       return canMoveAggressively(value) ||
           canMoveModerately(initialization, reference);
     }
\ No newline at end of file
