diff --git a/tmp/923a25d2-2bb9-4f7e-8f0d-b26d41ff2404_buggy.java b/tmp/efbc0452-9993-47b7-a67a-32ad48890df4_fixed.java
index 2955e62..7459798 100644
--- a/tmp/923a25d2-2bb9-4f7e-8f0d-b26d41ff2404_buggy.java
+++ b/tmp/efbc0452-9993-47b7-a67a-32ad48890df4_fixed.java
@@ -1,66 +1,76 @@
     /**
      * @return true if the provided reference and declaration can be safely
      *         inlined according to our criteria
      */
     private boolean canInline(
         Reference declaration,
         Reference initialization,
         Reference reference) {
       if (!isValidDeclaration(declaration)
           || !isValidInitialization(initialization)
           || !isValidReference(reference)) {
         return false;
       }
 
       // If the value is read more than once, skip it.
       // VAR declarations and EXPR_RESULT don't need the value, but other
       // ASSIGN expressions parents do.
       if (declaration != initialization &&
           !initialization.getGrandparent().isExprResult()) {
         return false;
       }
 
       // Be very conservative and do no cross control structures or
       // scope boundaries
       if (declaration.getBasicBlock() != initialization.getBasicBlock()
           || declaration.getBasicBlock() != reference.getBasicBlock()) {
         return false;
       }
 
-      // Do not inline into a call node. This would change
-      // the context in which it was being called. For example,
+      Node value = initialization.getAssignedValue();
+      Preconditions.checkState(value != null);
+      Node refNode = reference.getNode();
+      Node refParent = reference.getParent();
+
+
+      // Check 1: Do not inline into a call node if it changes the 'this' binding.
       //   var a = b.c;
       //   a();
-      // should not be inlined, because it calls a in the context of b
+      // should not be inlined to b.c(), because it calls c in the context of b
       // rather than the context of the window.
       //   var a = b.c;
       //   f(a)
       // is ok.
-      Node value = initialization.getAssignedValue();
-      Preconditions.checkState(value != null);
       if (value.isGetProp()
-          && reference.getParent().isCall()
-          && reference.getParent().getFirstChild() == reference.getNode()) {
+          && refParent.isCall()
+          && refParent.getFirstChild() == refNode) {
         return false;
       }
 
-      if (value.isFunction()) {
-        Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
+      // Check 2: Don't inline a FUNCTION into certain types of calls,
+      // as it can break analyses like class inheritance or singleton detection.
+      // This applies when the function is used as an argument to these special calls.
+      //   var F = function(){}; goog.inherits(G, F); => Cannot inline F
+      //   var C = function(){}; goog.addSingletonGetter(C); => Cannot inline C
+      if (value.isFunction() && refParent.isCall()) {
           CodingConvention convention = compiler.getCodingConvention();
-          // Bug 2388531: Don't inline subclass definitions into class defining
-          // calls as this confused class removing logic.
-          SubclassRelationship relationship =
-              convention.getClassesDefinedByCall(callNode);
+
+          // Bug 2388531: Don't inline functions into class defining calls.
+          SubclassRelationship relationship = convention.getClassesDefinedByCall(refParent);
           if (relationship != null) {
               return false;
           }
 
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
+          // issue 668: Don't inline functions into singleton getter definition calls.
+          if (convention.isSingletonGetterCall(refParent)) {
+              return false;
           }
       }
 
+      // TODO(johnlenz): Add more checks, e.g., for 'this'/'arguments' usage if
+      // we relax the basic block constraint.
+
+      // Check 3: Aggressive/Moderate movement constraints.
       return canMoveAggressively(value) ||
           canMoveModerately(initialization, reference);
     }
\ No newline at end of file
