diff --git a/tmp/c3f4f1ad-8b23-433e-834e-5681363b834c_buggy.java b/tmp/01b8df99-08dd-42d6-a18e-50ce43b99e40_fixed.java
index e81a2c6..bafc040 100644
--- a/tmp/c3f4f1ad-8b23-433e-834e-5681363b834c_buggy.java
+++ b/tmp/01b8df99-08dd-42d6-a18e-50ce43b99e40_fixed.java
@@ -1,102 +1,141 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
         //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
         //    Ok however to pass via setter or field.
 
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
-        TokenBuffer tokens = new TokenBuffer(p, ctxt);
+        // 28-Aug-2018, tatu: Let's use non-copying pool-recycled TokenBuffer
+        //   during iteration, release when done, to minimize overhead.
+        TokenBuffer tokens = ctxt.bufferForInputBuffering(p);
         tokens.writeStartObject();
 
-        JsonToken t = p.getCurrentToken();
+        JsonToken t = p.currentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
-            String propName = p.getCurrentName();
+            String propName = p.currentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 // Last creator property to set?
+                // first buffer, then maybe create
                 if (buffer.assignParameter(creatorProp,
                         _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
                     t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
+                        // 24-Aug-2016, tatu: As per [databind#1328], need to wrap
+                        //   building exception, regardless of whether it's theoretically
+                        //   possible to handle...
                         bean = wrapInstantiationProblem(e, ctxt);
                     }
                     // [databind#631]: Assign current value, to be accessible by custom serializers
                     p.setCurrentValue(bean);
                     // if so, need to copy all remaining tokens into buffer
-                    while (t == JsonToken.FIELD_NAME) {
-                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
+                    // first, let's see if we have anything buffered?
                     // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
                     //    problems if we maintain invariants
-                    tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         // !!! 08-Jul-2011, tatu: Could probably support; but for now
                         //   it's too complicated, so bail out
-                        ctxt.reportInputMismatch(creatorProp,
+                        return ctxt.reportBadDefinition(_beanType, String.format(
+"Cannot create polymorphic instances with unwrapped values (%s vs %s)",
+bean.getClass().getName(), _beanType.getRawClass().getName()));
+                        // 05-Feb-2018, tatu: Wait. No. We should be able to...?
+                        // TODO: try to support
+                        /*
+                        return ctxt.reportInputMismatch(creatorProp,
                                 "Cannot create polymorphic instances with unwrapped values");
-                        return null;
+                                */
                     }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+
+                    // NOTE: Code here is different from version without unwrapped properties
+                    // Need to copy remaining tokens, prefix with buffered properties
+
+                    // This was the fix for [databind#2088]: ensure we copy FIELD_NAME along with value
+                    while (t == JsonToken.FIELD_NAME) {
+                        // Need to copy FIELD_NAME followed by value
+                        tokens.writeFieldName(p.currentName());
+                        p.nextToken(); // value
+                        tokens.copyCurrentStructure(p);
+                        t = p.nextToken(); // Read next token to check if we are done
+                    }
+                    tokens.writeEndObject();
+
+                    // We were buffering, so need to consume the buffered tokens
+                    // 28-Aug-2018, tatu: ... which we can do directly from buffer
+                    TokenBuffer buffered = tokens; // alias for clarity
+                    tokens = null; // to ensure we won't accidentally release it below
+                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, buffered);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
                 continue;
             }
             // Things marked as ignorable should not be passed to any setter
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+            // External type id?
+            if (_externalTypeIdHandler != null) {
+                if (_externalTypeIdHandler.handlePropertyValue(p, ctxt, propName, null)) {
+                    continue;
+                }
+            }
+
             // 29-Nov-2016, tatu: probably should try to avoid sending content
             //    both to any setter AND buffer... but, for now, the only thing
             //    we can do.
             // how about any setter? We'll get copies but...
-            if (_anySetter == null) {
             // but... others should be passed to unwrapped property deserializers
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
-            } else {
-                // Need to copy to a separate buffer first
-                TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
-                tokens.writeFieldName(propName);
-                tokens.append(b2);
-                try {
+
+            // Any setter? copy contents, maybe call setter on build()
+            // 10-Dec-2018, tatu: Need to be careful with possibly HUGE values; do not
+            //   try buffering these if using ANY_SETTER? Seems unlikely to be common
+            //   usage but maybe...
+            if (_anySetter != null) {
+                // 16-Aug-2018, tatu: As per [databind#2097], need to capture stored
+                //   value now, not just reference...
                 buffer.bufferAnyProperty(_anySetter, propName,
-                            _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
-                } catch (Exception e) {
-                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                }
-                continue;
+                        _anySetter.deserialize(p, ctxt));
             }
+            // note: this call is NOT complete, need to close Object too; caller will handle
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
-            wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+            return wrapInstantiationProblem(e, ctxt);
         }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+        // 28-Aug-2018, tatu: Need to release token buffer, if we have one
+        if (tokens != null) {
+            // We were buffering, so need to consume the buffered tokens
+            tokens.writeEndObject();
+            // 28-Aug-2018, tatu: ... which we can do directly from buffer
+            TokenBuffer buffered = tokens;
+            tokens = null; // to ensure we won't accidentally release it below
+            return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, buffered);
+        }
+        // If not, we may just have had creator properties, nothing buffered?
+        // unlikely, but check
+        return bean;
     }
\ No newline at end of file
