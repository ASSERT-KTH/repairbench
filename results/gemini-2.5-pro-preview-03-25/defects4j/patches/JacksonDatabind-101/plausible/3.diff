diff --git a/tmp/fceb669f-89c9-4dde-9616-00fd1d18ca9a_buggy.java b/tmp/681ce11b-b781-4e23-aaf0-99a3b314b32e_fixed.java
index e81a2c6..7e2a674 100644
--- a/tmp/fceb669f-89c9-4dde-9616-00fd1d18ca9a_buggy.java
+++ b/tmp/681ce11b-b781-4e23-aaf0-99a3b314b32e_fixed.java
@@ -1,102 +1,147 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
         //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
         //    Ok however to pass via setter or field.
 
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 // Last creator property to set?
-                if (buffer.assignParameter(creatorProp,
-                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
+                // Need to deserialize value now, for creator property
+                Object value = _deserializeWithErrorWrapping(p, ctxt, creatorProp);
+                if (buffer.assignParameter(creatorProp, value)) {
                     t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
-                        bean = wrapInstantiationProblem(e, ctxt);
+                        // We can't yet know if input would be valid with potentially more creator
+                        // properties; report low-level problem with new wrapper. Can't use the
+                        // main standard helper as it assumes bean object is constructed.
+                        // 18-Dec-2017, tatu: Need message specific to "through-creator" problem.
+                         // 15-Jun-2018, tatu: Although... conceivably, we might be ok with
+                         //   the case of Unwrapped too? Or maybe not. Let's play it safe for now.
+                         return wrapInstantiationProblem(e, ctxt);
                     }
                     // [databind#631]: Assign current value, to be accessible by custom serializers
                     p.setCurrentValue(bean);
                     // if so, need to copy all remaining tokens into buffer
+                    // 15-Jun-2018, tatu [databind#2088]: Used to skip field name, shouldn't.
                     while (t == JsonToken.FIELD_NAME) {
-                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
-                        p.nextToken();
+                        // Fix [databind#2088]: Need to copy name _first_, then value etc
+                        tokens.writeFieldName(p.getCurrentName());
+                        p.nextToken(); // important: move to value
                         tokens.copyCurrentStructure(p);
                         t = p.nextToken();
                     }
                     // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
                     //    problems if we maintain invariants
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         // !!! 08-Jul-2011, tatu: Could probably support; but for now
                         //   it's too complicated, so bail out
-                        ctxt.reportInputMismatch(creatorProp,
-                                "Cannot create polymorphic instances with unwrapped values");
+                        // 02-Aug-2013, tatu: Actually, we have to bail out, since buffer has tokens,
+                        //   may need to re-process based on actual type.
+                        // 15-Jan-2016, tatu: ... and more importantly, `processUnwrapped` requires
+                        //    bean to be of target type
+                        ctxt.reportBadDefinition(_beanType, String.format(
+"Cannot create polymorphic instances with unwrapped values. Discovered type %s, expected %s",
+bean.getClass().getName(), _beanType.getRawClass().getName()));
+                        // 16-Nov-2017, tatu: As per comments above, just can't deal with this.
                         return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
                 continue;
             }
             // Things marked as ignorable should not be passed to any setter
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+            // External prop?
+            // 19-Jan-2017, tatu: Should this be handled earlier, like creator props? For now
+            //    assume after regular props is fine. Typically occurs with VPOs so...
+            if (_externalTypeIdHandler != null) {
+                if (_externalTypeIdHandler.handlePropertyValue(p, ctxt, propName, null)) {
+                    continue;
+                }
+            }
+
             // 29-Nov-2016, tatu: probably should try to avoid sending content
             //    both to any setter AND buffer... but, for now, the only thing
             //    we can do.
             // how about any setter? We'll get copies but...
             if (_anySetter == null) {
                 // but... others should be passed to unwrapped property deserializers
                  tokens.writeFieldName(propName);
                  tokens.copyCurrentStructure(p);
             } else {
                 // Need to copy to a separate buffer first
                 TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
                 tokens.writeFieldName(propName);
                 tokens.append(b2);
                 try {
+                     // note: cannot call buffer.bufferAnyProperty() -- buffer is only used
+                     // for Creator properties. So must handle directly
+                     // 15-Jun-2018, tatu: ... which is problematic, but let's try this for now:
                      buffer.bufferAnyProperty(_anySetter, propName,
                              _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                 }
                 continue;
              }
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
+            // We can't yet know if input would be valid with potentially more creator
+            // properties; report low-level problem with new wrapper. Can't use the
+            // main standard helper as it assumes bean object is constructed.
+            // 18-Dec-2017, tatu: Need message specific to "through-creator" problem.
             wrapInstantiationProblem(e, ctxt);
             return null; // never gets here
         }
+        p.setCurrentValue(bean);
+        // And then need to process unwrapped properties...
+        if (_externalTypeIdHandler != null) {
+            // 19-Jan-2017, tatu: Important! If we use external type id, those properties
+            //    may be buffered, need to be resolved now. Uh-oh. Pass `null` buffer?
+            if (buffer.isComplete()) { // only if we have all creator props?
+                bean = _externalTypeIdHandler.complete(p, ctxt, bean);
+            } else {
+                 // 17-Apr-2018, tatu: Should call method that takes buffer, perhaps?
+                  _externalTypeIdHandler.complete(p, ctxt, buffer, creator);
+                  // ... and we are basically done? Or no? Probably not. Needs more work. For now:
+                  return bean;
+             }
+         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
