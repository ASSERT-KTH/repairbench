diff --git a/tmp/a0cce160-1f7d-413a-8cf7-62194f0bbb60_buggy.java b/tmp/204f3aee-fc46-48a4-ad58-3331f0029a67_fixed.java
index e81a2c6..133d252 100644
--- a/tmp/a0cce160-1f7d-413a-8cf7-62194f0bbb60_buggy.java
+++ b/tmp/204f3aee-fc46-48a4-ad58-3331f0029a67_fixed.java
@@ -1,102 +1,125 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
         //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
         //    Ok however to pass via setter or field.
 
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 // Last creator property to set?
+                // 21-Feb-2017, tatu: With [databind#1555], we may need to ensure we have value...
                 if (buffer.assignParameter(creatorProp,
                         _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
                     t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         bean = wrapInstantiationProblem(e, ctxt);
                     }
                     // [databind#631]: Assign current value, to be accessible by custom serializers
                     p.setCurrentValue(bean);
+
                     // if so, need to copy all remaining tokens into buffer
+                    // [databind#2088]: may need to skip name to get value
                     while (t == JsonToken.FIELD_NAME) {
-                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
-                        p.nextToken();
+                        // 23-Mar-2017, tatu: Initially had simple `copyCurrentStructure` call here,
+                        //   but that is not quite sufficient, for two reasons:
+                        //   (1) Need to FIELD_NAME, VALUE pair -- copyCurrentStructure() does not do that
+                        //   (2) Unwrapped values may require further processing by `UnwrappedPropertyHandler`
+                        //  So we'll have to simply use same logic as prior to calling creator
+                        tokens.writeFieldName(p.getCurrentName());
+                        p.nextToken(); // value
                         tokens.copyCurrentStructure(p);
                         t = p.nextToken();
                     }
-                    // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
-                    //    problems if we maintain invariants
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         // !!! 08-Jul-2011, tatu: Could probably support; but for now
                         //   it's too complicated, so bail out
-                        ctxt.reportInputMismatch(creatorProp,
-                                "Cannot create polymorphic instances with unwrapped values");
-                        return null;
+                        // 17-Jan-2018, tatu: as per [databind#1853] better be explicit.
+                        return ctxt.reportBadDefinition(_beanType, String.format(
+                                "Cannot create polymorphic instances with unwrapped values. Problem encountered with definition of %s: ",
+                                _beanType.getRawClass().getName()));
                     }
+                    // 28-Aug-2018, tatu: As per [databind#2088] need to make sure handler gets called
+                    //   AND that token stream contains buffered properties as well as remaining main-level
+                    //   ones.
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
                 continue;
             }
             // Things marked as ignorable should not be passed to any setter
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+            Set<String> ignored = _ignorableProps;
+            if (ignored != null && ignored.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+            // External type id? No, not known how to handle those...
+            if (_externalTypeIdHandler != null) {
+                if (_externalTypeIdHandler.handlePropertyValue(p, ctxt, propName, null)) {
+                    continue;
+                }
+            }
+
             // 29-Nov-2016, tatu: probably should try to avoid sending content
             //    both to any setter AND buffer... but, for now, the only thing
             //    we can do.
             // how about any setter? We'll get copies but...
             if (_anySetter == null) {
                 // but... others should be passed to unwrapped property deserializers
                 tokens.writeFieldName(propName);
                 tokens.copyCurrentStructure(p);
             } else {
                 // Need to copy to a separate buffer first
                 TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
                 tokens.writeFieldName(propName);
                 tokens.append(b2);
                 try {
+                    // 11-Jun-2018, tatu: [databind#1349] This is problematic wrt ordering;
+                    //    may need to change but...
                     buffer.bufferAnyProperty(_anySetter, propName,
                             _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                 }
                 continue;
             }
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
-            wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+            // We wrap, then caller needs to re-throw? Or we could just re-throw? Or.. leave it?
+            // 24-Aug-2018, tatu: Let's actually wrap it here, simplifies call site
+            // (note: can NOT return null, may get confused with absent value for primitive props)
+            return wrapInstantiationProblem(e, ctxt);
         }
+        // 28-Aug-2018, tatu: As per [databind#2088] need to make sure handler gets called
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
