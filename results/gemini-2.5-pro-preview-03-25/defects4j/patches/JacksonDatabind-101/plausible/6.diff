diff --git a/tmp/2b24c378-d810-4382-9790-b6a5f26b28ec_buggy.java b/tmp/afa63a7d-93cc-4c00-8d0b-d1a356d01ad4_fixed.java
index e81a2c6..17d1052 100644
--- a/tmp/2b24c378-d810-4382-9790-b6a5f26b28ec_buggy.java
+++ b/tmp/afa63a7d-93cc-4c00-8d0b-d1a356d01ad4_fixed.java
@@ -1,102 +1,115 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
         //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
         //    Ok however to pass via setter or field.
 
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 // Last creator property to set?
                 if (buffer.assignParameter(creatorProp,
                         _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
                     t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         bean = wrapInstantiationProblem(e, ctxt);
                     }
                     // [databind#631]: Assign current value, to be accessible by custom serializers
                     p.setCurrentValue(bean);
                     // if so, need to copy all remaining tokens into buffer
                     while (t == JsonToken.FIELD_NAME) {
-                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
-                        p.nextToken();
+                        // [databind#2088]: DO NOT skip field name, copy entire entry
                         tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                        // `copyCurrentStructure` will advance parser past structure, so need to update token
+                        t = p.getCurrentToken();
                     }
                     // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
                     //    problems if we maintain invariants
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         // !!! 08-Jul-2011, tatu: Could probably support; but for now
                         //   it's too complicated, so bail out
-                        ctxt.reportInputMismatch(creatorProp,
+                        // 17-Jan-2018, tatu: as per [databind#1853] better report mismatch
+                        return ctxt.reportBadDefinition(_beanType, String.format(
+"Cannot create polymorphic instances with unwrapped values (%s vs %s)",
+bean.getClass().getName(), _beanType.getRawClass().getName()));
+/*                        
+                        ctxt.reportInputMismatch(creatorProp, // invalid combination really
                                 "Cannot create polymorphic instances with unwrapped values");
                         return null;
+                        */
                     }
+                    // And then figure out how to pop it all in:
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
                 continue;
             }
             // Things marked as ignorable should not be passed to any setter
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             // 29-Nov-2016, tatu: probably should try to avoid sending content
             //    both to any setter AND buffer... but, for now, the only thing
             //    we can do.
             // how about any setter? We'll get copies but...
             if (_anySetter == null) {
                 // but... others should be passed to unwrapped property deserializers
                 tokens.writeFieldName(propName);
                 tokens.copyCurrentStructure(p);
             } else {
                 // Need to copy to a separate buffer first
                 TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
                 tokens.writeFieldName(propName);
                 tokens.append(b2);
                 try {
+                    // Ok; value has been copied, now need to buffer it: assign thru buffer method
                     buffer.bufferAnyProperty(_anySetter, propName,
                             _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                 }
-                continue;
+                continue; // important: skip normal process
             }
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
-            wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+            // We may get here for cases like [databind#2088]; let's not miss fileds accumulated
+            // in `tokens` if so?
+            return wrapInstantiationProblem(e, ctxt);
+            // But if we do, we seem to lose buffered values, possible?
+//            wrapInstantiationProblem(e, ctxt);
+//            return null; // never gets here
         }
+        // [databind#2088]: If we got here, need to process any tokens accumulated
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
