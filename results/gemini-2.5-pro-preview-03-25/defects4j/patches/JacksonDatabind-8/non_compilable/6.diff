diff --git a/tmp/6984fa40-4398-4704-a6f1-dcec96fa4b24_buggy.java b/tmp/f49d2c4c-4beb-4e4d-bf9b-5bd4855556d3_fixed.java
index c9da1b7..fb43bad 100644
--- a/tmp/6984fa40-4398-4704-a6f1-dcec96fa4b24_buggy.java
+++ b/tmp/f49d2c4c-4beb-4e4d-bf9b-5bd4855556d3_fixed.java
@@ -1,33 +1,108 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
-        _hasNonDefaultCreator = true;
+        // NOTE: moved _hasNonDefaultCreator = true down before assignments
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+        // already had one?
         if (oldOne != null) {
+            // If they refer to the same actual constructor or method, not a conflict:
+            // (note: equals() check on AnnotatedX is based on underlying AnnotatedElement)
+            if (oldOne.equals(newOne)) { // Fixed check
+                // The only tricky case; if finding "same" constructor, but one with
+                // mix-in annotations, keep that one. Or first one, for that matter.
+                // Let's assume first one is fine.
+                // 01-Sep-2019, tatu: As per [databind#2417], ignore if conditionally ignorable...
+                //   Ideally would be checked earlier, but complicates logic; shouldn't affect
+                //   behavior otherwise.
+                if (newOne.hasIgnoreMarker()) { // condition added for [databind#2417]
+                    return;
+                }
+                // also: if new one is explicitly marked (and old one maybe not), possibly replace?
+                if (explicit && (_explicitCreators & mask) == 0) {
+                    // fall through to logic below
+                } else {
+                    return; // Just ignore duplicate registration
+                }
+            }
 
+            // already had an explicitly marked one?
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
-                    return;
+                    return; // Keep previous explicit one
+                }
+                // both explicit: verify below
+            } else { // old one was not explicit
+                // If new one is explicit, it overrides implicit one anyways. Fall through.
+                 if (!explicit) {
+                     // Both implicit; should we just... maybe consider more specific one to be winner?
+                     // Or, for now, what is behavior? Seems like we choose later one...
+                     // Fall through to verify
                  }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
             }
 
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
+                // If we get here, we have two different creators (checked by equals() above)
+                // of the same 'kind' (AnnotatedConstructor vs AnnotatedConstructor etc)
+                // and the explicit checks didn't rule one out. This implies a conflict.
+                // 11-Feb-2017, tatu: Note: `equals()` check above should prevent identical matches.
+                //   It is still possible that we have constructor/factory method overrides. Let's
+                //   try to allow based on parameter count; this seems safe enough closer to root
+                //   Object class. May need to refine further in future.
+                //
+                // 18-Feb-2019, tatu: As per [databind#2183], Needs to check declaring class as well;
+                //    and apparently subclasses must be considered same class
+                Class<?> oldClass = oldOne.getDeclaringClass();
+                Class<?> newClass = newOne.getDeclaringClass();
 
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                if (oldClass != newClass) {
+                    if (newClass.isAssignableFrom(oldClass)) { // Old is more specific
+                        // keep old
+                         return;
                     }
+                    if (!oldClass.isAssignableFrom(newClass)) { // New is more specific
+                        // keep new; fall through
+                        // 28-Jul-2021, tatu: Except as per [databind#3249], need to ensure not bogus conflict
+                        //    likestatic factory method vs constructor. But... for that, let's
+                        //    refine check below
+                        // Fall-through
+                    } else { // unrelated classes
+                        // 28-Jul-2021, tatu: As per [databind#3249], needs to check this is actual conflict;
+                        //    specifically, static factory method in super class, constructor in sub-class
+                        //    should not conflict.
+                        if (newOne.getMember() instanceof java.lang.reflect.Constructor<?>) {
+                            // If new one is constructor, old one must be something else, keep old
+                            return;
                         }
+                        // Otherwise assume new one is fine
+                    }
+                } else { // Same declaring class
+                    // Otherwise, conflict if exact same number of arguments
+                    // (NOTE: ideally would check parameter types but gets complicated)
+                    if (oldOne.getParameterCount() == newOne.getParameterCount()) {
+                        throw new IllegalArgumentException(String.format("Conflicting %s creators: already had %s creator %s, encountered another: %s",
+                                TYPE_DESCS[typeIndex],
+                                ((_explicitCreators & mask) != 0) ? "explicitly marked" : "implicitly discovered",
+                                oldOne, newOne));
+                    }
+                    // If different number of arguments, assume it's ok, keep the one with more args? Choose new one?
+                    if (newOne.getParameterCount() > oldOne.getParameterCount()) {
+                        // fall through, override below
+                    } else {
+                        // keep old one
+                        return;
+                    }
+                }
+            }
+            // If oldOne.getClass() != newOne.getClass(), original code implies no conflict check needed.
+        }
+
+        // If we get this far, we accept the new one
+        _hasNonDefaultCreator = true;
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
