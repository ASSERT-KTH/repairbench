diff --git a/tmp/bb878d9b-0b50-487f-860c-46be1539041e_buggy.java b/tmp/f2fd5319-ebae-4671-bcb6-00303efaea88_fixed.java
index c9da1b7..e81e1ef 100644
--- a/tmp/bb878d9b-0b50-487f-860c-46be1539041e_buggy.java
+++ b/tmp/f2fd5319-ebae-4671-bcb6-00303efaea88_fixed.java
@@ -1,33 +1,41 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
         if (oldOne != null) {
+            boolean oldExplicit = (_explicitCreators & mask) != 0;
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+            if (oldExplicit) { // If the existing creator was explicit...
+                // ...and new one is NOT, ignore new one
                 if (!explicit) {
-                    return;
+                    return; // Keep existing explicit one
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+                // Both explicit: verify, but only if they are in same class
+                // (sub-class definition overrides parent)
                 if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+                    // Both explicit, same class: conflict.
+                    // Note: Parameter handling could be added here to refine conflict detection,
+                    // but for the reported bug, simply ensuring this check only happens for
+                    // explicit creators is the key.
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
                 }
+                // Otherwise, different classes: new explicit one overrides old explicit one (subclass override)
+                // Fall through to replace below.
+
+            } else { // Existing creator was implicit.
+                // New one is explicit? New one is the winner. Fall through to replace.
+                // New one is also implicit? Let new one win. Fall through to replace.
+                // This removes the original bug where an exception was thrown for duplicate implicit
+                // creators found in the same class.
             }
+            // If we reach here, the new creator is allowed to replace the old one.
+        }
+
+        // Ok, we'll replace or add 'newOne'. Need to register associated explicit marker:
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
