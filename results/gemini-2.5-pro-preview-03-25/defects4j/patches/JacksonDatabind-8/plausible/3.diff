diff --git a/tmp/c457508a-9a16-48a5-acda-6f893daf4c7a_buggy.java b/tmp/cf24d347-d510-4151-b8ed-f1dd50c39084_fixed.java
index c9da1b7..d280586 100644
--- a/tmp/c457508a-9a16-48a5-acda-6f893daf4c7a_buggy.java
+++ b/tmp/cf24d347-d510-4151-b8ed-f1dd50c39084_fixed.java
@@ -1,33 +1,61 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
-        if (oldOne != null) {
+        if (oldOne != null) { // If already have one...
+            boolean oldExplicit = (_explicitCreators & mask) != 0;
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+            // [databind#333]: If old one was explicit, new one not, keep old one
+            if (oldExplicit) {
                 if (!explicit) {
-                    return;
+                    return; // Ignore new implicit one, keep old explicit one
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                // Both explicit: verify if compatible, or throw exception etc
+            } else {
+                // Old one was not explicit: if new one is, it has precedence
+                // (regardless of context class; explicit always wins over implicit)
+                if (!explicit) {
+                    // Both implicit: compatibility? Check class, for now: just override
+                    // Mismatch? Seems like we should use the one from sub-class but... how to check?
+                    // -> actually, we can just check classes:
+                    //    if `newOne` is in subclass, it's preferred.
+                    // This check should only matter if they are in same class:
+//                    if (oldOne.getClass() == newOne.getClass()) {
+                         // if view information available, might try selecting one... ?
+                         // but for now, conflict if they are same type, same class:
+                    // changing to NOT throw, assuming new one is simply preferred
+// Let's not throw an exception here; simply override. May need to revisit this decision
+//                        throw new IllegalArgumentException("Conflicting implicit "+TYPE_DESCS[typeIndex]+" creators: already had "+oldOne+", encountered "+newOne);
+//                    }
+                    // Otherwise, just leave it; new one is assumed to override
+                }
+                // If new is explicit, old implicit, new one will override (handled below)
             }
 
-            // one more thing: ok to override in sub-class
+            // One more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
+                // If both explicit, check compatibility (or just conflict?)
+                if (oldExplicit && explicit) {
                     // [databind#667]: avoid one particular class of bogus problems
+                    // If they are same type, same class, duplicates are problematic. Might
+                    // be ok if signatures differ in terms of being ignored... but otherwise conflict.
+                    // For now, let's just throw the exception if both are explicit and in same class
+                    throw new IllegalArgumentException(String.format("Conflicting %s creators: already had explicitly marked %s, encountered explicit %s",
+                           TYPE_DESCS[typeIndex], oldOne, newOne));
+                }
+                // Otherwise, if one explicit, one implicit, explicit one wins (handled already or by overriding below)
+                // If both implicit, new one will override old one (handled below)
+            }
+            // else, different classes; subclass definition overrides superclass one(s)
+        }
 
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
-            }
-        }
+        /* If we get this far, means we accept the new one, possibly overriding
+         * an existing one: either new one is explicit and old was not; OR
+         * neither is explicit and new one is in subclass.
+         */
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
