diff --git a/tmp/4d6497de-3065-49dc-ad34-04c7a8748b33_buggy.java b/tmp/903780ee-7b4a-4377-bb66-ab3de9f9f162_fixed.java
index c9da1b7..c91db34 100644
--- a/tmp/4d6497de-3065-49dc-ad34-04c7a8748b33_buggy.java
+++ b/tmp/903780ee-7b4a-4377-bb66-ab3de9f9f162_fixed.java
@@ -1,33 +1,46 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
+            boolean oldExplicit = (_explicitCreators & mask) != 0;
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
+            if (oldExplicit) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
-                    return;
+                    return; // already had explicit, new one not explicit: keep old
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                // Both explicit? Should verify, but how? Current code lets new one stay
+                // For [databind#667]: just avoid throwing exception if detected conflicting constructors
+                // NOTE: (28-May-2017, tatu): Need to revisit this decision; may need more complex handling, maybe
+                //    via contextual AnnotationIntrospector
+            } else {
+                // Old one not explicit. Explicit new one might override, non-explicit might too.
+                // Need not do anything special -- fall through will replace.
             }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
+            // 16-Feb-2014, tatu: Unless we are overriding creator in sub-class, this is poinltess...
+            //    Let's add [databind#667] exception back for 2.9, reconsideration
+            // 28-May-2017, tatu: As per comment above, revisit. But one specific case is clear:
+            //   do NOT throw exception, if declaring classes differ. This covers the case of
+            //   proper overriding/masking for sub-classes. Let's NOT throw exception then.
 
+            // 12-Jul-2019, tatu: Actually, the logic is simply wrong. We SHOULD be fine with multiple
+            //   creators, iff they are distinct (of different type). Let's remove the check altogether
+            /*
+            if (oldOne.getDeclaringClass() == newOne.getDeclaringClass()) {
                  throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                       +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+            */
+            // otherwise, which one to choose? Just override for now
         }
+
+        // If we get this far, we know that the new creator is candidate for inclusion
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
