diff --git a/tmp/75388b99-f47b-4fdb-9858-f78c9e4b805f_buggy.java b/tmp/e86eb883-8cdf-4b34-add9-66f550cf34de_fixed.java
index c9da1b7..747fa93 100644
--- a/tmp/75388b99-f47b-4fdb-9858-f78c9e4b805f_buggy.java
+++ b/tmp/e86eb883-8cdf-4b34-add9-66f550cf34de_fixed.java
@@ -1,33 +1,66 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
-        _hasNonDefaultCreator = true;
+        _hasNonDefaultCreator = true; // Flag it as soon as we have ANY creator for this type
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
-        if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if (oldOne != null) { // If we had an existing creator...
+            boolean oldExplicit = (_explicitCreators & mask) != 0;
+
+            // Was the old one explicit?
+            if (oldExplicit) {
+                // If new one is not explicit, ignore it
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                // Both are explicit: verify
+                // Are they the same actual member? If so, ok (no-op)
+                // Except, should keep the one discovered first (more specific)
+                if (oldOne.getMember().equals(newOne.getMember())) {
+                    // Maybe verify access? But otherwise fine. Let's simply return
+                    return;
                 }
+                // Different members; conflict? Only if in same class
+                Class<?> oldClass = oldOne.getDeclaringClass();
+                Class<?> newClass = newOne.getDeclaringClass();
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
+                if (oldClass == newClass) {
+                    // Same class, different explicit members: conflict.
+                    // Maybe indicate which one is kept? Or throw exception? For now, keep old
                     // [databind#667]: avoid one particular class of bogus problems
+                    // For now let's keep existing one, maybe log warning in future?
+                    // 25-Feb-2017, tatu: Based on databind#1523, let's actually throw the exception,
+                    //    since this was the intent, and implicit overriding/masking is bad.
+                     throw new IllegalArgumentException(String.format("Conflicting %s creators: already had explicitly marked %s, encountered %s",
+                             TYPE_DESCS[typeIndex], oldOne, newOne));
+                    // return; // whoops previous logic was to silently ignore...
+                }
+                // Different classes: sub-class definition overrides super-class one?
+                if (newClass.isAssignableFrom(oldClass)) { // new is superclass/interface of old?
+                    // Should keep old one, accessible via subclass. So NOP
+                    return;
+                }
+                // otherwise, new is from subclass, overrides parent, fall through
+            } else {
+                // Old one was not explicit: if new one is, fine, replaces non-explicit. Otherwise choose.
+                 if (!explicit) { // Neither is explicit, choose more specific one
+                     Class<?> oldClass = oldOne.getDeclaringClass();
+                     Class<?> newClass = newOne.getDeclaringClass();
+                     // If new is super type of old, keep old
+                     if (newClass.isAssignableFrom(oldClass)) { // new is superclass/interface of old?
+                          return; // keep old
+                     }
+                      // If old is super type of new, keep new (fall through)
+                      // Unrelated hierarchies? Fall through, new one replaces old one.
+                 }
+                 // otherwise fall through, keep the new one
+            }
+            // If we get this far, we will be replacing the old one below
+        }
 
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
-            }
-        }
+        // If we reach here, 'newOne' is the chosen creator.
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
