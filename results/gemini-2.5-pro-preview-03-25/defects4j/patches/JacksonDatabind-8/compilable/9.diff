diff --git a/tmp/60a03166-e9ec-4848-b0d1-6c259345547e_buggy.java b/tmp/e5bcf57f-c5e5-4d4a-aa50-d2bfbd7ee389_fixed.java
index c9da1b7..b330c7d 100644
--- a/tmp/60a03166-e9ec-4848-b0d1-6c259345547e_buggy.java
+++ b/tmp/e5bcf57f-c5e5-4d4a-aa50-d2bfbd7ee389_fixed.java
@@ -1,33 +1,62 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
-        if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        if (oldOne != null) { // If collision possible
+            boolean oldExplicit = (_explicitCreators & mask) != 0;
+
+            // First: is the new one same as the old one?
+            // NOTE: equals() likely checks underlying Member
+            if (oldOne.equals(newOne)) { // [databind#667], [databind#2343] Same creator method/ctor found twice?
+                // If new one is explicit, old was not, mark as explicit:
+                if (explicit && !oldExplicit) {
+                    _explicitCreators |= mask;
+                    // We could also potentially replace 'oldOne' with 'newOne' but they are identical
+                    // except for annotation flags, which should not matter...
+                    // So, just return for now.
+                 }
+                 // otherwise, old one was explicit (and new one may or may not be), OR
+                 // neither is explicit: just ignore discovery of the duplicate
                  return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+
+            // Different creators.
+
+            // If old one was explicit, new one not -> keep old one
+            if (oldExplicit && !explicit) {
+                return; // Ignore new one, favor explicit old one
             }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // If old one was not explicit, new one is -> new one wins (will be assigned later)
+            if (!oldExplicit && explicit) {
+                // Fall through to assignment below
+            } else {
+                // Both explicit or both implicit: verify
+                // Ok to override in sub-class; check for that:
+                // Also: check if declaring classes are same (must be then)
+                 if (oldOne.getDeclaringClass() == newOne.getDeclaringClass()) {
+                     // [databind#667] Avoid problems with duplicate checks for same things, just
+                     // add specific check for actual conflict:
+                     // One more check: is parameter count different? Better match?
+                     // TBD? Check parameter types? That would be more specific...
+                     // But for now, just consider explicit markers.
+                     if (explicit && oldExplicit) { // Both explicit is definite conflict
                          throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                                 +" creators: already had explicitly marked "+oldOne+", encountered explicit "+newOne);
                      }
+                     // Otherwise, implicit; just prefer the first one found? Or last?
+                     // Jackson's default behavior seems to be "last one wins", so fall through.
+                     // The original code threw an exception here for implicit/implicit conflict,
+                     // but that seems too strict, better to let the last one discovered win.
                  }
+                 // Different declaring class: inheritance; subclass definition overrides superclass
+            }
+        }
+
+        // If we reach here, the new one is considered better or the only one found so far.
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
