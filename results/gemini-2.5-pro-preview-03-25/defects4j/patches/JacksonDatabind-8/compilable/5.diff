diff --git a/tmp/6604f990-e1bc-4bbe-83be-a4964f7b5833_buggy.java b/tmp/8f41f2a8-66a8-4767-b8c3-f2d984bd9611_fixed.java
index c9da1b7..b30d1e2 100644
--- a/tmp/6604f990-e1bc-4bbe-83be-a4964f7b5833_buggy.java
+++ b/tmp/8f41f2a8-66a8-4767-b8c3-f2d984bd9611_fixed.java
@@ -1,33 +1,77 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
-        _hasNonDefaultCreator = true;
+        _hasNonDefaultCreator = true; // Mark that we have a non-default creator
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
+        // Does creator already exist?
         if (oldOne != null) {
+            boolean oldExplicit = (_explicitCreators & mask) != 0;
+            Class<?> oldClass = oldOne.getDeclaringClass();
+            Class<?> newClass = newOne.getDeclaringClass();
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+            // 0: Is the new one effectively the same as the old one?
+            // (NOTE: Added in 2.7.1; was missing from initial 2.7.0)
+            if (oldClass == newClass && oldOne.getMember().equals(newOne.getMember())) {
+                // 16-Feb-2016, tatu: Ok, but we choose 'newOne' if it is explicit and old was not
+                if (explicit && !oldExplicit) {
+                    // need to change state appropriately
+                    _creators[typeIndex] = _fixAccess(newOne);
+                    _explicitCreators |= mask;
+                }
+                // otherwise, old one is fine, explicit or not
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
+            // If they are non-identical members, or from different classes:
+            if (explicit) {
+                if (oldExplicit) { // Both explicit
+                    // [databind#667]: Explicit creator in subclass MUST override creator in superclass
+                    // 16-Feb-2016, tatu: And verification should be done based on declaring class
+                    if (oldClass == newClass) { // Same class, different members: Conflict!
+                         throw new IllegalArgumentException(String.format(
+                                "Conflicting %s creators: already had explicitly marked %s, encountered explicit %s (both in class %s)",
+                                TYPE_DESCS[typeIndex], oldOne, newOne, newClass.getName()));
+                    }
+                    // Different classes: check subclass relationship
+                    // `parent.isAssignableFrom(child)` is true if child is subclass of parent
+                    if (oldClass.isAssignableFrom(newClass)) { // new is subclass of old
+                        // New overrides old. Fall through to replace.
+                    } else if (newClass.isAssignableFrom(oldClass)) { // old is subclass of new
+                        return; // Keep old.
+                    } else { // Unrelated classes
+                        // 13-Jan-2017, tatu: As per [databind#1498], should probably allow, choosing the more specific one...
+                        //    but for now, conflict is perhaps better than random choice.
+                        throw new IllegalArgumentException(String.format(
+                                "Conflicting %s creators: already had explicitly marked %s from %s, encountered similar explicit %s from %s",
+                                TYPE_DESCS[typeIndex], oldOne, oldClass.getName(), newOne, newClass.getName()));
+                    }
+                }
+                // If new is explicit, old was not: New one overrides implicit old one. Fall through to replace.
+                // And also update explicit marker:
+                _explicitCreators |= mask;
 
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            } else { // New is implicit
+                if (oldExplicit) { // Old is explicit
+                    return; // Keep explicit old one.
+                }
+                // Both implicit. Use subclass priority
+                if (oldClass.isAssignableFrom(newClass)) { // new is subclass of old (or same class, but handled above)
+                    // New overrides old implicit one. Fall through to replace.
+                } else if (newClass.isAssignableFrom(oldClass)) { // old is subclass of new
+                    return; // Keep old.
                 }
+                // Implicit creators from unrelated classes: Prioritize closer one? Or fail?
+                // Jackson's historical behavior seems to be to allow replacement (implicit override). Let's keep that.
+                // Fall through to replace.
             }
+        } else { // if oldOne == null
+             // If no old creator, record the new one as explicit if applicable
             if (explicit) {
                 _explicitCreators |= mask;
             }
+        }
+
+        // If we get here, 'newOne' is the chosen candidate. Replace 'oldOne' (if any).
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
