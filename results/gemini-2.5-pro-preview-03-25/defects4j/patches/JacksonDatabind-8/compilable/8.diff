diff --git a/tmp/56b4fe9b-3c61-4182-8642-4c190c1ff835_buggy.java b/tmp/c034e41a-7a40-4490-b938-dd0a89fe685b_fixed.java
index c9da1b7..b43a844 100644
--- a/tmp/56b4fe9b-3c61-4182-8642-4c190c1ff835_buggy.java
+++ b/tmp/c034e41a-7a40-4490-b938-dd0a89fe685b_fixed.java
@@ -1,33 +1,71 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
-        _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
-        if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
-            }
-        }
+        // If no previous creator, or if new creator is same as old one, handle simply
+        if (oldOne == null) {
+            // If this is the first creator found, mark as having one
+            // (even if default -- needed for prioritizing actual creators over default)
+            _hasNonDefaultCreator = true;
             if (explicit) {
                 _explicitCreators |= mask;
             }
             _creators[typeIndex] = _fixAccess(newOne);
+            return;
+        }
+
+        // If new one represents the very same actual Function/Constructor, ignore
+        // (NOTE: equals() only checks for signature, not annotations)
+        if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {
+             // If annotations differ, could consider conflict? Or prefer 'more annotated'?
+             // For now, simplest is to just ignore dups.
+             return; // already had it, ok
+        }
+
+        // Ok, different creator methods, potential conflict.
+
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
+
+        // both explicit? error
+        if (oldExplicit && explicit) { // RETHROW different type description
+            throw new IllegalArgumentException(String.format(
+                    "Conflicting %s creators: already had explicitly marked %s, encountered explicit %s",
+                    TYPE_DESCS[typeIndex], oldOne, newOne));
+        }
+
+        // explicit older one takes precedence over implicit new one
+        if (oldExplicit && !explicit) { // RETAIN old one
+            return;
+        }
+
+        // implicit old one is overridden by explicit new one
+        if (!oldExplicit && explicit) { // REPLACE with new one
+            // need to mark explicit, and replace
+            _explicitCreators |= mask;
+            // fall through for assignment
+        } else {
+            // !oldExplicit && !explicit
+            // Both implicit, different methods. Conflict? Only if in same class?
+            // Or based on type of annotated item? Or number of arguments?
+            // Let's use the original check's logic here for databind#667 compatibility,
+            // but apply it only when both are implicit and different.
+            // Note: original check was `oldOne.getClass() == newOne.getClass()`, let's keep that
+            // for minimal changes, assuming it relates to `AnnotatedConstructor` vs `AnnotatedMethod`
+            // or perhaps something related to generic types.
+            if (oldOne.getClass() == newOne.getClass()) {
+                 // Maybe check parameter counts? Or...?
+                 // For [databind#667], let's prevent replacement.
+                 // Ideally we would compare parameter types, but... just report abstract conflict for now?
+                 throw new IllegalArgumentException(String.format(
+                     "Conflicting %s creators: found multiple implicit ones (%s vs %s)",
+                     TYPE_DESCS[typeIndex], oldOne, newOne));
+                 // Or, could consider new type more generic / more specific?
+            }
+            // Otherwise, different classes, let replacement occur (implicit overriding by subclass)
+            // fall through for assignment
+        }
+
+        // If we get this far, we determined `newOne` is the preferred choice.
+        _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
