diff --git a/tmp/1899e6c4-743b-40de-87bf-951aea00789f_buggy.java b/tmp/fa80c5ae-68f1-4a48-96d3-7b538436ac9e_fixed.java
index c9da1b7..2b7056c 100644
--- a/tmp/1899e6c4-743b-40de-87bf-951aea00789f_buggy.java
+++ b/tmp/fa80c5ae-68f1-4a48-96d3-7b538436ac9e_fixed.java
@@ -1,33 +1,55 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
-        _hasNonDefaultCreator = true;
+        _hasNonDefaultCreator = true; // Mark that we found *some* non-default creator
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
-        if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
+        if (oldOne != null) { // If a creator of this type already exists...
+            boolean oldExplicit = (_explicitCreators & mask) != 0;
+
+            // Check 1: Is the new one the exact same as the old one?
+            // NOTE: relies on `Annotated*` classes having working `equals()` implementation
+            // for the underlying AnnotatedElement (Member)
+            if (oldOne.getAnnotated().equals(newOne.getAnnotated())) { // Check if they represent the same constructor/method
+                // If it's the same, we only care if the 'explicit' status needs updating.
+                if (!oldExplicit && explicit) {
+                    // Old one wasn't marked explicit, but this new finding is. Update the flag.
+                   _explicitCreators |= mask;
+                   // Keep the new one; may have more annotation info? Seems safer.
+                   _creators[typeIndex] = _fixAccess(newOne);
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                // Whether updated or not, it's not a conflict, so we are done.
+                return;
             }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            // Check 2: Handle explicit vs non-explicit conflicts/overrides.
+            // If new one is not explicit, but old one was, keep old one
+            if (!explicit && oldExplicit) {
+                // nothing to do, old one is fine
+                return;
+            }
+            // If new one is explicit, but old one was not -> new one takes precedence (below)
+            // If both non-explicit -> new one takes precedence (below)
+            // If both explicit -> conflict
+            if (explicit && oldExplicit) {
+                // This is the case for explicit conflict
+                // [databind#667]: Needs to be handled explicitly, report
+                throw new IllegalArgumentException(String.format(
+                        "Conflicting %s creators: already had explicitly marked %s, encountered %s",
+                        TYPE_DESCS[typeIndex], oldOne, newOne));
             }
+
+            // Otherwise, we will be replacing the old one with the new one.
+            // This occurs if:
+            // - Old one was not explicit, new one is (new one wins)
+            // - Neither is explicit (new one wins by replacement, potential override)
+            // This also handles the case where new one is in sub-class, overrides non-explicit super-class creator.
+            // Or explicit creator in sub-class overrides non-explicit one in super-class.
         }
+
+        // If we didn't return or throw, assign the new creator (potentially replacing old one).
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
