diff --git a/tmp/30447990-baed-4abd-8a7a-d91f3a162d91_buggy.java b/tmp/1fcd2c3a-2908-41bc-9804-69001ef282a1_fixed.java
index cae5e03..4c4a38a 100644
--- a/tmp/30447990-baed-4abd-8a7a-d91f3a162d91_buggy.java
+++ b/tmp/1fcd2c3a-2908-41bc-9804-69001ef282a1_fixed.java
@@ -1,33 +1,42 @@
     /*
      * (non-Javadoc)
      * 
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
+        // According to the InputStream contract, a len of 0 should return 0.
+        if (len == 0) {
+            return 0;
+        }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
+        // Loop reads bytes until either 'len' bytes have been read,
+        // or the end of the underlying stream is reached.
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
-            count(1);
+            count(1); // Update bytes read counter
         }
 
-        int c = (destOffs == offs) ? -1 : (destOffs - offs);
-        return c;
+        // If destOffs is still equal to offs, it means either:
+        // 1. len was 0 (handled above).
+        // 2. read0() returned -1 immediately, indicating EOF.
+        // Otherwise, return the number of bytes actually read.
+        return (destOffs == offs) ? -1 : (destOffs - offs);
     }
\ No newline at end of file
