diff --git a/tmp/c1f2be8d-e4b9-40b1-a6dd-147b2399a036_buggy.java b/tmp/38f48249-9e5c-4f86-b117-5efa3a0c670b_fixed.java
index cae5e03..27fe922 100644
--- a/tmp/c1f2be8d-e4b9-40b1-a6dd-147b2399a036_buggy.java
+++ b/tmp/38f48249-9e5c-4f86-b117-5efa3a0c670b_fixed.java
@@ -1,33 +1,42 @@
     /*
      * (non-Javadoc)
      *
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
+        // Handle the case for len == 0 as per InputStream contract.
+        if (len == 0) {
+            return 0;
+        }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
+        // Loop reads bytes until len bytes are read, EOF is reached, or an error occurs.
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
             count(1);
         }
 
+        // If destOffs is still offs, it means either the loop condition (destOffs < hi)
+        // was initially false (which is handled by the len == 0 check above)
+        // or read0() returned -1 on the first attempt (EOF).
+        // Otherwise, (destOffs - offs) bytes were read.
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
         return c;
     }
\ No newline at end of file
