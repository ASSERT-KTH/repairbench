diff --git a/tmp/874c84bc-9c95-406b-8851-a998fe207a31_buggy.java b/tmp/ac5c7cbe-572e-412e-839b-433704250dd6_fixed.java
index cae5e03..6ab6cd9 100644
--- a/tmp/874c84bc-9c95-406b-8851-a998fe207a31_buggy.java
+++ b/tmp/ac5c7cbe-572e-412e-839b-433704250dd6_fixed.java
@@ -1,33 +1,52 @@
     /*
      * (non-Javadoc)
      *
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
+        // According to the InputStream contract, reading 0 bytes should return 0.
+        if (len == 0) {
+            return 0;
+        }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
         final int hi = offs + len;
         int destOffs = offs;
-        int b;
-        while (destOffs < hi && ((b = read0()) >= 0)) {
+        int b = read0(); // Read the first byte
+        if (b < 0) {
+            // If the first read attempt returns EOF (-1), return -1.
+            return -1;
+        }
+
+        // If the first byte was read successfully, store it.
+        dest[destOffs++] = (byte) b;
+        count(1);
+
+        // Continue reading bytes until the buffer is full (destOffs == hi)
+        // or the end of the stream is reached (read0() returns < 0).
+        while (destOffs < hi) {
+            b = read0();
+            if (b < 0) {
+                break; // EOF reached
+            }
             dest[destOffs++] = (byte) b;
             count(1);
         }
 
-        int c = (destOffs == offs) ? -1 : (destOffs - offs);
-        return c;
+        // Return the total number of bytes read in this call.
+        return destOffs - offs;
     }
\ No newline at end of file
