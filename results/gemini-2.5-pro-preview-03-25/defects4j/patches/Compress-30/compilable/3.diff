diff --git a/tmp/943253bf-94c5-41ee-a583-b551c3303836_buggy.java b/tmp/a2bca1e1-56ea-4e4b-bde4-d69c47609c4f_fixed.java
index cae5e03..3b19808 100644
--- a/tmp/943253bf-94c5-41ee-a583-b551c3303836_buggy.java
+++ b/tmp/a2bca1e1-56ea-4e4b-bde4-d69c47609c4f_fixed.java
@@ -1,33 +1,46 @@
     /*
      * (non-Javadoc)
      * 
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
+        // Handle the len == 0 case explicitly according to the InputStream contract.
+        if (len == 0) {
+            return 0;
+        }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
+        // The read0() method reads a single byte; the loop continues until
+        // len bytes are read, the end of the stream is reached (read0 returns -1),
+        // or an exception is thrown.
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
-            count(1);
+            count(1); // Assuming count updates the number of bytes read from the underlying stream
         }
 
+        // Calculate the number of bytes actually read.
+        // If destOffs is still equal to offs, it means the first call to read0()
+        // returned -1 (end of stream was reached immediately) or the loop condition
+        // destOffs < hi was initially false (which is handled by the len == 0 check above).
+        // In the case where the stream was at EOF, return -1.
+        // Otherwise, return the number of bytes read (destOffs - offs).
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
         return c;
     }
\ No newline at end of file
