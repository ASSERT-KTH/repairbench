diff --git a/tmp/36d98a2f-9cd8-47da-bdbf-2c4cec20d6d1_buggy.java b/tmp/1e385dd4-874a-4c7e-b700-4976440dd59a_fixed.java
index cae5e03..e7fb2d6 100644
--- a/tmp/36d98a2f-9cd8-47da-bdbf-2c4cec20d6d1_buggy.java
+++ b/tmp/1e385dd4-874a-4c7e-b700-4976440dd59a_fixed.java
@@ -1,33 +1,43 @@
     /*
      * (non-Javadoc)
      *
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
-        if (offs + len > dest.length) {
+        // Use the corrected check to avoid integer overflow issues for large offsets/lengths
+        // and ensure offs is within bounds even if len is 0.
+        if (offs > dest.length || len > dest.length - offs) {
              throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                  + len + ") > dest.length(" + dest.length + ").");
         }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
+        // Per InputStream contract: if len is zero, return zero.
+        if (len == 0) {
+            return 0;
+        }
+
         final int hi = offs + len;
         int destOffs = offs;
         int b;
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
             count(1);
         }
 
+        // If destOffs is still equal to the initial offs, it means either len was 0 (handled above)
+        // or the first call to read0() returned -1 (EOF).
+        // Otherwise, return the number of bytes read.
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
         return c;
     }
\ No newline at end of file
