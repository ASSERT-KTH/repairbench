diff --git a/tmp/c4b564b4-84f1-4ba1-95c2-7a04ab6f12a7_buggy.java b/tmp/1d6e4733-2a37-4417-a17e-56f4c1c96e68_fixed.java
index cae5e03..552e3b0 100644
--- a/tmp/c4b564b4-84f1-4ba1-95c2-7a04ab6f12a7_buggy.java
+++ b/tmp/1d6e4733-2a37-4417-a17e-56f4c1c96e68_fixed.java
@@ -1,33 +1,42 @@
     /*
      * (non-Javadoc)
      *
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
+        // Handle the case for len = 0 according to the InputStream contract
+        if (len == 0) {
+            return 0;
+        }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
+        // The loop condition correctly prevents execution when len is 0,
+        // but the return logic below treated that as EOF.
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
             count(1);
         }
 
-        int c = (destOffs == offs) ? -1 : (destOffs - offs);
-        return c;
+        // If no bytes were read because the stream reached EOF *before*
+        // the loop started or during the first iteration, return -1.
+        // Otherwise, return the number of bytes read.
+        // The len == 0 case is now handled above.
+        return (destOffs == offs) ? -1 : (destOffs - offs);
     }
\ No newline at end of file
