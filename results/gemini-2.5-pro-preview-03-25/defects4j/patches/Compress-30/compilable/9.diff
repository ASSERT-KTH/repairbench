diff --git a/tmp/a6621060-f3b9-4311-9b79-5a0acc83f363_buggy.java b/tmp/c6a12d0c-e235-4c23-978e-e8e46b0fc960_fixed.java
index cae5e03..fe324d8 100644
--- a/tmp/a6621060-f3b9-4311-9b79-5a0acc83f363_buggy.java
+++ b/tmp/c6a12d0c-e235-4c23-978e-e8e46b0fc960_fixed.java
@@ -1,33 +1,44 @@
     /*
      * (non-Javadoc)
      *
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
+        // According to the InputStream contract, a len of 0 must return 0.
+        if (len == 0) {
+            return 0;
+        }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
+        // Loop reads bytes until the buffer is full (destOffs == hi)
+        // or the underlying stream reaches EOF (read0() < 0)
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
-            count(1);
+            count(1); // Increment bytes read count
         }
 
+        // Calculate the number of bytes read.
+        // If destOffs is still equal to offs, it means either the loop condition
+        // destOffs < hi was initially false (which we handled with the len == 0 check)
+        // or read0() returned -1 immediately, indicating EOF before any byte was read.
+        // Otherwise, return the number of bytes actually placed into the buffer.
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
         return c;
     }
\ No newline at end of file
