diff --git a/tmp/97ac9c9d-a432-485b-91bc-78555e9384ae_buggy.java b/tmp/86f94092-6704-4d1b-8f32-2394a507ced5_fixed.java
index cae5e03..4e86259 100644
--- a/tmp/97ac9c9d-a432-485b-91bc-78555e9384ae_buggy.java
+++ b/tmp/86f94092-6704-4d1b-8f32-2394a507ced5_fixed.java
@@ -1,33 +1,45 @@
     /*
      * (non-Javadoc)
      *
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
+        // According to the InputStream contract, a len of 0 should return 0.
+        if (len == 0) {
+            return 0;
+        }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
+        // Loop reads bytes into the destination buffer until either the
+        // requested length is fulfilled (destOffs == hi) or the end of the
+        // underlying stream is reached (read0() returns -1).
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
             count(1);
         }
 
+        // If destOffs is still equal to offs, it means either the loop
+        // condition (destOffs < hi) was initially false (which is handled by the
+        // len == 0 check above) or read0() returned -1 on the first attempt,
+        // indicating end-of-stream. In the latter case, return -1.
+        // Otherwise, return the number of bytes actually read.
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
         return c;
     }
\ No newline at end of file
