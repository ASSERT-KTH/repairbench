diff --git a/tmp/b9429cfb-b562-4d37-9916-b04529f9a231_buggy.java b/tmp/f6b8e183-a072-49c5-a98a-3fbdda74b9cb_fixed.java
index cae5e03..1ae18a5 100644
--- a/tmp/b9429cfb-b562-4d37-9916-b04529f9a231_buggy.java
+++ b/tmp/f6b8e183-a072-49c5-a98a-3fbdda74b9cb_fixed.java
@@ -1,33 +1,43 @@
     /*
      * (non-Javadoc)
      *
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
+        // According to the InputStream contract, return 0 for len == 0.
+        if (len == 0) {
+            return 0;
+        }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
+        // The while loop condition (destOffs < hi) prevents execution when len == 0,
+        // but the explicit check above is clearer and conforms to the contract directly.
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
             count(1);
         }
 
+        // If the loop didn't execute (either because len was 0 - handled above -
+        // or because read0() returned -1 immediately), destOffs will equal offs.
+        // In the case where read0() returned -1 immediately (end of stream reached before reading any bytes),
+        // we should return -1. Otherwise, return the number of bytes read.
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
         return c;
     }
\ No newline at end of file
