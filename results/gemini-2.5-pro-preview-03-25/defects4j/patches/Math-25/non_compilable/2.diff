diff --git a/tmp/300313fb-6b59-4a2d-9c25-2e9e7dd22938_buggy.java b/tmp/6d7c63e6-4a10-460f-b133-1b28f5d723ae_fixed.java
index 940af3f..95cba73 100644
--- a/tmp/300313fb-6b59-4a2d-9c25-2e9e7dd22938_buggy.java
+++ b/tmp/6d7c63e6-4a10-460f-b133-1b28f5d723ae_fixed.java
@@ -1,82 +1,121 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
+                // Check for vertical step to avoid division by zero
+                if (dx == 0) {
+                    // If dx is zero, this indicates duplicate x-coordinates or vertical lines.
+                    // The derivative estimate dy/dx is ill-defined.
+                    // Depending on the context, one might skip this point or handle it differently.
+                    // For this guesser, skip the problematic step for fPrime integral.
+                    // Note: f2Integral step doesn't divide by dx.
+                    final double f2StepIntegral =
+                        dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
+                    final double x = currentX - startX;
+                    f2Integral += f2StepIntegral;
+                    // fPrime2Integral remains unchanged for this step
+
+                    // Update sums, potentially excluding terms involving fPrime2Integral if it's unreliable
+                    // However, the original logic includes it, so let's proceed cautiously.
+                    // If fPrime2Integral becomes unreliable, the c1, c2, c3 coeffs might be off.
+                    sx2 += x * x;
+                    sy2 += f2Integral * f2Integral;
+                    sxy += x * f2Integral;
+                    sxz += x * fPrime2Integral; // This term might be affected
+                    syz += f2Integral * fPrime2Integral; // This term might be affected
+
+                    continue; // Skip the rest of the loop for this iteration if dx == 0
+                }
+
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
                 final double fPrime2StepIntegral = dy * dy / dx;
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+
+            // Check for ill-conditioned cases (division by zero) first.
+            // This can happen in cases like MATH-844 where the derivatives (dy/dx)
+            // or the resulting integrals lead to poorly determined coefficients.
+            if (c2 == 0 || c3 == 0) {
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
+            }
+
+            // Proceed with checking the signs required for square roots.
+            double c1OverC2 = c1 / c2;
+            double c2OverC3 = c2 / c3;
+
+            if (c1OverC2 < 0 || c2OverC3 < 0) {
+                // Inconsistent results (negative intermediate square roots).
+                // Fallback to simpler estimation based on data range.
                 final int last = observations.length - 1;
                 // Range of the observations, assuming that the
                 // observations are sorted.
                 final double xRange = observations[last].getX() - observations[0].getX();
                 if (xRange == 0) {
                     throw new ZeroException();
                 }
                 omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
+                // Estimate amplitude based on Y range
+                double yMin = observations[0].getY(); // Initialize with first point's Y
+                double yMax = yMin;                  // Initialize with first point's Y
                 for (int i = 1; i < observations.length; ++i) {
                     final double y = observations[i].getY();
                     if (y < yMin) {
                         yMin = y;
                     }
                     if (y > yMax) {
                         yMax = y;
                     }
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                // Standard case: results are consistent, and denominators are non-zero.
+                // Calculate amplitude and pulsation using the computed coefficients.
+                a = FastMath.sqrt(c1OverC2);
+                omega = FastMath.sqrt(c2OverC3);
             }
         }
\ No newline at end of file
