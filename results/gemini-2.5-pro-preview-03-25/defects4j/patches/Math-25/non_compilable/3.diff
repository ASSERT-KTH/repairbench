diff --git a/tmp/93c07b72-9e13-499d-8db8-224b31b7d1b5_buggy.java b/tmp/f4b77770-98a0-477b-9fe0-6fe90a1febb9_fixed.java
index 940af3f..282bd0a 100644
--- a/tmp/93c07b72-9e13-499d-8db8-224b31b7d1b5_buggy.java
+++ b/tmp/f4b77770-98a0-477b-9fe0-6fe90a1febb9_fixed.java
@@ -1,82 +1,94 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
+            // Check abscissa range first.
+            final int last = observations.length - 1;
+            // Range of the observations, assuming that the observations are sorted.
+            final double xRange = observations[last].getX() - observations[0].getX();
+            if (xRange == 0) {
+                throw new ZeroException();
+            }
+
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
+
+                // If dx == 0, this will lead to division by zero below.
+                // This case is implicitly handled by the xRange == 0 check
+                // if all points have the same x, or should be prevented by
+                // requiring distinct x values in the input observations.
+                // The original code did not explicitly check dx == 0 here.
+
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
                 final double fPrime2StepIntegral = dy * dy / dx;
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
-                }
-                omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
+            // Check for conditions that preclude sensible results.
+            // This includes potential division by zero if c2 or c3 is zero,
+            // and cases where the ratios required for sqrt are negative (MATH-844).
+            if (c2 == 0.0 || c3 == 0.0) {
+                 // Division by zero would occur when computing ratios c1/c2 or c2/c3.
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
-                a = 0.5 * (yMax - yMin);
-            } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
 
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+            // Compute the ratios. Caching them is slightly more efficient
+            // and makes the condition check clearer.
+            final double c1OverC2 = c1 / c2;
+            final double c2OverC3 = c2 / c3;
+
+            if (c1OverC2 < 0.0 || c2OverC3 < 0.0) {
+                 // Negative value under square root required for amplitude or omega.
+                 // This indicates the guess based on the integration formulas failed,
+                 // often because the data is not well approximated by a harmonic function.
+                 // This is the case triggered by MATH-844.
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
+
+            // If we passed the checks, compute the guess using the derived ratios.
+            // Note: A = sqrt(c1 / c2), omega = sqrt(c2 / c3)
+            a = FastMath.sqrt(c1OverC2);
+            omega = FastMath.sqrt(c2OverC3);
         }
\ No newline at end of file
