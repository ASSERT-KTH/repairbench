diff --git a/tmp/9b31e890-3ae3-4692-a7ae-020c223c6466_buggy.java b/tmp/64666074-6428-47b3-8916-abef364f0b39_fixed.java
index 940af3f..2199336 100644
--- a/tmp/9b31e890-3ae3-4692-a7ae-020c223c6466_buggy.java
+++ b/tmp/64666074-6428-47b3-8916-abef364f0b39_fixed.java
@@ -1,82 +1,85 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
+            // Check preconditions.
+            if (observations.length < 2) {
+                 throw new MathIllegalStateException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_FOR_GUESSING,
+                                                    observations.length, 2);
+            }
+
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
+
+            // Check total range
+            final double endX = observations[observations.length - 1].getX();
+            if (FastMath.abs(endX - startX) < FastMath.ulp(startX) + FastMath.ulp(endX)) { // Use ULP for tolerance
+                 throw new ZeroException(LocalizedFormats.ZERO_RANGE_INTERPOLATION_ORDER);
+            }
+
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
+                // Handle step size of zero.
+                if (FastMath.abs(dx) < FastMath.ulp(previousX) + FastMath.ulp(currentX)) {
+                    // Skip points with the same abscissa.
+                    continue;
+                }
                 final double dy = currentY - previousY;
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
                 final double fPrime2StepIntegral = dy * dy / dx;
 
-                final double x = currentX - startX;
+                final double x = currentX - startX; // Use relative x for potentially better numerical stability
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
-                }
-                omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
+            // Check for ill-conditioned cases (MATH-844 related)
+            // Includes checks for division by zero (c2 or c3 is zero)
+            // and square root of negative numbers (c1/c2 < 0 or c2/c3 < 0)
+            final double FPM_TOL = 1e-14; // Tolerance for checking zero or negative values
+            if (FastMath.abs(c2) < FPM_TOL || FastMath.abs(c3) < FPM_TOL || (c1 / c2) < 0 || (c2 / c3) < 0) {
+                // The guessing procedure cannot produce sensible results.
+                throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
-                a = 0.5 * (yMax - yMin);
-            } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
 
+            // Estimate amplitude and frequency
+            // No fallback mechanism anymore, throw exception if formulas are not applicable
             a = FastMath.sqrt(c1 / c2);
             omega = FastMath.sqrt(c2 / c3);
         }
\ No newline at end of file
-        }
