diff --git a/tmp/85921ce7-5cc6-4207-91f2-9527f0fa31a2_buggy.java b/tmp/815e4817-0744-4990-9073-f7f7722a60e0_fixed.java
index 940af3f..ebe1259 100644
--- a/tmp/85921ce7-5cc6-4207-91f2-9527f0fa31a2_buggy.java
+++ b/tmp/815e4817-0744-4990-9073-f7f7722a60e0_fixed.java
@@ -1,82 +1,104 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
+            // Check for zero range
+            final double xRange = observations[observations.length - 1].getX() - observations[0].getX();
+            if (xRange == 0) {
+                throw new ZeroException();
+            }
+
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
+                // If dx == 0, this will occur for all points since they are sorted,
+                // and xRange == 0 will have already thrown ZeroException.
+                // If dx is very small, dy/dx can be large, but this reflects the data.
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
                 final double fPrime2StepIntegral = dy * dy / dx;
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+
+            // Check for conditions that indicate the guess is unreliable or impossible
+            if (c2 == 0 || c3 == 0) {
+                // Check for division by zero first
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
+            }
+            // Check for negative values under square root
+            double c1 Onc2 = c1 / c2;
+            double c2 Onc3 = c2 / c3;
+            if (c1 Onc2 < 0 || c2 Onc3 < 0) {
+                 // In some ill-conditioned cases (cf. MATH-844), the guesser
+                 // procedure cannot produce sensible results.
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
+
+                 /*
+                 // Original fallback logic: Replaced by exception based on test expectation and comment
+                 // This fallback might compute a guess omega=2pi/xRange and a=amplitude/2
+                 // but the underlying integral method failed, indicating a poor fit initially.
                  final int last = observations.length - 1;
                  // Range of the observations, assuming that the
                  // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
-                }
+                 // final double xRange = observations[last].getX() - observations[0].getX(); // calculated above
                  omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
+                 double yMin = observations[0].getY(); // Initialize with first point
+                 double yMax = yMin;
+                 for (int i = 1; i < observations.length; ++i) { // Start from 1 is okay now
                      final double y = observations[i].getY();
                      if (y < yMin) {
                          yMin = y;
                      }
                      if (y > yMax) {
                          yMax = y;
                      }
                  }
                  a = 0.5 * (yMax - yMin);
+                 */
             } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                // Estimate a and omega using the valid coefficients
+                a = FastMath.sqrt(c1 Onc2);
+                omega = FastMath.sqrt(c2 Onc3);
             }
         }
\ No newline at end of file
