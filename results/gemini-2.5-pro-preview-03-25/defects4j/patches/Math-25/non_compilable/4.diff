diff --git a/tmp/1bf28c90-717f-4734-98fd-7646fe72f375_buggy.java b/tmp/cbe0455e-568c-4bed-8163-28c511b843b3_fixed.java
index 940af3f..75d56a5 100644
--- a/tmp/1bf28c90-717f-4734-98fd-7646fe72f375_buggy.java
+++ b/tmp/cbe0455e-568c-4bed-8163-28c511b843b3_fixed.java
@@ -1,82 +1,98 @@
+import org.apache.commons.math3.exception.MathIllegalStateException;
+import org.apache.commons.math3.exception.ZeroException;
+import org.apache.commons.math3.exception.util.LocalizedFormats;
+import org.apache.commons.math3.util.FastMath;
+// Assuming WeightedObservedPoint is available in context
+// Assuming observations is a field: WeightedObservedPoint[] observations;
+// Assuming a and omega are fields: double a; double omega;
+
+
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
+            // Check for zero range abscissa.
+            final int last = observations.length - 1;
+            final double xRange = observations[last].getX() - observations[0].getX();
+            if (xRange == 0) {
+                throw new ZeroException();
+            }
+
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
+                // update the integrals of f^2 and f'^2
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
+                // Note: Potential division by zero if dx == 0.
+                // This can happen if observations contains duplicate x-coordinates.
+                // If dx=0, dy*dy/dx is NaN (if dy=0) or +/-Infinity (if dy!=0).
+                // These values will propagate through the sums.
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
-                final double fPrime2StepIntegral = dy * dy / dx;
+                // Avoid division by zero explicitly: if dx is zero, step integral is zero.
+                // This is consistent with the integral being an area. A zero-width interval has zero area.
+                // Note: dy*dy/dx can be large if dx is small, sensitive to noise.
+                final double fPrime2StepIntegral = (dx == 0) ? 0.0 : (dy * dy / dx);
+
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
-                }
-                omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
-                }
-                a = 0.5 * (yMax - yMin);
-            } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
+            // Calculate a and omega using the formulas derived from harmonic assumption.
+            // These calculations might fail (NaN/Infinity) if the harmonic assumption
+            // is strongly violated (leading to negative sqrt args) or if the data
+            // is degenerate (e.g., c2=0 or c3=0 resulting in division by zero).
+            final double potentialA = FastMath.sqrt(c1 / c2);
+            final double potentialOmega = FastMath.sqrt(c2 / c3);
 
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+            // Check if the calculation resulted in non-finite numbers (NaN or Infinity).
+            // This indicates that the guessing procedure could not produce sensible results,
+            // likely due to ill-conditioned data or data that doesn't fit the harmonic model.
+            if (Double.isNaN(potentialA) || Double.isNaN(potentialOmega) ||
+                Double.isInfinite(potentialA) || Double.isInfinite(potentialOmega)) {
+                 // Throw exception as required by test MATH-844 for ill-conditioned cases.
+                 // The previous code had fallback logic here, which prevented this exception.
+                throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
+
+            // If calculations are valid (finite numbers), assign the results.
+            a = potentialA;
+            omega = potentialOmega;
         }
\ No newline at end of file
