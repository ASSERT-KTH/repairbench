diff --git a/tmp/2097490a-8c5b-49c8-9f1a-210f9d4ca368_buggy.java b/tmp/70e579e3-ee15-4040-8c79-6408767a0ebe_fixed.java
index 940af3f..6f04761 100644
--- a/tmp/2097490a-8c5b-49c8-9f1a-210f9d4ca368_buggy.java
+++ b/tmp/70e579e3-ee15-4040-8c79-6408767a0ebe_fixed.java
@@ -1,82 +1,99 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
+            // Check abscissa range to avoid division by zero later
+            final int last = observations.length - 1;
+            final double xRange = observations[last].getX() - observations[0].getX();
+            if (xRange == 0) {
+                throw new ZeroException();
+            }
+
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
-                final double fPrime2StepIntegral = dy * dy / dx;
+                // Avoid division by zero if dx == 0 (e.g., duplicate points)
+                final double fPrime2StepIntegral = (dx == 0) ? 0.0 : (dy * dy / dx);
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
+
+            // Check for conditions that indicate failure or fallback
+            if (c2 == 0.0 || c3 == 0.0) {
+                // If c2 or c3 is zero, the main calculation method fails (division by zero).
+                // This is considered an ill-conditioned case where the guesser cannot produce
+                // sensible results based on this method (cf. MATH-844).
+                throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
+
+            // Now that c2 and c3 are non-zero, check the ratios for negativity
+            double ratio1 = c1 / c2;
+            double ratio2 = c2 / c3;
+
+            if (ratio1 < 0 || ratio2 < 0) {
+                // Ratios are negative, indicating imaginary amplitude or frequency.
+                // Fallback to range-based estimation.
+                // xRange was already checked to be non-zero at the start.
                 omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
+                // Correctly initialize yMin/yMax using the first observation's Y value
+                double yMin = observations[0].getY();
+                double yMax = yMin;
                 for (int i = 1; i < observations.length; ++i) {
                     final double y = observations[i].getY();
                     if (y < yMin) {
                         yMin = y;
                     }
                     if (y > yMax) {
                         yMax = y;
                     }
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                // All checks passed: c2 != 0, c3 != 0, ratio1 >= 0, ratio2 >= 0.
+                // Proceed with the main calculation based on integrals.
+                a = FastMath.sqrt(ratio1);
+                omega = FastMath.sqrt(ratio2);
             }
         }
\ No newline at end of file
