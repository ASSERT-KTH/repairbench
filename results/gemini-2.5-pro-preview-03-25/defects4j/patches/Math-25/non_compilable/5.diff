diff --git a/tmp/e54ea784-99b5-4911-abe3-b52be1099acd_buggy.java b/tmp/a702ebb6-a81c-447b-bb6a-2211b4a9e34b_fixed.java
index 940af3f..7b4f78f 100644
--- a/tmp/e54ea784-99b5-4911-abe3-b52be1099acd_buggy.java
+++ b/tmp/a702ebb6-a81c-447b-bb6a-2211b4a9e34b_fixed.java
@@ -1,82 +1,129 @@
+import org.apache.commons.math3.exception.MathIllegalStateException;
+import org.apache.commons.math3.exception.ZeroException;
+import org.apache.commons.math3.exception.util.LocalizedFormats;
+import org.apache.commons.math3.util.FastMath;
+
+// Added necessary imports for clarity, assuming they exist in the context.
+// Also assuming 'observations' is a field of type WeightedObservedPoint[]
+// and 'a', 'omega' are fields to be set by this method.
+
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
-         * produce sensible results.
+         * produce sensible results, for example if {@code observations} has
+         * less than 2 points or if the denominators {@code c2} or {@code c3}
+         * computed for the guess turn out to be zero.
          */
         private void guessAOmega() {
+            // Check preconditions.
+            if (observations.length < 2) {
+                 throw new MathIllegalStateException(LocalizedFormats.NOT_ENOUGH_POINTS_IN_SAMPLE,
+                                                    observations.length);
+            }
+
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
                 // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
+
+                // Check for dx == 0 to prevent division by zero.
+                // This should ideally not happen if points are sorted and distinct.
+                if (dx == 0.0) {
+                    // If x values are identical, the derivative calculation is problematic.
+                    // Throwing an exception might be suitable here as well.
+                    // Or, if points can be identical, skip this step's contribution to derivative integral.
+                    // For now, let's assume dx > 0, consistent with sorted distinct points.
+                    // If this assumption is wrong, the code might fail here with ArithmeticException.
+                    // However, the test case MATH-844 has distinct x-values.
+                    // A robust implementation might explicitly handle dx=0.
+                    // Let's proceed assuming dx > 0 based on typical use cases and test data.
+                }
+
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
-                final double fPrime2StepIntegral = dy * dy / dx;
+                // Check dx before division
+                final double fPrime2StepIntegral = (dx == 0.0) ? 0.0 : (dy * dy / dx);
+
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+
+            // Check for conditions that make the computation invalid or unreliable (MATH-844 fix)
+            // If c2 or c3 is zero, the subsequent divisions/sqrt operations are undefined.
+            if (c2 == 0.0 || c3 == 0.0) {
+                 // This indicates ill-conditioned data or failure of the model assumptions.
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
+            }
+
+            // Check ratios for negativity AFTER ensuring denominators are non-zero
+            double ratio1 = c1 / c2;
+            double ratio2 = c2 / c3;
+
+            if (ratio1 < 0 || ratio2 < 0) {
+                // Fallback estimation based on ranges if ratios are negative (implying sqrt of negative)
                 final int last = observations.length - 1;
                 // Range of the observations, assuming that the
                 // observations are sorted.
                 final double xRange = observations[last].getX() - observations[0].getX();
                 if (xRange == 0) {
+                    // This should not happen if observations.length >= 2 and points are distinct.
                     throw new ZeroException();
                 }
                 omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
+                // Correctly compute y range using all points
+                double yMin = observations[0].getY();
+                double yMax = observations[0].getY();
                 for (int i = 1; i < observations.length; ++i) {
                     final double y = observations[i].getY();
                     if (y < yMin) {
                         yMin = y;
                     }
                     if (y > yMax) {
                         yMax = y;
                     }
                 }
+                // Amplitude guess based on peak-to-peak range
                 a = 0.5 * (yMax - yMin);
             } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                // Both ratios are non-negative, proceed with calculation using square roots
+                a = FastMath.sqrt(ratio1);
+                omega = FastMath.sqrt(ratio2);
             }
         }
\ No newline at end of file
