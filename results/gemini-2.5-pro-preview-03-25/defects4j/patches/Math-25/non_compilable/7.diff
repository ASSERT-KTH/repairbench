diff --git a/tmp/bf00ac05-45f6-45f9-aceb-26d7d1d1a54b_buggy.java b/tmp/200e261c-e63e-471f-8005-cb7539386384_fixed.java
index 940af3f..c1efa18 100644
--- a/tmp/bf00ac05-45f6-45f9-aceb-26d7d1d1a54b_buggy.java
+++ b/tmp/200e261c-e63e-471f-8005-cb7539386384_fixed.java
@@ -1,82 +1,126 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
-         * produce sensible results.
+         * produce sensible results, or if there are not enough points.
          */
         private void guessAOmega() {
+             // Check preconditions
+            if (observations.length < 2) {
+                 // Not enough points to guess.
+                 throw new MathIllegalStateException(LocalizedFormats.NOT_ENOUGH_POINTS_IN_SAMPLE,
+                                                     observations.length, 2, true);
+            }
+
+            final double firstX = observations[0].getX();
+            final double lastX = observations[observations.length - 1].getX();
+            final double xRange = lastX - firstX;
+            if (xRange == 0) {
+                throw new ZeroException();
+            }
+
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
+                // update the integrals of f^2 and f'^2
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
+
+                // Check if dx is zero : Possible if duplicate X are present.
+                // If dx is zero, dy/dx is undefined. If dy is also zero, 0/0=NaN. If dy!=0, +/-Inf.
+                // The integral update formulas also assume dx != 0.
+                // Robustness: throw exception if dx is zero or too small,
+                // as the derivative estimate becomes unreliable/infinite.
+                // A small tolerance might be needed instead of exact zero comparison.
+                // However, strictly following the original code's potential failure modes
+                // and the test case expectation, let's check for dx == 0 explicitly
+                // as it leads to division by zero in fPrime2StepIntegral calculation.
+                if (dx == 0.0) {
+                    // Should not happen with sorted distinct points over non-zero range.
+                    // If it does, indicates inconsistent data or failure of precondition.
+                     throw new MathIllegalStateException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, previousX);
+                }
+
+
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
                 final double fPrime2StepIntegral = dy * dy / dx;
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
+                // Check for NaN/Infinity which can arise from fPrime2StepIntegral if dx is tiny or
+                // if intermediate values overflow.
+                if (Double.isInfinite(fPrime2Integral) || Double.isNaN(fPrime2Integral)) {
+                    throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
+                }
+
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
-            // compute the amplitude and pulsation coefficients
+            // compute the amplitude and pulsation coefficients related to linear model
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
-                }
-                omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
+            // Check for NaN resulting from potentially large intermediate values in sums
+            if (Double.isNaN(c1) || Double.isNaN(c2) || Double.isNaN(c3)) {
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
-                    if (y > yMax) {
-                        yMax = y;
+
+
+            // Check for conditions that preclude sensible parameter guessing
+            if (c2 == 0.0 || c3 == 0.0) {
+                 // Division by zero is guaranteed, cannot make estimates.
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
+
+            // Estimate squares of angular frequency (omega^2) and amplitude (a^2)
+            double omega2 = c2 / c3;
+            double a2 = c1 / c2;
+
+            if (omega2 < 0 || a2 < 0) {
+                // The algorithm produced negative squares for omega or amplitude.
+                // This indicates that the data is not well approximated by a harmonic function
+                // or the underlying assumptions of the guessing procedure are violated.
+                // Throw exception instead of using fallback estimates (original behavior).
+                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
-                a = 0.5 * (yMax - yMin);
-            } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
+            // If we reach here, omega2 and a2 are non-negative.
+            // They could still be zero or very large if data is pathological.
+
+            // Guesses are mathematically plausible (non-negative squares)
+            a = FastMath.sqrt(a2);
+            omega = FastMath.sqrt(omega2);
 
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+            // Final check: ensure results are finite numbers.
+            // NaN check might be redundant due to earlier checks but safe to keep.
+            if (Double.isNaN(a) || Double.isNaN(omega)) {
+                throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
             }
         }
\ No newline at end of file
