diff --git a/tmp/e75c3f53-b7b5-4629-a309-adb303061f2f_buggy.java b/tmp/7f2405d1-e0cf-431a-8c0a-9892ba6cd89f_fixed.java
index 940af3f..0d2091d 100644
--- a/tmp/e75c3f53-b7b5-4629-a309-adb303061f2f_buggy.java
+++ b/tmp/7f2405d1-e0cf-431a-8c0a-9892ba6cd89f_fixed.java
@@ -1,82 +1,105 @@
         /**
          * Estimate a first guess of the amplitude and angular frequency.
          * This method assumes that the {@link #sortObservations()} method
          * has been called previously.
          *
          * @throws ZeroException if the abscissa range is zero.
          * @throws MathIllegalStateException when the guessing procedure cannot
          * produce sensible results.
          */
         private void guessAOmega() {
             // initialize the sums for the linear model between the two integrals
             double sx2 = 0;
             double sy2 = 0;
             double sxy = 0;
             double sxz = 0;
             double syz = 0;
 
             double currentX = observations[0].getX();
             double currentY = observations[0].getY();
             double f2Integral = 0;
             double fPrime2Integral = 0;
             final double startX = currentX;
             for (int i = 1; i < observations.length; ++i) {
                 // one step forward
                 final double previousX = currentX;
                 final double previousY = currentY;
                 currentX = observations[i].getX();
                 currentY = observations[i].getY();
 
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
+                // update the integrals of f^2 and f'^2
                 // considering a linear model for f (and therefore constant f')
                 final double dx = currentX - previousX;
                 final double dy = currentY - previousY;
+
+                // Check for dx == 0 to avoid division by zero.
+                // This can happen if points have the same x-coordinate.
+                if (dx == 0.0) {
+                    // If x coordinates are identical, skip this interval for derivative calculation.
+                    // The f^2 integral contribution is also zero.
+                    continue; // Skip update for this interval if dx is zero
+                }
+
                 final double f2StepIntegral =
                     dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
                 final double fPrime2StepIntegral = dy * dy / dx;
 
                 final double x = currentX - startX;
                 f2Integral += f2StepIntegral;
                 fPrime2Integral += fPrime2StepIntegral;
 
                 sx2 += x * x;
                 sy2 += f2Integral * f2Integral;
                 sxy += x * f2Integral;
                 sxz += x * fPrime2Integral;
                 syz += f2Integral * fPrime2Integral;
             }
 
             // compute the amplitude and pulsation coefficients
             double c1 = sy2 * sxz - sxy * syz;
             double c2 = sxy * sxz - sx2 * syz;
             double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+
+            // Check for degenerate cases (MATH-844).
+            // If c2 or c3 is zero or very close to zero, the formulas for amplitude and omega are invalid
+            // or numerically unstable. This indicates the guessing procedure failed.
+            if (c2 == 0.0 || c3 == 0.0) {
+                throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);
+            }
+
+            // Check if the arguments for the square roots are non-negative.
+            // A negative value indicates that the model assumptions are strongly violated.
+            double ratio1 = c1 / c2;
+            double ratio2 = c2 / c3;
+            if (ratio1 < 0 || ratio2 < 0) {
+                // Fallback guess based on data range.
                 final int last = observations.length - 1;
                 // Range of the observations, assuming that the
                 // observations are sorted.
                 final double xRange = observations[last].getX() - observations[0].getX();
                 if (xRange == 0) {
                     throw new ZeroException();
                 }
                 omega = 2 * Math.PI / xRange;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
+                // Estimate amplitude based on min/max y values.
+                double yMin = observations[0].getY();
+                double yMax = yMin;
                 for (int i = 1; i < observations.length; ++i) {
                     final double y = observations[i].getY();
                     if (y < yMin) {
                         yMin = y;
-                    }
-                    if (y > yMax) {
+                    } else if (y > yMax) {
                         yMax = y;
                     }
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
+                // Compute amplitude and pulsation from the ratios.
                 // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+                // procedure cannot produce sensible results. The checks above
+                // handle division by zero and negative arguments under sqrt.
+                a = FastMath.sqrt(ratio1);
+                omega = FastMath.sqrt(ratio2);
             }
         }
\ No newline at end of file
