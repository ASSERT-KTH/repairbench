diff --git a/tmp/21cc0e4c-66fa-48b3-b04b-cfe3a3c59539_buggy.java b/tmp/1fcc691d-3e5a-4277-b3e3-995ed64b298f_fixed.java
index 7dc89ed..4b65d45 100644
--- a/tmp/21cc0e4c-66fa-48b3-b04b-cfe3a3c59539_buggy.java
+++ b/tmp/1fcc691d-3e5a-4277-b3e3-995ed64b298f_fixed.java
@@ -1,20 +1,43 @@
         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {
             String name = t.asEndTag().normalName();
             ArrayList<Element> stack = tb.getStack();
+            // Capture the original current element BEFORE the loop starts modifying the stack or searching.
+            // This represents the "current node" context when the end tag is processed according to the spec.
+            Element originalCurrentElement = tb.currentElement();
+
             for (int pos = stack.size() - 1; pos >= 0; pos--) {
                 Element node = stack.get(pos);
                 if (node.nodeName().equals(name)) {
+                    // Found the matching element 'node' at index 'pos'.
+
+                    // Step 3.1 (Spec): Generate implied end tags, except for elements with the same tag name as node.
                     tb.generateImpliedEndTags(name);
-                    if (!name.equals(tb.currentElement().nodeName()))
+
+                    // Step 3.2 (Spec): If the matched element 'node' is not the same element instance as the
+                    // original 'current node' (the element at the top of the stack when this method started),
+                    // then this is a parse error.
+                    if (node != originalCurrentElement) {
                          tb.error(this);
+                    }
+
+                    // Step 3.3 (Spec): Pop elements from the stack until the matched 'node' has been popped.
                     tb.popStackToClose(name);
+
+                    // Step 3.4 (Spec): Abort these steps.
                     break;
                 } else {
+                    // Step 4 (Spec): If node is one of the elements in the special category...
+                    // Note: tb.isSpecial(node) might have case-sensitivity issues if preserveCase is true,
+                    // as it compares node.nodeName() (potentially uppercase) with lowercase special tag names.
+                    // Assuming this potential issue is handled elsewhere or not relevant to this specific fix.
                     if (tb.isSpecial(node)) {
                         tb.error(this);
-                        return false;
+                        return false; // Parse error; signal that the token was not handled successfully.
                     }
+                    // Step 5 & 6 (Spec): Continue loop (implicit).
                 }
             }
-            return true;
+            // If loop completes without finding a match: Ignore token.
+            // Also handles fragment case (Step 2) implicitly if pos < 0.
+            return true; // Indicate token processing is complete (either processed or ignored).
         }
\ No newline at end of file
