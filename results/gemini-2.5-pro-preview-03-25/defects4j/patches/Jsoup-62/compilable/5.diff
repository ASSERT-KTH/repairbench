diff --git a/tmp/ad0ebc17-3038-43f6-a825-695e136c20d5_buggy.java b/tmp/bf97363c-be34-4d81-8bb4-bd01a62ea824_fixed.java
index 7dc89ed..e7185cf 100644
--- a/tmp/ad0ebc17-3038-43f6-a825-695e136c20d5_buggy.java
+++ b/tmp/bf97363c-be34-4d81-8bb4-bd01a62ea824_fixed.java
@@ -1,20 +1,37 @@
         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {
-            String name = t.asEndTag().normalName();
+            String name = t.asEndTag().normalName(); // incoming name, potentially incorrect case if preserveCase=true
             ArrayList<Element> stack = tb.getStack();
             for (int pos = stack.size() -1; pos >= 0; pos--) {
                 Element node = stack.get(pos);
-                if (node.nodeName().equals(name)) {
-                    tb.generateImpliedEndTags(name);
-                    if (!name.equals(tb.currentElement().nodeName()))
+                // Use case-insensitive comparison to find the matching node element,
+                // as HTML tag matching is typically case-insensitive, even if case is preserved for output.
+                // This also helps compensate if the incoming token's normalization (`name`) is inconsistent
+                // with the element's node name case on the stack when preserveCase=true.
+                if (node.nodeName().equalsIgnoreCase(name)) {
+                    // Found the matching node, use its name (which has the correct case as stored)
+                    // for subsequent operations that require the specific name on the stack.
+                    String nodeName = node.nodeName();
+                    tb.generateImpliedEndTags(nodeName);
+                    // Error check: compare the *found* node's name with the current element's name
+                    // to see if we had to close elements implicitly.
+                    if (!nodeName.equals(tb.currentElement().nodeName()))
                         tb.error(this);
-                    tb.popStackToClose(name);
-                    break;
+                    // Pop up to and including the node that was found. Pass its actual name.
+                    tb.popStackToClose(nodeName);
+                    break; // Found and closed the tag.
                 } else {
+                    // If we encounter a special element (scoping element) before finding the matching tag,
+                    // it's an error, and we should stop processing this end tag.
+                    // The isSpecial check should ideally handle case according to HTML rules (lowercase),
+                    // but we rely on its existing behavior here.
                     if (tb.isSpecial(node)) {
                         tb.error(this);
-                        return false;
+                        return false; // Stop processing this tag.
                     }
+                    // Otherwise, continue searching up the stack.
                 }
             }
+            // If loop completes without finding the tag, it's implicitly ignored.
+            // According to spec, this might also be a parse error, but returning true lets parsing continue.
             return true;
         }
\ No newline at end of file
