diff --git a/tmp/21f95bf2-3b07-4c43-ab5b-2547b1d0acee_buggy.java b/tmp/20a7c37e-d3be-4f5e-87d8-5aca8ccacd4e_fixed.java
index 7dc89ed..1628e12 100644
--- a/tmp/21f95bf2-3b07-4c43-ab5b-2547b1d0acee_buggy.java
+++ b/tmp/20a7c37e-d3be-4f5e-87d8-5aca8ccacd4e_fixed.java
@@ -1,20 +1,43 @@
         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {
-            String name = t.asEndTag().normalName();
+            Token.EndTag endTag = t.asEndTag();
+            // We need both the original tag name and the normalized name.
+            // The original name is used for matching against elements on the stack (which store original names).
+            // The normalized name is used for calling methods like generateImpliedEndTags and isSpecial,
+            // which typically operate on normalized names for scope checks.
+            String origName = endTag.name(); // Original case name, e.g., "X"
+            String normName = endTag.normalName(); // Normalized name, e.g., "X" or "x" depending on settings
+
             ArrayList<Element> stack = tb.getStack();
             for (int pos = stack.size() - 1; pos >= 0; pos--) {
                 Element node = stack.get(pos);
-                if (node.nodeName().equals(name)) {
-                    tb.generateImpliedEndTags(name);
-                    if (!name.equals(tb.currentElement().nodeName()))
+
+                // Compare the token's original name with the element's original name (nodeName).
+                if (node.nodeName().equals(origName)) {
+                    // Found the matching element.
+                    // Generate implied end tags based on the normalized name (consistent with inScope checks).
+                    tb.generateImpliedEndTags(normName);
+
+                    // Check if the element we found is not the current element.
+                    // This signals a misplaced end tag error. Compare original names for consistency.
+                    if (!origName.equals(tb.currentElement().nodeName()))
                         tb.error(this);
-                    tb.popStackToClose(name);
-                    break;
+
+                    // Pop the stack up to the found element.
+                    // popStackToClose uses nodeName() internally for comparison, so pass the original name.
+                    tb.popStackToClose(origName);
+                    break; // Element closed, stop searching down the stack.
                 } else {
+                    // If the node doesn't match, check if it's a "special" node.
+                    // tb.isSpecial typically uses normalized tag names for its checks.
                     if (tb.isSpecial(node)) {
-                        tb.error(this);
-                        return false;
+                        tb.error(this); // Error: encountered a special blocking tag before finding the match.
+                        return false; // Indicate failure to process the end tag.
                     }
+                    // Otherwise, continue searching down the stack.
                 }
             }
+            // Return true signifies the process completed (either found and closed, or reached end of stack without finding
+            // or hitting a special element). The return value indicates whether parsing should proceed,
+            // not necessarily whether the tag was successfully matched and closed.
             return true;
         }
\ No newline at end of file
