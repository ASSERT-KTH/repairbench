diff --git a/tmp/3f2ebccf-cf52-474d-a748-d3dad531e0fa_buggy.java b/tmp/0d3e85fe-54fd-4f73-b1d4-e4d23ca5f084_fixed.java
index 7dc89ed..dc03943 100644
--- a/tmp/3f2ebccf-cf52-474d-a748-d3dad531e0fa_buggy.java
+++ b/tmp/0d3e85fe-54fd-4f73-b1d4-e4d23ca5f084_fixed.java
@@ -1,20 +1,49 @@
         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {
-            String name = t.asEndTag().normalName();
+            String name = t.asEndTag().normalName(); // Normalized name, expected to respect settings
+            // Determine the name to use for searching the stack, explicitly handling case sensitivity setting.
+            // Uses the original token name if preserving case, otherwise the normalized name.
+            // This guards against potential bugs in normalName() respecting the setting.
+            String searchName = tb.settings().preserveCase() ? t.asEndTag().name() : name;
+
             ArrayList<Element> stack = tb.getStack();
             for (int pos = stack.size() - 1; pos >= 0; pos--) {
                 Element node = stack.get(pos);
-                if (node.nodeName().equals(name)) {
+                // Compare node names using the case-aware searchName
+                if (node.nodeName().equals(searchName)) {
+                    // Found the matching element 'node' at 'pos'
+
+                    // Generate implied end tags. Pass the normalized name, assuming the logic
+                    // for implied tags works with normalized (usually lowercase) names per HTML5 spec.
                     tb.generateImpliedEndTags(name);
-                    if (!name.equals(tb.currentElement().nodeName()))
+
+                    // Check if the element we found ('node') is the current open element.
+                    // If not, it indicates a misnested tag. Compare using case-aware searchName,
+                    // as currentElement().nodeName() is also case-aware.
+                    // This check must happen *before* popping the stack.
+                    if (!searchName.equals(tb.currentElement().nodeName())) {
                         tb.error(this);
-                    tb.popStackToClose(name);
-                    break;
+                    }
+
+                    // Pop the stack up to and including the matched element.
+                    // Pass the case-aware searchName, as popStackToClose needs to find the
+                    // element by comparing with node.nodeName().
+                    tb.popStackToClose(searchName);
+                    break; // Element closed, exit loop.
                 } else {
+                    // This element 'node' doesn't match the end tag 'searchName'.
+                    // Check if this 'node' is a "special" element (e.g., scoping elements like table, html, body).
+                    // End tags cannot cross special boundaries.
                     if (tb.isSpecial(node)) {
+                        // Found a special boundary element before finding the matching end tag. This is an error.
                         tb.error(this);
-                        return false;
+                        return false; // Indicate error occurred.
                     }
+                    // Otherwise, continue searching up the stack.
                 }
             }
-            return true;
+            // Loop finished. This means we either broke after finding/closing the tag,
+            // or the loop completed without finding the tag ('searchName') or hitting a special boundary.
+            // If the loop completed without finding the tag, it means the end tag doesn't match any
+            // open element in the current scope. Per HTML5, such tags are generally ignored.
+            return true; // Indicate processing complete (either closed the tag or ignored it).
         }
\ No newline at end of file
