diff --git a/tmp/8cac79c3-d57d-4791-adc0-62fe6d39fdb4_buggy.java b/tmp/e35abf9f-baa7-49ef-89cc-3ef81426c6fc_fixed.java
index 7dc89ed..f8ab4ec 100644
--- a/tmp/8cac79c3-d57d-4791-adc0-62fe6d39fdb4_buggy.java
+++ b/tmp/e35abf9f-baa7-49ef-89cc-3ef81426c6fc_fixed.java
@@ -1,20 +1,29 @@
         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {
-            String name = t.asEndTag().normalName();
+            // Perform search/comparison case-insensitively, but use original node name for pops/implied.
+            String endTagLower = t.asEndTag().name(); // Use token's lowercase name (e.g. "x")
             ArrayList<Element> stack = tb.getStack();
             for (int pos = stack.size() -1; pos >= 0; pos--) {
                 Element node = stack.get(pos);
-                if (node.nodeName().equals(name)) {
-                    tb.generateImpliedEndTags(name);
-                    if (!name.equals(tb.currentElement().nodeName()))
+                String nodeNameOriginal = node.nodeName(); // Get node's original case name (e.g. "X")
+                String nodeNameLower = ParseSettings.normalName(nodeNameOriginal); // Lowercase the node name for comparison
+
+                if (nodeNameLower.equals(endTagLower)) {
+                    // Match found based on lowercase comparison.
+                    // Use the node's original case name for downstream ops.
+                    tb.generateImpliedEndTags(nodeNameOriginal);
+                    if (!node.nodeName().equals(tb.currentElement().nodeName())) // Check if match != current node
                         tb.error(this);
-                    tb.popStackToClose(name);
-                    break;
+                    tb.popStackToClose(nodeNameOriginal); // Pop using the node's original case name
+                    break; // Found, break loop
                 } else {
-                    if (tb.isSpecial(node)) {
+                    // Check if node is special, case-insensitively
+                    if (StringUtil.inSorted(nodeNameLower, Constants.SpecialTags)) {
                         tb.error(this);
-                        return false;
+                        return false; // Fail processing this tag
                     }
+                    // otherwise continue searching up stack
                 }
             }
-            return true;
+            // If loop completes, tag was not found on stack (or stack was empty) - ignore tag
+            return true; // Handled (ignored)
         }
\ No newline at end of file
