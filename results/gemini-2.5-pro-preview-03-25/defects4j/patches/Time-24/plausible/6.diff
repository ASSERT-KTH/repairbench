diff --git a/tmp/3d22b04d-dd3f-4556-a721-03b4acc28088_buggy.java b/tmp/5b4331e8-9268-4a40-a8cf-2d802670ba06_fixed.java
index 99d6a44..899f647 100644
--- a/tmp/3d22b04d-dd3f-4556-a721-03b4acc28088_buggy.java
+++ b/tmp/5b4331e8-9268-4a40-a8cf-2d802670ba06_fixed.java
@@ -1,58 +1,106 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+                // This recursive call is okay, the fix below works on the potentially updated savedFields
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
-                millis = savedFields[i].set(millis, resetFields);
+                SavedField savedField = savedFields[i];
+                long currentMillis = millis; // Store millis before applying this field
+
+                // Special handling for weekOfWeekyear when year or weekyear is also present.
+                // This addresses issues where applying monthOfYear before weekOfWeekyear
+                // causes weekOfWeekyear to be computed in the wrong weekyear context.
+                if (savedField.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                    // Find if an explicit year or weekyear field was parsed
+                    SavedField yearContextSavedField = null;
+                    for (int j = 0; j < count; j++) { // Check all saved fields
+                        DateTimeFieldType type = savedFields[j].iField.getType();
+                        // Use the first year or weekyear field found as the context
+                        if (type == DateTimeFieldType.year() || type == DateTimeFieldType.weekyear()) {
+                            yearContextSavedField = savedFields[j];
+                            break; 
+                        }
+                    }
+
+                    if (yearContextSavedField != null) {
+                         // If we have weekOfWeekyear ('ww') and an explicit year ('yyyy') or weekyear ('xxxx'),
+                         // ensure 'ww' is interpreted within that explicitly given year/weekyear.
+                         int yearToUse = yearContextSavedField.iValue;
+                         
+                         // Get the weekyear field from the chronology. We need this to set the weekyear context.
+                         DateTimeField weekyearDateTimeField = iChrono.weekyear();
+                         
+                         // Adjust the instant (currentMillis) to be within the correct weekyear
+                         // *before* calling set() for the weekOfWeekyear field.
+                         // This ensures that the weekOfWeekyear field calculation uses the intended weekyear.
+                         currentMillis = weekyearDateTimeField.set(currentMillis, yearToUse);
+                         
+                         // Now call the original set method for weekOfWeekyear, but pass the
+                         // millis that has the correct weekyear context.
+                         millis = savedField.set(currentMillis, resetFields);
+                         
+                         // Skip the default application logic below for this field as we've handled it.
+                         continue; 
+                    }
+                    // else: No explicit year/weekyear found. Let weekOfWeekyear be applied normally
+                    // using the intermediate millis calculated so far. Falls through to default logic.
+                }
+                
+                // Apply field normally if it wasn't the special weekOfWeekyear case handled above.
+                millis = savedField.set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
+        // Zone adjustment logic remains the same
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
+            // Check for issues caused by time zone transitions (e.g., DST)
+            // Note: Later Joda-Time versions throw IllegalInstantException here.
+            // Keeping IllegalArgumentException consistent with the original provided code.
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
