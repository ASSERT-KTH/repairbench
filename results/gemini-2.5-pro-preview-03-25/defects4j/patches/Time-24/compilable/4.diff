diff --git a/tmp/5269ba7c-4429-428a-b6f5-01a03a36351b_buggy.java b/tmp/8f097f7c-2aab-4501-8046-27e88b8a143b_fixed.java
index 99d6a44..6654dcb 100644
--- a/tmp/5269ba7c-4429-428a-b6f5-01a03a36351b_buggy.java
+++ b/tmp/8f097f7c-2aab-4501-8046-27e88b8a143b_fixed.java
@@ -1,58 +1,88 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
-        sort(savedFields, count);
+        sort(savedFields, count); // Sorts fields, typically year/weekyear > month > week
+
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+                // This recursive call might be problematic if saveField modifies count/order
+                // but assuming it works or is handled by saveField internal logic.
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
+
+        // Check if both weekOfWeekyear and monthOfYear fields are present.
+        // These fields have conflicting calculation contexts (weekyear vs year).
+        boolean hasWeekOfWeekyear = false;
+        boolean hasMonthOfYear = false;
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType type = savedFields[i].iField.getType();
+            if (type == DateTimeFieldType.weekOfWeekyear()) {
+                hasWeekOfWeekyear = true;
+            } else if (type == DateTimeFieldType.monthOfYear()) {
+                hasMonthOfYear = true;
+            }
+            if (hasWeekOfWeekyear && hasMonthOfYear) {
+                break; // Found both relevant fields
+            }
+        }
+
         try {
             for (int i = 0; i < count; i++) {
-                millis = savedFields[i].set(millis, resetFields);
+                SavedField savedField = savedFields[i];
+                // If both weekOfWeekyear and monthOfYear are present,
+                // prioritize the week definition by skipping the month field application.
+                // This resolves ambiguity where MM and ww are specified together.
+                // The week field (ww) inherently defines a position within the weekyear,
+                // making the month field (MM) potentially contradictory or redundant.
+                if (hasWeekOfWeekyear && hasMonthOfYear && savedField.iField.getType() == DateTimeFieldType.monthOfYear()) {
+                    continue; // Skip applying monthOfYear when weekOfWeekyear is also specified
+                }
+                millis = savedField.set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
+        // Zone adjustment logic (remains the same as original)
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
