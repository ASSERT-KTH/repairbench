diff --git a/tmp/4b738278-b5cf-4dd3-904f-27d5b7b2233d_buggy.java b/tmp/4f0572cb-18d7-4a1f-b7d9-506fb2939829_fixed.java
index 99d6a44..d4aa5d4 100644
--- a/tmp/4b738278-b5cf-4dd3-904f-27d5b7b2233d_buggy.java
+++ b/tmp/4f0572cb-18d7-4a1f-b7d9-506fb2939829_fixed.java
@@ -1,58 +1,101 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
+
+        // Check for problematic combination of year and weekOfWeekyear without weekyear
+        // If found, add weekyear based on year and restart computation.
+        // This logic mirrors a fix applied in DateTimeFormatterBuilder, ensuring
+        // week-based fields are handled correctly relative to the year.
+        if (count > 0) {
+            SavedField yearSaved = null;
+            SavedField weekOfWeekyearSaved = null;
+            boolean hasWeekyear = false;
+            for (int i = 0; i < count; i++) {
+                DateTimeField field = savedFields[i].iField;
+                if (field.getType() == DateTimeFieldType.year()) {
+                    yearSaved = savedFields[i];
+                } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                    weekOfWeekyearSaved = savedFields[i];
+                } else if (field.getType() == DateTimeFieldType.weekyear()) {
+                    hasWeekyear = true;
+                }
+            }
+
+            if (yearSaved != null && weekOfWeekyearSaved != null && !hasWeekyear) {
+                // Add weekyear field derived from the year field's value.
+                // saveField potentially modifies bucket state (count, fields array).
+                saveField(DateTimeFieldType.weekyear(), yearSaved.iValue);
+                // Restart computation to ensure fields are re-sorted and applied correctly.
+                return computeMillis(resetFields, text);
+            }
+        }
+
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+                // Restart computation if default year was added.
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
+        } catch (IllegalArgumentException e) {
+            // Preserve original exception type for compatibility, even if IllegalFieldValueException is more specific sometimes
+             if (text != null) {
+                 // Build a message consistent with IllegalFieldValueException handling
+                 throw new IllegalArgumentException("Cannot parse \"" + text + "\": " + e.getMessage(), e);
+             }
+             throw e;
         }
         
+        // Zone adjustment logic
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
+            // If the local time is ambiguous or invalid due to DST transition,
+            // check if the applied offset matches the instant's actual offset.
             if (offset != iZone.getOffset(millis)) {
+                // Use IllegalInstantException for DST overlap/gap issues if available,
+                // otherwise stick to IllegalArgumentException for broader compatibility.
+                // For safety and consistency with original code, use IllegalArgumentException.
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
