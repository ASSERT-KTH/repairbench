diff --git a/tmp/adf74dd8-2638-4bdd-873c-30cb8113616b_buggy.java b/tmp/226d1d70-0408-4699-899d-d426799b7d87_fixed.java
index 99d6a44..8a0e5cc 100644
--- a/tmp/adf74dd8-2638-4bdd-873c-30cb8113616b_buggy.java
+++ b/tmp/226d1d70-0408-4699-899d-d426799b7d87_fixed.java
@@ -1,58 +1,110 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
+            // Clone array to make thread-safe processing possible
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
+        // Sort fields primarily by duration, then range, then type
         sort(savedFields, count); 
+
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+                // Add default year if month or day specified but not year
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+                // Re-sort and re-process
                 return computeMillis(resetFields, text); 
             }
         }
 
         long millis = iMillis;
+
+        // --- Bug fix start ---
+        // Check for potentially conflicting fields: year/weekyear, monthOfYear, and weekOfWeekyear
+        boolean hasYearField = false;
+        boolean hasMonthOfYear = false;
+        boolean hasWeekOfWeekyear = false;
+
+        for (int i = 0; i < count; i++) {
+            DateTimeField field = savedFields[i].iField;
+            DateTimeFieldType type = field.getType();
+
+            // Check for any type of year field (standard year or weekyear)
+            if (type == DateTimeFieldType.year() || type == DateTimeFieldType.yearOfEra() ||
+                type == DateTimeFieldType.yearOfCentury() || type == DateTimeFieldType.weekyear() ||
+                type == DateTimeFieldType.weekyearOfCentury()) {
+                 hasYearField = true;
+            }
+            // Check for monthOfYear field
+            if (type == DateTimeFieldType.monthOfYear()) {
+                 hasMonthOfYear = true;
+            }
+            // Check for weekOfWeekyear field
+            if (type == DateTimeFieldType.weekOfWeekyear()) {
+                 hasWeekOfWeekyear = true;
+            }
+        }
+
+        // If a year field, monthOfYear, and weekOfWeekyear are all present,
+        // this indicates a potential ambiguity between the standard date system (year-month)
+        // and the week date system (year-week).
+        // Resolve this by prioritizing the week system fields (year/weekyear + weekOfWeekyear)
+        // and skipping the application of the monthOfYear field.
+        boolean resolveBySkippingMonth = hasYearField && hasMonthOfYear && hasWeekOfWeekyear;
+        // --- Bug fix end ---
+
         try {
             for (int i = 0; i < count; i++) {
+                // --- Bug fix part 2 ---
+                // If the ambiguity resolution strategy is active, skip the monthOfYear field.
+                if (resolveBySkippingMonth && savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear()) {
+                    continue; // Skip applying monthOfYear
+                }
+                // --- End Bug fix part 2 ---
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
+                // Prepend context to the error message
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
+        // Adjust for time zone offset
         if (iZone == null) {
+            // Apply fixed offset if time zone is null
             millis -= iOffset;
         } else {
+            // Apply time zone offset, checking for illegal instants due to transitions
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
+            // If offset differs after adjustment, it's an invalid instant
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
+                // Throw exception as per original behavior
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
