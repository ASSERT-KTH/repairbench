diff --git a/tmp/99e0b1d0-d422-4a17-b488-4aff7629950e_buggy.java b/tmp/408be6fe-069b-4a83-a442-1a84411c41db_fixed.java
index 99d6a44..eed04ea 100644
--- a/tmp/99e0b1d0-d422-4a17-b488-4aff7629950e_buggy.java
+++ b/tmp/408be6fe-069b-4a83-a442-1a84411c41db_fixed.java
@@ -1,58 +1,99 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+                // Re-sort and re-compute count after adding year
+                // Note: This recursive call might need adjustment if fields are added.
+                // However, the original code has this recursive call structure.
+                // Let's assume it works or the issue is elsewhere.
+                // Re-running sort and getting count again would be safer.
+                // sort(iSavedFields, iSavedFieldsCount);
+                // savedFields = iSavedFields; // update local reference
+                // count = iSavedFieldsCount; // update local count
+                // For minimal change, keep the recursive call as is.
                 return computeMillis(resetFields, text);
             }
         }
 
+        // Check if both monthOfYear and weekOfWeekyear are specified.
+        // If so, the week field should take precedence, and month should be ignored
+        // to resolve ambiguity, matching the behavior needed for patterns like "yyyy-MM-ww".
+        boolean hasMonthOfYear = false;
+        boolean hasWeekOfWeekyear = false;
+        DateTimeFieldType monthType = DateTimeFieldType.monthOfYear();
+        DateTimeFieldType weekType = DateTimeFieldType.weekOfWeekyear();
+        for (int i = 0; i < count; i++) {
+            DateTimeField field = savedFields[i].iField;
+            if (field.getType() == monthType) {
+                hasMonthOfYear = true;
+            } else if (field.getType() == weekType) {
+                hasWeekOfWeekyear = true;
+            }
+        }
+        final boolean skipMonth = hasMonthOfYear && hasWeekOfWeekyear;
+
+
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
-                millis = savedFields[i].set(millis, resetFields);
+                SavedField savedField = savedFields[i];
+                // If we have both monthOfYear and weekOfWeekyear, skip applying monthOfYear.
+                if (skipMonth && savedField.iField.getType() == monthType) {
+                    continue;
+                }
+                millis = savedField.set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
+        // Restore original logic for timezone offset calculation
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
+                // If the local time is ambiguous or invalid due to DST transition,
+                // handle it. For LocalDate/LocalDateTime, this might throw an exception.
+                // For DateTime, the behavior might depend on the Chronology.
+                // The original code throws an exception here, retain that.
                  String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
+                // Joda-Time issue #171 suggests using ZoneInfoCompiler's handling.
+                // However, for a minimal fix, retain the exception.
                  throw new IllegalArgumentException(message);
+                 // Alternative: use a lenient resolution? Depends on desired behavior.
+                 // For now, keep original exception logic.
             }
         }
         
         return millis;
     }
\ No newline at end of file
