diff --git a/tmp/ac0cbf76-7d65-46e6-8caf-23f25fbe7bb1_buggy.java b/tmp/333fe98e-8fc5-47b2-85d5-3b04d07fc8cc_fixed.java
index 99d6a44..4519b88 100644
--- a/tmp/ac0cbf76-7d65-46e6-8caf-23f25fbe7bb1_buggy.java
+++ b/tmp/333fe98e-8fc5-47b2-85d5-3b04d07fc8cc_fixed.java
@@ -1,58 +1,121 @@
+import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.DurationField;
+import org.joda.time.DurationFieldType;
+import org.joda.time.IllegalFieldValueException;
+
+// Assume other necessary imports are present for the class context.
+
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
+            // Clone array if shared, ensures bucket instance is safe for reuse after compute
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
+        // Sort fields based on duration (larger durations first).
+        // This ensures year/weekyear are set before month/week, etc.
         sort(savedFields, count); 
+        
         if (count > 0) {
-            // alter base year for parsing if first field is month or day
+            // Check if the primary field specified is month or day,
+            // which might imply the year needs to be defaulted.
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
+            // Compare duration of first field with months and days.
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+                // If year is not explicitly set, add the default year field.
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+                // Re-run computeMillis to ensure the year is included and fields are re-sorted.
                 return computeMillis(resetFields, text); 
             }
         }
 
-        long millis = iMillis;
+        // Detect presence of potentially conflicting fields: monthOfYear and weekOfWeekyear.
+        // These fields belong to different calendrical systems (month-based vs. week-based)
+        // and applying both sequentially can lead to incorrect results.
+        boolean hasMonth = false;
+        boolean hasWeek = false;
+        for (int i = 0; i < count; i++) {
+            DateTimeField field = savedFields[i].iField;
+            if (field.getType() == DateTimeFieldType.monthOfYear()) {
+                hasMonth = true;
+            }
+            if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                hasWeek = true;
+            }
+            // Optimization: exit loop early if both types are found
+            if (hasMonth && hasWeek) {
+                break; 
+            }
+        }
+
+        long millis = iMillis; // Start from the initial millis (base instant)
         try {
+            // Apply saved fields sequentially to calculate the final millis instant
             for (int i = 0; i < count; i++) {
-                millis = savedFields[i].set(millis, resetFields);
+                SavedField fieldToSet = savedFields[i];
+                
+                // --- Bug Fix Start ---
+                // Handle conflict between monthOfYear and weekOfWeekyear.
+                // The failing tests indicate that when both monthOfYear ('MM') and weekOfWeekyear ('ww')
+                // are specified (along with year 'yyyy' or weekyear 'xxxx'), the week-based fields 
+                // should determine the final date. Applying the monthOfYear field sequentially 
+                // interferes with this calculation, especially due to the 'resetFields' logic.
+                // To fix this, we skip applying the monthOfYear field if weekOfWeekyear is also present.
+                if (hasMonth && hasWeek && fieldToSet.iField.getType() == DateTimeFieldType.monthOfYear()) {
+                    // Skip applying the month field to prioritize the week calculation.
+                    continue; 
+                }
+                // --- Bug Fix End ---
+                
+                // Apply the field's value to the current millis instant.
+                // The 'resetFields' parameter controls whether lower-order fields are reset (roundFloor)
+                // before setting the current field's value. This interaction was part of the cause
+                // of the bug when month and week fields were mixed.
+                millis = fieldToSet.set(millis, resetFields); 
             }
         } catch (IllegalFieldValueException e) {
+            // Enhance error messages with the text being parsed, if available.
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
-            throw e;
+            throw e; // Re-throw the exception after potentially enhancing it.
         }
         
+        // Adjust the computed millis for the target time zone or offset.
         if (iZone == null) {
+            // Apply the fixed offset if no time zone is set.
             millis -= iOffset;
         } else {
+            // Adjust for the time zone, considering potential transitions (like DST).
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
+            // Verify the final instant is valid in the zone. If the offset differs after
+            // adjustment, it indicates an invalid instant (e.g., falling in a DST gap).
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
+                // Throw exception for invalid instants due to zone transitions.
                 throw new IllegalArgumentException(message);
             }
         }
         
+        // Return the final computed milliseconds instant.
         return millis;
     }
\ No newline at end of file
