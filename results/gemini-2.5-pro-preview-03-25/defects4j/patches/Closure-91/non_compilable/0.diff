diff --git a/tmp/fc132a9d-d96f-459e-9a8e-abeb94dd6bc3_buggy.java b/tmp/0b457cc6-7545-46a4-986b-52cd39819a09_fixed.java
index 30d7266..f3be040 100644
--- a/tmp/fc132a9d-d96f-459e-9a8e-abeb94dd6bc3_buggy.java
+++ b/tmp/0b457cc6-7545-46a4-986b-52cd39819a09_fixed.java
@@ -1,69 +1,114 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
+      // Using NodeUtil.getBestJSDocInfo to find JSDoc even if attached
+      // to the parent assign or var node.
+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
+      // Don't traverse functions that are defined inside an object literal
+      // annotated with @lends. These functions are implicitly methods
+      // of the target prototype specified by @lends.
+      Node objectLiteralNode = null;
+      if (parent != null && parent.isObjectLitKey()) {
+          // Function is a value for a property in an object literal.
+          // e.g. { key: function() {...} }
+          // Parent = STRING/NUMBER/GETPROP (key node)
+          // Grandparent = OBJECTLIT
+          objectLiteralNode = parent.getParent();
+      } else if (parent != null && parent.isObjectLit()) {
+           // Function is maybe an ES6 method definition?
+           // e.g. { method() {...} }
+           // Parent = OBJECTLIT
+           objectLiteralNode = parent;
+      }
+
+      if (objectLiteralNode != null && objectLiteralNode.isObjectLit()) {
+         // Find the JSDoc associated with the object literal itself, possibly
+         // looking at its parents (e.g., if used in an assignment or call).
+         JSDocInfo objectLitJsDoc = NodeUtil.getBestJSDocInfo(objectLiteralNode);
+         if (objectLitJsDoc != null && objectLitJsDoc.getLendsName() != null) {
+            return false; // Don't traverse functions within @lends
+         }
+      }
+
+
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {}; // or
       // var a = {x: function() {}};
+      // Keep the original heuristic check.
+      if (parent != null) {
           int pType = parent.getType();
           if (!(pType == Token.BLOCK ||
                 pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN ||
-
+                pType == Token.NAME || // e.g. var x = function name() {...}
+                pType == Token.ASSIGN || // e.g. x = function() {...}
                 // object literal keys
-            pType == Token.STRING ||
-            pType == Token.NUMBER)) {
+                pType == Token.STRING || // e.g. { 'key': function() {...} }
+                pType == Token.NUMBER)) { // e.g. { 1: function() {...} }
             return false;
           }
+      }
 
-      // Don't traverse functions that are getting lent to a prototype.
+      // Don't traverse functions that are getting lent to a prototype. (Handled by @lends check now)
     }
 
+    // Original check for assignments to prototype properties.
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
+        // NOTE: Modifying state (assignLhsChild) in shouldTraverse is discouraged.
+        // This state should ideally be managed in the visit method.
+        // Retaining original logic assuming it's required by the class structure.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
-      } else {
+      } else if (n == rhs) { // Check if 'n' is the RHS (the function)
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
+        // Using NodeUtil.isPrototypeProperty is more robust, but retain original
+        // logic for minimal change if required.
+        if (NodeUtil.isPrototypeProperty(lhs)) {
+           return false; // Don't traverse functions assigned to prototype properties.
+        }
+        // Fallback to original logic if NodeUtil.isPrototypeProperty isn't desired:
+        /*
         if (NodeUtil.isGet(lhs)) {
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
+            // Prevents traversing RHS when assigning directly to Foo.prototype
             return false;
           }
           Node llhs = lhs.getFirstChild();
           if (llhs.getType() == Token.GETPROP &&
               llhs.getLastChild().getString().equals("prototype")) {
+            // Prevents traversing RHS when assigning to Foo.prototype.bar
             return false;
           }
         }
+        */
       }
     }
 
     return true;
   }
\ No newline at end of file
