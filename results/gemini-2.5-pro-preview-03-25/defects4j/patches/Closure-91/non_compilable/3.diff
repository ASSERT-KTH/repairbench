diff --git a/tmp/e91e15a3-eee3-48fc-b81a-1f2e5649a068_buggy.java b/tmp/26e9fb46-7bf4-4f3d-9069-165d6471d6e2_fixed.java
index 30d7266..914eaed 100644
--- a/tmp/e91e15a3-eee3-48fc-b81a-1f2e5649a068_buggy.java
+++ b/tmp/26e9fb46-7bf4-4f3d-9069-165d6471d6e2_fixed.java
@@ -1,69 +1,102 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
+  @Override // Assuming this overrides a method from NodeTraversal.Callback
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
+    // Member variable assumed to exist in the enclosing class CheckGlobalThis.
+    // It needs proper initialization/reset logic elsewhere (e.g., in visit).
+    // Node assignLhsChild; // Example declaration
+
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
+      // Use NodeUtil helper to get JSDoc, handles associations like VAR declarations.
+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
+      // ADDED: Don't traverse functions that are values in an object literal that
+      // has an @lends annotation. 'this' is bound correctly in such functions.
+      // Example: /** @lends {SomeType.prototype} */ ({ func: function() { this... } })
+      if (parent != null && NodeUtil.isObjectLitKey(parent)) {
+        // OBJECTLIT <-- objectLit
+        //   STRING_KEY 'func' <-- parent
+        //     FUNCTION <-- n
+        Node objectLit = parent.getParent();
+        // Ensure grandparent is an OBJECTLIT node.
+        if (objectLit != null && objectLit.isObjectLit()) {
+           JSDocInfo objLitJsDoc = objectLit.getJSDocInfo();
+           if (objLitJsDoc != null && objLitJsDoc.getLendsName() != null) {
+             // Function is inside an object literal with @lends, so skip traversal.
+             return false;
+           }
+        }
+      }
+
+      // Original heuristic: Don't traverse functions unless they are defined
+      // in a context where 'this' might be global.
+      // Corrected to use NodeUtil.isObjectLitKey instead of plain STRING/NUMBER.
+      if (parent != null) {
         int pType = parent.getType();
         if (!(pType == Token.BLOCK ||
               pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN ||
-
-            // object literal keys
-            pType == Token.STRING ||
-            pType == Token.NUMBER)) {
+              pType == Token.NAME ||    // var f = function() { ... }
+              pType == Token.ASSIGN || // x.y = function() { ... }
+              NodeUtil.isObjectLitKey(parent))) { // { key: function() { ... }}
+          return false;
+        }
+      } else if (n.getType() != Token.SCRIPT) {
+         // Only SCRIPT nodes should have null parent during traversal.
          return false;
       }
 
-      // Don't traverse functions that are getting lent to a prototype.
+      // Comment from original: "Don't traverse functions that are getting lent to a prototype."
+      // This is now handled by the @lends check above and the assignment check below.
     }
 
+    // Original assignment check logic:
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
+        // Assumes 'assignLhsChild' is a member variable managed externally by CheckGlobalThis.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
-      } else {
+        // Continue traversal into LHS.
+      } else { // n == rhs
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
+        if (NodeUtil.isGet(lhs)) { // Check if LHS involves property access
+          // Check for Foo.prototype = rhs
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
-            return false;
+            return false; // Don't traverse RHS if assigned directly to prototype
           }
-          Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
+          // Check for Foo.prototype.bar = rhs
+          Node llhs = lhs.getFirstChild(); // Get the object being accessed (e.g., Foo.prototype)
+          // Check llhs is valid, is a GETPROP, and ends in "prototype"
+          // Check hasChildren() for safety before calling getLastChild()
+          if (llhs != null && llhs.getType() == Token.GETPROP &&
+              llhs.hasChildren() && // Ensure it has children before accessing last
               llhs.getLastChild().getString().equals("prototype")) {
-            return false;
+            return false; // Don't traverse RHS if assigned to prototype member
           }
         }
+        // Otherwise, traverse the RHS.
       }
     }
 
     return true;
   }
\ No newline at end of file
