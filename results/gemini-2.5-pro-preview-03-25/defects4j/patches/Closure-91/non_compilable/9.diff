diff --git a/tmp/995636ed-1adb-4aa0-8ec7-976e238176f0_buggy.java b/tmp/bef93563-9b59-4ec0-be1a-ff3b4648275f_fixed.java
index 30d7266..6ae26fe 100644
--- a/tmp/995636ed-1adb-4aa0-8ec7-976e238176f0_buggy.java
+++ b/tmp/bef93563-9b59-4ec0-be1a-ff3b4648275f_fixed.java
@@ -1,69 +1,95 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
+  @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
+      // NOTE: Unlike CheckProvides, we don't need to worry about Function.prototype.call
+      // or Function.prototype.apply. Calling a function with a null 'this' value
+      // results in the global 'this', so we should still check it.
+      JSDocInfo jsDoc = NodeUtil.getFunctionJsDocInfo(n); // Prefer NodeUtil helper
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
+      // Don't traverse functions that are values in an object literal expression
+      // that has a @lends annotation associated with it. The JSDoc might be on
+      // the object literal itself, or on a related node (e.g., assignment LHS).
+      // NodeUtil.getBestJSDocInfo handles finding the relevant JSDoc.
+      if (parent != null && parent.isObjectLitKey()) {
+        Node objectLit = parent.getParent();
+        JSDocInfo objectLitJsDoc = NodeUtil.getBestJSDocInfo(objectLit);
+        if (objectLitJsDoc != null && objectLitJsDoc.getLendsName() != null) {
+          return false; // Function is in a @lends object, assume 'this' is correct.
+        }
+      }
+
+
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {}; // or
       // var a = {x: function() {}};
+      if (parent != null) {
           int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN ||
-
-            // object literal keys
-            pType == Token.STRING ||
-            pType == Token.NUMBER)) {
+          if (!(pType == Token.BLOCK || // function declaration statement
+                pType == Token.SCRIPT || // function declaration statement in global/block scope
+                pType == Token.NAME || // var name = function() { ... }; or function name() { ... }
+                pType == Token.ASSIGN || // obj.prop = function() { ... };
+                // Object literal keys: covers string, quoted string, getter/setter defs
+                parent.isObjectLitKey() ||
+                // Explicitly check for numeric keys as isObjectLitKey might not cover them
+                pType == Token.NUMBER
+             )) {
+            // Function is in an unusual context where 'this' is not clearly defined
+            // or a context we don't need to check.
+            return false;
+          }
+      } else {
+         // Functions must have a parent in valid JS (Script, Block, etc.).
+         // If parent is null, indicates an abnormal AST structure. Don't traverse.
          return false;
       }
 
-      // Don't traverse functions that are getting lent to a prototype.
+      // The original code had a comment here:
+      // "// Don't traverse functions that are getting lent to a prototype."
+      // This is now handled by the @lends check above and the prototype
+      // assignment check below.
     }
 
+    // This part handles assignments like: Class.prototype.method = function() { ... }
+    // or Class.prototype = someVar; where someVar might be the function.
+    // It prevents traversing the RHS if the LHS looks like a prototype assignment,
+    // as 'this' inside such a function should refer to the instance, not global 'this'.
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
+        // Assuming `assignLhsChild` is a member variable of the class for state tracking.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
-      } else {
+      } else { // n == rhs
         // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+        // property or subproperty. Use NodeUtil helper for robustness.
+        if (NodeUtil.isPrototypeProperty(lhs)) {
            return false;
         }
-          Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
-              llhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-        }
       }
     }
 
     return true;
   }
\ No newline at end of file
