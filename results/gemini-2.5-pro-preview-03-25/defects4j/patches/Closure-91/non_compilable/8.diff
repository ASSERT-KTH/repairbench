diff --git a/tmp/04aa193e-7e9e-484e-8494-0fd0874cca15_buggy.java b/tmp/363b53c5-0df4-4aaf-a597-5a8e2319b001_fixed.java
index 30d7266..dd86e08 100644
--- a/tmp/04aa193e-7e9e-484e-8494-0fd0874cca15_buggy.java
+++ b/tmp/363b53c5-0df4-4aaf-a597-5a8e2319b001_fixed.java
@@ -1,69 +1,80 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
+  @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
-    if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
+    // Rule 1: Don't traverse functions with JSDoc indicating bound 'this'.
+    if (n.isFunction()) {
+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n); // Use NodeUtil helper to get comprehensive JSDoc
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
-      int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN ||
-
-            // object literal keys
-            pType == Token.STRING ||
-            pType == Token.NUMBER)) {
-        return false;
+      // Rule 2: Don't traverse functions inside @lends object literals.
+      // Check if n is a function value inside an object literal.
+      if (parent != null) {
+          Node grandparent = parent.getParent();
+          // Check grandparent is OBJECTLIT and n is a function value within it.
+          if (grandparent != null && grandparent.isObjectLit()) {
+              boolean isFunctionValueInObjectLit = false;
+              // Check for { 'key': function() { ... } }
+              if (parent.isStringKey() && parent.hasChildren() && parent.getSecondChild() == n) {
+                  isFunctionValueInObjectLit = true;
+              // Check for ES6 methods, getters, setters: { method() {...}, get prop(){...}, set prop(...){...} }
+              } else if ((parent.isMemberFunctionDef() ||
+                          parent.isGetterDef() ||
+                          parent.isSetterDef()) &&
+                         parent.hasChildren() && parent.getFirstChild() == n) {
+                  isFunctionValueInObjectLit = true;
               }
 
-      // Don't traverse functions that are getting lent to a prototype.
+              if (isFunctionValueInObjectLit) {
+                  // Check the OBJECTLIT for @lends annotation
+                  JSDocInfo objectLitJsDoc = grandparent.getJSDocInfo();
+                  // getLendsName() is preferred check over hasLendsName() in some compiler contexts
+                  if (objectLitJsDoc != null && objectLitJsDoc.getLendsName() != null) {
+                      return false; // Don't traverse functions in @lends objlit
+                  }
+                  // Note: We don't need a specific check here for object literals assigned
+                  // to prototypes, as Rule 3 below will handle it by preventing traversal
+                  // into the OBJECTLIT node when it's the RHS of a prototype assignment.
+              }
+          }
       }
+    } // End of function-specific checks
 
-    if (parent != null && parent.getType() == Token.ASSIGN) {
+    // Rule 3: Don't traverse the RHS of a prototype assignment.
+    // This check prevents traversal into nodes like object literals or functions
+    // when they are assigned to a prototype, as 'this' will be bound correctly.
+    if (parent != null && parent.isAssign()) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
-      if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // If n is the RHS of an assignment to a prototype property, stop traversal.
+      if (n == rhs) {
+        if (NodeUtil.isPrototypeProperty(lhs)) {
+          return false; // Don't traverse this node or its children
+        }
+      } else if (n == lhs) {
+         // Original logic for handling LHS of assignment (e.g., nested assignments).
+         // Assuming 'assignLhsChild' is a member variable managed by the CheckGlobalThis class.
          if (assignLhsChild == null) {
            assignLhsChild = lhs;
          }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
-              llhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-        }
       }
     }
 
+    // Default: Traverse the node if none of the rules above applied.
     return true;
   }
+
+  // Assume 'assignLhsChild' is a member variable of the surrounding class:
+  // private Node assignLhsChild;
+  // It should be reset by the traversal framework (e.g., in enterScope).
+  // Also assumes NodeUtil.getBestJSDocInfo and NodeUtil.isPrototypeProperty are available.
\ No newline at end of file
