diff --git a/tmp/75c985ee-a0ec-44ee-a1e4-9dbdbd2ee415_buggy.java b/tmp/807aab2f-c8bc-4d7b-bfd1-aa462876ac1b_fixed.java
index 30d7266..4a04e64 100644
--- a/tmp/75c985ee-a0ec-44ee-a1e4-9dbdbd2ee415_buggy.java
+++ b/tmp/807aab2f-c8bc-4d7b-bfd1-aa462876ac1b_fixed.java
@@ -1,69 +1,75 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
+  @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
+    // Don't traverse into object literals marked with @lends. Functions inside
+    // will have 'this' bound to the lent type, not the global object.
+    if (n.getType() == Token.OBJECTLIT) {
+      JSDocInfo jsDoc = n.getJSDocInfo();
+      if (jsDoc != null && jsDoc.getLendsName() != null) {
+        return false;
+      }
+    }
+
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+      // or @override annotation, or are interfaces. 'this' is bound correctly.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
+      // Don't traverse functions unless they are defined in a context where 'this'
+      // might be meaningfully bound (e.g., function declaration, assignment to variable
+      // or property, object literal method, class method). Functions defined
+      // elsewhere (e.g., as immediate arguments to functions) are more likely
+      // to have 'this' bound incorrectly or unexpectedly.
+      if (parent != null) {
           int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN ||
-
-            // object literal keys
-            pType == Token.STRING ||
-            pType == Token.NUMBER)) {
+          if (!(pType == Token.BLOCK ||         // function f() {}
+                pType == Token.SCRIPT ||        // function f() {} (global scope)
+                pType == Token.NAME ||          // var f = function() ...
+                pType == Token.ASSIGN ||        // x = function() ... or x.y = function() ...
+                pType == Token.STRING_KEY ||    // { 'k': function() ... }
+                pType == Token.GETTER_DEF ||    // { get k() ... }
+                pType == Token.SETTER_DEF ||    // { set k() ... }
+                pType == Token.MEMBER_FUNCTION_DEF)) { // class C { m() ... }
              return false;
           }
-
-      // Don't traverse functions that are getting lent to a prototype.
+      }
+      // Allow traversal for functions at the root (parent == null) implicitly.
     }
 
+    // Handle assignments, especially assignments to prototype properties.
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+        // Always traverse the left side of an assignment.
+        // Track the LHS for potential use in the visit method (e.g. `a = this`).
+        // (assignLhsChild is assumed to be a member variable of the class)
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      } else { // n == rhs
+        // Don't traverse the RHS if it's being assigned to a prototype property.
+        // Functions/objects defined here are methods/properties and 'this' refers
+        // to the instance, so no need to check for global 'this'.
+        // e.g. Foo.prototype.bar = function() { ... }
+        // e.g. Foo.prototype.baz = { qux: function() { ... } }
+        if (NodeUtil.isPrototypeProperty(lhs)) {
           return false;
         }
-          Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
-              llhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-        }
       }
     }
 
     return true;
   }
\ No newline at end of file
