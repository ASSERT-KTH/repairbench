diff --git a/tmp/d9a72d67-157e-4e4d-a3b2-632e78976b4e_buggy.java b/tmp/f20077a3-367d-45b8-be6b-3f137a9b8285_fixed.java
index 30d7266..54a2de1 100644
--- a/tmp/d9a72d67-157e-4e4d-a3b2-632e78976b4e_buggy.java
+++ b/tmp/f20077a3-367d-45b8-be6b-3f137a9b8285_fixed.java
@@ -1,69 +1,67 @@
+import com.google.javascript.rhino.JSDocInfo;
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+import com.google.javascript.jscomp.NodeTraversal;
+import com.google.javascript.jscomp.NodeUtil;
+// Other necessary imports assumed to be present
+
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
+  @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
+      // Don't traverse functions that are known to have a 'this' type
+      // based on their JSDoc info (@constructor, @interface, @this, @override).
+      // Use getBestJSDocInfo to find JSDoc potentially attached to a parent node.
+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
-      int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN ||
-
-            // object literal keys
-            pType == Token.STRING ||
-            pType == Token.NUMBER)) {
-        return false;
+      // Don't traverse functions inside an object literal that has @lends JSDoc.
+      // The 'this' is bound to the object being lent to.
+      // NodeUtil.isObjectLitKey checks if 'n' is the value in a key-value pair,
+      // where 'parent' is the key node (STRING_KEY, GETTER_DEF, etc.).
+      if (parent != null && NodeUtil.isObjectLitKey(n, parent)) {
+        Node objectLit = parent.getParent();
+        // Ensure the grandparent is indeed an OBJECTLIT node.
+        if (objectLit != null && objectLit.getType() == Token.OBJECTLIT) {
+           // Look for JSDoc associated with the object literal itself.
+           // NodeUtil.getBestJSDocInfo handles cases where JSDoc is on an assignment
+           // or variable declaration containing the object literal.
+           JSDocInfo objectLitJsDoc = NodeUtil.getBestJSDocInfo(objectLit);
+           if (objectLitJsDoc != null && objectLitJsDoc.getLendsName() != null) {
+               return false; // Found @lends, so 'this' is not global.
+           }
+        }
       }
-
-      // Don't traverse functions that are getting lent to a prototype.
     }
 
+    // Don't traverse functions that are assigned to prototype properties.
+    // This handles cases like Foo.prototype.bar = function() { ... };
+    // or Foo.prototype = { bar: function() { ... } }; (though the latter
+    // might be better handled by the @lends check if annotated).
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
-      if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
-        if (assignLhsChild == null) {
-          assignLhsChild = lhs;
-        }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
-              llhs.getLastChild().getString().equals("prototype")) {
+      // Check if 'n' is the function expression on the RHS of an assignment
+      // to a prototype property (e.g., Class.prototype.method = n; or Class.prototype = n;).
+      if (n == rhs && NodeUtil.isPrototypePropertyAssignment(parent)) {
+          // The 'this' context is the instance or the prototype, not global.
           return false;
       }
-        }
-      }
+      // Note: We always traverse the LHS of an assignment in case of nested
+      // assignments or other structures where 'this' might appear.
     }
 
+    // Otherwise, traverse the node.
     return true;
   }
\ No newline at end of file
