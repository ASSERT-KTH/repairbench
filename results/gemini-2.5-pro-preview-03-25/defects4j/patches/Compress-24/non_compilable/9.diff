diff --git a/tmp/6637130b-9611-4514-ab85-6d0f4c85ba14_buggy.java b/tmp/51adbdc0-e72f-4dcb-9c11-2c276efe7028_fixed.java
index d9d2789..85312f3 100644
--- a/tmp/6637130b-9611-4514-ab85-6d0f4c85ba14_buggy.java
+++ b/tmp/51adbdc0-e72f-4dcb-9c11-2c276efe7028_fixed.java
@@ -1,73 +1,96 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
+     * <p>This method allows numbers that are not terminated by NUL or
+     * space according to the POSIX standard, as some old tar
+     * implementations used the full field length for the number.</p>
+     *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     *                                   (Note: Throws only if an invalid byte is detected within the number)
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL explicitly as per Javadoc
+        // Check offset to avoid ArrayIndexOutOfBoundsException is not necessary
+        // because length is enforced to be >= 2
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        // Find the end of the octal digits, which ideally ends in NUL or space,
+        // but might fill the entire field.
+        int parseEnd = end;
+        // Scan backwards from end to find the first non NUL/space character.
+        while (parseEnd > start) {
+            final byte currentByte = buffer[parseEnd - 1];
+            if (currentByte == 0 || currentByte == ' ') {
+                parseEnd--;
             } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                // Found a non-NUL/space character. This is where parsing should stop.
+                break;
             }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
         }
 
-        for ( ;start < end; start++) {
+        // If all characters were spaces or NULs (or buffer was empty after skipping spaces)
+        if (parseEnd <= start) {
+            return 0L;
+        }
+
+        // Parse octal digits from start up to parseEnd
+        for ( ;start < parseEnd; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
+            // Ensure current byte is an octal digit
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method to generate the exception message (assumed to exist elsewhere)
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+        String prefix = "Invalid byte " + currentByte + " at offset " + (idx - offset) + " in '";
+        // Try to decode the buffer segment as ASCII/ISO-8859-1 for display
+        // Replace NUL chars for better readability
+        String content = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1)
+                             .replace("\0", "{NUL}");
+        return prefix + content + "' len=" + length;
+    }
\ No newline at end of file
