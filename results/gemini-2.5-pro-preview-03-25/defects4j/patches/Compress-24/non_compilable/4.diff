diff --git a/tmp/bab436a5-4f81-423b-9855-762ed55eb207_buggy.java b/tmp/21d7f55f-a346-4791-aac8-367bc2d7c6b7_fixed.java
index d9d2789..bbc76ee 100644
--- a/tmp/bab436a5-4f81-423b-9855-762ed55eb207_buggy.java
+++ b/tmp/21d7f55f-a346-4791-aac8-367bc2d7c6b7_fixed.java
@@ -1,73 +1,101 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        // Trim trailing NULs and spaces.
+        // Unlike the previous behavior, we will not throw an exception if the trailing space/NUL is missing.
+        // This allows for parsing fields like "777777777777" where the number occupies the entire field.
+        // Iterate backwards from the end, reducing 'end' until a non-space/NUL character is found
+        // or the start position is reached.
+        int C = end - 1; // Index of the last character
+        while (C >= start) {
+            final byte ch = buffer[C];
+            if (ch == 0 || ch == ' ') {
+                C--;
             } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                // Found the last non-null/space character.
+                // The number ends at index C, so the new 'end' should be C + 1.
+                break;
             }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
         }
+        // Update end to point just past the last octal digit (or to start if all were spaces/NULs)
+        end = C + 1;
+
+        // If, after trimming spaces/NULs, start >= end, it implies the field was empty or contained only spaces/NULs.
+        // The loop below will not run, and the initial result of 0L will be returned, which is correct.
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // Assuming exceptionMessage() is defined elsewhere and handles message formatting.
+                // It needs buffer, offset, length, the failing index (start), and the invalid byte.
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method used by the original code's exception messages.
+    // Included definition is illustrative, assuming it exists elsewhere in the actual TarUtils class.
+    private static String exceptionMessage(byte[] buffer, final int offset, final int length, int idx, byte currentByte) {
+        // A possible implementation (adapt as needed based on the original class context)
+        String EOL = System.getProperty("line.separator", "\n");
+        StringBuilder sb = new StringBuilder();
+        sb.append("Invalid byte ").append(currentByte).append(" at offset ").append(idx - offset);
+        sb.append(" in '");
+        try {
+            // Attempt to show the relevant portion of the buffer as a string
+            // Be mindful of potential IndexOutOfBounds if offset/length are invalid, though checks should prevent this.
+            int displayLength = Math.min(length, buffer.length - offset);
+            sb.append(new String(buffer, offset, displayLength, java.nio.charset.StandardCharsets.ISO_8859_1));
+        } catch (Exception e) {
+            // Fallback if string conversion fails
+            sb.append(java.util.Arrays.toString(java.util.Arrays.copyOfRange(buffer, offset, offset + length)));
+        }
+        sb.append("' len=").append(length);
+        return sb.toString();
+    }
\ No newline at end of file
