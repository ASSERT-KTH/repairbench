diff --git a/tmp/364508e9-1afe-4157-b7bf-0b048b37207d_buggy.java b/tmp/247f1e28-8512-4561-999b-af18e2bc6a66_fixed.java
index d9d2789..e5fcdd8 100644
--- a/tmp/364508e9-1afe-4157-b7bf-0b048b37207d_buggy.java
+++ b/tmp/247f1e28-8512-4561-999b-af18e2bc6a66_fixed.java
@@ -1,73 +1,93 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+     * The buffer is potentially terminated with NULs or spaces.
+     * NULs or spaces anywhere else are invalid.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL or cases like {0, 0}
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+        // sizes/uids/gids, so we trimming from the end simplifies the logic.
+        // Ensure we don't trim everything if the field is potentially all NULs/spaces
+        // (although the leading NUL check catches some of this).
+        int realEnd = end; // Store original end for exception message context if needed
+        while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
             end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
         }
 
+        // If all characters were spaces or NULs, start >= end.
+        // The loop below won't execute and we return 0, which is correct.
+
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // Use realEnd for the original length in the message
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist for the exception message generation
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+        String S;
+        try {
+            // Attempt to decode assuming UTF-8 or a relevant charset
+            S = new String(buffer, offset, length, java.nio.charset.StandardCharsets.UTF_8);
+        } catch (Exception e) {
+            // Fallback if decoding fails or charset not available
+             try {
+                S = new String(buffer, offset, length, "US-ASCII");
+             } catch (Exception e2) {
+                // Absolute fallback
+                S = new String(buffer, offset, length);
+             }
+        }
+        // Make the buffer content printable, replacing NULs
+        S = S.replace("\0", "{NUL}");
+        return "Invalid byte " + currentByte + " at offset " + (idx - offset) +
+               " in '" + S + "' len=" + length;
+   }
\ No newline at end of file
