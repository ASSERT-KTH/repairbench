diff --git a/tmp/ec271dba-c3e3-4f18-a5b2-a0e6a1e9178f_buggy.java b/tmp/1f444c16-75a8-4693-aa1b-992bc14167eb_fixed.java
index d9d2789..c8a0277 100644
--- a/tmp/ec271dba-c3e3-4f18-a5b2-a0e6a1e9178f_buggy.java
+++ b/tmp/1f444c16-75a8-4693-aa1b-992bc14167eb_fixed.java
@@ -1,73 +1,113 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+     * The buffer is potentially terminated by a NUL or space byte,
+     * possibly followed by another NUL or space byte. These terminators
+     * are ignored.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
+     * <p>This method allows extensions of the POSIX standard definition
+     * of numbers in tar archives which may be created by other tools.
+     * Specifically, this method allows fields that are not terminated
+     * by NUL or space, such as the size field in GNU tar archives, as long
+     * as the field contents are otherwise valid octal digits.</p>
+     *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the length is less than 2, or if any
+     *         non-octal digit character is encountered after skipping leading spaces
+     *         and ignoring trailing NUL/space terminators.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle cases of leading NUL (potentially signifying empty field).
+        // This also handles an all-NUL buffer.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        // Trim trailing NULs and spaces.
+        // This loop allows for fields ending in digits (GNU tar).
+        // It stops trimming when a non-terminator character is found,
+        // or when start == end.
+        // Use a temporary variable to avoid modifying 'end' used in the exception message context
+        int effectiveEnd = end;
+        while (start < effectiveEnd) {
+            final byte currentByte = buffer[effectiveEnd - 1];
+            if (currentByte == 0 || currentByte == ' ') {
+                effectiveEnd--;
             } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                // Found a non-terminator (digit or invalid character).
+                // Stop trimming; the next loop will validate it.
+                break;
             }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
         }
 
-        for ( ;start < end; start++) {
+        // If, after skipping leading spaces and trimming trailing NUL/space,
+        // nothing is left (e.g., "  \0"), the loop below won't run and we'll return 0.
+        // This is the correct behavior.
+
+        for ( ;start < effectiveEnd; start++) {
             final byte currentByte = buffer[start];
+
             // CheckStyle:MagicNumber OFF
+            // Ensure the current byte is an octal digit.
             if (currentByte < '0' || currentByte > '7'){
+                 // Assuming exceptionMessage helper exists and uses original length/offset
+                 // Pass original 'end' or 'length' if needed by exceptionMessage
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+
+            // Shift current result left by 3 bits (multiply by 8)
+            // and add the value of the current digit.
+            result = (result << 3) + (currentByte - '0');
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist based on original code's usage.
+    // Its implementation might need adjustment depending on the actual codebase.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {
+        String s;
+        try {
+            // Decode using UTF-8, which is compatible with ASCII and handles Unicode better
+            // if the buffer somehow contained non-ASCII bytes (though unlikely for octal).
+            s = new String(buffer, offset, length, java.nio.charset.StandardCharsets.UTF_8);
+        } catch (Exception e) {
+            // Fallback to platform default if UTF-8 fails (e.g., invalid sequence)
+             s = new String(buffer, offset, length); // Note: platform default might not be ASCII
+        }
+        // Calculate index relative to the start of the segment being parsed (offset)
+        int relativeOffset = idx - offset;
+        return "Invalid byte " + currentByte + " ('" + (char)currentByte + "') at offset " + relativeOffset +
+                " in '" + s + "' len=" + length;
+    }
\ No newline at end of file
