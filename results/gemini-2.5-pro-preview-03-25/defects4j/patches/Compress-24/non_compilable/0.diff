diff --git a/tmp/88e8078e-c85e-480c-8879-63b3359b5040_buggy.java b/tmp/025365b4-12f1-4c0f-baae-68c2d860d600_fixed.java
index d9d2789..c61ee1e 100644
--- a/tmp/88e8078e-c85e-480c-8879-63b3359b5040_buggy.java
+++ b/tmp/025365b4-12f1-4c0f-baae-68c2d860d600_fixed.java
@@ -1,73 +1,100 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
+     * The buffer may contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
+     * <p>This requirement regarding a trailing space or NUL is relaxed
+     * compared to the POSIX standard. The parser will stop when it
+     * encounters the first non-octal digit after the initial octal digits.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the length is less than 2 or if any
+     * non-octal digit, non-space, and non-NUL character is detected in the
+     * supposed octal area.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL or cases where the buffer starts with NUL (e.g., all NULs).
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
+        // Find the effective end by skipping ALL trailing NULs and spaces.
+        // This allows parsing numbers like "777777777777" which fill the buffer
+        // without a trailing NUL or space.
+        int effectiveEnd = end;
+        // Loop backwards from the end, decrementing effectiveEnd as long as we see NUL or space.
+        while (effectiveEnd > start) {
+             final byte trailer = buffer[effectiveEnd - 1];
              if (trailer == 0 || trailer == ' '){
-            end--;
+                 effectiveEnd--;
              } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                 // Found the first character from the end that is not NUL or space.
+                 // This is the potential end of the octal number.
+                 break;
              }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
         }
 
-        for ( ;start < end; start++) {
+        // If all characters after leading spaces were spaces or NULs (e.g. "   \0 \0" or "   ")
+        if (effectiveEnd == start) {
+            return 0L;
+        }
+
+        // Parse octal digits from start up to (but not including) effectiveEnd
+        for ( ;start < effectiveEnd; start++) { // Note: loop modifies 'start' variable
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
+            // Ensure the character is an octal digit
             if (currentByte < '0' || currentByte > '7'){
+                // If a non-octal digit is found within the identified range, it's an error.
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist from original code context.
+    // Included here definition for completeness if needed, otherwise remove.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {
+        String s;
+        try {
+            s = new String(buffer, offset, length, "UTF-8"); // Or appropriate charset
+        } catch (Exception e) {
+            s = new String(buffer, offset, length); // Fallback
+        }
+        // Adjust offset to be relative to the start of the relevant buffer part
+        int relativeOffset = currentOffset - offset;
+        return "Invalid byte " + currentByte + " at relative offset " + relativeOffset + " in '" + s + "' len=" + length;
+    }
\ No newline at end of file
