diff --git a/tmp/3c734848-6fff-4d99-b949-2224d4ed0ae9_buggy.java b/tmp/c61e7527-69a2-423e-b2f6-de83bd7388df_fixed.java
index d9d2789..09729b4 100644
--- a/tmp/3c734848-6fff-4d99-b949-2224d4ed0ae9_buggy.java
+++ b/tmp/c61e7527-69a2-423e-b2f6-de83bd7388df_fixed.java
@@ -1,73 +1,121 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
+     * <p>This method allows fields that are not NUL terminated but are exhausted
+     * by the octal digits. For example "77777777777" is accepted, although ideally
+     * it should have been terminated by NUL or space.</p>
+     *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the buffer contains invalid characters or does not conform to the expected format.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
-        int     start = offset;
+        int     pos = offset; // Current position
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
-        if (buffer[start] == 0) {
-            return 0L;
+        // Check for all NULs first (per documentation)
+        // Allows for parsing missing fields.
+        boolean allNUL = true;
+        // Check from offset to end-1 (inclusive) as end points *after* the last char
+        for (int i = pos; i < end; i++) {
+             // Check bounds for safety, although end should be correct based on length
+             if (i >= buffer.length) {
+                  throw new IllegalArgumentException("Trying to parse past buffer boundary at offset " + i);
              }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
+            if (buffer[i] != 0) {
+                allNUL = false;
                 break;
             }
         }
+        if (allNUL) {
+            return 0L;
+        }
+
+        // Check for leading NUL (per documentation/workaround for some implementations)
+        // This needs to be checked after the all-NUL case.
+        if (buffer[pos] == 0) {
+             return 0L;
+        }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+        // Skip leading spaces
+        while (pos < end && buffer[pos] == ' ') {
+            pos++;
         }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+
+        // At this point, 'pos' is the index of the first non-space character,
+        // or 'end' if the buffer only contained spaces (or was empty after offset).
+
+        // Parse octal digits until a non-octal character (space, NUL, or invalid) or end is reached.
+        while (pos < end) {
+            final byte currentByte = buffer[pos];
+
+            // Check for NUL or space terminator characters. These end the octal number.
+            if (currentByte == 0 || currentByte == ' ') {
+                break; // Found a standard terminator
             }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
+            // Ensure it's a valid octal digit ('0' - '7')
             if (currentByte < '0' || currentByte > '7') {
+                // If it's not a digit and not a permitted terminator (space/NUL), it's invalid.
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, pos, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
+
+            // Accumulate the octal value.
+            result = (result << 3) + (currentByte - '0'); // Convert ASCII digit to numeric value
+            pos++;
+        }
+
+        // After the loop, 'pos' points to the first terminator (space/NUL) found,
+        // or it points to 'end' if the octal digits filled the buffer up to the length limit.
+
+        // Validate the remainder of the buffer (from 'pos' to 'end')
+        // According to POSIX standard, the tail should only contain NUL or space.
+        while (pos < end) {
+             final byte currentByte = buffer[pos];
+             // Allow only NUL ('\0') and space (' ') in the tail portion.
+             if (currentByte != 0 && currentByte != ' ') {
+                 throw new IllegalArgumentException(
+                         exceptionMessage(buffer, offset, length, pos, currentByte));
+             }
+             pos++;
         }
 
         return result;
     }
+
+    // Helper method assumed to exist elsewhere in the class.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {
+        String content = "Invalid byte content (cannot decode)";
+        try {
+            // Attempt to decode the relevant part of the buffer for the error message
+            // Use a known safe encoding like US-ASCII for TAR headers
+            String raw = new String(buffer, offset, Math.min(length, buffer.length - offset), "US-ASCII");
+            // Replace NUL characters with a visible representation for clarity
+            content = raw.replace((char)0, '\u2400'); // Unicode Symbol for NUL
+        } catch (Exception e) {
+            // Ignore if decoding fails, use fallback message
+        }
+        return "Invalid byte " + currentByte + " at offset " + (currentOffset - offset) + " in '" + content + "' len=" + length;
+    }
\ No newline at end of file
