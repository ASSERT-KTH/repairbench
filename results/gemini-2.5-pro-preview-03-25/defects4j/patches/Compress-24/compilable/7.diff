diff --git a/tmp/fabf4ea6-cd95-4efe-88c4-259dc2d0ff4d_buggy.java b/tmp/10164001-8eeb-4ced-9ec3-b9bf35a02bbe_fixed.java
index d9d2789..7447770 100644
--- a/tmp/fabf4ea6-cd95-4efe-88c4-259dc2d0ff4d_buggy.java
+++ b/tmp/10164001-8eeb-4ced-9ec3-b9bf35a02bbe_fixed.java
@@ -1,73 +1,103 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
+     * <p>This method also supports parsing of numbers that exceed the
+     * official limit of 11 octal digits if the trailing space/NUL
+     * is missing.</p>
+     *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing *and* the last
+     * character is not an octal digit, or if an invalid byte is detected before the end.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle starting NUL
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+        // If all characters were leading spaces
+        if (start == end) {
+             return 0L;
+        }
+
+        // Trim trailing NULs and spaces, handling implementations that omit the trailer.
+        // Ensure the method is robust against index out of bounds errors if start==end after trimming.
         byte trailer = buffer[end - 1];
+
         if (trailer == 0 || trailer == ' ') {
+            end--; // Consume the first trailer
+
+            // Trim *additional* NULs or spaces from the end
+            // Example: "123 \0\0" -> end=N-1 -> end=N-2 -> end=N-3
+            // Example: "  \0" -> start=1, end=3 -> end=2 -> end=1 (start==end)
+            while (start < end) {
+                byte currentTrailer = buffer[end - 1];
+                if (currentTrailer == 0 || currentTrailer == ' ') {
                     end--;
                 } else {
+                    // Stop trimming if we encounter a non-NUL/non-space character (i.e., a digit)
+                    break;
+                }
+            }
+        } else {
+            // If the last character is not NUL/space, check if it's an octal digit.
+            // Allows formats that omit the trailing NUL/space (e.g., "777777777777").
+            if (trailer < '0' || trailer > '7') {
+                // Use a helper method for exception message generation (assumed to exist)
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, end - 1, trailer));
             }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+            // If it's a valid digit, `end` remains unchanged, and the digit will be parsed.
         }
 
+        // After trimming spaces and NULs, start may equal end if the buffer was all spaces/NULs
+        // or became empty after trimming (e.g., " \0"). The loop condition handles this.
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                 // Use a helper method for exception message generation (assumed to exist)
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Assume exceptionMessage helper method exists elsewhere in the class, e.g.:
+    // private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) { ... }
\ No newline at end of file
