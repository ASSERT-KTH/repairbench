diff --git a/tmp/e389d2c6-54e1-4d08-ba36-acacae2e5c0d_buggy.java b/tmp/cb0c0b3f-7e62-450c-ba7e-b7298822be9d_fixed.java
index d9d2789..d2f4cd6 100644
--- a/tmp/e389d2c6-54e1-4d08-ba36-acacae2e5c0d_buggy.java
+++ b/tmp/cb0c0b3f-7e62-450c-ba7e-b7298822be9d_fixed.java
@@ -1,73 +1,90 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
+     * The buffer must contain a trailing space or NUL according to the TAR specification,
      * and may contain an additional trailing space or NUL.</p>
+     * <p>This method allows the trailing space/NUL to be omitted to handle
+     * implementations that use the space for an extra digit.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if an invalid octal digit is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle cases of leading NUL or buffer entirely NULs.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' '){
             start++;
+        }
+
+        // Find the end of the octal digits by scanning backwards from the end,
+        // trimming trailing spaces and NUL bytes. This allows parsing numbers
+        // that are not terminated by NUL or space.
+        int digitEnd = end;
+        // Trim trailing NULs and spaces from the end
+        // This loop needs to handle the case where the buffer content after skipping
+        // leading spaces might be all spaces/NULs.
+        // It stops when it hits a non-space/NUL byte or when digitEnd <= start.
+        while (digitEnd > start) {
+            final byte currentByte = buffer[digitEnd - 1];
+            if (currentByte == ' ' || currentByte == 0) {
+                digitEnd--;
             } else {
+                // Found the last character that is potentially part of the octal number.
+                // The parsing loop below will validate if it's actually an octal digit.
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        // If after skipping leading spaces and trimming trailing terminators,
+        // the sequence is empty, return 0. Handles inputs like " ", "   \0", etc.
+        // It also handles the case where the input was just spaces/NULs originally.
+        if (start == digitEnd) {
+            return 0L;
         }
 
-        for ( ;start < end; start++) {
+        // Parse the octal digits in the identified range [start, digitEnd)
+        for ( ;start < digitEnd; start++) {
             final byte currentByte = buffer[start];
+
             // CheckStyle:MagicNumber OFF
+            // Check if the character is a valid octal digit '0'-'7'
             if (currentByte < '0' || currentByte > '7'){
+                // This assumes exceptionMessage helper exists and works as in the original class
+                // It's defined in the TarUtils class itself.
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Assume the helper method exceptionMessage exists elsewhere in the class as it was not provided
+    // in the buggy function snippet but is used by it.
+    // private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) { ... }
