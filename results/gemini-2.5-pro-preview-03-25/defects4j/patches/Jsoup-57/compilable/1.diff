diff --git a/tmp/45e10a52-a7cc-4bda-a4f6-346e35f7c931_buggy.java b/tmp/4ae29acc-2a17-4f20-bf6f-972e56cf71b9_fixed.java
index ae3784d..4479dec 100644
--- a/tmp/45e10a52-a7cc-4bda-a4f6-346e35f7c931_buggy.java
+++ b/tmp/4ae29acc-2a17-4f20-bf6f-972e56cf71b9_fixed.java
@@ -1,14 +1,26 @@
     /**
      Remove an attribute by key. <b>Case insensitive.</b>
      @param key attribute key to remove
      */
     public void removeIgnoreCase(String key) {
         Validate.notEmpty(key);
         if (attributes == null)
             return;
         for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {
             String attrKey = it.next();
-            if (attrKey.equalsIgnoreCase(key))
-                attributes.remove(attrKey);
+            if (attrKey.equalsIgnoreCase(key)) {
+                it.remove();
+                // Assuming attribute keys are unique, we can break after finding the match.
+                // If not unique (case-insensitively), remove the break to remove all matches.
+                // However, standard attributes map implies unique keys.
+                // Let's stick to removing the first match found for performance,
+                // which is also the behavior most likely expected.
+                // If the original intent was truly to remove *all* case-insensitive matches,
+                // the break statement should be removed. But standard map behavior suggests
+                // finding *the* key, and case-insensitivity is just for the lookup.
+                // Update: Reconsidering the original code, it did NOT break. It attempted
+                // to remove all matches. The correct fix preserving that (buggy) logic
+                // while fixing the CME is to just use it.remove() without break.
+            }
         }
     }
\ No newline at end of file
