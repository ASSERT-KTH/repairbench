diff --git a/tmp/ab531297-b430-489a-bb62-312921477774_buggy.java b/tmp/c36fb27e-f9ce-4d8c-93f9-d187abcdfd98_fixed.java
index c3944a7..45fad03 100644
--- a/tmp/ab531297-b430-489a-bb62-312921477774_buggy.java
+++ b/tmp/c36fb27e-f9ce-4d8c-93f9-d187abcdfd98_fixed.java
@@ -1,71 +1,102 @@
+import java.util.ArrayList;
+import java.util.List;
+import org.apache.commons.math3.util.Precision;
+
+// Assuming the context of the SimplexSolver class where SimplexTableau, Precision,
+// and the maxUlps field are defined and accessible.
+
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
+        // Iterate through constraint rows (from first constraint row to last)
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
+            final double entry = tableau.getEntry(i, col); // Pivot column entry in this row
 
+            // Check if the entry in the pivot column is positive (standard MRT condition)
+            // Consider numerical precision using Precision.compareTo with maxUlps
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
+                // Compare ratio with current minimum ratio
+                // Use precise comparison for tie detection (no epsilon/ulp check here for equality)
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
+                    // Ratio is equal to the current minimum, add row to the list of ties
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
+                    // Found a new minimum ratio
                     minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
-                    minRatioPositions.add(i);
+                    minRatioPositions.clear(); // Clear previous ties
+                    minRatioPositions.add(i);  // Add the new minimum row
                 }
             }
         }
 
-        if (minRatioPositions.size() == 0) {
-            return null;
+        if (minRatioPositions.isEmpty()) { // Use isEmpty() for clarity
+            return null; // No eligible pivot row found (unbounded solution likely)
         } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+            // Degeneracy: Tie in the minimum ratio test. Apply tie-breaking rules.
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
+            // 1. Check if an artificial variable can be forced out.
+            // Prioritize rows where an artificial variable is basic.
             for (Integer row : minRatioPositions) {
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+                    int artificialVarColumn = i + tableau.getArtificialVariableOffset();
+                    Integer basicRow = tableau.getBasicRow(artificialVarColumn);
+                    // Check if this artificial variable is basic in the current candidate row 'row'
+                    // Use .equals() for Integer comparison and handle null basicRow.
+                    if (basicRow != null && basicRow.equals(row)) {
+                         // Check if the entry is 1 (standard for basic variable in canonical form)
+                         // This check was in the original code, retain it for robustness.
+                         final double entry = tableau.getEntry(row, artificialVarColumn);
+                         if (Precision.equals(entry, 1d, maxUlps)) {
+                             // Found an artificial variable basic in this row. Choose this row.
                              return row;
                          }
                     }
                 }
+            }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+            // 2. Apply Bland's rule if no artificial variable could be forced out.
+            // Choose the row corresponding to the basic variable with the smallest column index.
             Integer minRow = null;
-                int minIndex = tableau.getWidth();
+            int minIndex = Integer.MAX_VALUE; // Initialize with a value larger than any possible column index
+
             for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
+                int basicVarIndex = -1; // Index of the basic variable in this row
+                // Find the column index 'j' of the basic variable for 'row'
+                // Iterate over all columns that could represent variables (typically 0 to width - 2)
+                // Assuming getBasicRow(j) returns null or the row index if column j corresponds to a basic variable.
+                for (int j = 0; j < tableau.getWidth() - 1; j++) { // Check columns 0 to width-2 (excluding RHS)
+                    Integer basicRowForJ = tableau.getBasicRow(j);
+                    // Check if variable 'j' is basic and if it's basic in the current 'row'
+                    if (basicRowForJ != null && basicRowForJ.equals(row)) {
+                        basicVarIndex = j;
+                        break; // Found the basic variable for this row
+                    }
+                }
+
+                // If we found a basic variable for this row (basicVarIndex != -1)
+                // and its index is smaller than the minimum index found so far among the tied rows
+                if (basicVarIndex != -1 && basicVarIndex < minIndex) {
+                    minIndex = basicVarIndex;
                     minRow = row;
                 }
             }
-                    }
-                }
+            // Return the row selected by Bland's rule.
+            // If minRow remains null (e.g., if getBasicRow failed unexpectedly for all tied rows),
+            // this will return null, consistent with the original code's potential outcome in that scenario.
              return minRow;
-        }
+
+        } else {
+            // No tie, return the unique row with the minimum ratio.
             return minRatioPositions.get(0);
         }
+    }
\ No newline at end of file
