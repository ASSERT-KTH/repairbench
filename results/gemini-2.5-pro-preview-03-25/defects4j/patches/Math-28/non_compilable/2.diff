diff --git a/tmp/4bd2a712-901b-429d-9f92-21fcc2a05961_buggy.java b/tmp/91745635-7ab3-4153-a14a-95c62be04527_fixed.java
index c3944a7..3cfd9d7 100644
--- a/tmp/4bd2a712-901b-429d-9f92-21fcc2a05961_buggy.java
+++ b/tmp/91745635-7ab3-4153-a14a-95c62be04527_fixed.java
@@ -1,71 +1,102 @@
+import org.apache.commons.math3.util.Precision; // Added import for clarity
+import java.util.ArrayList; // Added import for clarity
+import java.util.List; // Added import for clarity
+// Assuming SimplexTableau class and maxUlps field are defined elsewhere appropriately.
+
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
+        // Iterate through constraint rows (starting after objective function rows)
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
+            final double entry = tableau.getEntry(i, col); // Entry in pivot column
 
+            // Check if the entry in the pivot column is positive (denominator for ratio)
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
+                // compare the ratio with the current minimum ratio using plain double comparison
+                // to find exact ties as per original code's intent for degeneracy handling.
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
+                    // Ratio is equal to the current minimum, add row to the list of tying rows
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
+                    // Ratio is strictly smaller than the current minimum
                     minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
-                    minRatioPositions.add(i);
+                    minRatioPositions = new ArrayList<Integer>(); // Reset list for new minimum
+                    minRatioPositions.add(i); // Add this row as the new minimum
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
+            // No eligible row found (all entries in pivot column were <= 0 for constraint rows)
+            // This indicates an unbounded problem in this direction.
             return null;
         } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+            // Tie in the minimum ratio test (degeneracy) - need a tie-breaking rule
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
+            // 1. Check if there's an artificial variable that can be forced out of the basis among the tying rows.
+            // Prioritizing the removal of artificial variables is standard practice.
             for (Integer row : minRatioPositions) {
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+                    int artificialVarColumn = i + tableau.getArtificialVariableOffset();
+                    final double entry = tableau.getEntry(row, artificialVarColumn);
+                    Integer basicRow = tableau.getBasicRow(artificialVarColumn); // Get the row where this artificial variable is basic
+
+                    // Check if the entry is 1 (characteristic of a basic variable in its row)
+                    // AND if this row ('row') is indeed the row where the artificial variable ('artificialVarColumn') is basic.
+                    // Use .equals() for Integer comparison.
+                    if (Precision.equals(entry, 1d, maxUlps) && basicRow != null && basicRow.equals(row)) {
+                        // If yes, choose this row to pivot on, effectively removing the artificial variable from the basis.
                         return row;
                     }
                 }
             }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+            // 2. If no artificial variable can be forced out, apply Bland's rule to prevent cycling.
+            // Bland's rule (for choosing the leaving variable/pivot row):
+            // Among the rows that tie for the minimum ratio, choose the one corresponding to the
+            // basic variable with the smallest index.
+            Integer minRow = null; // The row to be returned
+            int minIndex = Integer.MAX_VALUE; // Initialize with a value larger than any possible column index
+
+            for (Integer row : minRatioPositions) { // Iterate through the rows that tied for the minimum ratio
+                int basicVarIndexForRow = -1; // To store the index of the variable that is basic in this 'row'
+
+                // Find the column index 'i' of the variable that is basic in the current 'row'.
+                // Iterate over all potential variable columns. The original code started from getNumObjectiveFunctions(),
+                // assuming variables corresponding to objective rows (if any) cannot be basic in constraint rows. We retain this assumption.
+                for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
+                    Integer basicRowForColI = tableau.getBasicRow(i); // Get the row where variable 'i' is basic
+                    // Check if variable 'i' is basic in the current 'row'. Use .equals() for Integer object comparison.
+                    if (basicRowForColI != null && basicRowForColI.equals(row)) {
+                        basicVarIndexForRow = i; // Store the index of the basic variable
+                        break; // Found the basic variable for this row, no need to check further columns for this row
                     }
                 }
+
+                // After checking all columns for the current 'row', see if we found its basic variable
+                // and if its index is the smallest found so far among the tying rows.
+                if (basicVarIndexForRow != -1 && basicVarIndexForRow < minIndex) {
+                    minIndex = basicVarIndexForRow; // Update the minimum index found
+                    minRow = row;                   // Update the corresponding row to be returned
                 }
             }
+            // Return the row associated with the smallest basic variable index found among the tying rows.
+            // If minRow is null at this point, it implies an issue (e.g., couldn't find basic variables
+            // for the tying rows), which shouldn't happen in a typical valid simplex state when applying Bland's rule.
             return minRow;
-        }
+
+        } else {
+            // No tie, exactly one row had the minimum ratio.
             return minRatioPositions.get(0);
         }
+    }
\ No newline at end of file
