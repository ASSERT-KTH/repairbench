diff --git a/tmp/42404850-aed5-49fd-9d7f-2b0153213827_buggy.java b/tmp/70162b03-a39d-4600-b3a5-3a518c52d8ea_fixed.java
index c3944a7..56319a9 100644
--- a/tmp/42404850-aed5-49fd-9d7f-2b0153213827_buggy.java
+++ b/tmp/70162b03-a39d-4600-b3a5-3a518c52d8ea_fixed.java
@@ -1,71 +1,87 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
+            // Use precision comparison for the entry check
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
                 // check if the entry is strictly equal to the current min ratio
                 // do not use a ulp/epsilon check
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
                     minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
+                    minRatioPositions = new ArrayList<Integer>(); // Reset list
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
-            return null;
+            return null; // No feasible row found
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
             // 1. check if there's an artificial variable that can be forced out of the basis
             for (Integer row : minRatioPositions) {
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                     int column = i + tableau.getArtificialVariableOffset();
                     final double entry = tableau.getEntry(row, column);
+                    // Use precision comparison for checking equality to 1.0
                     if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                         return row;
                     }
                 }
             }
 
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
             //
             // see http://www.stanford.edu/class/msande310/blandrule.pdf
             // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
             //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
+            // Additional heuristic (commented out in original): if we did not get a solution after half of maxIterations
             //                       revert to the simple case of just returning the top-most row
             // This heuristic is based on empirical data gathered while investigating MATH-828.
+
                 Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+                int minIndex = Integer.MAX_VALUE; // Initialize with a value larger than any possible column index
+
+                for (Integer row : minRatioPositions) { // Iterate through rows that tied for minimum ratio
+                    int basicVarIndexForRow = -1; // Index of the basic variable for the current 'row'
+
+                    // Find the column index 'i' of the basic variable for the current 'row'
+                    // Iterate through all potential variable columns (excluding RHS)
+                    for (int i = 0; i < tableau.getWidth() - 1; i++) {
+                        Integer basicRowForColI = tableau.getBasicRow(i);
+                        // Check if variable 'i' is basic in the current 'row'. Use .equals() for Integer comparison.
+                        if (basicRowForColI != null && basicRowForColI.equals(row)) {
+                            basicVarIndexForRow = i;
+                            break; // Found the basic variable for this row, stop searching columns
                         }
                     }
+
+                    // If we found a basic variable for this row (should always happen for valid tableau rows)
+                    // and its index is smaller than the minimum index found so far among tied rows.
+                    if (basicVarIndexForRow != -1 && basicVarIndexForRow < minIndex) {
+                        minIndex = basicVarIndexForRow;
+                        minRow = row; // Update the row to return
                     }
                 }
+                // Return the row selected by Bland's rule (corresponding to the smallest basic variable index)
                 return minRow;
         }
+        // If there was no tie, return the unique row with the minimum ratio
         return minRatioPositions.get(0);
     }
\ No newline at end of file
