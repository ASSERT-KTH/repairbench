diff --git a/tmp/7ef2dc9d-d293-474b-ae3d-cc865b70dfdc_buggy.java b/tmp/14e4adcc-6bd7-4904-91f8-6954ea187147_fixed.java
index c3944a7..952ce55 100644
--- a/tmp/7ef2dc9d-d293-474b-ae3d-cc865b70dfdc_buggy.java
+++ b/tmp/14e4adcc-6bd7-4904-91f8-6954ea187147_fixed.java
@@ -1,71 +1,90 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
+            // Check if the entry in the pivot column is positive
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
-                final int cmp = Double.compare(ratio, minRatio);
+                // Use a tolerance check for comparing ratios to handle potential floating-point inaccuracies
+                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);
                 if (cmp == 0) {
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
                     minRatio = ratio;
                     minRatioPositions = new ArrayList<Integer>();
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
+            // This indicates an unbounded problem, as all entries in the pivot column are non-positive
             return null;
         } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+            // Degeneracy: Tie in the minimum ratio test. Apply tie-breaking rules.
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
+            // 1. Check if there's an artificial variable that can be forced out of the basis.
+            //    Prioritize rows corresponding to artificial variables leaving the basis.
             for (Integer row : minRatioPositions) {
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                     int column = i + tableau.getArtificialVariableOffset();
+                    // Check if the variable in 'column' is artificial and basic in 'row'
+                    // and if the entry in the tableau for this artificial variable is 1 (typical for basic artificial vars)
                     final double entry = tableau.getEntry(row, column);
                     if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
+                        return row; // Choose this row to pivot
                     }
                 }
             }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
+            // 2. Apply Bland's rule to prevent cycling:
+            //    Among the tied rows, choose the one corresponding to the basic variable
+            //    with the smallest column index.
             //
             // see http://www.stanford.edu/class/msande310/blandrule.pdf
             // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
             //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+            // The implementation below follows the principle: find the minimum index basic variable
+            // among the rows involved in the tie.
+
             Integer minRow = null;
-                int minIndex = tableau.getWidth();
+            int minIndex = Integer.MAX_VALUE; // Initialize with a large value
+
             for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+                // Find the index of the column corresponding to the basic variable in this 'row'.
+                int basicVarIndex = -1; // Initialize for the current row
+
+                // Iterate through all columns that could represent basic variables (excluding RHS).
+                for (int j = 0; j < tableau.getWidth() - 1; j++) {
+                    Integer basicRowForColumnJ = tableau.getBasicRow(j);
+                    // Check if variable 'j' is basic and if its basic row is the current 'row'
+                    if (basicRowForColumnJ != null && basicRowForColumnJ.equals(row)) {
+                        basicVarIndex = j; // Found the basic variable index for this row
+                        break; // Move to the next tied row
                     }
                 }
+
+                // If a basic variable was found for this row (should always happen for a valid basis)
+                // and its index is smaller than the minimum index found so far among tied rows:
+                if (basicVarIndex != -1 && basicVarIndex < minIndex) {
+                    minIndex = basicVarIndex; // Update the minimum index
+                    minRow = row;             // Update the row corresponding to this minimum index
                 }
             }
+            // After checking all tied rows, minRow holds the row associated with
+            // the basic variable having the smallest index, according to Bland's rule.
             return minRow;
         }
+        // If there was no tie, return the single row found with the minimum ratio.
         return minRatioPositions.get(0);
     }
\ No newline at end of file
