diff --git a/tmp/3d763fd7-4540-4f32-b15f-937b737bd8d0_buggy.java b/tmp/87c4db92-29ea-49bd-8b01-a97d88492bd9_fixed.java
index c3944a7..52e0bbf 100644
--- a/tmp/3d763fd7-4540-4f32-b15f-937b737bd8d0_buggy.java
+++ b/tmp/87c4db92-29ea-49bd-8b01-a97d88492bd9_fixed.java
@@ -1,71 +1,92 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
+            // only consider basic variables entering the basis with a positive coefficient in the pivot row
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
                 // check if the entry is strictly equal to the current min ratio
                 // do not use a ulp/epsilon check
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
                     minRatio = ratio;
                     minRatioPositions = new ArrayList<Integer>();
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
-            return null;
+            return null; // Unbounded solution indication
         } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+            // Degeneracy: tie in the minimum ratio test. Apply tie-breaking rules.
+
+            // 1. Check if any artificial variables are basic in the tied rows.
+            //    If so, choose the row corresponding to the artificial variable
+            //    with the smallest index (consistent with Bland's rule among artificial variables).
+            Integer rowToChoose = null;
+            int minArtificialVarIndex = Integer.MAX_VALUE;
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
+                int artificialVarIndex = i + tableau.getArtificialVariableOffset();
+                Integer basicRow = tableau.getBasicRow(artificialVarIndex);
+
+                // Check if this artificial variable is basic AND its row is among the tied rows
+                if (basicRow != null && minRatioPositions.contains(basicRow)) {
+                     // If this artificial variable has a smaller index than previously found ones, select its row.
+                     if (artificialVarIndex < minArtificialVarIndex) {
+                         minArtificialVarIndex = artificialVarIndex;
+                         rowToChoose = basicRow;
+                     }
                 }
             }
+
+            // If we found a tied row where an artificial variable is basic, return the selected row.
+            if (rowToChoose != null) {
+                return rowToChoose;
             }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+            // 2. If no artificial variable was found among the tied rows,
+            //    apply Bland's rule: choose the row corresponding to the basic variable
+            //    with the smallest index among all tied rows.
             Integer minRow = null;
-                int minIndex = tableau.getWidth();
+            int minIndex = Integer.MAX_VALUE; // Initialize with a large value
+
             for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
+                // Iterate over all variable columns to find the basic variable for this 'row'
+                // Assuming variable indices (columns) range from 0 to tableau.getWidth() - 2
+                for (int i = 0; i < tableau.getWidth() - 1; i++) {
+                    Integer basicRow = tableau.getBasicRow(i);
+                    // Check if variable 'i' is basic in the current 'row'
+                    // Use equals for Integer comparison and check for null basicRow
+                    if (basicRow != null && basicRow.equals(row)) {
+                        // If this variable's index 'i' is smaller than the current minIndex, update.
                         if (i < minIndex) {
                             minIndex = i;
                             minRow = row;
                         }
+                        // Found the basic variable for this row, no need to check other columns for this row.
+                        break;
                     }
                 }
             }
+            // Return the row selected by Bland's rule (or null if somehow no basic variable was found, though unlikely)
             return minRow;
-        }
+
+        } else {
+            // No tie, return the unique row with the minimum ratio
             return minRatioPositions.get(0);
         }
+    }
\ No newline at end of file
