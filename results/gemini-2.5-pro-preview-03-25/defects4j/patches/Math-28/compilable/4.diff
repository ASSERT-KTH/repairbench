diff --git a/tmp/9d8496df-6be0-4df2-8a83-c7d62dc8b919_buggy.java b/tmp/a7726ff5-e455-4550-bb52-a4e6b4ad1a26_fixed.java
index c3944a7..d97781c 100644
--- a/tmp/9d8496df-6be0-4df2-8a83-c7d62dc8b919_buggy.java
+++ b/tmp/a7726ff5-e455-4550-bb52-a4e6b4ad1a26_fixed.java
@@ -1,71 +1,90 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
+        // Iterate through constraint rows (skipping objective function rows)
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
+            final double entry = tableau.getEntry(i, col); // Entry in pivot column 'col' for row 'i'
 
+            // Check if the entry in the pivot column is positive (requirement for MRT)
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
+                // compare the ratio with the current minimum ratio using simple double comparison
+                // Note: Do not use epsilon comparison here, as it can lead to cycling.
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
+                    // Ratio is equal to the current minimum, add row to the list of tied rows
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
+                    // Found a new smaller ratio
                     minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
-                    minRatioPositions.add(i);
+                    minRatioPositions = new ArrayList<Integer>(); // Reset the list
+                    minRatioPositions.add(i); // Add the new best row
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
+            // No eligible pivot row found (all entries in pivot column are <= 0 for constraint rows)
+            // This indicates unboundedness if encountered during optimization.
             return null;
         } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+            // Degeneracy: Tie in the minimum ratio test. Need to break the tie.
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
+            // 1. Check if an artificial variable can be forced out.
+            // Iterate through the tied rows
             for (Integer row : minRatioPositions) {
+                // Iterate through the artificial variable columns
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+                    int artificialVarColIndex = i + tableau.getArtificialVariableOffset();
+                    // Check if this artificial variable is basic in this 'row'
+                    // We only need to check if basicRow equals row, the entry check is redundant
+                    // if the tableau is consistent (basic variable column should have 1 in its row, 0 elsewhere)
+                    if (row.equals(tableau.getBasicRow(artificialVarColIndex))) {
+                        // If yes, prioritize pivoting on this row to remove the artificial variable
                         return row;
                     }
                 }
             }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+            // 2. Apply Bland's rule to prevent cycling:
+            //    Select the row corresponding to the basic variable with the smallest index.
             Integer minRow = null;
-                int minIndex = tableau.getWidth();
+            int minIndex = Integer.MAX_VALUE; // Initialize with a large value
+
+            // Iterate through all tied rows identified by the MRT
             for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
+                // Find the index of the basic variable corresponding to this 'row'
+                // Iterate through all variable columns (0 to width - 2)
+                // NOTE: In SimplexTableau, column indices correspond to variables.
+                for (int i = 0; i < tableau.getWidth() - 1; i++) {
+                    Integer basicRowForCol = tableau.getBasicRow(i);
+                    // Check if variable 'i' is basic and its basic row is the current 'row'
+                    if (basicRowForCol != null && basicRowForCol.equals(row)) {
+                        // Variable 'i' is basic in row 'row'.
+                        // Check if this variable index 'i' is smaller than the smallest index found so far
                         if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+                            minIndex = i; // Update the minimum index
+                            minRow = row;   // Update the corresponding row
                         }
+                        // Once the basic variable for 'row' is found, we can break the inner loop
+                        // and proceed to the next tied row.
+                        break;
                     }
                 }
             }
+            // Return the row associated with the smallest basic variable index among the tied rows.
+            // If minRow is still null (e.g., if tableau state is inconsistent), this will return null.
             return minRow;
-        }
+        } else {
+            // Only one row has the minimum ratio, return it.
             return minRatioPositions.get(0);
         }
+    }
\ No newline at end of file
