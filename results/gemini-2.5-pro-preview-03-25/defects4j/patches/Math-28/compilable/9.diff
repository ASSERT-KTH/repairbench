diff --git a/tmp/722ac235-a9e1-4d86-835a-e9b961f14da3_buggy.java b/tmp/bc3356a7-e1db-487c-8efb-c9db4f789daf_fixed.java
index c3944a7..040c42f 100644
--- a/tmp/722ac235-a9e1-4d86-835a-e9b961f14da3_buggy.java
+++ b/tmp/bc3356a7-e1db-487c-8efb-c9db4f789daf_fixed.java
@@ -1,71 +1,91 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
+            // Check if the entry in the pivot column is positive
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
+                // compare check includes strictly equal values. See MATH-842
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
                     minRatio = ratio;
                     minRatioPositions = new ArrayList<Integer>();
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
+             // This indicates an unbounded problem or an error state
             return null;
         } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+            // Degeneracy: tie in the minimum ratio test. Apply tie-breaking rules.
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
+            // 1. Check if there's an artificial variable that can be forced out of the basis
+            //    among the tied rows. Prefer exiting artificial variables.
             for (Integer row : minRatioPositions) {
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                     int column = i + tableau.getArtificialVariableOffset();
                     final double entry = tableau.getEntry(row, column);
+                    // Check if the artificial variable 'column' is basic in 'row'
                     if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
+                        return row; // Pivot on this row to remove the artificial variable
                     }
                 }
             }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
+            // 2. Apply Bland's rule to prevent cycling:
+            //    Take the row for which the corresponding basic variable has the smallest index.
             //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
+            // References:
+            // http://www.stanford.edu/class/msande310/blandrule.pdf
+            // http://en.wikipedia.org/wiki/Bland%27s_rule
             //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+            // Implementation note: Bland's rule requires finding the basic variable
+            // corresponding to each tied row and selecting the row whose basic variable
+            // has the minimum index.
+
             Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
+            int minIndex = Integer.MAX_VALUE; // Initialize with a value larger than any possible column index
+
+            for (Integer row : minRatioPositions) { // Iterate through rows tied for minimum ratio
+                // Find the index 'i' of the basic variable for the current 'row'.
+                // Iterate through all variable columns (indices 0 to width - 2).
+                // Assumes column indices correspond directly to variable indices for Bland's rule.
+                for (int i = 0; i < tableau.getWidth() - 1; i++) {
+                    Integer basicRow = tableau.getBasicRow(i);
+                    // Check if variable 'i' is basic in the current 'row'
+                    if (basicRow != null && basicRow.equals(row)) {
+                        // If this variable index 'i' is smaller than the minimum index found so far
                         if (i < minIndex) {
                             minIndex = i;
                             minRow = row;
                         }
+                        // Once the basic variable for this row is found, break the inner loop
+                        // as each basic row corresponds to exactly one basic variable.
+                        break;
                     }
                 }
             }
-                return minRow;
-        }
+            // The heuristic mentioned in comments (revert after half maxIterations) is not implemented here.
+            // If Bland's rule implementation is correct, it should prevent cycling.
+            // If minRow is somehow still null, it indicates an unexpected state, but given the tableau
+            // structure, it should be set if minRatioPositions is not empty and contains valid basic rows.
+            return minRow; // Return the row corresponding to the smallest basic variable index
+        } else {
+             // No tie, return the unique row with the minimum ratio.
             return minRatioPositions.get(0);
         }
+    }
\ No newline at end of file
