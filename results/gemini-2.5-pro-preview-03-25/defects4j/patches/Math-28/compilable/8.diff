diff --git a/tmp/1cf6eeef-eb94-4887-8134-e4dedc568033_buggy.java b/tmp/016e31fb-af97-4c50-8c6a-589cb0fb5f32_fixed.java
index c3944a7..aae5b72 100644
--- a/tmp/1cf6eeef-eb94-4887-8134-e4dedc568033_buggy.java
+++ b/tmp/016e31fb-af97-4c50-8c6a-589cb0fb5f32_fixed.java
@@ -1,71 +1,93 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
+        // Start loop from the first constraint row
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
+            final double entry = tableau.getEntry(i, col); // Entry in pivot column
 
+            // Check if the entry in the pivot column is positive (greater than zero within precision)
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
+                // Use Double.compare for strict comparison as in original code
+                // Note: Consider Precision.compareTo for robustness if needed later
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
+                    // Add row to the list of ties
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
+                    // Found a new minimum ratio
                     minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
+                    minRatioPositions.clear(); // Clear existing list
                     minRatioPositions.add(i);
                 }
             }
         }
 
-        if (minRatioPositions.size() == 0) {
-            return null;
+        if (minRatioPositions.isEmpty()) { // Check if list is empty
+            return null; // No suitable pivot row found (unbounded solution likely)
         } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+            // Degeneracy: Tie in the minimum ratio test
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
+            // 1. Check if there's an artificial variable that can be forced out of the basis
+            //    among the tied rows. Prioritize removing artificial variables.
             for (Integer row : minRatioPositions) {
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+                    int artificialCol = i + tableau.getArtificialVariableOffset();
+                    // Ensure the artificial variable column index is valid
+                    if (artificialCol < tableau.getWidth() - 1) {
+                         final double entry = tableau.getEntry(row, artificialCol);
+                         // Check if the entry is 1 (within precision) and if this artificial variable
+                         // is basic in the current row according to the tableau's state.
+                         Integer basicRow = tableau.getBasicRow(artificialCol);
+                         if (basicRow != null && basicRow.equals(row) && Precision.equals(entry, 1d, maxUlps)) {
+                             // Found an artificial variable basic in this tied row, choose this row.
                              return row;
                          }
                     }
                 }
+            }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+            // 2. If no artificial variable can be forced out, apply Bland's rule to prevent cycling:
+            //    Select the row for which the corresponding basic variable has the smallest index.
             Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+            int minIndex = Integer.MAX_VALUE; // Initialize with max value for correct comparison
+
+            for (Integer row : minRatioPositions) { // Iterate through the tied rows
+                int basicVarIndex = -1; // Index of the basic variable for this row
+
+                // Find the column index 'j' of the basic variable for the current 'row'
+                // Iterate through ALL variable columns (index 0 to width - 2)
+                for (int j = 0; j < tableau.getWidth() - 1; j++) {
+                    Integer basicRowForJ = tableau.getBasicRow(j);
+                    // Use .equals() for Integer comparison and check for null
+                    if (basicRowForJ != null && basicRowForJ.equals(row)) {
+                        basicVarIndex = j;
+                        break; // Found the unique basic variable for this row
                     }
                 }
+
+                // If a basic variable was found (should always be true for a valid basic row in the basis)
+                // and its index is smaller than the current minimum index found so far
+                if (basicVarIndex != -1 && basicVarIndex < minIndex) {
+                    minIndex = basicVarIndex;
+                    minRow = row; // Update the row associated with the smallest basic variable index
                 }
             }
+            // Return the row selected by Bland's rule.
+            // The heuristic mentioned in the original comments (based on maxIterations) is not applied here,
+            // relying solely on the correctness of Bland's rule implementation.
             return minRow;
-        }
+
+        } else {
+            // No tie, return the unique row with the minimum ratio
             return minRatioPositions.get(0);
         }
+    }
\ No newline at end of file
