diff --git a/tmp/51fecb07-f09f-4ac9-8da8-0ab2e51ee9ed_buggy.java b/tmp/257c3dc1-414c-449a-97d3-6bb9b3ffd6f5_fixed.java
index c3944a7..c6af2e2 100644
--- a/tmp/51fecb07-f09f-4ac9-8da8-0ab2e51ee9ed_buggy.java
+++ b/tmp/257c3dc1-414c-449a-97d3-6bb9b3ffd6f5_fixed.java
@@ -1,71 +1,95 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
+            // Check if the entry in the pivot column is positive (greater than 0 within tolerance)
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
+                // Check if the ratio is strictly smaller or equal to the current minimum ratio
+                // Use Double.compare for comparison, avoiding epsilon checks here as per original logic
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
+                    // Ratio is equal, add the row to the list of ties
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
+                    // Ratio is strictly smaller, start a new list of ties
                     minRatio = ratio;
                     minRatioPositions = new ArrayList<Integer>();
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
+            // No feasible row found for the pivot column (all entries <= 0)
             return null;
         } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+            // Degeneracy: Tie in the minimum ratio test
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
+            // 1. Check if there's an artificial variable that can be forced out of the basis
+            //    This is prioritized to ensure artificial variables leave the basis quickly.
+            if (tableau.getNumArtificialVariables() > 0) {
                 for (Integer row : minRatioPositions) {
                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
+                        int artificialVarColumn = i + tableau.getArtificialVariableOffset();
+                        // Check if the artificial variable is basic in this row
+                        if (row.equals(tableau.getBasicRow(artificialVarColumn))) {
+                             // Check if the entry corresponding to the artificial variable is 1 (or close to 1)
+                             // This check might be redundant if tableau structure guarantees it, but added for clarity
+                             // final double entry = tableau.getEntry(row, artificialVarColumn);
+                             // if (Precision.equals(entry, 1d, maxUlps)) {
+                                return row; // Found an artificial variable to remove, return its row
+                             // }
                         }
                     }
                 }
+            }
+
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
+            // 2. Apply Bland's rule to prevent cycling:
+            //    Select the row for which the basic variable has the smallest index.
             //
             // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
+            // see http://en.wikipedia.org/wiki/Bland%27s_rule
             //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+            // The original code had a potential bug in the starting index of the inner loop.
+            // The corrected version iterates through all variable columns (0 to width - 2).
             Integer minRow = null;
-                int minIndex = tableau.getWidth();
+            int minIndex = Integer.MAX_VALUE; // Initialize with a large index
+
             for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
+                // Find the column index 'j' of the basic variable in this 'row'
+                // Iterate through all potential variable columns (indices 0 to width - 2)
+                for (int j = 0; j < tableau.getWidth() - 1; j++) {
+                    Integer basicRow = tableau.getBasicRow(j);
+                    // Check if variable 'j' is basic in the current tied row 'row'
+                    if (basicRow != null && basicRow.equals(row)) {
+                        // Variable 'j' is basic in 'row'. Compare its index 'j' with the minimum found so far.
+                        if (j < minIndex) {
+                            minIndex = j;
                             minRow = row;
                         }
+                        // Since each row has exactly one basic variable in a standard tableau,
+                        // we can break the inner loop once we find it for the current row.
+                        break;
                     }
                 }
             }
+            // Return the row associated with the basic variable having the smallest index among the tied rows.
+            // If minRow is still null, it implies an issue (e.g., no basic variable found for tied rows),
+            // but under normal simplex operation with Bland's rule, a row should be selected.
             return minRow;
         }
+        // Only one row had the minimum ratio
         return minRatioPositions.get(0);
     }
\ No newline at end of file
