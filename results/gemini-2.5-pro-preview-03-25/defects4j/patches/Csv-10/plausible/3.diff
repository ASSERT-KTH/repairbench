diff --git a/tmp/264c2104-b32d-4726-ab82-bba34fbac6ce_buggy.java b/tmp/5f23f753-2d55-414b-9cc2-e1fb45a6e95d_fixed.java
index 97f28e5..70f5d35 100644
--- a/tmp/264c2104-b32d-4726-ab82-bba34fbac6ce_buggy.java
+++ b/tmp/5f23f753-2d55-414b-9cc2-e1fb45a6e95d_fixed.java
@@ -1,26 +1,35 @@
     /**
      * Creates a printer that will print values to the given stream following the CSVFormat.
      * <p>
      * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation
      * and escaping with a different character) are not supported.
      * </p>
      *
      * @param out
      *        stream to which to print. Must not be null.
      * @param format
      *        the CSV format. Must not be null.
      * @throws IOException
      *         thrown if the optional header cannot be printed.
      * @throws IllegalArgumentException
      *         thrown if the parameters of the format are inconsistent or if either out or format are null.
      */
     public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {
         Assertions.notNull(out, "out");
         Assertions.notNull(format, "format");
 
         this.out = out;
         this.format = format;
         this.format.validate();
         // TODO: Is it a good idea to do this here instead of on the first call to a print method?
         // It seems a pain to have to track whether the header has already been printed or not.
+
+        // Print the header record if configured
+        final String[] header = format.getHeader();
+        if (header != null) {
+            // Use the printRecord method to ensure the header is printed
+            // according to the format's rules (delimiter, quoting, etc.).
+            // Cast needed for varargs call with an array.
+            this.printRecord((Object[]) header);
+        }
     }
\ No newline at end of file
