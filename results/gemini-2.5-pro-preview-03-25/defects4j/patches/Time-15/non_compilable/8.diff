diff --git a/tmp/3cbb7b0b-fcdf-40a8-8622-6f1b1a9e24dd_buggy.java b/tmp/7b88496e-0257-40be-98c4-d3c60b448d9e_fixed.java
index a9a5e27..fd28afa 100644
--- a/tmp/3cbb7b0b-fcdf-40a8-8622-6f1b1a9e24dd_buggy.java
+++ b/tmp/7b88496e-0257-40be-98c4-d3c60b448d9e_fixed.java
@@ -1,24 +1,83 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Special case for Long.MIN_VALUE * -1, as it overflows but the standard check below calculates incorrectly
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        // Catch the Integer.MIN_VALUE case that won't be caught by the check below
+        if (val2 == Integer.MIN_VALUE) {
+             if (val1 == -1) {
+                // This case is OK, -1 * Integer.MIN_VALUE fits in a long (2^31). Handled by standard path.
+             } else {
+                 // Any other multiplication with Integer.MIN_VALUE (except 0 or 1 which are handled above)
+                 // will overflow or be Long.MIN_VALUE.
+                 // We need to check this case explicitly because multiplication might result in Long.MIN_VALUE
+                 // which would make the division check fail. Example: Long.MIN_VALUE/2 * Integer.MIN_VALUE overflows,
+                 // but the standard check might pass incorrectly.
+                 // However, the simplest path is to delegate to the long * long multiplication,
+                 // as that handles the MIN_VALUE cases correctly.
+                 return safeMultiply(val1, (long)val2);
+             }
+        }
+        // Standard check works for non-MIN_VALUE integers and the -1 * Integer.MIN_VALUE case
         long total = val1 * val2;
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
+
+    /**
+     * Multiply two values throwing an exception if overflow occurs.
+     * 
+     * @param val1  the first value
+     * @param val2  the second value
+     * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
+     */
+    public static long safeMultiply(long val1, long val2) {
+        if (val2 == 1) {
+            return val1;
+        }
+        if (val2 == 0) {
+            return 0L;
+        }
+        if (val2 == -1) {
+            if (val1 == Long.MIN_VALUE) {
+                 throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+            return -val1;
+        }
+        long total = val1 * val2;
+        if (total / val2 != val1) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        // Long.MIN_VALUE * -1 is checked above, Long.MIN_VALUE / -1 needed here
+        // If val1 is Long.MIN_VALUE and val2 is -1, the previous check fails because
+        // total / val2 overflows. Handled above.
+        // If val1 is Long.MIN_VALUE and val2 is not -1, the check works correctly.
+        // Special check for Long.MIN_VALUE / -1 which returns Long.MIN_VALUE
+        if (val1 == Long.MIN_VALUE && val2 == -1) {
+             // Should have been caught above, but safeguard
+             throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        // Check for the other edge case: Long.MIN_VALUE / Long.MIN_VALUE = 1
+        // Handled by the main check total / val2 != val1 -> (val1*val2)/val2 != val1
+        return total;
+    }
\ No newline at end of file
