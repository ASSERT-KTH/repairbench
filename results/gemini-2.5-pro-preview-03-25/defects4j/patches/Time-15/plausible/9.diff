diff --git a/tmp/0885bc55-6936-4d70-8678-475d34bdcc6a_buggy.java b/tmp/3bf89316-af1e-445f-a8d7-9fc53f42b8b7_fixed.java
index a9a5e27..4653d44 100644
--- a/tmp/0885bc55-6936-4d70-8678-475d34bdcc6a_buggy.java
+++ b/tmp/3bf89316-af1e-445f-a8d7-9fc53f42b8b7_fixed.java
@@ -1,24 +1,36 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
+        // Handle the special case Integer.MIN_VALUE to avoid division by zero in the check below
+        // val2=0 is handled elsewhere.
+        
+        // Special case for Long.MIN_VALUE * -1, as it overflows but the standard check (total/val2 == val1) fails.
+        if (val1 == Long.MIN_VALUE && val2 == -1) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+
+        // Handle trivial cases for performance
         switch (val2) {
-            case -1:
-                return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
+            // case -1 is handled above for Long.MIN_VALUE, and below for other values.
+            // No need for case -1 here anymore as the general check works fine for non-MIN_VALUE longs.
         }
+
         long total = val1 * val2;
+        // The division check works for all cases except Long.MIN_VALUE * -1, which was handled above.
+        // It implicitly handles val2 != 0 because case 0 is handled above.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
