diff --git a/tmp/97a3f826-1892-4b1d-9950-443d0e43bd75_buggy.java b/tmp/878e7c50-521f-4208-b077-3fd0775be759_fixed.java
index a9a5e27..9d8984e 100644
--- a/tmp/97a3f826-1892-4b1d-9950-443d0e43bd75_buggy.java
+++ b/tmp/878e7c50-521f-4208-b077-3fd0775be759_fixed.java
@@ -1,24 +1,35 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Handle Long.MIN_VALUE * -1 manually, as -Long.MIN_VALUE == Long.MIN_VALUE
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        // Implementation note: the general check calculation below also handles
+        // val1 == Long.MIN_VALUE and val2 = -1 correctly. However, the switch
+        // optimizes the common cases -1, 0 and 1.
+        
         long total = val1 * val2;
+        // The overflow check `total / val2 != val1` is OK in general, but fails specifically for
+        // Long.MIN_VALUE * -1 because Long.MIN_VALUE / -1 == Long.MIN_VALUE.
+        // That case is handled above. Other overflow cases are caught by this check.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
