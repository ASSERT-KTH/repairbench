diff --git a/tmp/e891e9a5-0e30-45bd-8ced-7ce1f47414d7_buggy.java b/tmp/cb4fe397-7d0f-4141-b5a5-e1e3e9eebb0e_fixed.java
index a9a5e27..5a5432e 100644
--- a/tmp/e891e9a5-0e30-45bd-8ced-7ce1f47414d7_buggy.java
+++ b/tmp/cb4fe397-7d0f-4141-b5a5-e1e3e9eebb0e_fixed.java
@@ -1,24 +1,34 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Check for overflow negating Long.MIN_VALUE
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        // Perform the multiplication and check for overflow
         long total = val1 * val2;
+        // The check `total / val2 != val1` is used to detect overflow.
+        // It works because if `val1 * val2` overflows, the division `total / val2`
+        // will not yield `val1` back, except for the special case handled above
+        // (`val1 = Long.MIN_VALUE, val2 = -1`).
+        // We don't need to worry about division by zero as `val2 = 0` is handled by the switch.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
