diff --git a/tmp/69c92a41-74e9-466a-b59f-aa20985cad45_buggy.java b/tmp/ec66c838-eefb-4f1f-a84a-b803f205f7fa_fixed.java
index a9a5e27..9444306 100644
--- a/tmp/69c92a41-74e9-466a-b59f-aa20985cad45_buggy.java
+++ b/tmp/ec66c838-eefb-4f1f-a84a-b803f205f7fa_fixed.java
@@ -1,24 +1,34 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Special case for Long.MIN_VALUE * -1, which overflows
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        // General case
         long total = val1 * val2;
+        // Check for overflow by dividing the result by the multiplier.
+        // If the result is not the original value, then overflow occurred.
+        // This check works correctly for val2 != -1 (which is handled above).
+        // It correctly handles other overflow scenarios, including those involving
+        // Long.MIN_VALUE or Long.MAX_VALUE with multipliers other than -1, 0, 1.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
