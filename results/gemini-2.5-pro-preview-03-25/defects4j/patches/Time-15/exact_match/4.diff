diff --git a/tmp/c89d4bcb-c80c-4e9f-bdb9-df7585ec04d5_buggy.java b/tmp/3075eab8-7c2b-409c-b69e-47c0f5128d64_fixed.java
index a9a5e27..7e2c101 100644
--- a/tmp/c89d4bcb-c80c-4e9f-bdb9-df7585ec04d5_buggy.java
+++ b/tmp/3075eab8-7c2b-409c-b69e-47c0f5128d64_fixed.java
@@ -1,24 +1,32 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Special case for Long.MIN_VALUE to avoid overflow, as negation overflows.
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        // Perform the multiplication
         long total = val1 * val2;
+        // Check for overflow by dividing the result back by the multiplier.
+        // If the result is different from the original value, overflow occurred.
+        // This check works correctly for all cases except Long.MIN_VALUE * -1, which is handled above.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
