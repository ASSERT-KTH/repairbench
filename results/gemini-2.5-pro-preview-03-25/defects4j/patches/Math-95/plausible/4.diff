diff --git a/tmp/46751d43-77d4-4a9f-9103-2da0ca29191e_buggy.java b/tmp/51abe206-6b6d-4860-a510-627db0672af8_fixed.java
index 25c13b3..3930cc9 100644
--- a/tmp/46751d43-77d4-4a9f-9103-2da0ca29191e_buggy.java
+++ b/tmp/51abe206-6b6d-4860-a510-627db0672af8_fixed.java
@@ -1,15 +1,33 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+        // The mean of the F-distribution is d / (d - 2) for d > 2.
+        // It is undefined otherwise. Use the mean as the initial guess
+        // when it is defined and positive. Otherwise, use 1.0 as a default,
+        // reasonable value within the domain [0, +inf).
+        if (d > 2.0) {
             ret = d / (d - 2.0);
+        } else {
+            ret = 1.0;
+        }
+        // Make sure the initial guess is strictly positive, F distribution is >= 0.
+        // Although 1.0 is chosen for d <= 2, d / (d-2) can be very large for d close to 2,
+        // potentially causing issues if the solver expects a value closer to the median.
+        // However, simply ensuring positivity fixes the reported IllegalArgumentException.
+        // A more sophisticated initial guess could be used (e.g., based on the median),
+        // but returning 1.0 when the mean is undefined is a minimal fix.
+        
+        // Note: A check for numerator degrees of freedom might also be relevant
+        // depending on the solver behavior, but is not strictly needed to fix
+        // the reported error related to denominator degrees of freedom <= 2.
+
         return ret;
     }
\ No newline at end of file
