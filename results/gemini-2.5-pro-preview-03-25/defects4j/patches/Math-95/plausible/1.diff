diff --git a/tmp/739efc73-5026-4df5-bab1-1861d8e505bc_buggy.java b/tmp/5e068c9c-01fa-47a8-9747-b9a8e491dc23_fixed.java
index 25c13b3..3100586 100644
--- a/tmp/739efc73-5026-4df5-bab1-1861d8e505bc_buggy.java
+++ b/tmp/5e068c9c-01fa-47a8-9747-b9a8e491dc23_fixed.java
@@ -1,15 +1,27 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      *
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+        // The mean of the F-distribution is d / (d - 2) for d > 2
+        // Use the mean as the initial guess if defined; otherwise, use 1.0
+        if (d > 2.0) {
             ret = d / (d - 2.0);
+        } else {
+            ret = 1.0; // Default value when mean is undefined or infinite (d <= 2)
+        }
+        // Ensure the initial guess is strictly positive, as F-distribution is defined for x > 0.
+        // Although the F-distribution pdf approaches 0 as x approaches 0 for some parameter combinations,
+        // the inverse CDF solver expects a starting point within the open interval (0, infinity).
+        // A value of 1.0 is generally safe. If the calculated mean is very close to 0,
+        // it might still cause issues depending on the solver implementation, but 1.0 is robust.
+        // Note: The original code failed for d=1, returning -1.0 which is outside the domain [0, inf).
+        // The check d > 2 prevents division by zero or negative results.
         return ret;
     }
\ No newline at end of file
