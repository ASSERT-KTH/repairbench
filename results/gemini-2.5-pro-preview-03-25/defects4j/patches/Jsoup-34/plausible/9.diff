diff --git a/tmp/1941ca98-e8de-41b1-ba8a-9e230d15e26d_buggy.java b/tmp/8bcfec3f-27d3-42db-b3a8-8c8b83a7084e_fixed.java
index 21f64c6..0f16baf 100644
--- a/tmp/1941ca98-e8de-41b1-ba8a-9e230d15e26d_buggy.java
+++ b/tmp/8bcfec3f-27d3-42db-b3a8-8c8b83a7084e_fixed.java
@@ -1,23 +1,51 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
+
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+            // scan to first instance of startChar:
+            if (startChar != input[offset]) {
+                // Advance offset until startChar is found or end of input is reached
                 while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+                // If offset reached the end of input, the sequence cannot be found
+                if (offset == length)
+                    break; // Exit the main loop
             }
+
+            // Found startChar at input[offset] (and offset < length).
+            // Now check if the rest of the sequence matches and fits within bounds.
+
+            int i = offset + 1; // Index in input[] for the second character of seq onwards
+            // The index *after* the sequence would end in input. This is offset + seqLen.
+            int last = offset + seqLen; 
+
+            // Check bounds: the sequence must fit within the remaining input (last <= length)
+            if (last <= length) {
+                int j = 1; // Index in seq for the second character onwards
+                // Compare the remaining characters of the sequence.
+                // The condition i < last ensures we only check up to the sequence length
+                // and also ensures i < length (because last <= length).
+                while (i < last && seq.charAt(j) == input[i]) {
+                    i++;
+                    j++;
                 }
-        return -1;
+                // If the inner loop completed (i reached 'last'), the full sequence matched
+                if (i == last) {
+                    return offset - pos; // Return the offset from the initial position 'pos'
+                }
+                // Otherwise, a mismatch occurred, continue the outer loop to search further
+            } else {
+                 // Optimization: If the sequence cannot fit starting at the current 'offset',
+                 // it also cannot fit starting at any later position.
+                 break; // Exit the main loop
+            }
+        }
+        return -1; // Sequence not found
     }
\ No newline at end of file
