diff --git a/tmp/e78aea50-1045-4864-a789-c11bb98f10a9_buggy.java b/tmp/a349d69c-9c55-4aa1-a8c7-359a913bd685_fixed.java
index 21f64c6..73aea69 100644
--- a/tmp/e78aea50-1045-4864-a789-c11bb98f10a9_buggy.java
+++ b/tmp/a349d69c-9c55-4aa1-a8c7-359a913bd685_fixed.java
@@ -1,23 +1,50 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
+
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
+                // This loop advances offset to the next startChar or the end of the input
                 while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
-            }
+                // If we scanned past the end, the sequence cannot be found
+                if (offset >= length)
+                    return -1;
             }
+
+            // Found startChar at input[offset]. Now check if the rest of the sequence matches.
+            int i = offset + 1; // index in input array (starts from 2nd char of potential match)
+            int j = 1;          // index in seq (starts from 2nd char)
+            int endMatch = offset + seqLen; // The index *after* the last char of seq if matched in input
+
+            // Check if the potential match would go beyond the input buffer length.
+            // Need input indices up to endMatch - 1. So, endMatch - 1 < length, which means endMatch <= length.
+            if (endMatch > length) {
+                // Not enough characters left in input for a full match starting at 'offset'.
+                // Since we scan sequentially, no match is possible from here on.
                 return -1;
             }
+
+            // Compare the remaining characters of the sequence with the input buffer.
+            // We already checked that indices up to endMatch - 1 are valid (endMatch <= length).
+            while (i < endMatch && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
+
+            // If i reached endMatch, it means all characters matched (j reached seqLen)
+            if (i == endMatch) {
+                return offset - pos; // Return the offset from the original position 'pos'
+            }
+            // Otherwise, there was a mismatch. The outer loop will continue search from the next offset.
+        }
+
+        return -1; // Scanned through all possible starting positions, no match found.
+    }
\ No newline at end of file
