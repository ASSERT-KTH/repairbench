diff --git a/tmp/d24558dd-7dae-416c-ac61-9cc71b6a351f_buggy.java b/tmp/dea51924-5be0-410f-8e97-81e65d9ac89e_fixed.java
index 21f64c6..12a0f9a 100644
--- a/tmp/d24558dd-7dae-416c-ac61-9cc71b6a351f_buggy.java
+++ b/tmp/dea51924-5be0-410f-8e97-81e65d9ac89e_fixed.java
@@ -1,23 +1,60 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
+        // Validate args
+        if (seq.length() == 0)
+            return -1; // Or specify different behavior for empty seq
+
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+        int seqLen = seq.length();
+
+        // The search needs to start scanning at `pos`, and must find the sequence entirely within the bounds `[pos, length)`.
+        // The last possible starting position for the sequence `seq` is `length - seqLen`.
+        // So, we search for `startChar` in the range `[pos, length - seqLen]`.
+        int searchLimit = length - seqLen;
+
+        for (int offset = pos; offset <= searchLimit; offset++) {
+            // Step 1: Scan for the first character of the sequence.
+            if (input[offset] != startChar) {
+                // Optimization: fast skip until the next potential start character.
+                while (++offset <= searchLimit && input[offset] != startChar);
+                // If the inner loop went past the limit, it means startChar wasn't found
+                // in the remaining valid range. We can stop searching.
+                if (offset > searchLimit) {
+                    break; // Exit the outer loop
                 }
             }
+
+            // Step 2: Found a potential start character at `offset`. Check if the rest matches.
+            // We already know that `offset + seqLen <= length` because `offset <= searchLimit`.
+            int i = offset + 1; // Index into input array, starting after startChar
+            int j = 1;          // Index into seq, starting from the second char
+
+            // Compare the remaining characters of the sequence
+            while (j < seqLen) {
+                // Check bounds implicitly handled by loop condition `j < seqLen` combined with
+                // the outer loop's `offset <= searchLimit` which ensures `i = offset + j < length`.
+                if (input[i] != seq.charAt(j)) {
+                    break; // Mismatch found, break the inner while loop
+                }
+                i++;
+                j++;
+            }
+
+            // Step 3: Check if the entire sequence matched.
+            if (j == seqLen) {
+                // All characters matched.
+                return offset - pos; // Return the relative offset from the initial position.
+            }
+            // If j < seqLen, it means there was a mismatch. The outer loop will continue
+            // to find the next potential start character.
+        }
+
+        // Sequence not found in the specified range.
         return -1;
     }
\ No newline at end of file
