diff --git a/tmp/6e534504-4482-48e4-9d74-f40cc93b6ae6_buggy.java b/tmp/a6848ff5-0492-4d2e-8ff3-eade307cdfd4_fixed.java
index 21f64c6..ab4956f 100644
--- a/tmp/6e534504-4482-48e4-9d74-f40cc93b6ae6_buggy.java
+++ b/tmp/a6848ff5-0492-4d2e-8ff3-eade307cdfd4_fixed.java
@@ -1,23 +1,56 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+        int seqLen = seq.length();
+
+        // The maximum start offset for a match is length - seqLen.
+        // We search from the current position 'pos'.
+        int maxOffset = length - seqLen;
+
+        for (int offset = pos; offset <= maxOffset; offset++) {
+            // Scan for the first character match.
+            // This check is safe because offset <= maxOffset = length - seqLen <= length - 1 (assuming seqLen >= 1).
+            // If seqLen == 0, seq.charAt(0) would throw an exception earlier.
+            if (input[offset] != startChar) {
+                // Optimization: Use an inner loop to find the next startChar efficiently.
+                // This avoids redundant checks in the outer loop for non-matching start chars.
+                while (++offset <= maxOffset && input[offset] != startChar);
+                // If the inner loop finished, check if we are still within bounds.
+                if (offset > maxOffset) {
+                    break; // No possible match left.
                 }
             }
+
+            // Found a potential start character match at 'offset'.
+            // Now check if the rest of the sequence matches.
+            boolean match = true;
+            for (int j = 1; j < seqLen; j++) {
+                // Check the character at input[offset + j].
+                // The index offset + j is safe:
+                // Max value of j is seqLen - 1.
+                // Max index accessed is offset + seqLen - 1.
+                // Since offset <= maxOffset = length - seqLen,
+                // max index <= (length - seqLen) + seqLen - 1 = length - 1.
+                // So, the index is always < length.
+                if (seq.charAt(j) != input[offset + j]) {
+                    match = false;
+                    break; // Mismatch found, break the inner comparison loop.
+                }
+            }
+
+            if (match) {
+                // Full sequence matched.
+                return offset - pos; // Return the offset relative to the initial position.
+            }
+            // If no match (match == false), the outer loop continues to the next offset.
+        }
+
+        // If the loop completes without finding the sequence.
         return -1;
     }
\ No newline at end of file
