diff --git a/tmp/62802f79-4f53-4ee9-96c7-6ef23ed15abf_buggy.java b/tmp/332081ce-ba06-4bfe-b10f-41362eb422a5_fixed.java
index 21f64c6..50520a8 100644
--- a/tmp/62802f79-4f53-4ee9-96c7-6ef23ed15abf_buggy.java
+++ b/tmp/332081ce-ba06-4bfe-b10f-41362eb422a5_fixed.java
@@ -1,23 +1,57 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length(); // Cache sequence length
+
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
+                // Find the next occurrence of startChar
                 while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+                // Check if the loop terminated because we went out of bounds
+                if (offset >= length)
+                    break; // Reached end of input without finding startChar, so sequence not found
             }
+
+            // Now we have a potential match starting at 'offset' (input[offset] == startChar)
+            // Check if the rest of the sequence can fit in the remaining buffer
+            // We need seqLen characters starting from offset. Last index is offset + seqLen - 1.
+            // This must be less than length: offset + seqLen - 1 < length  OR  offset + seqLen <= length.
+            if (offset + seqLen <= length) {
+                // Compare the sequence characters from the second one (index 1)
+                int i = offset + 1; // index in input buffer, starting after startChar
+                int j = 1;          // index in seq, starting from the second char
+                // last is the end boundary (exclusive) for the match in input buffer
+                // i needs to go up to offset + seqLen - 1 (inclusive)
+                // So the loop condition should be i < offset + seqLen
+                int last = offset + seqLen;
+
+                while (i < last) { // While we haven't reached the end of the potential match area
+                    // Check if the characters match
+                    if (seq.charAt(j) != input[i]) {
+                        break; // Mismatch found, break the inner while loop
                     }
-        return -1;
+                    // Move to the next characters
+                    i++;
+                    j++;
+                }
+
+                // If we finished comparing and reached the end (i == last), it means all characters matched.
+                if (i == last) { // found full sequence
+                    return offset - pos; // Return the relative offset from the initial position
+                }
+                // Otherwise, a mismatch occurred. The outer loop will continue searching from the next offset.
+            } else {
+                 // The sequence is too long to fit starting at this 'offset'.
+                 // Since we are scanning sequentially, it won't fit anywhere further either.
+                 break; // Exit the outer loop, sequence cannot be found.
+            }
+        }
+        return -1; // Sequence not found after checking the entire relevant part of the input
     }
\ No newline at end of file
