diff --git a/tmp/a0d4c91d-e516-4387-88ed-3acc5d0e36eb_buggy.java b/tmp/7262c4ff-6f77-4cd2-bc1f-cf71917773b8_fixed.java
index 21f64c6..8c5206a 100644
--- a/tmp/a0d4c91d-e516-4387-88ed-3acc5d0e36eb_buggy.java
+++ b/tmp/7262c4ff-6f77-4cd2-bc1f-cf71917773b8_fixed.java
@@ -1,23 +1,52 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
+        if (seq.length() == 0) // Handle empty sequence case
+             return 0; // Or arguably -1, but matching standard indexOf behavior seems reasonable if needed. Let's stick to original logic's implicit assumption of non-empty seq.
+
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
+
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
+                // advance offset until matching startChar or reaching end
                 while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+                // if we advanced past the end, the sequence cannot be found
+                if (offset >= length)
+                    break; // Exit outer loop
             }
+            
+            // found startChar at input[offset]. Now check if the full sequence matches from here.
+            
+            // check if the rest of the sequence can fit within the bounds of the input array
+            if (offset + seqLen <= length) {
+                int i = offset + 1; // input index starts after startChar
+                int j = 1;          // sequence index starts after startChar
+                int endMatch = offset + seqLen; // position right after the potential sequence match ends
+
+                // compare the rest of the sequence characters
+                while (i < endMatch && seq.charAt(j) == input[i]) {
+                    i++;
+                    j++;
                 }
-        return -1;
+
+                // if i reached the end position, it means the entire sequence matched
+                if (i == endMatch) { // found full sequence
+                    return offset - pos; // return the relative offset from the initial position
+                }
+                // otherwise, sequence did not match fully, continue scanning from next offset in outer loop
+            } else {
+                // If startChar is found but the remaining input is too short to hold the full sequence,
+                // we know the sequence cannot be found later either, as offset only increases.
+                break; // Exit outer loop
+            }
+        }
+        
+        return -1; // sequence not found
     }
\ No newline at end of file
