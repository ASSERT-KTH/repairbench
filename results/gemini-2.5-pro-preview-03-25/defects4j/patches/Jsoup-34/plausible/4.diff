diff --git a/tmp/f5291c65-08d2-437e-b9c2-d97f28099026_buggy.java b/tmp/6ac8e715-cf62-4e60-a16a-6593eea75ed6_fixed.java
index 21f64c6..2a2f76e 100644
--- a/tmp/f5291c65-08d2-437e-b9c2-d97f28099026_buggy.java
+++ b/tmp/6ac8e715-cf62-4e60-a16a-6593eea75ed6_fixed.java
@@ -1,23 +1,47 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
+        // seq must not be empty
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+        int seqLen = seq.length();
+
+        // The loop must terminate earliest enough to allow seqLen characters after offset
+        // The last possible starting position for the sequence is length - seqLen
+        for (int offset = pos; offset <= length - seqLen; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+            if (input[offset] != startChar) {
+                // find the next instance of startChar - avoids redundant checks if the char is common
+                while (++offset <= length - seqLen && input[offset] != startChar);
+                // if we moved past the end, there is no match
+                if (offset > length - seqLen) {
+                    break; // Reached end without finding startChar with enough room for the rest of seq
                 }
             }
-        return -1;
+
+            // Found startChar at offset, now check the rest of the sequence
+            int i = offset + 1; // index in input array to check next char
+            int j = 1; // index in seq to check next char
+            while (j < seqLen) {
+                // Check if the character matches
+                if (seq.charAt(j) != input[i]) {
+                    break; // Mismatch found, break the inner loop
+                }
+                // Move to the next characters
+                i++;
+                j++;
+            }
+
+            // If j reached the end of seq, all characters matched
+            if (j == seqLen) {
+                // Found the full sequence
+                return offset - pos; // Return the relative offset from the initial position
+            }
+            // If mismatch (j < seqLen), the outer loop continues to find the next potential startChar
+        }
+        return -1; // Sequence not found
     }
\ No newline at end of file
