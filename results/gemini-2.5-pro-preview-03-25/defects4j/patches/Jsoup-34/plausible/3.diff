diff --git a/tmp/e7725b81-8fd5-40be-8e78-997438610fd2_buggy.java b/tmp/ac48e284-f913-41e4-bc6c-0db7223ccbbc_fixed.java
index 21f64c6..af682aa 100644
--- a/tmp/e7725b81-8fd5-40be-8e78-997438610fd2_buggy.java
+++ b/tmp/ac48e284-f913-41e4-bc6c-0db7223ccbbc_fixed.java
@@ -1,23 +1,41 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length(); // Cache sequence length
+
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
+                // This loop advances offset. If it reaches length, the outer loop condition will handle termination.
                 while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
             }
+
+            // Check if offset is still within bounds (possible the while loop reached the end)
+            // and if the full sequence can fit from this offset
+            if (offset < length && offset + seqLen <= length) {
+                int i = offset + 1; // input index, starting after the matched startChar
+                int j = 1;          // seq index, starting from the second char
+                // Compare the rest of the sequence
+                // Condition `j < seqLen` ensures we don't read past seq bounds.
+                // Condition `offset + seqLen <= length` ensures `i` (which is offset + j) doesn't read past input bounds.
+                while (j < seqLen && seq.charAt(j) == input[i]) {
+                    i++;
+                    j++;
                 }
-        return -1;
+                // If we matched all characters (j reached the end of seq)
+                if (j == seqLen) {
+                    return offset - pos; // Return the relative offset from the original position
+                }
+                // Otherwise, mismatch found, continue the outer loop (offset will be incremented)
+            }
+            // else: sequence doesn't fit starting here, or offset is already >= length.
+            // In either case, continue (or exit) the outer loop.
+        }
+        return -1; // Not found
     }
\ No newline at end of file
