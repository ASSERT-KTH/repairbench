diff --git a/tmp/66236c2a-3200-446e-9f8c-af25ddf96cec_buggy.java b/tmp/4abb51a4-3892-49f2-987a-2fe4852de9e3_fixed.java
index 21f64c6..9f7bc4c 100644
--- a/tmp/66236c2a-3200-446e-9f8c-af25ddf96cec_buggy.java
+++ b/tmp/4abb51a4-3892-49f2-987a-2fe4852de9e3_fixed.java
@@ -1,23 +1,46 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
+
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+            if (input[offset] != startChar) {
+                // Use a simple loop instead of the nested while condition for clarity
+                while (++offset < length && input[offset] != startChar);
+                // Check if we ran off the end after scanning for the start char
+                if (offset >= length)
+                    break; // Sequence start char not found before end of input, so seq cannot be found
             }
+
+            // Found startChar at index 'offset'. Now match the rest of the sequence.
+            // Check if there's enough room left in input for the entire sequence.
+            if (offset + seqLen <= length) {
+                int i = offset + 1; // index into input array, starting after startChar
+                int j = 1;          // index into seq, starting after startChar
+                // Compare the rest of the sequence
+                // The check i < length is implicitly handled by the offset + seqLen <= length check before this loop
+                while (j < seqLen && input[i] == seq.charAt(j)) {
+                    i++;
+                    j++;
                 }
-        return -1;
+                // If we matched the entire sequence (j successfully incremented past the end of seq)
+                if (j == seqLen) {
+                    return offset - pos; // Return the offset relative to the initial position 'pos'
+                }
+                // If not a full match, the outer loop continues from offset+1 in the next iteration
+            } else {
+                // Not enough characters remaining in input to match the sequence starting at 'offset'.
+                // Since we scan sequentially, no further match is possible.
+                break;
+            }
+        }
+
+        return -1; // Sequence not found
     }
\ No newline at end of file
