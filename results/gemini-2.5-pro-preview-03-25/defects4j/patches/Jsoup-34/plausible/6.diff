diff --git a/tmp/24c3279f-c889-4c3d-b73e-7a0f6500259e_buggy.java b/tmp/5c367374-fe00-4244-81df-33f0b4fe26fa_fixed.java
index 21f64c6..cb90953 100644
--- a/tmp/24c3279f-c889-4c3d-b73e-7a0f6500259e_buggy.java
+++ b/tmp/5c367374-fe00-4244-81df-33f0b4fe26fa_fixed.java
@@ -1,23 +1,44 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length(); // Cache sequence length
+
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                // Check if we ran off the end scanning for startChar
+                if (offset >= length)
+                    break; // Reached end of input buffer without finding start char
+            }
+
+            // Found a potential startChar at 'offset'.
+            // Check if the subsequent characters required for the sequence match exist within bounds.
+            if (offset + seqLen <= length) {
+                int i = offset + 1; // input index starts after startChar
+                int last = i + seqLen - 1; // `last` is the index *after* the sequence match would end in input
+                int j = 1; // sequence index starts at second char
+
+                // Compare the rest of the sequence characters
+                // Check input bounds implicitly via `i < last` which depends on `offset + seqLen <= length` check
+                for (; i < last && seq.charAt(j) == input[i]; i++, j++);
+
+                // If `i` reached `last`, it means all characters matched
+                if (i == last) { // found full sequence
                     return offset - pos;
                 }
+                // else: mismatch found, continue outer loop to find next potential startChar
+            } else {
+                // The sequence cannot fit starting at this offset. Because we scan sequentially,
+                // it won't fit starting at any later point either.
+                break; // Optimization: exit loop early
             }
-        return -1;
+        }
+        return -1; // Not found
     }
\ No newline at end of file
