diff --git a/tmp/c3ff547d-b685-4b49-a9cd-dc7ea9579345_buggy.java b/tmp/ae2892bb-b529-4691-abf9-eef2c3311a60_fixed.java
index 4c1ed27..09d9d89 100644
--- a/tmp/c3ff547d-b685-4b49-a9cd-dc7ea9579345_buggy.java
+++ b/tmp/ae2892bb-b529-4691-abf9-eef2c3311a60_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
+                // Find the code point starting at index pos
+                // Check if it's a high surrogate first, if so, ensure there's a low surrogate available
+                char c1 = input.charAt(pos);
+                 if (Character.isHighSurrogate(c1) && pos + 1 < len) {
+                     char c2 = input.charAt(pos + 1);
+                     if (Character.isLowSurrogate(c2)) {
+                         // Write the surrogate pair
+                         out.write(c1);
+                         out.write(c2);
+                         pos += 2;
+                         continue; // Continue to next position after the surrogate pair
                      }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
                  }
+                // Treat as a single character (BMP or unpaired surrogate)
+                out.write(c1);
+                pos++;
+                continue; // Continue to the next position
+            }
+            // The translator consumed 'consumed' characters.
+            // Advance the position by the number of characters consumed.
+            pos += consumed;
         }
     }
