diff --git a/tmp/900fb6c0-102c-4170-a288-d13b2a71fa16_buggy.java b/tmp/cc4e4582-035e-4e56-95c8-7c4bb34dadc7_fixed.java
index 4c1ed27..10e2b6b 100644
--- a/tmp/900fb6c0-102c-4170-a288-d13b2a71fa16_buggy.java
+++ b/tmp/cc4e4582-035e-4e56-95c8-7c4bb34dadc7_fixed.java
@@ -1,32 +1,41 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // In CsvEscaper, this usually means the character needs no escaping.
+                // We need to copy the character directly to the output.
+                // Handle potential surrogate pairs correctly.
+                int codePoint = Character.codePointAt(input, pos);
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
+                pos += c.length; // Advance by 1 or 2, depending on the code point
+                continue; // Continue to the next character position
+            }
+            // The translate method consumed 'consumed' characters starting from 'pos'.
+            // Advance our position in the input string by that amount.
+            pos += consumed;
+            // Note: The previous implementation had a bug here where it iterated 'consumed'
+            // times, calling Character.codePointAt and Character.charCount inside the loop.
+            // This was incorrect because 'consumed' already represents the number of
+            // char units processed by the specific translator. Simply advancing 'pos'
+            // by 'consumed' is the correct way to move past the characters that
+            // have already been handled. This fixes issues with surrogate pairs
+            // when 'consumed' is greater than 0.
         }
     }
