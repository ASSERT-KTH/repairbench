diff --git a/tmp/39f52329-dbb7-48ce-8707-b14f21c64dd4_buggy.java b/tmp/92cb4de1-3e81-4f43-bec4-cf29b9829ffa_fixed.java
index 4c1ed27..2d92b1e 100644
--- a/tmp/39f52329-dbb7-48ce-8707-b14f21c64dd4_buggy.java
+++ b/tmp/92cb4de1-3e81-4f43-bec4-cf29b9829ffa_fixed.java
@@ -1,32 +1,39 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // Inlined Character.codePointAt(input, pos) to avoid creating Character seq object.
+                // Note that String.codePointAt(int) is Java 5.0.
+                int codePoint;
+                if (pos == len - 1) {
+                    codePoint = input.charAt(pos);
+                } else {
+                    codePoint = Character.codePointAt(input, pos);
+                }
+
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                pos += c.length; // Advance by the number of chars in the code point (1 or 2)
+                continue; // Continue to the next char position
             }
+            // The translator consumed 'consumed' characters.
+            // Advance the position by the number of characters consumed.
+            pos += consumed;
         }
     }
\ No newline at end of file
