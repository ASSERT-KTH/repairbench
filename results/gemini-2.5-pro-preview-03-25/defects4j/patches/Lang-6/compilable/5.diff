diff --git a/tmp/a2233ebf-e96f-4294-8500-9cd3e9ed13c6_buggy.java b/tmp/95c28b7b-00ba-4c7e-94bf-3ccde1aa939c_fixed.java
index 4c1ed27..be700cb 100644
--- a/tmp/a2233ebf-e96f-4294-8500-9cd3e9ed13c6_buggy.java
+++ b/tmp/95c28b7b-00ba-4c7e-94bf-3ccde1aa939c_fixed.java
@@ -1,32 +1,44 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // Translate method didn't consume any chars
+                // Read the code point at the current position
+                int codePoint = Character.codePointAt(input, pos);
+                // Convert the code point to its char representation (might be 1 or 2 chars)
+                char[] c = Character.toChars(codePoint);
+                // Write the char(s) to the output
                 out.write(c);
-                pos+= c.length;
-                continue;
+                // Advance the position by the number of chars used by the code point
+                pos += c.length; // or pos += Character.charCount(codePoint);
+                continue; // Continue to the next position in the input
             }
+            // The translate method consumed 'consumed' characters starting at 'pos'.
+            // Advance 'pos' by the number of characters consumed.
+            // The logic below is incorrect because 'pos' is incremented inside the loop,
+            // leading to potential StringIndexOutOfBoundsException for surrogate pairs.
 //          // contract with translators is that they have to understand codepoints
 //          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
+//            for (int pt = 0; pt < consumed; pt++) {
+//                pos += Character.charCount(Character.codePointAt(input, pos));
+//            }
+            // Correct logic: Simply advance the position by the number of chars consumed.
+            pos += consumed;
         }
     }
