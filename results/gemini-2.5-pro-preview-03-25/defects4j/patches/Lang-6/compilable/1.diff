diff --git a/tmp/3b6e3019-c8b7-4e3d-9b12-2a3786244833_buggy.java b/tmp/06c078e1-0f7c-4445-b137-e23b8a3c9236_fixed.java
index 4c1ed27..369d1ce 100644
--- a/tmp/3b6e3019-c8b7-4e3d-9b12-2a3786244833_buggy.java
+++ b/tmp/06c078e1-0f7c-4445-b137-e23b8a3c9236_fixed.java
@@ -1,32 +1,34 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
+                // Translate method did not consume any characters
+                // Read the code point starting at 'pos'
+                int codePoint = Character.codePointAt(input, pos);
+                // Write the code point as characters
+                out.write(Character.toChars(codePoint));
+                // Advance position by the number of characters required for this code point
+                pos += Character.charCount(codePoint);
+                continue; // Back to the start of the loop
+            }
+            // The translate method consumed 'consumed' characters.
+            // Advance our position marker by the number of characters consumed.
+            pos += consumed;
         }
     }
