diff --git a/tmp/33bf7c0c-cb74-42ce-84fe-c168c775750e_buggy.java b/tmp/95e55705-eb3b-4e52-9afa-7fc7acc1d105_fixed.java
index 4c1ed27..dfb75d1 100644
--- a/tmp/33bf7c0c-cb74-42ce-84fe-c168c775750e_buggy.java
+++ b/tmp/95e55705-eb3b-4e52-9afa-7fc7acc1d105_fixed.java
@@ -1,32 +1,54 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
-    public final void translate(CharSequence input, Writer out) throws IOException {
+    public final void translate(final CharSequence input, final Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = input.length();
+        final int len = input.length();
         while (pos < len) {
-            int consumed = translate(input, pos, out);
+            final int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                // Translate method returned zero, indicating it could not translate
+                // the character(s) starting at 'pos'.
+                // We need to copy the character(s) directly to the output.
+                // Use codePointAt/charCount to correctly handle potential surrogate pairs.
+                final int codepoint = Character.codePointAt(input, pos);
+                out.write(Character.toChars(codepoint));
+                pos += Character.charCount(codepoint);
+            } else {
+                // The translator consumed 'consumed' code points starting from 'pos'.
+                // We need to advance 'pos' by the number of characters ('char' units)
+                // corresponding to these 'consumed' code points.
+                // We calculate the final position without modifying 'pos' intermediately,
+                // which avoids the StringIndexOutOfBoundsException caused by the original code's
+                // logic when 'pos' landed on a high surrogate at the end of the input.
+                int currentPos = pos;
+                for (int i = 0; i < consumed; i++) {
+                    // Check if we've already reached the end of the input.
+                    // This protects against potentially invalid 'consumed' values returned
+                    // by the translator implementation.
+                    if (currentPos >= len) {
+                        break;
+                    }
+                    // Determine the number of chars for the code point at the current position.
+                    // Character.codePointAt is safe here because currentPos < len.
+                    // If input[currentPos] is a high surrogate at the end of the string (currentPos == len - 1),
+                    // codePointAt returns the code point for the surrogate itself, and charCount will be 1.
+                    final int codepoint = Character.codePointAt(input, currentPos);
+                    currentPos += Character.charCount(codepoint);
+                }
+                // Update the main position variable 'pos' to the final calculated position.
+                pos = currentPos;
             }
         }
     }
\ No newline at end of file
