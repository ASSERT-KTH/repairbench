diff --git a/tmp/4e0aa0dd-7c77-4ed3-9522-b9b62ddd1475_buggy.java b/tmp/a95dc85e-37ec-46e8-9d6c-1557115c200f_fixed.java
index 4c1ed27..ec201ea 100644
--- a/tmp/4e0aa0dd-7c77-4ed3-9522-b9b62ddd1475_buggy.java
+++ b/tmp/a95dc85e-37ec-46e8-9d6c-1557115c200f_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // Translate method returned zero, meaning no matching character was found, so handle
+                // unrecognized characters processing supplementary characters correctly
+                int codePoint = Character.codePointAt(input, pos);
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+                pos += c.length; // Advance by the number of chars written
+            } else {
+                // The translator consumed input characters. Advance position accordingly.
+                // 'consumed' is the number of code points consumed.
                 for (int pt = 0; pt < consumed; pt++) {
+                    // Check if we've already advanced past the end of the input string.
+                    // This can happen if the translator returns a 'consumed' count greater than
+                    // the number of code points remaining in the input.
+                    if (pos >= len) {
+                        // Avoid StringIndexOutOfBoundsException from Character.codePointAt(input, pos)
+                        break;
+                    }
+                    // Advance position by the number of chars corresponding to the code point.
                     pos += Character.charCount(Character.codePointAt(input, pos));
                 }
             }
         }
+    }
\ No newline at end of file
