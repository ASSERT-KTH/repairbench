diff --git a/tmp/96a353b4-8b1d-4e23-88d4-8d47d5aa7eb1_buggy.java b/tmp/0228c712-3886-4b80-8594-5ab3ad45afa3_fixed.java
index 4c1ed27..efe6f04 100644
--- a/tmp/96a353b4-8b1d-4e23-88d4-8d47d5aa7eb1_buggy.java
+++ b/tmp/0228c712-3886-4b80-8594-5ab3ad45afa3_fixed.java
@@ -1,32 +1,44 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
-            int consumed = translate(input, pos, out);
+            int consumed = translate(input, pos, out); // Returns number of code points consumed
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // Translate method did not consume any characters
+                // Need to copy the code point at pos to the output
+                int codePoint = Character.codePointAt(input, pos);
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
-                pos+= c.length;
-                continue;
+                pos += c.length; // Advance position by the number of chars in the code point
+            } else {
+                // Translate method consumed 'consumed' code points starting at 'pos'.
+                // Advance 'pos' past these code points by calculating the total number of chars they occupy.
+                int charsAdvanced = 0;
+                int codePointsFound = 0;
+                int currentPos = pos;
+                // Calculate the total number of chars to advance
+                while (currentPos < len && codePointsFound < consumed) {
+                    int charCount = Character.charCount(Character.codePointAt(input, currentPos));
+                    charsAdvanced += charCount;
+                    currentPos += charCount; // Advance check position
+                    codePointsFound++;
                 }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                // Update the main position variable
+                pos += charsAdvanced;
             }
         }
     }
\ No newline at end of file
