diff --git a/tmp/29237f12-36b5-4d4e-a5d8-ffcb96e47b49_buggy.java b/tmp/32182cd4-f83f-4ba6-b5a6-7ada1fdf5acf_fixed.java
index 4f21a3a..c478932 100644
--- a/tmp/29237f12-36b5-4d4e-a5d8-ffcb96e47b49_buggy.java
+++ b/tmp/32182cd4-f83f-4ba6-b5a6-7ada1fdf5acf_fixed.java
@@ -1,14 +1,36 @@
     /**
      * Helper method used by standard deserializer.
      * 
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
-            copyCurrentStructure(jp);
+        JsonToken t = jp.currentToken();
+
         /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
          *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
          *    to assume one did exist.
          */
+        if (t == JsonToken.FIELD_NAME) {
+            // First: can't move, must copy current FIELD_NAME and value
+            writeStartObject(); // "virtual" start marker
+            do {
+                copyCurrentStructure(jp);
+            } while ((t = jp.nextToken()) == JsonToken.FIELD_NAME);
+
+            // Loop ended, should find END_OBJECT?
+            if (t != JsonToken.END_OBJECT) {
+                 // [databind#881] Verify we have the expected END_OBJECT
+                 // 11-Jun-2015, tatu: Should perhaps report proper error dependency... for now, fine?
+                 ctxt.reportWrongTokenException(TokenBuffer.class, JsonToken.END_OBJECT,
+                         "Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got "+t);
+                 // but should not proceed further, so either throw or:
+                 // return this; // (probably need to add error marker of some sort)
+            }
+             // important: need matching end marker
+             writeEndObject();
+        } else { // START_OBJECT, START_ARRAY, scalar
+            copyCurrentStructure(jp);
+        }
         return this;
     }
\ No newline at end of file
