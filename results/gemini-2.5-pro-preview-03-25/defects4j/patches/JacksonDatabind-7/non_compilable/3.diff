diff --git a/tmp/fb8ec4b7-fff4-4e15-90dc-84f192427ca6_buggy.java b/tmp/392c544d-e331-48f0-9df8-73e025a5157b_fixed.java
index 4f21a3a..c92db9c 100644
--- a/tmp/fb8ec4b7-fff4-4e15-90dc-84f192427ca6_buggy.java
+++ b/tmp/392c544d-e331-48f0-9df8-73e025a5157b_fixed.java
@@ -1,14 +1,27 @@
     /**
      * Helper method used by standard deserializer.
      * 
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
+        // 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
+        //    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
+        //    to assume one did exist.
+        // 17-Aug-2017, tatu: ... also potentially START_ARRAY? (Not sure if needed)
+
+        JsonToken t = jp.currentToken();
+        // If we are starting implicitly (current token is FIELD_NAME),
+        // need to manually add START_OBJECT.
+        if (t == JsonToken.FIELD_NAME) {
+            // First, write the implied START_OBJECT:
+            writeStartObject();
+            // Then copy the actual token, which is FIELD_NAME, and rest of contents
             copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
+        } else {
+            // NOTE: jp may point to START_OBJECT / START_ARRAY, or a scalar value.
+            // We must copy whatever is the current token and contained structure.
+            copyCurrentStructure(jp);
+        }
         return this;
     }
\ No newline at end of file
