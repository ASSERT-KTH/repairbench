diff --git a/tmp/4b5efc80-0b83-4f3d-b7f6-7f834397f2f7_buggy.java b/tmp/f56a9165-e64c-4e4a-a72a-6463ef55437d_fixed.java
index 4f21a3a..5a705ce 100644
--- a/tmp/4b5efc80-0b83-4f3d-b7f6-7f834397f2f7_buggy.java
+++ b/tmp/f56a9165-e64c-4e4a-a72a-6463ef55437d_fixed.java
@@ -1,14 +1,48 @@
     /**
      * Helper method used by standard deserializer.
      * 
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
-            copyCurrentStructure(jp);
+        // Need to check the initial token
+        JsonToken t = jp.currentToken();
+        // sanity check; shouldn't occur but better safe than sorry
+        if (t == null) {
+            t = jp.nextToken();
+            if (t == null) { // empty input?
+                return this;
+            }
+        }
+
         /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
          *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
          *    to assume one did exist.
          */
+        if (t == JsonToken.FIELD_NAME) {
+            // If starting with field name, write synthesized START_OBJECT
+            writeStartObject();
+            // Need to copy current structure (field name + value)
+            // and then loop for any more fields
+            do {
+                // NOTE: copyCurrentStructure auto-advances past current FIELD_NAME or START_OBJECT/ARRAY
+                //       so we don't need explicit call to jp.nextToken() here
+                 copyCurrentStructure(jp);
+                 // After copyCurrentStructure, jp points to the token AFTER the copied value.
+                 // This token should be the next FIELD_NAME or END_OBJECT.
+                 t = jp.nextToken(); // Advance to check if the next token is a FIELD_NAME
+            } while (t == JsonToken.FIELD_NAME);
+
+            // After the loop, we must find an END_OBJECT
+            if (t != JsonToken.END_OBJECT) {
+                // If not, it's an error state
+                throw ctxt.mappingException("Expected END_OBJECT after copying fields for "+getClass().getName()+", found "+t);
+            }
+            // and write the closing END_OBJECT
+            writeEndObject();
+        } else {
+            // Otherwise, just copy the current thing
+            copyCurrentStructure(jp);
+        }
         return this;
     }
\ No newline at end of file
