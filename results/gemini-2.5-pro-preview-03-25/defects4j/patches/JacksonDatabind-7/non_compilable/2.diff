diff --git a/tmp/9b1dfc00-2a91-4409-a70a-fd06c2f5953d_buggy.java b/tmp/5e3a621e-a529-45c9-b6fc-6ec1a9af5f9e_fixed.java
index 4f21a3a..51ba582 100644
--- a/tmp/9b1dfc00-2a91-4409-a70a-fd06c2f5953d_buggy.java
+++ b/tmp/5e3a621e-a529-45c9-b6fc-6ec1a9af5f9e_fixed.java
@@ -1,14 +1,39 @@
     /**
-     * Helper method used by standard deserializer.
-     * 
-     * @since 2.3
+     * Standard deserializer for {@link TokenBuffer}.
+     *<p>
+     * Note: requires optimization effort, should not be performance bottleneck
+     * for initial versions.
      */
-    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
+    @Override
+    public TokenBuffer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
-            copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
-        return this;
+        // [databind#1681] may need to use a `TokenBuffer` directly...
+        // `TokenBuffer(p, ctxt)` does NOT work)
+        final TokenBuffer tb = ctxt.bufferForInputBuffering(p);
+
+        JsonToken t = p.currentToken();
+        if (t == JsonToken.FIELD_NAME) {
+            // 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
+            // FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
+            // to assume one did exist.
+            tb.writeStartObject();
+            do {
+                // 13-Aug-2017, tatu: coping mechanism update for [databind#1681]
+                tb.copyCurrentStructure(p);
+            } while (p.nextToken() == JsonToken.FIELD_NAME);
+
+            // and should end in END_OBJECT
+            if (p.currentToken() != JsonToken.END_OBJECT) {
+                // 13-Aug-2017, tatu: as per [databind#1681] need to error out
+                // Also: note that we do NOT yet know how to merge, can't merge.
+                // 13-Aug-2018, tatu: Let's use slightly more specific fail message for #1681
+                 return (TokenBuffer) ctxt.handleUnexpectedToken(handledType(), JsonToken.END_OBJECT, p,
+                         "Expected END_OBJECT after copying contents for a TokenBuffer, starting from FIELD_NAME", null);
+            }
+            tb.writeEndObject();
+        } else {
+            // The usual case: just copy the current event/structure
+            tb.copyCurrentStructure(p);
+        }
+        return tb;
     }
\ No newline at end of file
