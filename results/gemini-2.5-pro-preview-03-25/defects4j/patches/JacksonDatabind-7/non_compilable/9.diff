diff --git a/tmp/84ca0d46-5f90-46db-b0ba-888b8631e199_buggy.java b/tmp/a3e25b4e-a34b-40ba-87b2-0fc01851b3c8_fixed.java
index 4f21a3a..dc1a736 100644
--- a/tmp/84ca0d46-5f90-46db-b0ba-888b8631e199_buggy.java
+++ b/tmp/a3e25b4e-a34b-40ba-87b2-0fc01851b3c8_fixed.java
@@ -1,14 +1,25 @@
     /**
      * Helper method used by standard deserializer.
      *
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
+        JsonToken t = jp.currentToken();
+
+        // 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
+        //    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
+        //    to assume one did exist.
+        if (t == JsonToken.FIELD_NAME) {
+            // First: must assume we had START_OBJECT
+            writeStartObject();
+            // Then copy the actual token which is FIELD_NAME
             copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
+            // and finally Gemeinden END_OBJECT
+            writeEndObject();
+        } else {
+            // The standard case: just copy the current token and potentially structure
+            copyCurrentStructure(jp);
+        }
         return this;
     }
\ No newline at end of file
