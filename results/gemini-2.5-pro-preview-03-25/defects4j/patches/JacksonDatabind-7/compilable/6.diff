diff --git a/tmp/3c04401d-720d-411f-a622-203d19f89a13_buggy.java b/tmp/215d29fc-7d78-479c-9a87-1c8766f37a80_fixed.java
index 4f21a3a..0336521 100644
--- a/tmp/3c04401d-720d-411f-a622-203d19f89a13_buggy.java
+++ b/tmp/215d29fc-7d78-479c-9a87-1c8766f37a80_fixed.java
@@ -1,14 +1,33 @@
     /**
      * Helper method used by standard deserializer.
      *
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
-            copyCurrentStructure(jp);
         /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
          *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
          *    to assume one did exist.
          */
+        // 01-Aug-2018, tatu: As per [databind#2079], structure may be deeper than just
+        //    object contents, that is, FIELD_NAME may be followed by START_OBJECT etc.
+        //    Need to use `copyCurrentStructure()`.
+
+        JsonToken t = jp.getCurrentToken(); // Check the current token
+
+        // If the parser is pointing to a FIELD_NAME, it means we are inside an object,
+        // but the START_OBJECT was consumed before buffering started (e.g., by a delegating creator).
+        // We need to manually add the START_OBJECT to the buffer first.
+        if (t == JsonToken.FIELD_NAME) {
+            // First write the START_OBJECT token that was implicitly skipped
+            writeStartObject();
+            // Then, copy the rest of the structure, which will include the FIELD_NAME,
+            // its value, any subsequent field/value pairs, and the closing END_OBJECT.
+            copyCurrentStructure(jp);
+        } else {
+            // Otherwise (if starting with START_OBJECT, START_ARRAY, a scalar value, or null),
+            // just copy the structure directly.
+            copyCurrentStructure(jp);
+        }
         return this;
     }
\ No newline at end of file
