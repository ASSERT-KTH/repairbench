diff --git a/tmp/bdfc49ff-d9e0-45f9-a54a-597bef0ddd81_buggy.java b/tmp/a4c9c2c5-3db4-4b9b-864b-eeab4942f8c0_fixed.java
index 7e43c1c..c95fe21 100644
--- a/tmp/bdfc49ff-d9e0-45f9-a54a-597bef0ddd81_buggy.java
+++ b/tmp/a4c9c2c5-3db4-4b9b-864b-eeab4942f8c0_fixed.java
@@ -1,19 +1,85 @@
   /**
    * Visits a NEW node.
+   *
+   * This performs the following checks:
+   * 1) Verifies that the constructor is actually a constructor function.
+   * 2) Verifies that the number of arguments matches the declared parameters.
+   * 3) Assigns the type of the node.
+   * 4) Visits the parameters, if they exist.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
+    // Use the restricted type, which is relevant for type checking.
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+
+    FunctionType functionTypeToUse = null; // The function type used for parameter checking.
+    JSType resultInstanceType = null; // The instance type assigned to the 'new' expression.
+    boolean isPotentiallyConstructor = false;
+
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
-        visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
+      isPotentiallyConstructor = true;
+      functionTypeToUse = type.toMaybeFunctionType(); // May be null for empty/unknown.
+      if (functionTypeToUse != null) {
+        // If it's a known constructor, use its instance type.
+        resultInstanceType = functionTypeToUse.getInstanceType();
+      }
+      // If functionTypeToUse is null (because type was empty/unknown),
+      // resultInstanceType remains null, handled later.
+    } else if (type.isUnionType()) {
+      // If the constructor type is a union, it might contain constructors.
+      // We need to check the alternatives and compute a union of instance types.
+      JSTypeRegistry registry = t.getCompiler().getTypeRegistry();
+      // Start with the bottom type for the union calculation.
+      JSType instanceUnion = registry.getNativeType(JSTypeNative.NO_TYPE);
+
+      for (JSType alt : type.toMaybeUnionType().getAlternates()) {
+        JSType restrictedAlt = alt.restrictByNotNullOrUndefined();
+        if (restrictedAlt.isConstructor() || restrictedAlt.isEmptyType() || restrictedAlt.isUnknownType()) {
+          isPotentiallyConstructor = true; // Mark that this union is potentially constructable.
+          FunctionType altFnType = restrictedAlt.toMaybeFunctionType();
+          if (altFnType != null) {
+            // Pick the first valid FunctionType found for parameter checking.
+            // This isn't perfect, but better than crashing or no check.
+            if (functionTypeToUse == null) {
+              functionTypeToUse = altFnType;
+            }
+            // Add the instance type to the union of possible result types.
+            instanceUnion = registry.createUnionType(instanceUnion, altFnType.getInstanceType());
           } else {
+            // If the alternative is empty or unknown, the result can be unknown.
+            instanceUnion = registry.createUnionType(instanceUnion, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+          }
+        }
+      }
+      if (isPotentiallyConstructor) {
+        // Finalize the instance type by removing the initial NO_TYPE if others were added.
+        resultInstanceType = instanceUnion.restrictByNotNullOrUndefined();
+        // If the union only contained non-constructors or resulted in NO_TYPE, handle below.
+      }
+    }
+
+    // Proceed if the type (or at least one union alternate) was potentially a constructor.
+    if (isPotentiallyConstructor) {
+      // Check parameters using the determined function type, if one was found.
+      if (functionTypeToUse != null) {
+        visitParameterList(t, n, functionTypeToUse);
+      } else {
+        // If no specific function type is available (e.g., union of unknown/empty),
+        // we cannot accurately check parameters.
+        // TODO(b/11644246): Check parameters against the union of function types?
+      }
+
+      // Set the type of the 'new' expression node.
+      // Use the calculated instance type, or default to UNKNOWN if none could be determined.
+      if (resultInstanceType != null && !resultInstanceType.isNoType()) {
+        ensureTyped(t, n, resultInstanceType);
+      } else {
+        // Default to unknown if type was empty/unknown or the union resulted in NoType.
         ensureTyped(t, n);
       }
     } else {
+      // The type is neither a constructor nor a union containing constructors/empty/unknown.
       report(t, n, NOT_A_CONSTRUCTOR);
-      ensureTyped(t, n);
+      ensureTyped(t, n); // Assign unknown type after reporting error.
     }
   }
\ No newline at end of file
