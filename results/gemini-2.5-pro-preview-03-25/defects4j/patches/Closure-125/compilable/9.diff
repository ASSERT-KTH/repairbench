diff --git a/tmp/304da915-de48-41b8-a66a-2753fe320377_buggy.java b/tmp/12062eb2-e2bd-4350-931e-f314cd080c3b_fixed.java
index 7e43c1c..cdea8c4 100644
--- a/tmp/304da915-de48-41b8-a66a-2753fe320377_buggy.java
+++ b/tmp/12062eb2-e2bd-4350-931e-f314cd080c3b_fixed.java
@@ -1,19 +1,27 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
+    // Get the type of the constructor expression.
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+    // Attempt to resolve it to a FunctionType to check parameters.
     FunctionType fnType = type.toMaybeFunctionType();
+
+    // If we could resolve the type to any function type, check the parameters
+    // against that function type's signature.
+    // Let ensureTyped/checkNew handle the check of whether it's *actually*
+    // constructible and report errors if necessary.
     if (fnType != null) {
         visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
-      } else {
-        ensureTyped(t, n);
     }
-    } else {
-      report(t, n, NOT_A_CONSTRUCTOR);
+    // Otherwise (e.g., type is unknown, empty, not a function, or a complex
+    // union where toMaybeFunctionType returns null), we can't check parameters
+    // with a specific signature here.
+
+    // Let ensureTyped handle the actual type assignment. It calls checkNew,
+    // which performs the detailed analysis of whether the type is constructible
+    // (handling constructors, interfaces, unions, unknowns, etc.) and reports
+    // appropriate errors like NOT_A_CONSTRUCTOR if the check fails.
     ensureTyped(t, n);
   }
\ No newline at end of file
-  }
