diff --git a/tmp/855133dc-18d0-404a-ac4c-bcc6d43ebe99_buggy.java b/tmp/402b04e0-aeca-4175-b3c2-73314c833ac8_fixed.java
index 7e43c1c..2792522 100644
--- a/tmp/855133dc-18d0-404a-ac4c-bcc6d43ebe99_buggy.java
+++ b/tmp/402b04e0-aeca-4175-b3c2-73314c833ac8_fixed.java
@@ -1,19 +1,40 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
+    // Get the type of the constructor identifier.
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+
+    // Check if the type could potentially be a constructor.
+    // This includes actual constructors, or unknown/empty types which might resolve later.
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+      // Attempt to resolve it to a FunctionType.
       FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+
+      // Check if we successfully resolved it to a FunctionType AND
+      // that function type is specifically marked as a constructor (not an interface).
+      // This guards against cases like union types (where fnType is null)
+      // or interfaces (where fnType is not null but isConstructor() is false).
+      // It also potentially guards against malformed types resulting from type inference
+      // issues (like in Issue 1002) where isConstructor() might be unreliable.
+      if (fnType != null && fnType.isConstructor()) {
+        // It's a valid constructor call. Check parameters and set the node's type.
         visitParameterList(t, n, fnType);
         ensureTyped(t, n, fnType.getInstanceType());
       } else {
+        // The type looked like it could be a constructor initially, but either:
+        // 1. It resolved to null (e.g., UnionType, EmptyType).
+        // 2. It resolved to a FunctionType that is not a constructor (e.g., an Interface).
+        // Report an error because 'new' requires a constructor.
+        report(t, n, NOT_A_CONSTRUCTOR);
+        // Ensure the 'new' expression itself gets a type, typically Unknown.
         ensureTyped(t, n);
       }
     } else {
+      // The initial type check failed: the type is definitely not a constructor
+      // (e.g., it's a number, string, or a known non-constructor function/object).
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
