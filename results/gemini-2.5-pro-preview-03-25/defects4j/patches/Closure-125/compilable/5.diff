diff --git a/tmp/19b23fbc-e1fc-48f7-833d-8e630447c685_buggy.java b/tmp/755e62c9-51e1-47a9-bd66-58abcce2f57c_fixed.java
index 7e43c1c..5412ff2 100644
--- a/tmp/19b23fbc-e1fc-48f7-833d-8e630447c685_buggy.java
+++ b/tmp/755e62c9-51e1-47a9-bd66-58abcce2f57c_fixed.java
@@ -1,19 +1,50 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+
+    // Is the type potentially a constructor?
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
+
       if (fnType != null) {
         visitParameterList(t, n, fnType);
+
+        // Now, determine the type of the result.
+        // Check if it's *actually* a constructor (not an interface).
+        if (fnType.isConstructor() && !fnType.isInterface()) {
+          // Check if the instance type is well-defined before using it.
+          // This guards against potential IllegalStateException for complex types
+          // derived from flow analysis (like intersections) where instance type
+          // might be ambiguous or problematic to compute.
+          if (fnType.hasInstanceType()) {
              ensureTyped(t, n, fnType.getInstanceType());
           } else {
+             // Fallback if instance type is missing or ill-defined.
              ensureTyped(t, n);
           }
         } else {
+          // Report error: Tried to instantiate something that isn't a concrete constructor.
+          if (fnType.isInterface()) {
+             // Interfaces are constructors but cannot be instantiated.
+             report(t, n, CONSTRUCTOR_NOT_CALLABLE, fnType.toString());
+          } else {
+             // It was potentially a function, but not marked as a constructor.
+             report(t, n, NOT_A_CONSTRUCTOR);
+          }
+          ensureTyped(t, n);
+        }
+      } else {
+        // Type was empty or unknown, or couldn't be converted to FunctionType.
+        // Assign unknown type without reporting an error here,
+        // as the initial type check was lenient.
+        ensureTyped(t, n);
+      }
+    } else {
+      // Type is definitely not a constructor (e.g., number, string).
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
