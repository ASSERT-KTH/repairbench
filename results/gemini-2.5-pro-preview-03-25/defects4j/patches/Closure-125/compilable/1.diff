diff --git a/tmp/7b43c13f-66d6-448c-b512-1ff5e6bc8715_buggy.java b/tmp/fce57df8-d080-42c9-acc9-bfed1ffdee31_fixed.java
index 7e43c1c..a49915a 100644
--- a/tmp/7b43c13f-66d6-448c-b512-1ff5e6bc8715_buggy.java
+++ b/tmp/fce57df8-d080-42c9-acc9-bfed1ffdee31_fixed.java
@@ -1,19 +1,39 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+
+    // Check if the type is potentially a constructor or can be resolved to one.
+    // This includes interfaces, empty, and unknown types as potential valid cases or fallbacks.
+    if (type.isConstructor() || type.isInterface() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
       if (fnType != null) {
+        // Ensure that the resolved FunctionType itself is a constructor or interface.
+        // This guards against potential inconsistencies, e.g., where a UnionType
+        // reports isConstructor() as true, but toMaybeFunctionType() returns null,
+        // OR where type inference creates a FunctionType that unexpectedly isn't marked
+        // as a constructor/interface, which could cause fnType.getInstanceType() to fail.
+        // See https://github.com/google/closure-compiler/issues/1002
+        if (fnType.isConstructor() || fnType.isInterface()) {
           visitParameterList(t, n, fnType);
           ensureTyped(t, n, fnType.getInstanceType());
         } else {
+          // If the resolved function type is not a constructor/interface, treat it as invalid.
+          // This might happen with complex types or inference issues. Fallback.
+          // We report the error because the original type suggested it might be a constructor.
+          report(t, n, NOT_A_CONSTRUCTOR);
+          ensureTyped(t, n);
+        }
+      } else {
+        // If toMaybeFunctionType is null, it means the original type (e.g., Union, Unknown, Empty)
+        // could not be resolved to a single FunctionType. Fallback using unknown type.
         ensureTyped(t, n);
       }
     } else {
+      // The initial type check failed (not Constructor, Interface, Empty, or Unknown).
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
