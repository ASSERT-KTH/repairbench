diff --git a/tmp/239436a1-bc68-4d62-a5cf-7f4092d4674e_buggy.java b/tmp/9259bb78-48f1-4ea6-a17d-c2773bd861bd_fixed.java
index 7e43c1c..2f2f018 100644
--- a/tmp/239436a1-bc68-4d62-a5cf-7f4092d4674e_buggy.java
+++ b/tmp/9259bb78-48f1-4ea6-a17d-c2773bd861bd_fixed.java
@@ -1,19 +1,38 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
+    // getJSType returns the resolved type of the constructor function, which is
+    // sometimes different from the type of the constructor in the registry.
+    // It is necessary to restrict this type by non-null, because that's the contract
+    // of the NEW operator.
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
       if (fnType != null) {
         visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
+        JSType instanceType = fnType.getInstanceType();
+
+        // If flow inference leads to a situation where the inferred function type's
+        // instance type is not a simple object type (e.g., it's a UnionType or EmptyType
+        // due to conditions like `if (Ctor1 === Ctor2)`), passing such a type to
+        // ensureTyped might lead to downstream errors (like IllegalStateException).
+        // Check if the instance type is actually an ObjectType. If not, fall back
+        // to assigning the unknown type to the node to avoid potential issues.
+        ObjectType objectInstanceType = JSType.toMaybeObjectType(instanceType);
+        if (objectInstanceType != null) {
+          ensureTyped(t, n, objectInstanceType);
         } else {
+          // Fallback for non-object instance types (null, unknown, empty, union, etc.)
+          ensureTyped(t, n);
+        }
+      } else {
+        // If the type was Empty or Unknown, toMaybeFunctionType could return null.
         ensureTyped(t, n);
       }
     } else {
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
