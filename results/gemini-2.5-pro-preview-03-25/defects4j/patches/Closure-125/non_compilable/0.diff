diff --git a/tmp/99a66ccc-34b8-4b36-8d9d-a7be83c068fa_buggy.java b/tmp/5b26659e-bfd7-4776-8da2-b146a6b0f158_fixed.java
index 7e43c1c..05108f7 100644
--- a/tmp/99a66ccc-34b8-4b36-8d9d-a7be83c068fa_buggy.java
+++ b/tmp/5b26659e-bfd7-4776-8da2-b146a6b0f158_fixed.java
@@ -1,19 +1,42 @@
+import java.util.function.Supplier; // Assuming Java 8+ and Supplier interface is available/used
+
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
+  // TODO(nicksantos): This is ESTIMATED_FUNCTIONALITY. This should be function(new:X).
+  // Let the type system handle this check.
+  // If this is not a constructor, check for the NOT_A_CONSTRUCTOR error.
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
   if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+    // Check for the MISSING_ARGUMENTS or EXTRA_ARGUMENTS error.
     FunctionType fnType = type.toMaybeFunctionType();
     if (fnType != null) {
       visitParameterList(t, n, fnType);
+      // If the constructor type is templated, computing the instance type depends
+      // on the arguments. We need to give ensureTyped a function that computes
+      // the instance type after the arguments have been resolved.
+      // Note: The original fix likely used Guava's Supplier or an anonymous class
+      // if the codebase predates Java 8's functional interfaces.
+      // Assuming ensureTyped is overloaded to accept a Supplier<JSType> or similar.
+      if (fnType.isTemplated()) {
+        // Use final variable for use in lambda/anonymous class
+        final FunctionType finalizedFnType = fnType;
+        // Defer instance type resolution using a Supplier
+        ensureTyped(t, n, (Supplier<JSType>) () -> finalizedFnType.getInstanceType());
+      } else {
+        // Not templated, resolve instance type immediately
         ensureTyped(t, n, fnType.getInstanceType());
+      }
     } else {
+      // If the type is empty or unknown, the constructor is unusable,
+      // but there is no need to report a warning because we already reported
+      // a warning for the unusable constructor type.
       ensureTyped(t, n);
     }
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
