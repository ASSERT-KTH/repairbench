diff --git a/tmp/15ea5fbd-d242-4cd7-bd6b-13000bb39b8d_buggy.java b/tmp/915aa8d6-22a8-4e2b-b164-17c3db0794ae_fixed.java
index 7e43c1c..b26716a 100644
--- a/tmp/15ea5fbd-d242-4cd7-bd6b-13000bb39b8d_buggy.java
+++ b/tmp/915aa8d6-22a8-4e2b-b164-17c3db0794ae_fixed.java
@@ -1,19 +1,52 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
-    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+    // Get the type of the constructor expression.
+    JSType constructorType = getJSType(constructor).restrictByNotNullOrUndefined();
+
+    // Check if it's a function type that is a constructor or an interface.
+    FunctionType fnType = constructorType.toMaybeFunctionType();
+
+    // Interfaces are types but cannot be instantiated with 'new'.
+    // They are represented as FunctionTypes where isInterface() is true.
+    if (fnType != null && fnType.isInterface()) {
+      report(t, constructor, CANNOT_INSTANTIATE_INTERFACE, constructorType.toString());
+      // Assign an unknown type to the 'new' expression node.
+      ensureTyped(t, n);
+    } else if (fnType != null && fnType.isConstructor()) {
+      // Ideal case: The constructor type is a FunctionType marked as a constructor.
+      // Check parameters and assign the instance type to the 'new' expression.
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
     } else {
-        ensureTyped(t, n);
+      // Not an interface and not a simple constructor FunctionType.
+      // This could be:
+      // 1. A union of constructors (e.g., due to flow typing like `if (cond) { C = A; } else { C = B; } new C()`).
+      //    - constructorType.isConstructor() might be true.
+      //    - fnType would be null.
+      // 2. An empty or unknown type.
+      //    - constructorType.isEmptyOrUnknown() is true.
+      //    - fnType would be null.
+      // 3. A type that is definitely not constructible (e.g., number, string, non-constructor function).
+      //    - constructorType.isConstructor() is false.
+      //    - fnType might be null or a non-constructor function.
+
+      // Report an error only if we are certain the type is not constructible.
+      // Avoid reporting errors for unknown, empty, or union types that might contain constructors.
+      // The check `!constructorType.isConstructor()` correctly identifies types like number or string.
+      // It might also be false for unions containing constructors, which is desired (no error).
+      if (!constructorType.isConstructor() &&
+          !constructorType.isUnknownType() &&
+          !constructorType.isEmptyType()) {
+        report(t, constructor, NOT_A_CONSTRUCTOR);
       }
-    } else {
-      report(t, n, NOT_A_CONSTRUCTOR);
+
+      // In all these non-standard cases, assign a default type (likely Unknown)
+      // to the 'new' expression node. Parameter checking is generally skipped here.
+      // TODO(b/116442466): Handle unions of constructors more precisely by checking parameters
+      // against all alternatives and assigning the union of instance types.
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
