diff --git a/tmp/82770bb2-e749-43b0-8dbe-c8cb8a604df3_buggy.java b/tmp/9a53e220-0b76-40ca-830d-d5196fae89f3_fixed.java
index b91f7de..6d45e8c 100644
--- a/tmp/82770bb2-e749-43b0-8dbe-c8cb8a604df3_buggy.java
+++ b/tmp/9a53e220-0b76-40ca-830d-d5196fae89f3_fixed.java
@@ -1,69 +1,79 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle case of first byte being NUL, see comments above
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        // Trim trailing NULs and spaces. Use a temporary variable for clarity.
+        // This loop is slightly safer than the original regarding potential index bounds.
+        int realEnd = end;
+        while (start < realEnd) {
+            byte trailer = buffer[realEnd - 1];
+            if (trailer == 0 || trailer == ' ') {
+                realEnd--;
+            } else {
+                break; // Found a non-NUL, non-space character
             }
+        }
+
+        // After trimming spaces and NULs, if start >= realEnd, the buffer
+        // contained only spaces and/or NULs. The loop below won't execute, correctly returning 0.
 
-        for ( ;start < end; start++) {
+        for ( ;start < realEnd; start++) { // Iterate up to the first non-trimmed character
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
+
             // CheckStyle:MagicNumber OFF
+            // Fail if character is not an octal digit ('0' - '7')
+            // This check now correctly handles embedded NULs as errors (NUL byte value 0 is less than '0')
             if (currentByte < '0' || currentByte > '7'){
+                // NUL, space, or other non-octal chars are errors if found inside the number.
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Note: The helper method exceptionMessage(buffer, offset, length, start, currentByte)
+    // is assumed to exist elsewhere in the class. Its definition is not included here.
\ No newline at end of file
