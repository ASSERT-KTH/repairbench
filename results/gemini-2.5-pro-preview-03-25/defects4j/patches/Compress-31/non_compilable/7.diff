diff --git a/tmp/bfe6b2c3-db49-4a0a-bff9-3035b0185a1e_buggy.java b/tmp/f69b1ae8-5a70-42c9-8419-d623d20e3d5b_fixed.java
index b91f7de..20ff11f 100644
--- a/tmp/bfe6b2c3-db49-4a0a-bff9-3035b0185a1e_buggy.java
+++ b/tmp/f69b1ae8-5a70-42c9-8419-d623d20e3d5b_fixed.java
@@ -1,69 +1,94 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle cases of leading NUL bytes, returning 0 as specified.
+        // This accounts for archives created with certain tools like GNU tar >= 1.14
+        // or archives potentially corrupted with NULs.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
+        // sizes/uids/gids instead. We are flexible here.
+        // Initialize trailer this way to handle case where start == end after trimming spaces.
+        byte trailer = 0;
+        if (start < end) {
+            trailer = buffer[end - 1];
+        }
+
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
+            // Avoid reading buffer[end-1] if end becomes <= start after decrement
+            // which happens if the buffer segment consisted only of spaces/NULs
+            if (start < end) {
                  trailer = buffer[end - 1];
+            } else {
+                // If start == end, then the segment was all NULs/spaces
+                // The loop below won't run, result is 0, which is correct.
+                break;
+            }
         }
 
+        // Process digits: leading spaces and trailing NULs/spaces are ignored
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
             // CheckStyle:MagicNumber OFF
+            // Any non-octal digit (including NUL or SPACE) encountered signifies corruption
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method (assuming it exists elsewhere or is added for context)
+    // to generate meaningful exception messages
+    private static String exceptionMessage(byte[] buffer, final int offset,
+                                           final int length, int currentOffset, final byte currentByte) {
+        // Create a string representation for the error message, replacing NULs for visibility
+        String WipBuffer = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1);
+        WipBuffer = WipBuffer.replace("\0", "{NUL}");
+        return "Invalid byte " + currentByte + " at offset " + (currentOffset - offset) + " in '" + WipBuffer + "' len=" + length;
+    }
\ No newline at end of file
