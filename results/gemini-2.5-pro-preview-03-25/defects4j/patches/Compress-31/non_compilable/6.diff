diff --git a/tmp/09fe087e-1de3-4e3a-b919-e1a87cba0842_buggy.java b/tmp/bbb4b735-2189-4be5-875e-1c1252834b39_fixed.java
index b91f7de..3e281c3 100644
--- a/tmp/09fe087e-1de3-4e3a-b919-e1a87cba0842_buggy.java
+++ b/tmp/bbb4b735-2189-4be5-875e-1c1252834b39_fixed.java
@@ -1,69 +1,100 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle specific case of leading NUL for compatibility
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        // Trim all trailing NULs and spaces. Determine end of digits.
+        int digitEnd = end;
+        // Ensure we don't trim positions before the start offset
+        while (digitEnd > start) {
+            final byte currentTrailer = buffer[digitEnd - 1];
+            if (currentTrailer == 0 || currentTrailer == ' ') {
+                digitEnd--;
+            } else {
+                // Found a non-NUL, non-space. Must be part of the number.
+                break;
+            }
+        }
+
+        // Check if the sequence contains only spaces and/or NULs
+        if (digitEnd <= start) {
+            return 0L; // Treated as zero
         }
 
-        for ( ;start < end; start++) {
+        // Pase digits from start up to (but not including) digitEnd
+        for ( ;start < digitEnd; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
+
+            // Check for embedded NUL or space *within* the numeric part.
+            // This is the fix: throw an error instead of breaking silently on NUL.
+            if (currentByte == 0 || currentByte == ' ') {
+                 throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
             }
             // CheckStyle:MagicNumber OFF
+            // Ensure the byte is a valid octal digit.
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method needed for the exception message (assumed to exist)
+    private static String exceptionMessage(byte[] buffer, final int offset,
+                                           final int length, int current, final byte currentByte) {
+        // Implementation from the original TarUtils class or similar is needed here.
+        // Providing a simplified version for completeness of the fix block.
+        String s = new String(buffer, offset, length); // StandardCharsets.UTF_8 or similar recommended
+        s = s.replace("\0", "{NUL}"); // Avoid printing actual NUL character
+        String reason;
+        if (currentByte == 0 || currentByte == ' ') {
+            reason = "(found " + (currentByte == 0 ? "{NUL}" : "space") + " character)";
+        } else {
+            reason = "(found byte '" + (char) currentByte + "' = " + currentByte + ")";
+        }
+        return "Invalid byte " + reason + " at offset " + (current - offset) + " in '" + s + "' len=" + length;
+    }
\ No newline at end of file
