diff --git a/tmp/6d4a96be-4475-4c4b-8b41-39bac097bf75_buggy.java b/tmp/fa618578-b5b1-4b09-8579-f554bf17cc65_fixed.java
index b91f7de..a25d570 100644
--- a/tmp/6d4a96be-4475-4c4b-8b41-39bac097bf75_buggy.java
+++ b/tmp/fa618578-b5b1-4b09-8579-f554bf17cc65_fixed.java
@@ -1,69 +1,82 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL as specified in javadoc
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        // Ensure loop terminates before accessing invalid index
+        while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
             end--;
-            trailer = buffer[end - 1];
         }
 
+        // After trimming, if start == end, the buffer contained only spaces/NULs.
+        // The loop below will not execute and 0 will be returned, which is correct.
+
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
             // CheckStyle:MagicNumber OFF
+            // Reject non-octal digits. This will also reject NULs and spaces
+            // if they appear after skipping leading spaces and before the trailing NUL/space.
             if (currentByte < '0' || currentByte > '7'){
+                // Provide a helpful exception message detailing the problem
+                // (Assuming exceptionMessage helper method exists and works as before)
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist in the original class (like org.apache.commons.compress.archivers.tar.TarUtils)
+    // It's not part of the fix, just needed for the code to be syntactically valid if compiled standalone.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {
+        // Example implementation:
+        String W = new String(buffer, offset, length); // NOSONAR
+        return "Invalid byte " + currentByte + " at offset " + (currentOffset - offset)
+            + " in '" + W + "'";
+   }
\ No newline at end of file
