diff --git a/tmp/83a7573b-58a2-4657-a875-22013afa7fe7_buggy.java b/tmp/1b95ce39-255b-4b14-aa26-a62d6c8fb004_fixed.java
index b91f7de..558edea 100644
--- a/tmp/83a7573b-58a2-4657-a875-22013afa7fe7_buggy.java
+++ b/tmp/1b95ce39-255b-4b14-aa26-a62d6c8fb004_fixed.java
@@ -1,69 +1,95 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL bytes treating them as zeros
+        // Needed for an archive created by Solaris tar, which contains
+        // entries like "ustar\0\0\0"
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
+        // Remember that NUL is \0.
         byte trailer = buffer[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
+            // Check buffer boundaries before reading the next byte
+            if (start < end) {
                 trailer = buffer[end - 1];
             }
+        }
+
+        // If buffer is all NULs or spaces, the loop would not have been entered
+        // and start == offset. The next loop will not be entered.
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
             // CheckStyle:MagicNumber OFF
+            // Ensure the current byte is an octal digit ('0' - '7').
+            // Any other character, including NUL (which is 0) or space (' '),
+            // indicates an invalid octal string.
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist from the context, included for completeness if needed.
+    // This is just a placeholder based on the exception message usage.
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {
+        String M_OFFSET = ") offset=";
+        String M_LENGTH = " length=";
+        String M_AT = " at=";
+        String M_BYTE = " byte=";
+        // Example implementation:
+        return "Invalid byte " + currentByte + " at offset " + (currentOffset - offset)
+               + " in '" + new String(buffer, offset, length) + // Be cautious with encoding here
+               "'. Expecting octal digit or NUL/space terminator.";
+               // Or reuse the format potentially used elsewhere:
+               // return "Invalid octal digit found '" + (char) currentByte + // Potential issue if not ASCII
+               //        "'" + M_AT + (currentOffset - offset) + M_OFFSET + offset + M_LENGTH + length;
+    }
\ No newline at end of file
