diff --git a/tmp/6c098cad-0231-43ff-bacc-12d929a0c7f4_buggy.java b/tmp/966dbf4f-995a-4640-b12c-81955eff4ea4_fixed.java
index b91f7de..a5a99ef 100644
--- a/tmp/6c098cad-0231-43ff-bacc-12d929a0c7f4_buggy.java
+++ b/tmp/966dbf4f-995a-4640-b12c-81955eff4ea4_fixed.java
@@ -1,69 +1,95 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
+        // Scan backwards from end-1
         byte trailer = buffer[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
+            // Check boundary condition: if end reaches start, we are done trimming
+            // Otherwise, update trailer for the next iteration
+            if (start < end) {
                 trailer = buffer[end - 1];
             }
+        }
 
+        // No trimming occurred or we trimmed but still have characters left (start < end)
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
+
+            // Check for non-octal digit.
+            // NUL(0) and space(' ') are handled by this check implicitly,
+            // as they are < '0'. This throws an exception for embedded NULs or spaces.
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // Use a helper method to generate a useful exception message
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+
+    // Helper method assumed to exist for the exception message (not part of the fix but needed for compilation/context)
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffsetInLoop, byte currentByte) {
+        // Create a string representation of the problematic portion of the buffer
+        // Replace NUL characters with a printable representation like "{NUL}"
+        String problematicPortion;
+        try {
+            // Attempt to decode using UTF-8, replace malformed sequences
+            problematicPortion = new String(buffer, offset, length, java.nio.charset.StandardCharsets.UTF_8);
+            problematicPortion = problematicPortion.replaceAll("\u0000", "{NUL}");
+        } catch (Throwable t) { // fallback in case of decoding issues
+             problematicPortion = "[cannot display buffer content]";
+        }
+
+        return "Invalid byte " + (int) currentByte + // Show byte value
+               " at offset " + (currentOffsetInLoop - offset) + // Offset relative to start of parsed section
+               " in '" + problematicPortion + "'.";
+    }
\ No newline at end of file
