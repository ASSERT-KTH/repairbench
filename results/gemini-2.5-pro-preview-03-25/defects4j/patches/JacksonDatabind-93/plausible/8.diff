diff --git a/tmp/7a62f90b-62ca-4447-8c3d-0abd08d52b82_buggy.java b/tmp/1d7e6812-1d28-4fad-94ec-012ed70860e7_fixed.java
index 2d9cf24..7f47085 100644
--- a/tmp/7a62f90b-62ca-4447-8c3d-0abd08d52b82_buggy.java
+++ b/tmp/1d7e6812-1d28-4fad-94ec-012ed70860e7_fixed.java
@@ -1,33 +1,42 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
             if (full.startsWith(PREFIX_STRING)) {
+                // Check added to prevent NPE for interfaces, as Class.getSuperclass() returns null for interfaces
+                if (!raw.isInterface()) { // <-- FIX: prevent NPE for interface types
                     for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+                        // We will get null for super class of Object, interfaces, primitives
+                        // and void, but the loop condition should take care of Object case.
+                        // Interfaces are handled by the outer check.
+                        // Primitives/void should not be passed here.
                         String name = cls.getSimpleName();
                         // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                         if ("AbstractPointcutAdvisor".equals(name)
                                 // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                                 || "AbstractApplicationContext".equals(name)) {
                             break main_check;
                         }
                     }
+                } // <-- END FIX
             }
+            // If we get this far, type is considered acceptable
             return;
         } while (false);
 
+        // If we get here, problematic type
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
\ No newline at end of file
