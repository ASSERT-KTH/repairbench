diff --git a/tmp/797ea565-86d8-49f7-8757-efa279990dfb_buggy.java b/tmp/5c0c9e89-919c-4433-8870-9788415d3a66_fixed.java
index 2d9cf24..d9ad66b 100644
--- a/tmp/797ea565-86d8-49f7-8757-efa279990dfb_buggy.java
+++ b/tmp/5c0c9e89-919c-4433-8870-9788415d3a66_fixed.java
@@ -1,33 +1,51 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
+        // assuming type.getRawClass() does not return null based on usage patterns
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
-                break;
+                break; // Break -> throw exception
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+            // 10-Jul-2019, tatu: Make sure this check is only applied to Classes; interfaces
+            //    and primitives handled properly.
+            // NOTE: logic was moved here in 2.9.9 from BeanDeserializerBase
+
+            // 18-Mar-2019, tatu: As per [databind#2272], need separate check for primitives
+            if (raw.isPrimitive()) {
+                // By default, we are ok with primitives, let's not worry about blocking
+                // (although perhaps filtering of wrappers for security purposes (like Void)
+                // may be needed in future?
+                return;
+            }
+
             if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+                // Check superclasses using the fixed loop condition that handles interfaces and primitives
+                // Super-class check: also need to ensure we do not check Object.class OR null
+                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
+                        // Break -> throw exception
                         break main_check;
                     }
                 }
             }
+            // If checks passed, return
             return;
-        } while (false);
+        } while (false); // Never loops, just a way to use break 'main_check'
 
+        // Only reached if break was called
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
\ No newline at end of file
