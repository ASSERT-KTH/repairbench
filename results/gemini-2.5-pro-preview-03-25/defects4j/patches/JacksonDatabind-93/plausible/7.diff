diff --git a/tmp/bf6af664-889f-4e69-b793-f5bc5a04d142_buggy.java b/tmp/2129fc98-3537-4f62-8c2a-d36474fdd500_fixed.java
index 2d9cf24..ae24105 100644
--- a/tmp/bf6af664-889f-4e69-b793-f5bc5a04d142_buggy.java
+++ b/tmp/2129fc98-3537-4f62-8c2a-d36474fdd500_fixed.java
@@ -1,33 +1,51 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
+        // 28-Oct-2019, tatu: Let's catch this early; needed for other checks
+        //    too (like [databind#2511])
+        if (raw == null) {
+            // Or should we throw exception? Seems suboptimal, let caller handle
+            return;
+        }
+        
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
-            if (full.startsWith(PREFIX_STRING)) {
+            // 18-Nov-2019, tatu: And not annotation types either
+            //    (who knows, maybe problem?)
+            if (raw.isInterface() || raw.isAnnotation()) {
+                 ; // is fine by default
+            } else if (full.startsWith(PREFIX_STRING)) {
                 for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+                    // 18-Nov-2019, tatu: Let's add null-check just in case; theoretically
+                    //    could only happen for interfaces, primitives, void, Annotation, BUT...
+                    if (cls == null) {
+                        break;
+                    }
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
                 }
             }
+            // Ok, fine so far?
             return;
         } while (false);
 
+        // If we get this far, type is illegal
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
\ No newline at end of file
