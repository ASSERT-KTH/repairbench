diff --git a/tmp/5f5471de-301d-4b1b-b12e-7aa86f373d0c_buggy.java b/tmp/99f6dbab-358b-4f8c-b9bb-755de2bc36bb_fixed.java
index 2d9cf24..7130ad4 100644
--- a/tmp/5f5471de-301d-4b1b-b12e-7aa86f373d0c_buggy.java
+++ b/tmp/99f6dbab-358b-4f8c-b9bb-755de2bc36bb_fixed.java
@@ -1,33 +1,43 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+            // 27-Oct-2018, tatu: [databind#1872] Need null check for `cls` (mostly
+            //     for interfaces)
             if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
                 }
             }
+            // Check for specific JDK types? Looks like safest route is to have
+            // minimal allow-list, which appears to be String, Number, Boolean, Date/Time?
+            // 27-Oct-2018, tatu: Seems like JDK types are only problematic on default-typing,
+            //    so for now only block with that combination? Or... maybe better ensure
+            //    that problem does not occur otherwise? May need to reconsider...
+
+            /* Otherwise, type is fine */
             return;
         } while (false);
 
+        // If we get this far, type is problematic for some reason
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
\ No newline at end of file
