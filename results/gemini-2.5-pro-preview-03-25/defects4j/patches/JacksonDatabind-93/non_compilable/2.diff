diff --git a/tmp/5d6d9ea4-e88b-476e-b139-d4e96449c4df_buggy.java b/tmp/4eb1aaee-82b1-4328-be22-8152c8c4c8a5_fixed.java
index 2d9cf24..5379ed6 100644
--- a/tmp/5d6d9ea4-e88b-476e-b139-d4e96449c4df_buggy.java
+++ b/tmp/4eb1aaee-82b1-4328-be22-8152c8c4c8a5_fixed.java
@@ -1,33 +1,54 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
+        // Class.getName() is unlikely to return null, but let's be defensive
+        // Also, raw can be null for some odd types (like marker types), see [databind#2811]
+        if (raw == null) {
+             return; // Or should we throw? For now, return seems safer
+        }
+
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
             if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+                // 11-Nov-2019, tatu: Check may be too broad, causing issues like [databind#2534].
+                //    Let's add finer-grained checks... first, interface check:
+                // Check added in 2.10.1: Block all interfaces / abstract types by default
+                 if (raw.isInterface() || raw.isAbstract()) {
+                    break main_check; // default break: security risk otherwise
+                 }
+                
+                // If not interface/abstract, maybe specific problematic classes?
+                // Need to check base classes AND potentially interfaces, but base classes first
+                // 08-Oct-2019, tatu: As per [databind#2470], this check may need to be done
+                //    more generally, perhaps configurable? For now, just add one more default
+                 // Fixed loop condition for [databind#1872]: added 'cls != null' to prevent NPE when raw is an interface
+                 // (even if check above was not done)
+                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
                 }
             }
+            // Ok, fine, looks like a legit type for now
             return;
         } while (false);
 
+        // If we get this far, not acceptable
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
\ No newline at end of file
