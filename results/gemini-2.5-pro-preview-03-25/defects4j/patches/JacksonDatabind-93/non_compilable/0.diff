diff --git a/tmp/18be3576-f732-44e5-9ac0-25b02042a909_buggy.java b/tmp/90d3b1d0-e256-4281-b856-d98db1a06719_fixed.java
index 2d9cf24..68923a8 100644
--- a/tmp/18be3576-f732-44e5-9ac0-25b02042a909_buggy.java
+++ b/tmp/90d3b1d0-e256-4281-b856-d98db1a06719_fixed.java
@@ -1,33 +1,56 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
+        // 28-Mar-2019, tatu: Let's not block primitive types ever
+        if (raw.isPrimitive()) {
+             return;
+        }
+
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+            // 28-Mar-2019, tatu: Make check bit tighter for [databind#1872] (may need further work)
             if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+                // 28-Mar-2019, tatu: Added null check for [databind#1872]. Need that
+                //     for interfaces, and possibly some other odd types?
+                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
                 }
             }
+            // Check for some other well-known dangerous classes...
+            // (note: JDK types are only blocked on JDK 9+)
+            else if (full.startsWith(PREFIX_THROWABLE)) {
+                // prevent RemoteInvocation / UserInfo / ... secret gadgets
+                // which can be used for RCE via writeReplace().
+                Throwable cause = new Exception();
+                Throwable rootCause = cause;
+                // Vuokko analysis recommended max depth of 10: may need refinement?
+                for (int i = 0; (rootCause = rootCause.getCause()) != null && i <= 10; ++i) {
+                    String className = rootCause.getClass().getName();
+                    if (className.equals(full)) {
+                        break main_check;
+                    }
+                }
+            }
             return;
         } while (false);
 
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
\ No newline at end of file
