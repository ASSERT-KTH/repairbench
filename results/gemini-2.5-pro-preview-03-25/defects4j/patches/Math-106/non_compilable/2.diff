diff --git a/tmp/0b7e2276-ea56-4f94-a420-4fb1d8d6220d_buggy.java b/tmp/a231fcad-360e-4629-b158-634ba154a8a2_fixed.java
index 42c5923..b41afa7 100644
--- a/tmp/0b7e2276-ea56-4f94-a420-4fb1d8d6220d_buggy.java
+++ b/tmp/a231fcad-360e-4629-b158-634ba154a8a2_fixed.java
@@ -1,89 +1,159 @@
+import java.text.ParsePosition;
+import java.text.NumberFormat;
+import org.apache.commons.math.fraction.Fraction;
+import org.apache.commons.math.util.MathUtils;
+import org.apache.commons.math.fraction.FractionFormat; // Assuming superclass is FractionFormat or similar
+import java.text.FieldPosition; // Needed for stub implementation of helper methods
+
+// Stubs for missing dependencies to make the function compile standalone for analysis.
+// Assume these exist in the actual context.
+class ProperFractionFormatStub extends FractionFormat {
+    @Override
+    public StringBuffer format(Fraction fraction, StringBuffer toAppendTo, FieldPosition pos) { return null; } // Dummy implementation
+    @Override
+    public Fraction parse(String source, ParsePosition pos) { return super.parse(source, pos); } // Call super implementation
+
+    protected NumberFormat getWholeFormat() { return NumberFormat.getIntegerInstance(); }
+    protected void parseAndIgnoreWhitespace(String source, ParsePosition pos) {
+        int index = pos.getIndex();
+        while (index < source.length() && Character.isWhitespace(source.charAt(index))) {
+            index++;
+        }
+        pos.setIndex(index);
+    }
+    protected char parseNextCharacter(String source, ParsePosition pos) {
+        int index = pos.getIndex();
+        if (index < source.length()) {
+            char ret = source.charAt(index);
+            pos.setIndex(index + 1);
+            return ret;
+        }
+        return 0; // Represents end of string or error
+    }
+    // Need getNumeratorFormat and getDenominatorFormat as well
+    @Override
+    public NumberFormat getNumeratorFormat() { return NumberFormat.getIntegerInstance(); }
+     @Override
+    public NumberFormat getDenominatorFormat() { return NumberFormat.getIntegerInstance(); }
+}
+
+
+// The fixed function:
+class FixedProperFractionFormat extends ProperFractionFormatStub { // Inherit stubs for compilation check
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      *
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
+    @Override
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
 
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse numerator
+        int numStartIndex = pos.getIndex(); // Store index before parsing numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // set index back to initial, error index should be set by parse
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs should be leading, invalid expression
+        // Check for negative numerator
+        // Use doubleValue() comparison to handle potential non-integer results from parse
+        if (num.doubleValue() < 0.0) {
+            // minus signs should be leading only, invalid expression
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numStartIndex); // Mark error at the start of the negative numerator
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
-        switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
-        case '/' :
-            // found '/', continue parsing denominator
-            break;
-        default :
-            // invalid '/'
+        // expecting '/'
+        if (c != '/') {
+             // didn't find '/', invalid format like "5 2" or "5 2a"
              // set index back to initial, error index should be the last
              // character examined.
              pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+             pos.setErrorIndex(startIndex); // Mark error where '/' was expected
              return null;
         }
 
+        // found '/', continue parsing denominator
+
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denStartIndex = pos.getIndex(); // Store index before parsing denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // set index back to initial, error index should be set by parse
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs must be leading, invalid
+        // Check for negative denominator
+        // Use doubleValue() comparison
+        if (den.doubleValue() < 0.0) {
+            // minus signs must be leading only, invalid
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denStartIndex); // Mark error at the start of the negative denominator
+            return null;
+        }
+
+        // Check for zero denominator
+        // Use doubleValue() comparison
+         if (den.doubleValue() == 0.0) {
+             // Denominator cannot be zero
+             pos.setIndex(initialIndex);
+             pos.setErrorIndex(denStartIndex); // Mark error at the start of the zero denominator
+             return null;
+        }
+
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+        // Calculate the numerator based on the whole number, numerator, and denominator.
+        // The sign of the fraction is determined by the whole number's sign.
+        // The numerator n must be positive as checked above.
+        // The denominator d must be positive as checked above.
+        // Formula: result = (abs(whole) * den + num) * sign(whole) / den
+        // Example: -3 1/2 => w=-3, n=1, d=2 => (abs(-3)*2 + 1) * sign(-3) = (3*2+1)*(-1) = 7*(-1) = -7. Fraction is -7/2.
+        // Example:  3 1/2 => w=3, n=1, d=2 => (abs(3)*2 + 1) * sign(3) = (3*2+1)*(1) = 7*1 = 7. Fraction is 7/2.
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
+}
\ No newline at end of file
