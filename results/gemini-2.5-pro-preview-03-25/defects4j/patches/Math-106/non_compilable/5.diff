diff --git a/tmp/d5589a5c-b0a9-4838-9dbc-e084dfd90eaf_buggy.java b/tmp/7d991c49-46a2-49de-86ee-bd0fe82b9a27_fixed.java
index 42c5923..e05de6b 100644
--- a/tmp/d5589a5c-b0a9-4838-9dbc-e084dfd90eaf_buggy.java
+++ b/tmp/7d991c49-46a2-49de-86ee-bd0fe82b9a27_fixed.java
@@ -1,89 +1,130 @@
+import java.text.NumberFormat; // Assuming these imports are available
+import java.text.ParsePosition;
+import org.apache.commons.math.fraction.Fraction;
+import org.apache.commons.math.util.MathUtils; // Required for MathUtils.sign
+
+// Assume the context of a class like ProperFractionFormat extending FractionFormat
+// and necessary methods like getWholeFormat, getNumeratorFormat, getDenominatorFormat,
+// parseAndIgnoreWhitespace, parseNextCharacter, and super.parse are defined elsewhere.
+
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+        // try to parse improper fraction using base class method first
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
-        // parse whole
+        // parse whole number part
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // Invalid whole number. Reset index to start of parsing attempt.
+            // The error index is likely set by NumberFormat.parse failure.
             pos.setIndex(initialIndex);
             return null;
         }
 
-        // parse whitespace
+        // parse whitespace between whole and numerator
         parseAndIgnoreWhitespace(source, pos);
         
+        // Store index before attempting to parse the numerator
+        int numeratorStartIndex = pos.getIndex();
+        
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // Invalid numerator. Reset index to start of parsing attempt.
+            // The error index is likely set by NumberFormat.parse failure.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // Validate numerator: must be non-negative for proper fraction format
+        // Use doubleValue for comparison to handle potential non-integer results,
+        // although typically Integer is expected from getNumeratorFormat.
+        if (num.doubleValue() < 0.0) {
+            // Negative numerator is not allowed in proper fraction format as per Javadoc.
+            pos.setIndex(initialIndex); // Reset index to start of this parse attempt
+            pos.setErrorIndex(numeratorStartIndex); // Mark error at the start of the invalid numerator
+            return null;
+        }
 
-        // parse '/'
-        int startIndex = pos.getIndex();
+        // parse '/' separator
+        int slashStartIndex = pos.getIndex(); // Position where '/' is expected or found
         char c = parseNextCharacter(source, pos);
         switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+        case 0 : // End of string reached before finding '/'
+            // This indicates a format like "W N" which is not a valid proper fraction "W N / D".
+            // Proper format requires all three parts.
+            pos.setIndex(initialIndex); // Reset index to start
+            pos.setErrorIndex(slashStartIndex); // Mark error where '/' was expected
+            return null;
         case '/' :
-            // found '/', continue parsing denominator
+            // Found '/', continue parsing denominator
             break;
-        default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
-            pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+        default : // Found an unexpected character instead of '/'
+            pos.setIndex(initialIndex); // Reset index to start
+            pos.setErrorIndex(slashStartIndex); // Mark error at the unexpected character
             return null;
         }
 
-        // parse whitespace
+        // parse whitespace between '/' and denominator
         parseAndIgnoreWhitespace(source, pos);
 
+        // Store index before attempting to parse the denominator
+        int denominatorStartIndex = pos.getIndex();
+
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // Invalid denominator. Reset index to start of parsing attempt.
+            // The error index is likely set by NumberFormat.parse failure.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // Validate denominator: must be positive for proper fraction format
+        // Use doubleValue for comparison consistency.
+        if (den.doubleValue() < 0.0) {
+            // Negative denominator is not allowed in proper fraction format as per Javadoc.
+            pos.setIndex(initialIndex); // Reset index to start
+            pos.setErrorIndex(denominatorStartIndex); // Mark error at the start of the invalid denominator
+            return null;
+        }
 
+        // Additional validation: Denominator cannot be zero.
+        if (den.doubleValue() == 0.0) {
+            // Zero denominator is mathematically invalid for fractions.
+            pos.setIndex(initialIndex); // Reset index to start
+            pos.setErrorIndex(denominatorStartIndex); // Mark error at the start of the zero denominator
+            return null;
+        }
+
+        // Extract integer values from parsed Numbers
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+        
+        // Calculate the numerator of the resulting improper fraction.
+        // The formula is: sign(w) * (|w| * d + n)
+        // This correctly combines the whole and fractional parts, preserving the sign from the whole part.
+        // MathUtils.sign(w) returns 1 for w>0, -1 for w<0, and 0 for w=0.
+        // The Fraction constructor will handle reduction and potential arithmetic overflows (throwing ArithmeticException).
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
