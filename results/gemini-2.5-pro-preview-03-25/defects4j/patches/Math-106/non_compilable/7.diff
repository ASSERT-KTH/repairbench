diff --git a/tmp/b4cc2618-b2ba-4c32-8380-9902094dd37d_buggy.java b/tmp/07c0e431-9c5d-48c7-853b-6f3cbb34b26e_fixed.java
index 42c5923..7b987f6 100644
--- a/tmp/b4cc2618-b2ba-4c32-8380-9902094dd37d_buggy.java
+++ b/tmp/07c0e431-9c5d-48c7-853b-6f3cbb34b26e_fixed.java
@@ -1,89 +1,125 @@
+import java.text.NumberFormat;
+import java.text.ParsePosition;
+// Assume Fraction, MathUtils, superclass methods are available in the context.
+import org.apache.commons.math.util.MathUtils; // Keep import if superclass needs it, though calculation changed.
+
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
+        // Keep track of the position before parsing the numerator
+        int nStartIndex = pos.getIndex();
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // Check for negative numerator, which is disallowed for proper fractions
+        if (num.intValue() < 0) {
+             // minus signs must be leading in the whole number part, invalid expression
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(nStartIndex); // Error occurred at the start of the numerator
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            // no '/' found after parsing "whole num"
+            // This is invalid for a proper fraction "whole num/den" format.
+            // Set error index back to the start, indicating incomplete fraction.
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startIndex); // Indicate error where '/' was expected
+            return null;
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
+            // invalid character where '/' was expected.
             // set index back to initial, error index should be the last
-            // character examined.
+            // character examined (startIndex).
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
+        // Keep track of the position before parsing the denominator
+        int dStartIndex = pos.getIndex();
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // Check for negative denominator, which is disallowed for proper fractions
+        if (den.intValue() < 0) {
+             // minus signs must be leading in the whole number part, invalid
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(dStartIndex); // Error occurred at the start of the denominator
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
-        int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+        int d = den.intValue(); // Denominator 'd' must be positive (checked < 0 above, constructor handles d=0).
+
+        // Calculate the numerator for the final fraction.
+        // The approach is based on the magnitude and the sign of the whole part.
+        // For w >= 0, fraction is w + n/d = (w*d + n) / d
+        // For w < 0, fraction is w - n/d = (w*d - n) / d (e.g., -3 1/2 = -3 - 1/2 = (-6-1)/2 = -7/2)
+        int numeratorValue;
+        if (w < 0) {
+            numeratorValue = w * d - n; 
+        } else { // w >= 0
+            numeratorValue = w * d + n;
+        }
+
+        return new Fraction(numeratorValue, d);
     }
\ No newline at end of file
