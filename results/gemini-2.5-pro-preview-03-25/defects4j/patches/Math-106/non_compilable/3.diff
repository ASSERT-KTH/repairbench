diff --git a/tmp/85da23a5-3106-4c62-8282-5fc31ae79037_buggy.java b/tmp/86da5414-2fde-4103-b153-e4d512e2bab1_fixed.java
index 42c5923..2b95ad3 100644
--- a/tmp/85da23a5-3106-4c62-8282-5fc31ae79037_buggy.java
+++ b/tmp/86da5414-2fde-4103-b153-e4d512e2bab1_fixed.java
@@ -1,89 +1,143 @@
+import org.apache.commons.math.fraction.Fraction;
+import org.apache.commons.math.util.MathUtils; // Assuming this import is present or MathUtils is accessible
+import java.text.ParsePosition;
+import java.text.FieldPosition; // Needed for superclass, not directly used here but assumed context
+import java.text.NumberFormat; // Needed for superclass, not directly used here but assumed context
+
+// Assuming the context of ProperFractionFormat extending FractionFormat
+public abstract class ProperFractionFormat extends FractionFormat {
+
+    // Assume these abstract methods are implemented elsewhere
+    protected abstract NumberFormat getWholeFormat();
+    // getNumeratorFormat() and getDenominatorFormat() inherited from FractionFormat
+
+    // Helper methods assumed to exist (from FractionFormat or its base)
+    protected abstract void parseAndIgnoreWhitespace(String source, ParsePosition pos);
+    protected abstract char parseNextCharacter(String source, ParsePosition pos);
+
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      *
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
+    @Override // Added @Override for clarity, assuming it overrides FractionFormat.parse
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
 
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse numerator
+        int numeratorStartIndex = pos.getIndex();
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
+        // Check for negative numerator
+        if (num.doubleValue() < 0.0) {
              // minus signs should be leading, invalid expression
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numeratorStartIndex);
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            // Proper fractions must have a '/' unless only the whole number was present.
+            // If we parsed "whole num" but reached the end of the string,
+            // it's not a valid proper fraction "whole num / den".
+            // It should have been parsed as an integer by super.parse if only "whole" was intended.
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startIndex); // Error where '/' was expected
+            return null;
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
+            // invalid character instead of '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denominatorStartIndex = pos.getIndex();
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
+        // Check for negative or zero denominator
+        if (den.doubleValue() < 1.0) { // Denominator must be positive
              // minus signs must be leading, invalid
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denominatorStartIndex);
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
+
+    // Dummy implementations for compilability if needed in isolation
+    // protected NumberFormat getWholeFormat() { return NumberFormat.getIntegerInstance(); }
+    // protected NumberFormat getNumeratorFormat() { return NumberFormat.getIntegerInstance(); }
+    // protected NumberFormat getDenominatorFormat() { return NumberFormat.getIntegerInstance(); }
+    // protected void parseAndIgnoreWhitespace(String source, ParsePosition pos) { /* Skip whitespace */ }
+    // protected char parseNextCharacter(String source, ParsePosition pos) { /* Get next non-whitespace char */ return 0;}
+    // public Fraction parse(String source) throws java.text.ParseException { // Likely exists in base class
+    //     ParsePosition parsePosition = new ParsePosition(0);
+    //     Fraction result = parse(source, parsePosition);
+    //     if (parsePosition.getIndex() == 0) {
+    //         throw new java.text.ParseException("Unparseable fraction number: \"" + source + "\"",
+    //                                   parsePosition.getErrorIndex());
+    //     }
+    //     return result;
+    // }
+    // public StringBuffer format(Fraction fraction, StringBuffer toAppendTo, FieldPosition pos) { return null; } // Likely abstract or implemented in base
+}
