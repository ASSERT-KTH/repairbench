diff --git a/tmp/4ecd07ec-61c8-490b-8ce4-3f1d273e0830_buggy.java b/tmp/dc7b166f-daa3-47ce-be38-7831151fba47_fixed.java
index 42c5923..ca18325 100644
--- a/tmp/4ecd07ec-61c8-490b-8ce4-3f1d273e0830_buggy.java
+++ b/tmp/dc7b166f-daa3-47ce-be38-7831151fba47_fixed.java
@@ -1,89 +1,107 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
         // parse numerator
+        int numStartIndex = pos.getIndex(); // Store index before parsing numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // Minus signs must be leading, invalid expression if numerator is negative
+        if (num.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numStartIndex); // Error index points to the start of the invalid numerator
+            return null;
+        }
 
         // parse '/'
-        int startIndex = pos.getIndex();
+        int slashStartIndex = pos.getIndex(); // Store index before parsing '/'
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
             // no '/'
-            // return num as a fraction
+            // This seems incorrect for a proper fraction format like "W N/D".
+            // Should likely be an error if '/' is missing after W and N.
+            // However, retaining original behavior to address only the reported bug.
+            // Original behavior: return num as a fraction (e.g. "5 2" -> 2/1)
             return new Fraction(num.intValue(), 1);
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
+            // invalid character instead of '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(slashStartIndex); // Error index points to the unexpected character
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denStartIndex = pos.getIndex(); // Store index before parsing denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // Minus signs must be leading, invalid expression if denominator is negative
+        if (den.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denStartIndex); // Error index points to the start of the invalid denominator
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+        // Calculate the numerator based on whole, numerator, and denominator parts.
+        // Use MathUtils.sign to handle the sign of the whole number correctly.
+        // e.g., -3 1/2 => w=-3, n=1, d=2 => (abs(-3)*2 + 1) * sign(-3) = (3*2 + 1) * -1 = -7
+        return new Fraction(((Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.sign(w), d);
     }
\ No newline at end of file
