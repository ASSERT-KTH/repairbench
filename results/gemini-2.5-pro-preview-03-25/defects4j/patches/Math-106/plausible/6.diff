diff --git a/tmp/e39af782-45f5-4442-ab11-91d1edbf1aa8_buggy.java b/tmp/e180d552-d531-49b5-8591-f78a2a3ee2b7_fixed.java
index 42c5923..f8b3c53 100644
--- a/tmp/e39af782-45f5-4442-ab11-91d1edbf1aa8_buggy.java
+++ b/tmp/e180d552-d531-49b5-8591-f78a2a3ee2b7_fixed.java
@@ -1,89 +1,120 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
+        // Store index before parsing numerator
+        int numeratorStartIndex = pos.getIndex();
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
+            // Error index should be set by numFormat.parse()
             return null;
         }
         
+        // Check for negative numerator specified in docs
+        if (num.intValue() < 0) {
             // minus signs should be leading, invalid expression
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numeratorStartIndex);
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            // no '/' found after N in "W N" format. This is not a valid proper fraction.
+            // A proper fraction must have N/D. We parsed W N, but no / character.
+            // Example: "2 3" is invalid.
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startIndex); // Error occurred where '/' was expected.
+            return null;
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
+            // invalid character instead of '/' after N in "W N ..."
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(startIndex); // Error is the unexpected character itself.
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
+        // Store index before parsing denominator
+        int denominatorStartIndex = pos.getIndex();
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
+            // Error index should be set by denFormat.parse()
             return null;
         }
         
+        // Check for negative denominator specified in docs
+        if (den.intValue() < 0) {
             // minus signs must be leading, invalid
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denominatorStartIndex);
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+        
+        // Check for zero denominator
+        if (d == 0) {
+            // Denominator must not be zero
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denominatorStartIndex);
+            return null;
+        }
+
+        // Assuming org.apache.commons.math.util.MathUtils is available
+        return new Fraction(((Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.sign(w), d);
     }
\ No newline at end of file
