diff --git a/tmp/3f565c13-6b37-4495-b7d9-4652d01a7a9e_buggy.java b/tmp/44af7fd4-187f-401d-ac10-7c7aae59dba4_fixed.java
index 42c5923..493fbe1 100644
--- a/tmp/3f565c13-6b37-4495-b7d9-4652d01a7a9e_buggy.java
+++ b/tmp/44af7fd4-187f-401d-ac10-7c7aae59dba4_fixed.java
@@ -1,89 +1,113 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      *
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
 
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse numerator
+        int numStartIndex = pos.getIndex(); // Store index before parsing numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
+            // Error index is likely set by getNumeratorFormat().parse()
             return null;
         }
 
+        // Check for misplaced minus sign in numerator - documentation specifies only whole can be negative
+        if (num.intValue() < 0) {
             // minus signs should be leading, invalid expression
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numStartIndex); // Point to the start of the numerator
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            // no '/' found, signifies end of string or non-matching character
+            // This format requires "W N/D", so absence of '/' after N is an error.
+            // However, the original code returned num as fraction. We keep this behaviour
+            // unless further context suggests otherwise, although it seems questionable
+            // for a ProperFractionFormat. Let's stick to fixing the reported bug.
+             // If the caller expects a proper fraction, this path might lead to unexpected results for inputs like "1 2".
+             return new Fraction(num.intValue(), 1); // Original behavior
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
+            // invalid character encountered where '/' expected
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(startIndex); // Point to where '/' was expected
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denStartIndex = pos.getIndex(); // Store index before parsing denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
+            // Error index is likely set by getDenominatorFormat().parse()
             return null;
         }
 
-            // minus signs must be leading, invalid
+        // Check for misplaced minus sign or zero in denominator
+        if (den.intValue() <= 0) { // Denominator must be positive
+            // minus signs must be leading, invalid expression, or denominator is zero
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denStartIndex); // Point to the start of the denominator
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+
+        // Calculate the fraction value: (abs(W) * D + N) * sign(W) / D
+        // Example: "-3 1/2" -> w=-3, n=1, d=2 -> ((abs(-3)*2)+1)*sign(-3) / 2 = ((3*2)+1)*(-1) / 2 = (6+1)*(-1) / 2 = -7 / 2
+        // Example: "3 1/2" -> w=3, n=1, d=2 -> ((abs(3)*2)+1)*sign(3) / 2 = ((3*2)+1)*(1) / 2 = (6+1)*(1) / 2 = 7 / 2
+        return new Fraction(((Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.sign(w), d);
     }
\ No newline at end of file
