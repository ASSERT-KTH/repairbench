diff --git a/tmp/ef87060b-13a4-4354-be66-1b0f719e23dc_buggy.java b/tmp/c9ea64b2-a548-4b61-8082-9b549c01945d_fixed.java
index 42c5923..9f08463 100644
--- a/tmp/ef87060b-13a4-4354-be66-1b0f719e23dc_buggy.java
+++ b/tmp/c9ea64b2-a548-4b61-8082-9b549c01945d_fixed.java
@@ -1,89 +1,128 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
         // parse numerator
+        int numStartIndex = pos.getIndex();
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
         // minus signs should be leading, invalid expression
+        if (num.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numStartIndex);
+            return null;
+        }
+
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
             // no '/'
             // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            // This case is problematic because "2 3" should not be parsed as 2/1 or 3/1.
+            // It implies a proper fraction was expected but not found.
+            // However, the original code returned num as fraction (num.intValue(), 1)
+            // which seems incorrect for a proper fraction format.
+            // Let's stick to the original logic for minimal change, assuming the intent
+            // was perhaps to handle "integer" input loosely, although the method doc
+            // specifies proper fraction format. A better behavior might be erroring out.
+            // For now, let's assume "2 3" should be parsed as whole number 2, if that's the only number,
+            // but if a numerator follows, the '/' is mandatory.
+            // The original code actually returns new Fraction(num.intValue(), 1) if '/' is missing.
+            // This path seems unlikely to be hit given the whole number was already parsed.
+            // If source is "2", whole is 2, num is null.
+            // If source is "2 3", whole is 2, num is 3, c is 0. Original returns 3/1. Incorrect.
+            // If source is "3", whole is null, super.parse handles it.
+            // Let's assume the intent was: if '/' is not there after numerator, it's an error for proper fraction format.
+            // Reset index and set error index.
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startIndex);
+            return null; // Indicate parsing failure for "2 3" type inputs.
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
+            // invalid character instead of '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denStartIndex = pos.getIndex();
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
         // minus signs must be leading, invalid
+        if (den.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denStartIndex);
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+        // Check for denominator == 0 separately, Fraction constructor will throw ArithmeticException
+        // which might not be desired for parsing. Let's return null.
+        if (d == 0) {
+             pos.setIndex(initialIndex);
+             pos.setErrorIndex(denStartIndex);
+             return null;
+        }
+        
+        return new Fraction(((Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.sign(w), d);
     }
\ No newline at end of file
