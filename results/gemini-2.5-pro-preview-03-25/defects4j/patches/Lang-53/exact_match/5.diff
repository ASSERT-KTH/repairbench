diff --git a/tmp/415cb71e-06f0-4c6f-afff-a8cdb4f111e1_buggy.java b/tmp/f11b7b81-b58a-47bf-8c54-6a3ec25dbe5b_fixed.java
index f96e1af..7a6fc8b 100644
--- a/tmp/415cb71e-06f0-4c6f-afff-a8cdb4f111e1_buggy.java
+++ b/tmp/f11b7b81-b58a-47bf-8c54-6a3ec25dbe5b_fixed.java
@@ -1,133 +1,153 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
         if (field == Calendar.MILLISECOND) {
             return;
         }
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
 
         Date date = val.getTime();
         long time = date.getTime();
         boolean done = false;
 
         // truncate milliseconds
         int millisecs = val.get(Calendar.MILLISECOND);
-        if (!round || millisecs < 500) {
+        if (!round || millisecs < 500) { // If truncating or rounding down milliseconds
             time = time - millisecs;
-        if (field == Calendar.SECOND) {
-            done = true;
         }
+        if (field == Calendar.SECOND) { // Stop truncation logic if SECOND is the target field
+            done = true;
         }
 
         // truncate seconds
         int seconds = val.get(Calendar.SECOND);
+        // Only truncate seconds if the target field is MINUTE or larger
+        // and we are truncating or rounding down seconds
         if (!done && (!round || seconds < 30)) {
             time = time - (seconds * 1000L);
-        if (field == Calendar.MINUTE) {
-            done = true;
         }
+        if (field == Calendar.MINUTE) { // Stop truncation logic if MINUTE is the target field
+             done = true;
         }
 
         // truncate minutes
         int minutes = val.get(Calendar.MINUTE);
+        // Only truncate minutes if the target field is HOUR or larger
+        // and we are truncating or rounding down minutes
         if (!done && (!round || minutes < 30)) {
             time = time - (minutes * 60000L);
         }
 
         // reset time
+        // NOTE: We only need to update the Calendar object if the time has actually changed
+        //       during this initial truncation phase.
         if (date.getTime() != time) {
             date.setTime(time);
-            val.setTime(date);
+            val.setTime(date); // This updates the Calendar object for the main loop
         }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
+        // Main rounding/truncation loop
         for (int i = 0; i < fields.length; i++) {
+             // Iterate through the fields to be zeroed (smaller than the target field)
             for (int j = 0; j < fields[i].length; j++) {
+                // Check if we've found the target field
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                    // If we are rounding and the previous field processing indicated
+                    // a round-up condition, then increment the target field.
                     if (round && roundUp) {
                         if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                            // Special case for SEMI_MONTH
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
                         } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                            // General case: Add 1 to the target field
+                            // (fields[i][0] is the primary field in the current group)
                             val.add(fields[i][0], 1);
                         }
                     }
+                    // Target field reached, processing complete.
                     return;
                 }
-            }
-            //We have various fields that are not easy roundings
+            } // End of inner loop
+
+            // We are processing a field level smaller than the target field.
+            // We need to determine the offset from the minimum value
+            // and whether to round up the next higher field (handled by roundUp flag).
             int offset = 0;
             boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
-            switch (field) {
+
+            // Handle special rounding cases (SEMI_MONTH, AM_PM)
+            switch (field) { // Check if the *target* field requires special handling
+                             // when clearing *lower* fields.
                 case DateUtils.SEMI_MONTH:
+                    // If the target is SEMI_MONTH, and we are currently processing the DATE field level
                     if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                        // Calculate offset for DATE field relative to start of month (1-based)
                         offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
+                        // Adjust offset for the second half of the month (16-31)
                         if (offset >= 15) {
-                            offset -= 15;
+                            offset -= 15; // Offset within the 15-day period (0-14 or 0-15 typically)
                         }
-                        //Record whether we're in the top or bottom half of that range
+                        // Round up if offset is past the midpoint (7.5 days -> > 7)
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
+                     // If the target is AM_PM, and we are currently processing the HOUR_OF_DAY field level
                     if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
+                        // Calculate offset for HOUR_OF_DAY relative to start of AM/PM period (0-11)
                         offset = val.get(Calendar.HOUR_OF_DAY);
-                        if (offset >= 12) {
+                        if (offset >= 12) { // Adjust for PM hours
                             offset -= 12;
                         }
+                        // Round up if offset is past the midpoint (6 hours -> > 6)
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
+
+            // If not a special case handled above
             if (!offsetSet) {
+                // Get the minimum and maximum values for the primary field of the current level (e.g., Calendar.SECOND)
                 int min = val.getActualMinimum(fields[i][0]);
                 int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
+                // Calculate the offset from the minimum value
                 offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
+                // Determine if we need to round up based on whether the offset is more than half the range
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
+
+            // If there's an offset (meaning the field is not already at its minimum),
+            // subtract the offset to zero/floor this field using set().
             if (offset != 0) {
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
-        }
+        } // End of outer loop
+
+        // If the loop completes without finding the field, it's unsupported.
         throw new IllegalArgumentException("The field " + field + " is not supported");
 
     }
\ No newline at end of file
