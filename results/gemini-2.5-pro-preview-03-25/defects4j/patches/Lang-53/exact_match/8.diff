diff --git a/tmp/c2af956e-4b59-4d5b-8d96-a67e03575dec_buggy.java b/tmp/5e1894fd-ccea-4357-bff3-d27294208bb1_fixed.java
index f96e1af..11079ee 100644
--- a/tmp/c2af956e-4b59-4d5b-8d96-a67e03575dec_buggy.java
+++ b/tmp/5e1894fd-ccea-4357-bff3-d27294208bb1_fixed.java
@@ -1,133 +1,161 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
         if (field == Calendar.MILLISECOND) {
             return;
         }
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
 
         Date date = val.getTime();
         long time = date.getTime();
         boolean done = false;
 
         // truncate milliseconds
         int millisecs = val.get(Calendar.MILLISECOND);
         if (!round || millisecs < 500) {
             time = time - millisecs;
+        }
+        // 'if (field == Calendar.MILLISECOND)' is Mulligan as this is handled by early return.
+
+        // Check if we're done based on the target field
         if (field == Calendar.SECOND) {
             done = true;
         }
-        }
 
         // truncate seconds
         int seconds = val.get(Calendar.SECOND);
         if (!done && (!round || seconds < 30)) {
             time = time - (seconds * 1000L);
+        }
+
+        // Check if we're done based on the target field
         if (field == Calendar.MINUTE) {
             done = true;
         }
-        }
 
         // truncate minutes
         int minutes = val.get(Calendar.MINUTE);
         if (!done && (!round || minutes < 30)) {
             time = time - (minutes * 60000L);
         }
 
         // reset time
+        // NOTE: Tests show that calling val.setTime(date) is necessary even if
+        // time == date.getTime(). This is because the Calendar object's internal
+        // state can be invalid after using Calendar#add. (LANG-204)
         if (date.getTime() != time) {
             date.setTime(time);
             val.setTime(date);
         }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
         boolean roundUp = false;
+        // This is the main loop over the array of date fields {field value, ceiling value}.
+        // We iterate through the fields setting the smaller fields to their minimum value
+        // and determining if the field we are currently iterating over needs to be rounded up.
+        // For example, when rounding to the nearest minute, we iterate through
+        // milliseconds and seconds, setting them to zero and checking if seconds were >= 30
+        // to determine if minutes should be rounded up.
         for (int i = 0; i < fields.length; i++) {
+            // Truncate fields below the specified field
             for (int j = 0; j < fields[i].length; j++) {
+                // If we've found the field we're looking for, stop looping
+                // (and handle rounding if `round` is true).
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                    // If rounding is enabled and the lower field triggered a round-up,
+                    // then increment this field.
                     if (round && roundUp) {
                         if (field == DateUtils.SEMI_MONTH) {
                             // This is a special case that's hard to generalize
                             // If the date is 1, we round up to 16, otherwise
                             // we subtract 15 days and add 1 month
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
                         } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
+                            // We need to add one to this field since the
+                            // last number causes us to round up.
                             val.add(fields[i][0], 1);
                         }
                     }
-                    return;
+                    return; // We're done modifying the calendar
                 }
             }
             // We have various fields that are not easy roundings
             int offset = 0;
             boolean offsetSet = false;
             // These are special types of fields that require different rounding rules
             switch (field) {
                 case DateUtils.SEMI_MONTH:
+                    // We're looking to round/truncate the day of the month to the 1st or 16th.
                     if (fields[i][0] == Calendar.DATE) {
                         // If we're going to drop the DATE field's value,
                         // we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                        // We need to subtract 1 since the date has a minimum of 1.
                         offset = val.get(Calendar.DATE) - 1;
                         // If we're above 15 days adjustment, that means we're in the
                         // bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
-                        //Record whether we're in the top or bottom half of that range
+                        // Record whether we're in the top or bottom half of that range.
+                        // roundUp = true if day is > 15+7 = 22 or > 1+7 = 8.
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
+                    // We're looking to round/truncate the hour of the day to AM or PM (0 or 12).
                     if (fields[i][0] == Calendar.HOUR_OF_DAY) {
                         // If we're going to drop the HOUR field's value,
                         // we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
+                        // Determine if we should round up to the next AM/PM boundary (hour 12 or 0).
+                        // roundUp = true if hour is > 12+6 = 18 or > 0+6 = 6.
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
+            // If a special field rule wasn't applied, handle the general case.
             if (!offsetSet) {
                 int min = val.getActualMinimum(fields[i][0]);
                 int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
+                // Calculate the offset from the minimum allowed value.
                 offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
+                // Set roundUp if this is more than halfway between the minimum and maximum.
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
+            // We need to remove this field's value (set it to the minimum).
+            // If offset is 0, the field is already at its minimum value.
             if (offset != 0) {
+                // Set the field to its minimum value by subtracting the offset.
+                // (For example, setting seconds to 0).
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
         }
+        // This exception should not happen normally, as fields should contain all valid Calendar fields.
         throw new IllegalArgumentException("The field " + field + " is not supported");
 
     }
\ No newline at end of file
