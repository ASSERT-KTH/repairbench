diff --git a/tmp/be3ac54a-8c20-4a48-aa75-6960448bea97_buggy.java b/tmp/8a5bc6fe-ad8d-4731-8d1d-c7da7f2f25c6_fixed.java
index f96e1af..21d4eef 100644
--- a/tmp/be3ac54a-8c20-4a48-aa75-6960448bea97_buggy.java
+++ b/tmp/8a5bc6fe-ad8d-4731-8d1d-c7da7f2f25c6_fixed.java
@@ -1,133 +1,142 @@
     /**
      * <p>Internal calculation method.</p>
      * 
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
         if (field == Calendar.MILLISECOND) {
             return;
         }
 
-        // ----------------- Fix for LANG-59 ---------------------- START ---------------
+        // ----------------- Fix for LANG-59 / LANG-346 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
+        // see http://issues.apache.org/jira/browse/LANG-346
         //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
+        // Manually modify milliseconds, seconds and minutes fields for rounding/truncation based on the 'round' flag.
+        // This avoids potential side effects of Calendar methods like set() affecting larger fields.
+        // It also ensures that the lower fields are appropriately modified (truncated or left as-is)
+        // before the main loop determines the rounding direction (roundUp) based on the next lower field's value.
+        // The 'done' flag prevents modification of fields greater than or equal to the target field.
 
-        Date date = val.getTime();
-        long time = date.getTime();
+        Date date = val.getTime(); // Store original value
+        long time = date.getTime(); // Work with time in milliseconds
         boolean done = false;
 
-        // truncate milliseconds
+        // Modify milliseconds
         int millisecs = val.get(Calendar.MILLISECOND);
-        if (!round || millisecs < 500) {
-            time = time - millisecs;
+        if (!round || millisecs < 500) { // If truncating or rounding down milliseconds
+            time = time - millisecs; // Subtract milliseconds
+        }
+        // Stop processing lower fields if the target field is SECOND
         if (field == Calendar.SECOND) {
             done = true;
         }
-        }
 
-        // truncate seconds
+        // Modify seconds
         int seconds = val.get(Calendar.SECOND);
-        if (!done && (!round || seconds < 30)) {
-            time = time - (seconds * 1000L);
+        if (!done && (!round || seconds < 30)) { // If not done and (truncating or rounding down seconds)
+            time = time - (seconds * 1000L); // Subtract seconds in milliseconds
+        }
+        // Stop processing lower fields if the target field is MINUTE
         if (field == Calendar.MINUTE) {
             done = true;
         }
-        }
 
-        // truncate minutes
+        // Modify minutes
         int minutes = val.get(Calendar.MINUTE);
-        if (!done && (!round || minutes < 30)) {
-            time = time - (minutes * 60000L);
+        if (!done && (!round || minutes < 30)) { // If not done and (truncating or rounding down minutes)
+             time = time - (minutes * 60000L); // Subtract minutes in milliseconds
         }
         
-        // reset time
+        // Reset time based on modifications, but only if time actually changed.
+        // This prevents unnecessary Calendar object creation/setTime calls.
         if (date.getTime() != time) {
-            date.setTime(time);
-            val.setTime(date);
+            date.setTime(time); // Update Date object
+            val.setTime(date); // Update Calendar object to reflect modified lower fields
         }
-        // ----------------- Fix for LANG-59 ----------------------- END ----------------
+        // ----------------- Fix for LANG-59 / LANG-346 ----------------------- END ----------------
 
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
                     //This is our field... we stop looping
                     if (round && roundUp) {
                         if (field == DateUtils.SEMI_MONTH) {
                             //This is a special case that's hard to generalize
                             //If the date is 1, we round up to 16, otherwise
                             //  we subtract 15 days and add 1 month
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
                         } else {
                             //We need at add one to this field since the
                             //  last number causes us to round up
                             val.add(fields[i][0], 1);
                         }
                     }
                     return;
                 }
             }
             //We have various fields that are not easy roundings
             int offset = 0;
             boolean offsetSet = false;
             //These are special types of fields that require different rounding rules
             switch (field) {
                 case DateUtils.SEMI_MONTH:
                     if (fields[i][0] == Calendar.DATE) {
                         //If we're going to drop the DATE field's value,
                         //  we want to do this our own way.
                         //We need to subtrace 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
                         //If we're above 15 days adjustment, that means we're in the
                         //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
                         //Record whether we're in the top or bottom half of that range
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
                     if (fields[i][0] == Calendar.HOUR_OF_DAY) {
                         //If we're going to drop the HOUR field's value,
                         //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
             if (!offsetSet) {
                 int min = val.getActualMinimum(fields[i][0]);
                 int max = val.getActualMaximum(fields[i][0]);
                 //Calculate the offset from the minimum allowed value
+                // Note: val.get() returns the current value, which might have been modified by the LANG-59 block above.
                 offset = val.get(fields[i][0]) - min;
                 //Set roundUp if this is more than half way between the minimum and maximum
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
+            //We need to remove this field (set to minimum value)
             if (offset != 0) {
+                 // Set the field to the minimum value by subtracting the offset calculated from the minimum.
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
 
     }
\ No newline at end of file
