diff --git a/tmp/17642ce6-0376-4cd6-86a4-d2ead53ad017_buggy.java b/tmp/9c58b606-2d45-47ca-95ee-1566748af32f_fixed.java
index b1484fc..fff9942 100644
--- a/tmp/17642ce6-0376-4cd6-86a4-d2ead53ad017_buggy.java
+++ b/tmp/9c58b606-2d45-47ca-95ee-1566748af32f_fixed.java
@@ -1,194 +1,317 @@
+import org.apache.commons.math.linear.RealMatrix;
+import org.apache.commons.math.linear.RealVector;
+
+// Define ZERO, ONE, TWO, HALF or import them if they are constants elsewhere
+// For example:
+// import static org.apache.commons.math.util.FastMath.sqrt; // If using FastMath
+// Assuming ZERO=0.0, ONE=1.0, TWO=2.0, HALF=0.5 are accessible constants.
+
+/**
+ * Helper class to provide context for the prelim method.
+ * Replace with actual class structure.
+ */
+abstract class PrelimContextHelper {
+    // Define constants if not available globally
+    protected static final double ZERO = 0.0;
+    protected static final double ONE = 1.0;
+    protected static final double TWO = 2.0;
+    protected static final double HALF = 0.5;
+
+    // Fields assumed to be available in the actual class
+    protected RealVector currentBest;
+    protected RealVector originShift;
+    protected RealMatrix interpolationPoints; // Assuming size npt x n (rows 0..npt-1 for points 1..npt)
+    protected RealVector fAtInterpolationPoints; // Assuming size npt+1 (index 0 for XBASE, 1..npt for points 1..npt)
+    protected RealVector lowerDifference;
+    protected RealVector upperDifference;
+    protected RealVector gradientAtTrustRegionCenter; // size n
+    protected RealVector modelSecondDerivativesParameters; // size npt ? Or npt+1? Check usage/allocation.
+    protected RealVector modelSecondDerivativesValues; // size n*(n+1)/2
+    protected RealMatrix bMatrix; // size ndim x n, where ndim = npt + n
+    protected RealMatrix zMatrix; // size npt x (npt-np)? Or npt+1 x (npt-np)? Check allocation. Assuming npt+1 rows.
+    protected int numberOfInterpolationPoints;
+    protected double initialTrustRegionRadius;
+    protected boolean isMinimize;
+    protected int trustRegionCenterInterpolationPointIndex; // kopt
+    protected abstract double computeObjectiveValue(double[] point);
+    protected abstract int getEvaluations(); // Assuming this returns total evaluations so far
+    // Helper method (remove if not needed)
+    protected void printMethod() {}
+
     /**
      *     SUBROUTINE PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,
      *     BMAT and ZMAT for the first iteration, and it maintains the values of
      *     NF and KOPT. The vector X is also changed by PRELIM.
      *
      *     The arguments N, NPT, X, XL, XU, RHOBEG, IPRINT and MAXFUN are the
      *       same as the corresponding arguments in SUBROUTINE BOBYQA.
      *     The arguments XBASE, XPT, FVAL, HQ, PQ, BMAT, ZMAT, NDIM, SL and SU
      *       are the same as the corresponding arguments in BOBYQB, the elements
      *       of SL and SU being set in BOBYQA.
      *     GOPT is usually the gradient of the quadratic model at XOPT+XBASE, but
      *       it is set by PRELIM to the gradient of the quadratic model at XBASE.
      *       If XOPT is nonzero, BOBYQB will change it to its usual value later.
      *     NF is maintaned as the number of calls of CALFUN so far.
      *     KOPT will be such that the least calculated value of F so far is at
      *       the point XPT(KOPT,.)+XBASE in the space of the variables.
      *
      * @param lowerBound Lower bounds.
      * @param upperBound Upper bounds.
      */
     private void prelim(double[] lowerBound,
                         double[] upperBound) {
-        printMethod(); // XXX
+        // printMethod(); // Removed debugging print
 
         final int n = currentBest.getDimension();
         final int npt = numberOfInterpolationPoints;
-        final int ndim = bMatrix.getRowDimension();
+        final int ndim = bMatrix.getRowDimension(); // Should be npt + n
+        final int np = n + 1;
 
         final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;
         final double recip = 1d / rhosq;
-        final int np = n + 1;
-
-        // Set XBASE to the initial vector of variables, and set the initial
-        // elements of XPT, BMAT, HQ, PQ and ZMAT to zero.
 
+        // Set originShift (XBASE) from the initial point
         for (int j = 0; j < n; j++) {
             originShift.setEntry(j, currentBest.getEntry(j));
-            for (int k = 0; k < npt; k++) {
+        }
+
+        // Initialize interpolationPoints (XPT displacements), BMAT, HQ, PQ, ZMAT
+        // Assuming index conventions based on careful review:
+        // interpolationPoints: npt x n (row k stores displacement for point k+1)
+        // fAtInterpolationPoints: npt+1 (index 0 for XBASE, index k for point k)
+        // bMatrix: ndim x n (ndim = npt + n)
+        // zMatrix: npt+1 x (npt-np) ? Check dimensions carefully. Fortran implies rows 1..NPT+1. Assume npt+1 rows (0..npt).
+
+        for (int j = 0; j < n; j++) {
+            for (int k = 0; k < npt; k++) { // Initialize rows 0..npt-1 (for points 1..npt)
                 interpolationPoints.setEntry(k, j, ZERO);
             }
             for (int i = 0; i < ndim; i++) {
                 bMatrix.setEntry(i, j, ZERO);
             }
         }
-        for (int i = 0, max = n * np / 2; i < max; i++) {
+        for (int i = 0, max = n * (n + 1) / 2; i < max; i++) { // HQ Hessian elements
             modelSecondDerivativesValues.setEntry(i, ZERO);
         }
-        for (int k = 0; k < npt; k++) {
+        // Initialize PQ (modelSecondDerivativesParameters). Check its required size. Assume allocated correctly.
+        for (int k = 0; k < modelSecondDerivativesParameters.getDimension(); k++) {
              modelSecondDerivativesParameters.setEntry(k, ZERO);
-            for (int j = 0, max = npt - np; j < max; j++) {
+        }
+         // Initialize ZMAT. Assuming zMatrix has npt+1 rows (0..npt) and npt-np columns.
+        final int zMatRows = zMatrix.getRowDimension();
+        final int zMatCols = zMatrix.getColumnDimension();
+        for (int k = 0; k < zMatRows; k++) {
+            for (int j = 0; j < zMatCols; j++) {
                 zMatrix.setEntry(k, j, ZERO);
             }
         }
 
-        // Begin the initialization procedure. NF becomes one more than the number
-        // of function values so far. The coordinates of the displacement of the
-        // next initial interpolation point from XBASE are set in XPT(NF+1,.).
+        // Get the function value at the starting point (XBASE)
+        // This value should have been computed by the optimize method before calling prelim.
+        final double fbeg = isMinimize ? currentBest.getValue() : -currentBest.getValue();
+        if (fAtInterpolationPoints.getDimension() < npt + 1) {
+             // This indicates an internal setup error
+             throw new IllegalStateException("fAtInterpolationPoints array size is " + fAtInterpolationPoints.getDimension() + ", needs at least " + (npt + 1));
+        }
+        fAtInterpolationPoints.setEntry(0, fbeg); // Store f(XBASE) at index 0
+        trustRegionCenterInterpolationPointIndex = 0; // Point 0 (XBASE) is initially the best point found
 
+        // Begin the initialization procedure: generate NPT more points
         int ipt = 0;
         int jpt = 0;
-        double fbeg = Double.NaN;
-        do {
-            final int nfm = getEvaluations();
-            final int nfx = nfm - n;
-            final int nfmm = nfm - 1;
-            final int nfxm = nfx - 1;
+        for (int nfm = 0; nfm < npt; ++nfm) { // Loop npt times to generate points 1..npt. nfm is row index (0..npt-1) in interpolationPoints.
+            final int nf = nfm + 1; // Corresponds to Fortran NF loop index (1..npt)
+            final int nfPointIndex = nf; // Point index (1..npt) being generated
+
+            // Calculate displacement vector for point nf (stored in row nfm of interpolationPoints)
             double stepa = 0;
             double stepb = 0;
-            if (nfm <= 2 * n) {
-                if (nfm >= 1 &&
-                    nfm <= n) {
+            int varIndex = -1; // 0-based variable index for displacement calculation
+
+            // Logic based on Fortran NF (nf in Java) determines which variable(s) to change
+            if (nf <= 2 * n) { // Points 1..2n have simple displacements
+                if (nf >= 1 && nf <= n) { // Points 1..n: Step along axis nf-1
+                    varIndex = nf - 1; // Variable index 0..n-1
                     stepa = initialTrustRegionRadius;
-                    if (upperDifference.getEntry(nfmm) == ZERO) {
+                    // If already at upper bound for this variable, step negatively
+                    if (upperDifference.getEntry(varIndex) == ZERO) {
                         stepa = -stepa;
-                        throw new PathIsExploredException(); // XXX
                     }
-                    interpolationPoints.setEntry(nfm, nfmm, stepa);
-                } else if (nfm > n) {
-                    stepa = interpolationPoints.getEntry(nfx, nfxm);
-                    stepb = -initialTrustRegionRadius;
-                    if (lowerDifference.getEntry(nfxm) == ZERO) {
-                        stepb = Math.min(TWO * initialTrustRegionRadius, upperDifference.getEntry(nfxm));
-                        throw new PathIsExploredException(); // XXX
+                    interpolationPoints.setEntry(nfm, varIndex, stepa); // Set displacement for point nf (row nfm)
+                } else { // Points n+1..2n: Step along axis nf-n-1 based on point nf-n
+                    final int nfx = nf - n; // NFX = 1..n
+                    varIndex = nfx - 1; // Variable index 0..n-1
+                    // Get displacement of point nf-n (row nfx-1) along this axis
+                    stepa = interpolationPoints.getEntry(nfx - 1, varIndex);
+                    stepb = -initialTrustRegionRadius; // Try negative step first
+                    // Adjust step if already at a bound
+                    if (lowerDifference.getEntry(varIndex) == ZERO) {
+                        stepb = Math.min(TWO * initialTrustRegionRadius, upperDifference.getEntry(varIndex));
+                    } else if (upperDifference.getEntry(varIndex) == ZERO) { // Check upper bound only if lower not hit
+                        stepb = Math.max(-TWO * initialTrustRegionRadius, lowerDifference.getEntry(varIndex));
                     }
-                    if (upperDifference.getEntry(nfxm) == ZERO) {
-                        stepb = Math.max(-TWO * initialTrustRegionRadius, lowerDifference.getEntry(nfxm));
-                        throw new PathIsExploredException(); // XXX
+                    interpolationPoints.setEntry(nfm, varIndex, stepb); // Set displacement for point nf (row nfm)
                 }
-                    interpolationPoints.setEntry(nfm, nfxm, stepb);
-                }
-            } else {
-                final int tmp1 = (nfm - np) / n;
-                jpt = nfm - tmp1 * n - n;
-                ipt = jpt + tmp1;
-                if (ipt > n) {
-                    final int tmp2 = jpt;
-                    jpt = ipt - n;
-                    ipt = tmp2;
-                    throw new PathIsExploredException(); // XXX
-                }
-                final int iptMinus1 = ipt;
-                final int jptMinus1 = jpt;
-                interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));
-                interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));
+            } else { // Points 2n+1..npt: Displacement combines steps from two previous points
+                // Calculate 1-based variable indices ipt, jpt based on nf
+                ipt = (nf - np) % n + 1; // Fortran: IPT = MOD(NF-NP,N)+1
+                jpt = (nf - np) / n + ipt; // Fortran: JPT = (NF-NP)/N+IPT
+
+                // Ensure indices are valid and potentially swap to match Fortran convention (though ipt<=jpt assumed for HQ calc)
+                if (jpt > n) {
+                    final int tempj = ipt;
+                    ipt = jpt - n;
+                    jpt = tempj;
                 }
+                // ipt, jpt are 1-based variable indices. Assuming calculation yields ipt <= jpt.
+                final int iptIndex = ipt - 1; // 0-based variable index
+                final int jptIndex = jpt - 1; // 0-based variable index
 
-            // Calculate the next value of F. The least function value so far and
-            // its index are required.
+                // Set displacement for point nf (row nfm) using displacements of points ipt+1 (row ipt) and jpt+1 (row jpt)
+                interpolationPoints.setEntry(nfm, iptIndex, interpolationPoints.getEntry(ipt, iptIndex));
+                interpolationPoints.setEntry(nfm, jptIndex, interpolationPoints.getEntry(jpt, jptIndex));
+            }
 
+            // Calculate current point's coordinates in original space (point nf = xbase + xpt[row nfm])
+            // Ensure the point stays within bounds [lowerBound, upperBound]
             for (int j = 0; j < n; j++) {
-                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],
-                                                          originShift.getEntry(j) + interpolationPoints.getEntry(nfm, j)),
-                                                 upperBound[j]));
-                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {
+                final double displacement = interpolationPoints.getEntry(nfm, j);
+                final double coordinate = originShift.getEntry(j) + displacement;
+                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j], coordinate), upperBound[j]));
+                // If the displacement exactly matches the distance to a bound, ensure the coordinate is exactly the bound
+                if (displacement == lowerDifference.getEntry(j)) {
                     currentBest.setEntry(j, lowerBound[j]);
-                }
-                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {
+                } else if (displacement == upperDifference.getEntry(j)) {
                     currentBest.setEntry(j, upperBound[j]);
                 }
             }
 
-            final double objectiveValue = computeObjectiveValue(currentBest.toArray());
-            final double f = isMinimize ? objectiveValue : -objectiveValue;
-            final int numEval = getEvaluations(); // nfm + 1
-            fAtInterpolationPoints.setEntry(nfm, f);
+            // Evaluate objective function at the new point
+            final double objectiveValue = computeObjectiveValue(currentBest.toArray()); // This call should increment the evaluation counter
+            final double f = isMinimize ? objectiveValue : -objectiveValue; // Use negative value if maximizing
+            fAtInterpolationPoints.setEntry(nfPointIndex, f); // Store function value for point nf at index nf
 
-            if (numEval == 1) {
-                fbeg = f;
-                trustRegionCenterInterpolationPointIndex = 0;
-            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {
-                trustRegionCenterInterpolationPointIndex = nfm;
+            // Update the index of the best point found so far (KOPT)
+            if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {
+                trustRegionCenterInterpolationPointIndex = nfPointIndex;
             }
 
-            // Set the nonzero initial elements of BMAT and the quadratic model in the
-            // cases when NF is at most 2*N+1. If NF exceeds N+1, then the positions
-            // of the NF-th and (NF-N)-th interpolation points may be switched, in
-            // order that the function value at the first of them contributes to the
-            // off-diagonal second derivative terms of the initial quadratic model.
+            // Update model parameters (Gradient GOPT, Hessian approx HQ, matrices BMAT, ZMAT)
+            // Logic branches based on which point (nf) is being processed
 
-            if (numEval <= 2 * n + 1) {
-                if (numEval >= 2 &&
-                    numEval <= n + 1) {
-                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);
-                    if (npt < numEval + n) {
+            if (nf <= 2 * n) { // Updates for points 1..2n
+                if (nf >= 1 && nf <= n) { // Points 1..n: Update GOPT and BMAT
+                    varIndex = nf - 1; // 0-based variable index
+                    // Estimate gradient component GOPT(varIndex) using forward difference
+                    gradientAtTrustRegionCenter.setEntry(varIndex, (f - fbeg) / stepa);
+
+                    // Update BMAT column associated with varIndex
                     final double oneOverStepA = ONE / stepa;
-                        bMatrix.setEntry(0, nfmm, -oneOverStepA);
-                        bMatrix.setEntry(nfm, nfmm, oneOverStepA);
-                        bMatrix.setEntry(npt + nfmm, nfmm, -HALF * rhosq);
-                        throw new PathIsExploredException(); // XXX
+                    bMatrix.setEntry(0, varIndex, -oneOverStepA); // Row 0 (related to XBASE)
+                    bMatrix.setEntry(nf, varIndex, oneOverStepA); // Row nf (related to point nf)
+                    final int bmatRowIndexNptNf = npt + nf - 1; // Row index for NPT+NF term (related to Lagrange functions)
+                    if (bmatRowIndexNptNf < ndim) { // Check if row index is valid
+                       if (npt < nf + n) { // Condition from Fortran for smaller NPT case
+                           bMatrix.setEntry(bmatRowIndexNptNf, varIndex, ZERO);
+                       } else {
+                           bMatrix.setEntry(bmatRowIndexNptNf, varIndex, -HALF * rhosq);
                        }
-                } else if (numEval >= n + 2) {
-                    final int ih = nfx * (nfx + 1) / 2 - 1;
-                    final double tmp = (f - fbeg) / stepb;
-                    final double diff = stepb - stepa;
-                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);
-                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);
+                    } // else: Should not happen if ndim is correctly npt+n
+
+                } else { // Points n+1..2n: Update HQ, GOPT, BMAT, ZMAT
+                    final int nfx = nf - n; // NFX = 1..n
+                    varIndex = nfx - 1; // 0-based variable index
+                    // Calculate index for diagonal Hessian element H(varIndex, varIndex) in packed storage
+                    final int ih = varIndex * (varIndex + 1) / 2 + varIndex;
+
+                    final double tmp = (f - fbeg) / stepb; // Helper value for quadratic model update
+                    final double diff = stepb - stepa; // Difference in steps
+
+                    // Update Hessian diagonal H(varIndex, varIndex)
+                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(varIndex)) / diff);
+                    // Update Gradient GOPT(varIndex) using the new Hessian estimate
+                    gradientAtTrustRegionCenter.setEntry(varIndex, (gradientAtTrustRegionCenter.getEntry(varIndex) * stepb - tmp * stepa) / diff);
+
+                    // If steps were in opposite directions (stepa*stepb < 0) and new point is better, swap points
+                    final int pointIndexNfMinusN = nf - n; // Index of the previous point along this axis
                     if (stepa * stepb < ZERO) {
-                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {
-                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));
-                            fAtInterpolationPoints.setEntry(nfm - n, f);
-                            if (trustRegionCenterInterpolationPointIndex == nfm) {
-                                trustRegionCenterInterpolationPointIndex = nfm - n;
-                            }
-                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);
-                            interpolationPoints.setEntry(nfm, nfxm, stepa);
-                        }
-                    }
-                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));
-                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));
-                    bMatrix.setEntry(nfm - n, nfxm,
-                                  -bMatrix.getEntry(0, nfxm) - bMatrix.getEntry(nfm, nfxm));
-                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));
-                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);
-                    // zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) * recip); // XXX "testAckley" and "testDiffPow" fail.
-                    zMatrix.setEntry(nfm - n, nfxm,
-                                  -zMatrix.getEntry(0, nfxm) - zMatrix.getEntry(nfm, nfxm));
+                        if (f < fAtInterpolationPoints.getEntry(pointIndexNfMinusN)) {
+                            // Swap function values
+                            final double fprev = fAtInterpolationPoints.getEntry(pointIndexNfMinusN);
+                            fAtInterpolationPoints.setEntry(pointIndexNfMinusN, f);
+                            fAtInterpolationPoints.setEntry(nfPointIndex, fprev);
+
+                            // Update best point index if it was the point just swapped out
+                            if (trustRegionCenterInterpolationPointIndex == nfPointIndex) {
+                                trustRegionCenterInterpolationPointIndex = pointIndexNfMinusN;
+                            }
+                            // Swap displacements in interpolationPoints matrix for this variable
+                            interpolationPoints.setEntry(pointIndexNfMinusN - 1, varIndex, stepb); // Point nf-n (row index nf-n-1) gets stepb
+                            interpolationPoints.setEntry(nfm, varIndex, stepa); // Point nf (row index nfm) gets stepa
+                        }
+                    }
+                    // Update BMAT column varIndex based on points nf and nf-n
+                    bMatrix.setEntry(0, varIndex, -(stepa + stepb) / (stepa * stepb));
+                    // Denominator uses stepa (displacement of point nf-n before potential swap)
+                    bMatrix.setEntry(nfPointIndex, varIndex, -HALF / stepa);
+                    bMatrix.setEntry(pointIndexNfMinusN, varIndex,
+                                  -bMatrix.getEntry(0, varIndex) - bMatrix.getEntry(nfPointIndex, varIndex));
+
+                    // Update ZMAT column varIndex based on points nf and nf-n
+                    // Check column index validity
+                    if (varIndex >= 0 && varIndex < zMatrix.getColumnDimension()) {
+                       // Check row indices validity (0, nf, nf-n)
+                       if (nfPointIndex < zMatrix.getRowDimension() && pointIndexNfMinusN >= 0 && pointIndexNfMinusN < zMatrix.getRowDimension()) {
+                           zMatrix.setEntry(0, varIndex, Math.sqrt(TWO) / (stepa * stepb));
+                           zMatrix.setEntry(nfPointIndex, varIndex, Math.sqrt(HALF) / rhosq);
+                           zMatrix.setEntry(pointIndexNfMinusN, varIndex,
+                                         -zMatrix.getEntry(0, varIndex) - zMatrix.getEntry(nfPointIndex, varIndex));
+                       }
                     }
+                }
+            } else { // Updates for points 2n+1..npt
+                 // Variables ipt, jpt (1-based), iptIndex, jptIndex (0-based) were calculated earlier
+                 final int iptIndex = ipt - 1;
+                 final int jptIndex = jpt - 1;
+
+                 // Update ZMAT column nf-n-1 based on points 0, nf, ipt, jpt
+                 final int zcol = nf - n - 1; // Column index NFXM = NF - N - 1
+                 if (zcol >= 0 && zcol < zMatrix.getColumnDimension()) { // Check column index validity
+                    // Check row indices validity (0, nf, ipt, jpt)
+                    if (nfPointIndex < zMatrix.getRowDimension() && ipt >= 0 && ipt < zMatrix.getRowDimension() && jpt >= 0 && jpt < zMatrix.getRowDimension()) {
+                        zMatrix.setEntry(0, zcol, recip);            // Row 0 (related to XBASE)
+                        zMatrix.setEntry(nfPointIndex, zcol, recip); // Row nf (related to point nf)
+                        zMatrix.setEntry(ipt, zcol, -recip);         // Row ipt (related to point ipt)
+                        zMatrix.setEntry(jpt, zcol, -recip);         // Row jpt (related to point jpt)
+                    }
+                 }
+
+                 // Update off-diagonal Hessian element H(jptIndex, iptIndex)
+                 // Assuming ipt <= jpt from calculation earlier
+                 final int i0 = iptIndex;
+                 final int j0 = jptIndex;
+                 // Calculate index in packed storage (assuming lower triangle column-wise or upper triangle row-wise)
+                 // Formula for index(j,i) where j>=i is j*(j+1)/2 + i
+                 final int ih = j0 * (j0 + 1) / 2 + i0;
 
-                // Set the off-diagonal second derivatives of the Lagrange functions and
-                // the initial quadratic model.
+                 // Get required values for the update formula
+                 final double xipt = interpolationPoints.getEntry(nfm, iptIndex); // Displacement of point nf along axis ipt
+                 final double xjpt = interpolationPoints.getEntry(nfm, jptIndex); // Displacement of point nf along axis jpt
+                 final double tmp = xipt * xjpt;
+                 final double fipt = fAtInterpolationPoints.getEntry(ipt); // Value at point ipt
+                 final double fjpt = fAtInterpolationPoints.getEntry(jpt); // Value at point jpt
 
+                 if (tmp == ZERO) {
+                    // Avoid division by zero; set second derivative estimate to zero
+                    modelSecondDerivativesValues.setEntry(ih, ZERO);
+                    // Optionally, log a warning that a second derivative could not be estimated due to zero step product.
                  } else {
-                zMatrix.setEntry(0, nfxm, recip);
-                zMatrix.setEntry(nfm, nfxm, recip);
-                zMatrix.setEntry(ipt, nfxm, -recip);
-                zMatrix.setEntry(jpt, nfxm, -recip);
-
-                final int ih = ipt * (ipt - 1) / 2 + jpt - 1;
-                final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);
-                modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);
-                throw new PathIsExploredException(); // XXX
+                    // Update Hessian element H(jptIndex, iptIndex)
+                    modelSecondDerivativesValues.setEntry(ih, (fbeg - fipt - fjpt + f) / tmp);
                  }
-        } while (getEvaluations() < npt);
-    } // prelim
+            } // End model updates block
+
+        } // End loop over nfm (generating points 1..npt)
+
+    } // end prelim method
+} // end helper class definition
