diff --git a/tmp/571ab7f1-697e-42d1-b2e0-6bbcbc32209d_buggy.java b/tmp/739f5909-b665-4cbd-9ca2-94e541553cbc_fixed.java
index da3f951..7f2628d 100644
--- a/tmp/571ab7f1-697e-42d1-b2e0-6bbcbc32209d_buggy.java
+++ b/tmp/739f5909-b665-4cbd-9ca2-94e541553cbc_fixed.java
@@ -1,174 +1,273 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils; // Assuming StringUtils is available
+
+// NOTE: This code assumes the existence and correctness of the following helper methods within the same class:
+// - isDigits(String): Checks if a string contains only Unicode digits. Returns false for null/empty.
+// - isAllZeros(String): Checks if a string contains only '0'. Returns true for null/empty.
+// - createInteger(String): Creates an Integer, potentially throwing NumberFormatException. Handles hex.
+// - createLong(String): Creates a Long, potentially throwing NumberFormatException.
+// - createBigInteger(String): Creates a BigInteger, potentially throwing NumberFormatException.
+// - createFloat(String): Creates a Float, potentially throwing NumberFormatException.
+// - createDouble(String): Creates a Double, potentially throwing NumberFormatException.
+// - createBigDecimal(String): Creates a BigDecimal, potentially throwing NumberFormatException.
+
+public class NumberUtils { // Renamed class for context, replace with actual class name if different
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
+     * or exponent and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
+     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (ignoring case), it
      * will be interpreted as a hexadecimal integer. Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
-    public static Number createNumber(String str) throws NumberFormatException {
+    public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
+            // Leading -- apparently causes issues with BigDecimal parsing, see LANG-411
+            // Returning null for compatibility with the original code's intent, although throwing might be more consistent.
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
+            // Validate hex digits after the prefix
+            int p = (str.startsWith("-") ? 1 : 0) + 2;
+            if (p >= str.length()){
+                 throw new NumberFormatException(str + " is not a valid number."); // e.g., "0x" or "-0X"
+            }
+            for(int i = p; i < str.length(); i++){
+               final char ch = str.charAt(i);
+               // Check for valid hex characters
+               if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')){
+                    throw new NumberFormatException(str + " is not a valid number."); // Invalid hex char
+               }
+            }
+            // Assuming createInteger correctly handles hex syntax and range (possibly returning BigInteger)
+            try {
                  return createInteger(str);
+            } catch (final NumberFormatException nfe) {
+                // Rethrow if createInteger fails, indicating an issue it couldn't handle (e.g., range if no BigInteger support)
+                 throw new NumberFormatException(str + " is not a valid number. " + nfe.getMessage());
+            }
         }
-        char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
 
-        if (decPos > -1) {
+        final char lastChar = str.charAt(str.length() - 1);
+        String numeric; // The part of the string excluding the final qualifier character, if any
 
-            if (expPos > -1) {
-                if (expPos < decPos) {
-                    throw new NumberFormatException(str + " is not a valid number.");
+        final int decPos = str.indexOf('.');
+        int expPos = str.indexOf('e'); // Find first 'e' or 'E'
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
         }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+
+        // Check for invalid trailing exponent indicator (e.g., "123e")
+        if (expPos > -1 && expPos == str.length() - 1) {
+            throw new NumberFormatException(str + " is not a valid number.");
         }
-            dec = null;
+
+        // Handle Type Qualifiers (L, F, D)
+        if (lastChar == 'l' || lastChar == 'L') {
+            // Qualifier must be the last char, and cannot follow an exponent marker directly (e.g., "1eL")
+            // It also must not have a decimal point.
+            if (decPos == -1 && expPos == -1) {
+                // Check if the character before 'L' is 'e' or 'E' - this check seems redundant due to expPos == -1
+                //numeric = str.substring(0, str.length() - 1);
+                 numeric = str.substring(0, str.length() - 1);
+                 // Validate content: should be digits only, optional leading sign
+                 if ( (numeric.startsWith("-") || numeric.startsWith("+")) && numeric.length() == 1 ){
+                      throw new NumberFormatException(str + " is not a valid number."); // Only a sign
                  }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
+                 // Use isDigits helper (assumed to exist)
+                 if ( (numeric.startsWith("-") && !isDigits(numeric.substring(1)) ) ||
+                      (numeric.startsWith("+") && !isDigits(numeric.substring(1)) ) ||
+                      (!numeric.startsWith("-") && !numeric.startsWith("+") && !isDigits(numeric)) ) {
+                      throw new NumberFormatException(str + " is not a valid number.");
                  }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                 try {
+                    // Assumes createLong handles numeric correctly
                     return createLong(numeric);
-                        } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
+                } catch (final NumberFormatException nfe) {
+                    // Fallback to BigInteger if Long range exceeded
+                    // Assumes createBigInteger handles numeric correctly
                     return createBigInteger(numeric);
-
                 }
+            }
+            // Invalid format for Long (e.g., has '.', 'e', or 'E', or invalid sequence like "1eL")
+            throw new NumberFormatException(str + " is not a valid number.");
+        }
+
+        if (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D') {
+            // Qualifier must be the last char, cannot follow exponent marker directly (e.g., "1eF")
+            if (expPos != -1 && expPos == str.length() - 2) {
                  throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+            }
+            numeric = str.substring(0, str.length() - 1);
+
+            // Helper check: is the numeric part mathematically zero? (Handles "0", "0.0", "0e0", etc.)
+            final boolean allZeros = isNumericZero(numeric);
+
+            if (lastChar == 'f' || lastChar == 'F') {
                 try {
-                        Float f = NumberUtils.createFloat(numeric);
+                    final Float f = createFloat(numeric);
+                    // Check precision / range. isInfinite or 0.0F when !allZeros indicate issues.
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
+                    // Otherwise, Float lacks precision or range, fall through to Double/BigDecimal
+                } catch (final NumberFormatException nfe) {
+                    // Format error in 'numeric'? Fall through might hide it.
+                    // Maintain original fall-through behavior.
+                }
+            }
 
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
+            // Handle 'd'/'D' and fall-through from 'f'/'F'
             try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                final Double d = createDouble(numeric);
+                // Check precision / range. isInfinite or 0.0D when !allZeros indicate issues.
+                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                // Otherwise, Double lacks precision or range, fall through to BigDecimal
+            } catch (final NumberFormatException nfe) {
+                // Format error in 'numeric'? Fall through might hide it.
             }
+
+            // Final fallback for F/f/D/d is BigDecimal
             try {
                 return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
+            } catch (final NumberFormatException e) {
+                // If BigDecimal also fails, the numeric part itself is invalid.
                  throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
 
+        // No valid F/f/D/d/L/l qualifier found. Auto-detect type from 'str'.
+        // Check for invalid trailing letters (already checked for e/E ending and type qualifiers)
+        // Allow trailing '.' (LANG-521)
+        if (Character.isLetter(lastChar)) {
+             throw new NumberFormatException(str + " is not a valid number.");
         }
+
+        // Auto-detect: Integer types if no '.', no 'e'/'E', and doesn't end with '.'
+        if (decPos == -1 && expPos == -1) {
+             if (lastChar == '.') { // Handle "123." as float type (LANG-521)
+                // Fall through to float type logic below
              } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
-            }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                 // Try Integer -> Long -> BigInteger
                  try {
                      return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                 } catch (final NumberFormatException nfe) { /* ignore */ }
                  try {
                      return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                 } catch (final NumberFormatException nfe) { /* ignore */ }
+                 // Final fallback for integer-like strings
                  return createBigInteger(str);
+             }
+        }
 
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Auto-detect: Float types if has '.', has 'e'/'E', or ends with '.'
+        final boolean allZeros = isNumericZero(str);
         try {
-                    Float f = createFloat(str);
+            final Float f = createFloat(str);
             if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                 return f;
             }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+        } catch (final NumberFormatException nfe) { /* ignore */ }
         try {
-                    Double d = createDouble(str);
+            final Double d = createDouble(str);
             if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                 return d;
             }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+        } catch (final NumberFormatException nfe) { /* ignore */ }
 
+        // Final fallback for float-like strings
         return createBigDecimal(str);
+    }
 
+    /**
+     * Helper method to check if the string numerically represents zero.
+     * Handles optional sign, decimal point, and exponent.
+     * Assumes {@code isAllZeros(String)} helper exists.
+     * @param str The string to check.
+     * @return {@code true} if the string numerically represents zero.
+     */
+    private static boolean isNumericZero(final String str) {
+        if (StringUtils.isEmpty(str)) {
+            return true; // Consistent with isAllZeros(null/empty)
+        }
+        // Find exponent marker
+        int realExpPos = str.indexOf('e');
+        if (realExpPos == -1) {
+            realExpPos = str.indexOf('E');
+        }
+        // Consider only the significand part (before exponent)
+        String significand = str;
+        if (realExpPos != -1) {
+            significand = str.substring(0, realExpPos);
+        }
+        // Remove leading sign
+        if (significand.startsWith("-") || significand.startsWith("+")) {
+            significand = significand.substring(1);
         }
+        // Check if all characters in the significand are '0' or '.'
+        for (int i = 0; i < significand.length(); i++) {
+            final char c = significand.charAt(i);
+            if (c != '0' && c != '.') {
+                return false; // Found a non-zero digit
             }
         }
+        // At this point, all digits are '0' or '.', need to ensure there's at least one '0' if not empty
+        // An empty significand (e.g. from "+e1") should perhaps be invalid number, caught elsewhere.
+        // A significand of just "." is invalid number, caught by createXXX methods.
+        // A significand of "0", "0.", ".0", "0.0" etc. are all numerically zero.
+        // Our loop correctly identifies these cases as returning true.
+        return true;
+    }
+
+    // Dummy implementations of required helpers (replace with actual implementations)
+    private static boolean isDigits(final String str) {
+        if (StringUtils.isEmpty(str)) {
+            return false;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (!Character.isDigit(str.charAt(i))) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    // Assume createXXX methods exist and correctly parse or throw NumberFormatException.
+    // Example stubs:
+    private static Integer createInteger(final String str) throws NumberFormatException { return Integer.decode(str); }
+    private static Long createLong(final String str) throws NumberFormatException { return Long.valueOf(str); }
+    private static BigInteger createBigInteger(final String str) throws NumberFormatException { return new BigInteger(str); }
+    private static Float createFloat(final String str) throws NumberFormatException { return Float.valueOf(str); }
+    private static Double createDouble(final String str) throws NumberFormatException { return Double.valueOf(str); }
+    private static BigDecimal createBigDecimal(final String str) throws NumberFormatException { return new BigDecimal(str); }
+    private static boolean isAllZeros(String str) { return StringUtils.isEmpty(str) || str.matches("^[0]+$"); } // Simplified example
+
+}
\ No newline at end of file
