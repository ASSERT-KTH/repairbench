diff --git a/tmp/2bd48063-31e9-41db-a59b-fa863ada9029_buggy.java b/tmp/70ff36c5-a20a-4eaa-bb99-8256ddccba87_fixed.java
index da3f951..77134ce 100644
--- a/tmp/2bd48063-31e9-41db-a59b-fa863ada9029_buggy.java
+++ b/tmp/70ff36c5-a20a-4eaa-bb99-8256ddccba87_fixed.java
@@ -1,174 +1,230 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// NOTE: Assumes existence of StringUtils.isBlank and internal helper methods:
+// isAllZeros(String), createInteger(String), createLong(String), createBigInteger(String),
+// createFloat(String), createDouble(String), createBigDecimal(String)
+// These helpers are expected to handle basic format checks and throw NumberFormatException.
+// These would typically be private static methods within the NumberUtils class itself.
+
+public class NumberUtils { // Renamed back to original class name for context
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
+     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (or
+     * <code>0X</code> or <code>-0X</code>), it will be interpreted as a
+     * hexadecimal integer.  Values with leading <code>0</code>'s will not
+     * be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
+        // '--' is invalid. Java's standard parsers will throw an exception for this anyway.
         if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
-            return null;
+            throw new NumberFormatException(str + " is not a valid number.");
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+        // Handle hex numbers (delegating parsing logic to helper methods)
+        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
+            // The original code delegated to createInteger. Assuming createInteger (or a similar helper)
+            // correctly handles hex format and potential conversion to Long or BigInteger if the value exceeds Integer limits.
             return createInteger(str);
         }
+
         char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
+        String mant; // Mantissa part (before decimal or exponent)
+        String exp;  // Exponent part (digits after 'e' or 'E')
+
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // Correctly find the exponent indicator ('e' or 'E')
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        if (decPos > -1) {
+        // Check for type qualifiers (L, F, D) at the end of the string
+        if (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L') {
+            int endPos = str.length() - 1; // Position of the qualifier
+            String numeric = str.substring(0, endPos); // The numeric part without the qualifier
 
-            if (expPos > -1) {
-                if (expPos < decPos) {
-                    throw new NumberFormatException(str + " is not a valid number.");
+            // Parse the numeric part to determine its characteristics for validation and checks
+            int numericDecPos = numeric.indexOf('.');
+            int numericExpPos = numeric.indexOf('e');
+            if (numericExpPos == -1) {
+                numericExpPos = numeric.indexOf('E');
             }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+            boolean numericHasExp = numericExpPos > -1;
+
+            // Basic structural validation of the numeric part:
+            // - Exponent indicator ('e'/'E') cannot be the last character of the numeric part (e.g., "1eF")
+            if (numericHasExp && numericExpPos == numeric.length() - 1) {
+                throw new NumberFormatException(str + " is not a valid number.");
             }
-            dec = null;
+            // - Exponent indicator must appear after the decimal point if both exist (e.g., "1e.5F" is invalid)
+            if (numericDecPos > -1 && numericHasExp && numericExpPos < numericDecPos) {
+                throw new NumberFormatException(str + " is not a valid number.");
             }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
+
+            // Extract mantissa and exponent from the numeric part for the 'allZeros' check.
+            // This check helps determine if a zero result from Float/Double parsing is due to underflow or if the number was actually zero.
+            if (numericDecPos > -1) { // Numeric part has a decimal point
+                mant = numeric.substring(0, numericDecPos);
+                exp = numericHasExp ? numeric.substring(numericExpPos + 1) : null;
+            } else { // Numeric part has no decimal point
+                mant = numericHasExp ? numeric.substring(0, numericExpPos) : numeric;
+                exp = numericHasExp ? numeric.substring(numericExpPos + 1) : null;
             }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
+            // Assuming isAllZeros(null) returns true
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l':
                 case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // A Long type must not have a decimal point or an exponent part
+                    if (numericDecPos > -1 || numericHasExp) {
+                        throw new NumberFormatException(str + " is not a valid number.");
+                    }
+                    // Delegate final format validation (e.g., non-digits, empty string, "-") to createLong/createBigInteger
                     try {
-                            return createLong(numeric);
+                        return createLong(numeric); // Attempt to parse as Long
                     } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                        // If Long parsing fails (likely due to overflow), attempt BigInteger
+                        return createBigInteger(numeric); // Throws NFE if format is invalid (e.g., "-")
                     }
-                        return createBigInteger(numeric);
 
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
                 case 'f':
                 case 'F':
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        Float f = createFloat(numeric);
+                        // Check if Float provides a reasonable representation:
+                        // - Not infinite (overflow)
+                        // - Not zero due to underflow, unless the original number's mantissa and exponent were all zeros
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
+                            return f; // Float is adequate
                         }
+                        // Otherwise, Float representation is not suitable, fall through to try Double
+                    } catch (NumberFormatException nfe) { /* Ignore NFE from createFloat */ }
+                    // Fall through intended
 
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
                 case 'd':
                 case 'D':
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
-                        }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        Double d = createDouble(numeric);
+                        // Check if Double provides a reasonable representation:
+                        // - Not infinite (overflow)
+                        // - Not zero due to underflow, unless the original number's mantissa and exponent were all zeros
+                        // Corrected: use doubleValue() for comparison instead of floatValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                            return d; // Double is adequate
                         }
+                        // Otherwise, Double representation is not suitable, fall through to try BigDecimal
+                    } catch (NumberFormatException nfe) { /* Ignore NFE from createDouble */ }
                     try {
+                        // If Float/Double are not suitable (due to precision, overflow, underflow), use BigDecimal
                         return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
+                    } catch (NumberFormatException e) { /* Ignore NFE from BigDecimal */ }
+                    // Fall through intended
+
+                default: // Should not be reachable due to the outer 'if' checking the qualifier characters
+                    break;
             }
-                    //$FALL-THROUGH$
-                default :
+            // If execution reaches here, parsing failed for 'F' or 'D' suffix types at all stages (Float, Double, BigDecimal)
             throw new NumberFormatException(str + " is not a valid number.");
 
-            }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
         } else {
-                exp = null;
+            // No type qualifier: parse the full string 'str' and determine the best type
+            boolean hasDecPoint = decPos > -1;
+            boolean hasExp = expPos > -1;
+
+            // Basic structural validation of the string:
+            // - Exponent indicator ('e'/'E') cannot be the last character (e.g., "1e")
+            if (hasExp && expPos == str.length() - 1) {
+                throw new NumberFormatException(str + " is not a valid number.");
             }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+            // - Exponent indicator must appear after the decimal point if both exist (e.g., "1e.5" is invalid)
+            if (hasDecPoint && hasExp && expPos < decPos) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+
+            // Extract mantissa and exponent from the full string for the 'allZeros' check
+            if (hasDecPoint) { // Has decimal point
+                mant = str.substring(0, decPos);
+                exp = hasExp ? str.substring(expPos + 1) : null;
+            } else { // No decimal point
+                mant = hasExp ? str.substring(0, expPos) : str;
+                exp = hasExp ? str.substring(expPos + 1) : null;
+            }
+            // Assuming isAllZeros(null) returns true
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+            if (!hasDecPoint && !hasExp) {
+                // String has no decimal and no exponent, likely an integer type (Integer, Long, BigInteger)
+                // Let helper methods handle specific format errors (e.g., non-digits, empty, "-")
                 try {
                     return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* ignore, try next type */ }
                 try {
                     return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
-                return createBigInteger(str);
+                } catch (NumberFormatException nfe) { /* ignore, try next type */ }
+                // Use BigInteger for potentially very large integers or if others fail format check
+                return createBigInteger(str); // Throws NFE if invalid format
 
             } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                // String has a decimal point or an exponent, likely a floating-point type (Float, Double, BigDecimal)
                 try {
                     Float f = createFloat(str);
+                    // Check if Float provides a reasonable representation
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* ignore, try next type */ }
                 try {
                     Double d = createDouble(str);
+                    // Check if Double provides a reasonable representation
+                    // Corrected: use doubleValue() for comparison instead of floatValue()
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                } catch (NumberFormatException nfe) { /* ignore, try next type */ }
+                // Use BigDecimal for large or precise numbers, or if others fail format check/precision check
+                return createBigDecimal(str); // Throws NFE if invalid format
             }
-
-                return createBigDecimal(str);
-
         }
     }
+
+    // --- Assume helper methods (isAllZeros, createInteger, etc.) are defined elsewhere ---
+    // --- Also assume StringUtils.isBlank is available ---
+    // Dummy helper methods for compilation context (replace with actual implementations)
+    private static class StringUtils { static boolean isBlank(String s) { return s == null || s.trim().isEmpty(); } }
+    private static boolean isAllZeros(String s) { if (s == null) return true; for(char c: s.toCharArray()) if (c != '0') return false; return !s.isEmpty(); } // Basic impl.
+    private static Integer createInteger(String s) { return Integer.decode(s); } // Simplistic impl.
+    private static Long createLong(String s) { return Long.valueOf(s); } // Simplistic impl.
+    private static BigInteger createBigInteger(String s) { return new BigInteger(s); }
+    private static Float createFloat(String s) { return Float.valueOf(s); }
+    private static Double createDouble(String s) { return Double.valueOf(s); }
+    private static BigDecimal createBigDecimal(String s) { return new BigDecimal(s); }
+
 }
\ No newline at end of file
