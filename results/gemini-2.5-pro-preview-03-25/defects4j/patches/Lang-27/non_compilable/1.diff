diff --git a/tmp/f9ed9be9-1a40-4bf6-84b4-d2b0a92a0774_buggy.java b/tmp/780380a0-10d3-4be5-b743-43eae144da38_fixed.java
index da3f951..84a2657 100644
--- a/tmp/f9ed9be9-1a40-4bf6-84b4-d2b0a92a0774_buggy.java
+++ b/tmp/780380a0-10d3-4be5-b743-43eae144da38_fixed.java
@@ -1,174 +1,340 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+// NOTE: The following imports would be needed based on the context
+// import org.apache.commons.lang3.StringUtils;
+
 /**
  * <p>Turns a string value into a java.lang.Number.</p>
  *
  * <p>First, the value is examined for a type qualifier on the end
  * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
  * trying to create successively larger types from the type specified
  * until one is found that can represent the value.</p>
  *
  * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
+ * or exponent and then try successively larger types from <code>Integer</code> to
  * <code>BigInteger</code> and from <code>Float</code> to
  * <code>BigDecimal</code>.</p>
  *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
+ * <p>If the string starts with <code>0x</code>, <code>0X</code>, <code>#</code>,
+ * or leading zero, it will be interpreted using {@link Integer#decode(String)},
+ * {@link Long#decode(String)} or {@link BigInteger#BigInteger(String, int)}.
+ * The input string must not have a type qualifier suffix for these forms.
+ * (Modification: Hex numbers with 'L' suffix are handled). </p>
  *
  * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
  *
  * <p>This method does not trim the input string, i.e., strings with leading
  * or trailing spaces will generate NumberFormatExceptions.</p>
  *
  * @param str  String containing a number, may be null
  * @return Number created from the string
  * @throws NumberFormatException if the value cannot be converted
  */
-    public static Number createNumber(String str) throws NumberFormatException {
+public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
+    // lang-3 requirement: reject blank strings
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
-        if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
+    // -- LANG-1006 avoid potential issues with BigDecimal constructor for values like "" or "-"
+    final String trimmed = str.trim(); // Used for specific checks, original str used for parsing
+    if (trimmed.startsWith("--")) {
+        // BigDecimal constructor parses "--" as 0 but fails on "--1.1"
+        // Return null to keep compatibility with previous behavior for "--"
+        // But throw for other "--" cases, consistent with most parsers failing double sign
+        if (str.equals("--")) {
             return null;
+        } else {
+            throw new NumberFormatException(str + " is not a valid number.");
+        }
     }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
+    if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
+        // Handle Hexadecimal Numbers
+        int startDigits = (str.startsWith("-") ? 3 : 2); // Index past "0x" or "-0x"
+        if (str.length() <= startDigits) { // Case like "0x" or "-0X"
+             throw new NumberFormatException(str + " is not a valid number.");
         }
-        char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
 
-        if (decPos > -1) {
+        final char lastChar = str.charAt(str.length() - 1);
+        final boolean isLong = (lastChar == 'l' || lastChar == 'L');
+        final String hexString = isLong ? str.substring(0, str.length() - 1) : str;
 
-            if (expPos > -1) {
-                if (expPos < decPos) {
+        // Ensure hex part is not empty after stripping 'L'
+        if (isLong && hexString.length() <= startDigits) { // Case like "0xL" or "-0XL"
              throw new NumberFormatException(str + " is not a valid number.");
         }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
+
+        // Use standard decode methods which handle "0x" prefix and potential ranges
+        try {
+            // Try Long first as it covers Integer range and handles large hex
+            // Long.decode handles the sign and "0x" prefix.
+             return Long.decode(hexString);
+        } catch (final NumberFormatException nfeLong) {
+             // If Long.decode fails (e.g., too large), try BigInteger
+             // BigInteger constructor needs hex string without prefix, handle sign separately
+             String digits = hexString.substring(startDigits);
+             BigInteger bigIntResult;
+             try {
+                 bigIntResult = new BigInteger(digits, 16);
+             } catch (final NumberFormatException nfeBig) {
+                 // If BigInteger also fails, the format is invalid
+                 throw new NumberFormatException("For input string: \"" + str + "\""); // Match JVM error style
              }
-            mant = str.substring(0, decPos);
-        } else {
+             // Apply sign if needed
+             if (hexString.startsWith("-")) {
+                 bigIntResult = bigIntResult.negate();
+             }
+             return bigIntResult;
+        }
+    }
+
+    // Standard Number Parsing (non-hex)
+    final char lastChar = str.charAt(str.length() - 1);
+    final boolean hasQualifier = (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L');
+    // Use original string for parsing, but strip qualifier for logic checks and specific parsers
+    final String numberStr = hasQualifier ? str.substring(0, str.length() - 1) : str;
+
+    // Early exit for simple invalid formats after stripping qualifier
+    if (numberStr.isEmpty() || numberStr.equals(".") || numberStr.equals("-") || numberStr.equals("+")) {
+         throw new NumberFormatException(str + " is not a valid number.");
+    }
+
+    final int decPos = numberStr.indexOf('.');
+    final int expPos = Math.max(numberStr.indexOf('e'), numberStr.indexOf('E'));
+
+    // --- Start Structural Validation of numberStr ---
+    // LANG-638: Exponent validation
     if (expPos > -1) {
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+        if (expPos + 1 >= numberStr.length()) { // Exponent marker is last char ("1e", "1.0e")
+             throw new NumberFormatException(str + " is not a valid number.");
         }
-            dec = null;
+        // Check char immediately after exponent marker
+        final char charAfterExp = numberStr.charAt(expPos + 1);
+        final boolean validExpChar = (charAfterExp == '+' || charAfterExp == '-' || Character.isDigit(charAfterExp));
+        if (!validExpChar) {
+             throw new NumberFormatException(str + " is not a valid number."); // e.g. "1e.", "1ea"
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
+        // Ensure exponent part itself has digits after potential sign
+        String expPart = numberStr.substring(expPos + 1);
+        if (expPart.length() > 0 && (expPart.charAt(0) == '+' || expPart.charAt(0) == '-')) {
+            expPart = expPart.substring(1); // Check digits after sign
+        }
+        if (expPart.isEmpty() || !expPart.chars().allMatch(Character::isDigit)) {
+             throw new NumberFormatException(str + " is not a valid number."); // e.g. "1e+", "1e-", "1e+a"
+        }
+
+        if (decPos > -1 && expPos < decPos) { // Exponent marker before decimal ("1e2.3")
+             throw new NumberFormatException(str + " is not a valid number.");
+        }
+    }
+    // Decimal point validation
+    if (decPos > -1) {
+         // Check for multiple decimal points
+         if (numberStr.indexOf('.', decPos + 1) != -1) {
+              throw new NumberFormatException(str + " is not a valid number."); // e.g. "1.2.3"
+         }
+    }
+    // --- End Structural Validation ---
+
+
+    // --- Prepare for isAllZeros check (used for Float/Double precision fallback) ---
+    // Based on the structure of numberStr
+    String mant, dec, exp;
+    if (decPos > -1) {
+        // Re-calculate effective exponent position for splitting based on potentially validated numberStr
+        final int effExpPos = Math.max(numberStr.indexOf('e'), numberStr.indexOf('E'));
+        if (effExpPos > -1) { // Has decimal and exponent
+            mant = numberStr.substring(0, decPos);
+            dec = numberStr.substring(decPos + 1, effExpPos);
+            exp = numberStr.substring(effExpPos + 1);
+        } else { // Has decimal, no exponent
+            mant = numberStr.substring(0, decPos);
+            dec = numberStr.substring(decPos + 1);
+            exp = null;
+        }
+    } else { // No decimal
+        final int effExpPos = Math.max(numberStr.indexOf('e'), numberStr.indexOf('E'));
+        if (effExpPos > -1) { // No decimal, has exponent
+            mant = numberStr.substring(0, effExpPos);
+            dec = null;
+            exp = numberStr.substring(effExpPos + 1);
+        } else { // No decimal, no exponent
+            mant = numberStr;
+            dec = null;
             exp = null;
         }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+    }
+    // Assumes isAllZeros helper handles null/empty/sign correctly
+    final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);
+
+
+    // --- Main Parsing Logic ---
+    if (hasQualifier) {
+        // Use 'numberStr' (without qualifier) for parsing qualified types
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                // Long format: No decimal, no exponent, digits (optional leading '-')
+                 if (decPos == -1 && expPos == -1 &&
+                     (numberStr.matches("-?\\d+"))) { // Check basic integer format
                     try {
-                            return createLong(numeric);
-                        } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                        return Long.valueOf(numberStr);
+                    } catch (final NumberFormatException nfe) {
+                        // Fallback for numbers larger than Long.MAX_VALUE
+                        return new BigInteger(numberStr);
                     }
-                        return createBigInteger(numeric);
+                 }
+                throw new NumberFormatException(str + " is not a valid number."); // Invalid format for 'L'
 
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
             case 'f':
             case 'F':
                 try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                    final Float f = Float.valueOf(numberStr);
+                    // Prevent returning 0.0f if the input string had non-zeros (precision loss)
+                    // Also prevent returning Infinity if Double/BigDecimal might work
+                    if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {
                         return f;
                     }
+                    // Fall through if Float is Inf or zero due to precision loss
+                } catch (final NumberFormatException nfe) {
+                     // Fall through if Float format is invalid (e.g., range)
+                }
+                // Fallthrough intended
 
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
             case 'd':
             case 'D':
                 try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    final Double d = Double.valueOf(numberStr);
+                    // Prevent returning 0.0d if the input string had non-zeros (precision loss)
+                    // Also prevent returning Infinity if BigDecimal might work
+                    if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {
                          return d;
                     }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                    // Fall through if Double is Inf or zero due to precision loss
+                } catch (final NumberFormatException nfe) {
+                     // Fall through if Double format is invalid (e.g., range)
                 }
+                // Fallthrough intended
+
+                // Try BigDecimal as last resort for F/D qualifiers
                 try {
-                        return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
+                     // Handles ranges beyond Float/Double and avoids precision loss for zero
+                    return new BigDecimal(numberStr);
+                } catch (final NumberFormatException ignored) {
+                    // If BigDecimal also fails after F/D failed/fell-through
+                    throw new NumberFormatException(str + " is not a valid number.");
                 }
-                    //$FALL-THROUGH$
             default:
+                 // Should not happen with current qualifiers
+                throw new NumberFormatException(str + " is not a valid number."); // Should be unreachable
+        }
+
+    } else {
+        // No qualifier: Try Integer -> Long -> BigInteger OR Float -> Double -> BigDecimal
+        // Use 'numberStr' for parsing here as well
+        if (expPos == -1 && decPos == -1) {
+             // Looks like an integer type
+             try {
+                 return Integer.valueOf(numberStr);
+             } catch (final NumberFormatException nfeInt) {
+                 try {
+                     return Long.valueOf(numberStr);
+                 } catch (final NumberFormatException nfeLong) {
+                     try {
+                         return new BigInteger(numberStr);
+                     } catch (final NumberFormatException nfeBig) {
+                         // If all integer types fail, throw exception
                          throw new NumberFormatException(str + " is not a valid number.");
-
                      }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
                  }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
-                try {
-                    return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
-                try {
-                    return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
              }
-                return createBigInteger(str);
-
         } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Looks like a floating point type
+            // LANG-521: Handle trailing decimal point "2." correctly -> parsed as Float/Double/BigDecimal
             try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                final Float f = Float.valueOf(numberStr);
+                 // Prevent 0.0f due to precision loss if !allZeros
+                 // Do not return Float.Inf/-Inf if Double/BigDecimal might work
+                 if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {
                     return f;
                 }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+            } catch (final NumberFormatException nfeFloat) {
+                // ignore, try Double
             }
             try {
-                    Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                final Double d = Double.valueOf(numberStr);
+                 // Prevent 0.0d due to precision loss if !allZeros
+                 // Do not return Double.Inf/-Inf if BigDecimal might work
+                 if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {
                      return d;
                  }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+            } catch (final NumberFormatException nfeDouble) {
+                 // ignore, try BigDecimal
             }
+            try {
+                // Final fallback for floating point numbers
+                return new BigDecimal(numberStr);
+            } catch (final NumberFormatException e) {
+                 // If Float/Double/BigDecimal all fail, the format is invalid
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+    }
+}
+
+// Helper methods assumed to exist in the same class or be imported (like StringUtils.isBlank)
+
+/**
+ * <p>Checks if the string contains only Unicode digits.</p>
+ * A decimal point is not a Unicode digit and returns false.
+ * Used by createNumber.
+ * @param str the String to check, may be null
+ * @return true if only contains digits, false otherwise
+ */
+// static boolean isDigits(final String str) { ... } // Replace with regex or keep original
+
+/**
+ * <p>Checks if the string represents all zeros.</p>
+ * Handles optional sign. Used by createNumber.
+ * @param str the string to check, may be null or empty
+ * @return true if represents zero, false otherwise
+ */
+private static boolean isAllZeros(String str) {
+    if (str == null || str.isEmpty()) {
+        return true; // Treat null/empty as zero for this check's purpose
+    }
+    int start = 0;
+    if (str.charAt(0) == '-' || str.charAt(0) == '+') {
+        if (str.length() == 1) return false; // Only sign
+        start = 1;
+    }
+    for (int i = start; i < str.length(); i++) {
+        if (str.charAt(i) != '0' && str.charAt(i) != '.') { // Allow decimal point in zero check? Original didn't parse parts fully. Let's allow '.'
+             if (str.charAt(i) == '.') continue; // Allow decimal point within zero parts
+             return false; // Found a non-zero digit
+        }
+    }
+    // Check if it was just "." or "-." or "+."
+    if(str.matches("[\\-\\+]?\\.+")) return false; // String was only sign and/or dots
 
-                return createBigDecimal(str);
+    return true; // All characters were '0' or '.' (after optional sign)
+}
 
+// Dummy StringUtils for compilation if needed
+private static class StringUtils {
+    public static boolean isBlank(final CharSequence cs) {
+        int strLen;
+        if (cs == null || (strLen = cs.length()) == 0) {
+            return true;
+        }
+        for (int i = 0; i < strLen; i++) {
+            if (!Character.isWhitespace(cs.charAt(i))) {
+                return false;
+            }
         }
+        return true;
     }
 }
