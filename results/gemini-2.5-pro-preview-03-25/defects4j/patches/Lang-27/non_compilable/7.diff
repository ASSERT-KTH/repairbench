diff --git a/tmp/0198a595-b331-4858-afa8-57085a64e5fb_buggy.java b/tmp/f135ae29-a806-4ba2-8855-8a601ab7706c_fixed.java
index da3f951..8623c8a 100644
--- a/tmp/0198a595-b331-4858-afa8-57085a64e5fb_buggy.java
+++ b/tmp/f135ae29-a806-4ba2-8855-8a601ab7706c_fixed.java
@@ -1,174 +1,246 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils;
+
+// Added dummy NumberUtils methods and isDigits/isAllZeros for context,
+// assuming they exist elsewhere as in the original library.
+// In a real fix, these would not be part of the createNumber method itself.
+class NumberUtilsDummyContext {
+    // Assume these methods exist and function as expected based on context
+    public static Float createFloat(String str) { return Float.valueOf(str); }
+    public static Double createDouble(String str) { return Double.valueOf(str); }
+    public static Integer createInteger(String str) { return Integer.decode(str); } // decode handles 0x/-0x
+    public static Long createLong(String str) { return Long.decode(str); } // decode handles 0x/-0x (though 0x check is earlier)
+    public static BigInteger createBigInteger(String str) { return new BigInteger(str); }
+    public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+    // Assume isDigits checks if a string contains only digits
+    private static boolean isDigits(String str) {
+        if (StringUtils.isEmpty(str)) { return false; }
+        for (int i = 0; i < str.length(); i++) {
+            if (!Character.isDigit(str.charAt(i))) { return false; }
+        }
+        return true;
+    }
+    // Assume isAllZeros checks if a string is non-null and contains only '0'
+    private static boolean isAllZeros(String str) {
+        if (str == null) { return true; } // Treat null exponent/mantissa as all zeros for check logic
+        for (int i = str.length() - 1; i >= 0; i--) {
+            if (str.charAt(i) != '0') { return false; }
+        }
+        return str.length() > 0; // Empty string is not all zeros
+    }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
+            // Handled by createInteger (which should use Integer.decode or similar)
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        // BUGFIX: Corrected calculation for expPos: find the first 'e' or 'E'
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
+        // Parse the string into mantissa, decimal, and exponent portions
         if (decPos > -1) {
-
+            // String has a decimal point
             if (expPos > -1) {
-                if (expPos < decPos) {
+                // String has both decimal point and exponent
+                if (expPos < decPos) { // Check exponent marker is after decimal point
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
+                // String has a decimal point but no exponent
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
+            // String has no decimal point
             if (expPos > -1) {
+                // String has an exponent but no decimal point
+                // Check that exponent marker is not the first character unless it's the only one?
+                // No, substring(0, expPos) handles expPos=0 correctly (empty string mantissa)
+                // e.g. "e1", "E1" are invalid via NFE later, "e" throws SIOOBE from lastChar, "-e1" invalid via NFE
                 mant = str.substring(0, expPos);
             } else {
+                // String has neither decimal point nor exponent
                 mant = str;
             }
             dec = null;
         }
+
         if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // Potentially a type suffix found ('f', 'F', 'd', 'D', 'l', 'L')
             if (expPos > -1 && expPos < str.length() - 1) {
+                // Extract exponent part (number characters between exponent marker and suffix)
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
+            // The numeric part of the string (excluding the suffix)
             String numeric = str.substring(0, str.length() - 1);
+            // isAllZeros check requires mantissa and exponent's numeric part to be all zeros.
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
+                    // Check if the string is valid for Long/BigInteger (no decimal, no exponent found *before* L)
                     if (dec == null
-                        && exp == null
+                        && exp == null // Check that 'exp' section (between 'E' and 'L') is null.
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
+                            // Attempt to create a Long
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                            // If value is too large for Long, fall back to BigInteger
+                            // NFE handled below by createBigInteger
                         }
+                        // Return BigInteger if Long creation failed or for very large numbers
                         return createBigInteger(numeric);
-
                     }
+                    // Invalid format for 'L' suffix (e.g., "1.2L", "1e-5L")
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        // Attempt to create a Float
+                        Float f = NumberUtilsDummyContext.createFloat(numeric); // Use dummy context for clarity
+                        // Check for infinities and precision issues (zero representation)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                            // Valid Float representation
                             return f;
                         }
-
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        // Ignore NFE, indicates invalid float format (handled by falling through)
                     }
+                    // Fall through to try Double if Float failed or had precision issues
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Attempt to create a Double
+                        Double d = NumberUtilsDummyContext.createDouble(numeric); // Use dummy context for clarity
+                        // Check for infinities and precision issues (zero representation)
+                        // BUGFIX: Use d.doubleValue() for comparison, not d.floatValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                            // Valid Double representation
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        // Ignore NFE, indicates invalid double format (handled by falling through)
                     }
                     try {
+                        // If Double failed or had precision issues, fall back to BigDecimal
                         return createBigDecimal(numeric);
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                        // If BigDecimal creation also fails, the original string is likely invalid
+                        // NFE raised below after default case
                     }
+                    // Fall through to default throw if all fails
                     //$FALL-THROUGH$
                 default :
+                    // The last character is not a recognized number type suffix
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+            // Last character is a digit or '.', so no type suffix
+            // Extract exponent part if present (all characters after exponent marker)
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                 // No decimal point or exponent => integer type
+                 // This path relies on the parsers throwing NumberFormatException if needed
                 try {
+                    // Attempt to create an Integer
                     return createInteger(str);
                 } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                    // Ignore NFE (too large for Integer)
                 }
                 try {
+                    // Attempt to create a Long
                     return createLong(str);
                 } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                     // Ignore NFE (too large for Long)
                 }
+                 // If too large for Long, use BigInteger
                 return createBigInteger(str);
 
             } else {
-                //Must be a float,double,BigDec
+                 // Has decimal point or exponent => floating-point type
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
+                    // Attempt to create a Float
                     Float f = createFloat(str);
+                    // Check for infinities and precision issues (zero representation)
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                    // Ignore NFE
                 }
                 try {
+                    // Attempt to create a Double
                     Double d = createDouble(str);
+                    // Check for infinities and precision issues (zero representation)
+                    // BUGFIX: Use d.doubleValue() for comparison, not d.floatValue()
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                     // Ignore NFE
                 }
-
+                 // Default to BigDecimal for highest precision or edge cases
                 return createBigDecimal(str);
-
             }
         }
     }
+} // End of dummy context class
\ No newline at end of file
