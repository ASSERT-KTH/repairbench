diff --git a/tmp/b1718be8-a7a1-41c6-8f1d-fc500f4eeae4_buggy.java b/tmp/19b7f01e-aeac-4222-912f-b55c30f43f30_fixed.java
index da3f951..7c1a018 100644
--- a/tmp/b1718be8-a7a1-41c6-8f1d-fc500f4eeae4_buggy.java
+++ b/tmp/19b7f01e-aeac-4222-912f-b55c30f43f30_fixed.java
@@ -1,174 +1,369 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Assuming access to org.apache.commons.lang3.StringUtils
+import org.apache.commons.lang3.StringUtils;
+
+// Assuming helper methods (isDigits, isAllZeros, create*) are defined in the actual class.
+// For context, minimal implementations might be:
+// private static boolean isDigits(String str) { ... } // Checks if string contains only digits
+// private static boolean isAllZeros(String str) { ... } // Checks if string contains only '0's (or is null/empty)
+// private static Integer createInteger(String str) { return Integer.valueOf(str); } // Or Integer.decode(str) if needed elsewhere
+// private static Long createLong(String str) { return Long.valueOf(str); }
+// private static BigInteger createBigInteger(String str) { return new BigInteger(str); }
+// private static Float createFloat(String str) { return Float.valueOf(str); }
+// private static Double createDouble(String str) { return Double.valueOf(str); }
+// private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
+     * <p>If the string starts with <code>0x</code>, <code>0X</code>, <code>#</code>,
+     * <code>-0x</code>, <code>-0X</code>, or <code>-#</code> (representing hex),
+     * it will be interpreted using {@link BigInteger#BigInteger(String, int)}.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
-    public static Number createNumber(String str) throws NumberFormatException {
+    public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
-            return null;
+
+        // Simplified handling of hex prefixes
+        if (str.startsWith("0x") || str.startsWith("0X") || str.startsWith("-0x") || str.startsWith("-0X") || str.startsWith("#")) {
+            int sign = str.startsWith("-") ? -1 : 1;
+            String hexdigits;
+            if (sign == -1) { // Check prefix after sign
+                 if (str.startsWith("0x", 1) || str.startsWith("0X", 1)) {
+                     hexdigits = str.substring(3);
+                 } else if (str.startsWith("#", 1)) {
+                     hexdigits = str.substring(2);
+                 } else { // Should not happen with outer check, but safeguard
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
+            } else { // Check prefix at start
+                if (str.startsWith("0x") || str.startsWith("0X")) {
+                    hexdigits = str.substring(2);
+                } else { // Starts with #
+                    hexdigits = str.substring(1);
+                }
+            }
+
+            if (hexdigits.isEmpty()) {
+                 throw new NumberFormatException(str + " is not a valid number."); // e.g., "0x", "-#"
             }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
+
+            try {
+                // Use BigInteger for hex, then check if it fits Long/Integer
+                BigInteger val = new BigInteger(hexdigits, 16);
+                if (sign == -1) {
+                    val = val.negate();
+                }
+                // Check if it fits in Long
+                if (val.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && val.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {
+                    // Check if it fits in Integer
+                    if (val.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0 && val.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) >= 0) {
+                        return Integer.valueOf(val.intValue());
+                    }
+                    return Long.valueOf(val.longValue());
                 }
-        char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+                // Doesn't fit Long, return BigInteger
+                return val;
+            } catch (NumberFormatException e) {
+                // Invalid hex digits
+                throw new NumberFormatException(str + " is not a valid number. " + e.getMessage());
+            }
+        }
+
+        // Standard Number Parsing (Non-Hex)
+        final char lastChar = str.charAt(str.length() - 1);
+        final String mant;
+        final String dec;
+        final String exp;
 
-        if (decPos > -1) {
+        final int decPos = str.indexOf('.');
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-            if (expPos > -1) {
-                if (expPos < decPos) {
+        // String representing the number, without potential type suffix
+        String numeric = str;
+        boolean hasSuffix = false;
+        // Check for type suffix (L, F, D)
+        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {
+            final char suffixUpper = Character.toUpperCase(lastChar);
+            if (suffixUpper == 'L' || suffixUpper == 'D' || suffixUpper == 'F') {
+                // Check for invalid structure like "1eL" or "-L"
+                if (expPos != -1 && expPos == str.length() - 2) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
+                if (str.length() == 1 || (str.length() == 2 && (str.charAt(0) == '+' || str.charAt(0) == '-'))) {
+                    throw new NumberFormatException(str + " is not a valid number."); // e.g. "L", "-L"
                 }
-            mant = str.substring(0, decPos);
+                hasSuffix = true;
+                numeric = str.substring(0, str.length() - 1); // Remove suffix
             } else {
-            if (expPos > -1) {
-                mant = str.substring(0, expPos);
+                // Invalid trailing letter
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+
+        // Validate structure of the 'numeric' string part
+        final int decPosNumeric = numeric.indexOf('.');
+        int expPosNumeric = numeric.indexOf('e');
+        if (expPosNumeric == -1) {
+            expPosNumeric = numeric.indexOf('E');
+        }
+
+        // Basic structural checks on 'numeric' string
+        if (expPosNumeric > -1) {
+            // Cannot end with 'e'/'E'
+            if (expPosNumeric == numeric.length() - 1) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+            // Cannot have 'e' immediately after sign unless part of number like "-e" or "+e"
+            if (expPosNumeric == 0 || ((numeric.startsWith("-") || numeric.startsWith("+")) && expPosNumeric == 1)) {
+                // Allow only if sign belongs to the number itself, not exponent, handled by parsers.
+                // But explicitly disallow "e1", "-e1" etc. where e is first meaningful char.
+                 if (!Character.isDigit(numeric.charAt(expPosNumeric - (numeric.startsWith("-")||numeric.startsWith("+") ? 2:1 ))) && numeric.charAt(expPosNumeric - (numeric.startsWith("-")||numeric.startsWith("+") ? 2:1 )) != '.')
+                    throw new NumberFormatException(str + " is not a valid number.");
+            }
+            // Exponent must appear after decimal point if both exist
+            if (decPosNumeric > -1 && expPosNumeric < decPosNumeric) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+        // Cannot have multiple decimal points
+        if (decPosNumeric > -1 && numeric.indexOf('.', decPosNumeric + 1) != -1) {
+             throw new NumberFormatException(str + " is not a valid number.");
+        }
+        // Cannot have multiple exponent markers
+        if (expPosNumeric > -1) {
+             int ePos2 = numeric.indexOf('e', expPosNumeric + 1);
+             if (ePos2 == -1) ePos2 = numeric.indexOf('E', expPosNumeric + 1);
+             if (ePos2 != -1) {
+                  throw new NumberFormatException(str + " is not a valid number.");
+             }
+        }
+         // Cannot end with a sign unless part of exponent
+         if (numeric.endsWith("+") || numeric.endsWith("-")) {
+             if (expPosNumeric != numeric.length() - 2) {
+                  throw new NumberFormatException(str + " is not a valid number.");
+             }
+         }
+         // Protect against "--" cases within the numeric part if not caught earlier
+         if (numeric.contains("--") || numeric.contains("+-") || numeric.contains("-+")) {
+             // Check if it's part of exponent e.g., "1e-1" is valid
+             int badSeq = numeric.indexOf("--");
+             if (badSeq == -1) badSeq = numeric.indexOf("+-");
+             if (badSeq == -1) badSeq = numeric.indexOf("-+");
+             if (badSeq != -1 && badSeq != expPosNumeric + 1) { // Allow if immediately after 'e'/'E'
+                  throw new NumberFormatException(str + " is not a valid number.");
+             }
+         }
+
+        // Split the 'numeric' string for the allZeros check
+        if (decPosNumeric > -1) {
+            if (expPosNumeric > -1) {
+                mant = numeric.substring(0, decPosNumeric);
+                dec = numeric.substring(decPosNumeric + 1, expPosNumeric);
+                exp = numeric.substring(expPosNumeric + 1);
             } else {
-                mant = str;
+                mant = numeric.substring(0, decPosNumeric);
+                dec = numeric.substring(decPosNumeric + 1);
+                exp = null;
             }
+        } else { // No decimal point in numeric
+            if (expPosNumeric > -1) {
+                mant = numeric.substring(0, expPosNumeric);
                 dec = null;
-        }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+                exp = numeric.substring(expPosNumeric + 1);
             } else {
+                mant = numeric;
+                dec = null;
                 exp = null;
             }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
+        }
+
+        // Calculate allZeros based on mantissa/decimal/exponent parts derived from the 'numeric' string
+        String mantAndDec = mant + (dec == null ? "" : dec);
+        // Remove sign for allZeros check
+        if (!mantAndDec.isEmpty() && (mantAndDec.charAt(0) == '-' || mantAndDec.charAt(0) == '+')) {
+            mantAndDec = mantAndDec.substring(1);
+        }
+        String expDigits = exp;
+        if (expDigits != null && !expDigits.isEmpty() && (expDigits.charAt(0) == '-' || expDigits.charAt(0) == '+')) {
+            expDigits = expDigits.substring(1);
+        }
+        // isAllZeros: true if null, empty, or only '0' digits
+        final boolean allZeros = isAllZeros(mantAndDec) && isAllZeros(expDigits);
+
+
+        // --- Parsing Logic ---
+        if (hasSuffix) {
+            final char suffixUpper = Character.toUpperCase(lastChar);
+            switch (suffixUpper) {
                 case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Ensure L suffix is only for integer types (no '.', no 'e') in the 'numeric' part
+                    if (decPosNumeric != -1 || expPosNumeric != -1) {
+                        throw new NumberFormatException(str + " is not a valid number.");
+                    }
+                    // Validate integer format using helper (on numeric part)
+                    String intDigits = numeric;
+                     if (!intDigits.isEmpty() && (intDigits.charAt(0) == '-' || intDigits.charAt(0) == '+')) {
+                         intDigits = intDigits.substring(1);
+                     }
+                     if (!isDigits(intDigits)) { // Check digits after potential sign removal
+                          throw new NumberFormatException(str + " is not a valid number.");
+                     }
+
+                    // Try Long, then BigInteger on the 'numeric' part
                     try {
+                        // Use createLong for consistency
                         return createLong(numeric);
-                        } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
+                    } catch (final NumberFormatException nfe) { /* Fall through */ }
+                    try {
                         return createBigInteger(numeric);
-
-                    }
+                    } catch (final NumberFormatException e2) {
+                        // Should not happen if structure passed initial checks
                         throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
+                    }
+
                 case 'F':
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        final Float f = createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                    } catch (final NumberFormatException nfe) {
+                        throw new NumberFormatException(str + " is not a valid number.");
                     }
                     // $FALL-THROUGH$
-                case 'd' :
                 case 'D':
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = createDouble(numeric);
+                        // Fixed: use d.doubleValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                    } catch (final NumberFormatException nfe) {
+                        throw new NumberFormatException(str + " is not a valid number.");
                     }
+                    // $FALL-THROUGH$
+                // Try BigDecimal for F/D cases if Float/Double failed or had issues
                 try {
                     return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
+                } catch (final NumberFormatException e) {
                     throw new NumberFormatException(str + " is not a valid number.");
+                }
+            }
+        } else { // No Suffix
+            // Determine if it looks like integer or float based on presence of '.' or 'e'/'E' in the *original* string
+            final boolean looksLikeInteger = decPos == -1 && expPos == -1;
 
+            if (looksLikeInteger) {
+                // Validate integer format using helper (on original string)
+                 String intDigits = str;
+                 if (!intDigits.isEmpty() && (intDigits.charAt(0) == '-' || intDigits.charAt(0) == '+')) {
+                     intDigits = intDigits.substring(1);
                  }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
+                 if (!isDigits(intDigits)) {
+                     throw new NumberFormatException(str + " is not a valid number.");
                  }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+
+                // Try Integer -> Long -> BigInteger using the original string 'str'
                 try {
-                    return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                    return createInteger(str); // Use appropriate createInteger method (handles decode?)
+                } catch (final NumberFormatException nfe) { /* ignore */ }
                 try {
                     return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (final NumberFormatException nfe) { /* ignore */ }
+                try {
                     return createBigInteger(str);
-
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                } catch (final NumberFormatException e2) {
+                    throw new NumberFormatException(str + " is not a valid number.");
+                }
+            } else { // Looks like float/double/decimal (has '.' or 'e'/'E')
+                // Try Float -> Double -> BigDecimal using the original string 'str'
                 try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                    final Float f = createFloat(str);
+                    // Handle trailing '.' which becomes NaN by checking isNaN
+                    if (!f.isNaN() && !(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (final NumberFormatException nfe) { /* ignore */ }
                 try {
-                    Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                    final Double d = createDouble(str);
+                     // Handle trailing '.' which becomes NaN by checking isNaN
+                    if (!d.isNaN() && !(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
-
+                } catch (final NumberFormatException nfe) { /* ignore */ }
+                try {
+                    // BigDecimal handles trailing '.' correctly, and is the final fallback
                     return createBigDecimal(str);
+                } catch (final NumberFormatException e2) {
+                    throw new NumberFormatException(str + " is not a valid number."); // Final attempt failed
+                }
+            }
+        }
+        // Should not be reachable due to exhaustive checks/returns/throws
+        throw new NumberFormatException(str + " is not a valid number.");
+    }
 
+    // --- Assume helper methods are defined in the actual class ---
+    // Required signature for isAllZeros (based on its usage)
+    private static boolean isAllZeros(String str) {
+        if (str == null || str.isEmpty()) {
+            return true;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (str.charAt(i) != '0') {
+                return false;
             }
         }
+        return true;
     }
+
+    // Required signature for isDigits (based on its usage)
+    private static boolean isDigits(final String str) {
+         if (StringUtils.isEmpty(str)) {
+             return false;
+         }
+         for (int i = 0; i < str.length(); i++) {
+             if (!Character.isDigit(str.charAt(i))) {
+                 return false;
+             }
+         }
+         return true;
+     }
+
+     // Assume create* methods map to standard Java parsing methods:
+     private static Integer createInteger(String s) { return Integer.valueOf(s); }
+     private static Long createLong(String s) { return Long.valueOf(s); }
+     private static BigInteger createBigInteger(String s) { return new BigInteger(s); }
+     private static Float createFloat(String s) { return Float.valueOf(s); }
+     private static Double createDouble(String s) { return Double.valueOf(s); }
+     private static BigDecimal createBigDecimal(String s) { return new BigDecimal(s); }
