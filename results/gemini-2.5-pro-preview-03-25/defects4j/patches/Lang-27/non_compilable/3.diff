diff --git a/tmp/b1ad91fc-42b3-4be0-9ec3-82484cb8b907_buggy.java b/tmp/4c8b39f1-6cf0-4803-bf5f-30c475c8885e_fixed.java
index da3f951..b799494 100644
--- a/tmp/b1ad91fc-42b3-4be0-9ec3-82484cb8b907_buggy.java
+++ b/tmp/4c8b39f1-6cf0-4803-bf5f-30c475c8885e_fixed.java
@@ -1,174 +1,266 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils;
+
+// Assume necessary helper methods like isDigits, isAllZeros, createFloat, createDouble, etc., exist in the actual class context.
+// The following definition includes the fixed createNumber method.
+
+public class NumberUtils { // Placeholder class definition
+
+    // --- Assume helper methods like these exist ---
+    private static boolean isDigits(String str) {
+        if (StringUtils.isEmpty(str)) return false;
+        for (char c : str.toCharArray()) if (!Character.isDigit(c)) return false;
+        return true;
+    }
+    private static boolean isAllZeros(String str) {
+        if (str == null) return true; // Treat null as all zeros
+        for (char c : str.toCharArray()) if (c != '0') return false;
+        return !str.isEmpty(); // Treat empty string as true (no non-zero digits)
+    }
+    private static Float createFloat(String str) { return Float.valueOf(str); }
+    private static Double createDouble(String str) { return Double.valueOf(str); }
+    private static Integer createInteger(String str) { return Integer.decode(str); } // decode handles 0x, 0, # prefixes
+    private static Long createLong(String str) { return Long.decode(str); } // decode handles 0x, 0, # prefixes
+    private static BigInteger createBigInteger(String str) {
+         if (str.startsWith("0x") || str.startsWith("-0x")) {
+             int index = str.startsWith("-") ? 3 : 2;
+             // Ensure the hex part is not empty after removing prefix
+             if (index >= str.length()) {
+                 throw new NumberFormatException("\"" + str + "\" is not a valid number.");
+             }
+             return new BigInteger(str.substring(index), 16);
+        }
+        return new BigInteger(str);
+    }
+    private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+    // --- End of assumed helper methods ---
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
-    public static Number createNumber(String str) throws NumberFormatException {
+    public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
+             // Use createBigInteger for hex parsing, as it handles arbitrary size and base 16.
+             // Note: Relies on a createBigInteger implementation that handles "0x" prefix.
+             // If createInteger/Long handle hex adequately, original code might be sufficient,
+             // but BigInteger is safer for potentially large hex values.
+            try {
+                 return createBigInteger(str);
+             } catch (NumberFormatException nfe) {
+                  // If BigInteger parsing itself fails for hex format
+                  throw new NumberFormatException(str + " is not a valid number.");
+             } catch (Exception e) { // Catch other potential exceptions from BigInteger
+                 throw new NumberFormatException(str + " is not a valid number.");
              }
-        char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
-
-        if (decPos > -1) {
+        }
+        final char lastChar = str.charAt(str.length() - 1);
+        final String mant;
+        final String dec;
+        final String exp;
+        final int decPos = str.indexOf('.');
+        // final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Original buggy line
+        final int expPos = Math.max(str.indexOf('e'), str.indexOf('E')); // FIX 1: Correct exponent position calculation
 
+        // Validate positions, check for invalid formats like ".e1", "1e", "1.", "."
         if (expPos > -1) {
+             // Exponent cannot be final char, must be digit/sign after 'e'/'E'
+             if (expPos == str.length() - 1) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+             }
+             // Exponent cannot come before decimal point
             if (expPos < decPos) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
+             // Check for sign after exponent indicator that is the last character
+             final char expSignChar = str.charAt(expPos + 1);
+             if ((expSignChar == '+' || expSignChar == '-') && expPos + 1 == str.length() - 1) {
+                    throw new NumberFormatException(str + " is not a valid number.");
+             }
+        }
+        // Reject "." or "-." alone
+        if (decPos > -1 && str.length() == decPos + 1) { // Ends in "."
+             if (str.length() == 1 || (str.length() == 2 && str.charAt(0) == '-')) {
+                  throw new NumberFormatException(str + " is not a valid number.");
+             }
+         }
+
+
+        // Parse mantissa and decimal part
+        if (decPos > -1) {
+            if (expPos > -1) {
                 dec = str.substring(decPos + 1, expPos);
             } else {
-                dec = str.substring(decPos + 1);
+                dec = str.substring(decPos + 1); // Handles trailing "." (substring(len) -> "")
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
+
+        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {
+            // Type qualifier present
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            final String numeric = str.substring(0, str.length() - 1);
+            // Use original isAllZeros check logic (mantissa and exponent)
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                case 'l' : case 'L' :
+                    // Check for valid long format (no decimal, no exponent in numeric part, digits only)
+                    if (dec == null && exp == null && (numeric.startsWith("-") ? isDigits(numeric.substring(1)) : isDigits(numeric))) {
                          try {
+                            // Use createLong for parsing potential octal/hex if createLong handles it
                             return createLong(numeric);
-                        } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
+                        } catch (final NumberFormatException nfe) {
+                             // Fallback for large numbers
+                             // Use createBigInteger which should handle large integers
                             return createBigInteger(numeric);
-
+                        }
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+
+                case 'f' : case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                        final Float f = createFloat(numeric);
+                         // Check for NaN/Infinity/precision loss
+                        if (!(f.isInfinite() || (f.floatValue() == 0.0f && !allZeros))) {
+                            // Additional check: ensure value didn't become NaN if numeric wasn't "NaN"
+                            if (f.isNaN() && !"NaN".equalsIgnoreCase(numeric)) {
+                                // Fall through if parsing resulted in NaN unexpectedly
+                            } else {
                                 return f;
                             }
+                        }
+                    } catch (final NumberFormatException nfe) {
+                        // Fall through
+                    }
+                    // Fallthrough intended
 
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
+                case 'd' : case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = createDouble(numeric);
+                        // Check for NaN/Infinity/precision loss - FIX 2: Use doubleValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0d && !allZeros))) {
+                             // Additional check: ensure value didn't become NaN if numeric wasn't "NaN"
+                             if (d.isNaN() && !"NaN".equalsIgnoreCase(numeric)) {
+                                 // Fall through if parsing resulted in NaN unexpectedly
+                             } else {
                                  return d;
                              }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        }
+                    } catch (final NumberFormatException nfe) {
+                        // Fall through
                     }
                     try {
+                        // Last resort for F/f/D/d is BigDecimal
                         return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
+                    } catch (final NumberFormatException e) {
+                        // If BigDecimal fails, throw NFE below
                     }
-                    //$FALL-THROUGH$
-                default :
-                    throw new NumberFormatException(str + " is not a valid number.");
+                    // Fallthrough intended
 
+                default : // Invalid qualifier
+                    throw new NumberFormatException(str + " is not a valid number.");
             }
+             // Only reached if fallthrough from F/D fails BigDecimal parsing
+            throw new NumberFormatException(str + " is not a valid number.");
+
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+            // No type qualifier (last char is digit or '.')
             if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+                exp = str.substring(expPos + 1);
             } else {
                 exp = null;
             }
+            // Use original isAllZeros check logic (mantissa and exponent)
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // Integer type
                 try {
+                    // Use createInteger for parsing potential octal/hex if createInteger handles it
                     return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (final NumberFormatException nfe) { /* Ignore */ }
                 try {
+                    // Use createLong for parsing potential octal/hex if createLong handles it
                     return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (final NumberFormatException nfe) { /* Ignore */ }
+                 // Use createBigInteger which should handle large integers
                 return createBigInteger(str);
 
             } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                // Float/Double/BigDecimal type
                 try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                    final Float f = createFloat(str);
+                     // Check for NaN/Infinity/precision loss
+                    if (!(f.isInfinite() || (f.floatValue() == 0.0f && !allZeros))) {
+                         if (f.isNaN() && !"NaN".equalsIgnoreCase(str)) {
+                             // Ignore if parsing resulted in NaN unexpectedly
+                         } else {
                              return f;
                          }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
                     }
+                } catch (final NumberFormatException nfe) { /* Ignore */ }
                 try {
-                    Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                    final Double d = createDouble(str);
+                     // Check for NaN/Infinity/precision loss - FIX 2: Use doubleValue()
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0d && !allZeros))) {
+                         if (d.isNaN() && !"NaN".equalsIgnoreCase(str)) {
+                             // Ignore if parsing resulted in NaN unexpectedly
+                         } else {
                              return d;
                          }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
                     }
-
+                } catch (final NumberFormatException nfe) { /* Ignore */ }
                 return createBigDecimal(str);
-
+            }
         }
     }
 }
\ No newline at end of file
