diff --git a/tmp/0b19fed3-e00e-40d2-83c1-3e8222b437cf_buggy.java b/tmp/964b6cb9-c33c-4831-9628-c7a8beb6c194_fixed.java
index da3f951..40cc963 100644
--- a/tmp/0b19fed3-e00e-40d2-83c1-3e8222b437cf_buggy.java
+++ b/tmp/964b6cb9-c33c-4831-9628-c7a8beb6c194_fixed.java
@@ -1,174 +1,244 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string
-     * @throws NumberFormatException if the value cannot be converted
-     */
-    public static Number createNumber(String str) throws NumberFormatException {
+import java.math.BigDecimal;
+import java.math.BigInteger;
+// Required imports if these helpers are not in the same class or static imports are not used:
+// import org.apache.commons.lang3.StringUtils;
+
+// Assume the following helper methods exist and function correctly:
+// StringUtils.isBlank(String)
+// createInteger(String) -> Creates Integer/Long/BigInteger, handles hex/octal/decimal like decode()
+// createLong(String) -> Creates Long
+// createBigInteger(String) -> Creates BigInteger
+// createFloat(String) -> Creates Float
+// createDouble(String) -> Creates Double
+// createBigDecimal(String) -> Creates BigDecimal
+
+public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
-        if (StringUtils.isBlank(str)) {
+    // lang-3 does not have StringUtils.isBlank
+    // Replace StringUtils.isBlank with manual check for null or whitespace-only strings
+    // if (StringUtils.isBlank(str)) {
+    if (str.trim().isEmpty()) { // Simple replacement, assumes trim is acceptable performance-wise
+                                 // Or iterate through string to check for non-whitespace chars if trim is too slow/allocates too much.
         throw new NumberFormatException("A blank string is not a valid number");
     }
+    // LANG-574 blocks -- parsing
     if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
-            return null;
+        // Leading -- is rejected by new BigDecimal(String) in Java 7+
+        // and seems unintended for this method. Throw NFE for clarity.
+         throw new NumberFormatException(str + " is not a valid number.");
     }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+    // Hexadecimal handling (0x/-0x or 0X/-0X)
+    if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
+         // Check for minimum length (sign + 0x + digit)
+         int sign = (str.startsWith("-") ? 1 : 0);
+         if(str.length() <= sign + 2) { // e.g. "0x", "-0X"
+             throw new NumberFormatException(str + " is not a valid number.");
+         }
+         // Basic check for invalid hex chars after 0x. Further validation delegated.
+         for (int i = sign + 2; i < str.length(); i++) {
+             char c = str.charAt(i);
+             if ((c < '0' || c > '9') && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+             }
+         }
+        // Assuming createInteger handles hex conversion and returns Integer/Long/BigInteger
         return createInteger(str);
     }
+
     char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    String numeric; // Part of string excluding the qualifier
+    boolean hasQualifier = false;
 
-        if (decPos > -1) {
-
-            if (expPos > -1) {
-                if (expPos < decPos) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
-            }
-            dec = null;
-        }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
-            }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+    // Check for type qualifiers L,l,F,f,D,d at the end of the string
+    if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {
+        numeric = str.substring(0, str.length() - 1); // String without the qualifier
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
-                        try {
-                            return createLong(numeric);
-                        } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
-                        return createBigInteger(numeric);
-
+                // Validate Long qualifier: numeric part must not contain ., e, E
+                if (numeric.indexOf('.') != -1 || numeric.indexOf('e') != -1 || numeric.indexOf('E') != -1) {
+                     throw new NumberFormatException(str + " is not a valid number.");
                 }
+                 // Check numeric is not empty or just a sign ("-L" is invalid)
+                if (numeric.isEmpty() || (numeric.length() == 1 && (numeric.charAt(0) == '-' || numeric.charAt(0) == '+'))) {
                      throw new NumberFormatException(str + " is not a valid number.");
+                }
+                hasQualifier = true;
+                break; // Valid L/l qualifier
             case 'f':
             case 'F':
-                    try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
-                        }
-
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
             case 'd':
             case 'D':
-                    try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
+                // Float/Double qualifiers allow ., e, E.
+                // Check numeric is not empty or just a sign ("-f" is invalid)
+                 if (numeric.isEmpty() || (numeric.length() == 1 && (numeric.charAt(0) == '-' || numeric.charAt(0) == '+'))) {
+                    throw new NumberFormatException(str + " is not a valid number.");
                  }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    try {
-                        return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
+                // Further validation delegated to createFloat/Double/BigDecimal
+                hasQualifier = true;
+                break; // Valid F/f/D/d qualifier
             default:
+                // Any other trailing letter is invalid
                  throw new NumberFormatException(str + " is not a valid number.");
-
         }
     } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
+        // No letter qualifier found. Check for other invalid trailing characters.
+        // Allows digits, '.', or '+'/' -' if part of an exponent.
+        if (lastChar == '+' || lastChar == '-') {
+            // Trailing sign must be part of an exponent
+            int expPos = str.lastIndexOf('e'); // Find the last exponent marker
+             if (expPos == -1) {
+                 expPos = str.lastIndexOf('E');
+             }
+             // If a trailing sign exists, it must immediately follow the exponent marker.
+             if (expPos != str.length() - 2) {
+                  throw new NumberFormatException(str + " is not a valid number.");
+             }
+        } else if (lastChar != '.' && !Character.isDigit(lastChar)) {
+            // Any other non-digit, non- '.' trailing char is invalid (covers cases missed above)
+             throw new NumberFormatException(str + " is not a valid number.");
         }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+        // No qualifier, use the full string as the numeric part
+        numeric = str;
+    }
+
+    if (hasQualifier) {
+        // --- Qualified Number Parsing ---
+        switch (lastChar) {
+            case 'l':
+            case 'L':
+                // Structure already validated. Try Long, then BigInteger for range.
                 try {
-                    return createInteger(str);
+                    return createLong(numeric);
                 } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                    // If createLong fails (likely range issue), use BigInteger
+                    return createBigInteger(numeric);
                 }
+            case 'f':
+            case 'F':
                 try {
-                    return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                    Float f = createFloat(numeric);
+                    // Check for infinity and precision loss (using BigDecimal)
+                    if (!f.isInfinite()) {
+                        // Return if non-zero, OR if zero and BigDecimal confirms it's truly zero
+                        if (f.floatValue() != 0.0F || new BigDecimal(numeric).signum() == 0) {
+                            return f;
+                        }
+                        // Else: Float is 0.0 but original string was non-zero -> precision loss, fall through
+                    }
+                    // Fall through if infinite or precision loss occurred
+                } catch (NumberFormatException nfe) { /* Fall through */ }
+                 // FALLTHROUGH intended for F/f -> D/d -> BigDecimal
+            case 'd':
+            case 'D':
+                try {
+                    Double d = createDouble(numeric);
+                    // Check for infinity and precision loss (using BigDecimal)
+                    if (!d.isInfinite()) {
+                        // Use doubleValue() and check if truly zero via BigDecimal
+                        if (d.doubleValue() != 0.0D || new BigDecimal(numeric).signum() == 0) {
+                            return d;
+                        }
+                         // Else: Double is 0.0 but original string was non-zero -> precision loss, fall through
+                    }
+                    // Fall through if infinite or precision loss occurred
+                } catch (NumberFormatException nfe) { /* Fall through */ }
+                // Final fallback: BigDecimal for D/d, or if F/f fell through
+                try {
+                    // BigDecimal constructor does not accept type qualifiers. Use 'numeric'.
+                    return createBigDecimal(numeric);
+                } catch (NumberFormatException e) {
+                    // If createBigDecimal fails, the numeric string is fundamentally invalid.
+                    // Throw NFE based on the original input string for clarity.
+                    throw new NumberFormatException(str + " is not a valid number.");
+                }
+        }
+        // Should be unreachable due to switch logic
+        throw new AssertionError("Unreachable code after qualifier switch.");
+
+    } else {
+        // --- Non-qualified Number Parsing ---
+        // Determine type (integer vs float/double/decimal) from structure.
+        int decPos = numeric.indexOf('.');
+        int expPos = numeric.lastIndexOf('e'); // Use lastIndexOf to catch multiple exponents like "1e2e3"
+        if (expPos == -1) {
+            expPos = numeric.lastIndexOf('E');
         }
-                return createBigInteger(str);
 
+        // Basic structural validation for non-qualified numbers
+        if (expPos > -1) {
+             // Exponent marker cannot be first char (unless after sign) or last char
+             if (expPos == numeric.length() - 1 || expPos == 0 || (expPos == 1 && (numeric.charAt(0)=='+' || numeric.charAt(0)=='-'))) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+             }
+             // Exponent marker cannot appear before a decimal point ("1e2.3" is invalid)
+             // Note: This also catches multiple exponent markers if lastIndexOf is used.
+              if (expPos < decPos && decPos != -1) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+              }
+             // Check char immediately after exponent indicator is digit or sign
+             char charAfterExp = numeric.charAt(expPos + 1);
+             if (charAfterExp != '+' && charAfterExp != '-' && !Character.isDigit(charAfterExp)) {
+                throw new NumberFormatException(str + " is not a valid number.");
+             }
+             // Check that sign in exponent is followed by digits
+             if ((charAfterExp == '+' || charAfterExp == '-') && expPos == numeric.length() - 2) {
+                 throw new NumberFormatException(str + " is not a valid number."); // e.g. "1e+"
+             }
+        }
+        // Check for multiple decimal points? Delegated to createX methods.
+
+        // If no decimal point AND no exponent -> Integer style
+        // Exception: Trailing decimal point ("123.") treated as floating point below.
+        if (decPos == -1 && expPos == -1) {
+            if (lastChar == '.') {
+                // Treat "123." as floating point -> fall through to logic below
             } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                // Integer type: Try Integer -> Long -> BigInteger
+                // Rely on createX methods for full validation (e.g., reject "123a")
+                try {
+                    // Assuming createInteger handles Integer/Long/BigInteger pathway
+                    return createInteger(numeric);
+                } catch (NumberFormatException nfe) { /* ignore */ }
                 try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                    return createLong(numeric);
+                } catch (NumberFormatException nfe) { /* ignore */ }
+                // Final fallback for integer-style numbers
+                return createBigInteger(numeric);
+            }
+        }
+
+        // Has decimal point OR exponent OR ends with '.' -> Float/Double/BigDecimal style
+        try {
+            Float f = createFloat(numeric);
+            // Check for infinity and precision loss (using BigDecimal)
+            if (!f.isInfinite()) {
+                 // Handle "2." -> createFloat("2.") returns 2.0f. signum("2.")=1. Returns f. OK.
+                if (f.floatValue() != 0.0f || new BigDecimal(numeric).signum() == 0) {
                     return f;
                 }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                 // Else: precision loss, fall through
             }
+             // Fall through if infinite or precision loss
+        } catch (NumberFormatException nfe) { /* Fall through */ }
         try {
-                    Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+            Double d = createDouble(numeric);
+            if (!d.isInfinite()) {
+                 if (d.doubleValue() != 0.0d || new BigDecimal(numeric).signum() == 0) {
                      return d;
                  }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                 // Else: precision loss, fall through
             }
-
-                return createBigDecimal(str);
-
+             // Fall through if infinite or precision loss
+        } catch (NumberFormatException nfe) { /* Fall through */ }
+        // Final fallback for float/double/decimal styles
+        try {
+             return createBigDecimal(numeric);
+        } catch (NumberFormatException e) {
+             // If BigDecimal fails here, the string structure is fundamentally invalid.
+            throw new NumberFormatException(str + " is not a valid number.");
         }
     }
 }
\ No newline at end of file
