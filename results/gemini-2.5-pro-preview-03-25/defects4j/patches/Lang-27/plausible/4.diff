diff --git a/tmp/c032ba3a-8ca5-4e1c-9503-93462363ce4f_buggy.java b/tmp/e670fffe-c967-4329-afd5-f9aaf9b5baf6_fixed.java
index da3f951..a983cfd 100644
--- a/tmp/c032ba3a-8ca5-4e1c-9503-93462363ce4f_buggy.java
+++ b/tmp/e670fffe-c967-4329-afd5-f9aaf9b5baf6_fixed.java
@@ -1,174 +1,272 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear
             // to be in specification of class. OS X Java parses it to
-            // a wrong value.
+            // a wrong value. The spec mentions returning null.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
+            // Assuming createInteger correctly handles hexadecimal format
             return createInteger(str);
         }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        int expPos = str.indexOf('e'); // Corrected: Find first 'e'
+        if (expPos == -1) {
+            expPos = str.indexOf('E'); // Or 'E'
+        }
 
-        if (decPos > -1) {
+        // Check for invalid exponent position (e.g., at the very end)
+        if (expPos > -1 && expPos == str.length() - 1) {
+            throw new NumberFormatException(str + " is not a valid number.");
+        }
 
-            if (expPos > -1) {
+        // Split the string into mantissa, decimal, and exponent parts
+        if (decPos > -1) { // Contains a decimal point '.'
+            if (expPos > -1) { // Contains an exponent 'e' or 'E'
+                // Exponent must appear after the decimal point
                 if (expPos < decPos) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+            } else { // No exponent
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
+        } else { // No decimal point '.'
+            if (expPos > -1) { // Contains an exponent 'e' or 'E'
                 mant = str.substring(0, expPos);
-            } else {
+            } else { // No decimal point, no exponent
                 mant = str;
             }
-            dec = null;
+            dec = null; // No decimal part
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
+
+        // Processing based on the last character (potential type suffix)
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // Ends with a potential type suffix
+            // Extract exponent digits if present
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            String numeric = str.substring(0, str.length() - 1); // String without the suffix
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Used for precision checks
+
             switch (lastChar) {
                 case 'l':
                 case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Long requires no decimal point and no exponent marker in the original string
+                    if (dec == null && expPos == -1) {
+                        // Rely on downstream create methods for detailed format validation
+                        // But ensure numeric part isn't empty or just "-"
+                        if (numeric.isEmpty() || numeric.equals("-")) {
+                             throw new NumberFormatException(str + " is not a valid number.");
+                        }
                          try {
                             return createLong(numeric);
                          } catch (NumberFormatException nfe) {
-                            //Too big for a long
-                        }
+                            // If createLong fails (range or format), try BigInteger
+                            try {
                                 return createBigInteger(numeric);
+                            } catch (NumberFormatException nfe2) {
+                                // If BigInteger also fails, the format was fundamentally wrong
+                                throw new NumberFormatException(str + " is not a valid number.");
+                            }
+                         }
+                    }
+                    // Invalid format for Long (had decimal or exponent)
+                    throw new NumberFormatException(str + " is not a valid number.");
 
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
                 case 'f':
                 case 'F':
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        Float f = createFloat(numeric);
+                        // Check for loss of precision (infinity or zero when non-zero)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
+                        // Fall through to Double if precision lost
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        // Ignore NFE (e.g., "1.2.3F") and fall through to Double
                     }
+                    // Fall through
                     //$FALL-THROUGH$
+
                 case 'd':
                 case 'D':
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        Double d = createDouble(numeric);
+                         // Check for loss of precision (infinity or zero when non-zero)
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Corrected check: d.doubleValue()
                             return d;
                         }
+                        // Fall through to BigDecimal if precision lost
                     } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+                        // Ignore NFE and fall through to BigDecimal
                     }
+                     // Fall through
+                     //$FALL-THROUGH$
+
+                default: // Includes fall-through from 'D' and invalid suffixes
                     try {
+                        // Only try BigDecimal if we fell through from F/f/D/d
+                        if (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D') {
                             return createBigDecimal(numeric);
+                        }
                     } catch (NumberFormatException e) {
-                        // ignore the bad number
+                        // Ignore NFE from createBigDecimal if numeric format was bad
                     }
-                    //$FALL-THROUGH$
-                default :
+                    // If suffix was invalid, or BigDecimal failed after fall-through
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+        } else { // Ends with digit or '.' (no type suffix)
+            // Extract exponent digits if present
             if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+                exp = str.substring(expPos + 1);
             } else {
                 exp = null;
             }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+
+            // Determine type: integral or floating point
+            if (dec == null && exp == null) { // No decimal, no exponent: Integral types
+                // Try Integer -> Long -> BigInteger
                 try {
                     return createInteger(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* Ignore */ }
                 try {
                     return createLong(str);
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
-                return createBigInteger(str);
+                } catch (NumberFormatException nfe) { /* Ignore */ }
+                return createBigInteger(str); // Final fallback
 
-            } else {
-                //Must be a float,double,BigDec
+            } else { // Has decimal or exponent: Floating point types
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                // Try Float -> Double -> BigDecimal
                 try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
-                }
+                } catch (NumberFormatException nfe) { /* Ignore */ }
                 try {
                     Double d = createDouble(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) {
-                    // ignore the bad number
+                } catch (NumberFormatException nfe) { /* Ignore */ }
+                return createBigDecimal(str); // Final fallback
+            }
+        }
+    }
+
+    // --- Helper methods assumed to exist in the actual NumberUtils class ---
+    // These are placeholders for context. Do not include them in the final response block.
+    /*
+    private static class StringUtils {
+        public static boolean isBlank(String str) {
+             // Implementation assumed
+             return str == null || str.trim().isEmpty();
+        }
+        public static boolean isEmpty(String str) {
+             // Implementation assumed
+            return str == null || str.length() == 0;
+        }
+    }
+
+    private static boolean isAllZeros(String str) {
+        // Implementation assumed
+        if (str == null) {
+            return true;
+        }
+        for (int i = str.length() - 1; i >= 0; i--) {
+            if (str.charAt(i) != '0') {
+                return false;
+            }
+        }
+        return str.length() > 0;
+    }
+     private static boolean isDigits(String str) {
+         // Implementation assumed
+         if (StringUtils.isEmpty(str)) {
+             return false;
+         }
+         for (int i = 0; i < str.length(); i++) {
+             if (!Character.isDigit(str.charAt(i))) {
+                 return false;
+             }
+         }
+         return true;
+     }
+
+
+    private static Integer createInteger(String str) throws NumberFormatException {
+        // Implementation assumed - handles decimal and 0x/-0x hex
+        return Integer.decode(str); // Example
     }
 
-                return createBigDecimal(str);
+    private static Long createLong(String str) throws NumberFormatException {
+        // Implementation assumed
+        return Long.valueOf(str); // Example
+    }
+
+    private static BigInteger createBigInteger(String str) throws NumberFormatException {
+        // Implementation assumed
+         return new BigInteger(str); // Example
+    }
 
+    private static Float createFloat(String str) throws NumberFormatException {
+        // Implementation assumed
+        return Float.valueOf(str); // Example
     }
+
+    private static Double createDouble(String str) throws NumberFormatException {
+        // Implementation assumed
+        return Double.valueOf(str); // Example
+    }
+
+     private static BigDecimal createBigDecimal(String str) throws NumberFormatException {
+         // Implementation assumed
+         // Note: BigDecimal constructor doesn't allow leading plus signs
+         if (str.startsWith("+")) {
+             throw new NumberFormatException(str + " is not a valid number.");
          }
+         return new BigDecimal(str); // Example
      }
+     */
+    // --- End of assumed helper methods ---
\ No newline at end of file
