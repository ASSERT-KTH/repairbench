diff --git a/tmp/3a249f30-e966-4704-a23a-74280a22dba7_buggy.java b/tmp/aeda51cb-91ac-4319-ac33-5882bb93f1ad_fixed.java
index 735a993..3f63e5c 100644
--- a/tmp/3a249f30-e966-4704-a23a-74280a22dba7_buggy.java
+++ b/tmp/aeda51cb-91ac-4319-ac33-5882bb93f1ad_fixed.java
@@ -1,29 +1,35 @@
     /**
      * Appends an object to the builder padding on the right to a fixed length.
      * The <code>toString</code> of the object is used.
      * If the object is larger than the length, the right hand side is lost.
      * If the object is null, null text value is used.
      *
      * @param obj  the object to append, null uses null text
      * @param width  the fixed field width, zero or negative has no effect
      * @param padChar  the pad character to use
      * @return this, to enable chaining
      */
     public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
         if (width > 0) {
             ensureCapacity(size + width);
             String str = (obj == null ? getNullText() : obj.toString());
             int strLen = str.length();
             if (strLen >= width) {
-                str.getChars(0, strLen, buffer, size);
+                // Original line: str.getChars(0, strLen, buffer, size);
+                // This was wrong because it tried to copy the entire string,
+                // even when strLen > width, leading to potential AIOOBE or
+                // incorrect content if the buffer was large enough but the intent
+                // was to truncate.
+                // The fix is to copy only 'width' characters.
+                str.getChars(0, width, buffer, size);
             } else {
                 int padLen = width - strLen;
-                str.getChars(0, strLen, buffer, size);
+                str.getChars(0, strLen, buffer, size); // Copy the entire string (it fits)
                 for (int i = 0; i < padLen; i++) {
-                    buffer[size + strLen + i] = padChar;
+                    buffer[size + strLen + i] = padChar; // Add padding
                 }
             }
-            size += width;
+            size += width; // The size always increases by 'width'
         }
         return this;
     }
\ No newline at end of file
