diff --git a/tmp/b046d522-dc07-4928-bd49-6466cd184837_buggy.java b/tmp/19506238-b9e3-4957-8be3-7a0a9a6b0385_fixed.java
index fe73b81..dfb64e4 100644
--- a/tmp/b046d522-dc07-4928-bd49-6466cd184837_buggy.java
+++ b/tmp/19506238-b9e3-4957-8be3-7a0a9a6b0385_fixed.java
@@ -1,42 +1,68 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
-            // And to prevent infinite loops, now need this:
-            return _unknownType();
-        } else {
-            // Ok: here's where context might come in handy!
+            // 13-Nov-2015, tatu: Let's try resolving from bounds even without context,
+            //   as per [databind#939]. Use empty bindings.
+            // Also: We must add placeholder otherwise we may end up in infinite loop
+             return _resolveVariableViaBound(type);
+             // Before #939: return _unknownType();
+        }
+        
+        // Ok: have context, resolve variable by name.
         /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
          *   unresolved type variables to handle some cases where bounds
          *   are enough. Let's hope it does not hide real fail cases.
          */
         JavaType actualType = context.findType(name);
         if (actualType != null) {
             return actualType;
         }
+
+        // Not found? Try to resolve from bounds. Check for recursion:
+        // (NOTE: It is absolutely essential to add placeholder BEFORE resolving
+        // bounds, to handle recursive definitions like Enum<T extends Enum<T>>)
+        
+        // Perhaps already resolving it?
+        if (context.isPlaceholder(name)) { // since 2.12
+             return _unknownType();
         }
         
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
-        Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
         /* 29-Jan-2010, tatu: One more problem are recursive types
          *   (T extends Comparable<T>). Need to add "placeholder"
          *   for resolution to catch those.
          */
-        context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+        TypeBindings newBindings = context.withPlaceholder(name);
+        Type[] bounds = type.getBounds();
+        // Note: bounds are optional, but here we are lucky in that implicit
+        // bound of 'Object' is forced if none specified. Hence, bounds[0] is safe.
+
+        /* Important: must resolve bounds with recursive types by using
+         * new context that contains placeholder.
+         */
+        return _constructType(bounds[0], newBindings);
+    }
+
+    // Helper method suggested by changes for [#939]
+    private JavaType _resolveVariableViaBound(TypeVariable<?> type) {
+        // 13-Nov-2015, tatu: Let's try resolving from bounds even without context,
+        //   as per [databind#939]. Use empty bindings.
+        // Also: We must add placeholder otherwise we may end up in infinite loop
+        Type[] bounds = type.getBounds();
+        if (bounds == null || bounds.length == 0) { // Should not happen?
+            return _unknownType();
+        }
+        // Need context for recursive resolution, use empty one.
+        // Important: Must create new instance, can not modify shared empty bindings
+        final String name = type.getName();
+        TypeBindings bindings;
+        if (_context == null) { // _context is the TypeFactory._bindings
+             bindings = TypeBindings.emptyBindings();
+        } else {
+             bindings = _context;
+        }
+        // Use withPlaceholder which should create new instance or handle safely
+        TypeBindings newBindings = bindings.withPlaceholder(name);
+        return _constructType(bounds[0], newBindings);
     }
\ No newline at end of file
