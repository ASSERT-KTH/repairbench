diff --git a/tmp/4348b68a-cc4a-4795-9d2c-f1e4a7e7773c_buggy.java b/tmp/1e2e4304-6920-4635-a577-37915a6b60f2_fixed.java
index fe73b81..1bc688b 100644
--- a/tmp/4348b68a-cc4a-4795-9d2c-f1e4a7e7773c_buggy.java
+++ b/tmp/1e2e4304-6920-4635-a577-37915a6b60f2_fixed.java
@@ -1,42 +1,51 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
-        // 19-Mar-2015: Without context, all we can check are bounds.
+        // 16-Mar-2017, tatu: Context seems to be null quite commonly; need to
+        //    figure out if that is ever expected. It might be if called when
+        //    resolving enclosing class definition itself.
+        // 08-Sep-2019, tatu: As per [databind#2430], seems like we must assume
+        //    Object if no context found.
         if (context == null) {
-            // And to prevent infinite loops, now need this:
+             // Failsafe, assume Object
              return _unknownType();
-        } else {
+        }
+
         // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
-            JavaType actualType = context.findType(name);
+        // [databind#609]: Unresolved ones may be acceptable, use bounds
+        // [databind#1198], [databind#193]: Handle recursive types properly
+        // 08-Sep-2019, tatu: [databind#2430] needs slightly different handling, check `_resolveVariableViaSubTypes()`
+        JavaType actualType = context.findType(name, true); // note: must allow check for definition context
         if (actualType != null) {
+            // [databind#2324]: Need to be able to override with explicit unknown
+             if (actualType.isUnknownType()) {
+                 return _unknownType();
+             }
              return actualType;
         }
-        }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
+        // Bounds may be enough; or, with self-references, might need to add placeholder:
         Type[] bounds = type.getBounds();
+        if (bounds == null || bounds.length == 0) { // against annotation declaration (NEVER null for actual java.lang.reflect.TypeVariable)
+             return _unknownType();
+        }
 
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
+        /* Note: bounds are not referring to context, need to resolve in context of
+         * variable declaration, THEN possibly bind in caller context.
+         * But for now, let's see if using caller context is sufficient...
          */
-        context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+
+        // ZOMG: must use a placeholder to avoid infinite loops...
+        final TypeBindings bindings = context; // TBD: context or empty/new?
+        
+        // 08-Sep-2019, tatu: As per [databind#2430] Need to use different mechanism for
+        //   placeholder/self-ref, for robustness.
+        ResolvedRecursiveType selfRef = new ResolvedRecursiveType(bindings.resolveSelfReferencedClass(name), bindings);
+        bindings._addPlaceholder(name, selfRef);
+
+        // finally, resolve bounds and link type:
+        JavaType boundType = _constructType(bounds[0], bindings);
+
+        selfRef.setReference(boundType);
+        return selfRef;
    }
\ No newline at end of file
