diff --git a/tmp/9b23f779-3a8c-4d22-b2fd-7604fa35995d_buggy.java b/tmp/2da3ebb0-2461-4efd-b87c-9f324a7822d9_fixed.java
index fe73b81..f9a7848 100644
--- a/tmp/9b23f779-3a8c-4d22-b2fd-7604fa35995d_buggy.java
+++ b/tmp/2da3ebb0-2461-4efd-b87c-9f324a7822d9_fixed.java
@@ -1,42 +1,71 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
+            // 11-Jun-2016, tatu: Let's try to actually resolve from bounds; context is null
+            //   pseudo-type, won't contain anything useful
+             //return _resolveVariableViaSubTypes(type, name, context); // placeholder, should replace context
+            // 13-Jun-2016, tatu: Maybe this is wrong; maybe Unknown should be returned...
+             //   Need to revisit [databind#127]
              return _unknownType();
+//            return _resolveVariableViaSubTypes(type, name, TypeBindings.emptyBindings());
         } else {
             // Ok: here's where context might come in handy!
             /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
              *   unresolved type variables to handle some cases where bounds
              *   are enough. Let's hope it does not hide real fail cases.
              */
             JavaType actualType = context.findType(name);
             if (actualType != null) {
                 return actualType;
             }
+
+            // [databind#1828]: If we have already tried resolving this type variable, return Unknown
+            if (context.hasUnresolved(name)) {
+                 return _unknownType();
+            }
         }
 
         /* 29-Jan-2010, tatu: We used to throw exception here, if type was
          *   bound: but the problem is that this can occur for generic "base"
          *   method, overridden by sub-class. If so, we will want to ignore
          *   current type (for method) since it will be masked.
          */
         Type[] bounds = type.getBounds();
 
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
+        /* With type variables we must use bound information.
+         * Theoretically this gets tricky, as there may be multiple
+         * bounds ("... extends A & B"); and optimally we might
+         * want to choose the best match. Also, bounds are optional;
+         * but here we are lucky in that implicit "Object" is
+         * added as bounds if so.
+         * Either way let's just use the first bound, for now, and
+         * worry about better match later on if there is need.
+         */
 
         /* 29-Jan-2010, tatu: One more problem are recursive types
          *   (T extends Comparable<T>). Need to add "placeholder"
          *   for resolution to catch those.
          */
-        context._addPlaceholder(name);
+
+        // 13-Jun-2016, tatu: Handling of recursive types incomplete;
+        //   Specifically, need to establish context for possible inner
+        //   bindings.
+
+        // Bounds can be problematic if they depend on type variable itself;
+        // if so, mark recursive setup, THEN construct. Otherwise can
+        // just proceed. For simple cases like "T extends Number", context
+        // is not needed.
+
+        if (bounds.length == 0) { // is this even possible?
+             return _unknownType();
+        }
+
+        // Ok, regardless, need placeholder to avoid infinite loops
+        context = context.withUnresolved(name); // [databind#1828]
+
+        // And finally, construct type using (first) bound as definition
         return _constructType(bounds[0], context);
     }
