diff --git a/tmp/d067702e-3a44-4691-9b4a-a57f564ad973_buggy.java b/tmp/2ceb8518-5eff-47b9-9fa2-b57cf201e14a_fixed.java
index fe73b81..4d244d1 100644
--- a/tmp/d067702e-3a44-4691-9b4a-a57f564ad973_buggy.java
+++ b/tmp/2ceb8518-5eff-47b9-9fa2-b57cf201e14a_fixed.java
@@ -1,42 +1,57 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
+            // Actually, resolution context should never be null for method/field lookup,
+            // only for direct calls from TypeFactory?
+            // bounds are still potentially useful, see
+            // test `com.fasterxml.jackson.databind.type.TypeResolutionTest#testMoreSpecificType`
             return _unknownType();
-        } else {
+        }
         // Ok: here's where context might come in handy!
         /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
          *   unresolved type variables to handle some cases where bounds
          *   are enough. Let's hope it does not hide real fail cases.
          */
         JavaType actualType = context.findType(name);
         if (actualType != null) {
             return actualType;
         }
-        }
 
         /* 29-Jan-2010, tatu: We used to throw exception here, if type was
          *   bound: but the problem is that this can occur for generic "base"
          *   method, overridden by sub-class. If so, we will want to ignore
          *   current type (for method) since it will be masked.
          */
+        // 19-Mar-2015, tatu: ... also, see [databind#609]; may need to allow use of bounds
+
         Type[] bounds = type.getBounds();
 
+        // No bounds? Need to assume 'Object', via implicit binding (should not happen?)
+        if (bounds == null || bounds.length == 0) {
+            return _unknownType();
+        }
+
         // With type variables we must use bound information.
         // Theoretically this gets tricky, as there may be multiple
         // bounds ("... extends A & B"); and optimally we might
         // want to choose the best match. Also, bounds are optional;
         // but here we are lucky in that implicit "Object" is
         // added as bounds if so.
         // Either way let's just use the first bound, for now, and
         // worry about better match later on if there is need.
 
         /* 29-Jan-2010, tatu: One more problem are recursive types
          *   (T extends Comparable<T>). Need to add "placeholder"
          *   for resolution to catch those.
          */
-        context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+        // 19-Mar-2015, tatu: Use the same placeholder resolution mechanism as _fromClass
+        context = context._addPlaceholder(name); // Add placeholder, get potentially new context instance
+        // Important: must resolve bounds in the context that has placeholder set
+        JavaType boundType = _constructType(bounds[0], context);
+        // And MUST resolve placeholder to get actual recursive type (if any)
+        // Note: requires TypeBindings.resolveSelfReferences to be available and functional
+        return context.resolveSelfReferences(boundType); // Resolve placeholder
     }
\ No newline at end of file
