diff --git a/tmp/a024b542-874e-4ada-8579-eea4856e2ed0_buggy.java b/tmp/9551e937-8b7f-4b20-bd8f-ac19429f2049_fixed.java
index fe73b81..ae1d585 100644
--- a/tmp/a024b542-874e-4ada-8579-eea4856e2ed0_buggy.java
+++ b/tmp/9551e937-8b7f-4b20-bd8f-ac19429f2049_fixed.java
@@ -1,42 +1,59 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
             return _unknownType();
-        } else {
+        }
+        
         // Ok: here's where context might come in handy!
         /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
          *   unresolved type variables to handle some cases where bounds
          *   are enough. Let's hope it does not hide real fail cases.
          */
         JavaType actualType = context.findType(name);
         if (actualType != null) {
             return actualType;
         }
+
+        /* 16-Apr-2015, tatu: Unexpected problem: recursive types with partial
+         *   bindings (like subtype having only some of bindings). If so, need
+         *   to ensure we will check placeholders... Also: must check for direct
+         *   recursion. Fixed as per [databind#728]
+         */
+        if (context.isTryingToResolve(type)) { // see [databind#728]
+             return _unknownType();
         }
+        context.startResolution(type);
 
+        try { // Note: must have final block to ensure clearing of resolution state
             /* 29-Jan-2010, tatu: We used to throw exception here, if type was
              *   bound: but the problem is that this can occur for generic "base"
              *   method, overridden by sub-class. If so, we will want to ignore
              *   current type (for method) since it will be masked.
              */
             Type[] bounds = type.getBounds();
     
             // With type variables we must use bound information.
             // Theoretically this gets tricky, as there may be multiple
             // bounds ("... extends A & B"); and optimally we might
             // want to choose the best match. Also, bounds are optional;
             // but here we are lucky in that implicit "Object" is
             // added as bounds if so.
             // Either way let's just use the first bound, for now, and
             // worry about better match later on if there is need.
+            if (bounds.length == 0) { // this should not happen according to spec
+                 return _unknownType();
+            }
     
             /* 29-Jan-2010, tatu: One more problem are recursive types
              *   (T extends Comparable<T>). Need to add "placeholder"
              *   for resolution to catch those.
              */
             context._addPlaceholder(name);
             return _constructType(bounds[0], context);
+        } finally {
+             context.resolveFinally(type);
+        }
     }
