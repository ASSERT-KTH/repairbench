diff --git a/tmp/3313a726-6871-41bf-92e7-7b16c3002be7_buggy.java b/tmp/33df535b-42d0-43d2-aaff-329c0ad250af_fixed.java
index fe73b81..faff0af 100644
--- a/tmp/3313a726-6871-41bf-92e7-7b16c3002be7_buggy.java
+++ b/tmp/33df535b-42d0-43d2-aaff-329c0ad250af_fixed.java
@@ -1,42 +1,61 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
             return _unknownType();
         } else {
             // Ok: here's where context might come in handy!
             /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
              *   unresolved type variables to handle some cases where bounds
              *   are enough. Let's hope it does not hide real fail cases.
              */
             JavaType actualType = context.findType(name);
             if (actualType != null) {
                 return actualType;
             }
         }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
+        /* 14-Jun-2015, tatu: Let's rewrite steps initiated by [databind#609], as
+         *  part of potentially related [databind#728]. Objective is to avoid
+         *  using recursive type resolution, which gets very confusing.
+         *  Ideal would be to use deferred resolution -- something Collection/Map types
+         *  do -- but that seems like too big a change initially.
+         *
+         *  There are multiple issues: first, should we block type variables for all
+         *  kinds of types, or just specific ones? And second, should we try to
+         *  find "better" bounds, or just use the first one? Current thinking is to
+         *  try to use bounds if no direct match is found; and this is needed to
+         *  resolve non-parameterized generic types like `List l = new ArrayList<String>()`.
+         *  Issue is that this may prevent detection of invalid types in more exotic
+         *  cases. Test `TestGenericsLimits` tries to verify some of potentially
+         *  problematic cases.
          */
+        // Hmmh. Ok, this is another case where we may need to consider recursive
+        // types. Let's add a check here:
+        if (context.hasUnresolved(name)) { // usually means recursive definition
+             return _unknownType();
+        }
+
+        /* And before trying to resolve bounds, let's add temporary binding
+         * to handle recursive definitions like <T extends Comparable<T>>.
+         * NOTE! Need to use TypeBindings, not just generic types, to make
+         * this work: context is required.
+         */
+        TypeBindings newBindings = context.withAdditionalBinding(name, _unknownType());
+
         Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
-        context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+        // With type variables we must use bound information. Theoretically this gets tricky,
+        // as there may be multiple bounds ("... extends A & B"); and optimally we might
+        // want to choose the best match. Also, bounds are optional; but default is 'Object'.
+        // Let's just use the first bound for now (if !null).
+        // [#771]: Should not perhaps use `Object.class` as bound. But for now...
+        if (bounds == null || bounds.length == 0) { // sanity check, shouldn't occur per JVM spec
+             // I think this might be possible if signature is corrupt; if so, return Object/unknown
+            // TBD: Maybe return `Object.class` bound type?
+            return _unknownType();
+        }
+        // And resolve first bound using extended bindings
+        return _constructType(bounds[0], newBindings);
     }
\ No newline at end of file
