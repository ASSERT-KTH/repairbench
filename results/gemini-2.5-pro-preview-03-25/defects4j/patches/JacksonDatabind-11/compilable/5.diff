diff --git a/tmp/7704694c-8ec5-40da-bb8f-e18b886f023f_buggy.java b/tmp/35d019aa-3dc1-4033-982d-198fa89e6b5f_fixed.java
index fe73b81..89e8ea3 100644
--- a/tmp/7704694c-8ec5-40da-bb8f-e18b886f023f_buggy.java
+++ b/tmp/35d019aa-3dc1-4033-982d-198fa89e6b5f_fixed.java
@@ -1,42 +1,58 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
-            // And to prevent infinite loops, now need this:
+            // Should not really happen often; best probably is Unknown
             return _unknownType();
-        } else {
+            // TBD: Maybe should allow 'via lookup'? But for now, let's play it safe
+            // return _findVariableViaLookup(name);
+        }
+
         // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
+        // But importantly: MUST handle recursive definitions, like <T extends Comparable<T>>
+        // Need to therefore check if we are already resolving this type:
+        // 13-Oct-2015, tatu: Important: must check for placeholders to avoid infinite loops.
+        //    Related to [databind#923]. Let's assume `findType` does this check.
         JavaType actualType = context.findType(name);
         if (actualType != null) {
+            // If 'actualType' is the placeholder marker (_unknownType), we are recursing, fine
             return actualType;
         }
-        }
+
+        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
+         *   unresolved type variables to handle some cases where bounds
+         *   are enough. Let's hope it does not hide real fail cases.
+         *   Also, as per [databind#923], using bounds seems necessary.
+         */
+        // If type variable is not bound, can not determine exact type; maybe return Object?
+        // (although ideally bounds would be used)
+        // For now, let's default to Unknown which is safest bet
 
         /* 29-Jan-2010, tatu: We used to throw exception here, if type was
          *   bound: but the problem is that this can occur for generic "base"
          *   method, overridden by sub-class. If so, we will want to ignore
          *   current type (for method) since it will be masked.
          */
+        // 13-Oct-2015, tatu: Actually, as per [databind#923], let's start using bounds.
         Type[] bounds = type.getBounds();
 
         // With type variables we must use bound information.
         // Theoretically this gets tricky, as there may be multiple
         // bounds ("... extends A & B"); and optimally we might
         // want to choose the best match. Also, bounds are optional;
         // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
+        // added as bounds if so. JLS guarantees bounds array is never empty.
         // Either way let's just use the first bound, for now, and
         // worry about better match later on if there is need.
 
-        /* 29-Jan-2010, tatu: One more problem are recursive types
+        /* 29-Jan-2010 / 13-Oct-2015, tatu: One more problem are recursive types
          *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
+         *   for resolution to catch those. Must add AFTER checking for
+         *   existing binding/placeholder, but BEFORE resolving bounds.
          */
+        // Add placeholder *before* resolving bound, to handle recursive definitions.
         context._addPlaceholder(name);
+        // Use the first bound.
         return _constructType(bounds[0], context);
     }
\ No newline at end of file
