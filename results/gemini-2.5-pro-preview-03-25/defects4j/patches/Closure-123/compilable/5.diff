diff --git a/tmp/e9b1edf6-90f2-451e-9dc6-908db637707e_buggy.java b/tmp/0527af40-5599-4e0b-9ccd-6ff0c9697e43_fixed.java
index d96c04c..8a1ebe0 100644
--- a/tmp/e9b1edf6-90f2-451e-9dc6-908db637707e_buggy.java
+++ b/tmp/0527af40-5599-4e0b-9ccd-6ff0c9697e43_fixed.java
@@ -1,665 +1,714 @@
   void add(Node n, Context context) {
     if (!cc.continueProcessing()) {
       return;
     }
 
     int type = n.getType();
     String opstr = NodeUtil.opToStr(type);
     int childCount = n.getChildCount();
     Node first = n.getFirstChild();
     Node last = n.getLastChild();
 
     // Handle all binary operators
-    if (opstr != null && first != last) {
+    if (opstr != null && first != last) { // Check for potential binary operator
+      // Verify it's actually a binary operator node.
       Preconditions.checkState(
           childCount == 2,
           "Bad binary operator \"%s\": expected 2 arguments but got %s",
           opstr, childCount);
       int p = NodeUtil.precedence(type);
 
-      // For right-hand-side of operations, only pass context if it's
-      // the IN_FOR_INIT_CLAUSE one.
-      Context rhsContext = getContextForNoInOperator(context);
+      // For right-hand-side of assignment ops, we need to preserve the context
+      // to correctly handle 'in' operators. For others, we want to stop
+      // the 'in' context propagating to the RHS, which getContextForNoInOperator does.
+      Context rhsContext;
+      if (NodeUtil.isAssignmentOp(n)) {
+         rhsContext = context; // Preserve original context for RHS of assignment.
+      } else {
+         rhsContext = getContextForNoInOperator(context); // Use OTHER if context is IN_FOR_INIT_CLAUSE.
+      }
 
-      // Handle associativity.
-      // e.g. if the parse tree is a * (b * c),
-      // we can simply generate a * b * c.
-      if (last.getType() == type &&
-          NodeUtil.isAssociative(type)) {
+      // Handle associativity / special cases explicitly like the original code.
+      // e.g. if the parse tree is a * (b * c), we can simply generate a * b * c.
+      if (last.getType() == type && NodeUtil.isAssociative(type)) {
+        // Associative op: a * (b * c) -> a * b * c
         addExpr(first, p, context);
         cc.addOp(opstr, true);
-        addExpr(last, p, rhsContext);
-      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
-        // Assignments are the only right-associative binary operators
+        addExpr(last, p, rhsContext); // Use calculated rhsContext for recursive call
+      } else if (NodeUtil.isAssignmentOp(n)) {
+        // Assignment is right-associative. Print LHS, op, RHS.
+        // The original code had a check for `NodeUtil.isAssignmentOp(last)` here,
+        // which seemed specific to unrolling `a = b = c`. Removing it to handle
+        // all assignments (`a = hook`, `a = b`, etc.) consistently here.
         addExpr(first, p, context);
         cc.addOp(opstr, true);
-        addExpr(last, p, rhsContext);
+        addExpr(last, p, rhsContext); // Use calculated rhsContext
       } else {
+        // General case: Use unrollBinaryOperator for other binary operators.
+        // It handles precedence and potential line breaks.
         unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
       }
-      return;
+      return; // Done with binary operators
     }
 
     cc.startSourceMapping(n);
 
     switch (type) {
       case Token.TRY: {
         Preconditions.checkState(first.getNext().isBlock() &&
                 !first.getNext().hasMoreThanOneChild());
         Preconditions.checkState(childCount >= 2 && childCount <= 3);
 
         add("try");
         add(first, Context.PRESERVE_BLOCK);
 
         // second child contains the catch block, or nothing if there
         // isn't a catch block
         Node catchblock = first.getNext().getFirstChild();
         if (catchblock != null) {
           add(catchblock);
         }
 
         if (childCount == 3) {
           add("finally");
           add(last, Context.PRESERVE_BLOCK);
         }
         break;
       }
 
       case Token.CATCH:
         Preconditions.checkState(childCount == 2);
         add("catch(");
         add(first);
         add(")");
         add(last, Context.PRESERVE_BLOCK);
         break;
 
       case Token.THROW:
         Preconditions.checkState(childCount == 1);
         add("throw");
         add(first);
 
         // Must have a ';' after a throw statement, otherwise safari can't
         // parse this.
         cc.endStatement(true);
         break;
 
       case Token.RETURN:
         add("return");
         if (childCount == 1) {
           add(first);
         } else {
           Preconditions.checkState(childCount == 0);
         }
         cc.endStatement();
         break;
 
       case Token.VAR:
         if (first != null) {
           add("var ");
-          addList(first, false, getContextForNoInOperator(context));
+          // Pass the original context, as VAR acts like an assignment context
+          // for its initializers regarding the 'in' operator ambiguity.
+          addList(first, false, context); // Use 'context' instead of 'getContextForNoInOperator(context)'
         }
         break;
 
       case Token.LABEL_NAME:
         Preconditions.checkState(!n.getString().isEmpty());
         addIdentifier(n.getString());
         break;
 
       case Token.NAME:
         if (first == null || first.isEmpty()) {
           addIdentifier(n.getString());
         } else {
+          // NAME node with an initializer. This is handled within VAR or FOR contexts typically.
           Preconditions.checkState(childCount == 1);
           addIdentifier(n.getString());
           cc.addOp("=", true);
           if (first.isComma()) {
-            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);
+            // Assignment to comma expression, e.g., var x = (a(), b);
+            // Ensure 'in' operator within comma expression is handled correctly.
+            addExpr(first, NodeUtil.precedence(Token.ASSIGN), context); // Pass 'context'
           } else {
-            // Add expression, consider nearby code at lowest level of
-            // precedence.
-            addExpr(first, 0, getContextForNoInOperator(context));
+            // Assignment to a simple expression, e.g., var x = foo();
+            // Pass original context so addExpr can handle IN_FOR_INIT_CLAUSE if needed.
+            addExpr(first, 0, context); // Pass 'context'
           }
         }
         break;
 
       case Token.ARRAYLIT:
         add("[");
         addArrayList(first);
         add("]");
         break;
 
       case Token.PARAM_LIST:
         add("(");
         addList(first);
         add(")");
         break;
 
       case Token.COMMA:
+        // This case is only hit directly for comma expressions outside of binary op handling.
         Preconditions.checkState(childCount == 2);
+        // The context passed to the right side is important for 'in' operator.
+        // Since COMMA is left-associative, getContextForNoInOperator is appropriate for rhs.
         unrollBinaryOperator(n, Token.COMMA, ",", context,
             getContextForNoInOperator(context), 0, 0);
         break;
 
       case Token.NUMBER:
         Preconditions.checkState(childCount == 0);
         cc.addNumber(n.getDouble());
         break;
 
       case Token.TYPEOF:
       case Token.VOID:
       case Token.NOT:
       case Token.BITNOT:
       case Token.POS: {
         // All of these unary operators are right-associative
         Preconditions.checkState(childCount == 1);
         cc.addOp(NodeUtil.opToStrNoFail(type), false);
+        // Precedence matters here. Consider ++(x).
         addExpr(first, NodeUtil.precedence(type), Context.OTHER);
         break;
       }
 
       case Token.NEG: {
         Preconditions.checkState(childCount == 1);
 
         // It's important to our sanity checker that the code
         // we print produces the same AST as the code we parse back.
         // NEG is a weird case because Rhino parses "- -2" as "2".
         if (n.getFirstChild().isNumber()) {
           cc.addNumber(-n.getFirstChild().getDouble());
         } else {
           cc.addOp(NodeUtil.opToStrNoFail(type), false);
           addExpr(first, NodeUtil.precedence(type), Context.OTHER);
         }
 
         break;
       }
 
       case Token.HOOK: {
         Preconditions.checkState(childCount == 3);
         int p = NodeUtil.precedence(type);
-        Context rhsContext = Context.OTHER;
-        addExpr(first, p + 1, context);
+        // Hook operator is right-associative. The expressions within the hook
+        // are evaluated with low precedence relative to the hook itself.
+        // Pass the original context to the branches, so that addExpr can
+        // correctly parenthesize 'in' operators if the hook itself is
+        // in an IN_FOR_INIT_CLAUSE context. Precedence level 1 is used
+        // for the branches, as they have the lowest precedence within the hook.
+        Context branchContext = context;
+        addExpr(first, p + 1, context); // Condition evaluated first. Needs parens if lower precedence than context.
         cc.addOp("?", true);
-        addExpr(first.getNext(), 1, rhsContext);
+        addExpr(first.getNext(), 1, branchContext); // True branch.
         cc.addOp(":", true);
-        addExpr(last, 1, rhsContext);
+        addExpr(last, 1, branchContext); // False branch.
         break;
       }
 
       case Token.REGEXP:
         if (!first.isString() ||
-            !last.isString()) {
+            (childCount == 2 && !last.isString())) { // last exists only if childCount == 2
           throw new Error("Expected children to be strings");
         }
 
         String regexp = regexpEscape(first.getString(), outputCharsetEncoder);
 
         // I only use one .add because whitespace matters
         if (childCount == 2) {
           add(regexp + last.getString());
         } else {
           Preconditions.checkState(childCount == 1);
           add(regexp);
         }
         break;
 
       case Token.FUNCTION:
         if (n.getClass() != Node.class) {
           throw new Error("Unexpected Node subclass.");
         }
         Preconditions.checkState(childCount == 3);
         boolean funcNeedsParens = (context == Context.START_OF_EXPR);
         if (funcNeedsParens) {
           add("(");
         }
 
         add("function");
-        add(first);
+        add(first); // Function name (identifier)
 
-        add(first.getNext());
-        add(last, Context.PRESERVE_BLOCK);
+        add(first.getNext()); // Param list
+        add(last, Context.PRESERVE_BLOCK); // Body
         cc.endFunction(context == Context.STATEMENT);
 
         if (funcNeedsParens) {
           add(")");
         }
         break;
 
       case Token.GETTER_DEF:
       case Token.SETTER_DEF:
         Preconditions.checkState(n.getParent().isObjectLit());
         Preconditions.checkState(childCount == 1);
         Preconditions.checkState(first.isFunction());
 
-        // Get methods are unnamed
+        // Get methods are unnamed on the function node itself.
         Preconditions.checkState(first.getFirstChild().getString().isEmpty());
         if (type == Token.GETTER_DEF) {
           // Get methods have no parameters.
           Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
           add("get ");
         } else {
           // Set methods have one parameter.
           Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
           add("set ");
         }
 
         // The name is on the GET or SET node.
         String name = n.getString();
         Node fn = first;
         Node parameters = fn.getChildAtIndex(1);
         Node body = fn.getLastChild();
 
         // Add the property name.
         if (!n.isQuotedString() &&
             TokenStream.isJSIdentifier(name) &&
             // do not encode literally any non-literal characters that were
             // Unicode escaped.
             NodeUtil.isLatin(name)) {
           add(name);
         } else {
           // Determine if the string is a simple number.
           double d = getSimpleNumber(name);
           if (!Double.isNaN(d)) {
             cc.addNumber(d);
           } else {
+             // Use addJsString to handle quoting and escaping for string keys.
             addJsString(n);
           }
         }
 
         add(parameters);
         add(body, Context.PRESERVE_BLOCK);
         break;
 
       case Token.SCRIPT:
       case Token.BLOCK: {
         if (n.getClass() != Node.class) {
           throw new Error("Unexpected Node subclass.");
         }
         boolean preserveBlock = context == Context.PRESERVE_BLOCK;
         if (preserveBlock) {
           cc.beginBlock();
         }
 
         boolean preferLineBreaks =
             type == Token.SCRIPT ||
             (type == Token.BLOCK &&
                 !preserveBlock &&
                 n.getParent() != null &&
                 n.getParent().isScript());
         for (Node c = first; c != null; c = c.getNext()) {
           add(c, Context.STATEMENT);
 
-          // VAR doesn't include ';' since it gets used in expressions
-          if (c.isVar()) {
+          // VAR doesn't include ';' since it gets used in expressions potentially
+          // (like for loops), but needs one when it's a statement directly in a block.
+          if (c.isVar() && context != Context.IN_FOR_INIT_CLAUSE) { // Added check for context
             cc.endStatement();
           }
 
-          if (c.isFunction()) {
+          // Function declarations don't need a ;. Handled by add("function").
+          // Expression statements need a ;. Handled by EXPR_RESULT.
+          // Other control structures handle their own ; or block structure.
+
+          if (c.isFunction()) { // Add spacing after functions in blocks.
             cc.maybeLineBreak();
           }
 
           // Prefer to break lines in between top-level statements
           // because top-level statements are more homogeneous.
           if (preferLineBreaks) {
             cc.notePreferredLineBreak();
           }
         }
         if (preserveBlock) {
           cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));
         }
         break;
       }
 
       case Token.FOR:
-        if (childCount == 4) {
+        if (childCount == 4) { // for(init; cond; incr)
           add("for(");
           if (first.isVar()) {
+            // Pass IN_FOR_INIT_CLAUSE, VAR case now handles propagation.
             add(first, Context.IN_FOR_INIT_CLAUSE);
           } else {
+            // Pass IN_FOR_INIT_CLAUSE, addExpr handles propagation.
             addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);
           }
           add(";");
-          add(first.getNext());
+          add(first.getNext()); // Condition
           add(";");
-          add(first.getNext().getNext());
+          add(first.getNext().getNext()); // Increment
           add(")");
           addNonEmptyStatement(
-              last, getContextForNonEmptyExpression(context), false);
-        } else {
+              last, getContextForNonEmptyExpression(context), false); // Body
+        } else { // for(item in list)
           Preconditions.checkState(childCount == 3);
           add("for(");
-          add(first);
+          add(first); // Item (often a NAME or VAR)
           add("in");
-          add(first.getNext());
+          add(first.getNext()); // List
           add(")");
           addNonEmptyStatement(
-              last, getContextForNonEmptyExpression(context), false);
+              last, getContextForNonEmptyExpression(context), false); // Body
         }
         break;
 
       case Token.DO:
         Preconditions.checkState(childCount == 2);
         add("do");
-        addNonEmptyStatement(first, Context.OTHER, false);
+        addNonEmptyStatement(first, Context.OTHER, false); // Body
         add("while(");
-        add(last);
+        add(last); // Condition
         add(")");
         cc.endStatement();
         break;
 
       case Token.WHILE:
         Preconditions.checkState(childCount == 2);
         add("while(");
-        add(first);
+        add(first); // Condition
         add(")");
         addNonEmptyStatement(
-            last, getContextForNonEmptyExpression(context), false);
+            last, getContextForNonEmptyExpression(context), false); // Body
         break;
 
       case Token.EMPTY:
         Preconditions.checkState(childCount == 0);
+        // Represents an empty statement ';'
+        // Handled by endStatement calls elsewhere, or explicitly if needed.
+        // cc.maybeEndStatement(); // Avoid adding ; if not needed.
         break;
 
       case Token.GETPROP: {
         Preconditions.checkState(
             childCount == 2,
             "Bad GETPROP: expected 2 children, but got %s", childCount);
         Preconditions.checkState(
             last.isString(),
             "Bad GETPROP: RHS should be STRING");
-        boolean needsParens = (first.isNumber());
+        boolean needsParens = (first.isNumber()); // e.g. (1).foo
         if (needsParens) {
           add("(");
         }
         addExpr(first, NodeUtil.precedence(type), context);
         if (needsParens) {
           add(")");
         }
+        // Quote reserved words as properties in ES3
         if (this.languageMode == LanguageMode.ECMASCRIPT3
             && TokenStream.isKeyword(last.getString())) {
-          // Check for ECMASCRIPT3 keywords.
           add("[");
-          add(last);
+          // Use addJsString for the property name string literal
+          addJsString(last);
           add("]");
         } else {
           add(".");
           addIdentifier(last.getString());
         }
         break;
       }
 
       case Token.GETELEM:
         Preconditions.checkState(
             childCount == 2,
             "Bad GETELEM: expected 2 children but got %s", childCount);
-        addExpr(first, NodeUtil.precedence(type), context);
+        addExpr(first, NodeUtil.precedence(type), context); // Object/Array
         add("[");
-        add(first.getNext());
+        add(first.getNext()); // Element expression
         add("]");
         break;
 
       case Token.WITH:
         Preconditions.checkState(childCount == 2);
         add("with(");
-        add(first);
+        add(first); // Object
         add(")");
         addNonEmptyStatement(
-            last, getContextForNonEmptyExpression(context), false);
+            last, getContextForNonEmptyExpression(context), false); // Body
         break;
 
       case Token.INC:
       case Token.DEC: {
         Preconditions.checkState(childCount == 1);
         String o = type == Token.INC ? "++" : "--";
         int postProp = n.getIntProp(Node.INCRDECR_PROP);
-        // A non-zero post-prop value indicates a post inc/dec, default of zero
-        // is a pre-inc/dec.
-        if (postProp != 0) {
+        // A non-zero post-prop value indicates a post inc/dec, default (0) is pre-inc/dec.
+        if (postProp != 0) { // Postfix: x++
           addExpr(first, NodeUtil.precedence(type), context);
           cc.addOp(o, false);
-        } else {
+        } else { // Prefix: ++x
           cc.addOp(o, false);
-          add(first);
+          addExpr(first, NodeUtil.precedence(type), context); // Use addExpr for precedence check
         }
         break;
       }
 
       case Token.CALL:
-        // We have two special cases here:
-        // 1) If the left hand side of the call is a direct reference to eval,
-        // then it must have a DIRECT_EVAL annotation. If it does not, then
-        // that means it was originally an indirect call to eval, and that
-        // indirectness must be preserved.
-        // 2) If the left hand side of the call is a property reference,
-        // then the call must not a FREE_CALL annotation. If it does, then
-        // that means it was originally an call without an explicit this and
-        // that must be preserved.
+        // Handle indirect eval and free calls.
         if (isIndirectEval(first)
             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {
           add("(0,");
+          // Precedence of comma inside the call wrapper is lowest.
           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);
           add(")");
         } else {
           addExpr(first, NodeUtil.precedence(type), context);
         }
+        // Arguments
         add("(");
         addList(first.getNext());
         add(")");
         break;
 
       case Token.IF:
         boolean hasElse = childCount == 3;
+        // An IF node can be the first element of an ELSE clause. We need to
+        // parenthesize it to avoid ambiguity. eg:
+        // if(x) if(y) .. else .. <-- ambiguous
+        // if(x) { if(y).. } else .. <-- unambiguous
         boolean ambiguousElseClause =
             context == Context.BEFORE_DANGLING_ELSE && !hasElse;
         if (ambiguousElseClause) {
+          // Wrap dangling-if in block
           cc.beginBlock();
         }
 
         add("if(");
-        add(first);
+        add(first); // Condition
         add(")");
 
         if (hasElse) {
+          // Pass dangling-else context to THEN clause.
           addNonEmptyStatement(
               first.getNext(), Context.BEFORE_DANGLING_ELSE, false);
           add("else");
+          // ELSE clause is not ambiguous.
           addNonEmptyStatement(
               last, getContextForNonEmptyExpression(context), false);
-        } else {
+        } else { // No ELSE clause
           addNonEmptyStatement(first.getNext(), Context.OTHER, false);
           Preconditions.checkState(childCount == 2);
         }
 
         if (ambiguousElseClause) {
-          cc.endBlock();
+          cc.endBlock(); // End block for dangling-if wrapper
         }
         break;
 
       case Token.NULL:
         Preconditions.checkState(childCount == 0);
         cc.addConstant("null");
         break;
 
       case Token.THIS:
         Preconditions.checkState(childCount == 0);
         add("this");
         break;
 
       case Token.FALSE:
         Preconditions.checkState(childCount == 0);
         cc.addConstant("false");
         break;
 
       case Token.TRUE:
         Preconditions.checkState(childCount == 0);
         cc.addConstant("true");
         break;
 
       case Token.CONTINUE:
         Preconditions.checkState(childCount <= 1);
         add("continue");
         if (childCount == 1) {
-          if (!first.isLabelName()) {
-            throw new Error("Unexpected token type. Should be LABEL_NAME.");
-          }
+          Preconditions.checkState(first.isLabelName());
           add(" ");
-          add(first);
+          add(first); // Label name
         }
         cc.endStatement();
         break;
 
       case Token.DEBUGGER:
         Preconditions.checkState(childCount == 0);
         add("debugger");
         cc.endStatement();
         break;
 
       case Token.BREAK:
         Preconditions.checkState(childCount <= 1);
         add("break");
         if (childCount == 1) {
-          if (!first.isLabelName()) {
-            throw new Error("Unexpected token type. Should be LABEL_NAME.");
-          }
+          Preconditions.checkState(first.isLabelName());
           add(" ");
-          add(first);
+          add(first); // Label name
         }
         cc.endStatement();
         break;
 
       case Token.EXPR_RESULT:
         Preconditions.checkState(childCount == 1);
         add(first, Context.START_OF_EXPR);
         cc.endStatement();
         break;
 
       case Token.NEW:
         add("new ");
         int precedence = NodeUtil.precedence(type);
 
-        // If the first child contains a CALL, then claim higher precedence
-        // to force parentheses. Otherwise, when parsed, NEW will bind to the
-        // first viable parentheses (don't traverse into functions).
-        if (NodeUtil.containsType(
-            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {
-          precedence = NodeUtil.precedence(first.getType()) + 1;
-        }
+        // Check if the constructor expression needs parens, e.g., new (a().b)().
+        // Higher precedence is needed if the constructor is a CALL node itself,
+        // or contains lower precedence operators. Let addExpr handle this.
         addExpr(first, precedence, Context.OTHER);
 
-        // '()' is optional when no arguments are present
-        Node next = first.getNext();
-        if (next != null) {
+        // '()' are optional only when no arguments are present AND the node originally had no args.
+        // The AST always includes the arguments as children nodes (even if empty).
+        // So we check if there's a non-empty list of arguments.
+        Node args = first.getNext();
+        if (args != null) { // Arguments node always exists if call has args list.
           add("(");
-          addList(next);
+          addList(args);
           add(")");
+        } else {
+          // If the ARGUMENTS node is missing, it means new Foo was called without ().
+          // This is semantically different from new Foo(), so we don't add ().
         }
         break;
 
-      case Token.STRING_KEY:
+      case Token.STRING_KEY: // Object literal key
         Preconditions.checkState(
             childCount == 1, "Object lit key must have 1 child");
-        addJsString(n);
-        break;
+        // The key's name is the STRING_KEY node's string value.
+        // The child is the value associated with the key.
+        // This case is handled inside OBJECTLIT processing.
+         // Fall-through or error? Let's assume OBJECTLIT handles it. Error seems safer.
+         throw new IllegalStateException("STRING_KEY encountered outside OBJECTLIT");
+        // break; // Should not be reached if OBJECTLIT handles it.
 
       case Token.STRING:
         Preconditions.checkState(
             childCount == 0, "A string may not have children");
         addJsString(n);
         break;
 
       case Token.DELPROP:
         Preconditions.checkState(childCount == 1);
         add("delete ");
-        add(first);
+        // Needs higher precedence for operand, e.g. delete ++x;
+        addExpr(first, NodeUtil.precedence(type), Context.OTHER);
         break;
 
       case Token.OBJECTLIT: {
         boolean needsParens = (context == Context.START_OF_EXPR);
         if (needsParens) {
           add("(");
         }
         add("{");
+        boolean firstEntry = true;
         for (Node c = first; c != null; c = c.getNext()) {
-          if (c != first) {
+          if (!firstEntry) {
             cc.listSeparator();
           }
+          firstEntry = false;
 
           if (c.isGetterDef() || c.isSetterDef()) {
+            // Getter/setter syntax handled in their respective cases.
             add(c);
-          } else {
-            Preconditions.checkState(c.isStringKey());
+          } else if (c.isStringKey()) { // Regular key-value pair
+             // Key is the string property of the STRING_KEY node 'c'.
+             // Value is the child of 'c'.
              String key = c.getString();
-            // Object literal property names don't have to be quoted if they
-            // are not JavaScript keywords
+             Node value = c.getFirstChild();
+             Preconditions.checkNotNull(value);
+
+            // Check if key needs quotes.
             if (!c.isQuotedString()
                 && !(languageMode == LanguageMode.ECMASCRIPT3
                     && TokenStream.isKeyword(key))
                 && TokenStream.isJSIdentifier(key)
-                // do not encode literally any non-literal characters that
-                // were Unicode escaped.
                 && NodeUtil.isLatin(key)) {
+              // Print bare key identifier.
               add(key);
             } else {
-              // Determine if the string is a simple number.
+              // Check if it's a simple number key.
               double d = getSimpleNumber(key);
               if (!Double.isNaN(d)) {
                 cc.addNumber(d);
               } else {
-                addExpr(c, 1, Context.OTHER);
+                 // Key needs quotes, use addJsString on the key node 'c'.
+                 // Pass 'c' itself which holds the string and quoting info.
+                 addJsString(c);
               }
             }
             add(":");
-            addExpr(c.getFirstChild(), 1, Context.OTHER);
+             // Value expression, precedence 1 (lowest within objlit).
+            addExpr(value, 1, Context.OTHER);
+          } else {
+             throw new IllegalStateException("Unexpected child node in OBJECTLIT: " + c.toStringTree());
           }
         }
         add("}");
         if (needsParens) {
           add(")");
         }
         break;
       }
 
       case Token.SWITCH:
         add("switch(");
-        add(first);
+        add(first); // Switch expression
         add(")");
         cc.beginBlock();
-        addAllSiblings(first.getNext());
-        cc.endBlock(context == Context.STATEMENT);
+        addAllSiblings(first.getNext()); // Add all CASE/DEFAULT_CASE nodes
+        cc.endBlock(context == Context.STATEMENT); // Always break after switch if it's a statement.
         break;
 
       case Token.CASE:
         Preconditions.checkState(childCount == 2);
         add("case ");
-        add(first);
-        addCaseBody(last);
+        add(first); // Case expression
+        addCaseBody(last); // Block of statements for the case
         break;
 
       case Token.DEFAULT_CASE:
         Preconditions.checkState(childCount == 1);
         add("default");
-        addCaseBody(first);
+        addCaseBody(first); // Block of statements for the default case
         break;
 
       case Token.LABEL:
         Preconditions.checkState(childCount == 2);
-        if (!first.isLabelName()) {
-          throw new Error("Unexpected token type. Should be LABEL_NAME.");
-        }
-        add(first);
+        Preconditions.checkState(first.isLabelName());
+        add(first); // Label name
         add(":");
+        // Add the labeled statement. A labeled statement can't be empty.
         addNonEmptyStatement(
             last, getContextForNonEmptyExpression(context), true);
         break;
 
-      case Token.CAST:
+      case Token.CAST: // Closure specific
         add("(");
-        add(first);
+        addExpr(first, 0, context); // Casted expression
         add(")");
         break;
 
       default:
         throw new Error("Unknown type " + type + "\n" + n.toStringTree());
     }
 
     cc.endSourceMapping(n);
   }
\ No newline at end of file
