diff --git a/tmp/b7570649-9528-4f21-9d98-f3c2b0f32cff_buggy.java b/tmp/8fdd7943-f885-4175-9567-425cf819e9ca_fixed.java
index d96c04c..8d3532f 100644
--- a/tmp/b7570649-9528-4f21-9d98-f3c2b0f32cff_buggy.java
+++ b/tmp/8fdd7943-f885-4175-9567-425cf819e9ca_fixed.java
@@ -1,665 +1,683 @@
   void add(Node n, Context context) {
     if (!cc.continueProcessing()) {
       return;
     }
 
     int type = n.getType();
     String opstr = NodeUtil.opToStr(type);
     int childCount = n.getChildCount();
     Node first = n.getFirstChild();
     Node last = n.getLastChild();
 
     // Handle all binary operators
     if (opstr != null && first != last) {
       Preconditions.checkState(
           childCount == 2,
           "Bad binary operator \"%s\": expected 2 arguments but got %s",
           opstr, childCount);
       int p = NodeUtil.precedence(type);
+      boolean isAssign = NodeUtil.isAssignmentOp(n);
 
       // For right-hand-side of operations, only pass context if it's
       // the IN_FOR_INIT_CLAUSE one.
-      Context rhsContext = getContextForNoInOperator(context);
+      // However, assign is right associative, and the context needs to be
+      // propagated to the rhs of assignment to correctly handle cases like
+      // for (a = b ? c : (d in e);;).
+      Context rhsContext = isAssign ? context : getContextForNoInOperator(context);
 
       // Handle associativity.
       // e.g. if the parse tree is a * (b * c),
       // we can simply generate a * b * c.
       if (last.getType() == type &&
           NodeUtil.isAssociative(type)) {
         addExpr(first, p, context);
         cc.addOp(opstr, true);
+        // Use precedence p for the right operand of associative operators.
         addExpr(last, p, rhsContext);
-      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
-        // Assignments are the only right-associative binary operators
-        addExpr(first, p, context);
+      } else if (isAssign) {
+        // Assignments are the only right-associative binary operators.
+        // Pass p + 1 for the left operand to handle cases like (a=b)=c.
+        // Pass p for the right operand, and the original context.
+        addExpr(first, p + 1, context);
         cc.addOp(opstr, true);
-        addExpr(last, p, rhsContext);
+        addExpr(last, p, rhsContext); // rhsContext is 'context' if isAssign is true
       } else {
+        // Default behavior for non-associative/non-assign binary operators.
         unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
       }
       return;
     }
 
     cc.startSourceMapping(n);
 
     switch (type) {
       case Token.TRY: {
         Preconditions.checkState(first.getNext().isBlock() &&
                 !first.getNext().hasMoreThanOneChild());
         Preconditions.checkState(childCount >= 2 && childCount <= 3);
 
         add("try");
         add(first, Context.PRESERVE_BLOCK);
 
         // second child contains the catch block, or nothing if there
         // isn't a catch block
         Node catchblock = first.getNext().getFirstChild();
         if (catchblock != null) {
           add(catchblock);
         }
 
         if (childCount == 3) {
           add("finally");
           add(last, Context.PRESERVE_BLOCK);
         }
         break;
       }
 
       case Token.CATCH:
         Preconditions.checkState(childCount == 2);
         add("catch(");
         add(first);
         add(")");
         add(last, Context.PRESERVE_BLOCK);
         break;
 
       case Token.THROW:
         Preconditions.checkState(childCount == 1);
         add("throw");
         add(first);
 
         // Must have a ';' after a throw statement, otherwise safari can't
         // parse this.
         cc.endStatement(true);
         break;
 
       case Token.RETURN:
         add("return");
         if (childCount == 1) {
           add(first);
         } else {
           Preconditions.checkState(childCount == 0);
         }
         cc.endStatement();
         break;
 
       case Token.VAR:
         if (first != null) {
           add("var ");
-          addList(first, false, getContextForNoInOperator(context));
+          // Propagate the context (e.g. IN_FOR_INIT_CLAUSE) into addList.
+          addList(first, false, context);
         }
         break;
 
       case Token.LABEL_NAME:
         Preconditions.checkState(!n.getString().isEmpty());
         addIdentifier(n.getString());
         break;
 
       case Token.NAME:
         if (first == null || first.isEmpty()) {
           addIdentifier(n.getString());
         } else {
           Preconditions.checkState(childCount == 1);
           addIdentifier(n.getString());
           cc.addOp("=", true);
           if (first.isComma()) {
+            // This is VAR initialization list: var a = (1, 2);
+            // The precedence arguably doesn't matter, but this follows
+            // the old behavior.
             addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);
           } else {
-            // Add expression, consider nearby code at lowest level of
-            // precedence.
-            addExpr(first, 0, getContextForNoInOperator(context));
+            // Add expression, pass the current context, as the initializer
+            // might need it (e.g. for handling 'in' in for-loop).
+            // Use precedence 0 to allow anything.
+            addExpr(first, 0, context);
           }
         }
         break;
 
       case Token.ARRAYLIT:
         add("[");
         addArrayList(first);
         add("]");
         break;
 
       case Token.PARAM_LIST:
         add("(");
         addList(first);
         add(")");
         break;
 
       case Token.COMMA:
         Preconditions.checkState(childCount == 2);
+        // Pass the original context to the left operand, and the potentially
+        // modified context (if IN_FOR_INIT_CLAUSE) to the right operand.
         unrollBinaryOperator(n, Token.COMMA, ",", context,
             getContextForNoInOperator(context), 0, 0);
         break;
 
       case Token.NUMBER:
         Preconditions.checkState(childCount == 0);
         cc.addNumber(n.getDouble());
         break;
 
       case Token.TYPEOF:
       case Token.VOID:
       case Token.NOT:
       case Token.BITNOT:
       case Token.POS: {
         // All of these unary operators are right-associative
         Preconditions.checkState(childCount == 1);
         cc.addOp(NodeUtil.opToStrNoFail(type), false);
+        // The operand typically doesn't need the context.
         addExpr(first, NodeUtil.precedence(type), Context.OTHER);
         break;
       }
 
       case Token.NEG: {
         Preconditions.checkState(childCount == 1);
 
         // It's important to our sanity checker that the code
         // we print produces the same AST as the code we parse back.
         // NEG is a weird case because Rhino parses "- -2" as "2".
         if (n.getFirstChild().isNumber()) {
           cc.addNumber(-n.getFirstChild().getDouble());
         } else {
           cc.addOp(NodeUtil.opToStrNoFail(type), false);
+          // The operand typically doesn't need the context.
           addExpr(first, NodeUtil.precedence(type), Context.OTHER);
         }
 
         break;
       }
 
       case Token.HOOK: {
         Preconditions.checkState(childCount == 3);
         int p = NodeUtil.precedence(type);
-        Context rhsContext = Context.OTHER;
-        addExpr(first, p + 1, context);
+        // Hook is right-associative. The AssignmentExpression branches
+        // need precedence 1.
+        // Importantly, the context (e.g. IN_FOR_INIT_CLAUSE) needs to be
+        // passed down to the branches so that addExpr can handle 'in'.
+        Context branchContext = context;
+        addExpr(first, p + 1, context); // Condition needs higher precedence
         cc.addOp("?", true);
-        addExpr(first.getNext(), 1, rhsContext);
+        addExpr(first.getNext(), 1, branchContext); // Pass context to true branch
         cc.addOp(":", true);
-        addExpr(last, 1, rhsContext);
+        addExpr(last, 1, branchContext);           // Pass context to false branch
         break;
       }
 
       case Token.REGEXP:
         if (!first.isString() ||
-            !last.isString()) {
+            (childCount == 2 && !last.isString())) { // last is optional flags
           throw new Error("Expected children to be strings");
         }
 
         String regexp = regexpEscape(first.getString(), outputCharsetEncoder);
 
         // I only use one .add because whitespace matters
         if (childCount == 2) {
-          add(regexp + last.getString());
+          add("/" + regexp + "/" + last.getString());
         } else {
           Preconditions.checkState(childCount == 1);
-          add(regexp);
+          add("/" + regexp + "/");
         }
         break;
 
       case Token.FUNCTION:
         if (n.getClass() != Node.class) {
           throw new Error("Unexpected Node subclass.");
         }
         Preconditions.checkState(childCount == 3);
         boolean funcNeedsParens = (context == Context.START_OF_EXPR);
         if (funcNeedsParens) {
           add("(");
         }
 
         add("function");
-        add(first);
+        add(first); // Function name (identifier).
 
-        add(first.getNext());
-        add(last, Context.PRESERVE_BLOCK);
+        add(first.getNext()); // Param list.
+        add(last, Context.PRESERVE_BLOCK); // Body.
         cc.endFunction(context == Context.STATEMENT);
 
         if (funcNeedsParens) {
           add(")");
         }
         break;
 
       case Token.GETTER_DEF:
       case Token.SETTER_DEF:
         Preconditions.checkState(n.getParent().isObjectLit());
         Preconditions.checkState(childCount == 1);
         Preconditions.checkState(first.isFunction());
 
-        // Get methods are unnamed
+        // Get methods are unnamed nodes corresponding to the function body.
         Preconditions.checkState(first.getFirstChild().getString().isEmpty());
         if (type == Token.GETTER_DEF) {
           // Get methods have no parameters.
           Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
           add("get ");
         } else {
           // Set methods have one parameter.
           Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
           add("set ");
         }
 
-        // The name is on the GET or SET node.
+        // The name is on the GET or SET node itself.
         String name = n.getString();
         Node fn = first;
         Node parameters = fn.getChildAtIndex(1);
         Node body = fn.getLastChild();
 
-        // Add the property name.
-        if (!n.isQuotedString() &&
-            TokenStream.isJSIdentifier(name) &&
-            // do not encode literally any non-literal characters that were
-            // Unicode escaped.
-            NodeUtil.isLatin(name)) {
-          add(name);
-        } else {
-          // Determine if the string is a simple number.
-          double d = getSimpleNumber(name);
-          if (!Double.isNaN(d)) {
-            cc.addNumber(d);
-          } else {
-            addJsString(n);
-          }
-        }
+        // Add the property name. Use addString to handle quoted keys correctly.
+        addString(name, n.isQuotedString());
 
-        add(parameters);
-        add(body, Context.PRESERVE_BLOCK);
+        add(parameters); // Param list.
+        add(body, Context.PRESERVE_BLOCK); // Body.
         break;
 
       case Token.SCRIPT:
       case Token.BLOCK: {
         if (n.getClass() != Node.class) {
           throw new Error("Unexpected Node subclass.");
         }
         boolean preserveBlock = context == Context.PRESERVE_BLOCK;
         if (preserveBlock) {
           cc.beginBlock();
         }
 
         boolean preferLineBreaks =
             type == Token.SCRIPT ||
             (type == Token.BLOCK &&
                 !preserveBlock &&
                 n.getParent() != null &&
                 n.getParent().isScript());
         for (Node c = first; c != null; c = c.getNext()) {
           add(c, Context.STATEMENT);
 
-          // VAR doesn't include ';' since it gets used in expressions
+          // VAR statements don't need additional semicolons.
           if (c.isVar()) {
-            cc.endStatement();
+            // Ensure the VAR statement has a semicolon if it's not in a FOR loop initializer.
+            if (!NodeUtil.isForIn(n.getParent())) {
+               cc.maybeEndStatement();
             }
+          } else if (NodeUtil.isStatement(c)) {
+             // Other statements depend on their own ending logic (e.g. RETURN ends statement)
+             // or require endStatement here. Empty statements are handled separately.
+             if (!c.isBlock() && !c.isEmpty()) {
+                 cc.maybeEndStatement();
+             }
+          }
+
 
           if (c.isFunction()) {
             cc.maybeLineBreak();
           }
 
           // Prefer to break lines in between top-level statements
           // because top-level statements are more homogeneous.
           if (preferLineBreaks) {
             cc.notePreferredLineBreak();
           }
         }
         if (preserveBlock) {
           cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));
         }
         break;
       }
 
       case Token.FOR:
         if (childCount == 4) {
           add("for(");
           if (first.isVar()) {
             add(first, Context.IN_FOR_INIT_CLAUSE);
           } else {
+            // The init expression needs the IN_FOR_INIT_CLAUSE context.
             addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);
           }
           add(";");
-          add(first.getNext());
+          add(first.getNext()); // Condition expression.
           add(";");
-          add(first.getNext().getNext());
+          add(first.getNext().getNext()); // Increment expression.
           add(")");
           addNonEmptyStatement(
               last, getContextForNonEmptyExpression(context), false);
         } else {
+          // For-in loop.
           Preconditions.checkState(childCount == 3);
           add("for(");
-          add(first);
+          // The LHS of for-in needs IN_FOR_INIT_CLAUSE context.
+          add(first, Context.IN_FOR_INIT_CLAUSE);
           add("in");
-          add(first.getNext());
+          add(first.getNext()); // RHS object/array.
           add(")");
           addNonEmptyStatement(
               last, getContextForNonEmptyExpression(context), false);
         }
         break;
 
       case Token.DO:
         Preconditions.checkState(childCount == 2);
         add("do");
         addNonEmptyStatement(first, Context.OTHER, false);
         add("while(");
         add(last);
         add(")");
         cc.endStatement();
         break;
 
       case Token.WHILE:
         Preconditions.checkState(childCount == 2);
         add("while(");
         add(first);
         add(")");
         addNonEmptyStatement(
             last, getContextForNonEmptyExpression(context), false);
         break;
 
       case Token.EMPTY:
         Preconditions.checkState(childCount == 0);
+        // Handled by maybeEndStatement in parent blocks, but can appear elsewhere.
+        // Consider adding a semicolon if context demands it, e.g., `if(c);`.
+        if (context == Context.STATEMENT) {
+          cc.add(";");
+        }
         break;
 
       case Token.GETPROP: {
         Preconditions.checkState(
             childCount == 2,
             "Bad GETPROP: expected 2 children, but got %s", childCount);
         Preconditions.checkState(
             last.isString(),
             "Bad GETPROP: RHS should be STRING");
         boolean needsParens = (first.isNumber());
         if (needsParens) {
           add("(");
         }
         addExpr(first, NodeUtil.precedence(type), context);
         if (needsParens) {
           add(")");
         }
-        if (this.languageMode == LanguageMode.ECMASCRIPT3
-            && TokenStream.isKeyword(last.getString())) {
-          // Check for ECMASCRIPT3 keywords.
-          add("[");
-          add(last);
-          add("]");
-        } else {
         add(".");
-          addIdentifier(last.getString());
-        }
+        addIdentifier(last.getString()); // Property name is an identifier.
         break;
       }
 
       case Token.GETELEM:
         Preconditions.checkState(
             childCount == 2,
             "Bad GETELEM: expected 2 children but got %s", childCount);
         addExpr(first, NodeUtil.precedence(type), context);
         add("[");
         add(first.getNext());
         add("]");
         break;
 
       case Token.WITH:
         Preconditions.checkState(childCount == 2);
         add("with(");
         add(first);
         add(")");
         addNonEmptyStatement(
             last, getContextForNonEmptyExpression(context), false);
         break;
 
       case Token.INC:
       case Token.DEC: {
         Preconditions.checkState(childCount == 1);
         String o = type == Token.INC ? "++" : "--";
         int postProp = n.getIntProp(Node.INCRDECR_PROP);
         // A non-zero post-prop value indicates a post inc/dec, default of zero
         // is a pre-inc/dec.
         if (postProp != 0) {
           addExpr(first, NodeUtil.precedence(type), context);
           cc.addOp(o, false);
         } else {
           cc.addOp(o, false);
-          add(first);
+          addExpr(first, NodeUtil.precedence(type), Context.OTHER); // Operand precedence matters for pre-increment
         }
         break;
       }
 
       case Token.CALL:
         // We have two special cases here:
         // 1) If the left hand side of the call is a direct reference to eval,
         // then it must have a DIRECT_EVAL annotation. If it does not, then
         // that means it was originally an indirect call to eval, and that
         // indirectness must be preserved.
         // 2) If the left hand side of the call is a property reference,
         // then the call must not a FREE_CALL annotation. If it does, then
         // that means it was originally an call without an explicit this and
         // that must be preserved.
         if (isIndirectEval(first)
             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {
           add("(0,");
-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);
+          // Precedence of comma is 0, so anything is fine. Context is OTHER.
+          addExpr(first, 0, Context.OTHER);
           add(")");
         } else {
           addExpr(first, NodeUtil.precedence(type), context);
         }
         add("(");
         addList(first.getNext());
         add(")");
         break;
 
       case Token.IF:
         boolean hasElse = childCount == 3;
         boolean ambiguousElseClause =
             context == Context.BEFORE_DANGLING_ELSE && !hasElse;
         if (ambiguousElseClause) {
+           // Wrap the lone 'if' statement in a block to avoid dangling else ambiguity.
           cc.beginBlock();
         }
 
         add("if(");
-        add(first);
+        add(first); // Condition
         add(")");
 
         if (hasElse) {
+          // The statement after 'if' needs context BEFORE_DANGLING_ELSE
           addNonEmptyStatement(
               first.getNext(), Context.BEFORE_DANGLING_ELSE, false);
           add("else");
           addNonEmptyStatement(
               last, getContextForNonEmptyExpression(context), false);
         } else {
+          // No else clause. Use OTHER context.
           addNonEmptyStatement(first.getNext(), Context.OTHER, false);
           Preconditions.checkState(childCount == 2);
         }
 
         if (ambiguousElseClause) {
-          cc.endBlock();
+          cc.endBlock(false); // endBlock(false) means no line break after.
         }
         break;
 
       case Token.NULL:
         Preconditions.checkState(childCount == 0);
         cc.addConstant("null");
         break;
 
       case Token.THIS:
         Preconditions.checkState(childCount == 0);
         add("this");
         break;
 
       case Token.FALSE:
         Preconditions.checkState(childCount == 0);
         cc.addConstant("false");
         break;
 
       case Token.TRUE:
         Preconditions.checkState(childCount == 0);
         cc.addConstant("true");
         break;
 
       case Token.CONTINUE:
         Preconditions.checkState(childCount <= 1);
         add("continue");
         if (childCount == 1) {
           if (!first.isLabelName()) {
             throw new Error("Unexpected token type. Should be LABEL_NAME.");
           }
           add(" ");
           add(first);
         }
         cc.endStatement();
         break;
 
       case Token.DEBUGGER:
         Preconditions.checkState(childCount == 0);
         add("debugger");
         cc.endStatement();
         break;
 
       case Token.BREAK:
         Preconditions.checkState(childCount <= 1);
         add("break");
         if (childCount == 1) {
           if (!first.isLabelName()) {
             throw new Error("Unexpected token type. Should be LABEL_NAME.");
           }
           add(" ");
           add(first);
         }
         cc.endStatement();
         break;
 
       case Token.EXPR_RESULT:
         Preconditions.checkState(childCount == 1);
         add(first, Context.START_OF_EXPR);
         cc.endStatement();
         break;
 
       case Token.NEW:
         add("new ");
         int precedence = NodeUtil.precedence(type);
 
         // If the first child contains a CALL, then claim higher precedence
         // to force parentheses. Otherwise, when parsed, NEW will bind to the
         // first viable parentheses (don't traverse into functions).
+        // Example: new (foo()) vs new foo()()
         if (NodeUtil.containsType(
             first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {
-          precedence = NodeUtil.precedence(first.getType()) + 1;
+          // Make precedence higher than CALL.
+          precedence = NodeUtil.precedence(Token.CALL) + 1;
         }
         addExpr(first, precedence, Context.OTHER);
 
         // '()' is optional when no arguments are present
         Node next = first.getNext();
         if (next != null) {
           add("(");
           addList(next);
           add(")");
         }
         break;
 
-      case Token.STRING_KEY:
-        Preconditions.checkState(
-            childCount == 1, "Object lit key must have 1 child");
-        addJsString(n);
+      case Token.STRING_KEY: // Used in object literals. Handled there.
+         // Delegate to addString method below.
+        addString(n.getString(), n.isQuotedString());
         break;
 
       case Token.STRING:
         Preconditions.checkState(
             childCount == 0, "A string may not have children");
-        addJsString(n);
+        addJsString(n); // Handles quoting and escaping.
         break;
 
       case Token.DELPROP:
         Preconditions.checkState(childCount == 1);
         add("delete ");
-        add(first);
+        // Use precedence of DELPROP for the operand.
+        addExpr(first, NodeUtil.precedence(Token.DELPROP), Context.OTHER);
         break;
 
       case Token.OBJECTLIT: {
         boolean needsParens = (context == Context.START_OF_EXPR);
         if (needsParens) {
           add("(");
         }
         add("{");
+        boolean firstEntry = true;
         for (Node c = first; c != null; c = c.getNext()) {
-          if (c != first) {
+          if (!firstEntry) {
             cc.listSeparator();
           }
+          firstEntry = false;
 
           if (c.isGetterDef() || c.isSetterDef()) {
+            // Getter/setter definitions handled separately.
             add(c);
-          } else {
-            Preconditions.checkState(c.isStringKey());
-            String key = c.getString();
-            // Object literal property names don't have to be quoted if they
-            // are not JavaScript keywords
-            if (!c.isQuotedString()
-                && !(languageMode == LanguageMode.ECMASCRIPT3
-                    && TokenStream.isKeyword(key))
-                && TokenStream.isJSIdentifier(key)
-                // do not encode literally any non-literal characters that
-                // were Unicode escaped.
-                && NodeUtil.isLatin(key)) {
-              add(key);
-            } else {
-              // Determine if the string is a simple number.
-              double d = getSimpleNumber(key);
-              if (!Double.isNaN(d)) {
-                cc.addNumber(d);
-              } else {
-                addExpr(c, 1, Context.OTHER);
-              }
-            }
+          } else if (c.isStringKey()) {
+            // Regular property: key: value
+            Node key = c;
+            Node value = c.getFirstChild();
+            Preconditions.checkNotNull(value);
+
+            // Add the key. addString handles quoting.
+            addString(key.getString(), key.isQuotedString());
+
             add(":");
-            addExpr(c.getFirstChild(), 1, Context.OTHER);
+            // Value is an expression, precedence 1 ensures comma operator is parenthesized.
+            addExpr(value, 1, Context.OTHER);
+          } else {
+            throw new IllegalStateException("Unexpected child node type in OBJECTLIT: " + c.getType());
           }
         }
         add("}");
         if (needsParens) {
           add(")");
         }
         break;
       }
 
       case Token.SWITCH:
         add("switch(");
         add(first);
         add(")");
         cc.beginBlock();
         addAllSiblings(first.getNext());
-        cc.endBlock(context == Context.STATEMENT);
+        // endBlock is tricky for switch, might need breakAfterBlock=true
+        cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));
         break;
 
       case Token.CASE:
         Preconditions.checkState(childCount == 2);
         add("case ");
-        add(first);
-        addCaseBody(last);
+        add(first); // The case value expression.
+        addCaseBody(last); // The block of statements.
         break;
 
       case Token.DEFAULT_CASE:
         Preconditions.checkState(childCount == 1);
         add("default");
-        addCaseBody(first);
+        addCaseBody(first); // The block of statements.
         break;
 
       case Token.LABEL:
         Preconditions.checkState(childCount == 2);
         if (!first.isLabelName()) {
           throw new Error("Unexpected token type. Should be LABEL_NAME.");
         }
-        add(first);
+        add(first); // The label name node.
         add(":");
         addNonEmptyStatement(
             last, getContextForNonEmptyExpression(context), true);
         break;
 
-      case Token.CAST:
+      case Token.CAST: // Should not be encountered in normal JS. Represents a Closure type cast.
+        // Output as parenthesized expression: (expr)
         add("(");
         add(first);
         add(")");
         break;
 
       default:
         throw new Error("Unknown type " + type + "\n" + n.toStringTree());
     }
 
     cc.endSourceMapping(n);
   }
\ No newline at end of file
