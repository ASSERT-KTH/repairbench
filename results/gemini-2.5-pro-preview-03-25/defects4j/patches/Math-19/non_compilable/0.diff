diff --git a/tmp/52cde5b0-b1d1-4d03-93cb-756be2f733be_buggy.java b/tmp/9bf314f3-97b3-4da4-9abe-42ef8ac6b057_fixed.java
index d80b7d0..8c971b9 100644
--- a/tmp/52cde5b0-b1d1-4d03-93cb-756be2f733be_buggy.java
+++ b/tmp/9bf314f3-97b3-4da4-9abe-42ef8ac6b057_fixed.java
@@ -1,61 +1,90 @@
     /**
      * Checks dimensions and values of boundaries and inputSigma if defined.
      */
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
+        final int dimension = init.length;
+
+        if (lB == null ||
+            uB == null) {
+            // This should not happen, as the SimpleBounds constructor should
+            // have handled this.
+             boundaries = null;
+             return; // Nothing else to check
+        }
+        // Check bounds dimensions.
+        if (lB.length != dimension) {
+            throw new DimensionMismatchException(lB.length, dimension);
+        }
+        if (uB.length != dimension) {
+            throw new DimensionMismatchException(uB.length, dimension);
+        }
 
         // Checks whether there is at least one finite bound value.
         boolean hasFiniteBounds = false;
-        for (int i = 0; i < lB.length; i++) {
+        for (int i = 0; i < dimension; i++) {
             if (!Double.isInfinite(lB[i]) ||
                 !Double.isInfinite(uB[i])) {
                 hasFiniteBounds = true;
                 break;
             }
         }
         // Checks whether there is at least one infinite bound value.
         boolean hasInfiniteBounds = false;
         if (hasFiniteBounds) {
-            for (int i = 0; i < lB.length; i++) {
+            for (int i = 0; i < dimension; i++) {
                 if (Double.isInfinite(lB[i]) ||
                     Double.isInfinite(uB[i])) {
                     hasInfiniteBounds = true;
                     break;
                 }
             }
 
             if (hasInfiniteBounds) {
                 // If there is at least one finite bound, none can be infinite,
                 // because mixed cases are not supported by the current code.
-                throw new MathUnsupportedOperationException();
+                throw new MathUnsupportedOperationException(LocalizedFormats.REQUESTED_OPERATION_NOT_SUPPORTED);
             } else {
                 // Convert API to internal handling of boundaries.
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
+                // Check for overflow when calculating the range.
+                for (int i = 0; i < dimension; i++) {
+                    final double range = boundaries[1][i] - boundaries[0][i];
+                    if (range < 0) { // Check lower <= upper already done by SimpleBounds
+                         throw new NumberIsTooSmallException(boundaries[1][i], boundaries[0][i], true);
+                    }
+                    if (Double.isInfinite(range)) {
+                        throw new NumberIsTooLargeException(LocalizedFormats.BOUNDARY_RANGE,
+                                                            range, Double.MAX_VALUE, false);
+                    }
+                }
             }
         } else {
             // Convert API to internal handling of boundaries.
             boundaries = null;
         }
 
         if (inputSigma != null) {
-            if (inputSigma.length != init.length) {
-                throw new DimensionMismatchException(inputSigma.length, init.length);
+            if (inputSigma.length != dimension) {
+                throw new DimensionMismatchException(inputSigma.length, dimension);
             }
-            for (int i = 0; i < init.length; i++) {
+            for (int i = 0; i < dimension; i++) {
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
                 if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
+                    // Note: range is guaranteed not to be infinite here due to the earlier check.
+                    final double range = boundaries[1][i] - boundaries[0][i];
+                    if (inputSigma[i] > range) {
+                        throw new OutOfRangeException(inputSigma[i], 0, range);
                     }
                 }
             }
         }
     }
\ No newline at end of file
