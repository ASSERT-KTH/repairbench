diff --git a/tmp/7cacdab3-a8fc-45a4-b17c-6d8dc683eb45_buggy.java b/tmp/5d38fb49-b6e4-4c7c-9850-6d1f15881f31_fixed.java
index d80b7d0..06486fe 100644
--- a/tmp/7cacdab3-a8fc-45a4-b17c-6d8dc683eb45_buggy.java
+++ b/tmp/5d38fb49-b6e4-4c7c-9850-6d1f15881f31_fixed.java
@@ -1,61 +1,102 @@
     /**
      * Checks dimensions and values of boundaries and inputSigma if defined.
      */
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
+        final int dimension = init.length;
 
-        // Checks whether there is at least one finite bound value.
-        boolean hasFiniteBounds = false;
-        for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
-                hasFiniteBounds = true;
-                break;
+        // Initialize boundaries to null (defaulting to unbound optimization)
+        boundaries = null;
+
+        // Check bounds if they are provided (both lower and upper must be non-null)
+        if (lB != null && uB != null) {
+            // Check dimensions match the initial guess
+            if (lB.length != dimension) {
+                throw new DimensionMismatchException(lB.length, dimension);
             }
+            if (uB.length != dimension) {
+                throw new DimensionMismatchException(uB.length, dimension);
             }
-        // Checks whether there is at least one infinite bound value.
-        boolean hasInfiniteBounds = false;
-        if (hasFiniteBounds) {
-            for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
-                    hasInfiniteBounds = true;
-                    break;
+
+            boolean hasFinite = false;
+            boolean hasInfinite = false;
+            for (int i = 0; i < dimension; i++) {
+                // Check: lower boundary must be less than or equal to upper boundary.
+                if (lB[i] > uB[i]) {
+                    throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
+                                                        lB[i], uB[i], false);
                 }
+                // Check for NaN values (robustness check, BaseOptimizer might already check)
+                if (Double.isNaN(lB[i]) || Double.isNaN(uB[i])) {
+                     throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);
                 }
 
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
-                throw new MathUnsupportedOperationException();
+                // Classify bounds for this dimension
+                if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
+                    hasInfinite = true;
                 } else {
-                // Convert API to internal handling of boundaries.
+                    hasFinite = true;
+                }
+            }
+
+            // Check for mixed finite and infinite bounds, which is unsupported.
+            if (hasFinite && hasInfinite) {
+                throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);
+            }
+
+            // If all bounds are finite, set internal boundaries and perform checks.
+            if (hasFinite) { // This implies !hasInfinite due to the check above
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
+                // Check for potential overflow when calculating the range (upper - lower).
+                // Also check if the initial guess is within the finite bounds.
+                for (int i = 0; i < dimension; i++) {
+                    final double range = boundaries[1][i] - boundaries[0][i];
+                    if (Double.isInfinite(range)) {
+                        // Throw exception if the range calculation overflows to infinity.
+                        throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_TOO_LARGE,
+                                                           range, Double.MAX_VALUE, false);
                     }
-        } else {
-            // Convert API to internal handling of boundaries.
-            boundaries = null;
+                    // Check initial point bounds
+                     if (init[i] < boundaries[0][i]) {
+                         throw new OutOfRangeException(init[i], boundaries[0][i], boundaries[1][i]);
                      }
+                     if (init[i] > boundaries[1][i]) {
+                         throw new OutOfRangeException(init[i], boundaries[0][i], boundaries[1][i]);
+                     }
+                }
+            }
+            // If !hasFinite, it means all bounds are infinite (or lB/uB were null).
+            // In this case, 'boundaries' remains null, indicating an unbound problem.
+        } else if (lB != null || uB != null) {
+            // If only one of lB or uB is null, it's an error in setup.
+            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_BOUNDS);
+        }
+        // If both lB and uB are null, 'boundaries' remains null.
+
 
+        // Check inputSigma if it is provided.
         if (inputSigma != null) {
-            if (inputSigma.length != init.length) {
-                throw new DimensionMismatchException(inputSigma.length, init.length);
+            if (inputSigma.length != dimension) {
+                throw new DimensionMismatchException(inputSigma.length, dimension);
             }
-            for (int i = 0; i < init.length; i++) {
+            for (int i = 0; i < dimension; i++) {
+                // Sigma values must be non-negative.
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
+                // If finite boundaries are set, sigma must not be larger than the range.
                 if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
+                    final double range = boundaries[1][i] - boundaries[0][i];
+                    // The range is guaranteed to be finite here due to the earlier check.
+                    if (inputSigma[i] > range) {
+                         throw new OutOfRangeException(inputSigma[i], 0, range);
                     }
                 }
             }
         }
     }
\ No newline at end of file
