diff --git a/tmp/f10a7e9f-cec2-4918-baf5-86402a599922_buggy.java b/tmp/b92142f4-9227-4c41-a493-94bc01d90181_fixed.java
index d80b7d0..952f514 100644
--- a/tmp/f10a7e9f-cec2-4918-baf5-86402a599922_buggy.java
+++ b/tmp/b92142f4-9227-4c41-a493-94bc01d90181_fixed.java
@@ -1,61 +1,103 @@
     /**
      * Checks dimensions and values of boundaries and inputSigma if defined.
      */
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
 
+        // Check dimensions.
+        final int dimension = init.length;
+        if (lB.length != dimension) {
+            throw new DimensionMismatchException(lB.length, dimension);
+        }
+        if (uB.length != dimension) {
+            throw new DimensionMismatchException(uB.length, dimension);
+        }
+
+        // Check bounds relationship and initial point against bounds.
+        for (int i = 0; i < dimension; i++) {
+            if (lB[i] > uB[i]) {
+                throw new NumberIsTooLargeException(lB[i], uB[i], true);
+            }
+            if (init[i] < lB[i]) {
+                throw new OutOfRangeException(init[i], lB[i], uB[i]);
+            }
+            if (init[i] > uB[i]) {
+                throw new OutOfRangeException(init[i], lB[i], uB[i]);
+            }
+        }
+
         // Checks whether there is at least one finite bound value.
         boolean hasFiniteBounds = false;
-        for (int i = 0; i < lB.length; i++) {
+        for (int i = 0; i < dimension; i++) {
             if (!Double.isInfinite(lB[i]) ||
                 !Double.isInfinite(uB[i])) {
                 hasFiniteBounds = true;
                 break;
             }
         }
         // Checks whether there is at least one infinite bound value.
         boolean hasInfiniteBounds = false;
         if (hasFiniteBounds) {
-            for (int i = 0; i < lB.length; i++) {
+            for (int i = 0; i < dimension; i++) {
                 if (Double.isInfinite(lB[i]) ||
                     Double.isInfinite(uB[i])) {
                     hasInfiniteBounds = true;
                     break;
                 }
             }
 
             if (hasInfiniteBounds) {
                 // If there is at least one finite bound, none can be infinite,
                 // because mixed cases are not supported by the current code.
                 throw new MathUnsupportedOperationException();
             } else {
+                // All bounds are finite.
                 // Convert API to internal handling of boundaries.
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
+                // Abort early if the normalization range calculation will overflow (cf. "encode" method).
+                // This happens if uB[i] - lB[i] results in POSITIVE_INFINITY.
+                for (int i = 0; i < dimension; i++) {
+                    final double range = boundaries[1][i] - boundaries[0][i];
+                    // Check if the range calculation resulted in Infinity.
+                    if (Double.isInfinite(range)) {
+                        // Throw NumberIsTooLargeException as expected by the test MATH-865.
+                        throw new NumberIsTooLargeException(range, Double.MAX_VALUE, false);
+                    }
+                    // Optional check for NaN range, though less likely with standard doubles.
+                    if (Double.isNaN(range)) {
+                        // This might happen if bounds themselves are NaN, or e.g. Inf - Inf.
+                        // Bounds validity (non-NaN) should ideally be checked earlier.
+                         throw new MathIllegalStateException(); // Or more specific exception
+                    }
+                }
             }
         } else {
+            // All bounds are infinite.
             // Convert API to internal handling of boundaries.
             boundaries = null;
         }
 
         if (inputSigma != null) {
-            if (inputSigma.length != init.length) {
-                throw new DimensionMismatchException(inputSigma.length, init.length);
+            if (inputSigma.length != dimension) {
+                throw new DimensionMismatchException(inputSigma.length, dimension);
             }
-            for (int i = 0; i < init.length; i++) {
+            for (int i = 0; i < dimension; i++) {
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
-                if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
+                if (boundaries != null) { // Check sigma vs range only if bounds are finite
+                    final double range = boundaries[1][i] - boundaries[0][i];
+                    // Note: range has already been checked for Inf/NaN above.
+                    if (inputSigma[i] > range) {
+                        throw new OutOfRangeException(inputSigma[i], 0, range);
                     }
                 }
+                // If boundaries == null (infinite bounds), sigma only needs to be non-negative.
             }
         }
     }
\ No newline at end of file
