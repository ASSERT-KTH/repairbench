diff --git a/tmp/99f4153a-fb7d-4cbd-82de-0f93c1c2bf23_buggy.java b/tmp/01e20a2d-ffd6-4e42-9b90-d6712a24d641_fixed.java
index d666a67..8ce5407 100644
--- a/tmp/99f4153a-fb7d-4cbd-82de-0f93c1c2bf23_buggy.java
+++ b/tmp/01e20a2d-ffd6-4e42-9b90-d6712a24d641_fixed.java
@@ -1,36 +1,74 @@
+import org.jsoup.internal.StringUtil; // Required import
+
+// Assuming maxStringCacheLen is a static final field in the same class or accessible.
+// e.g. private static final int maxStringCacheLen = 12;
+
     /**
      * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
      * <p />
      * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
      * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
      * some more duplicates.
      */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
-        if (count > maxStringCacheLen)
+        // 1. Validate input ranges
+        // Check for negative start or count, or range exceeding buffer bounds.
+        // Use long for sum to prevent potential overflow.
+        if (start < 0 || count < 0 || (long)start + (long)count > charBuf.length) {
+            // Invalid range requested. Delegate to String constructor, which will throw
+            // the appropriate StringIndexOutOfBoundsException. This preserves the original
+            // behavior for invalid inputs (throwing an exception) while ensuring the
+            // caching logic below only operates on valid ranges.
             return new String(charBuf, start, count);
+        }
 
-        // calculate hash:
+        // 2. Handle non-cacheable cases or optimizations
+        if (count == 0) {
+            // Return the canonical empty string. Avoids cache lookup/storage for "".
+            return "";
+        }
+        // Check if the string length exceeds the maximum cacheable length.
+        // maxStringCacheLen is expected to be defined elsewhere in the class.
+        if (count > maxStringCacheLen) {
+            // String is too long for cache. Create a new instance directly.
+            // The new String call is safe due to the range validation above.
+            return new String(charBuf, start, count);
+        }
+
+        // 3. Proceed with cache lookup / update for eligible strings
+        // Calculate hash code based on the character range.
+        // This loop is safe because 'start' and 'count' have been validated.
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+        // Calculate the cache index using bitwise AND (assuming stringCache.length is power of 2).
+        // This is efficient and ensures the index is within bounds [0, stringCache.length - 1].
+        final int index = hash & (stringCache.length - 1);
         String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+        if (cached == null) { // Cache miss
+            // Create the string from the char buffer range (call is safe).
             cached = new String(charBuf, start, count);
+            // Store the new string in the cache.
             stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+        } else { // Cache entry exists: hash hit or collision
+            // Verify if the cached string actually matches the requested character range.
+            // Assumes StringUtil.rangeEquals correctly compares the string and char range.
+            // The call is safe due to input validation checks ensuring start, count are valid.
+            if (StringUtil.rangeEquals(cached, charBuf, start, count)) { // Cache hit
+                // The cached string is identical, return it.
                 return cached;
-            } else { // hashcode conflict
+            } else { // Hash collision
+                // The cached string has the same hash but different content.
+                // Create the new string from the char buffer range (call is safe).
                 cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
+                // Replace the cache entry with the new string (Flywheel update strategy).
+                stringCache[index] = cached;
             }
         }
+        // Return the string (either newly created or found/verified in cache).
         return cached;
     }
\ No newline at end of file
