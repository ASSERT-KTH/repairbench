diff --git a/tmp/05543532-3301-4b91-98fc-0425e83aa657_buggy.java b/tmp/92b83bb2-4703-4af5-a021-36f67d63c923_fixed.java
index d666a67..3c69c6b 100644
--- a/tmp/05543532-3301-4b91-98fc-0425e83aa657_buggy.java
+++ b/tmp/92b83bb2-4703-4af5-a021-36f67d63c923_fixed.java
@@ -1,36 +1,78 @@
     /**
      * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
      * <p />
      * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
      * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
      * some more duplicates.
      */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
+        // Add explicit bounds checks to prevent issues with invalid inputs from the caller.
+        // The String constructor would throw exceptions anyway, but checking upfront can
+        // avoid unexpected behavior or less clear exceptions in other parts of the method.
+        // Check count first as it's used in the start + count check.
+        if (count < 0) {
+             // Mimic the exception type that String constructor might throw for negative count/start.
+             throw new StringIndexOutOfBoundsException("Negative count: " + count);
+        }
+        if (start < 0) {
+             // A negative start index is a likely cause for StringIndexOutOfBoundsException with index -1
+             // being thrown by the String constructor.
+             throw new StringIndexOutOfBoundsException("Negative start: " + start);
+        }
+        // Use check that avoids potential start+count overflow
+        if (start > charBuf.length - count) {
+             throw new StringIndexOutOfBoundsException("offset " + start + ", count " + count + ", length " + charBuf.length);
+        }
+        
         // limit (no cache):
+        // This check must happen after bounds validation.
         if (count > maxStringCacheLen)
+            // Bounds already checked, safe to create string.
             return new String(charBuf, start, count);
 
         // calculate hash:
         int hash = 0;
         int offset = start;
+        // Loop bounds are safe due to prior checks.
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
 
         // get from cache
-        final int index = hash & stringCache.length - 1;
+        // Use parentheses for clarity, although precedence is correct without them.
+        // Assumes stringCache.length is a power of 2 and > 0. If not, caching is just suboptimal.
+        final int index = hash & (stringCache.length - 1);
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
+            // Bounds already checked, safe to create string.
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
+            // Assumes rangeEquals is robust and handles start/count correctly (bounds checked here).
             if (rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
+                // Bounds already checked, safe to create string.
                 cached = new String(charBuf, start, count);
                 stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
             }
         }
         return cached;
     }
+
+    // Assuming rangeEquals and maxStringCacheLen are defined elsewhere appropriately.
+    // A plausible definition for rangeEquals (static version):
+    /*
+    private static boolean rangeEquals(final char[] charBuf, final int start, final int count, final String cached) {
+        if (count != cached.length())
+            return false;
+        for (int i = 0; i < count; i++) {
+            if (charBuf[start + i] != cached.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
+    private static final int maxStringCacheLen = 30; // Example value
+    */
\ No newline at end of file
