diff --git a/tmp/720146ef-95de-4cc8-b65e-fece7af5e316_buggy.java b/tmp/6fe85ca9-7105-4b89-acef-80cf1884dc3e_fixed.java
index d666a67..9b8036c 100644
--- a/tmp/720146ef-95de-4cc8-b65e-fece7af5e316_buggy.java
+++ b/tmp/6fe85ca9-7105-4b89-acef-80cf1884dc3e_fixed.java
@@ -1,36 +1,61 @@
     /**
      * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
      * <p />
      * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
      * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
      * some more duplicates.
      */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
+        // Added check for count == 0 to avoid potential negative start index causing SIOOBE in String constructor
+        // See https://github.com/jhy/jsoup/issues/1456
+        if (count == 0) {
+            // Assuming the hash of "" is 0, the cache index is 0.
+            final int index = 0;
+            String cached = stringCache[index];
+            if ("".equals(cached)) { // Using literal "" is efficient and safe
+                return cached; // Cache hit for empty string
+            } else {
+                // Cache miss or collision at index 0 for "". Store literal "" and return it.
+                stringCache[index] = "";
+                return "";
+            }
+        }
+
+        // Original logic for count > 0
         // limit (no cache):
         if (count > maxStringCacheLen)
+            // If start or count are invalid here (e.g., start < 0, start+count > charBuf.length),
+            // this constructor will throw the appropriate IndexOutOfBoundsException.
             return new String(charBuf, start, count);
 
         // calculate hash:
         int hash = 0;
         int offset = start;
+        // This loop will throw ArrayIndexOutOfBoundsException if start < 0 (and count > 0),
+        // which is appropriate for invalid input.
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
 
         // get from cache
-        final int index = hash & stringCache.length - 1;
+        final int index = hash & (stringCache.length - 1); // Parentheses for clarity, equivalent to original
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
+            // If start or count are invalid here (e.g., start+count > charBuf.length),
+            // this constructor will throw the appropriate IndexOutOfBoundsException.
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
+            // rangeEquals expects valid parameters. If they are invalid due to caller error,
+            // it might throw AIOOBE, which is acceptable.
             if (rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
+                // If start or count are invalid, this constructor will throw.
                 cached = new String(charBuf, start, count);
                 stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
             }
         }
         return cached;
     }
