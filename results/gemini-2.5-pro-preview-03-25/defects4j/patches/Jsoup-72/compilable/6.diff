diff --git a/tmp/58193c57-d8f5-4c2b-b254-128cf94f31b0_buggy.java b/tmp/c9f8ffd0-a4e1-4a85-8a02-a6f89606632e_fixed.java
index d666a67..aa9f78c 100644
--- a/tmp/58193c57-d8f5-4c2b-b254-128cf94f31b0_buggy.java
+++ b/tmp/c9f8ffd0-a4e1-4a85-8a02-a6f89606632e_fixed.java
@@ -1,36 +1,43 @@
     /**
      * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
      * <p />
      * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
      * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
      * some more duplicates.
      */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
         // limit (no cache):
         if (count > maxStringCacheLen)
             return new String(charBuf, start, count);
 
+        // Added check for count == 0 to directly return "", avoiding hashing/lookup for empty strings.
+        // Although the original logic likely handled count=0 correctly, this makes it explicit.
+        if (count == 0)
+            return "";
+
         // calculate hash:
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
 
         // get from cache
-        final int index = hash & stringCache.length - 1;
+        // Use (length - 1) as mask assuming length is power of 2
+        final int index = hash & (stringCache.length - 1);
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
             if (rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
+                // on conflict, replace the cached entry. Assumes recently used strings are more likely hit again.
                 cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
+                stringCache[index] = cached; 
             }
         }
         return cached;
     }
\ No newline at end of file
