diff --git a/tmp/f0cfedf8-2c4b-4a47-8d7a-04c7080b46e6_buggy.java b/tmp/5c51fd1b-90e2-4f9f-9825-257cadbc2ef9_fixed.java
index bc80637..08a6fec 100644
--- a/tmp/f0cfedf8-2c4b-4a47-8d7a-04c7080b46e6_buggy.java
+++ b/tmp/5c51fd1b-90e2-4f9f-9825-257cadbc2ef9_fixed.java
@@ -1,33 +1,40 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
+        // First, check Concrete Deserializers
         if (_factoryConfig.hasKeyDeserializers()) {
+            // We'll assume `keyDeserializers` are immutable. And if not, perhaps we
+            // should make a copy? For now, just iterate.
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
-        // the only non-standard thing is this:
+
+        // If not found, only possibilities are standard Enum and String-based ones
         if (deser == null) {
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
-            }
+                // This is the fix: assign to 'deser' instead of returning directly,
+                // so that modifiers can be applied later.
+                deser = _createEnumKeyDeserializer(ctxt, type);
+            } else {
                 deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
             }
+        }
         // and then post-processing
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
