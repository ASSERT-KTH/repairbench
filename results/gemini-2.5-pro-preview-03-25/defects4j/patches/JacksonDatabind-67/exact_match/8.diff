diff --git a/tmp/f6e3c1f7-02c3-4670-957e-7d20f7d3fa79_buggy.java b/tmp/2eaca06f-282a-4f63-bfac-e56b4e3c9243_fixed.java
index bc80637..571864d 100644
--- a/tmp/f6e3c1f7-02c3-4670-957e-7d20f7d3fa79_buggy.java
+++ b/tmp/2eaca06f-282a-4f63-bfac-e56b4e3c9243_fixed.java
@@ -1,33 +1,39 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
+        // First: call provider factories.
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
-        // the only non-standard thing is this:
+
+        // If not found, only possibilities are standard types:
         if (deser == null) {
+            // We have established standard handling for Enum keys, so:
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
-            }
+                // 11-Jun-2020, tatu: Important: MUST delegate to method, NOT create directly
+                //   as Linguistics may affect details...
+                 deser = _createEnumKeyDeserializer(ctxt, type);
+            } else {
                  deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
             }
-        // and then post-processing
+        }
+        // [databind#129]: Allow modules to change deserializers.
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
\ No newline at end of file
