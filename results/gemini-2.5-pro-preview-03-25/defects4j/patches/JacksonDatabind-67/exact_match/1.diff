diff --git a/tmp/946a5d19-f381-40f7-8467-ae8ad2abe4cf_buggy.java b/tmp/b1eb2f51-b135-4ee7-bf4e-dfef4ab5ced8_fixed.java
index bc80637..58317bb 100644
--- a/tmp/946a5d19-f381-40f7-8467-ae8ad2abe4cf_buggy.java
+++ b/tmp/b1eb2f51-b135-4ee7-bf4e-dfef4ab5ced8_fixed.java
@@ -1,33 +1,42 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
+        // First, check factories
         if (_factoryConfig.hasKeyDeserializers()) {
+            // NOTE: If using Class-based introspection, needs to be `introspectClassAnnotations`
+            // but if using property-based annotations, this is incorrect. Choose wisely.
+            // For key types, Class-based seems appropriate.
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
-        // the only non-standard thing is this:
+
+        // If no factory found, check standard types
         if (deser == null) {
+            // Special handling for Enums:
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
-            }
+                 // *** FIX: Assign to 'deser', do not return immediately ***
+                deser = _createEnumKeyDeserializer(ctxt, type);
+            // Otherwise, standard String-based key types
+            } else {
                 deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
             }
-        // and then post-processing
+        }
+        // and then post-processing: apply any modifiers
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
\ No newline at end of file
