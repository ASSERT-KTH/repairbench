diff --git a/tmp/698b3ec4-fa02-439f-84a2-e24892a11b55_buggy.java b/tmp/0a22edbc-91a5-4efe-90c9-ce7be9fa855f_fixed.java
index bc80637..cbc1fa0 100644
--- a/tmp/698b3ec4-fa02-439f-84a2-e24892a11b55_buggy.java
+++ b/tmp/0a22edbc-91a5-4efe-90c9-ce7be9fa855f_fixed.java
@@ -1,33 +1,41 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
+        // First check providers
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
-        // the only non-standard thing is this:
+
+        // If not found, only then check standard ones:
         if (deser == null) {
+            // the only non-standard thing is this:
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
-            }
+                // [databind#1445] Fix: create standard one first, then allow modifications
+                deser = _createEnumKeyDeserializer(ctxt, type);
+                // Previously returned directly, skipping modifiers: return _createEnumKeyDeserializer(ctxt, type);
+            } else {
                 deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
             }
-        // and then post-processing
+        }
+
+        // and then allow post-processing
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
+        // Finally, return resulting instance
         return deser;
     }
\ No newline at end of file
