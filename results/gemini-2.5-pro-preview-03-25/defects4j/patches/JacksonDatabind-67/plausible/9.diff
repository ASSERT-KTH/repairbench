diff --git a/tmp/caeea265-0e12-4a9c-9ee9-2ba1dc1b25fd_buggy.java b/tmp/6e2e0d63-ad9c-4585-ac29-de1952105637_fixed.java
index bc80637..a8e6892 100644
--- a/tmp/caeea265-0e12-4a9c-9ee9-2ba1dc1b25fd_buggy.java
+++ b/tmp/6e2e0d63-ad9c-4585-ac29-de1952105637_fixed.java
@@ -1,33 +1,46 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
+        // First, check specified providers
         if (_factoryConfig.hasKeyDeserializers()) {
-            BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
+            // Need BeanDesc for annotations etc
+            // NOTE: changed from introspectClassAnnotations() in 2.9, as key types can be more complex
+            BeanDescription beanDesc = config.introspect(type);
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
-        // the only non-standard thing is this:
+
+        // If not found, only possibilities are standard Enum and String/number/etc key types
         if (deser == null) {
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
-            }
+                // Changed: Don't return yet, let modifiers run
+                deser = _createEnumKeyDeserializer(ctxt, type);
+            } else {
                 deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
             }
-        // and then post-processing
+        }
+
+        // And finally, opportunity for modifications
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
+                    // Sanity check, shouldn't occur (if modifier follows contract)
+                    if (deser == null) {
+                         throw new IllegalStateException(String.format(
+                                 "BeanDeserializerModifier (%s) returned null for type [%s]",
+                                 mod.getClass().getName(), type));
+                    }
                 }
             }
         }
         return deser;
     }
\ No newline at end of file
