diff --git a/tmp/7cc8deba-d5a8-41c6-a5a9-fd78dc99661d_buggy.java b/tmp/55063520-47a7-4b15-acdf-49a7675c99cb_fixed.java
index 442a001..dd45e0c 100644
--- a/tmp/7cc8deba-d5a8-41c6-a5a9-fd78dc99661d_buggy.java
+++ b/tmp/55063520-47a7-4b15-acdf-49a7675c99cb_fixed.java
@@ -1,39 +1,49 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
-        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();
+        ArrayList<Connection.KeyVal> data = new ArrayList<>(); // Use diamond operator for conciseness
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
             if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
+            if (el.hasAttr("disabled")) continue; // Skip disabled fields.
             String name = el.attr("name");
             if (name.length() == 0) continue;
-            String type = el.attr("type");
+            String type = el.attr("type").toLowerCase(); // Use lowercase for consistent checks
 
             if ("select".equals(el.tagName())) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
+                // Follow browser behaviour: if no option selected, the first one is submitted
                 if (!set) {
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+            } else if ("checkbox".equals(type) || "radio".equals(type)) {
                 // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
-                    final String val = el.val();
-                    data.add(HttpConnection.KeyVal.create(name, val));
+                    // If value attribute is not set, the default value is "on" for checkboxes per spec
+                    // Use hasAttr check which is more robust than checking val().isEmpty()
+                    if (!el.hasAttr("value") && "checkbox".equals(type)) {
+                        data.add(HttpConnection.KeyVal.create(name, "on"));
+                    } else {
+                        // If value attribute is set, use its value
+                        data.add(HttpConnection.KeyVal.create(name, el.val()));
+                    }
                 }
+                // unchecked checkbox/radio are not submitted
             } else {
+                // All other input types (text, password, hidden, etc.), textarea
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
