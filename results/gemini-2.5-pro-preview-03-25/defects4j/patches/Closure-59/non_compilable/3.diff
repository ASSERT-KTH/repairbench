diff --git a/tmp/3f5f3d69-1d50-4bc4-8dfc-1be26e162297_buggy.java b/tmp/b0719c88-b566-42f8-80ba-f625cf992913_fixed.java
index 29fabfa..306d7ce 100644
--- a/tmp/3f5f3d69-1d50-4bc4-8dfc-1be26e162297_buggy.java
+++ b/tmp/b0719c88-b566-42f8-80ba-f625cf992913_fixed.java
@@ -1,67 +1,84 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
-    if (options.checkGlobalThisLevel.isOn()) {
-      options.setWarningLevel(
-          DiagnosticGroups.GLOBAL_THIS,
-          options.checkGlobalThisLevel);
+    // Determine the effective check level for the CheckGlobalThis diagnostic.
+    // The level set in the warnings guard (e.g., via --jscomp_off=globalThis)
+    // takes precedence over the specific checkGlobalThisLevel field.
+    CheckLevel effectiveGlobalThisLevel = options.checkGlobalThisLevel; // Default value
+
+    // Check the warnings guard for the specific diagnostic type.
+    // Note: DiagnosticGroups.GLOBAL_THIS may not be the only group containing
+    // CheckGlobalThis.CHECK_GLOBAL_THIS, but it's the primary one.
+    // Querying the specific diagnostic type gets the most accurate level.
+    CheckLevel levelFromGuard = options.getWarningsGuard().getLevel(CheckGlobalThis.CHECK_GLOBAL_THIS);
+
+    if (levelFromGuard != null) {
+      // If the guard has a specific level for this diagnostic, use it.
+      effectiveGlobalThisLevel = levelFromGuard;
     }
 
+    // Synchronize the specific field (used by CheckGlobalThis pass) and the
+    // warnings guard group setting (used by the general reporting mechanism).
+    options.checkGlobalThisLevel = effectiveGlobalThisLevel;
+    // Update the warning level for the entire group to maintain consistency.
+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, effectiveGlobalThisLevel);
+
+
     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
       options.setWarningLevel(
           DiagnosticGroups.ES5_STRICT,
           CheckLevel.ERROR);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
     if (!options.checkSymbols &&
         !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
       composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = composedGuards;
   }
\ No newline at end of file
