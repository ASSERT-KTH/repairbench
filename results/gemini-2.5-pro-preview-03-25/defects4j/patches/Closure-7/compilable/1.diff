diff --git a/tmp/16d3e6de-13a3-4cc8-ac82-3424a4e7ba49_buggy.java b/tmp/d2fae539-4360-4b01-bb16-265684fa9221_fixed.java
index a38ec6d..e1ec23e 100644
--- a/tmp/16d3e6de-13a3-4cc8-ac82-3424a4e7ba49_buggy.java
+++ b/tmp/d2fae539-4360-4b01-bb16-265684fa9221_fixed.java
@@ -1,10 +1,29 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        JSType ctorType = getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
+        if (resultEqualsValue) { // Case: typeof x == 'function'
+          // Restrict 'type' to Function or its subtypes.
+          // Find the greatest common subtype between the original type and the general Function type.
+          JSType funcType = type.getGreatestSubtype(ctorType);
+
+          // If the intersection (greatest common subtype) is the bottom type (empty),
+          // it means the original type could not possibly satisfy typeof x == 'function'.
+          // Return null to indicate that this branch is impossible.
+          // Otherwise, return the intersection.
+          return funcType.isEmptyType() ? null : funcType;
+        } else { // Case: typeof x != 'function'
+          // We know the type is not a function. However, the framework convention appears
+          // to be that this method returns null when it cannot provide a *more specific*
+          // restriction than simply knowing the condition is false. The caller interprets
+          // null as "no change" or handles the negation separately. The failing tests
+          // expect the original type in the false case, which aligns with the caller's
+          // behavior when this method returns null.
+          return null;
         }
+      }
+
+      // Original logic for typeof x == 'object' or typeof x != 'object'.
+      // The failing tests did not involve this path.
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
