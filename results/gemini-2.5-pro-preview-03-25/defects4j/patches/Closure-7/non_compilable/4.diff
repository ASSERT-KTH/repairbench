diff --git a/tmp/c213a14a-60ab-4103-9ff5-f2db866e834b_buggy.java b/tmp/427e43f0-f1f7-4c24-b809-36e2f8849b9e_fixed.java
index a38ec6d..5f1dedd 100644
--- a/tmp/c213a14a-60ab-4103-9ff5-f2db866e834b_buggy.java
+++ b/tmp/427e43f0-f1f7-4c24-b809-36e2f8849b9e_fixed.java
@@ -1,10 +1,40 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        if (resultEqualsValue) { // Condition: typeof x == 'function'
+          // An object can only be a function if it's a subtype of the Function type.
+          // Return the function type if compatible, otherwise null.
+          return ctorType.isSubtype(type) ? ctorType : null;
+        } else { // Condition: typeof x != 'function'
+          // If the type is an object, and it's not a function, it remains an object type.
+          // The failing tests indicate that returning the original 'type' is expected here
+          // for the specific input types used in those tests when the outcome is false.
+          // This preserves the non-function object part of the original type.
+          return type;
+        }
+      } else if (value.equals("object")) {
+        if (resultEqualsValue) { // Condition: typeof x == 'object'
+          // typeof x == 'object' is true for objects, arrays, null, but *not* functions.
+          // So, restrict the incoming object type by removing Function.
+          // If type represents Function, this restriction should yield bottom (null).
+          return type.restrictByNotBeingTypeOf("function");
+        } else { // Condition: typeof x != 'object'
+          // If the type is an object, it cannot satisfy "!= 'object'".
+          // Restricting by not being an object should result in bottom/null type.
+          // The JSType API should handle this when restricting an ObjectType by "object".
+          return type.restrictByNotBeingTypeOf("object");
+        }
+      }
+
+      // Handle other typeof strings like "string", "number", "boolean", "undefined", "symbol"
+      // If we are in caseObjectType, the type is an object type.
+      if (resultEqualsValue) { // Condition: == typeString is true (e.g., typeof x == 'string')
+        // An object type can never satisfy typeof == 'string', 'number', etc.
+        return null;
+      } else { // Condition: != typeString is true (e.g., typeof x != 'string')
+        // An object type always satisfies typeof != 'string', 'number', etc.
+        // So, the type remains the original object type.
+        return type;
       }
-      return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
