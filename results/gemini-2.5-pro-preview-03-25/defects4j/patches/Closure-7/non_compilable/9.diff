diff --git a/tmp/54124025-9af9-421a-854d-8b72ac33b2d0_buggy.java b/tmp/cf4fb66f-cbe1-48b2-820a-cb57c26e3151_fixed.java
index a38ec6d..47eca5c 100644
--- a/tmp/54124025-9af9-421a-854d-8b72ac33b2d0_buggy.java
+++ b/tmp/cf4fb66f-cbe1-48b2-820a-cb57c26e3151_fixed.java
@@ -1,10 +1,59 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        if (resultEqualsValue) {
+          // If the result is 'function', narrow to the Function type.
+          // Note that FUNCTION_FUNCTION_TYPE != U2U_CONSTRUCTOR_TYPE. The former
+          // is the type of the Function constructor, the latter is the type of
+          // function instances.
+          return ctorType;
+        } else {
+          // If the result is NOT 'function', remove the Function type from the
+          // possibilities.
+          return type.restrictByNotBeingType(ctorType);
         }
+      }
+
+      // Handle the typeof x == 'object' case.
+      // Note that typeof null == 'object'.
+      // Note that typeof function == 'function'.
+      // Note that typeof classtype == 'function'.
+      if (value.equals("object")) {
+        // If the result is 'object', Possible types are Object or null.
+        // We know that the current type is not a function, because
+        // functions are handled in the case above.
+        // If the type is already restricted to object/null, it is returned.
+        // If the type could be object/null and something else, restrict it.
+        // If the type cannot be object/null, return null.
+        JSType NATIVE_OBJECT_TYPE = getNativeType(OBJECT_TYPE);
+        JSType nullType = getNativeType(JSTypeNative.NULL_TYPE);
+        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
+
+        boolean canBeObject = !type.getGreatestSubtype(NATIVE_OBJECT_TYPE)
+             .restrictByNotBeingType(ctorType).isEmptyType();
+        boolean canBeNull = !type.getGreatestSubtype(nullType).isEmptyType();
+
+        if (resultEqualsValue) {
+          if (canBeObject || canBeNull) {
+            JSType restricted = type.getGreatestSubtype(NATIVE_OBJECT_TYPE)
+                  .restrictByNotBeingType(ctorType);
+            JSType nullRestricted = type.getGreatestSubtype(nullType);
+            // Union can return bottom type if both are bottom
+            return typeRegistry.createUnionType(restricted, nullRestricted);
+          } else {
+            return null;
+          }
+        } else {
+           // The result is NOT 'object', so it's not an object or null.
+           // It can still be a function or a primitive.
+           // Remove non-function objects and null from the type.
+           JSType restricted = type.restrictByNotBeingType(NATIVE_OBJECT_TYPE);
+           restricted = restricted.restrictByNotBeingType(nullType);
+           return restricted.isEmptyType() ? null : restricted;
+        }
+      }
+
+      // Only treat unknown types as Objects if the Object type is expected.
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
