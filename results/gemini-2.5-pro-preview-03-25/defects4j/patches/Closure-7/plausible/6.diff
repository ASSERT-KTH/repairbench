diff --git a/tmp/836fe63c-4919-492d-847d-fca18f9f07fa_buggy.java b/tmp/2992e22f-b158-43f0-b754-863de550a25c_fixed.java
index a38ec6d..7061e95 100644
--- a/tmp/836fe63c-4919-492d-847d-fca18f9f07fa_buggy.java
+++ b/tmp/2992e22f-b158-43f0-b754-863de550a25c_fixed.java
@@ -1,10 +1,24 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        if (resultEqualsValue) { // typeof x === 'function'
+          // If the object type 'type' could be a function (i.e., 'type' is a supertype of
+          // Function), then restrict it to the function type. Otherwise, this check
+          // fails and the resulting type is null (bottom).
+          return ctorType.isSubtype(type) ? ctorType : null;
+        } else { // typeof x !== 'function'
+          // If the object type 'type' is known to be a function (i.e., 'type' is a subtype
+          // of Function), then this check fails and the resulting type is null (bottom).
+          // Otherwise, the type is restricted to not being a function, which means
+          // it remains 'type' (e.g. Object, RegExp, etc.).
+          return type.isSubtype(ctorType) ? null : type;
         }
+      }
+
+      // Handle cases where value is "object", "string", "number", etc.
+      // For an ObjectType 'type' (which isn't a function, handled above),
+      // typeof is "object". Check if the expectation matches this.
+      // matchesExpectation(str) returns true if (typeof type == str) == resultEqualsValue.
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
