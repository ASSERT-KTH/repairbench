diff --git a/tmp/153a971f-ecac-40e7-a389-faf19b7ae7aa_buggy.java b/tmp/b11c1431-89dd-4cba-937d-f8370a405169_fixed.java
index a38ec6d..44763d4 100644
--- a/tmp/153a971f-ecac-40e7-a389-faf19b7ae7aa_buggy.java
+++ b/tmp/b11c1431-89dd-4cba-937d-f8370a405169_fixed.java
@@ -1,10 +1,36 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        boolean typeIsGuaranteedFunction = type.isFunctionType(); // e.g., Function, an interface
+
+        // Check if the original type is potentially compatible with the typeof result
+        if (resultEqualsValue) {
+          // Case: typeof x == 'function'
+          // This is possible if the type is Function or a supertype like Object or Unknown.
+          // It means the original type must be a supertype of Function.
+          boolean possible = ctorType.isSubtype(type);
+          // If possible, the refined type is Function. Otherwise, this condition branch is impossible.
+          return possible ? ctorType : null;
+        } else {
+          // Case: typeof x != 'function'
+          // This is possible if the type can yield something other than 'function'.
+          // If the type *must* yield 'function' (guaranteed function type), then this is impossible.
+          if (typeIsGuaranteedFunction) {
+            return null;
+          } else {
+            // Otherwise, the type might yield 'function' or 'object' (or others if it's a Union).
+            // The condition `!= 'function'` rules out the 'function' case.
+            // The remaining possibilities (e.g., non-function objects, null) are still consistent
+            // with the original ObjectType `type` (since it wasn't *purely* Function).
+            // Return the original type, indicating it can satisfy the condition.
+            // Further refinement (like removing Function from a Union) happens elsewhere.
+            return type;
           }
+        }
+      }
+
+      // Original logic for typeof x == 'object' etc.
+      // Assumes matchesExpectation checks if the type potentially matches the value based on resultEqualsValue.
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
