diff --git a/tmp/746f9182-b6a7-4187-a91a-4aa83202bf8e_buggy.java b/tmp/6e8a14ad-0364-4274-b586-54e7f2335bc0_fixed.java
index 57c40b2..bbfdbcd 100644
--- a/tmp/746f9182-b6a7-4187-a91a-4aa83202bf8e_buggy.java
+++ b/tmp/6e8a14ad-0364-4274-b586-54e7f2335bc0_fixed.java
@@ -1,27 +1,44 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
+    // TODO(user): We should use isEnumElementType property rather than
+    // isEnumType, but Nodes must be annotated for that to work.
+    boolean isObjLit = objNode.isObjectLit();
+    if (childType.isDict() && !isObjLit) { // Allow property access on object literals, even if they are dicts
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
+    } else if (childType.isEnumType() && !isObjLit) { // Allow property access on object literals, even if they are enums
+      // TODO(nicksantos): This needs to be flushed out more.
+      // Like dicts, enums should not allow random property accesses.
+      // We can't use JSType#isSubtypeOf because we don't have
+      // a type variable for the enum type yet.
+      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "enum");
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // If the property access occurs on the left hand side of an assignment
+      // or a compound assignment, check whether the property is assignable.
+      boolean isAssign = parent.isAssign();
+      boolean isCompoundAssign = NodeUtil.isCompoundAssignment(parent);
+      if (isAssign || isCompoundAssign) {
+          checkPropertyAssignment(t, parent, n, childType);
+      } else {
+          // Do not check getprop accesses on the prototype chain
+          // unless the user has specified the stricter checks.
           checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
     ensureTyped(t, n);
   }
\ No newline at end of file
