diff --git a/tmp/a1f21822-319f-48f1-a466-01a896ef4929_buggy.java b/tmp/9341d1b5-2801-480e-90e9-16c9d7676bdf_fixed.java
index 57c40b2..ef25655 100644
--- a/tmp/a1f21822-319f-48f1-a466-01a896ef4929_buggy.java
+++ b/tmp/9341d1b5-2801-480e-90e9-16c9d7676bdf_fixed.java
@@ -1,27 +1,48 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // Dicts are handled separately -- they don't have properties.
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
+      ensureTyped(t, n); // Ensure the node gets a type even in case of error.
       return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    }
+
+    // Check that the property access is on a type that actually has properties.
+    // This check should fail for null and undefined, and optionally for other
+    // types like string primitives.
+    boolean PRED = validator.expectNotNullOrUndefined(t, n, childType,
+        "No properties on this expression", getNativeType(OBJECT_TYPE));
+
+    // If the base type is not null or undefined, check the property existence.
+    if (PRED) {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
+
+    // Ensure the GETPROP node gets a type assigned. This is necessary even if
+    // the checks above failed (e.g., accessing property on null). ensureTyped
+    // will assign the UNKNOWN_TYPE in such cases.
     ensureTyped(t, n);
+
+    // The earlier version had an early return here for assignments:
+    // else if (n.getJSType() != null && parent.isAssign()) { return; }
+    // This was incorrect because it prevented the null check (expectNotNullOrUndefined)
+    // and the property existence check (checkPropertyAccess) from running
+    // on the left-hand side of assignments (like in `x.prop = 3;` where x is null)
+    // and potentially on the right-hand side as well if the node already had a type.
+    // These checks are necessary regardless of the assignment context.
   }
\ No newline at end of file
