diff --git a/tmp/e733daa0-356b-4a91-8a16-cfa4bcd61b90_buggy.java b/tmp/a9e3cc30-573d-40d5-a328-750362411af9_fixed.java
index 57c40b2..cad44f9 100644
--- a/tmp/e733daa0-356b-4a91-8a16-cfa4bcd61b90_buggy.java
+++ b/tmp/a9e3cc30-573d-40d5-a328-750362411af9_fixed.java
@@ -1,27 +1,42 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // Handle dictionary access
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+    } else if (childType.isNullType() || childType.isVoidType()) {
+      // Check for null or undefined access first.
+      // We can't just rely on expectNotNullOrUndefined because we might be
+      // assigning to this property, and we still want to check the base object.
+      // Example: var x = null; x.prop = 3;
+      validator.expectNotNullOrUndefined(
+          t, n, childType, "No properties on this expression", getNativeType(OBJECT_TYPE));
+    } else {
+      // Check property access on other types.
+      // expectNotNullOrUndefined has already ensured childType is not null/undefined here.
+      // We still need expectNotNullOrUndefined for the warning message
+      // and to return the OBJECT_TYPE if the type is invalid.
+      if (validator.expectNotNullOrUndefined(t, n, childType,
           "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+         // Only check property access if the base type is valid (not null/undefined).
          checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
+
+    // Ensure the GETPROP node itself has a type.
     ensureTyped(t, n);
   }
\ No newline at end of file
