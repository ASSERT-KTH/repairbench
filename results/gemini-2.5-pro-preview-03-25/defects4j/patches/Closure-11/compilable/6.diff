diff --git a/tmp/0a9179f2-ec7d-4e24-8123-5dec0395cae1_buggy.java b/tmp/96482a4b-1c7d-486b-8c6b-7f9208b74569_fixed.java
index 57c40b2..dd2e4ef 100644
--- a/tmp/0a9179f2-ec7d-4e24-8123-5dec0395cae1_buggy.java
+++ b/tmp/96482a4b-1c7d-486b-8c6b-7f9208b74569_fixed.java
@@ -1,27 +1,34 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // The type of the GETPROP/GETELEM depends on the property type.
+    boolean isGetProp = n.isGetProp(); // Store this before potential modification
+
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // Do not check property access on optional arguments, because we don't
+      // know whether the property is actually going to be accessed.
+      if (!childType.isUnknownType() &&
+          !(objNode.isName() && objNode.getString().equals("arguments") &&
+           property.getString().equals("callee"))) {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
     ensureTyped(t, n);
   }
\ No newline at end of file
