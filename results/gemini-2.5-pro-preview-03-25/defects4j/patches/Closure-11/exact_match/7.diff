diff --git a/tmp/6849f572-5733-410e-9d24-4714544fd9e6_buggy.java b/tmp/317b5ffe-392f-4dc4-bfd2-d65f0d38fe81_fixed.java
index 57c40b2..f86c855 100644
--- a/tmp/6849f572-5733-410e-9d24-4714544fd9e6_buggy.java
+++ b/tmp/317b5ffe-392f-4dc4-bfd2-d65f0d38fe81_fixed.java
@@ -1,27 +1,42 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    // TODO(user): We should eventually check for null/undefined on the left
+    // side of assignments. We can recognize this by checking if parent is an
+    // assign and n is the first child of parent. But this requires us to
+    // look ahead in the type checking, and the infrastructure isn't quite
+    // there yet.
+
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
+    // This early return used to skip the property access check below,
+    // including the null check and the unknown property check, primarily
+    // for assignments like `var x = {}; x.prop = 3;`. However, this caused
+    // legitimate warnings (like null checks and unknown property checks on the
+    // LHS of assignments) to be skipped. Removing it fixes these cases.
+    // The type system might still have challenges with gradual typing of
+    // object literals via assignment, but skipping fundamental checks is
+    // not the right approach.
+    // } else if (n.getJSType() != null && parent.isAssign()) {
+    //   return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // Check property access, possibly adding warnings for unknown properties.
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
