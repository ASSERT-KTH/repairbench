diff --git a/tmp/869a14ae-48c8-4fad-b334-914ca72cd28d_buggy.java b/tmp/44dad90a-b7b3-4d27-ac79-af1716e61a2e_fixed.java
index 10da689..14e6d6a 100644
--- a/tmp/869a14ae-48c8-4fad-b334-914ca72cd28d_buggy.java
+++ b/tmp/44dad90a-b7b3-4d27-ac79-af1716e61a2e_fixed.java
@@ -1,7 +1,46 @@
     /** Multiply this by a single digit x.
+     *  Handles multiplication by integers, using {@link #multiplyFast(int)}
+     *  for single positive digits if possible, otherwise converts
+     *  the integer to a {@code Dfp} and uses {@link #multiply(Dfp)}.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
+        // Handle NaN
+        if (isNaN()) {
+            return field.getNaN();
+        }
+
+        // Handle infinity
+        if (isInfinite()) {
+            if (x == 0) {
+                // infinity * 0 is invalid
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return field.getNaN();
+            }
+            // infinity * x (x!=0) is infinity with appropriate sign
+            // If x > 0, sign is same as this. If x < 0, sign is opposite of this.
+            return (x > 0) ? this : negate();
+        }
+
+        // Handle x = 0 for finite numbers.
+        // multiplyFast(0) should work for x=0 based on its presumed contract
+        // for single digits [0-9] and test cases passing for x=0.
+        if (x == 0) {
+             // Assumes multiplyFast(0) correctly returns zero with the sign of 'this'.
+             // Test cases #12 (-2 * 0 = -0) and #14 (2 * 0 = 0) support this.
+             return multiplyFast(0);
+             // Alternative, potentially safer if multiplyFast(0) behavior is uncertain:
+             // return new Dfp(field, getSign(), Dfp.ZERO);
+        }
+
+        // Use multiplyFast if x is a positive single digit (1-9).
+        // This is likely the optimized path intended for multiplyFast.
+        if (x > 0 && x < 10) {
             return multiplyFast(x);
         }
+
+        // For all other integer values (negative, or >= 10),
+        // convert x to Dfp and use the general Dfp multiplication method.
+        return multiply(field.newDfp(x));
+    }
\ No newline at end of file
