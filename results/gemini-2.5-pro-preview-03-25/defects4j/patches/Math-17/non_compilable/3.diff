diff --git a/tmp/38c85152-46a3-495b-94e3-841a0f4a4fee_buggy.java b/tmp/49d3912f-9c8c-4421-9eaa-1178e3734520_fixed.java
index 10da689..cbf9cf6 100644
--- a/tmp/38c85152-46a3-495b-94e3-841a0f4a4fee_buggy.java
+++ b/tmp/49d3912f-9c8c-4421-9eaa-1178e3734520_fixed.java
@@ -1,7 +1,33 @@
+import org.apache.commons.math3.dfp.DfpField; // Assuming this import might be needed
+
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
+
+        // Define RADIX based on Dfp implementation (typically 10000)
+        // If Dfp.RADIX is accessible, use it. Otherwise, hardcode known value.
+        final int r = 10000; // Dfp.RADIX
+
+        // The multiplyFast method is likely optimized for integers x where abs(x) < RADIX.
+        // Test failures occur when abs(x) >= RADIX (e.g., x = 10000).
+        // Therefore, use general multiplication for such cases.
+        // Test cases also show multiply(0) should work correctly (producing signed zero).
+        // The general multiply(Dfp) should handle this correctly when multiplying by field.newDfp(0).
+        // Let's check if multiplyFast handles x=0 correctly based on tests.
+        // Test #12 (-2 * 0 = -0) and #14 (2 * 0 = 0) pass with the original code,
+        // suggesting multiplyFast(0) handles signed zero or relies on the sign of 'this'.
+        // Therefore, we can keep using multiplyFast for x=0.
+        if (x < r && x > -r) {
+            // If x is within the range (-RADIX, RADIX), use the potentially faster method.
+            // Assumes multiplyFast correctly handles this range including negative numbers and zero,
+            // based on existing passing tests.
             return multiplyFast(x);
+        } else {
+            // Otherwise (abs(x) >= RADIX), fall back to the general multiplication method
+            // by converting the integer to a Dfp number first.
+            // Assumes getField() returns the correct DfpField instance for creating the Dfp representation of x.
+            return multiply(getField().newDfp(x));
+        }
     }
