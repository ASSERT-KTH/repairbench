diff --git a/tmp/4d4d3c96-d362-4440-9131-bb720def1de1_buggy.java b/tmp/3d584eae-a1a3-4447-b4e7-c1984e9dbc98_fixed.java
index 10da689..f6c35aa 100644
--- a/tmp/4d4d3c96-d362-4440-9131-bb720def1de1_buggy.java
+++ b/tmp/3d584eae-a1a3-4447-b4e7-c1984e9dbc98_fixed.java
@@ -1,7 +1,25 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
+
+        // The multiplyFast method is optimized for positive integers x < RADIX
+        // and assumes 'this' is a finite number. RADIX is typically 10000.
+        // We check these conditions before calling multiplyFast.
+        if (nans == FINITE && x > 0 && x < RADIX) {
+             // Use the optimized path for small positive integers and finite 'this'
              return multiplyFast(x);
         }
+
+        // For all other cases:
+        // - 'this' is NaN, Infinity
+        // - x is zero
+        // - x is negative
+        // - x is >= RADIX
+        // We convert x to a Dfp object and use the general Dfp multiplication method.
+        // This ensures correct handling of signs, special values (NaN, Infinity),
+        // zero, potential overflow/underflow, and flags according to the Dfp standard.
+        // The newInstance(x) handles the conversion, and multiply(Dfp) handles the arithmetic.
+        return multiply(newInstance(x));
+    }
