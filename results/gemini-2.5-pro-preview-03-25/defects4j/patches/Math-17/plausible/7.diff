diff --git a/tmp/30e4ab54-c5f7-4df7-b166-7ec72ad1f4ca_buggy.java b/tmp/118a7947-43c4-4147-9f9d-beef4d2fe2a8_fixed.java
index 10da689..56f8822 100644
--- a/tmp/30e4ab54-c5f7-4df7-b166-7ec72ad1f4ca_buggy.java
+++ b/tmp/118a7947-43c4-4147-9f9d-beef4d2fe2a8_fixed.java
@@ -1,7 +1,18 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
+        // If x is not a single non-negative digit (0-9), or if this Dfp is NaN or Infinite,
+        // it's safer to convert x to a Dfp and use the general multiplication method.
+        // The general method handles NaN/Infinity rules and multi-digit multiplication correctly.
+        // The multiplyFast method is likely optimized only for finite 'this' and single non-negative digit 'x'.
+        if (x < 0 || x >= 10 || isNaN() || isInfinite()) {
+             // getField() should return the DfpField instance associated with this Dfp object.
+             // newDfp(x) creates a Dfp representation of the integer x using that field.
+            return multiply(getField().newDfp(x));
+        }
+
+        // If this Dfp is finite and x is a single non-negative digit, use the optimized multiplyFast method.
         return multiplyFast(x);
     }
\ No newline at end of file
