diff --git a/tmp/94fdbad0-fd17-40ea-a236-b7b05f8c7e5c_buggy.java b/tmp/fdd153b4-6399-4e06-b237-6f4c241378ec_fixed.java
index ba2718f..6241789 100644
--- a/tmp/94fdbad0-fd17-40ea-a236-b7b05f8c7e5c_buggy.java
+++ b/tmp/fdd153b4-6399-4e06-b237-6f4c241378ec_fixed.java
@@ -1,7 +1,43 @@
   /**
-   * ContextTypeExpression := BasicTypeExpression | '?'
+   * ContextTypeExpression := BasicTypeExpression | '?' | '*'
    * For expressions on the right hand side of a this: or new:
    */
   private Node parseContextTypeExpression(JsDocToken token) {
-          return parseTypeName(token);
+    // Check the token at the current stream position, which should be the start of the type.
+    JsDocToken currentToken = stream.peek();
+    Node node; // Node to return
+
+    if (currentToken == JsDocToken.QMARK) {
+      // Record position before consuming
+      int lineno = stream.getLineno();
+      int startCharno = stream.getCharno();
+      stream.next(); // Consume '?'
+
+      node = IR.string("?"); // Create Node for unknown type '?'
+      // Set source information
+      node.setStaticSourceFile(getSourceFile());
+      node.setLineno(lineno);
+      node.setCharno(startCharno);
+      return node;
+
+    } else if (currentToken == JsDocToken.STAR) {
+      // Record position before consuming
+      int lineno = stream.getLineno();
+      int startCharno = stream.getCharno();
+      stream.next(); // Consume '*'
+
+      node = IR.string("*"); // Create Node for all type '*'
+      // Set source information
+      node.setStaticSourceFile(getSourceFile());
+      node.setLineno(lineno);
+      node.setCharno(startCharno);
+      return node;
+
+    } else {
+      // It's expected to be a BasicTypeExpression.
+      // Pass the current token (which starts the type name) to parseTypeName.
+      // The 'token' parameter originally passed to this function refers to 'new' or 'this',
+      // not the start of the type name itself.
+      return parseTypeName(currentToken);
+    }
   }
\ No newline at end of file
