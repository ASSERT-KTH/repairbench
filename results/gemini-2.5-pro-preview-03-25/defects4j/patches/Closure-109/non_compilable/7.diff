diff --git a/tmp/d9505e18-7114-40d2-bcc7-303f114b71f9_buggy.java b/tmp/004111f5-907f-4fb8-a738-23010f4887f9_fixed.java
index ba2718f..de30e4b 100644
--- a/tmp/d9505e18-7114-40d2-bcc7-303f114b71f9_buggy.java
+++ b/tmp/004111f5-907f-4fb8-a738-23010f4887f9_fixed.java
@@ -1,7 +1,26 @@
   /**
-   * ContextTypeExpression := BasicTypeExpression | '?'
+   * ContextTypeExpression := BasicTypeExpression | '?' | '*'
    * For expressions on the right hand side of a this: or new:
+   * (Comment updated based on test cases that require handling '*' as well)
    */
   private Node parseContextTypeExpression(JsDocToken token) {
+    // Handle the '?' (unknown type) token.
+    if (token == JsDocToken.QMARK) {
+      // Advance the stream past the '?' token.
+      stream.next();
+      // Return a node representing the unknown type '?'.
+      // Using IR.string is a common way to represent simple types in the AST.
+      return IR.string("?");
+    // Handle the '*' (all type) token. Although not explicitly in the original
+    // doc comment, test cases indicate it should be handled here.
+    } else if (token == JsDocToken.STAR) {
+      // Advance the stream past the '*' token.
+      stream.next();
+      // Return a node representing the all type '*'.
+      return IR.string("*");
+    } else {
+      // If the token is not '?' or '*', assume it's the start of a
+      // BasicTypeExpression and delegate parsing to parseTypeName.
       return parseTypeName(token);
     }
+  }
\ No newline at end of file
