diff --git a/tmp/3e64e9e7-7541-4e10-ae94-0b26e914b09b_buggy.java b/tmp/6db61e35-76fe-4c04-b1ed-211861802734_fixed.java
index ba2718f..0e0e4c8 100644
--- a/tmp/3e64e9e7-7541-4e10-ae94-0b26e914b09b_buggy.java
+++ b/tmp/6db61e35-76fe-4c04-b1ed-211861802734_fixed.java
@@ -1,7 +1,25 @@
   /**
-   * ContextTypeExpression := BasicTypeExpression | '?'
+   * ContextTypeExpression := BasicTypeExpression | '?' | '*'
    * For expressions on the right hand side of a this: or new:
    */
   private Node parseContextTypeExpression(JsDocToken token) {
-          return parseTypeName(token);
+    // Peek at the token following 'new:' or 'this:'
+    JsDocToken currentToken = stream.peek();
+
+    if (currentToken == JsDocToken.QMARK) {
+      // Handle '?' (unknown type)
+      stream.next(); // Consume '?'
+      // Represent '?' as a string node
+      return IR.string("?");
+    } else if (currentToken == JsDocToken.STAR) {
+      // Handle '*' (all type)
+      stream.next(); // Consume '*'
+      // Represent '*' as a string node
+      return IR.string("*");
+    } else {
+      // Handle BasicTypeExpression by falling back to parseTypeName
+      // Pass the current token, as parseTypeName expects the starting token
+      // of the type name expression.
+      return parseTypeName(currentToken);
+    }
   }
\ No newline at end of file
