diff --git a/tmp/1b6f7974-8da3-4856-b37c-71291c287286_buggy.java b/tmp/4df98624-5b05-4bf7-a193-db58663d905b_fixed.java
index ba2718f..378faf3 100644
--- a/tmp/1b6f7974-8da3-4856-b37c-71291c287286_buggy.java
+++ b/tmp/4df98624-5b05-4bf7-a193-db58663d905b_fixed.java
@@ -1,7 +1,43 @@
   /**
-   * ContextTypeExpression := BasicTypeExpression | '?'
+   * ContextTypeExpression := BasicTypeExpression | '?' | '*'
    * For expressions on the right hand side of a this: or new:
    */
   private Node parseContextTypeExpression(JsDocToken token) {
-          return parseTypeName(token);
+    // Store the original token for type checking and marking
+    JsDocToken originalToken = token;
+    // Capture line number before consuming
+    int lineno = stream.getLineno();
+    // Capture charno (start position) before consuming
+    int startCharno = stream.getCharno();
+
+    Node node;
+    if (originalToken == JsDocToken.QMARK) {
+      // Consume '?'
+      token = next();
+      // Create a StringNode representing the unknown type '?'
+      node = newStringNode("?");
+      node.setStaticSourceFile(file);
+      node.setLineno(lineno);
+      node.setCharno(startCharno);
+      // Mark the node with the corresponding JsDocToken
+      markTypeNode(node, originalToken);
+    } else if (originalToken == JsDocToken.STAR) {
+      // Consume '*'
+      token = next();
+      // Create a StringNode representing the all type '*'
+      node = newStringNode("*");
+      node.setStaticSourceFile(file);
+      node.setLineno(lineno);
+      node.setCharno(startCharno);
+      // Mark the node with the corresponding JsDocToken
+      markTypeNode(node, originalToken);
+    } else {
+      // If the token is not '?' or '*', assume it's a BasicTypeExpression
+      // and delegate to parseTypeName. parseTypeName handles token consumption
+      // and node creation internally.
+      return parseTypeName(originalToken);
+    }
+
+    // Return the created node for '?' or '*'
+    return node;
   }
\ No newline at end of file
