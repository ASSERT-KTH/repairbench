diff --git a/tmp/4ef28418-d663-4399-a33d-a6e5e69a1cc6_buggy.java b/tmp/dc8a8d03-7234-4a27-96a4-e76470f59f33_fixed.java
index ba2718f..d6ee00a 100644
--- a/tmp/4ef28418-d663-4399-a33d-a6e5e69a1cc6_buggy.java
+++ b/tmp/dc8a8d03-7234-4a27-96a4-e76470f59f33_fixed.java
@@ -1,7 +1,26 @@
   /**
-   * ContextTypeExpression := BasicTypeExpression | '?'
+   * ContextTypeExpression := BasicTypeExpression | '?' | '*'
    * For expressions on the right hand side of a this: or new:
+   * The '*' represents the ALL type.
    */
   private Node parseContextTypeExpression(JsDocToken token) {
+      // Peek at the current token in the stream to decide the type.
+      JsDocToken currentToken = jsdocStream.peek();
+
+      if (currentToken == JsDocToken.QMARK) {
+          // Consume '?'
+          jsdocStream.next();
+          // Return a node representing the unknown type '?'
+          return newNode(Token.QMARK);
+      } else if (currentToken == JsDocToken.STAR) {
+          // Consume '*'
+          jsdocStream.next();
+          // Return a node representing the all type '*'
+          return newNode(Token.STAR);
+      } else {
+          // If it's not '?' or '*', assume it's a BasicTypeExpression.
+          // Delegate parsing to parseTypeName, passing the original token
+          // as it might be needed for context or error reporting by parseTypeName.
           return parseTypeName(token);
       }
+  }
\ No newline at end of file
