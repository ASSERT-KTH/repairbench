diff --git a/tmp/4023bd25-bb07-4a7c-8178-539450d56b49_buggy.java b/tmp/c437fb7c-d3c2-4ac7-a8aa-42134fe9a21a_fixed.java
index 032fa8e..6e34921 100644
--- a/tmp/4023bd25-bb07-4a7c-8178-539450d56b49_buggy.java
+++ b/tmp/c437fb7c-d3c2-4ac7-a8aa-42134fe9a21a_fixed.java
@@ -1,108 +1,157 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            final double dt = t1 - t0;
+            if (Math.abs(dt) < convergence) {
+                // we cannot do anything on such a small step, don't trigger any events
+                return false;
+            }
+            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(dt) / maxCheckInterval));
+            final double h  = dt / n;
 
             double ta = t0;
             double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
-                tb += h;
+                final double tb = t0 + (i + 1) * h; // Corrected endpoint calculation
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if ((ga >= 0) ^ (gb >= 0)) { // Check sign change between ga and gb
                     // there is a sign change: an event is expected during this step
-
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+
+                    double solverTa = ta;
+                    double solverTb = tb;
+                    // Adjust bracketing interval if one endpoint is zero, to avoid BrentSolver exception
+                    if (ga == 0.0 || gb == 0.0) {
+                         // Use a small relative increment to avoid numerical issues with convergence being too large/small
+                         final double epsilon = Math.ulp(ta) * 100; // A small nudge
+                         final double dtBracket = (forward) ? epsilon: -epsilon;
+
+                         if (ga == 0.0) {
+                            // Nudge ta slightly into the interval [ta, tb]
+                            solverTa = ta + dtBracket;
+                         }
+                         if (gb == 0.0) {
+                            // Nudge tb slightly into the interval [ta, tb]
+                            solverTb = tb - dtBracket;
+                         }
+                         // Check if the adjustment was valid (did not cross over)
+                         if ((forward && solverTa >= solverTb) || (!forward && solverTa <= solverTb)) {
+                            // Nudge failed or interval too small, revert to original interval
+                            // This might still fail in BrentSolver, but it's a fallback.
+                            solverTa = ta;
+                            solverTb = tb;
+                         }
+                         // Re-evaluate function values at nudged points to ensure sign change
+                         // This adds robustness but costs function evaluations
+                         try {
+                             double gaNudged = f.value(solverTa);
+                             double gbNudged = f.value(solverTb);
+                              if ((gaNudged >= 0) ^ (gbNudged >= 0)) {
+                                // Signs are different, use nudged interval
+                              } else {
+                                 // Nudging failed to maintain sign difference, revert
+                                 solverTa = ta;
+                                 solverTb = tb;
+                              }
+                         } catch (FunctionEvaluationException fee) {
+                             // If evaluation fails at nudged points, revert and hope original works
+                             solverTa = ta;
+                             solverTb = tb;
+                         }
+                    }
+
+
+                    final double root = (solverTa <= solverTb) ? solver.solve(f, solverTa, solverTb) : solver.solve(f, solverTb, solverTa);
+
+                    // Check if the root is too close to the previous event
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
+                        // we have either found nothing useful or found (again ?) a past event, we simply ignore it
+                        // proceed to next interval / step by updating ta, ga
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
+                        // Found a new event
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
                             // rejected, this step must now be accepted since it
                             // properly ends exactly at the event occurrence
-                            return false;
+                            return false; // Accept the step
                         }
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
-                        return true;
+                        return true; // Reject the step, event occurs within
+                    }
+                     // If we got here, root is close to previous event but not ta -> ignore it
                 }
 
-                } else {
-                    // no sign change: there is no event for now
+                // No event detected in the sub-interval [ta, tb], or event was ignored
+                // Prepare for next sub-interval
                 ta = tb;
                 ga = gb;
             }
 
-            }
-
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
+            // Wrap other FunctionEvaluationException (potentially from the nudge evaluation)
+            // or the original IllegalArgumentException from BrentSolver if nudge failed/was reverted
+            if (e.getCause() instanceof IllegalArgumentException) {
+                 // Provide more context if BrentSolver failed
+                 throw new ConvergenceException("Event detection failed: BrentSolver bracketing error after potential interval adjustment", e);
+            }
             throw new EventException(e);
+        } catch (IllegalArgumentException e) {
+            // Catch direct IllegalArgumentException from BrentSolver (if nudge was reverted/failed)
+            throw new ConvergenceException("Event detection failed: BrentSolver bracketing error", e);
         }
 
     }
\ No newline at end of file
