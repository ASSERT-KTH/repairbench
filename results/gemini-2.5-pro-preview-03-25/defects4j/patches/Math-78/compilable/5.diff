diff --git a/tmp/6973b6d0-b14f-47f7-b1f5-530a0783d844_buggy.java b/tmp/6cb33091-32bf-49d2-b09a-9a9bf683a28f_fixed.java
index 032fa8e..8b88549 100644
--- a/tmp/6973b6d0-b14f-47f7-b1f5-530a0783d844_buggy.java
+++ b/tmp/6cb33091-32bf-49d2-b09a-9a9bf683a28f_fixed.java
@@ -1,108 +1,174 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+            double tb = t0; // Initialize tb
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
-                tb += h;
+                tb = t0 + (i + 1) * h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
+                // check events occurrence using the sign change relative to the start of the step
+                // NOTE: This check (g0Positive ^ (gb >= 0)) is known to be potentially problematic
+                // for n>1 or when g0=0, but we fix the consequence (solver failure) here.
                 if (g0Positive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
+                    // Check if the event occurs exactly at the endpoint ta or tb
+                    // Use convergence to check for zero crossing
+                    final boolean zeroAtTa = Math.abs(ga) <= convergence;
+                    final boolean zeroAtTb = Math.abs(gb) <= convergence;
+
+                    if (zeroAtTa) {
+                        // g(ta) is zero. Check if ta is the previous event.
+                        if (Math.abs(ta - previousEventTime) <= convergence) {
+                           // ta is the previous event. We need to search for other events in (ta, tb].
+                           // If gb is also zero or has the same sign ga had 'just before' ta, no event in between.
+                           // The outer check g0Positive ^ (gb >= 0) implies a crossing between t0 and tb.
+                           // Since ta=previousEventTime, the crossing must be in (ta, tb] if gb has the expected sign.
+                           // We must adjust ta slightly to avoid solver failure if we proceed.
+                        } else {
+                           // g(ta) is zero, and ta is not the previous event. Event is at ta.
+                           pendingEventTime = ta;
+                           pendingEvent = true;
+                           return true; // Reject step
+                        }
+                    }
+
+                    if (zeroAtTb) {
+                         // g(tb) is zero. Check if tb is the previous event.
+                         if (Math.abs(tb - previousEventTime) <= convergence) {
+                             // tb is the previous event. Event is at tb.
+                             // No *new* event detected in [ta, tb) by crossing tb=previous.
+                             // Update ta, ga and continue to next sub-step.
+                             ta = tb;
+                             ga = gb;
+                             continue; // Skip root finding for this sub-step
+                         } else {
+                             // g(tb) is zero, and tb is not the previous event. Event is at tb.
+                             pendingEventTime = tb;
+                             if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+                                 // This step ends exactly at the pending event. Accept it.
+                                 return false;
+                             }
+                             pendingEvent = true;
+                             return true; // Reject step
+                         }
+                    }
+
+                    // If we are here, event is not exactly at tb (unless tb=previousEventTime).
+                    // Event might be exactly at ta=previousEventTime.
+                    // We need to find the root in (ta, tb) or handle the ta=previousEventTime case.
+
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+
+                    double solveTa = ta;
+                    double solveTb = tb;
+
+                    if (zeroAtTa && (Math.abs(ta - previousEventTime) <= convergence)) {
+                        // Event possibly happens after ta=previousEventTime.
+                        // Adjust the interval start slightly *into* the interval [ta, tb]
+                        // to avoid the zero point ta for the solver.
+                        final double dt = (forward ? convergence : -convergence) * 0.5;
+                        solveTa = ta + dt;
+                        // Check that the adjustment is valid and preserves bracketing
+                        if ((forward && solveTa >= tb) || (!forward && solveTa <= tb)) {
+                            // Interval collapsed after shift, cannot solve.
+                            ta = tb; ga = gb; continue; // Skip sub-step
+                        }
+                        double shiftedGa = f.value(solveTa);
+                        if (shiftedGa * gb >= 0) {
+                            // Adjustment did not preserve bracketing. No root found here.
+                            ta = tb; ga = gb; continue; // Skip sub-step
+                        }
+                        // Use adjusted start point 'solveTa' for solver
+                    }
+
+                    // Call the solver with the (potentially adjusted) interval
+                    final double root = (solveTa <= solveTb) ? solver.solve(f, solveTa, solveTb) : solver.solve(f, solveTb, solveTa);
+
+                    // Process the found root (check against original ta and previousEventTime)
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
+                        // we have either found nothing or found (again ?) the previous event near ta, we simply ignore it
+                        // Do NOT return, allow continuation to check further sub-steps if any.
+                        // Update ta, ga below.
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
+                        // Found a new event, distinct from the previous one.
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
                             // rejected, this step must now be accepted since it
                             // properly ends exactly at the event occurrence
-                            return false;
+                            return false; // Accept step
                         }
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
-                        return true;
+                        return true; // Reject step
                     }
+                    // else: root is close to previousEventTime but not close to ta. Ignore it. Update ta, ga below.
 
-                } else {
-                    // no sign change: there is no event for now
+                }
+                // Update ta, ga for the next sub-step or for exiting the loop
                 ta = tb;
                 ga = gb;
-                }
 
-            }
+            } // End for loop over sub-steps
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
 
     }
\ No newline at end of file
