diff --git a/tmp/587728b1-fd6a-49b2-b532-84b3b7af93f4_buggy.java b/tmp/eb60788f-131e-4439-a35d-9be0a867e6ba_fixed.java
index 032fa8e..0b72c30 100644
--- a/tmp/587728b1-fd6a-49b2-b532-84b3b7af93f4_buggy.java
+++ b/tmp/eb60788f-131e-4439-a35d-9be0a867e6ba_fixed.java
@@ -1,108 +1,116 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+            double tb = t0; // Initialize tb to t0, not t0 + convergence
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
+                // Ensure tb is exactly t1 for the last sub-step to avoid potential floating point errors
+                if (i == n - 1) {
+                    tb = t1;
+                }
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                // check events occurrence using signs at ta and tb
+                final boolean gaPositive = (ga >= 0); // Use sign at start of sub-interval (ta)
+                if (gaPositive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+                    // Note: BrentSolver should ideally handle cases where f(ta)=0 or f(tb)=0
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+
+                    // Check if the root found is the previous event and occurs right at the interval start.
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
+                        // we have found the previous event again at the start of the interval, we simply ignore it
+                        // and continue the search from the end of the current sub-interval.
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
+                        // We found a new event root.
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
+                            // This event was already pending from a previous rejected step,
+                            // and this step ends exactly on it. Accept the step.
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
+                        // This is a new event or a pending event that this step doesn't quite reach.
+                        // Signal the event occurrence, which usually leads to step rejection/truncation.
                         pendingEvent = true;
                         return true;
+                    } else {
+                         // We found the previous event again, but not at the start of the interval. Ignore it
+                         // and continue the search from the end of the current sub-interval.
+                         ta = tb;
+                         ga = gb;
                     }
 
                 } else {
-                    // no sign change: there is no event for now
+                    // no sign change: there is no event for now in this sub-interval
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
+            // Wrap unexpected FunctionEvaluationExceptions
+            throw new EventException(e);
+        } catch (ConvergenceException e) {
+            // If BrentSolver fails to converge, wrap it in an EventException
             throw new EventException(e);
         }
 
     }
\ No newline at end of file
