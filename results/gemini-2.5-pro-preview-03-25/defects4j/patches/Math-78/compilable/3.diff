diff --git a/tmp/b1634a07-c4bc-46ab-b9cb-6c522f097664_buggy.java b/tmp/f63982d9-9955-4d71-9f39-dbe1cbafb548_fixed.java
index 032fa8e..96f063e 100644
--- a/tmp/b1634a07-c4bc-46ab-b9cb-6c522f097664_buggy.java
+++ b/tmp/f63982d9-9955-4d71-9f39-dbe1cbafb548_fixed.java
@@ -1,108 +1,151 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            // Prevent divisions by zero if step size is zero for any reason
+             final double dt = t1 - t0;
+             if (Math.abs(dt) < convergence) {
+                  // we cannot do anything on such a small step, don't trigger any events
+                  return false;
+             }
+            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(dt) / maxCheckInterval));
+            final double h  = dt / n;
 
             double ta = t0;
             double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+            double tb = t0; // Initialize tb = ta before the loop
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
-                tb += h;
+                tb = ta + h; // tb is the end of the sub-interval [ta, tb]
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
+                // check events occurrence using the sign at the start of the main step (g0Positive)
+                // and the sign at the end of the sub-step (gb).
                 if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
+                    // there is a sign change detected between t0 and tb:
+                    // an event is expected to lie in the sub-interval [ta, tb].
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
-                    // variation direction, with respect to the integration direction
+                    // variation direction, with respect to the integration direction (using ga at ta, gb at tb)
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+
+                    // Determine solver interval [left, right] ensuring left <= right
+                    double left = Math.min(ta, tb);
+                    double right = Math.max(ta, tb);
+
+                    // Evaluate function at base interval endpoints
+                    double fa = f.value(left);
+                    double fb = f.value(right);
+
+                    // Adjust interval endpoints if function is zero at the endpoint to avoid BrentSolver exception
+                    // The BrentSolver requires f(left) * f(right) < 0.
+                    if (fa == 0.0) {
+                        // Shift left endpoint slightly into the interval (towards right)
+                        // Use a fraction of convergence, ensuring the shift has the correct sign relative to interval width
+                        left += convergence * 0.1 * Math.signum(right - left);
+                        fa = f.value(left); // Re-evaluate fa
+                    }
+                    if (fb == 0.0) {
+                        // Shift right endpoint slightly into the interval (towards left)
+                        // Use a fraction of convergence, ensuring the shift has the correct sign relative to interval width
+                        right -= convergence * 0.1 * Math.signum(right - left);
+                        fb = f.value(right); // Re-evaluate fb
+                    }
+
+                    // Check bracketing condition again after potential adjustment
+                    if (fa * fb >= 0) {
+                         // Bracketing failed even after adjustment.
+                         // This should not happen in tests like closeEvents,
+                         // but indicates a possibly complex root situation (e.g. tangency).
+                         throw new ConvergenceException(
+                                "Event detection failed: function values at endpoints do not have different signs" +
+                                " after potential adjustment for zero values." +
+                                " Endpoints: [" + left + ", " + right + "], Values: [" + fa + ", " + fb + "]");
+                    }
+
+                    // Solve for the root in the adjusted interval [left, right]
+                    final double root = solver.solve(f, left, right);
+
+                    // Check if the found root is too close to the start of the interval (ta) AND the previous event
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
+                        // we have found (again) the previous event at the start of the interval, ignore it
+                        // Continue search from tb. Update ta, ga for the next iteration.
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
+                        // Found a new distinct event.
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
+                            // We were already waiting for this event, and the step ends on it. Accept step.
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
+                        // New event detected within the step, or pending event moved. Reject step.
                         pendingEvent = true;
                         return true;
+                    } else {
+                        // Root is close to previousEventTime but not close to ta.
+                        // This means we re-found the previous event further inside the interval. Ignore it.
+                        // Continue search from tb. Update ta, ga for the next iteration.
+                        ta = tb;
+                        ga = gb;
                    }
+                   // If we reached here, the event was ignored, loop continues with updated ta/ga.
 
                 } else {
-                    // no sign change: there is no event for now
+                    // no sign change detected between t0 and tb: continue search
                     ta = tb;
                     ga = gb;
                 }
 
-            }
+            } // End of loop over sub-steps n
 
-            // no event during the whole step
+            // No event detected during the whole step, or all detected events were ignored
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
-            return false;
+            return false; // Accept step
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
+            // Wrap raw FunctionEvaluationException in EventException
+             // ConvergenceException thrown above is not caught here.
              throw new EventException(e);
         }
-
     }
\ No newline at end of file
