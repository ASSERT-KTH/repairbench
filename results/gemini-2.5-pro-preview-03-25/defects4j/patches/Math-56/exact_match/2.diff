diff --git a/tmp/aa4b9641-f98c-4d91-a098-5ebebf136a79_buggy.java b/tmp/6f28e38a-c729-4149-85fd-0d69342a4d1e_fixed.java
index 2608424..d4c4028 100644
--- a/tmp/aa4b9641-f98c-4d91-a098-5ebebf136a79_buggy.java
+++ b/tmp/6f28e38a-c729-4149-85fd-0d69342a4d1e_fixed.java
@@ -1,39 +1,40 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
         for (int i = 0; i < last; i++) {
             int idx = 0;
             final int offset = uniCounterOffset[i];
             while (count <= index) {
                 count += offset;
                 ++idx;
             }
+            // Correct the index (we overshoot by one increment).
             --idx;
+            // Move the count back to the beginning of the slice determined by
+            // the current index for this dimension.
             count -= offset;
             indices[i] = idx;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The remaining part of the index maps directly to the last dimension,
+        // as the offset for the last dimension is 1.
+        // 'count' currently holds the base index Contribution from dimensions 0 to last-1.
+        // The difference (index - count) is the index in the last dimension.
+        indices[last] = index - count;
 
         return indices;
     }
\ No newline at end of file
