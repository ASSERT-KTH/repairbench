diff --git a/tmp/268deb4b-5874-4028-a280-440efaebf8e3_buggy.java b/tmp/022ccbc9-d9bc-4c8d-b20e-a59bf5f99705_fixed.java
index 2608424..a519f70 100644
--- a/tmp/268deb4b-5874-4028-a280-440efaebf8e3_buggy.java
+++ b/tmp/022ccbc9-d9bc-4c8d-b20e-a59bf5f99705_fixed.java
@@ -1,39 +1,34 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
+        int remainder = index;
+        // Calculate indices for dimensions 0 to last-1
         for (int i = 0; i < last; i++) {
-            int idx = 0;
+            // The offset corresponds to the number of elements spanned by one increment
+            // in the current dimension i.
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            // The index for dimension i is the integer division of the remainder by the offset.
+            indices[i] = remainder / offset;
+            // The new remainder is the previous remainder modulo the offset.
+            remainder %= offset;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The index for the last dimension is simply the final remainder,
+        // as the offset for the last dimension is 1.
+        indices[last] = remainder;
 
         return indices;
     }
\ No newline at end of file
