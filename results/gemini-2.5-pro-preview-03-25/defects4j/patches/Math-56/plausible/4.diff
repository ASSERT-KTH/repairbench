diff --git a/tmp/a919ce7f-fb9e-47f0-9e03-2167014909e6_buggy.java b/tmp/fe6c8d56-d9a3-432a-9bba-581cc7d05031_fixed.java
index 2608424..b68f4af 100644
--- a/tmp/a919ce7f-fb9e-47f0-9e03-2167014909e6_buggy.java
+++ b/tmp/fe6c8d56-d9a3-432a-9bba-581cc7d05031_fixed.java
@@ -1,39 +1,34 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
+        int remainder = index;
+        // Compute indices from dimension 0 to dimension 'last - 1'
         for (int i = 0; i < last; i++) {
-            int idx = 0;
+            // The offset corresponds to the number of elements per unit increment
+            // of the index in dimension 'i'.
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+            // The index for dimension 'i' is the integer part of the division
+            // of the remaining index by the offset.
+            indices[i] = remainder / offset;
+            // The remainder is used for the subsequent dimensions.
+            remainder = remainder % offset;
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The index for the last dimension ('last') is simply the final remainder,
+        // as the offset for the last dimension is 1.
+        indices[last] = remainder;
 
         return indices;
     }
\ No newline at end of file
