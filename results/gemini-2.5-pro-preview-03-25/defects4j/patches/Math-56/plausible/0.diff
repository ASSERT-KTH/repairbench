diff --git a/tmp/646f394a-2e6f-45f1-90e9-7ed044074730_buggy.java b/tmp/b9b0b6c1-b0aa-4bb0-8aff-749908f00568_fixed.java
index 2608424..ca45659 100644
--- a/tmp/646f394a-2e6f-45f1-90e9-7ed044074730_buggy.java
+++ b/tmp/b9b0b6c1-b0aa-4bb0-8aff-749908f00568_fixed.java
@@ -1,39 +1,45 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
-            throw new OutOfRangeException(index, 0, totalSize);
+            // Use the specific exception class from the original code if available,
+            // otherwise use a standard one like IndexOutOfBoundsException or IllegalArgumentException.
+            // Assuming OutOfRangeException is defined elsewhere as in the original context.
+            throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize - 1);
+            // Note: The original exception message implies the upper bound is exclusive (totalSize),
+            // but standard range exceptions often use inclusive bounds (totalSize - 1).
+            // Adjusting to match typical exception constructor semantics if OutOfRangeException
+            // expects inclusive upper bound. If it expects exclusive, use totalSize.
+            // Sticking to the original usage for minimal change:
+            // throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
+        int currentRemainder = index; // Initialize remainder with the index
+
+        // Compute indices for dimensions 0 to dimension - 2
+        for (int i = 0; i < last; i++) { // 'last' is dimension - 1
+            // The offset uniCounterOffset[i] corresponds to the number of elements
+            // represented by a change in the i-th dimension's index.
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            // The index for the current dimension 'i' is found by integer division.
+            indices[i] = currentRemainder / offset;
+            // The remainder is used for calculating the indices of subsequent dimensions.
+            currentRemainder = currentRemainder % offset;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The index for the last dimension is the final remainder.
+        // The implicit offset for the last dimension is 1.
+        // indices[last] = currentRemainder / 1;
+        indices[last] = currentRemainder;
 
         return indices;
     }
\ No newline at end of file
