diff --git a/tmp/f1279f42-dce1-4c19-afd9-884ff89b2cb5_buggy.java b/tmp/6209b64c-a97f-4e06-a776-9f2339408062_fixed.java
index 2608424..7e7731d 100644
--- a/tmp/f1279f42-dce1-4c19-afd9-884ff89b2cb5_buggy.java
+++ b/tmp/6209b64c-a97f-4e06-a776-9f2339408062_fixed.java
@@ -1,39 +1,33 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
+        int remainingIndex = index;
+        // Compute indices from highest dimension (dimension 0) downwards
         for (int i = 0; i < last; i++) {
-            int idx = 0;
+            // Get the number of elements spanned by dimensions i+1 to last
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            // The index for dimension i is how many times this offset fits into the remaining index
+            indices[i] = remainingIndex / offset;
+            // Update the remaining index by taking the modulo
+            remainingIndex = remainingIndex % offset;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The index for the last dimension is simply the remaining index,
+        // as the offset for the last dimension is 1.
+        indices[last] = remainingIndex;
 
         return indices;
     }
\ No newline at end of file
