diff --git a/tmp/030749f7-256a-4d65-939e-a8b051a5a1cd_buggy.java b/tmp/68bb4130-1240-424d-a510-98a6981ae555_fixed.java
index 2608424..46792d2 100644
--- a/tmp/030749f7-256a-4d65-939e-a8b051a5a1cd_buggy.java
+++ b/tmp/68bb4130-1240-424d-a510-98a6981ae555_fixed.java
@@ -1,39 +1,47 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
+        int count = 0; // Stores index contribution from dimensions processed so far
+        for (int i = 0; i < last; i++) { // Process dimensions 0 to dimension - 2
             int idx = 0;
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
+            int accumulatedOffset = count; // Temporary variable starting from previous count
+
+            // Find how many 'offset' blocks fit into the index *after* accounting for 'count'.
+            // Calculate the count if we add the current offset.
+            int nextAccumulatedOffset = accumulatedOffset + offset;
+            // Check if the next count is within the index bounds.
+            while (nextAccumulatedOffset <= index) {
+                // If it is, increment the index for the current dimension,
+                // update the accumulated offset, and calculate the next potential offset.
+                accumulatedOffset = nextAccumulatedOffset;
+                nextAccumulatedOffset += offset;
                 ++idx;
             }
-            --idx;
-            count -= offset;
+            // After the loop, 'idx' holds the correct count for the current dimension 'i'.
             indices[i] = idx;
-        }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
+            // Update the count with the contribution from the current dimension.
+            // count becomes the base value for the next dimension's calculation.
+            count += idx * offset;
         }
-        --idx;
-        indices[last] = idx;
+
+        // The remaining part of the index corresponds to the last dimension (offset = 1).
+        // The count for the last dimension is simply the remaining index value.
+        indices[last] = index - count;
 
         return indices;
     }
\ No newline at end of file
