diff --git a/tmp/be41352a-8cd5-475d-9b41-7ebe4e034cee_buggy.java b/tmp/644fe1a3-47a1-4f01-bfaf-ff783f996d2c_fixed.java
index 2608424..a3a3adc 100644
--- a/tmp/be41352a-8cd5-475d-9b41-7ebe4e034cee_buggy.java
+++ b/tmp/644fe1a3-47a1-4f01-bfaf-ff783f996d2c_fixed.java
@@ -1,39 +1,30 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+        int remainder = index;
+        for (int i = 0; i < dimension; i++) {
+            // Use integer division and modulo to determine the index
+            // for the current dimension based on the pre-calculated offsets.
+            // uniCounterOffset[i] stores the product of sizes of dimensions > i.
+            // Example: For size (2, 3, 4), offsets are (12, 4, 1).
+            // index = i[0]*12 + i[1]*4 + i[2]*1
+            int offset = uniCounterOffset[i];
+            indices[i] = remainder / offset;
+            remainder = remainder % offset;
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
 
         return indices;
     }
\ No newline at end of file
