diff --git a/tmp/a43c63a6-0c84-45da-87d7-7729fb8fd233_buggy.java b/tmp/79645752-3b25-45ba-a088-6c866bae7ce9_fixed.java
index 3127f85..98655f7 100644
--- a/tmp/a43c63a6-0c84-45da-87d7-7729fb8fd233_buggy.java
+++ b/tmp/79645752-3b25-45ba-a088-6c866bae7ce9_fixed.java
@@ -1,24 +1,37 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite cases first, as Erf.erf might fail or return NaN for infinite arguments.
+        if (x == Double.NEGATIVE_INFINITY) {
+            return 0.0;
+        }
+        if (x == Double.POSITIVE_INFINITY) {
+            return 1.0;
+        }
+
         final double dev = x - mean;
         try {
+            // Standard formula using the error function
             return 0.5 * (1.0 + Erf.erf((dev) /
                         (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+            // Handle cases where Erf.erf fails to converge for extreme finite values.
+            // This logic was present in the original code to approximate the result for
+            // values far in the tails where convergence issues might arise.
+            if (x < (mean - 20 * standardDeviation)) { // Check if x is far to the left
+                return 0.0; // Probability is effectively 0
+            } else if (x > (mean + 20 * standardDeviation)) { // Check if x is far to the right
+                return 1.0; // Probability is effectively 1
             } else {
+                // If convergence failed for a value not extremely far out, rethrow.
                 throw ex;
             }
         }
     }
\ No newline at end of file
