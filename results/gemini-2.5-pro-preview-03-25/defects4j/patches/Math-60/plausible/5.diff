diff --git a/tmp/226a642a-db3b-49dc-9023-525ad37cca4c_buggy.java b/tmp/536fa6e6-43a6-4f14-a59f-e60642cff73f_fixed.java
index 3127f85..c57952f 100644
--- a/tmp/226a642a-db3b-49dc-9023-525ad37cca4c_buggy.java
+++ b/tmp/536fa6e6-43a6-4f14-a59f-e60642cff73f_fixed.java
@@ -1,24 +1,46 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite cases first, as Erf.erf might not handle them correctly (e.g., NaN or exception)
+        if (Double.isInfinite(x)) {
+            return (x < 0) ? 0.0 : 1.0;
+        }
+
+        // Handle NaN
+        if (Double.isNaN(x)) {
+            return Double.NaN;
+        }
+
         final double dev = x - mean;
+        // Check for extreme values (more than 40 standard deviations from the mean)
+        // as described in the Javadoc. Erf.erf might struggle or be unnecessary
+        // for such extreme inputs.
+        if (Math.abs(dev / standardDeviation) > 40) {
+             return (dev < 0) ? 0.0 : 1.0;
+        }
+
+        // Standard case: Use the error function.
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+            // The Erf.erf algorithm failed to converge.
+            // Try to handle based on the side of the mean, similar to the original code's logic,
+            // although the check above for |Z| > 40 should cover most extreme cases.
+            // This fallback handles potential convergence issues within the |Z| <= 40 range.
+            if (x < (mean - 20 * standardDeviation)) { // Use the original threshold from catch block
+                return 0.0;
             } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+                return 1.0;
             } else {
+                // If convergence failed for non-extreme values, re-throw the exception.
                 throw ex;
             }
         }
     }
\ No newline at end of file
