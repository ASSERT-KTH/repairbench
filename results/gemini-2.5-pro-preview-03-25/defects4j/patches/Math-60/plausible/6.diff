diff --git a/tmp/888a0e0e-a045-42c7-966d-4f28d186c8f5_buggy.java b/tmp/878ce6a3-67e8-4e25-9d3c-aba22b3e1dc7_fixed.java
index 3127f85..ad75912 100644
--- a/tmp/888a0e0e-a045-42c7-966d-4f28d186c8f5_buggy.java
+++ b/tmp/878ce6a3-67e8-4e25-9d3c-aba22b3e1dc7_fixed.java
@@ -1,24 +1,42 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite cases first, as Erf.erf might struggle with them.
+        if (x == Double.NEGATIVE_INFINITY) {
+            return 0.0;
+        }
+        if (x == Double.POSITIVE_INFINITY) {
+            return 1.0;
+        }
+
         final double dev = x - mean;
+        // Check for extreme values outside the range where Erf might fail or be inaccurate.
+        // The threshold choice (e.g., 20 or 40) depends on the Erf implementation behavior.
+        // The original code used 20 in the catch block. Let's stick with that logic.
+        if (Math.abs(dev / standardDeviation) > 40) { // Use 40 as per Javadoc for direct return
+             return x < mean ? 0.0 : 1.0;
+        }
+
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            // Calculate CDF using the error function
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+            // Handle convergence issues, potentially near the limits of Erf calculation.
+            // Use the threshold from the original catch block logic.
+            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 per original comment
+                return 0.0;
             } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+                return 1.0;
             } else {
+                // If failure occurs within a reasonable range, it's an unexpected issue.
                 throw ex;
             }
         }
     }
\ No newline at end of file
