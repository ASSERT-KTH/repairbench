diff --git a/tmp/32a645c4-3bf2-49f6-966c-42d4d3d9e969_buggy.java b/tmp/17767f86-42f9-41e6-bf6a-faa78dfa3f2a_fixed.java
index 3127f85..c1a6482 100644
--- a/tmp/32a645c4-3bf2-49f6-966c-42d4d3d9e969_buggy.java
+++ b/tmp/17767f86-42f9-41e6-bf6a-faa78dfa3f2a_fixed.java
@@ -1,24 +1,42 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite cases explicitly
+        if (x == Double.NEGATIVE_INFINITY) {
+            return 0.0;
+        }
+        if (x == Double.POSITIVE_INFINITY) {
+            return 1.0;
+        }
+
         final double dev = x - mean;
+        // Handle cases far from the mean explicitly to avoid potential issues with Erf.erf
+        // The threshold 40 is based on the javadoc comment.
+        // It prevents passing extreme values (like Double.MAX_VALUE) to Erf.erf,
+        // which might cause convergence issues or return NaN.
+        if (Math.abs(dev) / standardDeviation > 40) {
+             return dev < 0 ? 0.0d : 1.0d;
+        }
+
+        // Proceed with the Erf.erf calculation for non-extreme finite values
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+            // Fallback handling if Erf.erf fails to converge for values not caught above
+            if (x < (mean - 20 * standardDeviation)) { // Use a threshold consistent with old behavior or javadoc? Keep 20 for now.
+                return 0.0;
             } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+                return 1.0;
             } else {
+                // If convergence fails for values closer to the mean, rethrow.
                 throw ex;
             }
         }
     }
\ No newline at end of file
