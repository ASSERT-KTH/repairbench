diff --git a/tmp/39130b07-b44b-4e4a-9911-2478e25b8ac5_buggy.java b/tmp/9c6dab02-59cb-4596-b10f-ae995892c9e4_fixed.java
index 3127f85..d4f6f40 100644
--- a/tmp/39130b07-b44b-4e4a-9911-2478e25b8ac5_buggy.java
+++ b/tmp/9c6dab02-59cb-4596-b10f-ae995892c9e4_fixed.java
@@ -1,24 +1,40 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinity cases first, to avoid issues with Erf.erf
+        if (x == Double.NEGATIVE_INFINITY) {
+            return 0.0;
+        }
+        if (x == Double.POSITIVE_INFINITY) {
+            return 1.0;
+        }
+
         final double dev = x - mean;
+        // Check for extreme values outside +/- 40 standard deviations
+        // Use the threshold from the Javadoc.
+        // Avoid calling Erf.erf for values where it might fail to converge
+        // or produce results extremely close to 0 or 1.
+        if (FastMath.abs(dev) / standardDeviation > 40) {
+             return dev < 0 ? 0.0d : 1.0d;
+        }
+        
+        // Calculate CDF using the error function
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
+            // The extreme cases (|dev/stddev| > 40) are handled above.
+            // If Erf.erf fails to converge for values closer to the mean,
+            // it indicates a genuine convergence problem, so we rethrow.
+            // The original code had a secondary check here for +/- 20 std dev,
+            // but handling +/- 40 std dev before the call is cleaner and
+            // aligns with the Javadoc promise.
             throw ex;
         }
     }
\ No newline at end of file
-    }
