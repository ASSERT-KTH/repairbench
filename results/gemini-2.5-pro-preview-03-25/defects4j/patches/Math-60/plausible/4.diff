diff --git a/tmp/65b35cad-7af2-48ff-a156-ff78dbce4f57_buggy.java b/tmp/2ee28868-0f68-4e1c-9ebe-a97613c9a998_fixed.java
index 3127f85..69a4a07 100644
--- a/tmp/65b35cad-7af2-48ff-a156-ff78dbce4f57_buggy.java
+++ b/tmp/2ee28868-0f68-4e1c-9ebe-a97613c9a998_fixed.java
@@ -1,24 +1,39 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
+     * @throws MathException if the algorithm fails to converge for arguments
+     *                       within 40 standard deviations of the mean.
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite cases first, to avoid issues with Erf.erf implementation
+        if (x == Double.NEGATIVE_INFINITY) {
+            return 0.0;
+        }
+        if (x == Double.POSITIVE_INFINITY) {
+            return 1.0;
+        }
+
         final double dev = x - mean;
+        // Handle cases far from the mean (|z| > 40) as specified in javadoc
+        // This also prevents passing extremely large values (like Double.MAX_VALUE)
+        // or potentially problematic values derived from them to Erf.erf.
+        if (FastMath.abs(dev) > 40 * standardDeviation) {
+             return x < mean ? 0.0d : 1.0d;
+        }
+
+        // Use Erf function for values within 40 standard deviations.
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
+            // If Erf.erf fails to converge for an argument within 40 standard deviations,
+            // it indicates a genuine convergence problem for a reasonable input range.
+            // The original catch block's conditions for returning 0 or 1 are now
+            // effectively handled by the 40 standard deviation check above.
+            // Therefore, rethrow the exception if convergence fails in this range.
             throw ex;
         }
     }
\ No newline at end of file
-    }
