diff --git a/tmp/d8beebf4-30d5-4548-9e05-7da56c34f2e3_buggy.java b/tmp/2896580b-d853-4fee-9647-7484db3c8e6d_fixed.java
index 3127f85..d8176c6 100644
--- a/tmp/d8beebf4-30d5-4548-9e05-7da56c34f2e3_buggy.java
+++ b/tmp/2896580b-d853-4fee-9647-7484db3c8e6d_fixed.java
@@ -1,24 +1,52 @@
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.MaxIterationsExceededException;
+import org.apache.commons.math.special.Erf;
+import org.apache.commons.math.util.FastMath;
+
+// The surrounding class structure is assumed to be present.
+// Only the fixed method is provided below.
+
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
+     * @throws MathException if the algorithm fails to converge for non-extreme values.
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite cases first, as Erf.erf might not handle them correctly or
+        // could throw exceptions other than MaxIterationsExceededException.
+        if (x == Double.NEGATIVE_INFINITY) {
+            return 0.0;
+        }
+        if (x == Double.POSITIVE_INFINITY) {
+            return 1.0;
+        }
+
         final double dev = x - mean;
+        // Handle cases far from the mean (more than 40 standard deviations).
+        // This check conforms to the Javadoc description and avoids potential
+        // convergence issues or precision problems in Erf.erf for extreme Z-scores.
+        // Assumes standardDeviation is positive (enforced elsewhere).
+        if (FastMath.abs(dev) / standardDeviation > 40) {
+             return dev < 0 ? 0.0d : 1.0d;
+        }
+
+        // Calculate the CDF using the error function for values closer to the mean.
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            // The argument for the error function is z / sqrt(2), where z = (x - mean) / stdDev.
+            // arg = (x - mean) / (standardDeviation * sqrt(2.0))
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
+            // If Erf.erf fails to converge for inputs that are not extremely far
+            // from the mean (i.e., within +/- 40 standard deviations),
+            // it indicates a genuine issue with the erf calculation itself.
+            // In this case, we rethrow the exception as we cannot reliably
+            // determine the CDF value. The previous fallback logic based on
+            // a 20 std dev threshold is removed as the initial checks handle
+            // the extreme cases more appropriately.
             throw ex;
         }
     }
\ No newline at end of file
-    }
