diff --git a/tmp/f8fdd821-ff9b-4f67-b64b-78ce41c0fc91_buggy.java b/tmp/1ed05757-4c42-41bf-954c-b9897ced2ced_fixed.java
index 6c5e87f..2a10cf4 100644
--- a/tmp/f8fdd821-ff9b-4f67-b64b-78ce41c0fc91_buggy.java
+++ b/tmp/1ed05757-4c42-41bf-954c-b9897ced2ced_fixed.java
@@ -1,12 +1,100 @@
+import org.apache.commons.math.exception.NotStrictlyPositiveException;
+import org.apache.commons.math.exception.NumberIsTooLargeException;
+import org.apache.commons.math.exception.util.LocalizedFormats;
+import org.apache.commons.math.util.OpenIntToDoubleHashMap;
+
+/**
+ * Sparse matrix implementation based on an open addressed map.
+ *
+ * <p>
+ * Caveat: This implementation assumes that, for any {@code x},
+ * the equality {@code x * 0d == 0d} holds. But it is is not true for
+ * {@code NaN}. Moreover, zero entries are ignored during matrix multiplication
+ * or addition.
+ * </p>
+ */
+// The following is just context for the constructor, not part of the fixed code block.
+// Make sure to import necessary classes if they are not already imported.
+public class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix {
+    /** Number of rows of the matrix. */
+    private final int rows;
+    /** Number of columns of the matrix. */
+    private final int columns;
+    /** Storage for (sparse) matrix elements. */
+    private final OpenIntToDoubleHashMap entries;
+
+    /**
+     * Build a sparse matrix with the supplied row and column dimensions.
+     *
+     * @param rowDimension Number of rows of the matrix.
+     * @param columnDimension Number of columns of the matrix.
+     * @throws NotStrictlyPositiveException if row or column dimension is not
+     * positive.
+     * @throws NumberIsTooLargeException if the total number of entries of the
+     * matrix is larger than {@code Integer.MAX_VALUE}.
+     */
+    public OpenMapRealMatrix(int rowDimension, int columnDimension)
+        throws NotStrictlyPositiveException, NumberIsTooLargeException {
+        super(rowDimension, columnDimension);
+        long lRow = rowDimension;
+        long lCol = columnDimension;
+        // The maximum key (`row * columns + column`) needs to be small enough
+        // to fit into a non-negative int. The max key is `(rows - 1) * columns + (columns - 1)`
+        // which simplifies to `rows * columns - 1`.
+        // Thus, `rows * columns - 1 <= Integer.MAX_VALUE`
+        // which means `rows * columns <= Integer.MAX_VALUE + 1L`.
+        // We use long multiplication to avoid intermediate overflow.
+        if (lRow * lCol > Integer.MAX_VALUE) {
+            throw new NumberIsTooLargeException(LocalizedFormats.SPARSE_MATRIX_STORAGE,
+                                                lRow * lCol, Integer.MAX_VALUE, true);
+        }
+        this.rows = rowDimension;
+        this.columns = columnDimension;
+        this.entries = new OpenIntToDoubleHashMap(0.0);
+    }
+
+    // Dummy methods to make the class compilable for context. Not part of the fix.
+    @Override
+    public RealMatrix copy() { return null; }
+    @Override
+    public RealMatrix createMatrix(int rowDimension, int columnDimension) { return null; }
+    @Override
+    public int getColumnDimension() { return columns; }
+    @Override
+    public double getEntry(int row, int column) { return 0; }
+    @Override
+    public int getRowDimension() { return rows; }
+    @Override
+    public void setEntry(int row, int column, double value) {}
+    @Override
+    public void addToEntry(int row, int column, double increment) {}
+    @Override
+    public void multiplyEntry(int row, int column, double factor) {}
+} // End of context class definition
+
+// The fixed function:
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws NotStrictlyPositiveException if row or column dimension is not
+     * positive.
+     * @throws NumberIsTooLargeException if the total number of entries of the
+     * matrix is larger than {@code Integer.MAX_VALUE}.
      */
-    public OpenMapRealMatrix(int rowDimension, int columnDimension) {
+    public OpenMapRealMatrix(int rowDimension, int columnDimension)
+        throws NotStrictlyPositiveException, NumberIsTooLargeException {
         super(rowDimension, columnDimension);
+        long lRow = rowDimension;
+        long lCol = columnDimension;
+        // Check if the total number of entries exceeds Integer.MAX_VALUE.
+        // Use long multiplication to prevent potential overflow.
+        if (lRow * lCol > Integer.MAX_VALUE) {
+            throw new NumberIsTooLargeException(LocalizedFormats.SPARSE_MATRIX_STORAGE,
+                                                lRow * lCol, Integer.MAX_VALUE, true);
+        }
         this.rows = rowDimension;
         this.columns = columnDimension;
         this.entries = new OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
