diff --git a/tmp/8411d0f6-6859-45ea-9ae1-57c5dc6cb5bf_buggy.java b/tmp/ed68315f-5101-4201-9ddb-720fa89447d9_fixed.java
index 6c5e87f..cbd441e 100644
--- a/tmp/8411d0f6-6859-45ea-9ae1-57c5dc6cb5bf_buggy.java
+++ b/tmp/ed68315f-5101-4201-9ddb-720fa89447d9_fixed.java
@@ -1,12 +1,28 @@
+import org.apache.commons.math.exception.NotStrictlyPositiveException;
+import org.apache.commons.math.exception.NumberIsTooLargeException;
+import org.apache.commons.math.exception.util.LocalizedFormats;
+import org.apache.commons.math.util.OpenIntToDoubleHashMap;
+
 /**
  * Build a sparse matrix with the supplied row and column dimensions.
  *
  * @param rowDimension Number of rows of the matrix.
  * @param columnDimension Number of columns of the matrix.
+ * @throws NotStrictlyPositiveException if row or column dimension is not
+ * positive.
+ * @throws NumberIsTooLargeException if the total number of entries of the
+ * matrix is larger than {@code Integer.MAX_VALUE}.
  */
-    public OpenMapRealMatrix(int rowDimension, int columnDimension) {
+public OpenMapRealMatrix(int rowDimension, int columnDimension)
+    throws NotStrictlyPositiveException, NumberIsTooLargeException {
     super(rowDimension, columnDimension);
+    long lRow = rowDimension;
+    long lCol = columnDimension;
+    if (lRow * lCol >= Integer.MAX_VALUE) {
+        throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_LESS_THAN_INTEGER_MAX_VALUE,
+                                            lRow * lCol, Integer.MAX_VALUE, false);
+    }
     this.rows = rowDimension;
     this.columns = columnDimension;
     this.entries = new OpenIntToDoubleHashMap(0.0);
 }
\ No newline at end of file
