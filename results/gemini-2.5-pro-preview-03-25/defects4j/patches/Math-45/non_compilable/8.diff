diff --git a/tmp/3842e648-ebfc-4842-8612-06531aa0c10e_buggy.java b/tmp/5770d740-08b8-4cf5-9267-afc22ae28d99_fixed.java
index 6c5e87f..2091c07 100644
--- a/tmp/3842e648-ebfc-4842-8612-06531aa0c10e_buggy.java
+++ b/tmp/5770d740-08b8-4cf5-9267-afc22ae28d99_fixed.java
@@ -1,12 +1,35 @@
+import org.apache.commons.math.exception.NumberIsTooLargeException;
+import org.apache.commons.math.exception.NotStrictlyPositiveException; // for super()
+import org.apache.commons.math.util.OpenIntToDoubleHashMap;
+
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws NotStrictlyPositiveException if row or column dimension is not
+     * positive.
+     * @throws NumberIsTooLargeException if the total number of entries exceeds
+     * Integer.MAX_VALUE.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
+        // The super constructor checks for rowDimension > 0 and columnDimension > 0
         super(rowDimension, columnDimension);
+
+        // Check if the total number of elements exceeds Integer.MAX_VALUE.
+        // The indices are computed by row * columns + column, which must fit in an int.
+        // Cast to long is necessary to prevent overflow during multiplication.
+        long theoreticalSize = (long) rowDimension * (long) columnDimension;
+        if (theoreticalSize > Integer.MAX_VALUE) {
+            // The number of elements is too large to be indexed by an int.
+            // Pass arguments as Number (or double for older versions compatibility).
+            // The third argument 'true' indicates that Integer.MAX_VALUE is the upper bound (inclusive).
+            throw new NumberIsTooLargeException(theoreticalSize, Integer.MAX_VALUE, true);
+        }
+
+        // Initialize instance variables
         this.rows = rowDimension;
         this.columns = columnDimension;
+        // Initialize the map to store non-zero entries. Use 0.0 as the default value.
         this.entries = new OpenIntToDoubleHashMap(0.0);
     }
