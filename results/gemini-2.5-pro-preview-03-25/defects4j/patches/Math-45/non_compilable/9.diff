diff --git a/tmp/14caabea-c4b2-4f75-b3fc-28ce8e7c6178_buggy.java b/tmp/6c361a8e-298f-4fad-856e-eb5fa780f6a2_fixed.java
index 6c5e87f..72edc8f 100644
--- a/tmp/14caabea-c4b2-4f75-b3fc-28ce8e7c6178_buggy.java
+++ b/tmp/6c361a8e-298f-4fad-856e-eb5fa780f6a2_fixed.java
@@ -1,12 +1,29 @@
+import org.apache.commons.math.exception.NotStrictlyPositiveException;
+import org.apache.commons.math.exception.NumberIsTooLargeException;
+import org.apache.commons.math.exception.util.LocalizedFormats;
+import org.apache.commons.math.util.OpenIntToDoubleHashMap;
+
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws NotStrictlyPositiveException if row or column dimension is not
+     * positive.
+     * @throws NumberIsTooLargeException if the total number of entries of the
+     * matrix is larger than {@code Integer.MAX_VALUE}.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
-        super(rowDimension, columnDimension);
+        super(rowDimension, columnDimension); // Handles NotStrictlyPositiveException
+
+        // Check that the total number of entries does not exceed Integer.MAX_VALUE
+        long size = (long) rowDimension * columnDimension;
+        if (size > Integer.MAX_VALUE) {
+            throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_LESS_THAN_INTEGER_MAX_VALUE,
+                                                size, Integer.MAX_VALUE, true);
+        }
+
         this.rows = rowDimension;
         this.columns = columnDimension;
         this.entries = new OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
