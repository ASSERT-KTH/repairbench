diff --git a/tmp/9b5e939d-14b8-489d-b131-f32110f3ec11_buggy.java b/tmp/6afc6fd9-8304-4ba7-b9bf-943b7ba4ec25_fixed.java
index 6c5e87f..e2e32fd 100644
--- a/tmp/9b5e939d-14b8-489d-b131-f32110f3ec11_buggy.java
+++ b/tmp/6afc6fd9-8304-4ba7-b9bf-943b7ba4ec25_fixed.java
@@ -1,12 +1,22 @@
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException if row or column dimension is not positive.
+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the total number of entries is too large
+     * (larger than Integer.MAX_VALUE - 1).
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
         super(rowDimension, columnDimension);
+        // Check that the total number of entries does not exceed Integer.MAX_VALUE
+        long theoreticalSize = (long) rowDimension * (long) columnDimension;
+        if (theoreticalSize >= Integer.MAX_VALUE) {
+            throw new org.apache.commons.math.exception.NumberIsTooLargeException(theoreticalSize,
+                                                                                   Integer.MAX_VALUE,
+                                                                                   false); // Bound is excluded
+        }
         this.rows = rowDimension;
         this.columns = columnDimension;
-        this.entries = new OpenIntToDoubleHashMap(0.0);
+        this.entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);
     }
