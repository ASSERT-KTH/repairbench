diff --git a/tmp/aa77b35f-e399-4a23-adbc-9ee6edf863ca_buggy.java b/tmp/c47a68aa-2a6b-43f5-84fb-5e33842c55bd_fixed.java
index 9a3a9db..8c38457 100644
--- a/tmp/aa77b35f-e399-4a23-adbc-9ee6edf863ca_buggy.java
+++ b/tmp/c47a68aa-2a6b-43f5-84fb-5e33842c55bd_fixed.java
@@ -1,27 +1,38 @@
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Token;
+import org.jsoup.parser.ParseSettings; // Import ParseSettings if not already imported
+
+// Assuming 'stack' and 'settings' are accessible fields (e.g., from TreeBuilder base class)
+
     /**
-     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
-     * found, skips.
+     * If the stack contains an element with this tag's name (compared case-insensitively if settings require),
+     * pop up the stack to remove the first occurrence. If not found, skips.
      *
      * @param endTag tag to close
      */
     private void popStackToClose(Token.EndTag endTag) {
-        String elName = endTag.name();
+        String elName = settings.normalizeTag(endTag.name()); // ensure properly normalized theoretically redundant if tokeniser did job
         Element firstFound = null;
 
+        // Find the first matching element from the top of the stack
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
+            // Use normalized name for comparison - XmlTreeBuilder should respect case sensitivity of settings
+            if (settings.normalizeTag(next.nodeName()).equals(elName)) {
                 firstFound = next;
-                break;
+                break; // Found the first instance from the top
             }
         }
+
         if (firstFound == null)
-            return; // not found, skip
+            return; // Element not found on stack, skip.
 
+        // Pop stack elements up to and including the found element
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element next = stack.get(pos);
-            stack.remove(pos);
+            stack.remove(pos); // Remove the element at the current position
+            // Check object identity to ensure we stop after removing the correct element
             if (next == firstFound)
                 break;
         }
     }
\ No newline at end of file
