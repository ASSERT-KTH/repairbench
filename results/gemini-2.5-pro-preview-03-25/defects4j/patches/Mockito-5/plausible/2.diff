diff --git a/tmp/2a64611d-ffe9-47fa-8b60-35b6c057fcb4_buggy.java b/tmp/c4b914bd-70fb-4e17-b854-ca9e1fd96007_fixed.java
index 9ac2149..ec9ec26 100644
--- a/tmp/2a64611d-ffe9-47fa-8b60-35b6c057fcb4_buggy.java
+++ b/tmp/c4b914bd-70fb-4e17-b854-ca9e1fd96007_fixed.java
@@ -1,40 +1,51 @@
     /**
      * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode
      * before the full duration has passed.
      *
      * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once
      * the full duration has passed, the last error returned by the delegate verification mode will be thrown
      * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known
      * to never recover from this situation (e.g. {@link AtMost}).
      *
      * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter
      * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If
      * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.
      *
      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
      */
     public void verify(VerificationData data) {
-        AssertionError error = null;
+        AssertionError error = null; // Store the last verification error encountered
 
         timer.start();
         while (timer.isCounting()) {
             try {
+                // Attempt to verify using the delegate mode
                 delegate.verify(data);
 
+                // If verification succeeds
                 if (returnOnSuccess) {
+                    // If returnOnSuccess is true, we are done immediately.
                     return;
                 } else {
+                    // If returnOnSuccess is false, we need to continue waiting until the full duration passes.
+                    // Reset the error since this attempt was successful.
                     error = null;
                 }
-            } catch (MockitoAssertionError e) {
-                error = handleVerifyException(e);
-            }
-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
+            } catch (AssertionError e) {
+                // Catch any verification error (AssertionError is the base class for MockitoAssertionError and potential JUnit errors)
+                // Store the error encountered during this attempt.
                 error = handleVerifyException(e);
+                // Continue loop to retry verification until timer runs out.
             }
+            // Non-AssertionError exceptions are not caught and will propagate, terminating the verification loop.
         }
 
+        // After the timer has expired, if an error was captured (i.e., the delegate verification was not successful
+        // in the last attempt or consistently failed), throw the last captured error.
         if (error != null) {
             throw error;
         }
+        // If the loop completes without a final error (either because returnOnSuccess was false and the delegate
+        // succeeded eventually, or because returnOnSuccess was true and it succeeded earlier),
+        // the verification is considered successful.
     }
\ No newline at end of file
