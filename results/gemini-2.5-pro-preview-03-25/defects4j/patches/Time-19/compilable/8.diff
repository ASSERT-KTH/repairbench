diff --git a/tmp/5749573a-14d7-4491-b1b5-0ceafe395bc5_buggy.java b/tmp/eaa6003a-cfb4-4c1e-892b-99be201905d3_fixed.java
index f8caf72..8c853d2 100644
--- a/tmp/5749573a-14d7-4491-b1b5-0ceafe395bc5_buggy.java
+++ b/tmp/eaa6003a-cfb4-4c1e-892b-99be201905d3_fixed.java
@@ -1,65 +1,104 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
+        // Note: Using local instant here is approximation, may be inaccurate at transitions
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
+        final int offsetAdjusted = getOffset(instantAdjusted); // Offset for first estimated UTC instant
+
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+            // If offsetLocal > offsetAdjusted, we are transitioning from DST to Standard (fall back / overlap)
+            // Example: offsetLocal=+1h, offsetAdjusted=0h.
+            if (offsetLocal > offsetAdjusted) {
+                 // For overlaps, favour DST offset (the larger offset, corresponding to the earlier UTC instant).
+                 return offsetLocal; // Return the DST offset directly.
+            } else {
+                 // Gap (offsetLocal < offsetAdjusted). Standard to DST transition.
+                 // Example: offsetLocal=0h, offsetAdjusted=+1h.
+                 // Check the edge case where the local instant is the transition time.
+                 // Calculate the next transition time based on both possible offsets.
+                 // If they differ, return the offset before the transition (offsetLocal).
                  long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+                 // Use the second estimate for the other next transition check
+                 long instantAdjusted2 = instantLocal - offsetAdjusted;
+                 long nextAdjusted2 = nextTransition(instantAdjusted2);
+                 if (nextLocal != nextAdjusted2) {
+                     // This case implies instantLocal is likely the exact transition time.
+                     // The original code returned offsetLocal (offset before gap).
+                     // To favour times after the gap, we should arguably return offsetAdjusted.
+                     // However, sticking to minimal change based on original logic's likely intent for this exact instant.
                      return offsetLocal;
                  }
+                 // Otherwise, for gaps, favour the offset after the gap (DST). Fall through.
+            }
+        } else { // offsetLocal == offsetAdjusted
+            // This block handles cases where the transition was not detected by the
+            // difference check. This can happen if the initial guess offsetLocal
+            // was already the 'correct' offset for the estimated instantAdjusted.
+            // However, instantLocal could still be ambiguous (overlap).
+            // We need to check if instantAdjusted corresponds to the earlier time (DST)
+            // during an overlap. This uses logic inspired by Joda-Time commit fixing issue #19.
+
+            // Find the previous transition before the estimated UTC instant.
+             long prevTransition = previousTransition(instantAdjusted);
+             if (prevTransition < instantAdjusted) {
+                 // Calculate the DST savings. This requires getStandardOffset, assuming it's available.
+                 // Check the standard offset AT the adjusted instant, not the transition instant.
+                 int standardOffset = getStandardOffset(instantAdjusted);
+                 int dstSavings = offsetAdjusted - standardOffset;
+
+                 // Check if the current offset actually includes DST savings.
+                 if (dstSavings > 0) {
+                     // If we are in DST, check if the adjusted instant is close to the PREVIOUS transition.
+                     // If instantAdjusted is within the DST savings amount *after* the previous transition,
+                     // it implies this is the *first* occurrence of the local time (the DST one).
+                     // This handles the ambiguity during overlap by selecting the earlier instant.
+                     if (instantAdjusted - prevTransition <= dstSavings) {
+                         // instantAdjusted is confirmed as the earlier DST instance.
+                         // Return the current offset (which is the DST offset).
+                         return offsetAdjusted;
                      }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
                  }
              }
+             // If no DST savings, or if instantAdjusted is long after the previous transition,
+             // then offsetAdjusted is the correct offset (either standard time, or non-ambiguous DST).
         }
+
+        // Return the calculated offset (offsetAdjusted). This is the offset after a gap (DST),
+        // or the standard offset if not in overlap/gap, or the DST offset if overlap check passed.
         return offsetAdjusted;
     }
\ No newline at end of file
