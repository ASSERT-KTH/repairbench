diff --git a/tmp/db4c89b3-6652-48ac-a305-bfc8f06d6fa6_buggy.java b/tmp/d72a7202-d12a-482c-9fa8-97636d138db4_fixed.java
index f8caf72..6d24589 100644
--- a/tmp/db4c89b3-6652-48ac-a305-bfc8f06d6fa6_buggy.java
+++ b/tmp/d72a7202-d12a-482c-9fa8-97636d138db4_fixed.java
@@ -1,65 +1,97 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
+     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for.
+     *                      This is generally the local millis according to standard offset,
+     *                      or the local millis derived from fields, which may be ambiguous.
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+        // get the offset guess using the local instant assuming it's roughly UTC
         final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
+        
+        // adjust the local instant by the first offset guess and get the offset for that
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+            // Transition zone detected. Choose offset based on gap/overlap rules.
+            // If offsetLocal > offsetAdjusted, we are likely in a gap transition (spring forward).
+            // 'instantAdjusted' is chronologically before the transition, 'offsetAdjusted' is the offset BEFORE the gap.
+            // 'offsetLocal' is the offset AFTER the gap (estimated based on instantLocal).
+            // Rule for gaps: return offset AFTER the gap.
+            if (offsetLocal > offsetAdjusted) {
                 return offsetLocal;
             }
-            }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
-                }
-            }
-        }
+            // If offsetLocal < offsetAdjusted, we are likely in an overlap transition (fall back).
+            // 'instantAdjusted' is chronologically before the transition, 'offsetAdjusted' is the offset BEFORE the overlap.
+            // 'offsetLocal' is the offset AFTER the overlap (estimated based on instantLocal).
+            // Rule for overlaps: return offset BEFORE the overlap (the earlier, usually daylight time).
+            else {
+                // offsetLocal < offsetAdjusted
                 return offsetAdjusted;
             }
+        } else {
+            // offsetLocal == offsetAdjusted. This is the normal case, but it could also
+            // occur during an overlap if the initial guess (instantLocal) and the adjusted
+            // instant (instantAdjusted) both fall into the period *after* the transition.
+            final int offset = offsetAdjusted; // The calculated offset
+            final long instantUTC = instantAdjusted; // The calculated UTC instant
+
+            // Check for an overlap scenario where we need to return the earlier offset.
+            // Find the previous transition before the calculated UTC instant.
+            long prevTransUTC = previousTransition(instantUTC);
+            
+            // Is there a previous transition?
+            if (prevTransUTC < instantUTC) {
+                int offsetBefore = getOffset(prevTransUTC - 1); // Offset right before the transition
+                int offsetAfter = getOffset(prevTransUTC); // Offset right after the transition (should == offset)
+
+                // Was it a fall-back transition (offset decreased, creating an overlap)?
+                if (offsetBefore > offsetAfter) {
+                    // Calculate the duration of the overlap in milliseconds.
+                    long overlapDuration = offsetBefore - offsetAfter;
+                    // Calculate how far instantUTC is *after* the transition point.
+                    long timeSinceTransition = instantUTC - prevTransUTC;
+                    
+                    // Does instantUTC fall within the UTC range that maps to the ambiguous local times?
+                    // This range starts at prevTransUTC and lasts for overlapDuration.
+                    if (timeSinceTransition < overlapDuration) {
+                        // Yes, instantUTC corresponds to the *later* local time during the overlap.
+                        // The rule requires returning the offset for the *earlier* local time.
+                        return offsetBefore;
+                    }
+                }
+            }
+            // If it's not an overlap, or instantUTC is outside the ambiguous range,
+            // or there's no previous transition, return the calculated offset.
+            return offset;
+        }
+    }
\ No newline at end of file
