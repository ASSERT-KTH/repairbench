diff --git a/tmp/56db03f3-ef2b-4a71-a405-44ba6561e438_buggy.java b/tmp/ce289194-1d41-458e-bb6b-42b556b5d7c5_fixed.java
index f8caf72..b117d29 100644
--- a/tmp/56db03f3-ef2b-4a71-a405-44ba6561e438_buggy.java
+++ b/tmp/ce289194-1d41-458e-bb6b-42b556b5d7c5_fixed.java
@@ -1,65 +1,86 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
-                }
-            }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
+        // Try to estimate the real UTC instant by subtracting the standard offset first.
+        // Note: getStandardOffset expects UTC, but using instantLocal is a reasonable guess
+        // as standard offsets change infrequently.
+        final int standardOffset = getStandardOffset(instantLocal);
+        final long instantUTCGuess1 = instantLocal - standardOffset;
+        final int offset1 = getOffset(instantUTCGuess1);
+
+        // Adjust the UTC estimate using the first offset guess.
+        final long instantUTCGuess2 = instantLocal - offset1;
+        final int offset2 = getOffset(instantUTCGuess2);
+
+        // If the offsets match, the time might be stable, or within an overlap.
+        if (offset1 == offset2) {
+            // Check for an overlap using the transition at or before the estimated UTC instant.
+            // Find the previous transition relative to the second UTC guess.
+            long prevTrans = previousTransition(instantUTCGuess2);
+            
+            // Check if a previous transition exists and is strictly before the guessed instant.
+            // This avoids issues at the exact transition time and handles cases with no prior transitions.
+            if (prevTrans < instantUTCGuess2) {
+                int offsetPrev = getOffset(prevTrans - 1); // Offset strictly before the transition
+                int offsetAt = getOffset(prevTrans);      // Offset at or after the transition (should == offset2 if stable)
+                int diff = offsetPrev - offsetAt;          // Difference determines transition type
+                
+                // If diff > 0, it signifies an overlap transition (e.g., DST ending).
+                if (diff > 0) {
+                    // Check if the second UTC guess (instantUTCGuess2) falls within the overlap window.
+                    // The overlap window starts at prevTrans (UTC) and lasts for 'diff' milliseconds.
+                    if (instantUTCGuess2 - prevTrans < diff) {
+                        // The instant falls within the overlap. The rule is to return the earlier offset (DST).
                         return offsetPrev;
                     }
                 }
             }
-        return offsetAdjusted;
+            // If no overlap is detected for instantUTCGuess2, or if it's after the overlap window,
+            // the consistent offset (offset2) is the correct one.
+            return offset2;
+        } else {
+            // offset1 != offset2: The initial guesses straddle a transition boundary.
+            
+            // Determine the transition type based on offset comparison.
+            // If offset1 < offset2: Represents a gap (e.g., Standard -> DST transition).
+            // Rule: Return the offset *after* the gap (later time). offset2 is potentially this offset.
+            // If offset1 > offset2: Represents an overlap (e.g., DST -> Standard transition).
+            // Rule: Return the *earlier* offset (DST/summer time). offset1 is potentially this offset.
+            
+            // Return the later offset (offset2) if it's a gap (offset1 < offset2),
+            // return the earlier offset (offset1) if it's an overlap (offset1 > offset2).
+            // This selection favours the daylight offset during overlap, and the later offset during gap.
+            return (offset1 > offset2) ? offset1 : offset2;
+        }
     }
\ No newline at end of file
