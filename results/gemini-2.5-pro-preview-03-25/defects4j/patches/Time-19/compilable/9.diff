diff --git a/tmp/d8148d14-f04c-4c14-bd0b-54574194b592_buggy.java b/tmp/ddd14c86-356b-4aca-9d4f-20a17162ef11_fixed.java
index f8caf72..d71136b 100644
--- a/tmp/d8148d14-f04c-4c14-bd0b-54574194b592_buggy.java
+++ b/tmp/ddd14c86-356b-4aca-9d4f-20a17162ef11_fixed.java
@@ -1,65 +1,85 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+        // get the offset at instantLocal (first estimate, used only to guess approximate UTC)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
+        // if the offsets differ, we must be near a DST boundary (usually a gap)
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+            // If offsetLocal > offsetAdjusted, calculation crossed a gap backwards.
+            // The offset after the gap is offsetLocal.
+            // If offsetLocal < offsetAdjusted, calculation crossed a gap forwards.
+            // The offset after the gap is offsetAdjusted.
+            // The documentation requires returning the offset for the time AFTER the gap.
+            // The original code included a nextTransition check that could return offsetLocal
+            // when offsetLocal < offsetAdjusted, potentially violating the "after gap" rule.
+            // We simplify to always return the offset associated with the time after the gap.
+            if (offsetLocal > offsetAdjusted) {
                 return offsetLocal;
+            } else {
+                return offsetAdjusted;
             }
         }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
+
+        // else: offsetLocal == offsetAdjusted
+        // This handles non-transition times AND overlaps where the calculation lands consistently.
+        // We need to check if this consistent offset corresponds to the *later* time in an overlap.
+        // If so, we must return the *earlier* offset (summer time).
+
+        // Find the previous transition event before the estimated UTC instant.
+        long prevTransition = previousTransition(instantAdjusted);
+        if (prevTransition < instantAdjusted) {
+            // Get the offset value that was effective *just before* that transition.
+            int offsetBeforePrev = getOffset(prevTransition - 1);
+            // Check if the offset decreased at this transition (indicating an overlap).
+            // offsetAdjusted is the offset *after* the transition.
+            if (offsetBeforePrev > offsetAdjusted) {
+                // This was an overlap transition. Calculate its duration.
+                int overlapDuration = offsetBeforePrev - offsetAdjusted;
+                // Check if the estimated UTC instant falls within the ambiguous period
+                // (i.e., within overlapDuration millis after the transition).
+                if (instantAdjusted - prevTransition <= overlapDuration) {
+                    // Yes, the calculated instant corresponds to the later mapping
+                    // of the ambiguous local time. Return the earlier offset.
+                    return offsetBeforePrev;
                 }
             }
         }
+
+        // Default case: No transition, or gap handled above, or overlap resolved correctly by initial calculation.
         return offsetAdjusted;
     }
\ No newline at end of file
