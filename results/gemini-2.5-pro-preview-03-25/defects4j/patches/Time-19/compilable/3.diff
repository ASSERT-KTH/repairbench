diff --git a/tmp/9a62d719-6323-4ede-bbbf-07e0a773b2b1_buggy.java b/tmp/bdbfdcd8-799b-4f16-b5d1-0037422690be_fixed.java
index f8caf72..bd0cf54 100644
--- a/tmp/9a62d719-6323-4ede-bbbf-07e0a773b2b1_buggy.java
+++ b/tmp/bdbfdcd8-799b-4f16-b5d1-0037422690be_fixed.java
@@ -1,65 +1,92 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+            // Transition detected.
+            // If offsetLocal > offsetAdjusted, we are in a gap (e.g., 0 -> +1).
+            // Return the offset *after* the gap, which is offsetLocal.
+            // This handles the rule: "method will return an offset suitable for
+            // calculating an instant after any DST gap".
+            if (offsetLocal > offsetAdjusted) {
                 return offsetLocal;
+            } else {
+                // offsetLocal < offsetAdjusted. This condition is possible if the initial guess
+                // offsetLocal falls in the later period (e.g. standard time), but the adjusted instant
+                // instantAdjusted falls in the earlier period (e.g. daylight time).
+                // Example: Transition is +1 -> 0. offsetLocal=0, offsetAdjusted=+1.
+                // The rule is "always favour daylight (summer) time".
+                // In this case, offsetAdjusted represents the daylight time offset.
+                 return offsetAdjusted;
             }
-            }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
+        } else { // offsetLocal == offsetAdjusted
+            // This is the common case, far from transitions.
+            // It also covers the case where we are in an overlap period (e.g. +1 -> 0),
+            // and both estimates happen to yield the standard offset (0).
+            // We must detect this specific overlap case and return the DST offset (+1) instead.
+
+            // Check for overlap: find the transition occurring *before* the estimated UTC instant.
+            long prevTrans = previousTransition(instantAdjusted);
+            if (prevTrans < instantAdjusted) {
+                // Get the offset that was active *before* that transition.
+                int offsetBeforePrev = getOffset(prevTrans - 1);
+                // If the offset before the transition is different from our current estimate (offsetAdjusted)...
+                if (offsetBeforePrev != offsetAdjusted) {
+                    // ...it implies that 'instantAdjusted' is after a transition.
+                    // Now, check if the local time 'instantLocal' could *also* be achieved
+                    // using this alternative offset (offsetBeforePrev).
+                    long utcUsingOffsetBeforePrev = instantLocal - offsetBeforePrev;
+                    // Does this alternative UTC instant actually have the offset 'offsetBeforePrev'?
+                    // Perform this check only if the calculated UTC instant is different
+                    // from the one calculated using offsetAdjusted, to avoid infinite loops.
+                    if (getOffset(utcUsingOffsetBeforePrev) == offsetBeforePrev && utcUsingOffsetBeforePrev != instantAdjusted) {
+                        // Yes, it does. This confirms we are in an overlap.
+                        // 'instantLocal' can be interpreted using offsetAdjusted (standard) or offsetBeforePrev (daylight).
+                        // Rule: "always favour daylight (summer) time", which corresponds to the earlier instant.
+                        // The earlier UTC instant is 'utcUsingOffsetBeforePrev'.
+                        // Return the corresponding offset 'offsetBeforePrev'.
+                        return offsetBeforePrev;
                     }
                 }
             }
+            // If no overlap is detected, or if we are not near a transition where offsets differ,
+            // the initial consistent estimate 'offsetAdjusted' is correct.
             return offsetAdjusted;
         }
+    }
\ No newline at end of file
