diff --git a/tmp/f2658ae9-77e6-4998-af66-c2a9a7640cf7_buggy.java b/tmp/23d9314d-66be-4806-ba24-15b70b2eee04_fixed.java
index f8caf72..df7864b 100644
--- a/tmp/f2658ae9-77e6-4998-af66-c2a9a7640cf7_buggy.java
+++ b/tmp/23d9314d-66be-4806-ba24-15b70b2eee04_fixed.java
@@ -1,65 +1,102 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
+        // Note: getOffset expects UTC millis, but here we are passing local millis.
+        // This estimate is just used to narrow down the potential UTC instant.
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
+
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
+            // Check if we are transitioning from standard to daylight time (spring forward / gap)
+            // by checking if the offset difference is negative (offsetAdjusted > offsetLocal).
+            // This occurs if the initial guess (offsetLocal) was the standard offset,
+            // but the adjusted instant (instantAdjusted) falls in daylight time.
             if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+                // Find the next transition after the adjusted instant (which is potentially the first UTC estimate).
                 long nextLocal = nextTransition(instantAdjusted);
+                // Find the next transition after the alternative potential UTC instant (local - new offset).
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
+                
+                // If the next transition differs depending on which candidate UTC instant we use,
+                // it strongly suggests that the local instant falls within the DST gap.
                 if (nextLocal != nextAdjusted) {
+                    // In the gap, the rule is to return an offset that shifts the time forward.
+                    // Returning offsetLocal (the standard offset before the transition) achieves this.
+                    // Example: Gap 1:00-1:59. Input 1:30. offsetLocal=0, offsetAdjusted=+1h.
+                    // utc = 1:30 - offsetLocal = 1:30 UTC.
+                    // DateTime(utc) = 1:30 UTC + getOffset(1:30 UTC) = 1:30 UTC + (+1h) = 2:30 local. Matches example.
                     return offsetLocal;
                 }
+                // If next transitions are the same, it might be an edge case, proceed to default return.
             }
-        } else if (offsetLocal > 0) {
+            // If (offsetLocal - offsetAdjusted) >= 0, it might be a fall-back transition or an edge case.
+            // The overlap logic below handles the main fall-back scenario. Defaulting to offsetAdjusted
+            // might be correct for other edge cases where offsets differ.
+            
+        } else if (offsetLocal == offsetAdjusted) {
+            // Offsets match. This could be normal time, or an overlap where the initial guess and adjusted instant
+            // happen to fall into the same offset period (either both standard or both daylight).
+            // We need to check specifically for the overlap condition.
             long prev = previousTransition(instantAdjusted);
+            // Ensure there was a previous transition.
             if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
+                // Get the offset that was active *just before* the previous transition.
+                int offsetPrev = getOffset(prev - 1);
+                // Calculate the change in offset at that transition.
+                int diff = offsetAdjusted - offsetPrev;
+                // If the offset decreased (e.g., from +1h DST to 0h Standard), diff will be negative.
+                // This indicates a fall-back transition where an overlap occurs.
+                if (diff < 0) {
+                    // Check if the adjusted instant falls within the overlap period.
+                    // The duration of the overlap is the magnitude of the offset change (-diff, or offsetPrev - offsetAdjusted).
+                    // If the time elapsed since the transition (instantAdjusted - prev) is less than or equal to the overlap duration,
+                    // then instantAdjusted corresponds to a local time within the overlap.
+                    if (instantAdjusted - prev <= (long)(offsetPrev - offsetAdjusted)) {
+                        // We are in the overlap ambiguity zone.
+                        // The rule is to return the offset corresponding to the earlier instant,
+                        // which is the offset active *before* the transition (offsetPrev, typically the daylight offset).
                         return offsetPrev;
                     }
                 }
             }
+        }
+        // Default case: Return the offset calculated from the adjusted instant.
+        // This handles normal cases (no transition nearby), and cases near transitions
+        // that weren't specifically handled by the gap or overlap logic above.
         return offsetAdjusted;
     }
\ No newline at end of file
