diff --git a/tmp/2bde0907-d0ab-4fe9-8411-1a1d578f3064_buggy.java b/tmp/876e789f-aab4-4b66-a149-d326daedada5_fixed.java
index 1b07d98..b3dde76 100644
--- a/tmp/2bde0907-d0ab-4fe9-8411-1a1d578f3064_buggy.java
+++ b/tmp/876e789f-aab4-4b66-a149-d326daedada5_fixed.java
@@ -1,76 +1,110 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
+        // [databind#2064]: Should NOT skip if property is null, as we may have
+        //   global config overrides to consider
+        /*
         // Note! Should not skip if `property` null since that'd skip check
         // for config overrides, in case of root value
         if (property == null) {
             return this;
         }
+        */
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
+            // 12-Jun-2020, tatu: Is this necessary? Looks like it shouldn't be.
+            // If it IS, need to verify `_useTimestamp` part...
+            /*
+            Boolean B = serializers.getConfig().getDefaultPropertyFormat(handledType())
+                    .getFeature(JsonFormat.Feature.WRITE_DATES_AS_TIMESTAMPS);
+            if (B != null) {
+                return withFormat(B, null);
+            }
+            */
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if (format.hasPattern()) {
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
             TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                     : serializers.getTimeZone();
+            // 14-Mar-2019, tatu: As per [databind#2257], need to ensure timezone is applied,
+            //    when specified (or, if not, use the default)
+            if (tz == null) {
+                tz = serializers.getTimeZone();
+            }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
         final boolean hasLocale = format.hasLocale();
         final boolean hasTZ = format.hasTimeZone();
-        final boolean asString = (shape == JsonFormat.Shape.STRING);
+        // 12-Jun-2017, tatu: Although we don't yet support writing path-through
+        //   Object values, need to avoid error in case Shape is OBJECT or ARRAY
+        // Also: If Shape is STRING, need to ensure we use String, not timestamp.
+//        final boolean asString = (shape == JsonFormat.Shape.STRING);
+
+        // 12-Jun-2020, tatu: Above check seems wrong; should rather check if
+        //    shape is STRING?
+        final boolean asString = format.getShape() == JsonFormat.Shape.STRING;
 
         if (!hasLocale && !hasTZ && !asString) {
             return this;
         }
 
         DateFormat df0 = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
         if (df0 instanceof StdDateFormat) {
             StdDateFormat std = (StdDateFormat) df0;
             if (format.hasLocale()) {
                 std = std.withLocale(format.getLocale());
             }
+            // [databind#2174]: need to retain default TimeZone if none specified
+            // (defaults determined by StdDateFormat)
             if (format.hasTimeZone()) {
                 std = std.withTimeZone(format.getTimeZone());
             }
             return withFormat(Boolean.FALSE, std);
         }
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
+        // 17-Mar-2019, tatu: As per [databind#2275], not true, can use `clone()`
         if (!(df0 instanceof SimpleDateFormat)) {
+            // 14-Mar-2019, tatu: Let's try to use it as-is? Better than failing, maybe?
+            //  Looks like this leads to problems ultimately: need to be able to clone instance
             serializers.reportBadDefinition(handledType(), String.format(
 "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
 df0.getClass().getName()));
         }
         SimpleDateFormat df = (SimpleDateFormat) df0;
         if (hasLocale) {
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
              df = new SimpleDateFormat(df.toPattern(), format.getLocale());
         } else {
+            // 17-Mar-2019, tatu: But can clone...
              df = (SimpleDateFormat) df.clone();
         }
         TimeZone newTz = format.getTimeZone();
+        // 14-Mar-2019, tatu: As per [databind#2257], need to ensure timezone is applied,
+        //    either use specified, or default if none specified.
+        // 07-Jun-2019, tatu: But only IF explicitly set...
         boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
         if (changeTZ) {
             df.setTimeZone(newTz);
         }
         return withFormat(Boolean.FALSE, df);
     }
\ No newline at end of file
