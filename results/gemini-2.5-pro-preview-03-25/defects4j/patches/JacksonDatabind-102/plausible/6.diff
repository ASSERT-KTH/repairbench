diff --git a/tmp/5faa9cc8-795f-40e3-96c3-aee0c345ddca_buggy.java b/tmp/35b31136-0569-4ce2-8eb3-ac3b1d656687_fixed.java
index 1b07d98..32b857e 100644
--- a/tmp/5faa9cc8-795f-40e3-96c3-aee0c345ddca_buggy.java
+++ b/tmp/35b31136-0569-4ce2-8eb3-ac3b1d656687_fixed.java
@@ -1,76 +1,99 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         // Note! Should not skip if `property` null since that'd skip check
         // for config overrides, in case of root value
-        if (property == null) {
-            return this;
-        }
+        // 24-Mar-2018, tatu: Wait. Why wouldn't we? Yes, need to check config overrides
+        //    and type settings, regardless of per-property settings.
+
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
+            // 17-Jan-2018, tatu: Make sure NOT to simply return `this` but use contextual
+            //    version if available (may miss overrides etc)
+            // 29-Aug-2019, tatu: Although... looks like `property` is null only for root value case?
+            //    And does not apply for contextualization? Needs more testing but maybe is ok.
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
+            // If format explicitly defined as numeric, MUST use timestamp output
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if (format.hasPattern()) {
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
             TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
+                    // [databind#1267]: Use configured TimeZone if available
                     : serializers.getTimeZone();
             df.setTimeZone(tz);
+            // Must force use of date format, disable timestamp production:
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
         final boolean hasLocale = format.hasLocale();
         final boolean hasTZ = format.hasTimeZone();
-        final boolean asString = (shape == JsonFormat.Shape.STRING);
+        final boolean asString = (shape == JsonFormat.Shape.STRING || format.hasPattern()); // Also consider pattern as indication for String output
 
+        // Nothing to apply? Just return `this`
         if (!hasLocale && !hasTZ && !asString) {
             return this;
         }
 
+        // We either have Locale/TZ override, or forced String output
+        
         DateFormat df0 = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
         if (df0 instanceof StdDateFormat) {
             StdDateFormat std = (StdDateFormat) df0;
+            // Try to retain parametric settings
             if (format.hasLocale()) {
                 std = std.withLocale(format.getLocale());
             }
             if (format.hasTimeZone()) {
                 std = std.withTimeZone(format.getTimeZone());
             }
+            // And then use that modified format, forcing string output
             return withFormat(Boolean.FALSE, std);
         }
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
         if (!(df0 instanceof SimpleDateFormat)) {
+            // 16-Jan-2018, tatu: Let's add null check for diagnostics
+            if (df0 == null) {
+                 // [databind#2183]: Should perhaps not fail but use default? Or throw exception?
+                 //   For now, retain original behavior
+                 return this;
+            }
             serializers.reportBadDefinition(handledType(), String.format(
 "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
 df0.getClass().getName()));
         }
+        // If we get this far, MUST be SimpleDateFormat
         SimpleDateFormat df = (SimpleDateFormat) df0;
-        if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-            df = new SimpleDateFormat(df.toPattern(), format.getLocale());
+        final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
+        // Ugh. No way to change `Locale`, create copy; must re-create completely:
+        if (format.hasLocale() && !loc.equals(serializers.getLocale())) {
+            // SimpleDateFormat has pattern-based constructor... might not be pattern
+            // from value, but...
+            df = new SimpleDateFormat(df.toPattern(), loc);
         } else {
             df = (SimpleDateFormat) df.clone();
         }
         TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
+        final boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
         if (changeTZ) {
             df.setTimeZone(newTz);
         }
+        // Either way, string format needed:
         return withFormat(Boolean.FALSE, df);
     }
\ No newline at end of file
