diff --git a/tmp/0f3f25f0-0602-428c-b48a-845eb0834a07_buggy.java b/tmp/6510879c-6c17-41f3-99f6-3e905daf224b_fixed.java
index 1b07d98..cf8403b 100644
--- a/tmp/0f3f25f0-0602-428c-b48a-845eb0834a07_buggy.java
+++ b/tmp/6510879c-6c17-41f3-99f6-3e905daf224b_fixed.java
@@ -1,76 +1,108 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         // Note! Should not skip if `property` null since that'd skip check
         // for config overrides, in case of root value
-        if (property == null) {
-            return this;
-        }
+        //
+        // Original buggy code:
+        // if (property == null) { // <<<< BUG: This prevented checking config overrides
+        //    return this;
+        // }
+        // Fixed code: Proceed even if property is null to check config overrides
+
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
+
+        // 18-Nov-2018, tatu: For [databind#2192], must check shape explicitly,
+        //    even if there's pattern
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
+        // Need to retain this code for custom patterns
         if (format.hasPattern()) {
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
-            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
+            // Not sure if this is the best way to support TZs, but let's try
+            // either from explicit definition, or from serializers
             TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                     : serializers.getTimeZone();
+            // 20-Mar-2019, tatu: [databind#2275] Need to ensure TimeZone set for `SimpleDateFormat`
+            // NOTE: requires 1.7+
+            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
         final boolean hasLocale = format.hasLocale();
         final boolean hasTZ = format.hasTimeZone();
+        // Shape change only considered if neither explicit pattern nor number shape specified:
         final boolean asString = (shape == JsonFormat.Shape.STRING);
 
+        // No changes if nothing specified
         if (!hasLocale && !hasTZ && !asString) {
             return this;
         }
 
+        /* Any changes? Need to create new instance; otherwise can return `this`.
+         * We will need a DateFormat, so we start with the default one...
+         */
         DateFormat df0 = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
         if (df0 instanceof StdDateFormat) {
             StdDateFormat std = (StdDateFormat) df0;
+            // Let's see if we can perhaps just configure with StdDateFormat features?
             if (format.hasLocale()) {
                 std = std.withLocale(format.getLocale());
             }
             if (format.hasTimeZone()) {
                 std = std.withTimeZone(format.getTimeZone());
             }
             return withFormat(Boolean.FALSE, std);
         }
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
+        // 17-Jan-2018, tatu: As per [databind#1871], need to ensure we know what we are cloning
         if (!(df0 instanceof SimpleDateFormat)) {
+            // 15-Sep-2019, tatu: Let's try to handle Shapes other than STRING here too,
+            //    possibly. But for now, require pattern for others.
+            // 24-Oct-2021, tatu: Make explicit that `Shape.STRING` is fine
+            if (asString) { // like, explicit JsonFormat.Shape.STRING? Fine.
+                // but otherwise must be a problem, can't re-configure
+            } else {
                  serializers.reportBadDefinition(handledType(), String.format(
 "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
 df0.getClass().getName()));
             }
-        SimpleDateFormat df = (SimpleDateFormat) df0;
+            // 19-Sep-2022, tatu: Should probably return `this` here...
+            return this;
+        }
+        // Either way, need to create copy, then modify.
+        // For serialization, `DateFormat`s are not thread-safe, must create copy separate copy
+        SimpleDateFormat df = (SimpleDateFormat) df0.clone(); // we know it's SimpleDateFormat
         if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            // Ugh. No way to change `Locale`, create copy; must re-create completely:
+            // 24-Oct-2021, tatu: Looks like `clone()` is not enough, locale not copied reliably?!
+            //    So need to create from scratch. Seems suspicious, may need reverting...
             df = new SimpleDateFormat(df.toPattern(), format.getLocale());
-        } else {
-            df = (SimpleDateFormat) df.clone();
         }
-        TimeZone newTz = format.getTimeZone();
+        // And timezone may need to be set as well
+        TimeZone newTz = format.hasTimeZone() ? format.getTimeZone() : null;
         boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
         if (changeTZ) {
             df.setTimeZone(newTz);
         }
+        // And finally, if shape was specified as String, need to ensure that's used
         return withFormat(Boolean.FALSE, df);
     }
\ No newline at end of file
