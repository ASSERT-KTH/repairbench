diff --git a/tmp/ca9d7e4d-4e46-4891-9ab9-92532956af11_buggy.java b/tmp/7e9a40a7-4209-4cb9-849c-0bdcf6ac32a7_fixed.java
index 1b07d98..9de9f37 100644
--- a/tmp/ca9d7e4d-4e46-4891-9ab9-92532956af11_buggy.java
+++ b/tmp/7e9a40a7-4209-4cb9-849c-0bdcf6ac32a7_fixed.java
@@ -1,76 +1,103 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
-        // Note! Should not skip if `property` null since that'd skip check
-        // for config overrides, in case of root value
-        if (property == null) {
-            return this;
-        }
+        // NOTE: config override needs to be checked FIRST, before property annotation;
+        // otherwise property annotation may override class-level config override.
+        // 03-Aug-2018, tatu: Ok, this is bit tricky, because we MUST also call
+        // `findFormatOverrides` which does check for property annotations. And we
+        // MUST use non-contextual instance (`this`) to call it. Ergo, need to
+        // fully check format settings first, then possibly create new instance.
+        // 17-Dec-2020, tatu: [databind#2962] This is still tricky, problematic really,
+        //   and seemingly we should NOT return `this` if format is null...
+        //   but for now leaving as is.
+
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
+            // 14-Apr-2020, tatu: As per [databind#2648] we should indeed NOT create a new instance
+            //    if there are no overrides. Specifically need to avoid trying to create custom
+            //    `SimpleDateFormat` because global default settings may be something else...
+            //    like `StdDateFormat` or custom one.
              return this;
         }
+
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+        // If not number, textual it is...
+        // But first: custom pattern will override things
         if (format.hasPattern()) {
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
             TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                     : serializers.getTimeZone();
-            df.setTimeZone(tz);
+            // 16-Jan-2019, tatu: We must indicate difference between implicit default choice
+            //   and explicit setting, so pass `Boolean.FALSE`
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
         final boolean hasLocale = format.hasLocale();
         final boolean hasTZ = format.hasTimeZone();
+        // let's also consider case of explicit Shape selection:
         final boolean asString = (shape == JsonFormat.Shape.STRING);
 
+        // If nothing indicates change from defaults, just return `this`
         if (!hasLocale && !hasTZ && !asString) {
             return this;
         }
 
+        // We will need a DateFormat, possibly based on existing one...
         DateFormat df0 = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
         if (df0 instanceof StdDateFormat) {
             StdDateFormat std = (StdDateFormat) df0;
-            if (format.hasLocale()) {
+            // Bit awkward, as we do not know for sure if shape was STRING or not but
+            // let's assume format using locale or timezone means textual format.
+            // 08-Nov-2017, tatu: Except for `SqlDateSerializer`! Need to avoid changing...
+            // TODO: Actually, figure out how to USE shape information
+            if (hasLocale) { // ok to pass null if no locale defined
                 std = std.withLocale(format.getLocale());
             }
-            if (format.hasTimeZone()) {
+            if (hasTZ) { // ok to pass null if no timezone defined
                 std = std.withTimeZone(format.getTimeZone());
             }
             return withFormat(Boolean.FALSE, std);
         }
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
         if (!(df0 instanceof SimpleDateFormat)) {
+            // 13-Jun-2017, tatu: Let's add note on StdDateFormat, may be confusing
             serializers.reportBadDefinition(handledType(), String.format(
-"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
+"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone` (unless overridden by explicit @JsonFormat)",
 df0.getClass().getName()));
         }
+        // Either way, we need concrete `SimpleDateFormat` instance to configure
         SimpleDateFormat df = (SimpleDateFormat) df0;
         if (hasLocale) {
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            // 20-Apr-2017, tatu: And DON'T use `clone()` any more -- may not be thread-safe!
             df = new SimpleDateFormat(df.toPattern(), format.getLocale());
         } else {
+            // 20-Apr-2017, tatu: And DON'T use `clone()` any more -- may not be thread-safe!
+            //   Need to create anew.
+            // 13-Jun-2017, tatu: Ideally we wouldn't need to create new instance, but seems we must
+            //   for now. Unfortunate. Looking for better solutions for future versions.
             df = (SimpleDateFormat) df.clone();
         }
         TimeZone newTz = format.getTimeZone();
+        // Existing `df.getTimeZone()` should never be null
         boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
         if (changeTZ) {
             df.setTimeZone(newTz);
         }
+        // And finally, create variant instance with these settings:
         return withFormat(Boolean.FALSE, df);
     }
\ No newline at end of file
