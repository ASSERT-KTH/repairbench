diff --git a/tmp/3e8c5a8e-d871-4c72-a483-16f16913b6c1_buggy.java b/tmp/8c82628c-b151-49bf-bfc4-d926f4ec94ff_fixed.java
index 1b07d98..ece95b3 100644
--- a/tmp/3e8c5a8e-d871-4c72-a483-16f16913b6c1_buggy.java
+++ b/tmp/8c82628c-b151-49bf-bfc4-d926f4ec94ff_fixed.java
@@ -1,76 +1,96 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         // Note! Should not skip if `property` null since that'd skip check
         // for config overrides, in case of root value
-        if (property == null) {
-            return this;
-        }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
+            // Regardless of property, if no format overrides found, defaults are fine
             return this;
         }
-        // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
-        }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+        // First: does the format specify a pattern? If yes, that overrides shape
+        // regardless of Shape, Locale, TimeZone explicit definitions
         if (format.hasPattern()) {
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
+            // Standard DateFormat is Locale-dependant: creates SimpleDateFormat
             SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
+
             TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                     : serializers.getTimeZone();
+            // Same logic as below, either explicit via Format override, or default ok
+            // 21-Jun-2018, tatu: As per comments in [databind#2064], need explicit check
+            if (format.hasTimeZone() || !serializers.getConfig().hasExplicitTimeZone()) {
                 df.setTimeZone(tz);
+            }
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
+        // If not pattern, does it specify Shape?
+        JsonFormat.Shape shape = format.getShape();
+        // If shape is specified as numeric, that overrides everything
+        // (and pattern wasn't specified)
+        if (shape.isNumeric()) {
+            return withFormat(Boolean.TRUE, null);
+        }
+        
+        // Otherwise, shape is String or not specified (handling differs slightly).
+        // But format may specify Locale or TimeZone.
+        // If not, we are done:
         final boolean hasLocale = format.hasLocale();
         final boolean hasTZ = format.hasTimeZone();
         final boolean asString = (shape == JsonFormat.Shape.STRING);
 
+        // String means that we should use default format string, but may need
+        // to change TimeZone, Locale?
         if (!hasLocale && !hasTZ && !asString) {
             return this;
         }
 
+        // Need to get baseline format to modify. Let's start with the default one
         DateFormat df0 = serializers.getConfig().getDateFormat();
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+        
+        // Jackson's own `StdDateFormat` is easy...
         if (df0 instanceof StdDateFormat) {
             StdDateFormat std = (StdDateFormat) df0;
             if (format.hasLocale()) {
                 std = std.withLocale(format.getLocale());
             }
+            // With timezone, need to verify it's not the default one:
+            // (NOTE: could perhaps avoid checks like this by explicit checks again...)
             if (format.hasTimeZone()) {
                  std = std.withTimeZone(format.getTimeZone());
              }
             return withFormat(Boolean.FALSE, std);
         }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
+        // otherwise, need to clone, if possible
         if (!(df0 instanceof SimpleDateFormat)) {
              serializers.reportBadDefinition(handledType(), String.format(
  "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
  df0.getClass().getName()));
+             // Fall back to default? Would be `this` but we know it's specific one, so:
+             return this;
         }
+
+        // Ok, requires slightly contorted logic, but this is the only way...
         SimpleDateFormat df = (SimpleDateFormat) df0;
         if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+            // Ugh. No way to change `Locale`, create copy; must re-create completely:
             df = new SimpleDateFormat(df.toPattern(), format.getLocale());
         } else {
+            // Can we just clone? Needs to be SimpleDateFormat, then
             df = (SimpleDateFormat) df.clone();
         }
+        // Timezone we can change tho:
         TimeZone newTz = format.getTimeZone();
         boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
         if (changeTZ) {
             df.setTimeZone(newTz);
         }
+        // And finally, create new instance with changes
         return withFormat(Boolean.FALSE, df);
     }
\ No newline at end of file
