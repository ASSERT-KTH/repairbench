diff --git a/tmp/aa27a408-d99f-40b4-bfcc-f0a56651a88e_buggy.java b/tmp/8ca44fbe-f1f4-4c5d-a52d-5e6dd4ea43e8_fixed.java
index 1b07d98..eadf29e 100644
--- a/tmp/aa27a408-d99f-40b4-bfcc-f0a56651a88e_buggy.java
+++ b/tmp/8ca44fbe-f1f4-4c5d-a52d-5e6dd4ea43e8_fixed.java
@@ -1,76 +1,105 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         // Note! Should not skip if `property` null since that'd skip check
         // for config overrides, in case of root value
-        if (property == null) {
-            return this;
-        }
+        //
+        // Original buggy code had:
+        // if (property == null) { return this; }
+        // This was incorrect, it bypassed override checks for root values.
+        // Removed the block. Now findFormatOverrides will handle null property
+        // by checking config overrides.
+
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if (format.hasPattern()) {
+            // 10-Mar-2017, tatu: Make sure specified timezone is used, overrides default one
+            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
+                    : serializers.getTimeZone();
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
+            // NOTE: we MUST create a clone here, because `SimpleDateFormat` is stateful, NOT
+            // thread-safe. Bonus: forces use of default locale, unless specified.
             SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
-            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
-                    : serializers.getTimeZone();
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
         final boolean hasLocale = format.hasLocale();
         final boolean hasTZ = format.hasTimeZone();
+        // [databind#1744]: even if not pattern, shape may be specified
         final boolean asString = (shape == JsonFormat.Shape.STRING);
 
+        // Either specific format definition, or change in locale/timezone
         if (!hasLocale && !hasTZ && !asString) {
             return this;
         }
 
+        // We are going to need a new format instance, configured
         DateFormat df0 = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
         if (df0 instanceof StdDateFormat) {
             StdDateFormat std = (StdDateFormat) df0;
             if (format.hasLocale()) {
                 std = std.withLocale(format.getLocale());
             }
             if (format.hasTimeZone()) {
                 std = std.withTimeZone(format.getTimeZone());
             }
             return withFormat(Boolean.FALSE, std);
         }
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
+        // 19-Feb-2015, tatu: Actually, that's not true. Let's see if it is cloneable
+        // 21-Aug-2019, tatu: ... maybe not. Let's stick to SimpleDateFormat only for now.
+        /*
+        if (df0.getClass() == SimpleDateFormat.class) { // yes, check for exact match
+           // 10-Mar-2017, tatu: Make sure specified timezone is used, overrides default one
+           TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
+                   : serializers.getTimeZone();
+           // 08-Jun-2017, tatu: How about Locale? Can't change, need to create copy
+           SimpleDateFormat df = (SimpleDateFormat) df0.clone();
+           df.setTimeZone(tz);
+           return withFormat(Boolean.FALSE, df);
+        }
+        */
         if (!(df0 instanceof SimpleDateFormat)) {
             serializers.reportBadDefinition(handledType(), String.format(
 "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
 df0.getClass().getName()));
         }
+
+        // Try to clone, change locale if needed; otherwise create new one
         SimpleDateFormat df = (SimpleDateFormat) df0;
-        if (hasLocale) {
+        final Locale loc = hasLocale ? format.getLocale() : serializers.getLocale();
+        if (!loc.equals(df.getLocale())) {
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-            df = new SimpleDateFormat(df.toPattern(), format.getLocale());
+            df = new SimpleDateFormat(df.toPattern(), loc);
         } else {
+            // Either way, need to clone if multiple settings possible
             df = (SimpleDateFormat) df.clone();
         }
+        // And then change timezone if needed
         TimeZone newTz = format.getTimeZone();
+        // [databind#2172]: Check null for `newTz` is needed
         boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
         if (changeTZ) {
             df.setTimeZone(newTz);
         }
         return withFormat(Boolean.FALSE, df);
     }
\ No newline at end of file
