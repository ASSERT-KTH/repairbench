diff --git a/tmp/87db7cf0-b6f9-438c-9c63-79c432f74627_buggy.java b/tmp/82f0b952-f050-417e-b1ea-574940983b8a_fixed.java
index cfdcd9c..de7d208 100644
--- a/tmp/87db7cf0-b6f9-438c-9c63-79c432f74627_buggy.java
+++ b/tmp/82f0b952-f050-417e-b1ea-574940983b8a_fixed.java
@@ -1,51 +1,57 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
+    // Ensure the index is a number.
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Check if the index is an integer.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
+    // Check if the index is non-negative.
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node current = left.getFirstChild();
-    Node elem = null;
+    // Iterate through the array elements to find the element at the specified index.
     for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
       current = current.getNext();
     }
 
-    if (elem == null) {
+    // Check if the index is within the bounds of the array.
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    Node elem = current; // The element at the specified index.
+
+    // Handle array holes (empty elements) by replacing them with 'undefined'.
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
+      // Detach the element from the original array literal before using it.
       left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM expression (n) with the folded element (elem).
+    parent.replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
