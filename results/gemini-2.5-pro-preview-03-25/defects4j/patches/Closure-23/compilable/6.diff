diff --git a/tmp/85a758f2-7cec-4c59-afab-5723e3d51b84_buggy.java b/tmp/e054a2ff-66d9-4062-83fc-16c868ec6c12_fixed.java
index cfdcd9c..87faf06 100644
--- a/tmp/85a758f2-7cec-4c59-afab-5723e3d51b84_buggy.java
+++ b/tmp/e054a2ff-66d9-4062-83fc-16c868ec6c12_fixed.java
@@ -1,51 +1,60 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Check that the index is a positive integer.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node current = left.getFirstChild();
-    Node elem = null;
+    // Loop through the children of the ARRAYLIT node until the desired index.
     for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
       current = current.getNext();
     }
 
-    if (elem == null) {
+    // Check if the index is out of bounds.
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // 'current' is the element node we want.
+    Node elem = current;
+
+    // Clone the node and replace the GETELEM node.
+    // We can't use the original node because it's still attached to the ARRAYLIT.
+    // If we remove it, the ARRAYLIT might be modified unexpectedly if used elsewhere.
+    // Cloning ensures we don't alter the original array structure directly.
+    Node replacementNode;
     if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+      // Replace EMPTY placeholder with an actual undefined node.
+      replacementNode = NodeUtil.newUndefinedNode(elem);
     } else {
-      left.removeChild(elem);
+      // Clone the element to replace the GETELEM call.
+      replacementNode = elem.cloneNode();
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM with the cloned value node.
+    n.getParent().replaceChild(n, replacementNode);
     reportCodeChange();
-    return elem;
+    return replacementNode;
   }
\ No newline at end of file
