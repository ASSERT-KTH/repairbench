diff --git a/tmp/28ef1fd8-8c7a-4811-81d1-c1af1c00ac94_buggy.java b/tmp/8f3d9b6e-7e2d-480b-9298-9e561b83125f_fixed.java
index cfdcd9c..cd0c38e 100644
--- a/tmp/28ef1fd8-8c7a-4811-81d1-c1af1c00ac94_buggy.java
+++ b/tmp/8f3d9b6e-7e2d-480b-9298-9e561b83125f_fixed.java
@@ -1,51 +1,66 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
+    // Make sure the index is a number.
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Make sure the index is a whole number.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
+    // Make sure the index is non-negative.
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the element node.
     Node current = left.getFirstChild();
-    Node elem = null;
+    // Iterate intIndex times to reach the desired node.
     for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
         current = current.getNext();
     }
 
-    if (elem == null) {
+    // Make sure the index is within the bounds of the array.
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // The node 'current' is the element node we want.
+    Node elem = current;
+
+    // TODO(johnlenz): Handle side effects in the elements before the
+    // index. This is not currently done but seems necessary.
+    // e.g. "[foo(), 1][1]" needs to preserve the call to foo(),
+    // but the current code folds it to "1".
+
+    // Clone the node BEFORE we remove it from the AST. Otherwise, the node's
+    // siblings and parent pointers will be null.
     if (elem.isEmpty()) {
+      // If the element is empty, replace it with "undefined".
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
+      // Detach the element from the original array literal.
       left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM call with the element node.
+    parent.replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
