diff --git a/tmp/ce661e92-b9c2-4116-adb5-fd97ff49b0b0_buggy.java b/tmp/69e5189d-13bb-4785-9ef5-b3556f95cd45_fixed.java
index cfdcd9c..3c1c236 100644
--- a/tmp/ce661e92-b9c2-4116-adb5-fd97ff49b0b0_buggy.java
+++ b/tmp/69e5189d-13bb-4785-9ef5-b3556f95cd45_fixed.java
@@ -1,51 +1,59 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
+    // Check if the index is a number
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Check if the index is an integer index
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
+    // Check if the index is negative. Slices like [-1] are not foldable.
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the element at intIndex
     Node current = left.getFirstChild();
-    Node elem = null;
+    // Iterate intIndex times to reach the desired node.
     for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
         current = current.getNext();
     }
 
-    if (elem == null) {
+    // Check if the index is out of bounds
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    Node elem = current; // Node containing the element value
+
+    // Handle holes (EMPTY nodes), replace them with undefined
     if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+      elem = NodeUtil.newUndefinedNode(elem); // Create a new undefined node
     } else {
+      // Otherwise, detach the element from the original array literal.
+      // This is important to prevent the node from having two parents.
       left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
+    // Replace the entire GETELEM expression with the element's value node.
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
