diff --git a/tmp/1fc628fa-ac8a-4249-a40e-cc8f02731182_buggy.java b/tmp/81b1b5fa-84ca-457c-ba02-527a85595503_fixed.java
index cfdcd9c..16bbd7d 100644
--- a/tmp/1fc628fa-ac8a-4249-a40e-cc8f02731182_buggy.java
+++ b/tmp/81b1b5fa-84ca-457c-ba02-527a85595503_fixed.java
@@ -1,51 +1,62 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
-    if (intIndex != index) {
+    // Check if the index is valid (integer, not NaN, not infinite)
+    // Ensure that the index is not negative
+    if (intIndex != index || Double.isNaN(index) || Double.isInfinite(index)) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the element node at the specified index
     Node current = left.getFirstChild();
-    Node elem = null;
     for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
       current = current.getNext();
     }
 
-    if (elem == null) {
+    // Check if the index is out of bounds (too large)
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // We found the element node (`current`)
+    Node elem = current;
+    Node replacementNode;
+
     if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+      // An empty slot in an array literal (e.g., [,,1][0]) evaluates to undefined.
+      // Create a new undefined node. We don't need to remove the original EMPTY node
+      // because the entire GETELEM (including the array literal) will be replaced.
+      replacementNode = NodeUtil.newUndefinedNode(elem);
     } else {
+      // For non-empty elements, we need to detach the element from the
+      // original array literal before using it as the replacement.
       left.removeChild(elem);
+      replacementNode = elem;
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM node with the element node (or undefined).
+    parent.replaceChild(n, replacementNode);
     reportCodeChange();
-    return elem;
+    return replacementNode;
   }
\ No newline at end of file
