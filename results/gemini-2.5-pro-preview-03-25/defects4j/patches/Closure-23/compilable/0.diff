diff --git a/tmp/8ba9f3c0-04ed-4c7d-a841-8dd06868196b_buggy.java b/tmp/9a75ecda-50ff-409b-8c00-41be67a674ae_fixed.java
index cfdcd9c..808f5ba 100644
--- a/tmp/8ba9f3c0-04ed-4c7d-a841-8dd06868196b_buggy.java
+++ b/tmp/9a75ecda-50ff-409b-8c00-41be67a674ae_fixed.java
@@ -1,51 +1,66 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
+    // Ensure the index is a number.
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Check for non-integer indices, NaN, or Infinity.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
+    // Check for negative indices.
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the element at the specified index.
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+    // Iterate intIndex times to advance `current` to the correct node.
+    for (int i = 0; i < intIndex && current != null; i++) {
       current = current.getNext();
     }
 
-    if (elem == null) {
+    // Check if the index is out of bounds.
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // We found the element node 'current'.
+    Node elem = current;
+    Node replacementNode;
+
+    // Handle empty elements, e.g., in [, 1][0]
     if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+      // Create a new undefined node, preserving source info from the element.
+      replacementNode = NodeUtil.newUndefinedNode(elem);
     } else {
+      // Detach the element from the original array literal.
+      // This is important for preserving the node's structure and source info
+      // when it replaces the GETELEM node.
       left.removeChild(elem);
+      replacementNode = elem;
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM node (n) with the replacement node.
+    parent.replaceChild(n, replacementNode);
     reportCodeChange();
-    return elem;
+
+    // Return the node that replaced 'n'.
+    return replacementNode;
   }
\ No newline at end of file
