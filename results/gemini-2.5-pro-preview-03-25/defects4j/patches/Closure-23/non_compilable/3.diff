diff --git a/tmp/17bd952f-6174-4e0c-b3fc-c44eb173363b_buggy.java b/tmp/2d3d997c-2737-412b-b028-4e84a4b5d08f_fixed.java
index cfdcd9c..6872d71 100644
--- a/tmp/17bd952f-6174-4e0c-b3fc-c44eb173363b_buggy.java
+++ b/tmp/2d3d997c-2737-412b-b028-4e84a4b5d08f_fixed.java
@@ -1,51 +1,76 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+
+    // Check index validity: must be a non-negative integer.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
-
+    // Check index bounds: must be non-negative.
+    // Bounds check against array length happens below.
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+
     Node current = left.getFirstChild();
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+
+    // Iterate through the array elements up to the target index.
+    // Check elements *before* the target index for side effects.
+    for (int i = 0; current != null; i++) {
+       if (i < intIndex) {
+         // Check side effects of element before the target index.
+         if (NodeUtil.mayHaveSideEffects(current, compiler)) {
+            return n; // Bail out: Preceding element has side effects.
+         }
+       } else if (i == intIndex) {
+         // Found the element at the target index.
          elem = current;
-
+         break; // Element found, exit loop.
+       }
+       // Move to the next sibling element.
        current = current.getNext();
     }
 
+    // After the loop, if elem is null, the index was out of bounds.
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // We found the element 'elem' at the target index.
+    // Detach it from the array and prepare the replacement node.
+    Node replacementNode;
     if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+      // Element is an array hole (EMPTY node), replace with 'undefined'.
+      replacementNode = NodeUtil.newUndefinedNode(elem);
+      // Detach the original EMPTY node.
+      elem.detach();
     } else {
-      left.removeChild(elem);
+      // Element is a regular node, detach it to be used as the replacement.
+      replacementNode = elem.detach();
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the GETELEM node 'n' with the detached element or 'undefined'.
+    n.replaceWith(replacementNode);
     reportCodeChange();
-    return elem;
+
+    // Return the replacement node as the new node in the AST.
+    return replacementNode;
   }
\ No newline at end of file
