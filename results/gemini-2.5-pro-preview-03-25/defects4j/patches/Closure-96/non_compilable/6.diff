diff --git a/tmp/ba9d7e75-5a38-4f08-a3d3-9d7345b7b5d5_buggy.java b/tmp/d1d2a069-ab8a-47f9-b390-27990f7b9484_fixed.java
index e0ecec8..f7d6199 100644
--- a/tmp/ba9d7e75-5a38-4f08-a3d3-9d7345b7b5d5_buggy.java
+++ b/tmp/d1d2a069-ab8a-47f9-b390-27990f7b9484_fixed.java
@@ -1,35 +1,60 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+    Node parameterNode = null; // The formal parameter node to check against
+    Node argumentNode = null;
+
+    while (arguments.hasNext()) {
+      argumentNode = arguments.next();
       ordinal++;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+      // Determine the parameter node to use for checking this argument
+      if (parameters.hasNext()) {
+        parameterNode = parameters.next();
+      } else if (functionType.isVarArgs()) {
+        // If we've exhausted explicit parameters, and the function is var_args,
+        // keep using the *last* parameter node obtained (which should be the var_args node).
+        // If parameterNode is null here, it implies a function starting with varargs
+        // that was called with no arguments; the loop wouldn't have entered.
+        // If called with arguments, parameterNode would have been set in the first iteration
+        // where parameters.hasNext() was true.
+        if (parameterNode == null) {
+           // This state implies a mismatch between isVarArgs and getParameters,
+           // or a varargs function with no arguments called (loop wouldn't run).
+           // If reached unexpectedly, break to avoid NPE. Argument count check might catch issues.
+           break;
+        }
+        // No 'else': Reuse the existing parameterNode for subsequent var_args arguments.
+      } else {
+        // We have more arguments than parameters, and it's not a var_args function.
+        // Stop type-checking arguments. The argument count check below will flag this.
+        break;
+      }
+
+      // Check the argument type against the parameter type.
+      // parameterNode should be non-null if we haven't broken out of the loop.
+      if (parameterNode != null) {
+          validator.expectArgumentMatchesParameter(t, argumentNode,
+              getJSType(argumentNode), getJSType(parameterNode), call, ordinal);
+      }
     }
 
+    // Argument count check
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
