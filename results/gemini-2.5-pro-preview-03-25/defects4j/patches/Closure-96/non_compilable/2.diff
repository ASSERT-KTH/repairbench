diff --git a/tmp/db9e7d57-a4ec-423c-a07d-06a539c48e84_buggy.java b/tmp/d2bc486b-021f-471c-a74e-3f9c64f16812_fixed.java
index e0ecec8..3a6e5ab 100644
--- a/tmp/db9e7d57-a4ec-423c-a07d-06a539c48e84_buggy.java
+++ b/tmp/d2bc486b-021f-471c-a74e-3f9c64f16812_fixed.java
@@ -1,35 +1,63 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+    Node parameterNode = null;
+    JSType parameterType = null;
+    boolean isVarArgs = functionType.isVarArgs();
+    // Indicates if the last fetched parameter node was the varargs parameter.
+    boolean lastParameterIsVarArgs = false;
+
+    while (arguments.hasNext()) {
+      Node argumentNode = arguments.next();
       ordinal++;
+      JSType argumentType = getJSType(argumentNode);
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+      // Determine the parameter type for this argument.
+      // If the last parameter was varargs, keep using its type.
+      if (!(parameterNode != null && lastParameterIsVarArgs)) {
+        // Otherwise, advance the parameter iterator if possible.
+        if (parameters.hasNext()) {
+          parameterNode = parameters.next();
+          parameterType = getJSType(parameterNode);
+          // Check if this is the last parameter node AND the function is var args
+          lastParameterIsVarArgs = isVarArgs && !parameters.hasNext();
+        } else {
+          // Not currently processing varargs, and no more formal parameters.
+          // This is an excess argument. The WRONG_ARGUMENT_COUNT check below
+          // handles this case. We should not perform type checking here.
+          parameterType = null; // Mark as no parameter available
+        }
+      }
+      // else { we are processing varargs parameter, parameterType is already set }
+
+
+      // Perform the check if we have a parameter type.
+      // We should skip the check if the argument is extern and the parameter
+      // isn't declared extern. Closure doesn't check extern arguments eagerly.
+      if (parameterType != null) {
+        validator.expectArgumentMatchesParameter(t, argumentNode,
+            argumentType, parameterType, call, ordinal);
+      }
     }
 
+    // Check argument counts.
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
+      // Note: This check correctly handles cases where we stopped processing
+      // arguments early because parameter list was exhausted for non-varargs fn.
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
