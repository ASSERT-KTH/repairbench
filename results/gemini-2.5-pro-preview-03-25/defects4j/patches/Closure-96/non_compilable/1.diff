diff --git a/tmp/df753f6c-9910-4328-b075-851293ed30bd_buggy.java b/tmp/d781ef05-315a-429e-a514-78840301e549_fixed.java
index e0ecec8..f219cc9 100644
--- a/tmp/df753f6c-9910-4328-b075-851293ed30bd_buggy.java
+++ b/tmp/d781ef05-315a-429e-a514-78840301e549_fixed.java
@@ -1,35 +1,64 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+    // Check arguments against declared parameters
+    while (arguments.hasNext() && parameters.hasNext()) {
+        parameter = parameters.next(); // Store the current/last parameter node
         argument = arguments.next();
         ordinal++;
 
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // Check remaining arguments if the last declared parameter was varargs
+    if (arguments.hasNext()) {
+      // Check if 'parameter' represents the varargs parameter.
+      // We need 'parameter' to be non-null (function had parameters)
+      // and its type must be varargs.
+      JSType lastParameterType = (parameter == null) ? null : getJSType(parameter);
+      if (parameter != null && lastParameterType != null && lastParameterType.isVarArgs()) {
+        // Continue checking the remaining arguments against the varargs parameter type.
+        // The validator method is assumed to correctly interpret this,
+        // checking against the element type of the varargs parameter.
+        while (arguments.hasNext()) {
+          argument = arguments.next();
+          ordinal++;
+          validator.expectArgumentMatchesParameter(t, argument,
+              getJSType(argument), lastParameterType, call, ordinal);
+        }
+      }
+      // If there are extra arguments but the function is not varargs (or has no parameters),
+      // the argument count check below will handle it.
+    }
+
+    // Argument count check
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
+      // However, if the function is varargs, we don't want to report an error
+      // just because there are more arguments than declared parameters.
+      // The check for maxArgs handles this, as maxArgs will be Integer.MAX_VALUE.
+      // The minArgs check is still relevant.
+      // Let's refine the condition slightly for clarity, although the original logic was likely sufficient.
+      // The main point is that the loop above now handles type checking for varargs arguments.
+      // The WRONG_ARGUMENT_COUNT check should only fail if minArgs > numArgs or
+      // if !isVarArgs and maxArgs < numArgs. maxArgs is already set correctly for varargs.
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
