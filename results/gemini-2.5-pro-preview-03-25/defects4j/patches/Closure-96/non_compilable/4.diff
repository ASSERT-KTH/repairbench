diff --git a/tmp/65c90cc9-5a3a-43dd-9cb0-300ad8d74d5b_buggy.java b/tmp/8f7232b3-b761-433b-bd1c-6ef70c981d12_fixed.java
index e0ecec8..8000c54 100644
--- a/tmp/65c90cc9-5a3a-43dd-9cb0-300ad8d74d5b_buggy.java
+++ b/tmp/8f7232b3-b761-433b-bd1c-6ef70c981d12_fixed.java
@@ -1,35 +1,87 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+    Node parameterNode = null;
+    Node argumentNode = null;
+
+    // Determine varargs type beforehand if applicable
+    JSType varArgsType = null;
+    boolean isVarArgs = functionType.isVarArgs();
+    if (isVarArgs) {
+        // In Closure, the JSType for the var_args parameter node (e.g., node for "...number")
+        // represents the type of individual arguments passed as var_args.
+        Iterator<Node> paramNodesForVarArgs = functionType.getParameters().iterator();
+        Node lastParamNode = null;
+        while (paramNodesForVarArgs.hasNext()) {
+            lastParamNode = paramNodesForVarArgs.next();
+        }
+        // It's possible varargs function has no formal parameters listed,
+        // but this case should be handled by FunctionType construction or earlier checks.
+        // We proceed assuming lastParamNode is valid if isVarArgs is true and params exist.
+        if (lastParamNode != null) {
+             varArgsType = getJSType(lastParamNode);
+             // Defensively check if the type is null, though it shouldn't be for a valid varargs sig.
+             if (varArgsType == null) {
+                 isVarArgs = false; // Treat as non-varargs if type is missing
+             }
+        } else {
+            // If isVarArgs is true but there are no parameter nodes, something is wrong.
+            // Fallback to treating as non-varargs for safety in this method.
+            isVarArgs = false;
+        }
+    }
+
+    // Iterate through arguments, checking against parameters or varArgsType
+    while (arguments.hasNext()) {
+      argumentNode = arguments.next();
       ordinal++;
+      JSType argumentType = getJSType(argumentNode);
+      JSType parameterType = null; // The type to check against
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+      if (parameters.hasNext()) {
+        parameterNode = parameters.next();
+        parameterType = getJSType(parameterNode);
+        // If this is the last parameter node and the function is varargs,
+        // store its type as the varArgsType for subsequent arguments.
+        // Note: We already pre-calculated varArgsType, this check is redundant here
+        // unless the pre-calculation logic was flawed. Sticking to pre-calculation.
+      } else if (isVarArgs) {
+          // No more formal parameters, use varArgs type if function is varArgs
+          // and we successfully determined the varArgsType earlier.
+          parameterType = varArgsType;
       }
+      // If parameterType is still null here, it means we have an argument
+      // but no corresponding parameter (and the function is not varArgs or varArgsType failed).
+      // This indicates too many arguments. The argument count check below will catch this formally.
+      // However, we should still validate the argument if a type was determined.
 
+      // Perform the type check if we have a parameter type to check against
+      if (parameterType != null) {
+           validator.expectArgumentMatchesParameter(t, argumentNode,
+              argumentType, parameterType, call, ordinal);
+      }
+      // If parameterType is null, we don't perform a check here; the count check handles it.
+    }
+
+    // Check argument count after iterating through all provided arguments
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
+      // For varargs functions, maxArgs is Integer.MAX_VALUE, so `maxArgs < numArgs` will be false.
+      // The check `minArgs > numArgs` correctly handles cases with too few arguments.
+      // For non-varargs functions, both checks apply correctly.
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
