diff --git a/tmp/0e6230e2-c2e3-4a01-b7dd-9cc1332e9720_buggy.java b/tmp/f3c1d934-432b-484f-be65-5efa91d1d07e_fixed.java
index e0ecec8..a523403 100644
--- a/tmp/0e6230e2-c2e3-4a01-b7dd-9cc1332e9720_buggy.java
+++ b/tmp/f3c1d934-432b-484f-be65-5efa91d1d07e_fixed.java
@@ -1,35 +1,72 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+    Node parameter = null; // The current parameter node from the FunctionType
+    Node argument = null; // The current argument node from the call
+    // Store the type of the declared var_args parameter (if present).
+    // The JSType associated with the var_args parameter node is the
+    // *element* type (e.g., number for ...number).
+    JSType varArgsType = null;
+
+    // Iterate through arguments passed in the call.
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
+      parameter = null; // Reset parameter node for the current argument.
 
+      // Get the next declared parameter, if it exists.
+      if (parameters.hasNext()) {
+          parameter = parameters.next();
+          // Check if this parameter is the var_args parameter.
+          // It's the var_args parameter if the function is var_args
+          // and this is the last node in the parameters iterator.
+          if (functionType.isVarArgs() && !parameters.hasNext()) {
+              varArgsType = getJSType(parameter);
+          }
+      }
+
+      JSType parameterJSType = null;
+      if (parameter != null) {
+          // Use the type of the current declared parameter.
+          parameterJSType = getJSType(parameter);
+      } else if (varArgsType != null) {
+          // If we have run out of declared parameters but previously
+          // found a var_args parameter, use its type for remaining arguments.
+          parameterJSType = varArgsType;
+      }
+      // else: Too many arguments for a non-var_args function.
+      // This will be caught by the WRONG_ARGUMENT_COUNT check later.
+      // We don't attempt to type-check extra arguments in this case.
+
+      if (parameterJSType != null) {
+           // Check the current argument's type against the determined parameter type.
            validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+               getJSType(argument), parameterJSType, call, ordinal);
+      }
     }
 
+    // Check for argument count mismatch (existing logic).
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
+    // This check correctly handles:
+    // 1. Too few arguments (minArgs > numArgs).
+    // 2. Too many arguments for non-var_args functions (maxArgs < numArgs).
+    // For var_args functions, maxArgs is Integer.MAX_VALUE, so maxArgs < numArgs
+    // is never true, and having more arguments than declared parameters is allowed
+    // as long as they match the var_args type (checked above).
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
