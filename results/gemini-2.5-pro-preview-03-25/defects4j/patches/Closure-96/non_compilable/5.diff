diff --git a/tmp/3cc503a6-35ef-4e35-ac72-b5fe08dbeb37_buggy.java b/tmp/16ea68f1-823a-4252-b58d-7b62b606253f_fixed.java
index e0ecec8..24c9f5e 100644
--- a/tmp/3cc503a6-35ef-4e35-ac72-b5fe08dbeb37_buggy.java
+++ b/tmp/16ea68f1-823a-4252-b58d-7b62b606253f_fixed.java
@@ -1,35 +1,75 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
+    // Use getParameters() on the FunctionType to get the list of parameter Nodes.
+    // Note that this does not include the this type.
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+    Node parameterNode = null; // The FunctionType parameter node corresponding to the argument
+    Node argumentNode = null;
+    boolean isVarArgs = functionType.isVarArgs();
+    // Varargs functions must have at least one parameter node representing the vararg type.
+    // Let's assume FunctionType guarantees this.
+
+    while (arguments.hasNext()) {
+      argumentNode = arguments.next();
       ordinal++;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+      // Determine the parameter node against which we should check the argument.
+      if (parameters.hasNext()) {
+        // Get the next formal parameter node.
+        parameterNode = parameters.next();
+      } else if (isVarArgs) {
+        // If the function is var_args and we have exhausted the formal parameters,
+        // the subsequent arguments must match the type of the last formal parameter (the var_args one).
+        // parameterNode will retain the node for the var_args parameter from the last iteration.
+        // If parameterNode is null here (e.g., varargs function with no declared parameters like
+        // function f(...x)), this indicates an issue or edge case in FunctionType representation.
+        // Assuming valid varargs FunctionType always yields at least one parameter node for varargs.
+        if (parameterNode == null) {
+           // This case should not happen for valid FunctionTypes representing varargs.
+           // If it does, it implies a function declared varargs with no parameters,
+           // which might be an error in FunctionType construction or definition.
+           // We might need to retrieve the varargs parameter node explicitly if this occurs.
+           // For now, we rely on parameterNode being set in a previous iteration
+           // or during the first iteration if the varargs parameter is the only one.
+           // If it remains null, the type check below will be skipped.
+        }
+      } else {
+        // If it's not varargs and we're out of parameter nodes, these extra arguments
+        // will be flagged by the WRONG_ARGUMENT_COUNT check below.
+        // Don't perform a type check against any parameter.
+        parameterNode = null; // Explicitly set to null for clarity.
+      }
+
+      // Check the argument's type against the parameter's type, if a parameter exists.
+      // For varargs, parameterNode holds the varargs parameter after the regular parameters are exhausted.
+      if (parameterNode != null) {
+        validator.expectArgumentMatchesParameter(t, argumentNode,
+            getJSType(argumentNode), getJSType(parameterNode), call, ordinal);
+      }
+      // NOTE: If parameterNode is null (because it's not varargs and we ran out of parameters),
+      // we don't call expectArgumentMatchesParameter, which is correct.
     }
 
+    // Check argument count.
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
+    int maxArgs = functionType.getMaxArguments(); // MAX_VALUE for varargs
     if (minArgs > numArgs || maxArgs < numArgs) {
+      // The check maxArgs < numArgs correctly handles varargs, because maxArgs will be MAX_VALUE.
+      // It flags calls with too few arguments (minArgs > numArgs)
+      // or calls with too many arguments for non-varargs functions (maxArgs < numArgs).
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
+              // Message formatting includes "and no more than max" only if maxArgs is not MAX_VALUE
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
