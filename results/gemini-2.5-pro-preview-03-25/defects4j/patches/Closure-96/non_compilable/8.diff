diff --git a/tmp/b95ccd96-12e7-4f11-b6cd-ed160d842be2_buggy.java b/tmp/429c1b41-5f58-4007-ad53-209cb6eef82b_fixed.java
index e0ecec8..d864dbd 100644
--- a/tmp/b95ccd96-12e7-4f11-b6cd-ed160d842be2_buggy.java
+++ b/tmp/429c1b41-5f58-4007-ad53-209cb6eef82b_fixed.java
@@ -1,35 +1,68 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    Node varargsParameterNode = null; // Stores the varargs definition node if encountered
+
+    // Check fixed parameters first. Iterate through defined parameters.
+    while (parameters.hasNext()) {
       parameter = parameters.next();
+      JSDocInfo paramInfo = parameter.getJSDocInfo();
+      boolean isVarargs = paramInfo != null && paramInfo.isVarArgs();
+
+      // If this parameter is varargs, store it and break the parameter loop.
+      // All remaining arguments will be checked against the varargs type.
+      if (isVarargs) {
+          varargsParameterNode = parameter;
+          break; // Found varargs, exit parameter loop
+      }
+
+      // It's a regular parameter. Check if an argument is supplied.
+      if (arguments.hasNext()) {
         argument = arguments.next();
         ordinal++;
-
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
+      } else {
+        // Not enough arguments supplied for non-varargs parameters.
+        // This is checked by the argument count check later.
+        // We can break the parameter loop as no more arguments can be checked against parameters.
+        break;
       }
+    }
+
+    // Check remaining arguments against the varargs type if a varargs parameter was found.
+    if (varargsParameterNode != null) {
+      JSType varargsType = getJSType(varargsParameterNode);
+      while (arguments.hasNext()) {
+        argument = arguments.next();
+        ordinal++; // Increment for each argument being checked
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), varargsType, call, ordinal);
+      }
+    }
+    // If varargsParameterNode is null after the first loop, but arguments.hasNext() is true here,
+    // it signifies that too many arguments were passed to a non-varargs function.
+    // The argument count check below will report this error.
 
+    // Argument count check
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
+              // Only add the max count if it's not effectively infinite (for varargs)
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
