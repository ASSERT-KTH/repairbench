diff --git a/tmp/9df30dc5-50b9-41ef-8691-e6e67f167f15_buggy.java b/tmp/7e7e4eea-be79-4125-aec3-8af8c655592f_fixed.java
index e0ecec8..04c6f14 100644
--- a/tmp/9df30dc5-50b9-41ef-8691-e6e67f167f15_buggy.java
+++ b/tmp/7e7e4eea-be79-4125-aec3-8af8c655592f_fixed.java
@@ -1,35 +1,69 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
+    Node parameter = null; // Current parameter node from signature
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+    boolean isVarArgs = false;
+    JSType varArgsType = null; // Type of the varargs parameter element
+
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      JSType expectedParameterType = null;
+
+      // If we are processing varargs, use the varargs type.
+      if (isVarArgs) {
+          expectedParameterType = varArgsType;
+      } else if (parameters.hasNext()) {
+          // Get the next formal parameter.
+          parameter = parameters.next();
+          // Determine the type of the parameter.
+          // For varargs, this will be the type of the individual elements.
+          expectedParameterType = getJSType(parameter);
+
+          // Check if this is a varargs parameter.
+          if (parameter.isVarArgs()) {
+              isVarArgs = true;
+              // Store the varargs element type for subsequent arguments.
+              varArgsType = expectedParameterType;
+          }
+          // Optional args are handled by the type system/getJSType.
+      } else {
+          // No more formal parameters. If we are not in varargs mode,
+          // this means we have too many arguments. The argument count check
+          // below will handle this. We don't have an expected type here.
+          // If we *are* in varargs mode, this branch shouldn't be reached
+          // because the isVarArgs check above would trigger.
+      }
+
+      // Perform the type check if we determined an expected type
+      // for the current argument.
+      if (expectedParameterType != null) {
            validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+               getJSType(argument), expectedParameterType, call, ordinal);
+      }
+      // If expectedParameterType is null (because we ran out of formal params
+      // and are not in varargs mode), we don't perform a type check for this
+      // argument, as the argument count check below will report the error.
     }
 
+    // Check argument count after iterating through arguments.
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
