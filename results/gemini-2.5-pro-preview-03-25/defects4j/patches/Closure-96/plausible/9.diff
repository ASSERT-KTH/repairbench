diff --git a/tmp/b4937700-8e6c-4122-9b80-aa43c1510447_buggy.java b/tmp/a9bd3322-28ee-4495-b947-763e448ebf2d_fixed.java
index e0ecec8..e64bb30 100644
--- a/tmp/b4937700-8e6c-4122-9b80-aa43c1510447_buggy.java
+++ b/tmp/a9bd3322-28ee-4495-b947-763e448ebf2d_fixed.java
@@ -1,35 +1,64 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
+    Node parameter = null; // Current parameter node corresponding to the argument
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+    Node varArgsParameter = null; // Stores the varargs parameter node if found
+
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      // Determine the parameter node to use for the current argument.
+      parameter = null; // Reset parameter for this argument
+      if (varArgsParameter != null) {
+        // If we've already found the varargs parameter, use it for subsequent arguments.
+        parameter = varArgsParameter;
+      } else if (parameters.hasNext()) {
+        // Otherwise, if there are more formal parameters, get the next one.
+        parameter = parameters.next();
+        // Check if this parameter is the varargs parameter.
+        // Node.isVarArgs() checks if the parameter is declared with '...'
+        if (parameter.isVarArgs()) {
+            varArgsParameter = parameter;
+        }
+      }
+      // If parameter is still null here, it means we have more arguments
+      // than formal parameters, and none of the formal parameters was varargs.
+      // The argument count check later will handle this specific error (WRONG_ARGUMENT_COUNT).
+
+      // Perform the type check if we have a parameter node for this argument.
+      if (parameter != null) {
+          // We need the JSType associated with the parameter node.
+          // For varargs parameter (...T), the type check should be against T.
+          // getJSType(parameter) should return the appropriate type for validation.
+          JSType parameterType = getJSType(parameter);
           validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+              getJSType(argument), parameterType, call, ordinal);
+      }
     }
 
+    // Check argument count after iterating through all provided arguments.
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
+      // This check correctly reports errors for too few arguments (< minArgs),
+      // or too many arguments (> maxArgs) when the function is not varargs.
+      // If the function is varargs, maxArgs is usually Integer.MAX_VALUE,
+      // so maxArgs < numArgs should not trigger.
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
+              // Only add the upper bound string if it's not effectively infinite.
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
