diff --git a/tmp/02b12a02-ef1e-4581-906a-91fdfe01ae29_buggy.java b/tmp/a62eff08-6376-4573-ba41-cc2304b7ef55_fixed.java
index e0ecec8..03b3c66 100644
--- a/tmp/02b12a02-ef1e-4581-906a-91fdfe01ae29_buggy.java
+++ b/tmp/a62eff08-6376-4573-ba41-cc2304b7ef55_fixed.java
@@ -1,35 +1,58 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+    boolean isVarargs = functionType.getMaxArguments() == Integer.MAX_VALUE;
+
+    // Iterate through arguments provided in the call
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      // Get the corresponding parameter node.
+      // If parameters have run out, for a varargs function,
+      // reuse the last parameter (which represents the vararg type).
+      if (parameters.hasNext()) {
+          parameter = parameters.next();
+      } else if (isVarargs) {
+          // Keep using the last parameter node for varargs.
+          // If parameter is null here, it might mean a varargs function
+          // declared with no explicit parameter type in the signature list,
+          // like function f(...args), or an issue upstream.
+          // The logic correctly attempts to use the varargs parameter if available.
+      } else {
+          // If it's not varargs and we've run out of formal parameters,
+          // any remaining arguments are extra. The argument count check below
+          // will handle this. We set parameter to null to avoid type checking
+          // these extra arguments against the last parameter.
+          parameter = null;
+      }
+
+      // Check the argument type against the parameter type, if a parameter exists.
+      if (parameter != null) {
           validator.expectArgumentMatchesParameter(t, argument,
               getJSType(argument), getJSType(parameter), call, ordinal);
       }
+    }
 
+    // Check argument counts after iterating through all arguments
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
+    int maxArgs = functionType.getMaxArguments(); // Can use isVarargs derived value too
     if (minArgs > numArgs || maxArgs < numArgs) {
+      // If maxArgs is Integer.MAX_VALUE, isVarargs is true, and the message part is empty.
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
+              !isVarargs ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
