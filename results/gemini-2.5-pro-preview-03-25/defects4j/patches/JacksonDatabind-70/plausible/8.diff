diff --git a/tmp/d459c36f-b914-4925-a4f7-682ce7795cb4_buggy.java b/tmp/27bdeb72-ff40-46c1-8065-0dbe473779da_fixed.java
index 0313249..7fa5bed 100644
--- a/tmp/d459c36f-b914-4925-a4f7-682ce7795cb4_buggy.java
+++ b/tmp/27bdeb72-ff40-46c1-8065-0dbe473779da_fixed.java
@@ -1,32 +1,46 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // 'key' is the potentially case-normalized key
         String key = getPropertyName(propToRm);
         boolean found = false;
 
+        // _hashArea contains key/value pairs: [key1, prop1, key2, prop2, ...]
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
+            // prop is value at index i
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                 //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
-                    // need to leave a hole here
+                // 25-Mar-2024, tatu: Fixed the check; was comparing key against `prop.getName()`
+                //   instead of key stored in `_hashArea`
+                Object keyInMap = _hashArea[i-1]; // key is at index i-1
+
+                // We must match the key from hash area (already potentially lower-cased)
+                // with the lower-cased key derived from property-to-remove
+                if (key.equals(keyInMap)) {
+                    // Found it! Remove from ordering array first...
                      _propsInOrder[_findFromOrdered(prop)] = null;
+                     found = true;
+                     // and skip adding to list of properties to keep
                      continue;
                  }
             }
+            // If not the one to remove, add to properties to keep
             props.add(prop);
         }
+
+        // sanity check; should always be found
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // Re-build hash area and ordering, with remaining properties
         init(props);
     }
\ No newline at end of file
