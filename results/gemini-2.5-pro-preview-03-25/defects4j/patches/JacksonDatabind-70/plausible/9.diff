diff --git a/tmp/fdf417f5-f352-40e3-b158-0bf53af9d93a_buggy.java b/tmp/9461be93-717c-4898-9633-8d42975a4ee3_fixed.java
index 0313249..909854c 100644
--- a/tmp/fdf417f5-f352-40e3-b158-0bf53af9d93a_buggy.java
+++ b/tmp/9461be93-717c-4898-9633-8d42975a4ee3_fixed.java
@@ -1,32 +1,47 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // Use the canonical name (potentially lowercased)
         String key = getPropertyName(propToRm);
         boolean found = false;
 
+        // _hashArea alternates key/value, so check value slots (odd indices i=1, 3, ...)
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
+            // current property
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
-            if (prop == null) {
+            if (prop == null) { // sanity check; shouldn't occur? Or maybe placeholder
                 continue;
             }
             if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
-                    // need to leave a hole here
+                // Compare the canonical key we are looking for with the key stored in the hash area
+                // Key is stored at index i-1
+                String currentKey = (String) _hashArea[i - 1];
+                // NOTE: `key` is canonical, `currentKey` should also be.
+                // This is the main fix: compare `key` against the stored key (`_hashArea[i-1]`),
+                // NOT against `prop.getName()`, which might have different casing.
+                if (key.equals(currentKey)) {
+                    // We found the property to remove.
+                    // Remove it from the ordered list (_propsInOrder)
                      _propsInOrder[_findFromOrdered(prop)] = null;
+                     found = true;
+                    // Do not add it to the 'props' list; skip to next iteration
                     continue;
                 }
             }
+            // If it wasn't the property to remove, or if we already found the one to remove,
+            // add the current property to our list of properties to keep.
             props.add(prop);
         }
+
+        // After iterating through all slots, check if we actually found it
         if (!found) {
+            // Use the original property name in the error message for clarity
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // Re-initialize the map with the filtered properties
         init(props);
     }
\ No newline at end of file
