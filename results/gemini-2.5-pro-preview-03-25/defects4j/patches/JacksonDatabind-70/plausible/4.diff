diff --git a/tmp/92f56931-eaba-4f22-b64c-e8d63e97f78d_buggy.java b/tmp/9f928ad9-bed7-4b93-a4e1-944e082496ac_fixed.java
index 0313249..c836706 100644
--- a/tmp/92f56931-eaba-4f22-b64c-e8d63e97f78d_buggy.java
+++ b/tmp/9f928ad9-bed7-4b93-a4e1-944e082496ac_fixed.java
@@ -1,32 +1,45 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // 'key' is the canonical name (potentially lower-case if case-insensitive)
         String key = getPropertyName(propToRm);
         boolean found = false;
 
+        // _hashArea contains [key1, value1, key2, value2, ...]
+        // We iterate starting from index 1 (the first value), stepping by 2
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
+            // 'prop' is the value (SettableBeanProperty) at index i
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
-            if (prop == null) {
+            if (prop == null) { // skip removed entries
                 continue;
             }
             if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
-                    // need to leave a hole here
+                // We need to compare the canonical key of the property to remove ('key')
+                // with the canonical key stored in the hash area. The stored key is
+                // at index i-1. This handles case-insensitivity correctly as the
+                // stored key (_hashArea[i-1]) and 'key' are both canonicalized (e.g., lower-cased).
+                Object storedKey = _hashArea[i-1];
+                if (key.equals(storedKey)) { // FIX: Compare canonical key against stored key
+                    found = true;
+                    // Found the property to remove. Mark it as removed in the ordered list.
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    // Continue to the next iteration without adding this property to 'props'.
                     continue;
                 }
             }
+            // If this property is not the one to remove, add it to the list of properties to keep.
             props.add(prop);
         }
+
+        // After iterating through all entries, if the property was not found, throw an exception.
         if (!found) {
+            // Use the original property name in the error message for clarity.
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // Re-initialize the internal structures with the remaining properties.
         init(props);
     }
\ No newline at end of file
