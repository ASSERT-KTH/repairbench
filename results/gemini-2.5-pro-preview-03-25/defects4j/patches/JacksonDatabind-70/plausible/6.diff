diff --git a/tmp/3246604c-9f32-4007-98cb-d7c3da8abf06_buggy.java b/tmp/0b16a249-dafc-499e-b89b-037427b03cbd_fixed.java
index 0313249..e4c5d14 100644
--- a/tmp/3246604c-9f32-4007-98cb-d7c3da8abf06_buggy.java
+++ b/tmp/0b16a249-dafc-499e-b89b-037427b03cbd_fixed.java
@@ -1,32 +1,49 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
         String key = getPropertyName(propToRm);
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
-            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
-            if (prop == null) {
-                continue;
-            }
-            if (!found) {
             // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
             //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
+            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
+            if (prop == null) {
+                continue;
+            }
+            if (!found) {
+                // A Hairy details: key is calculated from property name which is NOT
+                // lower-case, whereas keys in hash area MAY BE lower-case...
+                // so we need to compare against key in hash area
+                String actualKey = (String) _hashArea[i-1];
+                if (key.equals(actualKey)) {
+                    // We must find the entry; but verify as sanity check
+                    if (prop != propToRm) {
+                         // 15-Jan-2017, tatu: as per [databind#1498], needs to work even if not same exact instance.
+                         //    Note, however, that typically this method is called with `prop` found
+                         //    via lookup, so usually `prop == propToRm` is true.
+                        if (!prop.getName().equals(propToRm.getName())) {
+                             throw new IllegalStateException("Internal error: property '"+propToRm.getName()+"' with key '"+key
+                                     +"' found instead property '"+prop.getName()+"'");
+                         }
+                    }
+
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    found = true;
+                    // DO NOT add to props list, continue iteration to collect others
                     continue;
                 }
             }
             props.add(prop);
         }
+        // should always be found; but assertion check helps ensure logic is correct
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
\ No newline at end of file
