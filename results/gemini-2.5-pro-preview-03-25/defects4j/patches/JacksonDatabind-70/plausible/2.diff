diff --git a/tmp/37bf71c1-7433-4df9-ab07-102c1cacf9ac_buggy.java b/tmp/9487b832-f01b-4af6-abee-bf27636ce8e3_fixed.java
index 0313249..a94d5ae 100644
--- a/tmp/37bf71c1-7433-4df9-ab07-102c1cacf9ac_buggy.java
+++ b/tmp/9487b832-f01b-4af6-abee-bf27636ce8e3_fixed.java
@@ -1,32 +1,40 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
-        String key = getPropertyName(propToRm);
+        String key = getPropertyName(propToRm); // Key derived according to case-sensitivity settings
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
+            // If not removed yet, check if this is the one to remove.
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
+                //   as only former is lower-case in case-insensitive case.
+                //   Need to compare key derived from property-to-remove with key stored in hash area.
+                String currentKey = (String) _hashArea[i-1]; // Key stored in hash area
+                if (key.equals(currentKey)) { // Compare derived key with stored key
+                    // 18-Feb-2017, tatu: As per [databind#1523], need to ensure we leaveCOLLISION/REMOVED markers as is
+                    found = true;
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    // and DON'T add this to properties to preserve
                     continue;
                 }
             }
+            // If not the one to remove, add to surviving properties list
             props.add(prop);
         }
+        // sanity check; should always be found
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // Re-construct hash area, order list
         init(props);
     }
\ No newline at end of file
