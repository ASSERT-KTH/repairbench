diff --git a/tmp/98a96736-32d5-4d8f-b592-b021c506ff54_buggy.java b/tmp/2704810b-3cdf-4874-b84b-a4aa554954d1_fixed.java
index 0313249..379992c 100644
--- a/tmp/98a96736-32d5-4d8f-b592-b021c506ff54_buggy.java
+++ b/tmp/2704810b-3cdf-4874-b84b-a4aa554954d1_fixed.java
@@ -1,32 +1,49 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
+        // Note: entries MUST be added in-order, see SimpleBeanPropertyDefinition.hasExplicitIndex()
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
-        String key = getPropertyName(propToRm);
+        // Property name to use for comparison depends on case-sensitivity:
+        final String key = getPropertyName(propToRm);
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
+            // note: key is at i-1
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                 //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
+                //  (that is, lookup name vs actual property name)
+
+                // 23-Feb-2017, tatu: As per [databind#1525], must check actual stored key,
+                //   not property name, as lookup map uses different key (interned,
+                //   possibly lower-cased)
+                String name = (String) _hashArea[i-1];
+
+                // 14-Mar-2017, tatu: If key is null, should we call `equals()`? Yes, very unlikely
+                //    to be null, and if it is, will get NPE as expected.
+                if (key.equals(name)) {
+                    found = true;
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    // but do NOT add this prop to list of remaining props
                     continue;
                 }
             }
+            // Either wasn't the one to remove, or we already found it, just add back
             props.add(prop);
         }
+
+        // Should have been found -- see NOTE above -- so if not, exception is warranted
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // And then re-construct lookup tables
         init(props);
     }
\ No newline at end of file
