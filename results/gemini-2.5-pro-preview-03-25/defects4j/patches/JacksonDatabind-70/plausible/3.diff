diff --git a/tmp/01cde432-9640-4921-94ed-9558a48b7e05_buggy.java b/tmp/235bf07c-afea-45e5-9cfd-959b5b90e95b_fixed.java
index 0313249..9e7b24b 100644
--- a/tmp/01cde432-9640-4921-94ed-9558a48b7e05_buggy.java
+++ b/tmp/235bf07c-afea-45e5-9cfd-959b5b90e95b_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
+        // 'key' is the lower-case version for case-insensitive, original otherwise
         String key = getPropertyName(propToRm);
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
+            // _hashArea[i-1] is the key (potentially lower-case), _hashArea[i] is the value (prop)
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                //   as only former is lower-case in case-insensitive case.
+                //   Name slot is Object, value is SettableBeanProperty; odd indices contain value
+                // NOTE: key comes from property name BUT map key ('nameSlot') must be used for matching
+                String nameSlot = (String) _hashArea[i-1]; // This is the key stored in the map
+                found = key.equals(nameSlot);
+
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
+                    // and MUST skip adding this prop to list of remaining props
                     continue;
                 }
             }
+            // If not the one removed, add to remaining list
             props.add(prop);
         }
+
+        // sanity check; should always be found
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
+        // Re-initialize with remaining properties
         init(props);
     }
\ No newline at end of file
