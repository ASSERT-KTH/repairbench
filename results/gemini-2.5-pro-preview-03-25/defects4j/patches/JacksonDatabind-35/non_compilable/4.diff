diff --git a/tmp/092799fd-adbb-4107-ba2a-0d1a8176f588_buggy.java b/tmp/8b481d5f-3825-469a-b7ee-36a266b29637_fixed.java
index 7d8d756..36ecb28 100644
--- a/tmp/092799fd-adbb-4107-ba2a-0d1a8176f588_buggy.java
+++ b/tmp/8b481d5f-3825-469a-b7ee-36a266b29637_fixed.java
@@ -1,48 +1,65 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+
+        // Problem may be JsonParser positioning: let's verify that we are seeing
+        // START_OBJECT or FIELD_NAME
+        JsonToken t = p.currentToken();
+        if (t == JsonToken.START_OBJECT) {
+            // If START_OBJECT, next token must be FIELD_NAME
+            t = p.nextToken();
+        } else if (t != JsonToken.FIELD_NAME) {
+            // Report error if not START_OBJECT or FIELD_NAME
+            // Note: Stronger check would be to require START_OBJECT only. But for now
+            // let's be more lenient, works reported problem.
+            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT, // Still conceptually START_OBJECT is wrapper token
+                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName()
+                    +" (but got "+t+")");
         }
+        // If we get this far, token is FIELD_NAME, no problems yet
+        
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        // And then need to advance parser to point to the value:
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        // 10-Jun-2015, tatu: As per [databind#826], should allow merging
+        //   type id even if value is not OBJECT.
+        if (_typeIdVisible && p.currentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
+            // Simple case first: value is OBJECT
+            TokenBuffer tb = new TokenBuffer(p, ctxt); // Pass p, ctxt; needed for context actually
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+            
+            // Ok, then, merge buffer sequence with parser
+            // 13-Sep-2020, tatu: Needed to pass `false` to prevent auto-closing problems
+            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p);
+            // and move past START_OBJECT from buffer
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
+        
         // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+        JsonToken endToken = p.nextToken();
+        if (endToken != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
-                    "expected closing END_OBJECT after type information and deserialized value");
+                    "expected closing END_OBJECT after type information and deserialized value (got "+endToken+")");
         }
         return value;
     }
\ No newline at end of file
