diff --git a/tmp/7379493e-a5c8-45d4-adec-b82f575aa83a_buggy.java b/tmp/209e790f-4156-4396-81d9-0a8c18b1b9b7_fixed.java
index 7d8d756..580ba75 100644
--- a/tmp/7379493e-a5c8-45d4-adec-b82f575aa83a_buggy.java
+++ b/tmp/209e790f-4156-4396-81d9-0a8c18b1b9b7_fixed.java
@@ -1,48 +1,77 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+
+        // As.WRAPPER_OBJECT structure is { typeName : value }
+        // Usually caller should have positioned parser at START_OBJECT.
+        // But potentially, ObjectId handling might have consumed START_OBJECT
+        // and first field ("@id"), leaving parser at the FIELD_NAME which
+        // indicates the type. So let's handle either START_OBJECT or FIELD_NAME.
+        JsonToken t = p.getCurrentToken();
+        if (t == JsonToken.START_OBJECT) {
+            // If START_OBJECT, advance to FIELD_NAME
+            t = p.nextToken();
+        } else if (t != JsonToken.FIELD_NAME) {
+            // If it's not START_OBJECT or FIELD_NAME, structure is wrong
              throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+        // Note: current token MUST be FIELD_NAME state at this point
+        if (t != JsonToken.FIELD_NAME) {
              throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
+
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+        
+        // And then the value itself; should be START_OBJECT
+        if (p.nextToken() != JsonToken.START_OBJECT) {
+             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                     String.format("expected START_OBJECT after type id (%s) forSUB type of %s", typeId, baseTypeName()));
+        }
 
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
+        if (_typeIdVisible) {
+            // Similar to how As.PROPERTY Injectable values work,
+            // let's merge type id as the first property
+            // 11-Jun-2015, tatu: As per [databind#796] need to create non-closing parser
+             TokenBuffer tb = new TokenBuffer(p, ctxt);
              tb.writeStartObject(); // recreate START_OBJECT
              tb.writeFieldName(_typePropertyName);
              tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+
+            // Ok, then we need to merge this field sequence with the value token sequence.
+            // NOTE: need to point buffer parser to the first token too
+            // 20-Nov-2017, tatu: We seem to be missing START_OBJECT validation still...
+             //JsonParser bufferParser = tb.asParser(p); // old code
+             // Need context of 'p' for buffer parser?
+             JsonParser bufferParser = tb.asParser();
+             bufferParser.nextToken(); // skip START_OBJECT from buffer
+
+             p = JsonParserSequence.createFlattened(false, bufferParser, p);
+            // and need to point p to START_OBJECT as well
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
+
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
