diff --git a/tmp/396c4591-1575-4840-9ac8-e837a81ea98c_buggy.java b/tmp/18854ced-e8e9-4a48-ab2c-e451833d99bc_fixed.java
index 7d8d756..c21d5d1 100644
--- a/tmp/396c4591-1575-4840-9ac8-e837a81ea98c_buggy.java
+++ b/tmp/18854ced-e8e9-4a48-ab2c-e451833d99bc_fixed.java
@@ -1,48 +1,76 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+
+        // As.WRAPPER_OBJECT needs sequence of START_OBJECT, FIELD_NAME
+        // (FIELD_NAME as type id)
+        // 16-Aug-2017, tatu: ... except possibly if Object Id has been used
+        // first, which means we may be starting at FIELD_NAME. Let's allow that.
+        JsonToken t = p.currentToken();
+        if (t == JsonToken.START_OBJECT) {
+            // If START_OBJECT, need FIELD_NAME
+            t = p.nextToken();
+        } else if (t != JsonToken.FIELD_NAME) {
+            // Not START_OBJECT or FIELD_NAME? Error
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+        // And then we must get FIELD_NAME
+        if (t != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
+
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        // And then token that follows must be the value, starting usually with START_OBJECT
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        // 01-Aug-2015, tatu: As per [databind#899], this is surprisingly tricky
+        //   procedure... but most robust way is to create a combined parser
+        if (_typeIdVisible && p.currentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+
+            // 02-Jul-2019, tatu: [databind#2378], need to be wary about nextToken() called
+            //   within `deserialize()`
+            // Also: can not possibly advance parser...
+            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p);
+            p.nextToken(); // Need to point to the first token of the merged sequence
         }
         
         Object value = deser.deserialize(p, ctxt);
+
         // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+        // 13-Nov-2015, tatu: Let's verify we are now pointing to END_OBJECT;
+        //   usually after value deserialization we are, but could be one intermediate
+        //   token as well (like FIELD_NAME when we are handling wrapper within wrapper)
+        JsonToken t2 = p.nextToken();
+        if (t2 != JsonToken.END_OBJECT) {
+            /* 26-Oct-2015, tatu: Let's reconsider this part: we must get END_OBJECT,
+             *   for the wrapper object. But what if we have nested wrappers?
+             *   Or Lists? Hard to be certain...
+             */
+            // 02-Jul-2019, tatu: As per [databind#2378], seems this should be checked
+            //    or, if not, maybe comment explains better. Leaving checks for now.
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
-                    "expected closing END_OBJECT after type information and deserialized value");
+                    "expected closing END_OBJECT after type information and deserialized value (for "+baseTypeName()+")");
         }
         return value;
     }
\ No newline at end of file
