diff --git a/tmp/13dade78-62d5-4fd7-9497-0b4b34c587f0_buggy.java b/tmp/9dedc736-dff8-4035-b38d-32aedfd787fc_fixed.java
index 7d8d756..d28c2ab 100644
--- a/tmp/13dade78-62d5-4fd7-9497-0b4b34c587f0_buggy.java
+++ b/tmp/9dedc736-dff8-4035-b38d-32aedfd787fc_fixed.java
@@ -1,48 +1,78 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+
+        // As per [databind#445], possible type ids are JsonToken.START_OBJECT (standard)
+        // and JsonToken.FIELD_NAME (when called from certain places, like TypeDeserializerBase._deserializeWithNativeTypeId)
+        JsonToken t = p.getCurrentToken();
+        if (t == JsonToken.START_OBJECT) {
+            // If START_OBJECT, move to FIELD_NAME
+            t = p.nextToken();
+        } else if (t != JsonToken.FIELD_NAME) {
+            // If not START_OBJECT or FIELD_NAME, it's an error
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+        // We must be pointing to FIELD_NAME now
+        if (t != JsonToken.FIELD_NAME) {
              throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
+
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+        p.nextToken(); // consume FIELD_NAME, move to value
 
-        // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        // Minor complication: we may need to merge type id in? And merge works
+        // for START_OBJECT based values only...
+        // 17-Jan-2018, tatu: As per [databind#1832], need bit more sophisticated handling
+        //    in case of merging. Specific problem is that the existing value might be
+        //    JSON Array or scalar, inside of JSON Object wrapper
+        if (_typeIdVisible && t == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
+            // NOTE: relying on existence of this feature on JsonParser implementation
+            // (Jackson core specifically supports it)
+            // 13-Aug-2018, tatu: [databind#2140] Need ObjectCodec context
+            TokenBuffer tb = new TokenBuffer(p, ctxt);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+
+            // 01-Jul-2016, tatu: Unfortunate complication; we could be using a
+            //   BufferingJsonParser instance... Also: must NOT skip START_OBJECT...
+            // related to [databind#1241], [databind#1256]
+            p.clearCurrentToken();
+            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p);
+
+            // And then advance to the actual value
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
+        
         // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+        // 17-Jan-2018, tatu: As per [databind#1832], need to allow for possibility of merge,
+        //    in which case we don't get closing END_OBJECT. Rather, verify that there's no more
+        //    content within wrapper OBJECT. Leave actual verification up to caller.
+        //    Need to just verify we are now outside of structure:
+        JsonToken T2 = p.nextToken();
+        if (T2 != JsonToken.END_OBJECT) {
+            // BUT, let's consider possibility of trailing merge data? Or should we require exactly END_OBJECT?
+            // For now, require END_OBJECT
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
