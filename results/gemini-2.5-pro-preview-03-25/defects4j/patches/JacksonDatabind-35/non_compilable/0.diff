diff --git a/tmp/a3f6f310-89ce-4492-9b4a-7726514e8215_buggy.java b/tmp/e95db4ef-4bf8-4a3a-8f3a-cb4f7e44c556_fixed.java
index 7d8d756..28c2b2b 100644
--- a/tmp/a3f6f310-89ce-4492-9b4a-7726514e8215_buggy.java
+++ b/tmp/e95db4ef-4bf8-4a3a-8f3a-cb4f7e44c556_fixed.java
@@ -1,48 +1,78 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+
+        // Handle As.WRAPPER_OBJECT. Expected structure: { typeId: value }
+        // Or, potentially, FIELD_NAME(typeId) if START_OBJECT was consumed externally (e.g. by ObjectIdReader)
+        JsonToken t = p.currentToken();
+        String typeId = null;
+
+        // If START_OBJECT, consume it and expect FIELD_NAME
+        if (t == JsonToken.START_OBJECT) {
+            t = p.nextToken();
+        }
+
+        // We must now be pointing to FIELD_NAME
+        if (t != JsonToken.FIELD_NAME) {
+             // If not START_OBJECT or FIELD_NAME, report error pointing to the expected START_OBJECT for wrapper
+             if (t == JsonToken.START_ARRAY) { // More specific error for common mistake
                  throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                         "Cannot deserialize Class "+baseTypeName()+" from JSON Array as it uses 'As.WRAPPER_OBJECT' structure");
+             }
+             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT, // Or FIELD_NAME, but START_OBJECT is the wrapper entry
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-            }
-        final String typeId = p.getText();
+        // Now we know it's FIELD_NAME; use it as type id
+        typeId = p.getCurrentName();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+
+        // Advance past the type id field name to the value
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
-            tb.writeFieldName(_typePropertyName);
-            tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+        // Check if type-id needs to be visible AND value is an object
+        if (_typeIdVisible && p.currentToken() == JsonToken.START_OBJECT) {
+            // Ok, value is OBJECT, need to prepend injected type id:
+            // 1. Create buffer with type id property { "property" : "typeId" }
+            TokenBuffer tb = new TokenBuffer(p, ctxt); // Pass p, ctxt for settings/features
+            tb.writeStartObject();                  // {
+            tb.writeFieldName(_typePropertyName);   //   "typeIdFieldName" :
+            tb.writeString(typeId);                 //   "typeIdValue"
+            // tb implicitly finishes with END_OBJECT when tb.asParser() is called.
+
+            // 2. Create a parser for the buffer:
+            JsonParser bufferedParser = tb.asParser(p); // Pass original parser for context
+            // Need to prime the buffered parser
+            bufferedParser.nextToken(); // Consume START_OBJECT from buffer
+
+            // 3. Create sequence using the original 'flatten' logic if appropriate.
+            //    Pass `true` to enable flattening of START_OBJECT from buffer and START_OBJECT from original 'p'.
+            p = JsonParserSequence.createFlattened(true, bufferedParser, p);
+
+            // 4. Advance the combined parser past the START_OBJECT to the first token (injected field name)
+            p.nextToken(); // Move to the injected FIELD_NAME
         }
 
+        // Deserialize the value using the (potentially sequenced) parser
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+
+        // And then need the closing END_OBJECT of the wrapper object
+        JsonToken endToken = p.nextToken();
+        if (endToken != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
-                    "expected closing END_OBJECT after type information and deserialized value");
+                    "expected closing END_OBJECT after type information and deserialized value (for "+baseTypeName()+")");
         }
         return value;
     }
\ No newline at end of file
