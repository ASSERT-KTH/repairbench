diff --git a/tmp/99526778-8306-41c5-97f1-85943478d9d0_buggy.java b/tmp/e6102d9f-cd69-4cbd-ac1e-0c9cd293cbdb_fixed.java
index 7d8d756..da27fb4 100644
--- a/tmp/99526778-8306-41c5-97f1-85943478d9d0_buggy.java
+++ b/tmp/e6102d9f-cd69-4cbd-ac1e-0c9cd293cbdb_fixed.java
@@ -1,48 +1,71 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+
+        // As.WRAPPER_OBJECT needs a field name (for type id). It can normally
+        // expect START_OBJECT, but for structured types like ObjectId
+        // the START_OBJECT is potentially handled by ObjectIdReader,
+        // so parser may be pointing to the FIELD_NAME.
+        JsonToken t = p.currentToken();
+        final String typeId;
+
+        if (t == JsonToken.START_OBJECT) {
+            // Regular case: consume START_OBJECT, expect FIELD_NAME
+            t = p.nextToken();
+        } else if (t != JsonToken.FIELD_NAME) {
+            // Not START_OBJECT or FIELD_NAME: error
              throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                      "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+        // Either way, we must now be at FIELD_NAME
+        if (t != JsonToken.FIELD_NAME) {
              throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                      "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
-        final String typeId = p.getText();
+
+        // Field name is the type id
+        typeId = p.currentName();
+        p.nextToken(); // Consume FIELD_NAME, move to value
+
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
 
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        if (_typeIdVisible && p.currentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
+            // 16-Dec-2018, tatu: As per [databind#2195], need to create TokenBuffer using
+            //   parent parser, NOT null, false -> otherwise codec missing
+            TokenBuffer tb = new TokenBuffer(p, ctxt);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+            
+            // Ok: let's start processing virtual tokens from buffer first
+            p.clearCurrentToken(); // important! indicates we are pointing to virtual token stream
+            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p); // Prepend buffer, don't flatten arrays
+
+            // And then get the first token (START_OBJECT) from buffer
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
+
         // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
-                    "expected closing END_OBJECT after type information and deserialized value");
+        JsonToken end = p.nextToken();
+        if (end != JsonToken.END_OBJECT) {
+            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT, // Report END_OBJECT as expected
+                    "expected closing END_OBJECT after type information and deserialized value (got "+end+")");
         }
         return value;
     }
\ No newline at end of file
