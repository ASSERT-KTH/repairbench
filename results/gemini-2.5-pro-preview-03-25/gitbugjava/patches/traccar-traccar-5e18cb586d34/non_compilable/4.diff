diff --git a/tmp/69dd445b-ba21-4a01-9f6c-38cc36792bd6_buggy.java b/tmp/cdf44419-04b2-4c07-9880-863e21fe9113_fixed.java
index e883360..7b6d061 100644
--- a/tmp/69dd445b-ba21-4a01-9f6c-38cc36792bd6_buggy.java
+++ b/tmp/cdf44419-04b2-4c07-9880-863e21fe9113_fixed.java
@@ -1,196 +1,265 @@
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
+        // Remove checksum if present
+        if (sentence.endsWith("$")) {
+            sentence = sentence.substring(0, sentence.length() - 1);
+            int checksumIndex = sentence.lastIndexOf(',');
+            if (checksumIndex != -1) {
+                sentence = sentence.substring(0, checksumIndex);
+            }
+        }
         String[] values = sentence.split(",");
 
         index += 1; // header
         index += 1; // protocol version
 
+        if (index >= values.length) {
+            throw new ParseException("Missing device ID", index);
+        }
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
+        if (deviceSession == null) {
+            return null; // Device unknown
+        }
         position.setDeviceId(deviceSession.getDeviceId());
 
         index += 1; // device name
         index += 1; // report type
         index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+
+        long reportMask = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                reportMask = Long.parseLong(values[index], 16);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Invalid reportMask: " + values[index], index);
+            }
+        } else if (index >= values.length) {
+             throw new ParseException("Missing reportMask", index);
+        } // else: reportMask is empty string, parsed as 0
+        index++;
+
         long reportMaskExt = 0;
 
-        if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+        // Helper lambda to safely parse integer and ignore errors
+        java.util.function.Consumer<Integer> parseIntAndSet = (bitIndex) -> {
+            if (index < values.length && !values[index].isEmpty()) {
+                try { Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* Ignore */ }
             }
-        if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+            index++;
+        };
+        // Helper lambda to safely parse double and ignore errors
+        java.util.function.Consumer<Integer> parseDoubleAndSet = (bitIndex) -> {
+            if (index < values.length && !values[index].isEmpty()) {
+                try { Double.parseDouble(values[index]); } catch (NumberFormatException e) { /* Ignore */ }
             }
-        if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+            index++;
+        };
+
+        // Process fields based on reportMask, always increment index if bit is set
+        if (BitUtil.check(reportMask, 0)) { // VIN
+            if (index < values.length) { position.set(Position.KEY_VIN, values[index]); } index++;
         }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 1)) { // Ignition
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 2)) { // Odometer
+            if (index < values.length) { position.set(Position.KEY_OBD_ODOMETER, values[index]); } index++;
         }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+        if (BitUtil.check(reportMask, 3)) { // Fuel Used
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 5)) { // RPM
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_RPM, Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+        if (BitUtil.check(reportMask, 4)) { // OBD Speed
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index]))); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+        if (BitUtil.check(reportMask, 6)) { // Coolant Temp
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+        if (BitUtil.check(reportMask, 7)) { // Fuel Consumption
+            if (index < values.length && !values[index].isEmpty()) { String v = values[index]; if (v.length() > 1) { try { position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(v.substring(1))); } catch (NumberFormatException e) { /* Ignore */ } } } index++;
         }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 8)) { // Fuel Level
+            if (index < values.length && !values[index].isEmpty()) { String v = values[index]; if (v.length() > 1) { try { position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(v.substring(1))); } catch (NumberFormatException e) { /* Ignore */ } } } index++;
         }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+        if (BitUtil.check(reportMask, 9)) { // Range
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("range", Long.parseLong(values[index]) * 100); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        if (BitUtil.check(reportMask, 10)) { // Throttle
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+        if (BitUtil.check(reportMask, 11)) { // Hours
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index]))); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 12)) { // Driving Time
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 13)) { // Idle Hours
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("idleHours", Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 14)) { // Idle Fuel Consumption
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("idleFuelConsumption", Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 15)) { // Axle Weight
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 16)) { // Tachograph Info
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("tachographInfo", Integer.parseInt(values[index], 16)); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 17)) { // Indicators
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("indicators", Integer.parseInt(values[index], 16)); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 18)) { // Lights
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("lights", Integer.parseInt(values[index], 16)); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 19)) { // Doors
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("doors", Integer.parseInt(values[index], 16)); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+        if (BitUtil.check(reportMask, 20)) { // Vehicle Overspeed
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("vehicleOverspeed", Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 21)) { // Engine Overspeed
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("engineOverspeed", Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } index++;
         }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
+        for (int i = 22; i <= 28; i++) { if (BitUtil.check(reportMask, i)) { if (index < values.length) { index++; } } } // Skip unused fields, check bounds
+
+        if (BitUtil.check(reportMask, 29)) { // Report Mask Ext
+             if (index < values.length && !values[index].isEmpty()) { try { reportMaskExt = Long.parseLong(values[index], 16); } catch (NumberFormatException e) { throw new ParseException("Invalid reportMaskExt: " + values[index], index); } }
+             if (index < values.length) { index++; } // Check bounds before incrementing
         }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+
+        // Process fields based on reportMaskExt, always increment index if bit is set
+        if (BitUtil.check(reportMaskExt, 0)) { // AdBlue Level
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("adBlueLevel", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 1)) { // Axle Weight 1
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("axleWeight1", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
+        if (BitUtil.check(reportMaskExt, 2)) { // Axle Weight 3
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("axleWeight3", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 5)) {
-            index += 1; // tachograph motion
+        if (BitUtil.check(reportMaskExt, 3)) { // Axle Weight 4
+            if (index < values.length && !values[index].isEmpty()) { try { position.set("axleWeight4", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* Ignore */ } } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 6)) {
-            index += 1; // tachograph direction
+        if (BitUtil.check(reportMaskExt, 4)) { if (index < values.length) { index++; } } // Tachograph Overspeed
+        if (BitUtil.check(reportMaskExt, 5)) { if (index < values.length) { index++; } } // Tachograph Motion
+        if (BitUtil.check(reportMaskExt, 6)) { if (index < values.length) { index++; } } // Tachograph Direction
+        if (BitUtil.check(reportMaskExt, 7)) { // ADC 1
+            if (index < values.length && !values[index].isEmpty()) { try { position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001); } catch (NumberFormatException e) { /* Ignore */ } } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+        if (BitUtil.check(reportMaskExt, 8)) { if (index < values.length) { index++; } } // Pedal Breaking Factor
+        if (BitUtil.check(reportMaskExt, 9)) { if (index < values.length) { index++; } } // Engine Breaking Factor
+        if (BitUtil.check(reportMaskExt, 10)) { if (index < values.length) { index++; } } // Total Accelerator Kick-downs
+        if (BitUtil.check(reportMaskExt, 11)) { if (index < values.length) { index++; } } // Total Effective Engine Speed
+        if (BitUtil.check(reportMaskExt, 12)) { if (index < values.length) { index++; } } // Total Cruise Control Time
+        if (BitUtil.check(reportMaskExt, 13)) { if (index < values.length) { index++; } } // Total Accelerator Kick-down Time
+        if (BitUtil.check(reportMaskExt, 14)) { if (index < values.length) { index++; } } // Total Brake Application
+        if (BitUtil.check(reportMaskExt, 15)) { // Driver 1 Card
+            if (index < values.length) { position.set("driver1Card", values[index]); } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 8)) {
-            index += 1; // pedal breaking factor
+        if (BitUtil.check(reportMaskExt, 16)) { // Driver 2 Card
+            if (index < values.length) { position.set("driver2Card", values[index]); } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 9)) {
-            index += 1; // engine breaking factor
+        if (BitUtil.check(reportMaskExt, 17)) { // Driver 1 Name
+            if (index < values.length) { position.set("driver1Name", values[index]); } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 10)) {
-            index += 1; // total accelerator kick-downs
+        if (BitUtil.check(reportMaskExt, 18)) { // Driver 2 Name
+            if (index < values.length) { position.set("driver2Name", values[index]); } if (index < values.length) { index++; }
         }
-        if (BitUtil.check(reportMaskExt, 11)) {
-            index += 1; // total effective engine speed
-        }
-        if (BitUtil.check(reportMaskExt, 12)) {
-            index += 1; // total cruise control time
-        }
-        if (BitUtil.check(reportMaskExt, 13)) {
-            index += 1; // total accelerator kick-down time
-        }
-        if (BitUtil.check(reportMaskExt, 14)) {
-            index += 1; // total brake application
-        }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 20)) {
-            index += 1; // expansion information
-        }
-        if (BitUtil.check(reportMaskExt, 21)) {
-            index += 1; // rapid brakings
-        }
-        if (BitUtil.check(reportMaskExt, 22)) {
-            index += 1; // rapid accelerations
-        }
-        if (BitUtil.check(reportMaskExt, 23)) {
-            index += 1; // engine torque
+        if (BitUtil.check(reportMaskExt, 19)) { // Registration
+            if (index < values.length) { position.set("registration", values[index]); } if (index < values.length) { index++; }
         }
+        if (BitUtil.check(reportMaskExt, 20)) { if (index < values.length) { index++; } } // Expansion Information
+        if (BitUtil.check(reportMaskExt, 21)) { if (index < values.length) { index++; } } // Rapid Brakings
+        if (BitUtil.check(reportMaskExt, 22)) { if (index < values.length) { index++; } } // Rapid Accelerations
+        if (BitUtil.check(reportMaskExt, 23)) { if (index < values.length) { index++; } } // Engine Torque
+        for (int i = 24; i <= 31; i++) { if (BitUtil.check(reportMaskExt, i)) { if (index < values.length) { index++; } } } // Skip unused fields
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
+        // Location Block
         if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
-                index += 1;
-            }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
-                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
-                position.setTime(dateFormat.parse(values[index++]));
-            } else {
-                index += 6; // no location
+            // Skip empty fields before validity
+            while (index < values.length && values[index].isEmpty()) { index++; }
+
+            boolean blockHasGps = true; // Assume true initially, set false if issues found
+            // Validity
+            if (index < values.length && !values[index].isEmpty()) { try { position.setValid(Integer.parseInt(values[index]) > 0); } catch (NumberFormatException e) { position.setValid(false); blockHasGps = false; } } else { position.setValid(false); blockHasGps = false; } if (index < values.length) { index++; }
+            // Speed
+            if (index < values.length && !values[index].isEmpty()) { try { position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index]))); } catch (NumberFormatException e) { blockHasGps = false; } } else { blockHasGps = false; } if (index < values.length) { index++; }
+            // Course
+            if (index < values.length && !values[index].isEmpty()) { try { position.setCourse(Integer.parseInt(values[index])); } catch (NumberFormatException e) { blockHasGps = false; } } else { blockHasGps = false; } if (index < values.length) { index++; }
+            // Altitude
+            if (index < values.length && !values[index].isEmpty()) { try { position.setAltitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { blockHasGps = false; } } else { blockHasGps = false; } if (index < values.length) { index++; }
+            // Longitude
+            if (index < values.length && !values[index].isEmpty()) { try { position.setLongitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { blockHasGps = false; } } else { blockHasGps = false; } if (index < values.length) { index++; }
+            // Latitude
+            if (index < values.length && !values[index].isEmpty()) { try { position.setLatitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { blockHasGps = false; } } else { blockHasGps = false; } if (index < values.length) { index++; }
+            // Time
+            Date gpsTime = null; if (index < values.length && !values[index].isEmpty()) { try { gpsTime = dateFormat.parse(values[index]); position.setTime(gpsTime); } catch (ParseException | NumberFormatException e) { blockHasGps = false; } } else { blockHasGps = false; } if (index < values.length) { index++; }
+
+            if (!blockHasGps) { // If any field was missing/invalid
+                position.setValid(false); // Ensure validity is false
+                position.setFixTime(null); // Clear potentially partial time
+                position.setLatitude(0); position.setLongitude(0); // Clear coordinates
                 getLastLocation(position, null);
             }
         } else {
+            position.setValid(false);
             getLastLocation(position, null);
         }
 
+        // Cell Info (Bit 31)
         if (BitUtil.check(reportMask, 31)) {
-            index += 4; // cell
-            index += 1; // reserved
+            if (index < values.length) { index += 4; } // cell - check bounds before skipping
+            if (index < values.length) { index += 1; } // reserved - check bounds before skipping
         }
 
-        if (ignoreFixTime) {
-            position.setTime(dateFormat.parse(values[index]));
+        // Device Time
+        Date deviceTime = null;
+        if (index < values.length && !values[index].isEmpty()) {
+             try {
+                 deviceTime = dateFormat.parse(values[index]);
+                 position.setDeviceTime(deviceTime);
+             } catch (ParseException e) { /* Ignore invalid device time */ }
+        }
+        // Don't increment index after last field access
+
+         // Time logic: Use GPS time if available and valid. Otherwise, use device time.
+         if (position.getFixTime() == null && deviceTime != null) {
+             getLastLocation(position, deviceTime); // Use device time for location estimate
+             position.setTime(deviceTime);
+             // If we estimated a location, mark position as valid
+             if (position.getLatitude() != 0 || position.getLongitude() != 0) {
+                position.setValid(true);
+             } else {
+                 // If getLastLocation failed, keep validity potentially false (depends on getLastLocation behavior)
+                 // Let's assume getLastLocation sets validity if successful
+             }
+         }
+
+         if (ignoreFixTime && deviceTime != null) {
+             position.setTime(deviceTime); // Override fix time if needed
+             // If overriding time potentially invalidates GPS fix, ensure validity reflects this?
+             // Assuming ignoreFixTime implies deviceTime is the primary source of truth.
+             if (position.getLatitude() == 0 && position.getLongitude() == 0) {
+                 getLastLocation(position, deviceTime);
+                 if (position.getLatitude() != 0 || position.getLongitude() != 0) {
+                     position.setValid(true);
                  } else {
-            position.setDeviceTime(dateFormat.parse(values[index]));
+                     position.setValid(false); // Can't be valid without coordinates
                  }
+             } else {
+                  position.setValid(true); // Has coordinates and a time source
+             }
+
+         }
+
+        // If still no time, BaseProtocolDecoder might set server time.
 
         return position;
     }
\ No newline at end of file
