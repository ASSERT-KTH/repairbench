diff --git a/tmp/9e1d44da-4711-40fe-808a-f0007356324e_buggy.java b/tmp/0e49b2f2-0bd1-4c65-aaff-761310fd38e0_fixed.java
index e883360..bd4b123 100644
--- a/tmp/9e1d44da-4711-40fe-808a-f0007356324e_buggy.java
+++ b/tmp/0e49b2f2-0bd1-4c65-aaff-761310fd38e0_fixed.java
@@ -1,196 +1,406 @@
+import org.traccar.model.Position;
+import org.traccar.model.DeviceSession;
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import io.netty.channel.Channel;
+
+import java.net.SocketAddress;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.TimeZone;
+import java.util.Date; // Added for potential use in getLastLocation or default time
+
+// Assume necessary imports for Position, DeviceSession, BitUtil, UnitsConverter, Channel, SocketAddress etc.
+// Assume ignoreFixTime is a member variable: private boolean ignoreFixTime;
+// Assume getProtocolName(), getDeviceSession(), getLastLocation() are available methods.
+
+public class Gl200TextProtocolDecoder { // Changed class name for context, replace with actual class
+
+    private boolean ignoreFixTime; // Assume this exists
+
+    // Dummy implementations for methods assumed to exist
+    private String getProtocolName() { return "gl200"; }
+    private DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String uniqueId) {
+        // In a real scenario, this would look up or create a session
+        DeviceSession session = new DeviceSession(1L, uniqueId, null, new Date());
+        return session;
+    }
+    private Position getLastLocation(Position position, Date defaultTime) {
+        // In a real scenario, this would fetch the last known location if available
+        // For this fix, it just returns the position potentially unmodified or with a default time
+        if (position.getFixTime() == null && defaultTime != null) {
+            position.setTime(defaultTime); // Example: Set default time if none exists
+        }
+        return position;
+    }
+
+
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
         String[] values = sentence.split(",");
 
+        // Ensure we have enough basic fields before proceeding
+        if (values.length < 7) {
+             throw new ParseException("Sentence too short: " + sentence, 0);
+        }
+
         index += 1; // header
         index += 1; // protocol version
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
+        if (deviceSession == null) {
+            return null; // Device session is required
+        }
         position.setDeviceId(deviceSession.getDeviceId());
 
         index += 1; // device name
         index += 1; // report type
         index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+
+        // Check if reportMask field exists
+        if (index >= values.length) {
+            throw new ParseException("Missing report mask: " + sentence, index);
+        }
+        long reportMask = 0;
+        String reportMaskStr = values[index++];
+        if (!reportMaskStr.isEmpty()) {
+            reportMask = Long.parseLong(reportMaskStr, 16);
+        }
         long reportMaskExt = 0;
 
+        // Helper function to safely get value and check bounds
+        // Not strictly necessary but clarifies intent
+        // String getValue(int idx) { return idx < values.length ? values[idx] : null; }
+
         if (BitUtil.check(reportMask, 0)) {
+            if (index < values.length) { // Check bounds before accessing
                 position.set(Position.KEY_VIN, values[index++]);
+            } else { index++; } // Consume field index even if missing
         }
         if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+             if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) > 0);
+                }
+            } else { index++; }
         }
         if (BitUtil.check(reportMask, 2)) {
+            if (index < values.length) { // Check bounds
                 position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 3)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_FUEL_USED, Double.parseDouble(value));
                 }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+        if (BitUtil.check(reportMask, 5)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_RPM, Integer.parseInt(value));
                 }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+        if (BitUtil.check(reportMask, 4)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                 }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+        if (BitUtil.check(reportMask, 6)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                 }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+        if (BitUtil.check(reportMask, 7)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty() && value.length() > 1) { // Check length before substring
+                    position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(value.substring(1)));
+                }
+            } else { index++; }
+        }
+        if (BitUtil.check(reportMask, 8)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty() && value.length() > 1) { // Check length before substring
+                    position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(value.substring(1)));
+                }
+            } else { index++; }
+        }
+        if (BitUtil.check(reportMask, 9)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("range", Long.parseLong(value) * 100);
+                }
+            } else { index++; }
+        }
+        if (BitUtil.check(reportMask, 10)) {
+             if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                }
+            } else { index++; }
+        }
+        if (BitUtil.check(reportMask, 11)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(value)));
+                }
+            } else { index++; }
         }
         if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(value));
+                }
+            } else { index++; }
         }
         if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("idleHours", Double.parseDouble(value));
                 }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 14)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("idleFuelConsumption", Double.parseDouble(value));
                 }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 15)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(value));
                 }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 16)) {
+             if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("tachographInfo", Integer.parseInt(value, 16));
                 }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+            } else { index++; }
         }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 17)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("indicators", Integer.parseInt(value, 16));
                 }
+            } else { index++; }
+        }
+        if (BitUtil.check(reportMask, 18)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("lights", Integer.parseInt(value, 16));
+                }
+            } else { index++; }
+        }
+        if (BitUtil.check(reportMask, 19)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("doors", Integer.parseInt(value, 16));
+                }
+            } else { index++; }
+        }
+        if (BitUtil.check(reportMask, 20)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("vehicleOverspeed", Double.parseDouble(value));
+                }
+            } else { index++; }
+        }
+        if (BitUtil.check(reportMask, 21)) {
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    position.set("engineOverspeed", Double.parseDouble(value));
+                }
+            } else { index++; }
+        }
+
+        // Bits 22-28 seem unused in original code - skip if mask bit set
+        for (int i = 22; i <= 28; i++) {
+            if (BitUtil.check(reportMask, i)) {
+                index++; // Consume placeholder
+            }
+        }
+
         if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
-        }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
-        }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
-        }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
-        }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
-        }
-        if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
-        }
-        if (BitUtil.check(reportMaskExt, 5)) {
-            index += 1; // tachograph motion
-        }
-        if (BitUtil.check(reportMaskExt, 6)) {
-            index += 1; // tachograph direction
-        }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
-        }
-        if (BitUtil.check(reportMaskExt, 8)) {
-            index += 1; // pedal breaking factor
-        }
-        if (BitUtil.check(reportMaskExt, 9)) {
-            index += 1; // engine breaking factor
-        }
-        if (BitUtil.check(reportMaskExt, 10)) {
-            index += 1; // total accelerator kick-downs
-        }
-        if (BitUtil.check(reportMaskExt, 11)) {
-            index += 1; // total effective engine speed
-        }
-        if (BitUtil.check(reportMaskExt, 12)) {
-            index += 1; // total cruise control time
-        }
-        if (BitUtil.check(reportMaskExt, 13)) {
-            index += 1; // total accelerator kick-down time
-        }
-        if (BitUtil.check(reportMaskExt, 14)) {
-            index += 1; // total brake application
-        }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 20)) {
-            index += 1; // expansion information
-        }
-        if (BitUtil.check(reportMaskExt, 21)) {
-            index += 1; // rapid brakings
-        }
-        if (BitUtil.check(reportMaskExt, 22)) {
-            index += 1; // rapid accelerations
-        }
-        if (BitUtil.check(reportMaskExt, 23)) {
-            index += 1; // engine torque
-        }
+            if (index < values.length) { // Check bounds
+                String value = values[index++];
+                if (!value.isEmpty()) {
+                    reportMaskExt = Long.parseLong(value, 16);
+                } else {
+                    reportMaskExt = 0; // Assume 0 if empty
+                }
+            } else { index++; }
+        }
+
+        // Extended Mask Fields
+        if (BitUtil.check(reportMaskExt, 0)) { // adBlueLevel
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("adBlueLevel", Integer.parseInt(value)); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 1)) { // axleWeight1
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("axleWeight1", Integer.parseInt(value)); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 2)) { // axleWeight3 (Note: Spec might mean axle 2, key seems inconsistent)
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("axleWeight3", Integer.parseInt(value)); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 3)) { // axleWeight4 (Note: Spec might mean axle 3)
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("axleWeight4", Integer.parseInt(value)); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 4)) { index += 1; } // tachograph overspeed
+        if (BitUtil.check(reportMaskExt, 5)) { index += 1; } // tachograph motion
+        if (BitUtil.check(reportMaskExt, 6)) { index += 1; } // tachograph direction
+        if (BitUtil.check(reportMaskExt, 7)) { // ADC 1
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set(Position.PREFIX_ADC + 1, Integer.parseInt(value) * 0.001); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 8)) { index += 1; } // pedal breaking factor
+        if (BitUtil.check(reportMaskExt, 9)) { index += 1; } // engine breaking factor
+        if (BitUtil.check(reportMaskExt, 10)) { index += 1; } // total accelerator kick-downs
+        if (BitUtil.check(reportMaskExt, 11)) { index += 1; } // total effective engine speed
+        if (BitUtil.check(reportMaskExt, 12)) { index += 1; } // total cruise control time
+        if (BitUtil.check(reportMaskExt, 13)) { index += 1; } // total accelerator kick-down time
+        if (BitUtil.check(reportMaskExt, 14)) { index += 1; } // total brake application
+        if (BitUtil.check(reportMaskExt, 15)) { // driver1Card
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("driver1Card", value); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 16)) { // driver2Card
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("driver2Card", value); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 17)) { // driver1Name
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("driver1Name", value); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 18)) { // driver2Name
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("driver2Name", value); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 19)) { // registration
+            if (index < values.length) { String value = values[index++]; if (!value.isEmpty()) position.set("registration", value); } else { index++; }
+        }
+        if (BitUtil.check(reportMaskExt, 20)) { index += 1; } // expansion information
+        if (BitUtil.check(reportMaskExt, 21)) { index += 1; } // rapid brakings
+        if (BitUtil.check(reportMaskExt, 22)) { index += 1; } // rapid accelerations
+        if (BitUtil.check(reportMaskExt, 23)) { index += 1; } // engine torque
+
+        // Remaining bits up to 31 for extended mask
+        for (int i = 24; i <= 31; i++) {
+            if (BitUtil.check(reportMaskExt, i)) {
+                index++; // Consume placeholder
+            }
+        }
+
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
+            // Skip any initial empty fields before validity - keep original logic but add bounds check
+            while (index < values.length && values[index].isEmpty()) {
                 index += 1;
             }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
-                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
-                position.setTime(dateFormat.parse(values[index++]));
+
+            if (index < values.length) { // Check if validity field exists
+                String validityValue = values[index++]; // Read and advance index for validity
+                if (!validityValue.isEmpty()) {
+                    try {
+                        position.setValid(Integer.parseInt(validityValue) > 0);
+                    } catch (NumberFormatException e) {
+                        // Log error or handle invalid validity format? Keep default validity.
+                        System.err.println("Invalid validity format: " + validityValue); // Example logging
+                    }
+                } // else keep default validity (usually true)
+
+                // Now check if Speed field exists and is non-empty
+                if (index < values.length) {
+                    String speedValue = values[index]; // Peek at speed field
+                    if (!speedValue.isEmpty()) {
+                        index++; // Consume speed field
+                        try { position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedValue))); } catch (NumberFormatException e) { /* Log/ignore */ }
+
+                        // Process subsequent location fields, checking emptiness/bounds before parsing
+                        if (index < values.length) { String courseValue = values[index++]; if (!courseValue.isEmpty()) try { position.setCourse(Integer.parseInt(courseValue)); } catch (NumberFormatException ee) {/*ignore*/}} else { index++; }
+                        if (index < values.length) { String altitudeValue = values[index++]; if (!altitudeValue.isEmpty()) try { position.setAltitude(Double.parseDouble(altitudeValue)); } catch (NumberFormatException ee) {/*ignore*/}} else { index++; }
+                        if (index < values.length) { String longitudeValue = values[index++]; if (!longitudeValue.isEmpty()) try { position.setLongitude(Double.parseDouble(longitudeValue)); } catch (NumberFormatException ee) {/*ignore*/}} else { index++; }
+                        if (index < values.length) { String latitudeValue = values[index++]; if (!latitudeValue.isEmpty()) try { position.setLatitude(Double.parseDouble(latitudeValue)); } catch (NumberFormatException ee) {/*ignore*/}} else { index++; }
+                        if (index < values.length) { String timeValue = values[index++]; if (!timeValue.isEmpty()) try { position.setTime(dateFormat.parse(timeValue)); } catch (ParseException pe) {/*ignore*/}} else { index++; }
+
+                    } else {
+                        // Speed field is empty, skip remaining 5 location fields + time field (total 6)
+                        index += 6;
+                        getLastLocation(position, null);
+                    }
+                } else {
+                    // Speed field missing (index out of bounds), assume rest are missing too
+                    // Original code skipped 6 fields, mimic that behavior for consistency, though risky.
+                    index += 6; // Advance index past expected location fields
+                    getLastLocation(position, null);
+                }
             } else {
-                index += 6; // no location
+                // Validity field (and subsequent location fields) were missing after skipping empty ones
                 getLastLocation(position, null);
             }
         } else {
             getLastLocation(position, null);
         }
 
+
         if (BitUtil.check(reportMask, 31)) {
             index += 4; // cell
             index += 1; // reserved
         }
 
+        // Final time field
+        if (index < values.length) {
+            String timeValue = values[index]; // Don't increment index here, might not be used after
+            if (!timeValue.isEmpty()) {
+                try {
+                    Date time = dateFormat.parse(timeValue);
                     if (ignoreFixTime) {
-            position.setTime(dateFormat.parse(values[index]));
+                        position.setTime(time);
                     } else {
-            position.setDeviceTime(dateFormat.parse(values[index]));
+                        position.setDeviceTime(time);
                     }
+                } catch (ParseException e) {
+                    // Log error or ignore?
+                    System.err.println("Invalid final time format: " + timeValue); // Example logging
+                }
+            }
+        }
+
+        // If after all parsing, position still has no time, try last location again?
+        // (This depends on desired behavior)
+        // if (position.getFixTime() == null && position.getDeviceTime() == null) {
+        //     getLastLocation(position, new Date()); // Potentially set to server time if desired
+        // }
 
         return position;
     }
+}
\ No newline at end of file
