diff --git a/tmp/dbbba103-7f62-4192-9200-ca733bae71ad_buggy.java b/tmp/72a6a4a2-6d9d-4399-a44a-becfc298bc62_fixed.java
index e883360..eddcdd9 100644
--- a/tmp/dbbba103-7f62-4192-9200-ca733bae71ad_buggy.java
+++ b/tmp/72a6a4a2-6d9d-4399-a44a-becfc298bc62_fixed.java
@@ -1,196 +1,338 @@
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
         String[] values = sentence.split(",");
 
+        // Basic structural checks - ensure enough fields for required parts
+        if (values.length < 7) { // Need up to report mask index (6) + 1
+             // Not enough fields for basic parsing
+             return null;
+        }
+
         index += 1; // header
         index += 1; // protocol version
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
+        if (deviceSession == null) {
+            return null; // Device session is required
+        }
         position.setDeviceId(deviceSession.getDeviceId());
 
         index += 1; // device name
         index += 1; // report type
         index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+
+        long reportMask;
+        try {
+            // Report mask is mandatory, parse or fail
+            reportMask = Long.parseLong(values[index++], 16);
+        } catch (NumberFormatException e) {
+            throw new ParseException("Invalid report mask format", index - 1);
+        }
         long reportMaskExt = 0;
 
-        if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+        // --- Start of conditional fields ---
+        // Pattern: Check bit -> Check bounds & emptiness -> Try Parse -> Increment index
+
+        if (BitUtil.check(reportMask, 0)) { // VIN (String)
+            if (index < values.length) {
+                position.set(Position.KEY_VIN, values[index]);
             }
-        if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+            index++;
         }
-        if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+        if (BitUtil.check(reportMask, 1)) { // Ignition (Boolean from Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
             }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+            index++;
         }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 2)) { // OBD Odometer (String)
+            if (index < values.length) {
+                position.set(Position.KEY_OBD_ODOMETER, values[index]);
             }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            index++;
         }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 3)) { // Fuel Used (Double)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
             }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+            index++;
         }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+        if (BitUtil.check(reportMask, 5)) { // RPM (Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_RPM, Integer.parseInt(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
             }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+            index++;
         }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 4)) { // OBD Speed (Int -> Double)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
             }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+            index++;
         }
-        if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        if (BitUtil.check(reportMask, 6)) { // Coolant Temp (Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
             }
-        if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+            index++;
         }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 7)) { // Fuel Consumption (Double from substring)
+            if (index < values.length && values[index].length() > 1) { // Check length > 1 for substring
+                try {
+                    position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index].substring(1)));
+                } catch (NumberFormatException | IndexOutOfBoundsException e) { /* ignore invalid format */ }
             }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+            index++;
         }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 8)) { // Fuel Level (Double from substring)
+             if (index < values.length && values[index].length() > 1) { // Check length > 1 for substring
+                 try {
+                    position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index].substring(1)));
+                 } catch (NumberFormatException | IndexOutOfBoundsException e) { /* ignore invalid format */ }
              }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+            index++;
         }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 9)) { // Range (Long)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("range", Long.parseLong(values[index]) * 100);
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
             }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+            index++;
         }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 10)) { // Throttle (Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
             }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+            index++;
         }
-        if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
-        }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
-        }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
-        }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
-        }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
-        }
-        if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
-        }
-        if (BitUtil.check(reportMaskExt, 5)) {
-            index += 1; // tachograph motion
-        }
-        if (BitUtil.check(reportMaskExt, 6)) {
-            index += 1; // tachograph direction
-        }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
-        }
-        if (BitUtil.check(reportMaskExt, 8)) {
-            index += 1; // pedal breaking factor
-        }
-        if (BitUtil.check(reportMaskExt, 9)) {
-            index += 1; // engine breaking factor
-        }
-        if (BitUtil.check(reportMaskExt, 10)) {
-            index += 1; // total accelerator kick-downs
-        }
-        if (BitUtil.check(reportMaskExt, 11)) {
-            index += 1; // total effective engine speed
-        }
-        if (BitUtil.check(reportMaskExt, 12)) {
-            index += 1; // total cruise control time
-        }
-        if (BitUtil.check(reportMaskExt, 13)) {
-            index += 1; // total accelerator kick-down time
-        }
-        if (BitUtil.check(reportMaskExt, 14)) {
-            index += 1; // total brake application
-        }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
-        }
-        if (BitUtil.check(reportMaskExt, 20)) {
-            index += 1; // expansion information
-        }
-        if (BitUtil.check(reportMaskExt, 21)) {
-            index += 1; // rapid brakings
-        }
-        if (BitUtil.check(reportMaskExt, 22)) {
-            index += 1; // rapid accelerations
-        }
-        if (BitUtil.check(reportMaskExt, 23)) {
-            index += 1; // engine torque
+        if (BitUtil.check(reportMask, 11)) { // Hours (Double -> Long ms)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
         }
+        if (BitUtil.check(reportMask, 12)) { // Driving Time (Double) - FIXED NFE
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 13)) { // Idle Hours (Double) - FIXED NFE
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("idleHours", Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 14)) { // Idle Fuel Consumption (Double)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("idleFuelConsumption", Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 15)) { // Axle Weight (Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 16)) { // Tachograph Info (Int hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("tachographInfo", Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 17)) { // Indicators (Int hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("indicators", Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 18)) { // Lights (Int hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("lights", Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 19)) { // Doors (Int hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("doors", Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 20)) { // Vehicle Overspeed (Double)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("vehicleOverspeed", Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 21)) { // Engine Overspeed (Double)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set("engineOverspeed", Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMask, 29)) { // reportMaskExt (Long hex) - FIXED NFE
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    reportMaskExt = Long.parseLong(values[index], 16);
+                } catch (NumberFormatException e) { /* ignore invalid format */ }
+            }
+            index++;
+        }
+
+        // --- Start of reportMaskExt fields --- (Apply same robust pattern)
+        if (BitUtil.check(reportMaskExt, 0)) { // adBlueLevel (Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                try { position.set("adBlueLevel", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+            } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 1)) { // axleWeight1 (Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                 try { position.set("axleWeight1", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+            } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 2)) { // axleWeight3 (Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                 try { position.set("axleWeight3", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+            } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 3)) { // axleWeight4 (Int)
+            if (index < values.length && !values[index].isEmpty()) {
+                 try { position.set("axleWeight4", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+            } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 4)) { index++; } // tachograph overspeed (no data parsed)
+        if (BitUtil.check(reportMaskExt, 5)) { index++; } // tachograph motion (no data parsed)
+        if (BitUtil.check(reportMaskExt, 6)) { index++; } // tachograph direction (no data parsed)
+        if (BitUtil.check(reportMaskExt, 7)) { // ADC1 (Int -> Double)
+            if (index < values.length && !values[index].isEmpty()) {
+                try { position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001); } catch (NumberFormatException e) { /* ignore */ }
+            } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 8)) { index++; } // pedal breaking factor (no data parsed)
+        if (BitUtil.check(reportMaskExt, 9)) { index++; } // engine breaking factor (no data parsed)
+        if (BitUtil.check(reportMaskExt, 10)) { index++; } // total accelerator kick-downs (no data parsed)
+        if (BitUtil.check(reportMaskExt, 11)) { index++; } // total effective engine speed (no data parsed)
+        if (BitUtil.check(reportMaskExt, 12)) { index++; } // total cruise control time (no data parsed)
+        if (BitUtil.check(reportMaskExt, 13)) { index++; } // total accelerator kick-down time (no data parsed)
+        if (BitUtil.check(reportMaskExt, 14)) { index++; } // total brake application (no data parsed)
+        if (BitUtil.check(reportMaskExt, 15)) { // driver1Card (String)
+            if (index < values.length) { position.set("driver1Card", values[index]); } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 16)) { // driver2Card (String)
+            if (index < values.length) { position.set("driver2Card", values[index]); } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 17)) { // driver1Name (String)
+            if (index < values.length) { position.set("driver1Name", values[index]); } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 18)) { // driver2Name (String)
+            if (index < values.length) { position.set("driver2Name", values[index]); } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 19)) { // registration (String)
+            if (index < values.length) { position.set("registration", values[index]); } index++;
+        }
+        if (BitUtil.check(reportMaskExt, 20)) { index++; } // expansion information (no data parsed)
+        if (BitUtil.check(reportMaskExt, 21)) { index++; } // rapid brakings (no data parsed)
+        if (BitUtil.check(reportMaskExt, 22)) { index++; } // rapid accelerations (no data parsed)
+        if (BitUtil.check(reportMaskExt, 23)) { index++; } // engine torque (no data parsed)
+
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
-        if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
-                index += 1;
-            }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
-                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
-                position.setTime(dateFormat.parse(values[index++]));
-            } else {
-                index += 6; // no location
-                getLastLocation(position, null);
+        if (BitUtil.check(reportMask, 30)) { // Location block
+            // Skip potential empty fields before validity field
+            while (index < values.length && values[index].isEmpty()) {
+                index++;
+            }
+            boolean locationAvailable = false;
+            if (index < values.length && !values[index].isEmpty()) { // Check validity field is present and not empty
+                try {
+                    position.setValid(Integer.parseInt(values[index]) > 0);
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++; // Consume validity field (whether parsed or not)
+
+            // Check if speed field is present and not empty to determine if location block exists
+            if (index < values.length && !values[index].isEmpty()) {
+                locationAvailable = true;
+                // Parse location fields, guarding each parse operation
+                try { position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index]))); } catch (NumberFormatException e) { /* ignore */ } index++; // Speed
+                if (index < values.length && !values[index].isEmpty()) { try { position.setCourse(Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ } } index++; // Course
+                if (index < values.length && !values[index].isEmpty()) { try { position.setAltitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ } } index++; // Altitude
+                if (index < values.length && !values[index].isEmpty()) { try { position.setLongitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ } } index++; // Longitude
+                if (index < values.length && !values[index].isEmpty()) { try { position.setLatitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ } } index++; // Latitude
+                if (index < values.length && !values[index].isEmpty()) { try { position.setTime(dateFormat.parse(values[index])); } catch (ParseException e) { /* ignore */ } } index++; // Fix Time
+            } else { // Speed field is missing or empty
+                 index += 6; // Skip the expected 6 location fields (speed to fix time)
+            }
+            if (!locationAvailable) {
+                 getLastLocation(position, null); // Use last known location if current is unavailable
             }
         } else {
-            getLastLocation(position, null);
+            getLastLocation(position, null); // Use last known location if location block bit is not set
         }
 
-        if (BitUtil.check(reportMask, 31)) {
-            index += 4; // cell
-            index += 1; // reserved
+
+        if (BitUtil.check(reportMask, 31)) { // Cell block
+            index += 4; // cell fields
+            index += 1; // reserved field
         }
 
-        if (ignoreFixTime) {
-            position.setTime(dateFormat.parse(values[index]));
+        // Final Time (Device Time)
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                Date deviceTime = dateFormat.parse(values[index]);
+                if (ignoreFixTime) { // If configured to ignore GPS time
+                    position.setTime(deviceTime);
                 } else {
-            position.setDeviceTime(dateFormat.parse(values[index]));
+                    position.setDeviceTime(deviceTime);
+                    // If position fix time is still not set (e.g. no GPS block, or time parse failed), use device time
+                    if (position.getFixTime() == null) {
+                         position.setTime(deviceTime);
+                    }
+                }
+            } catch (ParseException e) {
+                 // Ignore parse exception for final timestamp
+            }
         }
+        // No index increment needed for the final field
 
         return position;
     }
\ No newline at end of file
