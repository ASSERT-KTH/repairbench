diff --git a/tmp/db6daf9f-b2b7-4bbf-a3b5-c07d10c4c42a_buggy.java b/tmp/2ee3718e-dbc4-4d04-9f2a-333c0e75f7a7_fixed.java
index e883360..a214fba 100644
--- a/tmp/db6daf9f-b2b7-4bbf-a3b5-c07d10c4c42a_buggy.java
+++ b/tmp/2ee3718e-dbc4-4d04-9f2a-333c0e75f7a7_fixed.java
@@ -1,196 +1,334 @@
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
-        String[] values = sentence.split(",");
+        String[] values = sentence.split(",", -1); // Use -1 limit to keep trailing empty strings
 
         index += 1; // header
         index += 1; // protocol version
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         position.setDeviceId(deviceSession.getDeviceId());
 
         index += 1; // device name
         index += 1; // report type
         index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+        long reportMask = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            reportMask = Long.parseLong(values[index], 16);
+        }
+        index++;
         long reportMaskExt = 0;
 
         if (BitUtil.check(reportMask, 0)) {
             position.set(Position.KEY_VIN, values[index++]);
         }
         if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_IGNITION, Integer.parseInt(value) > 0);
+            }
         }
         if (BitUtil.check(reportMask, 2)) {
             position.set(Position.KEY_OBD_ODOMETER, values[index++]);
         }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 3)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_FUEL_USED, Double.parseDouble(value));
             }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+        if (BitUtil.check(reportMask, 5)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_RPM, Integer.parseInt(value));
             }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+        if (BitUtil.check(reportMask, 4)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
             }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
         }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+        if (BitUtil.check(reportMask, 6)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
             }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+        if (BitUtil.check(reportMask, 7)) {
+            String value = values[index++];
+            // Check value length because substring(1) on a single char string results in "" which causes NumberFormatException
+            if (value.length() > 1) {
+                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(value.substring(1)));
+            } else if (!value.isEmpty() && Character.isDigit(value.charAt(0))) {
+                // Handle cases like "0" if the prefix is missing
+                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(value));
+            }
+        }
+        if (BitUtil.check(reportMask, 8)) {
+            String value = values[index++];
+            // Check value length because substring(1) on a single char string results in "" which causes NumberFormatException
+            if (value.length() > 1) {
+                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(value.substring(1)));
+            } else if (!value.isEmpty() && Character.isDigit(value.charAt(0))) {
+                // Handle cases like "0" if the prefix is missing
+                 position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(value));
+            }
+        }
+        if (BitUtil.check(reportMask, 9)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("range", Long.parseLong(value) * 100);
+            }
+        }
+        if (BitUtil.check(reportMask, 10)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+            }
+        }
+        if (BitUtil.check(reportMask, 11)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(value)));
+            }
         }
         if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(value));
+            }
         }
         if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("idleHours", Double.parseDouble(value));
             }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 14)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("idleFuelConsumption", Double.parseDouble(value));
             }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
         }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 15)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(value));
             }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
         }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 16)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("tachographInfo", Integer.parseInt(value, 16));
             }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
         }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 17)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("indicators", Integer.parseInt(value, 16));
             }
+        }
+        if (BitUtil.check(reportMask, 18)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("lights", Integer.parseInt(value, 16));
+            }
+        }
+        if (BitUtil.check(reportMask, 19)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("doors", Integer.parseInt(value, 16));
+            }
+        }
+        if (BitUtil.check(reportMask, 20)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("vehicleOverspeed", Double.parseDouble(value));
+            }
+        }
+        if (BitUtil.check(reportMask, 21)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("engineOverspeed", Double.parseDouble(value));
+            }
+        }
+
+        // Skip bits 22-28 as they are not explicitly handled for parsing values
+        index += Long.bitCount(reportMask & 0x0FE00000L); // Skip fields for bits 22-28 if set
+
         if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                reportMaskExt = Long.parseLong(value, 16);
             }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 0)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("adBlueLevel", Integer.parseInt(value));
             }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
         }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 1)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("axleWeight1", Integer.parseInt(value));
+            }
+        }
+        // Note: Original code missed axleWeight2 - assuming it follows sequence if mask bit 2 was set
+        if (BitUtil.check(reportMaskExt, 2)) {
+             String value = values[index++]; // Assuming axleWeight2 field exists
+             if (!value.isEmpty()) {
+                 position.set("axleWeight2", Integer.parseInt(value)); // Added axleWeight2
+             }
+        }
+        if (BitUtil.check(reportMaskExt, 3)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set("axleWeight3", Integer.parseInt(value)); // Renamed from axleWeight3 to axleWeight3 (was 4 before?) - Check protocol doc if available
+            }
         }
         if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
+            String value = values[index++]; // axleWeight4 according to some GL200 docs, tachograph overspeed according to original code comment
+             if (!value.isEmpty()) {
+                 position.set("axleWeight4", Integer.parseInt(value)); // Added axleWeight4
+             }
         }
         if (BitUtil.check(reportMaskExt, 5)) {
             index += 1; // tachograph motion
         }
         if (BitUtil.check(reportMaskExt, 6)) {
             index += 1; // tachograph direction
         }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+        if (BitUtil.check(reportMaskExt, 7)) {
+            String value = values[index++];
+            if (!value.isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Integer.parseInt(value) * 0.001);
+            }
         }
         if (BitUtil.check(reportMaskExt, 8)) {
             index += 1; // pedal breaking factor
         }
         if (BitUtil.check(reportMaskExt, 9)) {
             index += 1; // engine breaking factor
         }
         if (BitUtil.check(reportMaskExt, 10)) {
             index += 1; // total accelerator kick-downs
         }
         if (BitUtil.check(reportMaskExt, 11)) {
             index += 1; // total effective engine speed
         }
         if (BitUtil.check(reportMaskExt, 12)) {
             index += 1; // total cruise control time
         }
         if (BitUtil.check(reportMaskExt, 13)) {
             index += 1; // total accelerator kick-down time
         }
         if (BitUtil.check(reportMaskExt, 14)) {
             index += 1; // total brake application
         }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 15)) {
+            position.set("driver1Card", values[index++]);
         }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 16)) {
+            position.set("driver2Card", values[index++]);
         }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 17)) {
+            position.set("driver1Name", values[index++]);
         }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 18)) {
+            position.set("driver2Name", values[index++]);
         }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 19)) {
+            position.set("registration", values[index++]);
         }
         if (BitUtil.check(reportMaskExt, 20)) {
             index += 1; // expansion information
         }
         if (BitUtil.check(reportMaskExt, 21)) {
             index += 1; // rapid brakings
         }
         if (BitUtil.check(reportMaskExt, 22)) {
             index += 1; // rapid accelerations
         }
         if (BitUtil.check(reportMaskExt, 23)) {
             index += 1; // engine torque
         }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
+            // Skip potential empty fields before validity
+            while (index < values.length && values[index].isEmpty()) {
                 index += 1;
             }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
+            if (index < values.length) {
+                String validityValue = values[index++];
+                if (!validityValue.isEmpty()) {
+                    position.setValid(Integer.parseInt(validityValue) > 0);
+                }
+            }
+            // Check if next field (speed) exists and is not empty
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
+                if (index < values.length) {
+                    String courseValue = values[index++];
+                    if (!courseValue.isEmpty()) {
+                        position.setCourse(Integer.parseInt(courseValue));
+                    }
+                }
+                if (index < values.length) {
+                    String altitudeValue = values[index++];
+                    if (!altitudeValue.isEmpty()) {
+                        position.setAltitude(Double.parseDouble(altitudeValue));
+                    }
+                }
+                if (index < values.length) {
+                    String longitudeValue = values[index++];
+                    if (!longitudeValue.isEmpty()) {
+                        position.setLongitude(Double.parseDouble(longitudeValue));
+                    }
+                }
+                 if (index < values.length) {
+                     String latitudeValue = values[index++];
+                     if (!latitudeValue.isEmpty()) {
+                         position.setLatitude(Double.parseDouble(latitudeValue));
+                     }
+                 }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.setTime(dateFormat.parse(values[index++]));
                 } else {
-                index += 6; // no location
+                    index++; // Consume the empty time field index
+                }
+            } else {
+                index += 6; // Skip speed, course, alt, lon, lat, time
                 getLastLocation(position, null);
             }
         } else {
+             // Attempt to get location from previous message only if this one doesn't have it
              getLastLocation(position, null);
+             // Set time based on device time later if no GPS time available
         }
 
         if (BitUtil.check(reportMask, 31)) {
             index += 4; // cell
             index += 1; // reserved
         }
 
-        if (ignoreFixTime) {
-            position.setTime(dateFormat.parse(values[index]));
+        // Use device time if position time is not set or if ignoring fix time
+        if (index < values.length && !values[index].isEmpty()) {
+            Date deviceTime = dateFormat.parse(values[index]);
+            if (position.getFixTime() == null || ignoreFixTime) {
+                position.setTime(deviceTime);
             } else {
-            position.setDeviceTime(dateFormat.parse(values[index]));
+                position.setDeviceTime(deviceTime);
+            }
+        } else if (position.getFixTime() == null) {
+             // If no GPS time (Bit 30 false or empty) and no device time, cannot set time.
+             // getLastLocation might have set a time, otherwise it remains null.
         }
 
         return position;
     }
\ No newline at end of file
