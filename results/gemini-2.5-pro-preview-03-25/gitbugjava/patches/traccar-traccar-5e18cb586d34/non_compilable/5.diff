diff --git a/tmp/90143e1d-1786-4e79-9f00-735084c15680_buggy.java b/tmp/d966170a-0f5b-446a-b5a1-d918c2f9edfe_fixed.java
index e883360..035a9ac 100644
--- a/tmp/90143e1d-1786-4e79-9f00-735084c15680_buggy.java
+++ b/tmp/d966170a-0f5b-446a-b5a1-d918c2f9edfe_fixed.java
@@ -1,196 +1,611 @@
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
-        String[] values = sentence.split(",");
+        // Use limit -1 to preserve trailing empty strings, crucial for index-based access
+        String[] values = sentence.split(",", -1);
 
         index += 1; // header
         index += 1; // protocol version
 
+        // Ensure index is safe before accessing values[index] for device ID
+        if (index < values.length) {
             DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
+            if (deviceSession == null) {
+                 // Log or handle missing device session appropriately
+                 // Returning null might be expected in some contexts
+                 return null;
+            }
             position.setDeviceId(deviceSession.getDeviceId());
+        } else {
+             throw new ParseException("Sentence too short for device ID", index);
+        }
+
+        index += 1; // device name (skip)
+        index += 1; // report type (skip)
+        index += 1; // canbus state (skip)
+
+        long reportMask = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                reportMask = Long.parseLong(values[index], 16);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Invalid report mask: " + values[index], index);
+            }
+        } else if (index >= values.length) {
+             throw new ParseException("Sentence too short for report mask", index);
+        }
+        // If mask is empty, reportMask remains 0, proceed normally
+        index++; // Consume report mask field position
 
-        index += 1; // device name
-        index += 1; // report type
-        index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
         long reportMaskExt = 0;
 
-        if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+        // --- Start parsing based on reportMask ---
+        // The key change is to always increment the index if the corresponding bit is set,
+        // but only attempt to parse/use the value if it's actually present and non-empty.
+
+        if (BitUtil.check(reportMask, 0)) { // VIN
+            if (index < values.length) {
+                position.set(Position.KEY_VIN, values[index]); // VIN is a String, empty is acceptable
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 1)) { // IGNITION
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_IGNITION, Integer.parseInt(value) > 0);
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                } else {
+                    position.set(Position.KEY_IGNITION, false); // Assume false if empty
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 2)) { // OBD_ODOMETER
+             if (index < values.length) {
+                 position.set(Position.KEY_OBD_ODOMETER, values[index]); // Stored as String in original
+             }
+             index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 3)) { // FUEL_USED
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_FUEL_USED, Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        // Bit 4 (OBD_SPEED) is processed after Bit 5 (RPM) in original code, maintain order
+        if (BitUtil.check(reportMask, 5)) { // RPM
+             if (index < values.length) {
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                     try {
+                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                     } catch (NumberFormatException e) { /* Log error or ignore */ }
+                 }
+             }
+             index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 4)) { // OBD_SPEED
+             if (index < values.length) {
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                     try {
+                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                     } catch (NumberFormatException e) { /* Log error or ignore */ }
+                 }
+             }
+             index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 6)) { // COOLANT_TEMP
+             if (index < values.length) {
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                     try {
+                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                     } catch (NumberFormatException e) { /* Log error or ignore */ }
+                 }
+             }
+             index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 7)) { // FUEL_CONSUMPTION
+            if (index < values.length) {
+                String value = values[index];
+                 // Original code used substring(1) - check for potential prefix
+                if (!value.isEmpty() && value.length() > 0 && (value.startsWith("H") || value.startsWith("P"))) {
+                    try {
+                        position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(value.substring(1)));
+                    } catch (NumberFormatException | IndexOutOfBoundsException e) { /* Log error or ignore */ }
+                } else if (!value.isEmpty()) { // Attempt direct parse if no prefix or different format
+                     try {
+                        position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(value));
+                     } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 8)) { // FUEL_LEVEL
+            if (index < values.length) {
+                String value = values[index];
+                 // Original code used substring(1) - check for potential prefix
+                 if (!value.isEmpty() && value.length() > 0 && (value.startsWith("H") || value.startsWith("P"))) {
+                     try {
+                         position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(value.substring(1)));
+                     } catch (NumberFormatException | IndexOutOfBoundsException e) { /* Log error or ignore */ }
+                 } else if (!value.isEmpty()) { // Attempt direct parse
+                      try {
+                         position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(value));
+                      } catch (NumberFormatException e) { /* Log error or ignore */ }
+                 }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 9)) { // range
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("range", Long.parseLong(value) * 100);
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 10)) { // THROTTLE
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 11)) { // HOURS
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(value)));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 12)) { // DRIVING_TIME
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 13)) { // idleHours
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("idleHours", Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
                 }
-        if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
             }
-        if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+            index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 14)) { // idleFuelConsumption
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("idleFuelConsumption", Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 15)) { // AXLE_WEIGHT
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 16)) { // tachographInfo
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("tachographInfo", Integer.parseInt(value, 16));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 17)) { // indicators
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("indicators", Integer.parseInt(value, 16));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 18)) { // lights
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("lights", Integer.parseInt(value, 16));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 19)) { // doors
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("doors", Integer.parseInt(value, 16));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 20)) { // vehicleOverspeed
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("vehicleOverspeed", Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
+                }
+            }
+            index++; // Consume field position
+        }
+        if (BitUtil.check(reportMask, 21)) { // engineOverspeed
+             if (index < values.length) {
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                     try {
+                         position.set("engineOverspeed", Double.parseDouble(value));
+                     } catch (NumberFormatException e) { /* Log error or ignore */ }
+                 }
+             }
+             index++; // Consume field position
+        }
+
+        // Skip fields for bits 22-28 if they are set
+        for (int i = 22; i <= 28; i++) {
+             if (BitUtil.check(reportMask, i)) {
+                 index++; // Consume field position, check bounds implicitly by loop/index logic
+             }
+        }
+
+        if (BitUtil.check(reportMask, 29)) { // reportMaskExt Present
+            if (index < values.length) { // Check bounds before accessing
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                      try {
+                          reportMaskExt = Long.parseLong(value, 16);
+                      } catch (NumberFormatException e) { /* Log error or ignore */ }
+                 }
+            }
+             index++; // Consume field position
+        }
+
+        // --- Start parsing based on reportMaskExt ---
+
+        if (BitUtil.check(reportMaskExt, 0)) { // adBlueLevel
+             if (index < values.length) {
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                     try {
+                         position.set("adBlueLevel", Integer.parseInt(value));
+                     } catch (NumberFormatException e) { /* Log error or ignore */ }
                  }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
              }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 1)) { // axleWeight1
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("axleWeight1", Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
                 }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
             }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+            index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+        if (BitUtil.check(reportMaskExt, 2)) { // axleWeight3 (Note: original comment might imply bit 2 maps to axleWeight3)
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("axleWeight3", Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
                 }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
             }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+            index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        if (BitUtil.check(reportMaskExt, 3)) { // axleWeight4
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set("axleWeight4", Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
                 }
-        if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
             }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+            index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 4)) { // tachograph overspeed (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMaskExt, 5)) { // tachograph motion (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMaskExt, 6)) { // tachograph direction (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMaskExt, 7)) { // ADC 1
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    try {
+                        position.set(Position.PREFIX_ADC + 1, Integer.parseInt(value) * 0.001);
+                    } catch (NumberFormatException e) { /* Log error or ignore */ }
                 }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
             }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+            index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 8)) { // pedal breaking factor (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+        if (BitUtil.check(reportMaskExt, 9)) { // engine breaking factor (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 10)) { // total accelerator kick-downs (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 11)) { // total effective engine speed (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 12)) { // total cruise control time (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 13)) { // total accelerator kick-down time (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
+        if (BitUtil.check(reportMaskExt, 14)) { // total brake application (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 5)) {
-            index += 1; // tachograph motion
+        if (BitUtil.check(reportMaskExt, 15)) { // driver1Card
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    position.set("driver1Card", value);
                 }
-        if (BitUtil.check(reportMaskExt, 6)) {
-            index += 1; // tachograph direction
             }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+            index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 8)) {
-            index += 1; // pedal breaking factor
+        if (BitUtil.check(reportMaskExt, 16)) { // driver2Card
+             if (index < values.length) {
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                     position.set("driver2Card", value);
                  }
-        if (BitUtil.check(reportMaskExt, 9)) {
-            index += 1; // engine breaking factor
              }
-        if (BitUtil.check(reportMaskExt, 10)) {
-            index += 1; // total accelerator kick-downs
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 11)) {
-            index += 1; // total effective engine speed
+        if (BitUtil.check(reportMaskExt, 17)) { // driver1Name
+             if (index < values.length) {
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                     position.set("driver1Name", value);
                  }
-        if (BitUtil.check(reportMaskExt, 12)) {
-            index += 1; // total cruise control time
              }
-        if (BitUtil.check(reportMaskExt, 13)) {
-            index += 1; // total accelerator kick-down time
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 14)) {
-            index += 1; // total brake application
+        if (BitUtil.check(reportMaskExt, 18)) { // driver2Name
+             if (index < values.length) {
+                 String value = values[index];
+                 if (!value.isEmpty()) {
+                     position.set("driver2Name", value);
                  }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
              }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 19)) { // registration
+            if (index < values.length) {
+                String value = values[index];
+                if (!value.isEmpty()) {
+                    position.set("registration", value);
                 }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
             }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+            index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 20)) {
-            index += 1; // expansion information
+        if (BitUtil.check(reportMaskExt, 20)) { // expansion information (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 21)) {
-            index += 1; // rapid brakings
+        if (BitUtil.check(reportMaskExt, 21)) { // rapid brakings (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 22)) {
-            index += 1; // rapid accelerations
+        if (BitUtil.check(reportMaskExt, 22)) { // rapid accelerations (skip content)
+             index++; // Consume field position
         }
-        if (BitUtil.check(reportMaskExt, 23)) {
-            index += 1; // engine torque
+        if (BitUtil.check(reportMaskExt, 23)) { // engine torque (skip content)
+             index++; // Consume field position
         }
 
+        // --- Location Data ---
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
-                index += 1;
-            }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
-                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
-                position.setTime(dateFormat.parse(values[index++]));
+            // If bit 30 is set, expect 7 fields: validity, speed, course, altitude, longitude, latitude, time
+            boolean locationAvailable = false;
+            boolean validityParsed = false;
+
+            // Field 1: Validity
+            if (index < values.length) {
+                String validityValue = values[index];
+                if (!validityValue.isEmpty()) {
+                    try {
+                        position.setValid(Integer.parseInt(validityValue) > 0);
+                        validityParsed = true;
+                    } catch (NumberFormatException e) { position.setValid(false); /* Log error */ }
                 } else {
-                index += 6; // no location
-                getLastLocation(position, null);
+                    position.setValid(false); // Empty validity means invalid
                 }
             } else {
+                position.setValid(false); // Missing validity means invalid
+            }
+            index++; // Consume validity field position
+
+            // Field 2: Speed
+            if (index < values.length) {
+                String speedValue = values[index];
+                if (!speedValue.isEmpty()) {
+                    try {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedValue)));
+                        locationAvailable = true; // Location is available only if speed parses correctly
+                    } catch (NumberFormatException e) { /* Log error */ locationAvailable = false; }
+                }
+                // If speed is empty, locationAvailable remains false
+            }
+            index++; // Consume speed field position
+
+            // Field 3: Course
+            if (index < values.length) {
+                if (locationAvailable) { // Only parse if speed was present and valid
+                    String courseValue = values[index];
+                    if (!courseValue.isEmpty()) {
+                        try {
+                            position.setCourse(Integer.parseInt(courseValue));
+                        } catch (NumberFormatException e) { /* Log error */ }
+                    }
+                }
+            }
+            index++; // Consume course field position
+
+            // Field 4: Altitude
+            if (index < values.length) {
+                if (locationAvailable) {
+                     String altitudeValue = values[index];
+                     if (!altitudeValue.isEmpty()) {
+                         try {
+                             position.setAltitude(Double.parseDouble(altitudeValue));
+                         } catch (NumberFormatException e) { /* Log error */ }
+                     }
+                }
+            }
+            index++; // Consume altitude field position
+
+            // Field 5: Longitude
+            if (index < values.length) {
+                 if (locationAvailable) {
+                     String longitudeValue = values[index];
+                     if (!longitudeValue.isEmpty()) {
+                         try {
+                             position.setLongitude(Double.parseDouble(longitudeValue));
+                         } catch (NumberFormatException e) { /* Log error */ }
+                     }
+                 }
+            }
+            index++; // Consume longitude field position
+
+            // Field 6: Latitude
+            if (index < values.length) {
+                 if (locationAvailable) {
+                     String latitudeValue = values[index];
+                     if (!latitudeValue.isEmpty()) {
+                         try {
+                             position.setLatitude(Double.parseDouble(latitudeValue));
+                         } catch (NumberFormatException e) { /* Log error */ }
+                     }
+                 }
+            }
+            index++; // Consume latitude field position
+
+            // Field 7: Time
+            if (index < values.length) {
+                if (locationAvailable) {
+                    String timeValue = values[index];
+                    if (!timeValue.isEmpty()) {
+                        try {
+                            position.setTime(dateFormat.parse(timeValue));
+                        } catch (ParseException e) { /* Log error */ }
+                    }
+                }
+            }
+            index++; // Consume time field position
+
+            // If location wasn't available use last known location, but only if validity was determined
+            if (!locationAvailable && validityParsed) {
+                 getLastLocation(position, null);
+            } else if (!validityParsed) {
+                 // If validity was missing/invalid, use last location
+                 getLastLocation(position, null);
+            }
+
+        } else { // Bit 30 not set
             getLastLocation(position, null);
         }
 
+        // --- Cell Info ---
         if (BitUtil.check(reportMask, 31)) {
-            index += 4; // cell
-            index += 1; // reserved
+             // Skip 4 cell fields + 1 reserved field
+             index += 5; // Consume 5 field positions
         }
 
-        if (ignoreFixTime) {
-            position.setTime(dateFormat.parse(values[index]));
+        // --- Device Time ---
+        // This is the last field according to many test cases
+        if (index < values.length && !values[index].isEmpty()) {
+            Date deviceTime = null;
+            try {
+                 deviceTime = dateFormat.parse(values[index]);
+            } catch (ParseException e) { /* Log error */ }
+
+            if (deviceTime != null) {
+                 Date fixTime = position.getFixTime();
+                 // Heuristic to ignore device time if it's too different from fix time
+                 if (fixTime != null && Math.abs(deviceTime.getTime() - fixTime.getTime()) > 3 * 60 * 60 * 1000) {
+                     // Log potentially inaccurate device time? Or just ignore? Currently ignores.
+                 } else if (ignoreFixTime || fixTime == null) {
+                     // Use device time as fix time if ignoreFixTime is true or fix time is missing
+                     position.setTime(deviceTime);
                  } else {
-            position.setDeviceTime(dateFormat.parse(values[index]));
+                     // Otherwise, set it as separate device time
+                     position.setDeviceTime(deviceTime);
+                 }
+            }
+        }
+        // Do not increment index here as it's the last expected field
+
+        // If position time is still null (e.g., no GPS and no usable device time), set to reception time.
+        if (position.getFixTime() == null) {
+            getLastLocation(position, new Date()); // Use last location but update time to now
+            if (position.getFixTime() == null) { // If getLastLocation didn't set time
+                position.setTime(new Date());
+            }
         }
 
         return position;
     }
\ No newline at end of file
