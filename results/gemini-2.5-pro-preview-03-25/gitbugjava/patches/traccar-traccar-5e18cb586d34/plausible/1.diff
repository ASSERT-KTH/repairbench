diff --git a/tmp/fb452320-728b-41e3-be90-832bf11cf99f_buggy.java b/tmp/b8f46af9-037f-4516-8772-f2af51b59db4_fixed.java
index e883360..538f2cd 100644
--- a/tmp/fb452320-728b-41e3-be90-832bf11cf99f_buggy.java
+++ b/tmp/b8f46af9-037f-4516-8772-f2af51b59db4_fixed.java
@@ -1,196 +1,343 @@
     private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
         Position position = new Position(getProtocolName());
 
         int index = 0;
         String[] values = sentence.split(",");
 
         index += 1; // header
         index += 1; // protocol version
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         position.setDeviceId(deviceSession.getDeviceId());
 
         index += 1; // device name
         index += 1; // report type
         index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+        long reportMask = 0;
+        // Check if the report mask field exists and is not empty before parsing
+        if (index < values.length && !values[index].isEmpty()) {
+            reportMask = Long.parseLong(values[index], 16);
+        }
+        index++; // Always increment index for the report mask field position
+
         long reportMaskExt = 0;
 
         if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+            position.set(Position.KEY_VIN, values[index++]); // VIN is string, no parse needed
         }
         if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+            // Check for empty string before parsing integer
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);
+            }
+            index++; // Increment index for ignition field position
         }
         if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+            position.set(Position.KEY_OBD_ODOMETER, values[index++]); // Odometer might be stored as string initially
         }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 3)) {
+            // Check for empty string before parsing double
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));
             }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+            index++; // Increment index for fuel used field position
         }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+        if (BitUtil.check(reportMask, 5)) {
+            // Check for empty string before parsing integer
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_RPM, Integer.parseInt(values[index]));
             }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+            index++; // Increment index for RPM field position
         }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+        if (BitUtil.check(reportMask, 4)) {
+            // Check for empty string before parsing integer
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
             }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+            index++; // Increment index for OBD speed field position
         }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+        if (BitUtil.check(reportMask, 6)) {
+            // Check for empty string before parsing integer
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));
             }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+            index++; // Increment index for coolant temp field position
         }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+        if (BitUtil.check(reportMask, 7)) {
+            // Check for empty string and length before parsing double
+            if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index].substring(1)));
+            }
+            index++; // Increment index for fuel consumption field position
+        }
+        if (BitUtil.check(reportMask, 8)) {
+            // Check for empty string and length before parsing double
+            if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index].substring(1)));
+            }
+            index++; // Increment index for fuel level field position
+        }
+        if (BitUtil.check(reportMask, 9)) {
+            // Check for empty string before parsing long
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("range", Long.parseLong(values[index]) * 100);
+            }
+            index++; // Increment index for range field position
+        }
+        if (BitUtil.check(reportMask, 10)) {
+            // Check for empty string before parsing integer
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));
+            }
+            index++; // Increment index for throttle field position
+        }
+        if (BitUtil.check(reportMask, 11)) {
+            // Check for empty string before parsing double
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));
+            }
+            index++; // Increment index for hours field position
         }
         if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+            // Check for empty string before parsing double
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));
+            }
+            index++; // Increment index for driving time field position
         }
         if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+            // Check for empty string before parsing double
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("idleHours", Double.parseDouble(values[index]));
             }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+            index++; // Increment index for idle hours field position
         }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMask, 14)) {
+            // Check for empty string before parsing double
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("idleFuelConsumption", Double.parseDouble(values[index]));
             }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+            index++; // Increment index for idle fuel consumption field position
         }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 15)) {
+            // Check for empty string before parsing integer
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));
             }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+            index++; // Increment index for axle weight field position
         }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+        if (BitUtil.check(reportMask, 16)) {
+            // Check for empty string before parsing integer (hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("tachographInfo", Integer.parseInt(values[index], 16));
             }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+            index++; // Increment index for tachograph info field position
         }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+        if (BitUtil.check(reportMask, 17)) {
+             // Check for empty string before parsing integer (hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("indicators", Integer.parseInt(values[index], 16));
             }
+            index++; // Increment index for indicators field position
+        }
+        if (BitUtil.check(reportMask, 18)) {
+            // Check for empty string before parsing integer (hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("lights", Integer.parseInt(values[index], 16));
+            }
+            index++; // Increment index for lights field position
+        }
+        if (BitUtil.check(reportMask, 19)) {
+            // Check for empty string before parsing integer (hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("doors", Integer.parseInt(values[index], 16));
+            }
+            index++; // Increment index for doors field position
+        }
+        if (BitUtil.check(reportMask, 20)) {
+            // Check for empty string before parsing double
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("vehicleOverspeed", Double.parseDouble(values[index]));
+            }
+            index++; // Increment index for vehicle overspeed field position
+        }
+        if (BitUtil.check(reportMask, 21)) {
+            // Check for empty string before parsing double
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("engineOverspeed", Double.parseDouble(values[index]));
+            }
+            index++; // Increment index for engine overspeed field position
+        }
+
+        // Bits 22-28 are skipped in the original code too
+
         if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+            // Check for empty string before parsing long (hex)
+            if (index < values.length && !values[index].isEmpty()) {
+                reportMaskExt = Long.parseLong(values[index], 16);
             }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+            index++; // Increment index for report mask ext field position
         }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
+
+        // Process extended mask fields
+        if (BitUtil.check(reportMaskExt, 0)) {
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("adBlueLevel", Integer.parseInt(values[index]));
             }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
+        if (BitUtil.check(reportMaskExt, 1)) {
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("axleWeight1", Integer.parseInt(values[index]));
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 2)) {
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("axleWeight3", Integer.parseInt(values[index]));
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 3)) {
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("axleWeight4", Integer.parseInt(values[index]));
+            }
+            index++;
         }
         if (BitUtil.check(reportMaskExt, 4)) {
             index += 1; // tachograph overspeed
         }
         if (BitUtil.check(reportMaskExt, 5)) {
             index += 1; // tachograph motion
         }
         if (BitUtil.check(reportMaskExt, 6)) {
             index += 1; // tachograph direction
         }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+        if (BitUtil.check(reportMaskExt, 7)) {
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001);
+            }
+            index++;
         }
         if (BitUtil.check(reportMaskExt, 8)) {
             index += 1; // pedal breaking factor
         }
         if (BitUtil.check(reportMaskExt, 9)) {
             index += 1; // engine breaking factor
         }
         if (BitUtil.check(reportMaskExt, 10)) {
             index += 1; // total accelerator kick-downs
         }
         if (BitUtil.check(reportMaskExt, 11)) {
             index += 1; // total effective engine speed
         }
         if (BitUtil.check(reportMaskExt, 12)) {
             index += 1; // total cruise control time
         }
         if (BitUtil.check(reportMaskExt, 13)) {
             index += 1; // total accelerator kick-down time
         }
         if (BitUtil.check(reportMaskExt, 14)) {
             index += 1; // total brake application
         }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 15)) {
+            if (index < values.length) {
+                position.set("driver1Card", values[index]); // String, no parse
             }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 16)) {
+            if (index < values.length) {
+                position.set("driver2Card", values[index]); // String, no parse
             }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
+            index++;
         }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+        if (BitUtil.check(reportMaskExt, 17)) {
+            if (index < values.length) {
+                position.set("driver1Name", values[index]); // String, no parse
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 18)) {
+            if (index < values.length) {
+                position.set("driver2Name", values[index]); // String, no parse
+            }
+            index++;
+        }
+        if (BitUtil.check(reportMaskExt, 19)) {
+             if (index < values.length) {
+                 position.set("registration", values[index]); // String, no parse
+             }
+            index++;
         }
         if (BitUtil.check(reportMaskExt, 20)) {
             index += 1; // expansion information
         }
         if (BitUtil.check(reportMaskExt, 21)) {
             index += 1; // rapid brakings
         }
         if (BitUtil.check(reportMaskExt, 22)) {
             index += 1; // rapid accelerations
         }
         if (BitUtil.check(reportMaskExt, 23)) {
             index += 1; // engine torque
         }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
+            // Skip initial empty fields before GPS validity
+            while (index < values.length && values[index].isEmpty()) {
                 index += 1;
             }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
+            // Parse validity if present and not empty
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setValid(Integer.parseInt(values[index]) > 0);
+            }
+            index++; // Consume validity field index
+
+            // Check if speed field exists and is not empty
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
-                position.setTime(dateFormat.parse(values[index++]));
+                if (index < values.length && !values[index].isEmpty()) { // Course
+                    position.setCourse(Integer.parseInt(values[index]));
+                } index++;
+                if (index < values.length && !values[index].isEmpty()) { // Altitude
+                    position.setAltitude(Double.parseDouble(values[index]));
+                } index++;
+                if (index < values.length && !values[index].isEmpty()) { // Longitude
+                    position.setLongitude(Double.parseDouble(values[index]));
+                } index++;
+                if (index < values.length && !values[index].isEmpty()) { // Latitude
+                    position.setLatitude(Double.parseDouble(values[index]));
+                } index++;
+                if (index < values.length && !values[index].isEmpty()) { // Time
+                    position.setTime(dateFormat.parse(values[index]));
+                } index++;
             } else {
-                index += 6; // no location
+                // Speed field was empty or missing, skip all 6 location fields
+                index += 6;
                 getLastLocation(position, null);
             }
         } else {
             getLastLocation(position, null);
         }
 
         if (BitUtil.check(reportMask, 31)) {
             index += 4; // cell
             index += 1; // reserved
         }
 
+        // Final time field
+        if (index < values.length && !values[index].isEmpty()) {
             if (ignoreFixTime) {
                 position.setTime(dateFormat.parse(values[index]));
             } else {
                 position.setDeviceTime(dateFormat.parse(values[index]));
             }
+        }
+        // Don't increment index here as it's the last expected field in this logic path
 
         return position;
     }
\ No newline at end of file
