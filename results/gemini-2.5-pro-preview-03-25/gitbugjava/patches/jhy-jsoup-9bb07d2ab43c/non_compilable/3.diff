diff --git a/tmp/a606a5e1-6060-4a84-be78-7e9a36950f2c_buggy.java b/tmp/0c591abd-b759-4fcc-b82b-b66ae389d460_fixed.java
index dcc36a4..ee50ca3 100644
--- a/tmp/a606a5e1-6060-4a84-be78-7e9a36950f2c_buggy.java
+++ b/tmp/0c591abd-b759-4fcc-b82b-b66ae389d460_fixed.java
@@ -1,12 +1,18 @@
     protected void replaceChild(Node out, Node in) {
-        Validate.isTrue(out.parentNode == this);
+        // If the node to replace is the same as the replacement node, do nothing.
+        if (out == in)
+            return;
+
+        Validate.isTrue(out.parentNode == this, "Node is not a child of this node.");
         Validate.notNull(in);
         if (in.parentNode != null)
-            in.parentNode.removeChild(in);
+            in.parentNode.removeChild(in); // Remove 'in' from its current parent first.
 
-        final int index = out.siblingIndex;
-        ensureChildNodes().set(index, in);
-        in.parentNode = this;
-        in.setSiblingIndex(index);
-        out.parentNode = null;
+        final int index = out.siblingIndex; // Get the index of the node being replaced.
+        ensureChildNodes().set(index, in);  // Replace 'out' with 'in' in the child node list.
+        in.parentNode = this;               // Set the parent of 'in'.
+        in.setSiblingIndex(index);          // Set the sibling index of 'in'.
+        if (out.parentNode != null) {       // If out still has a parent (should be this node before replacement)
+            out.parentNode = null;          // Nullify 'out's parent link after replacement.
+        }
     }
\ No newline at end of file
