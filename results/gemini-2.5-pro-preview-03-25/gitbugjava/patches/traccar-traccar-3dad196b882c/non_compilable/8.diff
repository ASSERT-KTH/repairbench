diff --git a/tmp/fbe0ff51-caf8-47b1-a844-ad12535fa073_buggy.java b/tmp/0123f34c-f93d-4977-9dc0-3646cdb8a417_fixed.java
index c6164f1..a7e1a4d 100644
--- a/tmp/fbe0ff51-caf8-47b1-a844-ad12535fa073_buggy.java
+++ b/tmp/0123f34c-f93d-4977-9dc0-3646cdb8a417_fixed.java
@@ -1,116 +1,180 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
+        try {
             DateBuilder dateBuilder = new DateBuilder()
                     .setYear(Integer.parseInt(time.substring(0, 2)))
                     .setMonth(Integer.parseInt(time.substring(2, 4)))
                     .setDay(Integer.parseInt(time.substring(4, 6)))
                     .setHour(Integer.parseInt(time.substring(6, 8)))
                     .setMinute(Integer.parseInt(time.substring(8, 10)))
                     .setSecond(Integer.parseInt(time.substring(10, 12)));
             position.setTime(dateBuilder.getDate());
+        } catch (NumberFormatException e) {
+            // Handle invalid time format if necessary, maybe log and return null
+             return null; // Or log the error and continue without time
+        }
+
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        // Loop while there are at least 4 bytes for subtype and length fields
+        while (buf.readableBytes() >= 4) {
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int rawLength = buf.readUnsignedShort(); // This is the total length including subtype and length fields
+            int length = rawLength - 4; // This is the length of the data part
+
+            // Check 1: Data length must be non-negative
+            if (length < 0) {
+                // Invalid length field value, indicates corruption or protocol error. Stop processing.
+                break;
+            }
+
+            // Check 2: Buffer must contain enough bytes for the data part
+            if (buf.readableBytes() < length) {
+                // Not enough data in the buffer for the specified length. Stop processing.
+                break;
+            }
+
+            // Now it's safe to read/skip 'length' bytes
             switch (subtype) {
                 case 0x0001:
+                    if (length >= 12) { // Ensure minimum required data exists
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
-                    if (rpm <= 65535) {
+                        // if (rpm <= 65535) { // always true for unsigned short
                         position.set(Position.KEY_RPM, rpm);
-                    }
+                        // }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
+                        // Skip any extra bytes declared by length but not read
+                        buf.skipBytes(length - 12);
+                    } else {
+                         buf.skipBytes(length); // Skip the declared bytes if length is insufficient
+                    }
                     break;
                 case 0x0005:
+                    if (length >= 6) { // Ensure minimum required data exists
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                        buf.skipBytes(length - 6); // Skip extra bytes
+                    } else {
+                        buf.skipBytes(length); // Skip if insufficient
+                    }
                     break;
                 case 0x0009:
+                    // readCharSequence consumes exactly 'length' bytes
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                    if (length >= 4) { // Ensure minimum required data exists
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                        buf.skipBytes(length - 4); // Skip extra bytes
+                    } else {
+                        buf.skipBytes(length); // Skip if insufficient
+                    }
                     break;
                 case 0x0014:
+                     if (length >= 6) { // Ensure minimum required data exists
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                        buf.skipBytes(length - 6); // Skip extra bytes
+                     } else {
+                         buf.skipBytes(length); // Skip if insufficient
+                     }
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    try {
+                        // readCharSequence consumes exactly 'length' bytes
+                        String cellsText = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        String[] cells = cellsText.split("\\+");
                         for (String cell : cells) {
+                            if (cell.isEmpty()) {
+                                continue;
+                            }
                             String[] values = cell.split("@");
+                            if (values.length == 4) {
                                 network.addCellTower(CellTower.from(
                                         Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                         Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                             }
+                        }
+                    } catch (Exception e) {
+                        // Log parsing error or ignore, buffer position already advanced
+                    }
                     break;
                 case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    try {
+                        // readCharSequence consumes exactly 'length' bytes
+                        String pointsText = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        String[] points = pointsText.split("\\+");
                         for (String point : points) {
+                             if (point.isEmpty()) {
+                                 continue;
+                             }
                             String[] values = point.split("@");
+                            if (values.length == 2) {
                                 network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                             }
+                        }
+                    } catch (Exception e) {
+                        // Log parsing error or ignore, buffer position already advanced
+                    }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    buf.skipBytes(length); // Skip data for unknown or unhandled subtypes
                     break;
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
