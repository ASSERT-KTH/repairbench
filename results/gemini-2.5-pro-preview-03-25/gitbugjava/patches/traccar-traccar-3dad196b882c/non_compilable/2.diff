diff --git a/tmp/a5718546-7043-412b-96f4-b0e480e1384e_buggy.java b/tmp/b75b9439-36a5-4152-b16f-7c696b04055e_fixed.java
index c6164f1..44d246d 100644
--- a/tmp/a5718546-7043-412b-96f4-b0e480e1384e_buggy.java
+++ b/tmp/b75b9439-36a5-4152-b16f-7c696b04055e_fixed.java
@@ -1,116 +1,194 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
+        try {
             DateBuilder dateBuilder = new DateBuilder()
                     .setYear(Integer.parseInt(time.substring(0, 2)))
                     .setMonth(Integer.parseInt(time.substring(2, 4)))
                     .setDay(Integer.parseInt(time.substring(4, 6)))
                     .setHour(Integer.parseInt(time.substring(6, 8)))
                     .setMinute(Integer.parseInt(time.substring(8, 10)))
                     .setSecond(Integer.parseInt(time.substring(10, 12)));
             position.setTime(dateBuilder.getDate());
+        } catch (NumberFormatException e) {
+            // Ignore invalid time format
+        }
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() >= 4) { // Need at least 4 bytes for subtype and length
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int totalLength = buf.readUnsignedShort();
+            int payloadLength = totalLength - 4;
+
+            // Check 1: Ensure payloadLength is non-negative
+            if (payloadLength < 0) {
+                // Invalid length field value, indicates corrupted data
+                break; // Stop processing further blocks
+            }
+
+            // Check 2: Ensure enough bytes are available for the payload
+            if (buf.readableBytes() < payloadLength) {
+                // Not enough data for the declared payload length, buffer might be truncated.
+                break; // Stop processing further blocks
+            }
+
+            // Now it's safe to read/skip payloadLength bytes
             switch (subtype) {
                 case 0x0001:
+                    // Fixed size expected: 15 bytes
+                    if (payloadLength >= 15) {
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
+                        // Skip any extra bytes beyond the expected 15 if payloadLength > 15
+                        if (payloadLength > 15) {
+                           buf.skipBytes(payloadLength - 15);
+                        }
+                    } else {
+                       // Declared length is too short for this type, skip the declared bytes
+                       buf.skipBytes(payloadLength);
+                    }
                     break;
                 case 0x0005:
+                    // Fixed size expected: 6 bytes
+                    if (payloadLength >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                        // Skip any extra bytes beyond the expected 6 if payloadLength > 6
+                        if (payloadLength > 6) {
+                            buf.skipBytes(payloadLength - 6);
+                        }
+                    } else {
+                         buf.skipBytes(payloadLength);
+                    }
                     break;
                 case 0x0009:
+                    // Variable size based on payloadLength
                     position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                            Position.KEY_VIN, buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                    // Fixed size expected: 4 bytes
+                    if (payloadLength >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                        // Skip any extra bytes beyond the expected 4 if payloadLength > 4
+                        if (payloadLength > 4) {
+                            buf.skipBytes(payloadLength - 4);
+                        }
+                    } else {
+                        buf.skipBytes(payloadLength);
+                    }
                     break;
                 case 0x0014:
+                    // Fixed size expected: 6 bytes
+                     if (payloadLength >= 6) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                        // Skip any extra bytes beyond the expected 6 if payloadLength > 6
+                        if (payloadLength > 6) {
+                            buf.skipBytes(payloadLength - 6);
+                        }
+                     } else {
+                         buf.skipBytes(payloadLength);
+                     }
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    // Variable size based on payloadLength
+                    String cellsText = buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString();
+                    String[] cells = cellsText.split("\\+");
                     for (String cell : cells) {
+                        if (cell.isEmpty()) {
+                            continue; // Avoid errors on empty strings (e.g., trailing '+')
+                        }
                         String[] values = cell.split("@");
+                        if (values.length >= 4) {
+                            try {
                                 network.addCellTower(CellTower.from(
                                         Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                         Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+                                // Log or ignore parsing error for malformed cell data
+                            }
+                        }
                     }
                     break;
                 case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    // Variable size based on payloadLength
+                    String pointsText = buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString();
+                    String[] points = pointsText.split("\\+");
                     for (String point : points) {
+                        if (point.isEmpty()) {
+                             continue; // Avoid errors on empty strings
+                        }
                         String[] values = point.split("@");
+                        if (values.length >= 2) {
+                            try {
                                 network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+                                // Log or ignore parsing error for malformed wifi data
+                            }
+                        }
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    // Unknown subtype, skip the payload
+                    buf.skipBytes(payloadLength);
                     break;
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
