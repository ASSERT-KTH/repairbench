diff --git a/tmp/a1e46d1d-d061-43b0-b33d-5da8c53586db_buggy.java b/tmp/67cd69c4-935c-4651-8270-6106a6ba351d_fixed.java
index c6164f1..300f492 100644
--- a/tmp/a1e46d1d-d061-43b0-b33d-5da8c53586db_buggy.java
+++ b/tmp/67cd69c4-935c-4651-8270-6106a6ba351d_fixed.java
@@ -1,116 +1,194 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
-
+        try {
             DateBuilder dateBuilder = new DateBuilder()
                     .setYear(Integer.parseInt(time.substring(0, 2)))
                     .setMonth(Integer.parseInt(time.substring(2, 4)))
                     .setDay(Integer.parseInt(time.substring(4, 6)))
                     .setHour(Integer.parseInt(time.substring(6, 8)))
                     .setMinute(Integer.parseInt(time.substring(8, 10)))
                     .setSecond(Integer.parseInt(time.substring(10, 12)));
             position.setTime(dateBuilder.getDate());
+        } catch (NumberFormatException e) {
+            // Log is typically available in Traccar decoders via a static field or BaseProtocolDecoder
+            // Log.warning("Failed to parse time: " + time, e);
+            // Continue processing without time if parsing fails
+        }
+
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        // Loop condition changed to >= 4 to handle blocks with only header
+        while (buf.readableBytes() >= 4) {
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int totalLength = buf.readUnsignedShort(); // Assume this is the total length of the block (header + data)
+            int length = totalLength - 4; // Calculate data payload length
+
+            // Check 1: Ensure totalLength is valid (>= 4), which means length >= 0
+            if (length < 0) {
+                 // Log.warning("Invalid data block length detected. Total length: " + totalLength + ", subtype: " + subtype + ". Skipping remaining data.");
+                 break; // Stop processing further blocks as length is invalid
+            }
+
+            // Check 2: Ensure buffer has enough readable bytes for the declared payload length
+            if (buf.readableBytes() < length) {
+                 // Log.warning("Buffer underflow detected. Declared data length: " + length
+                 //        + ", available bytes: " + buf.readableBytes() + ", subtype: " + subtype + ". Skipping remaining data.");
+                 break; // Stop processing as message seems truncated/corrupt
+            }
+
+            // Use readSlice to safely isolate the data part of the block
+            // This consumes 'length' bytes from the main buffer 'buf'
+            ByteBuf dataSlice = buf.readSlice(length);
+
+            try {
+                // Process the dataSlice based on subtype
                 switch (subtype) {
                     case 0x0001:
-                    int coolantTemperature = buf.readUnsignedByte() - 40;
+                        // Expected data length is 17 bytes
+                        if (dataSlice.readableBytes() >= 17) {
+                            int coolantTemperature = dataSlice.readUnsignedByte() - 40;
                             if (coolantTemperature <= 215) {
                                 position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                             }
-                    int rpm = buf.readUnsignedShort();
+                            int rpm = dataSlice.readUnsignedShort();
                             if (rpm <= 65535) {
                                 position.set(Position.KEY_RPM, rpm);
                             }
-                    position.set("averageSpeed", buf.readUnsignedByte());
-                    buf.readUnsignedShort(); // interval fuel consumption
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    buf.readUnsignedInt(); // trip id
+                            position.set("averageSpeed", dataSlice.readUnsignedByte());
+                            dataSlice.readUnsignedShort(); // skip interval fuel consumption
+                            position.set(Position.KEY_FUEL_CONSUMPTION, dataSlice.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_ODOMETER_TRIP, dataSlice.readUnsignedShort());
+                            position.set(Position.KEY_POWER, dataSlice.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_FUEL_LEVEL, dataSlice.readUnsignedByte() * 0.4);
+                            dataSlice.readUnsignedInt(); // skip trip id
+                        } else {
+                            // Log.warning("Incorrect data length for subtype 0x0001. Expected >=17, got " + length);
+                        }
+                        // Any remaining bytes in dataSlice are implicitly skipped
                         break;
                     case 0x0005:
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());
-                    buf.readUnsignedInt(); // run time
+                        // Expected data length is 6 bytes
+                        if (dataSlice.readableBytes() >= 6) {
+                            position.set(Position.KEY_RSSI, dataSlice.readUnsignedByte());
+                            position.set(Position.KEY_HDOP, dataSlice.readUnsignedByte());
+                            dataSlice.readUnsignedInt(); // skip run time
+                        } else {
+                            // Log.warning("Incorrect data length for subtype 0x0005. Expected >=6, got " + length);
+                        }
                         break;
                     case 0x0009:
+                        // Variable length, read the whole slice if length > 0
+                        if (length > 0) {
                             position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                                    Position.KEY_VIN, dataSlice.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                        }
                         break;
                     case 0x0011:
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                         // Expected data length is 4 bytes
+                         if (dataSlice.readableBytes() >= 4) {
+                            position.set(Position.KEY_HOURS, dataSlice.readUnsignedInt() * 0.05);
+                         } else {
+                             // Log.warning("Incorrect data length for subtype 0x0011. Expected >=4, got " + length);
+                         }
                         break;
                     case 0x0014:
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
-                    position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
-                    position.set("airTemp", buf.readUnsignedByte() - 40);
-                    position.set("airFlow", buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                         // Expected data length is 6 bytes
+                         if (dataSlice.readableBytes() >= 6) {
+                            position.set(Position.KEY_ENGINE_LOAD, dataSlice.readUnsignedByte() / 255.0);
+                            position.set("timingAdvance", dataSlice.readUnsignedByte() * 0.5);
+                            position.set("airTemp", dataSlice.readUnsignedByte() - 40);
+                            position.set("airFlow", dataSlice.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_THROTTLE, dataSlice.readUnsignedByte() / 255.0);
+                         } else {
+                             // Log.warning("Incorrect data length for subtype 0x0014. Expected >=6, got " + length);
+                         }
                         break;
                     case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                         if (length > 0) {
+                            String cellString = dataSlice.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                            String[] cells = cellString.split("\\+");
                             for (String cell : cells) {
                                 String[] values = cell.split("@");
+                                if (values.length >= 4) {
+                                    try {
                                         network.addCellTower(CellTower.from(
                                                 Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                                 Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                    } catch (NumberFormatException e) {
+                                        // Log.warning("Malformed cell tower number format: " + cell, e);
+                                    }
+                                } else {
+                                    // Log.warning("Malformed cell tower string: " + cell);
+                                }
+                            }
                         }
                         break;
                     case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                        if (length > 0) {
+                            String pointString = dataSlice.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                            String[] points = pointString.split("\\+");
                             for (String point : points) {
                                 String[] values = point.split("@");
+                                if (values.length >= 2) {
+                                     try {
                                         network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                     } catch (NumberFormatException e) {
+                                         // Log.warning("Malformed wifi access point number format: " + point, e);
+                                     }
+                                } else {
+                                     // Log.warning("Malformed wifi access point string: " + point);
+                                }
+                            }
                         }
                         break;
                     default:
-                    buf.skipBytes(length);
+                        // Unknown subtype, dataSlice is implicitly skipped
+                        // Log.warning("Unknown subtype: " + subtype + " with data length " + length);
                         break;
                 }
+            } catch (Exception e) {
+                 // Catch potential exceptions during data processing within a subtype block
+                 // Log.warning("Error processing subtype " + subtype + " with data length " + length, e);
+                 // The slice has already been consumed from the main buffer, so the loop can safely continue
+            }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
