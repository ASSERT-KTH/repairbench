diff --git a/tmp/9dc130f8-2607-40a8-8b27-a83bd9a2355b_buggy.java b/tmp/754513b1-d27a-47c3-99ac-73465767d1a8_fixed.java
index c6164f1..1edbeeb 100644
--- a/tmp/9dc130f8-2607-40a8-8b27-a83bd9a2355b_buggy.java
+++ b/tmp/754513b1-d27a-47c3-99ac-73465767d1a8_fixed.java
@@ -1,116 +1,187 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
+        try {
             DateBuilder dateBuilder = new DateBuilder()
                     .setYear(Integer.parseInt(time.substring(0, 2)))
                     .setMonth(Integer.parseInt(time.substring(2, 4)))
                     .setDay(Integer.parseInt(time.substring(4, 6)))
                     .setHour(Integer.parseInt(time.substring(6, 8)))
                     .setMinute(Integer.parseInt(time.substring(8, 10)))
                     .setSecond(Integer.parseInt(time.substring(10, 12)));
             position.setTime(dateBuilder.getDate());
+        } catch (NumberFormatException e) {
+            // Log warning for invalid date format if necessary
+            // Log.warning("Invalid date format: " + time, e);
+            return null; // Or handle error appropriately
+        }
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        // Loop while there are enough bytes for subtype (2) and length (2)
+        while (buf.readableBytes() >= 4) {
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int totalBlockLength = buf.readUnsignedShort();
+
+            // Validate the block length read from the buffer
+            // It must be at least 4 (subtype + length fields)
+            if (totalBlockLength < 4) {
+                // Invalid block length field. Stop processing further blocks.
+                // Log.warning("Invalid block length: " + totalBlockLength + " for subtype: " + subtype);
+                break;
+            }
+
+            int dataLength = totalBlockLength - 4;
+
+            // Check if the buffer actually contains the declared data length
+            if (buf.readableBytes() < dataLength) {
+                // Declared data length exceeds available bytes. Stop processing.
+                // Log.warning("Buffer underflow for subtype " + subtype + ". Declared data length: " + dataLength
+                //         + ", Available bytes: " + buf.readableBytes());
+                break;
+            }
+
+            // Create a sliced buffer for the data part of the current block
+            // This prevents over-reading in switch cases and handles skipping implicitly
+            ByteBuf dataBuf = buf.readSlice(dataLength);
+
+            try {
                 switch (subtype) {
                     case 0x0001:
-                    int coolantTemperature = buf.readUnsignedByte() - 40;
+                        // Expected data length: 1+2+1+2+2+2+1+4 = 15
+                        if (dataBuf.readableBytes() >= 15) {
+                            int coolantTemperature = dataBuf.readUnsignedByte() - 40;
                             if (coolantTemperature <= 215) {
                                 position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                             }
-                    int rpm = buf.readUnsignedShort();
+                            int rpm = dataBuf.readUnsignedShort();
                             if (rpm <= 65535) {
                                 position.set(Position.KEY_RPM, rpm);
                             }
-                    position.set("averageSpeed", buf.readUnsignedByte());
-                    buf.readUnsignedShort(); // interval fuel consumption
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    buf.readUnsignedInt(); // trip id
+                            position.set("averageSpeed", dataBuf.readUnsignedByte());
+                            dataBuf.readUnsignedShort(); // interval fuel consumption
+                            position.set(Position.KEY_FUEL_CONSUMPTION, dataBuf.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_ODOMETER_TRIP, dataBuf.readUnsignedShort());
+                            position.set(Position.KEY_POWER, dataBuf.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_FUEL_LEVEL, dataBuf.readUnsignedByte() * 0.4);
+                            dataBuf.readUnsignedInt(); // trip id
+                        }
                         break;
                     case 0x0005:
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());
-                    buf.readUnsignedInt(); // run time
+                        // Expected data length: 1+1+4 = 6
+                        if (dataBuf.readableBytes() >= 6) {
+                            position.set(Position.KEY_RSSI, dataBuf.readUnsignedByte());
+                            position.set(Position.KEY_HDOP, dataBuf.readUnsignedByte());
+                            dataBuf.readUnsignedInt(); // run time
+                        }
                         break;
                     case 0x0009:
+                        // Variable length, use dataLength (which is dataBuf.readableBytes())
+                        if (dataBuf.readableBytes() > 0) {
                             position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                                    Position.KEY_VIN, dataBuf.readCharSequence(dataBuf.readableBytes(), StandardCharsets.US_ASCII).toString());
+                        }
                         break;
                     case 0x0011:
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                        // Expected data length: 4
+                        if (dataBuf.readableBytes() >= 4) {
+                            position.set(Position.KEY_HOURS, dataBuf.readUnsignedInt() * 0.05);
+                        }
                         break;
                     case 0x0014:
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
-                    position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
-                    position.set("airTemp", buf.readUnsignedByte() - 40);
-                    position.set("airFlow", buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                        // Expected data length: 1+1+1+2+1 = 6
+                        if (dataBuf.readableBytes() >= 6) {
+                            position.set(Position.KEY_ENGINE_LOAD, dataBuf.readUnsignedByte() / 255.0);
+                            position.set("timingAdvance", dataBuf.readUnsignedByte() * 0.5);
+                            position.set("airTemp", dataBuf.readUnsignedByte() - 40);
+                            position.set("airFlow", dataBuf.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_THROTTLE, dataBuf.readUnsignedByte() / 255.0);
+                        }
                         break;
                     case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                        // Variable length
+                        if (dataBuf.readableBytes() > 0) {
+                            String cellData = dataBuf.readCharSequence(dataBuf.readableBytes(), StandardCharsets.US_ASCII).toString();
+                            String[] cells = cellData.split("\\+");
                             for (String cell : cells) {
                                 String[] values = cell.split("@");
+                                if (values.length >= 4) { // Ensure enough parts after split
+                                    try {
                                         network.addCellTower(CellTower.from(
                                                 Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                                 Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) { // Catch potential errors
+                                        // Log.warning("Failed to parse cell tower data: " + cell, e);
+                                    }
+                                }
+                            }
                         }
                         break;
                     case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                        // Variable length
+                        if (dataBuf.readableBytes() > 0) {
+                            String pointData = dataBuf.readCharSequence(dataBuf.readableBytes(), StandardCharsets.US_ASCII).toString();
+                            String[] points = pointData.split("\\+");
                             for (String point : points) {
                                 String[] values = point.split("@");
+                                if (values.length >= 2) { // Ensure enough parts after split
+                                    try {
                                         network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) { // Catch potential errors
+                                        // Log.warning("Failed to parse WiFi access point data: " + point, e);
+                                    }
+                                }
+                            }
                         }
                         break;
                     default:
-                    buf.skipBytes(length);
+                        // Unknown subtype, dataBuf is already sliced and will be skipped implicitly
+                        // by readSlice consuming dataLength bytes from the main buffer.
                         break;
                 }
+            } catch (Exception e) {
+                // Log exception during subtype processing if necessary
+                // Log.warning("Error processing subtype " + subtype, e);
+            }
+            // Ensure the slice is fully consumed even if an error occurred or not enough bytes were read
+            // (already handled by readSlice advancing the main buffer's reader index)
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
