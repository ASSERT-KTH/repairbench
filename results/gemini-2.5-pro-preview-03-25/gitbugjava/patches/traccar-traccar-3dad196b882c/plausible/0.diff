diff --git a/tmp/cf31b97c-3e9e-4324-9d84-8e50f6ff6493_buggy.java b/tmp/92e21680-7a7f-439a-b745-0c313d07875a_fixed.java
index c6164f1..6d65063 100644
--- a/tmp/cf31b97c-3e9e-4324-9d84-8e50f6ff6493_buggy.java
+++ b/tmp/92e21680-7a7f-439a-b745-0c313d07875a_fixed.java
@@ -1,116 +1,185 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
+        // Loop condition ensures we have at least 4 bytes for subtype and length fields
         while (buf.readableBytes() > 4) {
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int rawLength = buf.readUnsignedShort(); // Total length including subtype and length fields
+
+            // The total length must be at least 4 bytes (for subtype and length themselves)
+            if (rawLength < 4) {
+                // Invalid block length, indicates data corruption or protocol mismatch. Stop processing optional data.
+                // Log.warn("Invalid subtype block length: " + rawLength); // Optional logging
+                break;
+            }
+
+            int length = rawLength - 4; // Length of the actual data part
+
+            // Check if the buffer actually contains the declared number of data bytes
+            if (buf.readableBytes() < length) {
+                // Declared length exceeds available data, indicates truncated message or incorrect length field.
+                // Log.warn("Subtype block data possibly truncated: declared " + length + ", available " + buf.readableBytes()); // Optional logging
+                // Stop processing optional data as we can't read the expected amount.
+                break; // We already read subtype and rawLength, the remaining bytes will be ignored.
+            }
+
+            // Create a slice for the data part to avoid overreading or underreading within cases
+            ByteBuf dataSlice = buf.readSlice(length);
+
+            try {
                 switch (subtype) {
                     case 0x0001:
-                    int coolantTemperature = buf.readUnsignedByte() - 40;
+                        // Ensure slice has enough bytes before reading
+                        if (dataSlice.readableBytes() >= 18) { // 1+2+1+2+2+2+2+1+4 = 17? Check docs. Let's assume fields are read sequentially. 1+2+1+2+2+2+2+1+4=17
+                            int coolantTemperature = dataSlice.readUnsignedByte() - 40;
                             if (coolantTemperature <= 215) {
                                 position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                             }
-                    int rpm = buf.readUnsignedShort();
+                            int rpm = dataSlice.readUnsignedShort();
                             if (rpm <= 65535) {
                                 position.set(Position.KEY_RPM, rpm);
                             }
-                    position.set("averageSpeed", buf.readUnsignedByte());
-                    buf.readUnsignedShort(); // interval fuel consumption
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    buf.readUnsignedInt(); // trip id
+                            position.set("averageSpeed", dataSlice.readUnsignedByte());
+                            dataSlice.readUnsignedShort(); // interval fuel consumption
+                            position.set(Position.KEY_FUEL_CONSUMPTION, dataSlice.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_ODOMETER_TRIP, dataSlice.readUnsignedShort());
+                            position.set(Position.KEY_POWER, dataSlice.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_FUEL_LEVEL, dataSlice.readUnsignedByte() * 0.4);
+                            dataSlice.readUnsignedInt(); // trip id
+                        }
                         break;
                     case 0x0005:
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());
-                    buf.readUnsignedInt(); // run time
+                        // Ensure slice has enough bytes before reading (1 + 1 + 4 = 6)
+                        if (dataSlice.readableBytes() >= 6) {
+                            position.set(Position.KEY_RSSI, dataSlice.readUnsignedByte());
+                            position.set(Position.KEY_HDOP, dataSlice.readUnsignedByte());
+                            dataSlice.readUnsignedInt(); // run time
+                        }
                         break;
                     case 0x0009:
+                        // Length must match readable bytes in slice
+                        if (dataSlice.readableBytes() >= length) {
                              position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                                    Position.KEY_VIN, dataSlice.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                        }
                         break;
                     case 0x0011:
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                        // Ensure slice has enough bytes before reading (4)
+                        if (dataSlice.readableBytes() >= 4) {
+                           position.set(Position.KEY_HOURS, dataSlice.readUnsignedInt() * 0.05);
+                        }
                         break;
                     case 0x0014:
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
-                    position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
-                    position.set("airTemp", buf.readUnsignedByte() - 40);
-                    position.set("airFlow", buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                        // Ensure slice has enough bytes before reading (1 + 1 + 1 + 2 + 1 = 6)
+                        if (dataSlice.readableBytes() >= 6) {
+                            position.set(Position.KEY_ENGINE_LOAD, dataSlice.readUnsignedByte() / 255.0);
+                            position.set("timingAdvance", dataSlice.readUnsignedByte() * 0.5);
+                            position.set("airTemp", dataSlice.readUnsignedByte() - 40);
+                            position.set("airFlow", dataSlice.readUnsignedShort() * 0.01);
+                            position.set(Position.KEY_THROTTLE, dataSlice.readUnsignedByte() / 255.0);
+                        }
                         break;
                     case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                        if (dataSlice.readableBytes() >= length) {
+                            String cellData = dataSlice.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                            String[] cells = cellData.split("\\+");
                             for (String cell : cells) {
+                                if (cell.isEmpty()) {
+                                    continue; // Handle potential trailing '+' or "++"
+                                }
                                 String[] values = cell.split("@");
+                                if (values.length >= 4) { // Basic validation
+                                    try {
                                         network.addCellTower(CellTower.from(
                                                 Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                                 Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                    } catch (NumberFormatException e) {
+                                        // Log parsing error?
+                                    }
+                                }
+                            }
                         }
                         break;
                     case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                        if (dataSlice.readableBytes() >= length) {
+                             String wifiData = dataSlice.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                             String[] points = wifiData.split("\\+");
                              for (String point : points) {
+                                if (point.isEmpty()) {
+                                    continue; // Handle potential trailing '+' or "++"
+                                }
                                 String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                if (values.length >= 2) { // Basic validation
+                                    try {
+                                        network.addWifiAccessPoint(WifiAccessPoint.from(
+                                                values[0], Integer.parseInt(values[1])));
+                                    } catch (NumberFormatException e) {
+                                       // Log parsing error?
+                                    }
+                                }
+                            }
                         }
                         break;
                     default:
-                    buf.skipBytes(length);
+                        // Data for unknown subtypes is automatically skipped because we used readSlice(length)
                         break;
                 }
+            } catch (Exception e) {
+                // Log exception during subtype processing?
+                // Log.warn("Error processing subtype " + subtype + " with length " + length, e);
+                // The slice has been consumed/skipped by readSlice, continue to next subtype or exit loop
+            }
+             // Ensure the slice reader index is advanced to its end, even if a handler failed mid-way or didn't read everything
+            // (readSlice creates a view, advancing the original buffer; operations on slice advance its internal index)
+            // No explicit skip needed here as the original buffer's readerIndex was already advanced by readSlice(length).
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
