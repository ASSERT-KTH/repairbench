diff --git a/tmp/ca1e5d8c-ed18-46a5-b468-60a2f9a53ff7_buggy.java b/tmp/c83c974d-560a-49c1-b744-6e8a6d9eaf1c_fixed.java
index c6164f1..3bf63cf 100644
--- a/tmp/ca1e5d8c-ed18-46a5-b468-60a2f9a53ff7_buggy.java
+++ b/tmp/c83c974d-560a-49c1-b744-6e8a6d9eaf1c_fixed.java
@@ -1,116 +1,178 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() > 4) { // Needs 2 bytes for subtype, 2 bytes for length
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int totalBlockLength = buf.readUnsignedShort();
+            int payloadLength = totalBlockLength - 4; // Subtract subtype and length field size
+
+            // Check for invalid length or insufficient readable bytes
+            if (payloadLength < 0 || buf.readableBytes() < payloadLength) {
+                // Malformed packet or not enough data for the declared length
+                // Log.warning("Invalid subtype block length or insufficient data. Subtype: " + subtype + ", Payload Length: " + payloadLength + ", Readable: " + buf.readableBytes());
+                break; // Stop processing subtypes
+            }
+
             switch (subtype) {
                 case 0x0001:
+                    // Ensure payloadLength is sufficient for the expected data structure
+                    // Actual read size: 1 + 2 + 1 + 2 + 2 + 2 + 2 + 1 + 4 = 17 bytes
+                    if (payloadLength >= 17) {
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
+                        // If payloadLength > 17, skip remaining bytes for this subtype
+                        if (payloadLength > 17) {
+                            buf.skipBytes(payloadLength - 17);
+                        }
+                    } else {
+                         buf.skipBytes(payloadLength); // Skip if length doesn't match expected
+                    }
                     break;
                 case 0x0005:
+                     // Expected size: 1 + 1 + 4 = 6 bytes
+                    if (payloadLength >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                        if (payloadLength > 6) {
+                             buf.skipBytes(payloadLength - 6);
+                        }
+                    } else {
+                         buf.skipBytes(payloadLength);
+                    }
                     break;
                 case 0x0009:
                     position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                            Position.KEY_VIN, buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                     // Expected size: 4 bytes
+                    if (payloadLength >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                        if (payloadLength > 4) {
+                             buf.skipBytes(payloadLength - 4);
+                        }
+                    } else {
+                         buf.skipBytes(payloadLength);
+                    }
                     break;
                 case 0x0014:
+                     // Expected size: 1 + 1 + 1 + 2 + 1 = 6 bytes
+                    if (payloadLength >= 6) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                        if (payloadLength > 6) {
+                             buf.skipBytes(payloadLength - 6);
+                        }
+                    } else {
+                         buf.skipBytes(payloadLength);
+                    }
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    try {
+                        String cellData = buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString();
+                        String[] cells = cellData.split("\\+");
                         for (String cell : cells) {
+                            if (cell.contains("@")) {
                                 String[] values = cell.split("@");
+                                if (values.length >= 4) {
                                     network.addCellTower(CellTower.from(
                                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                                 }
+                            }
+                        }
+                    } catch (Exception e) {
+                        // Log parsing error if necessary, ignore malformed data
+                        // Log.warning("Error parsing cell tower data", e);
+                    }
                     break;
                 case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    try {
+                        String wifiData = buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString();
+                        String[] points = wifiData.split("\\+");
                         for (String point : points) {
+                             if (point.contains("@")) {
                                 String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                if (values.length >= 2) {
+                                    network.addWifiAccessPoint(WifiAccessPoint.from(
+                                            values[0], Integer.parseInt(values[1])));
+                                }
+                            }
+                        }
+                    } catch (Exception e) {
+                        // Log parsing error if necessary, ignore malformed data
+                         // Log.warning("Error parsing WiFi data", e);
                    }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    buf.skipBytes(payloadLength);
                     break;
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
