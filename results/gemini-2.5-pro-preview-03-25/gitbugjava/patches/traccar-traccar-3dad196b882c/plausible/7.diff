diff --git a/tmp/f7ba0824-abee-4b6c-aebf-1fceae441f98_buggy.java b/tmp/39f3102f-7671-4510-9cfe-5834d2a052de_fixed.java
index c6164f1..89be81f 100644
--- a/tmp/f7ba0824-abee-4b6c-aebf-1fceae441f98_buggy.java
+++ b/tmp/39f3102f-7671-4510-9cfe-5834d2a052de_fixed.java
@@ -1,116 +1,213 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        // Loop condition ensures at least 4 bytes for subtype and rawLength fields
+        while (buf.readableBytes() >= 4) { // Check >= 4 instead of > 4 for clarity
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int rawLength = buf.readUnsignedShort(); // Read the raw length field (includes subtype+length fields)
+
+            // Validate rawLength: Minimum size must be 4 (subtype(2) + length(2))
+            if (rawLength < 4) {
+                // Invalid length field value, indicates corrupted data or protocol mismatch.
+                // Stop processing further subtypes for this message to avoid errors.
+                // Log.warn("Invalid subtype block length: " + rawLength + ", must be >= 4"); // Optional logging
+                break;
+            }
+
+            int length = rawLength - 4; // Calculate data payload length
+
+            // Check if buffer actually contains the declared data payload length
+            if (buf.readableBytes() < length) {
+                // Declared length exceeds available data, likely truncated message.
+                // Stop processing further subtypes for this message.
+                // Log.warn("Truncated subtype block data: expected " + length + " bytes, available " + buf.readableBytes()); // Optional logging
+                break;
+            }
+
+            // Now 'length' is non-negative and represents the number of data payload bytes available for this subtype.
+
             switch (subtype) {
                 case 0x0001:
+                    // Original code reads a fixed 17 bytes. Check if length matches.
+                    if (length >= 17) {
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
+                        // Skip any extra bytes if length > 17
+                        if (length > 17) {
+                            buf.skipBytes(length - 17);
+                        }
+                    } else {
+                        // Length is < 17, skip the declared 'length' bytes
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0005:
+                    // Original code reads fixed 6 bytes.
+                    if (length >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                        // Skip any extra bytes if length > 6
+                        if (length > 6) {
+                            buf.skipBytes(length - 6);
+                        }
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0009:
+                    // Variable length VIN
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                     // Original code reads fixed 4 bytes.
+                     if (length >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                         // Skip any extra bytes if length > 4
+                        if (length > 4) {
+                            buf.skipBytes(length - 4);
+                        }
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0014:
+                    // Original code reads fixed 6 bytes.
+                    if (length >= 6) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                         // Skip any extra bytes if length > 6
+                        if (length > 6) {
+                            buf.skipBytes(length - 6);
+                        }
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    // Variable length cell data string
+                    try {
+                        String cellData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        String[] cells = cellData.split("\\+");
                         for (String cell : cells) {
                             String[] values = cell.split("@");
+                            if (values.length == 4) {
+                                // Add try-catch for parsing each cell to be more robust
+                                try {
                                     network.addCellTower(CellTower.from(
                                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                } catch (NumberFormatException e) {
+                                    // Log.warn("Failed to parse cell tower segment: " + cell, e); // Optional logging
+                                }
+                            }
+                        }
+                    } catch (Exception e) { // Catch potential issues reading sequence or splitting
+                        // Log.warn("Failed to process subtype 0x0020 payload", e); // Optional logging
+                        // Ensure buffer position is advanced correctly even if parsing fails mid-way
+                        // Since readCharSequence succeeded or failed entirely, buffer position is either advanced by 'length' or unchanged.
+                        // If it failed, the outer readableBytes check should handle it.
+                        // If read succeeded but parsing failed, buffer is already advanced. No need to skip here.
                     }
                     break;
                 case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    // Variable length wifi data string
+                    try {
+                        String wifiData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        String[] points = wifiData.split("\\+");
                         for (String point : points) {
                             String[] values = point.split("@");
+                            if (values.length == 2) {
+                                // Add try-catch for parsing each point
+                                try {
                                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                } catch (NumberFormatException e) {
+                                    // Log.warn("Failed to parse wifi access point segment: " + point, e); // Optional logging
+                                }
+                            }
+                        }
+                    } catch (Exception e) { // Catch potential issues reading sequence or splitting
+                        // Log.warn("Failed to process subtype 0x0021 payload", e); // Optional logging
                     }
                     break;
                 default:
+                    // Skip data for unknown or unhandled subtypes safely using validated 'length'
                     buf.skipBytes(length);
                     break;
             }
         }
 
+        // Check readable bytes after loop in case loop terminated due to insufficient bytes for header
+        // (buf.readableBytes() was < 4), but still > 0. The original code had > 4, which meant
+        // 1, 2, or 3 bytes remaining would be ignored. >= 4 means 0, 1, 2, 3 bytes remaining are ignored.
+        // If there's a trailer expected (like a checksum, which doesn't seem to be the case here based on test data ending in C0),
+        // it should be handled after the loop. The original code had a check `buf.readableBytes() > 4` before the loop,
+        // and processed trailing C0 outside (implicitly by main decoder).
+
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
+        // Assuming sendResponse is correct and doesn't depend on buffer state after this point.
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
