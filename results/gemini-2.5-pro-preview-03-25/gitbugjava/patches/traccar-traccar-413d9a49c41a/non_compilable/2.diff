diff --git a/tmp/a7aa7f02-3340-46c1-9659-b55eee9769a1_buggy.java b/tmp/9e380718-938e-4b14-92d2-bd7f37dce8f2_fixed.java
index 9240541..75e8371 100644
--- a/tmp/a7aa7f02-3340-46c1-9659-b55eee9769a1_buggy.java
+++ b/tmp/9e380718-938e-4b14-92d2-bd7f37dce8f2_fixed.java
@@ -1,121 +1,228 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.session.DeviceSession;
+import org.traccar.Protocol;
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.DateBuilder;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+import org.traccar.model.WifiAccessPoint;
+
+// Assume the containing class defines:
+// - private static final Logger Log = LoggerFactory.getLogger(HuaShengProtocolDecoder.class);
+// - private String decodeAlarm(int event) { ... }
+// - private void sendResponse(Channel channel, int type, int index, ByteBuf data) { ... }
+// - private static final int MSG_POSITION_RSP = ...;
+
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
+        try {
             DateBuilder dateBuilder = new DateBuilder()
-                .setYear(Integer.parseInt(time.substring(0, 2)))
+                    .setYear(Integer.parseInt(time.substring(0, 2)) + 2000) // YY to YYYY
                     .setMonth(Integer.parseInt(time.substring(2, 4)))
                     .setDay(Integer.parseInt(time.substring(4, 6)))
                     .setHour(Integer.parseInt(time.substring(6, 8)))
                     .setMinute(Integer.parseInt(time.substring(8, 10)))
                     .setSecond(Integer.parseInt(time.substring(10, 12)));
             position.setTime(dateBuilder.getDate());
+        } catch (NumberFormatException e) {
+            // Log potentially available in the class scope
+            // Log.warning("Failed to parse time: " + time, e);
+            // Depending on requirements, might return null or continue without time
+        }
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
-        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
+        // Odometer is read from subtype 0x0010, removed from here:
+        // position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() > 4) { // Need subtype (2) + totalLength (2)
+            int startIndex = buf.readerIndex();
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
-            int endIndex = buf.readerIndex() + length;
+            int totalLength = buf.readUnsignedShort();
+
+            // Validate totalLength and ensure buffer has enough bytes for the TLV item
+            // totalLength includes the 4 bytes of subtype+totalLength itself.
+            if (totalLength < 4 || startIndex + totalLength > buf.writerIndex()) {
+                // Log.warning("Invalid TLV total length: " + totalLength + " or buffer overflow at index " + startIndex);
+                break; // Stop processing TLVs for this message if length is invalid
+            }
+
+            int length = totalLength - 4; // Actual data length
+            int endIndex = startIndex + totalLength;
+
+            // Ensure buffer has enough readable bytes for the data part.
+            // This check handles cases where totalLength is valid but points beyond the readable buffer.
+            if (buf.readableBytes() < length) {
+                // Log.warning("Buffer underflow for TLV data, expected " + length + " bytes, readable " + buf.readableBytes());
+                break; // Stop processing TLVs if not enough data for claimed length
+            }
+
             switch (subtype) {
                 case 0x0001:
+                    // Basic check if length accommodates minimum mandatory fields
+                    if (length >= 17) {
                         int coolantTemperature = buf.readUnsignedByte() - 40;
-                    if (coolantTemperature <= 215) {
+                        if (coolantTemperature <= 215) { // Max sensible value check
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
-                    if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
-                    }
                         position.set("averageSpeed", buf.readUnsignedByte());
-                    buf.readUnsignedShort(); // interval fuel consumption
+                        buf.readUnsignedShort(); // skip interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
+                        // Assuming trip odometer is in KM, convert to meters
+                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 1000.0);
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    buf.readUnsignedInt(); // trip id
-                    if (buf.readerIndex() < endIndex) {
+                        buf.readUnsignedInt(); // skip trip id
+                        // Check if AdBlue level data is present (length allows) and readable bytes exist
+                        if (length >= 18 && buf.readerIndex() < endIndex) { // Check index vs endIndex
                             position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                         }
+                    } else {
+                        // Log.warning("Incorrect length for subtype 0x0001: " + length + ", skipping data.");
+                        buf.skipBytes(length); // Skip the data block
+                    }
                     break;
                 case 0x0005:
+                    if (length >= 6) { // Needs 1(RSSI) + 1(HDOP) + 4(runtime)
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());
-                    buf.readUnsignedInt(); // run time
+                        position.set(Position.KEY_HDOP, buf.readUnsignedByte()); // Keep original behavior (no scaling)
+                        buf.readUnsignedInt(); // skip run time
+                    } else {
+                        // Log.warning("Incorrect length for subtype 0x0005: " + length + ", skipping data.");
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x0009:
+                case 0x0009: // VIN
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     break;
-                case 0x0011:
+                case 0x0010: // Odometer (Total)
+                    String odometerKmStr = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                    try {
+                        // Value is in kilometers (e.g., "13212.000000"), convert to meters
+                        double odometerKm = Double.parseDouble(odometerKmStr);
+                        position.set(Position.KEY_ODOMETER, odometerKm * 1000.0);
+                    } catch (NumberFormatException e) {
+                        // Log.warning("Failed to parse odometer from subtype 0x0010: '" + odometerKmStr + "'", e);
+                    }
+                    break;
+                case 0x0011: // Hours
+                    if (length >= 4) { // Needs 4 bytes for Unsigned Int
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    } else {
+                        // Log.warning("Incorrect length for subtype 0x0011: " + length + ", skipping data.");
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x0014:
+                case 0x0014: // Engine data
+                    if (length >= 6) { // Needs 1+1+1+2+1 = 6 bytes
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    } else {
+                        // Log.warning("Incorrect length for subtype 0x0014: " + length + ", skipping data.");
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                case 0x0020: // Cell towers
+                    String cellsData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                    try {
+                        String[] cells = cellsData.split("\\+");
                         for (String cell : cells) {
+                            if (cell.isEmpty()) {
+                                continue;
+                            }
                             String[] values = cell.split("@");
+                            if (values.length == 4) {
                                 network.addCellTower(CellTower.from(
-                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));
+                                        Integer.parseInt(values[0]), Integer.parseInt(values[1]), // MCC, MNC
+                                        Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16))); // LAC (hex), CID (hex)
+                            } else {
+                                // Log.warning("Invalid cell tower format: " + cell);
+                            }
+                        }
+                    } catch (Exception e) { // Catch parsing errors (NumberFormat, etc.)
+                        // Log.warning("Failed to parse cell tower data: '" + cellsData + "'", e);
                     }
                     break;
-                case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                case 0x0021: // WiFi points
+                    String wifiData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                    try {
+                        String[] points = wifiData.split("\\+");
                         for (String point : points) {
+                            if (point.isEmpty()) {
+                                continue;
+                            }
                             String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                            if (values.length == 2) {
+                                network.addWifiAccessPoint(WifiAccessPoint.from(
+                                        values[0], Integer.parseInt(values[1]))); // MAC, RSSI
+                            } else {
+                                // Log.warning("Invalid wifi point format: " + point);
+                            }
+                        }
+                    } catch (Exception e) { // Catch parsing errors
+                        // Log.warning("Failed to parse wifi data: '" + wifiData + "'", e);
                     }
                     break;
                 default:
+                    // Skip data for unknown or unhandled subtypes
                     buf.skipBytes(length);
                     break;
             }
+            // Set reader index to the end of the current TLV item.
+            // This ensures correct positioning for the next item, even if the current
+            // item's data wasn't fully read or skipped due to errors/length issues inside the switch.
             buf.readerIndex(endIndex);
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
-        sendResponse(channel, MSG_POSITION_RSP, index, null);
+        // Response sending logic might depend on specific protocol requirements
+        // sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
