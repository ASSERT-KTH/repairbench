diff --git a/tmp/76c8fd0d-b790-47c8-8592-2d7862d62b61_buggy.java b/tmp/3524ecf7-d26e-4ea7-93ac-3b13b44d64c7_fixed.java
index 9240541..5a88a5a 100644
--- a/tmp/76c8fd0d-b790-47c8-8592-2d7862d62b61_buggy.java
+++ b/tmp/3524ecf7-d26e-4ea7-93ac-3b13b44d64c7_fixed.java
@@ -1,121 +1,178 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
+        try {
             DateBuilder dateBuilder = new DateBuilder()
                     .setYear(Integer.parseInt(time.substring(0, 2)))
                     .setMonth(Integer.parseInt(time.substring(2, 4)))
                     .setDay(Integer.parseInt(time.substring(4, 6)))
                     .setHour(Integer.parseInt(time.substring(6, 8)))
                     .setMinute(Integer.parseInt(time.substring(8, 10)))
                     .setSecond(Integer.parseInt(time.substring(10, 12)));
             position.setTime(dateBuilder.getDate());
+        } catch (NumberFormatException e) {
+            Log.warning("Failed to parse time string: " + time, e);
+            position.setTime(new Date()); // Fallback or alternative handling
+        }
+
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
+        // This might be a trip odometer or an older format, it gets overridden by subtype 0x0010 if present
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
         while (buf.readableBytes() > 4) {
             int subtype = buf.readUnsignedShort();
             int length = buf.readUnsignedShort() - 4;
+            if (length < 0 || length > buf.readableBytes()) {
+                 Log.warning("Invalid subtype length: " + length + " for subtype: " + subtype);
+                 break; // Avoid IndexOutOfBoundsException
+            }
             int endIndex = buf.readerIndex() + length;
             switch (subtype) {
                 case 0x0001:
+                    if (length >= 17) { // Minimum expected length for base fields
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
-                    if (buf.readerIndex() < endIndex) {
+                        if (buf.readerIndex() < endIndex) { // Check if AdBlue level is present
                             position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                         }
+                    } else {
+                         Log.warning("Subtype 0x0001 length too short: " + length);
+                    }
                     break;
                 case 0x0005:
+                    if (length >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                    } else {
+                         Log.warning("Subtype 0x0005 length too short: " + length);
+                    }
                     break;
                 case 0x0009:
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     break;
+                case 0x0010: // Total odometer (km as string)
+                    String odometerKmString = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                    try {
+                        double odometerKm = Double.parseDouble(odometerKmString);
+                        // Overwrite odometer read earlier with this potentially more accurate value
+                        position.set(Position.KEY_ODOMETER, odometerKm * 1000); // Convert km to meters
+                    } catch (NumberFormatException e) {
+                        Log.warning("Failed to parse odometer string: " + odometerKmString, e);
+                    }
+                    break;
                 case 0x0011:
+                    if (length >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    } else {
+                        Log.warning("Subtype 0x0011 length too short: " + length);
+                    }
                     break;
                 case 0x0014:
+                    if (length >= 6) { // Minimum length for first 5 fields
                          position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                          position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                          position.set("airTemp", buf.readUnsignedByte() - 40);
                          position.set("airFlow", buf.readUnsignedShort() * 0.01);
+                         if (buf.readerIndex() < endIndex) { // Check if throttle is present
                             position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                         }
+                    } else {
+                         Log.warning("Subtype 0x0014 length too short: " + length);
+                    }
                     break;
                 case 0x0020:
+                    try {
                         String[] cells = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String cell : cells) {
+                            if (!cell.isEmpty()) {
                                 String[] values = cell.split("@");
+                                if (values.length >= 4) {
                                     network.addCellTower(CellTower.from(
                                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                             Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));
                                 }
+                            }
+                        }
+                    } catch (Exception e) {
+                         Log.warning("Failed to parse cell towers: ", e);
+                    }
                     break;
                 case 0x0021:
+                    try {
                         String[] points = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String point : points) {
+                            if (!point.isEmpty()) {
                                 String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                if (values.length >= 2) {
+                                    network.addWifiAccessPoint(WifiAccessPoint.from(
+                                            values[0], Integer.parseInt(values[1])));
+                                }
+                            }
+                        }
+                    } catch (Exception e) {
+                         Log.warning("Failed to parse wifi points: ", e);
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    // Unknown subtype, skip its content
                     break;
             }
+            // Ensure reader index is advanced correctly even if parsing failed or length was wrong
             buf.readerIndex(endIndex);
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
