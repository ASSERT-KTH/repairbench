diff --git a/tmp/75e5e2cd-e8c4-45e8-86d2-61220f45610c_buggy.java b/tmp/7ed8d165-76ae-47da-aee2-537ddac1d539_fixed.java
index 9240541..a7319fe 100644
--- a/tmp/75e5e2cd-e8c4-45e8-86d2-61220f45610c_buggy.java
+++ b/tmp/7ed8d165-76ae-47da-aee2-537ddac1d539_fixed.java
@@ -1,121 +1,172 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
+        try {
             DateBuilder dateBuilder = new DateBuilder()
                     .setYear(Integer.parseInt(time.substring(0, 2)))
                     .setMonth(Integer.parseInt(time.substring(2, 4)))
                     .setDay(Integer.parseInt(time.substring(4, 6)))
                     .setHour(Integer.parseInt(time.substring(6, 8)))
                     .setMinute(Integer.parseInt(time.substring(8, 10)))
                     .setSecond(Integer.parseInt(time.substring(10, 12)));
             position.setTime(dateBuilder.getDate());
+        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
+            // Ignore invalid time format
+        }
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
-        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
+        // This might be a trip odometer or an older field. Subtype 0x0010 provides total odometer.
+        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 1000L); // Renamed key, use long multiplier
 
         Network network = new Network();
 
         while (buf.readableBytes() > 4) {
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int lengthField = buf.readUnsignedShort();
+            // Assuming lengthField is the total length including subtype and length field itself
+            int length = lengthField - 4;
+            if (length < 0 || length > buf.readableBytes()) {
+                // Invalid length, stop processing subtypes for this message
+                break;
+            }
             int endIndex = buf.readerIndex() + length;
+
             switch (subtype) {
                 case 0x0001:
+                    if (length >= 16) { // Minimum length for fixed part of this subtype
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
+                        // Overwrite trip odometer if present here
+                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 1000L);
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
-                    if (buf.readerIndex() < endIndex) {
+                        if (buf.readerIndex() < endIndex) { // Check if optional field exists
                             position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                         }
+                    }
                     break;
                 case 0x0005:
+                    if (length >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                    }
                     break;
-                case 0x0009:
+                case 0x0009: // VIN
+                    if (length > 0) {
                         position.set(
                                 Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                    }
                     break;
-                case 0x0011:
+                case 0x0010: // Odometer (Total Distance in KM as string)
+                    if (length > 0) {
+                        String odometerStr = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        try {
+                            // Value is in KM, convert to meters (standard unit for KEY_ODOMETER)
+                            position.set(Position.KEY_ODOMETER, Double.parseDouble(odometerStr) * 1000.0);
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid format
+                        }
+                    }
+                    break;
+                case 0x0011: // Engine Hours
+                    if (length >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    }
                     break;
-                case 0x0014:
+                case 0x0014: // Engine params
+                    if (length >= 5) { // Adjusted minimum length
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
+                        if (buf.readerIndex() < endIndex) { // Check if optional field exists
                            position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                        }
+                    }
                     break;
-                case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                case 0x0020: // Cell Towers
+                    if (length > 0) {
+                        String cellsData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        String[] cells = cellsData.split("\\+");
                         for (String cell : cells) {
                             String[] values = cell.split("@");
+                            try {
+                                if (values.length == 4) {
                                     network.addCellTower(CellTower.from(
                                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                             Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));
                                 }
+                            } catch (NumberFormatException e) { /* ignore */ }
+                        }
+                    }
                     break;
-                case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                case 0x0021: // WiFi Access Points
+                    if (length > 0) {
+                        String wifiData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        String[] points = wifiData.split("\\+");
                         for (String point : points) {
                             String[] values = point.split("@");
+                            try {
+                                if (values.length == 2) {
                                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                                 }
+                            } catch (NumberFormatException e) { /* ignore */ }
+                        }
+                    }
                     break;
                 default:
-                    buf.skipBytes(length);
-                    break;
+                    // Unknown subtype, skip its data by advancing reader index
+                    // buf.skipBytes(length); // Original - less safe
+                    break; // readerIndex will be set below
             }
+            // Ensure reader index is positioned at the end of the current subtype's data,
+            // regardless of whether it was fully parsed or skipped.
             buf.readerIndex(endIndex);
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
