diff --git a/tmp/c67e640b-1c1f-46bb-9665-5461229af609_buggy.java b/tmp/bcf91d4a-518a-48d3-89f2-5a0c53d000e3_fixed.java
index 3da904d..37f9e83 100644
--- a/tmp/c67e640b-1c1f-46bb-9665-5461229af609_buggy.java
+++ b/tmp/bcf91d4a-518a-48d3-89f2-5a0c53d000e3_fixed.java
@@ -1,73 +1,189 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String networkData = parser.next(); // Get the network string
+        if (networkData != null && !networkData.isEmpty()) { // Check if network data exists
+            String[] values = networkData.split(",");
             int index = 0;
 
             Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+            // Check for cell count availability and parse safely
+            int cellCount = 0;
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    cellCount = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) {
+                    // cellCount remains 0 if parsing fails, loop below won't execute
+                }
+            }
+            index++;
+
             if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+                // Check index bounds before accessing timing advance, mcc, mnc
+                // Need at least 3 more fields: timing advance, mcc, mnc
+                if (values.length > index + 2) {
+                    index += 1; // timing advance (skip)
+
+                    int mcc = 0, mnc = 0;
+                    String mccString = values[index++];
+                    String mncString = values[index++];
+
+                    // Parse MCC (try decimal, fallback hex)
+                    if (mccString != null && !mccString.isEmpty()) {
+                        try {
+                            mcc = Integer.parseInt(mccString);
+                        } catch (NumberFormatException e1) {
+                            try {
+                                mcc = (int) Long.parseLong(mccString, 16);
+                            } catch (NumberFormatException e2) {
+                                mcc = 0; // Default on double failure
+                            }
+                        }
+                    }
+
+                    // Parse MNC (try decimal, fallback hex)
+                    if (mncString != null && !mncString.isEmpty()) {
+                        try {
+                            mnc = Integer.parseInt(mncString);
+                        } catch (NumberFormatException e1) {
+                            try {
+                                mnc = (int) Long.parseLong(mncString, 16);
+                            } catch (NumberFormatException e2) {
+                                mnc = 0; // Default on double failure
+                            }
+                        }
+                    }
+
 
                     for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                        // Check index bounds for lac, cid, rssi within the loop
+                        // Need at least 3 more fields per cell
+                        if (values.length > index + 2) {
+                            int lac = 0;
+                            long cidLong = 0;
+                            String lacString = values[index++];
+                            String cidString = values[index++];
+                            String rssiString = values[index++];
+
+                            // Parse LAC (try decimal, fallback hex)
+                            if (lacString != null && !lacString.isEmpty()) {
+                                try {
+                                    lac = Integer.parseInt(lacString);
+                                } catch (NumberFormatException e1) {
+                                    try {
+                                        lac = (int) Long.parseLong(lacString, 16);
+                                    } catch (NumberFormatException e2) {
+                                        lac = 0; // Default on double failure
+                                    }
+                                }
+                            }
+
+                            // Parse CID (try decimal, fallback hex using Long)
+                             if (cidString != null && !cidString.isEmpty()) {
+                                try {
+                                    cidLong = Long.parseLong(cidString);
+                                } catch (NumberFormatException e1) {
+                                    try {
+                                        cidLong = Long.parseLong(cidString, 16);
+                                    } catch (NumberFormatException e2) {
+                                        cidLong = 0; // Default on double failure
+                                    }
+                                }
+                             }
+                            int cid = (int) cidLong; // Cast to int for CellTower.from
+
+                            // Parse RSSI safely
+                            Integer rssiValue = null;
+                            if (rssiString != null && !rssiString.isEmpty()) {
+                                try {
+                                    rssiValue = Integer.parseInt(rssiString);
+                                } catch (NumberFormatException e) {
+                                    // ignore invalid RSSI
+                                }
+                            }
+
+                            // Add cell tower
+                            if (rssiValue != null) {
+                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));
                             } else {
                                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                             }
+                        } else {
+                            // Not enough data for this cell tower, break loop
+                            break;
                         }
                     }
+                }
+                // If not enough data for timing advance, mcc, mnc after cellCount > 0,
+                // cell processing loop is skipped. Index remains pointing after cellCount.
+            }
 
+            // WIFI Parsing part (add boundary checks and safe parsing)
+            int wifiCount = 0;
             if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+                 try {
+                    wifiCount = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) {
+                    // wifiCount remains 0
+                }
+            }
+            index++;
 
             for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+                 // Check index bounds for wifi data (name, mac, rssi)
+                 // Need at least 3 more fields per wifi network
+                if (values.length > index + 2) {
+                    index += 1; // wifi name (skip)
                     String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                    String rssiString = values[index++];
+                    if (!macAddress.isEmpty() && !macAddress.equals("0") && rssiString != null && !rssiString.isEmpty()) {
+                        try {
+                            network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssiString)));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid wifi RSSI or invalid MAC format potentially caught by WifiAccessPoint.from
+                        } catch (IllegalArgumentException e) {
+                             // Ignore invalid MAC format potentially caught by WifiAccessPoint.from
                         }
                     }
+                } else {
+                     // Not enough data for this wifi point, break loop
+                     break;
+                }
             }
 
             if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
                  position.setNetwork(network);
             }
+        }
 
         return position;
     }
\ No newline at end of file
