diff --git a/tmp/bdf9c4e7-8014-491c-906a-8f9f5116ad8e_buggy.java b/tmp/e4bcb4a3-0d09-4768-8d14-4bd183553163_fixed.java
index 3da904d..9a1c99f 100644
--- a/tmp/bdf9c4e7-8014-491c-906a-8f9f5116ad8e_buggy.java
+++ b/tmp/e4bcb4a3-0d09-4768-8d14-4bd183553163_fixed.java
@@ -1,73 +1,161 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
-        Parser parser = new Parser(PATTERN_POSITION, data);
+        Parser parser = new Parser(PATTERN_POSITION, data); // PATTERN_POSITION not provided, assume it's correct
         if (!parser.matches()) {
             return null;
         }
 
-        Position position = new Position(getProtocolName());
+        Position position = new Position(getProtocolName()); // getProtocolName not provided, assume it exists
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
-        position.set(Position.KEY_ALARM, decodeAlarm(status));
+        position.set(Position.KEY_ALARM, decodeAlarm(status)); // decodeAlarm not provided, assume it exists
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String networkData = parser.next(); // Get the whole network/wifi string
+        if (networkData != null && !networkData.isEmpty()) {
+            String[] values = networkData.split(",");
             int index = 0;
 
             Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            // Cell Tower Info
+            if (index < values.length && !values[index].isEmpty()) {
+                int cellCount = 0;
+                try {
+                    // cellCount is decimal
+                    cellCount = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    // Ignore invalid cell count, stop processing cells
+                    cellCount = 0;
+                }
+
+                // Check bounds for timing advance, mcc, mnc before accessing them
+                int mcc = 0, mnc = 0;
+                boolean mccMncParsed = false;
+                if (cellCount > 0 && index + 2 < values.length) {
+                    index += 1; // timing advance (skip)
+                    int mccIndex = index++;
+                    int mncIndex = index++;
+                    try {
+                        // Parse MCC/MNC as unsigned hex integers (radix 16) based on "FFFF" example
+                        mcc = !values[mccIndex].isEmpty() ? Integer.parseUnsignedInt(values[mccIndex], 16) : 0;
+                        mnc = !values[mncIndex].isEmpty() ? Integer.parseUnsignedInt(values[mncIndex], 16) : 0;
+                        mccMncParsed = true;
+                    } catch (NumberFormatException eHex) {
+                        // If hex parsing fails, try decimal as other examples use it
+                        try {
+                            mcc = !values[mccIndex].isEmpty() ? Integer.parseInt(values[mccIndex]) : 0;
+                            mnc = !values[mncIndex].isEmpty() ? Integer.parseInt(values[mncIndex]) : 0;
+                            mccMncParsed = true;
+                        } catch (NumberFormatException eDec) {
+                            // Failed both hex and decimal. Cannot process cells reliably.
+                            // Log.warning("Failed to parse MCC/MNC: " + values[mccIndex] + "," + values[mncIndex]);
+                        }
+                    }
+                } else {
+                    // Not enough data for mcc/mnc or cellCount was zero/invalid
+                    cellCount = 0;
+                }
+
+                if (!mccMncParsed) {
+                    // Stop cell processing if MCC/MNC failed parsing
+                    cellCount = 0;
+                }
 
                 for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                    // Check bounds for lac, cid, rssi
+                    if (index + 2 >= values.length) {
+                        break; // Not enough data for the next cell tower
+                    }
+                    int lac = 0;
+                    long cid = 0; // Use long for potentially large CIDs
+                    String lacString = values[index++];
+                    String cidString = values[index++];
+                    String rssiString = values[index++];
+
+                    try {
+                        // Similarly try parsing LAC/CID as hex first, then decimal
+                        try {
+                            lac = Integer.parseUnsignedInt(lacString, 16);
+                            cid = Long.parseUnsignedLong(cidString, 16);
+                        } catch (NumberFormatException eHex) {
+                            lac = Integer.parseInt(lacString);
+                            cid = Long.parseLong(cidString); // Use Long.parseLong for decimal CID
+                        }
+
+                        // RSSI seems consistently decimal in examples
+                        if (!rssiString.isEmpty()) {
+                            try {
+                                int rssi = Integer.parseInt(rssiString);
+                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
+                            } catch (NumberFormatException eRssi) {
+                                // Add tower without RSSI if parsing fails
+                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                            }
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
+                    } catch (NumberFormatException e) {
+                        // Failed parsing LAC/CID as both hex and decimal, skip this cell tower
+                        // Log.warning("Failed to parse LAC/CID: " + lacString + "," + cidString, e);
+                        continue; // Continue to next iteration
+                    }
                 }
             }
 
+            // WiFi Info (Starts after cell info)
+            // Check if index is still within bounds before trying to read wifiCount
             if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+                int wifiCount = 0;
+                try {
+                    // wifiCount is decimal
+                    wifiCount = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    // Ignore invalid wifi count
+                }
 
                 for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+                    // Check bounds for name, mac, rssi
+                    if (index + 2 >= values.length) {
+                        break; // Not enough data for next wifi AP
+                    }
+                    index += 1; // wifi name (skip)
                     String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                    String rssiString = values[index++];
+                    if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssiString.isEmpty()) {
+                        try {
+                            // RSSI is decimal
+                            int rssi = Integer.parseInt(rssiString);
+                            network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssi));
+                        } catch (NumberFormatException e) {
+                            // Ignore AP with invalid RSSI
+                        }
                     }
                 }
             }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+            if (network.hasCellTowers() || network.hasWifiAccessPoints()) {
                 position.setNetwork(network);
             }
+        } // End of networkData processing block
 
         return position;
     }
\ No newline at end of file
