diff --git a/tmp/13e27d5f-17a8-4740-a0ab-8b56783bbfb5_buggy.java b/tmp/04e31d10-8207-429b-b3c2-ba478aea3e45_fixed.java
index 3da904d..15a8449 100644
--- a/tmp/13e27d5f-17a8-4740-a0ab-8b56783bbfb5_buggy.java
+++ b/tmp/04e31d10-8207-429b-b3c2-ba478aea3e45_fixed.java
@@ -1,73 +1,186 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String networkData = parser.next(); // Get the network data string
+        if (networkData == null || networkData.isEmpty()) {
+             return position; // No network data to parse
+        }
+
+        String[] values = networkData.split(",");
         int index = 0;
 
         Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+        // Ensure there's a value for cellCount
+        if (index >= values.length) {
+            return position;
+        }
+        int cellCount = 0;
+        try {
+            // Avoid parsing empty string
+            if (!values[index].isEmpty()) {
+                cellCount = Integer.parseInt(values[index]);
+            }
+        } catch (NumberFormatException ignored) { } // Default 0 if parse fails
+        index++;
+
+        // Process Cell Towers
         if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            // Check index bounds for timing advance, mcc, mnc
+            // Need at least 3 more fields: TA, MCC, MNC
+            if (index + 2 < values.length) {
+                index += 1; // Skip timing advance
+
+                int mcc = 0, mnc = 0;
+                String mccString = values[index++];
+                String mncString = values[index++];
+
+                // Try parsing MCC (Decimal -> Hex)
+                if (!mccString.isEmpty()) {
+                    try {
+                        mcc = Integer.parseInt(mccString);
+                    } catch (NumberFormatException e1) {
+                        try {
+                            // Handle potential hex values like FFFF
+                            mcc = Integer.parseUnsignedInt(mccString, 16);
+                        } catch (NumberFormatException e2) { /* ignore, mcc remains 0 */ }
+                    }
+                }
+
+                // Try parsing MNC (Decimal -> Hex)
+                if (!mncString.isEmpty()) {
+                    try {
+                        mnc = Integer.parseInt(mncString);
+                    } catch (NumberFormatException e1) {
+                        try {
+                             // Handle potential hex values like FFFF
+                            mnc = Integer.parseUnsignedInt(mncString, 16);
+                        } catch (NumberFormatException e2) { /* ignore, mnc remains 0 */ }
+                    }
+                }
 
                 for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                    // Check index bounds for lac, cid, rssi for this cell
+                    // Need at least 3 more fields: LAC, CID, RSSI
+                    if (index + 2 >= values.length) {
+                        break; // Not enough data for this cell tower
+                    }
+
+                    String lacString = values[index++];
+                    String cidString = values[index++];
+                    String rssiString = values[index++];
+
+                    int lac = -1, cid = -1, rssi = Integer.MIN_VALUE;
+
+                    // Try parsing LAC (Decimal -> Hex)
+                    if (!lacString.isEmpty()) {
+                        try {
+                            lac = Integer.parseInt(lacString);
+                        } catch (NumberFormatException e1) {
+                            try {
+                                // Handle potential hex values like FFFE
+                                lac = Integer.parseUnsignedInt(lacString, 16);
+                            } catch (NumberFormatException e2) { /* lac remains -1 indicating parse failure */ }
+                        }
+                    }
+
+                    // Try parsing CID (Decimal -> Hex)
+                    if (!cidString.isEmpty()) {
+                        try {
+                            cid = Integer.parseInt(cidString);
+                        } catch (NumberFormatException e1) {
+                            try {
+                                // Handle potential hex values like 3B882A2
+                                cid = Integer.parseUnsignedInt(cidString, 16);
+                            } catch (NumberFormatException e2) { /* cid remains -1 indicating parse failure */ }
+                        }
+                    }
+
+                    // Try parsing RSSI (Decimal only)
+                    if (!rssiString.isEmpty()) {
+                        try {
+                            rssi = Integer.parseInt(rssiString);
+                        } catch (NumberFormatException ignored) { /* rssi remains MIN_VALUE */ }
+                    }
+
+                    // Add cell tower only if LAC and CID were successfully parsed (are not -1)
+                    if (lac != -1 && cid != -1) {
+                        if (rssi != Integer.MIN_VALUE) {
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
                     }
                 }
+            }
+        }
 
+        // Process WiFi Access Points
+        // Check if there's potentially a wifiCount value
         if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+            int wifiCount = 0;
+            try {
+                wifiCount = Integer.parseInt(values[index]);
+            } catch (NumberFormatException ignored) { } // Default 0 if parse fails
+            index++;
 
             for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+                 // Check index bounds for name, mac, rssi
+                 // Need at least 3 more fields: Name, MAC, RSSI
+                if (index + 2 >= values.length) {
+                    break; // Not enough data for this wifi AP
+                }
+
+                index += 1; // Skip wifi name (values[index])
                 String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                String rssiString = values[index++];
+
+                // Check for non-empty MAC and RSSI
+                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssiString.isEmpty()) {
+                    try {
+                        int rssi = Integer.parseInt(rssiString);
+                        // Assuming WifiAccessPoint.from handles MAC format validation/normalization
+                        network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssi));
+                    } catch (NumberFormatException ignored) {
+                        // Ignore if RSSI is not a valid integer
+                    }
                 }
             }
         }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        // Check if network object contains any data before setting it
+        if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())
+                || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
