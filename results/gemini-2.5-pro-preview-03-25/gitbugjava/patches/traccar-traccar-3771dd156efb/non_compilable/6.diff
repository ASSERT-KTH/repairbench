diff --git a/tmp/e8185492-3e3c-4777-9480-655ac0c35651_buggy.java b/tmp/a6cf9898-b337-4548-b942-38da03fde3b4_fixed.java
index 3da904d..15b572c 100644
--- a/tmp/e8185492-3e3c-4777-9480-655ac0c35651_buggy.java
+++ b/tmp/a6cf9898-b337-4548-b942-38da03fde3b4_fixed.java
@@ -1,73 +1,184 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String networkData = parser.next();
+        if (networkData == null || networkData.isEmpty()) {
+            return position; // No network data to parse
+        }
+
+        String[] values = networkData.split(",");
         int index = 0;
 
         Network network = new Network();
 
+        // Check if there's enough data for cellCount
+        if (index >= values.length || values[index].isEmpty()) {
+            return position;
+        }
         int cellCount = Integer.parseInt(values[index++]);
+
         if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            // Check for timing advance, mcc, mnc presence
+            if (index + 2 >= values.length) {
+                return position; // Not enough data for mcc, mnc
+            }
+            index += 1; // timing advance (ignore)
+            String mccString = values[index++];
+            String mncString = values[index++];
+
+            int mcc = 0;
+            int mnc = 0;
+
+            // Try parsing MCC (decimal first, then hex, handle FFFF)
+            if (!mccString.isEmpty()) {
+                if (mccString.equalsIgnoreCase("FFFF")) {
+                    mcc = 0; // Treat FFFF as invalid/unknown
+                } else {
+                    try {
+                        mcc = Integer.parseInt(mccString);
+                    } catch (NumberFormatException e1) {
+                        try {
+                            mcc = Integer.parseUnsignedInt(mccString, 16);
+                        } catch (NumberFormatException e2) {
+                            // Failed both decimal and hex parsing
+                        }
+                    }
+                }
+            }
+
+            // Try parsing MNC (decimal first, then hex, handle FFFF)
+            if (!mncString.isEmpty()) {
+                if (mncString.equalsIgnoreCase("FFFF")) {
+                    mnc = 0; // Treat FFFF as invalid/unknown
+                } else {
+                    try {
+                        mnc = Integer.parseInt(mncString);
+                    } catch (NumberFormatException e1) {
+                        try {
+                            mnc = Integer.parseUnsignedInt(mncString, 16);
+                        } catch (NumberFormatException e2) {
+                            // Failed both decimal and hex parsing
+                        }
+                    }
+                }
+            }
+
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                // Check for lac, cid, rssi presence
+                if (index + 2 >= values.length) {
+                    break; // Not enough data for this cell tower
+                }
+                String lacString = values[index++];
+                String cidString = values[index++];
+                String rssiString = values[index++];
+
+                int lac = 0;
+                int cid = 0;
+
+                // Try parsing LAC (decimal first, then hex)
+                if (!lacString.isEmpty()) {
+                     if (lacString.equalsIgnoreCase("FFFF") || lacString.equalsIgnoreCase("FFFE")) {
+                        lac = 0; // Treat FFFF/FFFE as invalid/unknown
+                    } else {
+                        try {
+                            lac = Integer.parseInt(lacString);
+                        } catch (NumberFormatException e1) {
+                            try {
+                                lac = Integer.parseUnsignedInt(lacString, 16);
+                            } catch (NumberFormatException e2) {
+                                // Failed both decimal and hex parsing
+                            }
+                        }
+                    }
+                }
+
+                // Try parsing CID (decimal first, then hex)
+                if (!cidString.isEmpty()) {
+                     if (cidString.equalsIgnoreCase("FFFF") || cidString.equalsIgnoreCase("FFFE")) {
+                        cid = 0; // Treat FFFF/FFFE as invalid/unknown
+                    } else {
+                        try {
+                            cid = Integer.parseInt(cidString);
+                        } catch (NumberFormatException e1) {
+                            try {
+                                cid = Integer.parseUnsignedInt(cidString, 16);
+                            } catch (NumberFormatException e2) {
+                                // Failed both decimal and hex parsing
+                            }
+                        }
+                    }
+                }
+
+                // Add cell tower if identifiers are valid (basic check)
+                if (mcc != 0 || mnc != 0 || lac != 0 || cid != 0) {
+                    if (!rssiString.isEmpty()) {
+                        try {
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiString)));
+                        } catch (NumberFormatException e) {
+                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid)); // Add without RSSI if parse fails
+                        }
                     } else {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                     }
                 }
             }
+        }
 
+        // Check for wifiCount presence
         if (index < values.length && !values[index].isEmpty()) {
             int wifiCount = Integer.parseInt(values[index++]);
 
             for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+                // Check for wifi name, mac, rssi presence
+                if (index + 2 >= values.length) {
+                    break; // Not enough data for this wifi AP
+                }
+                index += 1; // wifi name (ignore)
                 String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                String rssiString = values[index++];
+                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssiString.isEmpty()) {
+                     try {
+                        network.addWifiAccessPoint(WifiAccessPoint.from(
+                                macAddress.replace('-', ':'), Integer.parseInt(rssiString)));
+                    } catch (NumberFormatException e) {
+                        // Failed parsing RSSI, skip this AP
+                    }
                 }
             }
         }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        if (network.hasCell() || network.hasWifi()) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
