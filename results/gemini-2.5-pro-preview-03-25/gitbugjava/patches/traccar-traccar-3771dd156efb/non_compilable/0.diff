diff --git a/tmp/09095875-93b3-4132-8870-023d99d1d30a_buggy.java b/tmp/76ab6f23-57cf-4d80-9f52-a6f8094273c8_fixed.java
index 3da904d..c4c7433 100644
--- a/tmp/09095875-93b3-4132-8870-023d99d1d30a_buggy.java
+++ b/tmp/76ab6f23-57cf-4d80-9f52-a6f8094273c8_fixed.java
@@ -1,73 +1,123 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String networkData = parser.next(); // Get the network data string
+        if (networkData == null || networkData.isEmpty()) {
+            // No network data present
+            return position;
+        }
+
+        String[] values = networkData.split(",");
         int index = 0;
 
+        // Check if there's at least one value (for cellCount)
+        if (index >= values.length) {
+            return position;
+        }
+
         Network network = new Network();
 
         int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+        // Check if there's enough data for timing advance, mcc, and mnc
+        if (cellCount > 0 && index + 2 < values.length) {
+            index += 1; // timing advance (skip values[index])
+            String mccString = values[index++];
+            String mncString = values[index++];
+
+            int mcc = 0;
+            if (!mccString.isEmpty()) {
+                // Use radix 16 if contains hex letters (A-F), else 10
+                mcc = Integer.parseInt(mccString, mccString.matches(".*[a-fA-F].*") ? 16 : 10);
+            }
+
+            int mnc = 0;
+            if (!mncString.isEmpty()) {
+                // Use radix 16 if contains hex letters (A-F), else 10
+                mnc = Integer.parseInt(mncString, mncString.matches(".*[a-fA-F].*") ? 16 : 10);
+            }
+
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                // Check if there's enough data for lac, cid, rssi for this cell
+                if (index + 2 >= values.length) {
+                    break; // Not enough data for the remaining cells
+                }
+                String lacString = values[index++];
+                String cidString = values[index++];
+                String rssiString = values[index++];
+
+                // Check for empty strings before parsing LAC/CID
+                if (lacString.isEmpty() || cidString.isEmpty()) {
+                    continue; // Skip cell if LAC or CID is empty
+                }
+
+                // Use radix 16 if contains hex letters (A-F), else 10
+                int lac = Integer.parseInt(lacString, lacString.matches(".*[a-fA-F].*") ? 16 : 10);
+                int cid = Integer.parseInt(cidString, cidString.matches(".*[a-fA-F].*") ? 16 : 10);
+
+                if (!rssiString.isEmpty()) {
+                    // Assume RSSI is always decimal
+                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiString)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
+        } else if (cellCount > 0) {
+            // If cellCount > 0 but not enough data for TA, MCC, MNC, skip remaining cell processing
+             index = values.length; // Effectively skip cell processing loop by advancing index
         }
 
+
+        // Check if there's still data left for potential WiFi count
         if (index < values.length && !values[index].isEmpty()) {
             int wifiCount = Integer.parseInt(values[index++]);
 
             for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+                // Check bounds for wifi name, mac, rssi
+                if (index + 2 >= values.length) {
+                    break; // Not enough data for the remaining wifi APs
+                }
+                index += 1; // wifi name (skipped values[index])
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                    // Assume WiFi RSSI is always decimal
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
