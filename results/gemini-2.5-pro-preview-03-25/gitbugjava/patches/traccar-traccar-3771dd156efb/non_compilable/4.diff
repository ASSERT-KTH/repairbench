diff --git a/tmp/53a3cc69-6819-4f31-97dc-f7245a802d7e_buggy.java b/tmp/1d66c941-f805-4270-a2d9-4bce2819cac2_fixed.java
index 3da904d..a5734b4 100644
--- a/tmp/53a3cc69-6819-4f31-97dc-f7245a802d7e_buggy.java
+++ b/tmp/1d66c941-f805-4270-a2d9-4bce2819cac2_fixed.java
@@ -1,73 +1,200 @@
+import org.traccar.helper.Log;
+import org.traccar.helper.Parser;
+import org.traccar.helper.PatternBuilder;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+import org.traccar.model.WifiAccessPoint;
+import org.traccar.helper.BitUtil;
+
+// Add necessary imports for Log, UnitsConverter, BitUtil etc. if not already present at the class level.
+
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
+        if (decodeAlarm(status) != null) {
             position.set(Position.KEY_ALARM, decodeAlarm(status));
+        }
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String rawNetworkData = parser.next(); // Get the network data string
+        if (rawNetworkData == null || rawNetworkData.isEmpty()) {
+             // No network data, just return the position
+             return position;
+        }
+        String[] values = rawNetworkData.split(",");
         int index = 0;
 
         Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+        // Ensure index is within bounds before accessing values[index] for cell count
+        if (index >= values.length || values[index].isEmpty()) {
+             Log.warning("Missing or invalid cell count in network data");
+             return position;
+        }
+
+        int cellCount = 0;
+        try {
+            cellCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            Log.warning("Failed to parse cell count: " + values[index - 1], e);
+            return position; // Cannot proceed without valid cell count
+        }
+
+        // Process cell towers
+        // Check required length for cell tower data header (count + ta + mcc + mnc)
+        if (cellCount > 0 && index + 2 < values.length) { // Need at least index for TA, index+1 for MCC, index+2 for MNC
+            index++; // timing advance (skip)
+
+            String mccString = values[index++];
+            String mncString = values[index++];
+            int mcc = 0, mnc = 0;
+
+            // Parse MCC (Try decimal, fallback to hex)
+            if (!mccString.isEmpty()) {
+                try {
+                    mcc = Integer.parseInt(mccString);
+                } catch (NumberFormatException e1) {
+                    try {
+                        mcc = (int) Long.parseLong(mccString, 16);
+                    } catch (NumberFormatException e2) {
+                        Log.warning("Failed to parse MCC value: " + mccString + " as decimal or hex", e1);
+                    }
+                }
+            }
+
+            // Parse MNC (Try decimal, fallback to hex)
+            if (!mncString.isEmpty()) {
+                 try {
+                    mnc = Integer.parseInt(mncString);
+                } catch (NumberFormatException e1) {
+                    try {
+                        mnc = (int) Long.parseLong(mncString, 16);
+                    } catch (NumberFormatException e2) {
+                        Log.warning("Failed to parse MNC value: " + mncString + " as decimal or hex", e1);
+                    }
+                }
+            }
+
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                // Check required length for each cell tower entry (lac + cid + rssi)
+                if (index + 2 >= values.length) { // Need index for LAC, index+1 for CID, index+2 for RSSI
+                    Log.warning("Incorrect number of network data fields for cell tower " + i);
+                    break; // Stop processing cells if data is truncated
+                }
+
+                String lacString = values[index++];
+                String cidString = values[index++];
+                String rssiString = values[index++];
+                int lac = 0, cid = 0;
+
+                // Parse LAC (Try decimal, fallback to hex)
+                if (!lacString.isEmpty()) {
+                     try {
+                        lac = Integer.parseInt(lacString);
+                    } catch (NumberFormatException e1) {
+                        try {
+                            lac = (int) Long.parseLong(lacString, 16);
+                        } catch (NumberFormatException e2) {
+                            Log.warning("Failed to parse LAC value: " + lacString + " as decimal or hex", e1);
+                        }
+                    }
+                }
+
+                // Parse CID (Try decimal, fallback to hex)
+                if (!cidString.isEmpty()) {
+                    try {
+                        cid = Integer.parseInt(cidString);
+                    } catch (NumberFormatException e1) {
+                        try {
+                            cid = (int) Long.parseLong(cidString, 16);
+                        } catch (NumberFormatException e2) {
+                            Log.warning("Failed to parse CID value: " + cidString + " as decimal or hex", e1);
+                        }
+                    }
+                }
+
+                // Parse RSSI (Decimal only)
+                if (!rssiString.isEmpty()) {
+                     try {
+                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiString)));
+                     } catch (NumberFormatException e) {
+                         Log.warning("Failed to parse cell RSSI value: " + rssiString + ", adding tower without RSSI", e);
+                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid)); // Add without RSSI
+                     }
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
+        } else if (cellCount > 0) {
+             Log.warning("Incorrect number of network data fields for cell header");
+             // Adjust index to potentially skip to WiFi section if possible, or return
+             // Assuming the rest of the data might be wifi, try to continue parsing from current index
         }
 
+
+        // Process WiFi access points
+        // Check if index is still valid and potentially points to wifi count
         if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+            int wifiCount = 0;
+            try {
+                 wifiCount = Integer.parseInt(values[index++]);
+            } catch (NumberFormatException e) {
+                 Log.warning("Failed to parse WiFi count: " + values[index - 1], e);
+                 wifiCount = 0; // Skip WiFi processing if count is invalid
+            }
 
             for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+                 // Check required length for each wifi entry (name + mac + rssi)
+                 if (index + 2 >= values.length) { // Need index for name, index+1 for MAC, index+2 for RSSI
+                    Log.warning("Incorrect number of network data fields for wifi AP " + i);
+                    break; // Stop processing wifi if data is truncated
+                 }
+                index += 1; // wifi name (skip)
                 String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                String rssiString = values[index++];
+                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssiString.isEmpty()) {
+                     try {
+                        network.addWifiAccessPoint(WifiAccessPoint.from(
+                                macAddress.replace('-', ':'), Integer.parseInt(rssiString))); // Standardize MAC format
+                     } catch (NumberFormatException e) {
+                          Log.warning("Failed to parse WiFi RSSI value: " + rssiString, e);
+                          // Skip this AP if RSSI is invalid, as WifiAccessPoint requires RSSI
+                     }
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
