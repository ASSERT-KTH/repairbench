diff --git a/tmp/3f1ae3fd-f1b3-4082-a3ec-55526da00513_buggy.java b/tmp/5330ee9a-0ded-49c2-a2dc-8981c3537629_fixed.java
index 3da904d..669c8f2 100644
--- a/tmp/3f1ae3fd-f1b3-4082-a3ec-55526da00513_buggy.java
+++ b/tmp/5330ee9a-0ded-49c2-a2dc-8981c3537629_fixed.java
@@ -1,73 +1,180 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String networkData = parser.next();
+        if (networkData == null || networkData.isEmpty()) {
+             return position; // No network data to parse
+        }
+
+        String[] values = networkData.split(",");
         int index = 0;
 
         Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
+        int cellCount = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                cellCount = Integer.parseInt(values[index]);
+            } catch (NumberFormatException e) {
+                // Ignore invalid cell count
+            }
+        }
+        index++;
+
+        // Check if there are enough elements for timing advance, mcc, mnc
+        if (cellCount > 0 && index + 2 < values.length) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+
+            int mcc = 0;
+            String mccString = values[index++];
+            if (!mccString.isEmpty()) {
+                try {
+                    mcc = Integer.parseInt(mccString); // Try decimal
+                } catch (NumberFormatException e1) {
+                    try {
+                        mcc = Integer.parseInt(mccString, 16); // Try hexadecimal
+                    } catch (NumberFormatException e2) {
+                        // Ignore invalid MCC
+                    }
+                }
+            }
+
+            int mnc = 0;
+            String mncString = values[index++];
+             if (!mncString.isEmpty()) {
+                 try {
+                     mnc = Integer.parseInt(mncString); // Try decimal
+                 } catch (NumberFormatException e1) {
+                     try {
+                         mnc = Integer.parseInt(mncString, 16); // Try hexadecimal
+                     } catch (NumberFormatException e2) {
+                         // Ignore invalid MNC
+                     }
+                 }
+             }
+
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                 // Check if there are enough elements for lac, cid, rssi
+                 if (index + 2 >= values.length) {
+                     break; // Stop processing cells if data is truncated
+                 }
+
+                int lac = 0;
+                String lacString = values[index++];
+                if (!lacString.isEmpty()) {
+                    try {
+                        lac = Integer.parseInt(lacString); // Try decimal
+                    } catch (NumberFormatException e1) {
+                        try {
+                            lac = Integer.parseInt(lacString, 16); // Try hexadecimal
+                        } catch (NumberFormatException e2) {
+                            // Ignore invalid LAC
+                        }
+                    }
+                }
+
+                int cid = 0;
+                String cidString = values[index++];
+                 if (!cidString.isEmpty()) {
+                     try {
+                         cid = Integer.parseInt(cidString); // Try decimal
+                     } catch (NumberFormatException e1) {
+                         try {
+                             cid = Integer.parseInt(cidString, 16); // Try hexadecimal
+                         } catch (NumberFormatException e2) {
+                             // Ignore invalid CID
+                         }
+                     }
+                 }
+
                 String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                int signalStrength = 0;
+                boolean rssiPresent = !rssi.isEmpty();
+                if (rssiPresent) {
+                    try {
+                        signalStrength = Integer.parseInt(rssi);
+                    } catch (NumberFormatException e) {
+                        rssiPresent = false; // Ignore invalid RSSI
+                    }
+                }
+
+                if (mcc != 0 || mnc != 0 || lac != 0 || cid != 0) { // Add tower only if some identifier is non-zero
+                    if (rssiPresent) {
+                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, signalStrength));
                     } else {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                     }
                 }
             }
+        } else if (cellCount > 0) {
+             // Cell count positive but not enough fields, advance index past expected fields
+             index += 1; // timing advance
+             index += 2; // mcc, mnc
+             index += cellCount * 3; // lac, cid, rssi for each cell
+        }
 
+
+        // Wifi processing
         if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+            int wifiCount = 0;
+            try {
+                wifiCount = Integer.parseInt(values[index]);
+            } catch (NumberFormatException e) {
+                // Ignore invalid wifi count
+            }
+            index++;
 
             for (int i = 0; i < wifiCount; i++) {
+                 // Check if there are enough elements for name, mac, rssi
+                 if (index + 2 >= values.length) {
+                    break; // Stop processing wifi if data is truncated
+                 }
                 index += 1; // wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                     try {
+                         int signalStrength = Integer.parseInt(rssi);
+                         network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, signalStrength));
+                     } catch (NumberFormatException e) {
+                         // Ignore wifi point if RSSI is invalid
+                     }
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
