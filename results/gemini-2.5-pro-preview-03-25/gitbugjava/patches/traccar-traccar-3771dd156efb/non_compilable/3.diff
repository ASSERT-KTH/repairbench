diff --git a/tmp/b2e92987-4ad3-44e1-9f03-009009f1600d_buggy.java b/tmp/8bb5781e-c2d9-4309-b924-003a4a1ec714_fixed.java
index 3da904d..615e58e 100644
--- a/tmp/b2e92987-4ad3-44e1-9f03-009009f1600d_buggy.java
+++ b/tmp/8bb5781e-c2d9-4309-b924-003a4a1ec714_fixed.java
@@ -1,73 +1,175 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String networkDataString = parser.next(); // Get the network data part
+        if (networkDataString == null || networkDataString.isEmpty()) {
+             // If there's no network data string from the parser, return position as is
+             return position;
+        }
+
+        String[] values = networkDataString.split(",");
         int index = 0;
 
         Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+        try { // Add try-catch around the network parsing logic to prevent crashes on malformed data
+            if (values.length > index) { // Check if cellCount exists
+                String cellCountString = values[index];
+                // Ensure cellCountString is not empty before parsing
+                int cellCount = cellCountString.isEmpty() ? 0 : Integer.parseInt(cellCountString);
+                index++;
+
                 if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+                    if (values.length > index) {
+                        index += 1; // timing advance (skip)
+                    }
+
+                    // Check bounds before accessing mcc/mnc
+                    if (values.length > index + 1) {
+                        String mccString = values[index++];
+                        String mncString = values[index++];
+                        int mcc = 0;
+                        int mnc = 0;
+
+                        // Inline parsing logic (decimal first, then hex fallback) for MCC
+                        if (!mccString.isEmpty()) {
+                            try {
+                                mcc = Integer.parseInt(mccString);
+                            } catch (NumberFormatException e1) {
+                                try {
+                                    // Use Long.parseLong to handle potentially large hex values (unsigned int)
+                                    mcc = (int) Long.parseLong(mccString, 16);
+                                } catch (NumberFormatException e2) { /* mcc remains 0 if both fail */ }
+                            }
+                        }
+                        // Inline parsing logic (decimal first, then hex fallback) for MNC
+                        if (!mncString.isEmpty()) {
+                             try {
+                                mnc = Integer.parseInt(mncString);
+                            } catch (NumberFormatException e1) {
+                                try {
+                                    mnc = (int) Long.parseLong(mncString, 16);
+                                } catch (NumberFormatException e2) { /* mnc remains 0 if both fail */ }
+                            }
+                        }
+
 
                         for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                            // Check bounds for lac, cid, rssi
+                            if (values.length <= index + 2) {
+                                break; // Not enough data for this tower
+                            }
+
+                            String lacString = values[index++];
+                            String cidString = values[index++];
+                            String rssiString = values[index++];
+                            int lac = 0;
+                            int cid = 0;
+
+                            // Inline parsing logic (decimal first, then hex fallback) for LAC
+                            if (!lacString.isEmpty()) {
+                                try {
+                                    lac = Integer.parseInt(lacString);
+                                } catch (NumberFormatException e1) {
+                                    try {
+                                        lac = (int) Long.parseLong(lacString, 16);
+                                    } catch (NumberFormatException e2) { /* lac remains 0 */ }
+                                }
+                            }
+                            // Inline parsing logic (decimal first, then hex fallback) for CID
+                            if (!cidString.isEmpty()) {
+                                try {
+                                    cid = Integer.parseInt(cidString);
+                                } catch (NumberFormatException e1) {
+                                    try {
+                                        cid = (int) Long.parseLong(cidString, 16);
+                                    } catch (NumberFormatException e2) { /* cid remains 0 */ }
+                                }
+                            }
+
+                            if (!rssiString.isEmpty()) {
+                                try {
+                                    int rssi = Integer.parseInt(rssiString); // RSSI seems consistently decimal
+                                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
+                                } catch (NumberFormatException e) {
+                                    // If RSSI parsing fails, add tower without RSSI
+                                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                                }
                             } else {
                                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                             }
                         }
                     }
+                }
+            }
 
+            // Wifi parsing
             if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+                // Check bounds before parsing wifiCount
+                 String wifiCountString = values[index];
+                 // Ensure wifiCountString is not empty before parsing
+                 int wifiCount = wifiCountString.isEmpty() ? 0 : Integer.parseInt(wifiCountString);
+                 index++;
 
                 for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+                    // Check bounds for wifi name, mac, rssi
+                    if (values.length <= index + 2) {
+                        break; // Not enough data for this wifi entry
+                    }
+                    index += 1; // wifi name (skip)
                     String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                    String rssiString = values[index++];
+                    if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssiString.isEmpty()) {
+                        try {
+                            int rssi = Integer.parseInt(rssiString);
+                            network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssi));
+                        } catch (NumberFormatException e) {
+                            // Skip wifi point if RSSI is invalid (cannot be parsed as decimal)
                         }
                     }
                 }
+            }
+
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+            // Log error or handle gracefully if the network string format is unexpected
+            // Using System.err for simplicity; replace with proper logging (e.g., Log.warning) in production
+             System.err.println("Error parsing network data in WatchProtocolDecoder: " + e.getMessage() + " for data part: " + networkDataString);
+        }
+
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        // Only set network if it contains valid data
+        if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty()) ||
+            (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
