diff --git a/tmp/0deb0c12-a099-4f79-8354-db210865dcc6_buggy.java b/tmp/e96df306-fbb0-474d-a079-904c60ee91e6_fixed.java
index ee599aa..9fb324a 100644
--- a/tmp/0deb0c12-a099-4f79-8354-db210865dcc6_buggy.java
+++ b/tmp/e96df306-fbb0-474d-a079-904c60ee91e6_fixed.java
@@ -1,50 +1,81 @@
     private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
         int length = 0;
         if (hasLength) {
             length = buf.readUnsignedByte();
             if (length == 0) {
+                // Original logic to check for a block of zeros after the length byte
                 boolean zeroedData = true;
-                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
+                int checkStartIndex = buf.readerIndex() + 9;
+                int checkEndIndex = buf.readerIndex() + 45;
+                // Ensure check indices are within buffer bounds before iterating
+                checkStartIndex = Math.min(checkStartIndex, buf.writerIndex());
+                checkEndIndex = Math.min(checkEndIndex, buf.writerIndex());
+
+                if (checkStartIndex < checkEndIndex) { // Check only if there is a valid range
+                    for (int i = checkStartIndex; i < checkEndIndex; i++) {
                         if (buf.getByte(i) != 0) {
                             zeroedData = false;
                             break;
                         }
                     }
+                } // If range is invalid/empty, zeroedData remains true (original implicit behavior)
+
+
                 if (zeroedData) {
+                    // Original skip logic when zeroed data is found
                     buf.skipBytes(Math.min(buf.readableBytes(), 45));
                 }
+                // FIX: Always return false if length is 0, indicating no valid LBS data was decoded.
                 return false;
             }
+            // If length > 0, proceed...
         }
 
+        // Decode MCC, MNC, LAC, CID (original logic)
         int mcc = buf.readUnsignedShort();
         int mnc;
         if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
             mnc = buf.readUnsignedShort();
         } else {
             mnc = buf.readUnsignedByte();
         }
         int lac;
         if (type == MSG_LBS_ALARM) {
             lac = buf.readInt();
         } else {
             lac = buf.readUnsignedShort();
         }
         long cid;
         if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
             cid = buf.readLong();
         } else if (type == MSG_GPS_LBS_6) {
             cid = buf.readUnsignedInt();
         } else {
             cid = buf.readUnsignedMedium();
         }
 
+        // Avoid setting network if MCC is 0, as it indicates invalid data
+        if (mcc != 0) {
             position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
+        } else {
+             // If MCC is 0, we might have read invalid data, potentially due to !hasLength.
+             // Consider if returning false is more appropriate here.
+             // However, the original code returned true, let's maintain that for now
+             // unless mcc=0 is always an error. GT06 protocol might send mcc=0 sometimes.
+        }
 
+
+        // Original skip logic at the end
+        // This skip depends on 'length' which is only non-zero if hasLength was true and length byte was > 0.
         if (length > 9) {
+            // This assumes the main LBS data (MCC, MNC, LAC, CID) is 9 bytes.
+            // This might not always be accurate depending on the field sizes used.
+            // A more robust approach would calculate actual bytes read, but sticking to original for now.
             buf.skipBytes(length - 9);
         }
 
+        // Return true only if we didn't return false earlier (i.e., length != 0 if hasLength was true)
+        // and potentially only if mcc was non-zero? Let's keep original return true for now.
         return true;
     }
\ No newline at end of file
