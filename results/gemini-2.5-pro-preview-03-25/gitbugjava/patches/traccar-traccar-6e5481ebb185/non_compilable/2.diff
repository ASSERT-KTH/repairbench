diff --git a/tmp/fd086f84-02be-4c82-a4fc-d0311440339e_buggy.java b/tmp/6fc31c96-7f65-4acc-8ddf-131109c211bf_fixed.java
index ee599aa..83bc3d7 100644
--- a/tmp/fd086f84-02be-4c82-a4fc-d0311440339e_buggy.java
+++ b/tmp/6fc31c96-7f65-4acc-8ddf-131109c211bf_fixed.java
@@ -1,50 +1,111 @@
     private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
         int length = 0;
         if (hasLength) {
+            if (!buf.isReadable()) { // Check if there's at least 1 byte for length
+                return false;
+            }
             length = buf.readUnsignedByte();
             if (length == 0) {
+                // Original code had a check for subsequent zero bytes, possibly for specific device quirks.
+                // Let's retain the check but improve it slightly. Check readable bytes from current position.
+                // Max check length of 45 seems arbitrary, but we'll keep it for compatibility.
                 boolean zeroedData = true;
-                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
-                    if (buf.getByte(i) != 0) {
+                int bytesToCheck = Math.min(buf.readableBytes(), 45); // How many bytes to check/skip if zeroed
+                for (int i = 0; i < bytesToCheck; i++) {
+                    if (buf.getByte(buf.readerIndex() + i) != 0) {
                         zeroedData = false;
                         break;
                     }
                 }
                 if (zeroedData) {
-                    buf.skipBytes(Math.min(buf.readableBytes(), 45));
+                    // If the following bytes are indeed zero, skip them as the original code intended.
+                    buf.skipBytes(bytesToCheck);
                 }
+                // Regardless of zeroedData, length 0 means no valid LBS data present.
                 return false;
             }
         }
 
+        // Remember position before reading variable-length LBS data
+        int startReaderIndex = buf.readerIndex();
+
+        // Check readable bytes before each read operation
+        if (buf.readableBytes() < 2) { // For mcc (unsigned short)
+            return false;
+        }
         int mcc = buf.readUnsignedShort();
+
         int mnc;
-        if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
+        boolean mncShort = BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6;
+        if (mncShort) {
+            if (buf.readableBytes() < 2) { // For mnc (unsigned short)
+                 return false;
+            }
             mnc = buf.readUnsignedShort();
         } else {
+            if (buf.readableBytes() < 1) { // For mnc (unsigned byte)
+                 return false;
+            }
             mnc = buf.readUnsignedByte();
         }
+
         int lac;
-        if (type == MSG_LBS_ALARM) {
+        boolean lacInt = type == MSG_LBS_ALARM;
+        if (lacInt) {
+            if (buf.readableBytes() < 4) { // For lac (int)
+                 return false;
+            }
             lac = buf.readInt();
         } else {
+            if (buf.readableBytes() < 2) { // For lac (unsigned short)
+                 return false;
+            }
             lac = buf.readUnsignedShort();
         }
+
         long cid;
-        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
+        boolean cidLong = type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7;
+        boolean cidInt = type == MSG_GPS_LBS_6;
+        if (cidLong) {
+            if (buf.readableBytes() < 8) { // For cid (long)
+                 return false;
+            }
             cid = buf.readLong();
-        } else if (type == MSG_GPS_LBS_6) {
+        } else if (cidInt) {
+            if (buf.readableBytes() < 4) { // For cid (unsigned int)
+                 return false;
+            }
             cid = buf.readUnsignedInt();
         } else {
+            if (buf.readableBytes() < 3) { // For cid (unsigned medium)
+                 return false;
+            }
             cid = buf.readUnsignedMedium();
         }
 
+        // Calculate how many bytes were actually read for the MCC/MNC/LAC/CID structure
+        int bytesRead = buf.readerIndex() - startReaderIndex;
+
+        // If length was provided, check consistency and skip remaining bytes
+        if (hasLength) {
+            if (length < bytesRead) {
+                // Declared length is less than what we read based on type; inconsistent data.
+                return false;
+            }
+            int bytesToSkip = length - bytesRead;
+            if (bytesToSkip > 0) {
+                if (buf.readableBytes() < bytesToSkip) {
+                    // Not enough bytes left in buffer to skip according to length field; inconsistent data.
+                    return false;
+                }
+                buf.skipBytes(bytesToSkip);
+            }
+            // if bytesToSkip is 0 (length == bytesRead), do nothing.
+        }
+        // If !hasLength, assume the LBS data ends after reading CID.
+
         position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
-        if (length > 9) {
-            buf.skipBytes(length - 9);
-        }
-
         return true;
     }
\ No newline at end of file
