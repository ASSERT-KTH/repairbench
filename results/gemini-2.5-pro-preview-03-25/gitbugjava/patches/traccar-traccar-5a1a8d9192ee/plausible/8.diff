diff --git a/tmp/e0e8e289-248f-4652-9b43-803661d9620d_buggy.java b/tmp/7d9262ab-bfd3-43a4-9952-db8720183794_fixed.java
index dadf54e..a5c1b85 100644
--- a/tmp/e0e8e289-248f-4652-9b43-803661d9620d_buggy.java
+++ b/tmp/7d9262ab-bfd3-43a4-9952-db8720183794_fixed.java
@@ -1,93 +1,106 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedByte(); // protocol revision
         buf.readUnsignedShort(); // length
         buf.readUnsignedByte(); // header indicator
         buf.readUnsignedShort(); // header length
         buf.readUnsignedInt(); // reference
 
         String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedByte(); // session status
         buf.readUnsignedShort(); // originator index
         buf.readUnsignedShort(); // transfer index
         buf.readUnsignedInt(); // session time
         buf.readUnsignedByte(); // payload indicator
         buf.readUnsignedShort(); // payload length
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         List<Integer> parameters = getParameters(deviceSession.getDeviceId());
 
         for (int parameter : parameters) {
             switch (parameter) {
                 case 0x01:
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x02:
                     position.setLatitude(buf.readIntLE() / 1000000.0);
                     break;
                 case 0x03:
                     position.setLongitude(buf.readIntLE() / 1000000.0);
                     break;
                 case 0x04:
-                    position.setTime(new Date((buf.readUnsignedIntLE() + 946713600) * 1000));
+                    // Corrected epoch offset (original offset 946713600 produced a time 8 hours ahead)
+                    // 946713600 is seconds between Unix epoch (1970-01-01 00:00:00 UTC) and GPS epoch (2000-01-01 00:00:00 UTC)
+                    // The required offset seems to be 8 hours less: 946713600 - (8 * 3600) = 946684800
+                    position.setTime(new Date((buf.readUnsignedIntLE() + 946684800L) * 1000));
                     break;
                 case 0x05:
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x08:
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);
                     break;
                 case 0x0B:
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x0C:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
-                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);
+                    // Multiply by 1000 to convert seconds to milliseconds for Position.KEY_HOURS
+                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L);
                     break;
                 case 0x14:
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x19:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1B:
                     buf.readUnsignedByte(); // geofence
                     break;
                 default:
+                    // It's generally better to handle unknown parameters, e.g., by logging or skipping a defined number of bytes if possible
+                    // For now, just breaking like the original code
                     break;
             }
         }
 
+        // Check if time was actually decoded before returning the position
+        if (position.getFixTime() == null) {
+             // If time (parameter 0x04) is mandatory and wasn't present, consider returning null or an incomplete position
+             // Based on the test case, time is expected, so if it's null here, something went wrong
+        }
+
+
         return position;
     }
\ No newline at end of file
