diff --git a/tmp/403f0be8-d268-497a-98fb-19a6379f5bef_buggy.java b/tmp/c73c9e27-f0f9-4479-8857-1c320116076f_fixed.java
index dadf54e..6b2a1eb 100644
--- a/tmp/403f0be8-d268-497a-98fb-19a6379f5bef_buggy.java
+++ b/tmp/c73c9e27-f0f9-4479-8857-1c320116076f_fixed.java
@@ -1,93 +1,110 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedByte(); // protocol revision
         buf.readUnsignedShort(); // length
         buf.readUnsignedByte(); // header indicator
         buf.readUnsignedShort(); // header length
         buf.readUnsignedInt(); // reference
 
         String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedByte(); // session status
         buf.readUnsignedShort(); // originator index
         buf.readUnsignedShort(); // transfer index
-        buf.readUnsignedInt(); // session time
+        buf.readUnsignedInt(); // session time (ignored for position time)
         buf.readUnsignedByte(); // payload indicator
         buf.readUnsignedShort(); // payload length
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         List<Integer> parameters = getParameters(deviceSession.getDeviceId());
 
+        // Constant for seconds between Unix epoch (1970-01-01 00:00:00 UTC)
+        // and the protocol's epoch (2000-01-01 00:00:00 UTC).
+        // 30 years = (30 * 365 + 7 leap days) = 10957 days
+        // 10957 days * 86400 seconds/day = 946684800 seconds.
+        final long EPOCH_OFFSET_2000 = 946684800L;
+
         for (int parameter : parameters) {
             switch (parameter) {
                 case 0x01:
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x02:
                     position.setLatitude(buf.readIntLE() / 1000000.0);
                     break;
                 case 0x03:
                     position.setLongitude(buf.readIntLE() / 1000000.0);
                     break;
                 case 0x04:
-                    position.setTime(new Date((buf.readUnsignedIntLE() + 946713600) * 1000));
+                    // Time is reported as seconds since 2000-01-01 00:00:00 UTC
+                    long secondsSince2000 = buf.readUnsignedIntLE();
+                    position.setTime(new Date((secondsSince2000 + EPOCH_OFFSET_2000) * 1000));
                     break;
                 case 0x05:
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x08:
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);
                     break;
                 case 0x0B:
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x0C:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
-                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);
+                    // Assuming this represents seconds, convert to milliseconds for KEY_HOURS
+                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L);
                     break;
                 case 0x14:
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x19:
-                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
+                    // Store battery level as voltage (e.g., value is in centivolts)
+                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() / 100.0);
                     break;
                 case 0x1A:
-                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
+                     // Store power/voltage (e.g., value is in centivolts)
+                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() / 100.0);
                     break;
                 case 0x1B:
                     buf.readUnsignedByte(); // geofence
                     break;
                 default:
+                    // Unknown parameter, skip if possible (requires knowing parameter lengths)
+                    // For now, just ignore.
                     break;
             }
         }
 
+        // If the position time was not set (e.g. parameter 0x04 was not included in the format string)
+        // potentially use the session time from the header as a fallback?
+        // This part depends on protocol specification, leaving as is for now.
+
         return position;
     }
\ No newline at end of file
