diff --git a/tmp/02cd13e5-0498-45bf-9369-f2e100fc3133_buggy.java b/tmp/cf235d70-f8de-478d-9b1e-1eedabfd27d8_fixed.java
index e807cbf..7976429 100644
--- a/tmp/02cd13e5-0498-45bf-9369-f2e100fc3133_buggy.java
+++ b/tmp/cf235d70-f8de-478d-9b1e-1eedabfd27d8_fixed.java
@@ -1,7 +1,21 @@
     private boolean isInlineable(Document.OutputSettings out) {
         if (!tag.isInline())
             return false;
-        return (parent() == null || parent().isBlock())
-            && !isEffectivelyFirst()
-            && !out.outline();
+        // Tightly coupled to TextNode.MarkdownEntities - avoid outline() == true, and structure like <p>foo</p>
+        // Switch block tags to non-inlineable when outline is true, to avoid inserting extraneous spaces.
+        if (out.outline())
+            return false;
+
+        // Need block parent -- unless we are the root.
+        if (!(parent() == null || parent().isBlock()))
+            return false;
+
+        // If a tag formats as block (e.g. <br>) it is not inlineable. Seems counter-intuitive, but is for purposes of
+        // determining if TextNodes need newlines inserted, on basis of adjacent elements. E.g. <p><span>One</span><br><span>Two</span></p>
+        // The <br> should make Two print on a new line, so it acts like a block here.
+        if (tag.formatAsBlock())
+            return false;
+
+        // Inlineable if not the first effectively seen child node of parent.
+        return !isEffectivelyFirst();
     }
