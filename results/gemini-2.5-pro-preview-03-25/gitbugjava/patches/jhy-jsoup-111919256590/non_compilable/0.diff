diff --git a/tmp/ad014b37-ad30-43a5-b257-026e64910ebd_buggy.java b/tmp/13c996e1-e871-452e-942a-e99c711de8e9_fixed.java
index e807cbf..6e54822 100644
--- a/tmp/ad014b37-ad30-43a5-b257-026e64910ebd_buggy.java
+++ b/tmp/13c996e1-e871-452e-942a-e99c711de8e9_fixed.java
@@ -1,7 +1,27 @@
     private boolean isInlineable(Document.OutputSettings out) {
+        // Must be inline tag
         if (!tag.isInline())
             return false;
-        return (parent() == null || parent().isBlock())
-            && !isEffectivelyFirst()
-            && !out.outline();
+        // Outline mode forces non-inlineable
+        if (out.outline())
+            return false;
+
+        // Check parent behavior
+        Element parent = parent(); // Cache parent lookup
+        if (parent != null && parent.tag().formatAsBlock()) {
+            // Inside a block-formatting parent:
+            if (tag.getName().equals("br")) {
+                // <br> is never inlineable if the parent formats as block, always breaks line relative to siblings
+                return false;
+            } else {
+                // Other inline tags (<b>, <i>, etc.) are inlineable
+                // only if they are NOT the first significant child.
+                return !isEffectivelyFirst();
+            }
+        } else {
+            // Parent is null (root) or parent is inline/doesn't format as block.
+            // In this case, the inline element is inlineable by default.
+            // E.g. <span><a></a></span> -> <a> is inlineable
+            return true;
+        }
     }
\ No newline at end of file
