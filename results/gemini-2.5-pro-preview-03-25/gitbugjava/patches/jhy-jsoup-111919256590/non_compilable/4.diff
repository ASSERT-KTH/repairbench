diff --git a/tmp/583a5c35-aa17-46dc-9a29-611bdc7d1dd9_buggy.java b/tmp/f445f799-5e35-48f0-95ee-b580fc3091f5_fixed.java
index e807cbf..b79b6e0 100644
--- a/tmp/583a5c35-aa17-46dc-9a29-611bdc7d1dd9_buggy.java
+++ b/tmp/f445f799-5e35-48f0-95ee-b580fc3091f5_fixed.java
@@ -1,7 +1,17 @@
     private boolean isInlineable(Document.OutputSettings out) {
-        if (!tag.isInline())
+        // inlineable function determines if the element may be rendered inline
+        // based on its tag type, and the context of its parent node
+        if (!tag.isInline()) // 1. Must be an inline tag
             return false;
+
+        // cannot be inlineable if the parent node is implicitly formatted as block, but this element is the first
+        // effective node in the block.
+        // null parent == root, root is effectively block
+        // Parent is block
+        // And this is the first node
+        // Kicks in for e.g. <p> <b>First</b> Text</p> -> <p> \n <b>First... - B is not inlineable
+        // But not for <p> Test <b>Second</b> -> <p> Test <b>Second</b> - B is inlineable
         return (parent() == null || parent().isBlock())
-            && !isEffectivelyFirst()
-            && !out.outline();
+            && !isEffectivelyFirst(); // Removed `&& !out.outline()` as per fix for #1911
+            // original: && !isEffectivelyFirst() && !out.outline();
     }
\ No newline at end of file
