diff --git a/tmp/cfcd5752-4767-450d-95e1-bfa882641f9f_buggy.java b/tmp/d5dd27f0-1270-42aa-b33a-6ca8fe21bee6_fixed.java
index e807cbf..89d71a9 100644
--- a/tmp/cfcd5752-4767-450d-95e1-bfa882641f9f_buggy.java
+++ b/tmp/d5dd27f0-1270-42aa-b33a-6ca8fe21bee6_fixed.java
@@ -1,7 +1,30 @@
     private boolean isInlineable(Document.OutputSettings out) {
+        // 1. Block tags are never inlineable
         if (!tag.isInline())
             return false;
-        return (parent() == null || parent().isBlock())
-            && !isEffectivelyFirst()
-            && !out.outline();
+
+        // 2. Special handling for outline mode - if outline, nothing is inlineable
+        if (out.outline())
+            return false;
+
+        // 3. Element cannot be inlineable if its parent is not block
+        // (e.g. prevents indenting a span within an anchor)
+        // null parent is OK (root)
+        if (parent() != null && !parent().isBlock())
+            return false;
+
+        // 4. Determine inlineable status based on position and tag type
+        final boolean effectivelyFirst = isEffectivelyFirst();
+
+        if (tag.getName().equals("br")) {
+            // BR is inlineable *only* if it's the first effective child.
+            // Allows `<p><br>...` (no indent before BR)
+            // but forces indent for `<p>Foo</p><br>...` (indent before BR)
+            return effectivelyFirst;
+        } else {
+            // Other inline tags (like span, a) are inlineable *unless* they are the first effective child.
+            // Forces indent for `<div>\n <span>...` (first span not inlineable -> gets indented)
+            // Allows `...<span>1</span><span>2</span>...` (second span is inlineable -> stays on same line)
+            return !effectivelyFirst;
+        }
     }
\ No newline at end of file
