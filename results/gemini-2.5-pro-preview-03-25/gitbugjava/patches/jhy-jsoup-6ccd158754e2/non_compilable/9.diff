diff --git a/tmp/c1ffab02-0097-4a56-8023-037de4354535_buggy.java b/tmp/d9e8dd4d-93fd-4a60-9ddf-2a35a5efde86_fixed.java
index 23f078d..8f75fed 100644
--- a/tmp/c1ffab02-0097-4a56-8023-037de4354535_buggy.java
+++ b/tmp/d9e8dd4d-93fd-4a60-9ddf-2a35a5efde86_fixed.java
@@ -1,14 +1,27 @@
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+
+// Assume UTF_8 is defined elsewhere, e.g.:
+// private static final Charset UTF_8 = StandardCharsets.UTF_8;
+
+// The fixed function:
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); ) { // Use manual increment inside the loop to handle supplementary characters correctly
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
+                // Encode the full code point (which might be 1 or 2 chars)
+                sb.append(URLEncoder.encode(new String(Character.toChars(c)), StandardCharsets.UTF_8.name())); // Use StandardCharsets for clarity if possible, or keep existing UTF_8 field
                 // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
+                // Basic ASCII characters are appended directly
                 sb.append((char) c);
             }
+            // Advance index by the number of chars used by the current code point (1 for BMP, 2 for supplementary)
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
