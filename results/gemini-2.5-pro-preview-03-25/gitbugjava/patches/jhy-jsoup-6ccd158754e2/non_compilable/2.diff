diff --git a/tmp/a0c3b6cb-fe0f-4abb-89fe-935fb8aea003_buggy.java b/tmp/6baee518-c067-4ced-88b6-6ef4964ffba4_fixed.java
index 23f078d..aebd3e7 100644
--- a/tmp/a0c3b6cb-fe0f-4abb-89fe-935fb8aea003_buggy.java
+++ b/tmp/6baee518-c067-4ced-88b6-6ef4964ffba4_fixed.java
@@ -1,14 +1,22 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); ) { // Iterate by code point, not by char
             int c = s.codePointAt(i);
+            int charCount = Character.charCount(c);
+
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
+                // Convert the single code point to its character representation (might be 1 or 2 chars)
+                String character = new String(Character.toChars(c));
+                // Encode that character representation using UTF-8
+                sb.append(URLEncoder.encode(character, UTF_8.name()));
                 // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
+                // Append the single character directly (safe for ASCII)
                 sb.append((char) c);
             }
+            // Advance index by the number of chars used by the current code point
+            i += charCount;
         }
     }
\ No newline at end of file
