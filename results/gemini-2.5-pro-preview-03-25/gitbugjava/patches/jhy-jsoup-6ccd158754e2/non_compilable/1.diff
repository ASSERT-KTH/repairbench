diff --git a/tmp/4c266f4d-4b2c-4886-804f-3771b538b68d_buggy.java b/tmp/41953d10-a0bb-4d0e-8914-2d1633bbc6c8_fixed.java
index 23f078d..c4cc57c 100644
--- a/tmp/4c266f4d-4b2c-4886-804f-3771b538b68d_buggy.java
+++ b/tmp/41953d10-a0bb-4d0e-8914-2d1633bbc6c8_fixed.java
@@ -1,14 +1,31 @@
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets; // Import needed for UTF_8
+
+// Assume UTF_8 is defined like:
+// import static org.jsoup.helper.HttpConnection.UTF_8;
+// Or use StandardCharsets.UTF_8 directly. The fix below uses StandardCharsets.UTF_8.
+
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
+        // Iterate by code point to properly handle supplementary characters (like emojis)
+        for (int i = 0; i < s.length(); ) {
+            final int c = s.codePointAt(i); // get the code point at index i
+
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
-            } else {
+            } else if (c <= 127) { // Basic ASCII range (0-127), excluding space
+                // Append basic ASCII characters directly
                 sb.append((char) c);
+            } else { // Character is non-ASCII (c > 127)
+                // This includes supplementary characters which are > 0xFFFF but also single chars > 127
+                // URLEncoder.encode handles converting the code point (via its char representation) to %-encoded UTF-8 bytes
+                // Character.toChars handles supplementary characters correctly, returning a 2-char array if needed
+                sb.append(URLEncoder.encode(new String(Character.toChars(c)), StandardCharsets.UTF_8.name()));
+                // ^^ is a bit heavy-handed - if perf critical, we could optimize
             }
+
+            // Advance index by the number of chars used by the current code point (1 for BMP, 2 for supplementary)
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
