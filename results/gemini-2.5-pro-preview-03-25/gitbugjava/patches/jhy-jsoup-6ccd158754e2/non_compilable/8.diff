diff --git a/tmp/76522c32-d385-4edc-8f79-95fd2a67aac5_buggy.java b/tmp/c0abd448-6c95-4cbf-925e-c2ae5e9083aa_fixed.java
index 23f078d..588af86 100644
--- a/tmp/76522c32-d385-4edc-8f79-95fd2a67aac5_buggy.java
+++ b/tmp/c0abd448-6c95-4cbf-925e-c2ae5e9083aa_fixed.java
@@ -1,14 +1,19 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); ) { // Iterate by code points, not chars
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
-            } else {
+            } else if (c < 128) { // Basic ASCII
                 sb.append((char) c);
+            } else { // Needs encoding - either supplementary char or > 127
+                // Convert the code point possibly multiple chars (if supplementary) to a String
+                String cs = new String(Character.toChars(c));
+                // Encode that String using UTF-8
+                sb.append(URLEncoder.encode(cs, UTF_8.name()));
+                // ^^ is a bit heavy-handed - if perf critical, we could optimize by manually encoding
             }
+            // Advance index by 1 for basic multilingual plane chars, 2 for supplementary chars
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
