diff --git a/tmp/9e99ae03-95d5-434d-9c36-b159f7551927_buggy.java b/tmp/6d7e7fdd-3363-405b-b22e-4e5be1315afa_fixed.java
index 23f078d..6e46868 100644
--- a/tmp/9e99ae03-95d5-434d-9c36-b159f7551927_buggy.java
+++ b/tmp/6d7e7fdd-3363-405b-b22e-4e5be1315afa_fixed.java
@@ -1,14 +1,18 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); ) { // loop progresses based on code points, not chars
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // Convert the code point to its char representation (possibly 2 chars)
+                // then create a String from it to pass to URLEncoder
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
                 // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
                 sb.append((char) c);
             }
+            // Advance index by the number of chars used by the current code point (1 or 2)
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
