diff --git a/tmp/e4dc8c7a-81cc-4656-adb1-fe994a12ed0c_buggy.java b/tmp/ae6bb8f8-667b-47e6-a1e3-cb2367ca24b8_fixed.java
index 23f078d..0b07cdf 100644
--- a/tmp/e4dc8c7a-81cc-4656-adb1-fe994a12ed0c_buggy.java
+++ b/tmp/ae6bb8f8-667b-47e6-a1e3-cb2367ca24b8_fixed.java
@@ -1,14 +1,25 @@
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+
+// Fqn indicates this is likely HttpConnection.Response. Use StandardCharsets.UTF_8
+// instead of the old Charset.forName("UTF-8") / "UTF-8" string literal.
+
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); ) { // Iterate by code point, not by char
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
+                // Encode the character using UTF-8 and then URL encode the bytes
+                sb.append(URLEncoder.encode(new String(Character.toChars(c)), StandardCharsets.UTF_8.name()));
                 // ^^ is a bit heavy-handed - if perf critical, we could optimize
             } else {
+                // Append ASCII characters directly
                 sb.append((char) c);
             }
+            // Advance the index by the number of chars used by the current code point (1 or 2)
+            i += Character.charCount(c);
         }
     }
