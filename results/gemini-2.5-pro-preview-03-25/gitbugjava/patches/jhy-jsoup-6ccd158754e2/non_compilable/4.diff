diff --git a/tmp/58110f16-96e6-49c3-bb25-db3f0620ed02_buggy.java b/tmp/67c4b460-1502-4fdd-84a8-6e7fcb049341_fixed.java
index 23f078d..a2dcecc 100644
--- a/tmp/58110f16-96e6-49c3-bb25-db3f0620ed02_buggy.java
+++ b/tmp/67c4b460-1502-4fdd-84a8-6e7fcb049341_fixed.java
@@ -1,14 +1,35 @@
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets; // Assuming UTF_8 is similar to StandardCharsets.UTF_8
+
+// Assuming UTF_8 is a defined Charset, like:
+// import java.nio.charset.Charset;
+// private static final Charset UTF_8 = StandardCharsets.UTF_8;
+// Or comes from org.jsoup.helper.DataUtil.UTF_8 as seen in imports usually
+
+// The fix involves correctly advancing the loop index when dealing with supplementary characters (code points > 0xFFFF),
+// which are represented by two char units (a surrogate pair) in Java Strings.
+// The original code always incremented the index by 1, causing the second char (low surrogate) of a supplementary character
+// to be processed incorrectly in the next iteration.
+
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
+        for (int i = 0; i < s.length(); ) { // Modified loop: manual index increment inside
+            int c = s.codePointAt(i); // Correctly reads full code point, potentially spanning two chars
+            int charCount = Character.charCount(c); // Determine how many chars this code point occupies (1 or 2)
+
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
-            } else {
+            } else if (c < 128) { // In ASCII range (excluding space, handled above)
                 sb.append((char) c);
+            } else { // Out of ASCII range (c >= 128), needs encoding
+                // Using Character.toChars(c) handles both BMP and supplementary characters correctly
+                // URLEncoder handles the conversion to bytes and percent-encoding
+                // Assuming UTF_8 is a Charset object available in the scope (e.g., StandardCharsets.UTF_8 or from DataUtil)
+                sb.append(URLEncoder.encode(new String(Character.toChars(c)), StandardCharsets.UTF_8.name()));
+                // ^^ is a bit heavy-handed - if perf critical, we could optimize by encoding bytes directly
             }
+
+            i += charCount; // Advance index by the number of char units consumed (1 or 2)
         }
     }
\ No newline at end of file
