diff --git a/tmp/83bf0287-36f6-4706-806a-834f0bd28d5f_buggy.java b/tmp/30b7706b-afbe-464b-89eb-54cd6c13713e_fixed.java
index 23f078d..e6d18a5 100644
--- a/tmp/83bf0287-36f6-4706-806a-834f0bd28d5f_buggy.java
+++ b/tmp/30b7706b-afbe-464b-89eb-54cd6c13713e_fixed.java
@@ -1,14 +1,26 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        final int len = s.length();
+        for (int i = 0; i < len; ) { // Iterate by code point, incrementing i manually
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
+                // This character is not in the basic ASCII range (0-127).
+                // It might be a BMP character (128-65535) or a supplementary character (>65535).
+                // We need to encode it using URLEncoder.
+                // Character.toChars(c) correctly handles both BMP and supplementary characters,
+                // returning a char[] of length 1 or 2 respectively.
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+                // ^^ URLEncoder is a bit heavy-handed for single chars - if perf critical, we could optimize
+                // by doing the UTF-8 bytes -> % encoding manually.
             } else {
+                // This character is in the basic ASCII range (0-127), excluding space handled above.
+                // Append it directly.
                 sb.append((char) c);
             }
+            // Advance the index 'i' by the number of char units used by the current code point.
+            // This will be 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(c);
         }
     }
\ No newline at end of file
