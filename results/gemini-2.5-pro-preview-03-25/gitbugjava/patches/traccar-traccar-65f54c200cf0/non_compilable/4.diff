diff --git a/tmp/3fa96f78-f16d-4a5b-8525-958ae1e1a6cc_buggy.java b/tmp/3c1d2344-7f24-468c-9bdc-a196d2a0b598_fixed.java
index 477325f..bdf9141 100644
--- a/tmp/3fa96f78-f16d-4a5b-8525-958ae1e1a6cc_buggy.java
+++ b/tmp/3c1d2344-7f24-468c-9bdc-a196d2a0b598_fixed.java
@@ -1,178 +1,217 @@
     private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
-        int globalMask = 0x0f;
-
         if (codec == CODEC_GH3000) {
 
+            int globalMask = 0x0f; // Default mask for GH3000 if not present
+
             long time = buf.readUnsignedInt() & 0x3fffffff;
             time += 1167609600; // 2007-01-01 00:00:00
 
+            // Check if the full data structure including global mask is present
+            if (buf.readableBytes() > 16) { // Heuristic: Check if there's enough data for mask + location block
                  globalMask = buf.readUnsignedByte();
-            if (BitUtil.check(globalMask, 0)) {
+            }
+
+            if (BitUtil.check(globalMask, 0)) { // Location Data
 
                 position.setTime(new Date(time * 1000));
 
                 int locationMask = buf.readUnsignedByte();
 
                 if (BitUtil.check(locationMask, 0)) {
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
 
                 if (BitUtil.check(locationMask, 1)) {
                     position.setAltitude(buf.readUnsignedShort());
                 }
 
                 if (BitUtil.check(locationMask, 2)) {
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
 
                 if (BitUtil.check(locationMask, 3)) {
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
 
                 if (BitUtil.check(locationMask, 4)) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
 
-                if (BitUtil.check(locationMask, 5)) {
+                if (BitUtil.check(locationMask, 5)) { // Cell Tower Info
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
-                    if (BitUtil.check(locationMask, 6)) {
+                    if (BitUtil.check(locationMask, 6)) { // Signal Strength
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
 
-                    if (BitUtil.check(locationMask, 7)) {
+                    if (BitUtil.check(locationMask, 7)) { // Operator
                         cellTower.setOperator(buf.readUnsignedInt());
                     }
 
                     position.setNetwork(new Network(cellTower));
 
-                } else {
-                    if (BitUtil.check(locationMask, 6)) {
+                } else { // If no Cell Tower, check for RSSI and Operator separately
+                    if (BitUtil.check(locationMask, 6)) { // RSSI
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     }
-                    if (BitUtil.check(locationMask, 7)) {
+                    if (BitUtil.check(locationMask, 7)) { // Operator
                         position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                     }
                 }
 
             } else {
-
+                // No location data in this record
                 getLastLocation(position, new Date(time * 1000));
+            }
+
+            // Read 1 byte IO data based on globalMask
+            if (BitUtil.check(globalMask, 1)) {
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                    decodeParameter(position, buf.readUnsignedByte(), buf, 1, codec, model);
+                }
+            }
 
+            // Read 2 byte IO data based on globalMask
+            if (BitUtil.check(globalMask, 2)) {
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                    decodeParameter(position, buf.readUnsignedByte(), buf, 2, codec, model);
+                }
+            }
+
+            // Read 4 byte IO data based on globalMask
+            if (BitUtil.check(globalMask, 3)) {
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                    decodeParameter(position, buf.readUnsignedByte(), buf, 4, codec, model);
+                }
             }
+            // Note: GH3000 typically doesn't use 8, 16, or X byte IO in the same way as Codec 8/8E/16
 
         } else {
+            // Logic for Codec 8, 8 Extended, 16
 
             position.setTime(new Date(buf.readLong()));
-
             position.set("priority", buf.readUnsignedByte());
-
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude(buf.readShort());
             position.setCourse(buf.readUnsignedShort());
-
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
-
             position.setValid(satellites != 0);
-
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
             position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
             if (codec == CODEC_16) {
-                buf.readUnsignedByte(); // generation type
+                buf.readUnsignedByte(); // generation type (specific to Codec 16, often ignored)
             }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
+            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records count (ignored, we read N1, N2 etc.)
 
-        }
+            // Read IO Elements based on Teltonika Codec 8 / 8 Ext / 16 structure
 
-        // Read 1 byte data
-        if (BitUtil.check(globalMask, 1)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read N1 count and items (1 byte value)
+            int cnt1 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt1; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
             }
-        }
 
-        // Read 2 byte data
-        if (BitUtil.check(globalMask, 2)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read N2 count and items (2 bytes value)
+            int cnt2 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt2; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
             }
-        }
 
-        // Read 4 byte data
-        if (BitUtil.check(globalMask, 3)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read N4 count and items (4 bytes value)
+            int cnt4 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt4; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
             }
-        }
 
-        // Read 8 byte data
-        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read N8 count and items (8 bytes value)
+            int cnt8 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt8; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
             }
-        }
 
-        // Read 16 byte data
-        if (extended) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
-                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
-            }
-        }
-
-        // Read X byte data
+            // Read NX count and items (Variable length, only for Codec 8 Extended)
             if (codec == CODEC_8_EXT) {
-            int cnt = buf.readUnsignedShort();
-            for (int j = 0; j < cnt; j++) {
-                int id = buf.readUnsignedShort();
-                int length = buf.readUnsignedShort();
-                if (id == 256) {
+                int cntX = buf.readUnsignedShort(); // NX count is always 2 bytes
+                for (int j = 0; j < cntX; j++) {
+                    int id = buf.readUnsignedShort(); // NX ID is always 2 bytes
+                    int length = buf.readUnsignedShort(); // NX length is always 2 bytes
+                    if (length > buf.readableBytes()) {
+                         // Avoid IndexOutOfBoundsException if reported length is wrong
+                         throw new IndexOutOfBoundsException(
+                             "Declared Data Length (" + length + ") exceeds available buffer data ("
+                             + buf.readableBytes() + ") for variable IO ID " + id);
+                    }
+                    if (id == 256) { // VIN
                         position.set(Position.KEY_VIN,
                                 buf.readSlice(length).toString(StandardCharsets.US_ASCII));
-                } else if (id == 281) {
+                    } else if (id == 281) { // DTCs
                         position.set(Position.KEY_DTCS,
                                 buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
-                } else if (id == 385) {
+                    } else if (id == 385) { // Beacons
                         ByteBuf data = buf.readSlice(length);
-                    data.readUnsignedByte(); // data part
+                        if (data.readableBytes() > 0) {
+                            data.readUnsignedByte(); // data part (always 0?)
                             int index = 1;
                             while (data.isReadable()) {
+                                if (data.readableBytes() < 1) break; // Ensure flags byte exists
                                 int flags = data.readUnsignedByte();
-                        if (BitUtil.from(flags, 4) > 0) {
+                                if (BitUtil.from(flags, 4) > 0) { // iBeacon
+                                     if (data.readableBytes() < 20) break; // Need 16+2+2 bytes
                                      position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                                      position.set("beacon" + index + "Major", data.readUnsignedShort());
                                      position.set("beacon" + index + "Minor", data.readUnsignedShort());
-                        } else {
+                                } else { // Eddystone
+                                     if (data.readableBytes() < 16) break; // Need 10+6 bytes
                                      position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                                      position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                                 }
+                                if (data.readableBytes() < 1) break; // Need RSSI byte
                                 position.set("beacon" + index + "Rssi", (int) data.readByte());
-                        if (BitUtil.check(flags, 1)) {
+                                if (BitUtil.check(flags, 1)) { // Battery present
+                                     if (data.readableBytes() < 2) break;
                                      position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
                                 }
-                        if (BitUtil.check(flags, 2)) {
+                                if (BitUtil.check(flags, 2)) { // Temperature present
+                                     if (data.readableBytes() < 2) break;
                                      position.set("beacon" + index + "Temp", data.readUnsignedShort());
                                 }
                                 index += 1;
                              }
-                } else {
+                         }
+                    } else { // Generic variable length IO
                         position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                     }
                 }
             }
 
+            // Read N16 count and items (Seems specific to 'extended' mode, interpretation might vary)
+            // This was present in the buggy code's else block, structure kept for compatibility attempt.
+            if (extended) {
+                 int cnt16 = readExtByte(buf, codec, CODEC_8_EXT); // N16 count
+                 for (int j = 0; j < cnt16; j++) {
+                     int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16); // N16 ID
+                     if (buf.readableBytes() >= 16) {
+                         position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16))); // N16 Value
+                     } else {
+                         // Avoid IndexOutOfBoundsException
+                         throw new IndexOutOfBoundsException(
+                             "Not enough data for 16-byte IO value for ID " + id);
+                     }
+                 }
+            }
+        }
+
+        // Common post-processing
         decodeNetwork(position, model);
 
     }
\ No newline at end of file
