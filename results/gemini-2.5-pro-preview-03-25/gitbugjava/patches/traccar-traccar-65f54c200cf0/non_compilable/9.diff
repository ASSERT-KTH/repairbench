diff --git a/tmp/26676a62-4591-4fb3-8498-b67d41b4a46c_buggy.java b/tmp/0b8c0efb-a656-4539-b77c-3bab00436b4f_fixed.java
index 477325f..4273c08 100644
--- a/tmp/26676a62-4591-4fb3-8498-b67d41b4a46c_buggy.java
+++ b/tmp/0b8c0efb-a656-4539-b77c-3bab00436b4f_fixed.java
@@ -1,178 +1,189 @@
     private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
         int globalMask = 0x0f;
 
         if (codec == CODEC_GH3000) {
 
             long time = buf.readUnsignedInt() & 0x3fffffff;
             time += 1167609600; // 2007-01-01 00:00:00
 
             globalMask = buf.readUnsignedByte();
             if (BitUtil.check(globalMask, 0)) {
 
                 position.setTime(new Date(time * 1000));
 
                 int locationMask = buf.readUnsignedByte();
 
                 if (BitUtil.check(locationMask, 0)) {
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
 
                 if (BitUtil.check(locationMask, 1)) {
                     position.setAltitude(buf.readUnsignedShort());
                 }
 
                 if (BitUtil.check(locationMask, 2)) {
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
 
                 if (BitUtil.check(locationMask, 3)) {
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
 
                 if (BitUtil.check(locationMask, 4)) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
 
                 if (BitUtil.check(locationMask, 5)) {
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
                     if (BitUtil.check(locationMask, 6)) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
 
                     if (BitUtil.check(locationMask, 7)) {
                         cellTower.setOperator(buf.readUnsignedInt());
                     }
 
                     position.setNetwork(new Network(cellTower));
 
                 } else {
                     if (BitUtil.check(locationMask, 6)) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     }
                     if (BitUtil.check(locationMask, 7)) {
                         position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                     }
                 }
 
             } else {
 
                 getLastLocation(position, new Date(time * 1000));
 
             }
 
         } else {
 
             position.setTime(new Date(buf.readLong()));
 
             position.set("priority", buf.readUnsignedByte());
 
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude(buf.readShort());
             position.setCourse(buf.readUnsignedShort());
 
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.setValid(satellites != 0);
 
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
-            position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
+            // Use CODEC_16 as the marker for 2-byte fields
+            position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_16));
             if (codec == CODEC_16) {
                 buf.readUnsignedByte(); // generation type
             }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
+            // Use CODEC_16 as the marker for 2-byte fields (value is ignored)
+            readExtByte(buf, codec, CODEC_16); // total IO data records
 
         }
 
         // Read 1 byte data
+        // Use CODEC_16 as the marker for 2-byte count/ID
         if (BitUtil.check(globalMask, 1)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = readExtByte(buf, codec, CODEC_16);
             for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
+                decodeParameter(position, readExtByte(buf, codec, CODEC_16), buf, 1, codec, model);
             }
         }
 
         // Read 2 byte data
+        // Use CODEC_16 as the marker for 2-byte count/ID
         if (BitUtil.check(globalMask, 2)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = readExtByte(buf, codec, CODEC_16);
             for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
+                decodeParameter(position, readExtByte(buf, codec, CODEC_16), buf, 2, codec, model);
             }
         }
 
         // Read 4 byte data
+        // Use CODEC_16 as the marker for 2-byte count/ID
         if (BitUtil.check(globalMask, 3)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = readExtByte(buf, codec, CODEC_16);
             for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
+                decodeParameter(position, readExtByte(buf, codec, CODEC_16), buf, 4, codec, model);
             }
         }
 
         // Read 8 byte data
+        // Use CODEC_16 as the marker for 2-byte count/ID
         if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            // Check global mask bit 4 for Codec GH3000? Protocol docs are unclear. Assume standard for 8/8E/16.
+            // This section seems intended for 8/8E/16 based on the if condition, not global mask.
+            int cnt = readExtByte(buf, codec, CODEC_16);
             for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
+                decodeParameter(position, readExtByte(buf, codec, CODEC_16), buf, 8, codec, model);
             }
         }
 
         // Read 16 byte data
+        // This section uses the 'extended' flag (constructor param), separate from CODEC_8_EXT.
+        // Assume count/ID size follows the CODEC_16 rule here too.
         if (extended) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = readExtByte(buf, codec, CODEC_16);
             for (int j = 0; j < cnt; j++) {
-                int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
+                int id = readExtByte(buf, codec, CODEC_16);
                 position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
             }
         }
 
-        // Read X byte data
+        // Read X byte data (Only for CODEC_8_EXT)
         if (codec == CODEC_8_EXT) {
-            int cnt = buf.readUnsignedShort();
+            int cnt = buf.readUnsignedShort(); // NX count is always 2 bytes
             for (int j = 0; j < cnt; j++) {
-                int id = buf.readUnsignedShort();
-                int length = buf.readUnsignedShort();
+                int id = buf.readUnsignedShort(); // NX ID is always 2 bytes
+                int length = buf.readUnsignedShort(); // NX length is always 2 bytes
                 if (id == 256) {
                     position.set(Position.KEY_VIN,
                             buf.readSlice(length).toString(StandardCharsets.US_ASCII));
                 } else if (id == 281) {
                     position.set(Position.KEY_DTCS,
                             buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
-                } else if (id == 385) {
+                } else if (id == 385) { // BLE Beacons
                     ByteBuf data = buf.readSlice(length);
                     data.readUnsignedByte(); // data part
                     int index = 1;
                     while (data.isReadable()) {
                         int flags = data.readUnsignedByte();
                         if (BitUtil.from(flags, 4) > 0) {
                             position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                             position.set("beacon" + index + "Major", data.readUnsignedShort());
                             position.set("beacon" + index + "Minor", data.readUnsignedShort());
                         } else {
                             position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                             position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                         }
                         position.set("beacon" + index + "Rssi", (int) data.readByte());
                         if (BitUtil.check(flags, 1)) {
                             position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
                         }
                         if (BitUtil.check(flags, 2)) {
                             position.set("beacon" + index + "Temp", data.readUnsignedShort());
                         }
                         index += 1;
                     }
                 } else {
+                    // Store unknown NX IO elements as hex strings
                     position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                 }
             }
         }
 
         decodeNetwork(position, model);
 
     }
\ No newline at end of file
