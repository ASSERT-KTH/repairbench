diff --git a/tmp/a7929018-371d-4a54-9ccb-d2ecdd2fa028_buggy.java b/tmp/0b88f49a-47ed-4390-9785-86a9181d369c_fixed.java
index 477325f..997c09b 100644
--- a/tmp/a7929018-371d-4a54-9ccb-d2ecdd2fa028_buggy.java
+++ b/tmp/0b88f49a-47ed-4390-9785-86a9181d369c_fixed.java
@@ -1,178 +1,244 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufUtil;
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+
+// Assume TeltonikaProtocolDecoder context for fields and helper methods
+// like CODEC_*, extended, getConfig, getLastLocation, readExtByte, decodeParameter, decodeNetwork
+
     private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
-        int globalMask = 0x0f;
-
         if (codec == CODEC_GH3000) {
 
+            // GH3000 decoding
             long time = buf.readUnsignedInt() & 0x3fffffff;
             time += 1167609600; // 2007-01-01 00:00:00
 
-            globalMask = buf.readUnsignedByte();
-            if (BitUtil.check(globalMask, 0)) {
+            int globalMask = buf.readUnsignedByte(); // Read the actual mask for GH3000
+            if (BitUtil.check(globalMask, 0)) { // Location data present
 
                 position.setTime(new Date(time * 1000));
-
                 int locationMask = buf.readUnsignedByte();
 
                 if (BitUtil.check(locationMask, 0)) {
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
-
                 if (BitUtil.check(locationMask, 1)) {
                     position.setAltitude(buf.readUnsignedShort());
                 }
-
                 if (BitUtil.check(locationMask, 2)) {
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
-
                 if (BitUtil.check(locationMask, 3)) {
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
-
                 if (BitUtil.check(locationMask, 4)) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
+                position.setValid(BitUtil.check(locationMask, 0)); // Validity based on location presence
 
-                if (BitUtil.check(locationMask, 5)) {
+                if (BitUtil.check(locationMask, 5)) { // Network Info
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
-
                     if (BitUtil.check(locationMask, 6)) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
-
                     if (BitUtil.check(locationMask, 7)) {
-                        cellTower.setOperator(buf.readUnsignedInt());
+                        cellTower.setOperator(buf.readUnsignedInt()); // Assuming 4 bytes, needs spec check
                     }
-
                     position.setNetwork(new Network(cellTower));
-
-                } else {
+                } else { // Only RSSI / Operator ID
                     if (BitUtil.check(locationMask, 6)) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     }
                     if (BitUtil.check(locationMask, 7)) {
-                        position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
+                        position.set(Position.KEY_OPERATOR, buf.readUnsignedInt()); // Assuming 4 bytes, needs spec check
                     }
                 }
 
-            } else {
-
+            } else { // No location data
                 getLastLocation(position, new Date(time * 1000));
+                position.setValid(false);
+            }
 
+            // IO parsing for GH3000 using its globalMask
+            // Assuming 1-byte IDs and counts for GH3000 IO. Mask bits need spec confirmation.
+            if (BitUtil.check(globalMask, 1)) { // 1-byte IO
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                     // Check readability: ID(1) + Value(1) = 2
+                     if (buf.readableBytes() >= 2) {
+                         decodeParameter(position, buf.readUnsignedByte(), buf, 1, codec, model);
+                     } else { buf.skipBytes(buf.readableBytes()); break; } // Avoid IndexOutOfBounds
+                }
+            }
+            if (BitUtil.check(globalMask, 2)) { // 2-byte IO
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                     // Check readability: ID(1) + Value(2) = 3
+                     if (buf.readableBytes() >= 3) {
+                         decodeParameter(position, buf.readUnsignedByte(), buf, 2, codec, model);
+                     } else { buf.skipBytes(buf.readableBytes()); break; }
+                }
+            }
+            if (BitUtil.check(globalMask, 3)) { // 4-byte IO
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                     // Check readability: ID(1) + Value(4) = 5
+                     if (buf.readableBytes() >= 5) {
+                         decodeParameter(position, buf.readUnsignedByte(), buf, 4, codec, model);
+                     } else { buf.skipBytes(buf.readableBytes()); break; }
+                }
+            }
+            // Assuming mask bit 4 for 8-byte IO - Needs spec confirmation
+            if (BitUtil.check(globalMask, 4)) {
+                 int cnt = buf.readUnsignedByte();
+                 for (int j = 0; j < cnt; j++) {
+                     // Check readability: ID(1) + Value(8) = 9
+                     if (buf.readableBytes() >= 9) {
+                         decodeParameter(position, buf.readUnsignedByte(), buf, 8, codec, model);
+                     } else { buf.skipBytes(buf.readableBytes()); break; }
+                 }
             }
 
-        } else {
+        } else { // Codec 8, 8E, 16 (AVL Data Packet)
 
             position.setTime(new Date(buf.readLong()));
-
             position.set("priority", buf.readUnsignedByte());
 
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude(buf.readShort());
             position.setCourse(buf.readUnsignedShort());
 
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
-
-            position.setValid(satellites != 0);
+            position.setValid(satellites >= 3); // Standard validity check (e.g., >= 3 satellites)
 
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
             position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
             if (codec == CODEC_16) {
                 buf.readUnsignedByte(); // generation type
             }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
+            readExtByte(buf, codec, CODEC_8_EXT); // Read and discard total IO count (as original code did)
 
-        }
+            // Read IO data based on N1, N2, N4, N8, N16, NX counts from the stream
+            int idSize = (codec == CODEC_8_EXT || codec == CODEC_16) ? 2 : 1;
 
-        // Read 1 byte data
-        if (BitUtil.check(globalMask, 1)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read N1 IOs
+            int count1 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < count1; j++) {
+                 if (buf.readableBytes() >= idSize + 1) { // Check readability for ID + Value
                      decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
-            }
+                 } else { buf.skipBytes(buf.readableBytes()); break; }
             }
 
-        // Read 2 byte data
-        if (BitUtil.check(globalMask, 2)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read N2 IOs
+            int count2 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < count2; j++) {
+                 if (buf.readableBytes() >= idSize + 2) { // Check readability for ID + Value
                      decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
-            }
+                 } else { buf.skipBytes(buf.readableBytes()); break; }
             }
 
-        // Read 4 byte data
-        if (BitUtil.check(globalMask, 3)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read N4 IOs
+            int count4 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < count4; j++) {
+                 if (buf.readableBytes() >= idSize + 4) { // Check readability for ID + Value
                      decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
-            }
+                 } else { buf.skipBytes(buf.readableBytes()); break; }
             }
 
-        // Read 8 byte data
-        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read N8 IOs
+            int count8 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < count8; j++) {
+                 if (buf.readableBytes() >= idSize + 8) { // Check readability for ID + Value
                      decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
-            }
+                 } else { buf.skipBytes(buf.readableBytes()); break; }
             }
 
-        // Read 16 byte data
+            // Read N16 IOs (Gated by 'extended' flag - same placement as original)
             if (extended) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+                int count16 = readExtByte(buf, codec, CODEC_8_EXT);
+                for (int j = 0; j < count16; j++) {
+                     if (buf.readableBytes() >= idSize + 16) { // Check readability for ID + Value
                          int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
                          position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
+                     } else { buf.skipBytes(buf.readableBytes()); break; }
                 }
             }
 
-        // Read X byte data
+            // Read NX IOs (Variable length - specific to CODEC_8_EXT)
             if (codec == CODEC_8_EXT) {
-            int cnt = buf.readUnsignedShort();
-            for (int j = 0; j < cnt; j++) {
+                if (buf.readableBytes() >= 2) { // Check readability for count NX
+                    int countX = buf.readUnsignedShort();
+                    for (int j = 0; j < countX; j++) {
+                        // Check readability for ID (2) + Length (2) = 4
+                        if (buf.readableBytes() < 4) { buf.skipBytes(buf.readableBytes()); break; }
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedShort();
-                if (id == 256) {
-                    position.set(Position.KEY_VIN,
-                            buf.readSlice(length).toString(StandardCharsets.US_ASCII));
-                } else if (id == 281) {
-                    position.set(Position.KEY_DTCS,
-                            buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
-                } else if (id == 385) {
+                        // Check readability for Value (length)
+                        if (buf.readableBytes() < length) { buf.skipBytes(buf.readableBytes()); break; }
+
+                        // Handle specific NX IDs
+                        if (id == 256) { // VIN
+                            position.set(Position.KEY_VIN, buf.readSlice(length).toString(StandardCharsets.US_ASCII));
+                        } else if (id == 281) { // DTCs
+                            position.set(Position.KEY_DTCS, buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
+                        } else if (id == 385) { // Beacons
                             ByteBuf data = buf.readSlice(length);
-                    data.readUnsignedByte(); // data part
+                            // Skip optional 'part' byte at the start if present
+                            if (data.readableBytes() > 0) { data.readUnsignedByte(); }
                             int index = 1;
                             while (data.isReadable()) {
+                                // Need at least flags(1) + rssi(1) = 2 bytes
+                                if (data.readableBytes() < 2) { break; }
                                 int flags = data.readUnsignedByte();
-                        if (BitUtil.from(flags, 4) > 0) {
+                                int rssi = data.readByte();
+
+                                if (BitUtil.from(flags, 4) > 0) { // Eddystone format
+                                    // Need Namespace(10) + Instance(6) = 16 bytes
+                                    if (data.readableBytes() < 16) { break; }
+                                    position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
+                                    position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
+                                } else { // iBeacon format (corrected)
+                                    // Need UUID(16) + Major(2) + Minor(2) = 20 bytes
+                                    if (data.readableBytes() < 20) { break; }
                                     position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                                     position.set("beacon" + index + "Major", data.readUnsignedShort());
                                     position.set("beacon" + index + "Minor", data.readUnsignedShort());
-                        } else {
-                            position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
-                            position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                                 }
-                        position.set("beacon" + index + "Rssi", (int) data.readByte());
-                        if (BitUtil.check(flags, 1)) {
-                            position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
+                                position.set("beacon" + index + "Rssi", rssi);
+
+                                if (BitUtil.check(flags, 1)) { // Battery present
+                                    if (data.readableBytes() < 2) { break; }
+                                    // Scale needs confirmation, assume mV -> V
+                                    position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.001);
                                 }
-                        if (BitUtil.check(flags, 2)) {
-                            position.set("beacon" + index + "Temp", data.readUnsignedShort());
+                                if (BitUtil.check(flags, 2)) { // Temperature present
+                                    if (data.readableBytes() < 2) { break; }
+                                    // Scale needs confirmation, assume 0.1 degrees C/F
+                                    position.set("beacon" + index + "Temp", data.readShort() * 0.1); // Use readShort for temp
                                 }
                                 index += 1;
                             }
-                } else {
+                        } else { // Generic NX IO
                             position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                         }
                     }
-        }
+                } else { buf.skipBytes(buf.readableBytes()); } // Not enough bytes for NX count
+            } // end if codec == CODEC_8_EXT
+        } // End of non-GH3000 block
 
-        decodeNetwork(position, model);
+        decodeNetwork(position, model); // Decode network info at the end
 
     }
\ No newline at end of file
