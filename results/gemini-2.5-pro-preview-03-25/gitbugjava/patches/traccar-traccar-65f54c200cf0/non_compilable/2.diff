diff --git a/tmp/53ad4ee6-346e-4587-aedf-2fb7b392c6b8_buggy.java b/tmp/b970d416-b45f-49a4-b922-eca04841b773_fixed.java
index 477325f..d9574c0 100644
--- a/tmp/53ad4ee6-346e-4587-aedf-2fb7b392c6b8_buggy.java
+++ b/tmp/b970d416-b45f-49a4-b922-eca04841b773_fixed.java
@@ -1,178 +1,193 @@
     private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
-        int globalMask = 0x0f;
+        int globalMask = 0x0f; // Default mask for standard IO structure
 
         if (codec == CODEC_GH3000) {
 
             long time = buf.readUnsignedInt() & 0x3fffffff;
             time += 1167609600; // 2007-01-01 00:00:00
 
-            globalMask = buf.readUnsignedByte();
-            if (BitUtil.check(globalMask, 0)) {
+            // Use a local variable for the GH3000 specific mask, don't overwrite globalMask
+            int gh3000Mask = buf.readUnsignedByte();
+            if (BitUtil.check(gh3000Mask, 0)) {
 
                 position.setTime(new Date(time * 1000));
 
                 int locationMask = buf.readUnsignedByte();
 
                 if (BitUtil.check(locationMask, 0)) {
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
 
                 if (BitUtil.check(locationMask, 1)) {
                     position.setAltitude(buf.readUnsignedShort());
                 }
 
                 if (BitUtil.check(locationMask, 2)) {
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
 
                 if (BitUtil.check(locationMask, 3)) {
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
 
                 if (BitUtil.check(locationMask, 4)) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
 
                 if (BitUtil.check(locationMask, 5)) {
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
                     if (BitUtil.check(locationMask, 6)) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
 
                     if (BitUtil.check(locationMask, 7)) {
                         cellTower.setOperator(buf.readUnsignedInt());
                     }
 
                     position.setNetwork(new Network(cellTower));
 
                 } else {
                     if (BitUtil.check(locationMask, 6)) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     }
                     if (BitUtil.check(locationMask, 7)) {
                         position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                     }
                 }
 
             } else {
-
                 getLastLocation(position, new Date(time * 1000));
-
             }
 
-        } else {
+            // GH3000 location/status part ends here.
+            // Assume that the standard IO structure (N | N1 | N2 | N4 | N8 | data) follows.
+            // We need to consume the 'N' byte (Total IO count) here, otherwise the common IO parsing
+            // below will incorrectly read 'N' as 'N1'.
+            readExtByte(buf, codec, CODEC_8_EXT); // Read and discard N
+
+            // The common IO parsing below will use the default globalMask (0x0f)
+
+        } else { // Standard Codecs (8, 8_EXT, 16 etc)
 
             position.setTime(new Date(buf.readLong()));
 
             position.set("priority", buf.readUnsignedByte());
 
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude(buf.readShort());
             position.setCourse(buf.readUnsignedShort());
 
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.setValid(satellites != 0);
 
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
+            // Read Event IO ID. This might not be present in GH3000? Handled above.
             position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
             if (codec == CODEC_16) {
                 buf.readUnsignedByte(); // generation type
             }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
+            // Read and discard N (Total IO count) before common IO parsing
+            readExtByte(buf, codec, CODEC_8_EXT);
 
         }
 
+        // Common IO Parsing - relies on N1, N2, N4, N8 counts being read next
+        // Uses the globalMask = 0x0f initialized at the start.
+
         // Read 1 byte data
         if (BitUtil.check(globalMask, 1)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // Reads N1 count
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
             }
         }
 
         // Read 2 byte data
         if (BitUtil.check(globalMask, 2)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // Reads N2 count
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
             }
         }
 
         // Read 4 byte data
         if (BitUtil.check(globalMask, 3)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // Reads N4 count
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
             }
         }
 
         // Read 8 byte data
+        // This block originally excluded CODEC_GH3000. Keep it that way unless necessary.
         if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
+            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // Reads N8 count
             for (int j = 0; j < cnt; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
             }
         }
 
         // Read 16 byte data
         if (extended) {
             int cnt = readExtByte(buf, codec, CODEC_8_EXT);
             for (int j = 0; j < cnt; j++) {
                 int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
                 position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
             }
         }
 
-        // Read X byte data
+        // Read X byte data (Variable length)
         if (codec == CODEC_8_EXT) {
             int cnt = buf.readUnsignedShort();
             for (int j = 0; j < cnt; j++) {
                 int id = buf.readUnsignedShort();
                 int length = buf.readUnsignedShort();
-                if (id == 256) {
+                if (id == 256) { // VIN
                     position.set(Position.KEY_VIN,
                             buf.readSlice(length).toString(StandardCharsets.US_ASCII));
-                } else if (id == 281) {
+                } else if (id == 281) { // DTCs
                     position.set(Position.KEY_DTCS,
                             buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
-                } else if (id == 385) {
+                } else if (id == 385) { // BLE Beacons
                     ByteBuf data = buf.readSlice(length);
-                    data.readUnsignedByte(); // data part
+                    data.readUnsignedByte(); // data part indicator
                     int index = 1;
                     while (data.isReadable()) {
                         int flags = data.readUnsignedByte();
-                        if (BitUtil.from(flags, 4) > 0) {
+                        // Eddystone format uses top 4 bits > 0 in flags, iBeacon uses 0
+                        if (BitUtil.from(flags, 4) > 0) { // Eddystone
                             position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                             position.set("beacon" + index + "Major", data.readUnsignedShort());
                             position.set("beacon" + index + "Minor", data.readUnsignedShort());
-                        } else {
+                        } else { // iBeacon
+                             // Note: Older Teltonika firmware might send iBeacon data differently (UUID first)
                             position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                             position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                         }
                         position.set("beacon" + index + "Rssi", (int) data.readByte());
-                        if (BitUtil.check(flags, 1)) {
-                            position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
+                        if (BitUtil.check(flags, 1)) { // Optional Battery present
+                            position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01); // Voltage
                         }
-                        if (BitUtil.check(flags, 2)) {
-                            position.set("beacon" + index + "Temp", data.readUnsignedShort());
+                        if (BitUtil.check(flags, 2)) { // Optional Temperature present
+                            position.set("beacon" + index + "Temp", data.readUnsignedShort()); // Format depends on device/tag
                         }
                         index += 1;
                     }
-                } else {
+                } else { // Other variable length IOs
                     position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                 }
             }
         }
 
         decodeNetwork(position, model);
 
     }
\ No newline at end of file
