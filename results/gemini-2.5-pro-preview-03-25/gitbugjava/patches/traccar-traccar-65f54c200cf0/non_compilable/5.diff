diff --git a/tmp/b7270bc9-605e-46b7-a018-ad33640dd556_buggy.java b/tmp/fd552190-1f55-4200-9515-ca51fb3b7721_fixed.java
index 477325f..51d1348 100644
--- a/tmp/b7270bc9-605e-46b7-a018-ad33640dd556_buggy.java
+++ b/tmp/fd552190-1f55-4200-9515-ca51fb3b7721_fixed.java
@@ -1,178 +1,235 @@
     private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
-        int globalMask = 0x0f;
+        // globalMask is only relevant for GH3000 within its block.
+        // No need for default initialization here if it's not used outside GH3000 block.
 
         if (codec == CODEC_GH3000) {
 
             long time = buf.readUnsignedInt() & 0x3fffffff;
             time += 1167609600; // 2007-01-01 00:00:00
 
-            globalMask = buf.readUnsignedByte();
-            if (BitUtil.check(globalMask, 0)) {
+            int globalMask = buf.readUnsignedByte(); // Read actual mask for GH3000
+            if (BitUtil.check(globalMask, 0)) { // Check GPS data presence bit
 
                 position.setTime(new Date(time * 1000));
 
                 int locationMask = buf.readUnsignedByte();
 
                 if (BitUtil.check(locationMask, 0)) {
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
 
                 if (BitUtil.check(locationMask, 1)) {
                     position.setAltitude(buf.readUnsignedShort());
                 }
 
                 if (BitUtil.check(locationMask, 2)) {
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
 
                 if (BitUtil.check(locationMask, 3)) {
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
 
                 if (BitUtil.check(locationMask, 4)) {
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
 
                 if (BitUtil.check(locationMask, 5)) {
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
                     if (BitUtil.check(locationMask, 6)) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
 
                     if (BitUtil.check(locationMask, 7)) {
                         cellTower.setOperator(buf.readUnsignedInt());
                     }
 
                     position.setNetwork(new Network(cellTower));
 
                 } else {
                     if (BitUtil.check(locationMask, 6)) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     }
                     if (BitUtil.check(locationMask, 7)) {
                         position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                     }
                 }
 
             } else {
 
                 getLastLocation(position, new Date(time * 1000));
 
             }
 
-        } else {
+            // IO Data for GH3000 (based on its globalMask)
+            // Assuming GH3000 uses 1 byte count/id based on typical embedded protocols.
+
+            // Read 1 byte data
+            if (BitUtil.check(globalMask, 1)) {
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                    // Assuming decodeParameter handles reading based on length=1 and interprets ID as byte
+                    decodeParameter(position, buf.readUnsignedByte(), buf, 1, codec, model);
+                }
+            }
+
+            // Read 2 byte data
+            if (BitUtil.check(globalMask, 2)) {
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                     // Assuming decodeParameter handles reading based on length=2 and interprets ID as byte
+                   decodeParameter(position, buf.readUnsignedByte(), buf, 2, codec, model);
+                }
+            }
+
+            // Read 4 byte data
+            if (BitUtil.check(globalMask, 3)) {
+                int cnt = buf.readUnsignedByte();
+                for (int j = 0; j < cnt; j++) {
+                     // Assuming decodeParameter handles reading based on length=4 and interprets ID as byte
+                    decodeParameter(position, buf.readUnsignedByte(), buf, 4, codec, model);
+                }
+            }
+            // Note: GH3000 likely does not have 8, 16, X byte IOs in this format.
+
+        } else { // Standard Teltonika Codecs (8, 8 Extended, 16, etc.)
 
             position.setTime(new Date(buf.readLong()));
 
             position.set("priority", buf.readUnsignedByte());
 
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude(buf.readShort());
             position.setCourse(buf.readUnsignedShort());
 
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.setValid(satellites != 0);
 
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
             position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
             if (codec == CODEC_16) {
                 buf.readUnsignedByte(); // generation type
             }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
+            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records count (N) - discarded as counts below are used
 
-        }
-
-        // Read 1 byte data
-        if (BitUtil.check(globalMask, 1)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // --- IO Elements Reading (Moved inside the 'else' block) ---
+            // Read 1 byte data (N1 + N1 * (ID + Value))
+            int cnt1 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt1; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
             }
-        }
 
-        // Read 2 byte data
-        if (BitUtil.check(globalMask, 2)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read 2 byte data (N2 + N2 * (ID + Value))
+            int cnt2 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt2; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
             }
-        }
 
-        // Read 4 byte data
-        if (BitUtil.check(globalMask, 3)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read 4 byte data (N4 + N4 * (ID + Value))
+            int cnt4 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt4; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
             }
-        }
 
-        // Read 8 byte data
-        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+            // Read 8 byte data (N8 + N8 * (ID + Value))
+            int cnt8 = readExtByte(buf, codec, CODEC_8_EXT);
+            for (int j = 0; j < cnt8; j++) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
             }
-        }
 
-        // Read 16 byte data
+            // Read 16 byte data (N16 + N16 * (ID + Value))
+            // Assuming 'extended' is a field available in the class scope indicating a variant with 16-byte IOs
             if (extended) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
+                int cnt16 = readExtByte(buf, codec, CODEC_8_EXT);
+                for (int j = 0; j < cnt16; j++) {
                     int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
+                    // decodeParameter might not handle length 16, using generic dump as in original code
                     position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
                 }
             }
 
-        // Read X byte data
+            // Read X byte data (NX + NX * (ID + Length + Value))
             if (codec == CODEC_8_EXT) {
-            int cnt = buf.readUnsignedShort();
-            for (int j = 0; j < cnt; j++) {
+                int cntX = buf.readUnsignedShort();
+                for (int j = 0; j < cntX; j++) {
                     int id = buf.readUnsignedShort();
                     int length = buf.readUnsignedShort();
-                if (id == 256) {
+                    // Keep original X-byte handling logic, including specific IDs
+                    // Ensure buffer has enough readable bytes before reading slices
+                    if (buf.readableBytes() < length) {
+                        // Avoid IndexOutOfBoundsException if length is incorrect
+                        break; // Or log an error
+                    }
+                    if (id == 256) { // VIN
                         position.set(Position.KEY_VIN,
                                 buf.readSlice(length).toString(StandardCharsets.US_ASCII));
-                } else if (id == 281) {
+                    } else if (id == 281) { // DTCs
                         position.set(Position.KEY_DTCS,
                                 buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
-                } else if (id == 385) {
+                    } else if (id == 385) { // Beacons
                         ByteBuf data = buf.readSlice(length);
+                        // Check readable bytes for safety within this slice too
+                        if (data.readableBytes() > 0) {
                             data.readUnsignedByte(); // data part
                             int index = 1;
-                    while (data.isReadable()) {
+                            while (data.readableBytes() >= 17) { // Min readable bytes needed (1 flag + 1 RSSI + 6+10 or 16+2+2)
                                 int flags = data.readUnsignedByte();
-                        if (BitUtil.from(flags, 4) > 0) {
+                                position.set("beacon" + index + "Rssi", (int) data.readByte()); // Read RSSI first
+                                if (BitUtil.from(flags, 4) > 0) { // Eddystone UUID (16+2+2 = 20 bytes)
+                                    if (data.readableBytes() < 20) break;
                                     position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                                     position.set("beacon" + index + "Major", data.readUnsignedShort());
                                     position.set("beacon" + index + "Minor", data.readUnsignedShort());
-                        } else {
+                                } else { // Eddystone UID (10+6 = 16 bytes)
+                                    if (data.readableBytes() < 16) break;
                                     position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                                     position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                                 }
-                        position.set("beacon" + index + "Rssi", (int) data.readByte());
-                        if (BitUtil.check(flags, 1)) {
+                                if (BitUtil.check(flags, 1)) { // Battery present (2 bytes)
+                                    if (data.readableBytes() < 2) break;
                                     position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
                                 }
-                        if (BitUtil.check(flags, 2)) {
+                                if (BitUtil.check(flags, 2)) { // Temperature present (2 bytes)
+                                     if (data.readableBytes() < 2) break;
                                    position.set("beacon" + index + "Temp", data.readUnsignedShort());
                                 }
                                 index += 1;
                             }
+                        }
+                    } else if (id == 235) { // 0xEB - Eye Sensor / Tag data
+                         if (length >= 19 && buf.readableBytes() >= length) { // Check length and buffer bounds
+                             // Read the full slice first to avoid partial reads if an error occurs
+                             ByteBuf data = buf.readSlice(length);
+                             position.set("tag1Mac", ByteBufUtil.hexDump(data.readSlice(6)));
+                             data.readUnsignedByte(); // reserved
+                             position.set("tag1Temp", data.readShort() * 0.01);
+                             position.set("tag1Battery", data.readUnsignedShort()); // Read as short, store integer value
+                             position.set("tag1Humidity", data.readUnsignedByte() * 0.5);
+                             data.readUnsignedByte(); // flags
+                             position.set("tag1Acc", ByteBufUtil.hexDump(data.readSlice(6)));
+                             // Slice automatically handles remaining bytes if length > 19
                         } else {
+                             // Skip the declared length even if invalid/unreadable to try parsing next element
+                             buf.skipBytes(Math.min(length, buf.readableBytes()));
+                        }
+                    } else { // Generic X-byte handling
                         position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                     }
                 }
-        }
+            } // end CODEC_8_EXT X-byte
 
+        } // end standard codecs 'else'
+
+        // Common post-processing step
         decodeNetwork(position, model);
 
     }
\ No newline at end of file
