diff --git a/tmp/e35ee47c-5769-4789-a987-1cc5b8587b31_buggy.java b/tmp/94438c04-e50b-41bb-8eb3-a123fe05b5d6_fixed.java
index 7b8ee38..19e3c61 100644
--- a/tmp/e35ee47c-5769-4789-a987-1cc5b8587b31_buggy.java
+++ b/tmp/94438c04-e50b-41bb-8eb3-a123fe05b5d6_fixed.java
@@ -1,179 +1,269 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
-        buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1); // '*' delimiter
+        // Basic validation: Check minimum length and start/end markers
+        if (buf.readableBytes() < 10 || buf.getByte(buf.readerIndex()) != '[' || buf.getByte(buf.writerIndex() - 1) != ']') {
+             return null;
+        }
 
-        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        buf.skipBytes(1); // Skip '['
+
+        // Manufacturer (2 bytes)
+        String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+        if (buf.readByte() != '*') { // Check and skip '*' delimiter
+             return null; // Malformed - delimiter missing
+        }
+
+        // ID (until next '*')
+        int idEndIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (idEndIndex < 0) {
+            return null; // Malformed - ID delimiter not found
+        }
+        String id = buf.readSlice(idEndIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        buf.skipBytes(1); // Skip '*' after ID
+
+        // Get Device Session
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
+            // Device not registered or found
             return null;
         }
 
-        buf.skipBytes(1); // '*' delimiter
-
+        // ---- Start: Refined Index/Length Parsing ----
         String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
-            hasIndex = true;
+        // Find the next two '*' delimiters to determine structure: ID*INDEX*LEN*TYPE or ID*LEN*TYPE
+        int star1 = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (star1 < 0) {
+            return null; // Malformed, expected at least '*' separating length
+        }
+
+        int star2 = buf.indexOf(star1 + 1, buf.writerIndex(), (byte) '*');
+        if (star2 < 0) {
+             return null; // Malformed, expected '*' separating length/type
+        }
+
+        // Check if the field between star1 and star2 looks like a 4-hex length.
+        // This indicates the format is ID*INDEX*LENGTH*TYPE
+        // Ensure star2 allows reading 4 bytes for length and the following '*'
+        if (star2 == star1 + 5 && star2 < buf.writerIndex()) {
+             String potentialLength = buf.toString(star1 + 1, 4, StandardCharsets.US_ASCII);
+             if (potentialLength.matches("\\p{XDigit}{4}")) {
+                 // Format includes index: ID*INDEX*LENGTH*TYPE
+                 int indexLength = star1 - buf.readerIndex();
+                 if (indexLength > 0) {
                      index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
                  }
+                 // Skip the index field (if read) and the '*' delimiter after it
+                 buf.readerIndex(star1 + 1);
+                 // Skip the length field (4 bytes) and the '*' delimiter after it
+                 buf.skipBytes(4 + 1);
+             } else {
+                 // Does not match hex length format, assume ID*LENGTH*TYPE instead.
+                 // Skip the length field (up to star1) and the '*' delimiter after it.
+                 buf.readerIndex(star1 + 1);
+             }
+        } else {
+            // Format is likely ID*LENGTH*TYPE. The field before star1 is the length.
+            // Skip the length field (up to star1) and the '*' delimiter after it.
+            buf.readerIndex(star1 + 1);
+            // Reader is now positioned after the '*' separating Length and Type.
+        }
+        // ---- End: Refined Index/Length Parsing ----
 
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+        // Adjust writer index to ignore trailing ']' BEFORE parsing type/data.
+        int originalWriterIndex = buf.writerIndex();
+        buf.writerIndex(originalWriterIndex - 1);
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+        // Find Type (until ',' or end)
+        int typeEndIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (typeEndIndex < 0) {
+            // No comma found, type goes up to the adjusted writer index (before ']')
+            typeEndIndex = buf.writerIndex();
         }
+        // Ensure typeEndIndex is valid before reading slice
+        if (typeEndIndex < buf.readerIndex()) {
+            buf.writerIndex(originalWriterIndex); // Restore writer index before returning
+            return null; // Should not happen if logic is correct, but be safe
+        }
+        String type = buf.readSlice(typeEndIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+        // Advance reader past type and possibly comma
+        if (typeEndIndex < buf.writerIndex()) {
+             // Found a comma, move reader past it
+             buf.readerIndex(typeEndIndex + 1);
+        } else {
+             // No comma, moved reader to the end (just before ']')
+             buf.readerIndex(typeEndIndex);
         }
 
+        // Restore writer index - needed for subsequent operations (like buf.toString(), buf.slice()) using readableBytes
+        buf.writerIndex(originalWriterIndex);
+
+        // --- Type Handling Logic with added Robustness ---
+
         if (type.equals("INIT")) {
-
             sendResponse(channel, id, index, "INIT,1");
-
         } else if (type.equals("LK")) {
-
             sendResponse(channel, id, index, "LK");
-
             if (buf.isReadable()) {
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+                // Use remaining readable bytes, respecting original writer index
+                String data = buf.toString(buf.readerIndex(), buf.readableBytes(), StandardCharsets.US_ASCII);
+                String[] values = data.split(",");
                 if (values.length >= 3) {
+                    try {
                         Position position = new Position(getProtocolName());
                         position.setDeviceId(deviceSession.getDeviceId());
-
-                    getLastLocation(position, null);
-
+                        getLastLocation(position, null); // Potential NPE source inside this method
                         position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                         position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
                         return position;
+                    } catch (NumberFormatException e) {
+                        // Log parsing error if needed
                     }
                 }
-
+            }
+            // Return null if not readable, not enough parts, or parse error
+            return null;
         } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
-            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
-
+            String data = buf.toString(buf.readerIndex(), buf.readableBytes(), StandardCharsets.US_ASCII);
+            Position position = decodePosition(deviceSession, data); // Potential NPE source inside this method
             if (type.startsWith("AL")) {
-                if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                }
                 sendResponse(channel, id, index, "AL");
+                // decodePosition should ideally set the specific alarm type based on data
             }
-
             return position;
-
         } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
             sendResponse(channel, id, index, type);
-
         } else if (type.equalsIgnoreCase("PULSE")
                 || type.equalsIgnoreCase("HEART")
                 || type.equalsIgnoreCase("BLOOD")
                 || type.equalsIgnoreCase("BPHRT")
                 || type.equalsIgnoreCase("btemp2")) {
-
             if (buf.isReadable()) {
-
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-
-                getLastLocation(position, new Date());
-
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+                getLastLocation(position, new Date()); // Potential NPE source inside this method
+                String data = buf.toString(buf.readerIndex(), buf.readableBytes(), StandardCharsets.US_ASCII);
+                String[] values = data.split(",");
                 int valueIndex = 0;
-
+                try {
                     if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                        // Check length before accessing indices
+                        if (values.length > valueIndex + 1 && Integer.parseInt(values[valueIndex++]) > 0) {
                             position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                         }
                     } else {
                         if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                             // Check length before accessing indices
+                            if (values.length > valueIndex + 1) {
                                 position.set("pressureHigh", values[valueIndex++]);
                                 position.set("pressureLow", values[valueIndex++]);
                             }
-                    if (valueIndex <= values.length - 1) {
+                        }
+                         // Check length before accessing index
+                        if (values.length > valueIndex) {
                             position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                         }
                     }
-
+                    // Only return position if some data was successfully parsed and added
+                    if (!position.getAttributes().isEmpty()) {
                         return position;
-
                     }
-
+                } catch (NumberFormatException e) {
+                    // Log parsing error if needed
+                }
+            }
+            return null; // Return null if error, no data, or not readable
         } else if (type.equals("img")) {
-
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
-
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+            getLastLocation(position, null); // Potential NPE source inside this method
+            // Find first comma after reader index to locate end of time metadata
+            int timeIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',');
+            // Check if time metadata format is plausible and buffer has enough data
+            if (timeIndex >= buf.readerIndex() && timeIndex + 12 + 2 <= buf.writerIndex()) {
+                 // Advance reader past the time metadata (assuming 12 chars + 2 delimiters)
                  buf.readerIndex(timeIndex + 12 + 2);
-            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
+                 if (buf.isReadable()) {
+                    // Pass the remaining readable slice as image data
+                    position.set(Position.KEY_IMAGE, writeMediaFile(id, buf.readRetainedSlice(buf.readableBytes()), "jpg")); // Potential NPE source inside this method
                     return position;
-
+                 }
+            }
+            // Return null if format is wrong or no image data
         } else if (type.equals("JXTK")) {
+            // Find the 4th comma relative to the current reader index to locate end of metadata
+            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4);
+            if (dataIndex < buf.readerIndex()) {
+                 // Log error: Malformed JXTK message metadata (less than 4 commas)
+                 return null;
+             }
+
+            String metadata = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString();
+            String[] values = metadata.split(",");
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+            if (values.length < 4) {
+                 // Log error: Malformed JXTK message metadata (less than 4 parts)
+                 return null;
+             }
 
-            int current = Integer.parseInt(values[2]);
-            int total = Integer.parseInt(values[3]);
+             // Move reader past metadata + 4th comma
+             buf.readerIndex(dataIndex + 1);
+
+             int current, total;
+             try {
+                 current = Integer.parseInt(values[2]);
+                 total = Integer.parseInt(values[3]);
+             } catch (NumberFormatException e) {
+                 // Log error: Invalid current/total numbers
+                 return null;
+             }
 
-            if (audio == null) {
-                audio = Unpooled.buffer();
+             // State variable 'audio' needs to be an instance member of the decoder class
+             // Use 'this.audio' to refer to the instance variable
+             if (this.audio == null) {
+                 this.audio = Unpooled.buffer();
              }
-            audio.writeBytes(buf);
+             // Write the remaining payload (audio data) from the input buffer to the accumulating buffer
+             this.audio.writeBytes(buf, buf.readerIndex(), buf.readableBytes());
+             // Consume the written bytes from the input buffer
+             buf.readerIndex(buf.writerIndex());
 
              sendResponse(channel, id, index, "JXTKR,1");
 
              if (current < total) {
-                return null;
+                 return null; // Not the last part, wait for more data
              } else {
+                 // Last part, process accumulated audio
                  Position position = new Position(getProtocolName());
                  position.setDeviceId(deviceSession.getDeviceId());
-                getLastLocation(position, null);
-                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
-                audio.release();
-                audio = null;
+                 getLastLocation(position, null); // Potential NPE source inside this method
+                 try {
+                     // Pass the accumulated audio buffer to be written
+                     position.set(Position.KEY_AUDIO, writeMediaFile(id, this.audio, "amr")); // Potential NPE source inside this method
+                 } finally {
+                     // Ensure audio buffer is released and nulled, even if writeMediaFile fails
+                     if (this.audio != null) {
+                          this.audio.release();
+                          this.audio = null; // Reset state variable for next audio stream
+                     }
+                 }
                  return position;
              }
-
         } else if (type.equals("TK")) {
-
-            if (buf.readableBytes() == 1) {
-                return null;
-            }
-
+            if (buf.isReadable()) {
                  Position position = new Position(getProtocolName());
                  position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
-
-            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
+                 getLastLocation(position, null); // Potential NPE source inside this method
+                 // Pass the remaining readable slice as audio data
+                 position.set(Position.KEY_AUDIO, writeMediaFile(id, buf.readRetainedSlice(buf.readableBytes()), "amr")); // Potential NPE source inside this method
                  return position;
-
+            }
         }
 
-        return null;
+        return null; // Default return if type not handled or error occurred
     }
\ No newline at end of file
